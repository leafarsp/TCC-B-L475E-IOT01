
B-L475E-IOT01_MQTT_FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 UNINIT_FIXED_LOC 00002a38  08064000  08064000  00054000  2**11
                  ALLOC
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00027dc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000bc58  08027f50  08027f50  00037f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08033ba8  08033ba8  000507b0  2**0
                  CONTENTS
  5 .ARM          00000008  08033ba8  08033ba8  00043ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08033bb0  08033bb0  000507b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08033bb0  08033bb0  00043bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08033bb8  08033bb8  00043bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000007b0  20000000  08033bc0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000120c  200007b0  08034370  000507b0  2**2
                  ALLOC
 11 ._user_heap_stack 00003004  200019bc  08034370  000519bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000507b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000c9566  00000000  00000000  000507e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0001684f  00000000  00000000  00119d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00063c57  00000000  00000000  00130595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003cb8  00000000  00000000  001941f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00006478  00000000  00000000  00197ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003eef9  00000000  00000000  0019e320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000775d2  00000000  00000000  001dd219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00124b8b  00000000  00000000  002547eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00379376  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dbcc  00000000  00000000  003793cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007b0 	.word	0x200007b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08027f34 	.word	0x08027f34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007b4 	.word	0x200007b4
 80001cc:	08027f34 	.word	0x08027f34

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9ef 	b.w	8001008 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f883 	bl	8000d44 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f876 	bl	8000d44 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f865 	bl	8000d44 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f857 	bl	8000d44 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <TimingSystemGetSystemTime>:
 * @brief  Get RTC time
* @param  void
* @retval time_t : time retrieved from RTC
 */
time_t 	TimingSystemGetSystemTime(void)
{
 800100c:	b530      	push	{r4, r5, lr}
  struct tm*    pCalendar;
  
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;
  returnTime = 0;  
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 800100e:	4d1d      	ldr	r5, [pc, #116]	; (8001084 <TimingSystemGetSystemTime+0x78>)
{
 8001010:	b087      	sub	sp, #28
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 8001012:	4628      	mov	r0, r5
 8001014:	f020 ffb0 	bl	8021f78 <gmtime>

  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 8001018:	2200      	movs	r2, #0
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 800101a:	4604      	mov	r4, r0
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 800101c:	a901      	add	r1, sp, #4
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <TimingSystemGetSystemTime+0x7c>)
 8001020:	f009 fdbd 	bl	800ab9e <HAL_RTC_GetTime>
 8001024:	4602      	mov	r2, r0
 8001026:	b128      	cbz	r0, 8001034 <TimingSystemGetSystemTime+0x28>
  returnTime = 0;  
 8001028:	2200      	movs	r2, #0
 800102a:	2300      	movs	r3, #0
#endif
    returnTime        = mktime(pCalendar);
    timeSyncSystem    = returnTime;
  }
  return returnTime;
}
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	b007      	add	sp, #28
 8001032:	bd30      	pop	{r4, r5, pc}
     (HAL_RTC_GetDate(&hrtc,&sdatestructure,FORMAT_BIN)==HAL_OK)) {
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <TimingSystemGetSystemTime+0x7c>)
 8001036:	4669      	mov	r1, sp
 8001038:	f009 fdd6 	bl	800abe8 <HAL_RTC_GetDate>
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 800103c:	2800      	cmp	r0, #0
 800103e:	d1f3      	bne.n	8001028 <TimingSystemGetSystemTime+0x1c>
    pCalendar->tm_year           = sdatestructure.Year +100;
 8001040:	f89d 3003 	ldrb.w	r3, [sp, #3]
    pCalendar->tm_isdst          = 0;
 8001044:	6220      	str	r0, [r4, #32]
    pCalendar->tm_year           = sdatestructure.Year +100;
 8001046:	3364      	adds	r3, #100	; 0x64
 8001048:	6163      	str	r3, [r4, #20]
    pCalendar->tm_mon            = sdatestructure.Month-1;
 800104a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800104e:	3b01      	subs	r3, #1
 8001050:	6123      	str	r3, [r4, #16]
    pCalendar->tm_mday           = sdatestructure.Date;
 8001052:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001056:	60e3      	str	r3, [r4, #12]
    pCalendar->tm_wday           = sdatestructure.WeekDay - 1;
 8001058:	f89d 3000 	ldrb.w	r3, [sp]
 800105c:	3b01      	subs	r3, #1
 800105e:	61a3      	str	r3, [r4, #24]
    pCalendar->tm_hour           = stimestructure.Hours;
 8001060:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001064:	60a3      	str	r3, [r4, #8]
    pCalendar->tm_min            = stimestructure.Minutes;
 8001066:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800106a:	6063      	str	r3, [r4, #4]
    pCalendar->tm_sec            = stimestructure.Seconds;
 800106c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001070:	6023      	str	r3, [r4, #0]
    returnTime        = mktime(pCalendar);
 8001072:	4620      	mov	r0, r4
 8001074:	f021 f9a0 	bl	80223b8 <mktime>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
    timeSyncSystem    = returnTime;
 800107c:	e9c5 2300 	strd	r2, r3, [r5]
  return returnTime;
 8001080:	e7d4      	b.n	800102c <TimingSystemGetSystemTime+0x20>
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000
 8001088:	20001104 	.word	0x20001104

0800108c <dialog_ask>:
  * @brief  Ask yes/no question.
  * @param  None
  * @retval None
  */
bool dialog_ask(char *s)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
  char console_yn;
  do
  {
    printf("%s",s);
 800108e:	4e0b      	ldr	r6, [pc, #44]	; (80010bc <dialog_ask+0x30>)
{
 8001090:	4605      	mov	r5, r0
    printf("%s",s);
 8001092:	4629      	mov	r1, r5
 8001094:	4630      	mov	r0, r6
 8001096:	f022 f9b3 	bl	8023400 <iprintf>
    console_yn= getchar();
 800109a:	f020 ff5b 	bl	8021f54 <getchar>
 800109e:	b2c4      	uxtb	r4, r0
    printf("\b");
 80010a0:	2008      	movs	r0, #8
 80010a2:	f022 f9c5 	bl	8023430 <putchar>
  }
  while((console_yn != 'y') && (console_yn != 'n') && (console_yn != '\n'));
 80010a6:	2c79      	cmp	r4, #121	; 0x79
 80010a8:	d005      	beq.n	80010b6 <dialog_ask+0x2a>
 80010aa:	2c6e      	cmp	r4, #110	; 0x6e
 80010ac:	d001      	beq.n	80010b2 <dialog_ask+0x26>
 80010ae:	2c0a      	cmp	r4, #10
 80010b0:	d1ef      	bne.n	8001092 <dialog_ask+0x6>
  if (console_yn == 'y') return true;
  return false;
 80010b2:	2000      	movs	r0, #0
 80010b4:	e000      	b.n	80010b8 <dialog_ask+0x2c>
  if (console_yn == 'y') return true;
 80010b6:	2001      	movs	r0, #1
}
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
 80010ba:	bf00      	nop
 80010bc:	08031349 	.word	0x08031349

080010c0 <CLOUD_Error_Handler>:
  * @param  None
  * @retval None
  */
void CLOUD_Error_Handler(int errorCode)
{
  switch (errorCode)
 80010c0:	3008      	adds	r0, #8
{
 80010c2:	b508      	push	{r3, lr}
 80010c4:	2806      	cmp	r0, #6
 80010c6:	d808      	bhi.n	80010da <CLOUD_Error_Handler+0x1a>
 80010c8:	e8df f000 	tbb	[pc, r0]
 80010cc:	12141604 	.word	0x12141604
 80010d0:	0e10      	.short	0x0e10
 80010d2:	04          	.byte	0x04
 80010d3:	00          	.byte	0x00
  {
    case (CLOUD_DEMO_C2C_INITIALIZATION_ERROR):
    case (CLOUD_DEMO_WIFI_INITIALIZATION_ERROR):
    {
      printf("Error initializing the module!\n");
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <CLOUD_Error_Handler+0x3c>)
      
      break;
    }
    case (CLOUD_DEMO_TIMEDATE_ERROR):
    {
      printf("Error initializing the RTC from the network time!\n");
 80010d6:	f022 fa2f 	bl	8023538 <puts>
    }
  }
  
  while (1)
  {
    BSP_LED_Toggle(LED_GREEN);
 80010da:	2000      	movs	r0, #0
 80010dc:	f004 f824 	bl	8005128 <BSP_LED_Toggle>
    HAL_Delay(200);
 80010e0:	20c8      	movs	r0, #200	; 0xc8
 80010e2:	f007 fc47 	bl	8008974 <HAL_Delay>
  while (1)
 80010e6:	e7f8      	b.n	80010da <CLOUD_Error_Handler+0x1a>
      printf("Error detecting module!\n");
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <CLOUD_Error_Handler+0x40>)
 80010ea:	e7f4      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error connecting to AP!\n");
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <CLOUD_Error_Handler+0x44>)
 80010ee:	e7f2      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error retrieving IP address!\n");
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <CLOUD_Error_Handler+0x48>)
 80010f2:	e7f0      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error connecting to Cloud!\n");
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <CLOUD_Error_Handler+0x4c>)
 80010f6:	e7ee      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error initializing the RTC from the network time!\n");
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <CLOUD_Error_Handler+0x50>)
 80010fa:	e7ec      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
 80010fc:	0802d3f4 	.word	0x0802d3f4
 8001100:	0802d413 	.word	0x0802d413
 8001104:	0802d42b 	.word	0x0802d42b
 8001108:	0802d443 	.word	0x0802d443
 800110c:	0802d460 	.word	0x0802d460
 8001110:	0802d47b 	.word	0x0802d47b

08001114 <platform_init>:


const firmware_version_t version = { FW_VERSION_NAME, FW_VERSION_MAJOR, FW_VERSION_MINOR, FW_VERSION_PATCH, FW_VERSION_DATE};

int platform_init(void)
{
 8001114:	b510      	push	{r4, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
  net_ipaddr_t ipAddr;
  net_macaddr_t macAddr;
  const firmware_version_t  *fw_version=&version;;
  unsigned int random_number = 0;
 8001118:	2300      	movs	r3, #0
#ifdef HEAP_DEBUG
  stack_measure_prologue();
#endif
  
  /* Initialize the seed of the stdlib rand() SW implementation from the RNG. */
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 800111a:	4852      	ldr	r0, [pc, #328]	; (8001264 <platform_init+0x150>)
  unsigned int random_number = 0;
 800111c:	9304      	str	r3, [sp, #16]
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 800111e:	a904      	add	r1, sp, #16
 8001120:	f009 fb95 	bl	800a84e <HAL_RNG_GenerateRandomNumber>
 8001124:	b910      	cbnz	r0, 800112c <platform_init+0x18>
  {
    srand(random_number);
 8001126:	9804      	ldr	r0, [sp, #16]
 8001128:	f022 fa0e 	bl	8023548 <srand>
  }

  printf("\n");
 800112c:	200a      	movs	r0, #10
 800112e:	f022 f97f 	bl	8023430 <putchar>
  printf("*************************************************************\n");
 8001132:	484d      	ldr	r0, [pc, #308]	; (8001268 <platform_init+0x154>)
  printf("*************************************************************\n");

  
  printf("\n*** Board personalization ***\n\n");
  /* Network initialization */
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 8001134:	4c4d      	ldr	r4, [pc, #308]	; (800126c <platform_init+0x158>)
  printf("*************************************************************\n");
 8001136:	f022 f9ff 	bl	8023538 <puts>
  printf("***   STM32 IoT Discovery kit for                         \n");
 800113a:	484d      	ldr	r0, [pc, #308]	; (8001270 <platform_init+0x15c>)
 800113c:	f022 f9fc 	bl	8023538 <puts>
  printf("***      STM32F413/STM32F769/STM32L475/STM32L496 MCU      \n");
 8001140:	484c      	ldr	r0, [pc, #304]	; (8001274 <platform_init+0x160>)
 8001142:	f022 f9f9 	bl	8023538 <puts>
  printf("***   %s Cloud Connectivity Demonstration                 \n",fw_version->name);
 8001146:	494c      	ldr	r1, [pc, #304]	; (8001278 <platform_init+0x164>)
 8001148:	484c      	ldr	r0, [pc, #304]	; (800127c <platform_init+0x168>)
 800114a:	f022 f959 	bl	8023400 <iprintf>
  printf("***   FW version %d.%d.%d - %s      \n",
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <platform_init+0x16c>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	461a      	mov	r2, r3
 8001156:	2101      	movs	r1, #1
 8001158:	484a      	ldr	r0, [pc, #296]	; (8001284 <platform_init+0x170>)
 800115a:	f022 f951 	bl	8023400 <iprintf>
  printf("*************************************************************\n");
 800115e:	4842      	ldr	r0, [pc, #264]	; (8001268 <platform_init+0x154>)
 8001160:	f022 f9ea 	bl	8023538 <puts>
  printf("\n*** Board personalization ***\n\n");
 8001164:	4848      	ldr	r0, [pc, #288]	; (8001288 <platform_init+0x174>)
 8001166:	f022 f9e7 	bl	8023538 <puts>
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <platform_init+0x178>)
 800116c:	2101      	movs	r1, #1
 800116e:	4620      	mov	r0, r4
 8001170:	f000 fd5c 	bl	8001c2c <net_init>
 8001174:	b110      	cbz	r0, 800117c <platform_init+0x68>
      case NET_IP_V4:
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
        break;
      case NET_IP_V6:
      default:
        CLOUD_Error_Handler(CLOUD_DEMO_IP_ADDRESS_ERROR);
 8001176:	f06f 0004 	mvn.w	r0, #4
 800117a:	e043      	b.n	8001204 <platform_init+0xf0>
  if (net_get_mac_address(hnet, &macAddr) == NET_OK)
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	a905      	add	r1, sp, #20
 8001180:	f000 fe02 	bl	8001d88 <net_get_mac_address>
 8001184:	2800      	cmp	r0, #0
 8001186:	d13b      	bne.n	8001200 <platform_init+0xec>
    msg_info("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n",
 8001188:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001198:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800119c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	483b      	ldr	r0, [pc, #236]	; (8001290 <platform_init+0x17c>)
 80011a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80011a8:	f022 f92a 	bl	8023400 <iprintf>
  HAL_Delay(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b0:	f007 fbe0 	bl	8008974 <HAL_Delay>
  msg_info("Retrieving the IP address.\n");
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <platform_init+0x180>)
 80011b6:	f022 f9bf 	bl	8023538 <puts>
  if (net_get_ip_address(hnet, &ipAddr) != NET_OK)
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	a907      	add	r1, sp, #28
 80011be:	f000 fdb3 	bl	8001d28 <net_get_ip_address>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1d7      	bne.n	8001176 <platform_init+0x62>
    switch(ipAddr.ipv)
 80011c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1d3      	bne.n	8001176 <platform_init+0x62>
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
 80011ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80011d2:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80011d6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	482e      	ldr	r0, [pc, #184]	; (8001298 <platform_init+0x184>)
 80011de:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80011e2:	f022 f90d 	bl	8023400 <iprintf>
  /* Security and cloud parameters definition */
  /* Define, or allow to update if the user button is pushed. */
  
  
  
  skip_reconf = (checkTLSRootCA() == 0)
 80011e6:	f000 faf7 	bl	80017d8 <checkTLSRootCA>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
    && (checkIoTDeviceConfig() == 0);
 80011ea:	b168      	cbz	r0, 8001208 <platform_init+0xf4>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    if ((checkIoTDeviceConfig() != 0) || dialog_ask("Do you want to update your IoT device connection parameters? (y/n)\n"))
 80011ec:	f000 fc30 	bl	8001a50 <checkIoTDeviceConfig>
 80011f0:	bb40      	cbnz	r0, 8001244 <platform_init+0x130>
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <platform_init+0x188>)
 80011f4:	f7ff ff4a 	bl	800108c <dialog_ask>
 80011f8:	bb20      	cbnz	r0, 8001244 <platform_init+0x130>
      {
        msg_error("Failed configuring the IoT device.\n");
      }
    }
#if defined(USE_MBED_TLS) || (!defined(USE_CLEAR_TIMEDATE))
    updateTLSCredentials();
 80011fa:	f000 fb1d 	bl	8001838 <updateTLSCredentials>
 80011fe:	e017      	b.n	8001230 <platform_init+0x11c>
    CLOUD_Error_Handler(CLOUD_DEMO_MAC_ADDRESS_ERROR);
 8001200:	f06f 0002 	mvn.w	r0, #2
 8001204:	f7ff ff5c 	bl	80010c0 <CLOUD_Error_Handler>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
 8001208:	f000 fafe 	bl	8001808 <checkTLSDeviceConfig>
 800120c:	b118      	cbz	r0, 8001216 <platform_init+0x102>
 800120e:	f002 fae1 	bl	80037d4 <app_needs_device_keypair>
 8001212:	2800      	cmp	r0, #0
 8001214:	d1ea      	bne.n	80011ec <platform_init+0xd8>
    && (checkIoTDeviceConfig() == 0);
 8001216:	f000 fc1b 	bl	8001a50 <checkIoTDeviceConfig>
  if (skip_reconf == true)
 800121a:	2800      	cmp	r0, #0
 800121c:	d1e6      	bne.n	80011ec <platform_init+0xd8>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update "
 800121e:	4820      	ldr	r0, [pc, #128]	; (80012a0 <platform_init+0x18c>)
 8001220:	f022 f98a 	bl	8023538 <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 8001224:	f241 3088 	movw	r0, #5000	; 0x1388
 8001228:	f002 ffb8 	bl	800419c <Button_WaitForPush>
  if (skip_reconf == false)
 800122c:	2800      	cmp	r0, #0
 800122e:	d1dd      	bne.n	80011ec <platform_init+0xd8>
#endif
  }
  /* End of security and cloud parameters definition */
  
  msg_info("Setting the RTC from the network time.\n");
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <platform_init+0x190>)
 8001232:	f022 f981 	bl	8023538 <puts>
#ifdef CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE
  if (setRTCTimeDateFromNetwork(true) != TD_OK)
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fdfa 	bl	8002e30 <setRTCTimeDateFromNetwork>
 800123c:	b180      	cbz	r0, 8001260 <platform_init+0x14c>
#else   /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
    if ( (setRTCTimeDateFromNetwork(false) != TD_OK) && (setRTCTimeDateFromNetwork(true) != TD_OK) )
#endif  /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
  
  {
    CLOUD_Error_Handler(CLOUD_DEMO_TIMEDATE_ERROR);
 800123e:	f06f 0006 	mvn.w	r0, #6
 8001242:	e7df      	b.n	8001204 <platform_init+0xf0>
      if (cloud_device_enter_credentials() != 0)
 8001244:	f002 f99c 	bl	8003580 <cloud_device_enter_credentials>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0d6      	beq.n	80011fa <platform_init+0xe6>
        msg_error("Failed configuring the IoT device.\n");
 800124c:	4916      	ldr	r1, [pc, #88]	; (80012a8 <platform_init+0x194>)
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <platform_init+0x198>)
 8001250:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001254:	f022 f8d4 	bl	8023400 <iprintf>
 8001258:	4815      	ldr	r0, [pc, #84]	; (80012b0 <platform_init+0x19c>)
 800125a:	f022 f96d 	bl	8023538 <puts>
 800125e:	e7cc      	b.n	80011fa <platform_init+0xe6>
    msg_error("init_sensors returned error : %d\n", res);
  }
#endif /* SENSOR */
   
 return 0;
}
 8001260:	b00c      	add	sp, #48	; 0x30
 8001262:	bd10      	pop	{r4, pc}
 8001264:	20001168 	.word	0x20001168
 8001268:	0802d4ad 	.word	0x0802d4ad
 800126c:	20001174 	.word	0x20001174
 8001270:	0802d4eb 	.word	0x0802d4eb
 8001274:	0802d526 	.word	0x0802d526
 8001278:	08027f50 	.word	0x08027f50
 800127c:	0802d561 	.word	0x0802d561
 8001280:	0802d5c3 	.word	0x0802d5c3
 8001284:	0802d59d 	.word	0x0802d59d
 8001288:	0802d5dd 	.word	0x0802d5dd
 800128c:	08003239 	.word	0x08003239
 8001290:	0802d5fd 	.word	0x0802d5fd
 8001294:	0802d629 	.word	0x0802d629
 8001298:	0802d644 	.word	0x0802d644
 800129c:	0802d6d9 	.word	0x0802d6d9
 80012a0:	0802d65d 	.word	0x0802d65d
 80012a4:	0802d750 	.word	0x0802d750
 80012a8:	08027f6c 	.word	0x08027f6c
 80012ac:	0802d71d 	.word	0x0802d71d
 80012b0:	0802d72d 	.word	0x0802d72d

080012b4 <platform_deinit>:


void    platform_deinit()
{
 80012b4:	b508      	push	{r3, lr}
   /* Close Cloud connectivity demonstration */
  printf("\n*** Cloud connectivity demonstration ***\n\n");
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <platform_deinit+0x1c>)
 80012b8:	f022 f93e 	bl	8023538 <puts>
  printf("Cloud connectivity demonstration completed\n");
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <platform_deinit+0x20>)
 80012be:	f022 f93b 	bl	8023538 <puts>


  (void)net_deinit(hnet, (net_if_deinit));
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <platform_deinit+0x24>)
 80012c4:	4905      	ldr	r1, [pc, #20]	; (80012dc <platform_deinit+0x28>)
 80012c6:	6818      	ldr	r0, [r3, #0]
#endif

  heap_stat(&heap_max,&heap_current,&stack_size);
  msg_info("Heap Max allocation 0x%x (%d), current allocation 0x%x (%d), Stack max size 0x%x (%d)\n",heap_max,heap_max,heap_current,heap_current,stack_size,stack_size);
#endif
}
 80012c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  (void)net_deinit(hnet, (net_if_deinit));
 80012cc:	f000 bcec 	b.w	8001ca8 <net_deinit>
 80012d0:	0802d777 	.word	0x0802d777
 80012d4:	0802d7a2 	.word	0x0802d7a2
 80012d8:	20001174 	.word	0x20001174
 80012dc:	08003379 	.word	0x08003379

080012e0 <mbedtls_hardware_poll>:
                    unsigned char *output, size_t len, size_t *olen );


int mbedtls_hardware_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 80012e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012e2:	4616      	mov	r6, r2
 80012e4:	461c      	mov	r4, r3
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t random_number = 0;
 80012e6:	2700      	movs	r7, #0
  
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <mbedtls_hardware_poll+0x2c>)
  uint32_t random_number = 0;
 80012ea:	9701      	str	r7, [sp, #4]
{
 80012ec:	460d      	mov	r5, r1
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012ee:	a901      	add	r1, sp, #4
 80012f0:	f009 faad 	bl	800a84e <HAL_RNG_GenerateRandomNumber>
  ((void) data);
  *olen = 0;
  
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 80012f4:	2e03      	cmp	r6, #3
  *olen = 0;
 80012f6:	6027      	str	r7, [r4, #0]
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 80012f8:	d904      	bls.n	8001304 <mbedtls_hardware_poll+0x24>
 80012fa:	b918      	cbnz	r0, 8001304 <mbedtls_hardware_poll+0x24>
  {
    return 0;
  }
  
  memcpy(output, &random_number, sizeof(uint32_t));
 80012fc:	9b01      	ldr	r3, [sp, #4]
 80012fe:	602b      	str	r3, [r5, #0]
  *olen = sizeof(uint32_t);
 8001300:	2304      	movs	r3, #4
 8001302:	6023      	str	r3, [r4, #0]
  
  return 0;
}
 8001304:	2000      	movs	r0, #0
 8001306:	b003      	add	sp, #12
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop
 800130c:	20001168 	.word	0x20001168

08001310 <FLASH_get_pageInBank>:
  */
static int FLASH_get_pageInBank(uint32_t addr)
{
  int page = -1;

  if ( ((FLASH_BASE + FLASH_SIZE) > addr) && (addr >= FLASH_BASE) )
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <FLASH_get_pageInBank+0x58>)
 8001312:	8819      	ldrh	r1, [r3, #0]
 8001314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001318:	4299      	cmp	r1, r3
 800131a:	bf1d      	ittte	ne
 800131c:	4a13      	ldrne	r2, [pc, #76]	; (800136c <FLASH_get_pageInBank+0x5c>)
 800131e:	ea02 2281 	andne.w	r2, r2, r1, lsl #10
 8001322:	f102 6200 	addne.w	r2, r2, #134217728	; 0x8000000
 8001326:	f04f 6201 	moveq.w	r2, #135266304	; 0x8100000
 800132a:	4282      	cmp	r2, r0
 800132c:	d911      	bls.n	8001352 <FLASH_get_pageInBank+0x42>
 800132e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001332:	d30e      	bcc.n	8001352 <FLASH_get_pageInBank+0x42>
  {
    /* The address is in internal FLASH range. */
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	4299      	cmp	r1, r3
 800133a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800133e:	d00b      	beq.n	8001358 <FLASH_get_pageInBank+0x48>
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <FLASH_get_pageInBank+0x60>)
 8001342:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 8001346:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 800134a:	4288      	cmp	r0, r1
 800134c:	d209      	bcs.n	8001362 <FLASH_get_pageInBank+0x52>
    { 
      /* Addr in the first bank */
      page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800134e:	0ad8      	lsrs	r0, r3, #11
 8001350:	4770      	bx	lr
  int page = -1;
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
    }
  }
  
  return page;
}
 8001356:	4770      	bx	lr
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <FLASH_get_pageInBank+0x64>)
 800135a:	4290      	cmp	r0, r2
 800135c:	d9f7      	bls.n	800134e <FLASH_get_pageInBank+0x3e>
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
 800135e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001362:	1a98      	subs	r0, r3, r2
 8001364:	0ac0      	lsrs	r0, r0, #11
 8001366:	4770      	bx	lr
 8001368:	1fff75e0 	.word	0x1fff75e0
 800136c:	003ffc00 	.word	0x003ffc00
 8001370:	001ffe00 	.word	0x001ffe00
 8001374:	0807ffff 	.word	0x0807ffff

08001378 <FLASH_get_bank>:
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <FLASH_get_bank+0x48>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <FLASH_get_bank+0x4c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001388:	d10c      	bne.n	80013a4 <FLASH_get_bank+0x2c>
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_1 : FLASH_BANK_2;
 800138a:	429a      	cmp	r2, r3
 800138c:	bf17      	itett	ne
 800138e:	4b0e      	ldrne	r3, [pc, #56]	; (80013c8 <FLASH_get_bank+0x50>)
 8001390:	4b0e      	ldreq	r3, [pc, #56]	; (80013cc <FLASH_get_bank+0x54>)
 8001392:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 8001396:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 800139a:	4298      	cmp	r0, r3
 800139c:	bf2c      	ite	cs
 800139e:	2002      	movcs	r0, #2
 80013a0:	2001      	movcc	r0, #1
 80013a2:	4770      	bx	lr
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_2 : FLASH_BANK_1;
 80013a4:	429a      	cmp	r2, r3
 80013a6:	bf17      	itett	ne
 80013a8:	4b07      	ldrne	r3, [pc, #28]	; (80013c8 <FLASH_get_bank+0x50>)
 80013aa:	4b08      	ldreq	r3, [pc, #32]	; (80013cc <FLASH_get_bank+0x54>)
 80013ac:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 80013b0:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 80013b4:	4283      	cmp	r3, r0
 80013b6:	bf94      	ite	ls
 80013b8:	2001      	movls	r0, #1
 80013ba:	2002      	movhi	r0, #2
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40010000 	.word	0x40010000
 80013c4:	1fff75e0 	.word	0x1fff75e0
 80013c8:	001ffe00 	.word	0x001ffe00
 80013cc:	08080000 	.word	0x08080000

080013d0 <FLASH_update>:
  int ret = 0;
  int remaining = size;
  uint8_t * src_addr = (uint8_t *) data;
  uint64_t page_cache[FLASH_PAGE_SIZE/sizeof(uint64_t)];
 
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <FLASH_update+0x140>)
{
 80013d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d6:	4691      	mov	r9, r2
  int remaining = size;
 80013d8:	4692      	mov	sl, r2
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013da:	699a      	ldr	r2, [r3, #24]
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 80013dc:	f8df b140 	ldr.w	fp, [pc, #320]	; 8001520 <FLASH_update+0x150>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013e4:	619a      	str	r2, [r3, #24]
 80013e6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
{
 80013ea:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80013ee:	4607      	mov	r7, r0
 80013f0:	4688      	mov	r8, r1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013f2:	611a      	str	r2, [r3, #16]

  do {
    uint32_t fl_addr = ROUND_DOWN(dst_addr, FLASH_PAGE_SIZE);
 80013f4:	f427 64ff 	bic.w	r4, r7, #2040	; 0x7f8
 80013f8:	f024 0407 	bic.w	r4, r4, #7
    int fl_offset = dst_addr - fl_addr;
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 80013fc:	1be6      	subs	r6, r4, r7
 80013fe:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001402:	454e      	cmp	r6, r9
    
    /* Load from the flash into the cache */
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 8001404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001408:	4621      	mov	r1, r4
 800140a:	a806      	add	r0, sp, #24
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 800140c:	bf28      	it	cs
 800140e:	464e      	movcs	r6, r9
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 8001410:	f020 feca 	bl	80221a8 <memcpy>
    /* Update the cache from the source */
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 8001414:	ab06      	add	r3, sp, #24
    int fl_offset = dst_addr - fl_addr;
 8001416:	1b38      	subs	r0, r7, r4
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 8001418:	4632      	mov	r2, r6
 800141a:	4641      	mov	r1, r8
 800141c:	4418      	add	r0, r3
 800141e:	f020 fec3 	bl	80221a8 <memcpy>
  uint32_t PageError = 0;
 8001422:	2300      	movs	r3, #0
  EraseInit.Banks = FLASH_get_bank(address); 
 8001424:	4620      	mov	r0, r4
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001426:	e9cd 3301 	strd	r3, r3, [sp, #4]
  EraseInit.Banks = FLASH_get_bank(address); 
 800142a:	f7ff ffa5 	bl	8001378 <FLASH_get_bank>
 800142e:	4601      	mov	r1, r0
 8001430:	9003      	str	r0, [sp, #12]
  if (EraseInit.Banks != FLASH_get_bank(address + len_bytes))
 8001432:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8001436:	f7ff ff9f 	bl	8001378 <FLASH_get_bank>
 800143a:	4281      	cmp	r1, r0
 800143c:	d00d      	beq.n	800145a <FLASH_update+0x8a>
    printf("Error: Cannot erase across FLASH banks.\n");
 800143e:	4835      	ldr	r0, [pc, #212]	; (8001514 <FLASH_update+0x144>)
 8001440:	f022 f87a 	bl	8023538 <puts>
    /* Erase the page, and write the cache */
    ret = FLASH_unlock_erase(fl_addr, FLASH_PAGE_SIZE);
    if (ret != 0)
    {
#ifndef CODE_UNDER_FIREWALL
      printf("Error erasing at 0x%08lx\n", fl_addr);
 8001444:	4834      	ldr	r0, [pc, #208]	; (8001518 <FLASH_update+0x148>)
 8001446:	4621      	mov	r1, r4
 8001448:	f021 ffda 	bl	8023400 <iprintf>
 800144c:	f04f 35ff 	mov.w	r5, #4294967295
      }
    }
  } while ((ret == 0) && (remaining > 0));
  
  return ret;
}
 8001450:	4628      	mov	r0, r5
 8001452:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 8001456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EraseInit.Page = FLASH_get_pageInBank(address);
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff ff58 	bl	8001310 <FLASH_get_pageInBank>
 8001460:	4605      	mov	r5, r0
 8001462:	9004      	str	r0, [sp, #16]
    EraseInit.NbPages = FLASH_get_pageInBank(address + len_bytes - 1) - EraseInit.Page + 1;
 8001464:	f204 70ff 	addw	r0, r4, #2047	; 0x7ff
 8001468:	f7ff ff52 	bl	8001310 <FLASH_get_pageInBank>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	1b5b      	subs	r3, r3, r5
 8001470:	9305      	str	r3, [sp, #20]
    HAL_FLASH_Unlock();
 8001472:	f007 fbab 	bl	8008bcc <HAL_FLASH_Unlock>
    if (HAL_FLASHEx_Erase(&EraseInit, &PageError) == HAL_OK)
 8001476:	a901      	add	r1, sp, #4
 8001478:	a802      	add	r0, sp, #8
 800147a:	f007 fcb3 	bl	8008de4 <HAL_FLASHEx_Erase>
 800147e:	b120      	cbz	r0, 800148a <FLASH_update+0xba>
      printf("Error erasing at 0x%08lx\n", address);
 8001480:	4621      	mov	r1, r4
 8001482:	4825      	ldr	r0, [pc, #148]	; (8001518 <FLASH_update+0x148>)
 8001484:	f021 ffbc 	bl	8023400 <iprintf>
    if (ret != 0)
 8001488:	e7dc      	b.n	8001444 <FLASH_update+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148a:	b672      	cpsid	i
  for (i = 0; i < len_bytes; i += 8)
 800148c:	4605      	mov	r5, r0
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800148e:	f60d 0218 	addw	r2, sp, #2072	; 0x818
 8001492:	f025 0307 	bic.w	r3, r5, #7
 8001496:	4413      	add	r3, r2
 8001498:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	1929      	adds	r1, r5, r4
 80014a2:	2000      	movs	r0, #0
 80014a4:	f007 fbe8 	bl	8008c78 <HAL_FLASH_Program>
 80014a8:	b9f0      	cbnz	r0, 80014e8 <FLASH_update+0x118>
  for (i = 0; i < len_bytes; i += 8)
 80014aa:	3508      	adds	r5, #8
 80014ac:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80014b0:	d1ed      	bne.n	800148e <FLASH_update+0xbe>
  int ret = -1;
 80014b2:	f04f 35ff 	mov.w	r5, #4294967295
    if ( *dst != *src )
 80014b6:	f020 0303 	bic.w	r3, r0, #3
 80014ba:	f60d 0c18 	addw	ip, sp, #2072	; 0x818
 80014be:	4463      	add	r3, ip
 80014c0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014c4:	5902      	ldr	r2, [r0, r4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	eb00 0104 	add.w	r1, r0, r4
 80014ce:	d00f      	beq.n	80014f0 <FLASH_update+0x120>
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 80014d0:	4658      	mov	r0, fp
 80014d2:	f021 ff95 	bl	8023400 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80014d6:	b662      	cpsie	i
      if(ret != 0)
 80014d8:	b18d      	cbz	r5, 80014fe <FLASH_update+0x12e>
        printf("Error writing %lu bytes at 0x%08lx\n", FLASH_PAGE_SIZE, fl_addr);
 80014da:	4622      	mov	r2, r4
 80014dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <FLASH_update+0x14c>)
 80014e2:	f021 ff8d 	bl	8023400 <iprintf>
 80014e6:	e7b1      	b.n	800144c <FLASH_update+0x7c>
  int ret = -1;
 80014e8:	f04f 35ff 	mov.w	r5, #4294967295
  for (i = 0; i < len_bytes; i += 4)
 80014ec:	2000      	movs	r0, #0
 80014ee:	e7e2      	b.n	80014b6 <FLASH_update+0xe6>
 80014f0:	3004      	adds	r0, #4
 80014f2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ret = 0;
 80014f6:	f04f 0500 	mov.w	r5, #0
  for (i = 0; i < len_bytes; i += 4)
 80014fa:	d1dc      	bne.n	80014b6 <FLASH_update+0xe6>
 80014fc:	e7eb      	b.n	80014d6 <FLASH_update+0x106>
        remaining -= len;
 80014fe:	ebaa 0a06 	sub.w	sl, sl, r6
  } while ((ret == 0) && (remaining > 0));
 8001502:	f1ba 0f00 	cmp.w	sl, #0
        dst_addr += len;
 8001506:	4437      	add	r7, r6
        src_addr += len;
 8001508:	44b0      	add	r8, r6
  } while ((ret == 0) && (remaining > 0));
 800150a:	f73f af73 	bgt.w	80013f4 <FLASH_update+0x24>
 800150e:	e79f      	b.n	8001450 <FLASH_update+0x80>
 8001510:	40022000 	.word	0x40022000
 8001514:	0802d80d 	.word	0x0802d80d
 8001518:	0802d835 	.word	0x0802d835
 800151c:	0802d88c 	.word	0x0802d88c
 8001520:	0802d84f 	.word	0x0802d84f

08001524 <getInputString>:
  * @param  Out:  inputString   Pointer to buffer for input line.
  * @param  In:   len           Max length for line.
  * @retval Number of bytes read from the terminal.
  */
int getInputString(char *inputString, size_t len)
{
 8001524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001528:	460e      	mov	r6, r1
 800152a:	4605      	mov	r5, r0
  size_t currLen = 0;
  int c = 0;

  c = getchar();
 800152c:	f020 fd12 	bl	8021f54 <getchar>
  size_t currLen = 0;
 8001530:	2400      	movs	r4, #0
    {
      if (currLen != 0)
      {
        --currLen;
        inputString[currLen] = 0;
        printf(" \b");
 8001532:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8001594 <getInputString+0x70>
      }
    }
    else
    {
      if (currLen < (len-1))
 8001536:	1e77      	subs	r7, r6, #1
 8001538:	46a0      	mov	r8, r4
  while ((c != EOF) && ((currLen + 1) < len) && (c != '\r') && (c != '\n') )
 800153a:	1c43      	adds	r3, r0, #1
 800153c:	d007      	beq.n	800154e <getInputString+0x2a>
 800153e:	f104 0a01 	add.w	sl, r4, #1
 8001542:	45b2      	cmp	sl, r6
 8001544:	d219      	bcs.n	800157a <getInputString+0x56>
 8001546:	280d      	cmp	r0, #13
 8001548:	d021      	beq.n	800158e <getInputString+0x6a>
 800154a:	280a      	cmp	r0, #10
 800154c:	d101      	bne.n	8001552 <getInputString+0x2e>

      ++currLen;
    }
    c = getchar();
  }
  if (currLen != 0)
 800154e:	b1dc      	cbz	r4, 8001588 <getInputString+0x64>
 8001550:	e014      	b.n	800157c <getInputString+0x58>
    if (c == '\b')
 8001552:	2808      	cmp	r0, #8
 8001554:	d10b      	bne.n	800156e <getInputString+0x4a>
      if (currLen != 0)
 8001556:	b174      	cbz	r4, 8001576 <getInputString+0x52>
        --currLen;
 8001558:	f104 3aff 	add.w	sl, r4, #4294967295
        printf(" \b");
 800155c:	4648      	mov	r0, r9
        inputString[currLen] = 0;
 800155e:	f805 800a 	strb.w	r8, [r5, sl]
        printf(" \b");
 8001562:	f021 ff4d 	bl	8023400 <iprintf>
    c = getchar();
 8001566:	f020 fcf5 	bl	8021f54 <getchar>
 800156a:	4654      	mov	r4, sl
 800156c:	e7e5      	b.n	800153a <getInputString+0x16>
      if (currLen < (len-1))
 800156e:	42a7      	cmp	r7, r4
 8001570:	d9f9      	bls.n	8001566 <getInputString+0x42>
        inputString[currLen] = c;
 8001572:	5528      	strb	r0, [r5, r4]
 8001574:	e7f7      	b.n	8001566 <getInputString+0x42>
 8001576:	46a2      	mov	sl, r4
 8001578:	e7f5      	b.n	8001566 <getInputString+0x42>
  if (currLen != 0)
 800157a:	b10c      	cbz	r4, 8001580 <getInputString+0x5c>
  { /* Close the string in the input buffer... only if a string was written to it. */
    inputString[currLen] = '\0';
 800157c:	2300      	movs	r3, #0
 800157e:	552b      	strb	r3, [r5, r4]
  }
  if (c == '\r')
 8001580:	280d      	cmp	r0, #13
 8001582:	d101      	bne.n	8001588 <getInputString+0x64>
  {
    c = getchar(); /* assume there is '\n' after '\r'. Just discard it. */
 8001584:	f020 fce6 	bl	8021f54 <getchar>
  }

  return currLen;
}
 8001588:	4620      	mov	r0, r4
 800158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (currLen != 0)
 800158e:	2c00      	cmp	r4, #0
 8001590:	d1f4      	bne.n	800157c <getInputString+0x58>
 8001592:	e7f7      	b.n	8001584 <getInputString+0x60>
 8001594:	0802d94e 	.word	0x0802d94e

08001598 <checkWiFiCredentials>:
  */
int checkWiFiCredentials(const char ** const ssid, const char ** const psk, uint8_t * const security_mode)
{
  bool is_ssid_present = 0;

  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <checkWiFiCredentials+0x58>)
 800159a:	681b      	ldr	r3, [r3, #0]
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 800159e:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 80015a2:	e9d4 6700 	ldrd	r6, r7, [r4]
 80015a6:	a510      	add	r5, pc, #64	; (adr r5, 80015e8 <checkWiFiCredentials+0x50>)
 80015a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80015ac:	42af      	cmp	r7, r5
 80015ae:	bf08      	it	eq
 80015b0:	42a6      	cmpeq	r6, r4
 80015b2:	d110      	bne.n	80015d6 <checkWiFiCredentials+0x3e>
  {
    is_ssid_present = true;
    if ((ssid == NULL) ||(psk == NULL) || (security_mode == NULL))
 80015b4:	b190      	cbz	r0, 80015dc <checkWiFiCredentials+0x44>
 80015b6:	b189      	cbz	r1, 80015dc <checkWiFiCredentials+0x44>
 80015b8:	b182      	cbz	r2, 80015dc <checkWiFiCredentials+0x44>
    {
      return -2;
    }
    *ssid = lUserConfigPtr->wifi_config.ssid;
 80015ba:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 80015be:	3408      	adds	r4, #8
 80015c0:	6004      	str	r4, [r0, #0]
    *psk = lUserConfigPtr->wifi_config.psk;
 80015c2:	f503 5020 	add.w	r0, r3, #10240	; 0x2800
 80015c6:	3028      	adds	r0, #40	; 0x28
 80015c8:	6008      	str	r0, [r1, #0]
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 80015ca:	f642 0168 	movw	r1, #10344	; 0x2868
  }

  return (is_ssid_present) ? 0 : -1;
 80015ce:	2000      	movs	r0, #0
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 80015d0:	5c5b      	ldrb	r3, [r3, r1]
 80015d2:	7013      	strb	r3, [r2, #0]
}
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (is_ssid_present) ? 0 : -1;
 80015d6:	f04f 30ff 	mov.w	r0, #4294967295
 80015da:	e7fb      	b.n	80015d4 <checkWiFiCredentials+0x3c>
      return -2;
 80015dc:	f06f 0001 	mvn.w	r0, #1
 80015e0:	e7f8      	b.n	80015d4 <checkWiFiCredentials+0x3c>
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	89abcdef 	.word	0x89abcdef
 80015ec:	01234567 	.word	0x01234567
 80015f0:	20000008 	.word	0x20000008
 80015f4:	00000000 	.word	0x00000000

080015f8 <updateWiFiCredentials>:
  * @retval Error code
  *             0    Success
  *             <0   Unrecoverable error
  */
int updateWiFiCredentials(void)
{
 80015f8:	b510      	push	{r4, lr}
 80015fa:	b09c      	sub	sp, #112	; 0x70
  wifi_config_t wifi_config;
  int ret = 0;

  memset(&wifi_config, 0, sizeof(wifi_config_t));
 80015fc:	2270      	movs	r2, #112	; 0x70
 80015fe:	2100      	movs	r1, #0
 8001600:	4668      	mov	r0, sp
 8001602:	f020 fdf9 	bl	80221f8 <memset>

  printf("\nEnter SSID: ");
 8001606:	4824      	ldr	r0, [pc, #144]	; (8001698 <updateWiFiCredentials+0xa0>)

  printf("\n");
  char c;
  do
  {
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 8001608:	4c24      	ldr	r4, [pc, #144]	; (800169c <updateWiFiCredentials+0xa4>)
  printf("\nEnter SSID: ");
 800160a:	f021 fef9 	bl	8023400 <iprintf>
  getInputString(wifi_config.ssid, USER_CONF_WIFI_SSID_MAX_LENGTH);
 800160e:	2120      	movs	r1, #32
 8001610:	a802      	add	r0, sp, #8
 8001612:	f7ff ff87 	bl	8001524 <getInputString>
  msg_info("You have entered %s as the ssid.\n", wifi_config.ssid);
 8001616:	a902      	add	r1, sp, #8
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <updateWiFiCredentials+0xa8>)
 800161a:	f021 fef1 	bl	8023400 <iprintf>
  printf("\n");
 800161e:	200a      	movs	r0, #10
 8001620:	f021 ff06 	bl	8023430 <putchar>
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 8001624:	4620      	mov	r0, r4
 8001626:	f021 feeb 	bl	8023400 <iprintf>
      c = getchar();
 800162a:	f020 fc93 	bl	8021f54 <getchar>
  }
  while ( (c < '0')  || (c > '3'));
 800162e:	3830      	subs	r0, #48	; 0x30
 8001630:	b2c1      	uxtb	r1, r0
 8001632:	2903      	cmp	r1, #3
 8001634:	d8f6      	bhi.n	8001624 <updateWiFiCredentials+0x2c>
  wifi_config.security_mode = c - '0';
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 8001636:	481b      	ldr	r0, [pc, #108]	; (80016a4 <updateWiFiCredentials+0xac>)
  wifi_config.security_mode = c - '0';
 8001638:	f88d 1068 	strb.w	r1, [sp, #104]	; 0x68
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 800163c:	f021 fee0 	bl	8023400 <iprintf>

  if (wifi_config.security_mode != 0)
 8001640:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8001644:	b133      	cbz	r3, 8001654 <updateWiFiCredentials+0x5c>
  {
    printf("\nEnter password: ");
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <updateWiFiCredentials+0xb0>)
 8001648:	f021 feda 	bl	8023400 <iprintf>
    getInputString(wifi_config.psk, sizeof(wifi_config.psk));
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	a80a      	add	r0, sp, #40	; 0x28
 8001650:	f7ff ff68 	bl	8001524 <getInputString>
  }

  wifi_config.magic = USER_CONF_MAGIC;
 8001654:	a30e      	add	r3, pc, #56	; (adr r3, 8001690 <updateWiFiCredentials+0x98>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	e9cd 2300 	strd	r2, r3, [sp]

  ret = FLASH_update((uint32_t)&lUserConfigPtr->wifi_config, &wifi_config, sizeof(wifi_config_t));
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <updateWiFiCredentials+0xb4>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2270      	movs	r2, #112	; 0x70
 8001664:	4669      	mov	r1, sp
 8001666:	f500 5020 	add.w	r0, r0, #10240	; 0x2800
 800166a:	f7ff feb1 	bl	80013d0 <FLASH_update>

  if (ret < 0)
 800166e:	1e04      	subs	r4, r0, #0
 8001670:	da08      	bge.n	8001684 <updateWiFiCredentials+0x8c>
  {
    msg_error("Failed updating the wifi configuration in Flash.\n");
 8001672:	490f      	ldr	r1, [pc, #60]	; (80016b0 <updateWiFiCredentials+0xb8>)
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <updateWiFiCredentials+0xbc>)
 8001676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800167a:	f021 fec1 	bl	8023400 <iprintf>
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <updateWiFiCredentials+0xc0>)
 8001680:	f021 ff5a 	bl	8023538 <puts>
  }

  printf("\n");
 8001684:	200a      	movs	r0, #10
 8001686:	f021 fed3 	bl	8023430 <putchar>
  return ret;
}
 800168a:	4620      	mov	r0, r4
 800168c:	b01c      	add	sp, #112	; 0x70
 800168e:	bd10      	pop	{r4, pc}
 8001690:	89abcdef 	.word	0x89abcdef
 8001694:	01234567 	.word	0x01234567
 8001698:	0802d8e2 	.word	0x0802d8e2
 800169c:	0802d912 	.word	0x0802d912
 80016a0:	0802d8f0 	.word	0x0802d8f0
 80016a4:	0802d951 	.word	0x0802d951
 80016a8:	0802d97d 	.word	0x0802d97d
 80016ac:	20000008 	.word	0x20000008
 80016b0:	08027f7a 	.word	0x08027f7a
 80016b4:	0802d71d 	.word	0x0802d71d
 80016b8:	0802d98f 	.word	0x0802d98f

080016bc <enterPemString>:
  * @param  Out: key_read_buffer    Destination buffer.
  * @param  In:  max_len            Maximum length to be written to the destination buffer.
  * @retval Number of characters read into the output buffer.
  */
int enterPemString(char * read_buffer, size_t max_len)
{
 80016bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c0:	4607      	mov	r7, r0
 80016c2:	468a      	mov	sl, r1
  int i = 0;
  int read_len = 0;
  bool eof = false;
  read_len = getInputString(&read_buffer[i], max_len);
 80016c4:	f7ff ff2e 	bl	8001524 <getInputString>
  bool eof = false;
 80016c8:	2500      	movs	r5, #0
  while ( (read_len >= 0) && (i < max_len) && !eof )
  {
    i += read_len;
    read_buffer[i++] = '\n';
    read_len = getInputString(&read_buffer[i], max_len);
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016ca:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001750 <enterPemString+0x94>
  read_len = getInputString(&read_buffer[i], max_len);
 80016ce:	4604      	mov	r4, r0
  int i = 0;
 80016d0:	462e      	mov	r6, r5
    read_buffer[i++] = '\n';
 80016d2:	f04f 080a 	mov.w	r8, #10
  while ( (read_len >= 0) && (i < max_len) && !eof )
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	db25      	blt.n	8001726 <enterPemString+0x6a>
 80016da:	4556      	cmp	r6, sl
 80016dc:	d225      	bcs.n	800172a <enterPemString+0x6e>
 80016de:	b11d      	cbz	r5, 80016e8 <enterPemString+0x2c>
  if (i >= max_len)
  {
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
   return 0;
  }
  read_buffer[++i] = '\0';
 80016e0:	1c70      	adds	r0, r6, #1
 80016e2:	2300      	movs	r3, #0
 80016e4:	543b      	strb	r3, [r7, r0]
  return i;
 80016e6:	e02b      	b.n	8001740 <enterPemString+0x84>
    i += read_len;
 80016e8:	4434      	add	r4, r6
    read_buffer[i++] = '\n';
 80016ea:	1c66      	adds	r6, r4, #1
    read_len = getInputString(&read_buffer[i], max_len);
 80016ec:	eb07 0b06 	add.w	fp, r7, r6
    read_buffer[i++] = '\n';
 80016f0:	f807 8004 	strb.w	r8, [r7, r4]
    read_len = getInputString(&read_buffer[i], max_len);
 80016f4:	4651      	mov	r1, sl
 80016f6:	4658      	mov	r0, fp
 80016f8:	f7ff ff14 	bl	8001524 <getInputString>
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016fc:	2208      	movs	r2, #8
    read_len = getInputString(&read_buffer[i], max_len);
 80016fe:	4604      	mov	r4, r0
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 8001700:	4649      	mov	r1, r9
 8001702:	4658      	mov	r0, fp
 8001704:	f022 f840 	bl	8023788 <strncmp>
    if (eof)
 8001708:	2800      	cmp	r0, #0
 800170a:	d1e4      	bne.n	80016d6 <enterPemString+0x1a>
        i += read_len;
 800170c:	4434      	add	r4, r6
        read_buffer[i++] = '\n';
 800170e:	1c66      	adds	r6, r4, #1
 8001710:	f807 8004 	strb.w	r8, [r7, r4]
        read_len = getInputString(&read_buffer[i], max_len);
 8001714:	4651      	mov	r1, sl
 8001716:	19b8      	adds	r0, r7, r6
 8001718:	f7ff ff04 	bl	8001524 <getInputString>
        if (read_len != 0) eof =false;
 800171c:	fab0 f580 	clz	r5, r0
 8001720:	4604      	mov	r4, r0
 8001722:	096d      	lsrs	r5, r5, #5
 8001724:	e7d7      	b.n	80016d6 <enterPemString+0x1a>
  if (i >= max_len)
 8001726:	4556      	cmp	r6, sl
 8001728:	d3da      	bcc.n	80016e0 <enterPemString+0x24>
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
 800172a:	4906      	ldr	r1, [pc, #24]	; (8001744 <enterPemString+0x88>)
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <enterPemString+0x8c>)
 800172e:	f240 1253 	movw	r2, #339	; 0x153
 8001732:	f021 fe65 	bl	8023400 <iprintf>
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <enterPemString+0x90>)
 8001738:	4651      	mov	r1, sl
 800173a:	f021 fe61 	bl	8023400 <iprintf>
   return 0;
 800173e:	2000      	movs	r0, #0
}
 8001740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001744:	08027f90 	.word	0x08027f90
 8001748:	0802d71d 	.word	0x0802d71d
 800174c:	0802d9c9 	.word	0x0802d9c9
 8001750:	0802d9c0 	.word	0x0802d9c0

08001754 <CaptureAndFlashPem>:
  *             0    Success
  *             <0   Unrecoverable error
  */

 int CaptureAndFlashPem(char *pem_name, char const *flash_addr, bool restricted_area)
 {
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4606      	mov	r6, r0
  char * key_read_buffer = NULL;
  int    ret = 0;
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 8001758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 {
 800175c:	460d      	mov	r5, r1
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 800175e:	f020 fd05 	bl	802216c <malloc>
  if (key_read_buffer == NULL)
 8001762:	4604      	mov	r4, r0
 8001764:	b970      	cbnz	r0, 8001784 <CaptureAndFlashPem+0x30>
  {
    msg_error("Could not allocate %d bytes for the console readbuffer.\n", PEM_READ_BUFFER_SIZE);
 8001766:	4917      	ldr	r1, [pc, #92]	; (80017c4 <CaptureAndFlashPem+0x70>)
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <CaptureAndFlashPem+0x74>)
 800176a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800176e:	f021 fe47 	bl	8023400 <iprintf>
 8001772:	4816      	ldr	r0, [pc, #88]	; (80017cc <CaptureAndFlashPem+0x78>)
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	f021 fe42 	bl	8023400 <iprintf>
 800177c:	f04f 35ff 	mov.w	r5, #4294967295
  }

  free(key_read_buffer);

  return ret;
 }
 8001780:	4628      	mov	r0, r5
 8001782:	bd70      	pop	{r4, r5, r6, pc}
  memset(key_read_buffer, 0, PEM_READ_BUFFER_SIZE);
 8001784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001788:	2100      	movs	r1, #0
 800178a:	f020 fd35 	bl	80221f8 <memset>
  printf("\nEnter your %s: \n",pem_name);
 800178e:	4631      	mov	r1, r6
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <CaptureAndFlashPem+0x7c>)
 8001792:	f021 fe35 	bl	8023400 <iprintf>
  enterPemString(key_read_buffer, PEM_READ_BUFFER_SIZE);
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff ff8e 	bl	80016bc <enterPemString>
  msg_info("read: --->\n%s\n<---\n", key_read_buffer);
 80017a0:	4621      	mov	r1, r4
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <CaptureAndFlashPem+0x80>)
 80017a4:	f021 fe2c 	bl	8023400 <iprintf>
    ret = FLASH_update((uint32_t)flash_addr, key_read_buffer, strlen(key_read_buffer) + 1);  /* Append the closing \0*/
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7fe fd1b 	bl	80001e4 <strlen>
 80017ae:	4621      	mov	r1, r4
 80017b0:	1c42      	adds	r2, r0, #1
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff fe0c 	bl	80013d0 <FLASH_update>
 80017b8:	4605      	mov	r5, r0
  free(key_read_buffer);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f020 fcde 	bl	802217c <free>
  return ret;
 80017c0:	e7de      	b.n	8001780 <CaptureAndFlashPem+0x2c>
 80017c2:	bf00      	nop
 80017c4:	08027f9f 	.word	0x08027f9f
 80017c8:	0802d71d 	.word	0x0802d71d
 80017cc:	0802d9f9 	.word	0x0802d9f9
 80017d0:	0802da32 	.word	0x0802da32
 80017d4:	0802da44 	.word	0x0802da44

080017d8 <checkTLSRootCA>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSRootCA()
{
  return (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <checkTLSRootCA+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80017e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017e4:	a304      	add	r3, pc, #16	; (adr r3, 80017f8 <checkTLSRootCA+0x20>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	4299      	cmp	r1, r3
 80017ec:	bf0a      	itet	eq
 80017ee:	4290      	cmpeq	r0, r2
}
 80017f0:	f04f 30ff 	movne.w	r0, #4294967295
 80017f4:	2000      	moveq	r0, #0
 80017f6:	4770      	bx	lr
 80017f8:	89abcdef 	.word	0x89abcdef
 80017fc:	01234567 	.word	0x01234567
 8001800:	20000008 	.word	0x20000008
 8001804:	00000000 	.word	0x00000000

08001808 <checkTLSDeviceConfig>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSDeviceConfig()
{
  return (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <checkTLSDeviceConfig+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001810:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001814:	a304      	add	r3, pc, #16	; (adr r3, 8001828 <checkTLSDeviceConfig+0x20>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	4299      	cmp	r1, r3
 800181c:	bf0a      	itet	eq
 800181e:	4290      	cmpeq	r0, r2
}
 8001820:	f04f 30ff 	movne.w	r0, #4294967295
 8001824:	2000      	moveq	r0, #0
 8001826:	4770      	bx	lr
 8001828:	89abcdef 	.word	0x89abcdef
 800182c:	01234567 	.word	0x01234567
 8001830:	20000008 	.word	0x20000008
 8001834:	00000000 	.word	0x00000000

08001838 <updateTLSCredentials>:
{
 8001838:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( (checkTLSRootCA() == -1)
 800183a:	f7ff ffcd 	bl	80017d8 <checkTLSRootCA>
 800183e:	3001      	adds	r0, #1
 8001840:	d146      	bne.n	80018d0 <updateTLSCredentials+0x98>
    printf("\nUpdating TLS security credentials.\n");
 8001842:	4849      	ldr	r0, [pc, #292]	; (8001968 <updateTLSCredentials+0x130>)
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 8001844:	4d49      	ldr	r5, [pc, #292]	; (800196c <updateTLSCredentials+0x134>)
    printf("\nUpdating TLS security credentials.\n");
 8001846:	f021 fe77 	bl	8023538 <puts>
    printf("\nEnter the x509 certificates or keys as per the following format:\n");
 800184a:	4849      	ldr	r0, [pc, #292]	; (8001970 <updateTLSCredentials+0x138>)
 800184c:	f021 fe74 	bl	8023538 <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 8001850:	4848      	ldr	r0, [pc, #288]	; (8001974 <updateTLSCredentials+0x13c>)
 8001852:	f021 fe71 	bl	8023538 <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 8001856:	4848      	ldr	r0, [pc, #288]	; (8001978 <updateTLSCredentials+0x140>)
 8001858:	f021 fe6e 	bl	8023538 <puts>
    printf("R7EUQIN9Z/SG9jGr8XmksrUuEvmEF/Bibyc+E1ixVA0hmnM3oTDPb5Lc9un8rNsu\n");
 800185c:	4847      	ldr	r0, [pc, #284]	; (800197c <updateTLSCredentials+0x144>)
 800185e:	f021 fe6b 	bl	8023538 <puts>
    printf(".......\n");
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <updateTLSCredentials+0x148>)
 8001864:	f021 fe68 	bl	8023538 <puts>
    printf("-----END CERTIFICATE-----\n");
 8001868:	4846      	ldr	r0, [pc, #280]	; (8001984 <updateTLSCredentials+0x14c>)
 800186a:	f021 fe65 	bl	8023538 <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 800186e:	4841      	ldr	r0, [pc, #260]	; (8001974 <updateTLSCredentials+0x13c>)
 8001870:	f021 fe62 	bl	8023538 <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 8001874:	4840      	ldr	r0, [pc, #256]	; (8001978 <updateTLSCredentials+0x140>)
 8001876:	f021 fe5f 	bl	8023538 <puts>
    printf(".......\n");
 800187a:	4841      	ldr	r0, [pc, #260]	; (8001980 <updateTLSCredentials+0x148>)
 800187c:	f021 fe5c 	bl	8023538 <puts>
    printf("-----END CERTIFICATE-----\n");
 8001880:	4840      	ldr	r0, [pc, #256]	; (8001984 <updateTLSCredentials+0x14c>)
 8001882:	f021 fe59 	bl	8023538 <puts>
    printf("\n.......\n");
 8001886:	4840      	ldr	r0, [pc, #256]	; (8001988 <updateTLSCredentials+0x150>)
 8001888:	f021 fe56 	bl	8023538 <puts>
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 800188c:	6829      	ldr	r1, [r5, #0]
 800188e:	483f      	ldr	r0, [pc, #252]	; (800198c <updateTLSCredentials+0x154>)
 8001890:	2200      	movs	r2, #0
 8001892:	f7ff ff5f 	bl	8001754 <CaptureAndFlashPem>
    if (ret == 0)
 8001896:	4604      	mov	r4, r0
 8001898:	b970      	cbnz	r0, 80018b8 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 800189a:	a331      	add	r3, pc, #196	; (adr r3, 8001960 <updateTLSCredentials+0x128>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 80018a0:	6828      	ldr	r0, [r5, #0]
 80018a2:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
      uint64_t magic = USER_CONF_MAGIC;
 80018a6:	e9cd 2300 	strd	r2, r3, [sp]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 80018aa:	4669      	mov	r1, sp
 80018ac:	2208      	movs	r2, #8
 80018ae:	3028      	adds	r0, #40	; 0x28
 80018b0:	f7ff fd8e 	bl	80013d0 <FLASH_update>
  if ( (ret == 0) && app_needs_device_keypair() )
 80018b4:	4604      	mov	r4, r0
 80018b6:	b180      	cbz	r0, 80018da <updateTLSCredentials+0xa2>
  if (ret < 0)
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	da12      	bge.n	80018e2 <updateTLSCredentials+0xaa>
    msg_error("Failed updating the TLS configuration in Flash.\n");
 80018bc:	4934      	ldr	r1, [pc, #208]	; (8001990 <updateTLSCredentials+0x158>)
 80018be:	4835      	ldr	r0, [pc, #212]	; (8001994 <updateTLSCredentials+0x15c>)
 80018c0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80018c4:	f021 fd9c 	bl	8023400 <iprintf>
 80018c8:	4833      	ldr	r0, [pc, #204]	; (8001998 <updateTLSCredentials+0x160>)
 80018ca:	f021 fe35 	bl	8023538 <puts>
  return ret;
 80018ce:	e008      	b.n	80018e2 <updateTLSCredentials+0xaa>
      || dialog_ask("\nDo you want to update the root CA certificate(s)? [y/n]\n") )
 80018d0:	4832      	ldr	r0, [pc, #200]	; (800199c <updateTLSCredentials+0x164>)
 80018d2:	f7ff fbdb 	bl	800108c <dialog_ask>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1b3      	bne.n	8001842 <updateTLSCredentials+0xa>
  if ( (ret == 0) && app_needs_device_keypair() )
 80018da:	f001 ff7b 	bl	80037d4 <app_needs_device_keypair>
 80018de:	b918      	cbnz	r0, 80018e8 <updateTLSCredentials+0xb0>
 80018e0:	4604      	mov	r4, r0
}
 80018e2:	4620      	mov	r0, r4
 80018e4:	b003      	add	sp, #12
 80018e6:	bd30      	pop	{r4, r5, pc}
    if (checkTLSDeviceConfig() == -1)
 80018e8:	f7ff ff8e 	bl	8001808 <checkTLSDeviceConfig>
 80018ec:	3001      	adds	r0, #1
 80018ee:	d122      	bne.n	8001936 <updateTLSCredentials+0xfe>
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 80018f0:	4d1e      	ldr	r5, [pc, #120]	; (800196c <updateTLSCredentials+0x134>)
 80018f2:	482b      	ldr	r0, [pc, #172]	; (80019a0 <updateTLSCredentials+0x168>)
 80018f4:	6829      	ldr	r1, [r5, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80018fc:	f7ff ff2a 	bl	8001754 <CaptureAndFlashPem>
      ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 8001900:	6829      	ldr	r1, [r5, #0]
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 8001902:	4604      	mov	r4, r0
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 8001904:	4827      	ldr	r0, [pc, #156]	; (80019a4 <updateTLSCredentials+0x16c>)
 8001906:	2201      	movs	r2, #1
 8001908:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800190c:	f7ff ff22 	bl	8001754 <CaptureAndFlashPem>
 8001910:	4304      	orrs	r4, r0
    if (ret == 0)
 8001912:	2c00      	cmp	r4, #0
 8001914:	d1d0      	bne.n	80018b8 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 8001916:	a312      	add	r3, pc, #72	; (adr r3, 8001960 <updateTLSCredentials+0x128>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9cd 2300 	strd	r2, r3, [sp]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->device_tls_magic, &magic, sizeof(uint64_t));
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <updateTLSCredentials+0x134>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 8001928:	2208      	movs	r2, #8
 800192a:	4669      	mov	r1, sp
 800192c:	3030      	adds	r0, #48	; 0x30
 800192e:	f7ff fd4f 	bl	80013d0 <FLASH_update>
 8001932:	4604      	mov	r4, r0
 8001934:	e7c0      	b.n	80018b8 <updateTLSCredentials+0x80>
      if (dialog_ask("Do you want to update the device certificate? [y/n]\n"))
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <updateTLSCredentials+0x170>)
 8001938:	f7ff fba8 	bl	800108c <dialog_ask>
 800193c:	b138      	cbz	r0, 800194e <updateTLSCredentials+0x116>
        ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <updateTLSCredentials+0x134>)
 8001940:	4817      	ldr	r0, [pc, #92]	; (80019a0 <updateTLSCredentials+0x168>)
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800194a:	f7ff ff03 	bl	8001754 <CaptureAndFlashPem>
 800194e:	4604      	mov	r4, r0
      if (dialog_ask("Do you want to update the device key? [y/n]\n"))
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <updateTLSCredentials+0x174>)
 8001952:	f7ff fb9b 	bl	800108c <dialog_ask>
 8001956:	2800      	cmp	r0, #0
 8001958:	d0db      	beq.n	8001912 <updateTLSCredentials+0xda>
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <updateTLSCredentials+0x134>)
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	e7d1      	b.n	8001904 <updateTLSCredentials+0xcc>
 8001960:	89abcdef 	.word	0x89abcdef
 8001964:	01234567 	.word	0x01234567
 8001968:	0802da58 	.word	0x0802da58
 800196c:	20000008 	.word	0x20000008
 8001970:	0802da7c 	.word	0x0802da7c
 8001974:	0802dabe 	.word	0x0802dabe
 8001978:	0802dada 	.word	0x0802dada
 800197c:	0802db1b 	.word	0x0802db1b
 8001980:	0802db77 	.word	0x0802db77
 8001984:	0802db5c 	.word	0x0802db5c
 8001988:	0802db76 	.word	0x0802db76
 800198c:	0802db7f 	.word	0x0802db7f
 8001990:	08027fb2 	.word	0x08027fb2
 8001994:	0802d71d 	.word	0x0802d71d
 8001998:	0802dc41 	.word	0x0802dc41
 800199c:	0802db87 	.word	0x0802db87
 80019a0:	0802dbc1 	.word	0x0802dbc1
 80019a4:	0802dbd4 	.word	0x0802dbd4
 80019a8:	0802dbdf 	.word	0x0802dbdf
 80019ac:	0802dc14 	.word	0x0802dc14

080019b0 <setIoTDeviceConfig>:
  * @param  In: config    Configuration data.
  * @retval  0  Success
  *         -1  Error
  */
int setIoTDeviceConfig(iot_config_t *config)
{
 80019b0:	b508      	push	{r3, lr}
  int ret = 0;
  config->magic = USER_CONF_MAGIC;
 80019b2:	a313      	add	r3, pc, #76	; (adr r3, 8001a00 <setIoTDeviceConfig+0x50>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	e9c0 2300 	strd	r2, r3, [r0]

  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <setIoTDeviceConfig+0x40>)
{
 80019be:	4601      	mov	r1, r0
  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f500 5021 	add.w	r0, r0, #10304	; 0x2840
 80019c6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80019ca:	3030      	adds	r0, #48	; 0x30
 80019cc:	f7ff fd00 	bl	80013d0 <FLASH_update>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	da0b      	bge.n	80019ec <setIoTDeviceConfig+0x3c>
  {
    msg_error("Failed programming the IOT config into Flash.\n");
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <setIoTDeviceConfig+0x44>)
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <setIoTDeviceConfig+0x48>)
 80019d8:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80019dc:	f021 fd10 	bl	8023400 <iprintf>
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <setIoTDeviceConfig+0x4c>)
 80019e2:	f021 fda9 	bl	8023538 <puts>
    ret = -1;
 80019e6:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 80019ea:	bd08      	pop	{r3, pc}
  int ret = 0;
 80019ec:	2000      	movs	r0, #0
  return ret;
 80019ee:	e7fc      	b.n	80019ea <setIoTDeviceConfig+0x3a>
 80019f0:	20000008 	.word	0x20000008
 80019f4:	08027fc7 	.word	0x08027fc7
 80019f8:	0802d71d 	.word	0x0802d71d
 80019fc:	0802dc71 	.word	0x0802dc71
 8001a00:	89abcdef 	.word	0x89abcdef
 8001a04:	01234567 	.word	0x01234567

08001a08 <getIoTDeviceConfig>:
  * @retval   0   Success:  The device configuration is configured and returned to the caller.
  *          -1   Error:    Device configuration absent.

  */
int getIoTDeviceConfig(const char ** const name)
{
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
  int ret = -1;

  if (name != NULL)
 8001a0a:	b1a8      	cbz	r0, 8001a38 <getIoTDeviceConfig+0x30>
  {
    if (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <getIoTDeviceConfig+0x40>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f502 5321 	add.w	r3, r2, #10304	; 0x2840
 8001a14:	e9d3 670c 	ldrd	r6, r7, [r3, #48]	; 0x30
 8001a18:	a509      	add	r5, pc, #36	; (adr r5, 8001a40 <getIoTDeviceConfig+0x38>)
 8001a1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001a1e:	42af      	cmp	r7, r5
 8001a20:	bf08      	it	eq
 8001a22:	42a6      	cmpeq	r6, r4
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	d105      	bne.n	8001a36 <getIoTDeviceConfig+0x2e>
    {
      *name = lUserConfigPtr->iot_config.device_name;
 8001a2a:	f502 5221 	add.w	r2, r2, #10304	; 0x2840
 8001a2e:	3238      	adds	r2, #56	; 0x38
 8001a30:	6002      	str	r2, [r0, #0]
      ret = 0;
 8001a32:	4618      	mov	r0, r3
    } else {
      *name = NULL;
    }
  }
  return ret;
}
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *name = NULL;
 8001a36:	6003      	str	r3, [r0, #0]
  int ret = -1;
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001a3c:	e7fa      	b.n	8001a34 <getIoTDeviceConfig+0x2c>
 8001a3e:	bf00      	nop
 8001a40:	89abcdef 	.word	0x89abcdef
 8001a44:	01234567 	.word	0x01234567
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	00000000 	.word	0x00000000

08001a50 <checkIoTDeviceConfig>:
  * @retval 0:  Configuration present.
  *        -1:  No configuration.
  */
int checkIoTDeviceConfig()
{
  return (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC) ? 0 : -1;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <checkIoTDeviceConfig+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8001a58:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a5c:	a304      	add	r3, pc, #16	; (adr r3, 8001a70 <checkIoTDeviceConfig+0x20>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	4299      	cmp	r1, r3
 8001a64:	bf0a      	itet	eq
 8001a66:	4290      	cmpeq	r0, r2
}
 8001a68:	f04f 30ff 	movne.w	r0, #4294967295
 8001a6c:	2000      	moveq	r0, #0
 8001a6e:	4770      	bx	lr
 8001a70:	89abcdef 	.word	0x89abcdef
 8001a74:	01234567 	.word	0x01234567
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	00000000 	.word	0x00000000

08001a80 <getTLSKeys>:
  * @param  Out: private_key    Device private key (PEM format: string)
  * @retval 0:    TLS credentials found, and passed back to the caller.
  *        -1:    TLS credentials not found.
  */
int getTLSKeys(const char ** const root_ca_cert, const char ** const device_cert, const char ** const private_key)
{
 8001a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int rc = -1;
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a84:	4f20      	ldr	r7, [pc, #128]	; (8001b08 <getTLSKeys+0x88>)
 8001a86:	683b      	ldr	r3, [r7, #0]
{
 8001a88:	4614      	mov	r4, r2
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a8a:	f503 5228 	add.w	r2, r3, #10752	; 0x2a00
 8001a8e:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8001a92:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8001a96:	4606      	mov	r6, r0
 8001a98:	460d      	mov	r5, r1
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a9a:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
 8001a9e:	4549      	cmp	r1, r9
 8001aa0:	bf08      	it	eq
 8001aa2:	4540      	cmpeq	r0, r8
 8001aa4:	d11a      	bne.n	8001adc <getTLSKeys+0x5c>
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001aa6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001aaa:	3330      	adds	r3, #48	; 0x30
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	bf08      	it	eq
 8001ab4:	4282      	cmpeq	r2, r0
 8001ab6:	d10d      	bne.n	8001ad4 <getTLSKeys+0x54>
  {
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001ab8:	b9e6      	cbnz	r6, 8001af4 <getTLSKeys+0x74>
    if (device_cert !=NULL)      *device_cert = lUserConfigPtr->tls_device_cert;
 8001aba:	b11d      	cbz	r5, 8001ac4 <getTLSKeys+0x44>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001ac2:	602b      	str	r3, [r5, #0]
    if (private_key!= NULL)      *private_key = lUserConfigPtr->tls_device_key;
 8001ac4:	b11c      	cbz	r4, 8001ace <getTLSKeys+0x4e>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001acc:	6023      	str	r3, [r4, #0]
    rc = 0;
 8001ace:	2000      	movs	r0, #0
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
    if (device_cert !=NULL)      *device_cert = NULL;
    if (private_key!= NULL)      *private_key = NULL;
  }
  return rc;
}
 8001ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001ad4:	f001 fe7e 	bl	80037d4 <app_needs_device_keypair>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d0ed      	beq.n	8001ab8 <getTLSKeys+0x38>
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
 8001adc:	b10e      	cbz	r6, 8001ae2 <getTLSKeys+0x62>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6033      	str	r3, [r6, #0]
    if (device_cert !=NULL)      *device_cert = NULL;
 8001ae2:	b10d      	cbz	r5, 8001ae8 <getTLSKeys+0x68>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	602b      	str	r3, [r5, #0]
    if (private_key!= NULL)      *private_key = NULL;
 8001ae8:	b10c      	cbz	r4, 8001aee <getTLSKeys+0x6e>
 8001aea:	2300      	movs	r3, #0
 8001aec:	6023      	str	r3, [r4, #0]
  int rc = -1;
 8001aee:	f04f 30ff 	mov.w	r0, #4294967295
  return rc;
 8001af2:	e7ed      	b.n	8001ad0 <getTLSKeys+0x50>
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6033      	str	r3, [r6, #0]
 8001af8:	e7df      	b.n	8001aba <getTLSKeys+0x3a>
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	89abcdef 	.word	0x89abcdef
 8001b04:	01234567 	.word	0x01234567
 8001b08:	20000008 	.word	0x20000008

08001b0c <mbedtls_net_recv>:
#include "msg.h"
#include <string.h>

/* Non-blocking interface implementation. Timeout is not applicable. */
int mbedtls_net_recv(void *ctx, unsigned char *buf, size_t len)
{
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4615      	mov	r5, r2
  int ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001b10:	f000 fa34 	bl	8001f7c <net_sock_recv>
  
  if (ret > 0)
 8001b14:	1e04      	subs	r4, r0, #0
 8001b16:	dc0b      	bgt.n	8001b30 <mbedtls_net_recv+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001b18:	d00c      	beq.n	8001b34 <mbedtls_net_recv+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_READ; 
  }
  
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b1a:	4907      	ldr	r1, [pc, #28]	; (8001b38 <mbedtls_net_recv+0x2c>)
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <mbedtls_net_recv+0x30>)
 8001b1e:	2244      	movs	r2, #68	; 0x44
 8001b20:	f021 fc6e 	bl	8023400 <iprintf>
 8001b24:	4621      	mov	r1, r4
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <mbedtls_net_recv+0x34>)
 
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001b28:	4c06      	ldr	r4, [pc, #24]	; (8001b44 <mbedtls_net_recv+0x38>)
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	f021 fc68 	bl	8023400 <iprintf>
}
 8001b30:	4620      	mov	r0, r4
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_READ; 
 8001b34:	4c04      	ldr	r4, [pc, #16]	; (8001b48 <mbedtls_net_recv+0x3c>)
 8001b36:	e7fb      	b.n	8001b30 <mbedtls_net_recv+0x24>
 8001b38:	08027fda 	.word	0x08027fda
 8001b3c:	0802d71d 	.word	0x0802d71d
 8001b40:	0802dc9f 	.word	0x0802dc9f
 8001b44:	ffff9400 	.word	0xffff9400
 8001b48:	ffff9700 	.word	0xffff9700

08001b4c <mbedtls_net_recv_blocking>:


/* Blocking interface implementation.*/
int mbedtls_net_recv_blocking(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)
{
 8001b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b4e:	4604      	mov	r4, r0
 8001b50:	460e      	mov	r6, r1
 8001b52:	4615      	mov	r5, r2
  int ret = 0;
  char stimeout[8];
  
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b54:	2108      	movs	r1, #8
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <mbedtls_net_recv_blocking+0x7c>)
 8001b58:	4668      	mov	r0, sp
{
 8001b5a:	461f      	mov	r7, r3
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b5c:	f021 fd3a 	bl	80235d4 <sniprintf>
 8001b60:	2806      	cmp	r0, #6
 8001b62:	dd0c      	ble.n	8001b7e <mbedtls_net_recv_blocking+0x32>
  {
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b64:	4919      	ldr	r1, [pc, #100]	; (8001bcc <mbedtls_net_recv_blocking+0x80>)
 8001b66:	481a      	ldr	r0, [pc, #104]	; (8001bd0 <mbedtls_net_recv_blocking+0x84>)
    return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
 8001b68:	4c1a      	ldr	r4, [pc, #104]	; (8001bd4 <mbedtls_net_recv_blocking+0x88>)
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b6a:	2252      	movs	r2, #82	; 0x52
 8001b6c:	f021 fc48 	bl	8023400 <iprintf>
 8001b70:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <mbedtls_net_recv_blocking+0x8c>)
 8001b72:	4639      	mov	r1, r7
 8001b74:	f021 fc44 	bl	8023400 <iprintf>
    }
  }
  
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
}
 8001b78:	4620      	mov	r0, r4
 8001b7a:	b003      	add	sp, #12
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (net_sock_setopt((net_sockhnd_t) ctx, "sock_read_timeout", (uint8_t *)stimeout, strlen(stimeout) + 1) == NET_OK)
 8001b7e:	4668      	mov	r0, sp
 8001b80:	f7fe fb30 	bl	80001e4 <strlen>
 8001b84:	4915      	ldr	r1, [pc, #84]	; (8001bdc <mbedtls_net_recv_blocking+0x90>)
 8001b86:	1c43      	adds	r3, r0, #1
 8001b88:	466a      	mov	r2, sp
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f000 f952 	bl	8001e34 <net_sock_setopt>
 8001b90:	b9a8      	cbnz	r0, 8001bbe <mbedtls_net_recv_blocking+0x72>
    ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001b92:	4620      	mov	r0, r4
 8001b94:	462a      	mov	r2, r5
 8001b96:	4631      	mov	r1, r6
 8001b98:	f000 f9f0 	bl	8001f7c <net_sock_recv>
    if (ret > 0)
 8001b9c:	1e04      	subs	r4, r0, #0
 8001b9e:	dceb      	bgt.n	8001b78 <mbedtls_net_recv_blocking+0x2c>
      switch(ret)
 8001ba0:	1ce3      	adds	r3, r4, #3
 8001ba2:	d00e      	beq.n	8001bc2 <mbedtls_net_recv_blocking+0x76>
 8001ba4:	b16c      	cbz	r4, 8001bc2 <mbedtls_net_recv_blocking+0x76>
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001ba6:	4909      	ldr	r1, [pc, #36]	; (8001bcc <mbedtls_net_recv_blocking+0x80>)
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <mbedtls_net_recv_blocking+0x84>)
 8001baa:	226e      	movs	r2, #110	; 0x6e
 8001bac:	f021 fc28 	bl	8023400 <iprintf>
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <mbedtls_net_recv_blocking+0x94>)
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <mbedtls_net_recv_blocking+0x98>)
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001bb6:	462a      	mov	r2, r5
 8001bb8:	f021 fc22 	bl	8023400 <iprintf>
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001bbc:	e7dc      	b.n	8001b78 <mbedtls_net_recv_blocking+0x2c>
  int ret = 0;
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	e7f1      	b.n	8001ba6 <mbedtls_net_recv_blocking+0x5a>
      switch(ret)
 8001bc2:	4c09      	ldr	r4, [pc, #36]	; (8001be8 <mbedtls_net_recv_blocking+0x9c>)
 8001bc4:	e7d8      	b.n	8001b78 <mbedtls_net_recv_blocking+0x2c>
 8001bc6:	bf00      	nop
 8001bc8:	0803120c 	.word	0x0803120c
 8001bcc:	08027feb 	.word	0x08027feb
 8001bd0:	0802d71d 	.word	0x0802d71d
 8001bd4:	ffff8f00 	.word	0xffff8f00
 8001bd8:	0802dce2 	.word	0x0802dce2
 8001bdc:	0802dd19 	.word	0x0802dd19
 8001be0:	0802dd2b 	.word	0x0802dd2b
 8001be4:	ffff9400 	.word	0xffff9400
 8001be8:	ffff9700 	.word	0xffff9700

08001bec <mbedtls_net_send>:


int mbedtls_net_send(void *ctx, const unsigned char *buf, size_t len)
{
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4615      	mov	r5, r2
  int ret = net_sock_send((net_sockhnd_t) ctx, buf, len);
 8001bf0:	f000 f9ca 	bl	8001f88 <net_sock_send>
  
  if (ret > 0)
 8001bf4:	1e04      	subs	r4, r0, #0
 8001bf6:	dc0b      	bgt.n	8001c10 <mbedtls_net_send+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001bf8:	d00c      	beq.n	8001c14 <mbedtls_net_send+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
  }
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001bfa:	4907      	ldr	r1, [pc, #28]	; (8001c18 <mbedtls_net_send+0x2c>)
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <mbedtls_net_send+0x30>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	f021 fbfe 	bl	8023400 <iprintf>
 8001c04:	4621      	mov	r1, r4
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <mbedtls_net_send+0x34>)
   *          MBEDTLS_ERR_SSL_INTERNAL_ERROR,
   *          MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY,
   *          MBEDTLS_ERR_SSL_CONN_EOF.
   *  Most often, the error is due to the closure of the connection by the remote host. */ 
  
  return MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY;
 8001c08:	4c06      	ldr	r4, [pc, #24]	; (8001c24 <mbedtls_net_send+0x38>)
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001c0a:	462a      	mov	r2, r5
 8001c0c:	f021 fbf8 	bl	8023400 <iprintf>
  
}
 8001c10:	4620      	mov	r0, r4
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
 8001c14:	4c04      	ldr	r4, [pc, #16]	; (8001c28 <mbedtls_net_send+0x3c>)
 8001c16:	e7fb      	b.n	8001c10 <mbedtls_net_send+0x24>
 8001c18:	08028005 	.word	0x08028005
 8001c1c:	0802d71d 	.word	0x0802d71d
 8001c20:	0802dd77 	.word	0x0802dd77
 8001c24:	ffff8780 	.word	0xffff8780
 8001c28:	ffff9780 	.word	0xffff9780

08001c2c <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2e:	4607      	mov	r7, r0
 8001c30:	460c      	mov	r4, r1
  int rc = NET_ERR;
  net_ctxt_t *ctxt = NULL;

  if (f_netinit == NULL)
 8001c32:	4616      	mov	r6, r2
 8001c34:	b36a      	cbz	r2, 8001c92 <net_init+0x66>
  {
    rc = NET_PARAM;
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 8001c36:	2008      	movs	r0, #8
 8001c38:	f020 fa98 	bl	802216c <malloc>
    if (ctxt == NULL)
 8001c3c:	4605      	mov	r5, r0
 8001c3e:	b958      	cbnz	r0, 8001c58 <net_init+0x2c>
    {
      msg_error("net_init: allocation failed.\n");
 8001c40:	4915      	ldr	r1, [pc, #84]	; (8001c98 <net_init+0x6c>)
 8001c42:	4816      	ldr	r0, [pc, #88]	; (8001c9c <net_init+0x70>)
 8001c44:	2253      	movs	r2, #83	; 0x53
 8001c46:	f021 fbdb 	bl	8023400 <iprintf>
 8001c4a:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <net_init+0x74>)
 8001c4c:	f021 fc74 	bl	8023538 <puts>
      rc = NET_ERR;
 8001c50:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
    }
  }
  
  return rc;
}
 8001c54:	4620      	mov	r0, r4
 8001c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c58:	2000      	movs	r0, #0
      switch(interface)
 8001c5a:	2c01      	cmp	r4, #1
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c5c:	e9c5 0000 	strd	r0, r0, [r5]
      switch(interface)
 8001c60:	d109      	bne.n	8001c76 <net_init+0x4a>
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 8001c62:	702c      	strb	r4, [r5, #0]
          if(f_netinit(NULL) == 0)
 8001c64:	47b0      	blx	r6
 8001c66:	4604      	mov	r4, r0
 8001c68:	b188      	cbz	r0, 8001c8e <net_init+0x62>
  int rc = NET_ERR;
 8001c6a:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f020 fa84 	bl	802217c <free>
 8001c74:	e7ee      	b.n	8001c54 <net_init+0x28>
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <net_init+0x6c>)
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <net_init+0x70>)
 8001c7a:	2277      	movs	r2, #119	; 0x77
 8001c7c:	f021 fbc0 	bl	8023400 <iprintf>
 8001c80:	4621      	mov	r1, r4
 8001c82:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <net_init+0x78>)
 8001c84:	f021 fbbc 	bl	8023400 <iprintf>
          rc = NET_PARAM;
 8001c88:	f06f 0401 	mvn.w	r4, #1
 8001c8c:	e7ef      	b.n	8001c6e <net_init+0x42>
    *nethnd = (net_hnd_t) ctxt;
 8001c8e:	603d      	str	r5, [r7, #0]
 8001c90:	e7e0      	b.n	8001c54 <net_init+0x28>
    rc = NET_PARAM;
 8001c92:	f06f 0401 	mvn.w	r4, #1
  return rc;
 8001c96:	e7dd      	b.n	8001c54 <net_init+0x28>
 8001c98:	08028016 	.word	0x08028016
 8001c9c:	0802d71d 	.word	0x0802d71d
 8001ca0:	0802ddba 	.word	0x0802ddba
 8001ca4:	0802ddd7 	.word	0x0802ddd7

08001ca8 <net_deinit>:


int net_deinit(net_hnd_t nethnd, net_if_deinit_t *f_netdeinit)
{
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netdeinit == NULL)
 8001cac:	b1a1      	cbz	r1, 8001cd8 <net_deinit+0x30>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001cae:	6844      	ldr	r4, [r0, #4]
 8001cb0:	b994      	cbnz	r4, 8001cd8 <net_deinit+0x30>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001cb2:	7803      	ldrb	r3, [r0, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <net_deinit+0x1e>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netdeinit(NULL);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4788      	blx	r1
          rc = NET_PARAM;
      }
      
      if (rc == NET_OK)
      {
        net_free((void *)nethnd);
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	f020 fa5d 	bl	802217c <free>
          rc = NET_OK;
 8001cc2:	4620      	mov	r0, r4
      }
    }
  }
  return rc;
}
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_deinit: interface type of %d not implemented.\n", ctxt->itf);
 8001cc6:	4906      	ldr	r1, [pc, #24]	; (8001ce0 <net_deinit+0x38>)
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <net_deinit+0x3c>)
 8001cca:	22b3      	movs	r2, #179	; 0xb3
 8001ccc:	f021 fb98 	bl	8023400 <iprintf>
 8001cd0:	7829      	ldrb	r1, [r5, #0]
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <net_deinit+0x40>)
 8001cd4:	f021 fb94 	bl	8023400 <iprintf>
    rc = NET_PARAM;
 8001cd8:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001cdc:	e7f2      	b.n	8001cc4 <net_deinit+0x1c>
 8001cde:	bf00      	nop
 8001ce0:	0802801f 	.word	0x0802801f
 8001ce4:	0802d71d 	.word	0x0802d71d
 8001ce8:	0802de08 	.word	0x0802de08

08001cec <net_reinit>:


int net_reinit(net_hnd_t nethnd, net_if_reinit_t *f_netreinit)
{
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netreinit == NULL)
 8001cf0:	b189      	cbz	r1, 8001d16 <net_reinit+0x2a>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001cf2:	6844      	ldr	r4, [r0, #4]
 8001cf4:	b97c      	cbnz	r4, 8001d16 <net_reinit+0x2a>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001cf6:	7803      	ldrb	r3, [r0, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d103      	bne.n	8001d04 <net_reinit+0x18>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netreinit(NULL);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4788      	blx	r1
          rc = NET_OK;
 8001d00:	4620      	mov	r0, r4
          rc = NET_PARAM;
      }
    }
  }
  return rc;
}
 8001d02:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_reinit: interface type of %d not implemented.\n", ctxt->itf);
 8001d04:	4905      	ldr	r1, [pc, #20]	; (8001d1c <net_reinit+0x30>)
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <net_reinit+0x34>)
 8001d08:	22e7      	movs	r2, #231	; 0xe7
 8001d0a:	f021 fb79 	bl	8023400 <iprintf>
 8001d0e:	7829      	ldrb	r1, [r5, #0]
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <net_reinit+0x38>)
 8001d12:	f021 fb75 	bl	8023400 <iprintf>
    rc = NET_PARAM;
 8001d16:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d1a:	e7f2      	b.n	8001d02 <net_reinit+0x16>
 8001d1c:	0802802a 	.word	0x0802802a
 8001d20:	0802d71d 	.word	0x0802d71d
 8001d24:	0802de3b 	.word	0x0802de3b

08001d28 <net_get_ip_address>:


int net_get_ip_address(net_hnd_t nethnd, net_ipaddr_t * ipAddress)
{
 8001d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d2a:	4604      	mov	r4, r0
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  
  if (ipAddress == NULL)
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	b309      	cbz	r1, 8001d74 <net_get_ip_address+0x4c>
  {
    rc = NET_PARAM;
  }
  else
  {
    switch(ctxt->itf)
 8001d30:	7803      	ldrb	r3, [r0, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d114      	bne.n	8001d60 <net_get_ip_address+0x38>
#ifdef USE_WIFI
      case NET_IF_WLAN:
      {
        uint8_t addr[4];
        /* WIFI_GetIP_Address() returns IPv4 addresses in binary format, network byte order. */
        WIFI_Status_t ret = WIFI_GetIP_Address(addr);
 8001d36:	a801      	add	r0, sp, #4
 8001d38:	f003 f894 	bl	8004e64 <WIFI_GetIP_Address>
        if (ret == WIFI_STATUS_OK)
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	b960      	cbnz	r0, 8001d5a <net_get_ip_address+0x32>
        {
          ipAddress->ipv = NET_IP_V4;
 8001d40:	4628      	mov	r0, r5
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d42:	2210      	movs	r2, #16
          ipAddress->ipv = NET_IP_V4;
 8001d44:	f800 4b01 	strb.w	r4, [r0], #1
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d48:	21ff      	movs	r1, #255	; 0xff
 8001d4a:	f020 fa55 	bl	80221f8 <memset>
          memcpy(&ipAddress->ip[12], addr, 4);
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	f8c5 300d 	str.w	r3, [r5, #13]
          rc = NET_OK;
 8001d54:	4620      	mov	r0, r4
        rc = NET_PARAM;
    }
  }
  
  return rc;
}
 8001d56:	b003      	add	sp, #12
 8001d58:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
        break;
 8001d5e:	e7fa      	b.n	8001d56 <net_get_ip_address+0x2e>
        msg_error("net_get_ip_address: interface type of %d not implemented.\n", ctxt->itf);
 8001d60:	4906      	ldr	r1, [pc, #24]	; (8001d7c <net_get_ip_address+0x54>)
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <net_get_ip_address+0x58>)
 8001d64:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001d68:	f021 fb4a 	bl	8023400 <iprintf>
 8001d6c:	7821      	ldrb	r1, [r4, #0]
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <net_get_ip_address+0x5c>)
 8001d70:	f021 fb46 	bl	8023400 <iprintf>
    rc = NET_PARAM;
 8001d74:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d78:	e7ed      	b.n	8001d56 <net_get_ip_address+0x2e>
 8001d7a:	bf00      	nop
 8001d7c:	08028035 	.word	0x08028035
 8001d80:	0802d71d 	.word	0x0802d71d
 8001d84:	0802de6e 	.word	0x0802de6e

08001d88 <net_get_mac_address>:


int net_get_mac_address(net_hnd_t nethnd, net_macaddr_t * macAddress)
{
 8001d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  switch (ctxt->itf)
 8001d8a:	7803      	ldrb	r3, [r0, #0]
 8001d8c:	2b01      	cmp	r3, #1
{
 8001d8e:	4604      	mov	r4, r0
 8001d90:	460d      	mov	r5, r1
  switch (ctxt->itf)
 8001d92:	d10f      	bne.n	8001db4 <net_get_mac_address+0x2c>
  {
#ifdef USE_WIFI
    case NET_IF_WLAN:
    {
      uint8_t addr[6];  /* WIFI_GetMAC_Address() returns in binary format. */
      WIFI_Status_t ret = WIFI_GetMAC_Address(addr);
 8001d94:	4668      	mov	r0, sp
 8001d96:	f003 f859 	bl	8004e4c <WIFI_GetMAC_Address>
      if (ret == WIFI_STATUS_OK)
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b938      	cbnz	r0, 8001dae <net_get_mac_address+0x26>
      {
        memcpy(macAddress->mac, addr, MIN(sizeof(macAddress->mac), 6));
 8001d9e:	9800      	ldr	r0, [sp, #0]
 8001da0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001da4:	6028      	str	r0, [r5, #0]
 8001da6:	80aa      	strh	r2, [r5, #4]
        rc = NET_OK;
 8001da8:	4618      	mov	r0, r3
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
      rc = NET_PARAM;
  }
  
  return rc;
}
 8001daa:	b003      	add	sp, #12
 8001dac:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8001db2:	e7fa      	b.n	8001daa <net_get_mac_address+0x22>
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <net_get_mac_address+0x48>)
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <net_get_mac_address+0x4c>)
 8001db8:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001dbc:	f021 fb20 	bl	8023400 <iprintf>
 8001dc0:	7821      	ldrb	r1, [r4, #0]
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <net_get_mac_address+0x50>)
 8001dc4:	f021 fb1c 	bl	8023400 <iprintf>
      rc = NET_PARAM;
 8001dc8:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001dcc:	e7ed      	b.n	8001daa <net_get_mac_address+0x22>
 8001dce:	bf00      	nop
 8001dd0:	08028048 	.word	0x08028048
 8001dd4:	0802d71d 	.word	0x0802d71d
 8001dd8:	0802dea9 	.word	0x0802dea9

08001ddc <net_sock_create>:


int net_sock_create(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  switch(proto)
 8001ddc:	2a02      	cmp	r2, #2
{
 8001dde:	b510      	push	{r4, lr}
 8001de0:	4604      	mov	r4, r0
  switch(proto)
 8001de2:	d00a      	beq.n	8001dfa <net_sock_create+0x1e>
 8001de4:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10a      	bne.n	8001e02 <net_sock_create+0x26>
  {
    case NET_PROTO_TCP:
    case NET_PROTO_UDP:
      switch(ctxt->itf)
 8001dec:	7803      	ldrb	r3, [r0, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d111      	bne.n	8001e16 <net_sock_create+0x3a>
    default:
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
      return NET_PARAM;
  }
  return NET_PARAM;
}
 8001df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 8001df6:	f000 bb41 	b.w	800247c <net_sock_create_wifi>
}
 8001dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return net_sock_create_mbedtls(nethnd, sockhnd, proto);
 8001dfe:	f000 bf17 	b.w	8002c30 <net_sock_create_mbedtls>
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
 8001e02:	4906      	ldr	r1, [pc, #24]	; (8001e1c <net_sock_create+0x40>)
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <net_sock_create+0x44>)
 8001e06:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8001e0a:	f021 faf9 	bl	8023400 <iprintf>
 8001e0e:	7821      	ldrb	r1, [r4, #0]
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <net_sock_create+0x48>)
 8001e12:	f021 faf5 	bl	8023400 <iprintf>
}
 8001e16:	f06f 0001 	mvn.w	r0, #1
 8001e1a:	bd10      	pop	{r4, pc}
 8001e1c:	08028070 	.word	0x08028070
 8001e20:	0802d71d 	.word	0x0802d71d
 8001e24:	0802dee5 	.word	0x0802dee5

08001e28 <net_sock_open>:


int net_sock_open(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001e28:	b410      	push	{r4}
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e2a:	6884      	ldr	r4, [r0, #8]
 8001e2c:	46a4      	mov	ip, r4
}
 8001e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e32:	4760      	bx	ip

08001e34 <net_sock_setopt>:


int net_sock_setopt(net_sockhnd_t sockhnd, const char * optname, const uint8_t * optbuf, size_t optlen)
{
 8001e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e38:	4681      	mov	r9, r0
 8001e3a:	460e      	mov	r6, r1
 8001e3c:	469a      	mov	sl, r3
  int rc = NET_PARAM;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001e3e:	4617      	mov	r7, r2
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d07d      	beq.n	8001f40 <net_sock_setopt+0x10c>
 8001e44:	1e1d      	subs	r5, r3, #0
 8001e46:	bf18      	it	ne
 8001e48:	2501      	movne	r5, #1

#ifdef USE_MBED_TLS
  net_tls_data_t * tlsData = sock->tlsData;
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e4a:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d17b      	bne.n	8001f4a <net_sock_setopt+0x116>
  net_tls_data_t * tlsData = sock->tlsData;
 8001e52:	f8d9 802c 	ldr.w	r8, [r9, #44]	; 0x2c
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e56:	f1b8 0f00 	cmp.w	r8, #0
 8001e5a:	d076      	beq.n	8001f4a <net_sock_setopt+0x116>
  {
    if (strcmp(optname, "tls_ca_certs") == 0)
 8001e5c:	493c      	ldr	r1, [pc, #240]	; (8001f50 <net_sock_setopt+0x11c>)
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f7fe f9b6 	bl	80001d0 <strcmp>
 8001e64:	4604      	mov	r4, r0
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d16c      	bne.n	8001f44 <net_sock_setopt+0x110>
    {
      if (has_opt_data)
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d06a      	beq.n	8001f44 <net_sock_setopt+0x110>
      {
        tlsData->tls_ca_certs = (unsigned char *) optbuf;
 8001e6e:	f8c8 7000 	str.w	r7, [r8]
        rc = NET_OK;
      }
    }
    if (strcmp(optname, "tls_dev_cert") == 0)
 8001e72:	4938      	ldr	r1, [pc, #224]	; (8001f54 <net_sock_setopt+0x120>)
 8001e74:	4630      	mov	r0, r6
 8001e76:	f7fe f9ab 	bl	80001d0 <strcmp>
 8001e7a:	b918      	cbnz	r0, 8001e84 <net_sock_setopt+0x50>
    {
      if (has_opt_data)
 8001e7c:	b115      	cbz	r5, 8001e84 <net_sock_setopt+0x50>
      {
        tlsData->tls_dev_cert = (unsigned char *) optbuf;
 8001e7e:	f8c8 7008 	str.w	r7, [r8, #8]
        rc = NET_OK;
 8001e82:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_dev_key") == 0)
 8001e84:	4934      	ldr	r1, [pc, #208]	; (8001f58 <net_sock_setopt+0x124>)
 8001e86:	4630      	mov	r0, r6
 8001e88:	f7fe f9a2 	bl	80001d0 <strcmp>
 8001e8c:	b918      	cbnz	r0, 8001e96 <net_sock_setopt+0x62>
    {
      if (has_opt_data)
 8001e8e:	b115      	cbz	r5, 8001e96 <net_sock_setopt+0x62>
      {
        tlsData->tls_dev_key = (unsigned char *) optbuf;
 8001e90:	f8c8 700c 	str.w	r7, [r8, #12]
        rc = NET_OK;
 8001e94:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_dev_pwd") == 0)
 8001e96:	4931      	ldr	r1, [pc, #196]	; (8001f5c <net_sock_setopt+0x128>)
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7fe f999 	bl	80001d0 <strcmp>
 8001e9e:	b918      	cbnz	r0, 8001ea8 <net_sock_setopt+0x74>
    {
      if (has_opt_data)
 8001ea0:	b115      	cbz	r5, 8001ea8 <net_sock_setopt+0x74>
      {
        tlsData->tls_dev_pwd = (uint8_t *) optbuf;
        tlsData->tls_dev_pwd_len = optlen;
 8001ea2:	e9c8 7a04 	strd	r7, sl, [r8, #16]
        rc = NET_OK;
 8001ea6:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_server_verification") == 0)
 8001ea8:	492d      	ldr	r1, [pc, #180]	; (8001f60 <net_sock_setopt+0x12c>)
 8001eaa:	4630      	mov	r0, r6
 8001eac:	f7fe f990 	bl	80001d0 <strcmp>
 8001eb0:	4328      	orrs	r0, r5
    {
      if (!has_opt_data)
      {
        tlsData->tls_srv_verification = true;
 8001eb2:	bf02      	ittt	eq
 8001eb4:	2301      	moveq	r3, #1
        rc = NET_OK;
 8001eb6:	4604      	moveq	r4, r0
        tlsData->tls_srv_verification = true;
 8001eb8:	f888 3018 	strbeq.w	r3, [r8, #24]
      }
    }
    if (strcmp(optname, "tls_server_noverification") == 0)
 8001ebc:	4929      	ldr	r1, [pc, #164]	; (8001f64 <net_sock_setopt+0x130>)
 8001ebe:	4630      	mov	r0, r6
 8001ec0:	f7fe f986 	bl	80001d0 <strcmp>
 8001ec4:	4328      	orrs	r0, r5
    {
      if (!has_opt_data)
      {
        tlsData->tls_srv_verification = false;
 8001ec6:	bf04      	itt	eq
 8001ec8:	f888 0018 	strbeq.w	r0, [r8, #24]
        rc = NET_OK;
 8001ecc:	4604      	moveq	r4, r0
      }
    }
    if (strcmp(optname, "tls_server_name") == 0)
 8001ece:	4926      	ldr	r1, [pc, #152]	; (8001f68 <net_sock_setopt+0x134>)
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7fe f97d 	bl	80001d0 <strcmp>
 8001ed6:	b918      	cbnz	r0, 8001ee0 <net_sock_setopt+0xac>
    {
      if (has_opt_data)
 8001ed8:	b115      	cbz	r5, 8001ee0 <net_sock_setopt+0xac>
      {
        tlsData->tls_srv_name = (char *) optbuf;
 8001eda:	f8c8 701c 	str.w	r7, [r8, #28]
        rc = NET_OK;
 8001ede:	4604      	mov	r4, r0
      }
    }
  }
#endif /* USE_MBED_TLS */
  
  if (strcmp(optname, "sock_blocking") == 0)
 8001ee0:	4922      	ldr	r1, [pc, #136]	; (8001f6c <net_sock_setopt+0x138>)
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f7fe f974 	bl	80001d0 <strcmp>
 8001ee8:	4328      	orrs	r0, r5
  {
    if (!has_opt_data)
    {
      sock->blocking = true;
 8001eea:	bf02      	ittt	eq
 8001eec:	2301      	moveq	r3, #1
      rc = NET_OK;
 8001eee:	4604      	moveq	r4, r0
      sock->blocking = true;
 8001ef0:	f889 3025 	strbeq.w	r3, [r9, #37]	; 0x25
    }
  }
  if (strcmp(optname, "sock_noblocking") == 0)
 8001ef4:	491e      	ldr	r1, [pc, #120]	; (8001f70 <net_sock_setopt+0x13c>)
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f7fe f96a 	bl	80001d0 <strcmp>
 8001efc:	4328      	orrs	r0, r5
  {
    if (!has_opt_data)
    {
      sock->blocking = false;
 8001efe:	bf04      	itt	eq
 8001f00:	f889 0025 	strbeq.w	r0, [r9, #37]	; 0x25
      rc = NET_OK;
 8001f04:	4604      	moveq	r4, r0
    }
  }
  if (strcmp(optname, "sock_read_timeout") == 0)
 8001f06:	491b      	ldr	r1, [pc, #108]	; (8001f74 <net_sock_setopt+0x140>)
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f7fe f961 	bl	80001d0 <strcmp>
 8001f0e:	4680      	mov	r8, r0
 8001f10:	b930      	cbnz	r0, 8001f20 <net_sock_setopt+0xec>
  {
    if (has_opt_data)
 8001f12:	b12d      	cbz	r5, 8001f20 <net_sock_setopt+0xec>
    {
      sock->read_timeout = atoi((char const *)optbuf);
 8001f14:	4638      	mov	r0, r7
 8001f16:	f01f fff8 	bl	8021f0a <atoi>
      rc = NET_OK;
 8001f1a:	4644      	mov	r4, r8
      sock->read_timeout = atoi((char const *)optbuf);
 8001f1c:	f8a9 0026 	strh.w	r0, [r9, #38]	; 0x26
    }
  }
  if (strcmp(optname, "sock_write_timeout") == 0)
 8001f20:	4630      	mov	r0, r6
 8001f22:	4915      	ldr	r1, [pc, #84]	; (8001f78 <net_sock_setopt+0x144>)
 8001f24:	f7fe f954 	bl	80001d0 <strcmp>
 8001f28:	4606      	mov	r6, r0
 8001f2a:	b930      	cbnz	r0, 8001f3a <net_sock_setopt+0x106>
  {
    if (has_opt_data)
 8001f2c:	b12d      	cbz	r5, 8001f3a <net_sock_setopt+0x106>
    {
      sock->write_timeout = atoi((char const *)optbuf);
 8001f2e:	4638      	mov	r0, r7
 8001f30:	f01f ffeb 	bl	8021f0a <atoi>
      rc = NET_OK;
 8001f34:	4634      	mov	r4, r6
      sock->write_timeout = atoi((char const *)optbuf);
 8001f36:	f8a9 0028 	strh.w	r0, [r9, #40]	; 0x28
    }
  }
  return rc;
}
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001f40:	4615      	mov	r5, r2
 8001f42:	e782      	b.n	8001e4a <net_sock_setopt+0x16>
  int rc = NET_PARAM;
 8001f44:	f06f 0401 	mvn.w	r4, #1
 8001f48:	e793      	b.n	8001e72 <net_sock_setopt+0x3e>
 8001f4a:	f06f 0401 	mvn.w	r4, #1
 8001f4e:	e7c7      	b.n	8001ee0 <net_sock_setopt+0xac>
 8001f50:	0802df1d 	.word	0x0802df1d
 8001f54:	0802df2a 	.word	0x0802df2a
 8001f58:	0802df37 	.word	0x0802df37
 8001f5c:	0802df43 	.word	0x0802df43
 8001f60:	0802df4f 	.word	0x0802df4f
 8001f64:	0802df67 	.word	0x0802df67
 8001f68:	0802df81 	.word	0x0802df81
 8001f6c:	0802df91 	.word	0x0802df91
 8001f70:	0802df9f 	.word	0x0802df9f
 8001f74:	0802dd19 	.word	0x0802dd19
 8001f78:	0802dfaf 	.word	0x0802dfaf

08001f7c <net_sock_recv>:


int net_sock_recv(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.recv != NULL) ? sock->methods.recv(sockhnd, buf, len) : NET_PARAM;
 8001f7c:	68c3      	ldr	r3, [r0, #12]
 8001f7e:	b103      	cbz	r3, 8001f82 <net_sock_recv+0x6>
 8001f80:	4718      	bx	r3
}
 8001f82:	f06f 0001 	mvn.w	r0, #1
 8001f86:	4770      	bx	lr

08001f88 <net_sock_send>:


int net_sock_send(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.send != NULL) ? sock->methods.send(sockhnd, buf, len) : NET_PARAM;
 8001f88:	6943      	ldr	r3, [r0, #20]
 8001f8a:	b103      	cbz	r3, 8001f8e <net_sock_send+0x6>
 8001f8c:	4718      	bx	r3
} 
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	4770      	bx	lr

08001f94 <net_sock_close>:
  

int net_sock_close(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.close != NULL) ? sock->methods.close(sockhnd) : NET_PARAM;
 8001f94:	69c3      	ldr	r3, [r0, #28]
 8001f96:	b103      	cbz	r3, 8001f9a <net_sock_close+0x6>
 8001f98:	4718      	bx	r3
}
 8001f9a:	f06f 0001 	mvn.w	r0, #1
 8001f9e:	4770      	bx	lr

08001fa0 <net_sock_destroy>:


int net_sock_destroy(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.destroy != NULL) ? sock->methods.destroy(sockhnd) : NET_PARAM;
 8001fa0:	6a03      	ldr	r3, [r0, #32]
 8001fa2:	b103      	cbz	r3, 8001fa6 <net_sock_destroy+0x6>
 8001fa4:	4718      	bx	r3
}
 8001fa6:	f06f 0001 	mvn.w	r0, #1
 8001faa:	4770      	bx	lr

08001fac <net_timeout_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t net_timeout_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 8001fac:	b510      	push	{r4, lr}
  int32_t ret = 0;
  uint32_t wrap_end = 0;
  
  if (now < init)
 8001fae:	4281      	cmp	r1, r0
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", init, now);
    wrap_end = UINT32_MAX - init;
  }
  ret = wrap_end - (now - init) + timeout;
 8001fb0:	4402      	add	r2, r0
    wrap_end = UINT32_MAX - init;
 8001fb2:	bf34      	ite	cc
 8001fb4:	43c4      	mvncc	r4, r0
  uint32_t wrap_end = 0;
 8001fb6:	2400      	movcs	r4, #0
  ret = wrap_end - (now - init) + timeout;
 8001fb8:	1a53      	subs	r3, r2, r1

  return ret;
}
 8001fba:	1918      	adds	r0, r3, r4
 8001fbc:	bd10      	pop	{r4, pc}

08001fbe <net_sock_destroy_tcp_wifi>:

int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd)
{
  int rc = NET_ERR;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
  net_ctxt_t *ctxt = sock->net;
 8001fbe:	6802      	ldr	r2, [r0, #0]
{
 8001fc0:	b508      	push	{r3, lr}
    
  /* Find the parent in the linked list.
   * Unlink and free. 
   */
  if (sock == ctxt->sock_list)
 8001fc2:	6853      	ldr	r3, [r2, #4]
 8001fc4:	4283      	cmp	r3, r0
 8001fc6:	d105      	bne.n	8001fd4 <net_sock_destroy_tcp_wifi+0x16>
    net_sock_ctxt_t *cur = ctxt->sock_list;
    do
    {
      if (cur->next == sock)
      {
        cur->next = sock->next;
 8001fc8:	6843      	ldr	r3, [r0, #4]
 8001fca:	6053      	str	r3, [r2, #4]
      cur = cur->next;
    } while(cur->next != NULL);
  }
  if (rc == NET_OK)
  {
    net_free(sock);
 8001fcc:	f020 f8d6 	bl	802217c <free>
 8001fd0:	2000      	movs	r0, #0
  }
  
  return rc;
}
 8001fd2:	bd08      	pop	{r3, pc}
      if (cur->next == sock)
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4283      	cmp	r3, r0
 8001fda:	d0f5      	beq.n	8001fc8 <net_sock_destroy_tcp_wifi+0xa>
    } while(cur->next != NULL);
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d1f8      	bne.n	8001fd4 <net_sock_destroy_tcp_wifi+0x16>
  int rc = NET_ERR;
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	e7f4      	b.n	8001fd2 <net_sock_destroy_tcp_wifi+0x14>

08001fe8 <net_sock_open_wifi>:
{
 8001fe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001fec:	461e      	mov	r6, r3
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9302      	str	r3, [sp, #8]
  memset(underlying_socket_busy, 0, sizeof(underlying_socket_busy));
 8001ff2:	9303      	str	r3, [sp, #12]
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001ff4:	6803      	ldr	r3, [r0, #0]
{
 8001ff6:	4617      	mov	r7, r2
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001ff8:	685c      	ldr	r4, [r3, #4]
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
{
 8001ffe:	4605      	mov	r5, r0
 8002000:	4688      	mov	r8, r1
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8002002:	6302      	str	r2, [r0, #48]	; 0x30
    if ( ((cur->proto == NET_PROTO_TCP) || (cur->proto == NET_PROTO_UDP) )&& ((int) cur->underlying_sock_ctxt >= 0) )
 8002004:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002008:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800200c:	2a01      	cmp	r2, #1
 800200e:	d106      	bne.n	800201e <net_sock_open_wifi+0x36>
 8002010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002012:	2b00      	cmp	r3, #0
      underlying_socket_busy[(int) cur->underlying_sock_ctxt] = true;
 8002014:	bfa2      	ittt	ge
 8002016:	a904      	addge	r1, sp, #16
 8002018:	185b      	addge	r3, r3, r1
 800201a:	f803 2c04 	strbge.w	r2, [r3, #-4]
    cur = cur->next;
 800201e:	6864      	ldr	r4, [r4, #4]
  } while (cur != NULL);
 8002020:	2c00      	cmp	r4, #0
 8002022:	d1ef      	bne.n	8002004 <net_sock_open_wifi+0x1c>
 8002024:	ab03      	add	r3, sp, #12
    if (underlying_socket_busy[i] == false)
 8002026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800202a:	b95a      	cbnz	r2, 8002044 <net_sock_open_wifi+0x5c>
      sock->underlying_sock_ctxt = (net_sockhnd_t) i;
 800202c:	632c      	str	r4, [r5, #48]	; 0x30
    switch(sock->proto)
 800202e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002032:	2b01      	cmp	r3, #1
 8002034:	d00a      	beq.n	800204c <net_sock_open_wifi+0x64>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d014      	beq.n	8002064 <net_sock_open_wifi+0x7c>
  int rc = NET_ERR;
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800203e:	b004      	add	sp, #16
 8002040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 8002044:	3401      	adds	r4, #1
 8002046:	2c04      	cmp	r4, #4
 8002048:	d1ed      	bne.n	8002026 <net_sock_open_wifi+0x3e>
 800204a:	e7f0      	b.n	800202e <net_sock_open_wifi+0x46>
        if (localport != 0)
 800204c:	bb26      	cbnz	r6, 8002098 <net_sock_open_wifi+0xb0>
          if (WIFI_GetHostAddress((char *)hostname, ip_addr) != WIFI_STATUS_OK)
 800204e:	a902      	add	r1, sp, #8
 8002050:	4640      	mov	r0, r8
 8002052:	f002 ff17 	bl	8004e84 <WIFI_GetHostAddress>
 8002056:	4601      	mov	r1, r0
 8002058:	b130      	cbz	r0, 8002068 <net_sock_open_wifi+0x80>
            msg_info("The address of %s could not be resolved.\n", hostname);
 800205a:	4641      	mov	r1, r8
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <net_sock_open_wifi+0xb8>)
 800205e:	f021 f9cf 	bl	8023400 <iprintf>
 8002062:	e7ea      	b.n	800203a <net_sock_open_wifi+0x52>
        sock->localport = localport;
 8002064:	636e      	str	r6, [r5, #52]	; 0x34
        proto = WIFI_UDP_PROTOCOL;
 8002066:	2101      	movs	r1, #1
      if( WIFI_STATUS_OK != WIFI_OpenClientConnection((uint32_t) sock->underlying_sock_ctxt,
 8002068:	b2b6      	uxth	r6, r6
 800206a:	b2bf      	uxth	r7, r7
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <net_sock_open_wifi+0xbc>)
 800206e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002070:	9601      	str	r6, [sp, #4]
 8002072:	9700      	str	r7, [sp, #0]
 8002074:	ab02      	add	r3, sp, #8
 8002076:	f002 ff11 	bl	8004e9c <WIFI_OpenClientConnection>
 800207a:	2800      	cmp	r0, #0
 800207c:	d0df      	beq.n	800203e <net_sock_open_wifi+0x56>
        msg_error("Failed opening the underlying Wifi socket %d.\n", (int) sock->underlying_sock_ctxt);
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <net_sock_open_wifi+0xc0>)
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <net_sock_open_wifi+0xc4>)
 8002082:	22c9      	movs	r2, #201	; 0xc9
 8002084:	f021 f9bc 	bl	8023400 <iprintf>
 8002088:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800208a:	4809      	ldr	r0, [pc, #36]	; (80020b0 <net_sock_open_wifi+0xc8>)
 800208c:	f021 f9b8 	bl	8023400 <iprintf>
        sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	6328      	str	r0, [r5, #48]	; 0x30
        rc = NET_ERR;
 8002096:	e7d2      	b.n	800203e <net_sock_open_wifi+0x56>
          rc = NET_PARAM;
 8002098:	f06f 0001 	mvn.w	r0, #1
 800209c:	e7cf      	b.n	800203e <net_sock_open_wifi+0x56>
 800209e:	bf00      	nop
 80020a0:	0802dfc2 	.word	0x0802dfc2
 80020a4:	08030129 	.word	0x08030129
 80020a8:	08028080 	.word	0x08028080
 80020ac:	0802d71d 	.word	0x0802d71d
 80020b0:	0802dfec 	.word	0x0802dfec

080020b4 <net_sock_recv_tcp_wifi>:
{
 80020b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020b8:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 80020bc:	f04f 0300 	mov.w	r3, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020c0:	4614      	mov	r4, r2
{
 80020c2:	4689      	mov	r9, r1
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020c4:	bf28      	it	cs
 80020c6:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80020ca:	4605      	mov	r5, r0
 80020cc:	4616      	mov	r6, r2
  uint16_t read = 0;
 80020ce:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint32_t start_time = HAL_GetTick();
 80020d2:	f006 fc49 	bl	8008968 <HAL_GetTick>
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020d6:	b2a4      	uxth	r4, r4
  uint32_t start_time = HAL_GetTick();
 80020d8:	4682      	mov	sl, r0
  uint8_t * tmp_buf = buf;
 80020da:	46c8      	mov	r8, r9
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80020dc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80020e0:	bb4b      	cbnz	r3, 8002136 <net_sock_recv_tcp_wifi+0x82>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80020e2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80020e6:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80020ea:	bb83      	cbnz	r3, 800214e <net_sock_recv_tcp_wifi+0x9a>
 80020ec:	2301      	movs	r3, #1
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4622      	mov	r2, r4
 80020f2:	f10d 030e 	add.w	r3, sp, #14
 80020f6:	4641      	mov	r1, r8
 80020f8:	f002 ff30 	bl	8004f5c <WIFI_ReceiveData>
    if (status != WIFI_STATUS_OK)
 80020fc:	4607      	mov	r7, r0
 80020fe:	b340      	cbz	r0, 8002152 <net_sock_recv_tcp_wifi+0x9e>
      msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 8002100:	4927      	ldr	r1, [pc, #156]	; (80021a0 <net_sock_recv_tcp_wifi+0xec>)
 8002102:	4828      	ldr	r0, [pc, #160]	; (80021a4 <net_sock_recv_tcp_wifi+0xf0>)
 8002104:	22f2      	movs	r2, #242	; 0xf2
 8002106:	f021 f97b 	bl	8023400 <iprintf>
 800210a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800210e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4639      	mov	r1, r7
 8002114:	4623      	mov	r3, r4
 8002116:	4824      	ldr	r0, [pc, #144]	; (80021a8 <net_sock_recv_tcp_wifi+0xf4>)
 8002118:	f021 f972 	bl	8023400 <iprintf>
      msg_error("The port is likely to have been closed by the server.\n")
 800211c:	4920      	ldr	r1, [pc, #128]	; (80021a0 <net_sock_recv_tcp_wifi+0xec>)
 800211e:	4821      	ldr	r0, [pc, #132]	; (80021a4 <net_sock_recv_tcp_wifi+0xf0>)
 8002120:	22f4      	movs	r2, #244	; 0xf4
 8002122:	f021 f96d 	bl	8023400 <iprintf>
 8002126:	4821      	ldr	r0, [pc, #132]	; (80021ac <net_sock_recv_tcp_wifi+0xf8>)
 8002128:	f021 fa06 	bl	8023538 <puts>
      rc = NET_EOF;
 800212c:	f06f 0003 	mvn.w	r0, #3
}
 8002130:	b004      	add	sp, #16
 8002132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002136:	f006 fc17 	bl	8008968 <HAL_GetTick>
 800213a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 800213c:	4601      	mov	r1, r0
 800213e:	4650      	mov	r0, sl
 8002140:	f7ff ff34 	bl	8001fac <net_timeout_left_ms>
 8002144:	2800      	cmp	r0, #0
 8002146:	dccc      	bgt.n	80020e2 <net_sock_recv_tcp_wifi+0x2e>
      rc = NET_TIMEOUT;
 8002148:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : tmp_buf - buf;
 800214c:	e7f0      	b.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800214e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002150:	e7cd      	b.n	80020ee <net_sock_recv_tcp_wifi+0x3a>
      if (read > tmp_len)
 8002152:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8002156:	42a2      	cmp	r2, r4
 8002158:	d90d      	bls.n	8002176 <net_sock_recv_tcp_wifi+0xc2>
        msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 800215a:	4911      	ldr	r1, [pc, #68]	; (80021a0 <net_sock_recv_tcp_wifi+0xec>)
 800215c:	4811      	ldr	r0, [pc, #68]	; (80021a4 <net_sock_recv_tcp_wifi+0xf0>)
 800215e:	22fc      	movs	r2, #252	; 0xfc
 8002160:	f021 f94e 	bl	8023400 <iprintf>
 8002164:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <net_sock_recv_tcp_wifi+0xfc>)
 800216a:	4622      	mov	r2, r4
 800216c:	f021 f948 	bl	8023400 <iprintf>
        rc = NET_ERR;
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	e7dc      	b.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
      tmp_buf += read;
 8002176:	4490      	add	r8, r2
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002178:	eba8 0009 	sub.w	r0, r8, r9
 800217c:	42b0      	cmp	r0, r6
 800217e:	d00d      	beq.n	800219c <net_sock_recv_tcp_wifi+0xe8>
 8002180:	1a34      	subs	r4, r6, r0
 8002182:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8002186:	bf28      	it	cs
 8002188:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 800218c:	b2a4      	uxth	r4, r4
  } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 800218e:	2a00      	cmp	r2, #0
 8002190:	d1ce      	bne.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
 8002192:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 8002196:	2a00      	cmp	r2, #0
 8002198:	d1a0      	bne.n	80020dc <net_sock_recv_tcp_wifi+0x28>
 800219a:	e7c9      	b.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 800219c:	463c      	mov	r4, r7
 800219e:	e7f6      	b.n	800218e <net_sock_recv_tcp_wifi+0xda>
 80021a0:	08028093 	.word	0x08028093
 80021a4:	0802d71d 	.word	0x0802d71d
 80021a8:	0802e01b 	.word	0x0802e01b
 80021ac:	0802e074 	.word	0x0802e074
 80021b0:	0802e0aa 	.word	0x0802e0aa

080021b4 <net_sock_recvfrom_udp_wifi>:
{
 80021b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b8:	ed2d 8b02 	vpush	{d8}
 80021bc:	b089      	sub	sp, #36	; 0x24
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021be:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 80021c2:	f04f 0700 	mov.w	r7, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021c6:	4614      	mov	r4, r2
{
 80021c8:	4605      	mov	r5, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021ca:	bf28      	it	cs
 80021cc:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80021d0:	9104      	str	r1, [sp, #16]
 80021d2:	4690      	mov	r8, r2
 80021d4:	469b      	mov	fp, r3
  uint16_t read = 0;
 80021d6:	f8ad 7018 	strh.w	r7, [sp, #24]
  uint32_t start_time = HAL_GetTick();
 80021da:	f006 fbc5 	bl	8008968 <HAL_GetTick>
  uint8_t * tmp_buf = buf;
 80021de:	f8dd a010 	ldr.w	sl, [sp, #16]
  uint32_t start_time = HAL_GetTick();
 80021e2:	ee08 0a10 	vmov	s16, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021e6:	b2a4      	uxth	r4, r4
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80021e8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
      uint16_t port = 0;
 80021ec:	f8ad 701a 	strh.w	r7, [sp, #26]
      uint8_t ip[4] = { 0, 0, 0, 0 };
 80021f0:	9707      	str	r7, [sp, #28]
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d133      	bne.n	800225e <net_sock_recvfrom_udp_wifi+0xaa>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80021f6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80021fa:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d13a      	bne.n	8002278 <net_sock_recvfrom_udp_wifi+0xc4>
 8002202:	2301      	movs	r3, #1
 8002204:	f10d 021a 	add.w	r2, sp, #26
 8002208:	9202      	str	r2, [sp, #8]
 800220a:	aa07      	add	r2, sp, #28
 800220c:	e9cd 3200 	strd	r3, r2, [sp]
 8002210:	4651      	mov	r1, sl
 8002212:	ab06      	add	r3, sp, #24
 8002214:	4622      	mov	r2, r4
 8002216:	f002 feb3 	bl	8004f80 <WIFI_ReceiveDataFrom>
      if (status != WIFI_STATUS_OK)
 800221a:	4681      	mov	r9, r0
 800221c:	b370      	cbz	r0, 800227c <net_sock_recvfrom_udp_wifi+0xc8>
        msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 800221e:	4935      	ldr	r1, [pc, #212]	; (80022f4 <net_sock_recvfrom_udp_wifi+0x140>)
 8002220:	4835      	ldr	r0, [pc, #212]	; (80022f8 <net_sock_recvfrom_udp_wifi+0x144>)
 8002222:	f44f 7293 	mov.w	r2, #294	; 0x126
 8002226:	f021 f8eb 	bl	8023400 <iprintf>
 800222a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800222e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4649      	mov	r1, r9
 8002234:	4623      	mov	r3, r4
 8002236:	4831      	ldr	r0, [pc, #196]	; (80022fc <net_sock_recvfrom_udp_wifi+0x148>)
 8002238:	f021 f8e2 	bl	8023400 <iprintf>
        msg_error("The port is likely to have been closed by the server.\n")
 800223c:	492d      	ldr	r1, [pc, #180]	; (80022f4 <net_sock_recvfrom_udp_wifi+0x140>)
 800223e:	482e      	ldr	r0, [pc, #184]	; (80022f8 <net_sock_recvfrom_udp_wifi+0x144>)
 8002240:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002244:	f021 f8dc 	bl	8023400 <iprintf>
 8002248:	482d      	ldr	r0, [pc, #180]	; (8002300 <net_sock_recvfrom_udp_wifi+0x14c>)
 800224a:	f021 f975 	bl	8023538 <puts>
        rc = NET_EOF;
 800224e:	f06f 0603 	mvn.w	r6, #3
}
 8002252:	4630      	mov	r0, r6
 8002254:	b009      	add	sp, #36	; 0x24
 8002256:	ecbd 8b02 	vpop	{d8}
 800225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 800225e:	f006 fb83 	bl	8008968 <HAL_GetTick>
 8002262:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8002264:	4601      	mov	r1, r0
 8002266:	ee18 0a10 	vmov	r0, s16
 800226a:	f7ff fe9f 	bl	8001fac <net_timeout_left_ms>
 800226e:	2800      	cmp	r0, #0
 8002270:	dcc1      	bgt.n	80021f6 <net_sock_recvfrom_udp_wifi+0x42>
        rc = NET_TIMEOUT;
 8002272:	f06f 0602 	mvn.w	r6, #2
 8002276:	e7ec      	b.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8002278:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800227a:	e7c3      	b.n	8002204 <net_sock_recvfrom_udp_wifi+0x50>
        if (read > tmp_len)
 800227c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8002280:	42a3      	cmp	r3, r4
 8002282:	d90e      	bls.n	80022a2 <net_sock_recvfrom_udp_wifi+0xee>
          msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8002284:	491b      	ldr	r1, [pc, #108]	; (80022f4 <net_sock_recvfrom_udp_wifi+0x140>)
 8002286:	481c      	ldr	r0, [pc, #112]	; (80022f8 <net_sock_recvfrom_udp_wifi+0x144>)
 8002288:	f44f 7298 	mov.w	r2, #304	; 0x130
 800228c:	f021 f8b8 	bl	8023400 <iprintf>
 8002290:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8002294:	481b      	ldr	r0, [pc, #108]	; (8002304 <net_sock_recvfrom_udp_wifi+0x150>)
 8002296:	4622      	mov	r2, r4
 8002298:	f021 f8b2 	bl	8023400 <iprintf>
          rc = NET_ERR;
 800229c:	f04f 36ff 	mov.w	r6, #4294967295
 80022a0:	e7d7      	b.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022a2:	9a04      	ldr	r2, [sp, #16]
        tmp_buf += read;
 80022a4:	449a      	add	sl, r3
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022a6:	ebaa 0602 	sub.w	r6, sl, r2
 80022aa:	4546      	cmp	r6, r8
 80022ac:	d01f      	beq.n	80022ee <net_sock_recvfrom_udp_wifi+0x13a>
 80022ae:	eba8 0406 	sub.w	r4, r8, r6
 80022b2:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 80022b6:	bf28      	it	cs
 80022b8:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 80022bc:	b2a4      	uxth	r4, r4
      remoteaddress->ipv = NET_IP_V4;
 80022be:	4658      	mov	r0, fp
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 80022c0:	2210      	movs	r2, #16
      remoteaddress->ipv = NET_IP_V4;
 80022c2:	f800 7b01 	strb.w	r7, [r0], #1
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 80022c6:	21ff      	movs	r1, #255	; 0xff
 80022c8:	9305      	str	r3, [sp, #20]
 80022ca:	f01f ff95 	bl	80221f8 <memset>
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022ce:	9a07      	ldr	r2, [sp, #28]
      *remoteport = port;
 80022d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022d2:	f8cb 200d 	str.w	r2, [fp, #13]
      *remoteport = port;
 80022d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80022da:	601a      	str	r2, [r3, #0]
    } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 80022dc:	9b05      	ldr	r3, [sp, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1b7      	bne.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
 80022e2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f47f af7e 	bne.w	80021e8 <net_sock_recvfrom_udp_wifi+0x34>
 80022ec:	e7b1      	b.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022ee:	4604      	mov	r4, r0
 80022f0:	e7e5      	b.n	80022be <net_sock_recvfrom_udp_wifi+0x10a>
 80022f2:	bf00      	nop
 80022f4:	080280aa 	.word	0x080280aa
 80022f8:	0802d71d 	.word	0x0802d71d
 80022fc:	0802e01b 	.word	0x0802e01b
 8002300:	0802e074 	.word	0x0802e074
 8002304:	0802e0aa 	.word	0x0802e0aa

08002308 <net_sock_send_tcp_wifi>:
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b085      	sub	sp, #20
  uint16_t sent = 0;
 800230c:	2300      	movs	r3, #0
{
 800230e:	4615      	mov	r5, r2
 8002310:	4604      	mov	r4, r0
 8002312:	460f      	mov	r7, r1
  uint16_t sent = 0;
 8002314:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint32_t start_time = HAL_GetTick();
 8002318:	f006 fb26 	bl	8008968 <HAL_GetTick>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800231c:	b2ad      	uxth	r5, r5
  uint32_t start_time = HAL_GetTick();
 800231e:	4606      	mov	r6, r0
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 8002320:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002324:	b9d3      	cbnz	r3, 800235c <net_sock_send_tcp_wifi+0x54>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002326:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800232a:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800232e:	bb0b      	cbnz	r3, 8002374 <net_sock_send_tcp_wifi+0x6c>
 8002330:	2301      	movs	r3, #1
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	462a      	mov	r2, r5
 8002336:	f10d 030e 	add.w	r3, sp, #14
 800233a:	4639      	mov	r1, r7
 800233c:	f002 fde6 	bl	8004f0c <WIFI_SendData>
    if (status !=  WIFI_STATUS_OK)
 8002340:	b1d0      	cbz	r0, 8002378 <net_sock_send_tcp_wifi+0x70>
      msg_error("Send failed.\n");
 8002342:	4912      	ldr	r1, [pc, #72]	; (800238c <net_sock_send_tcp_wifi+0x84>)
 8002344:	4812      	ldr	r0, [pc, #72]	; (8002390 <net_sock_send_tcp_wifi+0x88>)
 8002346:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800234a:	f021 f859 	bl	8023400 <iprintf>
 800234e:	4811      	ldr	r0, [pc, #68]	; (8002394 <net_sock_send_tcp_wifi+0x8c>)
 8002350:	f021 f8f2 	bl	8023538 <puts>
      rc = NET_ERR;
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002358:	b005      	add	sp, #20
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 800235c:	f006 fb04 	bl	8008968 <HAL_GetTick>
 8002360:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002362:	4601      	mov	r1, r0
 8002364:	4630      	mov	r0, r6
 8002366:	f7ff fe21 	bl	8001fac <net_timeout_left_ms>
 800236a:	2800      	cmp	r0, #0
 800236c:	dcdb      	bgt.n	8002326 <net_sock_send_tcp_wifi+0x1e>
      rc = NET_TIMEOUT;
 800236e:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002372:	e7f1      	b.n	8002358 <net_sock_send_tcp_wifi+0x50>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002374:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002376:	e7dc      	b.n	8002332 <net_sock_send_tcp_wifi+0x2a>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8002378:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800237c:	2800      	cmp	r0, #0
 800237e:	d1eb      	bne.n	8002358 <net_sock_send_tcp_wifi+0x50>
 8002380:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8002384:	2a00      	cmp	r2, #0
 8002386:	d1cb      	bne.n	8002320 <net_sock_send_tcp_wifi+0x18>
 8002388:	e7e6      	b.n	8002358 <net_sock_send_tcp_wifi+0x50>
 800238a:	bf00      	nop
 800238c:	080280c5 	.word	0x080280c5
 8002390:	0802d71d 	.word	0x0802d71d
 8002394:	0802e0f0 	.word	0x0802e0f0

08002398 <net_sock_sendto_udp_wifi>:
{
 8002398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	461d      	mov	r5, r3
  uint16_t sent = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8ad 3012 	strh.w	r3, [sp, #18]
{
 80023a6:	4604      	mov	r4, r0
 80023a8:	4688      	mov	r8, r1
 80023aa:	4616      	mov	r6, r2
  uint32_t start_time = HAL_GetTick();
 80023ac:	f006 fadc 	bl	8008968 <HAL_GetTick>
  if (remoteaddress->ipv != NET_IP_V4)
 80023b0:	782b      	ldrb	r3, [r5, #0]
  uint32_t start_time = HAL_GetTick();
 80023b2:	4607      	mov	r7, r0
  if (remoteaddress->ipv != NET_IP_V4)
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d147      	bne.n	8002448 <net_sock_sendto_udp_wifi+0xb0>
    ip_addr[i] = remoteaddress->ip[12+i];
 80023b8:	7b6b      	ldrb	r3, [r5, #13]
 80023ba:	f88d 3014 	strb.w	r3, [sp, #20]
 80023be:	7bab      	ldrb	r3, [r5, #14]
 80023c0:	f88d 3015 	strb.w	r3, [sp, #21]
 80023c4:	7beb      	ldrb	r3, [r5, #15]
 80023c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80023ca:	7c2b      	ldrb	r3, [r5, #16]
 80023cc:	f88d 3017 	strb.w	r3, [sp, #23]
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023d0:	b2b6      	uxth	r6, r6
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80023d2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023d6:	bb03      	cbnz	r3, 800241a <net_sock_sendto_udp_wifi+0x82>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023dc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80023e0:	bb3b      	cbnz	r3, 8002432 <net_sock_sendto_udp_wifi+0x9a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023e6:	b292      	uxth	r2, r2
 80023e8:	9202      	str	r2, [sp, #8]
 80023ea:	aa05      	add	r2, sp, #20
 80023ec:	e9cd 3200 	strd	r3, r2, [sp]
 80023f0:	4641      	mov	r1, r8
 80023f2:	f10d 0312 	add.w	r3, sp, #18
 80023f6:	4632      	mov	r2, r6
 80023f8:	f002 fd9a 	bl	8004f30 <WIFI_SendDataTo>
    if (status !=  WIFI_STATUS_OK)
 80023fc:	b1d8      	cbz	r0, 8002436 <net_sock_sendto_udp_wifi+0x9e>
      msg_error("Send failed.\n");
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <net_sock_sendto_udp_wifi+0xb8>)
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <net_sock_sendto_udp_wifi+0xbc>)
 8002402:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002406:	f020 fffb 	bl	8023400 <iprintf>
 800240a:	4813      	ldr	r0, [pc, #76]	; (8002458 <net_sock_sendto_udp_wifi+0xc0>)
 800240c:	f021 f894 	bl	8023538 <puts>
      rc = NET_ERR;
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002414:	b006      	add	sp, #24
 8002416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 800241a:	f006 faa5 	bl	8008968 <HAL_GetTick>
 800241e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002420:	4601      	mov	r1, r0
 8002422:	4638      	mov	r0, r7
 8002424:	f7ff fdc2 	bl	8001fac <net_timeout_left_ms>
 8002428:	2800      	cmp	r0, #0
 800242a:	dcd5      	bgt.n	80023d8 <net_sock_sendto_udp_wifi+0x40>
      rc = NET_TIMEOUT;
 800242c:	f06f 0002 	mvn.w	r0, #2
 8002430:	e7f0      	b.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002432:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002434:	e7d6      	b.n	80023e4 <net_sock_sendto_udp_wifi+0x4c>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8002436:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 800243a:	2800      	cmp	r0, #0
 800243c:	d1ea      	bne.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
 800243e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8002442:	2a00      	cmp	r2, #0
 8002444:	d1c5      	bne.n	80023d2 <net_sock_sendto_udp_wifi+0x3a>
 8002446:	e7e5      	b.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
    return NET_PARAM;
 8002448:	f06f 0001 	mvn.w	r0, #1
 800244c:	e7e2      	b.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
 800244e:	bf00      	nop
 8002450:	080280dc 	.word	0x080280dc
 8002454:	0802d71d 	.word	0x0802d71d
 8002458:	0802e0f0 	.word	0x0802e0f0

0800245c <net_sock_close_tcp_wifi>:
{
 800245c:	b510      	push	{r4, lr}
 800245e:	4604      	mov	r4, r0
  WIFI_Status_t status = WIFI_CloseClientConnection((uint8_t) ((uint32_t)sock->underlying_sock_ctxt && 0xFF));
 8002460:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002462:	3800      	subs	r0, #0
 8002464:	bf18      	it	ne
 8002466:	2001      	movne	r0, #1
 8002468:	f002 fd40 	bl	8004eec <WIFI_CloseClientConnection>
  if (status == WIFI_STATUS_OK)
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	b908      	cbnz	r0, 8002476 <net_sock_close_tcp_wifi+0x1a>
    sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002472:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002474:	bd10      	pop	{r4, pc}
  int rc = NET_ERR;
 8002476:	4618      	mov	r0, r3
  return rc;
 8002478:	e7fc      	b.n	8002474 <net_sock_close_tcp_wifi+0x18>
	...

0800247c <net_sock_create_wifi>:
{
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002480:	2038      	movs	r0, #56	; 0x38
{
 8002482:	460f      	mov	r7, r1
 8002484:	4616      	mov	r6, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002486:	f01f fe71 	bl	802216c <malloc>
  if (sock == NULL)
 800248a:	4604      	mov	r4, r0
 800248c:	b950      	cbnz	r0, 80024a4 <net_sock_create_wifi+0x28>
    msg_error("net_sock_create allocation failed.\n");
 800248e:	491c      	ldr	r1, [pc, #112]	; (8002500 <net_sock_create_wifi+0x84>)
 8002490:	481c      	ldr	r0, [pc, #112]	; (8002504 <net_sock_create_wifi+0x88>)
 8002492:	2259      	movs	r2, #89	; 0x59
 8002494:	f020 ffb4 	bl	8023400 <iprintf>
 8002498:	481b      	ldr	r0, [pc, #108]	; (8002508 <net_sock_create_wifi+0x8c>)
 800249a:	f021 f84d 	bl	8023538 <puts>
    rc = NET_ERR;
 800249e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 80024a4:	222c      	movs	r2, #44	; 0x2c
 80024a6:	2100      	movs	r1, #0
 80024a8:	300c      	adds	r0, #12
 80024aa:	f01f fea5 	bl	80221f8 <memset>
    sock->next = ctxt->sock_list;
 80024ae:	686b      	ldr	r3, [r5, #4]
 80024b0:	6063      	str	r3, [r4, #4]
    switch(proto)
 80024b2:	2e01      	cmp	r6, #1
    sock->methods.open      = (net_sock_open_wifi);
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <net_sock_create_wifi+0x90>)
    sock->net = ctxt;
 80024b6:	6025      	str	r5, [r4, #0]
    sock->methods.open      = (net_sock_open_wifi);
 80024b8:	60a3      	str	r3, [r4, #8]
    switch(proto)
 80024ba:	d007      	beq.n	80024cc <net_sock_create_wifi+0x50>
 80024bc:	2e03      	cmp	r6, #3
 80024be:	d01a      	beq.n	80024f6 <net_sock_create_wifi+0x7a>
        free(sock);
 80024c0:	4620      	mov	r0, r4
 80024c2:	f01f fe5b 	bl	802217c <free>
        return NET_PARAM;
 80024c6:	f06f 0001 	mvn.w	r0, #1
 80024ca:	e7ea      	b.n	80024a2 <net_sock_create_wifi+0x26>
        sock->methods.recv      = (net_sock_recv_tcp_wifi);
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <net_sock_create_wifi+0x94>)
 80024ce:	60e3      	str	r3, [r4, #12]
        sock->methods.send      = (net_sock_send_tcp_wifi);
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <net_sock_create_wifi+0x98>)
 80024d2:	6163      	str	r3, [r4, #20]
    sock->methods.close     = (net_sock_close_tcp_wifi);
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <net_sock_create_wifi+0x9c>)
 80024d6:	61e3      	str	r3, [r4, #28]
    sock->methods.destroy   = (net_sock_destroy_tcp_wifi);
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <net_sock_create_wifi+0xa0>)
 80024da:	6223      	str	r3, [r4, #32]
    sock->blocking          = NET_DEFAULT_BLOCKING;
 80024dc:	2301      	movs	r3, #1
 80024de:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80024e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    ctxt->sock_list         = sock; /* Insert at the head of the list */
 80024e6:	606c      	str	r4, [r5, #4]
    sock->proto             = proto;
 80024e8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80024ec:	84e3      	strh	r3, [r4, #38]	; 0x26
    sock->write_timeout     = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 80024ee:	8523      	strh	r3, [r4, #40]	; 0x28
    *sockhnd = (net_sockhnd_t) sock;
 80024f0:	603c      	str	r4, [r7, #0]
    rc = NET_OK;
 80024f2:	2000      	movs	r0, #0
 80024f4:	e7d5      	b.n	80024a2 <net_sock_create_wifi+0x26>
        sock->methods.recvfrom  = (net_sock_recvfrom_udp_wifi);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <net_sock_create_wifi+0xa4>)
 80024f8:	6123      	str	r3, [r4, #16]
        sock->methods.sendto    = (net_sock_sendto_udp_wifi);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <net_sock_create_wifi+0xa8>)
 80024fc:	61a3      	str	r3, [r4, #24]
        break;
 80024fe:	e7e9      	b.n	80024d4 <net_sock_create_wifi+0x58>
 8002500:	080280f5 	.word	0x080280f5
 8002504:	0802d71d 	.word	0x0802d71d
 8002508:	0802e0fd 	.word	0x0802e0fd
 800250c:	08001fe9 	.word	0x08001fe9
 8002510:	080020b5 	.word	0x080020b5
 8002514:	08002309 	.word	0x08002309
 8002518:	0800245d 	.word	0x0800245d
 800251c:	08001fbf 	.word	0x08001fbf
 8002520:	080021b5 	.word	0x080021b5
 8002524:	08002399 	.word	0x08002399

08002528 <my_debug>:
  ((void) level);
#if defined ( __GNUC__ ) && !defined(__CC_ARM) && defined (HAS_RTOS)
  ((void) ctx);
  mbedtls_printf("%s:%04d: %s\n", file, line, str );
#else
  mbedtls_fprintf((FILE *) ctx, "%s:%04d: %s\n", file, line, str );
 8002528:	4901      	ldr	r1, [pc, #4]	; (8002530 <my_debug+0x8>)
 800252a:	f01f bd01 	b.w	8021f30 <fiprintf>
 800252e:	bf00      	nop
 8002530:	0802e120 	.word	0x0802e120

08002534 <internal_close>:
#endif
}


static void internal_close(net_sock_ctxt_t * sock)
{
 8002534:	b510      	push	{r4, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002536:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	6303      	str	r3, [r0, #48]	; 0x30
 
  mbedtls_x509_crt_free(&tlsData->clicert);
 800253e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8002542:	f01e fd37 	bl	8020fb4 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&tlsData->pkey);
 8002546:	f204 7014 	addw	r0, r4, #1812	; 0x714
 800254a:	f013 f972 	bl	8015832 <mbedtls_pk_free>
  mbedtls_x509_crt_free(&tlsData->cacert);
 800254e:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 8002552:	f01e fd2f 	bl	8020fb4 <mbedtls_x509_crt_free>
  mbedtls_x509_crl_free(&tlsData->cacrl);
 8002556:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 800255a:	f01d fa95 	bl	801fa88 <mbedtls_x509_crl_free>
  mbedtls_ssl_free(&tlsData->ssl);
 800255e:	f504 701a 	add.w	r0, r4, #616	; 0x268
 8002562:	f01c fa53 	bl	801ea0c <mbedtls_ssl_free>
  mbedtls_ssl_config_free(&tlsData->conf);
 8002566:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800256a:	f01c fb1d 	bl	801eba8 <mbedtls_ssl_config_free>
  mbedtls_ctr_drbg_free(&tlsData->ctr_drbg);
 800256e:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8002572:	f00e f800 	bl	8010576 <mbedtls_ctr_drbg_free>
  mbedtls_entropy_free(&tlsData->entropy);
 8002576:	f104 0020 	add.w	r0, r4, #32
  
  return;
}
 800257a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_entropy_free(&tlsData->entropy);
 800257e:	f011 bbc3 	b.w	8013d08 <mbedtls_entropy_free>
	...

08002584 <net_sock_open_mbedtls>:
{
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	ed2d 8b02 	vpush	{d8}
  net_tls_data_t * tlsData = sock->tlsData;
 800258c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800258e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  mbedtls_ssl_config_init(&tlsData->conf);
 8002592:	f504 7651 	add.w	r6, r4, #836	; 0x344
{
 8002596:	4605      	mov	r5, r0
 8002598:	460f      	mov	r7, r1
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 800259a:	48ac      	ldr	r0, [pc, #688]	; (800284c <net_sock_open_mbedtls+0x2c8>)
 800259c:	49ac      	ldr	r1, [pc, #688]	; (8002850 <net_sock_open_mbedtls+0x2cc>)
{
 800259e:	ee08 3a10 	vmov	s16, r3
 80025a2:	4690      	mov	r8, r2
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 80025a4:	f013 ff30 	bl	8016408 <mbedtls_platform_set_calloc_free>
  mbedtls_ssl_config_init(&tlsData->conf);
 80025a8:	4630      	mov	r0, r6
 80025aa:	f01c fa9f 	bl	801eaec <mbedtls_ssl_config_init>
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 80025ae:	4ba9      	ldr	r3, [pc, #676]	; (8002854 <net_sock_open_mbedtls+0x2d0>)
 80025b0:	49a9      	ldr	r1, [pc, #676]	; (8002858 <net_sock_open_mbedtls+0x2d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4630      	mov	r0, r6
 80025b6:	689a      	ldr	r2, [r3, #8]
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 80025b8:	f504 7a94 	add.w	sl, r4, #296	; 0x128
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 80025bc:	f01b fd1c 	bl	801dff8 <mbedtls_ssl_conf_dbg>
  mbedtls_x509_crt_init(&tlsData->cacert);
 80025c0:	f504 796e 	add.w	r9, r4, #952	; 0x3b8
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 80025c4:	4650      	mov	r0, sl
 80025c6:	f00d ffd1 	bl	801056c <mbedtls_ctr_drbg_init>
  mbedtls_x509_crt_init(&tlsData->cacert);
 80025ca:	4648      	mov	r0, r9
 80025cc:	f01e fcec 	bl	8020fa8 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_cert != NULL)
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	b11b      	cbz	r3, 80025dc <net_sock_open_mbedtls+0x58>
    mbedtls_x509_crt_init(&tlsData->clicert);
 80025d4:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80025d8:	f01e fce6 	bl	8020fa8 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_key != NULL)
 80025dc:	68e3      	ldr	r3, [r4, #12]
 80025de:	b11b      	cbz	r3, 80025e8 <net_sock_open_mbedtls+0x64>
    mbedtls_pk_init(&tlsData->pkey);
 80025e0:	f204 7014 	addw	r0, r4, #1812	; 0x714
 80025e4:	f013 f920 	bl	8015828 <mbedtls_pk_init>
  mbedtls_debug_set_threshold(1);
 80025e8:	2001      	movs	r0, #1
  mbedtls_entropy_init(&tlsData->entropy);
 80025ea:	f104 0b20 	add.w	fp, r4, #32
  mbedtls_debug_set_threshold(1);
 80025ee:	f00e f947 	bl	8010880 <mbedtls_debug_set_threshold>
  mbedtls_entropy_init(&tlsData->entropy);
 80025f2:	4658      	mov	r0, fp
 80025f4:	f011 fb64 	bl	8013cc0 <mbedtls_entropy_init>
  if( (ret = mbedtls_entropy_add_source(&tlsData->entropy, mbedtls_hardware_poll, (void*)&hrng, 1, MBEDTLS_ENTROPY_SOURCE_STRONG)) != 0 )
 80025f8:	2301      	movs	r3, #1
 80025fa:	4a98      	ldr	r2, [pc, #608]	; (800285c <net_sock_open_mbedtls+0x2d8>)
 80025fc:	4998      	ldr	r1, [pc, #608]	; (8002860 <net_sock_open_mbedtls+0x2dc>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4658      	mov	r0, fp
 8002602:	f011 fb8a 	bl	8013d1a <mbedtls_entropy_add_source>
 8002606:	b1b0      	cbz	r0, 8002636 <net_sock_open_mbedtls+0xb2>
    msg_error( " failed\n  ! mbedtls_entropy_add_source returned -0x%x\n", -ret );
 8002608:	4996      	ldr	r1, [pc, #600]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800260a:	9003      	str	r0, [sp, #12]
 800260c:	2295      	movs	r2, #149	; 0x95
 800260e:	4896      	ldr	r0, [pc, #600]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002610:	f020 fef6 	bl	8023400 <iprintf>
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	4895      	ldr	r0, [pc, #596]	; (800286c <net_sock_open_mbedtls+0x2e8>)
 8002618:	4259      	negs	r1, r3
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 800261a:	f020 fef1 	bl	8023400 <iprintf>
    internal_close(sock);
 800261e:	4628      	mov	r0, r5
 8002620:	f7ff ff88 	bl	8002534 <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 8002624:	f04f 36ff 	mov.w	r6, #4294967295
}
 8002628:	4630      	mov	r0, r6
 800262a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800262e:	ecbd 8b02 	vpop	{d8}
 8002632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if( (ret = mbedtls_ctr_drbg_seed(&tlsData->ctr_drbg, mbedtls_entropy_func, &tlsData->entropy, pers, strlen((char const *)pers))) != 0 )
 8002636:	2307      	movs	r3, #7
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	465a      	mov	r2, fp
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <net_sock_open_mbedtls+0x2ec>)
 800263e:	498d      	ldr	r1, [pc, #564]	; (8002874 <net_sock_open_mbedtls+0x2f0>)
 8002640:	4650      	mov	r0, sl
 8002642:	f00d fffe 	bl	8010642 <mbedtls_ctr_drbg_seed>
 8002646:	4683      	mov	fp, r0
 8002648:	b140      	cbz	r0, 800265c <net_sock_open_mbedtls+0xd8>
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 800264a:	4986      	ldr	r1, [pc, #536]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800264c:	4886      	ldr	r0, [pc, #536]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800264e:	229b      	movs	r2, #155	; 0x9b
 8002650:	f020 fed6 	bl	8023400 <iprintf>
 8002654:	4888      	ldr	r0, [pc, #544]	; (8002878 <net_sock_open_mbedtls+0x2f4>)
 8002656:	f1cb 0100 	rsb	r1, fp, #0
 800265a:	e7de      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if (tlsData->tls_ca_certs != NULL)
 800265c:	6821      	ldr	r1, [r4, #0]
 800265e:	b199      	cbz	r1, 8002688 <net_sock_open_mbedtls+0x104>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->cacert, (unsigned char const *)tlsData->tls_ca_certs, strlen((char const *) tlsData->tls_ca_certs) + 1)) != 0 )
 8002660:	4608      	mov	r0, r1
 8002662:	9103      	str	r1, [sp, #12]
 8002664:	f7fd fdbe 	bl	80001e4 <strlen>
 8002668:	9903      	ldr	r1, [sp, #12]
 800266a:	1c42      	adds	r2, r0, #1
 800266c:	4648      	mov	r0, r9
 800266e:	f01f f84d 	bl	802170c <mbedtls_x509_crt_parse>
 8002672:	4683      	mov	fp, r0
 8002674:	b140      	cbz	r0, 8002688 <net_sock_open_mbedtls+0x104>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\n", -ret);
 8002676:	497b      	ldr	r1, [pc, #492]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 8002678:	487b      	ldr	r0, [pc, #492]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800267a:	22a5      	movs	r2, #165	; 0xa5
 800267c:	f020 fec0 	bl	8023400 <iprintf>
 8002680:	487e      	ldr	r0, [pc, #504]	; (800287c <net_sock_open_mbedtls+0x2f8>)
 8002682:	f1cb 0100 	rsb	r1, fp, #0
 8002686:	e7c8      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if (tlsData->tls_ca_crl != NULL)
 8002688:	6861      	ldr	r1, [r4, #4]
 800268a:	b1a1      	cbz	r1, 80026b6 <net_sock_open_mbedtls+0x132>
    if( (ret = mbedtls_x509_crl_parse(&tlsData->cacrl, (unsigned char const *)tlsData->tls_ca_crl, strlen((char const *) tlsData->tls_ca_crl) + 1)) != 0 )
 800268c:	4608      	mov	r0, r1
 800268e:	9103      	str	r1, [sp, #12]
 8002690:	f7fd fda8 	bl	80001e4 <strlen>
 8002694:	9903      	ldr	r1, [sp, #12]
 8002696:	1c42      	adds	r2, r0, #1
 8002698:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 800269c:	f01d fc14 	bl	801fec8 <mbedtls_x509_crl_parse>
 80026a0:	4683      	mov	fp, r0
 80026a2:	b140      	cbz	r0, 80026b6 <net_sock_open_mbedtls+0x132>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing the cert revocation list\n", -ret);
 80026a4:	496f      	ldr	r1, [pc, #444]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80026a6:	4870      	ldr	r0, [pc, #448]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80026a8:	22af      	movs	r2, #175	; 0xaf
 80026aa:	f020 fea9 	bl	8023400 <iprintf>
 80026ae:	4874      	ldr	r0, [pc, #464]	; (8002880 <net_sock_open_mbedtls+0x2fc>)
 80026b0:	f1cb 0100 	rsb	r1, fp, #0
 80026b4:	e7b1      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 80026b6:	68a1      	ldr	r1, [r4, #8]
 80026b8:	b379      	cbz	r1, 800271a <net_sock_open_mbedtls+0x196>
 80026ba:	68e3      	ldr	r3, [r4, #12]
 80026bc:	b36b      	cbz	r3, 800271a <net_sock_open_mbedtls+0x196>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->clicert, (unsigned char const *)tlsData->tls_dev_cert, strlen((char const *)tlsData->tls_dev_cert) + 1)) != 0 )
 80026be:	4608      	mov	r0, r1
 80026c0:	9103      	str	r1, [sp, #12]
 80026c2:	f7fd fd8f 	bl	80001e4 <strlen>
 80026c6:	9903      	ldr	r1, [sp, #12]
 80026c8:	1c42      	adds	r2, r0, #1
 80026ca:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80026ce:	f01f f81d 	bl	802170c <mbedtls_x509_crt_parse>
 80026d2:	4683      	mov	fp, r0
 80026d4:	b140      	cbz	r0, 80026e8 <net_sock_open_mbedtls+0x164>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing device cert\n", -ret);
 80026d6:	4963      	ldr	r1, [pc, #396]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80026d8:	4863      	ldr	r0, [pc, #396]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80026da:	22ba      	movs	r2, #186	; 0xba
 80026dc:	f020 fe90 	bl	8023400 <iprintf>
 80026e0:	4868      	ldr	r0, [pc, #416]	; (8002884 <net_sock_open_mbedtls+0x300>)
 80026e2:	f1cb 0100 	rsb	r1, fp, #0
 80026e6:	e798      	b.n	800261a <net_sock_open_mbedtls+0x96>
    if( (ret = mbedtls_pk_parse_key(&tlsData->pkey, (unsigned char const *)tlsData->tls_dev_key, strlen((char const *)tlsData->tls_dev_key) + 1,
 80026e8:	68e1      	ldr	r1, [r4, #12]
 80026ea:	9103      	str	r1, [sp, #12]
 80026ec:	4608      	mov	r0, r1
 80026ee:	f7fd fd79 	bl	80001e4 <strlen>
 80026f2:	6963      	ldr	r3, [r4, #20]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	1c42      	adds	r2, r0, #1
 80026f8:	6923      	ldr	r3, [r4, #16]
 80026fa:	9903      	ldr	r1, [sp, #12]
 80026fc:	f204 7014 	addw	r0, r4, #1812	; 0x714
 8002700:	f013 fda0 	bl	8016244 <mbedtls_pk_parse_key>
 8002704:	4683      	mov	fp, r0
 8002706:	b140      	cbz	r0, 800271a <net_sock_open_mbedtls+0x196>
      msg_error(" failed\n  !  mbedtls_pk_parse_key returned -0x%x while parsing private key\n\n", -ret);
 8002708:	4956      	ldr	r1, [pc, #344]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800270a:	4857      	ldr	r0, [pc, #348]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800270c:	22cf      	movs	r2, #207	; 0xcf
 800270e:	f020 fe77 	bl	8023400 <iprintf>
 8002712:	485d      	ldr	r0, [pc, #372]	; (8002888 <net_sock_open_mbedtls+0x304>)
 8002714:	f1cb 0100 	rsb	r1, fp, #0
 8002718:	e77f      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if( (ret = net_sock_create(hnet, &sock->underlying_sock_ctxt, NET_PROTO_TCP)) != NET_OK )
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <net_sock_open_mbedtls+0x308>)
 800271c:	2201      	movs	r2, #1
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8002724:	f7ff fb5a 	bl	8001ddc <net_sock_create>
 8002728:	4603      	mov	r3, r0
 800272a:	b148      	cbz	r0, 8002740 <net_sock_open_mbedtls+0x1bc>
    msg_error(" failed to create a TCP socket  ! net_sock_create returned %d\n", ret);
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800272e:	9003      	str	r0, [sp, #12]
 8002730:	22da      	movs	r2, #218	; 0xda
 8002732:	484d      	ldr	r0, [pc, #308]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002734:	f020 fe64 	bl	8023400 <iprintf>
 8002738:	9b03      	ldr	r3, [sp, #12]
 800273a:	4855      	ldr	r0, [pc, #340]	; (8002890 <net_sock_open_mbedtls+0x30c>)
 800273c:	4619      	mov	r1, r3
 800273e:	e76c      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if( (ret = net_sock_setopt(sock->underlying_sock_ctxt, (sock->blocking == true) ? "sock_blocking" : "sock_noblocking", NULL, 0)) != NET_OK )
 8002740:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8002744:	f8df b168 	ldr.w	fp, [pc, #360]	; 80028b0 <net_sock_open_mbedtls+0x32c>
 8002748:	4602      	mov	r2, r0
 800274a:	4852      	ldr	r0, [pc, #328]	; (8002894 <net_sock_open_mbedtls+0x310>)
 800274c:	2900      	cmp	r1, #0
 800274e:	bf18      	it	ne
 8002750:	4658      	movne	r0, fp
 8002752:	4601      	mov	r1, r0
 8002754:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002756:	f7ff fb6d 	bl	8001e34 <net_sock_setopt>
 800275a:	4603      	mov	r3, r0
 800275c:	b1e8      	cbz	r0, 800279a <net_sock_open_mbedtls+0x216>
    msg_error(" failed setting the %s option.\n", (sock->blocking == true) ? "sock_blocking" : "sock_noblocking");
 800275e:	4941      	ldr	r1, [pc, #260]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 8002760:	4841      	ldr	r0, [pc, #260]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002762:	22e1      	movs	r2, #225	; 0xe1
 8002764:	f020 fe4c 	bl	8023400 <iprintf>
 8002768:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800276c:	4b49      	ldr	r3, [pc, #292]	; (8002894 <net_sock_open_mbedtls+0x310>)
 800276e:	484a      	ldr	r0, [pc, #296]	; (8002898 <net_sock_open_mbedtls+0x314>)
 8002770:	2900      	cmp	r1, #0
 8002772:	bf18      	it	ne
 8002774:	465b      	movne	r3, fp
 8002776:	4619      	mov	r1, r3
 8002778:	f020 fe42 	bl	8023400 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800277c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800277e:	f7ff fc0f 	bl	8001fa0 <net_sock_destroy>
 8002782:	2800      	cmp	r0, #0
 8002784:	f43f af4b 	beq.w	800261e <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 8002788:	22e4      	movs	r2, #228	; 0xe4
 800278a:	4936      	ldr	r1, [pc, #216]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800278c:	4836      	ldr	r0, [pc, #216]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800278e:	f020 fe37 	bl	8023400 <iprintf>
 8002792:	4842      	ldr	r0, [pc, #264]	; (800289c <net_sock_open_mbedtls+0x318>)
 8002794:	f020 fed0 	bl	8023538 <puts>
    internal_close(sock);
 8002798:	e741      	b.n	800261e <net_sock_open_mbedtls+0x9a>
  if( (ret = mbedtls_ssl_config_defaults(&tlsData->conf, MBEDTLS_SSL_IS_CLIENT, MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0)
 800279a:	4602      	mov	r2, r0
 800279c:	4601      	mov	r1, r0
 800279e:	4630      	mov	r0, r6
 80027a0:	f01c f9a8 	bl	801eaf4 <mbedtls_ssl_config_defaults>
 80027a4:	4683      	mov	fp, r0
 80027a6:	b140      	cbz	r0, 80027ba <net_sock_open_mbedtls+0x236>
    msg_error(" failed\n  ! mbedtls_ssl_config_defaults returned -0x%x\n\n", -ret);
 80027a8:	492e      	ldr	r1, [pc, #184]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80027aa:	482f      	ldr	r0, [pc, #188]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80027ac:	22ed      	movs	r2, #237	; 0xed
 80027ae:	f020 fe27 	bl	8023400 <iprintf>
 80027b2:	483b      	ldr	r0, [pc, #236]	; (80028a0 <net_sock_open_mbedtls+0x31c>)
 80027b4:	f1cb 0100 	rsb	r1, fp, #0
 80027b8:	e72f      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if(tlsData->tls_srv_verification == true)
 80027ba:	7e23      	ldrb	r3, [r4, #24]
 80027bc:	b33b      	cbz	r3, 800280e <net_sock_open_mbedtls+0x28a>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_REQUIRED);
 80027be:	2102      	movs	r1, #2
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80027c0:	4630      	mov	r0, r6
 80027c2:	f01b fc0f 	bl	801dfe4 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&tlsData->conf, mbedtls_ctr_drbg_random, &tlsData->ctr_drbg);
 80027c6:	4652      	mov	r2, sl
 80027c8:	4936      	ldr	r1, [pc, #216]	; (80028a4 <net_sock_open_mbedtls+0x320>)
 80027ca:	4630      	mov	r0, r6
 80027cc:	f01b fc11 	bl	801dff2 <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&tlsData->conf, &tlsData->cacert, (tlsData->tls_ca_crl != NULL) ? &tlsData->cacrl : NULL);
 80027d0:	6862      	ldr	r2, [r4, #4]
 80027d2:	b10a      	cbz	r2, 80027d8 <net_sock_open_mbedtls+0x254>
 80027d4:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80027d8:	4649      	mov	r1, r9
 80027da:	4630      	mov	r0, r6
 80027dc:	f01b fc1a 	bl	801e014 <mbedtls_ssl_conf_ca_chain>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 80027e0:	68a3      	ldr	r3, [r4, #8]
 80027e2:	b1b3      	cbz	r3, 8002812 <net_sock_open_mbedtls+0x28e>
 80027e4:	68e3      	ldr	r3, [r4, #12]
 80027e6:	b1a3      	cbz	r3, 8002812 <net_sock_open_mbedtls+0x28e>
    if( (ret = mbedtls_ssl_conf_own_cert(&tlsData->conf, &tlsData->clicert, &tlsData->pkey)) != 0)
 80027e8:	f204 7214 	addw	r2, r4, #1812	; 0x714
 80027ec:	f504 61bc 	add.w	r1, r4, #1504	; 0x5e0
 80027f0:	4630      	mov	r0, r6
 80027f2:	f01b fc0c 	bl	801e00e <mbedtls_ssl_conf_own_cert>
 80027f6:	4681      	mov	r9, r0
 80027f8:	b158      	cbz	r0, 8002812 <net_sock_open_mbedtls+0x28e>
      msg_error(" failed\n  ! mbedtls_ssl_conf_own_cert returned -0x%x\n\n", -ret);
 80027fa:	491a      	ldr	r1, [pc, #104]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80027fc:	481a      	ldr	r0, [pc, #104]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80027fe:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002802:	f020 fdfd 	bl	8023400 <iprintf>
 8002806:	4828      	ldr	r0, [pc, #160]	; (80028a8 <net_sock_open_mbedtls+0x324>)
 8002808:	f1c9 0100 	rsb	r1, r9, #0
 800280c:	e705      	b.n	800261a <net_sock_open_mbedtls+0x96>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 800280e:	2101      	movs	r1, #1
 8002810:	e7d6      	b.n	80027c0 <net_sock_open_mbedtls+0x23c>
  if( (ret = mbedtls_ssl_setup(&tlsData->ssl, &tlsData->conf)) != 0 )
 8002812:	f504 791a 	add.w	r9, r4, #616	; 0x268
 8002816:	4631      	mov	r1, r6
 8002818:	4648      	mov	r0, r9
 800281a:	f01b fe51 	bl	801e4c0 <mbedtls_ssl_setup>
 800281e:	4682      	mov	sl, r0
 8002820:	2800      	cmp	r0, #0
 8002822:	d047      	beq.n	80028b4 <net_sock_open_mbedtls+0x330>
    msg_error(" failed\n  ! mbedtls_ssl_setup returned -0x%x\n\n", -ret);
 8002824:	490f      	ldr	r1, [pc, #60]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002828:	f44f 7288 	mov.w	r2, #272	; 0x110
 800282c:	f020 fde8 	bl	8023400 <iprintf>
 8002830:	481e      	ldr	r0, [pc, #120]	; (80028ac <net_sock_open_mbedtls+0x328>)
 8002832:	f1ca 0100 	rsb	r1, sl, #0
 8002836:	f020 fde3 	bl	8023400 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800283a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800283c:	f7ff fbb0 	bl	8001fa0 <net_sock_destroy>
 8002840:	2800      	cmp	r0, #0
 8002842:	f43f aeec 	beq.w	800261e <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 8002846:	f44f 728a 	mov.w	r2, #276	; 0x114
 800284a:	e79e      	b.n	800278a <net_sock_open_mbedtls+0x206>
 800284c:	08021f15 	.word	0x08021f15
 8002850:	0802217d 	.word	0x0802217d
 8002854:	2000057c 	.word	0x2000057c
 8002858:	08002529 	.word	0x08002529
 800285c:	20001168 	.word	0x20001168
 8002860:	080012e1 	.word	0x080012e1
 8002864:	0802810a 	.word	0x0802810a
 8002868:	0802d71d 	.word	0x0802d71d
 800286c:	0802e12d 	.word	0x0802e12d
 8002870:	0802e164 	.word	0x0802e164
 8002874:	08013d49 	.word	0x08013d49
 8002878:	0802e16c 	.word	0x0802e16c
 800287c:	0802e19e 	.word	0x0802e19e
 8002880:	0802e1ea 	.word	0x0802e1ea
 8002884:	0802e245 	.word	0x0802e245
 8002888:	0802e293 	.word	0x0802e293
 800288c:	20001174 	.word	0x20001174
 8002890:	0802e2e0 	.word	0x0802e2e0
 8002894:	0802df9f 	.word	0x0802df9f
 8002898:	0802e31f 	.word	0x0802e31f
 800289c:	0802e33f 	.word	0x0802e33f
 80028a0:	0802e35d 	.word	0x0802e35d
 80028a4:	08010715 	.word	0x08010715
 80028a8:	0802e396 	.word	0x0802e396
 80028ac:	0802e3cd 	.word	0x0802e3cd
 80028b0:	0802df91 	.word	0x0802df91
  if(tlsData->tls_srv_name != NULL)
 80028b4:	69e1      	ldr	r1, [r4, #28]
 80028b6:	b169      	cbz	r1, 80028d4 <net_sock_open_mbedtls+0x350>
    if( (ret = mbedtls_ssl_set_hostname(&tlsData->ssl, tlsData->tls_srv_name)) != 0 )
 80028b8:	4648      	mov	r0, r9
 80028ba:	f01b fbaf 	bl	801e01c <mbedtls_ssl_set_hostname>
 80028be:	4682      	mov	sl, r0
 80028c0:	b140      	cbz	r0, 80028d4 <net_sock_open_mbedtls+0x350>
      msg_error(" failed\n  ! mbedtls_ssl_set_hostname returned %d\n\n", ret);
 80028c2:	4948      	ldr	r1, [pc, #288]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 80028c4:	4848      	ldr	r0, [pc, #288]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 80028c6:	f240 121d 	movw	r2, #285	; 0x11d
 80028ca:	f020 fd99 	bl	8023400 <iprintf>
 80028ce:	4847      	ldr	r0, [pc, #284]	; (80029ec <net_sock_open_mbedtls+0x468>)
 80028d0:	4651      	mov	r1, sl
 80028d2:	e6a2      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if (sock->blocking == true)
 80028d4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80028d8:	b353      	cbz	r3, 8002930 <net_sock_open_mbedtls+0x3ac>
    mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 80028da:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 80028dc:	4630      	mov	r0, r6
 80028de:	f01b fb94 	bl	801e00a <mbedtls_ssl_conf_read_timeout>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, NULL, mbedtls_net_recv_blocking);
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <net_sock_open_mbedtls+0x46c>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2300      	movs	r3, #0
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <net_sock_open_mbedtls+0x470>)
 80028ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028ec:	4648      	mov	r0, r9
 80028ee:	f01b fb86 	bl	801dffe <mbedtls_ssl_set_bio>
  if( (ret = net_sock_open(sock->underlying_sock_ctxt, hostname, dstport, localport)) != NET_OK )
 80028f2:	ee18 3a10 	vmov	r3, s16
 80028f6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80028f8:	4642      	mov	r2, r8
 80028fa:	4639      	mov	r1, r7
 80028fc:	f7ff fa94 	bl	8001e28 <net_sock_open>
 8002900:	4606      	mov	r6, r0
 8002902:	2800      	cmp	r0, #0
 8002904:	d063      	beq.n	80029ce <net_sock_open_mbedtls+0x44a>
    msg_error(" failed to connect to %s:%d  ! net_sock_open returned %d\n", hostname, dstport, ret);
 8002906:	4937      	ldr	r1, [pc, #220]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002908:	4837      	ldr	r0, [pc, #220]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 800290a:	f240 1231 	movw	r2, #305	; 0x131
 800290e:	f020 fd77 	bl	8023400 <iprintf>
 8002912:	4839      	ldr	r0, [pc, #228]	; (80029f8 <net_sock_open_mbedtls+0x474>)
 8002914:	4633      	mov	r3, r6
 8002916:	4642      	mov	r2, r8
 8002918:	4639      	mov	r1, r7
 800291a:	f020 fd71 	bl	8023400 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800291e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002920:	f7ff fb3e 	bl	8001fa0 <net_sock_destroy>
 8002924:	2800      	cmp	r0, #0
 8002926:	f43f ae7a 	beq.w	800261e <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 800292a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800292e:	e72c      	b.n	800278a <net_sock_open_mbedtls+0x206>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <net_sock_open_mbedtls+0x478>)
 8002934:	e7d8      	b.n	80028e8 <net_sock_open_mbedtls+0x364>
    if( (ret != MBEDTLS_ERR_SSL_WANT_READ) && (ret != MBEDTLS_ERR_SSL_WANT_WRITE) )
 8002936:	f026 0380 	bic.w	r3, r6, #128	; 0x80
 800293a:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800293e:	d046      	beq.n	80029ce <net_sock_open_mbedtls+0x44a>
      if( (tlsData->flags = mbedtls_ssl_get_verify_result(&tlsData->ssl)) != 0 )
 8002940:	4648      	mov	r0, r9
 8002942:	f01b fb91 	bl	801e068 <mbedtls_ssl_get_verify_result>
 8002946:	4603      	mov	r3, r0
 8002948:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
 800294c:	b188      	cbz	r0, 8002972 <net_sock_open_mbedtls+0x3ee>
        mbedtls_x509_crt_verify_info(vrfy_buf, sizeof(vrfy_buf), "  ! ", tlsData->flags);
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <net_sock_open_mbedtls+0x47c>)
 8002950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002954:	a804      	add	r0, sp, #16
 8002956:	f01d feef 	bl	8020738 <mbedtls_x509_crt_verify_info>
        if (tlsData->tls_srv_verification == true)
 800295a:	7e23      	ldrb	r3, [r4, #24]
 800295c:	b12b      	cbz	r3, 800296a <net_sock_open_mbedtls+0x3e6>
          msg_error("Server verification:\n%s\n", vrfy_buf);
 800295e:	4921      	ldr	r1, [pc, #132]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002960:	4821      	ldr	r0, [pc, #132]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 8002962:	f240 1247 	movw	r2, #327	; 0x147
 8002966:	f020 fd4b 	bl	8023400 <iprintf>
          msg_info("Server verification:\n%s\n", vrfy_buf);
 800296a:	4826      	ldr	r0, [pc, #152]	; (8002a04 <net_sock_open_mbedtls+0x480>)
 800296c:	a904      	add	r1, sp, #16
 800296e:	f020 fd47 	bl	8023400 <iprintf>
      msg_error(" failed\n  ! mbedtls_ssl_handshake returned -0x%x\n", -ret);
 8002972:	491c      	ldr	r1, [pc, #112]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002974:	481c      	ldr	r0, [pc, #112]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 8002976:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800297a:	f020 fd41 	bl	8023400 <iprintf>
 800297e:	4822      	ldr	r0, [pc, #136]	; (8002a08 <net_sock_open_mbedtls+0x484>)
 8002980:	4271      	negs	r1, r6
 8002982:	f020 fd3d 	bl	8023400 <iprintf>
      if (net_sock_close(sock->underlying_sock_ctxt) != NET_OK )
 8002986:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002988:	f7ff fb04 	bl	8001f94 <net_sock_close>
 800298c:	b140      	cbz	r0, 80029a0 <net_sock_open_mbedtls+0x41c>
        msg_error("Failed closing the socket.\n");
 800298e:	4915      	ldr	r1, [pc, #84]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002990:	4815      	ldr	r0, [pc, #84]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 8002992:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8002996:	f020 fd33 	bl	8023400 <iprintf>
 800299a:	481c      	ldr	r0, [pc, #112]	; (8002a0c <net_sock_open_mbedtls+0x488>)
 800299c:	f020 fdcc 	bl	8023538 <puts>
      if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 80029a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029a2:	f7ff fafd 	bl	8001fa0 <net_sock_destroy>
 80029a6:	b140      	cbz	r0, 80029ba <net_sock_open_mbedtls+0x436>
        msg_error("Failed destroying the socket.\n");
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 80029aa:	480f      	ldr	r0, [pc, #60]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 80029ac:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80029b0:	f020 fd26 	bl	8023400 <iprintf>
 80029b4:	4816      	ldr	r0, [pc, #88]	; (8002a10 <net_sock_open_mbedtls+0x48c>)
 80029b6:	f020 fdbf 	bl	8023538 <puts>
      internal_close(sock);
 80029ba:	4628      	mov	r0, r5
 80029bc:	f7ff fdba 	bl	8002534 <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 80029c0:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 80029c4:	f47f ae2e 	bne.w	8002624 <net_sock_open_mbedtls+0xa0>
 80029c8:	f06f 0605 	mvn.w	r6, #5
 80029cc:	e62c      	b.n	8002628 <net_sock_open_mbedtls+0xa4>
  while( (ret = mbedtls_ssl_handshake(&tlsData->ssl)) != 0 )
 80029ce:	4648      	mov	r0, r9
 80029d0:	f01b fba2 	bl	801e118 <mbedtls_ssl_handshake>
 80029d4:	4606      	mov	r6, r0
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d1ad      	bne.n	8002936 <net_sock_open_mbedtls+0x3b2>
  if( (ret = mbedtls_ssl_get_record_expansion(&tlsData->ssl)) >= 0)
 80029da:	4648      	mov	r0, r9
 80029dc:	f01b fb4e 	bl	801e07c <mbedtls_ssl_get_record_expansion>
  return rc;
 80029e0:	e622      	b.n	8002628 <net_sock_open_mbedtls+0xa4>
 80029e2:	bf00      	nop
 80029e4:	0802810a 	.word	0x0802810a
 80029e8:	0802d71d 	.word	0x0802d71d
 80029ec:	0802e3fc 	.word	0x0802e3fc
 80029f0:	08001b4d 	.word	0x08001b4d
 80029f4:	08001bed 	.word	0x08001bed
 80029f8:	0802e42f 	.word	0x0802e42f
 80029fc:	08001b0d 	.word	0x08001b0d
 8002a00:	0802e469 	.word	0x0802e469
 8002a04:	0802e46e 	.word	0x0802e46e
 8002a08:	0802e487 	.word	0x0802e487
 8002a0c:	0802e4b9 	.word	0x0802e4b9
 8002a10:	0802e33f 	.word	0x0802e33f

08002a14 <net_sock_recv_mbedtls>:
{
 8002a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002a18:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002a1c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002ad0 <net_sock_recv_mbedtls+0xbc>
 8002a20:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002ad4 <net_sock_recv_mbedtls+0xc0>
{
 8002a24:	4604      	mov	r4, r0
 8002a26:	460e      	mov	r6, r1
 8002a28:	4617      	mov	r7, r2
  uint32_t start_time = HAL_GetTick();
 8002a2a:	f005 ff9d 	bl	8008968 <HAL_GetTick>
 8002a2e:	4605      	mov	r5, r0
    if (sock->blocking == true)
 8002a30:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002a34:	b9ab      	cbnz	r3, 8002a62 <net_sock_recv_mbedtls+0x4e>
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002a36:	463a      	mov	r2, r7
 8002a38:	4631      	mov	r1, r6
 8002a3a:	f508 701a 	add.w	r0, r8, #616	; 0x268
 8002a3e:	f01b feab 	bl	801e798 <mbedtls_ssl_read>
    if (ret > 0)
 8002a42:	f1b0 0900 	subs.w	r9, r0, #0
 8002a46:	dc3d      	bgt.n	8002ac4 <net_sock_recv_mbedtls+0xb0>
      switch (ret)
 8002a48:	f519 4fd0 	cmn.w	r9, #26624	; 0x6800
 8002a4c:	d017      	beq.n	8002a7e <net_sock_recv_mbedtls+0x6a>
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <net_sock_recv_mbedtls+0xb4>)
 8002a50:	4599      	cmp	r9, r3
 8002a52:	da17      	bge.n	8002a84 <net_sock_recv_mbedtls+0x70>
 8002a54:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8002a58:	f512 4fd2 	cmn.w	r2, #26880	; 0x6900
 8002a5c:	d115      	bne.n	8002a8a <net_sock_recv_mbedtls+0x76>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e020      	b.n	8002aa4 <net_sock_recv_mbedtls+0x90>
      mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 8002a62:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002a64:	f508 7051 	add.w	r0, r8, #836	; 0x344
 8002a68:	f01b facf 	bl	801e00a <mbedtls_ssl_conf_read_timeout>
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0)
 8002a6c:	f005 ff7c 	bl	8008968 <HAL_GetTick>
 8002a70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002a72:	4601      	mov	r1, r0
 8002a74:	4628      	mov	r0, r5
 8002a76:	f7ff fa99 	bl	8001fac <net_timeout_left_ms>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	dcdb      	bgt.n	8002a36 <net_sock_recv_mbedtls+0x22>
        rc = NET_TIMEOUT;
 8002a7e:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : read;
 8002a82:	e01d      	b.n	8002ac0 <net_sock_recv_mbedtls+0xac>
      switch (ret)
 8002a84:	f1b9 0f00 	cmp.w	r9, #0
 8002a88:	d018      	beq.n	8002abc <net_sock_recv_mbedtls+0xa8>
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002a8a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002a8e:	4651      	mov	r1, sl
 8002a90:	4658      	mov	r0, fp
 8002a92:	f020 fcb5 	bl	8023400 <iprintf>
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <net_sock_recv_mbedtls+0xb8>)
 8002a98:	f1c9 0100 	rsb	r1, r9, #0
 8002a9c:	f020 fcb0 	bl	8023400 <iprintf>
          rc = NET_ERR;
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0) );
 8002aa4:	f519 4fd2 	cmn.w	r9, #26880	; 0x6900
 8002aa8:	d002      	beq.n	8002ab0 <net_sock_recv_mbedtls+0x9c>
 8002aaa:	f519 4fd1 	cmn.w	r9, #26752	; 0x6880
 8002aae:	d107      	bne.n	8002ac0 <net_sock_recv_mbedtls+0xac>
 8002ab0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002ab4:	b123      	cbz	r3, 8002ac0 <net_sock_recv_mbedtls+0xac>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d0ba      	beq.n	8002a30 <net_sock_recv_mbedtls+0x1c>
 8002aba:	e001      	b.n	8002ac0 <net_sock_recv_mbedtls+0xac>
          rc = NET_EOF;
 8002abc:	f06f 0003 	mvn.w	r0, #3
}
 8002ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002ac4:	4648      	mov	r0, r9
 8002ac6:	e7fb      	b.n	8002ac0 <net_sock_recv_mbedtls+0xac>
 8002ac8:	ffff9801 	.word	0xffff9801
 8002acc:	0802e4d4 	.word	0x0802e4d4
 8002ad0:	08028120 	.word	0x08028120
 8002ad4:	0802d71d 	.word	0x0802d71d

08002ad8 <net_sock_send_mbedtls>:
{
 8002ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002adc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ade:	9301      	str	r3, [sp, #4]
{
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460e      	mov	r6, r1
 8002ae4:	4617      	mov	r7, r2
  uint32_t start_time = HAL_GetTick();
 8002ae6:	f005 ff3f 	bl	8008968 <HAL_GetTick>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002aea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002b84 <net_sock_send_mbedtls+0xac>
 8002aee:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002b88 <net_sock_send_mbedtls+0xb0>
 8002af2:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002b8c <net_sock_send_mbedtls+0xb4>
  uint32_t start_time = HAL_GetTick();
 8002af6:	4605      	mov	r5, r0
    if (sock->blocking == true)
 8002af8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002afc:	bb63      	cbnz	r3, 8002b58 <net_sock_send_mbedtls+0x80>
    ret = mbedtls_ssl_write(&tlsData->ssl, buf + sent, len - sent);
 8002afe:	9b01      	ldr	r3, [sp, #4]
 8002b00:	463a      	mov	r2, r7
 8002b02:	4631      	mov	r1, r6
 8002b04:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002b08:	f01b fdc8 	bl	801e69c <mbedtls_ssl_write>
    if (ret > 0)
 8002b0c:	f1b0 0800 	subs.w	r8, r0, #0
 8002b10:	dc36      	bgt.n	8002b80 <net_sock_send_mbedtls+0xa8>
      switch(ret)
 8002b12:	f518 4fd1 	cmn.w	r8, #26752	; 0x6880
 8002b16:	d02e      	beq.n	8002b76 <net_sock_send_mbedtls+0x9e>
 8002b18:	f1b8 0f00 	cmp.w	r8, #0
 8002b1c:	d028      	beq.n	8002b70 <net_sock_send_mbedtls+0x98>
 8002b1e:	f518 4fd2 	cmn.w	r8, #26880	; 0x6900
 8002b22:	d028      	beq.n	8002b76 <net_sock_send_mbedtls+0x9e>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002b24:	f240 12d9 	movw	r2, #473	; 0x1d9
 8002b28:	4649      	mov	r1, r9
 8002b2a:	4650      	mov	r0, sl
 8002b2c:	f020 fc68 	bl	8023400 <iprintf>
 8002b30:	f1c8 0100 	rsb	r1, r8, #0
 8002b34:	4658      	mov	r0, fp
 8002b36:	f020 fc63 	bl	8023400 <iprintf>
          rc = NET_ERR;
 8002b3a:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0));
 8002b3e:	f028 0380 	bic.w	r3, r8, #128	; 0x80
 8002b42:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8002b46:	d118      	bne.n	8002b7a <net_sock_send_mbedtls+0xa2>
 8002b48:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002b4c:	b1ab      	cbz	r3, 8002b7a <net_sock_send_mbedtls+0xa2>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d0d2      	beq.n	8002af8 <net_sock_send_mbedtls+0x20>
}
 8002b52:	b003      	add	sp, #12
 8002b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0)
 8002b58:	f005 ff06 	bl	8008968 <HAL_GetTick>
 8002b5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002b5e:	4601      	mov	r1, r0
 8002b60:	4628      	mov	r0, r5
 8002b62:	f7ff fa23 	bl	8001fac <net_timeout_left_ms>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	dcc9      	bgt.n	8002afe <net_sock_send_mbedtls+0x26>
        rc = NET_TIMEOUT;
 8002b6a:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002b6e:	e7f0      	b.n	8002b52 <net_sock_send_mbedtls+0x7a>
          rc = NET_EOF;
 8002b70:	f06f 0003 	mvn.w	r0, #3
 8002b74:	e7e3      	b.n	8002b3e <net_sock_send_mbedtls+0x66>
      switch(ret)
 8002b76:	2000      	movs	r0, #0
 8002b78:	e7e1      	b.n	8002b3e <net_sock_send_mbedtls+0x66>
  return (rc < 0) ? rc : sent;
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d1e9      	bne.n	8002b52 <net_sock_send_mbedtls+0x7a>
 8002b7e:	4680      	mov	r8, r0
 8002b80:	4640      	mov	r0, r8
 8002b82:	e7e6      	b.n	8002b52 <net_sock_send_mbedtls+0x7a>
 8002b84:	08028136 	.word	0x08028136
 8002b88:	0802d71d 	.word	0x0802d71d
 8002b8c:	0802e502 	.word	0x0802e502

08002b90 <net_sock_close_mbedtls>:
{
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4604      	mov	r4, r0
  net_tls_data_t * tlsData = sock->tlsData;
 8002b94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ret = mbedtls_ssl_close_notify(&tlsData->ssl);
 8002b96:	f500 751a 	add.w	r5, r0, #616	; 0x268
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f01b faea 	bl	801e174 <mbedtls_ssl_close_notify>
  while ( (ret == MBEDTLS_ERR_SSL_WANT_WRITE) || (ret == MBEDTLS_ERR_SSL_WANT_READ) );
 8002ba0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002ba4:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8002ba8:	d0f7      	beq.n	8002b9a <net_sock_close_mbedtls+0xa>
  ret = net_sock_close(sock->underlying_sock_ctxt);
 8002baa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bac:	f7ff f9f2 	bl	8001f94 <net_sock_close>
 8002bb0:	4605      	mov	r5, r0
  ret |= net_sock_destroy(sock->underlying_sock_ctxt);
 8002bb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bb4:	f7ff f9f4 	bl	8001fa0 <net_sock_destroy>
  if (ret != NET_OK)
 8002bb8:	ea55 0300 	orrs.w	r3, r5, r0
 8002bbc:	d011      	beq.n	8002be2 <net_sock_close_mbedtls+0x52>
    msg_error("Underlying net_sock_close() or net_sock_destroy() failed.\n");
 8002bbe:	490b      	ldr	r1, [pc, #44]	; (8002bec <net_sock_close_mbedtls+0x5c>)
 8002bc0:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <net_sock_close_mbedtls+0x60>)
 8002bc2:	f240 12f7 	movw	r2, #503	; 0x1f7
 8002bc6:	f020 fc1b 	bl	8023400 <iprintf>
 8002bca:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <net_sock_close_mbedtls+0x64>)
 8002bcc:	f020 fcb4 	bl	8023538 <puts>
    msg_error("Freeing the mbedtls context anyway.\n");
 8002bd0:	4906      	ldr	r1, [pc, #24]	; (8002bec <net_sock_close_mbedtls+0x5c>)
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <net_sock_close_mbedtls+0x60>)
 8002bd4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002bd8:	f020 fc12 	bl	8023400 <iprintf>
 8002bdc:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <net_sock_close_mbedtls+0x68>)
 8002bde:	f020 fcab 	bl	8023538 <puts>
  internal_close(sock);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff fca6 	bl	8002534 <internal_close>
}
 8002be8:	2000      	movs	r0, #0
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	0802814c 	.word	0x0802814c
 8002bf0:	0802d71d 	.word	0x0802d71d
 8002bf4:	0802e531 	.word	0x0802e531
 8002bf8:	0802e56b 	.word	0x0802e56b

08002bfc <net_sock_destroy_mbedtls>:
  net_ctxt_t *ctxt = sock->net;
 8002bfc:	6802      	ldr	r2, [r0, #0]
  if (sock == ctxt->sock_list)
 8002bfe:	6853      	ldr	r3, [r2, #4]
 8002c00:	4283      	cmp	r3, r0
{
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
  if (sock == ctxt->sock_list)
 8002c06:	d109      	bne.n	8002c1c <net_sock_destroy_mbedtls+0x20>
        cur->next = sock->next;
 8002c08:	6863      	ldr	r3, [r4, #4]
    net_free(sock->tlsData);
 8002c0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        cur->next = sock->next;
 8002c0c:	6053      	str	r3, [r2, #4]
    net_free(sock->tlsData);
 8002c0e:	f01f fab5 	bl	802217c <free>
    net_free(sock);
 8002c12:	4620      	mov	r0, r4
 8002c14:	f01f fab2 	bl	802217c <free>
 8002c18:	2000      	movs	r0, #0
}
 8002c1a:	bd10      	pop	{r4, pc}
      if (cur->next == sock)
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d0f1      	beq.n	8002c08 <net_sock_destroy_mbedtls+0xc>
    } while(cur->next != NULL);
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d1f8      	bne.n	8002c1c <net_sock_destroy_mbedtls+0x20>
  int rc = NET_ERR;
 8002c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2e:	e7f4      	b.n	8002c1a <net_sock_destroy_mbedtls+0x1e>

08002c30 <net_sock_create_mbedtls>:
{
 8002c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c34:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c36:	2038      	movs	r0, #56	; 0x38
{
 8002c38:	460f      	mov	r7, r1
 8002c3a:	4690      	mov	r8, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c3c:	f01f fa96 	bl	802216c <malloc>
  if (sock == NULL) 
 8002c40:	4604      	mov	r4, r0
 8002c42:	b958      	cbnz	r0, 8002c5c <net_sock_create_mbedtls+0x2c>
    msg_error("net_sock_create allocation 1 failed.\n");
 8002c44:	4921      	ldr	r1, [pc, #132]	; (8002ccc <net_sock_create_mbedtls+0x9c>)
 8002c46:	4822      	ldr	r0, [pc, #136]	; (8002cd0 <net_sock_create_mbedtls+0xa0>)
 8002c48:	224b      	movs	r2, #75	; 0x4b
 8002c4a:	f020 fbd9 	bl	8023400 <iprintf>
 8002c4e:	4821      	ldr	r0, [pc, #132]	; (8002cd4 <net_sock_create_mbedtls+0xa4>)
 8002c50:	f020 fc72 	bl	8023538 <puts>
      rc = NET_ERR;
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8002c5c:	2238      	movs	r2, #56	; 0x38
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f01f faca 	bl	80221f8 <memset>
    tlsData = net_malloc(sizeof(net_tls_data_t));
 8002c64:	f44f 60e4 	mov.w	r0, #1824	; 0x720
 8002c68:	f01f fa80 	bl	802216c <malloc>
    if (tlsData == NULL)
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	b958      	cbnz	r0, 8002c88 <net_sock_create_mbedtls+0x58>
      msg_error("net_sock_create allocation 2 failed.\n");
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <net_sock_create_mbedtls+0x9c>)
 8002c72:	4817      	ldr	r0, [pc, #92]	; (8002cd0 <net_sock_create_mbedtls+0xa0>)
 8002c74:	2254      	movs	r2, #84	; 0x54
 8002c76:	f020 fbc3 	bl	8023400 <iprintf>
 8002c7a:	4817      	ldr	r0, [pc, #92]	; (8002cd8 <net_sock_create_mbedtls+0xa8>)
 8002c7c:	f020 fc5c 	bl	8023538 <puts>
      net_free(sock);
 8002c80:	4620      	mov	r0, r4
 8002c82:	f01f fa7b 	bl	802217c <free>
 8002c86:	e7e5      	b.n	8002c54 <net_sock_create_mbedtls+0x24>
      memset(tlsData, 0, sizeof(net_tls_data_t));
 8002c88:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f01f fab3 	bl	80221f8 <memset>
      sock->next = ctxt->sock_list;
 8002c92:	686a      	ldr	r2, [r5, #4]
 8002c94:	6062      	str	r2, [r4, #4]
      sock->methods.open    = (net_sock_open_mbedtls);
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <net_sock_create_mbedtls+0xac>)
 8002c98:	60a2      	str	r2, [r4, #8]
      sock->methods.recv    = (net_sock_recv_mbedtls);
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <net_sock_create_mbedtls+0xb0>)
 8002c9c:	60e2      	str	r2, [r4, #12]
      sock->methods.send    = (net_sock_send_mbedtls);
 8002c9e:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <net_sock_create_mbedtls+0xb4>)
 8002ca0:	6162      	str	r2, [r4, #20]
      tlsData->tls_srv_verification = true;
 8002ca2:	2301      	movs	r3, #1
      sock->methods.close   = (net_sock_close_mbedtls);
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <net_sock_create_mbedtls+0xb8>)
      tlsData->tls_srv_verification = true;
 8002ca6:	7633      	strb	r3, [r6, #24]
      sock->methods.close   = (net_sock_close_mbedtls);
 8002ca8:	61e2      	str	r2, [r4, #28]
      sock->blocking        = NET_DEFAULT_BLOCKING;
 8002caa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002cae:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <net_sock_create_mbedtls+0xbc>)
      ctxt->sock_list       = sock;                       /* Insert at the head of the list */
 8002cb0:	606c      	str	r4, [r5, #4]
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002cb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
      sock->net = ctxt;
 8002cb6:	6025      	str	r5, [r4, #0]
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002cb8:	6222      	str	r2, [r4, #32]
      sock->proto           = proto;
 8002cba:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002cbe:	84e3      	strh	r3, [r4, #38]	; 0x26
      sock->write_timeout   = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 8002cc0:	8523      	strh	r3, [r4, #40]	; 0x28
      sock->tlsData         = tlsData;
 8002cc2:	62e6      	str	r6, [r4, #44]	; 0x2c
      *sockhnd = (net_sockhnd_t) sock;
 8002cc4:	603c      	str	r4, [r7, #0]
      rc = NET_OK;
 8002cc6:	2000      	movs	r0, #0
  return rc;
 8002cc8:	e7c6      	b.n	8002c58 <net_sock_create_mbedtls+0x28>
 8002cca:	bf00      	nop
 8002ccc:	08028163 	.word	0x08028163
 8002cd0:	0802d71d 	.word	0x0802d71d
 8002cd4:	0802e58f 	.word	0x0802e58f
 8002cd8:	0802e5b4 	.word	0x0802e5b4
 8002cdc:	08002585 	.word	0x08002585
 8002ce0:	08002a15 	.word	0x08002a15
 8002ce4:	08002ad9 	.word	0x08002ad9
 8002ce8:	08002b91 	.word	0x08002b91
 8002cec:	08002bfd 	.word	0x08002bfd

08002cf0 <TimerCountdownMS>:
#include "main.h"
#include "paho_timer.h"  


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms)
{
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002cf6:	f005 fe37 	bl	8008968 <HAL_GetTick>
  timer->timeout_ms = timeout_ms;
 8002cfa:	e9c4 0500 	strd	r0, r5, [r4]
}
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}

08002d00 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout)
{
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4604      	mov	r4, r0
 8002d04:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002d06:	f005 fe2f 	bl	8008968 <HAL_GetTick>
  TimerCountdownMS(timer, timeout * 1000);
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	436b      	muls	r3, r5
  timer->init_tick = HAL_GetTick();
 8002d10:	6020      	str	r0, [r4, #0]
  timer->timeout_ms = timeout_ms;
 8002d12:	6063      	str	r3, [r4, #4]
}
 8002d14:	bd38      	pop	{r3, r4, r5, pc}

08002d16 <TimerLeftMS>:


int TimerLeftMS(Timer* timer)
{
 8002d16:	b510      	push	{r4, lr}
 8002d18:	4604      	mov	r4, r0
  int ret = 0;
  uint32_t cur_tick = HAL_GetTick();  // The HAL tick period is 1 millisecond.
 8002d1a:	f005 fe25 	bl	8008968 <HAL_GetTick>
  if (cur_tick < timer->init_tick)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	4283      	cmp	r3, r0
 8002d22:	d905      	bls.n	8002d30 <TimerLeftMS+0x1a>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", timer->init_tick, cur_tick);
    timer->timeout_ms -= 0xFFFFFFFF - timer->init_tick;
 8002d24:	6862      	ldr	r2, [r4, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6063      	str	r3, [r4, #4]
    timer->init_tick = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6023      	str	r3, [r4, #0]
  }
  ret = timer->timeout_ms - (cur_tick - timer->init_tick);
 8002d30:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002d34:	4413      	add	r3, r2
 8002d36:	1a18      	subs	r0, r3, r0

  return (ret >= 0) ? ret : 0;
}
 8002d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002d3c:	bd10      	pop	{r4, pc}

08002d3e <TimerIsExpired>:


char TimerIsExpired(Timer* timer)
{
 8002d3e:	b508      	push	{r3, lr}
  return (TimerLeftMS(timer) > 0) ? 0 : 1;
 8002d40:	f7ff ffe9 	bl	8002d16 <TimerLeftMS>
}
 8002d44:	2800      	cmp	r0, #0
 8002d46:	bfcc      	ite	gt
 8002d48:	2000      	movgt	r0, #0
 8002d4a:	2001      	movle	r0, #1
 8002d4c:	bd08      	pop	{r3, pc}

08002d4e <TimerInit>:


void TimerInit(Timer* timer)
{
  timer->init_tick = 0;
 8002d4e:	2300      	movs	r3, #0
  timer->timeout_ms = 0;
 8002d50:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002d54:	4770      	bx	lr
	...

08002d58 <init_sensors>:
  * @param  none
  * @retval 0 in case of success
  *         -1 in case of failure
  */
int init_sensors(void)
{
 8002d58:	b510      	push	{r4, lr}
  int ret = 0;
  
  if (HSENSOR_OK != BSP_HSENSOR_Init())
 8002d5a:	f002 fac3 	bl	80052e4 <BSP_HSENSOR_Init>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d054      	beq.n	8002e0c <init_sensors+0xb4>
  {
    msg_error("BSP_HSENSOR_Init() returns %d\n", ret);
 8002d62:	492b      	ldr	r1, [pc, #172]	; (8002e10 <init_sensors+0xb8>)
 8002d64:	482b      	ldr	r0, [pc, #172]	; (8002e14 <init_sensors+0xbc>)
 8002d66:	2252      	movs	r2, #82	; 0x52
 8002d68:	f020 fb4a 	bl	8023400 <iprintf>
 8002d6c:	482a      	ldr	r0, [pc, #168]	; (8002e18 <init_sensors+0xc0>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f020 fb46 	bl	8023400 <iprintf>
    ret = -1;
 8002d74:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (TSENSOR_OK != BSP_TSENSOR_Init())
 8002d78:	f002 fb14 	bl	80053a4 <BSP_TSENSOR_Init>
 8002d7c:	b150      	cbz	r0, 8002d94 <init_sensors+0x3c>
  {
    msg_error("BSP_TSENSOR_Init() returns %d\n", ret);
 8002d7e:	4924      	ldr	r1, [pc, #144]	; (8002e10 <init_sensors+0xb8>)
 8002d80:	4824      	ldr	r0, [pc, #144]	; (8002e14 <init_sensors+0xbc>)
 8002d82:	2258      	movs	r2, #88	; 0x58
 8002d84:	f020 fb3c 	bl	8023400 <iprintf>
 8002d88:	4621      	mov	r1, r4
 8002d8a:	4824      	ldr	r0, [pc, #144]	; (8002e1c <init_sensors+0xc4>)
 8002d8c:	f020 fb38 	bl	8023400 <iprintf>
    ret = -1;
 8002d90:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (PSENSOR_OK != BSP_PSENSOR_Init())
 8002d94:	f002 faea 	bl	800536c <BSP_PSENSOR_Init>
 8002d98:	b150      	cbz	r0, 8002db0 <init_sensors+0x58>
  {
    msg_error("BSP_PSENSOR_Init() returns %d\n", ret);
 8002d9a:	491d      	ldr	r1, [pc, #116]	; (8002e10 <init_sensors+0xb8>)
 8002d9c:	481d      	ldr	r0, [pc, #116]	; (8002e14 <init_sensors+0xbc>)
 8002d9e:	225e      	movs	r2, #94	; 0x5e
 8002da0:	f020 fb2e 	bl	8023400 <iprintf>
 8002da4:	4621      	mov	r1, r4
 8002da6:	481e      	ldr	r0, [pc, #120]	; (8002e20 <init_sensors+0xc8>)
 8002da8:	f020 fb2a 	bl	8023400 <iprintf>
    ret = -1;
 8002dac:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (MAGNETO_OK != BSP_MAGNETO_Init())
 8002db0:	f002 fab4 	bl	800531c <BSP_MAGNETO_Init>
 8002db4:	b150      	cbz	r0, 8002dcc <init_sensors+0x74>
  {
    msg_error("BSP_MAGNETO_Init() returns %d\n", ret);
 8002db6:	4916      	ldr	r1, [pc, #88]	; (8002e10 <init_sensors+0xb8>)
 8002db8:	4816      	ldr	r0, [pc, #88]	; (8002e14 <init_sensors+0xbc>)
 8002dba:	2264      	movs	r2, #100	; 0x64
 8002dbc:	f020 fb20 	bl	8023400 <iprintf>
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4818      	ldr	r0, [pc, #96]	; (8002e24 <init_sensors+0xcc>)
 8002dc4:	f020 fb1c 	bl	8023400 <iprintf>
    ret = -1;
 8002dc8:	f04f 34ff 	mov.w	r4, #4294967295
  }

  if (GYRO_OK != BSP_GYRO_Init())
 8002dcc:	f002 fa87 	bl	80052de <BSP_GYRO_Init>
 8002dd0:	b150      	cbz	r0, 8002de8 <init_sensors+0x90>
  {
    msg_error("BSP_GYRO_Init() returns %d\n", ret);
 8002dd2:	490f      	ldr	r1, [pc, #60]	; (8002e10 <init_sensors+0xb8>)
 8002dd4:	480f      	ldr	r0, [pc, #60]	; (8002e14 <init_sensors+0xbc>)
 8002dd6:	226a      	movs	r2, #106	; 0x6a
 8002dd8:	f020 fb12 	bl	8023400 <iprintf>
 8002ddc:	4621      	mov	r1, r4
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <init_sensors+0xd0>)
 8002de0:	f020 fb0e 	bl	8023400 <iprintf>
    ret = -1;
 8002de4:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (ACCELERO_OK != BSP_ACCELERO_Init())
 8002de8:	f002 fa76 	bl	80052d8 <BSP_ACCELERO_Init>
 8002dec:	b150      	cbz	r0, 8002e04 <init_sensors+0xac>
  {


	msg_error("BSP_ACCELERO_Init() returns %d\n", ret);
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <init_sensors+0xb8>)
 8002df0:	4808      	ldr	r0, [pc, #32]	; (8002e14 <init_sensors+0xbc>)
 8002df2:	2272      	movs	r2, #114	; 0x72
 8002df4:	f020 fb04 	bl	8023400 <iprintf>
 8002df8:	4621      	mov	r1, r4
 8002dfa:	480c      	ldr	r0, [pc, #48]	; (8002e2c <init_sensors+0xd4>)
 8002dfc:	f020 fb00 	bl	8023400 <iprintf>
    ret = -1;
 8002e00:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  VL53L0X_PROXIMITY_Init();
 8002e04:	f001 fd3c 	bl	8004880 <VL53L0X_PROXIMITY_Init>
  
  return ret;
}
 8002e08:	4620      	mov	r0, r4
 8002e0a:	bd10      	pop	{r4, pc}
  int ret = 0;
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	e7b3      	b.n	8002d78 <init_sensors+0x20>
 8002e10:	0802817b 	.word	0x0802817b
 8002e14:	0802d71d 	.word	0x0802d71d
 8002e18:	0802e5d9 	.word	0x0802e5d9
 8002e1c:	0802e5f8 	.word	0x0802e5f8
 8002e20:	0802e617 	.word	0x0802e617
 8002e24:	0802e636 	.word	0x0802e636
 8002e28:	0802e655 	.word	0x0802e655
 8002e2c:	0802e671 	.word	0x0802e671

08002e30 <setRTCTimeDateFromNetwork>:
 *            TD_ERR_RTC          Could not set the RTC.
 *            TD_ERR_TLS_CERT     The server certificate verification failed. Applicable only when force_apply is false.
 *                                .
 */
int setRTCTimeDateFromNetwork(bool force_apply)
{
 8002e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e34:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 // return 0;
  int rc = TD_OK;
  int ret = NET_OK;
  net_sockhnd_t socket = NULL;
 8002e38:	2100      	movs	r1, #0
  int len = strlen(http_request);
  char buffer[NET_BUF_SIZE + 1]; /* +1 to be sure that the buffer is closed by a \0, so that it may be parsed by string commands. */
  memset(buffer, 0, sizeof(buffer));
 8002e3a:	f240 32e9 	movw	r2, #1001	; 0x3e9
{
 8002e3e:	4606      	mov	r6, r0
  memset(buffer, 0, sizeof(buffer));
 8002e40:	a819      	add	r0, sp, #100	; 0x64
  net_sockhnd_t socket = NULL;
 8002e42:	9108      	str	r1, [sp, #32]
  memset(buffer, 0, sizeof(buffer));
 8002e44:	f01f f9d8 	bl	80221f8 <memset>
 
  ret = net_sock_create(hnet, &socket, TIME_SOURCE_HTTP_PROTO);
 8002e48:	4bae      	ldr	r3, [pc, #696]	; (8003104 <setRTCTimeDateFromNetwork+0x2d4>)
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	a908      	add	r1, sp, #32
 8002e50:	f7fe ffc4 	bl	8001ddc <net_sock_create>
  if (ret != NET_OK)
 8002e54:	4604      	mov	r4, r0
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d034      	beq.n	8002ec4 <setRTCTimeDateFromNetwork+0x94>
  {
    msg_error("Could not create the socket.\n");
 8002e5a:	49ab      	ldr	r1, [pc, #684]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e5c:	48ab      	ldr	r0, [pc, #684]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e5e:	2267      	movs	r2, #103	; 0x67
 8002e60:	f020 face 	bl	8023400 <iprintf>
 8002e64:	48aa      	ldr	r0, [pc, #680]	; (8003110 <setRTCTimeDateFromNetwork+0x2e0>)
 8002e66:	f020 fb67 	bl	8023538 <puts>
    }
  }
  
  if (ret != NET_OK)
  {
    msg_error("Could not set the socket options.\n");
 8002e6a:	2277      	movs	r2, #119	; 0x77
 8002e6c:	49a6      	ldr	r1, [pc, #664]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e6e:	48a7      	ldr	r0, [pc, #668]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e70:	f020 fac6 	bl	8023400 <iprintf>
 8002e74:	48a7      	ldr	r0, [pc, #668]	; (8003114 <setRTCTimeDateFromNetwork+0x2e4>)
 8002e76:	f020 fb5f 	bl	8023538 <puts>
  else
  {
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
  }
  
  if (ret == NET_AUTH)
 8002e7a:	1da2      	adds	r2, r4, #6
 8002e7c:	d155      	bne.n	8002f2a <setRTCTimeDateFromNetwork+0xfa>
  {
    msg_error("An incorrect system time may have resulted in a TLS authentication error.\n");
 8002e7e:	49a2      	ldr	r1, [pc, #648]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e80:	48a2      	ldr	r0, [pc, #648]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	f020 fabc 	bl	8023400 <iprintf>
 8002e88:	48a3      	ldr	r0, [pc, #652]	; (8003118 <setRTCTimeDateFromNetwork+0x2e8>)
 8002e8a:	f020 fb55 	bl	8023538 <puts>
 8002e8e:	f06f 0505 	mvn.w	r5, #5
    rc = TD_ERR_TLS_CERT;
 8002e92:	f06f 0403 	mvn.w	r4, #3
  }
  
  if ( (ret != NET_OK) || (rc != TD_OK) )
  {
    msg_error("Could not open the socket.\n");
 8002e96:	499c      	ldr	r1, [pc, #624]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e98:	489c      	ldr	r0, [pc, #624]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e9a:	2286      	movs	r2, #134	; 0x86
 8002e9c:	f020 fab0 	bl	8023400 <iprintf>
 8002ea0:	489e      	ldr	r0, [pc, #632]	; (800311c <setRTCTimeDateFromNetwork+0x2ec>)
 8002ea2:	f020 fb49 	bl	8023538 <puts>
    }
    
    ret = net_sock_close(socket);  
  }
  
  if (socket != NULL)
 8002ea6:	9808      	ldr	r0, [sp, #32]
 8002ea8:	b110      	cbz	r0, 8002eb0 <setRTCTimeDateFromNetwork+0x80>
  {
    ret |= net_sock_destroy(socket);
 8002eaa:	f7ff f879 	bl	8001fa0 <net_sock_destroy>
 8002eae:	4305      	orrs	r5, r0
  }
  /* Translate a socket closure error in network error. */
  if ((rc == TD_OK) && (ret != NET_OK))
 8002eb0:	b91c      	cbnz	r4, 8002eba <setRTCTimeDateFromNetwork+0x8a>
 8002eb2:	1e28      	subs	r0, r5, #0
 8002eb4:	bf18      	it	ne
 8002eb6:	2001      	movne	r0, #1
 8002eb8:	4244      	negs	r4, r0
  {
    rc = TD_ERR_CONNECT;
  }
  
  return rc;
}
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8002ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002ec4:	4996      	ldr	r1, [pc, #600]	; (8003120 <setRTCTimeDateFromNetwork+0x2f0>)
 8002ec6:	4a97      	ldr	r2, [pc, #604]	; (8003124 <setRTCTimeDateFromNetwork+0x2f4>)
 8002ec8:	9808      	ldr	r0, [sp, #32]
 8002eca:	2305      	movs	r3, #5
 8002ecc:	f7fe ffb2 	bl	8001e34 <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002ed0:	4b95      	ldr	r3, [pc, #596]	; (8003128 <setRTCTimeDateFromNetwork+0x2f8>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	9207      	str	r2, [sp, #28]
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002ed6:	4605      	mov	r5, r0
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fd f983 	bl	80001e4 <strlen>
 8002ede:	9a07      	ldr	r2, [sp, #28]
 8002ee0:	4992      	ldr	r1, [pc, #584]	; (800312c <setRTCTimeDateFromNetwork+0x2fc>)
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	9808      	ldr	r0, [sp, #32]
 8002ee6:	f7fe ffa5 	bl	8001e34 <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002eea:	4a91      	ldr	r2, [pc, #580]	; (8003130 <setRTCTimeDateFromNetwork+0x300>)
 8002eec:	4991      	ldr	r1, [pc, #580]	; (8003134 <setRTCTimeDateFromNetwork+0x304>)
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002eee:	4305      	orrs	r5, r0
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002ef0:	230e      	movs	r3, #14
 8002ef2:	9808      	ldr	r0, [sp, #32]
 8002ef4:	f7fe ff9e 	bl	8001e34 <net_sock_setopt>
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002ef8:	498f      	ldr	r1, [pc, #572]	; (8003138 <setRTCTimeDateFromNetwork+0x308>)
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002efa:	4305      	orrs	r5, r0
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002efc:	488f      	ldr	r0, [pc, #572]	; (800313c <setRTCTimeDateFromNetwork+0x30c>)
 8002efe:	4623      	mov	r3, r4
 8002f00:	2e00      	cmp	r6, #0
 8002f02:	bf18      	it	ne
 8002f04:	4601      	movne	r1, r0
 8002f06:	4622      	mov	r2, r4
 8002f08:	9808      	ldr	r0, [sp, #32]
 8002f0a:	f7fe ff93 	bl	8001e34 <net_sock_setopt>
  if (ret != NET_OK)
 8002f0e:	ea55 0400 	orrs.w	r4, r5, r0
 8002f12:	d1aa      	bne.n	8002e6a <setRTCTimeDateFromNetwork+0x3a>
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002f14:	4623      	mov	r3, r4
 8002f16:	4986      	ldr	r1, [pc, #536]	; (8003130 <setRTCTimeDateFromNetwork+0x300>)
 8002f18:	9808      	ldr	r0, [sp, #32]
 8002f1a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8002f1e:	f7fe ff83 	bl	8001e28 <net_sock_open>
  if (ret == NET_AUTH)
 8002f22:	1d83      	adds	r3, r0, #6
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002f24:	4604      	mov	r4, r0
  if (ret == NET_AUTH)
 8002f26:	d0aa      	beq.n	8002e7e <setRTCTimeDateFromNetwork+0x4e>
  if ( (ret != NET_OK) || (rc != TD_OK) )
 8002f28:	b110      	cbz	r0, 8002f30 <setRTCTimeDateFromNetwork+0x100>
    rc = TD_ERR_TLS_CERT;
 8002f2a:	4625      	mov	r5, r4
  int rc = TD_OK;
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	e7b2      	b.n	8002e96 <setRTCTimeDateFromNetwork+0x66>
    ret = net_sock_send(socket, (uint8_t *) http_request, len);
 8002f30:	4983      	ldr	r1, [pc, #524]	; (8003140 <setRTCTimeDateFromNetwork+0x310>)
 8002f32:	9808      	ldr	r0, [sp, #32]
 8002f34:	2228      	movs	r2, #40	; 0x28
 8002f36:	f7ff f827 	bl	8001f88 <net_sock_send>
    if (ret != len)
 8002f3a:	2828      	cmp	r0, #40	; 0x28
 8002f3c:	d00d      	beq.n	8002f5a <setRTCTimeDateFromNetwork+0x12a>
      msg_error("Could not send %d bytes.\n", len);
 8002f3e:	4972      	ldr	r1, [pc, #456]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002f40:	4872      	ldr	r0, [pc, #456]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002f42:	228e      	movs	r2, #142	; 0x8e
 8002f44:	f020 fa5c 	bl	8023400 <iprintf>
 8002f48:	487e      	ldr	r0, [pc, #504]	; (8003144 <setRTCTimeDateFromNetwork+0x314>)
 8002f4a:	2128      	movs	r1, #40	; 0x28
 8002f4c:	f020 fa58 	bl	8023400 <iprintf>
    ret = net_sock_close(socket);  
 8002f50:	9808      	ldr	r0, [sp, #32]
 8002f52:	f7ff f81f 	bl	8001f94 <net_sock_close>
 8002f56:	4605      	mov	r5, r0
 8002f58:	e7a5      	b.n	8002ea6 <setRTCTimeDateFromNetwork+0x76>
          dateStr = strstr(buffer, "Date: ");
 8002f5a:	4e7b      	ldr	r6, [pc, #492]	; (8003148 <setRTCTimeDateFromNetwork+0x318>)
      int read = 0;
 8002f5c:	4625      	mov	r5, r4
        len = net_sock_recv(socket, (uint8_t *) buffer + read, NET_BUF_SIZE - read);
 8002f5e:	ab19      	add	r3, sp, #100	; 0x64
 8002f60:	9808      	ldr	r0, [sp, #32]
 8002f62:	f5c5 727a 	rsb	r2, r5, #1000	; 0x3e8
 8002f66:	1959      	adds	r1, r3, r5
 8002f68:	f7ff f808 	bl	8001f7c <net_sock_recv>
        if (len > 0)
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	dc0b      	bgt.n	8002f88 <setRTCTimeDateFromNetwork+0x158>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f70:	d0f5      	beq.n	8002f5e <setRTCTimeDateFromNetwork+0x12e>
 8002f72:	3003      	adds	r0, #3
 8002f74:	d0f3      	beq.n	8002f5e <setRTCTimeDateFromNetwork+0x12e>
        msg_error("No 'Date:' line found in the HTTP response header.\n");
 8002f76:	4964      	ldr	r1, [pc, #400]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002f78:	4864      	ldr	r0, [pc, #400]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002f7a:	22a0      	movs	r2, #160	; 0xa0
 8002f7c:	f020 fa40 	bl	8023400 <iprintf>
 8002f80:	4872      	ldr	r0, [pc, #456]	; (800314c <setRTCTimeDateFromNetwork+0x31c>)
 8002f82:	f020 fad9 	bl	8023538 <puts>
 8002f86:	e080      	b.n	800308a <setRTCTimeDateFromNetwork+0x25a>
          read += len;
 8002f88:	4405      	add	r5, r0
          dateStr = strstr(buffer, "Date: ");
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	a819      	add	r0, sp, #100	; 0x64
 8002f8e:	f020 fc20 	bl	80237d2 <strstr>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f92:	4607      	mov	r7, r0
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d067      	beq.n	8003068 <setRTCTimeDateFromNetwork+0x238>
        memset(month, 0, sizeof(month));
 8002f98:	ad09      	add	r5, sp, #36	; 0x24
        day = year = hour = min = sec = 0;
 8002f9a:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8002f9e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002fa2:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 8002fa6:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
        memset(dow, 0, sizeof(dow));
 8002faa:	2600      	movs	r6, #0
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fac:	ab0e      	add	r3, sp, #56	; 0x38
        memset(month, 0, sizeof(month));
 8002fae:	602e      	str	r6, [r5, #0]
        day = year = hour = min = sec = 0;
 8002fb0:	f8c8 6000 	str.w	r6, [r8]
 8002fb4:	f8c9 6000 	str.w	r6, [r9]
 8002fb8:	f8ca 6000 	str.w	r6, [sl]
 8002fbc:	f8cb 6000 	str.w	r6, [fp]
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fc0:	4963      	ldr	r1, [pc, #396]	; (8003150 <setRTCTimeDateFromNetwork+0x320>)
        day = year = hour = min = sec = 0;
 8002fc2:	960e      	str	r6, [sp, #56]	; 0x38
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fc4:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8002fc8:	e9cd a902 	strd	sl, r9, [sp, #8]
 8002fcc:	ab12      	add	r3, sp, #72	; 0x48
 8002fce:	e9cd b500 	strd	fp, r5, [sp]
 8002fd2:	aa10      	add	r2, sp, #64	; 0x40
        memset(dow, 0, sizeof(dow));
 8002fd4:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fd8:	f020 fb50 	bl	802367c <siscanf>
        if (count < 8)
 8002fdc:	2807      	cmp	r0, #7
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fde:	4603      	mov	r3, r0
        if (count < 8)
 8002fe0:	dd47      	ble.n	8003072 <setRTCTimeDateFromNetwork+0x242>
          char * str = strstr(dateStr, "\r\n");
 8002fe2:	495c      	ldr	r1, [pc, #368]	; (8003154 <setRTCTimeDateFromNetwork+0x324>)
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f020 fbf4 	bl	80237d2 <strstr>
          msg_info("Configuring the RTC from %s\n", dateStr);
 8002fea:	4639      	mov	r1, r7
          str[0] = '\0';
 8002fec:	7006      	strb	r6, [r0, #0]
          msg_info("Configuring the RTC from %s\n", dateStr);
 8002fee:	485a      	ldr	r0, [pc, #360]	; (8003158 <setRTCTimeDateFromNetwork+0x328>)
 8002ff0:	f020 fa06 	bl	8023400 <iprintf>
          sTime.Hours = hour;
 8002ff4:	f8d9 3000 	ldr.w	r3, [r9]
 8002ff8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
          sTime.Minutes = min;
 8002ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8003000:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003004:	a914      	add	r1, sp, #80	; 0x50
          sTime.Seconds = sec;
 8003006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003008:	4854      	ldr	r0, [pc, #336]	; (800315c <setRTCTimeDateFromNetwork+0x32c>)
          sTime.Seconds = sec;
 800300a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800300e:	4632      	mov	r2, r6
          sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003010:	e9cd 6617 	strd	r6, r6, [sp, #92]	; 0x5c
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003014:	f007 fcd7 	bl	800a9c6 <HAL_RTC_SetTime>
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8003018:	4951      	ldr	r1, [pc, #324]	; (8003160 <setRTCTimeDateFromNetwork+0x330>)
            rc = TD_ERR_RTC;
 800301a:	2800      	cmp	r0, #0
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 800301c:	a812      	add	r0, sp, #72	; 0x48
            rc = TD_ERR_RTC;
 800301e:	bf18      	it	ne
 8003020:	f06f 0402 	mvnne.w	r4, #2
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8003024:	f7fd f8d4 	bl	80001d0 <strcmp>
 8003028:	bb90      	cbnz	r0, 8003090 <setRTCTimeDateFromNetwork+0x260>
 800302a:	2301      	movs	r3, #1
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 800302c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
          if (strcmp(month, "Jan") == 0) { sDate.Month = RTC_MONTH_JANUARY; } else
 8003030:	494c      	ldr	r1, [pc, #304]	; (8003164 <setRTCTimeDateFromNetwork+0x334>)
 8003032:	4628      	mov	r0, r5
 8003034:	f7fd f8cc 	bl	80001d0 <strcmp>
 8003038:	2800      	cmp	r0, #0
 800303a:	d154      	bne.n	80030e6 <setRTCTimeDateFromNetwork+0x2b6>
 800303c:	2301      	movs	r3, #1
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 800303e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
          sDate.Date = day;
 8003042:	f8db 3000 	ldr.w	r3, [fp]
 8003046:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
          sDate.Year = year - 2000;
 800304a:	f8da 3000 	ldr.w	r3, [sl]
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800304e:	4843      	ldr	r0, [pc, #268]	; (800315c <setRTCTimeDateFromNetwork+0x32c>)
          sDate.Year = year - 2000;
 8003050:	3330      	adds	r3, #48	; 0x30
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003052:	2200      	movs	r2, #0
 8003054:	a90f      	add	r1, sp, #60	; 0x3c
          sDate.Year = year - 2000;
 8003056:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800305a:	f007 fd2e 	bl	800aaba <HAL_RTC_SetDate>
            rc = TD_ERR_RTC;
 800305e:	2800      	cmp	r0, #0
 8003060:	bf18      	it	ne
 8003062:	f06f 0402 	mvnne.w	r4, #2
 8003066:	e773      	b.n	8002f50 <setRTCTimeDateFromNetwork+0x120>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8003068:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800306c:	f6ff af77 	blt.w	8002f5e <setRTCTimeDateFromNetwork+0x12e>
 8003070:	e781      	b.n	8002f76 <setRTCTimeDateFromNetwork+0x146>
          msg_error("At time initialization, only %d out of the 8 time/date data could be parsed from the HTTP response %s\n", count, buffer);
 8003072:	4925      	ldr	r1, [pc, #148]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8003074:	4825      	ldr	r0, [pc, #148]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8003076:	9307      	str	r3, [sp, #28]
 8003078:	22b0      	movs	r2, #176	; 0xb0
 800307a:	f020 f9c1 	bl	8023400 <iprintf>
 800307e:	9b07      	ldr	r3, [sp, #28]
 8003080:	4839      	ldr	r0, [pc, #228]	; (8003168 <setRTCTimeDateFromNetwork+0x338>)
 8003082:	aa19      	add	r2, sp, #100	; 0x64
 8003084:	4619      	mov	r1, r3
 8003086:	f020 f9bb 	bl	8023400 <iprintf>
        rc = TD_ERR_HTTP;
 800308a:	f06f 0401 	mvn.w	r4, #1
 800308e:	e75f      	b.n	8002f50 <setRTCTimeDateFromNetwork+0x120>
            if (strcmp(dow, "Tue,") == 0) { sDate.WeekDay = RTC_WEEKDAY_TUESDAY; } else
 8003090:	4936      	ldr	r1, [pc, #216]	; (800316c <setRTCTimeDateFromNetwork+0x33c>)
 8003092:	a812      	add	r0, sp, #72	; 0x48
 8003094:	f7fd f89c 	bl	80001d0 <strcmp>
 8003098:	b908      	cbnz	r0, 800309e <setRTCTimeDateFromNetwork+0x26e>
 800309a:	2302      	movs	r3, #2
 800309c:	e7c6      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
              if (strcmp(dow, "Wed,") == 0) { sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; } else  
 800309e:	4934      	ldr	r1, [pc, #208]	; (8003170 <setRTCTimeDateFromNetwork+0x340>)
 80030a0:	a812      	add	r0, sp, #72	; 0x48
 80030a2:	f7fd f895 	bl	80001d0 <strcmp>
 80030a6:	b908      	cbnz	r0, 80030ac <setRTCTimeDateFromNetwork+0x27c>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e7bf      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                if (strcmp(dow, "Thu,") == 0) { sDate.WeekDay = RTC_WEEKDAY_THURSDAY; } else  
 80030ac:	4931      	ldr	r1, [pc, #196]	; (8003174 <setRTCTimeDateFromNetwork+0x344>)
 80030ae:	a812      	add	r0, sp, #72	; 0x48
 80030b0:	f7fd f88e 	bl	80001d0 <strcmp>
 80030b4:	b908      	cbnz	r0, 80030ba <setRTCTimeDateFromNetwork+0x28a>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e7b8      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                  if (strcmp(dow, "Fri,") == 0) { sDate.WeekDay = RTC_WEEKDAY_FRIDAY; } else
 80030ba:	492f      	ldr	r1, [pc, #188]	; (8003178 <setRTCTimeDateFromNetwork+0x348>)
 80030bc:	a812      	add	r0, sp, #72	; 0x48
 80030be:	f7fd f887 	bl	80001d0 <strcmp>
 80030c2:	b908      	cbnz	r0, 80030c8 <setRTCTimeDateFromNetwork+0x298>
 80030c4:	2305      	movs	r3, #5
 80030c6:	e7b1      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                    if (strcmp(dow, "Sat,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SATURDAY; } else
 80030c8:	492c      	ldr	r1, [pc, #176]	; (800317c <setRTCTimeDateFromNetwork+0x34c>)
 80030ca:	a812      	add	r0, sp, #72	; 0x48
 80030cc:	f7fd f880 	bl	80001d0 <strcmp>
 80030d0:	b908      	cbnz	r0, 80030d6 <setRTCTimeDateFromNetwork+0x2a6>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e7aa      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 80030d6:	492a      	ldr	r1, [pc, #168]	; (8003180 <setRTCTimeDateFromNetwork+0x350>)
 80030d8:	a812      	add	r0, sp, #72	; 0x48
 80030da:	f7fd f879 	bl	80001d0 <strcmp>
 80030de:	2800      	cmp	r0, #0
 80030e0:	d1a6      	bne.n	8003030 <setRTCTimeDateFromNetwork+0x200>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e7a2      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
            if (strcmp(month, "Feb") == 0) { sDate.Month = RTC_MONTH_FEBRUARY; } else
 80030e6:	4927      	ldr	r1, [pc, #156]	; (8003184 <setRTCTimeDateFromNetwork+0x354>)
 80030e8:	4628      	mov	r0, r5
 80030ea:	f7fd f871 	bl	80001d0 <strcmp>
 80030ee:	b908      	cbnz	r0, 80030f4 <setRTCTimeDateFromNetwork+0x2c4>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e7a4      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
              if (strcmp(month, "Mar") == 0) { sDate.Month = RTC_MONTH_MARCH; } else
 80030f4:	4924      	ldr	r1, [pc, #144]	; (8003188 <setRTCTimeDateFromNetwork+0x358>)
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7fd f86a 	bl	80001d0 <strcmp>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <setRTCTimeDateFromNetwork+0x35c>
 8003100:	2303      	movs	r3, #3
 8003102:	e79c      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
 8003104:	20001174 	.word	0x20001174
 8003108:	08028188 	.word	0x08028188
 800310c:	0802d71d 	.word	0x0802d71d
 8003110:	0802e691 	.word	0x0802e691
 8003114:	0802e6c1 	.word	0x0802e6c1
 8003118:	0802e6e3 	.word	0x0802e6e3
 800311c:	0802e72d 	.word	0x0802e72d
 8003120:	0802dd19 	.word	0x0802dd19
 8003124:	0802e6ae 	.word	0x0802e6ae
 8003128:	20000008 	.word	0x20000008
 800312c:	0802df1d 	.word	0x0802df1d
 8003130:	0802e6b3 	.word	0x0802e6b3
 8003134:	0802df81 	.word	0x0802df81
 8003138:	0802df4f 	.word	0x0802df4f
 800313c:	0802df67 	.word	0x0802df67
 8003140:	080281a2 	.word	0x080281a2
 8003144:	0802e748 	.word	0x0802e748
 8003148:	0802e762 	.word	0x0802e762
 800314c:	0802e840 	.word	0x0802e840
 8003150:	0802e873 	.word	0x0802e873
 8003154:	0802fbc9 	.word	0x0802fbc9
 8003158:	0802e7d0 	.word	0x0802e7d0
 800315c:	20001104 	.word	0x20001104
 8003160:	0802e7ed 	.word	0x0802e7ed
 8003164:	0802e810 	.word	0x0802e810
 8003168:	0802e769 	.word	0x0802e769
 800316c:	0802e7f2 	.word	0x0802e7f2
 8003170:	0802e7f7 	.word	0x0802e7f7
 8003174:	0802e7fc 	.word	0x0802e7fc
 8003178:	0802e801 	.word	0x0802e801
 800317c:	0802e806 	.word	0x0802e806
 8003180:	0802e80b 	.word	0x0802e80b
 8003184:	0802e814 	.word	0x0802e814
 8003188:	0802e818 	.word	0x0802e818
                if (strcmp(month, "Apr") == 0) { sDate.Month = RTC_MONTH_APRIL; } else
 800318c:	4920      	ldr	r1, [pc, #128]	; (8003210 <setRTCTimeDateFromNetwork+0x3e0>)
 800318e:	4628      	mov	r0, r5
 8003190:	f7fd f81e 	bl	80001d0 <strcmp>
 8003194:	b908      	cbnz	r0, 800319a <setRTCTimeDateFromNetwork+0x36a>
 8003196:	2304      	movs	r3, #4
 8003198:	e751      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                  if (strcmp(month, "May") == 0) { sDate.Month = RTC_MONTH_MAY; } else
 800319a:	491e      	ldr	r1, [pc, #120]	; (8003214 <setRTCTimeDateFromNetwork+0x3e4>)
 800319c:	4628      	mov	r0, r5
 800319e:	f7fd f817 	bl	80001d0 <strcmp>
 80031a2:	b908      	cbnz	r0, 80031a8 <setRTCTimeDateFromNetwork+0x378>
 80031a4:	2305      	movs	r3, #5
 80031a6:	e74a      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                    if (strcmp(month, "Jun") == 0) { sDate.Month = RTC_MONTH_JUNE; } else
 80031a8:	491b      	ldr	r1, [pc, #108]	; (8003218 <setRTCTimeDateFromNetwork+0x3e8>)
 80031aa:	4628      	mov	r0, r5
 80031ac:	f7fd f810 	bl	80001d0 <strcmp>
 80031b0:	b908      	cbnz	r0, 80031b6 <setRTCTimeDateFromNetwork+0x386>
 80031b2:	2306      	movs	r3, #6
 80031b4:	e743      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                      if (strcmp(month, "Jul") == 0) { sDate.Month = RTC_MONTH_JULY; } else
 80031b6:	4919      	ldr	r1, [pc, #100]	; (800321c <setRTCTimeDateFromNetwork+0x3ec>)
 80031b8:	4628      	mov	r0, r5
 80031ba:	f7fd f809 	bl	80001d0 <strcmp>
 80031be:	b908      	cbnz	r0, 80031c4 <setRTCTimeDateFromNetwork+0x394>
 80031c0:	2307      	movs	r3, #7
 80031c2:	e73c      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                        if (strcmp(month, "Aug") == 0) { sDate.Month = RTC_MONTH_AUGUST; } else
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <setRTCTimeDateFromNetwork+0x3f0>)
 80031c6:	4628      	mov	r0, r5
 80031c8:	f7fd f802 	bl	80001d0 <strcmp>
 80031cc:	b908      	cbnz	r0, 80031d2 <setRTCTimeDateFromNetwork+0x3a2>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e735      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                          if (strcmp(month, "Sep") == 0) { sDate.Month = RTC_MONTH_SEPTEMBER; } else
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <setRTCTimeDateFromNetwork+0x3f4>)
 80031d4:	4628      	mov	r0, r5
 80031d6:	f7fc fffb 	bl	80001d0 <strcmp>
 80031da:	b908      	cbnz	r0, 80031e0 <setRTCTimeDateFromNetwork+0x3b0>
 80031dc:	2309      	movs	r3, #9
 80031de:	e72e      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                            if (strcmp(month, "Oct") == 0) { sDate.Month = RTC_MONTH_OCTOBER; } else
 80031e0:	4911      	ldr	r1, [pc, #68]	; (8003228 <setRTCTimeDateFromNetwork+0x3f8>)
 80031e2:	4628      	mov	r0, r5
 80031e4:	f7fc fff4 	bl	80001d0 <strcmp>
 80031e8:	b908      	cbnz	r0, 80031ee <setRTCTimeDateFromNetwork+0x3be>
 80031ea:	2310      	movs	r3, #16
 80031ec:	e727      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                              if (strcmp(month, "Nov") == 0) { sDate.Month = RTC_MONTH_NOVEMBER; } else
 80031ee:	490f      	ldr	r1, [pc, #60]	; (800322c <setRTCTimeDateFromNetwork+0x3fc>)
 80031f0:	4628      	mov	r0, r5
 80031f2:	f7fc ffed 	bl	80001d0 <strcmp>
 80031f6:	b908      	cbnz	r0, 80031fc <setRTCTimeDateFromNetwork+0x3cc>
 80031f8:	2311      	movs	r3, #17
 80031fa:	e720      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <setRTCTimeDateFromNetwork+0x400>)
 80031fe:	4628      	mov	r0, r5
 8003200:	f7fc ffe6 	bl	80001d0 <strcmp>
 8003204:	2800      	cmp	r0, #0
 8003206:	f47f af1c 	bne.w	8003042 <setRTCTimeDateFromNetwork+0x212>
 800320a:	2312      	movs	r3, #18
 800320c:	e717      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
 800320e:	bf00      	nop
 8003210:	0802e81c 	.word	0x0802e81c
 8003214:	0802e820 	.word	0x0802e820
 8003218:	0802e824 	.word	0x0802e824
 800321c:	0802e828 	.word	0x0802e828
 8003220:	0802e82c 	.word	0x0802e82c
 8003224:	0802e830 	.word	0x0802e830
 8003228:	0802e834 	.word	0x0802e834
 800322c:	0802e838 	.word	0x0802e838
 8003230:	0802e83c 	.word	0x0802e83c

08003234 <time>:


#elif defined (__GNUC__)
time_t time(time_t * pointer)
{
  return (time_t)TimingSystemGetSystemTime();
 8003234:	f7fd beea 	b.w	800100c <TimingSystemGetSystemTime>

08003238 <net_if_init>:
int net_if_deinit(void * if_ctxt);
int net_if_reinit(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/
int net_if_init(void * if_ctxt)
{
 8003238:	b570      	push	{r4, r5, r6, lr}
  WIFI_Status_t wifiRes;
  uint8_t macAddress[6];
  int wifiConnectCounter = 0;
  bool skip_reconf = false;

  printf("\n*** WIFI connection ***\n\n");
 800323a:	4841      	ldr	r0, [pc, #260]	; (8003340 <net_if_init+0x108>)
{
 800323c:	b092      	sub	sp, #72	; 0x48
  printf("\n*** WIFI connection ***\n\n");
 800323e:	f020 f97b 	bl	8023538 <puts>

  skip_reconf = (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) == HAL_OK);
 8003242:	f10d 0217 	add.w	r2, sp, #23
 8003246:	a907      	add	r1, sp, #28
 8003248:	a806      	add	r0, sp, #24
 800324a:	f7fe f9a5 	bl	8001598 <checkWiFiCredentials>

  if (skip_reconf == true)
 800324e:	b168      	cbz	r0, 800326c <net_if_init+0x34>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    printf("Your WiFi parameters need to be entered to proceed.\n");
 8003250:	483c      	ldr	r0, [pc, #240]	; (8003344 <net_if_init+0x10c>)
 8003252:	f020 f971 	bl	8023538 <puts>
    do
    {
      updateWiFiCredentials();
 8003256:	f7fe f9cf 	bl	80015f8 <updateWiFiCredentials>
    } while (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK);
 800325a:	f10d 0217 	add.w	r2, sp, #23
 800325e:	a907      	add	r1, sp, #28
 8003260:	a806      	add	r0, sp, #24
 8003262:	f7fe f999 	bl	8001598 <checkWiFiCredentials>
 8003266:	2800      	cmp	r0, #0
 8003268:	d1f5      	bne.n	8003256 <net_if_init+0x1e>
 800326a:	e008      	b.n	800327e <net_if_init+0x46>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update"
 800326c:	4836      	ldr	r0, [pc, #216]	; (8003348 <net_if_init+0x110>)
 800326e:	f020 f963 	bl	8023538 <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 8003272:	f241 3088 	movw	r0, #5000	; 0x1388
 8003276:	f000 ff91 	bl	800419c <Button_WaitForPush>
  if (skip_reconf == false)
 800327a:	2800      	cmp	r0, #0
 800327c:	d1e8      	bne.n	8003250 <net_if_init+0x18>
  }
  
  /*  Wifi Module initialization */
  printf("Initializing the WiFi module\n");
 800327e:	4833      	ldr	r0, [pc, #204]	; (800334c <net_if_init+0x114>)
 8003280:	f020 f95a 	bl	8023538 <puts>
  
  wifiRes = WIFI_Init();
 8003284:	f001 fdaa 	bl	8004ddc <WIFI_Init>
  if ( WIFI_STATUS_OK != wifiRes )
 8003288:	b128      	cbz	r0, 8003296 <net_if_init+0x5e>
  {
    printf("Failed to initialize WIFI module\n");
 800328a:	4831      	ldr	r0, [pc, #196]	; (8003350 <net_if_init+0x118>)
 800328c:	f020 f954 	bl	8023538 <puts>
  else
  {
    printf("\nFailed to connect to AP %s\n",ssid);
  }
  
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	e051      	b.n	800333a <net_if_init+0x102>
  WIFI_GetModuleName(moduleinfo);
 8003296:	a80a      	add	r0, sp, #40	; 0x28
 8003298:	f001 fe9c 	bl	8004fd4 <WIFI_GetModuleName>
  printf("Module initialized successfully: %s",moduleinfo);
 800329c:	a90a      	add	r1, sp, #40	; 0x28
 800329e:	482d      	ldr	r0, [pc, #180]	; (8003354 <net_if_init+0x11c>)
 80032a0:	f020 f8ae 	bl	8023400 <iprintf>
  WIFI_GetModuleID(moduleinfo);
 80032a4:	a80a      	add	r0, sp, #40	; 0x28
 80032a6:	f001 fe8b 	bl	8004fc0 <WIFI_GetModuleID>
  printf(" %s",moduleinfo);
 80032aa:	a90a      	add	r1, sp, #40	; 0x28
 80032ac:	482a      	ldr	r0, [pc, #168]	; (8003358 <net_if_init+0x120>)
 80032ae:	f020 f8a7 	bl	8023400 <iprintf>
  WIFI_GetModuleFwRevision(moduleinfo);
 80032b2:	a80a      	add	r0, sp, #40	; 0x28
 80032b4:	f001 fe7a 	bl	8004fac <WIFI_GetModuleFwRevision>
  printf(" %s\n",moduleinfo);
 80032b8:	a90a      	add	r1, sp, #40	; 0x28
 80032ba:	4828      	ldr	r0, [pc, #160]	; (800335c <net_if_init+0x124>)
 80032bc:	f020 f8a0 	bl	8023400 <iprintf>
  printf("Retrieving the WiFi module MAC address:");
 80032c0:	4827      	ldr	r0, [pc, #156]	; (8003360 <net_if_init+0x128>)
 80032c2:	f020 f89d 	bl	8023400 <iprintf>
  wifiRes = WIFI_GetMAC_Address( (uint8_t*)macAddress);
 80032c6:	a808      	add	r0, sp, #32
 80032c8:	f001 fdc0 	bl	8004e4c <WIFI_GetMAC_Address>
  if ( WIFI_STATUS_OK == wifiRes)
 80032cc:	bb60      	cbnz	r0, 8003328 <net_if_init+0xf0>
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 80032ce:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80032e4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80032e8:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80032ec:	481d      	ldr	r0, [pc, #116]	; (8003364 <net_if_init+0x12c>)
 80032ee:	f020 f887 	bl	8023400 <iprintf>
  printf("\n");
 80032f2:	200a      	movs	r0, #10
 80032f4:	f020 f89c 	bl	8023430 <putchar>
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032f8:	4e1b      	ldr	r6, [pc, #108]	; (8003368 <net_if_init+0x130>)
  int wifiConnectCounter = 0;
 80032fa:	2500      	movs	r5, #0
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032fc:	3501      	adds	r5, #1
 80032fe:	9906      	ldr	r1, [sp, #24]
 8003300:	2303      	movs	r3, #3
 8003302:	462a      	mov	r2, r5
 8003304:	4630      	mov	r0, r6
 8003306:	f020 f87b 	bl	8023400 <iprintf>
    wifiRes = WIFI_Connect(ssid, psk, security_mode);
 800330a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800330e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8003312:	f001 fd87 	bl	8004e24 <WIFI_Connect>
    if (wifiRes == WIFI_STATUS_OK) break;
 8003316:	4604      	mov	r4, r0
 8003318:	b150      	cbz	r0, 8003330 <net_if_init+0xf8>
  while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 800331a:	2d03      	cmp	r5, #3
 800331c:	d1ee      	bne.n	80032fc <net_if_init+0xc4>
    printf("\nFailed to connect to AP %s\n",ssid);
 800331e:	9906      	ldr	r1, [sp, #24]
 8003320:	4812      	ldr	r0, [pc, #72]	; (800336c <net_if_init+0x134>)
 8003322:	f020 f86d 	bl	8023400 <iprintf>
 8003326:	e7b3      	b.n	8003290 <net_if_init+0x58>
       printf("Failed to get MAC address\n");
 8003328:	4811      	ldr	r0, [pc, #68]	; (8003370 <net_if_init+0x138>)
 800332a:	f020 f905 	bl	8023538 <puts>
 800332e:	e7e0      	b.n	80032f2 <net_if_init+0xba>
    printf("\nConnected to AP %s\n",ssid);
 8003330:	9906      	ldr	r1, [sp, #24]
 8003332:	4810      	ldr	r0, [pc, #64]	; (8003374 <net_if_init+0x13c>)
 8003334:	f020 f864 	bl	8023400 <iprintf>
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003338:	4620      	mov	r0, r4
}
 800333a:	b012      	add	sp, #72	; 0x48
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	bf00      	nop
 8003340:	0802e892 	.word	0x0802e892
 8003344:	0802e8ac 	.word	0x0802e8ac
 8003348:	0802e8e0 	.word	0x0802e8e0
 800334c:	0802e94d 	.word	0x0802e94d
 8003350:	0802e96a 	.word	0x0802e96a
 8003354:	0802e98b 	.word	0x0802e98b
 8003358:	08031348 	.word	0x08031348
 800335c:	0802fddf 	.word	0x0802fddf
 8003360:	0802e9af 	.word	0x0802e9af
 8003364:	0802d609 	.word	0x0802d609
 8003368:	0802e9f1 	.word	0x0802e9f1
 800336c:	0802ea2f 	.word	0x0802ea2f
 8003370:	0802e9d7 	.word	0x0802e9d7
 8003374:	0802ea1a 	.word	0x0802ea1a

08003378 <net_if_deinit>:


int net_if_deinit(void * if_ctxt)
{
  return 0;
}
 8003378:	2000      	movs	r0, #0
 800337a:	4770      	bx	lr

0800337c <net_if_reinit>:


int net_if_reinit(void * if_ctxt)
{
 800337c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Ecn_t security_mode;
  WIFI_Status_t wifiRes;
  int wifiConnectCounter = 0;
  
  // wifiRes = WIFI_Disconnect(); // Disconnect() is not enough for the Inventek module which does not clean the previous state properly.
  wifiRes = WIFI_Init();
 800337e:	f001 fd2d 	bl	8004ddc <WIFI_Init>
  if (wifiRes != WIFI_STATUS_OK)
 8003382:	b138      	cbz	r0, 8003394 <net_if_reinit+0x18>
  {
    msg_error("WIFI_Init() failed.\n");
 8003384:	4917      	ldr	r1, [pc, #92]	; (80033e4 <net_if_reinit+0x68>)
 8003386:	4818      	ldr	r0, [pc, #96]	; (80033e8 <net_if_reinit+0x6c>)
 8003388:	22af      	movs	r2, #175	; 0xaf
 800338a:	f020 f839 	bl	8023400 <iprintf>
 800338e:	4817      	ldr	r0, [pc, #92]	; (80033ec <net_if_reinit+0x70>)
 8003390:	f020 f8d2 	bl	8023538 <puts>
  }
  
  if (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK)
 8003394:	f10d 0207 	add.w	r2, sp, #7
 8003398:	a903      	add	r1, sp, #12
 800339a:	a802      	add	r0, sp, #8
 800339c:	f7fe f8fc 	bl	8001598 <checkWiFiCredentials>
 80033a0:	4604      	mov	r4, r0
 80033a2:	b9a8      	cbnz	r0, 80033d0 <net_if_reinit+0x54>
  }
  else
  {
    do 
    {
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033a4:	4e12      	ldr	r6, [pc, #72]	; (80033f0 <net_if_reinit+0x74>)
  int wifiConnectCounter = 0;
 80033a6:	4605      	mov	r5, r0
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033a8:	3501      	adds	r5, #1
 80033aa:	9902      	ldr	r1, [sp, #8]
 80033ac:	462a      	mov	r2, r5
 80033ae:	2303      	movs	r3, #3
 80033b0:	4630      	mov	r0, r6
 80033b2:	f020 f825 	bl	8023400 <iprintf>
      wifiRes = WIFI_Connect(ssid, psk, security_mode);
 80033b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80033be:	f001 fd31 	bl	8004e24 <WIFI_Connect>
      if (wifiRes == WIFI_STATUS_OK) break;
 80033c2:	b140      	cbz	r0, 80033d6 <net_if_reinit+0x5a>
    } 
    while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033c4:	2d03      	cmp	r5, #3
 80033c6:	d1ef      	bne.n	80033a8 <net_if_reinit+0x2c>
    {
      printf("\nRe-connected to AP %s\n",ssid);
    }
    else
    {
      printf("\nFailed to re-connect to AP %s\n",ssid);
 80033c8:	9902      	ldr	r1, [sp, #8]
 80033ca:	480a      	ldr	r0, [pc, #40]	; (80033f4 <net_if_reinit+0x78>)
 80033cc:	f020 f818 	bl	8023400 <iprintf>
      ret = -1;
 80033d0:	f04f 34ff 	mov.w	r4, #4294967295
 80033d4:	e003      	b.n	80033de <net_if_reinit+0x62>
      printf("\nRe-connected to AP %s\n",ssid);
 80033d6:	9902      	ldr	r1, [sp, #8]
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <net_if_reinit+0x7c>)
 80033da:	f020 f811 	bl	8023400 <iprintf>
    }
  }
    
  return ret;
}
 80033de:	4620      	mov	r0, r4
 80033e0:	b004      	add	sp, #16
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	080281cb 	.word	0x080281cb
 80033e8:	0802d71d 	.word	0x0802d71d
 80033ec:	0802ea4c 	.word	0x0802ea4c
 80033f0:	0802e9f1 	.word	0x0802e9f1
 80033f4:	0802ea78 	.word	0x0802ea78
 80033f8:	0802ea60 	.word	0x0802ea60

080033fc <network_read>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes read on SUCCESS
 *         - -1 on FAILURE
 **/
int network_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80033fc:	b510      	push	{r4, lr}
  int bytes;

  bytes = net_sock_recv((net_sockhnd_t) n->my_socket, buffer, len);
 80033fe:	6800      	ldr	r0, [r0, #0]
 8003400:	f7fe fdbc 	bl	8001f7c <net_sock_recv>
  if(bytes < 0)
 8003404:	1e04      	subs	r4, r0, #0
 8003406:	da0a      	bge.n	800341e <network_read+0x22>
  {
    msg_error("net_sock_recv failed - %d\n", bytes);
 8003408:	4906      	ldr	r1, [pc, #24]	; (8003424 <network_read+0x28>)
 800340a:	4807      	ldr	r0, [pc, #28]	; (8003428 <network_read+0x2c>)
 800340c:	22e1      	movs	r2, #225	; 0xe1
 800340e:	f01f fff7 	bl	8023400 <iprintf>
 8003412:	4621      	mov	r1, r4
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <network_read+0x30>)
 8003416:	f01f fff3 	bl	8023400 <iprintf>
    bytes = -1;
 800341a:	f04f 34ff 	mov.w	r4, #4294967295
  }

   return bytes;
}
 800341e:	4620      	mov	r0, r4
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	080281dc 	.word	0x080281dc
 8003428:	0802d71d 	.word	0x0802d71d
 800342c:	0802ea98 	.word	0x0802ea98

08003430 <network_write>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes written on SUCCESS
 *         - -1 on FAILURE
 **/
int network_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8003430:	b510      	push	{r4, lr}
  int rc;

  rc = net_sock_send((net_sockhnd_t) n->my_socket, buffer, len);
 8003432:	6800      	ldr	r0, [r0, #0]
 8003434:	f7fe fda8 	bl	8001f88 <net_sock_send>
  if(rc < 0)
 8003438:	1e04      	subs	r4, r0, #0
 800343a:	da0a      	bge.n	8003452 <network_write+0x22>
  {
    msg_error("net_sock_send failed - %d\n", rc);
 800343c:	4906      	ldr	r1, [pc, #24]	; (8003458 <network_write+0x28>)
 800343e:	4807      	ldr	r0, [pc, #28]	; (800345c <network_write+0x2c>)
 8003440:	22f7      	movs	r2, #247	; 0xf7
 8003442:	f01f ffdd 	bl	8023400 <iprintf>
 8003446:	4621      	mov	r1, r4
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <network_write+0x30>)
 800344a:	f01f ffd9 	bl	8023400 <iprintf>
    rc = -1;
 800344e:	f04f 34ff 	mov.w	r4, #4294967295
  }

  return rc;
}
 8003452:	4620      	mov	r0, r4
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	080281e9 	.word	0x080281e9
 800345c:	0802d71d 	.word	0x0802d71d
 8003460:	0802eab3 	.word	0x0802eab3

08003464 <allpurposeMessageHandler>:
 *
 *  Note: No context handle is passed by the callback. Must rely on static variables.
 *        TODO: Maybe store couples of hander/contextHanders so that the context could
 *              be retrieved from the handler address. */
void allpurposeMessageHandler(MessageData* data)
{
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1),
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	4c39      	ldr	r4, [pc, #228]	; (8003550 <allpurposeMessageHandler+0xec>)
 800346a:	68d9      	ldr	r1, [r3, #12]
 800346c:	4a39      	ldr	r2, [pc, #228]	; (8003554 <allpurposeMessageHandler+0xf0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	3101      	adds	r1, #1
 8003472:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
{
 8003476:	4605      	mov	r5, r0
  snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1),
 8003478:	bf28      	it	cs
 800347a:	f44f 7116 	movcs.w	r1, #600	; 0x258
 800347e:	4620      	mov	r0, r4
 8003480:	f020 f8a8 	bl	80235d4 <sniprintf>
           "%s", (char *)data->message->payload);
  msg_info("Received message: topic: %.*s content: %s.\n",
 8003484:	6869      	ldr	r1, [r5, #4]
 8003486:	4834      	ldr	r0, [pc, #208]	; (8003558 <allpurposeMessageHandler+0xf4>)
 8003488:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 800348c:	4623      	mov	r3, r4
 800348e:	f01f ffb7 	bl	8023400 <iprintf>
           data->topicName->lenstring.len, data->topicName->lenstring.data,
           mqtt_msg);

  cJSON *json = NULL;
  cJSON * root = cJSON_Parse(mqtt_msg);
 8003492:	4620      	mov	r0, r4
 8003494:	f01e fd1e 	bl	8021ed4 <cJSON_Parse>

  json = cJSON_GetObjectItemCaseSensitive(root, "LedOn");
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <allpurposeMessageHandler+0xf8>)
  cJSON * root = cJSON_Parse(mqtt_msg);
 800349a:	4605      	mov	r5, r0
  json = cJSON_GetObjectItemCaseSensitive(root, "LedOn");
 800349c:	f01e fd1e 	bl	8021edc <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034a0:	4607      	mov	r7, r0
 80034a2:	b180      	cbz	r0, 80034c6 <allpurposeMessageHandler+0x62>
  {
    if (cJSON_IsBool(json) == true)
 80034a4:	f01e fd23 	bl	8021eee <cJSON_IsBool>
 80034a8:	2801      	cmp	r0, #1
 80034aa:	4606      	mov	r6, r0
 80034ac:	d131      	bne.n	8003512 <allpurposeMessageHandler+0xae>
    {
      status_data.LedOn = (cJSON_IsTrue(json) == true);
 80034ae:	4638      	mov	r0, r7
 80034b0:	f01e fd17 	bl	8021ee2 <cJSON_IsTrue>
 80034b4:	1e42      	subs	r2, r0, #1
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <allpurposeMessageHandler+0xfc>)
 80034b8:	4250      	negs	r0, r2
 80034ba:	4150      	adcs	r0, r2
 80034bc:	7358      	strb	r0, [r3, #13]
      Led_SetState(status_data.LedOn);
 80034be:	f000 fe3d 	bl	800413c <Led_SetState>
      g_statusChanged = true;
 80034c2:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
    {
      msg_error("JSON parsing error of LedOn value.\n");
    }
  }

  json = cJSON_GetObjectItemCaseSensitive(root, "TelemetryInterval");
 80034c6:	4927      	ldr	r1, [pc, #156]	; (8003564 <allpurposeMessageHandler+0x100>)
 80034c8:	4628      	mov	r0, r5
 80034ca:	f01e fd07 	bl	8021edc <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034ce:	4606      	mov	r6, r0
 80034d0:	b140      	cbz	r0, 80034e4 <allpurposeMessageHandler+0x80>
  {
    if (cJSON_IsNumber(json) == true)
 80034d2:	f01e fd13 	bl	8021efc <cJSON_IsNumber>
 80034d6:	2801      	cmp	r0, #1
 80034d8:	d125      	bne.n	8003526 <allpurposeMessageHandler+0xc2>
    {
      status_data.TelemetryInterval = json->valueint;
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <allpurposeMessageHandler+0xfc>)
 80034dc:	6972      	ldr	r2, [r6, #20]
 80034de:	611a      	str	r2, [r3, #16]
      g_statusChanged = true;
 80034e0:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
    {
      msg_error("JSON parsing error of TelemetryInterval value.\n");
    }
  }

  json = cJSON_GetObjectItemCaseSensitive(root, "Reboot");
 80034e4:	4920      	ldr	r1, [pc, #128]	; (8003568 <allpurposeMessageHandler+0x104>)
 80034e6:	4628      	mov	r0, r5
 80034e8:	f01e fcf8 	bl	8021edc <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034ec:	4606      	mov	r6, r0
 80034ee:	b158      	cbz	r0, 8003508 <allpurposeMessageHandler+0xa4>
  {
    if (cJSON_IsBool(json) == true)
 80034f0:	f01e fcfd 	bl	8021eee <cJSON_IsBool>
 80034f4:	2801      	cmp	r0, #1
 80034f6:	d120      	bne.n	800353a <allpurposeMessageHandler+0xd6>
    {
      g_reboot = (cJSON_IsTrue(json) == true);
 80034f8:	4630      	mov	r0, r6
 80034fa:	f01e fcf2 	bl	8021ee2 <cJSON_IsTrue>
 80034fe:	1e43      	subs	r3, r0, #1
 8003500:	4258      	negs	r0, r3
 8003502:	4158      	adcs	r0, r3
 8003504:	f884 0259 	strb.w	r0, [r4, #601]	; 0x259
    {
      msg_error("JSON parsing error of Reboot value.\n");
    }
  }

  cJSON_Delete(root);
 8003508:	4628      	mov	r0, r5
}
 800350a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cJSON_Delete(root);
 800350e:	f01e badb 	b.w	8021ac8 <cJSON_Delete>
      msg_error("JSON parsing error of LedOn value.\n");
 8003512:	4916      	ldr	r1, [pc, #88]	; (800356c <allpurposeMessageHandler+0x108>)
 8003514:	4816      	ldr	r0, [pc, #88]	; (8003570 <allpurposeMessageHandler+0x10c>)
 8003516:	f240 1219 	movw	r2, #281	; 0x119
 800351a:	f01f ff71 	bl	8023400 <iprintf>
 800351e:	4815      	ldr	r0, [pc, #84]	; (8003574 <allpurposeMessageHandler+0x110>)
 8003520:	f020 f80a 	bl	8023538 <puts>
 8003524:	e7cf      	b.n	80034c6 <allpurposeMessageHandler+0x62>
      msg_error("JSON parsing error of TelemetryInterval value.\n");
 8003526:	4911      	ldr	r1, [pc, #68]	; (800356c <allpurposeMessageHandler+0x108>)
 8003528:	4811      	ldr	r0, [pc, #68]	; (8003570 <allpurposeMessageHandler+0x10c>)
 800352a:	f240 1227 	movw	r2, #295	; 0x127
 800352e:	f01f ff67 	bl	8023400 <iprintf>
 8003532:	4811      	ldr	r0, [pc, #68]	; (8003578 <allpurposeMessageHandler+0x114>)
 8003534:	f020 f800 	bl	8023538 <puts>
 8003538:	e7d4      	b.n	80034e4 <allpurposeMessageHandler+0x80>
      msg_error("JSON parsing error of Reboot value.\n");
 800353a:	490c      	ldr	r1, [pc, #48]	; (800356c <allpurposeMessageHandler+0x108>)
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <allpurposeMessageHandler+0x10c>)
 800353e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003542:	f01f ff5d 	bl	8023400 <iprintf>
 8003546:	480d      	ldr	r0, [pc, #52]	; (800357c <allpurposeMessageHandler+0x118>)
 8003548:	f01f fff6 	bl	8023538 <puts>
 800354c:	e7dc      	b.n	8003508 <allpurposeMessageHandler+0xa4>
 800354e:	bf00      	nop
 8003550:	200007cc 	.word	0x200007cc
 8003554:	08031349 	.word	0x08031349
 8003558:	0802eace 	.word	0x0802eace
 800355c:	0802eafa 	.word	0x0802eafa
 8003560:	2000000c 	.word	0x2000000c
 8003564:	0802eb23 	.word	0x0802eb23
 8003568:	0802eb64 	.word	0x0802eb64
 800356c:	080281f7 	.word	0x080281f7
 8003570:	0802d71d 	.word	0x0802d71d
 8003574:	0802eb00 	.word	0x0802eb00
 8003578:	0802eb35 	.word	0x0802eb35
 800357c:	0802eb6b 	.word	0x0802eb6b

08003580 <cloud_device_enter_credentials>:
{
 8003580:	b500      	push	{lr}
 8003582:	b0ef      	sub	sp, #444	; 0x1bc
  memset(&iot_config, 0, sizeof(iot_config_t));
 8003584:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003588:	2100      	movs	r1, #0
 800358a:	4668      	mov	r0, sp
 800358c:	f01e fe34 	bl	80221f8 <memset>
  printf("\nEnter the connection string of your device:\n"
 8003590:	480e      	ldr	r0, [pc, #56]	; (80035cc <cloud_device_enter_credentials+0x4c>)
 8003592:	f01f ffd1 	bl	8023538 <puts>
  getInputString(iot_config.device_name, USER_CONF_DEVICE_NAME_LENGTH);
 8003596:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800359a:	a802      	add	r0, sp, #8
 800359c:	f7fd ffc2 	bl	8001524 <getInputString>
  msg_info("read: --->\n%s\n<---\n", iot_config.device_name);
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <cloud_device_enter_credentials+0x50>)
 80035a2:	a902      	add	r1, sp, #8
 80035a4:	f01f ff2c 	bl	8023400 <iprintf>
  if(setIoTDeviceConfig(&iot_config) != 0)
 80035a8:	4668      	mov	r0, sp
 80035aa:	f7fe fa01 	bl	80019b0 <setIoTDeviceConfig>
 80035ae:	b148      	cbz	r0, 80035c4 <cloud_device_enter_credentials+0x44>
    msg_error("Failed programming the IoT device configuration to Flash.\n");
 80035b0:	4908      	ldr	r1, [pc, #32]	; (80035d4 <cloud_device_enter_credentials+0x54>)
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <cloud_device_enter_credentials+0x58>)
 80035b4:	22b2      	movs	r2, #178	; 0xb2
 80035b6:	f01f ff23 	bl	8023400 <iprintf>
 80035ba:	4808      	ldr	r0, [pc, #32]	; (80035dc <cloud_device_enter_credentials+0x5c>)
 80035bc:	f01f ffbc 	bl	8023538 <puts>
    ret = -1;
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80035c4:	b06f      	add	sp, #444	; 0x1bc
 80035c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ca:	bf00      	nop
 80035cc:	0802eb8f 	.word	0x0802eb8f
 80035d0:	0802da44 	.word	0x0802da44
 80035d4:	08028210 	.word	0x08028210
 80035d8:	0802d71d 	.word	0x0802d71d
 80035dc:	0802ec97 	.word	0x0802ec97

080035e0 <stiot_publish>:

/**
 * MQTT publish API abstraction called by the metering loop.
 */
int stiot_publish(void * mqtt_ctxt, const char * topic, const char * msg)
{
 80035e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80035e2:	4614      	mov	r4, r2
 80035e4:	4606      	mov	r6, r0
  int rc;
  MQTTMessage mqmsg;
  memset(&mqmsg, 0, sizeof(MQTTMessage));
 80035e6:	2210      	movs	r2, #16
{
 80035e8:	460d      	mov	r5, r1
  memset(&mqmsg, 0, sizeof(MQTTMessage));
 80035ea:	4668      	mov	r0, sp
 80035ec:	2100      	movs	r1, #0
 80035ee:	f01e fe03 	bl	80221f8 <memset>
  mqmsg.qos = QOS0;
 80035f2:	2300      	movs	r3, #0
  mqmsg.payload = (char *) msg;
  mqmsg.payloadlen = strlen(msg);
 80035f4:	4620      	mov	r0, r4
  mqmsg.qos = QOS0;
 80035f6:	f88d 3000 	strb.w	r3, [sp]
  mqmsg.payload = (char *) msg;
 80035fa:	9402      	str	r4, [sp, #8]
  mqmsg.payloadlen = strlen(msg);
 80035fc:	f7fc fdf2 	bl	80001e4 <strlen>

  rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 8003600:	466a      	mov	r2, sp
  mqmsg.payloadlen = strlen(msg);
 8003602:	9003      	str	r0, [sp, #12]
  rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 8003604:	4629      	mov	r1, r5
 8003606:	4630      	mov	r0, r6
 8003608:	f009 faab 	bl	800cb62 <MQTTPublish>
  if (rc != MQSUCCESS)
 800360c:	4604      	mov	r4, r0
 800360e:	b150      	cbz	r0, 8003626 <stiot_publish+0x46>
  {
    msg_error("Failed publishing %s on %s\n", (char *)(mqmsg.payload), topic);
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <stiot_publish+0x4c>)
 8003612:	4807      	ldr	r0, [pc, #28]	; (8003630 <stiot_publish+0x50>)
 8003614:	f240 322b 	movw	r2, #811	; 0x32b
 8003618:	f01f fef2 	bl	8023400 <iprintf>
 800361c:	9902      	ldr	r1, [sp, #8]
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <stiot_publish+0x54>)
 8003620:	462a      	mov	r2, r5
 8003622:	f01f feed 	bl	8023400 <iprintf>
  }
  return rc;
}
 8003626:	4620      	mov	r0, r4
 8003628:	b004      	add	sp, #16
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	0802822f 	.word	0x0802822f
 8003630:	0802d71d 	.word	0x0802d71d
 8003634:	0802ecd1 	.word	0x0802ecd1

08003638 <string_allocate_from_token>:

/** Look for a 'key=value' pair in the passed configuration string, and return a new buffer
 *  holding the 'value' field.
 */
int string_allocate_from_token(char ** pDestString, char * tokenName, const char * sourceString)
{
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	4607      	mov	r7, r0
  int ret = 0;
  char * key = NULL;
  char * value = NULL;

  if ((key = strstr(sourceString, tokenName)) != NULL)
 800363c:	4610      	mov	r0, r2
{
 800363e:	460c      	mov	r4, r1
  if ((key = strstr(sourceString, tokenName)) != NULL)
 8003640:	f020 f8c7 	bl	80237d2 <strstr>
 8003644:	4605      	mov	r5, r0
 8003646:	b1b0      	cbz	r0, 8003676 <string_allocate_from_token+0x3e>
  {
    int size = 0;
    value = key + strlen(tokenName);    /* '=' key=value separator is part of tokenName. */
 8003648:	4620      	mov	r0, r4
 800364a:	f7fc fdcb 	bl	80001e4 <strlen>
 800364e:	4405      	add	r5, r0
    if ((key = strstr(value, ";")) != NULL)
 8003650:	213b      	movs	r1, #59	; 0x3b
 8003652:	4628      	mov	r0, r5
 8003654:	f020 f883 	bl	802375e <strchr>
 8003658:	4604      	mov	r4, r0
 800365a:	b100      	cbz	r0, 800365e <string_allocate_from_token+0x26>
    {
      size = key - value;
 800365c:	1b44      	subs	r4, r0, r5
    }
    *pDestString = malloc(size + 1);
 800365e:	1c60      	adds	r0, r4, #1
 8003660:	f01e fd84 	bl	802216c <malloc>
 8003664:	4606      	mov	r6, r0
 8003666:	6038      	str	r0, [r7, #0]
    if (*pDestString != NULL)
 8003668:	b138      	cbz	r0, 800367a <string_allocate_from_token+0x42>
    {
      memcpy(*pDestString, value, size);
 800366a:	4622      	mov	r2, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f01e fd9b 	bl	80221a8 <memcpy>
      (*pDestString)[size] = '\0';
 8003672:	2300      	movs	r3, #0
 8003674:	5533      	strb	r3, [r6, r4]
      msg_error("Allocation failed\n");
    }
  }

  return ret;
}
 8003676:	2000      	movs	r0, #0
 8003678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      msg_error("Allocation failed\n");
 800367a:	4905      	ldr	r1, [pc, #20]	; (8003690 <string_allocate_from_token+0x58>)
 800367c:	4805      	ldr	r0, [pc, #20]	; (8003694 <string_allocate_from_token+0x5c>)
 800367e:	f240 324a 	movw	r2, #842	; 0x34a
 8003682:	f01f febd 	bl	8023400 <iprintf>
 8003686:	4804      	ldr	r0, [pc, #16]	; (8003698 <string_allocate_from_token+0x60>)
 8003688:	f01f ff56 	bl	8023538 <puts>
 800368c:	e7f3      	b.n	8003676 <string_allocate_from_token+0x3e>
 800368e:	bf00      	nop
 8003690:	0802823d 	.word	0x0802823d
 8003694:	0802d71d 	.word	0x0802d71d
 8003698:	0802eced 	.word	0x0802eced

0800369c <free_device_config>:


/** Free a device_config_t allocated by parse_and_fill_device_config().
 */
void free_device_config(device_config_t * config)
{
 800369c:	b510      	push	{r4, lr}
  if (config != NULL)
 800369e:	4604      	mov	r4, r0
 80036a0:	b1e0      	cbz	r0, 80036dc <free_device_config+0x40>
  {
    if (config->HostName != NULL) free(config->HostName);
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	b108      	cbz	r0, 80036aa <free_device_config+0xe>
 80036a6:	f01e fd69 	bl	802217c <free>
    if (config->HostPort != NULL) free(config->HostPort);
 80036aa:	6860      	ldr	r0, [r4, #4]
 80036ac:	b108      	cbz	r0, 80036b2 <free_device_config+0x16>
 80036ae:	f01e fd65 	bl	802217c <free>
    if (config->ConnSecurity != NULL) free(config->ConnSecurity);
 80036b2:	68a0      	ldr	r0, [r4, #8]
 80036b4:	b108      	cbz	r0, 80036ba <free_device_config+0x1e>
 80036b6:	f01e fd61 	bl	802217c <free>
    if (config->MQClientId != NULL) free(config->MQClientId);
 80036ba:	68e0      	ldr	r0, [r4, #12]
 80036bc:	b108      	cbz	r0, 80036c2 <free_device_config+0x26>
 80036be:	f01e fd5d 	bl	802217c <free>
    if (config->MQUserName != NULL) free(config->MQUserName);
 80036c2:	6920      	ldr	r0, [r4, #16]
 80036c4:	b108      	cbz	r0, 80036ca <free_device_config+0x2e>
 80036c6:	f01e fd59 	bl	802217c <free>
    if (config->MQUserPwd != NULL) free(config->MQUserPwd);
 80036ca:	6960      	ldr	r0, [r4, #20]
 80036cc:	b108      	cbz	r0, 80036d2 <free_device_config+0x36>
 80036ce:	f01e fd55 	bl	802217c <free>
#ifdef LITMUS_LOOP
    if (config->LoopTopicId != NULL) free(config->LoopTopicId);
#endif

    free(config);
 80036d2:	4620      	mov	r0, r4
  }
  else
  {
    msg_warning("Attemped to free a non-allocated config structure.\n");
  }
}
 80036d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(config);
 80036d8:	f01e bd50 	b.w	802217c <free>
}
 80036dc:	bd10      	pop	{r4, pc}
	...

080036e0 <parse_and_fill_device_config>:
{
 80036e0:	e92d 4a38 	stmdb	sp!, {r3, r4, r5, r9, fp, lr}
 80036e4:	4604      	mov	r4, r0
  if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 80036e6:	4608      	mov	r0, r1
{
 80036e8:	468b      	mov	fp, r1
  if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 80036ea:	f7fc fd7b 	bl	80001e4 <strlen>
 80036ee:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80036f2:	d90d      	bls.n	8003710 <parse_and_fill_device_config+0x30>
    msg_error("Cannot parse the configuration string:  It is not null-terminated!\n");
 80036f4:	492c      	ldr	r1, [pc, #176]	; (80037a8 <parse_and_fill_device_config+0xc8>)
 80036f6:	482d      	ldr	r0, [pc, #180]	; (80037ac <parse_and_fill_device_config+0xcc>)
 80036f8:	f240 325e 	movw	r2, #862	; 0x35e
 80036fc:	f01f fe80 	bl	8023400 <iprintf>
 8003700:	482b      	ldr	r0, [pc, #172]	; (80037b0 <parse_and_fill_device_config+0xd0>)
      msg_error("Null parameter\n");
 8003702:	f01f ff19 	bl	8023538 <puts>
  int ret = -1;
 8003706:	f04f 35ff 	mov.w	r5, #4294967295
}
 800370a:	4628      	mov	r0, r5
 800370c:	e8bd 8a38 	ldmia.w	sp!, {r3, r4, r5, r9, fp, pc}
    if (pConfig == NULL)
 8003710:	b93c      	cbnz	r4, 8003722 <parse_and_fill_device_config+0x42>
      msg_error("Null parameter\n");
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <parse_and_fill_device_config+0xc8>)
 8003714:	4825      	ldr	r0, [pc, #148]	; (80037ac <parse_and_fill_device_config+0xcc>)
 8003716:	f44f 7259 	mov.w	r2, #868	; 0x364
 800371a:	f01f fe71 	bl	8023400 <iprintf>
 800371e:	4825      	ldr	r0, [pc, #148]	; (80037b4 <parse_and_fill_device_config+0xd4>)
 8003720:	e7ef      	b.n	8003702 <parse_and_fill_device_config+0x22>
      config = malloc(sizeof(device_config_t));
 8003722:	2018      	movs	r0, #24
 8003724:	f01e fd22 	bl	802216c <malloc>
      memset(config, 0, sizeof(device_config_t));
 8003728:	2218      	movs	r2, #24
      config = malloc(sizeof(device_config_t));
 800372a:	4681      	mov	r9, r0
      memset(config, 0, sizeof(device_config_t));
 800372c:	2100      	movs	r1, #0
 800372e:	f01e fd63 	bl	80221f8 <memset>
      ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 8003732:	4921      	ldr	r1, [pc, #132]	; (80037b8 <parse_and_fill_device_config+0xd8>)
 8003734:	465a      	mov	r2, fp
 8003736:	4648      	mov	r0, r9
 8003738:	f7ff ff7e 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 800373c:	491f      	ldr	r1, [pc, #124]	; (80037bc <parse_and_fill_device_config+0xdc>)
      ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 800373e:	4605      	mov	r5, r0
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 8003740:	465a      	mov	r2, fp
 8003742:	f109 0004 	add.w	r0, r9, #4
 8003746:	f7ff ff77 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 800374a:	491d      	ldr	r1, [pc, #116]	; (80037c0 <parse_and_fill_device_config+0xe0>)
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 800374c:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 800374e:	465a      	mov	r2, fp
 8003750:	f109 0008 	add.w	r0, r9, #8
 8003754:	f7ff ff70 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003758:	491a      	ldr	r1, [pc, #104]	; (80037c4 <parse_and_fill_device_config+0xe4>)
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 800375a:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 800375c:	465a      	mov	r2, fp
 800375e:	f109 000c 	add.w	r0, r9, #12
 8003762:	f7ff ff69 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 8003766:	4918      	ldr	r1, [pc, #96]	; (80037c8 <parse_and_fill_device_config+0xe8>)
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003768:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 800376a:	465a      	mov	r2, fp
 800376c:	f109 0010 	add.w	r0, r9, #16
 8003770:	f7ff ff62 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 8003774:	4915      	ldr	r1, [pc, #84]	; (80037cc <parse_and_fill_device_config+0xec>)
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 8003776:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 8003778:	465a      	mov	r2, fp
 800377a:	f109 0014 	add.w	r0, r9, #20
 800377e:	f7ff ff5b 	bl	8003638 <string_allocate_from_token>
      if (ret != 0)
 8003782:	4305      	orrs	r5, r0
 8003784:	d00c      	beq.n	80037a0 <parse_and_fill_device_config+0xc0>
        msg_error("Failed parsing the device configuration string.\n");
 8003786:	4908      	ldr	r1, [pc, #32]	; (80037a8 <parse_and_fill_device_config+0xc8>)
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <parse_and_fill_device_config+0xcc>)
 800378a:	f240 3277 	movw	r2, #887	; 0x377
 800378e:	f01f fe37 	bl	8023400 <iprintf>
 8003792:	480f      	ldr	r0, [pc, #60]	; (80037d0 <parse_and_fill_device_config+0xf0>)
 8003794:	f01f fed0 	bl	8023538 <puts>
        free_device_config(config);
 8003798:	4648      	mov	r0, r9
 800379a:	f7ff ff7f 	bl	800369c <free_device_config>
 800379e:	e7b4      	b.n	800370a <parse_and_fill_device_config+0x2a>
        *pConfig = config;
 80037a0:	f8c4 9000 	str.w	r9, [r4]
  return ret;
 80037a4:	e7b1      	b.n	800370a <parse_and_fill_device_config+0x2a>
 80037a6:	bf00      	nop
 80037a8:	08028258 	.word	0x08028258
 80037ac:	0802d71d 	.word	0x0802d71d
 80037b0:	0802ecff 	.word	0x0802ecff
 80037b4:	0802ed42 	.word	0x0802ed42
 80037b8:	0802ed51 	.word	0x0802ed51
 80037bc:	0802ed5b 	.word	0x0802ed5b
 80037c0:	0802ed65 	.word	0x0802ed65
 80037c4:	0802ed73 	.word	0x0802ed73
 80037c8:	0802ed7f 	.word	0x0802ed7f
 80037cc:	0802ed8b 	.word	0x0802ed8b
 80037d0:	0802ed96 	.word	0x0802ed96

080037d4 <app_needs_device_keypair>:
{
 80037d4:	b513      	push	{r0, r1, r4, lr}
  const char * config_string = NULL;
 80037d6:	2300      	movs	r3, #0
  if(getIoTDeviceConfig(&config_string) != 0)
 80037d8:	4668      	mov	r0, sp
  device_config_t * device_config = NULL;
 80037da:	e9cd 3300 	strd	r3, r3, [sp]
  if(getIoTDeviceConfig(&config_string) != 0)
 80037de:	f7fe f913 	bl	8001a08 <getIoTDeviceConfig>
 80037e2:	b150      	cbz	r0, 80037fa <app_needs_device_keypair+0x26>
    msg_error("Failed retrieving the device configuration string.\n");
 80037e4:	4911      	ldr	r1, [pc, #68]	; (800382c <app_needs_device_keypair+0x58>)
 80037e6:	4812      	ldr	r0, [pc, #72]	; (8003830 <app_needs_device_keypair+0x5c>)
 80037e8:	22c0      	movs	r2, #192	; 0xc0
 80037ea:	f01f fe09 	bl	8023400 <iprintf>
 80037ee:	4811      	ldr	r0, [pc, #68]	; (8003834 <app_needs_device_keypair+0x60>)
      msg_error("Could not parse the connection security settings from the configuration string.\n");
 80037f0:	f01f fea2 	bl	8023538 <puts>
  conn_sec_t security = CONN_SEC_UNDEFINED;
 80037f4:	f04f 34ff 	mov.w	r4, #4294967295
 80037f8:	e00c      	b.n	8003814 <app_needs_device_keypair+0x40>
    if (parse_and_fill_device_config(&device_config, config_string) == 0)
 80037fa:	9900      	ldr	r1, [sp, #0]
 80037fc:	a801      	add	r0, sp, #4
 80037fe:	f7ff ff6f 	bl	80036e0 <parse_and_fill_device_config>
 8003802:	b960      	cbnz	r0, 800381e <app_needs_device_keypair+0x4a>
      security = (conn_sec_t) atoi(device_config->ConnSecurity);
 8003804:	9b01      	ldr	r3, [sp, #4]
 8003806:	6898      	ldr	r0, [r3, #8]
 8003808:	f01e fb7f 	bl	8021f0a <atoi>
 800380c:	b244      	sxtb	r4, r0
      free_device_config(device_config);
 800380e:	9801      	ldr	r0, [sp, #4]
 8003810:	f7ff ff44 	bl	800369c <free_device_config>
}
 8003814:	1ee3      	subs	r3, r4, #3
 8003816:	4258      	negs	r0, r3
 8003818:	4158      	adcs	r0, r3
 800381a:	b002      	add	sp, #8
 800381c:	bd10      	pop	{r4, pc}
      msg_error("Could not parse the connection security settings from the configuration string.\n");
 800381e:	4903      	ldr	r1, [pc, #12]	; (800382c <app_needs_device_keypair+0x58>)
 8003820:	4803      	ldr	r0, [pc, #12]	; (8003830 <app_needs_device_keypair+0x5c>)
 8003822:	22cb      	movs	r2, #203	; 0xcb
 8003824:	f01f fdec 	bl	8023400 <iprintf>
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <app_needs_device_keypair+0x64>)
 800382a:	e7e1      	b.n	80037f0 <app_needs_device_keypair+0x1c>
 800382c:	08028275 	.word	0x08028275
 8003830:	0802d71d 	.word	0x0802d71d
 8003834:	0802edc6 	.word	0x0802edc6
 8003838:	0802edf9 	.word	0x0802edf9

0800383c <comp_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t comp_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 800383c:	b510      	push	{r4, lr}
  int32_t ret = 0;
  uint32_t wrap_end = 0;

  if (now < init)
 800383e:	4281      	cmp	r1, r0
  { /* Timer wrap-around detected */
    /* printf("Timer: wrap-around detected from %d to %d\n", init, now); */
    wrap_end = UINT32_MAX - init;
  }
  ret = wrap_end - (now - init) + timeout;
 8003840:	4402      	add	r2, r0
    wrap_end = UINT32_MAX - init;
 8003842:	bf34      	ite	cc
 8003844:	43c4      	mvncc	r4, r0
  uint32_t wrap_end = 0;
 8003846:	2400      	movcs	r4, #0
  ret = wrap_end - (now - init) + timeout;
 8003848:	1a53      	subs	r3, r2, r1

  return ret;
}
 800384a:	1918      	adds	r0, r3, r4
 800384c:	bd10      	pop	{r4, pc}
	...

08003850 <genericmqtt_client_XCube_sample_run>:
{
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  g_continueRunning = true;
 8003854:	4c85      	ldr	r4, [pc, #532]	; (8003a6c <genericmqtt_client_XCube_sample_run+0x21c>)
  memset(&pub_data, 0, sizeof(pub_data));
 8003856:	4886      	ldr	r0, [pc, #536]	; (8003a70 <genericmqtt_client_XCube_sample_run+0x220>)
{
 8003858:	b0d9      	sub	sp, #356	; 0x164
  const char * connectionString   = NULL;
 800385a:	2100      	movs	r1, #0
  g_continueRunning = true;
 800385c:	2301      	movs	r3, #1
  memset(&pub_data, 0, sizeof(pub_data));
 800385e:	2240      	movs	r2, #64	; 0x40
  device_config_t * device_config = NULL;
 8003860:	e9cd 1118 	strd	r1, r1, [sp, #96]	; 0x60
  const char * device_cert  = NULL;
 8003864:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
  const char * device_key   = NULL;
 8003868:	911c      	str	r1, [sp, #112]	; 0x70
  g_continueRunning = true;
 800386a:	f884 325a 	strb.w	r3, [r4, #602]	; 0x25a
  g_publishData     = false;
 800386e:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
  g_statusChanged   = true;
 8003872:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
  g_reboot          = false;
 8003876:	f884 1259 	strb.w	r1, [r4, #601]	; 0x259
  g_connection_needed_score = 1;
 800387a:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
  memset(&pub_data, 0, sizeof(pub_data));
 800387e:	f01e fcbb 	bl	80221f8 <memset>
  ret = platform_init();
 8003882:	f7fd fc47 	bl	8001114 <platform_init>
  if (ret != 0)
 8003886:	b308      	cbz	r0, 80038cc <genericmqtt_client_XCube_sample_run+0x7c>
    msg_error("Failed to initialize the platform.\n");
 8003888:	497a      	ldr	r1, [pc, #488]	; (8003a74 <genericmqtt_client_XCube_sample_run+0x224>)
 800388a:	487b      	ldr	r0, [pc, #492]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 800388c:	f240 125b 	movw	r2, #347	; 0x15b
 8003890:	f01f fdb6 	bl	8023400 <iprintf>
 8003894:	4879      	ldr	r0, [pc, #484]	; (8003a7c <genericmqtt_client_XCube_sample_run+0x22c>)
 8003896:	f01f fe4f 	bl	8023538 <puts>
    msg_error("Cannot retrieve the connection string from the user configuration storage.\n");
 800389a:	4976      	ldr	r1, [pc, #472]	; (8003a74 <genericmqtt_client_XCube_sample_run+0x224>)
 800389c:	4876      	ldr	r0, [pc, #472]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 800389e:	f240 1267 	movw	r2, #359	; 0x167
 80038a2:	f01f fdad 	bl	8023400 <iprintf>
 80038a6:	4876      	ldr	r0, [pc, #472]	; (8003a80 <genericmqtt_client_XCube_sample_run+0x230>)
 80038a8:	f01f fe46 	bl	8023538 <puts>
  free_device_config(device_config);
 80038ac:	9819      	ldr	r0, [sp, #100]	; 0x64
 80038ae:	f7ff fef5 	bl	800369c <free_device_config>
  platform_deinit();
 80038b2:	f7fd fcff 	bl	80012b4 <platform_deinit>
  if(g_reboot == true)
 80038b6:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 80038ba:	b123      	cbz	r3, 80038c6 <genericmqtt_client_XCube_sample_run+0x76>
    msg_info("Calling HAL_NVIC_SystemReset()\n");
 80038bc:	4871      	ldr	r0, [pc, #452]	; (8003a84 <genericmqtt_client_XCube_sample_run+0x234>)
 80038be:	f01f fe3b 	bl	8023538 <puts>
    HAL_NVIC_SystemReset();
 80038c2:	f005 f8b5 	bl	8008a30 <HAL_NVIC_SystemReset>
}
 80038c6:	b059      	add	sp, #356	; 0x164
 80038c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = (getIoTDeviceConfig(&connectionString) != 0);
 80038cc:	a818      	add	r0, sp, #96	; 0x60
 80038ce:	f7fe f89b 	bl	8001a08 <getIoTDeviceConfig>
    ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 80038d2:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret = (getIoTDeviceConfig(&connectionString) != 0);
 80038d4:	4605      	mov	r5, r0
    ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 80038d6:	a819      	add	r0, sp, #100	; 0x64
 80038d8:	f7ff ff02 	bl	80036e0 <parse_and_fill_device_config>
    connection_security = (conn_sec_t) atoi(device_config->ConnSecurity);
 80038dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038de:	4305      	orrs	r5, r0
 80038e0:	6898      	ldr	r0, [r3, #8]
 80038e2:	f01e fb12 	bl	8021f0a <atoi>
 80038e6:	b247      	sxtb	r7, r0
  if (ret != 0)
 80038e8:	2d00      	cmp	r5, #0
 80038ea:	d1d6      	bne.n	800389a <genericmqtt_client_XCube_sample_run+0x4a>
    net_macaddr_t mac = { 0 };
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <genericmqtt_client_XCube_sample_run+0x238>)
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 80038ee:	4d67      	ldr	r5, [pc, #412]	; (8003a8c <genericmqtt_client_XCube_sample_run+0x23c>)
    net_macaddr_t mac = { 0 };
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	901e      	str	r0, [sp, #120]	; 0x78
 80038f4:	889b      	ldrh	r3, [r3, #4]
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 80038f6:	6828      	ldr	r0, [r5, #0]
    net_macaddr_t mac = { 0 };
 80038f8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 80038fc:	a91e      	add	r1, sp, #120	; 0x78
 80038fe:	f7fe fa43 	bl	8001d88 <net_get_mac_address>
 8003902:	46a8      	mov	r8, r5
 8003904:	2800      	cmp	r0, #0
 8003906:	d171      	bne.n	80039ec <genericmqtt_client_XCube_sample_run+0x19c>
      snprintf(status_data.mac, MODEL_MAC_SIZE - 1, "%02X%02X%02X%02X%02X%02X",
 8003908:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4a5a      	ldr	r2, [pc, #360]	; (8003a90 <genericmqtt_client_XCube_sample_run+0x240>)
 8003928:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800392c:	4859      	ldr	r0, [pc, #356]	; (8003a94 <genericmqtt_client_XCube_sample_run+0x244>)
 800392e:	210c      	movs	r1, #12
 8003930:	f01f fe50 	bl	80235d4 <sniprintf>
    strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 8003934:	4e57      	ldr	r6, [pc, #348]	; (8003a94 <genericmqtt_client_XCube_sample_run+0x244>)
 8003936:	484e      	ldr	r0, [pc, #312]	; (8003a70 <genericmqtt_client_XCube_sample_run+0x220>)
        msg_error("net_sock_destroy() failed.\n");
 8003938:	4d4e      	ldr	r5, [pc, #312]	; (8003a74 <genericmqtt_client_XCube_sample_run+0x224>)
    strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 800393a:	220c      	movs	r2, #12
 800393c:	4631      	mov	r1, r6
 800393e:	f01f ff35 	bl	80237ac <strncpy>
    status_data.TelemetryInterval = MODEL_DEFAULT_TELEMETRYINTERVAL;
 8003942:	2f00      	cmp	r7, #0
 8003944:	f04f 030f 	mov.w	r3, #15
 8003948:	6133      	str	r3, [r6, #16]
 800394a:	bf0c      	ite	eq
 800394c:	f04f 0b01 	moveq.w	fp, #1
 8003950:	f04f 0b02 	movne.w	fp, #2
      if ( (net_get_ip_address(hnet, &ip) == NET_ERR) || (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) )
 8003954:	f8d8 0000 	ldr.w	r0, [r8]
 8003958:	a923      	add	r1, sp, #140	; 0x8c
 800395a:	f7fe f9e5 	bl	8001d28 <net_get_ip_address>
 800395e:	3001      	adds	r0, #1
 8003960:	d04a      	beq.n	80039f8 <genericmqtt_client_XCube_sample_run+0x1a8>
 8003962:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003966:	2b03      	cmp	r3, #3
 8003968:	dc69      	bgt.n	8003a3e <genericmqtt_client_XCube_sample_run+0x1ee>
      ret = net_sock_create(hnet, &socket, (connection_security == CONN_SEC_NONE) ? NET_PROTO_TCP :NET_PROTO_TLS);
 800396a:	f8d8 0000 	ldr.w	r0, [r8]
 800396e:	465a      	mov	r2, fp
 8003970:	a91d      	add	r1, sp, #116	; 0x74
 8003972:	f7fe fa33 	bl	8001ddc <net_sock_create>
      if (ret != NET_OK)
 8003976:	4681      	mov	r9, r0
 8003978:	2800      	cmp	r0, #0
 800397a:	d06d      	beq.n	8003a58 <genericmqtt_client_XCube_sample_run+0x208>
        msg_error("Could not create the socket.\n");
 800397c:	483e      	ldr	r0, [pc, #248]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 800397e:	f240 1299 	movw	r2, #409	; 0x199
 8003982:	4629      	mov	r1, r5
 8003984:	f01f fd3c 	bl	8023400 <iprintf>
 8003988:	4843      	ldr	r0, [pc, #268]	; (8003a98 <genericmqtt_client_XCube_sample_run+0x248>)
 800398a:	f01f fdd5 	bl	8023538 <puts>
        msg_error("Could not retrieve the security connection settings and set the socket options.\n");
 800398e:	483a      	ldr	r0, [pc, #232]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 8003990:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8003994:	4629      	mov	r1, r5
 8003996:	f01f fd33 	bl	8023400 <iprintf>
 800399a:	4840      	ldr	r0, [pc, #256]	; (8003a9c <genericmqtt_client_XCube_sample_run+0x24c>)
 800399c:	f01f fdcc 	bl	8023538 <puts>
        msg_error("Could not open the socket at %s port %d.\n", device_config->HostName, atoi(device_config->HostPort));
 80039a0:	f240 12c7 	movw	r2, #455	; 0x1c7
 80039a4:	4629      	mov	r1, r5
 80039a6:	4834      	ldr	r0, [pc, #208]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 80039a8:	f01f fd2a 	bl	8023400 <iprintf>
 80039ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	6858      	ldr	r0, [r3, #4]
 80039b2:	9116      	str	r1, [sp, #88]	; 0x58
 80039b4:	f01e faa9 	bl	8021f0a <atoi>
 80039b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80039ba:	4602      	mov	r2, r0
 80039bc:	4838      	ldr	r0, [pc, #224]	; (8003aa0 <genericmqtt_client_XCube_sample_run+0x250>)
 80039be:	f01f fd1f 	bl	8023400 <iprintf>
        g_connection_needed_score++;
 80039c2:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
        HAL_Delay(1000);
 80039c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        g_connection_needed_score++;
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
        HAL_Delay(1000);
 80039d0:	f004 ffd0 	bl	8008974 <HAL_Delay>
      if (NET_OK != net_sock_destroy(socket))
 80039d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80039d6:	f7fe fae3 	bl	8001fa0 <net_sock_destroy>
 80039da:	b330      	cbz	r0, 8003a2a <genericmqtt_client_XCube_sample_run+0x1da>
        msg_error("net_sock_destroy() failed.\n");
 80039dc:	4826      	ldr	r0, [pc, #152]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 80039de:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80039e2:	4629      	mov	r1, r5
 80039e4:	f01f fd0c 	bl	8023400 <iprintf>
 80039e8:	482e      	ldr	r0, [pc, #184]	; (8003aa4 <genericmqtt_client_XCube_sample_run+0x254>)
 80039ea:	e01c      	b.n	8003a26 <genericmqtt_client_XCube_sample_run+0x1d6>
      snprintf(status_data.mac, MODEL_MAC_SIZE - 1, "MyDevice-UnknownMAC");
 80039ec:	4a2e      	ldr	r2, [pc, #184]	; (8003aa8 <genericmqtt_client_XCube_sample_run+0x258>)
 80039ee:	4829      	ldr	r0, [pc, #164]	; (8003a94 <genericmqtt_client_XCube_sample_run+0x244>)
 80039f0:	210c      	movs	r1, #12
 80039f2:	f01f fdef 	bl	80235d4 <sniprintf>
 80039f6:	e79d      	b.n	8003934 <genericmqtt_client_XCube_sample_run+0xe4>
        msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 80039f8:	f8d4 225c 	ldr.w	r2, [r4, #604]	; 0x25c
 80039fc:	492b      	ldr	r1, [pc, #172]	; (8003aac <genericmqtt_client_XCube_sample_run+0x25c>)
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <genericmqtt_client_XCube_sample_run+0x260>)
 8003a00:	2a03      	cmp	r2, #3
 8003a02:	bfd8      	it	le
 8003a04:	4619      	movle	r1, r3
 8003a06:	482b      	ldr	r0, [pc, #172]	; (8003ab4 <genericmqtt_client_XCube_sample_run+0x264>)
 8003a08:	f01f fcfa 	bl	8023400 <iprintf>
        if (net_reinit(hnet, (net_if_reinit)) != 0)
 8003a0c:	492a      	ldr	r1, [pc, #168]	; (8003ab8 <genericmqtt_client_XCube_sample_run+0x268>)
 8003a0e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a12:	f7fe f96b 	bl	8001cec <net_reinit>
 8003a16:	b1a0      	cbz	r0, 8003a42 <genericmqtt_client_XCube_sample_run+0x1f2>
          msg_error("Netif re-initialization failed.\n");
 8003a18:	4817      	ldr	r0, [pc, #92]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 8003a1a:	f240 128b 	movw	r2, #395	; 0x18b
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f01f fcee 	bl	8023400 <iprintf>
 8003a24:	4825      	ldr	r0, [pc, #148]	; (8003abc <genericmqtt_client_XCube_sample_run+0x26c>)
        msg_error("net_sock_destroy() failed.\n");
 8003a26:	f01f fd87 	bl	8023538 <puts>
    } while (!g_reboot && (g_connection_needed_score > 0));
 8003a2a:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f47f af3c 	bne.w	80038ac <genericmqtt_client_XCube_sample_run+0x5c>
 8003a34:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dc8b      	bgt.n	8003954 <genericmqtt_client_XCube_sample_run+0x104>
 8003a3c:	e736      	b.n	80038ac <genericmqtt_client_XCube_sample_run+0x5c>
        msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 8003a3e:	491b      	ldr	r1, [pc, #108]	; (8003aac <genericmqtt_client_XCube_sample_run+0x25c>)
 8003a40:	e7e1      	b.n	8003a06 <genericmqtt_client_XCube_sample_run+0x1b6>
          msg_info("Netif re-initialized successfully.\n");
 8003a42:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <genericmqtt_client_XCube_sample_run+0x270>)
 8003a44:	f01f fd78 	bl	8023538 <puts>
          HAL_Delay(1000);
 8003a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a4c:	f004 ff92 	bl	8008974 <HAL_Delay>
          g_connection_needed_score = 1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003a56:	e788      	b.n	800396a <genericmqtt_client_XCube_sample_run+0x11a>
        switch(connection_security)
 8003a58:	2f03      	cmp	r7, #3
 8003a5a:	f200 8150 	bhi.w	8003cfe <genericmqtt_client_XCube_sample_run+0x4ae>
 8003a5e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8003a62:	0075      	.short	0x0075
 8003a64:	012f00ff 	.word	0x012f00ff
 8003a68:	0031      	.short	0x0031
 8003a6a:	bf00      	nop
 8003a6c:	200007cc 	.word	0x200007cc
 8003a70:	20000024 	.word	0x20000024
 8003a74:	0802828e 	.word	0x0802828e
 8003a78:	0802d71d 	.word	0x0802d71d
 8003a7c:	0802ee61 	.word	0x0802ee61
 8003a80:	0802ee84 	.word	0x0802ee84
 8003a84:	0802f318 	.word	0x0802f318
 8003a88:	080282b2 	.word	0x080282b2
 8003a8c:	20001174 	.word	0x20001174
 8003a90:	0802eecf 	.word	0x0802eecf
 8003a94:	2000000c 	.word	0x2000000c
 8003a98:	0802e691 	.word	0x0802e691
 8003a9c:	0802ef93 	.word	0x0802ef93
 8003aa0:	0802efe3 	.word	0x0802efe3
 8003aa4:	0802e550 	.word	0x0802e550
 8003aa8:	0802eee8 	.word	0x0802eee8
 8003aac:	0802ee49 	.word	0x0802ee49
 8003ab0:	08030129 	.word	0x08030129
 8003ab4:	0802eefc 	.word	0x0802eefc
 8003ab8:	0800337d 	.word	0x0800337d
 8003abc:	0802ef28 	.word	0x0802ef28
 8003ac0:	0802ef48 	.word	0x0802ef48
            ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0) )
 8003ac4:	f7fd fe88 	bl	80017d8 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f040 80c1 	bne.w	8003c50 <genericmqtt_client_XCube_sample_run+0x400>
 8003ace:	aa1c      	add	r2, sp, #112	; 0x70
 8003ad0:	a91b      	add	r1, sp, #108	; 0x6c
 8003ad2:	a81a      	add	r0, sp, #104	; 0x68
 8003ad4:	f7fd ffd4 	bl	8001a80 <getTLSKeys>
 8003ad8:	f1b0 0900 	subs.w	r9, r0, #0
 8003adc:	bf18      	it	ne
 8003ade:	f04f 0901 	movne.w	r9, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	9216      	str	r2, [sp, #88]	; 0x58
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fc fb7b 	bl	80001e4 <strlen>
 8003aee:	4999      	ldr	r1, [pc, #612]	; (8003d54 <genericmqtt_client_XCube_sample_run+0x504>)
 8003af0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003af6:	f7fe f99d 	bl	8001e34 <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003afa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003afc:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003afe:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fc fb6e 	bl	80001e4 <strlen>
 8003b08:	4993      	ldr	r1, [pc, #588]	; (8003d58 <genericmqtt_client_XCube_sample_run+0x508>)
 8003b0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b10:	f7fe f990 	bl	8001e34 <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b16:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b18:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7fc fb61 	bl	80001e4 <strlen>
 8003b22:	498e      	ldr	r1, [pc, #568]	; (8003d5c <genericmqtt_client_XCube_sample_run+0x50c>)
 8003b24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b2a:	f7fe f983 	bl	8001e34 <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_dev_key",     (void *) device_key,              strlen(device_key) + 1);
 8003b2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003b30:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b32:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_dev_key",     (void *) device_key,              strlen(device_key) + 1);
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fc fb54 	bl	80001e4 <strlen>
 8003b3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b3e:	4988      	ldr	r1, [pc, #544]	; (8003d60 <genericmqtt_client_XCube_sample_run+0x510>)
 8003b40:	1c43      	adds	r3, r0, #1
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b42:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b44:	f7fe f976 	bl	8001e34 <net_sock_setopt>
 8003b48:	ea49 0900 	orr.w	r9, r9, r0
        ret |= net_sock_setopt(socket, "sock_noblocking", NULL, 0);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4984      	ldr	r1, [pc, #528]	; (8003d64 <genericmqtt_client_XCube_sample_run+0x514>)
 8003b52:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b54:	f7fe f96e 	bl	8001e34 <net_sock_setopt>
      if (ret != NET_OK)
 8003b58:	ea59 0300 	orrs.w	r3, r9, r0
 8003b5c:	f47f af17 	bne.w	800398e <genericmqtt_client_XCube_sample_run+0x13e>
        ret = net_sock_open(socket, device_config->HostName, atoi(device_config->HostPort), 0);
 8003b60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b62:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8003b66:	6811      	ldr	r1, [r2, #0]
 8003b68:	6850      	ldr	r0, [r2, #4]
 8003b6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8003b6c:	9116      	str	r1, [sp, #88]	; 0x58
 8003b6e:	f01e f9cc 	bl	8021f0a <atoi>
 8003b72:	e9dd 1316 	ldrd	r1, r3, [sp, #88]	; 0x58
 8003b76:	4602      	mov	r2, r0
 8003b78:	4648      	mov	r0, r9
 8003b7a:	f7fe f955 	bl	8001e28 <net_sock_open>
      if (ret != NET_OK)
 8003b7e:	4681      	mov	r9, r0
 8003b80:	2800      	cmp	r0, #0
 8003b82:	f47f af0d 	bne.w	80039a0 <genericmqtt_client_XCube_sample_run+0x150>
        network.my_socket = socket;
 8003b86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b88:	9320      	str	r3, [sp, #128]	; 0x80
        network.mqttread = (network_read);
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <genericmqtt_client_XCube_sample_run+0x518>)
        MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT,
 8003b8c:	4a77      	ldr	r2, [pc, #476]	; (8003d6c <genericmqtt_client_XCube_sample_run+0x51c>)
        network.mqttread = (network_read);
 8003b8e:	9321      	str	r3, [sp, #132]	; 0x84
        network.mqttwrite = (network_write);
 8003b90:	4b77      	ldr	r3, [pc, #476]	; (8003d70 <genericmqtt_client_XCube_sample_run+0x520>)
 8003b92:	9322      	str	r3, [sp, #136]	; 0x88
        MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT,
 8003b94:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003b98:	e9cd 3200 	strd	r3, r2, [sp]
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	a920      	add	r1, sp, #128	; 0x80
 8003ba0:	f5a2 7316 	sub.w	r3, r2, #600	; 0x258
 8003ba4:	a83e      	add	r0, sp, #248	; 0xf8
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	f008 feb8 	bl	800c91e <MQTTClientInit>
        MQTTPacket_connectData options = MQTTPacket_connectData_initializer;
 8003bae:	4971      	ldr	r1, [pc, #452]	; (8003d74 <genericmqtt_client_XCube_sample_run+0x524>)
 8003bb0:	2258      	movs	r2, #88	; 0x58
 8003bb2:	a828      	add	r0, sp, #160	; 0xa0
 8003bb4:	f01e faf8 	bl	80221a8 <memcpy>
        options.clientID.cstring = device_config->MQClientId;
 8003bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	922b      	str	r2, [sp, #172]	; 0xac
        ret = MQTTConnect(&client, &options);
 8003bbe:	a928      	add	r1, sp, #160	; 0xa0
        options.username.cstring = device_config->MQUserName;
 8003bc0:	691a      	ldr	r2, [r3, #16]
        options.password.cstring = device_config->MQUserPwd;
 8003bc2:	695b      	ldr	r3, [r3, #20]
        options.username.cstring = device_config->MQUserName;
 8003bc4:	9238      	str	r2, [sp, #224]	; 0xe0
        ret = MQTTConnect(&client, &options);
 8003bc6:	a83e      	add	r0, sp, #248	; 0xf8
        options.password.cstring = device_config->MQUserPwd;
 8003bc8:	933b      	str	r3, [sp, #236]	; 0xec
        ret = MQTTConnect(&client, &options);
 8003bca:	f008 ff2f 	bl	800ca2c <MQTTConnect>
        if (ret != 0)
 8003bce:	4682      	mov	sl, r0
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f000 809f 	beq.w	8003d14 <genericmqtt_client_XCube_sample_run+0x4c4>
          msg_error("MQTTConnect() failed: %d\n", ret);
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	4867      	ldr	r0, [pc, #412]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003bda:	f240 12df 	movw	r2, #479	; 0x1df
 8003bde:	f01f fc0f 	bl	8023400 <iprintf>
 8003be2:	4866      	ldr	r0, [pc, #408]	; (8003d7c <genericmqtt_client_XCube_sample_run+0x52c>)
 8003be4:	4651      	mov	r1, sl
 8003be6:	f01f fc0b 	bl	8023400 <iprintf>
          msg_error("Failed subscribing to the %s topic.\n", mqtt_subtopic);
 8003bea:	4629      	mov	r1, r5
 8003bec:	4862      	ldr	r0, [pc, #392]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003bee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf2:	f01f fc05 	bl	8023400 <iprintf>
 8003bf6:	4962      	ldr	r1, [pc, #392]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003bf8:	4862      	ldr	r0, [pc, #392]	; (8003d84 <genericmqtt_client_XCube_sample_run+0x534>)
 8003bfa:	f01f fc01 	bl	8023400 <iprintf>
          msg_error("Yield failed.\n");
 8003bfe:	485e      	ldr	r0, [pc, #376]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c00:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8003c04:	4629      	mov	r1, r5
 8003c06:	f01f fbfb 	bl	8023400 <iprintf>
 8003c0a:	485f      	ldr	r0, [pc, #380]	; (8003d88 <genericmqtt_client_XCube_sample_run+0x538>)
 8003c0c:	f01f fc94 	bl	8023538 <puts>
        if (b_mqtt_connected == true)
 8003c10:	f1b9 0f00 	cmp.w	r9, #0
 8003c14:	d00c      	beq.n	8003c30 <genericmqtt_client_XCube_sample_run+0x3e0>
          ret = MQTTDisconnect(&client);
 8003c16:	a83e      	add	r0, sp, #248	; 0xf8
 8003c18:	f009 f808 	bl	800cc2c <MQTTDisconnect>
          if (ret != MQSUCCESS)
 8003c1c:	b140      	cbz	r0, 8003c30 <genericmqtt_client_XCube_sample_run+0x3e0>
            msg_error("MQTTDisconnect() failed.\n");
 8003c1e:	4856      	ldr	r0, [pc, #344]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c24:	4629      	mov	r1, r5
 8003c26:	f01f fbeb 	bl	8023400 <iprintf>
 8003c2a:	4858      	ldr	r0, [pc, #352]	; (8003d8c <genericmqtt_client_XCube_sample_run+0x53c>)
 8003c2c:	f01f fc84 	bl	8023538 <puts>
        if (NET_OK !=  net_sock_close(socket))
 8003c30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c32:	f7fe f9af 	bl	8001f94 <net_sock_close>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f43f aecc 	beq.w	80039d4 <genericmqtt_client_XCube_sample_run+0x184>
          msg_error("net_sock_close() failed.\n");
 8003c3c:	f240 3206 	movw	r2, #774	; 0x306
 8003c40:	4629      	mov	r1, r5
 8003c42:	484d      	ldr	r0, [pc, #308]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c44:	f01f fbdc 	bl	8023400 <iprintf>
 8003c48:	4851      	ldr	r0, [pc, #324]	; (8003d90 <genericmqtt_client_XCube_sample_run+0x540>)
 8003c4a:	f01f fc75 	bl	8023538 <puts>
 8003c4e:	e6c1      	b.n	80039d4 <genericmqtt_client_XCube_sample_run+0x184>
            ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0) )
 8003c50:	f7fd fdda 	bl	8001808 <checkTLSDeviceConfig>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	f43f af3a 	beq.w	8003ace <genericmqtt_client_XCube_sample_run+0x27e>
              || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003c5a:	f04f 0901 	mov.w	r9, #1
 8003c5e:	e740      	b.n	8003ae2 <genericmqtt_client_XCube_sample_run+0x292>
            ret |= net_sock_setopt(socket, "tls_server_noverification", NULL, 0);
 8003c60:	2300      	movs	r3, #0
 8003c62:	461a      	mov	r2, r3
 8003c64:	494b      	ldr	r1, [pc, #300]	; (8003d94 <genericmqtt_client_XCube_sample_run+0x544>)
 8003c66:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c68:	f7fe f8e4 	bl	8001e34 <net_sock_setopt>
 8003c6c:	4682      	mov	sl, r0
            ret |= (checkTLSRootCA() != 0)
 8003c6e:	f7fd fdb3 	bl	80017d8 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003c72:	4602      	mov	r2, r0
 8003c74:	bb08      	cbnz	r0, 8003cba <genericmqtt_client_XCube_sample_run+0x46a>
 8003c76:	4601      	mov	r1, r0
 8003c78:	a81a      	add	r0, sp, #104	; 0x68
 8003c7a:	f7fd ff01 	bl	8001a80 <getTLSKeys>
 8003c7e:	f1b0 0900 	subs.w	r9, r0, #0
 8003c82:	bf18      	it	ne
 8003c84:	f04f 0901 	movne.w	r9, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	9216      	str	r2, [sp, #88]	; 0x58
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fc faa8 	bl	80001e4 <strlen>
 8003c94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c96:	492f      	ldr	r1, [pc, #188]	; (8003d54 <genericmqtt_client_XCube_sample_run+0x504>)
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c9c:	f7fe f8ca 	bl	8001e34 <net_sock_setopt>
 8003ca0:	ea49 0000 	orr.w	r0, r9, r0
 8003ca4:	ea40 090a 	orr.w	r9, r0, sl
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003ca8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003caa:	9216      	str	r2, [sp, #88]	; 0x58
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fc fa99 	bl	80001e4 <strlen>
 8003cb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003cb4:	4928      	ldr	r1, [pc, #160]	; (8003d58 <genericmqtt_client_XCube_sample_run+0x508>)
 8003cb6:	1c43      	adds	r3, r0, #1
 8003cb8:	e743      	b.n	8003b42 <genericmqtt_client_XCube_sample_run+0x2f2>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cba:	f04f 0901 	mov.w	r9, #1
 8003cbe:	e7e3      	b.n	8003c88 <genericmqtt_client_XCube_sample_run+0x438>
            ret |= (checkTLSRootCA() != 0)
 8003cc0:	f7fd fd8a 	bl	80017d8 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	b9b8      	cbnz	r0, 8003cf8 <genericmqtt_client_XCube_sample_run+0x4a8>
 8003cc8:	4601      	mov	r1, r0
 8003cca:	a81a      	add	r0, sp, #104	; 0x68
 8003ccc:	f7fd fed8 	bl	8001a80 <getTLSKeys>
 8003cd0:	f1b0 0900 	subs.w	r9, r0, #0
 8003cd4:	bf18      	it	ne
 8003cd6:	f04f 0901 	movne.w	r9, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	9216      	str	r2, [sp, #88]	; 0x58
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7fc fa7f 	bl	80001e4 <strlen>
 8003ce6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003ce8:	491a      	ldr	r1, [pc, #104]	; (8003d54 <genericmqtt_client_XCube_sample_run+0x504>)
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003cee:	f7fe f8a1 	bl	8001e34 <net_sock_setopt>
 8003cf2:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003cf6:	e7d7      	b.n	8003ca8 <genericmqtt_client_XCube_sample_run+0x458>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cf8:	f04f 0901 	mov.w	r9, #1
 8003cfc:	e7ed      	b.n	8003cda <genericmqtt_client_XCube_sample_run+0x48a>
            msg_error("Invalid connection security mode. - %d\n", connection_security);
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f240 12b7 	movw	r2, #439	; 0x1b7
 8003d04:	481c      	ldr	r0, [pc, #112]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003d06:	f01f fb7b 	bl	8023400 <iprintf>
 8003d0a:	4639      	mov	r1, r7
 8003d0c:	4822      	ldr	r0, [pc, #136]	; (8003d98 <genericmqtt_client_XCube_sample_run+0x548>)
 8003d0e:	f01f fb77 	bl	8023400 <iprintf>
 8003d12:	e71b      	b.n	8003b4c <genericmqtt_client_XCube_sample_run+0x2fc>
          snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <genericmqtt_client_XCube_sample_run+0x54c>)
 8003d18:	68db      	ldr	r3, [r3, #12]
          g_connection_needed_score = 0;
 8003d1a:	f8c4 025c 	str.w	r0, [r4, #604]	; 0x25c
          snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	4817      	ldr	r0, [pc, #92]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d22:	f01f fc57 	bl	80235d4 <sniprintf>
          ret = MQTTSubscribe(&client, mqtt_subtopic, QOS0, (allpurposeMessageHandler));
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <genericmqtt_client_XCube_sample_run+0x550>)
 8003d28:	4915      	ldr	r1, [pc, #84]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d2a:	4652      	mov	r2, sl
 8003d2c:	a83e      	add	r0, sp, #248	; 0xf8
 8003d2e:	f008 ff11 	bl	800cb54 <MQTTSubscribe>
        if (ret != MQSUCCESS)
 8003d32:	b110      	cbz	r0, 8003d3a <genericmqtt_client_XCube_sample_run+0x4ea>
          b_mqtt_connected = true;
 8003d34:	f04f 0901 	mov.w	r9, #1
 8003d38:	e757      	b.n	8003bea <genericmqtt_client_XCube_sample_run+0x39a>
          msg_info("Subscribed to %s.\n", mqtt_subtopic);
 8003d3a:	4911      	ldr	r1, [pc, #68]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d3c:	4819      	ldr	r0, [pc, #100]	; (8003da4 <genericmqtt_client_XCube_sample_run+0x554>)
 8003d3e:	f01f fb5f 	bl	8023400 <iprintf>
          ret = MQTTYield(&client, 500);
 8003d42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d46:	a83e      	add	r0, sp, #248	; 0xf8
 8003d48:	f008 fe09 	bl	800c95e <MQTTYield>
        if (ret != MQSUCCESS)
 8003d4c:	b360      	cbz	r0, 8003da8 <genericmqtt_client_XCube_sample_run+0x558>
          b_mqtt_connected = true;
 8003d4e:	f04f 0901 	mov.w	r9, #1
 8003d52:	e754      	b.n	8003bfe <genericmqtt_client_XCube_sample_run+0x3ae>
 8003d54:	0802df81 	.word	0x0802df81
 8003d58:	0802df1d 	.word	0x0802df1d
 8003d5c:	0802df2a 	.word	0x0802df2a
 8003d60:	0802df37 	.word	0x0802df37
 8003d64:	0802df9f 	.word	0x0802df9f
 8003d68:	080033fd 	.word	0x080033fd
 8003d6c:	20000c84 	.word	0x20000c84
 8003d70:	08003431 	.word	0x08003431
 8003d74:	080282b8 	.word	0x080282b8
 8003d78:	0802d71d 	.word	0x0802d71d
 8003d7c:	0802f00d 	.word	0x0802f00d
 8003d80:	20000edc 	.word	0x20000edc
 8003d84:	0802f03b 	.word	0x0802f03b
 8003d88:	0802f073 	.word	0x0802f073
 8003d8c:	0802f2e6 	.word	0x0802f2e6
 8003d90:	0802f2ff 	.word	0x0802f2ff
 8003d94:	0802df67 	.word	0x0802df67
 8003d98:	0802ef6b 	.word	0x0802ef6b
 8003d9c:	0802f027 	.word	0x0802f027
 8003da0:	08003465 	.word	0x08003465
 8003da4:	0802f060 	.word	0x0802f060
          uint32_t last_telemetry_time_ms = HAL_GetTick();
 8003da8:	f004 fdde 	bl	8008968 <HAL_GetTick>
 8003dac:	4681      	mov	r9, r0
            uint8_t command = Button_WaitForMultiPush(500);
 8003dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003db2:	f000 fa0f 	bl	80041d4 <Button_WaitForMultiPush>
            if (command == BP_MULTIPLE_PUSH)                  /* If long button push, toggle the telemetry publication. */
 8003db6:	2802      	cmp	r0, #2
            uint8_t command = Button_WaitForMultiPush(500);
 8003db8:	4682      	mov	sl, r0
            if (command == BP_MULTIPLE_PUSH)                  /* If long button push, toggle the telemetry publication. */
 8003dba:	d10e      	bne.n	8003dda <genericmqtt_client_XCube_sample_run+0x58a>
              g_publishData = !g_publishData;
 8003dbc:	f894 125b 	ldrb.w	r1, [r4, #603]	; 0x25b
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dc0:	4b91      	ldr	r3, [pc, #580]	; (8004008 <genericmqtt_client_XCube_sample_run+0x7b8>)
 8003dc2:	4a92      	ldr	r2, [pc, #584]	; (800400c <genericmqtt_client_XCube_sample_run+0x7bc>)
 8003dc4:	4892      	ldr	r0, [pc, #584]	; (8004010 <genericmqtt_client_XCube_sample_run+0x7c0>)
              g_publishData = !g_publishData;
 8003dc6:	f081 0101 	eor.w	r1, r1, #1
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	bf08      	it	eq
 8003dce:	4613      	moveq	r3, r2
              g_publishData = !g_publishData;
 8003dd0:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f01f fb13 	bl	8023400 <iprintf>
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003dda:	f004 fdc5 	bl	8008968 <HAL_GetTick>
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003dde:	f894 225b 	ldrb.w	r2, [r4, #603]	; 0x25b
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003de2:	6933      	ldr	r3, [r6, #16]
 8003de4:	4601      	mov	r1, r0
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003de6:	b13a      	cbz	r2, 8003df8 <genericmqtt_client_XCube_sample_run+0x5a8>
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dec:	435a      	muls	r2, r3
 8003dee:	4648      	mov	r0, r9
 8003df0:	f7ff fd24 	bl	800383c <comp_left_ms>
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003df4:	2800      	cmp	r0, #0
 8003df6:	dd02      	ble.n	8003dfe <genericmqtt_client_XCube_sample_run+0x5ae>
                || (b_sample_data == true) )
 8003df8:	f1ba 0f01 	cmp.w	sl, #1
 8003dfc:	d160      	bne.n	8003ec0 <genericmqtt_client_XCube_sample_run+0x670>
              last_telemetry_time_ms = HAL_GetTick();
 8003dfe:	f004 fdb3 	bl	8008968 <HAL_GetTick>
 8003e02:	4681      	mov	r9, r0
              pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7ff fa15 	bl	8003234 <time>
 8003e0a:	f8df a228 	ldr.w	sl, [pc, #552]	; 8004034 <genericmqtt_client_XCube_sample_run+0x7e4>
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e10:	4a80      	ldr	r2, [pc, #512]	; (8004014 <genericmqtt_client_XCube_sample_run+0x7c4>)
 8003e12:	68db      	ldr	r3, [r3, #12]
              pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003e14:	f8ca 0010 	str.w	r0, [sl, #16]
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003e18:	2164      	movs	r1, #100	; 0x64
 8003e1a:	487f      	ldr	r0, [pc, #508]	; (8004018 <genericmqtt_client_XCube_sample_run+0x7c8>)
 8003e1c:	f01f fbda 	bl	80235d4 <sniprintf>
              ret = snprintf( mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"data\": {\n"
 8003e20:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8003e24:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003e28:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e2a:	f9ba 302c 	ldrsh.w	r3, [sl, #44]	; 0x2c
 8003e2e:	9312      	str	r3, [sp, #72]	; 0x48
 8003e30:	f9ba 302a 	ldrsh.w	r3, [sl, #42]	; 0x2a
 8003e34:	9311      	str	r3, [sp, #68]	; 0x44
 8003e36:	f9ba 3028 	ldrsh.w	r3, [sl, #40]	; 0x28
 8003e3a:	9310      	str	r3, [sp, #64]	; 0x40
 8003e3c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8003e40:	f7fc fb92 	bl	8000568 <__aeabi_f2d>
 8003e44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003e48:	f8da 0020 	ldr.w	r0, [sl, #32]
 8003e4c:	f7fc fb8c 	bl	8000568 <__aeabi_f2d>
 8003e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003e54:	f8da 001c 	ldr.w	r0, [sl, #28]
 8003e58:	f7fc fb86 	bl	8000568 <__aeabi_f2d>
 8003e5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e60:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	f9ba 3016 	ldrsh.w	r3, [sl, #22]
 8003e6a:	9308      	str	r3, [sp, #32]
 8003e6c:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
 8003e70:	9307      	str	r3, [sp, #28]
 8003e72:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8003e76:	9306      	str	r3, [sp, #24]
 8003e78:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8003e7c:	f7fc fb74 	bl	8000568 <__aeabi_f2d>
 8003e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e84:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 8003e88:	f7fc fb6e 	bl	8000568 <__aeabi_f2d>
 8003e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e90:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8003e94:	f7fc fb68 	bl	8000568 <__aeabi_f2d>
 8003e98:	4a60      	ldr	r2, [pc, #384]	; (800401c <genericmqtt_client_XCube_sample_run+0x7cc>)
 8003e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8003e9e:	4860      	ldr	r0, [pc, #384]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003ea0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003ea4:	f01f fb96 	bl	80235d4 <sniprintf>
              if ( (ret < 0) || (ret >= MQTT_MSG_BUFFER_SIZE) )
 8003ea8:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003eac:	d368      	bcc.n	8003f80 <genericmqtt_client_XCube_sample_run+0x730>
                msg_error("Telemetry message formatting error.\n");
 8003eae:	485d      	ldr	r0, [pc, #372]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003eb0:	f240 22a2 	movw	r2, #674	; 0x2a2
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f01f faa3 	bl	8023400 <iprintf>
 8003eba:	485b      	ldr	r0, [pc, #364]	; (8004028 <genericmqtt_client_XCube_sample_run+0x7d8>)
                  msg_error("Yield failed. Reconnection needed?.\n");
 8003ebc:	f01f fb3c 	bl	8023538 <puts>
            if (g_statusChanged)
 8003ec0:	f894 3258 	ldrb.w	r3, [r4, #600]	; 0x258
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d036      	beq.n	8003f36 <genericmqtt_client_XCube_sample_run+0x6e6>
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eca:	4a52      	ldr	r2, [pc, #328]	; (8004014 <genericmqtt_client_XCube_sample_run+0x7c4>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	4852      	ldr	r0, [pc, #328]	; (8004018 <genericmqtt_client_XCube_sample_run+0x7c8>)
 8003ed0:	2164      	movs	r1, #100	; 0x64
 8003ed2:	f01f fb7f 	bl	80235d4 <sniprintf>
              ret = snprintf( mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"data\": {\n"
 8003ed6:	4a55      	ldr	r2, [pc, #340]	; (800402c <genericmqtt_client_XCube_sample_run+0x7dc>)
 8003ed8:	7b71      	ldrb	r1, [r6, #13]
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <genericmqtt_client_XCube_sample_run+0x7e0>)
 8003edc:	f8d6 a010 	ldr.w	sl, [r6, #16]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	bf08      	it	eq
 8003ee4:	4613      	moveq	r3, r2
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	9316      	str	r3, [sp, #88]	; 0x58
 8003eea:	f7ff f9a3 	bl	8003234 <time>
 8003eee:	4a51      	ldr	r2, [pc, #324]	; (8004034 <genericmqtt_client_XCube_sample_run+0x7e4>)
 8003ef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ef2:	9204      	str	r2, [sp, #16]
 8003ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <genericmqtt_client_XCube_sample_run+0x7e8>)
 8003efa:	f8cd a000 	str.w	sl, [sp]
 8003efe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003f02:	4847      	ldr	r0, [pc, #284]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003f04:	f01f fb66 	bl	80235d4 <sniprintf>
                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);  /* Wrapper for MQTTPublish() */
 8003f08:	4a45      	ldr	r2, [pc, #276]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003f0a:	a83e      	add	r0, sp, #248	; 0xf8
 8003f0c:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f10:	f7ff fb66 	bl	80035e0 <stiot_publish>
                if (ret != MQSUCCESS)
 8003f14:	4682      	mov	sl, r0
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d068      	beq.n	8003fec <genericmqtt_client_XCube_sample_run+0x79c>
                  msg_error("Status publication failed.\n");
 8003f1a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4840      	ldr	r0, [pc, #256]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003f22:	f01f fa6d 	bl	8023400 <iprintf>
 8003f26:	4845      	ldr	r0, [pc, #276]	; (800403c <genericmqtt_client_XCube_sample_run+0x7ec>)
 8003f28:	f01f fb06 	bl	8023538 <puts>
                  g_connection_needed_score++;
 8003f2c:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f30:	3301      	adds	r3, #1
 8003f32:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
            ret = MQTTYield(&client, 500);
 8003f36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f3a:	a83e      	add	r0, sp, #248	; 0xf8
 8003f3c:	f008 fd0f 	bl	800c95e <MQTTYield>
            if (ret != MQSUCCESS)
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d05c      	beq.n	8003ffe <genericmqtt_client_XCube_sample_run+0x7ae>
              msg_error("Yield failed. Reconnection needed.\n");
 8003f44:	f240 22ed 	movw	r2, #749	; 0x2ed
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4836      	ldr	r0, [pc, #216]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003f4c:	f01f fa58 	bl	8023400 <iprintf>
 8003f50:	483b      	ldr	r0, [pc, #236]	; (8004040 <genericmqtt_client_XCube_sample_run+0x7f0>)
 8003f52:	f01f faf1 	bl	8023538 <puts>
              g_connection_needed_score++;
 8003f56:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
          } while ( g_continueRunning && !g_reboot && (g_connection_needed_score == 0) );
 8003f60:	f894 325a 	ldrb.w	r3, [r4, #602]	; 0x25a
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f43f ae56 	beq.w	8003c16 <genericmqtt_client_XCube_sample_run+0x3c6>
 8003f6a:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f47f ae51 	bne.w	8003c16 <genericmqtt_client_XCube_sample_run+0x3c6>
 8003f74:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f43f af18 	beq.w	8003dae <genericmqtt_client_XCube_sample_run+0x55e>
 8003f7e:	e64a      	b.n	8003c16 <genericmqtt_client_XCube_sample_run+0x3c6>
                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);  /* Wrapper for MQTTPublish() */
 8003f80:	4a27      	ldr	r2, [pc, #156]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003f82:	a83e      	add	r0, sp, #248	; 0xf8
 8003f84:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f88:	f7ff fb2a 	bl	80035e0 <stiot_publish>
                if (ret == MQSUCCESS)
 8003f8c:	b9f8      	cbnz	r0, 8003fce <genericmqtt_client_XCube_sample_run+0x77e>
                  Led_Blink(80, 40, 5);
 8003f8e:	2205      	movs	r2, #5
 8003f90:	2128      	movs	r1, #40	; 0x28
 8003f92:	2050      	movs	r0, #80	; 0x50
 8003f94:	f000 f8d8 	bl	8004148 <Led_Blink>
                  Led_SetState(status_data.LedOn);
 8003f98:	7b70      	ldrb	r0, [r6, #13]
 8003f9a:	f000 f8cf 	bl	800413c <Led_SetState>
                  msg_info("#\n");
 8003f9e:	4829      	ldr	r0, [pc, #164]	; (8004044 <genericmqtt_client_XCube_sample_run+0x7f4>)
 8003fa0:	f01f faca 	bl	8023538 <puts>
                  msg_info("publication topic: %s \tpayload: %s\n", mqtt_pubtopic, mqtt_msg);
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003fa6:	4828      	ldr	r0, [pc, #160]	; (8004048 <genericmqtt_client_XCube_sample_run+0x7f8>)
 8003fa8:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003fac:	f01f fa28 	bl	8023400 <iprintf>
                ret = MQTTYield(&client, 500);
 8003fb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003fb4:	a83e      	add	r0, sp, #248	; 0xf8
 8003fb6:	f008 fcd2 	bl	800c95e <MQTTYield>
                if (ret != MQSUCCESS)
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d080      	beq.n	8003ec0 <genericmqtt_client_XCube_sample_run+0x670>
                  msg_error("Yield failed. Reconnection needed?.\n");
 8003fbe:	4819      	ldr	r0, [pc, #100]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003fc0:	f240 22b9 	movw	r2, #697	; 0x2b9
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f01f fa1b 	bl	8023400 <iprintf>
 8003fca:	4820      	ldr	r0, [pc, #128]	; (800404c <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003fcc:	e776      	b.n	8003ebc <genericmqtt_client_XCube_sample_run+0x66c>
                  msg_error("Telemetry publication failed.\n");
 8003fce:	f240 22b2 	movw	r2, #690	; 0x2b2
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4813      	ldr	r0, [pc, #76]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003fd6:	f01f fa13 	bl	8023400 <iprintf>
 8003fda:	481d      	ldr	r0, [pc, #116]	; (8004050 <genericmqtt_client_XCube_sample_run+0x800>)
 8003fdc:	f01f faac 	bl	8023538 <puts>
                  g_connection_needed_score++;
 8003fe0:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003fea:	e7e1      	b.n	8003fb0 <genericmqtt_client_XCube_sample_run+0x760>
                  msg_info("publication topic: %s \tpayload: %s\n",mqtt_pubtopic, mqtt_msg);
 8003fec:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <genericmqtt_client_XCube_sample_run+0x7f8>)
 8003ff0:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003ff4:	f01f fa04 	bl	8023400 <iprintf>
                  g_statusChanged = false;
 8003ff8:	f884 a258 	strb.w	sl, [r4, #600]	; 0x258
 8003ffc:	e79b      	b.n	8003f36 <genericmqtt_client_XCube_sample_run+0x6e6>
              msg_info(".");
 8003ffe:	202e      	movs	r0, #46	; 0x2e
 8004000:	f01f fa16 	bl	8023430 <putchar>
 8004004:	e7ac      	b.n	8003f60 <genericmqtt_client_XCube_sample_run+0x710>
 8004006:	bf00      	nop
 8004008:	0802ee50 	.word	0x0802ee50
 800400c:	0802f58b 	.word	0x0802f58b
 8004010:	0802f081 	.word	0x0802f081
 8004014:	0802f0a9 	.word	0x0802f0a9
 8004018:	20000f40 	.word	0x20000f40
 800401c:	0802f0ba 	.word	0x0802f0ba
 8004020:	200007cc 	.word	0x200007cc
 8004024:	0802d71d 	.word	0x0802d71d
 8004028:	0802f1c3 	.word	0x0802f1c3
 800402c:	0802ee5b 	.word	0x0802ee5b
 8004030:	0802ee56 	.word	0x0802ee56
 8004034:	20000024 	.word	0x20000024
 8004038:	0802f24f 	.word	0x0802f24f
 800403c:	0802f2a8 	.word	0x0802f2a8
 8004040:	0802f2c3 	.word	0x0802f2c3
 8004044:	0802f1e7 	.word	0x0802f1e7
 8004048:	0802f1e9 	.word	0x0802f1e9
 800404c:	0802f22b 	.word	0x0802f22b
 8004050:	0802f20d 	.word	0x0802f20d

08004054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800408c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004058:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800405a:	e003      	b.n	8004064 <LoopCopyDataInit>

0800405c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800405e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004060:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004062:	3104      	adds	r1, #4

08004064 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004068:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800406a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800406c:	d3f6      	bcc.n	800405c <CopyDataInit>
	ldr	r2, =_sbss
 800406e:	4a0b      	ldr	r2, [pc, #44]	; (800409c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004070:	e002      	b.n	8004078 <LoopFillZerobss>

08004072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004072:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004074:	f842 3b04 	str.w	r3, [r2], #4

08004078 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <LoopForever+0x16>)
	cmp	r2, r3
 800407a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800407c:	d3f9      	bcc.n	8004072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800407e:	f004 fc23 	bl	80088c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004082:	f01e f847 	bl	8022114 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004086:	f000 f901 	bl	800428c <main>

0800408a <LoopForever>:

LoopForever:
    b LoopForever
 800408a:	e7fe      	b.n	800408a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800408c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004090:	08033bc0 	.word	0x08033bc0
	ldr	r0, =_sdata
 8004094:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004098:	200007b0 	.word	0x200007b0
	ldr	r2, =_sbss
 800409c:	200007b0 	.word	0x200007b0
	ldr	r3, = _ebss
 80040a0:	200019bc 	.word	0x200019bc

080040a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040a4:	e7fe      	b.n	80040a4 <ADC1_2_IRQHandler>

080040a6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040a6:	2001      	movs	r0, #1
 80040a8:	4770      	bx	lr

080040aa <_kill>:

int _kill(int pid, int sig)
{
 80040aa:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040ac:	f01d ff3a 	bl	8021f24 <__errno>
 80040b0:	2316      	movs	r3, #22
 80040b2:	6003      	str	r3, [r0, #0]
	return -1;
}
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	bd08      	pop	{r3, pc}

080040ba <_exit>:

void _exit (int status)
{
 80040ba:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040bc:	f01d ff32 	bl	8021f24 <__errno>
 80040c0:	2316      	movs	r3, #22
 80040c2:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040c4:	e7fe      	b.n	80040c4 <_exit+0xa>

080040c6 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80040c6:	b510      	push	{r4, lr}
 80040c8:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80040ca:	f000 f8ab 	bl	8004224 <__io_getchar>
 80040ce:	7020      	strb	r0, [r4, #0]

	return 1;
}
 80040d0:	2001      	movs	r0, #1
 80040d2:	bd10      	pop	{r4, pc}

080040d4 <_write>:

int _write(int file, char *ptr, int len)
{
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	460e      	mov	r6, r1
 80040d8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040da:	2500      	movs	r5, #0
 80040dc:	42a5      	cmp	r5, r4
 80040de:	db01      	blt.n	80040e4 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80040e0:	4620      	mov	r0, r4
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80040e4:	5d70      	ldrb	r0, [r6, r5]
 80040e6:	f000 f88b 	bl	8004200 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7f6      	b.n	80040dc <_write+0x8>
	...

080040f0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80040f0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <_sbrk+0x2c>)
 80040f4:	6819      	ldr	r1, [r3, #0]
{
 80040f6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80040f8:	b909      	cbnz	r1, 80040fe <_sbrk+0xe>
		heap_end = &end;
 80040fa:	4909      	ldr	r1, [pc, #36]	; (8004120 <_sbrk+0x30>)
 80040fc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80040fe:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004100:	4669      	mov	r1, sp
 8004102:	4402      	add	r2, r0
 8004104:	428a      	cmp	r2, r1
 8004106:	d906      	bls.n	8004116 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004108:	f01d ff0c 	bl	8021f24 <__errno>
 800410c:	230c      	movs	r3, #12
 800410e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004114:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004116:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004118:	e7fc      	b.n	8004114 <_sbrk+0x24>
 800411a:	bf00      	nop
 800411c:	20000fa4 	.word	0x20000fa4
 8004120:	200019c0 	.word	0x200019c0

08004124 <_close>:

int _close(int file)
{
	return -1;
}
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	4770      	bx	lr

0800412a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800412a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004130:	2000      	movs	r0, #0
 8004132:	4770      	bx	lr

08004134 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004134:	2001      	movs	r0, #1
 8004136:	4770      	bx	lr

08004138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004138:	2000      	movs	r0, #0
 800413a:	4770      	bx	lr

0800413c <Led_SetState>:
/**
  * @brief Set LED state
  */
void Led_SetState(bool on)
{
  if (on == true)
 800413c:	b110      	cbz	r0, 8004144 <Led_SetState+0x8>
  {
    BSP_LED_On(LED_GREEN);
 800413e:	2000      	movs	r0, #0
 8004140:	f000 bfde 	b.w	8005100 <BSP_LED_On>
  }
  else
  {
    BSP_LED_Off(LED_GREEN);
 8004144:	f000 bfe6 	b.w	8005114 <BSP_LED_Off>

08004148 <Led_Blink>:
/**
 * @brief Blink LED for 'count' cycles of 'period' period and 'duty' ON duration.
 * duty < 0 tells to start with an OFF state.
 */
void Led_Blink(int period, int duty, int count)
{
 8004148:	b570      	push	{r4, r5, r6, lr}
  if ( (duty > 0) && (period >= duty) )
 800414a:	1e0c      	subs	r4, r1, #0
{
 800414c:	4615      	mov	r5, r2
  if ( (duty > 0) && (period >= duty) )
 800414e:	dd11      	ble.n	8004174 <Led_Blink+0x2c>
 8004150:	4284      	cmp	r4, r0
 8004152:	dc0e      	bgt.n	8004172 <Led_Blink+0x2a>
    do
    {
      Led_SetState(true);
      HAL_Delay(duty);
      Led_SetState(false);
      HAL_Delay(period - duty);
 8004154:	1b06      	subs	r6, r0, r4
    BSP_LED_On(LED_GREEN);
 8004156:	2000      	movs	r0, #0
 8004158:	f000 ffd2 	bl	8005100 <BSP_LED_On>
      HAL_Delay(duty);
 800415c:	4620      	mov	r0, r4
 800415e:	f004 fc09 	bl	8008974 <HAL_Delay>
    BSP_LED_Off(LED_GREEN);
 8004162:	2000      	movs	r0, #0
 8004164:	f000 ffd6 	bl	8005114 <BSP_LED_Off>
      HAL_Delay(period - duty);
 8004168:	4630      	mov	r0, r6
 800416a:	f004 fc03 	bl	8008974 <HAL_Delay>
    } while (count--);
 800416e:	3d01      	subs	r5, #1
 8004170:	d2f1      	bcs.n	8004156 <Led_Blink+0xe>
      HAL_Delay(period + duty);
      Led_SetState(true);
      HAL_Delay(-duty);
    } while (count--);
  }
}
 8004172:	bd70      	pop	{r4, r5, r6, pc}
  if ( (duty < 0) && (period >= -duty) )
 8004174:	d0fd      	beq.n	8004172 <Led_Blink+0x2a>
 8004176:	4266      	negs	r6, r4
 8004178:	4286      	cmp	r6, r0
 800417a:	dcfa      	bgt.n	8004172 <Led_Blink+0x2a>
      HAL_Delay(period + duty);
 800417c:	4404      	add	r4, r0
    BSP_LED_Off(LED_GREEN);
 800417e:	2000      	movs	r0, #0
 8004180:	f000 ffc8 	bl	8005114 <BSP_LED_Off>
      HAL_Delay(period + duty);
 8004184:	4620      	mov	r0, r4
 8004186:	f004 fbf5 	bl	8008974 <HAL_Delay>
    BSP_LED_On(LED_GREEN);
 800418a:	2000      	movs	r0, #0
 800418c:	f000 ffb8 	bl	8005100 <BSP_LED_On>
      HAL_Delay(-duty);
 8004190:	4630      	mov	r0, r6
 8004192:	f004 fbef 	bl	8008974 <HAL_Delay>
    } while (count--);
 8004196:	3d01      	subs	r5, #1
 8004198:	d2f1      	bcs.n	800417e <Led_Blink+0x36>
 800419a:	e7ea      	b.n	8004172 <Led_Blink+0x2a>

0800419c <Button_WaitForPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForPush(uint32_t delay)
{
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4605      	mov	r5, r0
  uint32_t time_out = HAL_GetTick()+delay;
 80041a0:	f004 fbe2 	bl	8008968 <HAL_GetTick>
  do
  {
    if (button_flags > 1)
 80041a4:	4c0a      	ldr	r4, [pc, #40]	; (80041d0 <Button_WaitForPush+0x34>)
  uint32_t time_out = HAL_GetTick()+delay;
 80041a6:	4405      	add	r5, r0
    if (button_flags > 1)
 80041a8:	7823      	ldrb	r3, [r4, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d903      	bls.n	80041b6 <Button_WaitForPush+0x1a>
    {
      button_flags = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	7023      	strb	r3, [r4, #0]
      return BP_MULTIPLE_PUSH;
 80041b2:	2002      	movs	r0, #2
      return BP_SINGLE_PUSH;
    }
  }
  while( HAL_GetTick() < time_out);
  return BP_NOT_PUSHED;
}
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
    if (button_flags == 1)
 80041b6:	7823      	ldrb	r3, [r4, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	b2d8      	uxtb	r0, r3
 80041bc:	d102      	bne.n	80041c4 <Button_WaitForPush+0x28>
      button_flags = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	7023      	strb	r3, [r4, #0]
      return BP_SINGLE_PUSH;
 80041c2:	e7f7      	b.n	80041b4 <Button_WaitForPush+0x18>
  while( HAL_GetTick() < time_out);
 80041c4:	f004 fbd0 	bl	8008968 <HAL_GetTick>
 80041c8:	42a8      	cmp	r0, r5
 80041ca:	d3ed      	bcc.n	80041a8 <Button_WaitForPush+0xc>
  return BP_NOT_PUSHED;
 80041cc:	2000      	movs	r0, #0
 80041ce:	e7f1      	b.n	80041b4 <Button_WaitForPush+0x18>
 80041d0:	20000fac 	.word	0x20000fac

080041d4 <Button_WaitForMultiPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForMultiPush(uint32_t delay)
{
 80041d4:	b508      	push	{r3, lr}
  HAL_Delay(delay);
 80041d6:	f004 fbcd 	bl	8008974 <HAL_Delay>
  if (button_flags > 1)
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <Button_WaitForMultiPush+0x28>)
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	2a01      	cmp	r2, #1
 80041e0:	d903      	bls.n	80041ea <Button_WaitForMultiPush+0x16>
  {
    button_flags = 0;
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
    return BP_MULTIPLE_PUSH;
 80041e6:	2002      	movs	r0, #2
  {
    button_flags = 0;
    return BP_SINGLE_PUSH;
  }
  return BP_NOT_PUSHED;
}
 80041e8:	bd08      	pop	{r3, pc}
  if (button_flags == 1)
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	2a01      	cmp	r2, #1
 80041ee:	b2d0      	uxtb	r0, r2
 80041f0:	f04f 0200 	mov.w	r2, #0
    button_flags = 0;
 80041f4:	bf0c      	ite	eq
 80041f6:	701a      	strbeq	r2, [r3, #0]
  return BP_NOT_PUSHED;
 80041f8:	4610      	movne	r0, r2
 80041fa:	e7f5      	b.n	80041e8 <Button_WaitForMultiPush+0x14>
 80041fc:	20000fac 	.word	0x20000fac

08004200 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004200:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t *) &ch, 1, 30000))
 8004202:	4c07      	ldr	r4, [pc, #28]	; (8004220 <__io_putchar+0x20>)
{
 8004204:	9001      	str	r0, [sp, #4]
  while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t *) &ch, 1, 30000))
 8004206:	f247 5330 	movw	r3, #30000	; 0x7530
 800420a:	2201      	movs	r2, #1
 800420c:	a901      	add	r1, sp, #4
 800420e:	4620      	mov	r0, r4
 8004210:	f008 f89d 	bl	800c34e <HAL_UART_Transmit>
 8004214:	2800      	cmp	r0, #0
 8004216:	d1f6      	bne.n	8004206 <__io_putchar+0x6>
  {
    ;
  }
  return ch;
}
 8004218:	9801      	ldr	r0, [sp, #4]
 800421a:	b002      	add	sp, #8
 800421c:	bd10      	pop	{r4, pc}
 800421e:	bf00      	nop
 8004220:	20000fb0 	.word	0x20000fb0

08004224 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8004224:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8004226:	2300      	movs	r3, #0
  while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t *)&ch, 1, 30000))
 8004228:	4c08      	ldr	r4, [pc, #32]	; (800424c <__io_getchar+0x28>)
  uint8_t ch = 0;
 800422a:	f88d 3007 	strb.w	r3, [sp, #7]
  while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t *)&ch, 1, 30000))
 800422e:	f247 5330 	movw	r3, #30000	; 0x7530
 8004232:	2201      	movs	r2, #1
 8004234:	f10d 0107 	add.w	r1, sp, #7
 8004238:	4620      	mov	r0, r4
 800423a:	f008 f8de 	bl	800c3fa <HAL_UART_Receive>
 800423e:	2800      	cmp	r0, #0
 8004240:	d1f5      	bne.n	800422e <__io_getchar+0xa>
  {
    ;
  }
  return ch;
}
 8004242:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004246:	b002      	add	sp, #8
 8004248:	bd10      	pop	{r4, pc}
 800424a:	bf00      	nop
 800424c:	20000fb0 	.word	0x20000fb0

08004250 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8004250:	2802      	cmp	r0, #2
 8004252:	d008      	beq.n	8004266 <HAL_GPIO_EXTI_Callback+0x16>
 8004254:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004258:	d107      	bne.n	800426a <HAL_GPIO_EXTI_Callback+0x1a>
  button_flags++;
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <HAL_GPIO_EXTI_Callback+0x1c>)
 800425c:	7813      	ldrb	r3, [r2, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	7013      	strb	r3, [r2, #0]
}
 8004264:	4770      	bx	lr
      break;
    }

	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 8004266:	f000 bdaf 	b.w	8004dc8 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 800426a:	4770      	bx	lr
 800426c:	20000fac 	.word	0x20000fac

08004270 <SPI3_IRQHandler>:


void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <SPI3_IRQHandler+0x8>)
 8004272:	f007 bc73 	b.w	800bb5c <HAL_SPI_IRQHandler>
 8004276:	bf00      	nop
 8004278:	200011b8 	.word	0x200011b8

0800427c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800427c:	b508      	push	{r3, lr}
  while(1)
  {
    BSP_LED_Toggle(LED_GREEN);
 800427e:	2000      	movs	r0, #0
 8004280:	f000 ff52 	bl	8005128 <BSP_LED_Toggle>
    HAL_Delay(200);
 8004284:	20c8      	movs	r0, #200	; 0xc8
 8004286:	f004 fb75 	bl	8008974 <HAL_Delay>
  while(1)
 800428a:	e7f8      	b.n	800427e <Error_Handler+0x2>

0800428c <main>:
{
 800428c:	b530      	push	{r4, r5, lr}
 800428e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8004290:	f004 fb56 	bl	8008940 <HAL_Init>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004294:	2214      	movs	r2, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8004296:	23b0      	movs	r3, #176	; 0xb0
 8004298:	f04f 0e00 	mov.w	lr, #0
  RCC_OscInitStruct.PLL.PLLM = 6;
 800429c:	2106      	movs	r1, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800429e:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80042a0:	e9cd e30c 	strd	lr, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 20;
 80042a4:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042a8:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80042aa:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ac:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80042ae:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80042b0:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042b4:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042b8:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80042ba:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042bc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042be:	f005 fcad 	bl	8009c1c <HAL_RCC_OscConfig>
 80042c2:	b108      	cbz	r0, 80042c8 <main+0x3c>
    Error_Handler();
 80042c4:	f7ff ffda 	bl	800427c <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042c8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042cc:	f04f 0c0f 	mov.w	ip, #15
 80042d0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042d2:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80042d4:	2104      	movs	r1, #4
 80042d6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042d8:	e9cd c300 	strd	ip, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80042dc:	f005 fed0 	bl	800a080 <HAL_RCC_ClockConfig>
 80042e0:	4604      	mov	r4, r0
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d1ee      	bne.n	80042c4 <main+0x38>
  HAL_RCCEx_EnableMSIPLLMode();
 80042e6:	f006 fa93 	bl	800a810 <HAL_RCCEx_EnableMSIPLLMode>
  Periph_Config();
 80042ea:	f000 f891 	bl	8004410 <Periph_Config>
  MX_TIM6_Init();
 80042ee:	f000 f901 	bl	80044f4 <MX_TIM6_Init>
  */
static void MX_NVIC_Init(void)
{

  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80042f2:	4622      	mov	r2, r4
 80042f4:	4621      	mov	r1, r4
 80042f6:	2036      	movs	r0, #54	; 0x36
 80042f8:	f004 fb5c 	bl	80089b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042fc:	2036      	movs	r0, #54	; 0x36
 80042fe:	f004 fb8b 	bl	8008a18 <HAL_NVIC_EnableIRQ>
  BSP_LED_Init(LED_GREEN);
 8004302:	4620      	mov	r0, r4
 8004304:	f000 feda 	bl	80050bc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004308:	4629      	mov	r1, r5
 800430a:	4620      	mov	r0, r4
 800430c:	f000 ff16 	bl	800513c <BSP_PB_Init>
  hrng.Instance = RNG;
 8004310:	481f      	ldr	r0, [pc, #124]	; (8004390 <main+0x104>)
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <main+0x108>)
 8004314:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004316:	f006 fa83 	bl	800a820 <HAL_RNG_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	2800      	cmp	r0, #0
 800431e:	d1d1      	bne.n	80042c4 <main+0x38>
  hrtc.Instance = RTC;
 8004320:	481d      	ldr	r0, [pc, #116]	; (8004398 <main+0x10c>)
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <main+0x110>)
  hrtc.Init.SynchPrediv = 255;
 8004324:	257f      	movs	r5, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004326:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800432a:	22ff      	movs	r2, #255	; 0xff
 800432c:	e9c0 5202 	strd	r5, r2, [r0, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004330:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004334:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004338:	f006 fae5 	bl	800a906 <HAL_RTC_Init>
 800433c:	2800      	cmp	r0, #0
 800433e:	d1c1      	bne.n	80042c4 <main+0x38>
  console_uart.Instance = USART1;
 8004340:	4917      	ldr	r1, [pc, #92]	; (80043a0 <main+0x114>)
  console_uart.Init.BaudRate = 115200;
 8004342:	4c18      	ldr	r4, [pc, #96]	; (80043a4 <main+0x118>)
  console_uart.Init.Parity = UART_PARITY_NONE;
 8004344:	6148      	str	r0, [r1, #20]
  console_uart.Init.BaudRate = 115200;
 8004346:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800434a:	e9c1 4201 	strd	r4, r2, [r1, #4]
  console_uart.Init.Mode = UART_MODE_TX_RX;
 800434e:	220c      	movs	r2, #12
  console_uart.Init.StopBits = UART_STOPBITS_1;
 8004350:	e9c1 0003 	strd	r0, r0, [r1, #12]
  console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004354:	e9c1 2006 	strd	r2, r0, [r1, #24]
  console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004358:	e9c1 0008 	strd	r0, r0, [r1, #32]
  console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800435c:	6288      	str	r0, [r1, #40]	; 0x28
  BSP_COM_Init(COM1,&console_uart);
 800435e:	3104      	adds	r1, #4
 8004360:	f000 ff2a 	bl	80051b8 <BSP_COM_Init>
  int res = init_sensors();
 8004364:	f7fe fcf8 	bl	8002d58 <init_sensors>
   if(0 != res)
 8004368:	4604      	mov	r4, r0
 800436a:	b140      	cbz	r0, 800437e <main+0xf2>
     msg_error("init_sensors returned error : %d\n", res);
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <main+0x11c>)
 800436e:	480f      	ldr	r0, [pc, #60]	; (80043ac <main+0x120>)
 8004370:	2278      	movs	r2, #120	; 0x78
 8004372:	f01f f845 	bl	8023400 <iprintf>
 8004376:	480e      	ldr	r0, [pc, #56]	; (80043b0 <main+0x124>)
 8004378:	4621      	mov	r1, r4
 800437a:	f01f f841 	bl	8023400 <iprintf>
  HAL_TIM_Base_Start_IT(&htim6);
 800437e:	480d      	ldr	r0, [pc, #52]	; (80043b4 <main+0x128>)
 8004380:	f007 fc6b 	bl	800bc5a <HAL_TIM_Base_Start_IT>
  genericmqtt_client_XCube_sample_run();
 8004384:	f7ff fa64 	bl	8003850 <genericmqtt_client_XCube_sample_run>
}
 8004388:	2000      	movs	r0, #0
 800438a:	b017      	add	sp, #92	; 0x5c
 800438c:	bd30      	pop	{r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	20001168 	.word	0x20001168
 8004394:	50060800 	.word	0x50060800
 8004398:	20001104 	.word	0x20001104
 800439c:	40002800 	.word	0x40002800
 80043a0:	20000fac 	.word	0x20000fac
 80043a4:	40013800 	.word	0x40013800
 80043a8:	08028310 	.word	0x08028310
 80043ac:	0802d71d 	.word	0x0802d71d
 80043b0:	0802f337 	.word	0x0802f337
 80043b4:	20001128 	.word	0x20001128

080043b8 <HAL_TIM_PeriodElapsedCallback>:
{
 80043b8:	b510      	push	{r4, lr}
	pub_data.temperature = BSP_TSENSOR_ReadTemp();
 80043ba:	f001 f805 	bl	80053c8 <BSP_TSENSOR_ReadTemp>
 80043be:	4c12      	ldr	r4, [pc, #72]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80043c0:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  pub_data.humidity = BSP_HSENSOR_ReadHumidity();
 80043c4:	f000 ffa2 	bl	800530c <BSP_HSENSOR_ReadHumidity>
 80043c8:	ee07 0a90 	vmov	s15, r0
 80043cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
  pub_data.pressure = BSP_PSENSOR_ReadPressure();
 80043d4:	f000 ffde 	bl	8005394 <BSP_PSENSOR_ReadPressure>
 80043d8:	ee07 0a90 	vmov	s15, r0
 80043dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 80043e0:	f104 0014 	add.w	r0, r4, #20
  pub_data.pressure = BSP_PSENSOR_ReadPressure();
 80043e4:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 80043e8:	f000 ff78 	bl	80052dc <BSP_ACCELERO_AccGetXYZ>
  BSP_GYRO_GetXYZ(pub_data.GYR_Value);
 80043ec:	f104 001c 	add.w	r0, r4, #28
 80043f0:	f000 ff76 	bl	80052e0 <BSP_GYRO_GetXYZ>
  BSP_MAGNETO_GetXYZ(pub_data.MAG_Value);
 80043f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043f8:	f000 ffae 	bl	8005358 <BSP_MAGNETO_GetXYZ>
  i++;
 80043fc:	4a03      	ldr	r2, [pc, #12]	; (800440c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80043fe:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8004400:	3301      	adds	r3, #1
 8004402:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8004404:	bd10      	pop	{r4, pc}
 8004406:	bf00      	nop
 8004408:	20000024 	.word	0x20000024
 800440c:	20000fac 	.word	0x20000fac

08004410 <Periph_Config>:
/**
  * Initializes the Global MSP.
  */

 void Periph_Config(void)
 {
 8004410:	b500      	push	{lr}
 8004412:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection  = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <Periph_Config+0x50>)
 8004416:	9302      	str	r3, [sp, #8]
                                       |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                                       |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection  = RCC_USART1CLKSOURCE_PCLK2;
 8004418:	2300      	movs	r3, #0
 800441a:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection  = RCC_USART3CLKSOURCE_PCLK1;
 800441c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection    = RCC_I2C2CLKSOURCE_PCLK1;
 800441e:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.RngClockSelection     = RCC_RNGCLKSOURCE_MSI;
 8004420:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004424:	931f      	str	r3, [sp, #124]	; 0x7c

  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004426:	a802      	add	r0, sp, #8
  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;
 8004428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800442c:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800442e:	f006 f805 	bl	800a43c <HAL_RCCEx_PeriphCLKConfig>
 8004432:	b108      	cbz	r0, 8004438 <Periph_Config+0x28>
  {
    Error_Handler();
 8004434:	f7ff ff22 	bl	800427c <Error_Handler>
  }

   __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <Periph_Config+0x54>)
 800443a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800443c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004440:	659a      	str	r2, [r3, #88]	; 0x58
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	9301      	str	r3, [sp, #4]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800444a:	f44f 7000 	mov.w	r0, #512	; 0x200
   __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	9b01      	ldr	r3, [sp, #4]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004450:	f005 fb06 	bl	8009a60 <HAL_PWREx_ControlVoltageScaling>
 8004454:	b108      	cbz	r0, 800445a <Periph_Config+0x4a>
  {
    Error_Handler();
 8004456:	f7ff ff11 	bl	800427c <Error_Handler>
  }
}
 800445a:	b025      	add	sp, #148	; 0x94
 800445c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004460:	00060085 	.word	0x00060085
 8004464:	40021000 	.word	0x40021000

08004468 <HAL_RNG_MspInit>:


void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004468:	6802      	ldr	r2, [r0, #0]
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RNG_MspInit+0x28>)
 800446c:	429a      	cmp	r2, r3
{
 800446e:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004470:	d10c      	bne.n	800448c <HAL_RNG_MspInit+0x24>
  {
      /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004472:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004476:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 800447a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800447c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004480:	64da      	str	r2, [r3, #76]	; 0x4c
 8004482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	9b01      	ldr	r3, [sp, #4]
  }
}
 800448c:	b002      	add	sp, #8
 800448e:	4770      	bx	lr
 8004490:	50060800 	.word	0x50060800

08004494 <HAL_RTC_MspInit>:
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004494:	6802      	ldr	r2, [r0, #0]
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RTC_MspInit+0x18>)
 8004498:	429a      	cmp	r2, r3
  {
    __HAL_RCC_RTC_ENABLE();
 800449a:	bf01      	itttt	eq
 800449c:	4a04      	ldreq	r2, [pc, #16]	; (80044b0 <HAL_RTC_MspInit+0x1c>)
 800449e:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 80044a2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80044a6:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
  }
}
 80044aa:	4770      	bx	lr
 80044ac:	40002800 	.word	0x40002800
 80044b0:	40021000 	.word	0x40021000

080044b4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80044b4:	4770      	bx	lr

080044b6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80044b6:	e7fe      	b.n	80044b6 <HardFault_Handler>

080044b8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <MemManage_Handler>

080044ba <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80044ba:	e7fe      	b.n	80044ba <BusFault_Handler>

080044bc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80044bc:	e7fe      	b.n	80044bc <UsageFault_Handler>

080044be <SVC_Handler>:
 80044be:	4770      	bx	lr

080044c0 <DebugMon_Handler>:
 80044c0:	4770      	bx	lr

080044c2 <PendSV_Handler>:
 80044c2:	4770      	bx	lr

080044c4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80044c4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80044c6:	f004 fa47 	bl	8008958 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 80044ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80044ce:	f004 bad8 	b.w	8008a82 <HAL_SYSTICK_IRQHandler>
	...

080044d4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <TIM2_IRQHandler+0x8>)
 80044d6:	f007 bbcf 	b.w	800bc78 <HAL_TIM_IRQHandler>
 80044da:	bf00      	nop
 80044dc:	20001128 	.word	0x20001128

080044e0 <TIM6_DAC_IRQHandler>:
 80044e0:	f7ff bff8 	b.w	80044d4 <TIM2_IRQHandler>

080044e4 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80044e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044e8:	f004 bdde 	b.w	80090a8 <HAL_GPIO_EXTI_IRQHandler>

080044ec <EXTI1_IRQHandler>:
}


void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);		
 80044ec:	2002      	movs	r0, #2
 80044ee:	f004 bddb 	b.w	80090a8 <HAL_GPIO_EXTI_IRQHandler>
	...

080044f4 <MX_TIM6_Init>:

extern TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80044f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN TIM6_Init 1 */
  #define BASE_1s	10000
  #define BASE_1ms	10

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044f6:	480f      	ldr	r0, [pc, #60]	; (8004534 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = BASE_1s;
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <MX_TIM6_Init+0x44>)
 80044fa:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044fe:	2400      	movs	r4, #0
  htim6.Init.Prescaler = BASE_1s;
 8004500:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 8000;
 8004504:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004508:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800450c:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800450e:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 8000;
 8004510:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004512:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004514:	f007 fcb8 	bl	800be88 <HAL_TIM_Base_Init>
 8004518:	b108      	cbz	r0, 800451e <MX_TIM6_Init+0x2a>
  {
    Error_Handler();
 800451a:	f7ff feaf 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800451e:	4805      	ldr	r0, [pc, #20]	; (8004534 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004520:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004522:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004524:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004526:	f007 fcc9 	bl	800bebc <HAL_TIMEx_MasterConfigSynchronization>
 800452a:	b108      	cbz	r0, 8004530 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800452c:	f7ff fea6 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004530:	b004      	add	sp, #16
 8004532:	bd10      	pop	{r4, pc}
 8004534:	20001128 	.word	0x20001128
 8004538:	40001000 	.word	0x40001000

0800453c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800453c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_TIM_Base_MspInit+0x3c>)
 8004540:	6802      	ldr	r2, [r0, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d115      	bne.n	8004572 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004546:	f503 3300 	add.w	r3, r3, #131072	; 0x20000

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800454a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800454c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800454e:	f042 0210 	orr.w	r2, r2, #16
 8004552:	659a      	str	r2, [r3, #88]	; 0x58
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004556:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800455e:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004560:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004562:	f004 fa27 	bl	80089b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004566:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004568:	b003      	add	sp, #12
 800456a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800456e:	f004 ba53 	b.w	8008a18 <HAL_NVIC_EnableIRQ>
}
 8004572:	b003      	add	sp, #12
 8004574:	f85d fb04 	ldr.w	pc, [sp], #4
 8004578:	40001000 	.word	0x40001000

0800457c <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800457c:	b507      	push	{r0, r1, r2, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800457e:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	b293      	uxth	r3, r2
 8004586:	460a      	mov	r2, r1
 8004588:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 800458c:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8004590:	f004 ff8e 	bl	80094b0 <HAL_I2C_Master_Transmit>
    
    return status;
}
 8004594:	b003      	add	sp, #12
 8004596:	f85d fb04 	ldr.w	pc, [sp], #4

0800459a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800459a:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800459c:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80045a0:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80045aa:	b293      	uxth	r3, r2
 80045ac:	460a      	mov	r2, r1
 80045ae:	f044 0101 	orr.w	r1, r4, #1
 80045b2:	f005 f817 	bl	80095e4 <HAL_I2C_Master_Receive>
    
    return status;
}
 80045b6:	b002      	add	sp, #8
 80045b8:	bd10      	pop	{r4, pc}

080045ba <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 80045ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045bc:	4615      	mov	r5, r2
 80045be:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80045c2:	2201      	movs	r2, #1
 80045c4:	f10d 0107 	add.w	r1, sp, #7
{
 80045c8:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 80045ca:	f7ff ffd7 	bl	800457c <_I2CWrite>
    
    if (status_int)
 80045ce:	b928      	cbnz	r0, 80045dc <VL53L0X_RdByte+0x22>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 80045d0:	2201      	movs	r2, #1
 80045d2:	4629      	mov	r1, r5
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7ff ffe0 	bl	800459a <_I2CRead>
    
    if (status_int != 0)
 80045da:	b108      	cbz	r0, 80045e0 <VL53L0X_RdByte+0x26>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80045dc:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 80045e0:	b003      	add	sp, #12
 80045e2:	bd30      	pop	{r4, r5, pc}

080045e4 <VL53L0X_WriteMulti>:
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80045e4:	2b3f      	cmp	r3, #63	; 0x3f
{
 80045e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e8:	460e      	mov	r6, r1
 80045ea:	4605      	mov	r5, r0
 80045ec:	4611      	mov	r1, r2
 80045ee:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 80045f0:	d811      	bhi.n	8004616 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 80045f2:	4f0a      	ldr	r7, [pc, #40]	; (800461c <VL53L0X_WriteMulti+0x38>)
 80045f4:	4638      	mov	r0, r7
    memcpy(&_I2CBuffer[1], pdata, count);
 80045f6:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 80045f8:	f800 6b01 	strb.w	r6, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 80045fc:	f01d fdd4 	bl	80221a8 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8004600:	1c62      	adds	r2, r4, #1
 8004602:	4639      	mov	r1, r7
 8004604:	4628      	mov	r0, r5
 8004606:	f7ff ffb9 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800460a:	2800      	cmp	r0, #0
 800460c:	bf0c      	ite	eq
 800460e:	2000      	moveq	r0, #0
 8004610:	f06f 0013 	mvnne.w	r0, #19
    }
    
    return Status;
}
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 8004616:	f06f 0003 	mvn.w	r0, #3
 800461a:	e7fb      	b.n	8004614 <VL53L0X_WriteMulti+0x30>
 800461c:	20001178 	.word	0x20001178

08004620 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 8004620:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004622:	4615      	mov	r5, r2
 8004624:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8004628:	2201      	movs	r2, #1
 800462a:	f10d 0107 	add.w	r1, sp, #7
{
 800462e:	4604      	mov	r4, r0
 8004630:	461e      	mov	r6, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8004632:	f7ff ffa3 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 8004636:	b928      	cbnz	r0, 8004644 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8004638:	4632      	mov	r2, r6
 800463a:	4629      	mov	r1, r5
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff ffac 	bl	800459a <_I2CRead>
    
    if (status_int != 0) {
 8004642:	b108      	cbz	r0, 8004648 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004644:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8004648:	b002      	add	sp, #8
 800464a:	bd70      	pop	{r4, r5, r6, pc}

0800464c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800464c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800464e:	4614      	mov	r4, r2
 8004650:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004654:	2201      	movs	r2, #1
 8004656:	f10d 0107 	add.w	r1, sp, #7
{
 800465a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800465c:	f7ff ff8e 	bl	800457c <_I2CWrite>

    if (status_int)
 8004660:	b118      	cbz	r0, 800466a <VL53L0X_RdWord+0x1e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004662:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 8004666:	b002      	add	sp, #8
 8004668:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800466a:	4d07      	ldr	r5, [pc, #28]	; (8004688 <VL53L0X_RdWord+0x3c>)
 800466c:	2202      	movs	r2, #2
 800466e:	4629      	mov	r1, r5
 8004670:	4630      	mov	r0, r6
 8004672:	f7ff ff92 	bl	800459a <_I2CRead>
    if (status_int != 0)
 8004676:	2800      	cmp	r0, #0
 8004678:	d1f3      	bne.n	8004662 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800467a:	782a      	ldrb	r2, [r5, #0]
 800467c:	786b      	ldrb	r3, [r5, #1]
 800467e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004682:	8023      	strh	r3, [r4, #0]
 8004684:	e7ef      	b.n	8004666 <VL53L0X_RdWord+0x1a>
 8004686:	bf00      	nop
 8004688:	20001178 	.word	0x20001178

0800468c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800468c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800468e:	4614      	mov	r4, r2
 8004690:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004694:	2201      	movs	r2, #1
 8004696:	f10d 0107 	add.w	r1, sp, #7
{
 800469a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800469c:	f7ff ff6e 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 80046a0:	b118      	cbz	r0, 80046aa <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80046a2:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 80046a6:	b002      	add	sp, #8
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80046aa:	4d0a      	ldr	r5, [pc, #40]	; (80046d4 <VL53L0X_RdDWord+0x48>)
 80046ac:	2204      	movs	r2, #4
 80046ae:	4629      	mov	r1, r5
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff ff72 	bl	800459a <_I2CRead>
    if (status_int != 0) {
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1f3      	bne.n	80046a2 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80046ba:	786b      	ldrb	r3, [r5, #1]
 80046bc:	782a      	ldrb	r2, [r5, #0]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80046c4:	78ea      	ldrb	r2, [r5, #3]
 80046c6:	4413      	add	r3, r2
 80046c8:	78aa      	ldrb	r2, [r5, #2]
 80046ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	e7e9      	b.n	80046a6 <VL53L0X_RdDWord+0x1a>
 80046d2:	bf00      	nop
 80046d4:	20001178 	.word	0x20001178

080046d8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 80046d8:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <VL53L0X_WrByte+0x1c>)
 80046dc:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 80046de:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80046e0:	4619      	mov	r1, r3
 80046e2:	2202      	movs	r2, #2
 80046e4:	f7ff ff4a 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 80046e8:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 80046ea:	bf14      	ite	ne
 80046ec:	f06f 0013 	mvnne.w	r0, #19
 80046f0:	2000      	moveq	r0, #0
 80046f2:	bd08      	pop	{r3, pc}
 80046f4:	20001178 	.word	0x20001178

080046f8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 80046f8:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <VL53L0X_WrWord+0x20>)
 80046fc:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 80046fe:	0a11      	lsrs	r1, r2, #8
 8004700:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004702:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004704:	4619      	mov	r1, r3
 8004706:	2203      	movs	r2, #3
 8004708:	f7ff ff38 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 800470c:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 800470e:	bf14      	ite	ne
 8004710:	f06f 0013 	mvnne.w	r0, #19
 8004714:	2000      	moveq	r0, #0
 8004716:	bd08      	pop	{r3, pc}
 8004718:	20001178 	.word	0x20001178

0800471c <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800471c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800471e:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004720:	f10d 0207 	add.w	r2, sp, #7
{
 8004724:	4606      	mov	r6, r0
 8004726:	460f      	mov	r7, r1
 8004728:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 800472a:	f7ff ff46 	bl	80045ba <VL53L0X_RdByte>
    
    if (Status) {
 800472e:	b948      	cbnz	r0, 8004744 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8004730:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004734:	402a      	ands	r2, r5
 8004736:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8004738:	4639      	mov	r1, r7
 800473a:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 800473c:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004740:	f7ff ffca 	bl	80046d8 <VL53L0X_WrByte>
done:
    return Status;
}
 8004744:	b003      	add	sp, #12
 8004746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004748 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 8004748:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    /* do nothing */
    VL53L0X_OsDelay();
 800474a:	2002      	movs	r0, #2
 800474c:	f004 f912 	bl	8008974 <HAL_Delay>
    return status;
}
 8004750:	2000      	movs	r0, #0
 8004752:	bd08      	pop	{r3, pc}

08004754 <SetupSingleShot.part.0>:
}

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
 8004754:	b513      	push	{r0, r1, r4, lr}
 8004756:	4604      	mov	r4, r0
  uint8_t preRangeVcselPeriod = 14;
  uint8_t finalRangeVcselPeriod = 10;
                          
  if (pDev->Present)
  {
    status = VL53L0X_StaticInit(pDev);
 8004758:	f001 fcc2 	bl	80060e0 <VL53L0X_StaticInit>
    if (status)
 800475c:	b110      	cbz	r0, 8004764 <SetupSingleShot.part.0+0x10>
    {
      printf("VL53L0X_StaticInit failed\n");
 800475e:	4833      	ldr	r0, [pc, #204]	; (800482c <SetupSingleShot.part.0+0xd8>)
 8004760:	f01e feea 	bl	8023538 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8004764:	f10d 0202 	add.w	r2, sp, #2
 8004768:	f10d 0101 	add.w	r1, sp, #1
 800476c:	4620      	mov	r0, r4
 800476e:	f001 fa99 	bl	8005ca4 <VL53L0X_PerformRefCalibration>
    if (status)
 8004772:	b110      	cbz	r0, 800477a <SetupSingleShot.part.0+0x26>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 8004774:	482e      	ldr	r0, [pc, #184]	; (8004830 <SetupSingleShot.part.0+0xdc>)
 8004776:	f01e fedf 	bl	8023538 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800477a:	f10d 0203 	add.w	r2, sp, #3
 800477e:	a901      	add	r1, sp, #4
 8004780:	4620      	mov	r0, r4
 8004782:	f001 fdb2 	bl	80062ea <VL53L0X_PerformRefSpadManagement>
    if (status)
 8004786:	b110      	cbz	r0, 800478e <SetupSingleShot.part.0+0x3a>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8004788:	482a      	ldr	r0, [pc, #168]	; (8004834 <SetupSingleShot.part.0+0xe0>)
 800478a:	f01e fed5 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800478e:	2100      	movs	r1, #0
 8004790:	4620      	mov	r0, r4
 8004792:	f001 f833 	bl	80057fc <VL53L0X_SetDeviceMode>
    if (status)
 8004796:	b110      	cbz	r0, 800479e <SetupSingleShot.part.0+0x4a>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 8004798:	4827      	ldr	r0, [pc, #156]	; (8004838 <SetupSingleShot.part.0+0xe4>)
 800479a:	f01e fecd 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800479e:	2201      	movs	r2, #1
 80047a0:	2100      	movs	r1, #0
 80047a2:	4620      	mov	r0, r4
 80047a4:	f001 f908 	bl	80059b8 <VL53L0X_SetLimitCheckEnable>
    if (status)
 80047a8:	b110      	cbz	r0, 80047b0 <SetupSingleShot.part.0+0x5c>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80047aa:	4824      	ldr	r0, [pc, #144]	; (800483c <SetupSingleShot.part.0+0xe8>)
 80047ac:	f01e fec4 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 80047b0:	2201      	movs	r2, #1
 80047b2:	4611      	mov	r1, r2
 80047b4:	4620      	mov	r0, r4
 80047b6:	f001 f8ff 	bl	80059b8 <VL53L0X_SetLimitCheckEnable>
    if (status)
 80047ba:	b110      	cbz	r0, 80047c2 <SetupSingleShot.part.0+0x6e>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80047bc:	481f      	ldr	r0, [pc, #124]	; (800483c <SetupSingleShot.part.0+0xe8>)
 80047be:	f01e febb 	bl	8023538 <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80047c2:	f641 1299 	movw	r2, #6553	; 0x1999
 80047c6:	2101      	movs	r1, #1
 80047c8:	4620      	mov	r0, r4
 80047ca:	f001 f940 	bl	8005a4e <VL53L0X_SetLimitCheckValue>
    
    if (status)
 80047ce:	b110      	cbz	r0, 80047d6 <SetupSingleShot.part.0+0x82>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80047d0:	481b      	ldr	r0, [pc, #108]	; (8004840 <SetupSingleShot.part.0+0xec>)
 80047d2:	f01e feb1 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80047d6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047da:	2100      	movs	r1, #0
 80047dc:	4620      	mov	r0, r4
 80047de:	f001 f936 	bl	8005a4e <VL53L0X_SetLimitCheckValue>
    if (status)
 80047e2:	b110      	cbz	r0, 80047ea <SetupSingleShot.part.0+0x96>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80047e4:	4816      	ldr	r0, [pc, #88]	; (8004840 <SetupSingleShot.part.0+0xec>)
 80047e6:	f01e fea7 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 80047ea:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80047ee:	4620      	mov	r0, r4
 80047f0:	f001 f820 	bl	8005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if (status)
 80047f4:	b110      	cbz	r0, 80047fc <SetupSingleShot.part.0+0xa8>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80047f6:	4813      	ldr	r0, [pc, #76]	; (8004844 <SetupSingleShot.part.0+0xf0>)
 80047f8:	f01e fe9e 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80047fc:	2212      	movs	r2, #18
 80047fe:	2100      	movs	r1, #0
 8004800:	4620      	mov	r0, r4
 8004802:	f001 f819 	bl	8005838 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 8004806:	b110      	cbz	r0, 800480e <SetupSingleShot.part.0+0xba>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8004808:	480f      	ldr	r0, [pc, #60]	; (8004848 <SetupSingleShot.part.0+0xf4>)
 800480a:	f01e fe95 	bl	8023538 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800480e:	220e      	movs	r2, #14
 8004810:	2101      	movs	r1, #1
 8004812:	4620      	mov	r0, r4
 8004814:	f001 f810 	bl	8005838 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 8004818:	b110      	cbz	r0, 8004820 <SetupSingleShot.part.0+0xcc>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800481a:	480b      	ldr	r0, [pc, #44]	; (8004848 <SetupSingleShot.part.0+0xf4>)
 800481c:	f01e fe8c 	bl	8023538 <puts>
    }
    
    pDev->LeakyFirst = 1;
 8004820:	2301      	movs	r3, #1
 8004822:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  }
}
 8004826:	b002      	add	sp, #8
 8004828:	bd10      	pop	{r4, pc}
 800482a:	bf00      	nop
 800482c:	0802f359 	.word	0x0802f359
 8004830:	0802f373 	.word	0x0802f373
 8004834:	0802f398 	.word	0x0802f398
 8004838:	0802f3c0 	.word	0x0802f3c0
 800483c:	0802f3dd 	.word	0x0802f3dd
 8004840:	0802f400 	.word	0x0802f400
 8004844:	0802f422 	.word	0x0802f422
 8004848:	0802f458 	.word	0x0802f458

0800484c <VL53L0X_PROXIMITY_MspInit>:
{
 800484c:	b530      	push	{r4, r5, lr}
 800484e:	b087      	sub	sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004850:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004852:	2401      	movs	r4, #1
 8004854:	2540      	movs	r5, #64	; 0x40
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004856:	a901      	add	r1, sp, #4
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <VL53L0X_PROXIMITY_MspInit+0x30>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800485a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485c:	e9cd 5401 	strd	r5, r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004860:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004862:	f004 fb33 	bl	8008ecc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4804      	ldr	r0, [pc, #16]	; (800487c <VL53L0X_PROXIMITY_MspInit+0x30>)
 800486c:	f004 fc12 	bl	8009094 <HAL_GPIO_WritePin>
  HAL_Delay(1000);  
 8004870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004874:	f004 f87e 	bl	8008974 <HAL_Delay>
}
 8004878:	b007      	add	sp, #28
 800487a:	bd30      	pop	{r4, r5, pc}
 800487c:	48000800 	.word	0x48000800

08004880 <VL53L0X_PROXIMITY_Init>:
{
 8004880:	b510      	push	{r4, lr}
 8004882:	b09a      	sub	sp, #104	; 0x68
  uint16_t vl53l0x_id = 0; 
 8004884:	2400      	movs	r4, #0
 8004886:	f8ad 4002 	strh.w	r4, [sp, #2]
  SENSOR_IO_Init();
 800488a:	f000 fcd9 	bl	8005240 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 800488e:	f7ff ffdd 	bl	800484c <VL53L0X_PROXIMITY_MspInit>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004892:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8004894:	4c14      	ldr	r4, [pc, #80]	; (80048e8 <VL53L0X_PROXIMITY_Init+0x68>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004896:	2263      	movs	r2, #99	; 0x63
 8004898:	a801      	add	r0, sp, #4
 800489a:	f01d fcad 	bl	80221f8 <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800489e:	a901      	add	r1, sp, #4
 80048a0:	4620      	mov	r0, r4
 80048a2:	f000 ffa8 	bl	80057f6 <VL53L0X_GetDeviceInfo>
 80048a6:	b9e0      	cbnz	r0, 80048e2 <VL53L0X_PROXIMITY_Init+0x62>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 80048a8:	f10d 0202 	add.w	r2, sp, #2
 80048ac:	21c0      	movs	r1, #192	; 0xc0
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff fecc 	bl	800464c <VL53L0X_RdWord>
 80048b4:	b988      	cbnz	r0, 80048da <VL53L0X_PROXIMITY_Init+0x5a>
      if (vl53l0x_id == VL53L0X_ID)
 80048b6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80048ba:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 80048be:	429a      	cmp	r2, r3
 80048c0:	d109      	bne.n	80048d6 <VL53L0X_PROXIMITY_Init+0x56>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 80048c2:	4620      	mov	r0, r4
 80048c4:	f001 f974 	bl	8005bb0 <VL53L0X_DataInit>
 80048c8:	b928      	cbnz	r0, 80048d6 <VL53L0X_PROXIMITY_Init+0x56>
          Dev.Present = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	4620      	mov	r0, r4
 80048ce:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  if (pDev->Present)
 80048d2:	f7ff ff3f 	bl	8004754 <SetupSingleShot.part.0>
}
 80048d6:	b01a      	add	sp, #104	; 0x68
 80048d8:	bd10      	pop	{r4, pc}
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 80048da:	4804      	ldr	r0, [pc, #16]	; (80048ec <VL53L0X_PROXIMITY_Init+0x6c>)
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80048dc:	f01e fe2c 	bl	8023538 <puts>
}
 80048e0:	e7f9      	b.n	80048d6 <VL53L0X_PROXIMITY_Init+0x56>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80048e2:	4803      	ldr	r0, [pc, #12]	; (80048f0 <VL53L0X_PROXIMITY_Init+0x70>)
 80048e4:	e7fa      	b.n	80048dc <VL53L0X_PROXIMITY_Init+0x5c>
 80048e6:	bf00      	nop
 80048e8:	20000064 	.word	0x20000064
 80048ec:	0802f47b 	.word	0x0802f47b
 80048f0:	0802f4a8 	.word	0x0802f4a8

080048f4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80048f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 80048f6:	4c16      	ldr	r4, [pc, #88]	; (8004950 <SPI_WIFI_DelayUs+0x5c>)
 80048f8:	4f16      	ldr	r7, [pc, #88]	; (8004954 <SPI_WIFI_DelayUs+0x60>)
 80048fa:	6823      	ldr	r3, [r4, #0]
{
 80048fc:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 80048fe:	b98b      	cbnz	r3, 8004924 <SPI_WIFI_DelayUs+0x30>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004906:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t   t; 
     ct=cycle_per_ms;
 800490a:	9301      	str	r3, [sp, #4]
     t=HAL_GetTick();
 800490c:	f004 f82c 	bl	8008968 <HAL_GetTick>
 8004910:	4606      	mov	r6, r0
     while(ct) ct--;
 8004912:	9b01      	ldr	r3, [sp, #4]
 8004914:	b99b      	cbnz	r3, 800493e <SPI_WIFI_DelayUs+0x4a>
     cycle_per_loop=HAL_GetTick()-t;  
 8004916:	f004 f827 	bl	8008968 <HAL_GetTick>
     if (cycle_per_loop==0) cycle_per_loop=1;
 800491a:	1b80      	subs	r0, r0, r6
 800491c:	bf0a      	itet	eq
 800491e:	2301      	moveq	r3, #1
     cycle_per_loop=HAL_GetTick()-t;  
 8004920:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 8004922:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <SPI_WIFI_DelayUs+0x64>)
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	fbb0 f0f3 	udiv	r0, r0, r3
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 8004932:	4368      	muls	r0, r5
 8004934:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	b92b      	cbnz	r3, 8004946 <SPI_WIFI_DelayUs+0x52>
  return;
}
 800493a:	b003      	add	sp, #12
 800493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	3b01      	subs	r3, #1
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	e7e5      	b.n	8004912 <SPI_WIFI_DelayUs+0x1e>
  while(ct) ct--;
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	3b01      	subs	r3, #1
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	e7f3      	b.n	8004936 <SPI_WIFI_DelayUs+0x42>
 800494e:	bf00      	nop
 8004950:	2000102c 	.word	0x2000102c
 8004954:	20000528 	.word	0x20000528
 8004958:	000f4240 	.word	0x000f4240

0800495c <wait_spi_tx_event>:
{
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8004960:	f004 f802 	bl	8008968 <HAL_GetTick>
  while (spi_tx_event==1)
 8004964:	4e07      	ldr	r6, [pc, #28]	; (8004984 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 8004966:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 8004968:	6873      	ldr	r3, [r6, #4]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d001      	beq.n	8004972 <wait_spi_tx_event+0x16>
  return 0; 
 800496e:	2000      	movs	r0, #0
}
 8004970:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8004972:	f003 fff9 	bl	8008968 <HAL_GetTick>
 8004976:	1b00      	subs	r0, r0, r4
 8004978:	42a8      	cmp	r0, r5
 800497a:	d9f5      	bls.n	8004968 <wait_spi_tx_event+0xc>
      return -1;
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	e7f6      	b.n	8004970 <wait_spi_tx_event+0x14>
 8004982:	bf00      	nop
 8004984:	2000102c 	.word	0x2000102c

08004988 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 800498a:	4840      	ldr	r0, [pc, #256]	; (8004a8c <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 800498c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 800498e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8004990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004994:	659a      	str	r2, [r3, #88]	; 0x58
 8004996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8004998:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 800499a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800499e:	9201      	str	r2, [sp, #4]
 80049a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a4:	f042 0202 	orr.w	r2, r2, #2
 80049a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80049aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ac:	f002 0202 	and.w	r2, r2, #2
 80049b0:	9202      	str	r2, [sp, #8]
 80049b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b6:	f042 0204 	orr.w	r2, r2, #4
 80049ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80049bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049be:	f002 0204 	and.w	r2, r2, #4
 80049c2:	9203      	str	r2, [sp, #12]
 80049c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049c8:	f042 0210 	orr.w	r2, r2, #16
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d0:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049d4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80049dc:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 80049de:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049e0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049e2:	f004 fb57 	bl	8009094 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80049e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80049ea:	a905      	add	r1, sp, #20
 80049ec:	4827      	ldr	r0, [pc, #156]	; (8004a8c <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80049ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80049f2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80049f6:	f004 fa69 	bl	8008ecc <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80049fc:	4825      	ldr	r0, [pc, #148]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80049fe:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a00:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8004a02:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a06:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a0a:	f004 fa5f 	bl	8008ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8004a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a12:	a905      	add	r1, sp, #20
 8004a14:	481f      	ldr	r0, [pc, #124]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 8004a16:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a18:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a1c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a20:	f004 fa54 	bl	8008ecc <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 8004a24:	4622      	mov	r2, r4
 8004a26:	4621      	mov	r1, r4
 8004a28:	481a      	ldr	r0, [pc, #104]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
 8004a2a:	f004 fb33 	bl	8009094 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004a2e:	a905      	add	r1, sp, #20
 8004a30:	4818      	ldr	r0, [pc, #96]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a32:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a34:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a38:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004a3c:	f004 fa46 	bl	8008ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8004a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004a44:	a905      	add	r1, sp, #20
 8004a46:	4814      	ldr	r0, [pc, #80]	; (8004a98 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a48:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004a4a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a4e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004a52:	f004 fa3b 	bl	8008ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8004a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004a5a:	a905      	add	r1, sp, #20
 8004a5c:	480e      	ldr	r0, [pc, #56]	; (8004a98 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a5e:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004a60:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a64:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004a68:	f004 fa30 	bl	8008ecc <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8004a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004a70:	4809      	ldr	r0, [pc, #36]	; (8004a98 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a72:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004a74:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004a76:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a7a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004a7e:	f004 fa25 	bl	8008ecc <HAL_GPIO_Init>
}
 8004a82:	b00b      	add	sp, #44	; 0x2c
 8004a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	48000400 	.word	0x48000400
 8004a90:	10110000 	.word	0x10110000
 8004a94:	48001000 	.word	0x48001000
 8004a98:	48000800 	.word	0x48000800

08004a9c <SPI_WIFI_ResetModule>:
{
 8004a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8004a9e:	f003 ff63 	bl	8008968 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8004aaa:	482e      	ldr	r0, [pc, #184]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004aac:	4f2e      	ldr	r7, [pc, #184]	; (8004b68 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8004aae:	f004 faf1 	bl	8009094 <HAL_GPIO_WritePin>
 8004ab2:	200a      	movs	r0, #10
 8004ab4:	f003 ff5e 	bl	8008974 <HAL_Delay>
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004abe:	4829      	ldr	r0, [pc, #164]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004ac0:	f004 fae8 	bl	8009094 <HAL_GPIO_WritePin>
 8004ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ac8:	f003 ff54 	bl	8008974 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8004acc:	4825      	ldr	r0, [pc, #148]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	f004 fadf 	bl	8009094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004ad6:	200f      	movs	r0, #15
 8004ad8:	f7ff ff0c 	bl	80048f4 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8004adc:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8004ade:	4821      	ldr	r0, [pc, #132]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	f004 fad1 	bl	8009088 <HAL_GPIO_ReadPin>
 8004ae6:	2801      	cmp	r0, #1
 8004ae8:	4602      	mov	r2, r0
 8004aea:	d020      	beq.n	8004b2e <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS(); 
 8004aec:	2201      	movs	r2, #1
 8004aee:	481d      	ldr	r0, [pc, #116]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004af0:	4611      	mov	r1, r2
 8004af2:	f004 facf 	bl	8009094 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8004af6:	f89d 3000 	ldrb.w	r3, [sp]
 8004afa:	2b15      	cmp	r3, #21
 8004afc:	d12e      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004afe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004b02:	2b15      	cmp	r3, #21
 8004b04:	d12a      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004b06:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004b0a:	2b0d      	cmp	r3, #13
 8004b0c:	d126      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004b0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004b12:	2b0a      	cmp	r3, #10
 8004b14:	d122      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8004b16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b1c:	d11e      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004b1e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b22:	3820      	subs	r0, #32
 8004b24:	bf18      	it	ne
 8004b26:	f04f 30ff 	movne.w	r0, #4294967295
}
 8004b2a:	b003      	add	sp, #12
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004b2e:	eb0d 0104 	add.w	r1, sp, r4
 8004b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b36:	4638      	mov	r0, r7
 8004b38:	f006 fb79 	bl	800b22e <HAL_SPI_Receive>
 8004b3c:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b3e:	f003 ff13 	bl	8008968 <HAL_GetTick>
 8004b42:	1b40      	subs	r0, r0, r5
    count += 2;
 8004b44:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b46:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8004b4a:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b4c:	d201      	bcs.n	8004b52 <SPI_WIFI_ResetModule+0xb6>
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d0c5      	beq.n	8004ade <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS(); 
 8004b52:	2201      	movs	r2, #1
 8004b54:	4803      	ldr	r0, [pc, #12]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004b56:	4611      	mov	r1, r2
 8004b58:	f004 fa9c 	bl	8009094 <HAL_GPIO_WritePin>
    return -1;
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b60:	e7e3      	b.n	8004b2a <SPI_WIFI_ResetModule+0x8e>
 8004b62:	bf00      	nop
 8004b64:	48001000 	.word	0x48001000
 8004b68:	200011b8 	.word	0x200011b8

08004b6c <SPI_WIFI_Init>:
{
 8004b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8004b6e:	4605      	mov	r5, r0
 8004b70:	bb78      	cbnz	r0, 8004bd2 <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8004b72:	4c1c      	ldr	r4, [pc, #112]	; (8004be4 <SPI_WIFI_Init+0x78>)
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <SPI_WIFI_Init+0x7c>)
 8004b76:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7ff ff05 	bl	8004988 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8004b7e:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8004b82:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8004b86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004b8e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004b92:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004b94:	2310      	movs	r3, #16
 8004b96:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8004b9a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8004b9e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004ba2:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004ba4:	f006 f918 	bl	800add8 <HAL_SPI_Init>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	b9b8      	cbnz	r0, 8004bdc <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8004bac:	210f      	movs	r1, #15
 8004bae:	9001      	str	r0, [sp, #4]
 8004bb0:	2007      	movs	r0, #7
 8004bb2:	f003 feff 	bl	80089b4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8004bb6:	2007      	movs	r0, #7
 8004bb8:	f003 ff2e 	bl	8008a18 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 1, 0);
 8004bbc:	9a01      	ldr	r2, [sp, #4]
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	2033      	movs	r0, #51	; 0x33
 8004bc2:	f003 fef7 	bl	80089b4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8004bc6:	2033      	movs	r0, #51	; 0x33
 8004bc8:	f003 ff26 	bl	8008a18 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8004bcc:	200a      	movs	r0, #10
 8004bce:	f7ff fe91 	bl	80048f4 <SPI_WIFI_DelayUs>
}
 8004bd2:	b003      	add	sp, #12
 8004bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8004bd8:	f7ff bf60 	b.w	8004a9c <SPI_WIFI_ResetModule>
}
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	b003      	add	sp, #12
 8004be2:	bd30      	pop	{r4, r5, pc}
 8004be4:	200011b8 	.word	0x200011b8
 8004be8:	40003c00 	.word	0x40003c00

08004bec <SPI_WIFI_DeInit>:
{
 8004bec:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8004bee:	4802      	ldr	r0, [pc, #8]	; (8004bf8 <SPI_WIFI_DeInit+0xc>)
 8004bf0:	f006 f951 	bl	800ae96 <HAL_SPI_DeInit>
}
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	bd08      	pop	{r3, pc}
 8004bf8:	200011b8 	.word	0x200011b8

08004bfc <SPI_WIFI_ReceiveData>:
{
 8004bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS(); 
 8004c02:	2201      	movs	r2, #1
{
 8004c04:	4604      	mov	r4, r0
 8004c06:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS(); 
 8004c08:	4836      	ldr	r0, [pc, #216]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 8004c0a:	4e37      	ldr	r6, [pc, #220]	; (8004ce8 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS(); 
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	f004 fa41 	bl	8009094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8004c12:	2003      	movs	r0, #3
 8004c14:	f7ff fe6e 	bl	80048f4 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8004c18:	f003 fea6 	bl	8008968 <HAL_GetTick>
 8004c1c:	46b1      	mov	r9, r6
 8004c1e:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8004c20:	68b3      	ldr	r3, [r6, #8]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d01a      	beq.n	8004c5c <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS(); 
 8004c26:	482f      	ldr	r0, [pc, #188]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8004c28:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8004ce4 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004cec <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS(); 
 8004c30:	2200      	movs	r2, #0
 8004c32:	2101      	movs	r1, #1
 8004c34:	f004 fa2e 	bl	8009094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004c38:	200f      	movs	r0, #15
 8004c3a:	f7ff fe5b 	bl	80048f4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8004c3e:	3402      	adds	r4, #2
 8004c40:	2500      	movs	r5, #0
 8004c42:	2102      	movs	r1, #2
 8004c44:	4658      	mov	r0, fp
 8004c46:	f004 fa1f 	bl	8009088 <HAL_GPIO_ReadPin>
 8004c4a:	2801      	cmp	r0, #1
 8004c4c:	b22e      	sxth	r6, r5
 8004c4e:	d00d      	beq.n	8004c6c <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS(); 
 8004c50:	2201      	movs	r2, #1
 8004c52:	4824      	ldr	r0, [pc, #144]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
 8004c54:	4611      	mov	r1, r2
 8004c56:	f004 fa1d 	bl	8009094 <HAL_GPIO_WritePin>
  return length;
 8004c5a:	e01a      	b.n	8004c92 <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004c5c:	f003 fe84 	bl	8008968 <HAL_GetTick>
 8004c60:	1b40      	subs	r0, r0, r5
 8004c62:	4580      	cmp	r8, r0
 8004c64:	d2dc      	bcs.n	8004c20 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8004c66:	f06f 0602 	mvn.w	r6, #2
 8004c6a:	e012      	b.n	8004c92 <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8004c6c:	42af      	cmp	r7, r5
 8004c6e:	dc01      	bgt.n	8004c74 <SPI_WIFI_ReceiveData+0x78>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	d1ed      	bne.n	8004c50 <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8004c74:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c76:	a901      	add	r1, sp, #4
 8004c78:	4650      	mov	r0, sl
      spi_rx_event=1;
 8004c7a:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c7e:	f006 fcc7 	bl	800b610 <HAL_SPI_Receive_IT>
 8004c82:	2201      	movs	r2, #1
 8004c84:	b148      	cbz	r0, 8004c9a <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8004c86:	4817      	ldr	r0, [pc, #92]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
 8004c88:	4611      	mov	r1, r2
 8004c8a:	f004 fa03 	bl	8009094 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8004c8e:	f04f 36ff 	mov.w	r6, #4294967295
}
 8004c92:	4630      	mov	r0, r6
 8004c94:	b003      	add	sp, #12
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8004c9a:	f003 fe65 	bl	8008968 <HAL_GetTick>
 8004c9e:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8004ca0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d104      	bne.n	8004cb2 <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004ca8:	f003 fe5e 	bl	8008968 <HAL_GetTick>
 8004cac:	1b80      	subs	r0, r0, r6
 8004cae:	4580      	cmp	r8, r0
 8004cb0:	d2f6      	bcs.n	8004ca0 <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8004cb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cb6:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 8004cba:	3502      	adds	r5, #2
 8004cbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004cc0:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8004cc4:	f5b5 6faf 	cmp.w	r5, #1400	; 0x578
 8004cc8:	f104 0402 	add.w	r4, r4, #2
 8004ccc:	d1b9      	bne.n	8004c42 <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4804      	ldr	r0, [pc, #16]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	f004 f9de 	bl	8009094 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004cd8:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();    
 8004cdc:	f7ff fede 	bl	8004a9c <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004ce0:	e7d7      	b.n	8004c92 <SPI_WIFI_ReceiveData+0x96>
 8004ce2:	bf00      	nop
 8004ce4:	48001000 	.word	0x48001000
 8004ce8:	2000102c 	.word	0x2000102c
 8004cec:	200011b8 	.word	0x200011b8

08004cf0 <SPI_WIFI_SendData>:
{
 8004cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8004cfa:	f003 fe35 	bl	8008968 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8004cfe:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004d98 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8004d02:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8004d04:	2102      	movs	r1, #2
 8004d06:	4648      	mov	r0, r9
 8004d08:	f004 f9be 	bl	8009088 <HAL_GPIO_ReadPin>
 8004d0c:	2801      	cmp	r0, #1
 8004d0e:	4606      	mov	r6, r0
 8004d10:	d11b      	bne.n	8004d4a <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 8004d12:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004da0 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 8004d16:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8004d18:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	481e      	ldr	r0, [pc, #120]	; (8004d98 <SPI_WIFI_SendData+0xa8>)
 8004d20:	f004 f9b8 	bl	8009094 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004d24:	200f      	movs	r0, #15
 8004d26:	f7ff fde5 	bl	80048f4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8004d2a:	2c01      	cmp	r4, #1
 8004d2c:	d919      	bls.n	8004d62 <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004d2e:	481b      	ldr	r0, [pc, #108]	; (8004d9c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8004d30:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004d34:	0862      	lsrs	r2, r4, #1
 8004d36:	4629      	mov	r1, r5
 8004d38:	f006 fb90 	bl	800b45c <HAL_SPI_Transmit_IT>
 8004d3c:	b170      	cbz	r0, 8004d5c <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4815      	ldr	r0, [pc, #84]	; (8004d98 <SPI_WIFI_SendData+0xa8>)
 8004d42:	4611      	mov	r1, r2
 8004d44:	f004 f9a6 	bl	8009094 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8004d48:	e005      	b.n	8004d56 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004d4a:	f003 fe0d 	bl	8008968 <HAL_GetTick>
 8004d4e:	eba0 0008 	sub.w	r0, r0, r8
 8004d52:	4287      	cmp	r7, r0
 8004d54:	d2d6      	bcs.n	8004d04 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5a:	e019      	b.n	8004d90 <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	f7ff fdfd 	bl	800495c <wait_spi_tx_event>
  if ( len & 1)
 8004d62:	07e3      	lsls	r3, r4, #31
 8004d64:	d513      	bpl.n	8004d8e <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 8004d66:	4425      	add	r5, r4
    spi_tx_event=1;
 8004d68:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8004d6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d6e:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004d72:	480a      	ldr	r0, [pc, #40]	; (8004d9c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8004d74:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8004d78:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004d7a:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8004d7c:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004d80:	f006 fb6c 	bl	800b45c <HAL_SPI_Transmit_IT>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d1da      	bne.n	8004d3e <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff fde7 	bl	800495c <wait_spi_tx_event>
  return len;
 8004d8e:	b220      	sxth	r0, r4
}
 8004d90:	b003      	add	sp, #12
 8004d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d96:	bf00      	nop
 8004d98:	48001000 	.word	0x48001000
 8004d9c:	200011b8 	.word	0x200011b8
 8004da0:	2000102c 	.word	0x2000102c

08004da4 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8004da4:	f003 bde6 	b.w	8008974 <HAL_Delay>

08004da8 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <HAL_SPI_RxCpltCallback+0xc>)
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	b10a      	cbz	r2, 8004db2 <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
  }
}
 8004db2:	4770      	bx	lr
 8004db4:	2000102c 	.word	0x2000102c

08004db8 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <HAL_SPI_TxCpltCallback+0xc>)
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	b10a      	cbz	r2, 8004dc2 <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]
  }
}
 8004dc2:	4770      	bx	lr
 8004dc4:	2000102c 	.word	0x2000102c

08004dc8 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <SPI_WIFI_ISR+0x10>)
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8004dce:	bf04      	itt	eq
 8004dd0:	2200      	moveq	r2, #0
 8004dd2:	609a      	streq	r2, [r3, #8]
   }
}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	2000102c 	.word	0x2000102c

08004ddc <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004ddc:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <WIFI_Init+0x30>)
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <WIFI_Init+0x34>)
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <WIFI_Init+0x38>)
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <WIFI_Init+0x3c>)
 8004dea:	490c      	ldr	r1, [pc, #48]	; (8004e1c <WIFI_Init+0x40>)
 8004dec:	480c      	ldr	r0, [pc, #48]	; (8004e20 <WIFI_Init+0x44>)
 8004dee:	f003 f91b 	bl	8008028 <ES_WIFI_RegisterBusIO>
 8004df2:	b940      	cbnz	r0, 8004e06 <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <WIFI_Init+0x44>)
 8004df6:	f003 f8b5 	bl	8007f64 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004dfa:	3800      	subs	r0, #0
 8004dfc:	bf18      	it	ne
 8004dfe:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8004e00:	b003      	add	sp, #12
 8004e02:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004e06:	2001      	movs	r0, #1
 8004e08:	e7fa      	b.n	8004e00 <WIFI_Init+0x24>
 8004e0a:	bf00      	nop
 8004e0c:	08004bfd 	.word	0x08004bfd
 8004e10:	08004cf1 	.word	0x08004cf1
 8004e14:	08004bed 	.word	0x08004bed
 8004e18:	08004da5 	.word	0x08004da5
 8004e1c:	08004b6d 	.word	0x08004b6d
 8004e20:	2000121c 	.word	0x2000121c

08004e24 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8004e24:	b508      	push	{r3, lr}
 8004e26:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8004e28:	460a      	mov	r2, r1
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	4806      	ldr	r0, [pc, #24]	; (8004e48 <WIFI_Connect+0x24>)
 8004e2e:	f003 f90d 	bl	800804c <ES_WIFI_Connect>
 8004e32:	b930      	cbnz	r0, 8004e42 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004e34:	4804      	ldr	r0, [pc, #16]	; (8004e48 <WIFI_Connect+0x24>)
 8004e36:	f003 f965 	bl	8008104 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004e3a:	3800      	subs	r0, #0
 8004e3c:	bf18      	it	ne
 8004e3e:	2001      	movne	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8004e40:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004e42:	2001      	movs	r0, #1
 8004e44:	e7fc      	b.n	8004e40 <WIFI_Connect+0x1c>
 8004e46:	bf00      	nop
 8004e48:	2000121c 	.word	0x2000121c

08004e4c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8004e50:	4803      	ldr	r0, [pc, #12]	; (8004e60 <WIFI_GetMAC_Address+0x14>)
 8004e52:	f003 f9cb 	bl	80081ec <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004e56:	3800      	subs	r0, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2001      	movne	r0, #1
 8004e5c:	bd08      	pop	{r3, pc}
 8004e5e:	bf00      	nop
 8004e60:	2000121c 	.word	0x2000121c

08004e64 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8004e64:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004e66:	4d06      	ldr	r5, [pc, #24]	; (8004e80 <WIFI_GetIP_Address+0x1c>)
{
 8004e68:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f003 f92e 	bl	80080cc <ES_WIFI_IsConnected>
 8004e70:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8004e72:	bf03      	ittte	eq
 8004e74:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8004e78:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8004e7a:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8004e7c:	2001      	movne	r0, #1
  }
  return ret;
}
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	2000121c 	.word	0x2000121c

08004e84 <WIFI_GetHostAddress>:
  * @param  location : Host URL
  * @param  ipaddr : array of the IP address
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetHostAddress(const char *location, uint8_t *ipaddr)
{
 8004e84:	460a      	mov	r2, r1
 8004e86:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4803      	ldr	r0, [pc, #12]	; (8004e98 <WIFI_GetHostAddress+0x14>)
 8004e8c:	f003 f9cc 	bl	8008228 <ES_WIFI_DNS_LookUp>
  {
    return WIFI_STATUS_OK;
  }
  
  return ret;
}
 8004e90:	3800      	subs	r0, #0
 8004e92:	bf18      	it	ne
 8004e94:	2001      	movne	r0, #1
 8004e96:	bd08      	pop	{r3, pc}
 8004e98:	2000121c 	.word	0x2000121c

08004e9c <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8004e9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8004e9e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004ea2:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8004ea6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004eaa:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004eae:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004eb6:	bf18      	it	ne
 8004eb8:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8004eba:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8004ebc:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004ec0:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8004ec4:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ec8:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8004eca:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ecc:	4806      	ldr	r0, [pc, #24]	; (8004ee8 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8004ece:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8004ed0:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8004ed4:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ed8:	f003 f9c6 	bl	8008268 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004edc:	3800      	subs	r0, #0
 8004ede:	bf18      	it	ne
 8004ee0:	2001      	movne	r0, #1
 8004ee2:	b007      	add	sp, #28
 8004ee4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ee8:	2000121c 	.word	0x2000121c

08004eec <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8004eec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8004eee:	f88d 0005 	strb.w	r0, [sp, #5]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ef2:	a901      	add	r1, sp, #4
 8004ef4:	4804      	ldr	r0, [pc, #16]	; (8004f08 <WIFI_CloseClientConnection+0x1c>)
 8004ef6:	f003 fa19 	bl	800832c <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8004efa:	3800      	subs	r0, #0
 8004efc:	bf18      	it	ne
 8004efe:	2001      	movne	r0, #1
 8004f00:	b007      	add	sp, #28
 8004f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f06:	bf00      	nop
 8004f08:	2000121c 	.word	0x2000121c

08004f0c <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004f0c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004f0e:	9c04      	ldr	r4, [sp, #16]
 8004f10:	e9cd 3400 	strd	r3, r4, [sp]
 8004f14:	4613      	mov	r3, r2
 8004f16:	460a      	mov	r2, r1
 8004f18:	4601      	mov	r1, r0
 8004f1a:	4804      	ldr	r0, [pc, #16]	; (8004f2c <WIFI_SendData+0x20>)
 8004f1c:	f003 fa26 	bl	800836c <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8004f20:	3800      	subs	r0, #0
 8004f22:	bf18      	it	ne
 8004f24:	2001      	movne	r0, #1
 8004f26:	b002      	add	sp, #8
 8004f28:	bd10      	pop	{r4, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000121c 	.word	0x2000121c

08004f30 <WIFI_SendDataTo>:



WIFI_Status_t WIFI_SendDataTo(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t port)
{
 8004f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_SendDataTo(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004f32:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004f36:	9403      	str	r4, [sp, #12]
 8004f38:	9c07      	ldr	r4, [sp, #28]
 8004f3a:	9402      	str	r4, [sp, #8]
 8004f3c:	9c06      	ldr	r4, [sp, #24]
 8004f3e:	e9cd 3400 	strd	r3, r4, [sp]
 8004f42:	4613      	mov	r3, r2
 8004f44:	460a      	mov	r2, r1
 8004f46:	4601      	mov	r1, r0
 8004f48:	4803      	ldr	r0, [pc, #12]	; (8004f58 <WIFI_SendDataTo+0x28>)
 8004f4a:	f003 fa8d 	bl	8008468 <ES_WIFI_SendDataTo>
  {
    ret = WIFI_STATUS_OK;
  }

  return ret;
}
 8004f4e:	3800      	subs	r0, #0
 8004f50:	bf18      	it	ne
 8004f52:	2001      	movne	r0, #1
 8004f54:	b004      	add	sp, #16
 8004f56:	bd10      	pop	{r4, pc}
 8004f58:	2000121c 	.word	0x2000121c

08004f5c <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8004f5c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004f5e:	9c04      	ldr	r4, [sp, #16]
 8004f60:	e9cd 3400 	strd	r3, r4, [sp]
 8004f64:	4613      	mov	r3, r2
 8004f66:	460a      	mov	r2, r1
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4804      	ldr	r0, [pc, #16]	; (8004f7c <WIFI_ReceiveData+0x20>)
 8004f6c:	f003 fb18 	bl	80085a0 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004f70:	3800      	subs	r0, #0
 8004f72:	bf18      	it	ne
 8004f74:	2001      	movne	r0, #1
 8004f76:	b002      	add	sp, #8
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop
 8004f7c:	2000121c 	.word	0x2000121c

08004f80 <WIFI_ReceiveDataFrom>:


WIFI_Status_t WIFI_ReceiveDataFrom(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t *port)
{
 8004f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveDataFrom(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004f82:	9c08      	ldr	r4, [sp, #32]
 8004f84:	9403      	str	r4, [sp, #12]
 8004f86:	9c07      	ldr	r4, [sp, #28]
 8004f88:	9402      	str	r4, [sp, #8]
 8004f8a:	9c06      	ldr	r4, [sp, #24]
 8004f8c:	e9cd 3400 	strd	r3, r4, [sp]
 8004f90:	4613      	mov	r3, r2
 8004f92:	460a      	mov	r2, r1
 8004f94:	4601      	mov	r1, r0
 8004f96:	4804      	ldr	r0, [pc, #16]	; (8004fa8 <WIFI_ReceiveDataFrom+0x28>)
 8004f98:	f003 fb8a 	bl	80086b0 <ES_WIFI_ReceiveDataFrom>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004f9c:	3800      	subs	r0, #0
 8004f9e:	bf18      	it	ne
 8004fa0:	2001      	movne	r0, #1
 8004fa2:	b004      	add	sp, #16
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000121c 	.word	0x2000121c

08004fac <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 8004fac:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 8004fae:	4903      	ldr	r1, [pc, #12]	; (8004fbc <WIFI_GetModuleFwRevision+0x10>)
 8004fb0:	2218      	movs	r2, #24
 8004fb2:	f01e fbfb 	bl	80237ac <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	bd08      	pop	{r3, pc}
 8004fba:	bf00      	nop
 8004fbc:	2000123c 	.word	0x2000123c

08004fc0 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 8004fc0:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 8004fc2:	4903      	ldr	r1, [pc, #12]	; (8004fd0 <WIFI_GetModuleID+0x10>)
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f01e fbf1 	bl	80237ac <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fca:	2000      	movs	r0, #0
 8004fcc:	bd08      	pop	{r3, pc}
 8004fce:	bf00      	nop
 8004fd0:	2000121c 	.word	0x2000121c

08004fd4 <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 8004fd4:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 8004fd6:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <WIFI_GetModuleName+0x10>)
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f01e fbe7 	bl	80237ac <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fde:	2000      	movs	r0, #0
 8004fe0:	bd08      	pop	{r3, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20001284 	.word	0x20001284

08004fe8 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8004fe8:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004fec:	4c2a      	ldr	r4, [pc, #168]	; (8005098 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004fee:	4b2b      	ldr	r3, [pc, #172]	; (800509c <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ff0:	4d2b      	ldr	r5, [pc, #172]	; (80050a0 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ff2:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ff4:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 8004ffe:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005002:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005006:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800500e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8005010:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800501a:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800501c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005020:	2312      	movs	r3, #18
 8005022:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005026:	2003      	movs	r0, #3
 8005028:	2304      	movs	r3, #4
 800502a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800502e:	a903      	add	r1, sp, #12
 8005030:	481c      	ldr	r0, [pc, #112]	; (80050a4 <I2Cx_Init.constprop.0+0xbc>)
 8005032:	f003 ff4b 	bl	8008ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005036:	a903      	add	r1, sp, #12
 8005038:	481a      	ldr	r0, [pc, #104]	; (80050a4 <I2Cx_Init.constprop.0+0xbc>)
 800503a:	f003 ff47 	bl	8008ecc <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800503e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005044:	65ab      	str	r3, [r5, #88]	; 0x58
 8005046:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8005050:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005056:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8005058:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800505a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800505e:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005060:	4632      	mov	r2, r6
 8005062:	210f      	movs	r1, #15
 8005064:	2021      	movs	r0, #33	; 0x21
 8005066:	f003 fca5 	bl	80089b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800506a:	2021      	movs	r0, #33	; 0x21
 800506c:	f003 fcd4 	bl	8008a18 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005070:	4632      	mov	r2, r6
 8005072:	210f      	movs	r1, #15
 8005074:	2022      	movs	r0, #34	; 0x22
 8005076:	f003 fc9d 	bl	80089b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800507a:	2022      	movs	r0, #34	; 0x22
 800507c:	f003 fccc 	bl	8008a18 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8005080:	4620      	mov	r0, r4
 8005082:	f004 f9a9 	bl	80093d8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8005086:	4631      	mov	r1, r6
 8005088:	4620      	mov	r0, r4
 800508a:	f004 fcbb 	bl	8009a04 <HAL_I2CEx_ConfigAnalogFilter>
}
 800508e:	b008      	add	sp, #32
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	bf00      	nop
 8005094:	40005800 	.word	0x40005800
 8005098:	2000193c 	.word	0x2000193c
 800509c:	00702681 	.word	0x00702681
 80050a0:	40021000 	.word	0x40021000
 80050a4:	48000400 	.word	0x48000400

080050a8 <I2Cx_Error.isra.0.constprop.0>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 80050a8:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80050aa:	4803      	ldr	r0, [pc, #12]	; (80050b8 <I2Cx_Error.isra.0.constprop.0+0x10>)
 80050ac:	f004 f9e6 	bl	800947c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
}
 80050b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init(i2c_handler);
 80050b4:	f7ff bf98 	b.w	8004fe8 <I2Cx_Init.constprop.0>
 80050b8:	2000193c 	.word	0x2000193c

080050bc <BSP_LED_Init>:
{
 80050bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80050be:	b948      	cbnz	r0, 80050d4 <BSP_LED_Init+0x18>
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <BSP_LED_Init+0x3c>)
 80050c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c4:	f042 0202 	orr.w	r2, r2, #2
 80050c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80050ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80050d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050d8:	2301      	movs	r3, #1
 80050da:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80050de:	2100      	movs	r1, #0
 80050e0:	2302      	movs	r3, #2
 80050e2:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <BSP_LED_Init+0x40>)
 80050e8:	a901      	add	r1, sp, #4
 80050ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80050ee:	f003 feed 	bl	8008ecc <HAL_GPIO_Init>
}
 80050f2:	b007      	add	sp, #28
 80050f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80050f8:	40021000 	.word	0x40021000
 80050fc:	200001ec 	.word	0x200001ec

08005100 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <BSP_LED_On+0x10>)
 8005102:	2201      	movs	r2, #1
 8005104:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800510c:	f003 bfc2 	b.w	8009094 <HAL_GPIO_WritePin>
 8005110:	200001ec 	.word	0x200001ec

08005114 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <BSP_LED_Off+0x10>)
 8005116:	2200      	movs	r2, #0
 8005118:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800511c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005120:	f003 bfb8 	b.w	8009094 <HAL_GPIO_WritePin>
 8005124:	200001ec 	.word	0x200001ec

08005128 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <BSP_LED_Toggle+0x10>)
 800512a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800512e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005132:	f003 bfb4 	b.w	800909e <HAL_GPIO_TogglePin>
 8005136:	bf00      	nop
 8005138:	200001ec 	.word	0x200001ec

0800513c <BSP_PB_Init>:
{
 800513c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <BSP_PB_Init+0x70>)
 8005140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005142:	f042 0204 	orr.w	r2, r2, #4
 8005146:	64da      	str	r2, [r3, #76]	; 0x4c
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005152:	b989      	cbnz	r1, 8005178 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8005154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005158:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800515c:	2101      	movs	r1, #1
 800515e:	2302      	movs	r3, #2
 8005160:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <BSP_PB_Init+0x74>)
 8005166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800516a:	a901      	add	r1, sp, #4
 800516c:	6840      	ldr	r0, [r0, #4]
 800516e:	f003 fead 	bl	8008ecc <HAL_GPIO_Init>
}
 8005172:	b007      	add	sp, #28
 8005174:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005178:	2901      	cmp	r1, #1
 800517a:	d1fa      	bne.n	8005172 <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800517c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005180:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005182:	2303      	movs	r3, #3
 8005184:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <BSP_PB_Init+0x78>)
 8005188:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 800518c:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800518e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005192:	a901      	add	r1, sp, #4
 8005194:	6840      	ldr	r0, [r0, #4]
 8005196:	f003 fe99 	bl	8008ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800519a:	2200      	movs	r2, #0
 800519c:	210f      	movs	r1, #15
 800519e:	2028      	movs	r0, #40	; 0x28
 80051a0:	f003 fc08 	bl	80089b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80051a4:	2028      	movs	r0, #40	; 0x28
 80051a6:	f003 fc37 	bl	8008a18 <HAL_NVIC_EnableIRQ>
}
 80051aa:	e7e2      	b.n	8005172 <BSP_PB_Init+0x36>
 80051ac:	40021000 	.word	0x40021000
 80051b0:	200001ec 	.word	0x200001ec
 80051b4:	10110000 	.word	0x10110000

080051b8 <BSP_COM_Init>:
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	460d      	mov	r5, r1
 80051bc:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80051be:	b9d8      	cbnz	r0, 80051f8 <BSP_COM_Init+0x40>
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <BSP_COM_Init+0x80>)
 80051c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c4:	f042 0202 	orr.w	r2, r2, #2
 80051c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80051ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051cc:	f002 0202 	and.w	r2, r2, #2
 80051d0:	9200      	str	r2, [sp, #0]
 80051d2:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80051d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d6:	f042 0202 	orr.w	r2, r2, #2
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
 80051dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051de:	f002 0202 	and.w	r2, r2, #2
 80051e2:	9201      	str	r2, [sp, #4]
 80051e4:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80051e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80051f8:	4c10      	ldr	r4, [pc, #64]	; (800523c <BSP_COM_Init+0x84>)
 80051fa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80051fe:	2602      	movs	r6, #2
 8005200:	2340      	movs	r3, #64	; 0x40
 8005202:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005206:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005208:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800520a:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800520c:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800520e:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005210:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8005212:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005214:	f003 fe5a 	bl	8008ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005218:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800521a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800521c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800521e:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005220:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005224:	f003 fe52 	bl	8008ecc <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 800522c:	4628      	mov	r0, r5
 800522e:	f007 f985 	bl	800c53c <HAL_UART_Init>
}
 8005232:	b009      	add	sp, #36	; 0x24
 8005234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	200001ec 	.word	0x200001ec

08005240 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8005240:	f7ff bed2 	b.w	8004fe8 <I2Cx_Init.constprop.0>

08005244 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005246:	2301      	movs	r3, #1
{
 8005248:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800524c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005250:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005254:	f10d 0217 	add.w	r2, sp, #23
 8005258:	9200      	str	r2, [sp, #0]
 800525a:	460a      	mov	r2, r1
 800525c:	4601      	mov	r1, r0
 800525e:	4804      	ldr	r0, [pc, #16]	; (8005270 <SENSOR_IO_Write+0x2c>)
 8005260:	f004 fa5a 	bl	8009718 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8005264:	b108      	cbz	r0, 800526a <SENSOR_IO_Write+0x26>
    I2Cx_Error(i2c_handler, Addr);
 8005266:	f7ff ff1f 	bl	80050a8 <I2Cx_Error.isra.0.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 800526a:	b007      	add	sp, #28
 800526c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005270:	2000193c 	.word	0x2000193c

08005274 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8005276:	2300      	movs	r3, #0
{
 8005278:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 800527a:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800527e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005282:	2301      	movs	r3, #1
 8005284:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005288:	f10d 0117 	add.w	r1, sp, #23
 800528c:	9100      	str	r1, [sp, #0]
 800528e:	4601      	mov	r1, r0
 8005290:	4805      	ldr	r0, [pc, #20]	; (80052a8 <SENSOR_IO_Read+0x34>)
 8005292:	f004 faf9 	bl	8009888 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8005296:	b108      	cbz	r0, 800529c <SENSOR_IO_Read+0x28>
    I2Cx_Error(i2c_handler, Addr);
 8005298:	f7ff ff06 	bl	80050a8 <I2Cx_Error.isra.0.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 800529c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80052a0:	b007      	add	sp, #28
 80052a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a6:	bf00      	nop
 80052a8:	2000193c 	.word	0x2000193c

080052ac <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80052ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80052ae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80052b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	2301      	movs	r3, #1
 80052ba:	460a      	mov	r2, r1
 80052bc:	4601      	mov	r1, r0
 80052be:	4805      	ldr	r0, [pc, #20]	; (80052d4 <SENSOR_IO_ReadMultiple+0x28>)
 80052c0:	f004 fae2 	bl	8009888 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80052c4:	4604      	mov	r4, r0
 80052c6:	b108      	cbz	r0, 80052cc <SENSOR_IO_ReadMultiple+0x20>
    I2Cx_Error(i2c_handler, Addr);
 80052c8:	f7ff feee 	bl	80050a8 <I2Cx_Error.isra.0.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80052cc:	b2a0      	uxth	r0, r4
 80052ce:	b004      	add	sp, #16
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	bf00      	nop
 80052d4:	2000193c 	.word	0x2000193c

080052d8 <BSP_ACCELERO_Init>:
       {
//         return BSP_ERROR_NO_INIT;
       }

  return ret;
}
 80052d8:	2000      	movs	r0, #0
 80052da:	4770      	bx	lr

080052dc <BSP_ACCELERO_AccGetXYZ>:
    if(AccelerometerDrv->GetXYZ != NULL)
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
    }
  }
}
 80052dc:	4770      	bx	lr

080052de <BSP_GYRO_Init>:
//
//    ret = GYRO_OK;
//  }
//
//  return ret;
}
 80052de:	4770      	bx	lr

080052e0 <BSP_GYRO_GetXYZ>:
    if(GyroscopeDrv->GetXYZ!= NULL)
    {
      GyroscopeDrv->GetXYZ(pfData);
    }
  }
}
 80052e0:	4770      	bx	lr
	...

080052e4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80052e4:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80052e6:	4c07      	ldr	r4, [pc, #28]	; (8005304 <BSP_HSENSOR_Init+0x20>)
 80052e8:	20be      	movs	r0, #190	; 0xbe
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	4798      	blx	r3
 80052ee:	28bc      	cmp	r0, #188	; 0xbc
 80052f0:	d106      	bne.n	8005300 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80052f4:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 80052f6:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	4798      	blx	r3
    ret = HSENSOR_OK;
 80052fc:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80052fe:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8005300:	2001      	movs	r0, #1
  return ret;
 8005302:	e7fc      	b.n	80052fe <BSP_HSENSOR_Init+0x1a>
 8005304:	20000210 	.word	0x20000210
 8005308:	2000103c 	.word	0x2000103c

0800530c <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800530c:	4b02      	ldr	r3, [pc, #8]	; (8005318 <BSP_HSENSOR_ReadHumidity+0xc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	20be      	movs	r0, #190	; 0xbe
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4718      	bx	r3
 8005316:	bf00      	nop
 8005318:	2000103c 	.word	0x2000103c

0800531c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800531c:	b513      	push	{r0, r1, r4, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800531e:	4c0b      	ldr	r4, [pc, #44]	; (800534c <BSP_MAGNETO_Init+0x30>)
 8005320:	68a3      	ldr	r3, [r4, #8]
 8005322:	4798      	blx	r3
 8005324:	283d      	cmp	r0, #61	; 0x3d
 8005326:	d10e      	bne.n	8005346 <BSP_MAGNETO_Init+0x2a>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <BSP_MAGNETO_Init+0x34>)
 800532a:	601c      	str	r4, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <BSP_MAGNETO_Init+0x38>)
 800532e:	9300      	str	r3, [sp, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8005330:	2340      	movs	r3, #64	; 0x40
 8005332:	f88d 3004 	strb.w	r3, [sp, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8005336:	aa02      	add	r2, sp, #8
 8005338:	e912 0003 	ldmdb	r2, {r0, r1}
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8005340:	2000      	movs	r0, #0
  } 

  return ret;  
}
 8005342:	b002      	add	sp, #8
 8005344:	bd10      	pop	{r4, pc}
    ret = MAGNETO_ERROR;
 8005346:	2001      	movs	r0, #1
 8005348:	e7fb      	b.n	8005342 <BSP_MAGNETO_Init+0x26>
 800534a:	bf00      	nop
 800534c:	2000021c 	.word	0x2000021c
 8005350:	20001040 	.word	0x20001040
 8005354:	08000058 	.word	0x08000058

08005358 <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <BSP_MAGNETO_GetXYZ+0x10>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b113      	cbz	r3, 8005364 <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	b103      	cbz	r3, 8005364 <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8005362:	4718      	bx	r3
    }
  }
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20001040 	.word	0x20001040

0800536c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800536c:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800536e:	4c07      	ldr	r4, [pc, #28]	; (800538c <BSP_PSENSOR_Init+0x20>)
 8005370:	20ba      	movs	r0, #186	; 0xba
 8005372:	6863      	ldr	r3, [r4, #4]
 8005374:	4798      	blx	r3
 8005376:	28b1      	cmp	r0, #177	; 0xb1
 8005378:	d106      	bne.n	8005388 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800537a:	4b05      	ldr	r3, [pc, #20]	; (8005390 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 800537c:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 800537e:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	4798      	blx	r3
    ret = PSENSOR_OK;
 8005384:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8005386:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 8005388:	2001      	movs	r0, #1
  return ret;
 800538a:	e7fc      	b.n	8005386 <BSP_PSENSOR_Init+0x1a>
 800538c:	20000260 	.word	0x20000260
 8005390:	20001044 	.word	0x20001044

08005394 <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8005394:	4b02      	ldr	r3, [pc, #8]	; (80053a0 <BSP_PSENSOR_ReadPressure+0xc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	20ba      	movs	r0, #186	; 0xba
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4718      	bx	r3
 800539e:	bf00      	nop
 80053a0:	20001044 	.word	0x20001044

080053a4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80053a4:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80053a6:	4c06      	ldr	r4, [pc, #24]	; (80053c0 <BSP_TSENSOR_Init+0x1c>)
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <BSP_TSENSOR_Init+0x20>)
 80053aa:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80053ac:	f7ff ff48 	bl	8005240 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	2100      	movs	r1, #0
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	20be      	movs	r0, #190	; 0xbe
 80053b8:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 80053ba:	2000      	movs	r0, #0
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	bf00      	nop
 80053c0:	20001048 	.word	0x20001048
 80053c4:	20000200 	.word	0x20000200

080053c8 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <BSP_TSENSOR_ReadTemp+0xc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	20be      	movs	r0, #190	; 0xbe
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4718      	bx	r3
 80053d2:	bf00      	nop
 80053d4:	20001048 	.word	0x20001048

080053d8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80053d8:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80053da:	b2c4      	uxtb	r4, r0
 80053dc:	2120      	movs	r1, #32
 80053de:	4620      	mov	r0, r4
 80053e0:	f7ff ff48 	bl	8005274 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80053e4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80053e8:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 80053ec:	2120      	movs	r1, #32
 80053ee:	4620      	mov	r0, r4
}
 80053f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80053f4:	f7ff bf26 	b.w	8005244 <SENSOR_IO_Write>

080053f8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80053f8:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80053fa:	b2c4      	uxtb	r4, r0
 80053fc:	2120      	movs	r1, #32
 80053fe:	4620      	mov	r0, r4
 8005400:	f7ff ff38 	bl	8005274 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8005404:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005408:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 800540c:	2120      	movs	r1, #32
 800540e:	4620      	mov	r0, r4
}
 8005410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005414:	f7ff bf16 	b.w	8005244 <SENSOR_IO_Write>

08005418 <HTS221_H_ReadID>:
{  
 8005418:	b510      	push	{r4, lr}
 800541a:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 800541c:	f7ff ff10 	bl	8005240 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8005420:	b2e0      	uxtb	r0, r4
 8005422:	210f      	movs	r1, #15
}
 8005424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8005428:	f7ff bf24 	b.w	8005274 <SENSOR_IO_Read>

0800542c <HTS221_H_ReadHumidity>:
{
 800542c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8005430:	fa5f f880 	uxtb.w	r8, r0
 8005434:	2302      	movs	r3, #2
 8005436:	aa01      	add	r2, sp, #4
 8005438:	21b0      	movs	r1, #176	; 0xb0
 800543a:	4640      	mov	r0, r8
 800543c:	f7ff ff36 	bl	80052ac <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005440:	2302      	movs	r3, #2
 8005442:	aa01      	add	r2, sp, #4
 8005444:	21b6      	movs	r1, #182	; 0xb6
 8005446:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8005448:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 800544c:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005450:	f7ff ff2c 	bl	80052ac <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005454:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005458:	f89d 7004 	ldrb.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800545c:	2302      	movs	r3, #2
 800545e:	aa01      	add	r2, sp, #4
 8005460:	21ba      	movs	r1, #186	; 0xba
 8005462:	4640      	mov	r0, r8
 8005464:	f7ff ff22 	bl	80052ac <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005468:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800546c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005470:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8005474:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005476:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800547a:	21a8      	movs	r1, #168	; 0xa8
 800547c:	2302      	movs	r3, #2
 800547e:	4640      	mov	r0, r8
 8005480:	f7ff ff14 	bl	80052ac <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005484:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005488:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800548c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005490:	b23f      	sxth	r7, r7
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8005492:	b21b      	sxth	r3, r3
 8005494:	1bdb      	subs	r3, r3, r7
 8005496:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 800549a:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 800549c:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800549e:	1bab      	subs	r3, r5, r6
 80054a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054a4:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054a8:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80054aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054ae:	1be4      	subs	r4, r4, r7
 80054b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b4:	ee07 4a10 	vmov	s14, r4
 80054b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054bc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80054c0:	ee07 6a90 	vmov	s15, r6
 80054c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 80054c8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005500 <HTS221_H_ReadHumidity+0xd4>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80054cc:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 80054d0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80054d4:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 80054d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e0:	dc07      	bgt.n	80054f2 <HTS221_H_ReadHumidity+0xc6>
        : tmp_f;
 80054e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ea:	d504      	bpl.n	80054f6 <HTS221_H_ReadHumidity+0xca>
 80054ec:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005504 <HTS221_H_ReadHumidity+0xd8>
 80054f0:	e001      	b.n	80054f6 <HTS221_H_ReadHumidity+0xca>
        : ( tmp_f <    0.0f ) ?    0.0f
 80054f2:	eef0 7a47 	vmov.f32	s15, s14
}
 80054f6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80054fa:	b002      	add	sp, #8
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	447a0000 	.word	0x447a0000
 8005504:	00000000 	.word	0x00000000

08005508 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8005508:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800550c:	fa5f f880 	uxtb.w	r8, r0
 8005510:	aa01      	add	r2, sp, #4
 8005512:	2302      	movs	r3, #2
 8005514:	21b2      	movs	r1, #178	; 0xb2
 8005516:	4640      	mov	r0, r8
 8005518:	f7ff fec8 	bl	80052ac <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800551c:	2135      	movs	r1, #53	; 0x35
 800551e:	4640      	mov	r0, r8
 8005520:	f7ff fea8 	bl	8005274 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005524:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005526:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800552a:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800552e:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005530:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005534:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8005538:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800553a:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800553c:	2304      	movs	r3, #4
 800553e:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8005542:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005544:	21bc      	movs	r1, #188	; 0xbc
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff feb0 	bl	80052ac <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800554c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005550:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005554:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005558:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800555c:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005560:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005562:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005566:	21aa      	movs	r1, #170	; 0xaa
 8005568:	2302      	movs	r3, #2
 800556a:	4640      	mov	r0, r8
 800556c:	f7ff fe9e 	bl	80052ac <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005570:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005574:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005578:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800557c:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800557e:	b21b      	sxth	r3, r3
 8005580:	1bdb      	subs	r3, r3, r7
 8005582:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 8005586:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8005588:	1bab      	subs	r3, r5, r6
 800558a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800558e:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005592:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8005594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005598:	1be4      	subs	r4, r4, r7
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	ee07 4a10 	vmov	s14, r4
 80055a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80055a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055aa:	ee07 6a90 	vmov	s15, r6
 80055ae:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 80055b2:	ee36 0a80 	vadd.f32	s0, s13, s0
 80055b6:	b002      	add	sp, #8
 80055b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055bc <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80055bc:	b507      	push	{r0, r1, r2, lr}
 80055be:	ab02      	add	r3, sp, #8
 80055c0:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80055c4:	2120      	movs	r1, #32
 80055c6:	f89d 2000 	ldrb.w	r2, [sp]
 80055ca:	203c      	movs	r0, #60	; 0x3c
 80055cc:	f7ff fe3a 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80055d0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80055d4:	2121      	movs	r1, #33	; 0x21
 80055d6:	203c      	movs	r0, #60	; 0x3c
 80055d8:	f7ff fe34 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80055dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80055e0:	2122      	movs	r1, #34	; 0x22
 80055e2:	203c      	movs	r0, #60	; 0x3c
 80055e4:	f7ff fe2e 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80055e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80055ec:	2123      	movs	r1, #35	; 0x23
 80055ee:	203c      	movs	r0, #60	; 0x3c
 80055f0:	f7ff fe28 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80055f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80055f8:	2124      	movs	r1, #36	; 0x24
 80055fa:	203c      	movs	r0, #60	; 0x3c
}
 80055fc:	b003      	add	sp, #12
 80055fe:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005602:	f7ff be1f 	b.w	8005244 <SENSOR_IO_Write>

08005606 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8005606:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005608:	2122      	movs	r1, #34	; 0x22
 800560a:	203c      	movs	r0, #60	; 0x3c
 800560c:	f7ff fe32 	bl	8005274 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8005610:	f000 00fc 	and.w	r0, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005614:	f040 0203 	orr.w	r2, r0, #3
}
 8005618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800561c:	2122      	movs	r1, #34	; 0x22
 800561e:	203c      	movs	r0, #60	; 0x3c
 8005620:	f7ff be10 	b.w	8005244 <SENSOR_IO_Write>

08005624 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8005624:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005626:	2122      	movs	r1, #34	; 0x22
{  
 8005628:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800562a:	203c      	movs	r0, #60	; 0x3c
 800562c:	f7ff fe22 	bl	8005274 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8005630:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8005634:	b10c      	cbz	r4, 800563a <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8005636:	f042 0220 	orr.w	r2, r2, #32
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
}
 800563a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800563e:	2122      	movs	r1, #34	; 0x22
 8005640:	203c      	movs	r0, #60	; 0x3c
 8005642:	f7ff bdff 	b.w	8005244 <SENSOR_IO_Write>

08005646 <LIS3MDL_MagReadID>:
{
 8005646:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8005648:	f7ff fdfa 	bl	8005240 <SENSOR_IO_Init>
}
 800564c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8005650:	210f      	movs	r1, #15
 8005652:	203c      	movs	r0, #60	; 0x3c
 8005654:	f7ff be0e 	b.w	8005274 <SENSOR_IO_Read>

08005658 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8005658:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800565a:	2121      	movs	r1, #33	; 0x21
{
 800565c:	b085      	sub	sp, #20
 800565e:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005660:	203c      	movs	r0, #60	; 0x3c
 8005662:	f7ff fe07 	bl	8005274 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8005666:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005668:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800566a:	aa02      	add	r2, sp, #8
 800566c:	21a8      	movs	r1, #168	; 0xa8
 800566e:	203c      	movs	r0, #60	; 0x3c
 8005670:	f7ff fe1c 	bl	80052ac <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005674:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005678:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800567c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005680:	f8ad 3000 	strh.w	r3, [sp]
 8005684:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8005688:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800568c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005690:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005694:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005698:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800569c:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80056a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80056a4:	2c40      	cmp	r4, #64	; 0x40
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80056a6:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 80056aa:	d024      	beq.n	80056f6 <LIS3MDL_MagReadXYZ+0x9e>
 80056ac:	d81d      	bhi.n	80056ea <LIS3MDL_MagReadXYZ+0x92>
 80056ae:	b32c      	cbz	r4, 80056fc <LIS3MDL_MagReadXYZ+0xa4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80056b0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005704 <LIS3MDL_MagReadXYZ+0xac>
 80056b4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005708 <LIS3MDL_MagReadXYZ+0xb0>
 80056b8:	2c20      	cmp	r4, #32
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80056ba:	bf08      	it	eq
 80056bc:	eef0 7a47 	vmoveq.f32	s15, s14
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80056c0:	1eab      	subs	r3, r5, #2
 80056c2:	466a      	mov	r2, sp
 80056c4:	3504      	adds	r5, #4
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80056c6:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80056ca:	ee07 1a10 	vmov	s14, r1
 80056ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80056d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80056da:	ee17 1a10 	vmov	r1, s14
 80056de:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 80056e2:	429d      	cmp	r5, r3
 80056e4:	d1ef      	bne.n	80056c6 <LIS3MDL_MagReadXYZ+0x6e>
  }
}
 80056e6:	b005      	add	sp, #20
 80056e8:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80056ea:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005704 <LIS3MDL_MagReadXYZ+0xac>
 80056ee:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800570c <LIS3MDL_MagReadXYZ+0xb4>
 80056f2:	2c60      	cmp	r4, #96	; 0x60
 80056f4:	e7e1      	b.n	80056ba <LIS3MDL_MagReadXYZ+0x62>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80056f6:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005710 <LIS3MDL_MagReadXYZ+0xb8>
 80056fa:	e7e1      	b.n	80056c0 <LIS3MDL_MagReadXYZ+0x68>
  switch(ctrlm & 0x60)
 80056fc:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005714 <LIS3MDL_MagReadXYZ+0xbc>
 8005700:	e7de      	b.n	80056c0 <LIS3MDL_MagReadXYZ+0x68>
 8005702:	bf00      	nop
 8005704:	00000000 	.word	0x00000000
 8005708:	3e947ae1 	.word	0x3e947ae1
 800570c:	3f147ae1 	.word	0x3f147ae1
 8005710:	3edc28f6 	.word	0x3edc28f6
 8005714:	3e0f5c29 	.word	0x3e0f5c29

08005718 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8005718:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800571a:	b2c4      	uxtb	r4, r0
 800571c:	2128      	movs	r1, #40	; 0x28
 800571e:	4620      	mov	r0, r4
 8005720:	f7ff fda8 	bl	8005274 <SENSOR_IO_Read>
 8005724:	2129      	movs	r1, #41	; 0x29
 8005726:	4605      	mov	r5, r0
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff fda3 	bl	8005274 <SENSOR_IO_Read>
 800572e:	212a      	movs	r1, #42	; 0x2a
 8005730:	4606      	mov	r6, r0
 8005732:	4620      	mov	r0, r4
 8005734:	f7ff fd9e 	bl	8005274 <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005738:	0402      	lsls	r2, r0, #16
 800573a:	ea42 2306 	orr.w	r3, r2, r6, lsl #8
 800573e:	ea43 0005 	orr.w	r0, r3, r5

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8005742:	0203      	lsls	r3, r0, #8
    tmp |= 0xFF000000;
 8005744:	bf48      	it	mi
 8005746:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 800574a:	2364      	movs	r3, #100	; 0x64
 800574c:	4358      	muls	r0, r3
 800574e:	bf48      	it	mi
 8005750:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
 8005754:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 8005756:	ee07 0a90 	vmov	s15, r0
 800575a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 800575e:	eddf 7a02 	vldr	s15, [pc, #8]	; 8005768 <LPS22HB_P_ReadPressure+0x50>
 8005762:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	42c80000 	.word	0x42c80000

0800576c <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 800576c:	b538      	push	{r3, r4, r5, lr}
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 800576e:	b2c5      	uxtb	r5, r0
 8005770:	212b      	movs	r1, #43	; 0x2b
 8005772:	4628      	mov	r0, r5
 8005774:	f7ff fd7e 	bl	8005274 <SENSOR_IO_Read>
 8005778:	212c      	movs	r1, #44	; 0x2c
 800577a:	4604      	mov	r4, r0
 800577c:	4628      	mov	r0, r5
 800577e:	f7ff fd79 	bl	8005274 <SENSOR_IO_Read>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8005782:	eb04 2400 	add.w	r4, r4, r0, lsl #8

  raw_data = (tmp * 10) / 100;
 8005786:	b2a4      	uxth	r4, r4
 8005788:	200a      	movs	r0, #10
 800578a:	fbb4 f4f0 	udiv	r4, r4, r0
  
  return ((float)(raw_data / 10.0f));
 800578e:	b223      	sxth	r3, r4
 8005790:	ee00 3a10 	vmov	s0, r3
 8005794:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8005798:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800579c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80057a0:	bd38      	pop	{r3, r4, r5, pc}

080057a2 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80057a2:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80057a4:	b2c4      	uxtb	r4, r0
 80057a6:	211a      	movs	r1, #26
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7ff fd63 	bl	8005274 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80057ae:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80057b2:	f040 0201 	orr.w	r2, r0, #1
 80057b6:	211a      	movs	r1, #26
 80057b8:	4620      	mov	r0, r4
 80057ba:	f7ff fd43 	bl	8005244 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80057be:	2110      	movs	r1, #16
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7ff fd57 	bl	8005274 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80057c6:	f000 008d 	and.w	r0, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80057ca:	f040 0232 	orr.w	r2, r0, #50	; 0x32
 80057ce:	2110      	movs	r1, #16
 80057d0:	4620      	mov	r0, r4
}  
 80057d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80057d6:	f7ff bd35 	b.w	8005244 <SENSOR_IO_Write>

080057da <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 80057da:	f7ff bfe2 	b.w	80057a2 <LPS22HB_Init>

080057de <LPS22HB_T_Init>:
  LPS22HB_Init(DeviceAddr);
 80057de:	f7ff bfe0 	b.w	80057a2 <LPS22HB_Init>

080057e2 <LPS22HB_P_ReadID>:
{  
 80057e2:	b510      	push	{r4, lr}
 80057e4:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 80057e6:	f7ff fd2b 	bl	8005240 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80057ea:	b2e0      	uxtb	r0, r4
 80057ec:	210f      	movs	r1, #15
}
 80057ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80057f2:	f7ff bd3f 	b.w	8005274 <SENSOR_IO_Read>

080057f6 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80057f6:	f002 ba39 	b.w	8007c6c <VL53L0X_get_device_info>
	...

080057fc <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80057fc:	2915      	cmp	r1, #21
 80057fe:	d807      	bhi.n	8005810 <VL53L0X_SetDeviceMode+0x14>
 8005800:	4b05      	ldr	r3, [pc, #20]	; (8005818 <VL53L0X_SetDeviceMode+0x1c>)
 8005802:	2201      	movs	r2, #1
 8005804:	408a      	lsls	r2, r1
 8005806:	4013      	ands	r3, r2
 8005808:	b113      	cbz	r3, 8005810 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800580a:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800580c:	2000      	movs	r0, #0
		break;
 800580e:	4770      	bx	lr
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005810:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	0030000b 	.word	0x0030000b

0800581c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800581c:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800581e:	460a      	mov	r2, r1
{
 8005820:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005822:	2109      	movs	r1, #9
 8005824:	f7fe fec9 	bl	80045ba <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005828:	b918      	cbnz	r0, 8005832 <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 800582a:	7823      	ldrb	r3, [r4, #0]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005832:	bd10      	pop	{r4, pc}

08005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005834:	f001 be4c 	b.w	80074d0 <VL53L0X_set_measurement_timing_budget_micro_seconds>

08005838 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005838:	f001 bd2c 	b.w	8007294 <VL53L0X_set_vcsel_pulse_period>

0800583c <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800583c:	f001 be2e 	b.w	800749c <VL53L0X_get_vcsel_pulse_period>

08005840 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005842:	2300      	movs	r3, #0
{
 8005844:	460c      	mov	r4, r1
 8005846:	4617      	mov	r7, r2
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005848:	2101      	movs	r1, #1
 800584a:	f10d 0207 	add.w	r2, sp, #7
{
 800584e:	4606      	mov	r6, r0
	uint8_t SequenceConfig = 0;
 8005850:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005854:	f7fe feb1 	bl	80045ba <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 8005858:	4605      	mov	r5, r0
 800585a:	b9d8      	cbnz	r0, 8005894 <VL53L0X_SetSequenceStepEnable+0x54>
		if (SequenceStepEnabled == 1) {
 800585c:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 800585e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8005862:	d126      	bne.n	80058b2 <VL53L0X_SetSequenceStepEnable+0x72>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005864:	2c04      	cmp	r4, #4
 8005866:	d83a      	bhi.n	80058de <VL53L0X_SetSequenceStepEnable+0x9e>
 8005868:	e8df f004 	tbb	[pc, r4]
 800586c:	1d1a1703 	.word	0x1d1a1703
 8005870:	20          	.byte	0x20
 8005871:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005872:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005876:	42a3      	cmp	r3, r4
 8005878:	d00c      	beq.n	8005894 <VL53L0X_SetSequenceStepEnable+0x54>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 800587a:	4622      	mov	r2, r4
 800587c:	2101      	movs	r1, #1
 800587e:	4630      	mov	r0, r6
 8005880:	f7fe ff2a 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005884:	4605      	mov	r5, r0
 8005886:	b928      	cbnz	r0, 8005894 <VL53L0X_SetSequenceStepEnable+0x54>
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005888:	6971      	ldr	r1, [r6, #20]
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800588a:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800588e:	4630      	mov	r0, r6
 8005890:	f7ff ffd0 	bl	8005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8005894:	4628      	mov	r0, r5
 8005896:	b003      	add	sp, #12
 8005898:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 800589a:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 800589e:	e7ea      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x04;
 80058a0:	f043 0404 	orr.w	r4, r3, #4
				break;
 80058a4:	e7e7      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x40;
 80058a6:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 80058aa:	e7e4      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x80;
 80058ac:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 80058b0:	e7e1      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
 80058b2:	2c04      	cmp	r4, #4
 80058b4:	d813      	bhi.n	80058de <VL53L0X_SetSequenceStepEnable+0x9e>
 80058b6:	e8df f004 	tbb	[pc, r4]
 80058ba:	0603      	.short	0x0603
 80058bc:	0c09      	.short	0x0c09
 80058be:	0f          	.byte	0x0f
 80058bf:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 80058c0:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 80058c4:	e7d7      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xd7;
 80058c6:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 80058ca:	e7d4      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xfb;
 80058cc:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 80058d0:	e7d1      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xbf;
 80058d2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 80058d6:	e7ce      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0x7f;
 80058d8:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 80058dc:	e7cb      	b.n	8005876 <VL53L0X_SetSequenceStepEnable+0x36>
		if (SequenceStepEnabled == 1) {
 80058de:	f06f 0503 	mvn.w	r5, #3
 80058e2:	e7d7      	b.n	8005894 <VL53L0X_SetSequenceStepEnable+0x54>

080058e4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80058e4:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80058e6:	2300      	movs	r3, #0
{
 80058e8:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80058ea:	f10d 0207 	add.w	r2, sp, #7
 80058ee:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
 80058f0:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80058f4:	f7fe fe61 	bl	80045ba <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80058f8:	b978      	cbnz	r0, 800591a <VL53L0X_GetSequenceStepEnables+0x36>
		Status = sequence_step_enabled(Dev,
 80058fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80058fe:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005902:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005904:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005908:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800590a:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800590e:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005910:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005914:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005916:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005918:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800591a:	b002      	add	sp, #8
 800591c:	bd10      	pop	{r4, pc}

0800591e <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800591e:	b513      	push	{r0, r1, r4, lr}
 8005920:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8005922:	aa01      	add	r2, sp, #4
 8005924:	f001 fc10 	bl	8007148 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8005928:	b978      	cbnz	r0, 800594a <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 800592a:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 800592c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005930:	fbb3 f1f2 	udiv	r1, r3, r2
 8005934:	fb02 3311 	mls	r3, r2, r1, r3
 8005938:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 800593c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005940:	fbb3 f3f2 	udiv	r3, r3, r2
 8005944:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8005948:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800594a:	b002      	add	sp, #8
 800594c:	bd10      	pop	{r4, pc}

0800594e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800594e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005950:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005952:	f10d 0202 	add.w	r2, sp, #2
 8005956:	21f8      	movs	r1, #248	; 0xf8
{
 8005958:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800595a:	f7fe fe77 	bl	800464c <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800595e:	b970      	cbnz	r0, 800597e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8005960:	aa01      	add	r2, sp, #4
 8005962:	2104      	movs	r1, #4
 8005964:	4620      	mov	r0, r4
 8005966:	f7fe fe91 	bl	800468c <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800596a:	b940      	cbnz	r0, 800597e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 800596c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005970:	b11a      	cbz	r2, 800597a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005972:	9b01      	ldr	r3, [sp, #4]
 8005974:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005978:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800597e:	b003      	add	sp, #12
 8005980:	bd30      	pop	{r4, r5, pc}

08005982 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005982:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8005984:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005986:	2000      	movs	r0, #0
 8005988:	4770      	bx	lr

0800598a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800598a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800598c:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800598e:	f10d 0206 	add.w	r2, sp, #6
 8005992:	2120      	movs	r1, #32
{
 8005994:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8005996:	f7fe fe59 	bl	800464c <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800599a:	b928      	cbnz	r0, 80059a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 800599c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80059a0:	b923      	cbnz	r3, 80059ac <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80059a2:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80059a4:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80059a6:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80059a8:	b003      	add	sp, #12
 80059aa:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80059ac:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80059ae:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80059b0:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80059b2:	2301      	movs	r3, #1
 80059b4:	7723      	strb	r3, [r4, #28]
 80059b6:	e7f7      	b.n	80059a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

080059b8 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80059b8:	2905      	cmp	r1, #5
{
 80059ba:	b570      	push	{r4, r5, r6, lr}
 80059bc:	4604      	mov	r4, r0
 80059be:	460e      	mov	r6, r1
 80059c0:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80059c2:	d835      	bhi.n	8005a30 <VL53L0X_SetLimitCheckEnable+0x78>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 80059c4:	b162      	cbz	r2, 80059e0 <VL53L0X_SetLimitCheckEnable+0x28>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80059c6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80059ca:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80059cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 80059ce:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 80059d0:	1e70      	subs	r0, r6, #1
 80059d2:	2804      	cmp	r0, #4
 80059d4:	d807      	bhi.n	80059e6 <VL53L0X_SetLimitCheckEnable+0x2e>
 80059d6:	e8df f000 	tbb	[pc, r0]
 80059da:	170e      	.short	0x170e
 80059dc:	1d1a      	.short	0x1d1a
 80059de:	24          	.byte	0x24
 80059df:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
 80059e0:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e7f4      	b.n	80059d0 <VL53L0X_SetLimitCheckEnable+0x18>

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80059e6:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 80059ea:	4434      	add	r4, r6
 80059ec:	b9e5      	cbnz	r5, 8005a28 <VL53L0X_SetLimitCheckEnable+0x70>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80059ee:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80059f2:	2000      	movs	r0, #0
 80059f4:	e007      	b.n	8005a06 <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_WrWord(Dev,
 80059f6:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80059fa:	2144      	movs	r1, #68	; 0x44
 80059fc:	4620      	mov	r0, r4
 80059fe:	f7fe fe7b 	bl	80046f8 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8005a02:	2800      	cmp	r0, #0
 8005a04:	d0f1      	beq.n	80059ea <VL53L0X_SetLimitCheckEnable+0x32>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a08:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
 8005a0c:	e7ed      	b.n	80059ea <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a0e:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
 8005a12:	e7ea      	b.n	80059ea <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8005a18:	2160      	movs	r1, #96	; 0x60
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f7fe fe7e 	bl	800471c <VL53L0X_UpdateByte>
			break;
 8005a20:	e7ef      	b.n	8005a02 <VL53L0X_SetLimitCheckEnable+0x4a>
			Status = VL53L0X_UpdateByte(Dev,
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	22ef      	movs	r2, #239	; 0xef
 8005a26:	e7f7      	b.n	8005a18 <VL53L0X_SetLimitCheckEnable+0x60>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005a2e:	e7e0      	b.n	80059f2 <VL53L0X_SetLimitCheckEnable+0x3a>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a30:	f06f 0003 	mvn.w	r0, #3
 8005a34:	e7e7      	b.n	8005a06 <VL53L0X_SetLimitCheckEnable+0x4e>

08005a36 <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005a36:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a38:	bf96      	itet	ls
 8005a3a:	1809      	addls	r1, r1, r0
		*pLimitCheckEnable = 0;
 8005a3c:	2300      	movhi	r3, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005a3e:	f891 3028 	ldrbls.w	r3, [r1, #40]	; 0x28
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005a42:	7013      	strb	r3, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a44:	bf94      	ite	ls
 8005a46:	2000      	movls	r0, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005a48:	f06f 0003 	mvnhi.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a4c:	4770      	bx	lr

08005a4e <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005a4e:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005a50:	1843      	adds	r3, r0, r1
{
 8005a52:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005a54:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8005a58:	460e      	mov	r6, r1
 8005a5a:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8005a5c:	b918      	cbnz	r0, 8005a66 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a5e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005a62:	6362      	str	r2, [r4, #52]	; 0x34
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8005a66:	2905      	cmp	r1, #5
 8005a68:	d81b      	bhi.n	8005aa2 <VL53L0X_SetLimitCheckValue+0x54>
 8005a6a:	e8df f001 	tbb	[pc, r1]
 8005a6e:	0903      	.short	0x0903
 8005a70:	16161412 	.word	0x16161412
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a74:	6362      	str	r2, [r4, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a76:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	6365      	str	r5, [r4, #52]	; 0x34
 8005a7e:	e7f1      	b.n	8005a64 <VL53L0X_SetLimitCheckValue+0x16>
			Status = VL53L0X_WrWord(Dev,
 8005a80:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005a84:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8005a86:	4620      	mov	r0, r4
 8005a88:	f7fe fe36 	bl	80046f8 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d1e9      	bne.n	8005a64 <VL53L0X_SetLimitCheckValue+0x16>
 8005a90:	e7f1      	b.n	8005a76 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a92:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 8005a94:	e7ef      	b.n	8005a76 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005a96:	6422      	str	r2, [r4, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 8005a98:	e7ed      	b.n	8005a76 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8005a9a:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005a9e:	2164      	movs	r1, #100	; 0x64
 8005aa0:	e7f1      	b.n	8005a86 <VL53L0X_SetLimitCheckValue+0x38>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005aa2:	f06f 0003 	mvn.w	r0, #3
 8005aa6:	e7dd      	b.n	8005a64 <VL53L0X_SetLimitCheckValue+0x16>

08005aa8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aaa:	4604      	mov	r4, r0
 8005aac:	4615      	mov	r5, r2
 8005aae:	2905      	cmp	r1, #5
 8005ab0:	d82c      	bhi.n	8005b0c <VL53L0X_GetLimitCheckValue+0x64>
 8005ab2:	e8df f001 	tbb	[pc, r1]
 8005ab6:	0703      	.short	0x0703
 8005ab8:	1b1b1917 	.word	0x1b1b1917

	switch (LimitCheckId) {

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005abc:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e021      	b.n	8005b08 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8005ac4:	f10d 0206 	add.w	r2, sp, #6
 8005ac8:	2144      	movs	r1, #68	; 0x44
 8005aca:	f7fe fdbf 	bl	800464c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005ace:	b9d8      	cbnz	r0, 8005b08 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005ad0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 8005ad4:	0253      	lsls	r3, r2, #9
 8005ad6:	b19a      	cbz	r2, 8005b00 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8005ad8:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005ada:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005adc:	2301      	movs	r3, #1
 8005ade:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005ae2:	e011      	b.n	8005b08 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ae4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		if (EnableZeroValue == 1) {
 8005ae6:	e7ea      	b.n	8005abe <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005ae8:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (EnableZeroValue == 1) {
 8005aea:	e7e8      	b.n	8005abe <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8005aec:	f10d 0206 	add.w	r2, sp, #6
 8005af0:	2164      	movs	r1, #100	; 0x64
 8005af2:	f7fe fdab 	bl	800464c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005af6:	b938      	cbnz	r0, 8005b08 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005af8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005afc:	025b      	lsls	r3, r3, #9
		if (EnableZeroValue == 1) {
 8005afe:	e7de      	b.n	8005abe <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005b00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8005b02:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005b04:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8005b08:	b003      	add	sp, #12
 8005b0a:	bd30      	pop	{r4, r5, pc}
			*pLimitCheckValue = TempFix1616;
 8005b0c:	f06f 0003 	mvn.w	r0, #3
 8005b10:	e7fa      	b.n	8005b08 <VL53L0X_GetLimitCheckValue+0x60>

08005b12 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b14:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005b16:	f10d 0207 	add.w	r2, sp, #7
 8005b1a:	2101      	movs	r1, #1
{
 8005b1c:	4604      	mov	r4, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005b1e:	f7fe fd4c 	bl	80045ba <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8005b22:	b938      	cbnz	r0, 8005b34 <VL53L0X_GetWrapAroundCheckEnable+0x22>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005b24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b28:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (data & (0x01 << 7))
			*pWrapAroundCheckEnable = 0x01;
 8005b2c:	09db      	lsrs	r3, r3, #7
 8005b2e:	702b      	strb	r3, [r5, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005b30:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005b34:	b003      	add	sp, #12
 8005b36:	bd30      	pop	{r4, r5, pc}

08005b38 <VL53L0X_GetDeviceParameters>:
{
 8005b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005b3c:	7c03      	ldrb	r3, [r0, #16]
{
 8005b3e:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005b40:	f801 3b08 	strb.w	r3, [r1], #8
{
 8005b44:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005b46:	f7ff ff02 	bl	800594e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8005b4a:	bb40      	cbnz	r0, 8005b9e <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005b4c:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005b4e:	f104 0110 	add.w	r1, r4, #16
 8005b52:	4628      	mov	r0, r5
 8005b54:	f7ff ff19 	bl	800598a <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8005b58:	bb08      	cbnz	r0, 8005b9e <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005b5a:	f104 0114 	add.w	r1, r4, #20
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 fbc5 	bl	80062ee <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8005b64:	b9d8      	cbnz	r0, 8005b9e <VL53L0X_GetDeviceParameters+0x66>
 8005b66:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8005b6a:	f105 0928 	add.w	r9, r5, #40	; 0x28
 8005b6e:	f104 0818 	add.w	r8, r4, #24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005b72:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005b74:	463a      	mov	r2, r7
 8005b76:	b2b1      	uxth	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7ff ff95 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8005b7e:	b970      	cbnz	r0, 8005b9e <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005b80:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005b82:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 8005b86:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005b8a:	2e06      	cmp	r6, #6
 8005b8c:	f107 0704 	add.w	r7, r7, #4
 8005b90:	d1f0      	bne.n	8005b74 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005b92:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005b96:	4628      	mov	r0, r5
 8005b98:	f7ff ffbb 	bl	8005b12 <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005b9c:	b108      	cbz	r0, 8005ba2 <VL53L0X_GetDeviceParameters+0x6a>
}
 8005b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005ba2:	1d21      	adds	r1, r4, #4
 8005ba4:	4628      	mov	r0, r5
}
 8005ba6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005baa:	f001 bcf9 	b.w	80075a0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

08005bb0 <VL53L0X_DataInit>:
{
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005bb2:	2200      	movs	r2, #0
{
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005bb8:	2188      	movs	r1, #136	; 0x88
 8005bba:	f7fe fd8d 	bl	80046d8 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005bbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bc2:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005bc6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005bca:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005bce:	4a31      	ldr	r2, [pc, #196]	; (8005c94 <VL53L0X_DataInit+0xe4>)
 8005bd0:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005bd4:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005bd6:	4a30      	ldr	r2, [pc, #192]	; (8005c98 <VL53L0X_DataInit+0xe8>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005bd8:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005bdc:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005be0:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005be2:	4669      	mov	r1, sp
 8005be4:	4628      	mov	r0, r5
 8005be6:	f7ff ffa7 	bl	8005b38 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8005bea:	4604      	mov	r4, r0
 8005bec:	b970      	cbnz	r0, 8005c0c <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005bee:	f8ad 0000 	strh.w	r0, [sp]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005bf2:	466e      	mov	r6, sp
 8005bf4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005bf6:	f105 0710 	add.w	r7, r5, #16
 8005bfa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005bfc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005bfe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005c00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005c02:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005c04:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005c08:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005c0c:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <VL53L0X_DataInit+0xec>)
 8005c0e:	4a24      	ldr	r2, [pc, #144]	; (8005ca0 <VL53L0X_DataInit+0xf0>)
 8005c10:	e9c5 234d 	strd	r2, r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005c14:	2301      	movs	r3, #1
 8005c16:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005c1a:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 8005c1c:	bbb4      	cbnz	r4, 8005c8c <VL53L0X_DataInit+0xdc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005c1e:	b2b1      	uxth	r1, r6
 8005c20:	2201      	movs	r2, #1
 8005c22:	4628      	mov	r0, r5
 8005c24:	f7ff fec8 	bl	80059b8 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005c28:	3601      	adds	r6, #1
 8005c2a:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005c2c:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005c2e:	d1f5      	bne.n	8005c1c <VL53L0X_DataInit+0x6c>
	if (Status == VL53L0X_ERROR_NONE)
 8005c30:	bb60      	cbnz	r0, 8005c8c <VL53L0X_DataInit+0xdc>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c32:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005c34:	4602      	mov	r2, r0
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c36:	4606      	mov	r6, r0
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005c38:	2104      	movs	r1, #4
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f7ff febc 	bl	80059b8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005c40:	4604      	mov	r4, r0
 8005c42:	bb18      	cbnz	r0, 8005c8c <VL53L0X_DataInit+0xdc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005c44:	4602      	mov	r2, r0
 8005c46:	2105      	movs	r1, #5
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff feb5 	bl	80059b8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005c4e:	4604      	mov	r4, r0
 8005c50:	b9e0      	cbnz	r0, 8005c8c <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005c52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005c56:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005c58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f7ff fef5 	bl	8005a4e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005c64:	4604      	mov	r4, r0
 8005c66:	b988      	cbnz	r0, 8005c8c <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005c68:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
 8005c72:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005c76:	2101      	movs	r1, #1
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f7fe fd2d 	bl	80046d8 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8005c84:	4604      	mov	r4, r0
 8005c86:	b908      	cbnz	r0, 8005c8c <VL53L0X_DataInit+0xdc>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005c88:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
}
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	b011      	add	sp, #68	; 0x44
 8005c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	00016b85 	.word	0x00016b85
 8005c98:	000970a4 	.word	0x000970a4
 8005c9c:	0a0001f4 	.word	0x0a0001f4
 8005ca0:	03840064 	.word	0x03840064

08005ca4 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f000 bd50 	b.w	800674a <VL53L0X_perform_ref_calibration>

08005caa <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005caa:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005cae:	b08e      	sub	sp, #56	; 0x38
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005cb0:	230c      	movs	r3, #12
{
 8005cb2:	460c      	mov	r4, r1
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005cb4:	aa04      	add	r2, sp, #16
 8005cb6:	2114      	movs	r1, #20
{
 8005cb8:	4605      	mov	r5, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005cba:	f7fe fcb1 	bl	8004620 <VL53L0X_ReadMulti>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	4684      	mov	ip, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d16e      	bne.n	8005da4 <VL53L0X_GetRangingMeasurementData+0xfa>
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005cc6:	6063      	str	r3, [r4, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005cc8:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005ccc:	f89d 3016 	ldrb.w	r3, [sp, #22]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005cd0:	f89d 1018 	ldrb.w	r1, [sp, #24]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005cd4:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005cd6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005cda:	f89d 3019 	ldrb.w	r3, [sp, #25]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005cde:	f89d 701a 	ldrb.w	r7, [sp, #26]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005ce2:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005ce4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	025b      	lsls	r3, r3, #9

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005cec:	f89d 1012 	ldrb.w	r1, [sp, #18]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005cf0:	6123      	str	r3, [r4, #16]
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005cf2:	f89d 3013 	ldrb.w	r3, [sp, #19]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005cf6:	f89d 001b 	ldrb.w	r0, [sp, #27]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005cfa:	f8b5 614e 	ldrh.w	r6, [r5, #334]	; 0x14e
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005cfe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005d02:	b292      	uxth	r2, r2
 8005d04:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005d06:	b29b      	uxth	r3, r3
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005d08:	eb00 2007 	add.w	r0, r0, r7, lsl #8
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005d0c:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005d0e:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005d10:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		DeviceRangeStatus = localBuffer[0];
 8005d14:	f89d 1010 	ldrb.w	r1, [sp, #16]
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005d18:	f895 c131 	ldrb.w	ip, [r5, #305]	; 0x131
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005d1c:	b287      	uxth	r7, r0
		if (LinearityCorrectiveGain != 1000) {
 8005d1e:	d00c      	beq.n	8005d3a <VL53L0X_GetRangingMeasurementData+0x90>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005d20:	fb07 f006 	mul.w	r0, r7, r6
 8005d24:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8005d28:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005d2c:	fbb0 f0f6 	udiv	r0, r0, r6
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005d30:	7f2e      	ldrb	r6, [r5, #28]
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005d32:	6a2f      	ldr	r7, [r5, #32]
			if (XTalkCompensationEnable) {
 8005d34:	2e00      	cmp	r6, #0
 8005d36:	d139      	bne.n	8005dac <VL53L0X_GetRangingMeasurementData+0x102>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8005d38:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8005d3a:	f1bc 0f00 	cmp.w	ip, #0
 8005d3e:	d041      	beq.n	8005dc4 <VL53L0X_GetRangingMeasurementData+0x11a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005d40:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8005d42:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005d44:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005d46:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005d48:	f10d 000f 	add.w	r0, sp, #15
 8005d4c:	e9cd 4000 	strd	r4, r0, [sp]
 8005d50:	4628      	mov	r0, r5
 8005d52:	f001 fe71 	bl	8007a38 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005d56:	4684      	mov	ip, r0
 8005d58:	bb20      	cbnz	r0, 8005da4 <VL53L0X_GetRangingMeasurementData+0xfa>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005d5a:	f89d e00f 	ldrb.w	lr, [sp, #15]
 8005d5e:	f884 e018 	strb.w	lr, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005d62:	f105 0650 	add.w	r6, r5, #80	; 0x50
 8005d66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005d68:	af07      	add	r7, sp, #28
 8005d6a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005d6c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005d70:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005d72:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005d76:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005d7a:	8aa2      	ldrh	r2, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005d7c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8005d80:	e9d4 4901 	ldrd	r4, r9, [r4, #4]
 8005d84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d88:	e9cd 4908 	strd	r4, r9, [sp, #32]
 8005d8c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8005d90:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 8005d94:	ac07      	add	r4, sp, #28
 8005d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d98:	3550      	adds	r5, #80	; 0x50
 8005d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d9c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005da0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005da4:	4660      	mov	r0, ip
 8005da6:	b00e      	add	sp, #56	; 0x38
 8005da8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
					* EffectiveSpadRtnCount) >> 8))
 8005dac:	b2bf      	uxth	r7, r7
 8005dae:	435f      	muls	r7, r3
				if ((SignalRate
 8005db0:	ebb2 2f27 	cmp.w	r2, r7, asr #8
					* EffectiveSpadRtnCount) >> 8))
 8005db4:	ea4f 2627 	mov.w	r6, r7, asr #8
				if ((SignalRate
 8005db8:	d107      	bne.n	8005dca <VL53L0X_GetRangingMeasurementData+0x120>
					if (RangeFractionalEnable)
 8005dba:	f1bc 0f00 	cmp.w	ip, #0
 8005dbe:	d10a      	bne.n	8005dd6 <VL53L0X_GetRangingMeasurementData+0x12c>
						XtalkRangeMilliMeter = 8888
 8005dc0:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005dc4:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e7bd      	b.n	8005d46 <VL53L0X_GetRangingMeasurementData+0x9c>
					(tmpuint16 * SignalRate)
 8005dca:	b280      	uxth	r0, r0
 8005dcc:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 8005dce:	1b96      	subs	r6, r2, r6
						/ (SignalRate
 8005dd0:	fbb0 f0f6 	udiv	r0, r0, r6
 8005dd4:	e7b0      	b.n	8005d38 <VL53L0X_GetRangingMeasurementData+0x8e>
						XtalkRangeMilliMeter = 8888;
 8005dd6:	f242 27b8 	movw	r7, #8888	; 0x22b8
 8005dda:	e7b1      	b.n	8005d40 <VL53L0X_GetRangingMeasurementData+0x96>

08005ddc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dde:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005de0:	210e      	movs	r1, #14
 8005de2:	f10d 0206 	add.w	r2, sp, #6
{
 8005de6:	461d      	mov	r5, r3
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005de8:	4c0b      	ldr	r4, [pc, #44]	; (8005e18 <VL53L0X_GetInterruptThresholds+0x3c>)
{
 8005dea:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005dec:	f7fe fc2e 	bl	800464c <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005df0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005df4:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8005df8:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005dfa:	b950      	cbnz	r0, 8005e12 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005dfc:	f10d 0206 	add.w	r2, sp, #6
 8005e00:	210c      	movs	r1, #12
 8005e02:	4630      	mov	r0, r6
 8005e04:	f7fe fc22 	bl	800464c <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005e08:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005e0c:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8005e10:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005e12:	b003      	add	sp, #12
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e16:	bf00      	nop
 8005e18:	1ffe0000 	.word	0x1ffe0000

08005e1c <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8005e1c:	b5e3      	push	{r0, r1, r5, r6, r7, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005e1e:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8005e22:	3b01      	subs	r3, #1
 8005e24:	2b02      	cmp	r3, #2
{
 8005e26:	4607      	mov	r7, r0
 8005e28:	460d      	mov	r5, r1
	if ((InterruptConfig ==
 8005e2a:	d833      	bhi.n	8005e94 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005e2c:	ab01      	add	r3, sp, #4
 8005e2e:	466a      	mov	r2, sp
 8005e30:	2101      	movs	r1, #1
 8005e32:	f7ff ffd3 	bl	8005ddc <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005e3c:	4606      	mov	r6, r0
		if (((ThresholdLow > 255*65536) ||
 8005e3e:	d803      	bhi.n	8005e48 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005e46:	d906      	bls.n	8005e56 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8005e48:	b92e      	cbnz	r6, 8005e56 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8005e4a:	b13d      	cbz	r5, 8005e5c <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005e4c:	4912      	ldr	r1, [pc, #72]	; (8005e98 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f001 fc0b 	bl	800766a <VL53L0X_load_tuning_settings>
 8005e54:	4606      	mov	r6, r0
}
 8005e56:	4630      	mov	r0, r6
 8005e58:	b002      	add	sp, #8
 8005e5a:	bde0      	pop	{r5, r6, r7, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	21ff      	movs	r1, #255	; 0xff
 8005e60:	4638      	mov	r0, r7
 8005e62:	f7fe fc39 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005e66:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005e68:	4605      	mov	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005e6a:	2170      	movs	r1, #112	; 0x70
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7fe fc33 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e72:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005e74:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e76:	21ff      	movs	r1, #255	; 0xff
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f7fe fc2d 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005e7e:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e80:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005e82:	4632      	mov	r2, r6
 8005e84:	2180      	movs	r1, #128	; 0x80
 8005e86:	4638      	mov	r0, r7
 8005e88:	f7fe fc26 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e8c:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005e8e:	4328      	orrs	r0, r5
 8005e90:	b246      	sxtb	r6, r0
	return Status;
 8005e92:	e7e0      	b.n	8005e56 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e94:	2600      	movs	r6, #0
 8005e96:	e7de      	b.n	8005e56 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8005e98:	2000026c 	.word	0x2000026c

08005e9c <VL53L0X_StartMeasurement>:
{
 8005e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005e9e:	7c01      	ldrb	r1, [r0, #16]
	switch (DeviceMode) {
 8005ea0:	2901      	cmp	r1, #1
{
 8005ea2:	4604      	mov	r4, r0
	switch (DeviceMode) {
 8005ea4:	d024      	beq.n	8005ef0 <VL53L0X_StartMeasurement+0x54>
 8005ea6:	2903      	cmp	r1, #3
 8005ea8:	d02f      	beq.n	8005f0a <VL53L0X_StartMeasurement+0x6e>
 8005eaa:	bb99      	cbnz	r1, 8005f14 <VL53L0X_StartMeasurement+0x78>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005eac:	2201      	movs	r2, #1
 8005eae:	f7fe fc13 	bl	80046d8 <VL53L0X_WrByte>
		Byte = StartStopByte;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8005eb8:	b198      	cbz	r0, 8005ee2 <VL53L0X_StartMeasurement+0x46>
}
 8005eba:	b003      	add	sp, #12
 8005ebc:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	f10d 0207 	add.w	r2, sp, #7
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7fe fb78 	bl	80045ba <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
 8005eca:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005ece:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 8005ed0:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005ed4:	d507      	bpl.n	8005ee6 <VL53L0X_StartMeasurement+0x4a>
				&& (Status == VL53L0X_ERROR_NONE)
 8005ed6:	b930      	cbnz	r0, 8005ee6 <VL53L0X_StartMeasurement+0x4a>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005ed8:	2dc8      	cmp	r5, #200	; 0xc8
 8005eda:	d1f0      	bne.n	8005ebe <VL53L0X_StartMeasurement+0x22>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005edc:	f06f 0006 	mvn.w	r0, #6
 8005ee0:	e7eb      	b.n	8005eba <VL53L0X_StartMeasurement+0x1e>
			LoopNb = 0;
 8005ee2:	4605      	mov	r5, r0
 8005ee4:	e7f1      	b.n	8005eca <VL53L0X_StartMeasurement+0x2e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005ee6:	2dc8      	cmp	r5, #200	; 0xc8
 8005ee8:	bf08      	it	eq
 8005eea:	f06f 0006 	mvneq.w	r0, #6
 8005eee:	e7e4      	b.n	8005eba <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005ef0:	f7ff ff94 	bl	8005e1c <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8005ef4:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f7fe fbed 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d1db      	bne.n	8005eba <VL53L0X_StartMeasurement+0x1e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005f02:	2304      	movs	r3, #4
 8005f04:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8005f08:	e7d7      	b.n	8005eba <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	f7ff ff86 	bl	8005e1c <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8005f10:	2204      	movs	r2, #4
 8005f12:	e7f0      	b.n	8005ef6 <VL53L0X_StartMeasurement+0x5a>
	switch (DeviceMode) {
 8005f14:	f06f 0007 	mvn.w	r0, #7
 8005f18:	e7cf      	b.n	8005eba <VL53L0X_StartMeasurement+0x1e>

08005f1a <VL53L0X_PerformSingleMeasurement>:
{
 8005f1a:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005f1c:	7c05      	ldrb	r5, [r0, #16]
{
 8005f1e:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005f20:	b125      	cbz	r5, 8005f2c <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 fd5a 	bl	80069dc <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8005f28:	b128      	cbz	r0, 8005f36 <VL53L0X_PerformSingleMeasurement+0x1c>
}
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8005f2c:	f7ff ffb6 	bl	8005e9c <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8005f30:	2800      	cmp	r0, #0
 8005f32:	d0f6      	beq.n	8005f22 <VL53L0X_PerformSingleMeasurement+0x8>
 8005f34:	e7f9      	b.n	8005f2a <VL53L0X_PerformSingleMeasurement+0x10>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	d1f7      	bne.n	8005f2a <VL53L0X_PerformSingleMeasurement+0x10>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8005f40:	e7f3      	b.n	8005f2a <VL53L0X_PerformSingleMeasurement+0x10>

08005f42 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f44:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005f46:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8005f48:	2201      	movs	r2, #1
 8005f4a:	210b      	movs	r1, #11
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7fe fbc3 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005f52:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8005f54:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8005f56:	210b      	movs	r1, #11
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7fe fbbd 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005f5e:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8005f62:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8005f64:	2113      	movs	r1, #19
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7fe fb27 	bl	80045ba <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005f6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8005f70:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 8005f72:	4304      	orrs	r4, r0
		LoopCount++;
 8005f74:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8005f76:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8005f78:	b260      	sxtb	r0, r4
		LoopCount++;
 8005f7a:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8005f7c:	d005      	beq.n	8005f8a <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8005f7e:	2d03      	cmp	r5, #3
 8005f80:	d008      	beq.n	8005f94 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d0e0      	beq.n	8005f48 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005f86:	b002      	add	sp, #8
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005f8a:	2d03      	cmp	r5, #3
 8005f8c:	bf08      	it	eq
 8005f8e:	f06f 000b 	mvneq.w	r0, #11
 8005f92:	e7f8      	b.n	8005f86 <VL53L0X_ClearInterruptMask+0x44>
 8005f94:	f06f 000b 	mvn.w	r0, #11
 8005f98:	e7f5      	b.n	8005f86 <VL53L0X_ClearInterruptMask+0x44>

08005f9a <VL53L0X_PerformSingleRangingMeasurement>:
{
 8005f9a:	b513      	push	{r0, r1, r4, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	7403      	strb	r3, [r0, #16]
{
 8005fa0:	9101      	str	r1, [sp, #4]
 8005fa2:	4604      	mov	r4, r0
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005fa4:	f7ff ffb9 	bl	8005f1a <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8005fa8:	9901      	ldr	r1, [sp, #4]
 8005faa:	b950      	cbnz	r0, 8005fc2 <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005fac:	4620      	mov	r0, r4
 8005fae:	f7ff fe7c 	bl	8005caa <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8005fb2:	b930      	cbnz	r0, 8005fc2 <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4620      	mov	r0, r4
}
 8005fb8:	b002      	add	sp, #8
 8005fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005fbe:	f7ff bfc0 	b.w	8005f42 <VL53L0X_ClearInterruptMask>
}
 8005fc2:	b002      	add	sp, #8
 8005fc4:	bd10      	pop	{r4, pc}

08005fc6 <VL53L0X_SetGpioConfig.part.0>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005fc6:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
 8005fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fcc:	4680      	mov	r8, r0
 8005fce:	4614      	mov	r4, r2
 8005fd0:	461d      	mov	r5, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005fd2:	d168      	bne.n	80060a6 <VL53L0X_SetGpioConfig.part.0+0xe0>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	21ff      	movs	r1, #255	; 0xff
 8005fd8:	f7fe fb7e 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005fdc:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005fde:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f7fe fb78 	bl	80046d8 <VL53L0X_WrByte>
 8005fe8:	4320      	orrs	r0, r4
 8005fea:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005fec:	2200      	movs	r2, #0
 8005fee:	21ff      	movs	r1, #255	; 0xff
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	f7fe fb71 	bl	80046d8 <VL53L0X_WrByte>
 8005ff6:	4320      	orrs	r0, r4
 8005ff8:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	2180      	movs	r1, #128	; 0x80
 8005ffe:	4640      	mov	r0, r8
 8006000:	f7fe fb6a 	bl	80046d8 <VL53L0X_WrByte>
 8006004:	4338      	orrs	r0, r7
 8006006:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006008:	2202      	movs	r2, #2
 800600a:	2185      	movs	r1, #133	; 0x85
 800600c:	4640      	mov	r0, r8
 800600e:	f7fe fb63 	bl	80046d8 <VL53L0X_WrByte>
 8006012:	4330      	orrs	r0, r6
 8006014:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006016:	2204      	movs	r2, #4
 8006018:	21ff      	movs	r1, #255	; 0xff
 800601a:	4640      	mov	r0, r8
 800601c:	f7fe fb5c 	bl	80046d8 <VL53L0X_WrByte>
 8006020:	4328      	orrs	r0, r5
 8006022:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006024:	2200      	movs	r2, #0
 8006026:	21cd      	movs	r1, #205	; 0xcd
 8006028:	4640      	mov	r0, r8
 800602a:	f7fe fb55 	bl	80046d8 <VL53L0X_WrByte>
 800602e:	4320      	orrs	r0, r4
 8006030:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006032:	2211      	movs	r2, #17
 8006034:	21cc      	movs	r1, #204	; 0xcc
 8006036:	4640      	mov	r0, r8
 8006038:	f7fe fb4e 	bl	80046d8 <VL53L0X_WrByte>
 800603c:	4338      	orrs	r0, r7
 800603e:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006040:	2207      	movs	r2, #7
 8006042:	21ff      	movs	r1, #255	; 0xff
 8006044:	4640      	mov	r0, r8
 8006046:	f7fe fb47 	bl	80046d8 <VL53L0X_WrByte>
 800604a:	4330      	orrs	r0, r6
 800604c:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800604e:	2200      	movs	r2, #0
 8006050:	21be      	movs	r1, #190	; 0xbe
 8006052:	4640      	mov	r0, r8
 8006054:	f7fe fb40 	bl	80046d8 <VL53L0X_WrByte>
 8006058:	4328      	orrs	r0, r5
 800605a:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800605c:	2206      	movs	r2, #6
 800605e:	21ff      	movs	r1, #255	; 0xff
 8006060:	4640      	mov	r0, r8
 8006062:	f7fe fb39 	bl	80046d8 <VL53L0X_WrByte>
 8006066:	4320      	orrs	r0, r4
 8006068:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800606a:	2209      	movs	r2, #9
 800606c:	21cc      	movs	r1, #204	; 0xcc
 800606e:	4640      	mov	r0, r8
 8006070:	f7fe fb32 	bl	80046d8 <VL53L0X_WrByte>
 8006074:	4338      	orrs	r0, r7
 8006076:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006078:	2200      	movs	r2, #0
 800607a:	21ff      	movs	r1, #255	; 0xff
 800607c:	4640      	mov	r0, r8
 800607e:	f7fe fb2b 	bl	80046d8 <VL53L0X_WrByte>
 8006082:	4330      	orrs	r0, r6
 8006084:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006086:	2201      	movs	r2, #1
 8006088:	21ff      	movs	r1, #255	; 0xff
 800608a:	4640      	mov	r0, r8
 800608c:	f7fe fb24 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006090:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006092:	4328      	orrs	r0, r5
 8006094:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006096:	4611      	mov	r1, r2
 8006098:	4640      	mov	r0, r8
 800609a:	f7fe fb1d 	bl	80046d8 <VL53L0X_WrByte>
 800609e:	4320      	orrs	r0, r4
 80060a0:	b240      	sxtb	r0, r0
}
 80060a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (Functionality) {
 80060a6:	2a04      	cmp	r2, #4
 80060a8:	d817      	bhi.n	80060da <VL53L0X_SetGpioConfig.part.0+0x114>
			Status = VL53L0X_WrByte(Dev,
 80060aa:	210a      	movs	r1, #10
 80060ac:	f7fe fb14 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d1f6      	bne.n	80060a2 <VL53L0X_SetGpioConfig.part.0+0xdc>
				data = (uint8_t)(1 << 4);
 80060b4:	2d00      	cmp	r5, #0
			Status = VL53L0X_UpdateByte(Dev,
 80060b6:	bf0c      	ite	eq
 80060b8:	462b      	moveq	r3, r5
 80060ba:	2310      	movne	r3, #16
 80060bc:	22ef      	movs	r2, #239	; 0xef
 80060be:	2184      	movs	r1, #132	; 0x84
 80060c0:	4640      	mov	r0, r8
 80060c2:	f7fe fb2b 	bl	800471c <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d1eb      	bne.n	80060a2 <VL53L0X_SetGpioConfig.part.0+0xdc>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80060ca:	f888 40da 	strb.w	r4, [r8, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80060ce:	4601      	mov	r1, r0
 80060d0:	4640      	mov	r0, r8
}
 80060d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80060d6:	f7ff bf34 	b.w	8005f42 <VL53L0X_ClearInterruptMask>
				Status =
 80060da:	f06f 000a 	mvn.w	r0, #10
 80060de:	e7e0      	b.n	80060a2 <VL53L0X_SetGpioConfig.part.0+0xdc>

080060e0 <VL53L0X_StaticInit>:
{
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	b094      	sub	sp, #80	; 0x50
 80060e4:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80060e6:	2240      	movs	r2, #64	; 0x40
 80060e8:	2100      	movs	r1, #0
 80060ea:	a804      	add	r0, sp, #16
 80060ec:	f01c f884 	bl	80221f8 <memset>
	uint16_t tempword = 0;
 80060f0:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 80060f2:	2101      	movs	r1, #1
 80060f4:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 80060f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
 80060fa:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
 80060fe:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
 8006102:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006104:	f000 fcba 	bl	8006a7c <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006108:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 800610c:	2a01      	cmp	r2, #1
 800610e:	d806      	bhi.n	800611e <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006110:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8006114:	f040 80ad 	bne.w	8006272 <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
 8006118:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 800611a:	f240 80ac 	bls.w	8006276 <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800611e:	aa01      	add	r2, sp, #4
 8006120:	a902      	add	r1, sp, #8
 8006122:	4628      	mov	r0, r5
 8006124:	f000 fb2d 	bl	8006782 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006128:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800612a:	2800      	cmp	r0, #0
 800612c:	f040 809e 	bne.w	800626c <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
 8006130:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 80a2 	bne.w	800627e <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800613a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800613e:	4628      	mov	r0, r5
 8006140:	f001 fa93 	bl	800766a <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8006144:	4604      	mov	r4, r0
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8090 	bne.w	800626c <VL53L0X_StaticInit+0x18c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800614c:	4623      	mov	r3, r4
 800614e:	4621      	mov	r1, r4
 8006150:	2204      	movs	r2, #4
 8006152:	4628      	mov	r0, r5
 8006154:	f7ff ff37 	bl	8005fc6 <VL53L0X_SetGpioConfig.part.0>
	if (Status == VL53L0X_ERROR_NONE) {
 8006158:	4604      	mov	r4, r0
 800615a:	2800      	cmp	r0, #0
 800615c:	f040 8086 	bne.w	800626c <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006160:	2201      	movs	r2, #1
 8006162:	21ff      	movs	r1, #255	; 0xff
 8006164:	4628      	mov	r0, r5
 8006166:	f7fe fab7 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800616a:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800616e:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006170:	2184      	movs	r1, #132	; 0x84
 8006172:	4628      	mov	r0, r5
 8006174:	f7fe fa6a 	bl	800464c <VL53L0X_RdWord>
 8006178:	4330      	orrs	r0, r6
 800617a:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800617c:	4622      	mov	r2, r4
 800617e:	21ff      	movs	r1, #255	; 0xff
 8006180:	4628      	mov	r0, r5
 8006182:	f7fe faa9 	bl	80046d8 <VL53L0X_WrByte>
 8006186:	4330      	orrs	r0, r6
 8006188:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800618a:	2c00      	cmp	r4, #0
 800618c:	d16e      	bne.n	800626c <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800618e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006198:	a904      	add	r1, sp, #16
 800619a:	4628      	mov	r0, r5
 800619c:	f7ff fccc 	bl	8005b38 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80061a0:	4604      	mov	r4, r0
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d162      	bne.n	800626c <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80061a6:	f10d 0103 	add.w	r1, sp, #3
 80061aa:	4628      	mov	r0, r5
 80061ac:	f7ff fb36 	bl	800581c <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 80061b0:	4604      	mov	r4, r0
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d15a      	bne.n	800626c <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80061b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80061ba:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80061be:	ae04      	add	r6, sp, #16
 80061c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80061c2:	f105 0410 	add.w	r4, r5, #16
 80061c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80061ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80061ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80061d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 80061d8:	f10d 0203 	add.w	r2, sp, #3
 80061dc:	2101      	movs	r1, #1
 80061de:	4628      	mov	r0, r5
 80061e0:	f7fe f9eb 	bl	80045ba <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 80061e4:	4604      	mov	r4, r0
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d140      	bne.n	800626c <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80061ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80061ee:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80061f2:	4602      	mov	r2, r0
 80061f4:	4601      	mov	r1, r0
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7ff fb22 	bl	8005840 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80061fc:	4604      	mov	r4, r0
 80061fe:	bba8      	cbnz	r0, 800626c <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006200:	4602      	mov	r2, r0
 8006202:	2102      	movs	r1, #2
 8006204:	4628      	mov	r0, r5
 8006206:	f7ff fb1b 	bl	8005840 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800620a:	4604      	mov	r4, r0
 800620c:	bb70      	cbnz	r0, 800626c <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800620e:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006210:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006212:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006216:	f10d 0205 	add.w	r2, sp, #5
 800621a:	4628      	mov	r0, r5
 800621c:	f001 f93e 	bl	800749c <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8006220:	4604      	mov	r4, r0
 8006222:	bb18      	cbnz	r0, 800626c <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006224:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006228:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800622c:	f10d 0205 	add.w	r2, sp, #5
 8006230:	2101      	movs	r1, #1
 8006232:	4628      	mov	r0, r5
 8006234:	f001 f932 	bl	800749c <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8006238:	4604      	mov	r4, r0
 800623a:	b9b8      	cbnz	r0, 800626c <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800623c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006240:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 8006244:	aa03      	add	r2, sp, #12
 8006246:	2103      	movs	r1, #3
 8006248:	4628      	mov	r0, r5
 800624a:	f7ff fb68 	bl	800591e <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 800624e:	4604      	mov	r4, r0
 8006250:	b960      	cbnz	r0, 800626c <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8006258:	aa03      	add	r2, sp, #12
 800625a:	2104      	movs	r1, #4
 800625c:	4628      	mov	r0, r5
 800625e:	f7ff fb5e 	bl	800591e <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8006262:	4604      	mov	r4, r0
 8006264:	b910      	cbnz	r0, 800626c <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 800626c:	4620      	mov	r0, r4
 800626e:	b014      	add	sp, #80	; 0x50
 8006270:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 8006272:	290c      	cmp	r1, #12
 8006274:	e751      	b.n	800611a <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006276:	4628      	mov	r0, r5
 8006278:	f000 f910 	bl	800649c <VL53L0X_set_reference_spads>
 800627c:	e754      	b.n	8006128 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 800627e:	4901      	ldr	r1, [pc, #4]	; (8006284 <VL53L0X_StaticInit+0x1a4>)
 8006280:	e75d      	b.n	800613e <VL53L0X_StaticInit+0x5e>
 8006282:	bf00      	nop
 8006284:	20000422 	.word	0x20000422

08006288 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006288:	b513      	push	{r0, r1, r4, lr}
 800628a:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800628c:	f10d 0207 	add.w	r2, sp, #7
 8006290:	2113      	movs	r1, #19
 8006292:	f7fe f992 	bl	80045ba <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8006296:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 800629a:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 800629e:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80062a2:	bf18      	it	ne
 80062a4:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 80062a8:	6022      	str	r2, [r4, #0]
}
 80062aa:	b002      	add	sp, #8
 80062ac:	bd10      	pop	{r4, pc}

080062ae <VL53L0X_GetMeasurementDataReady>:
{
 80062ae:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 80062b0:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 80062b4:	2b04      	cmp	r3, #4
{
 80062b6:	460c      	mov	r4, r1
	if (InterruptConfig ==
 80062b8:	d10b      	bne.n	80062d2 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80062ba:	a901      	add	r1, sp, #4
 80062bc:	f7ff ffe4 	bl	8006288 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d101      	bne.n	80062ca <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	7023      	strb	r3, [r4, #0]
}
 80062ce:	b002      	add	sp, #8
 80062d0:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80062d2:	aa01      	add	r2, sp, #4
 80062d4:	2114      	movs	r1, #20
 80062d6:	f7fe f970 	bl	80045ba <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1f7      	bne.n	80062ce <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 80062de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80062e2:	07db      	lsls	r3, r3, #31
 80062e4:	d4ef      	bmi.n	80062c6 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 80062e6:	7020      	strb	r0, [r4, #0]
 80062e8:	e7f1      	b.n	80062ce <VL53L0X_GetMeasurementDataReady+0x20>

080062ea <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80062ea:	f000 ba4a 	b.w	8006782 <VL53L0X_perform_ref_spad_management>

080062ee <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80062ee:	b513      	push	{r0, r1, r4, lr}
 80062f0:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80062f2:	f10d 0206 	add.w	r2, sp, #6
 80062f6:	2128      	movs	r1, #40	; 0x28
 80062f8:	f7fe f9a8 	bl	800464c <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80062fc:	b978      	cbnz	r0, 800631e <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80062fe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006302:	f3c2 030b 	ubfx	r3, r2, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006306:	f412 6f00 	tst.w	r2, #2048	; 0x800
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800630a:	bf18      	it	ne
 800630c:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
 8006310:	f04f 02fa 	mov.w	r2, #250	; 0xfa
					* 250;
 8006314:	bf14      	ite	ne
 8006316:	fb13 f302 	smulbbne	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800631a:	4353      	muleq	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800631c:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 800631e:	b002      	add	sp, #8
 8006320:	bd10      	pop	{r4, pc}

08006322 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006322:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8006324:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	*next = -1;
 8006328:	f04f 34ff 	mov.w	r4, #4294967295
 800632c:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 800632e:	f002 0207 	and.w	r2, r2, #7

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006332:	4666      	mov	r6, ip
	uint8_t success = 0;
 8006334:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006336:	428e      	cmp	r6, r1
 8006338:	d200      	bcs.n	800633c <get_next_good_spad+0x1a>
 800633a:	b107      	cbz	r7, 800633e <get_next_good_spad+0x1c>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
 800633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dataByte = goodSpadArray[coarseIndex];
 800633e:	5d84      	ldrb	r4, [r0, r6]
		if (coarseIndex == startIndex) {
 8006340:	4566      	cmp	r6, ip
			dataByte >>= fineOffset;
 8006342:	bf03      	ittte	eq
 8006344:	4114      	asreq	r4, r2
 8006346:	b2e4      	uxtbeq	r4, r4
			fineIndex = fineOffset;
 8006348:	4615      	moveq	r5, r2
		fineIndex = 0;
 800634a:	463d      	movne	r5, r7
			if ((dataByte & 0x1) == 1) {
 800634c:	f014 0701 	ands.w	r7, r4, #1
 8006350:	d004      	beq.n	800635c <get_next_good_spad+0x3a>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006352:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8006356:	601d      	str	r5, [r3, #0]
				coarseIndex++) {
 8006358:	3601      	adds	r6, #1
 800635a:	e7ec      	b.n	8006336 <get_next_good_spad+0x14>
			fineIndex++;
 800635c:	3501      	adds	r5, #1
		while (fineIndex < cSpadsPerByte) {
 800635e:	2d08      	cmp	r5, #8
			dataByte >>= 1;
 8006360:	ea4f 0454 	mov.w	r4, r4, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8006364:	d1f2      	bne.n	800634c <get_next_good_spad+0x2a>
 8006366:	e7f7      	b.n	8006358 <get_next_good_spad+0x36>

08006368 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 800636a:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800636c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 8006370:	3800      	subs	r0, #0
 8006372:	bf18      	it	ne
 8006374:	2001      	movne	r0, #1
 8006376:	4770      	bx	lr
 8006378:	20000518 	.word	0x20000518

0800637c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800637c:	b530      	push	{r4, r5, lr}
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 800637e:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	coarseIndex = spadIndex / cSpadsPerByte;
 8006382:	ea4f 04d2 	mov.w	r4, r2, lsr #3
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006386:	bf88      	it	hi
 8006388:	2301      	movhi	r3, #1
	fineIndex = spadIndex % cSpadsPerByte;
 800638a:	f002 0507 	and.w	r5, r2, #7
		spadArray[coarseIndex] |= (1 << fineIndex);
 800638e:	bf81      	itttt	hi
 8006390:	fa03 f205 	lslhi.w	r2, r3, r5
 8006394:	5d03      	ldrbhi	r3, [r0, r4]
 8006396:	4313      	orrhi	r3, r2
 8006398:	5503      	strbhi	r3, [r0, r4]
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800639a:	bf94      	ite	ls
 800639c:	f06f 0031 	mvnls.w	r0, #49	; 0x31
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80063a0:	2000      	movhi	r0, #0

	return status;
}
 80063a2:	bd30      	pop	{r4, r5, pc}

080063a4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80063a4:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80063a6:	2306      	movs	r3, #6
 80063a8:	21b0      	movs	r1, #176	; 0xb0
 80063aa:	f7fe b91b 	b.w	80045e4 <VL53L0X_WriteMulti>

080063ae <get_ref_spad_map>:
				refSpadArray, 6);
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80063ae:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80063b0:	2306      	movs	r3, #6
 80063b2:	21b0      	movs	r1, #176	; 0xb0
 80063b4:	f7fe b934 	b.w	8004620 <VL53L0X_ReadMulti>

080063b8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	b085      	sub	sp, #20
 80063be:	4680      	mov	r8, r0
 80063c0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80063c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80063c4:	9601      	str	r6, [sp, #4]
{
 80063c6:	468a      	mov	sl, r1
 80063c8:	4693      	mov	fp, r2
 80063ca:	461c      	mov	r4, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 80063cc:	f04f 0900 	mov.w	r9, #0
 80063d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063d2:	4599      	cmp	r9, r3
 80063d4:	d113      	bne.n	80063fe <enable_ref_spads+0x46>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80063d6:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 80063d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063da:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 80063dc:	b960      	cbnz	r0, 80063f8 <enable_ref_spads+0x40>
		status = set_ref_spad_map(Dev, spadArray);
 80063de:	4621      	mov	r1, r4
 80063e0:	4640      	mov	r0, r8
 80063e2:	f7ff ffdf 	bl	80063a4 <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
 80063e6:	b938      	cbnz	r0, 80063f8 <enable_ref_spads+0x40>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80063e8:	a902      	add	r1, sp, #8
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7ff ffdf 	bl	80063ae <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80063f0:	4425      	add	r5, r4
 80063f2:	ab02      	add	r3, sp, #8
 80063f4:	42ac      	cmp	r4, r5
 80063f6:	d11c      	bne.n	8006432 <enable_ref_spads+0x7a>
			}
			i++;
		}
	}
	return status;
}
 80063f8:	b005      	add	sp, #20
 80063fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80063fe:	ab01      	add	r3, sp, #4
 8006400:	4632      	mov	r2, r6
 8006402:	4629      	mov	r1, r5
 8006404:	4658      	mov	r0, fp
 8006406:	f7ff ff8c 	bl	8006322 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 800640a:	9f01      	ldr	r7, [sp, #4]
 800640c:	1c7b      	adds	r3, r7, #1
 800640e:	d00d      	beq.n	800642c <enable_ref_spads+0x74>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006412:	18f8      	adds	r0, r7, r3
 8006414:	f7ff ffa8 	bl	8006368 <is_aperture>
 8006418:	4550      	cmp	r0, sl
 800641a:	d107      	bne.n	800642c <enable_ref_spads+0x74>
		enable_spad_bit(spadArray, size, currentSpad);
 800641c:	463a      	mov	r2, r7
 800641e:	4620      	mov	r0, r4
 8006420:	f7ff ffac 	bl	800637c <enable_spad_bit>
		currentSpad++;
 8006424:	1c7e      	adds	r6, r7, #1
	for (index = 0; index < spadCount; index++) {
 8006426:	f109 0901 	add.w	r9, r9, #1
 800642a:	e7d1      	b.n	80063d0 <enable_ref_spads+0x18>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800642c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8006430:	e7d2      	b.n	80063d8 <enable_ref_spads+0x20>
			if (spadArray[i] != checkSpadArray[i]) {
 8006432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800643a:	4291      	cmp	r1, r2
 800643c:	d0da      	beq.n	80063f4 <enable_ref_spads+0x3c>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800643e:	f06f 0031 	mvn.w	r0, #49	; 0x31
	return status;
 8006442:	e7d9      	b.n	80063f8 <enable_ref_spads+0x40>

08006444 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006444:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8006446:	22c0      	movs	r2, #192	; 0xc0
{
 8006448:	b088      	sub	sp, #32
 800644a:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 800644c:	2101      	movs	r1, #1
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800644e:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
{
 8006452:	4605      	mov	r5, r0
		status = VL53L0X_WrByte(Dev,
 8006454:	f7fe f940 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006458:	b9f0      	cbnz	r0, 8006498 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800645a:	a901      	add	r1, sp, #4
 800645c:	4628      	mov	r0, r5
 800645e:	f7ff fd9c 	bl	8005f9a <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8006462:	b9c8      	cbnz	r0, 8006498 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006464:	2201      	movs	r2, #1
 8006466:	21ff      	movs	r1, #255	; 0xff
 8006468:	4628      	mov	r0, r5
 800646a:	f7fe f935 	bl	80046d8 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 800646e:	b998      	cbnz	r0, 8006498 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8006470:	4632      	mov	r2, r6
 8006472:	21b6      	movs	r1, #182	; 0xb6
 8006474:	4628      	mov	r0, r5
 8006476:	f7fe f8e9 	bl	800464c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800647a:	b968      	cbnz	r0, 8006498 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800647c:	4602      	mov	r2, r0
 800647e:	21ff      	movs	r1, #255	; 0xff
 8006480:	4628      	mov	r0, r5
 8006482:	f7fe f929 	bl	80046d8 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8006486:	b938      	cbnz	r0, 8006498 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006488:	4622      	mov	r2, r4
 800648a:	2101      	movs	r1, #1
 800648c:	4628      	mov	r0, r5
 800648e:	f7fe f923 	bl	80046d8 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8006492:	b908      	cbnz	r0, 8006498 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006494:	f885 4130 	strb.w	r4, [r5, #304]	; 0x130
	}

	return status;
}
 8006498:	b008      	add	sp, #32
 800649a:	bd70      	pop	{r4, r5, r6, pc}

0800649c <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649e:	460f      	mov	r7, r1
 80064a0:	b089      	sub	sp, #36	; 0x24
 80064a2:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064a4:	21ff      	movs	r1, #255	; 0xff
 80064a6:	2201      	movs	r2, #1
{
 80064a8:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80064aa:	f7fe f915 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80064ae:	4602      	mov	r2, r0
 80064b0:	b9a8      	cbnz	r0, 80064de <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 80064b2:	214f      	movs	r1, #79	; 0x4f
 80064b4:	4620      	mov	r0, r4
 80064b6:	f7fe f90f 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80064ba:	b980      	cbnz	r0, 80064de <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 80064bc:	222c      	movs	r2, #44	; 0x2c
 80064be:	214e      	movs	r1, #78	; 0x4e
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7fe f909 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80064c6:	4602      	mov	r2, r0
 80064c8:	b948      	cbnz	r0, 80064de <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80064ca:	21ff      	movs	r1, #255	; 0xff
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7fe f903 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80064d2:	b920      	cbnz	r0, 80064de <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 80064d4:	22b4      	movs	r2, #180	; 0xb4
 80064d6:	21b6      	movs	r1, #182	; 0xb6
 80064d8:	4620      	mov	r0, r4
 80064da:	f7fe f8fd 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80064de:	2500      	movs	r5, #0
 80064e0:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 80064e4:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128

	if (isApertureSpads) {
 80064e8:	b9de      	cbnz	r6, 8006522 <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
 80064ea:	4635      	mov	r5, r6
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 80064ec:	ab07      	add	r3, sp, #28
 80064ee:	22b4      	movs	r2, #180	; 0xb4
 80064f0:	e9cd 7303 	strd	r7, r3, [sp, #12]
 80064f4:	2306      	movs	r3, #6
 80064f6:	e9cd 3200 	strd	r3, r2, [sp]
 80064fa:	9502      	str	r5, [sp, #8]
 80064fc:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8006500:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8006504:	4631      	mov	r1, r6
 8006506:	4620      	mov	r0, r4
 8006508:	f7ff ff56 	bl	80063b8 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800650c:	b930      	cbnz	r0, 800651c <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800650e:	2301      	movs	r3, #1
 8006510:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006514:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006518:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 800651c:	b009      	add	sp, #36	; 0x24
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			currentSpadIndex++;
 8006520:	3501      	adds	r5, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006522:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 8006526:	f7ff ff1f 	bl	8006368 <is_aperture>
 800652a:	2800      	cmp	r0, #0
 800652c:	d1de      	bne.n	80064ec <VL53L0X_set_reference_spads+0x50>
 800652e:	2d2c      	cmp	r5, #44	; 0x2c
 8006530:	d1f6      	bne.n	8006520 <VL53L0X_set_reference_spads+0x84>
 8006532:	e7db      	b.n	80064ec <VL53L0X_set_reference_spads+0x50>

08006534 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006534:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006536:	f041 0201 	orr.w	r2, r1, #1
 800653a:	2100      	movs	r1, #0
{
 800653c:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800653e:	f7fe f8cb 	bl	80046d8 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006542:	b978      	cbnz	r0, 8006564 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006544:	4620      	mov	r0, r4
 8006546:	f000 fa49 	bl	80069dc <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 800654a:	b958      	cbnz	r0, 8006564 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800654c:	4601      	mov	r1, r0
 800654e:	4620      	mov	r0, r4
 8006550:	f7ff fcf7 	bl	8005f42 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 8006554:	b930      	cbnz	r0, 8006564 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006556:	4602      	mov	r2, r0
 8006558:	4601      	mov	r1, r0
 800655a:	4620      	mov	r0, r4

	return Status;
}
 800655c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006560:	f7fe b8ba 	b.w	80046d8 <VL53L0X_WrByte>
}
 8006564:	bd10      	pop	{r4, pc}

08006566 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 800656a:	2400      	movs	r4, #0
{
 800656c:	4689      	mov	r9, r1
 800656e:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006570:	21ff      	movs	r1, #255	; 0xff
 8006572:	2201      	movs	r2, #1
{
 8006574:	4606      	mov	r6, r0
 8006576:	461f      	mov	r7, r3
	uint8_t PhaseCalint = 0;
 8006578:	f88d 4007 	strb.w	r4, [sp, #7]
{
 800657c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8006580:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006584:	f7fe f8a8 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006588:	4622      	mov	r2, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800658a:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800658c:	4621      	mov	r1, r4
 800658e:	4630      	mov	r0, r6
 8006590:	f7fe f8a2 	bl	80046d8 <VL53L0X_WrByte>
 8006594:	4328      	orrs	r0, r5
 8006596:	b245      	sxtb	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006598:	4622      	mov	r2, r4
 800659a:	21ff      	movs	r1, #255	; 0xff
 800659c:	4630      	mov	r0, r6
 800659e:	f7fe f89b 	bl	80046d8 <VL53L0X_WrByte>
 80065a2:	4328      	orrs	r0, r5
 80065a4:	b244      	sxtb	r4, r0

	if (read_not_write) {
 80065a6:	f1b9 0f00 	cmp.w	r9, #0
 80065aa:	d032      	beq.n	8006612 <VL53L0X_ref_calibration_io+0xac>
		if (vhv_enable)
 80065ac:	f1bb 0f00 	cmp.w	fp, #0
 80065b0:	d006      	beq.n	80065c0 <VL53L0X_ref_calibration_io+0x5a>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80065b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065b4:	21cb      	movs	r1, #203	; 0xcb
 80065b6:	4630      	mov	r0, r6
 80065b8:	f7fd ffff 	bl	80045ba <VL53L0X_RdByte>
 80065bc:	4320      	orrs	r0, r4
 80065be:	b244      	sxtb	r4, r0
		if (phase_enable)
 80065c0:	f1ba 0f00 	cmp.w	sl, #0
 80065c4:	d007      	beq.n	80065d6 <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80065c6:	f10d 0207 	add.w	r2, sp, #7
 80065ca:	21ee      	movs	r1, #238	; 0xee
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7fd fff4 	bl	80045ba <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80065d2:	4320      	orrs	r0, r4
 80065d4:	b244      	sxtb	r4, r0
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065d6:	2201      	movs	r2, #1
 80065d8:	21ff      	movs	r1, #255	; 0xff
 80065da:	4630      	mov	r0, r6
 80065dc:	f7fe f87c 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80065e0:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065e2:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80065e4:	2100      	movs	r1, #0
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7fe f876 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065ec:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80065ee:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80065f0:	2200      	movs	r2, #0
 80065f2:	21ff      	movs	r1, #255	; 0xff
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7fe f86f 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80065fa:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80065fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006600:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006602:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006604:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8006608:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800660a:	7013      	strb	r3, [r2, #0]
}
 800660c:	b003      	add	sp, #12
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 8006612:	f1bb 0f00 	cmp.w	fp, #0
 8006616:	d006      	beq.n	8006626 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006618:	4642      	mov	r2, r8
 800661a:	21cb      	movs	r1, #203	; 0xcb
 800661c:	4630      	mov	r0, r6
 800661e:	f7fe f85b 	bl	80046d8 <VL53L0X_WrByte>
 8006622:	4320      	orrs	r0, r4
 8006624:	b244      	sxtb	r4, r0
		if (phase_enable)
 8006626:	f1ba 0f00 	cmp.w	sl, #0
 800662a:	d0d4      	beq.n	80065d6 <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800662c:	463b      	mov	r3, r7
 800662e:	2280      	movs	r2, #128	; 0x80
 8006630:	21ee      	movs	r1, #238	; 0xee
 8006632:	4630      	mov	r0, r6
 8006634:	f7fe f872 	bl	800471c <VL53L0X_UpdateByte>
 8006638:	e7cb      	b.n	80065d2 <VL53L0X_ref_calibration_io+0x6c>

0800663a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800663a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800663e:	b087      	sub	sp, #28
 8006640:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8006642:	2200      	movs	r2, #0
{
 8006644:	4605      	mov	r5, r0
 8006646:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 8006648:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800664c:	461e      	mov	r6, r3
 800664e:	b31b      	cbz	r3, 8006698 <VL53L0X_perform_vhv_calibration+0x5e>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006650:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006654:	2201      	movs	r2, #1
 8006656:	4611      	mov	r1, r2
 8006658:	4628      	mov	r0, r5
 800665a:	f7fe f83d 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800665e:	4604      	mov	r4, r0
 8006660:	bb58      	cbnz	r0, 80066ba <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006662:	2140      	movs	r1, #64	; 0x40
 8006664:	4628      	mov	r0, r5
 8006666:	f7ff ff65 	bl	8006534 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800666a:	4604      	mov	r4, r0
 800666c:	bb28      	cbnz	r0, 80066ba <VL53L0X_perform_vhv_calibration+0x80>
 800666e:	f1b9 0f01 	cmp.w	r9, #1
 8006672:	d113      	bne.n	800669c <VL53L0X_perform_vhv_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006674:	f10d 0317 	add.w	r3, sp, #23
 8006678:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800667c:	e9cd 8300 	strd	r8, r3, [sp]
 8006680:	4602      	mov	r2, r0
 8006682:	4603      	mov	r3, r0
 8006684:	4649      	mov	r1, r9
 8006686:	4628      	mov	r0, r5
 8006688:	f7ff ff6d 	bl	8006566 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800668c:	b140      	cbz	r0, 80066a0 <VL53L0X_perform_vhv_calibration+0x66>
		*pVhvSettings = 0;
 800668e:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8006690:	4620      	mov	r0, r4
 8006692:	b007      	add	sp, #28
 8006694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 8006698:	461f      	mov	r7, r3
 800669a:	e7db      	b.n	8006654 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 800669c:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80066a0:	2e00      	cmp	r6, #0
 80066a2:	d0f5      	beq.n	8006690 <VL53L0X_perform_vhv_calibration+0x56>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066a4:	463a      	mov	r2, r7
 80066a6:	2101      	movs	r1, #1
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7fe f815 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 80066ae:	4604      	mov	r4, r0
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d1ed      	bne.n	8006690 <VL53L0X_perform_vhv_calibration+0x56>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80066b4:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 80066b8:	e7ea      	b.n	8006690 <VL53L0X_perform_vhv_calibration+0x56>
		*pVhvSettings = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	f888 3000 	strb.w	r3, [r8]
 80066c0:	4620      	mov	r0, r4
 80066c2:	e7e4      	b.n	800668e <VL53L0X_perform_vhv_calibration+0x54>

080066c4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80066c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4605      	mov	r5, r0
 80066ca:	b087      	sub	sp, #28
 80066cc:	4688      	mov	r8, r1
 80066ce:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80066d0:	461e      	mov	r6, r3
 80066d2:	b323      	cbz	r3, 800671e <VL53L0X_perform_phase_calibration+0x5a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80066d4:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80066d8:	2202      	movs	r2, #2
 80066da:	2101      	movs	r1, #1
 80066dc:	4628      	mov	r0, r5
 80066de:	f7fd fffb 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80066e2:	4604      	mov	r4, r0
 80066e4:	bb60      	cbnz	r0, 8006740 <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80066e6:	4601      	mov	r1, r0
 80066e8:	4628      	mov	r0, r5
 80066ea:	f7ff ff23 	bl	8006534 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80066ee:	4604      	mov	r4, r0
 80066f0:	bb30      	cbnz	r0, 8006740 <VL53L0X_perform_phase_calibration+0x7c>
 80066f2:	f1b9 0f01 	cmp.w	r9, #1
 80066f6:	d114      	bne.n	8006722 <VL53L0X_perform_phase_calibration+0x5e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80066f8:	f10d 0317 	add.w	r3, sp, #23
 80066fc:	e9cd 0902 	strd	r0, r9, [sp, #8]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	4602      	mov	r2, r0
 8006704:	4603      	mov	r3, r0
 8006706:	f8cd 8004 	str.w	r8, [sp, #4]
 800670a:	4649      	mov	r1, r9
 800670c:	4628      	mov	r0, r5
 800670e:	f7ff ff2a 	bl	8006566 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006712:	b140      	cbz	r0, 8006726 <VL53L0X_perform_phase_calibration+0x62>
		*pPhaseCal = 0;
 8006714:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8006716:	4620      	mov	r0, r4
 8006718:	b007      	add	sp, #28
 800671a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 800671e:	461f      	mov	r7, r3
 8006720:	e7da      	b.n	80066d8 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8006722:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006726:	2e00      	cmp	r6, #0
 8006728:	d0f5      	beq.n	8006716 <VL53L0X_perform_phase_calibration+0x52>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800672a:	463a      	mov	r2, r7
 800672c:	2101      	movs	r1, #1
 800672e:	4628      	mov	r0, r5
 8006730:	f7fd ffd2 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006734:	4604      	mov	r4, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	d1ed      	bne.n	8006716 <VL53L0X_perform_phase_calibration+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800673a:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 800673e:	e7ea      	b.n	8006716 <VL53L0X_perform_phase_calibration+0x52>
		*pPhaseCal = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	f888 3000 	strb.w	r3, [r8]
 8006746:	4620      	mov	r0, r4
 8006748:	e7e4      	b.n	8006714 <VL53L0X_perform_phase_calibration+0x50>

0800674a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800674a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800674c:	4615      	mov	r5, r2
 800674e:	461a      	mov	r2, r3

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006750:	2300      	movs	r3, #0
 8006752:	9201      	str	r2, [sp, #4]
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006754:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130
{
 8006758:	4604      	mov	r4, r0
	Status = VL53L0X_perform_vhv_calibration(
 800675a:	f7ff ff6e 	bl	800663a <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800675e:	9a01      	ldr	r2, [sp, #4]
 8006760:	b968      	cbnz	r0, 800677e <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8006762:	4603      	mov	r3, r0
 8006764:	4629      	mov	r1, r5
 8006766:	4620      	mov	r0, r4
 8006768:	f7ff ffac 	bl	80066c4 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800676c:	b938      	cbnz	r0, 800677e <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800676e:	4632      	mov	r2, r6
 8006770:	2101      	movs	r1, #1
 8006772:	4620      	mov	r0, r4
 8006774:	f7fd ffb0 	bl	80046d8 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006778:	b908      	cbnz	r0, 800677e <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800677a:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130

	}

	return Status;
}
 800677e:	b002      	add	sp, #8
 8006780:	bd70      	pop	{r4, r5, r6, pc}

08006782 <VL53L0X_perform_ref_spad_management>:
{
 8006782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
 8006786:	2300      	movs	r3, #0
{
 8006788:	b093      	sub	sp, #76	; 0x4c
 800678a:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800678e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8006792:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006796:	2201      	movs	r2, #1
 8006798:	21ff      	movs	r1, #255	; 0xff
	int32_t nextGoodSpad = 0;
 800679a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800679e:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	uint8_t VhvSettings = 0;
 80067a2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
{
 80067a6:	4605      	mov	r5, r0
	uint8_t PhaseCal = 0;
 80067a8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067ac:	f7fd ff94 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80067b0:	4604      	mov	r4, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f040 80e8 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 80067b8:	4602      	mov	r2, r0
 80067ba:	214f      	movs	r1, #79	; 0x4f
 80067bc:	4628      	mov	r0, r5
 80067be:	f7fd ff8b 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80067c2:	4604      	mov	r4, r0
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f040 80df 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 80067ca:	222c      	movs	r2, #44	; 0x2c
 80067cc:	214e      	movs	r1, #78	; 0x4e
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7fd ff82 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80067d4:	4604      	mov	r4, r0
 80067d6:	2800      	cmp	r0, #0
 80067d8:	f040 80d6 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067dc:	4602      	mov	r2, r0
 80067de:	21ff      	movs	r1, #255	; 0xff
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7fd ff79 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80067e6:	4604      	mov	r4, r0
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 80cd 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 80067ee:	22b4      	movs	r2, #180	; 0xb4
 80067f0:	21b6      	movs	r1, #182	; 0xb6
 80067f2:	4628      	mov	r0, r5
 80067f4:	f7fd ff70 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80067f8:	4604      	mov	r4, r0
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f040 80c4 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006800:	4602      	mov	r2, r0
 8006802:	2180      	movs	r1, #128	; 0x80
 8006804:	4628      	mov	r0, r5
 8006806:	f7fd ff67 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800680a:	4604      	mov	r4, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	f040 80bb 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006812:	4603      	mov	r3, r0
 8006814:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 8006818:	a90d      	add	r1, sp, #52	; 0x34
 800681a:	4628      	mov	r0, r5
 800681c:	f7ff ff95 	bl	800674a <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8006820:	4604      	mov	r4, r0
 8006822:	2800      	cmp	r0, #0
 8006824:	f040 80b0 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = enable_ref_spads(Dev,
 8006828:	2303      	movs	r3, #3
 800682a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800682e:	21b4      	movs	r1, #180	; 0xb4
 8006830:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefGoodSpadMap,
 8006832:	f505 7a95 	add.w	sl, r5, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006836:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800683a:	ae0e      	add	r6, sp, #56	; 0x38
 800683c:	e9cd 3100 	strd	r3, r1, [sp]
		lastSpadIndex = currentSpadIndex;
 8006840:	900e      	str	r0, [sp, #56]	; 0x38
		Status = enable_ref_spads(Dev,
 8006842:	4601      	mov	r1, r0
 8006844:	9604      	str	r6, [sp, #16]
 8006846:	464b      	mov	r3, r9
 8006848:	4652      	mov	r2, sl
 800684a:	4628      	mov	r0, r5
 800684c:	f7ff fdb4 	bl	80063b8 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 8006850:	4604      	mov	r4, r0
 8006852:	2800      	cmp	r0, #0
 8006854:	f040 8098 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
		Status = perform_ref_signal_measurement(Dev,
 8006858:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800685c:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 800685e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 8006862:	f7ff fdef 	bl	8006444 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006866:	4604      	mov	r4, r0
 8006868:	2800      	cmp	r0, #0
 800686a:	f040 808d 	bne.w	8006988 <VL53L0X_perform_ref_spad_management+0x206>
 800686e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006872:	4543      	cmp	r3, r8
 8006874:	f240 80aa 	bls.w	80069cc <VL53L0X_perform_ref_spad_management+0x24a>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006878:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
 800687c:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
 8006880:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
 8006884:	f7ff fd70 	bl	8006368 <is_aperture>
 8006888:	b180      	cbz	r0, 80068ac <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
 800688a:	2306      	movs	r3, #6
 800688c:	22b4      	movs	r2, #180	; 0xb4
 800688e:	2703      	movs	r7, #3
 8006890:	e9cd 3200 	strd	r3, r2, [sp]
 8006894:	e9cd b702 	strd	fp, r7, [sp, #8]
 8006898:	9604      	str	r6, [sp, #16]
 800689a:	464b      	mov	r3, r9
 800689c:	4652      	mov	r2, sl
 800689e:	2101      	movs	r1, #1
 80068a0:	4628      	mov	r0, r5
 80068a2:	f7ff fd89 	bl	80063b8 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 80068a6:	b138      	cbz	r0, 80068b8 <VL53L0X_perform_ref_spad_management+0x136>
			Status = perform_ref_signal_measurement(Dev,
 80068a8:	4604      	mov	r4, r0
	return Status;
 80068aa:	e06d      	b.n	8006988 <VL53L0X_perform_ref_spad_management+0x206>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80068ac:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80068b0:	d8eb      	bhi.n	800688a <VL53L0X_perform_ref_spad_management+0x108>
				currentSpadIndex++;
 80068b2:	f10b 0b01 	add.w	fp, fp, #1
 80068b6:	e7e3      	b.n	8006880 <VL53L0X_perform_ref_spad_management+0xfe>
				Status = perform_ref_signal_measurement(Dev,
 80068b8:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80068bc:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 80068be:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 80068c2:	f7ff fdbf 	bl	8006444 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d1ee      	bne.n	80068a8 <VL53L0X_perform_ref_spad_management+0x126>
 80068ca:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80068ce:	4543      	cmp	r3, r8
 80068d0:	d97f      	bls.n	80069d2 <VL53L0X_perform_ref_spad_management+0x250>
					isApertureSpads_int = 1;
 80068d2:	2601      	movs	r6, #1
			needAptSpads = 0;
 80068d4:	9607      	str	r6, [sp, #28]
		(peakSignalRateRef < targetRefRate)) {
 80068d6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 80068da:	4543      	cmp	r3, r8
 80068dc:	d263      	bcs.n	80069a6 <VL53L0X_perform_ref_spad_management+0x224>
		lastSignalRateDiff = abs(peakSignalRateRef -
 80068de:	eba3 0308 	sub.w	r3, r3, r8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfb8      	it	lt
 80068e6:	425b      	neglt	r3, r3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80068e8:	f8d9 0000 	ldr.w	r0, [r9]
 80068ec:	f8b9 1004 	ldrh.w	r1, [r9, #4]
		lastSignalRateDiff = abs(peakSignalRateRef -
 80068f0:	9309      	str	r3, [sp, #36]	; 0x24
		isApertureSpads_int = needAptSpads;
 80068f2:	f89d 601c 	ldrb.w	r6, [sp, #28]
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80068f6:	9010      	str	r0, [sp, #64]	; 0x40
		refSpadCount_int	= minimumSpadCount;
 80068f8:	2303      	movs	r3, #3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80068fa:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		refSpadCount_int	= minimumSpadCount;
 80068fe:	9308      	str	r3, [sp, #32]
			get_next_good_spad(
 8006900:	465a      	mov	r2, fp
 8006902:	ab0f      	add	r3, sp, #60	; 0x3c
 8006904:	2106      	movs	r1, #6
 8006906:	4650      	mov	r0, sl
 8006908:	f7ff fd0b 	bl	8006322 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 800690c:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006910:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006914:	d057      	beq.n	80069c6 <VL53L0X_perform_ref_spad_management+0x244>
			(refSpadCount_int)++;
 8006916:	9b08      	ldr	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006918:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
			(refSpadCount_int)++;
 800691c:	1c5f      	adds	r7, r3, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800691e:	f7ff fd23 	bl	8006368 <is_aperture>
 8006922:	9b07      	ldr	r3, [sp, #28]
 8006924:	4298      	cmp	r0, r3
 8006926:	d14e      	bne.n	80069c6 <VL53L0X_perform_ref_spad_management+0x244>
			Status = enable_spad_bit(
 8006928:	465a      	mov	r2, fp
 800692a:	2106      	movs	r1, #6
 800692c:	4648      	mov	r0, r9
 800692e:	f7ff fd25 	bl	800637c <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8006932:	2800      	cmp	r0, #0
 8006934:	d1b8      	bne.n	80068a8 <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
 8006936:	4649      	mov	r1, r9
 8006938:	4628      	mov	r0, r5
				currentSpadIndex++;
 800693a:	f10b 0b01 	add.w	fp, fp, #1
				Status = set_ref_spad_map(Dev,
 800693e:	f7ff fd31 	bl	80063a4 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8006942:	2800      	cmp	r0, #0
 8006944:	d1b0      	bne.n	80068a8 <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
 8006946:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800694a:	4628      	mov	r0, r5
 800694c:	f7ff fd7a 	bl	8006444 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8006950:	2800      	cmp	r0, #0
 8006952:	d1a9      	bne.n	80068a8 <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006954:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8006958:	eba1 0308 	sub.w	r3, r1, r8
 800695c:	2b00      	cmp	r3, #0
 800695e:	bfb8      	it	lt
 8006960:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 8006962:	4541      	cmp	r1, r8
 8006964:	d914      	bls.n	8006990 <VL53L0X_perform_ref_spad_management+0x20e>
				if (signalRateDiff > lastSignalRateDiff) {
 8006966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006968:	4293      	cmp	r3, r2
 800696a:	d91c      	bls.n	80069a6 <VL53L0X_perform_ref_spad_management+0x224>
					Status = set_ref_spad_map(Dev,
 800696c:	a910      	add	r1, sp, #64	; 0x40
 800696e:	4628      	mov	r0, r5
 8006970:	f7ff fd18 	bl	80063a4 <set_ref_spad_map>
					memcpy(
 8006974:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8006978:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 800697c:	4603      	mov	r3, r0
					memcpy(
 800697e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006980:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8006984:	b173      	cbz	r3, 80069a4 <VL53L0X_perform_ref_spad_management+0x222>
 8006986:	461c      	mov	r4, r3
}
 8006988:	4620      	mov	r0, r4
 800698a:	b013      	add	sp, #76	; 0x4c
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(lastSpadArray,
 8006990:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8006994:	f8b5 1128 	ldrh.w	r1, [r5, #296]	; 0x128
 8006998:	9010      	str	r0, [sp, #64]	; 0x40
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800699a:	e9cd 7308 	strd	r7, r3, [sp, #32]
				memcpy(lastSpadArray,
 800699e:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		while (!complete) {
 80069a2:	e7ad      	b.n	8006900 <VL53L0X_perform_ref_spad_management+0x17e>
 80069a4:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 80069a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a8:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80069aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ac:	701e      	strb	r6, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80069ae:	2301      	movs	r3, #1
 80069b0:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80069bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 80069c4:	e7e0      	b.n	8006988 <VL53L0X_perform_ref_spad_management+0x206>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80069c6:	f06f 0431 	mvn.w	r4, #49	; 0x31
 80069ca:	e7dd      	b.n	8006988 <VL53L0X_perform_ref_spad_management+0x206>
	uint8_t	 isApertureSpads_int = 0;
 80069cc:	2600      	movs	r6, #0
	uint32_t refSpadCount_int = 0;
 80069ce:	4637      	mov	r7, r6
 80069d0:	e780      	b.n	80068d4 <VL53L0X_perform_ref_spad_management+0x152>
			needAptSpads = 1;
 80069d2:	2301      	movs	r3, #1
	uint8_t	 isApertureSpads_int = 0;
 80069d4:	4606      	mov	r6, r0
	uint32_t refSpadCount_int = 0;
 80069d6:	4607      	mov	r7, r0
			needAptSpads = 1;
 80069d8:	9307      	str	r3, [sp, #28]
 80069da:	e77c      	b.n	80068d6 <VL53L0X_perform_ref_spad_management+0x154>

080069dc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80069dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 80069de:	2300      	movs	r3, #0
{
 80069e0:	4604      	mov	r4, r0
	uint8_t NewDataReady = 0;
 80069e2:	f88d 3007 	strb.w	r3, [sp, #7]
 80069e6:	25c8      	movs	r5, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80069e8:	f10d 0107 	add.w	r1, sp, #7
 80069ec:	4620      	mov	r0, r4
 80069ee:	f7ff fc5e 	bl	80062ae <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 80069f2:	b958      	cbnz	r0, 8006a0c <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 80069f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d007      	beq.n	8006a0c <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80069fc:	3d01      	subs	r5, #1
 80069fe:	d003      	beq.n	8006a08 <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7fd fea1 	bl	8004748 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006a06:	e7ef      	b.n	80069e8 <VL53L0X_measurement_poll_for_completion+0xc>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006a08:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006a0c:	b003      	add	sp, #12
 8006a0e:	bd30      	pop	{r4, r5, pc}

08006a10 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006a10:	4602      	mov	r2, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8006a12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d802      	bhi.n	8006a20 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
 8006a1a:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8006a1c:	b913      	cbnz	r3, 8006a24 <VL53L0X_isqrt+0x14>

		bit >>= 2;
	}

	return res;
}
 8006a1e:	4770      	bx	lr
		bit >>= 2;
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	e7f8      	b.n	8006a16 <VL53L0X_isqrt+0x6>
		if (num >= res + bit) {
 8006a24:	18c1      	adds	r1, r0, r3
 8006a26:	4291      	cmp	r1, r2
 8006a28:	ea4f 0050 	mov.w	r0, r0, lsr #1
			res = (res >> 1) + bit;
 8006a2c:	bf9c      	itt	ls
 8006a2e:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 8006a30:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 8006a32:	089b      	lsrs	r3, r3, #2
 8006a34:	e7f2      	b.n	8006a1c <VL53L0X_isqrt+0xc>

08006a36 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2183      	movs	r1, #131	; 0x83
{
 8006a3c:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006a3e:	f7fd fe4b 	bl	80046d8 <VL53L0X_WrByte>
 8006a42:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006a44:	b988      	cbnz	r0, 8006a6a <VL53L0X_device_read_strobe+0x34>
 8006a46:	26c8      	movs	r6, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006a48:	f10d 0207 	add.w	r2, sp, #7
 8006a4c:	2183      	movs	r1, #131	; 0x83
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7fd fdb3 	bl	80045ba <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006a54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a58:	4303      	orrs	r3, r0
 8006a5a:	f013 0fff 	tst.w	r3, #255	; 0xff
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006a5e:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006a60:	d103      	bne.n	8006a6a <VL53L0X_device_read_strobe+0x34>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006a62:	3e01      	subs	r6, #1
 8006a64:	d1f0      	bne.n	8006a48 <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8006a66:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	2183      	movs	r1, #131	; 0x83
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f7fd fe32 	bl	80046d8 <VL53L0X_WrByte>
 8006a74:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8006a76:	b240      	sxtb	r0, r0
 8006a78:	b002      	add	sp, #8
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}

08006a7c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a80:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 8006a84:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8006a86:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006a8a:	2e07      	cmp	r6, #7
	uint32_t PartUIDLower = 0;
 8006a8c:	e9cd 9907 	strd	r9, r9, [sp, #28]
{
 8006a90:	4604      	mov	r4, r0
 8006a92:	460f      	mov	r7, r1
	if (ReadDataFromDeviceDone != 7) {
 8006a94:	f000 82b0 	beq.w	8006ff8 <VL53L0X_get_info_from_device+0x57c>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006a98:	2201      	movs	r2, #1
 8006a9a:	2180      	movs	r1, #128	; 0x80
 8006a9c:	f7fd fe1c 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006aa0:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006aa2:	4683      	mov	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006aa4:	21ff      	movs	r1, #255	; 0xff
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f7fd fe16 	bl	80046d8 <VL53L0X_WrByte>
 8006aac:	ea4b 0000 	orr.w	r0, fp, r0
 8006ab0:	fa4f fb80 	sxtb.w	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006ab4:	464a      	mov	r2, r9
 8006ab6:	4649      	mov	r1, r9
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f7fd fe0d 	bl	80046d8 <VL53L0X_WrByte>
 8006abe:	ea4b 0000 	orr.w	r0, fp, r0
 8006ac2:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006ac6:	2206      	movs	r2, #6
 8006ac8:	21ff      	movs	r1, #255	; 0xff
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7fd fe04 	bl	80046d8 <VL53L0X_WrByte>
 8006ad0:	ea4a 0000 	orr.w	r0, sl, r0
 8006ad4:	b245      	sxtb	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006ad6:	f10d 0215 	add.w	r2, sp, #21
 8006ada:	2183      	movs	r1, #131	; 0x83
 8006adc:	4620      	mov	r0, r4
 8006ade:	f7fd fd6c 	bl	80045ba <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006ae2:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006ae6:	4328      	orrs	r0, r5
 8006ae8:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006aec:	f042 0204 	orr.w	r2, r2, #4
 8006af0:	2183      	movs	r1, #131	; 0x83
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7fd fdf0 	bl	80046d8 <VL53L0X_WrByte>
 8006af8:	ea48 0000 	orr.w	r0, r8, r0
 8006afc:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006b00:	2207      	movs	r2, #7
 8006b02:	21ff      	movs	r1, #255	; 0xff
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7fd fde7 	bl	80046d8 <VL53L0X_WrByte>
 8006b0a:	ea48 0000 	orr.w	r0, r8, r0
 8006b0e:	fa4f fa80 	sxtb.w	sl, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006b12:	2201      	movs	r2, #1
 8006b14:	2181      	movs	r1, #129	; 0x81
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7fd fdde 	bl	80046d8 <VL53L0X_WrByte>
 8006b1c:	ea4a 0000 	orr.w	r0, sl, r0
 8006b20:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8006b24:	4620      	mov	r0, r4
 8006b26:	f7fd fe0f 	bl	8004748 <VL53L0X_PollingDelay>
 8006b2a:	ea4a 0000 	orr.w	r0, sl, r0
 8006b2e:	fa4f f880 	sxtb.w	r8, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006b32:	2201      	movs	r2, #1
 8006b34:	2180      	movs	r1, #128	; 0x80
 8006b36:	4620      	mov	r0, r4
 8006b38:	f7fd fdce 	bl	80046d8 <VL53L0X_WrByte>

		if (((option & 1) == 1) &&
 8006b3c:	f017 0b01 	ands.w	fp, r7, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006b40:	ea48 0000 	orr.w	r0, r8, r0
 8006b44:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8006b46:	f000 822a 	beq.w	8006f9e <VL53L0X_get_info_from_device+0x522>
 8006b4a:	07f2      	lsls	r2, r6, #31
 8006b4c:	f100 822a 	bmi.w	8006fa4 <VL53L0X_get_info_from_device+0x528>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006b50:	226b      	movs	r2, #107	; 0x6b
 8006b52:	2194      	movs	r1, #148	; 0x94
 8006b54:	4620      	mov	r0, r4
 8006b56:	f7fd fdbf 	bl	80046d8 <VL53L0X_WrByte>
 8006b5a:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ff6a 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006b62:	ea48 0000 	orr.w	r0, r8, r0
 8006b66:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b68:	aa06      	add	r2, sp, #24
 8006b6a:	2190      	movs	r1, #144	; 0x90
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7fd fd8d 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b72:	b26d      	sxtb	r5, r5

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006b74:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b76:	4328      	orrs	r0, r5
 8006b78:	fa4f f880 	sxtb.w	r8, r0
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006b7c:	2224      	movs	r2, #36	; 0x24
 8006b7e:	2194      	movs	r1, #148	; 0x94
 8006b80:	4620      	mov	r0, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006b82:	f3c3 2a06 	ubfx	sl, r3, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006b86:	f3c3 39c0 	ubfx	r9, r3, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006b8a:	f7fd fda5 	bl	80046d8 <VL53L0X_WrByte>
 8006b8e:	ea48 0000 	orr.w	r0, r8, r0
 8006b92:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b96:	4620      	mov	r0, r4
 8006b98:	f7ff ff4d 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006b9c:	ea48 0000 	orr.w	r0, r8, r0
 8006ba0:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ba2:	aa06      	add	r2, sp, #24
 8006ba4:	2190      	movs	r1, #144	; 0x90
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f7fd fd70 	bl	800468c <VL53L0X_RdDWord>
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	4328      	orrs	r0, r5
 8006bb0:	ba1b      	rev	r3, r3
 8006bb2:	b245      	sxtb	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006bb4:	2225      	movs	r2, #37	; 0x25
 8006bb6:	2194      	movs	r1, #148	; 0x94
 8006bb8:	4620      	mov	r0, r4
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006bba:	9309      	str	r3, [sp, #36]	; 0x24
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006bbc:	f7fd fd8c 	bl	80046d8 <VL53L0X_WrByte>
 8006bc0:	4328      	orrs	r0, r5
 8006bc2:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ff36 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006bca:	4328      	orrs	r0, r5
 8006bcc:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bd0:	aa06      	add	r2, sp, #24
 8006bd2:	2190      	movs	r1, #144	; 0x90
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f7fd fd59 	bl	800468c <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006bda:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bdc:	ea48 0000 	orr.w	r0, r8, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006be0:	0e1a      	lsrs	r2, r3, #24
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006be2:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006be4:	b245      	sxtb	r5, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006be6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006bee:	f017 0302 	ands.w	r3, r7, #2
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	f000 80db 	beq.w	8006dae <VL53L0X_get_info_from_device+0x332>
 8006bf8:	f016 0802 	ands.w	r8, r6, #2
 8006bfc:	f040 80d7 	bne.w	8006dae <VL53L0X_get_info_from_device+0x332>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006c00:	2202      	movs	r2, #2
 8006c02:	2194      	movs	r1, #148	; 0x94
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7fd fd67 	bl	80046d8 <VL53L0X_WrByte>
 8006c0a:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f7ff ff12 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006c12:	9b01      	ldr	r3, [sp, #4]
 8006c14:	4318      	orrs	r0, r3
 8006c16:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006c18:	f10d 0216 	add.w	r2, sp, #22
 8006c1c:	2190      	movs	r1, #144	; 0x90
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7fd fccb 	bl	80045ba <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c24:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006c26:	227b      	movs	r2, #123	; 0x7b
 8006c28:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006c2a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7fd fd53 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006c32:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006c34:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c36:	4620      	mov	r0, r4
 8006c38:	f7ff fefd 	bl	8006a36 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006c3c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c3e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006c40:	f10d 0217 	add.w	r2, sp, #23
 8006c44:	2190      	movs	r1, #144	; 0x90
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7fd fcb7 	bl	80045ba <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c4c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006c4e:	4328      	orrs	r0, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006c50:	2277      	movs	r2, #119	; 0x77
 8006c52:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006c54:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006c56:	4620      	mov	r0, r4
 8006c58:	f7fd fd3e 	bl	80046d8 <VL53L0X_WrByte>
 8006c5c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7ff fee9 	bl	8006a36 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006c64:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c66:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c68:	aa06      	add	r2, sp, #24
 8006c6a:	2190      	movs	r1, #144	; 0x90
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f7fd fd0d 	bl	800468c <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006c72:	9b06      	ldr	r3, [sp, #24]
 8006c74:	0e5a      	lsrs	r2, r3, #25
 8006c76:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006c7a:	f3c3 4286 	ubfx	r2, r3, #18, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c7e:	b26d      	sxtb	r5, r5
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006c80:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006c84:	f3c3 22c6 	ubfx	r2, r3, #11, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c88:	4328      	orrs	r0, r5
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006c8a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006c8e:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	f003 0378 	and.w	r3, r3, #120	; 0x78
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c98:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006c9a:	2194      	movs	r1, #148	; 0x94
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006c9c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006ca4:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006ca8:	f7fd fd16 	bl	80046d8 <VL53L0X_WrByte>
 8006cac:	4328      	orrs	r0, r5
 8006cae:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7ff fec0 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006cb6:	4328      	orrs	r0, r5
 8006cb8:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cba:	aa06      	add	r2, sp, #24
 8006cbc:	2190      	movs	r1, #144	; 0x90
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7fd fce4 	bl	800468c <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006cc4:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8006cc6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006cca:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8006cce:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006cd2:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8006cd6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006cda:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8006cde:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006ce2:	f3c3 2206 	ubfx	r2, r3, #8, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ce6:	4328      	orrs	r0, r5
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006ce8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006cec:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006cf0:	019b      	lsls	r3, r3, #6
 8006cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cf6:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006cf8:	2194      	movs	r1, #148	; 0x94
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006cfa:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006cfe:	4620      	mov	r0, r4
 8006d00:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006d02:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006d06:	f7fd fce7 	bl	80046d8 <VL53L0X_WrByte>
 8006d0a:	4328      	orrs	r0, r5
 8006d0c:	b245      	sxtb	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff fe91 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006d14:	4328      	orrs	r0, r5
 8006d16:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d18:	aa06      	add	r2, sp, #24
 8006d1a:	2190      	movs	r1, #144	; 0x90
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7fd fcb5 	bl	800468c <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006d22:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8006d24:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006d28:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8006d2c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006d30:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8006d34:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006d38:	f3c3 3206 	ubfx	r2, r3, #12, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d3c:	4328      	orrs	r0, r5
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006d3e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006d42:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	f003 037c 	and.w	r3, r3, #124	; 0x7c
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d4c:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006d4e:	2194      	movs	r1, #148	; 0x94
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006d50:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006d54:	4620      	mov	r0, r4
 8006d56:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006d58:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006d5c:	f7fd fcbc 	bl	80046d8 <VL53L0X_WrByte>
 8006d60:	4328      	orrs	r0, r5
 8006d62:	b245      	sxtb	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7ff fe66 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006d6a:	4328      	orrs	r0, r5
 8006d6c:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d6e:	aa06      	add	r2, sp, #24
 8006d70:	2190      	movs	r1, #144	; 0x90
 8006d72:	4620      	mov	r0, r4
 8006d74:	f7fd fc8a 	bl	800468c <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006d78:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8006d7a:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 8006d7e:	f88d 803e 	strb.w	r8, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 8006d82:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 8006d86:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006d8a:	f3c3 52c6 	ubfx	r2, r3, #23, #7
 8006d8e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006d92:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d96:	4328      	orrs	r0, r5
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006d98:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006d9c:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006da0:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006da4:	b245      	sxtb	r5, r0
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006da6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006daa:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8006dae:	f017 0304 	ands.w	r3, r7, #4
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f000 80f8 	beq.w	8006fa8 <VL53L0X_get_info_from_device+0x52c>
 8006db8:	0773      	lsls	r3, r6, #29
 8006dba:	f100 80f5 	bmi.w	8006fa8 <VL53L0X_get_info_from_device+0x52c>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006dbe:	227b      	movs	r2, #123	; 0x7b
 8006dc0:	2194      	movs	r1, #148	; 0x94
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7fd fc88 	bl	80046d8 <VL53L0X_WrByte>
 8006dc8:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7ff fe33 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006dd0:	ea48 0000 	orr.w	r0, r8, r0
 8006dd4:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006dd6:	aa07      	add	r2, sp, #28
 8006dd8:	2190      	movs	r1, #144	; 0x90
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7fd fc56 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006de0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006de2:	4328      	orrs	r0, r5
 8006de4:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006de6:	227c      	movs	r2, #124	; 0x7c
 8006de8:	2194      	movs	r1, #148	; 0x94
 8006dea:	4620      	mov	r0, r4
 8006dec:	f7fd fc74 	bl	80046d8 <VL53L0X_WrByte>
 8006df0:	4328      	orrs	r0, r5
 8006df2:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff fe1d 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006dfc:	ea48 0000 	orr.w	r0, r8, r0
 8006e00:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006e04:	aa08      	add	r2, sp, #32
 8006e06:	2190      	movs	r1, #144	; 0x90
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7fd fc3f 	bl	800468c <VL53L0X_RdDWord>
 8006e0e:	ea48 0000 	orr.w	r0, r8, r0
 8006e12:	fa4f f880 	sxtb.w	r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006e16:	2273      	movs	r2, #115	; 0x73
 8006e18:	2194      	movs	r1, #148	; 0x94
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7fd fc5c 	bl	80046d8 <VL53L0X_WrByte>
 8006e20:	ea48 0000 	orr.w	r0, r8, r0
 8006e24:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e26:	4620      	mov	r0, r4
 8006e28:	f7ff fe05 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006e2c:	4328      	orrs	r0, r5
 8006e2e:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e32:	aa06      	add	r2, sp, #24
 8006e34:	2190      	movs	r1, #144	; 0x90
 8006e36:	4620      	mov	r0, r4
 8006e38:	f7fd fc28 	bl	800468c <VL53L0X_RdDWord>

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006e3c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e3e:	ea48 0000 	orr.w	r0, r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006e42:	2274      	movs	r2, #116	; 0x74
 8006e44:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e46:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006e48:	4620      	mov	r0, r4
				0x0000000ff) << 8;
 8006e4a:	ea4f 2803 	mov.w	r8, r3, lsl #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006e4e:	f7fd fc43 	bl	80046d8 <VL53L0X_WrByte>
 8006e52:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff fdee 	bl	8006a36 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006e5a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e5c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e5e:	aa06      	add	r2, sp, #24
 8006e60:	2190      	movs	r1, #144	; 0x90
 8006e62:	4620      	mov	r0, r4
 8006e64:	f7fd fc12 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e68:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006e6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e6e:	4328      	orrs	r0, r5
 8006e70:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006e72:	2275      	movs	r2, #117	; 0x75
 8006e74:	2194      	movs	r1, #148	; 0x94
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006e76:	fa1f f888 	uxth.w	r8, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006e7a:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006e7c:	ea43 0808 	orr.w	r8, r3, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006e80:	f7fd fc2a 	bl	80046d8 <VL53L0X_WrByte>
 8006e84:	4328      	orrs	r0, r5
 8006e86:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7ff fdd4 	bl	8006a36 <VL53L0X_device_read_strobe>
 8006e8e:	4328      	orrs	r0, r5
 8006e90:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e92:	aa06      	add	r2, sp, #24
 8006e94:	2190      	movs	r1, #144	; 0x90
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7fd fbf8 	bl	800468c <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006e9c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e9e:	4328      	orrs	r0, r5
							<< 8;
 8006ea0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006ea2:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006ea4:	2276      	movs	r2, #118	; 0x76
 8006ea6:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ea8:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006eaa:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006eac:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006eae:	f7fd fc13 	bl	80046d8 <VL53L0X_WrByte>
 8006eb2:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f7ff fdbe 	bl	8006a36 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006eba:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ebc:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ebe:	aa06      	add	r2, sp, #24
 8006ec0:	2190      	movs	r1, #144	; 0x90
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7fd fbe2 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ec8:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006eca:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006ece:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ed0:	4328      	orrs	r0, r5
 8006ed2:	b245      	sxtb	r5, r0
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006ed4:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2181      	movs	r1, #129	; 0x81
 8006eda:	4620      	mov	r0, r4
 8006edc:	9303      	str	r3, [sp, #12]
 8006ede:	f7fd fbfb 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006ee2:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006ee4:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006ee6:	21ff      	movs	r1, #255	; 0xff
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7fd fbf5 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006eee:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006ef0:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006ef2:	f10d 0215 	add.w	r2, sp, #21
 8006ef6:	2183      	movs	r1, #131	; 0x83
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f7fd fb5e 	bl	80045ba <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006efe:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006f02:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006f04:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006f06:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8006f0a:	2183      	movs	r1, #131	; 0x83
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7fd fbe3 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006f12:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006f14:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f16:	2201      	movs	r2, #1
 8006f18:	21ff      	movs	r1, #255	; 0xff
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7fd fbdc 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006f20:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f22:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f24:	2201      	movs	r2, #1
 8006f26:	2100      	movs	r1, #0
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f7fd fbd5 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006f2e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f30:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f32:	2200      	movs	r2, #0
 8006f34:	21ff      	movs	r1, #255	; 0xff
 8006f36:	4620      	mov	r0, r4
 8006f38:	f7fd fbce 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006f3c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006f3e:	4328      	orrs	r0, r5
 8006f40:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006f42:	2200      	movs	r2, #0
 8006f44:	2180      	movs	r1, #128	; 0x80
 8006f46:	4620      	mov	r0, r4
 8006f48:	f7fd fbc6 	bl	80046d8 <VL53L0X_WrByte>
 8006f4c:	4328      	orrs	r0, r5
 8006f4e:	b245      	sxtb	r5, r0
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	bb05      	cbnz	r5, 8006f96 <VL53L0X_get_info_from_device+0x51a>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006f54:	f1bb 0f00 	cmp.w	fp, #0
 8006f58:	d12a      	bne.n	8006fb0 <VL53L0X_get_info_from_device+0x534>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8006f5a:	9a02      	ldr	r2, [sp, #8]
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	d139      	bne.n	8006fd4 <VL53L0X_get_info_from_device+0x558>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8006f60:	9a01      	ldr	r2, [sp, #4]
 8006f62:	b1aa      	cbz	r2, 8006f90 <VL53L0X_get_info_from_device+0x514>
 8006f64:	0772      	lsls	r2, r6, #29
 8006f66:	d413      	bmi.n	8006f90 <VL53L0X_get_info_from_device+0x514>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f68:	9a07      	ldr	r2, [sp, #28]
 8006f6a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f6e:	9a08      	ldr	r2, [sp, #32]
 8006f70:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006f74:	ea4f 2248 	mov.w	r2, r8, lsl #9
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006f78:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 8006f7c:	b13b      	cbz	r3, 8006f8e <VL53L0X_get_info_from_device+0x512>
					OffsetFixed1104_mm =
 8006f7e:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f86:	4353      	muls	r3, r2
 8006f88:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 8006f8a:	425b      	negs	r3, r3
 8006f8c:	b21b      	sxth	r3, r3
			}

			PALDevDataSet(Dev,
 8006f8e:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006f90:	433e      	orrs	r6, r7
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006f92:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8006f96:	4628      	mov	r0, r5
 8006f98:	b011      	add	sp, #68	; 0x44
 8006f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8006f9e:	46d9      	mov	r9, fp
	uint8_t ReferenceSpadCount = 0;
 8006fa0:	46da      	mov	sl, fp
 8006fa2:	e624      	b.n	8006bee <VL53L0X_get_info_from_device+0x172>
 8006fa4:	46ca      	mov	sl, r9
 8006fa6:	e622      	b.n	8006bee <VL53L0X_get_info_from_device+0x172>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006fa8:	f04f 0800 	mov.w	r8, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006fac:	4643      	mov	r3, r8
 8006fae:	e792      	b.n	8006ed6 <VL53L0X_get_info_from_device+0x45a>
		if (((option & 1) == 1) &&
 8006fb0:	07f0      	lsls	r0, r6, #31
 8006fb2:	d4d2      	bmi.n	8006f5a <VL53L0X_get_info_from_device+0x4de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fb4:	f884 a113 	strb.w	sl, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fb8:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006fbc:	a909      	add	r1, sp, #36	; 0x24
 8006fbe:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8006fc2:	f504 7098 	add.w	r0, r4, #304	; 0x130
					NvmRefGoodSpadMap[i];
 8006fc6:	f811 cb01 	ldrb.w	ip, [r1], #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006fca:	f802 cb01 	strb.w	ip, [r2], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006fce:	4290      	cmp	r0, r2
 8006fd0:	d1f9      	bne.n	8006fc6 <VL53L0X_get_info_from_device+0x54a>
 8006fd2:	e7c2      	b.n	8006f5a <VL53L0X_get_info_from_device+0x4de>
		if (((option & 2) == 2) &&
 8006fd4:	07b1      	lsls	r1, r6, #30
 8006fd6:	d4c3      	bmi.n	8006f60 <VL53L0X_get_info_from_device+0x4e4>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fd8:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8006fdc:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006fe0:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8006fe4:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006fe8:	a90b      	add	r1, sp, #44	; 0x2c
 8006fea:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8006fee:	9302      	str	r3, [sp, #8]
 8006ff0:	f01c fbc2 	bl	8023778 <strcpy>
 8006ff4:	9b02      	ldr	r3, [sp, #8]
 8006ff6:	e7b3      	b.n	8006f60 <VL53L0X_get_info_from_device+0x4e4>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ff8:	464d      	mov	r5, r9
 8006ffa:	e7cc      	b.n	8006f96 <VL53L0X_get_info_from_device+0x51a>

08006ffc <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8006ffc:	b150      	cbz	r0, 8007014 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8006ffe:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007000:	2300      	movs	r3, #0
 8007002:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8007006:	b29a      	uxth	r2, r3
 8007008:	f103 0301 	add.w	r3, r3, #1
 800700c:	d103      	bne.n	8007016 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 800700e:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8007012:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8007014:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8007016:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 8007018:	e7f3      	b.n	8007002 <VL53L0X_encode_timeout+0x6>

0800701a <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800701a:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800701c:	0a00      	lsrs	r0, r0, #8
 800701e:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8007022:	3001      	adds	r0, #1
 8007024:	4770      	bx	lr
	...

08007028 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007028:	4b08      	ldr	r3, [pc, #32]	; (800704c <VL53L0X_calc_timeout_mclks+0x24>)
 800702a:	435a      	muls	r2, r3

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800702c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007030:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007034:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007038:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800703c:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007040:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 8007044:	fbb0 f0f2 	udiv	r0, r0, r2
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	003a2f00 	.word	0x003a2f00

08007050 <set_sequence_step_timeout.part.0>:

	return Status;
}


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 8007050:	b5f0      	push	{r4, r5, r6, r7, lr}
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007052:	2903      	cmp	r1, #3
VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 8007054:	b085      	sub	sp, #20
 8007056:	4605      	mov	r5, r0
 8007058:	4616      	mov	r6, r2
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800705a:	d11f      	bne.n	800709c <set_sequence_step_timeout.part.0+0x4c>

			if (Status == VL53L0X_ERROR_NONE) {
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800705c:	f10d 0205 	add.w	r2, sp, #5
 8007060:	2100      	movs	r1, #0
 8007062:	f7fe fbeb 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007066:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800706a:	4631      	mov	r1, r6
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800706c:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 800706e:	4628      	mov	r0, r5
 8007070:	f7ff ffda 	bl	8007028 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007074:	b280      	uxth	r0, r0
 8007076:	f7ff ffc1 	bl	8006ffc <VL53L0X_encode_timeout>
 800707a:	4602      	mov	r2, r0
 800707c:	f8ad 0006 	strh.w	r0, [sp, #6]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007080:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007084:	b93c      	cbnz	r4, 8007096 <set_sequence_step_timeout.part.0+0x46>
				Status = VL53L0X_WrWord(Dev,
 8007086:	2151      	movs	r1, #81	; 0x51
 8007088:	4628      	mov	r0, r5
 800708a:	f7fd fb35 	bl	80046f8 <VL53L0X_WrWord>
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800708e:	4604      	mov	r4, r0
 8007090:	b908      	cbnz	r0, 8007096 <set_sequence_step_timeout.part.0+0x46>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007092:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8007096:	4620      	mov	r0, r4
 8007098:	b005      	add	sp, #20
 800709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800709c:	2904      	cmp	r1, #4
 800709e:	d13b      	bne.n	8007118 <set_sequence_step_timeout.part.0+0xc8>
			VL53L0X_GetSequenceStepEnables(Dev,
 80070a0:	a902      	add	r1, sp, #8
 80070a2:	f7fe fc1f 	bl	80058e4 <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 80070a6:	f89d 700b 	ldrb.w	r7, [sp, #11]
 80070aa:	b1b7      	cbz	r7, 80070da <set_sequence_step_timeout.part.0+0x8a>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070ac:	f10d 0205 	add.w	r2, sp, #5
 80070b0:	2100      	movs	r1, #0
 80070b2:	4628      	mov	r0, r5
 80070b4:	f7fe fbc2 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 80070b8:	4604      	mov	r4, r0
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d1eb      	bne.n	8007096 <set_sequence_step_timeout.part.0+0x46>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80070be:	f10d 0206 	add.w	r2, sp, #6
 80070c2:	2151      	movs	r1, #81	; 0x51
 80070c4:	4628      	mov	r0, r5
 80070c6:	f7fd fac1 	bl	800464c <VL53L0X_RdWord>
 80070ca:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 80070cc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80070d0:	f7ff ffa3 	bl	800701a <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 80070d4:	b287      	uxth	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	d1dd      	bne.n	8007096 <set_sequence_step_timeout.part.0+0x46>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070da:	f10d 0205 	add.w	r2, sp, #5
 80070de:	2101      	movs	r1, #1
 80070e0:	4628      	mov	r0, r5
 80070e2:	f7fe fbab 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80070e6:	4604      	mov	r4, r0
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d1d4      	bne.n	8007096 <set_sequence_step_timeout.part.0+0x46>
					VL53L0X_calc_timeout_mclks(Dev,
 80070ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	f7ff ff98 	bl	8007028 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80070f8:	fa17 f080 	uxtah	r0, r7, r0
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80070fc:	b280      	uxth	r0, r0
 80070fe:	f7ff ff7d 	bl	8006ffc <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007102:	2171      	movs	r1, #113	; 0x71
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007104:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007106:	4628      	mov	r0, r5
 8007108:	f7fd faf6 	bl	80046f8 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 800710c:	4604      	mov	r4, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d1c1      	bne.n	8007096 <set_sequence_step_timeout.part.0+0x46>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007112:	f8c5 60dc 	str.w	r6, [r5, #220]	; 0xdc
 8007116:	e7be      	b.n	8007096 <set_sequence_step_timeout.part.0+0x46>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007118:	f06f 0403 	mvn.w	r4, #3
 800711c:	e7bb      	b.n	8007096 <set_sequence_step_timeout.part.0+0x46>
	...

08007120 <VL53L0X_calc_timeout_us>:
{
 8007120:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <VL53L0X_calc_timeout_us+0x24>)
 8007124:	435a      	muls	r2, r3
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007126:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 800712a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		+ (macro_period_ns / 2)) / 1000;
 800712e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007132:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 8007136:	fbb2 f2f4 	udiv	r2, r2, r4
 800713a:	fb01 2203 	mla	r2, r1, r3, r2
}
 800713e:	fbb2 f0f0 	udiv	r0, r2, r0
 8007142:	bd10      	pop	{r4, pc}
 8007144:	003a2f00 	.word	0x003a2f00

08007148 <get_sequence_step_timeout>:
{
 8007148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800714c:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 800714e:	f04f 0500 	mov.w	r5, #0
{
 8007152:	4607      	mov	r7, r0
 8007154:	4616      	mov	r6, r2
	uint8_t EncodedTimeOutByte = 0;
 8007156:	f88d 5003 	strb.w	r5, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 800715a:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800715e:	d81c      	bhi.n	800719a <get_sequence_step_timeout+0x52>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007160:	f10d 0202 	add.w	r2, sp, #2
 8007164:	4629      	mov	r1, r5
 8007166:	f7fe fb69 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 800716a:	4604      	mov	r4, r0
 800716c:	b930      	cbnz	r0, 800717c <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 800716e:	f10d 0203 	add.w	r2, sp, #3
 8007172:	2146      	movs	r1, #70	; 0x46
 8007174:	4638      	mov	r0, r7
 8007176:	f7fd fa20 	bl	80045ba <VL53L0X_RdByte>
 800717a:	4604      	mov	r4, r0
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800717c:	f89d 0003 	ldrb.w	r0, [sp, #3]
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007180:	f7ff ff4b 	bl	800701a <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007184:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8007188:	b281      	uxth	r1, r0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800718a:	4638      	mov	r0, r7
 800718c:	f7ff ffc8 	bl	8007120 <VL53L0X_calc_timeout_us>
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007190:	6030      	str	r0, [r6, #0]
}
 8007192:	4620      	mov	r0, r4
 8007194:	b004      	add	sp, #16
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800719a:	2903      	cmp	r1, #3
 800719c:	d118      	bne.n	80071d0 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800719e:	f10d 0202 	add.w	r2, sp, #2
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7fe fb4a 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80071a8:	4604      	mov	r4, r0
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d149      	bne.n	8007242 <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071ae:	4601      	mov	r1, r0
 80071b0:	f10d 0202 	add.w	r2, sp, #2
 80071b4:	4638      	mov	r0, r7
 80071b6:	f7fe fb41 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80071ba:	4604      	mov	r4, r0
 80071bc:	b928      	cbnz	r0, 80071ca <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
 80071be:	aa01      	add	r2, sp, #4
 80071c0:	2151      	movs	r1, #81	; 0x51
 80071c2:	4638      	mov	r0, r7
 80071c4:	f7fd fa42 	bl	800464c <VL53L0X_RdWord>
 80071c8:	4604      	mov	r4, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80071ca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80071ce:	e7d7      	b.n	8007180 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80071d0:	2904      	cmp	r1, #4
 80071d2:	d138      	bne.n	8007246 <get_sequence_step_timeout+0xfe>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80071d4:	a902      	add	r1, sp, #8
 80071d6:	f7fe fb85 	bl	80058e4 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80071da:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80071de:	b1a8      	cbz	r0, 800720c <get_sequence_step_timeout+0xc4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80071e0:	f10d 0202 	add.w	r2, sp, #2
 80071e4:	4629      	mov	r1, r5
 80071e6:	4638      	mov	r0, r7
 80071e8:	f7fe fb28 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
 80071ec:	4604      	mov	r4, r0
			if (Status == VL53L0X_ERROR_NONE) {
 80071ee:	b958      	cbnz	r0, 8007208 <get_sequence_step_timeout+0xc0>
				Status = VL53L0X_RdWord(Dev,
 80071f0:	aa01      	add	r2, sp, #4
 80071f2:	2151      	movs	r1, #81	; 0x51
 80071f4:	4638      	mov	r0, r7
 80071f6:	f7fd fa29 	bl	800464c <VL53L0X_RdWord>
 80071fa:	4604      	mov	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80071fc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8007200:	f7ff ff0b 	bl	800701a <VL53L0X_decode_timeout>
 8007204:	b285      	uxth	r5, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8007206:	b114      	cbz	r4, 800720e <get_sequence_step_timeout+0xc6>
	uint16_t FinalRangeTimeOutMClks = 0;
 8007208:	2000      	movs	r0, #0
 800720a:	e015      	b.n	8007238 <get_sequence_step_timeout+0xf0>
		PreRangeTimeOutMClks = 0;
 800720c:	4605      	mov	r5, r0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800720e:	f10d 0202 	add.w	r2, sp, #2
 8007212:	2101      	movs	r1, #1
 8007214:	4638      	mov	r0, r7
 8007216:	f7fe fb11 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 800721a:	4604      	mov	r4, r0
 800721c:	2800      	cmp	r0, #0
 800721e:	d1f3      	bne.n	8007208 <get_sequence_step_timeout+0xc0>
			Status = VL53L0X_RdWord(Dev,
 8007220:	f10d 0206 	add.w	r2, sp, #6
 8007224:	2171      	movs	r1, #113	; 0x71
 8007226:	4638      	mov	r0, r7
 8007228:	f7fd fa10 	bl	800464c <VL53L0X_RdWord>
 800722c:	4604      	mov	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800722e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007232:	f7ff fef2 	bl	800701a <VL53L0X_decode_timeout>
 8007236:	b280      	uxth	r0, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007238:	1b45      	subs	r5, r0, r5
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800723a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800723e:	b2a9      	uxth	r1, r5
 8007240:	e7a3      	b.n	800718a <get_sequence_step_timeout+0x42>
	uint32_t TimeoutMicroSeconds = 0;
 8007242:	4628      	mov	r0, r5
 8007244:	e7a4      	b.n	8007190 <get_sequence_step_timeout+0x48>
 8007246:	4628      	mov	r0, r5
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007248:	462c      	mov	r4, r5
 800724a:	e7a1      	b.n	8007190 <get_sequence_step_timeout+0x48>

0800724c <set_sequence_step_timeout>:
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800724c:	2902      	cmp	r1, #2
{
 800724e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007250:	4604      	mov	r4, r0
 8007252:	4615      	mov	r5, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007254:	d81b      	bhi.n	800728e <set_sequence_step_timeout+0x42>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007256:	f10d 0207 	add.w	r2, sp, #7
 800725a:	2100      	movs	r1, #0
 800725c:	f7fe faee 	bl	800583c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8007260:	b998      	cbnz	r0, 800728a <set_sequence_step_timeout+0x3e>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007262:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007266:	4629      	mov	r1, r5
 8007268:	4620      	mov	r0, r4
 800726a:	f7ff fedd 	bl	8007028 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 800726e:	b283      	uxth	r3, r0
 8007270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
 8007274:	bf9a      	itte	ls
 8007276:	f100 32ff 	addls.w	r2, r0, #4294967295
 800727a:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 800727c:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800727e:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
 8007282:	2146      	movs	r1, #70	; 0x46
 8007284:	4620      	mov	r0, r4
 8007286:	f7fd fa27 	bl	80046d8 <VL53L0X_WrByte>
}
 800728a:	b003      	add	sp, #12
 800728c:	bd30      	pop	{r4, r5, pc}
 800728e:	f7ff fedf 	bl	8007050 <set_sequence_step_timeout.part.0>
 8007292:	e7fa      	b.n	800728a <set_sequence_step_timeout+0x3e>

08007294 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	b085      	sub	sp, #20
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800729a:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800729c:	f012 0b01 	ands.w	fp, r2, #1
{
 80072a0:	4680      	mov	r8, r0
 80072a2:	468a      	mov	sl, r1
 80072a4:	4691      	mov	r9, r2
	uint8_t PhaseCalInt = 0;
 80072a6:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80072aa:	d104      	bne.n	80072b6 <VL53L0X_set_vcsel_pulse_period+0x22>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80072ac:	b931      	cbnz	r1, 80072bc <VL53L0X_set_vcsel_pulse_period+0x28>
 80072ae:	f1a2 030c 	sub.w	r3, r2, #12
 80072b2:	2b06      	cmp	r3, #6
 80072b4:	d957      	bls.n	8007366 <VL53L0X_set_vcsel_pulse_period+0xd2>
 80072b6:	f06f 0003 	mvn.w	r0, #3
 80072ba:	e061      	b.n	8007380 <VL53L0X_set_vcsel_pulse_period+0xec>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80072bc:	2901      	cmp	r1, #1
 80072be:	d01e      	beq.n	80072fe <VL53L0X_set_vcsel_pulse_period+0x6a>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80072c0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80072c4:	3c01      	subs	r4, #1
 80072c6:	b2e4      	uxtb	r4, r4
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80072c8:	f1ba 0f00 	cmp.w	sl, #0
 80072cc:	f000 80b5 	beq.w	800743a <VL53L0X_set_vcsel_pulse_period+0x1a6>
 80072d0:	f1ba 0f01 	cmp.w	sl, #1
 80072d4:	d1ef      	bne.n	80072b6 <VL53L0X_set_vcsel_pulse_period+0x22>
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80072d6:	aa01      	add	r2, sp, #4
 80072d8:	2104      	movs	r1, #4
 80072da:	4640      	mov	r0, r8
 80072dc:	f7ff ff34 	bl	8007148 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80072e0:	b950      	cbnz	r0, 80072f8 <VL53L0X_set_vcsel_pulse_period+0x64>
				Status = VL53L0X_WrByte(Dev,
 80072e2:	4622      	mov	r2, r4
 80072e4:	2170      	movs	r1, #112	; 0x70
 80072e6:	4640      	mov	r0, r8
 80072e8:	f7fd f9f6 	bl	80046d8 <VL53L0X_WrByte>
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 80072ec:	b920      	cbnz	r0, 80072f8 <VL53L0X_set_vcsel_pulse_period+0x64>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80072ee:	9a01      	ldr	r2, [sp, #4]
 80072f0:	2104      	movs	r1, #4
 80072f2:	4640      	mov	r0, r8
 80072f4:	f7ff feac 	bl	8007050 <set_sequence_step_timeout.part.0>
				Status = set_sequence_step_timeout(Dev,
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80072f8:	f888 90e0 	strb.w	r9, [r8, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80072fc:	e0bc      	b.n	8007478 <VL53L0X_set_vcsel_pulse_period+0x1e4>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80072fe:	f1a2 0308 	sub.w	r3, r2, #8
 8007302:	2b06      	cmp	r3, #6
 8007304:	d8d7      	bhi.n	80072b6 <VL53L0X_set_vcsel_pulse_period+0x22>
		if (VCSELPulsePeriodPCLK == 8) {
 8007306:	2a08      	cmp	r2, #8
 8007308:	d149      	bne.n	800739e <VL53L0X_set_vcsel_pulse_period+0x10a>
			Status = VL53L0X_WrByte(Dev,
 800730a:	2210      	movs	r2, #16
 800730c:	2148      	movs	r1, #72	; 0x48
 800730e:	f7fd f9e3 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007312:	464a      	mov	r2, r9
 8007314:	2147      	movs	r1, #71	; 0x47
 8007316:	4640      	mov	r0, r8
 8007318:	f7fd f9de 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800731c:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 800731e:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007320:	2132      	movs	r1, #50	; 0x32
 8007322:	4640      	mov	r0, r8
 8007324:	f7fd f9d8 	bl	80046d8 <VL53L0X_WrByte>
 8007328:	4338      	orrs	r0, r7
 800732a:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800732c:	220c      	movs	r2, #12
 800732e:	2130      	movs	r1, #48	; 0x30
 8007330:	4640      	mov	r0, r8
 8007332:	f7fd f9d1 	bl	80046d8 <VL53L0X_WrByte>
 8007336:	4338      	orrs	r0, r7
 8007338:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800733a:	4652      	mov	r2, sl
 800733c:	21ff      	movs	r1, #255	; 0xff
 800733e:	4640      	mov	r0, r8
 8007340:	f7fd f9ca 	bl	80046d8 <VL53L0X_WrByte>
 8007344:	4330      	orrs	r0, r6
 8007346:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 8007348:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 800734a:	2130      	movs	r1, #48	; 0x30
 800734c:	4640      	mov	r0, r8
 800734e:	f7fd f9c3 	bl	80046d8 <VL53L0X_WrByte>
 8007352:	4328      	orrs	r0, r5
 8007354:	b244      	sxtb	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007356:	465a      	mov	r2, fp
 8007358:	21ff      	movs	r1, #255	; 0xff
 800735a:	4640      	mov	r0, r8
 800735c:	f7fd f9bc 	bl	80046d8 <VL53L0X_WrByte>
 8007360:	4320      	orrs	r0, r4
 8007362:	b240      	sxtb	r0, r0
 8007364:	e00a      	b.n	800737c <VL53L0X_set_vcsel_pulse_period+0xe8>
		if (VCSELPulsePeriodPCLK == 12) {
 8007366:	2a0c      	cmp	r2, #12
 8007368:	d10d      	bne.n	8007386 <VL53L0X_set_vcsel_pulse_period+0xf2>
			Status = VL53L0X_WrByte(Dev,
 800736a:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
 800736c:	2157      	movs	r1, #87	; 0x57
 800736e:	f7fd f9b3 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007372:	2208      	movs	r2, #8
 8007374:	2156      	movs	r1, #86	; 0x56
 8007376:	4640      	mov	r0, r8
 8007378:	f7fd f9ae 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 800737c:	2800      	cmp	r0, #0
 800737e:	d09f      	beq.n	80072c0 <VL53L0X_set_vcsel_pulse_period+0x2c>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 8007380:	b005      	add	sp, #20
 8007382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007386:	2a0e      	cmp	r2, #14
 8007388:	d101      	bne.n	800738e <VL53L0X_set_vcsel_pulse_period+0xfa>
			Status = VL53L0X_WrByte(Dev,
 800738a:	2230      	movs	r2, #48	; 0x30
 800738c:	e7ee      	b.n	800736c <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 16) {
 800738e:	2a10      	cmp	r2, #16
 8007390:	d101      	bne.n	8007396 <VL53L0X_set_vcsel_pulse_period+0x102>
			Status = VL53L0X_WrByte(Dev,
 8007392:	2240      	movs	r2, #64	; 0x40
 8007394:	e7ea      	b.n	800736c <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007396:	2a12      	cmp	r2, #18
 8007398:	d192      	bne.n	80072c0 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 800739a:	2250      	movs	r2, #80	; 0x50
 800739c:	e7e6      	b.n	800736c <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800739e:	2a0a      	cmp	r2, #10
 80073a0:	d120      	bne.n	80073e4 <VL53L0X_set_vcsel_pulse_period+0x150>
			Status = VL53L0X_WrByte(Dev,
 80073a2:	2228      	movs	r2, #40	; 0x28
 80073a4:	2148      	movs	r1, #72	; 0x48
 80073a6:	f7fd f997 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80073aa:	2208      	movs	r2, #8
 80073ac:	2147      	movs	r1, #71	; 0x47
 80073ae:	4640      	mov	r0, r8
 80073b0:	f7fd f992 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80073b4:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80073b6:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80073b8:	2132      	movs	r1, #50	; 0x32
 80073ba:	4640      	mov	r0, r8
 80073bc:	f7fd f98c 	bl	80046d8 <VL53L0X_WrByte>
 80073c0:	4338      	orrs	r0, r7
 80073c2:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80073c4:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 80073c6:	2130      	movs	r1, #48	; 0x30
 80073c8:	4640      	mov	r0, r8
 80073ca:	f7fd f985 	bl	80046d8 <VL53L0X_WrByte>
 80073ce:	4338      	orrs	r0, r7
 80073d0:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80073d2:	4652      	mov	r2, sl
 80073d4:	21ff      	movs	r1, #255	; 0xff
 80073d6:	4640      	mov	r0, r8
 80073d8:	f7fd f97e 	bl	80046d8 <VL53L0X_WrByte>
 80073dc:	4330      	orrs	r0, r6
 80073de:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 80073e0:	2220      	movs	r2, #32
 80073e2:	e7b2      	b.n	800734a <VL53L0X_set_vcsel_pulse_period+0xb6>
		} else if (VCSELPulsePeriodPCLK == 12) {
 80073e4:	2a0c      	cmp	r2, #12
 80073e6:	d112      	bne.n	800740e <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 80073e8:	2238      	movs	r2, #56	; 0x38
 80073ea:	2148      	movs	r1, #72	; 0x48
 80073ec:	f7fd f974 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80073f0:	2208      	movs	r2, #8
 80073f2:	2147      	movs	r1, #71	; 0x47
 80073f4:	4640      	mov	r0, r8
 80073f6:	f7fd f96f 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80073fa:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80073fc:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80073fe:	2132      	movs	r1, #50	; 0x32
 8007400:	4640      	mov	r0, r8
 8007402:	f7fd f969 	bl	80046d8 <VL53L0X_WrByte>
 8007406:	4338      	orrs	r0, r7
 8007408:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800740a:	2208      	movs	r2, #8
 800740c:	e7db      	b.n	80073c6 <VL53L0X_set_vcsel_pulse_period+0x132>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800740e:	2a0e      	cmp	r2, #14
 8007410:	f47f af56 	bne.w	80072c0 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 8007414:	2248      	movs	r2, #72	; 0x48
 8007416:	4611      	mov	r1, r2
 8007418:	f7fd f95e 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800741c:	2208      	movs	r2, #8
 800741e:	2147      	movs	r1, #71	; 0x47
 8007420:	4640      	mov	r0, r8
 8007422:	f7fd f959 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007426:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007428:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800742a:	2132      	movs	r1, #50	; 0x32
 800742c:	4640      	mov	r0, r8
 800742e:	f7fd f953 	bl	80046d8 <VL53L0X_WrByte>
 8007432:	4338      	orrs	r0, r7
 8007434:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007436:	2207      	movs	r2, #7
 8007438:	e7c5      	b.n	80073c6 <VL53L0X_set_vcsel_pulse_period+0x132>
			Status = get_sequence_step_timeout(Dev,
 800743a:	aa02      	add	r2, sp, #8
 800743c:	2103      	movs	r1, #3
 800743e:	4640      	mov	r0, r8
 8007440:	f7ff fe82 	bl	8007148 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8007444:	b9b0      	cbnz	r0, 8007474 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = get_sequence_step_timeout(Dev,
 8007446:	aa03      	add	r2, sp, #12
 8007448:	2102      	movs	r1, #2
 800744a:	4640      	mov	r0, r8
 800744c:	f7ff fe7c 	bl	8007148 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8007450:	b980      	cbnz	r0, 8007474 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = VL53L0X_WrByte(Dev,
 8007452:	4622      	mov	r2, r4
 8007454:	2150      	movs	r1, #80	; 0x50
 8007456:	4640      	mov	r0, r8
 8007458:	f7fd f93e 	bl	80046d8 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 800745c:	b950      	cbnz	r0, 8007474 <VL53L0X_set_vcsel_pulse_period+0x1e0>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800745e:	9a02      	ldr	r2, [sp, #8]
 8007460:	2103      	movs	r1, #3
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fdf4 	bl	8007050 <set_sequence_step_timeout.part.0>
			if (Status == VL53L0X_ERROR_NONE)
 8007468:	b920      	cbnz	r0, 8007474 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = set_sequence_step_timeout(Dev,
 800746a:	9a03      	ldr	r2, [sp, #12]
 800746c:	2102      	movs	r1, #2
 800746e:	4640      	mov	r0, r8
 8007470:	f7ff feec 	bl	800724c <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007474:	f888 90e8 	strb.w	r9, [r8, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 8007478:	2800      	cmp	r0, #0
 800747a:	d181      	bne.n	8007380 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800747c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8007480:	4640      	mov	r0, r8
 8007482:	f7fe f9d7 	bl	8005834 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8007486:	2800      	cmp	r0, #0
 8007488:	f47f af7a 	bne.w	8007380 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_perform_phase_calibration(
 800748c:	4602      	mov	r2, r0
 800748e:	2301      	movs	r3, #1
 8007490:	f10d 0103 	add.w	r1, sp, #3
 8007494:	4640      	mov	r0, r8
 8007496:	f7ff f915 	bl	80066c4 <VL53L0X_perform_phase_calibration>
 800749a:	e771      	b.n	8007380 <VL53L0X_set_vcsel_pulse_period+0xec>

0800749c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800749c:	b513      	push	{r0, r1, r4, lr}
 800749e:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80074a0:	b129      	cbz	r1, 80074ae <VL53L0X_get_vcsel_pulse_period+0x12>
 80074a2:	2901      	cmp	r1, #1
 80074a4:	d010      	beq.n	80074c8 <VL53L0X_get_vcsel_pulse_period+0x2c>
 80074a6:	f06f 0003 	mvn.w	r0, #3
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80074aa:	b002      	add	sp, #8
 80074ac:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80074ae:	f10d 0207 	add.w	r2, sp, #7
 80074b2:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 80074b4:	f7fd f881 	bl	80045ba <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d1f6      	bne.n	80074aa <VL53L0X_get_vcsel_pulse_period+0xe>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80074bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80074c0:	3301      	adds	r3, #1
 80074c2:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 80074c4:	7023      	strb	r3, [r4, #0]
 80074c6:	e7f0      	b.n	80074aa <VL53L0X_get_vcsel_pulse_period+0xe>
		Status = VL53L0X_RdByte(Dev,
 80074c8:	f10d 0207 	add.w	r2, sp, #7
 80074cc:	2170      	movs	r1, #112	; 0x70
 80074ce:	e7f1      	b.n	80074b4 <VL53L0X_get_vcsel_pulse_period+0x18>

080074d0 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80074d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80074d2:	2300      	movs	r3, #0
{
 80074d4:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80074d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80074da:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80074de:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80074e2:	4299      	cmp	r1, r3
{
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 80074e8:	d804      	bhi.n	80074f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 80074ea:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 80074ee:	4628      	mov	r0, r5
 80074f0:	b005      	add	sp, #20
 80074f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80074f4:	a902      	add	r1, sp, #8
 80074f6:	f7fe f9f5 	bl	80058e4 <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 80074fa:	4605      	mov	r5, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1f6      	bne.n	80074ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		SchedulerSequenceSteps.MsrcOn ||
 8007500:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8007504:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007508:	4313      	orrs	r3, r2
 800750a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800750e:	4313      	orrs	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007510:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
		SchedulerSequenceSteps.MsrcOn ||
 8007514:	d01b      	beq.n	800754e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
		Status = get_sequence_step_timeout(Dev,
 8007516:	466a      	mov	r2, sp
 8007518:	2102      	movs	r1, #2
 800751a:	4630      	mov	r0, r6
 800751c:	f7ff fe14 	bl	8007148 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8007520:	2800      	cmp	r0, #0
 8007522:	d13b      	bne.n	800759c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
		if (SchedulerSequenceSteps.TccOn) {
 8007524:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007528:	b12b      	cbz	r3, 8007536 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800752a:	9b00      	ldr	r3, [sp, #0]
 800752c:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8007530:	429c      	cmp	r4, r3
 8007532:	d9da      	bls.n	80074ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8007534:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8007536:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800753a:	b323      	cbz	r3, 8007586 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb6>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800753c:	9b00      	ldr	r3, [sp, #0]
 800753e:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007542:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007546:	ea4f 0243 	mov.w	r2, r3, lsl #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800754a:	d9ce      	bls.n	80074ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 800754c:	1aa4      	subs	r4, r4, r2
	if (SchedulerSequenceSteps.PreRangeOn) {
 800754e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007552:	b15b      	cbz	r3, 800756c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
		Status = get_sequence_step_timeout(Dev,
 8007554:	aa01      	add	r2, sp, #4
 8007556:	2103      	movs	r1, #3
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff fdf5 	bl	8007148 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007564:	42a3      	cmp	r3, r4
 8007566:	d2c0      	bcs.n	80074ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8007568:	b9c0      	cbnz	r0, 800759c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800756a:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 800756c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d0bc      	beq.n	80074ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007574:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 8007578:	2104      	movs	r1, #4
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff fd68 	bl	8007050 <set_sequence_step_timeout.part.0>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007580:	6177      	str	r7, [r6, #20]
 8007582:	4605      	mov	r5, r0
 8007584:	e7b3      	b.n	80074ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007586:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0df      	beq.n	800754e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800758e:	9b00      	ldr	r3, [sp, #0]
 8007590:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007594:	429c      	cmp	r4, r3
 8007596:	d9a8      	bls.n	80074ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8007598:	1ae4      	subs	r4, r4, r3
	if (Status != VL53L0X_ERROR_NONE) {
 800759a:	e7d8      	b.n	800754e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
 800759c:	4605      	mov	r5, r0
 800759e:	e7a6      	b.n	80074ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080075a0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80075a0:	b570      	push	{r4, r5, r6, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80075a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 80075a6:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	e9cd 2302 	strd	r2, r3, [sp, #8]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80075ae:	f640 3336 	movw	r3, #2870	; 0xb36
 80075b2:	600b      	str	r3, [r1, #0]
{
 80075b4:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075b6:	a904      	add	r1, sp, #16
{
 80075b8:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075ba:	f7fe f993 	bl	80058e4 <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80075be:	4605      	mov	r5, r0
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d136      	bne.n	8007632 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
 80075c4:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80075c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	d019      	beq.n	800760a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 80075d6:	aa02      	add	r2, sp, #8
 80075d8:	2102      	movs	r1, #2
 80075da:	4630      	mov	r0, r6
 80075dc:	f7ff fdb4 	bl	8007148 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d140      	bne.n	8007666 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 80075e4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80075e8:	b12b      	cbz	r3, 80075f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 80075ea:	9b02      	ldr	r3, [sp, #8]
 80075ec:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	4413      	add	r3, r2
 80075f4:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80075f6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80075fa:	b1eb      	cbz	r3, 8007638 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80075fc:	9b02      	ldr	r3, [sp, #8]
 80075fe:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8007608:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 800760a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800760e:	b9eb      	cbnz	r3, 800764c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007610:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007614:	b15b      	cbz	r3, 800762e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
 8007616:	aa01      	add	r2, sp, #4
 8007618:	2104      	movs	r1, #4
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff fd94 	bl	8007148 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				(FinalRangeTimeoutMicroSeconds +
 8007620:	9b01      	ldr	r3, [sp, #4]
 8007622:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	4413      	add	r3, r2
 800762a:	6023      	str	r3, [r4, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800762c:	b9d8      	cbnz	r0, 8007666 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007632:	4628      	mov	r0, r5
 8007634:	b006      	add	sp, #24
 8007636:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007638:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0e4      	beq.n	800760a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8007640:	9b02      	ldr	r3, [sp, #8]
 8007642:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	4413      	add	r3, r2
 800764a:	e7dd      	b.n	8007608 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 800764c:	aa03      	add	r2, sp, #12
 800764e:	2103      	movs	r1, #3
 8007650:	4630      	mov	r0, r6
 8007652:	f7ff fd79 	bl	8007148 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 8007656:	9b03      	ldr	r3, [sp, #12]
 8007658:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	4413      	add	r3, r2
 8007660:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8007662:	2800      	cmp	r0, #0
 8007664:	d0d4      	beq.n	8007610 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
 8007666:	4605      	mov	r5, r0
 8007668:	e7e3      	b.n	8007632 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

0800766a <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800766a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800766c:	2200      	movs	r2, #0
{
 800766e:	4607      	mov	r7, r0
 8007670:	460e      	mov	r6, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007672:	4610      	mov	r0, r2

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007674:	5cb3      	ldrb	r3, [r6, r2]
 8007676:	b103      	cbz	r3, 800767a <VL53L0X_load_tuning_settings+0x10>
 8007678:	b108      	cbz	r0, 800767e <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800767a:	b003      	add	sp, #12
 800767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Index++;
 800767e:	1c55      	adds	r5, r2, #1
		if (NumberOfWrites == 0xFF) {
 8007680:	2bff      	cmp	r3, #255	; 0xff
 8007682:	5d71      	ldrb	r1, [r6, r5]
 8007684:	d128      	bne.n	80076d8 <VL53L0X_load_tuning_settings+0x6e>
			Index++;
 8007686:	1c95      	adds	r5, r2, #2
			switch (SelectParam) {
 8007688:	5d73      	ldrb	r3, [r6, r5]
 800768a:	2903      	cmp	r1, #3
 800768c:	d837      	bhi.n	80076fe <VL53L0X_load_tuning_settings+0x94>
 800768e:	e8df f001 	tbb	[pc, r1]
 8007692:	0b02      	.short	0x0b02
 8007694:	1b13      	.short	0x1b13
				Index++;
 8007696:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 8007698:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800769a:	78d2      	ldrb	r2, [r2, #3]
 800769c:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80076a0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076a4:	462a      	mov	r2, r5
 80076a6:	e7e5      	b.n	8007674 <VL53L0X_load_tuning_settings+0xa>
				Index++;
 80076a8:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80076aa:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80076ac:	78d2      	ldrb	r2, [r2, #3]
 80076ae:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80076b2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
				break;
 80076b6:	e7f5      	b.n	80076a4 <VL53L0X_load_tuning_settings+0x3a>
				Index++;
 80076b8:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80076ba:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80076bc:	78d2      	ldrb	r2, [r2, #3]
 80076be:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80076c2:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
				break;
 80076c6:	e7ed      	b.n	80076a4 <VL53L0X_load_tuning_settings+0x3a>
				Index++;
 80076c8:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80076ca:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80076cc:	78d2      	ldrb	r2, [r2, #3]
 80076ce:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80076d2:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
				break;
 80076d6:	e7e5      	b.n	80076a4 <VL53L0X_load_tuning_settings+0x3a>
		} else if (NumberOfWrites <= 4) {
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d810      	bhi.n	80076fe <VL53L0X_load_tuning_settings+0x94>
			Index++;
 80076dc:	f10d 0c04 	add.w	ip, sp, #4
 80076e0:	1c94      	adds	r4, r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 80076e2:	4435      	add	r5, r6
 80076e4:	4662      	mov	r2, ip
 80076e6:	3001      	adds	r0, #1
				localBuffer[i] = *(pTuningSettingBuffer +
 80076e8:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 80076ec:	f80c eb01 	strb.w	lr, [ip], #1
			for (i = 0; i < NumberOfWrites; i++) {
 80076f0:	4283      	cmp	r3, r0
 80076f2:	dcf8      	bgt.n	80076e6 <VL53L0X_load_tuning_settings+0x7c>
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80076f4:	4638      	mov	r0, r7
 80076f6:	18e5      	adds	r5, r4, r3
 80076f8:	f7fc ff74 	bl	80045e4 <VL53L0X_WriteMulti>
 80076fc:	e7d2      	b.n	80076a4 <VL53L0X_load_tuning_settings+0x3a>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076fe:	f06f 0003 	mvn.w	r0, #3
 8007702:	e7cf      	b.n	80076a4 <VL53L0X_load_tuning_settings+0x3a>

08007704 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007704:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007706:	2300      	movs	r3, #0
{
 8007708:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 800770a:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800770c:	f10d 0107 	add.w	r1, sp, #7
{
 8007710:	4605      	mov	r5, r0
 8007712:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007714:	f7fe f935 	bl	8005982 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8007718:	b940      	cbnz	r0, 800772c <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 800771a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800771e:	b12b      	cbz	r3, 800772c <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007720:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8007722:	6a2b      	ldr	r3, [r5, #32]
 8007724:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007726:	3380      	adds	r3, #128	; 0x80
 8007728:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 800772a:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 800772c:	b002      	add	sp, #8
 800772e:	bd70      	pop	{r4, r5, r6, pc}

08007730 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007730:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007732:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8007734:	6013      	str	r3, [r2, #0]
{
 8007736:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 8007738:	aa01      	add	r2, sp, #4
 800773a:	f7ff ffe3 	bl	8007704 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800773e:	b918      	cbnz	r0, 8007748 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	9a01      	ldr	r2, [sp, #4]
 8007744:	4413      	add	r3, r2
 8007746:	6023      	str	r3, [r4, #0]

	return Status;
}
 8007748:	b002      	add	sp, #8
 800774a:	bd10      	pop	{r4, pc}

0800774c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 800774e:	f8b0 c150 	ldrh.w	ip, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007752:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
 8007756:	fb05 f50c 	mul.w	r5, r5, ip

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800775a:	3580      	adds	r5, #128	; 0x80
 800775c:	0a2d      	lsrs	r5, r5, #8
{
 800775e:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
	SignalAt0mm *= dmaxCalRange_mm;
 8007762:	fb05 f50c 	mul.w	r5, r5, ip

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8007766:	b152      	cbz	r2, 800777e <VL53L0X_calc_dmax+0x32>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8007768:	028c      	lsls	r4, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800776a:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800776e:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007772:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007776:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8007778:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 800777c:	0c22      	lsrs	r2, r4, #16
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800777e:	f506 4000 	add.w	r0, r6, #32768	; 0x8000
 8007782:	0c00      	lsrs	r0, r0, #16
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007784:	9906      	ldr	r1, [sp, #24]
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8007786:	2406      	movs	r4, #6
 8007788:	3003      	adds	r0, #3
 800778a:	fbb0 f0f4 	udiv	r0, r0, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800778e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 8007792:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007796:	fb01 f303 	mul.w	r3, r1, r3

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800779a:	bf38      	it	cc
 800779c:	1cf1      	addcc	r1, r6, #3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800779e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80077a2:	bf3e      	ittt	cc
 80077a4:	fbb1 f1f4 	udivcc	r1, r1, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80077a8:	ebc1 01c1 	rsbcc	r1, r1, r1, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80077ac:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80077b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80077b4:	bf34      	ite	cc
 80077b6:	0c09      	lsrcc	r1, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 80077b8:	491b      	ldrcs	r1, [pc, #108]	; (8007828 <VL53L0X_calc_dmax+0xdc>)
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80077ba:	fb03 f303 	mul.w	r3, r3, r3

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80077be:	bf38      	it	cc
 80077c0:	4349      	mulcc	r1, r1

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80077c2:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 80077c6:	440b      	add	r3, r1
	minSignalNeeded /= peakVcselDuration_us;
 80077c8:	fbb3 f3f7 	udiv	r3, r3, r7

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80077cc:	039b      	lsls	r3, r3, #14
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80077ce:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded /= minSignalNeeded_p4;
 80077d2:	24fe      	movs	r4, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 80077d4:	337f      	adds	r3, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 80077d6:	fbb3 f3f4 	udiv	r3, r3, r4
	minSignalNeeded *= minSignalNeeded_p1;
 80077da:	fb03 f402 	mul.w	r4, r3, r2
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80077de:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80077e2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80077e6:	0980      	lsrs	r0, r0, #6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80077e8:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 4;
 80077ec:	0124      	lsls	r4, r4, #4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80077ee:	f7ff f90f 	bl	8006a10 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80077f2:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80077f6:	42bc      	cmp	r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80077f8:	bf28      	it	cs
 80077fa:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80077fe:	4606      	mov	r6, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007800:	bf29      	itett	cs
 8007802:	fbb4 f3f3 	udivcs	r3, r4, r3
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007806:	2000      	movcc	r0, #0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007808:	18ed      	addcs	r5, r5, r3
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800780a:	fbb4 f4f7 	udivcs	r4, r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800780e:	bf28      	it	cs
 8007810:	fbb5 f0f4 	udivcs	r0, r5, r4

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007814:	f7ff f8fc 	bl	8006a10 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
 8007818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781a:	4286      	cmp	r6, r0
 800781c:	bf94      	ite	ls
 800781e:	601e      	strls	r6, [r3, #0]
 8007820:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007822:	2000      	movs	r0, #0
 8007824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007826:	bf00      	nop
 8007828:	fff00000 	.word	0xfff00000

0800782c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	ed2d 8b02 	vpush	{d8}
 8007834:	b08f      	sub	sp, #60	; 0x3c
 8007836:	4604      	mov	r4, r0
 8007838:	9307      	str	r3, [sp, #28]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800783a:	6a03      	ldr	r3, [r0, #32]
 800783c:	930c      	str	r3, [sp, #48]	; 0x30
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800783e:	690b      	ldr	r3, [r1, #16]
 8007840:	9308      	str	r3, [sp, #32]

	correctedSignalRate_mcps =
 8007842:	68cb      	ldr	r3, [r1, #12]
{
 8007844:	460e      	mov	r6, r1
 8007846:	4693      	mov	fp, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007848:	aa0d      	add	r2, sp, #52	; 0x34
	correctedSignalRate_mcps =
 800784a:	ee08 3a10 	vmov	s16, r3
	Status = VL53L0X_get_total_signal_rate(
 800784e:	f7ff ff6f 	bl	8007730 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007852:	aa0c      	add	r2, sp, #48	; 0x30
 8007854:	4631      	mov	r1, r6
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff ff54 	bl	8007704 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 800785c:	bb48      	cbnz	r0, 80078b2 <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800785e:	f894 a0e0 	ldrb.w	sl, [r4, #224]	; 0xe0
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007862:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007864:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007868:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800786c:	f894 e0e8 	ldrb.w	lr, [r4, #232]	; 0xe8

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 8007870:	f1ba 0f08 	cmp.w	sl, #8
		vcselWidth = 3;
 8007874:	bf0c      	ite	eq
 8007876:	2502      	moveq	r5, #2
 8007878:	2503      	movne	r5, #3
 800787a:	9509      	str	r5, [sp, #36]	; 0x24
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800787c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007880:	fb05 fc07 	mul.w	ip, r5, r7
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007884:	f50c 4200 	add.w	r2, ip, #32768	; 0x8000
 8007888:	9204      	str	r2, [sp, #16]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800788a:	f107 0280 	add.w	r2, r7, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800788e:	f022 09ff 	bic.w	r9, r2, #255	; 0xff
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007892:	9205      	str	r2, [sp, #20]
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 8007894:	9a04      	ldr	r2, [sp, #16]
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007896:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
		totalSignalRate_mcps <<= 8;
 800789a:	4f62      	ldr	r7, [pc, #392]	; (8007a24 <VL53L0X_calc_sigma_estimate+0x1f8>)
 800789c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (peakSignalRate_kcps == 0) {
 80078a0:	0c12      	lsrs	r2, r2, #16
 80078a2:	920a      	str	r2, [sp, #40]	; 0x28
 80078a4:	d10a      	bne.n	80078bc <VL53L0X_calc_sigma_estimate+0x90>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80078a6:	9b07      	ldr	r3, [sp, #28]
		*pSigmaEstimate = cSigmaEstMax;
 80078a8:	f8cb 7000 	str.w	r7, [fp]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80078ac:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		*pDmax_mm = 0;
 80078b0:	6018      	str	r0, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80078b2:	b00f      	add	sp, #60	; 0x3c
 80078b4:	ecbd 8b02 	vpop	{d8}
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80078bc:	fb05 fc0c 	mul.w	ip, r5, ip
 80078c0:	f5bc 1f48 	cmp.w	ip, #3276800	; 0x320000
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80078c4:	4672      	mov	r2, lr
 80078c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078c8:	4620      	mov	r0, r4
 80078ca:	4663      	mov	r3, ip
 80078cc:	bf28      	it	cs
 80078ce:	f44f 1348 	movcs.w	r3, #3276800	; 0x320000
 80078d2:	9306      	str	r3, [sp, #24]
 80078d4:	f7ff fba8 	bl	8007028 <VL53L0X_calc_timeout_mclks>
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80078d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80078da:	4680      	mov	r8, r0
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80078dc:	4619      	mov	r1, r3
 80078de:	4652      	mov	r2, sl
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff fba1 	bl	8007028 <VL53L0X_calc_timeout_mclks>
		peakVcselDuration_us = vcselWidth * 2048 *
 80078e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80078e8:	eb00 0308 	add.w	r3, r0, r8
		peakVcselDuration_us = vcselWidth * 2048 *
 80078ec:	435a      	muls	r2, r3
 80078ee:	02d3      	lsls	r3, r2, #11
		peakVcselDuration_us *= cPllPeriod_ps;
 80078f0:	f240 6877 	movw	r8, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80078f4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80078f8:	fbb3 f3f5 	udiv	r3, r3, r5
		peakVcselDuration_us *= cPllPeriod_ps;
 80078fc:	fb08 f803 	mul.w	r8, r8, r3
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007900:	9b05      	ldr	r3, [sp, #20]
 8007902:	4a49      	ldr	r2, [pc, #292]	; (8007a28 <VL53L0X_calc_sigma_estimate+0x1fc>)
 8007904:	0a18      	lsrs	r0, r3, #8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007906:	9b08      	ldr	r3, [sp, #32]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007908:	f508 78fa 	add.w	r8, r8, #500	; 0x1f4
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800790c:	fb05 fa03 	mul.w	sl, r5, r3
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007910:	fbb8 f8f5 	udiv	r8, r8, r5
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007914:	4b45      	ldr	r3, [pc, #276]	; (8007a2c <VL53L0X_calc_sigma_estimate+0x200>)
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007916:	fb08 f000 	mul.w	r0, r8, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800791a:	3080      	adds	r0, #128	; 0x80
 800791c:	0a00      	lsrs	r0, r0, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800791e:	ea0a 0a03 	and.w	sl, sl, r3
 8007922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007924:	fbba faf3 	udiv	sl, sl, r3
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007928:	4592      	cmp	sl, r2
 800792a:	bf28      	it	cs
 800792c:	4692      	movcs	sl, r2
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800792e:	2801      	cmp	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007930:	f44f 7216 	mov.w	r2, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007934:	bf38      	it	cc
 8007936:	2001      	movcc	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007938:	fb02 fa0a 	mul.w	sl, r2, sl
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800793c:	220c      	movs	r2, #12
 800793e:	4350      	muls	r0, r2
 8007940:	f7ff f866 	bl	8006a10 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007944:	9b04      	ldr	r3, [sp, #16]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007946:	9005      	str	r0, [sp, #20]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007948:	461a      	mov	r2, r3
 800794a:	4b38      	ldr	r3, [pc, #224]	; (8007a2c <VL53L0X_calc_sigma_estimate+0x200>)
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800794c:	8930      	ldrh	r0, [r6, #8]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800794e:	ea02 0c03 	and.w	ip, r2, r3
 8007952:	9b06      	ldr	r3, [sp, #24]
			xTalkCompRate_kcps) + 500)/1000;
 8007954:	9a06      	ldr	r2, [sp, #24]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007956:	ebac 0103 	sub.w	r1, ip, r3
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800795a:	4b35      	ldr	r3, [pc, #212]	; (8007a30 <VL53L0X_calc_sigma_estimate+0x204>)
 800795c:	4343      	muls	r3, r0
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800795e:	f241 205c 	movw	r0, #4700	; 0x125c
 8007962:	fbb3 f3f0 	udiv	r3, r3, r0
			xTalkCompRate_kcps) + 500)/1000;
 8007966:	f502 70fa 	add.w	r0, r2, #500	; 0x1f4
 800796a:	4460      	add	r0, ip
			xTalkCompRate_kcps) + 500)/1000;
 800796c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007970:	fbb1 f1f5 	udiv	r1, r1, r5
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007974:	fbb0 f5f5 	udiv	r5, r0, r5
		diff1_mcps <<= 8;
 8007978:	0209      	lsls	r1, r1, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800797a:	fbb1 f5f5 	udiv	r5, r1, r5
		xTalkCorrection <<= 8;
 800797e:	022d      	lsls	r5, r5, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007980:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
 8007984:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007986:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 800798a:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 800798c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8007990:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8007992:	436d      	muls	r5, r5
		pwMult >>= 14;
 8007994:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8007996:	f44f 7048 	mov.w	r0, #800	; 0x320
 800799a:	4368      	muls	r0, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 800799c:	f50a 4300 	add.w	r3, sl, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 80079a0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 80079a4:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 80079a6:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 80079a8:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80079aa:	fb00 3000 	mla	r0, r0, r0, r3
 80079ae:	f7ff f82f 	bl	8006a10 <VL53L0X_isqrt>
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80079b2:	9a05      	ldr	r2, [sp, #20]
		sqrtResult_centi_ns <<= 16;
 80079b4:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80079b6:	3032      	adds	r0, #50	; 0x32
 80079b8:	2364      	movs	r3, #100	; 0x64
 80079ba:	fbb0 f3f3 	udiv	r3, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80079be:	0050      	lsls	r0, r2, #1
		sigmaEstRtn		 += 5000;
 80079c0:	f640 32b5 	movw	r2, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80079c4:	fbb3 f0f0 	udiv	r0, r3, r0
		sigmaEstRtn		 += 5000;
 80079c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80079cc:	fb02 3000 	mla	r0, r2, r0, r3
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80079d0:	4b18      	ldr	r3, [pc, #96]	; (8007a34 <VL53L0X_calc_sigma_estimate+0x208>)
 80079d2:	4298      	cmp	r0, r3
		sigmaEstRtn		 /= 10000;
 80079d4:	bf96      	itet	ls
 80079d6:	f242 7310 	movwls	r3, #10000	; 0x2710
			sigmaEstRtn = cSigmaEstRtnMax;
 80079da:	f44f 4070 	movhi.w	r0, #61440	; 0xf000
		sigmaEstRtn		 /= 10000;
 80079de:	fbb0 f0f3 	udivls	r0, r0, r3
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80079e2:	f241 1304 	movw	r3, #4356	; 0x1104
 80079e6:	fb00 3000 	mla	r0, r0, r0, r3
 80079ea:	f7ff f811 	bl	8006a10 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 80079ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80079f2:	4358      	muls	r0, r3
		Status = VL53L0X_calc_dmax(
 80079f4:	9b07      	ldr	r3, [sp, #28]
 80079f6:	f8cd a004 	str.w	sl, [sp, #4]
 80079fa:	4287      	cmp	r7, r0
 80079fc:	bf28      	it	cs
 80079fe:	4607      	movcs	r7, r0
 8007a00:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8007a04:	f44f 7348 	mov.w	r3, #800	; 0x320
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007a08:	f8cb 7000 	str.w	r7, [fp]
		Status = VL53L0X_calc_dmax(
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	ee18 2a10 	vmov	r2, s16
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007a12:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8007a16:	462b      	mov	r3, r5
 8007a18:	4649      	mov	r1, r9
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f7ff fe96 	bl	800774c <VL53L0X_calc_dmax>
 8007a20:	e747      	b.n	80078b2 <VL53L0X_calc_sigma_estimate+0x86>
 8007a22:	bf00      	nop
 8007a24:	028f87ae 	.word	0x028f87ae
 8007a28:	00666666 	.word	0x00666666
 8007a2c:	ffff0000 	.word	0xffff0000
 8007a30:	0006999a 	.word	0x0006999a
 8007a34:	249f270f 	.word	0x249f270f

08007a38 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	b08b      	sub	sp, #44	; 0x2c
 8007a3e:	4699      	mov	r9, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007a46:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007a4a:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007a4e:	f88d 3011 	strb.w	r3, [sp, #17]
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
 8007a52:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007a56:	9309      	str	r3, [sp, #36]	; 0x24
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007a58:	08cb      	lsrs	r3, r1, #3
 8007a5a:	f3c1 06c3 	ubfx	r6, r1, #3, #4
 8007a5e:	9300      	str	r3, [sp, #0]

	if (DeviceRangeStatusInternal == 0 ||
 8007a60:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8007a64:	40f3      	lsrs	r3, r6
{
 8007a66:	4690      	mov	r8, r2
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
	} else {
		NoneFlag = 0;
 8007a68:	f003 0301 	and.w	r3, r3, #1
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	21ff      	movs	r1, #255	; 0xff
{
 8007a70:	9f15      	ldr	r7, [sp, #84]	; 0x54
		NoneFlag = 0;
 8007a72:	9301      	str	r3, [sp, #4]
{
 8007a74:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a76:	f7fc fe2f 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8007a7a:	b928      	cbnz	r0, 8007a88 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 8007a7c:	f10d 0212 	add.w	r2, sp, #18
 8007a80:	21b6      	movs	r1, #182	; 0xb6
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7fc fde2 	bl	800464c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007a88:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8007a8c:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8007a90:	b920      	cbnz	r0, 8007a9c <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a92:	4602      	mov	r2, r0
 8007a94:	21ff      	movs	r1, #255	; 0xff
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7fc fe1e 	bl	80046d8 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007a9c:	f8c4 a144 	str.w	sl, [r4, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007aa0:	b928      	cbnz	r0, 8007aae <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007aa2:	4601      	mov	r1, r0
 8007aa4:	f10d 020e 	add.w	r2, sp, #14
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7fd ffc4 	bl	8005a36 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007aae:	f89d 500e 	ldrb.w	r5, [sp, #14]
 8007ab2:	b1d5      	cbz	r5, 8007aea <VL53L0X_get_pal_range_status+0xb2>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 808c 	bne.w	8007bd2 <VL53L0X_get_pal_range_status+0x19a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007aba:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007abc:	ab09      	add	r3, sp, #36	; 0x24
 8007abe:	aa05      	add	r2, sp, #20
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f7ff feb3 	bl	800782c <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f040 8083 	bne.w	8007bd2 <VL53L0X_get_pal_range_status+0x19a>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007acc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad0:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	aa06      	add	r2, sp, #24
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7fd ffe6 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007adc:	9d06      	ldr	r5, [sp, #24]
 8007ade:	b125      	cbz	r5, 8007aea <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 8007ae0:	9b05      	ldr	r3, [sp, #20]
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	bf2c      	ite	cs
 8007ae6:	2500      	movcs	r5, #0
 8007ae8:	2501      	movcc	r5, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007aea:	b920      	cbnz	r0, 8007af6 <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007aec:	aa04      	add	r2, sp, #16
 8007aee:	2102      	movs	r1, #2
 8007af0:	4620      	mov	r0, r4
 8007af2:	f7fd ffa0 	bl	8005a36 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007af6:	f89d b010 	ldrb.w	fp, [sp, #16]
 8007afa:	f1bb 0f00 	cmp.w	fp, #0
 8007afe:	d00f      	beq.n	8007b20 <VL53L0X_get_pal_range_status+0xe8>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d16a      	bne.n	8007bda <VL53L0X_get_pal_range_status+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007b04:	aa07      	add	r2, sp, #28
 8007b06:	2102      	movs	r1, #2
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f7fd ffcd 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d060      	beq.n	8007bd6 <VL53L0X_get_pal_range_status+0x19e>
	uint8_t SignalRefClipflag = 0;
 8007b14:	4553      	cmp	r3, sl
 8007b16:	bf2c      	ite	cs
 8007b18:	f04f 0b00 	movcs.w	fp, #0
 8007b1c:	f04f 0b01 	movcc.w	fp, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b20:	b928      	cbnz	r0, 8007b2e <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b22:	f10d 0211 	add.w	r2, sp, #17
 8007b26:	2103      	movs	r1, #3
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7fd ff84 	bl	8005a36 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007b2e:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007b32:	f1ba 0f00 	cmp.w	sl, #0
 8007b36:	d016      	beq.n	8007b66 <VL53L0X_get_pal_range_status+0x12e>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d177      	bne.n	8007c2c <VL53L0X_get_pal_range_status+0x1f4>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007b3c:	f1b9 0f00 	cmp.w	r9, #0
 8007b40:	d003      	beq.n	8007b4a <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007b42:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8007b46:	fbb8 f9f9 	udiv	r9, r8, r9
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007b4a:	aa08      	add	r2, sp, #32
 8007b4c:	2103      	movs	r1, #3
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7fd ffaa 	bl	8005aa8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007b54:	9a08      	ldr	r2, [sp, #32]
 8007b56:	2a00      	cmp	r2, #0
 8007b58:	d042      	beq.n	8007be0 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007b5a:	454a      	cmp	r2, r9
 8007b5c:	bf94      	ite	ls
 8007b5e:	f04f 0a00 	movls.w	sl, #0
 8007b62:	f04f 0a01 	movhi.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007b66:	b920      	cbnz	r0, 8007b72 <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d03a      	beq.n	8007be4 <VL53L0X_get_pal_range_status+0x1ac>
			*pPalRangeStatus = 255;	 /* NONE */
 8007b6e:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007b70:	703a      	strb	r2, [r7, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007b72:	783a      	ldrb	r2, [r7, #0]
 8007b74:	b90a      	cbnz	r2, 8007b7a <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007b76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b78:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007b7a:	f10d 020f 	add.w	r2, sp, #15
 8007b7e:	2101      	movs	r1, #1
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7fd ff58 	bl	8005a36 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007b86:	bb08      	cbnz	r0, 8007bcc <VL53L0X_get_pal_range_status+0x194>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007b88:	f89d 200e 	ldrb.w	r2, [sp, #14]
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007b8c:	f89d 3011 	ldrb.w	r3, [sp, #17]
			Temp8 = 1;
 8007b90:	2a00      	cmp	r2, #0
 8007b92:	bf08      	it	eq
 8007b94:	2501      	moveq	r5, #1
		if ((DeviceRangeStatusInternal == 4) ||
 8007b96:	2e04      	cmp	r6, #4
 8007b98:	bf18      	it	ne
 8007b9a:	f89d 200f 	ldrbne.w	r2, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007b9e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
			Temp8 = 1;
 8007ba2:	bf1a      	itte	ne
 8007ba4:	fab2 f282 	clzne	r2, r2
 8007ba8:	0952      	lsrne	r2, r2, #5
 8007baa:	2201      	moveq	r2, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007bac:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007bb0:	f89d 2010 	ldrb.w	r2, [sp, #16]
			Temp8 = 1;
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	bf08      	it	eq
 8007bb8:	f04f 0b01 	moveq.w	fp, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bf08      	it	eq
 8007bc0:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007bc4:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007bc8:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8007bcc:	b00b      	add	sp, #44	; 0x2c
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	e78f      	b.n	8007af6 <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 8007bd6:	469b      	mov	fp, r3
 8007bd8:	e7a2      	b.n	8007b20 <VL53L0X_get_pal_range_status+0xe8>
 8007bda:	f04f 0b00 	mov.w	fp, #0
 8007bde:	e7a6      	b.n	8007b2e <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007be0:	4692      	mov	sl, r2
 8007be2:	e7c0      	b.n	8007b66 <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007be4:	1e72      	subs	r2, r6, #1
 8007be6:	2a02      	cmp	r2, #2
 8007be8:	d801      	bhi.n	8007bee <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 5; /* HW fail */
 8007bea:	2205      	movs	r2, #5
 8007bec:	e7c0      	b.n	8007b70 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007bee:	2e06      	cmp	r6, #6
 8007bf0:	d001      	beq.n	8007bf6 <VL53L0X_get_pal_range_status+0x1be>
 8007bf2:	2e09      	cmp	r6, #9
 8007bf4:	d101      	bne.n	8007bfa <VL53L0X_get_pal_range_status+0x1c2>
			*pPalRangeStatus = 4;  /* Phase fail */
 8007bf6:	2204      	movs	r2, #4
 8007bf8:	e7ba      	b.n	8007b70 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	f003 020d 	and.w	r2, r3, #13
 8007c00:	2a08      	cmp	r2, #8
 8007c02:	d002      	beq.n	8007c0a <VL53L0X_get_pal_range_status+0x1d2>
					DeviceRangeStatusInternal == 10 ||
 8007c04:	f1bb 0f01 	cmp.w	fp, #1
 8007c08:	d101      	bne.n	8007c0e <VL53L0X_get_pal_range_status+0x1d6>
			*pPalRangeStatus = 3;  /* Min range */
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	e7b0      	b.n	8007b70 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007c0e:	2e04      	cmp	r6, #4
 8007c10:	d002      	beq.n	8007c18 <VL53L0X_get_pal_range_status+0x1e0>
 8007c12:	f1ba 0f01 	cmp.w	sl, #1
 8007c16:	d101      	bne.n	8007c1c <VL53L0X_get_pal_range_status+0x1e4>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007c18:	2202      	movs	r2, #2
 8007c1a:	e7a9      	b.n	8007b70 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 8007c1c:	2d01      	cmp	r5, #1
 8007c1e:	d101      	bne.n	8007c24 <VL53L0X_get_pal_range_status+0x1ec>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007c20:	2201      	movs	r2, #1
 8007c22:	e7a5      	b.n	8007b70 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 8007c24:	2200      	movs	r2, #0
 8007c26:	703a      	strb	r2, [r7, #0]
 8007c28:	46aa      	mov	sl, r5
 8007c2a:	e7a2      	b.n	8007b72 <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007c2c:	f04f 0a00 	mov.w	sl, #0
 8007c30:	e79f      	b.n	8007b72 <VL53L0X_get_pal_range_status+0x13a>
	...

08007c34 <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007c38:	2102      	movs	r1, #2
{
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007c3e:	f7fe ff1d 	bl	8006a7c <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8007c42:	4605      	mov	r5, r0
 8007c44:	b940      	cbnz	r0, 8007c58 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8007c46:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 8007c4a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007c4e:	b92b      	cbnz	r3, 8007c5c <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007c50:	4905      	ldr	r1, [pc, #20]	; (8007c68 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8007c52:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007c54:	f01b fd90 	bl	8023778 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007c58:	4628      	mov	r0, r5
 8007c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007c5c:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8007c60:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007c62:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8007c66:	e7f5      	b.n	8007c54 <VL53L0X_check_part_used+0x20>
 8007c68:	08030129 	.word	0x08030129

08007c6c <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c6e:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007c70:	460a      	mov	r2, r1
 8007c72:	f10d 0107 	add.w	r1, sp, #7
{
 8007c76:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007c78:	f7ff ffdc 	bl	8007c34 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8007c7c:	bb00      	cbnz	r0, 8007cc0 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8007c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c82:	b9fb      	cbnz	r3, 8007cc4 <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007c84:	4915      	ldr	r1, [pc, #84]	; (8007cdc <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007c86:	4620      	mov	r0, r4
 8007c88:	f01b fd76 	bl	8023778 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007c8c:	4914      	ldr	r1, [pc, #80]	; (8007ce0 <VL53L0X_get_device_info+0x74>)
 8007c8e:	f104 0020 	add.w	r0, r4, #32
 8007c92:	f01b fd71 	bl	8023778 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007c96:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8007c9a:	21c0      	movs	r1, #192	; 0xc0
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f7fc fc8c 	bl	80045ba <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ca2:	b968      	cbnz	r0, 8007cc0 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8007ca4:	f10d 0206 	add.w	r2, sp, #6
 8007ca8:	21c2      	movs	r1, #194	; 0xc2
 8007caa:	4628      	mov	r0, r5
 8007cac:	f7fc fc85 	bl	80045ba <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8007cb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007cba:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8007cbc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 8007cc0:	b003      	add	sp, #12
 8007cc2:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 8007cc4:	2b22      	cmp	r3, #34	; 0x22
 8007cc6:	d803      	bhi.n	8007cd0 <VL53L0X_get_device_info+0x64>
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d003      	beq.n	8007cd4 <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007ccc:	4905      	ldr	r1, [pc, #20]	; (8007ce4 <VL53L0X_get_device_info+0x78>)
 8007cce:	e7da      	b.n	8007c86 <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 8007cd0:	2b26      	cmp	r3, #38	; 0x26
 8007cd2:	d801      	bhi.n	8007cd8 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007cd4:	4904      	ldr	r1, [pc, #16]	; (8007ce8 <VL53L0X_get_device_info+0x7c>)
 8007cd6:	e7d6      	b.n	8007c86 <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <VL53L0X_get_device_info+0x80>)
 8007cda:	e7d4      	b.n	8007c86 <VL53L0X_get_device_info+0x1a>
 8007cdc:	0802f4d4 	.word	0x0802f4d4
 8007ce0:	0802f50d 	.word	0x0802f50d
 8007ce4:	0802f4e0 	.word	0x0802f4e0
 8007ce8:	0802f4ec 	.word	0x0802f4ec
 8007cec:	0802f4f8 	.word	0x0802f4f8

08007cf0 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8007cf2:	7803      	ldrb	r3, [r0, #0]
 8007cf4:	2b2d      	cmp	r3, #45	; 0x2d
 8007cf6:	d115      	bne.n	8007d24 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8007cf8:	3001      	adds	r0, #1
        minus = 1;
 8007cfa:	2501      	movs	r5, #1
 8007cfc:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8007cfe:	462a      	mov	r2, r5
 8007d00:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007d02:	270a      	movs	r7, #10
 8007d04:	e003      	b.n	8007d0e <ParseNumber+0x1e>
        ptr++;
        i++;
 8007d06:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007d08:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8007d0c:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007d0e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007d12:	3c30      	subs	r4, #48	; 0x30
 8007d14:	b2e6      	uxtb	r6, r4
 8007d16:	2e09      	cmp	r6, #9
 8007d18:	d9f5      	bls.n	8007d06 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8007d1a:	b101      	cbz	r1, 8007d1e <ParseNumber+0x2e>
        *cnt = i;
 8007d1c:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8007d1e:	b105      	cbz	r5, 8007d22 <ParseNumber+0x32>
        return 0 - sum;
 8007d20:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8007d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8007d24:	2500      	movs	r5, #0
 8007d26:	e7e9      	b.n	8007cfc <ParseNumber+0xc>

08007d28 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8007d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8007d2a:	2600      	movs	r6, #0

  while(* ptr) {
 8007d2c:	7803      	ldrb	r3, [r0, #0]
 8007d2e:	b903      	cbnz	r3, 8007d32 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8007d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8007d32:	2b3a      	cmp	r3, #58	; 0x3a
 8007d34:	d128      	bne.n	8007d88 <ParseMAC+0x60>
    hexcnt = 1;
 8007d36:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8007d3a:	4460      	add	r0, ip
 8007d3c:	e7f6      	b.n	8007d2c <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007d3e:	2a09      	cmp	r2, #9
        sum <<= 4;
 8007d40:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007d44:	d905      	bls.n	8007d52 <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8007d46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d4a:	2a05      	cmp	r2, #5
 8007d4c:	d814      	bhi.n	8007d78 <ParseMAC+0x50>
        return (a - 'a') + 10;
 8007d4e:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8007d50:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8007d52:	4414      	add	r4, r2
        i++;
 8007d54:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007d56:	5d43      	ldrb	r3, [r0, r5]
 8007d58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	2a09      	cmp	r2, #9
 8007d60:	fa5f fc85 	uxtb.w	ip, r5
 8007d64:	d9eb      	bls.n	8007d3e <ParseMAC+0x16>
 8007d66:	f023 0720 	bic.w	r7, r3, #32
 8007d6a:	3f41      	subs	r7, #65	; 0x41
 8007d6c:	2f05      	cmp	r7, #5
 8007d6e:	d9e6      	bls.n	8007d3e <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007d70:	1c73      	adds	r3, r6, #1
 8007d72:	558c      	strb	r4, [r1, r6]
 8007d74:	b2de      	uxtb	r6, r3
 8007d76:	e7e0      	b.n	8007d3a <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007d78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007d7c:	2a05      	cmp	r2, #5
 8007d7e:	d801      	bhi.n	8007d84 <ParseMAC+0x5c>
        return (a - 'A') + 10;
 8007d80:	3b37      	subs	r3, #55	; 0x37
 8007d82:	e7e5      	b.n	8007d50 <ParseMAC+0x28>
    return 0;
 8007d84:	2200      	movs	r2, #0
 8007d86:	e7e4      	b.n	8007d52 <ParseMAC+0x2a>
 8007d88:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8007d8a:	462c      	mov	r4, r5
 8007d8c:	e7e3      	b.n	8007d56 <ParseMAC+0x2e>

08007d8e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8007d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8007d94:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 8007d96:	2701      	movs	r7, #1
  while(* ptr) {
 8007d98:	7823      	ldrb	r3, [r4, #0]
 8007d9a:	b90b      	cbnz	r3, 8007da0 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8007d9c:	b003      	add	sp, #12
 8007d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8007da0:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8007da2:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8007da6:	d007      	beq.n	8007db8 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007da8:	f10d 0107 	add.w	r1, sp, #7
 8007dac:	4620      	mov	r0, r4
 8007dae:	f7ff ff9f 	bl	8007cf0 <ParseNumber>
 8007db2:	1c6b      	adds	r3, r5, #1
 8007db4:	5570      	strb	r0, [r6, r5]
 8007db6:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8007db8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007dbc:	441c      	add	r4, r3
 8007dbe:	e7eb      	b.n	8007d98 <ParseIP+0xa>

08007dc0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8007dc0:	b570      	push	{r4, r5, r6, lr}
 8007dc2:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007dc4:	4608      	mov	r0, r1
{
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007dca:	f7f8 fa0b 	bl	80001e4 <strlen>
 8007dce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8007dd2:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007dd6:	b281      	uxth	r1, r0
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4798      	blx	r3

  if( ret > 0)
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	dd21      	ble.n	8007e24 <AT_ExecuteCommand+0x64>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007de0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8007de4:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8007de8:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8007dec:	4628      	mov	r0, r5
 8007dee:	4798      	blx	r3
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8007df0:	1e43      	subs	r3, r0, #1
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	f240 5276 	movw	r2, #1398	; 0x576
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d80d      	bhi.n	8007e18 <AT_ExecuteCommand+0x58>
    {
      *(pdata + recv_len) = 0;
 8007dfc:	2400      	movs	r4, #0
 8007dfe:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8007e00:	4909      	ldr	r1, [pc, #36]	; (8007e28 <AT_ExecuteCommand+0x68>)
 8007e02:	4628      	mov	r0, r5
 8007e04:	f01b fce5 	bl	80237d2 <strstr>
 8007e08:	b950      	cbnz	r0, 8007e20 <AT_ExecuteCommand+0x60>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007e0a:	4908      	ldr	r1, [pc, #32]	; (8007e2c <AT_ExecuteCommand+0x6c>)
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	f01b fce0 	bl	80237d2 <strstr>
 8007e12:	b138      	cbz	r0, 8007e24 <AT_ExecuteCommand+0x64>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007e14:	2005      	movs	r0, #5
 8007e16:	e002      	b.n	8007e1e <AT_ExecuteCommand+0x5e>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8007e18:	3004      	adds	r0, #4
 8007e1a:	d103      	bne.n	8007e24 <AT_ExecuteCommand+0x64>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8007e1c:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
}
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8007e20:	4620      	mov	r0, r4
 8007e22:	e7fc      	b.n	8007e1e <AT_ExecuteCommand+0x5e>
  return ES_WIFI_STATUS_IO_ERROR;
 8007e24:	2004      	movs	r0, #4
 8007e26:	e7fa      	b.n	8007e1e <AT_ExecuteCommand+0x5e>
 8007e28:	0802f90b 	.word	0x0802f90b
 8007e2c:	0802f914 	.word	0x0802f914

08007e30 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8007e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e34:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007e36:	4608      	mov	r0, r1
{
 8007e38:	4689      	mov	r9, r1
 8007e3a:	4615      	mov	r5, r2
 8007e3c:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007e3e:	f7f8 f9d1 	bl	80001e4 <strlen>
 8007e42:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 8007e46:	f8d8 26a0 	ldr.w	r2, [r8, #1696]	; 0x6a0
{
 8007e4a:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8007e4c:	b281      	uxth	r1, r0
 8007e4e:	4648      	mov	r0, r9
 8007e50:	4798      	blx	r3
 8007e52:	2800      	cmp	r0, #0
 8007e54:	dc02      	bgt.n	8007e5c <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8007e56:	2004      	movs	r0, #4
}
 8007e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8007e5c:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 8007e60:	f8d8 26a0 	ldr.w	r2, [r8, #1696]	; 0x6a0
 8007e64:	2100      	movs	r1, #0
 8007e66:	f508 7094 	add.w	r0, r8, #296	; 0x128
 8007e6a:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 8007e6c:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 8007e70:	2b0d      	cmp	r3, #13
 8007e72:	d1f0      	bne.n	8007e56 <AT_RequestReceiveData+0x26>
 8007e74:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8007e78:	2b0a      	cmp	r3, #10
 8007e7a:	d1ec      	bne.n	8007e56 <AT_RequestReceiveData+0x26>
    len-=2;
 8007e7c:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 8007e7e:	2907      	cmp	r1, #7
 8007e80:	d9e9      	bls.n	8007e56 <AT_RequestReceiveData+0x26>
    p+=2;
 8007e82:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 8007e86:	f208 1829 	addw	r8, r8, #297	; 0x129
 8007e8a:	b119      	cbz	r1, 8007e94 <AT_RequestReceiveData+0x64>
 8007e8c:	f818 3001 	ldrb.w	r3, [r8, r1]
 8007e90:	2b15      	cmp	r3, #21
 8007e92:	d017      	beq.n	8007ec4 <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8007e94:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8007e98:	f04f 0800 	mov.w	r8, #0
 8007e9c:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8007ea0:	eb09 0004 	add.w	r0, r9, r4
 8007ea4:	490a      	ldr	r1, [pc, #40]	; (8007ed0 <AT_RequestReceiveData+0xa0>)
 8007ea6:	f01b fc94 	bl	80237d2 <strstr>
 8007eaa:	b168      	cbz	r0, 8007ec8 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 8007eac:	b2a4      	uxth	r4, r4
 8007eae:	42bc      	cmp	r4, r7
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	bf28      	it	cs
 8007eb4:	463a      	movcs	r2, r7
 8007eb6:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8007eb8:	4649      	mov	r1, r9
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f01a f974 	bl	80221a8 <memcpy>
       return ES_WIFI_STATUS_OK;
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	e7c9      	b.n	8007e58 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 8007ec4:	3901      	subs	r1, #1
 8007ec6:	e7e0      	b.n	8007e8a <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 8007ec8:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007eca:	2005      	movs	r0, #5
 8007ecc:	e7c4      	b.n	8007e58 <AT_RequestReceiveData+0x28>
 8007ece:	bf00      	nop
 8007ed0:	0802f90b 	.word	0x0802f90b

08007ed4 <AT_RequestSendData>:
{
 8007ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	4605      	mov	r5, r0
  cmd_len = strlen((char*)cmd);
 8007eda:	4608      	mov	r0, r1
{
 8007edc:	4688      	mov	r8, r1
 8007ede:	4691      	mov	r9, r2
 8007ee0:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8007ee2:	f7f8 f97f 	bl	80001e4 <strlen>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007ee6:	f010 0401 	ands.w	r4, r0, #1
{
 8007eea:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 8007eec:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8007ef0:	d126      	bne.n	8007f40 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8007ef2:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8007ef6:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8007efa:	4651      	mov	r1, sl
 8007efc:	4640      	mov	r0, r8
 8007efe:	4798      	blx	r3
  if (n == cmd_len)
 8007f00:	b280      	uxth	r0, r0
 8007f02:	4582      	cmp	sl, r0
 8007f04:	d123      	bne.n	8007f4e <AT_RequestSendData+0x7a>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8007f06:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8007f0a:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8007f0e:	4639      	mov	r1, r7
 8007f10:	4648      	mov	r0, r9
 8007f12:	4798      	blx	r3
    if (send_len == len)
 8007f14:	42b8      	cmp	r0, r7
 8007f16:	d113      	bne.n	8007f40 <AT_RequestSendData+0x6c>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8007f18:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8007f1c:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8007f20:	4621      	mov	r1, r4
 8007f22:	4630      	mov	r0, r6
 8007f24:	4798      	blx	r3
      if (recv_len > 0)
 8007f26:	2800      	cmp	r0, #0
 8007f28:	dd0d      	ble.n	8007f46 <AT_RequestSendData+0x72>
        *(pdata+recv_len) = 0;
 8007f2a:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8007f2c:	490b      	ldr	r1, [pc, #44]	; (8007f5c <AT_RequestSendData+0x88>)
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f01b fc4f 	bl	80237d2 <strstr>
 8007f34:	b968      	cbnz	r0, 8007f52 <AT_RequestSendData+0x7e>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8007f36:	490a      	ldr	r1, [pc, #40]	; (8007f60 <AT_RequestSendData+0x8c>)
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f01b fc4a 	bl	80237d2 <strstr>
 8007f3e:	b950      	cbnz	r0, 8007f56 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_ERROR;
 8007f40:	2002      	movs	r0, #2
}
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8007f46:	3004      	adds	r0, #4
 8007f48:	d1fa      	bne.n	8007f40 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8007f4a:	2006      	movs	r0, #6
 8007f4c:	e7f9      	b.n	8007f42 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8007f4e:	2004      	movs	r0, #4
 8007f50:	e7f7      	b.n	8007f42 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8007f52:	4620      	mov	r0, r4
 8007f54:	e7f5      	b.n	8007f42 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8007f56:	2005      	movs	r0, #5
 8007f58:	e7f3      	b.n	8007f42 <AT_RequestSendData+0x6e>
 8007f5a:	bf00      	nop
 8007f5c:	0802f90b 	.word	0x0802f90b
 8007f60:	0802f914 	.word	0x0802f914

08007f64 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8007f68:	f247 5330 	movw	r3, #30000	; 0x7530
 8007f6c:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0
{
 8007f70:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8007f72:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8007f76:	2000      	movs	r0, #0
 8007f78:	4798      	blx	r3
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d14b      	bne.n	8008016 <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007f7e:	4927      	ldr	r1, [pc, #156]	; (800801c <ES_WIFI_Init+0xb8>)
 8007f80:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7ff ff1b 	bl	8007dc0 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	b960      	cbnz	r0, 8007fa8 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8007f8e:	4924      	ldr	r1, [pc, #144]	; (8008020 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8007f90:	4f24      	ldr	r7, [pc, #144]	; (8008024 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8007f92:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008020 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 8007f96:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8007f9a:	f01c fa63 	bl	8024464 <strtok>
  while (ptr != NULL){
 8007f9e:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007fa0:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8007fa4:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8007fa6:	b910      	cbnz	r0, 8007fae <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8007fa8:	4628      	mov	r0, r5
 8007faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8007fae:	2b06      	cmp	r3, #6
 8007fb0:	d824      	bhi.n	8007ffc <ES_WIFI_Init+0x98>
 8007fb2:	e8df f003 	tbb	[pc, r3]
 8007fb6:	0a04      	.short	0x0a04
 8007fb8:	1e19140f 	.word	0x1e19140f
 8007fbc:	29          	.byte	0x29
 8007fbd:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8007fbe:	4601      	mov	r1, r0
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8007fc4:	f01b fbf2 	bl	80237ac <strncpy>
      break;
 8007fc8:	e018      	b.n	8007ffc <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8007fca:	4601      	mov	r1, r0
 8007fcc:	2218      	movs	r2, #24
 8007fce:	f104 0020 	add.w	r0, r4, #32
 8007fd2:	e7f7      	b.n	8007fc4 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007fdc:	e7f2      	b.n	8007fc4 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8007fde:	4601      	mov	r1, r0
 8007fe0:	2210      	movs	r2, #16
 8007fe2:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8007fe6:	e7ed      	b.n	8007fc4 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8007fe8:	4601      	mov	r1, r0
 8007fea:	2210      	movs	r2, #16
 8007fec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ff0:	e7e8      	b.n	8007fc4 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	f7ff fe7c 	bl	8007cf0 <ParseNumber>
 8007ff8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	2000      	movs	r0, #0
 8008000:	f01c fa30 	bl	8024464 <strtok>
 8008004:	3601      	adds	r6, #1
 8008006:	e7cd      	b.n	8007fa4 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 8008008:	4639      	mov	r1, r7
 800800a:	f01c fa2b 	bl	8024464 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800800e:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8008010:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008012:	4640      	mov	r0, r8
 8008014:	e7d6      	b.n	8007fc4 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008016:	2502      	movs	r5, #2
 8008018:	e7c6      	b.n	8007fa8 <ES_WIFI_Init+0x44>
 800801a:	bf00      	nop
 800801c:	0802f91c 	.word	0x0802f91c
 8008020:	0803073a 	.word	0x0803073a
 8008024:	0803027c 	.word	0x0803027c

08008028 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8008028:	b530      	push	{r4, r5, lr}
 800802a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800802e:	b158      	cbz	r0, 8008048 <ES_WIFI_RegisterBusIO+0x20>
 8008030:	b151      	cbz	r1, 8008048 <ES_WIFI_RegisterBusIO+0x20>
 8008032:	b14a      	cbz	r2, 8008048 <ES_WIFI_RegisterBusIO+0x20>
 8008034:	b145      	cbz	r5, 8008048 <ES_WIFI_RegisterBusIO+0x20>
 8008036:	b13c      	cbz	r4, 8008048 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8008038:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 800803c:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8008040:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8008044:	2000      	movs	r0, #0
}
 8008046:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8008048:	2002      	movs	r0, #2
 800804a:	e7fc      	b.n	8008046 <ES_WIFI_RegisterBusIO+0x1e>

0800804c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800804e:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8008052:	4605      	mov	r5, r0
 8008054:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8008056:	4620      	mov	r0, r4
 8008058:	460a      	mov	r2, r1
 800805a:	4918      	ldr	r1, [pc, #96]	; (80080bc <ES_WIFI_Connect+0x70>)
{
 800805c:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800805e:	f01b faed 	bl	802363c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008062:	4622      	mov	r2, r4
 8008064:	4621      	mov	r1, r4
 8008066:	4628      	mov	r0, r5
 8008068:	f7ff feaa 	bl	8007dc0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800806c:	bb20      	cbnz	r0, 80080b8 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 800806e:	4914      	ldr	r1, [pc, #80]	; (80080c0 <ES_WIFI_Connect+0x74>)
 8008070:	463a      	mov	r2, r7
 8008072:	4620      	mov	r0, r4
 8008074:	f01b fae2 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008078:	4622      	mov	r2, r4
 800807a:	4621      	mov	r1, r4
 800807c:	4628      	mov	r0, r5
 800807e:	f7ff fe9f 	bl	8007dc0 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8008082:	b9c8      	cbnz	r0, 80080b8 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8008084:	490f      	ldr	r1, [pc, #60]	; (80080c4 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8008086:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800808a:	4632      	mov	r2, r6
 800808c:	4620      	mov	r0, r4
 800808e:	f01b fad5 	bl	802363c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008092:	4622      	mov	r2, r4
 8008094:	4621      	mov	r1, r4
 8008096:	4628      	mov	r0, r5
 8008098:	f7ff fe92 	bl	8007dc0 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 800809c:	b960      	cbnz	r0, 80080b8 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 800809e:	490a      	ldr	r1, [pc, #40]	; (80080c8 <ES_WIFI_Connect+0x7c>)
 80080a0:	4620      	mov	r0, r4
 80080a2:	f01b fb69 	bl	8023778 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080a6:	4622      	mov	r2, r4
 80080a8:	4621      	mov	r1, r4
 80080aa:	4628      	mov	r0, r5
 80080ac:	f7ff fe88 	bl	8007dc0 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80080b0:	b910      	cbnz	r0, 80080b8 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ba:	bf00      	nop
 80080bc:	0802f945 	.word	0x0802f945
 80080c0:	0802f94c 	.word	0x0802f94c
 80080c4:	0802f953 	.word	0x0802f953
 80080c8:	0802f95a 	.word	0x0802f95a

080080cc <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 80080cc:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80080d0:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 80080d2:	490b      	ldr	r1, [pc, #44]	; (8008100 <ES_WIFI_IsConnected+0x34>)
{
 80080d4:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 80080d6:	4610      	mov	r0, r2
 80080d8:	f01b fb4e 	bl	8023778 <strcpy>
 80080dc:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80080de:	4601      	mov	r1, r0
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7ff fe6d 	bl	8007dc0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80080e6:	b938      	cbnz	r0, 80080f8 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 80080e8:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 80080ec:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80080f0:	4253      	negs	r3, r2
 80080f2:	4153      	adcs	r3, r2
 80080f4:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 80080f8:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 80080fc:	bd10      	pop	{r4, pc}
 80080fe:	bf00      	nop
 8008100:	0802f95e 	.word	0x0802f95e

08008104 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 8008104:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8008108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 800810c:	4935      	ldr	r1, [pc, #212]	; (80081e4 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 800810e:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8008110:	4610      	mov	r0, r2
 8008112:	f01b fb31 	bl	8023778 <strcpy>
 8008116:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008118:	4601      	mov	r1, r0
 800811a:	4620      	mov	r0, r4
 800811c:	f7ff fe50 	bl	8007dc0 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008120:	4606      	mov	r6, r0
 8008122:	b960      	cbnz	r0, 800813e <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8008124:	4930      	ldr	r1, [pc, #192]	; (80081e8 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8008126:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80081e8 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 800812a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800812e:	f01c f999 	bl	8024464 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008132:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8008136:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8008138:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 800813c:	b910      	cbnz	r0, 8008144 <ES_WIFI_GetNetworkSettings+0x40>
  }
  
  UNLOCK_WIFI();
  return ret;
}
 800813e:	4630      	mov	r0, r6
 8008140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8008144:	2d0b      	cmp	r5, #11
 8008146:	d80c      	bhi.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
 8008148:	e8df f005 	tbb	[pc, r5]
 800814c:	241e1906 	.word	0x241e1906
 8008150:	3835302a 	.word	0x3835302a
 8008154:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8008158:	4601      	mov	r1, r0
 800815a:	2221      	movs	r2, #33	; 0x21
 800815c:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800815e:	f01b fb25 	bl	80237ac <strncpy>
    ptr = strtok(NULL, ",");
 8008162:	4649      	mov	r1, r9
 8008164:	2000      	movs	r0, #0
 8008166:	f01c f97d 	bl	8024464 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 800816a:	2800      	cmp	r0, #0
 800816c:	d0e7      	beq.n	800813e <ES_WIFI_GetNetworkSettings+0x3a>
 800816e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008172:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8008174:	bf14      	ite	ne
 8008176:	3501      	addne	r5, #1
      num++;
 8008178:	3502      	addeq	r5, #2
 800817a:	b2ed      	uxtb	r5, r5
 800817c:	e7de      	b.n	800813c <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800817e:	4601      	mov	r1, r0
 8008180:	2221      	movs	r2, #33	; 0x21
 8008182:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8008186:	e7ea      	b.n	800815e <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8008188:	2100      	movs	r1, #0
 800818a:	f7ff fdb1 	bl	8007cf0 <ParseNumber>
 800818e:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8008192:	e7e6      	b.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8008194:	2100      	movs	r1, #0
 8008196:	f7ff fdab 	bl	8007cf0 <ParseNumber>
 800819a:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 800819e:	e7e0      	b.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80081a0:	2100      	movs	r1, #0
 80081a2:	f7ff fda5 	bl	8007cf0 <ParseNumber>
 80081a6:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 80081aa:	e7da      	b.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 80081ac:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 80081b0:	f7ff fded 	bl	8007d8e <ParseIP>
      break;
 80081b4:	e7d5      	b.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 80081b6:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 80081ba:	e7f9      	b.n	80081b0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80081bc:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 80081c0:	e7f6      	b.n	80081b0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 80081c2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 80081c6:	e7f3      	b.n	80081b0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 80081c8:	4641      	mov	r1, r8
 80081ca:	e7f1      	b.n	80081b0 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80081cc:	2100      	movs	r1, #0
 80081ce:	f7ff fd8f 	bl	8007cf0 <ParseNumber>
 80081d2:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 80081d6:	e7c4      	b.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80081d8:	2100      	movs	r1, #0
 80081da:	f7ff fd89 	bl	8007cf0 <ParseNumber>
 80081de:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 80081e2:	e7be      	b.n	8008162 <ES_WIFI_GetNetworkSettings+0x5e>
 80081e4:	0802f966 	.word	0x0802f966
 80081e8:	0803073a 	.word	0x0803073a

080081ec <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 80081ec:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 80081f6:	4610      	mov	r0, r2
 80081f8:	4909      	ldr	r1, [pc, #36]	; (8008220 <ES_WIFI_GetMACAddress+0x34>)
 80081fa:	f01b fabd 	bl	8023778 <strcpy>
 80081fe:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008200:	4601      	mov	r1, r0
 8008202:	4620      	mov	r0, r4
 8008204:	f7ff fddc 	bl	8007dc0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008208:	4605      	mov	r5, r0
 800820a:	b938      	cbnz	r0, 800821c <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800820c:	4905      	ldr	r1, [pc, #20]	; (8008224 <ES_WIFI_GetMACAddress+0x38>)
 800820e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008212:	f01c f927 	bl	8024464 <strtok>
    ParseMAC(ptr, mac) ;
 8008216:	4631      	mov	r1, r6
 8008218:	f7ff fd86 	bl	8007d28 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 800821c:	4628      	mov	r0, r5
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	0802f9ab 	.word	0x0802f9ab
 8008224:	0802fbc9 	.word	0x0802fbc9

08008228 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8008228:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 800822a:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800822e:	4604      	mov	r4, r0
 8008230:	4616      	mov	r6, r2
  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8008232:	4628      	mov	r0, r5
 8008234:	460a      	mov	r2, r1
 8008236:	490a      	ldr	r1, [pc, #40]	; (8008260 <ES_WIFI_DNS_LookUp+0x38>)
 8008238:	f01b fa00 	bl	802363c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800823c:	462a      	mov	r2, r5
 800823e:	4629      	mov	r1, r5
 8008240:	4620      	mov	r0, r4
 8008242:	f7ff fdbd 	bl	8007dc0 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008246:	4605      	mov	r5, r0
 8008248:	b938      	cbnz	r0, 800825a <ES_WIFI_DNS_LookUp+0x32>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 800824a:	4906      	ldr	r1, [pc, #24]	; (8008264 <ES_WIFI_DNS_LookUp+0x3c>)
 800824c:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008250:	f01c f908 	bl	8024464 <strtok>
    ParseIP(ptr, ipaddress);
 8008254:	4631      	mov	r1, r6
 8008256:	f7ff fd9a 	bl	8007d8e <ParseIP>
  }
  UNLOCK_WIFI();
  return ret;
}
 800825a:	4628      	mov	r0, r5
 800825c:	bd70      	pop	{r4, r5, r6, pc}
 800825e:	bf00      	nop
 8008260:	0802f9ff 	.word	0x0802f9ff
 8008264:	0803027c 	.word	0x0803027c

08008268 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8008268:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800826a:	f500 7494 	add.w	r4, r0, #296	; 0x128
 800826e:	784a      	ldrb	r2, [r1, #1]
{
 8008270:	4605      	mov	r5, r0
 8008272:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008274:	4620      	mov	r0, r4
 8008276:	4927      	ldr	r1, [pc, #156]	; (8008314 <ES_WIFI_StartClientConnection+0xac>)
 8008278:	f01b f9e0 	bl	802363c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800827c:	4622      	mov	r2, r4
 800827e:	4621      	mov	r1, r4
 8008280:	4628      	mov	r0, r5
 8008282:	f7ff fd9d 	bl	8007dc0 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008286:	2800      	cmp	r0, #0
 8008288:	d142      	bne.n	8008310 <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800828a:	7832      	ldrb	r2, [r6, #0]
 800828c:	4922      	ldr	r1, [pc, #136]	; (8008318 <ES_WIFI_StartClientConnection+0xb0>)
 800828e:	4620      	mov	r0, r4
 8008290:	f01b f9d4 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008294:	4622      	mov	r2, r4
 8008296:	4621      	mov	r1, r4
 8008298:	4628      	mov	r0, r5
 800829a:	f7ff fd91 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 800829e:	2800      	cmp	r0, #0
 80082a0:	d136      	bne.n	8008310 <ES_WIFI_StartClientConnection+0xa8>
 80082a2:	88b2      	ldrh	r2, [r6, #4]
 80082a4:	bb4a      	cbnz	r2, 80082fa <ES_WIFI_StartClientConnection+0x92>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80082a6:	8872      	ldrh	r2, [r6, #2]
 80082a8:	b14a      	cbz	r2, 80082be <ES_WIFI_StartClientConnection+0x56>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80082aa:	491c      	ldr	r1, [pc, #112]	; (800831c <ES_WIFI_StartClientConnection+0xb4>)
 80082ac:	4620      	mov	r0, r4
 80082ae:	f01b f9c5 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082b2:	4622      	mov	r2, r4
 80082b4:	4621      	mov	r1, r4
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7ff fd82 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 80082bc:	bb40      	cbnz	r0, 8008310 <ES_WIFI_StartClientConnection+0xa8>
 80082be:	7833      	ldrb	r3, [r6, #0]
 80082c0:	b97b      	cbnz	r3, 80082e2 <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 80082c2:	7a73      	ldrb	r3, [r6, #9]
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	7a33      	ldrb	r3, [r6, #8]
 80082c8:	79b2      	ldrb	r2, [r6, #6]
 80082ca:	4915      	ldr	r1, [pc, #84]	; (8008320 <ES_WIFI_StartClientConnection+0xb8>)
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	4620      	mov	r0, r4
 80082d0:	79f3      	ldrb	r3, [r6, #7]
 80082d2:	f01b f9b3 	bl	802363c <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082d6:	4622      	mov	r2, r4
 80082d8:	4621      	mov	r1, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	f7ff fd70 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80082e0:	b9b0      	cbnz	r0, 8008310 <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 80082e2:	4910      	ldr	r1, [pc, #64]	; (8008324 <ES_WIFI_StartClientConnection+0xbc>)
 80082e4:	4620      	mov	r0, r4
 80082e6:	f01b fa47 	bl	8023778 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082ea:	4622      	mov	r2, r4
 80082ec:	4621      	mov	r1, r4
 80082ee:	4628      	mov	r0, r5
  }
  
  UNLOCK_WIFI();
  return ret;
}
 80082f0:	b002      	add	sp, #8
 80082f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082f6:	f7ff bd63 	b.w	8007dc0 <AT_ExecuteCommand>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80082fa:	490b      	ldr	r1, [pc, #44]	; (8008328 <ES_WIFI_StartClientConnection+0xc0>)
 80082fc:	4620      	mov	r0, r4
 80082fe:	f01b f99d 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008302:	4622      	mov	r2, r4
 8008304:	4621      	mov	r1, r4
 8008306:	4628      	mov	r0, r5
 8008308:	f7ff fd5a 	bl	8007dc0 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 800830c:	2800      	cmp	r0, #0
 800830e:	d0ca      	beq.n	80082a6 <ES_WIFI_StartClientConnection+0x3e>
}
 8008310:	b002      	add	sp, #8
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	0802fa06 	.word	0x0802fa06
 8008318:	0802fa0d 	.word	0x0802fa0d
 800831c:	0802fa1b 	.word	0x0802fa1b
 8008320:	0802fa28 	.word	0x0802fa28
 8008324:	0802fa22 	.word	0x0802fa22
 8008328:	0802fa14 	.word	0x0802fa14

0800832c <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800832c:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800832e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008332:	784a      	ldrb	r2, [r1, #1]
 8008334:	490b      	ldr	r1, [pc, #44]	; (8008364 <ES_WIFI_StopClientConnection+0x38>)
{
 8008336:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008338:	4628      	mov	r0, r5
 800833a:	f01b f97f 	bl	802363c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800833e:	462a      	mov	r2, r5
 8008340:	4629      	mov	r1, r5
 8008342:	4620      	mov	r0, r4
 8008344:	f7ff fd3c 	bl	8007dc0 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008348:	b950      	cbnz	r0, 8008360 <ES_WIFI_StopClientConnection+0x34>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 800834a:	4907      	ldr	r1, [pc, #28]	; (8008368 <ES_WIFI_StopClientConnection+0x3c>)
 800834c:	4628      	mov	r0, r5
 800834e:	f01b fa13 	bl	8023778 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008352:	462a      	mov	r2, r5
 8008354:	4629      	mov	r1, r5
 8008356:	4620      	mov	r0, r4
  }
  UNLOCK_WIFI();
  return ret;
}
 8008358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800835c:	f7ff bd30 	b.w	8007dc0 <AT_ExecuteCommand>
}
 8008360:	bd38      	pop	{r3, r4, r5, pc}
 8008362:	bf00      	nop
 8008364:	0802fa06 	.word	0x0802fa06
 8008368:	0802fa38 	.word	0x0802fa38

0800836c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 800836c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008370:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8008374:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8008378:	bf28      	it	cs
 800837a:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800837e:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8008382:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8008384:	f8a8 3000 	strh.w	r3, [r8]
{
 8008388:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800838a:	4628      	mov	r0, r5
 800838c:	460a      	mov	r2, r1
 800838e:	492c      	ldr	r1, [pc, #176]	; (8008440 <ES_WIFI_SendData+0xd4>)
 8008390:	461f      	mov	r7, r3
 8008392:	f01b f953 	bl	802363c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008396:	462a      	mov	r2, r5
 8008398:	4629      	mov	r1, r5
 800839a:	4630      	mov	r0, r6
 800839c:	f7ff fd10 	bl	8007dc0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80083a0:	4604      	mov	r4, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d144      	bne.n	8008430 <ES_WIFI_SendData+0xc4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80083a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083a8:	4926      	ldr	r1, [pc, #152]	; (8008444 <ES_WIFI_SendData+0xd8>)
 80083aa:	4628      	mov	r0, r5
 80083ac:	f01b f946 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80083b0:	462a      	mov	r2, r5
 80083b2:	4629      	mov	r1, r5
 80083b4:	4630      	mov	r0, r6
 80083b6:	f7ff fd03 	bl	8007dc0 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80083ba:	4604      	mov	r4, r0
 80083bc:	bb80      	cbnz	r0, 8008420 <ES_WIFI_SendData+0xb4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80083be:	4922      	ldr	r1, [pc, #136]	; (8008448 <ES_WIFI_SendData+0xdc>)
 80083c0:	463a      	mov	r2, r7
 80083c2:	4628      	mov	r0, r5
 80083c4:	f01b f93a 	bl	802363c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80083c8:	9500      	str	r5, [sp, #0]
 80083ca:	463b      	mov	r3, r7
 80083cc:	464a      	mov	r2, r9
 80083ce:	4629      	mov	r1, r5
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff fd7f 	bl	8007ed4 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 80083d6:	4604      	mov	r4, r0
 80083d8:	b998      	cbnz	r0, 8008402 <ES_WIFI_SendData+0x96>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 80083da:	491c      	ldr	r1, [pc, #112]	; (800844c <ES_WIFI_SendData+0xe0>)
 80083dc:	4628      	mov	r0, r5
 80083de:	f01b f9f8 	bl	80237d2 <strstr>
 80083e2:	b1c8      	cbz	r0, 8008418 <ES_WIFI_SendData+0xac>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80083e4:	491a      	ldr	r1, [pc, #104]	; (8008450 <ES_WIFI_SendData+0xe4>)
 80083e6:	481b      	ldr	r0, [pc, #108]	; (8008454 <ES_WIFI_SendData+0xe8>)
 80083e8:	f240 7279 	movw	r2, #1913	; 0x779
 80083ec:	f01b f808 	bl	8023400 <iprintf>
 80083f0:	4819      	ldr	r0, [pc, #100]	; (8008458 <ES_WIFI_SendData+0xec>)
 80083f2:	4629      	mov	r1, r5
 80083f4:	f01b f804 	bl	8023400 <iprintf>
   DEBUG("P0 command failed\n"); 
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	f8a8 3000 	strh.w	r3, [r8]
 80083fe:	2402      	movs	r4, #2
 8008400:	e00a      	b.n	8008418 <ES_WIFI_SendData+0xac>
        DEBUG("Send Data command failed\n");  
 8008402:	4913      	ldr	r1, [pc, #76]	; (8008450 <ES_WIFI_SendData+0xe4>)
 8008404:	4813      	ldr	r0, [pc, #76]	; (8008454 <ES_WIFI_SendData+0xe8>)
 8008406:	f240 727f 	movw	r2, #1919	; 0x77f
 800840a:	f01a fff9 	bl	8023400 <iprintf>
 800840e:	4813      	ldr	r0, [pc, #76]	; (800845c <ES_WIFI_SendData+0xf0>)
   DEBUG("P0 command failed\n"); 
 8008410:	f01b f892 	bl	8023538 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8008414:	2c02      	cmp	r4, #2
 8008416:	d0ef      	beq.n	80083f8 <ES_WIFI_SendData+0x8c>
  }
  UNLOCK_WIFI();
  return ret;
}
 8008418:	4620      	mov	r0, r4
 800841a:	b003      	add	sp, #12
 800841c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n"); 
 8008420:	490b      	ldr	r1, [pc, #44]	; (8008450 <ES_WIFI_SendData+0xe4>)
 8008422:	480c      	ldr	r0, [pc, #48]	; (8008454 <ES_WIFI_SendData+0xe8>)
 8008424:	f240 7284 	movw	r2, #1924	; 0x784
 8008428:	f01a ffea 	bl	8023400 <iprintf>
 800842c:	480c      	ldr	r0, [pc, #48]	; (8008460 <ES_WIFI_SendData+0xf4>)
 800842e:	e7ef      	b.n	8008410 <ES_WIFI_SendData+0xa4>
   DEBUG("P0 command failed\n"); 
 8008430:	4907      	ldr	r1, [pc, #28]	; (8008450 <ES_WIFI_SendData+0xe4>)
 8008432:	4808      	ldr	r0, [pc, #32]	; (8008454 <ES_WIFI_SendData+0xe8>)
 8008434:	f240 7289 	movw	r2, #1929	; 0x789
 8008438:	f01a ffe2 	bl	8023400 <iprintf>
 800843c:	4809      	ldr	r0, [pc, #36]	; (8008464 <ES_WIFI_SendData+0xf8>)
 800843e:	e7e7      	b.n	8008410 <ES_WIFI_SendData+0xa4>
 8008440:	0802fa06 	.word	0x0802fa06
 8008444:	0802fbb6 	.word	0x0802fbb6
 8008448:	0802fbbe 	.word	0x0802fbbe
 800844c:	0802fbc7 	.word	0x0802fbc7
 8008450:	0802fa74 	.word	0x0802fa74
 8008454:	0802fac7 	.word	0x0802fac7
 8008458:	0802fbcc 	.word	0x0802fbcc
 800845c:	0802fbe7 	.word	0x0802fbe7
 8008460:	0802fc00 	.word	0x0802fc00
 8008464:	0802fc12 	.word	0x0802fc12

08008468 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8008468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800846c:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8008470:	4606      	mov	r6, r0
 8008472:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008474:	4628      	mov	r0, r5
 8008476:	460a      	mov	r2, r1
 8008478:	493f      	ldr	r1, [pc, #252]	; (8008578 <ES_WIFI_SendDataTo+0x110>)
{
 800847a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800847e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8008482:	461f      	mov	r7, r3
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8008484:	f01b f8da 	bl	802363c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008488:	462a      	mov	r2, r5
 800848a:	4629      	mov	r1, r5
 800848c:	4630      	mov	r0, r6
 800848e:	f7ff fc97 	bl	8007dc0 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008492:	4604      	mov	r4, r0
 8008494:	2800      	cmp	r0, #0
 8008496:	d15a      	bne.n	800854e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8008498:	4938      	ldr	r1, [pc, #224]	; (800857c <ES_WIFI_SendDataTo+0x114>)
 800849a:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 800849e:	4628      	mov	r0, r5
 80084a0:	f01b f8cc 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084a4:	462a      	mov	r2, r5
 80084a6:	4629      	mov	r1, r5
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff fc89 	bl	8007dc0 <AT_ExecuteCommand>
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 80084ae:	4604      	mov	r4, r0
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d14c      	bne.n	800854e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 80084b4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80084b8:	4931      	ldr	r1, [pc, #196]	; (8008580 <ES_WIFI_SendDataTo+0x118>)
 80084ba:	4628      	mov	r0, r5
 80084bc:	f01b f8be 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084c0:	462a      	mov	r2, r5
 80084c2:	4629      	mov	r1, r5
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff fc7b 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80084ca:	4604      	mov	r4, r0
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d13e      	bne.n	800854e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 80084d0:	f899 3003 	ldrb.w	r3, [r9, #3]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	f899 3002 	ldrb.w	r3, [r9, #2]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	f899 3001 	ldrb.w	r3, [r9, #1]
 80084e0:	f899 2000 	ldrb.w	r2, [r9]
 80084e4:	4927      	ldr	r1, [pc, #156]	; (8008584 <ES_WIFI_SendDataTo+0x11c>)
 80084e6:	4628      	mov	r0, r5
 80084e8:	f01b f8a8 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084ec:	462a      	mov	r2, r5
 80084ee:	4629      	mov	r1, r5
 80084f0:	4630      	mov	r0, r6
 80084f2:	f7ff fc65 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 80084f6:	4604      	mov	r4, r0
 80084f8:	bb48      	cbnz	r0, 800854e <ES_WIFI_SendDataTo+0xe6>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 80084fa:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", Timeout);
 80084fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008500:	4921      	ldr	r1, [pc, #132]	; (8008588 <ES_WIFI_SendDataTo+0x120>)
 8008502:	4628      	mov	r0, r5
 8008504:	bf28      	it	cs
 8008506:	f44f 6796 	movcs.w	r7, #1200	; 0x4b0
 800850a:	f01b f897 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800850e:	462a      	mov	r2, r5
 8008510:	4629      	mov	r1, r5
 8008512:	4630      	mov	r0, r6
 8008514:	f7ff fc54 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008518:	4604      	mov	r4, r0
 800851a:	b9c0      	cbnz	r0, 800854e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800851c:	491b      	ldr	r1, [pc, #108]	; (800858c <ES_WIFI_SendDataTo+0x124>)
 800851e:	463a      	mov	r2, r7
 8008520:	4628      	mov	r0, r5
 8008522:	f01b f88b 	bl	802363c <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008526:	9500      	str	r5, [sp, #0]
 8008528:	463b      	mov	r3, r7
 800852a:	4652      	mov	r2, sl
 800852c:	4629      	mov	r1, r5
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff fcd0 	bl	8007ed4 <AT_RequestSendData>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008534:	4604      	mov	r4, r0
 8008536:	b950      	cbnz	r0, 800854e <ES_WIFI_SendDataTo+0xe6>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8008538:	4915      	ldr	r1, [pc, #84]	; (8008590 <ES_WIFI_SendDataTo+0x128>)
 800853a:	4628      	mov	r0, r5
 800853c:	f01b f949 	bl	80237d2 <strstr>
    if(ptr != NULL)
 8008540:	b198      	cbz	r0, 800856a <ES_WIFI_SendDataTo+0x102>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8008542:	f506 64d4 	add.w	r4, r6, #1696	; 0x6a0
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8008546:	42a0      	cmp	r0, r4
 8008548:	bf34      	ite	cc
 800854a:	2402      	movcc	r4, #2
 800854c:	2404      	movcs	r4, #4
  {
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
 800854e:	4911      	ldr	r1, [pc, #68]	; (8008594 <ES_WIFI_SendDataTo+0x12c>)
 8008550:	4811      	ldr	r0, [pc, #68]	; (8008598 <ES_WIFI_SendDataTo+0x130>)
 8008552:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8008556:	f01a ff53 	bl	8023400 <iprintf>
 800855a:	4810      	ldr	r0, [pc, #64]	; (800859c <ES_WIFI_SendDataTo+0x134>)
 800855c:	4629      	mov	r1, r5
 800855e:	f01a ff4f 	bl	8023400 <iprintf>
    *SentLen = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	f8a8 3000 	strh.w	r3, [r8]
 8008568:	e001      	b.n	800856e <ES_WIFI_SendDataTo+0x106>
    *SentLen = Reqlen;
 800856a:	f8a8 7000 	strh.w	r7, [r8]
  }

  UNLOCK_WIFI();
  return ret;
}
 800856e:	4620      	mov	r0, r4
 8008570:	b002      	add	sp, #8
 8008572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008576:	bf00      	nop
 8008578:	0802fa06 	.word	0x0802fa06
 800857c:	0802fa14 	.word	0x0802fa14
 8008580:	0802fa1b 	.word	0x0802fa1b
 8008584:	0802fa28 	.word	0x0802fa28
 8008588:	0802fbb6 	.word	0x0802fbb6
 800858c:	0802fbbe 	.word	0x0802fbbe
 8008590:	0802fbc7 	.word	0x0802fbc7
 8008594:	0802fa74 	.word	0x0802fa74
 8008598:	0802fac7 	.word	0x0802fac7
 800859c:	0802fc24 	.word	0x0802fc24

080085a0 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80085a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80085a4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 80085a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80085ac:	4606      	mov	r6, r0
 80085ae:	4690      	mov	r8, r2
 80085b0:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80085b2:	d864      	bhi.n	800867e <ES_WIFI_ReceiveData+0xde>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80085b4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80085b8:	460a      	mov	r2, r1
 80085ba:	4628      	mov	r0, r5
 80085bc:	4931      	ldr	r1, [pc, #196]	; (8008684 <ES_WIFI_ReceiveData+0xe4>)
 80085be:	f01b f83d 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085c2:	462a      	mov	r2, r5
 80085c4:	4629      	mov	r1, r5
 80085c6:	4630      	mov	r0, r6
 80085c8:	f7ff fbfa 	bl	8007dc0 <AT_ExecuteCommand>
 80085cc:	4604      	mov	r4, r0
 80085ce:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 80085d0:	2800      	cmp	r0, #0
 80085d2:	d146      	bne.n	8008662 <ES_WIFI_ReceiveData+0xc2>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80085d4:	492c      	ldr	r1, [pc, #176]	; (8008688 <ES_WIFI_ReceiveData+0xe8>)
 80085d6:	463a      	mov	r2, r7
 80085d8:	4628      	mov	r0, r5
 80085da:	f01b f82f 	bl	802363c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085de:	462a      	mov	r2, r5
 80085e0:	4629      	mov	r1, r5
 80085e2:	4630      	mov	r0, r6
 80085e4:	f7ff fbec 	bl	8007dc0 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 80085e8:	4604      	mov	r4, r0
 80085ea:	bb70      	cbnz	r0, 800864a <ES_WIFI_ReceiveData+0xaa>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 80085ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085ee:	4927      	ldr	r1, [pc, #156]	; (800868c <ES_WIFI_ReceiveData+0xec>)
 80085f0:	4628      	mov	r0, r5
 80085f2:	f01b f823 	bl	802363c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085f6:	462a      	mov	r2, r5
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f7ff fbe0 	bl	8007dc0 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008600:	4604      	mov	r4, r0
 8008602:	b9d0      	cbnz	r0, 800863a <ES_WIFI_ReceiveData+0x9a>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8008604:	4922      	ldr	r1, [pc, #136]	; (8008690 <ES_WIFI_ReceiveData+0xf0>)
 8008606:	4628      	mov	r0, r5
 8008608:	f01b f8b6 	bl	8023778 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800860c:	f8cd 9000 	str.w	r9, [sp]
 8008610:	463b      	mov	r3, r7
 8008612:	4642      	mov	r2, r8
 8008614:	4629      	mov	r1, r5
 8008616:	4630      	mov	r0, r6
 8008618:	f7ff fc0a 	bl	8007e30 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 800861c:	4604      	mov	r4, r0
 800861e:	b140      	cbz	r0, 8008632 <ES_WIFI_ReceiveData+0x92>
          {
            DEBUG("AT_RequestReceiveData  failed\n"); 
 8008620:	491c      	ldr	r1, [pc, #112]	; (8008694 <ES_WIFI_ReceiveData+0xf4>)
 8008622:	481d      	ldr	r0, [pc, #116]	; (8008698 <ES_WIFI_ReceiveData+0xf8>)
 8008624:	f640 0202 	movw	r2, #2050	; 0x802
 8008628:	f01a feea 	bl	8023400 <iprintf>
 800862c:	481b      	ldr	r0, [pc, #108]	; (800869c <ES_WIFI_ReceiveData+0xfc>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n"); 
 800862e:	f01a ff83 	bl	8023538 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008632:	4620      	mov	r0, r4
 8008634:	b002      	add	sp, #8
 8008636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n"); 
 800863a:	4916      	ldr	r1, [pc, #88]	; (8008694 <ES_WIFI_ReceiveData+0xf4>)
 800863c:	4816      	ldr	r0, [pc, #88]	; (8008698 <ES_WIFI_ReceiveData+0xf8>)
 800863e:	f640 0207 	movw	r2, #2055	; 0x807
 8008642:	f01a fedd 	bl	8023400 <iprintf>
 8008646:	4816      	ldr	r0, [pc, #88]	; (80086a0 <ES_WIFI_ReceiveData+0x100>)
 8008648:	e7f1      	b.n	800862e <ES_WIFI_ReceiveData+0x8e>
        DEBUG("setting requested len failed\n"); 
 800864a:	4912      	ldr	r1, [pc, #72]	; (8008694 <ES_WIFI_ReceiveData+0xf4>)
 800864c:	4812      	ldr	r0, [pc, #72]	; (8008698 <ES_WIFI_ReceiveData+0xf8>)
 800864e:	f640 020c 	movw	r2, #2060	; 0x80c
 8008652:	f01a fed5 	bl	8023400 <iprintf>
 8008656:	4813      	ldr	r0, [pc, #76]	; (80086a4 <ES_WIFI_ReceiveData+0x104>)
 8008658:	f01a ff6e 	bl	8023538 <puts>
        *Receivedlen = 0;
 800865c:	f8a9 a000 	strh.w	sl, [r9]
 8008660:	e7e7      	b.n	8008632 <ES_WIFI_ReceiveData+0x92>
      DEBUG("setting socket for read failed\n"); 
 8008662:	f640 0212 	movw	r2, #2066	; 0x812
 8008666:	490b      	ldr	r1, [pc, #44]	; (8008694 <ES_WIFI_ReceiveData+0xf4>)
 8008668:	480b      	ldr	r0, [pc, #44]	; (8008698 <ES_WIFI_ReceiveData+0xf8>)
 800866a:	f01a fec9 	bl	8023400 <iprintf>
 800866e:	480e      	ldr	r0, [pc, #56]	; (80086a8 <ES_WIFI_ReceiveData+0x108>)
 8008670:	f01a ff62 	bl	8023538 <puts>
      issue15++;
 8008674:	4a0d      	ldr	r2, [pc, #52]	; (80086ac <ES_WIFI_ReceiveData+0x10c>)
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	3301      	adds	r3, #1
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e7d9      	b.n	8008632 <ES_WIFI_ReceiveData+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800867e:	2402      	movs	r4, #2
 8008680:	e7d7      	b.n	8008632 <ES_WIFI_ReceiveData+0x92>
 8008682:	bf00      	nop
 8008684:	0802fa06 	.word	0x0802fa06
 8008688:	0802fc34 	.word	0x0802fc34
 800868c:	0802fc3b 	.word	0x0802fc3b
 8008690:	0802fc43 	.word	0x0802fc43
 8008694:	0802fa74 	.word	0x0802fa74
 8008698:	0802fac7 	.word	0x0802fac7
 800869c:	0802fc47 	.word	0x0802fc47
 80086a0:	0802fc65 	.word	0x0802fc65
 80086a4:	0802fc7c 	.word	0x0802fc7c
 80086a8:	0802fc99 	.word	0x0802fc99
 80086ac:	2000104c 	.word	0x2000104c

080086b0 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 80086b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086b4:	b089      	sub	sp, #36	; 0x24
 80086b6:	461f      	mov	r7, r3
 80086b8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 80086bc:	2300      	movs	r3, #0
  LOCK_WIFI();  

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80086be:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
{
 80086c2:	4606      	mov	r6, r0
 80086c4:	4691      	mov	r9, r2
  *Receivedlen = 0;
 80086c6:	f8a8 3000 	strh.w	r3, [r8]
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80086ca:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80086ce:	d821      	bhi.n	8008714 <ES_WIFI_ReceiveDataFrom+0x64>
  {
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 80086d0:	460a      	mov	r2, r1
 80086d2:	4628      	mov	r0, r5
 80086d4:	496f      	ldr	r1, [pc, #444]	; (8008894 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 80086d6:	f01a ffb1 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086da:	462a      	mov	r2, r5
 80086dc:	4629      	mov	r1, r5
 80086de:	4630      	mov	r0, r6
 80086e0:	f7ff fb6e 	bl	8007dc0 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 80086e4:	4604      	mov	r4, r0
 80086e6:	b9b0      	cbnz	r0, 8008716 <ES_WIFI_ReceiveDataFrom+0x66>
  {
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80086e8:	496b      	ldr	r1, [pc, #428]	; (8008898 <ES_WIFI_ReceiveDataFrom+0x1e8>)
 80086ea:	463a      	mov	r2, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	f01a ffa5 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086f2:	462a      	mov	r2, r5
 80086f4:	4629      	mov	r1, r5
 80086f6:	4630      	mov	r0, r6
 80086f8:	f7ff fb62 	bl	8007dc0 <AT_ExecuteCommand>
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 80086fc:	4604      	mov	r4, r0
 80086fe:	b1a0      	cbz	r0, 800872a <ES_WIFI_ReceiveDataFrom+0x7a>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  else
  {
    DEBUG("R1 failed.\n");
 8008700:	4966      	ldr	r1, [pc, #408]	; (800889c <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008702:	4867      	ldr	r0, [pc, #412]	; (80088a0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008704:	f640 0238 	movw	r2, #2104	; 0x838
 8008708:	f01a fe7a 	bl	8023400 <iprintf>
 800870c:	4865      	ldr	r0, [pc, #404]	; (80088a4 <ES_WIFI_ReceiveDataFrom+0x1f4>)
 800870e:	f01a ff13 	bl	8023538 <puts>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008712:	e016      	b.n	8008742 <ES_WIFI_ReceiveDataFrom+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008714:	2402      	movs	r4, #2
    DEBUG("P0 failed.\n");
 8008716:	4961      	ldr	r1, [pc, #388]	; (800889c <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008718:	4861      	ldr	r0, [pc, #388]	; (80088a0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 800871a:	f640 022e 	movw	r2, #2094	; 0x82e
 800871e:	f01a fe6f 	bl	8023400 <iprintf>
 8008722:	4861      	ldr	r0, [pc, #388]	; (80088a8 <ES_WIFI_ReceiveDataFrom+0x1f8>)
 8008724:	f01a ff08 	bl	8023538 <puts>
  if(ret == ES_WIFI_STATUS_OK)
 8008728:	e7ea      	b.n	8008700 <ES_WIFI_ReceiveDataFrom+0x50>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 800872a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800872c:	495f      	ldr	r1, [pc, #380]	; (80088ac <ES_WIFI_ReceiveDataFrom+0x1fc>)
 800872e:	4628      	mov	r0, r5
 8008730:	f01a ff84 	bl	802363c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008734:	462a      	mov	r2, r5
 8008736:	4629      	mov	r1, r5
 8008738:	4630      	mov	r0, r6
 800873a:	f7ff fb41 	bl	8007dc0 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800873e:	4604      	mov	r4, r0
 8008740:	b148      	cbz	r0, 8008756 <ES_WIFI_ReceiveDataFrom+0xa6>
    sprintf((char*)Obj->CmdData,"R0\r");
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
  }
  else
  {
    DEBUG("R2 failed.\n");
 8008742:	4956      	ldr	r1, [pc, #344]	; (800889c <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008744:	4856      	ldr	r0, [pc, #344]	; (80088a0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008746:	f640 0242 	movw	r2, #2114	; 0x842
 800874a:	f01a fe59 	bl	8023400 <iprintf>
 800874e:	4858      	ldr	r0, [pc, #352]	; (80088b0 <ES_WIFI_ReceiveDataFrom+0x200>)
 8008750:	f01a fef2 	bl	8023538 <puts>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008754:	e00d      	b.n	8008772 <ES_WIFI_ReceiveDataFrom+0xc2>
    sprintf((char*)Obj->CmdData,"R0\r");
 8008756:	4957      	ldr	r1, [pc, #348]	; (80088b4 <ES_WIFI_ReceiveDataFrom+0x204>)
 8008758:	4628      	mov	r0, r5
 800875a:	f01b f80d 	bl	8023778 <strcpy>
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800875e:	f8cd 8000 	str.w	r8, [sp]
 8008762:	463b      	mov	r3, r7
 8008764:	464a      	mov	r2, r9
 8008766:	4629      	mov	r1, r5
 8008768:	4630      	mov	r0, r6
 800876a:	f7ff fb61 	bl	8007e30 <AT_RequestReceiveData>
  if (ret == ES_WIFI_STATUS_OK)
 800876e:	4604      	mov	r4, r0
 8008770:	b168      	cbz	r0, 800878e <ES_WIFI_ReceiveDataFrom+0xde>
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
 8008772:	494a      	ldr	r1, [pc, #296]	; (800889c <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008774:	484a      	ldr	r0, [pc, #296]	; (80088a0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008776:	f640 0262 	movw	r2, #2146	; 0x862
 800877a:	f01a fe41 	bl	8023400 <iprintf>
 800877e:	484e      	ldr	r0, [pc, #312]	; (80088b8 <ES_WIFI_ReceiveDataFrom+0x208>)
 8008780:	4629      	mov	r1, r5
 8008782:	f01a fe3d 	bl	8023400 <iprintf>
    *Receivedlen = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	f8a8 3000 	strh.w	r3, [r8]
 800878c:	e044      	b.n	8008818 <ES_WIFI_ReceiveDataFrom+0x168>
    if (*Receivedlen > Reqlen)
 800878e:	f8b8 3000 	ldrh.w	r3, [r8]
 8008792:	42bb      	cmp	r3, r7
 8008794:	d90a      	bls.n	80087ac <ES_WIFI_ReceiveDataFrom+0xfc>
      DEBUG("AT_RequestReceiveData overflow\n.");
 8008796:	4941      	ldr	r1, [pc, #260]	; (800889c <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008798:	4841      	ldr	r0, [pc, #260]	; (80088a0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 800879a:	f640 0249 	movw	r2, #2121	; 0x849
 800879e:	f01a fe2f 	bl	8023400 <iprintf>
 80087a2:	4846      	ldr	r0, [pc, #280]	; (80088bc <ES_WIFI_ReceiveDataFrom+0x20c>)
 80087a4:	f01a fe2c 	bl	8023400 <iprintf>
      ret = ES_WIFI_STATUS_ERROR;
 80087a8:	2402      	movs	r4, #2
 80087aa:	e7e2      	b.n	8008772 <ES_WIFI_ReceiveDataFrom+0xc2>
      if (*Receivedlen > 0)
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d033      	beq.n	8008818 <ES_WIFI_ReceiveDataFrom+0x168>
        sprintf((char*)Obj->CmdData,"P?\r");
 80087b0:	4943      	ldr	r1, [pc, #268]	; (80088c0 <ES_WIFI_ReceiveDataFrom+0x210>)
 80087b2:	4628      	mov	r0, r5
 80087b4:	f01a ffe0 	bl	8023778 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80087b8:	462a      	mov	r2, r5
 80087ba:	4629      	mov	r1, r5
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff faff 	bl	8007dc0 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80087c2:	4604      	mov	r4, r0
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d1d4      	bne.n	8008772 <ES_WIFI_ReceiveDataFrom+0xc2>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 80087c8:	4601      	mov	r1, r0
 80087ca:	2214      	movs	r2, #20
 80087cc:	a803      	add	r0, sp, #12
 80087ce:	f019 fd13 	bl	80221f8 <memset>
  ptr = strtok(pdata + 2, ",");
 80087d2:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 80087d6:	493b      	ldr	r1, [pc, #236]	; (80088c4 <ES_WIFI_ReceiveDataFrom+0x214>)
    ptr = strtok(NULL, ",");
 80087d8:	4e3a      	ldr	r6, [pc, #232]	; (80088c4 <ES_WIFI_ReceiveDataFrom+0x214>)
  ptr = strtok(pdata + 2, ",");
 80087da:	f01b fe43 	bl	8024464 <strtok>
  uint8_t num = 0;
 80087de:	4625      	mov	r5, r4
  while (ptr != NULL) {
 80087e0:	b198      	cbz	r0, 800880a <ES_WIFI_ReceiveDataFrom+0x15a>
    switch (num++) {
 80087e2:	2d09      	cmp	r5, #9
 80087e4:	d80b      	bhi.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
 80087e6:	e8df f005 	tbb	[pc, r5]
 80087ea:	1b05      	.short	0x1b05
 80087ec:	2e282620 	.word	0x2e282620
 80087f0:	46403a34 	.word	0x46403a34
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 80087f4:	2100      	movs	r1, #0
 80087f6:	f7ff fa7b 	bl	8007cf0 <ParseNumber>
 80087fa:	f88d 000c 	strb.w	r0, [sp, #12]
    ptr = strtok(NULL, ",");
 80087fe:	4631      	mov	r1, r6
 8008800:	2000      	movs	r0, #0
 8008802:	f01b fe2f 	bl	8024464 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008806:	2800      	cmp	r0, #0
 8008808:	d13b      	bne.n	8008882 <ES_WIFI_ReceiveDataFrom+0x1d2>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 800880a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800880c:	9a05      	ldr	r2, [sp, #20]
 800880e:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008812:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008816:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8008818:	4620      	mov	r0, r4
 800881a:	b009      	add	sp, #36	; 0x24
 800881c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8008820:	f10d 010d 	add.w	r1, sp, #13
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008824:	f7ff fab3 	bl	8007d8e <ParseIP>
      break;
 8008828:	e7e9      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 800882a:	2100      	movs	r1, #0
 800882c:	f7ff fa60 	bl	8007cf0 <ParseNumber>
 8008830:	f8ad 0012 	strh.w	r0, [sp, #18]
      break;
 8008834:	e7e3      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008836:	a905      	add	r1, sp, #20
 8008838:	e7f4      	b.n	8008824 <ES_WIFI_ReceiveDataFrom+0x174>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 800883a:	2100      	movs	r1, #0
 800883c:	f7ff fa58 	bl	8007cf0 <ParseNumber>
 8008840:	f8ad 0018 	strh.w	r0, [sp, #24]
      break;
 8008844:	e7db      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8008846:	2100      	movs	r1, #0
 8008848:	f7ff fa52 	bl	8007cf0 <ParseNumber>
 800884c:	f88d 001a 	strb.w	r0, [sp, #26]
      break;
 8008850:	e7d5      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8008852:	2100      	movs	r1, #0
 8008854:	f7ff fa4c 	bl	8007cf0 <ParseNumber>
 8008858:	f88d 001b 	strb.w	r0, [sp, #27]
      break;
 800885c:	e7cf      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 800885e:	2100      	movs	r1, #0
 8008860:	f7ff fa46 	bl	8007cf0 <ParseNumber>
 8008864:	f88d 001c 	strb.w	r0, [sp, #28]
      break;
 8008868:	e7c9      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 800886a:	2100      	movs	r1, #0
 800886c:	f7ff fa40 	bl	8007cf0 <ParseNumber>
 8008870:	f88d 001d 	strb.w	r0, [sp, #29]
      break;
 8008874:	e7c3      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8008876:	2100      	movs	r1, #0
 8008878:	f7ff fa3a 	bl	8007cf0 <ParseNumber>
 800887c:	f88d 001e 	strb.w	r0, [sp, #30]
      break;
 8008880:	e7bd      	b.n	80087fe <ES_WIFI_ReceiveDataFrom+0x14e>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008882:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008886:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8008888:	bf14      	ite	ne
 800888a:	3501      	addne	r5, #1
      num++;
 800888c:	3502      	addeq	r5, #2
 800888e:	b2ed      	uxtb	r5, r5
 8008890:	e7a6      	b.n	80087e0 <ES_WIFI_ReceiveDataFrom+0x130>
 8008892:	bf00      	nop
 8008894:	0802fa06 	.word	0x0802fa06
 8008898:	0802fc34 	.word	0x0802fc34
 800889c:	0802fa74 	.word	0x0802fa74
 80088a0:	0802fac7 	.word	0x0802fac7
 80088a4:	0802fcc3 	.word	0x0802fcc3
 80088a8:	0802fcb8 	.word	0x0802fcb8
 80088ac:	0802fc3b 	.word	0x0802fc3b
 80088b0:	0802fcce 	.word	0x0802fcce
 80088b4:	0802fc43 	.word	0x0802fc43
 80088b8:	0802fcfa 	.word	0x0802fcfa
 80088bc:	0802fcd9 	.word	0x0802fcd9
 80088c0:	0802fafb 	.word	0x0802fafb
 80088c4:	0803073a 	.word	0x0803073a

080088c8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088c8:	490f      	ldr	r1, [pc, #60]	; (8008908 <SystemInit+0x40>)
 80088ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80088ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <SystemInit+0x44>)
 80088d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80088da:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80088dc:	f042 0201 	orr.w	r2, r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80088e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80088ea:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80088ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80088f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80088fe:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECTOR_TABLE;
 8008900:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008904:	608b      	str	r3, [r1, #8]

}
 8008906:	4770      	bx	lr
 8008908:	e000ed00 	.word	0xe000ed00
 800890c:	40021000 	.word	0x40021000

08008910 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8008910:	4770      	bx	lr
	...

08008914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008914:	b507      	push	{r0, r1, r2, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008916:	4b09      	ldr	r3, [pc, #36]	; (800893c <HAL_InitTick+0x28>)
{
 8008918:	9001      	str	r0, [sp, #4]
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008920:	fbb0 f0f3 	udiv	r0, r0, r3
 8008924:	f000 f896 	bl	8008a54 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008928:	9901      	ldr	r1, [sp, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	f000 f840 	bl	80089b4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8008934:	2000      	movs	r0, #0
 8008936:	b003      	add	sp, #12
 8008938:	f85d fb04 	ldr.w	pc, [sp], #4
 800893c:	20000528 	.word	0x20000528

08008940 <HAL_Init>:
{
 8008940:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008942:	2003      	movs	r0, #3
 8008944:	f000 f824 	bl	8008990 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008948:	200f      	movs	r0, #15
 800894a:	f7ff ffe3 	bl	8008914 <HAL_InitTick>
  HAL_MspInit();
 800894e:	f7ff ffdf 	bl	8008910 <HAL_MspInit>
}
 8008952:	2000      	movs	r0, #0
 8008954:	bd08      	pop	{r3, pc}
	...

08008958 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008958:	4a02      	ldr	r2, [pc, #8]	; (8008964 <HAL_IncTick+0xc>)
 800895a:	6813      	ldr	r3, [r2, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	6013      	str	r3, [r2, #0]
}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20001988 	.word	0x20001988

08008968 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008968:	4b01      	ldr	r3, [pc, #4]	; (8008970 <HAL_GetTick+0x8>)
 800896a:	6818      	ldr	r0, [r3, #0]
}
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20001988 	.word	0x20001988

08008974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008978:	f7ff fff6 	bl	8008968 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800897c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800897e:	4605      	mov	r5, r0
  {
    wait++;
 8008980:	bf18      	it	ne
 8008982:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8008984:	f7ff fff0 	bl	8008968 <HAL_GetTick>
 8008988:	1b43      	subs	r3, r0, r5
 800898a:	42a3      	cmp	r3, r4
 800898c:	d3fa      	bcc.n	8008984 <HAL_Delay+0x10>
  {
  }
}
 800898e:	bd38      	pop	{r3, r4, r5, pc}

08008990 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008990:	4907      	ldr	r1, [pc, #28]	; (80089b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008992:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008994:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008998:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800899a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800899c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80089a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80089a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80089a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80089a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80089ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80089ae:	4770      	bx	lr
 80089b0:	e000ed00 	.word	0xe000ed00

080089b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089b6:	b530      	push	{r4, r5, lr}
 80089b8:	68dc      	ldr	r4, [r3, #12]
 80089ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089be:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089c2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089c4:	2d04      	cmp	r5, #4
 80089c6:	bf28      	it	cs
 80089c8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089ca:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089cc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089d0:	bf8c      	ite	hi
 80089d2:	3c03      	subhi	r4, #3
 80089d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089d6:	fa03 f505 	lsl.w	r5, r3, r5
 80089da:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089de:	40a3      	lsls	r3, r4
 80089e0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089e4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 80089e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089e8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ec:	bfac      	ite	ge
 80089ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089f2:	4a08      	ldrlt	r2, [pc, #32]	; (8008a14 <HAL_NVIC_SetPriority+0x60>)
 80089f4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80089f8:	bfb8      	it	lt
 80089fa:	f000 000f 	andlt.w	r0, r0, #15
 80089fe:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a00:	bfaa      	itet	ge
 8008a02:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a06:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a08:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008a0c:	bd30      	pop	{r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed00 	.word	0xe000ed00
 8008a14:	e000ed14 	.word	0xe000ed14

08008a18 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008a18:	0942      	lsrs	r2, r0, #5
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f000 001f 	and.w	r0, r0, #31
 8008a20:	fa03 f000 	lsl.w	r0, r3, r0
 8008a24:	4b01      	ldr	r3, [pc, #4]	; (8008a2c <HAL_NVIC_EnableIRQ+0x14>)
 8008a26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008a2a:	4770      	bx	lr
 8008a2c:	e000e100 	.word	0xe000e100

08008a30 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008a30:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008a34:	4905      	ldr	r1, [pc, #20]	; (8008a4c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a36:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008a38:	68ca      	ldr	r2, [r1, #12]
 8008a3a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	60cb      	str	r3, [r1, #12]
 8008a42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008a46:	bf00      	nop
 8008a48:	e7fd      	b.n	8008a46 <HAL_NVIC_SystemReset+0x16>
 8008a4a:	bf00      	nop
 8008a4c:	e000ed00 	.word	0xe000ed00
 8008a50:	05fa0004 	.word	0x05fa0004

08008a54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a54:	3801      	subs	r0, #1
 8008a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008a5a:	d20a      	bcs.n	8008a72 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a5e:	4a07      	ldr	r2, [pc, #28]	; (8008a7c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a60:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a62:	21f0      	movs	r1, #240	; 0xf0
 8008a64:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a68:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a6a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a6c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a70:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008a72:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	e000e010 	.word	0xe000e010
 8008a7c:	e000ed00 	.word	0xe000ed00

08008a80 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8008a80:	4770      	bx	lr

08008a82 <HAL_SYSTICK_IRQHandler>:
{
 8008a82:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008a84:	f7ff fffc 	bl	8008a80 <HAL_SYSTICK_Callback>
}
 8008a88:	bd08      	pop	{r3, pc}

08008a8a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008a8a:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a8c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8008a90:	2a02      	cmp	r2, #2
 8008a92:	d003      	beq.n	8008a9c <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a94:	2204      	movs	r2, #4
 8008a96:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8008a98:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8008a9a:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a9c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008a9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008aa0:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8008aa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008aa4:	f021 010e 	bic.w	r1, r1, #14
 8008aa8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008aaa:	6811      	ldr	r1, [r2, #0]
 8008aac:	f021 0101 	bic.w	r1, r1, #1
 8008ab0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008ab2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8008aba:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8008abc:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008abe:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008ac2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8008ac6:	b113      	cbz	r3, 8008ace <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8008ac8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008aca:	4620      	mov	r0, r4
 8008acc:	e7e5      	b.n	8008a9a <HAL_DMA_Abort_IT+0x10>
 8008ace:	4618      	mov	r0, r3
 8008ad0:	e7e3      	b.n	8008a9a <HAL_DMA_Abort_IT+0x10>
	...

08008ad4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <FLASH_SetErrorCode+0xcc>)
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	0792      	lsls	r2, r2, #30
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OP;
 8008ada:	bf41      	itttt	mi
 8008adc:	4931      	ldrmi	r1, [pc, #196]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008ade:	684a      	ldrmi	r2, [r1, #4]
 8008ae0:	f042 0201 	orrmi.w	r2, r2, #1
 8008ae4:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR))
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	071b      	lsls	r3, r3, #28
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008aea:	bf41      	itttt	mi
 8008aec:	4a2d      	ldrmi	r2, [pc, #180]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008aee:	6853      	ldrmi	r3, [r2, #4]
 8008af0:	f043 0302 	orrmi.w	r3, r3, #2
 8008af4:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008af6:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <FLASH_SetErrorCode+0xcc>)
 8008af8:	691a      	ldr	r2, [r3, #16]
 8008afa:	06d0      	lsls	r0, r2, #27
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008afc:	bf41      	itttt	mi
 8008afe:	4929      	ldrmi	r1, [pc, #164]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b00:	684a      	ldrmi	r2, [r1, #4]
 8008b02:	f042 0204 	orrmi.w	r2, r2, #4
 8008b06:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	0699      	lsls	r1, r3, #26
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008b0c:	bf41      	itttt	mi
 8008b0e:	4a25      	ldrmi	r2, [pc, #148]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b10:	6853      	ldrmi	r3, [r2, #4]
 8008b12:	f043 0308 	orrmi.w	r3, r3, #8
 8008b16:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8008b18:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <FLASH_SetErrorCode+0xcc>)
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	0652      	lsls	r2, r2, #25
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZ;
 8008b1e:	bf41      	itttt	mi
 8008b20:	4920      	ldrmi	r1, [pc, #128]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b22:	684a      	ldrmi	r2, [r1, #4]
 8008b24:	f042 0210 	orrmi.w	r2, r2, #16
 8008b28:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	061b      	lsls	r3, r3, #24
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008b2e:	bf41      	itttt	mi
 8008b30:	4a1c      	ldrmi	r2, [pc, #112]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b32:	6853      	ldrmi	r3, [r2, #4]
 8008b34:	f043 0320 	orrmi.w	r3, r3, #32
 8008b38:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR))
 8008b3a:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <FLASH_SetErrorCode+0xcc>)
 8008b3c:	691a      	ldr	r2, [r3, #16]
 8008b3e:	05d0      	lsls	r0, r2, #23
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_MIS;
 8008b40:	bf41      	itttt	mi
 8008b42:	4918      	ldrmi	r1, [pc, #96]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b44:	684a      	ldrmi	r2, [r1, #4]
 8008b46:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8008b4a:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR))
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	0599      	lsls	r1, r3, #22
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_FAST;
 8008b50:	bf41      	itttt	mi
 8008b52:	4a14      	ldrmi	r2, [pc, #80]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b54:	6853      	ldrmi	r3, [r2, #4]
 8008b56:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8008b5a:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <FLASH_SetErrorCode+0xcc>)
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	0452      	lsls	r2, r2, #17
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008b62:	bf41      	itttt	mi
 8008b64:	490f      	ldrmi	r1, [pc, #60]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b66:	684a      	ldrmi	r2, [r1, #4]
 8008b68:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8008b6c:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	041b      	lsls	r3, r3, #16
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008b72:	bf41      	itttt	mi
 8008b74:	4a0b      	ldrmi	r2, [pc, #44]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b76:	6853      	ldrmi	r3, [r2, #4]
 8008b78:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8008b7c:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8008b7e:	4b08      	ldr	r3, [pc, #32]	; (8008ba0 <FLASH_SetErrorCode+0xcc>)
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	2a00      	cmp	r2, #0
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_ECCD;
 8008b84:	bfbf      	itttt	lt
 8008b86:	4907      	ldrlt	r1, [pc, #28]	; (8008ba4 <FLASH_SetErrorCode+0xd0>)
 8008b88:	684a      	ldrlt	r2, [r1, #4]
 8008b8a:	f442 6280 	orrlt.w	r2, r2, #1024	; 0x400
 8008b8e:	604a      	strlt	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
  }
#endif
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008b96:	619a      	str	r2, [r3, #24]
 8008b98:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8008b9c:	611a      	str	r2, [r3, #16]
} 
 8008b9e:	4770      	bx	lr
 8008ba0:	40022000 	.word	0x40022000
 8008ba4:	2000198c 	.word	0x2000198c

08008ba8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008ba8:	4a07      	ldr	r2, [pc, #28]	; (8008bc8 <FLASH_Program_Fast+0x20>)
 8008baa:	6953      	ldr	r3, [r2, #20]
 8008bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bb0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bb2:	b672      	cpsid	i
}
 8008bb4:	2300      	movs	r3, #0
  __disable_irq();
  
  /* Program the double word of the row */
  do
  {
    *dest_addr++ = *src_addr++;
 8008bb6:	58ca      	ldr	r2, [r1, r3]
 8008bb8:	50c2      	str	r2, [r0, r3]
  } while (--row_index != 0);
 8008bba:	3304      	adds	r3, #4
 8008bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc0:	d1f9      	bne.n	8008bb6 <FLASH_Program_Fast+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8008bc2:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40022000 	.word	0x40022000

08008bcc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_FLASH_Unlock+0x1c>)
 8008bce:	695a      	ldr	r2, [r3, #20]
 8008bd0:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008bd2:	bfbf      	itttt	lt
 8008bd4:	4a05      	ldrlt	r2, [pc, #20]	; (8008bec <HAL_FLASH_Unlock+0x20>)
 8008bd6:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008bd8:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8008bdc:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008bde:	bfba      	itte	lt
 8008be0:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8008be2:	0fc0      	lsrlt	r0, r0, #31
 8008be4:	2000      	movge	r0, #0
}
 8008be6:	4770      	bx	lr
 8008be8:	40022000 	.word	0x40022000
 8008bec:	45670123 	.word	0x45670123

08008bf0 <FLASH_WaitForLastOperation>:
{
 8008bf0:	b570      	push	{r4, r5, r6, lr}
 8008bf2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008bf4:	f7ff feb8 	bl	8008968 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008bf8:	4c1e      	ldr	r4, [pc, #120]	; (8008c74 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8008bfa:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	03d8      	lsls	r0, r3, #15
 8008c00:	d426      	bmi.n	8008c50 <FLASH_WaitForLastOperation+0x60>
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	0799      	lsls	r1, r3, #30
 8008c06:	d41f      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	071a      	lsls	r2, r3, #28
 8008c0c:	d41c      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008c0e:	6923      	ldr	r3, [r4, #16]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008c10:	06db      	lsls	r3, r3, #27
 8008c12:	d419      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	069e      	lsls	r6, r3, #26
 8008c18:	d416      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008c1a:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008c1c:	065d      	lsls	r5, r3, #25
 8008c1e:	d413      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	0618      	lsls	r0, r3, #24
 8008c24:	d410      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008c26:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008c28:	05d9      	lsls	r1, r3, #23
 8008c2a:	d40d      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008c2c:	6923      	ldr	r3, [r4, #16]
 8008c2e:	059a      	lsls	r2, r3, #22
 8008c30:	d40a      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008c32:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008c34:	045b      	lsls	r3, r3, #17
 8008c36:	d407      	bmi.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008c38:	490e      	ldr	r1, [pc, #56]	; (8008c74 <FLASH_WaitForLastOperation+0x84>)
 8008c3a:	690a      	ldr	r2, [r1, #16]
 8008c3c:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8008c40:	d102      	bne.n	8008c48 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD)))
 8008c42:	698b      	ldr	r3, [r1, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da0c      	bge.n	8008c62 <FLASH_WaitForLastOperation+0x72>
    FLASH_SetErrorCode();
 8008c48:	f7ff ff44 	bl	8008ad4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008c4c:	2001      	movs	r0, #1
}
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8008c50:	1c6b      	adds	r3, r5, #1
 8008c52:	d0d3      	beq.n	8008bfc <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8008c54:	f7ff fe88 	bl	8008968 <HAL_GetTick>
 8008c58:	1b80      	subs	r0, r0, r6
 8008c5a:	42a8      	cmp	r0, r5
 8008c5c:	d3ce      	bcc.n	8008bfc <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8008c5e:	2003      	movs	r0, #3
 8008c60:	e7f5      	b.n	8008c4e <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008c62:	6908      	ldr	r0, [r1, #16]
 8008c64:	f010 0001 	ands.w	r0, r0, #1
 8008c68:	d0f1      	beq.n	8008c4e <FLASH_WaitForLastOperation+0x5e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	610b      	str	r3, [r1, #16]
  return HAL_OK;  
 8008c6e:	4610      	mov	r0, r2
 8008c70:	e7ed      	b.n	8008c4e <FLASH_WaitForLastOperation+0x5e>
 8008c72:	bf00      	nop
 8008c74:	40022000 	.word	0x40022000

08008c78 <HAL_FLASH_Program>:
{
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8008c7c:	4c24      	ldr	r4, [pc, #144]	; (8008d10 <HAL_FLASH_Program+0x98>)
{
 8008c7e:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8008c80:	7823      	ldrb	r3, [r4, #0]
 8008c82:	2b01      	cmp	r3, #1
{
 8008c84:	4606      	mov	r6, r0
 8008c86:	460f      	mov	r7, r1
 8008c88:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8008c8a:	d03f      	beq.n	8008d0c <HAL_FLASH_Program+0x94>
 8008c8c:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c8e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008c92:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008c94:	f7ff ffac 	bl	8008bf0 <FLASH_WaitForLastOperation>
 8008c98:	4605      	mov	r5, r0
  if(status == HAL_OK)
 8008c9a:	bb20      	cbnz	r0, 8008ce6 <HAL_FLASH_Program+0x6e>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008c9c:	4d1d      	ldr	r5, [pc, #116]	; (8008d14 <HAL_FLASH_Program+0x9c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008c9e:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008ca0:	682a      	ldr	r2, [r5, #0]
 8008ca2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008ca6:	bf17      	itett	ne
 8008ca8:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008caa:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008cac:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8008cb0:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008cb2:	bf1c      	itt	ne
 8008cb4:	2302      	movne	r3, #2
 8008cb6:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008cb8:	b9d6      	cbnz	r6, 8008cf0 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008cba:	696b      	ldr	r3, [r5, #20]
 8008cbc:	f043 0301 	orr.w	r3, r3, #1
 8008cc0:	616b      	str	r3, [r5, #20]
      prog_bit = FLASH_CR_PG;
 8008cc2:	2601      	movs	r6, #1
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008cc4:	f8c7 8000 	str.w	r8, [r7]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008cc8:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008ccc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cd0:	f7ff ff8e 	bl	8008bf0 <FLASH_WaitForLastOperation>
 8008cd4:	4605      	mov	r5, r0
    if (prog_bit != 0)
 8008cd6:	b126      	cbz	r6, 8008ce2 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008cd8:	4a0e      	ldr	r2, [pc, #56]	; (8008d14 <HAL_FLASH_Program+0x9c>)
 8008cda:	6953      	ldr	r3, [r2, #20]
 8008cdc:	ea23 0606 	bic.w	r6, r3, r6
 8008ce0:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 8008ce2:	f000 f851 	bl	8008d88 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	7023      	strb	r3, [r4, #0]
}
 8008cea:	4628      	mov	r0, r5
 8008cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008cf0:	1e73      	subs	r3, r6, #1
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d901      	bls.n	8008cfa <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	e7e8      	b.n	8008ccc <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff ff53 	bl	8008ba8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008d02:	2e02      	cmp	r6, #2
 8008d04:	d1f7      	bne.n	8008cf6 <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8008d06:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8008d0a:	e7df      	b.n	8008ccc <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8008d0c:	2502      	movs	r5, #2
 8008d0e:	e7ec      	b.n	8008cea <HAL_FLASH_Program+0x72>
 8008d10:	2000198c 	.word	0x2000198c
 8008d14:	40022000 	.word	0x40022000

08008d18 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != RESET)
 8008d18:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <FLASH_MassErase+0x28>)
 8008d1a:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008d1e:	bf1e      	ittt	ne
 8008d20:	695a      	ldrne	r2, [r3, #20]
 8008d22:	f042 0204 	orrne.w	r2, r2, #4
 8008d26:	615a      	strne	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != RESET)
 8008d28:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8008d2a:	bf42      	ittt	mi
 8008d2c:	695a      	ldrmi	r2, [r3, #20]
 8008d2e:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 8008d32:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008d34:	4a02      	ldr	r2, [pc, #8]	; (8008d40 <FLASH_MassErase+0x28>)
 8008d36:	6953      	ldr	r3, [r2, #20]
 8008d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d3c:	6153      	str	r3, [r2, #20]
}
 8008d3e:	4770      	bx	lr
 8008d40:	40022000 	.word	0x40022000

08008d44 <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != RESET)
 8008d44:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <FLASH_PageErase+0x40>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008d46:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != RESET)
 8008d48:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008d4c:	bf14      	ite	ne
 8008d4e:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008d52:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008d56:	615a      	str	r2, [r3, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (Page << POSITION_VAL(FLASH_CR_PNB)));
 8008d58:	695a      	ldr	r2, [r3, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d5a:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8008d5e:	fa91 f1a1 	rbit	r1, r1
 8008d62:	fab1 f181 	clz	r1, r1
 8008d66:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8008d6a:	4088      	lsls	r0, r1
 8008d6c:	4310      	orrs	r0, r2
 8008d6e:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	f042 0202 	orr.w	r2, r2, #2
 8008d76:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008d7e:	615a      	str	r2, [r3, #20]
}
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40022000 	.word	0x40022000

08008d88 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8008d88:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <FLASH_FlushCaches+0x54>)
 8008d8a:	7f1a      	ldrb	r2, [r3, #28]
 8008d8c:	2a01      	cmp	r2, #1
 8008d8e:	d002      	beq.n	8008d96 <FLASH_FlushCaches+0xe>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8008d90:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8008d92:	2a03      	cmp	r2, #3
 8008d94:	d10c      	bne.n	8008db0 <FLASH_FlushCaches+0x28>
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008d96:	4a12      	ldr	r2, [pc, #72]	; (8008de0 <FLASH_FlushCaches+0x58>)
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008d9e:	6011      	str	r1, [r2, #0]
 8008da0:	6811      	ldr	r1, [r2, #0]
 8008da2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008da6:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008da8:	6811      	ldr	r1, [r2, #0]
 8008daa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008dae:	6011      	str	r1, [r2, #0]
  }
  
  /* Flush data cache */
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8008db0:	7f1a      	ldrb	r2, [r3, #28]
 8008db2:	2a02      	cmp	r2, #2
 8008db4:	d002      	beq.n	8008dbc <FLASH_FlushCaches+0x34>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8008db6:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8008db8:	2a03      	cmp	r2, #3
 8008dba:	d10c      	bne.n	8008dd6 <FLASH_FlushCaches+0x4e>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008dbc:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <FLASH_FlushCaches+0x58>)
 8008dbe:	6811      	ldr	r1, [r2, #0]
 8008dc0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008dc4:	6011      	str	r1, [r2, #0]
 8008dc6:	6811      	ldr	r1, [r2, #0]
 8008dc8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8008dcc:	6011      	str	r1, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dce:	6811      	ldr	r1, [r2, #0]
 8008dd0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008dd4:	6011      	str	r1, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	771a      	strb	r2, [r3, #28]
}
 8008dda:	4770      	bx	lr
 8008ddc:	2000198c 	.word	0x2000198c
 8008de0:	40022000 	.word	0x40022000

08008de4 <HAL_FLASHEx_Erase>:
{
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8008de8:	4d35      	ldr	r5, [pc, #212]	; (8008ec0 <HAL_FLASHEx_Erase+0xdc>)
 8008dea:	782b      	ldrb	r3, [r5, #0]
 8008dec:	2b01      	cmp	r3, #1
{
 8008dee:	4606      	mov	r6, r0
 8008df0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8008df2:	d062      	beq.n	8008eba <HAL_FLASHEx_Erase+0xd6>
 8008df4:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008df6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008dfa:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008dfc:	f7ff fef8 	bl	8008bf0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8008e00:	4604      	mov	r4, r0
 8008e02:	bb40      	cbnz	r0, 8008e56 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008e04:	4b2f      	ldr	r3, [pc, #188]	; (8008ec4 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008e06:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008e0e:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008e10:	d026      	beq.n	8008e60 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008e12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e16:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	0551      	lsls	r1, r2, #21
 8008e1c:	d506      	bpl.n	8008e2c <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e24:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8008e26:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008e28:	772b      	strb	r3, [r5, #28]
 8008e2a:	e000      	b.n	8008e2e <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8008e2c:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008e2e:	6833      	ldr	r3, [r6, #0]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d11f      	bne.n	8008e74 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8008e34:	6870      	ldr	r0, [r6, #4]
 8008e36:	f7ff ff6f 	bl	8008d18 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008e3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008e3e:	f7ff fed7 	bl	8008bf0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008e42:	4a20      	ldr	r2, [pc, #128]	; (8008ec4 <HAL_FLASHEx_Erase+0xe0>)
 8008e44:	6953      	ldr	r3, [r2, #20]
 8008e46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e4a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008e4e:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8008e50:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8008e52:	f7ff ff99 	bl	8008d88 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008e56:	2300      	movs	r3, #0
 8008e58:	702b      	strb	r3, [r5, #0]
}
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008e60:	0552      	lsls	r2, r2, #21
 8008e62:	d505      	bpl.n	8008e70 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6a:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e7db      	b.n	8008e28 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008e70:	7728      	strb	r0, [r5, #28]
 8008e72:	e7dc      	b.n	8008e2e <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFF;
 8008e74:	f04f 33ff 	mov.w	r3, #4294967295
 8008e78:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008e7c:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008e7e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008ec4 <HAL_FLASHEx_Erase+0xe0>
 8008e82:	f8df a044 	ldr.w	sl, [pc, #68]	; 8008ec8 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008e86:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	42bb      	cmp	r3, r7
 8008e8e:	d9e0      	bls.n	8008e52 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8008e90:	6871      	ldr	r1, [r6, #4]
 8008e92:	4638      	mov	r0, r7
 8008e94:	f7ff ff56 	bl	8008d44 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008e98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008e9c:	f7ff fea8 	bl	8008bf0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008ea0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008ea4:	ea03 030a 	and.w	r3, r3, sl
 8008ea8:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8008eac:	b118      	cbz	r0, 8008eb6 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8008eae:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008eb2:	4604      	mov	r4, r0
          break;
 8008eb4:	e7cd      	b.n	8008e52 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008eb6:	3701      	adds	r7, #1
 8008eb8:	e7e5      	b.n	8008e86 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 8008eba:	2402      	movs	r4, #2
 8008ebc:	e7cd      	b.n	8008e5a <HAL_FLASHEx_Erase+0x76>
 8008ebe:	bf00      	nop
 8008ec0:	2000198c 	.word	0x2000198c
 8008ec4:	40022000 	.word	0x40022000
 8008ec8:	fffff805 	.word	0xfffff805

08008ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ed0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009084 <HAL_GPIO_Init+0x1b8>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008ed4:	4d69      	ldr	r5, [pc, #420]	; (800907c <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00;
 8008ed6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8008ed8:	680a      	ldr	r2, [r1, #0]
 8008eda:	fa32 f403 	lsrs.w	r4, r2, r3
 8008ede:	d102      	bne.n	8008ee6 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8008ee0:	b003      	add	sp, #12
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008ee6:	2601      	movs	r6, #1
 8008ee8:	409e      	lsls	r6, r3
    if(iocurrent)
 8008eea:	4032      	ands	r2, r6
 8008eec:	f000 80b7 	beq.w	800905e <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ef0:	684c      	ldr	r4, [r1, #4]
 8008ef2:	f024 0e10 	bic.w	lr, r4, #16
 8008ef6:	f1be 0f02 	cmp.w	lr, #2
 8008efa:	d116      	bne.n	8008f2a <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8008efc:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8008f00:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008f04:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8008f08:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008f0c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8008f10:	f04f 0c0f 	mov.w	ip, #15
 8008f14:	fa0c fc0a 	lsl.w	ip, ip, sl
 8008f18:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008f1c:	690f      	ldr	r7, [r1, #16]
 8008f1e:	fa07 f70a 	lsl.w	r7, r7, sl
 8008f22:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8008f26:	f8c9 7020 	str.w	r7, [r9, #32]
      temp = GPIOx->MODER;
 8008f2a:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8008f2e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008f32:	f04f 0b03 	mov.w	fp, #3
 8008f36:	fa0b f70c 	lsl.w	r7, fp, ip
 8008f3a:	ea2a 0b07 	bic.w	fp, sl, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008f3e:	f004 0a03 	and.w	sl, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8008f42:	ea6f 0907 	mvn.w	r9, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f46:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008f4a:	fa0a f70c 	lsl.w	r7, sl, ip
 8008f4e:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f52:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8008f56:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f58:	d811      	bhi.n	8008f7e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8008f5a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8008f5c:	ea09 0e07 	and.w	lr, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8008f60:	68cf      	ldr	r7, [r1, #12]
 8008f62:	fa07 f70c 	lsl.w	r7, r7, ip
 8008f66:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8008f6a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8008f6c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f6e:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008f72:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8008f76:	409f      	lsls	r7, r3
 8008f78:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8008f7c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008f7e:	f1ba 0f03 	cmp.w	sl, #3
 8008f82:	d107      	bne.n	8008f94 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8008f84:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008f86:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8008f8a:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8008f8e:	409f      	lsls	r7, r3
 8008f90:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8008f92:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8008f94:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8008f96:	ea09 0906 	and.w	r9, r9, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008f9a:	688e      	ldr	r6, [r1, #8]
 8008f9c:	fa06 f60c 	lsl.w	r6, r6, ip
 8008fa0:	ea46 0609 	orr.w	r6, r6, r9
      GPIOx->PUPDR = temp;
 8008fa4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008fa6:	00e6      	lsls	r6, r4, #3
 8008fa8:	d559      	bpl.n	800905e <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008faa:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8008fae:	f046 0601 	orr.w	r6, r6, #1
 8008fb2:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8008fb6:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8008fba:	f023 0703 	bic.w	r7, r3, #3
 8008fbe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8008fc2:	f006 0601 	and.w	r6, r6, #1
 8008fc6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8008fca:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008fcc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fd0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8008fd2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008fd4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8008fd8:	f04f 0c0f 	mov.w	ip, #15
 8008fdc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8008fe0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008fe4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8008fe8:	d03b      	beq.n	8009062 <HAL_GPIO_Init+0x196>
 8008fea:	4e25      	ldr	r6, [pc, #148]	; (8009080 <HAL_GPIO_Init+0x1b4>)
 8008fec:	42b0      	cmp	r0, r6
 8008fee:	d03a      	beq.n	8009066 <HAL_GPIO_Init+0x19a>
 8008ff0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008ff4:	42b0      	cmp	r0, r6
 8008ff6:	d038      	beq.n	800906a <HAL_GPIO_Init+0x19e>
 8008ff8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008ffc:	42b0      	cmp	r0, r6
 8008ffe:	d036      	beq.n	800906e <HAL_GPIO_Init+0x1a2>
 8009000:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009004:	42b0      	cmp	r0, r6
 8009006:	d034      	beq.n	8009072 <HAL_GPIO_Init+0x1a6>
 8009008:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800900c:	42b0      	cmp	r0, r6
 800900e:	d032      	beq.n	8009076 <HAL_GPIO_Init+0x1aa>
 8009010:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009014:	42b0      	cmp	r0, r6
 8009016:	bf0c      	ite	eq
 8009018:	2606      	moveq	r6, #6
 800901a:	2607      	movne	r6, #7
 800901c:	fa06 f60e 	lsl.w	r6, r6, lr
 8009020:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8009024:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8009026:	682e      	ldr	r6, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8009028:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800902a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800902e:	bf0c      	ite	eq
 8009030:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8009032:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8009034:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8009036:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009038:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800903c:	bf0c      	ite	eq
 800903e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8009040:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8009042:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8009044:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009046:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800904a:	bf0c      	ite	eq
 800904c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800904e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8009050:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8009052:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009054:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8009056:	bf54      	ite	pl
 8009058:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800905a:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800905c:	60ee      	str	r6, [r5, #12]
    position++;
 800905e:	3301      	adds	r3, #1
 8009060:	e73a      	b.n	8008ed8 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8009062:	2600      	movs	r6, #0
 8009064:	e7da      	b.n	800901c <HAL_GPIO_Init+0x150>
 8009066:	2601      	movs	r6, #1
 8009068:	e7d8      	b.n	800901c <HAL_GPIO_Init+0x150>
 800906a:	2602      	movs	r6, #2
 800906c:	e7d6      	b.n	800901c <HAL_GPIO_Init+0x150>
 800906e:	2603      	movs	r6, #3
 8009070:	e7d4      	b.n	800901c <HAL_GPIO_Init+0x150>
 8009072:	2604      	movs	r6, #4
 8009074:	e7d2      	b.n	800901c <HAL_GPIO_Init+0x150>
 8009076:	2605      	movs	r6, #5
 8009078:	e7d0      	b.n	800901c <HAL_GPIO_Init+0x150>
 800907a:	bf00      	nop
 800907c:	40010400 	.word	0x40010400
 8009080:	48000400 	.word	0x48000400
 8009084:	40021000 	.word	0x40021000

08009088 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009088:	6903      	ldr	r3, [r0, #16]
 800908a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800908c:	bf14      	ite	ne
 800908e:	2001      	movne	r0, #1
 8009090:	2000      	moveq	r0, #0
 8009092:	4770      	bx	lr

08009094 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009094:	b10a      	cbz	r2, 800909a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009096:	6181      	str	r1, [r0, #24]
 8009098:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800909a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800909c:	4770      	bx	lr

0800909e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800909e:	6943      	ldr	r3, [r0, #20]
 80090a0:	4059      	eors	r1, r3
 80090a2:	6141      	str	r1, [r0, #20]
}
 80090a4:	4770      	bx	lr
	...

080090a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090a8:	4a04      	ldr	r2, [pc, #16]	; (80090bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80090aa:	6951      	ldr	r1, [r2, #20]
 80090ac:	4201      	tst	r1, r0
{
 80090ae:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090b0:	d002      	beq.n	80090b8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090b2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090b4:	f7fb f8cc 	bl	8004250 <HAL_GPIO_EXTI_Callback>
  }
}
 80090b8:	bd08      	pop	{r3, pc}
 80090ba:	bf00      	nop
 80090bc:	40010400 	.word	0x40010400

080090c0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80090c0:	6803      	ldr	r3, [r0, #0]
 80090c2:	699a      	ldr	r2, [r3, #24]
 80090c4:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80090c6:	bf44      	itt	mi
 80090c8:	2200      	movmi	r2, #0
 80090ca:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090d0:	bf5e      	ittt	pl
 80090d2:	699a      	ldrpl	r2, [r3, #24]
 80090d4:	f042 0201 	orrpl.w	r2, r2, #1
 80090d8:	619a      	strpl	r2, [r3, #24]
  }
}
 80090da:	4770      	bx	lr

080090dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80090dc:	b530      	push	{r4, r5, lr}
 80090de:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80090e0:	6804      	ldr	r4, [r0, #0]
 80090e2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80090e6:	431a      	orrs	r2, r3
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <I2C_TransferConfig+0x24>)
 80090ea:	6860      	ldr	r0, [r4, #4]
 80090ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80090f0:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 80090f4:	430a      	orrs	r2, r1
 80090f6:	ea20 0003 	bic.w	r0, r0, r3
 80090fa:	4302      	orrs	r2, r0
 80090fc:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80090fe:	bd30      	pop	{r4, r5, pc}
 8009100:	03ff63ff 	.word	0x03ff63ff

08009104 <I2C_WaitOnFlagUntilTimeout>:
{
 8009104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	9f06      	ldr	r7, [sp, #24]
 800910a:	4604      	mov	r4, r0
 800910c:	4688      	mov	r8, r1
 800910e:	4616      	mov	r6, r2
 8009110:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	6993      	ldr	r3, [r2, #24]
 8009116:	ea38 0303 	bics.w	r3, r8, r3
 800911a:	bf0c      	ite	eq
 800911c:	2301      	moveq	r3, #1
 800911e:	2300      	movne	r3, #0
 8009120:	42b3      	cmp	r3, r6
 8009122:	d001      	beq.n	8009128 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8009124:	2000      	movs	r0, #0
 8009126:	e00b      	b.n	8009140 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8009128:	1c6b      	adds	r3, r5, #1
 800912a:	d0f3      	beq.n	8009114 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800912c:	b955      	cbnz	r5, 8009144 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 800912e:	2320      	movs	r3, #32
 8009130:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009134:	2300      	movs	r3, #0
 8009136:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800913a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800913e:	2003      	movs	r0, #3
}
 8009140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009144:	f7ff fc10 	bl	8008968 <HAL_GetTick>
 8009148:	1bc0      	subs	r0, r0, r7
 800914a:	42a8      	cmp	r0, r5
 800914c:	d9e1      	bls.n	8009112 <I2C_WaitOnFlagUntilTimeout+0xe>
 800914e:	e7ee      	b.n	800912e <I2C_WaitOnFlagUntilTimeout+0x2a>

08009150 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009150:	6803      	ldr	r3, [r0, #0]
{
 8009152:	b570      	push	{r4, r5, r6, lr}
 8009154:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009156:	6998      	ldr	r0, [r3, #24]
 8009158:	f010 0010 	ands.w	r0, r0, #16
{
 800915c:	460d      	mov	r5, r1
 800915e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009160:	d112      	bne.n	8009188 <I2C_IsAcknowledgeFailed+0x38>
}
 8009162:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8009164:	1c69      	adds	r1, r5, #1
 8009166:	d010      	beq.n	800918a <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009168:	b125      	cbz	r5, 8009174 <I2C_IsAcknowledgeFailed+0x24>
 800916a:	f7ff fbfd 	bl	8008968 <HAL_GetTick>
 800916e:	1b80      	subs	r0, r0, r6
 8009170:	4285      	cmp	r5, r0
 8009172:	d209      	bcs.n	8009188 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8009174:	2320      	movs	r3, #32
 8009176:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800917a:	2300      	movs	r3, #0
 800917c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8009180:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8009184:	2003      	movs	r0, #3
 8009186:	e7ec      	b.n	8009162 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	0692      	lsls	r2, r2, #26
 800918e:	d5e9      	bpl.n	8009164 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009190:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009192:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009194:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8009196:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009198:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800919a:	f7ff ff91 	bl	80090c0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	6853      	ldr	r3, [r2, #4]
 80091a2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80091a6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80091aa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80091ae:	f023 0301 	bic.w	r3, r3, #1
 80091b2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80091b4:	2304      	movs	r3, #4
 80091b6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091b8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80091ba:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80091be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 80091c6:	2001      	movs	r0, #1
 80091c8:	e7cb      	b.n	8009162 <I2C_IsAcknowledgeFailed+0x12>

080091ca <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80091ca:	b570      	push	{r4, r5, r6, lr}
 80091cc:	4604      	mov	r4, r0
 80091ce:	460d      	mov	r5, r1
 80091d0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	075b      	lsls	r3, r3, #29
 80091d8:	d40e      	bmi.n	80091f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80091da:	4632      	mov	r2, r6
 80091dc:	4629      	mov	r1, r5
 80091de:	4620      	mov	r0, r4
 80091e0:	f7ff ffb6 	bl	8009150 <I2C_IsAcknowledgeFailed>
 80091e4:	b9f0      	cbnz	r0, 8009224 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	0691      	lsls	r1, r2, #26
 80091ec:	d51c      	bpl.n	8009228 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	0752      	lsls	r2, r2, #29
 80091f2:	d503      	bpl.n	80091fc <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80091f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80091f6:	b10a      	cbz	r2, 80091fc <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80091f8:	2000      	movs	r0, #0
}
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091fc:	2120      	movs	r1, #32
 80091fe:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009206:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800920a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800920e:	f022 0201 	bic.w	r2, r2, #1
 8009212:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009214:	2300      	movs	r3, #0
 8009216:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009218:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800921c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8009224:	2001      	movs	r0, #1
 8009226:	e7e8      	b.n	80091fa <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009228:	b95d      	cbnz	r5, 8009242 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800922a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800922c:	f043 0320 	orr.w	r3, r3, #32
 8009230:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009232:	2320      	movs	r3, #32
 8009234:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8009238:	2300      	movs	r3, #0
 800923a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 800923e:	2003      	movs	r0, #3
 8009240:	e7db      	b.n	80091fa <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009242:	f7ff fb91 	bl	8008968 <HAL_GetTick>
 8009246:	1b80      	subs	r0, r0, r6
 8009248:	42a8      	cmp	r0, r5
 800924a:	d9c2      	bls.n	80091d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800924c:	e7ed      	b.n	800922a <I2C_WaitOnRXNEFlagUntilTimeout+0x60>

0800924e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800924e:	b570      	push	{r4, r5, r6, lr}
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	079b      	lsls	r3, r3, #30
 800925c:	d501      	bpl.n	8009262 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800925e:	2000      	movs	r0, #0
 8009260:	e015      	b.n	800928e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009262:	4632      	mov	r2, r6
 8009264:	4629      	mov	r1, r5
 8009266:	4620      	mov	r0, r4
 8009268:	f7ff ff72 	bl	8009150 <I2C_IsAcknowledgeFailed>
 800926c:	b9b0      	cbnz	r0, 800929c <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 800926e:	1c6a      	adds	r2, r5, #1
 8009270:	d0f1      	beq.n	8009256 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009272:	b96d      	cbnz	r5, 8009290 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009274:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009276:	f043 0320 	orr.w	r3, r3, #32
 800927a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800927c:	2320      	movs	r3, #32
 800927e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009282:	2300      	movs	r3, #0
 8009284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8009288:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800928c:	2003      	movs	r0, #3
}
 800928e:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009290:	f7ff fb6a 	bl	8008968 <HAL_GetTick>
 8009294:	1b80      	subs	r0, r0, r6
 8009296:	42a8      	cmp	r0, r5
 8009298:	d9dd      	bls.n	8009256 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 800929a:	e7eb      	b.n	8009274 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 800929c:	2001      	movs	r0, #1
 800929e:	e7f6      	b.n	800928e <I2C_WaitOnTXISFlagUntilTimeout+0x40>

080092a0 <I2C_RequestMemoryWrite>:
{
 80092a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092a4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80092a8:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80092aa:	4b19      	ldr	r3, [pc, #100]	; (8009310 <I2C_RequestMemoryWrite+0x70>)
 80092ac:	9300      	str	r3, [sp, #0]
{
 80092ae:	4604      	mov	r4, r0
 80092b0:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80092b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092b6:	b2f2      	uxtb	r2, r6
 80092b8:	f7ff ff10 	bl	80090dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092bc:	4642      	mov	r2, r8
 80092be:	4639      	mov	r1, r7
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7ff ffc4 	bl	800924e <I2C_WaitOnTXISFlagUntilTimeout>
 80092c6:	b140      	cbz	r0, 80092da <I2C_RequestMemoryWrite+0x3a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80092ca:	2b04      	cmp	r3, #4
 80092cc:	d003      	beq.n	80092d6 <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 80092ce:	2003      	movs	r0, #3
}
 80092d0:	b002      	add	sp, #8
 80092d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80092d6:	2001      	movs	r0, #1
 80092d8:	e7fa      	b.n	80092d0 <I2C_RequestMemoryWrite+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092da:	2e01      	cmp	r6, #1
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	d10c      	bne.n	80092fa <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80092e0:	b2ed      	uxtb	r5, r5
 80092e2:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8cd 8000 	str.w	r8, [sp]
 80092ea:	463b      	mov	r3, r7
 80092ec:	2180      	movs	r1, #128	; 0x80
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff ff08 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	d0eb      	beq.n	80092d0 <I2C_RequestMemoryWrite+0x30>
 80092f8:	e7e9      	b.n	80092ce <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80092fa:	0a2a      	lsrs	r2, r5, #8
 80092fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092fe:	4639      	mov	r1, r7
 8009300:	4642      	mov	r2, r8
 8009302:	4620      	mov	r0, r4
 8009304:	f7ff ffa3 	bl	800924e <I2C_WaitOnTXISFlagUntilTimeout>
 8009308:	2800      	cmp	r0, #0
 800930a:	d1dd      	bne.n	80092c8 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	e7e7      	b.n	80092e0 <I2C_RequestMemoryWrite+0x40>
 8009310:	80002000 	.word	0x80002000

08009314 <I2C_RequestMemoryRead>:
{
 8009314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009318:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 800931c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800931e:	4b19      	ldr	r3, [pc, #100]	; (8009384 <I2C_RequestMemoryRead+0x70>)
 8009320:	9300      	str	r3, [sp, #0]
{
 8009322:	4604      	mov	r4, r0
 8009324:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009326:	2300      	movs	r3, #0
 8009328:	b2f2      	uxtb	r2, r6
 800932a:	f7ff fed7 	bl	80090dc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800932e:	4642      	mov	r2, r8
 8009330:	4639      	mov	r1, r7
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff ff8b 	bl	800924e <I2C_WaitOnTXISFlagUntilTimeout>
 8009338:	b140      	cbz	r0, 800934c <I2C_RequestMemoryRead+0x38>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800933a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800933c:	2b04      	cmp	r3, #4
 800933e:	d003      	beq.n	8009348 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8009340:	2003      	movs	r0, #3
}
 8009342:	b002      	add	sp, #8
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8009348:	2001      	movs	r0, #1
 800934a:	e7fa      	b.n	8009342 <I2C_RequestMemoryRead+0x2e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800934c:	2e01      	cmp	r6, #1
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	d10c      	bne.n	800936c <I2C_RequestMemoryRead+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009352:	b2ed      	uxtb	r5, r5
 8009354:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009356:	2200      	movs	r2, #0
 8009358:	f8cd 8000 	str.w	r8, [sp]
 800935c:	463b      	mov	r3, r7
 800935e:	2140      	movs	r1, #64	; 0x40
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff fecf 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8009366:	2800      	cmp	r0, #0
 8009368:	d0eb      	beq.n	8009342 <I2C_RequestMemoryRead+0x2e>
 800936a:	e7e9      	b.n	8009340 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800936c:	0a2a      	lsrs	r2, r5, #8
 800936e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009370:	4639      	mov	r1, r7
 8009372:	4642      	mov	r2, r8
 8009374:	4620      	mov	r0, r4
 8009376:	f7ff ff6a 	bl	800924e <I2C_WaitOnTXISFlagUntilTimeout>
 800937a:	2800      	cmp	r0, #0
 800937c:	d1dd      	bne.n	800933a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	e7e7      	b.n	8009352 <I2C_RequestMemoryRead+0x3e>
 8009382:	bf00      	nop
 8009384:	80002000 	.word	0x80002000

08009388 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	4604      	mov	r4, r0
 800938c:	460d      	mov	r5, r1
 800938e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	069b      	lsls	r3, r3, #26
 8009396:	d501      	bpl.n	800939c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8009398:	2000      	movs	r0, #0
 800939a:	e013      	b.n	80093c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800939c:	4632      	mov	r2, r6
 800939e:	4629      	mov	r1, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f7ff fed5 	bl	8009150 <I2C_IsAcknowledgeFailed>
 80093a6:	b9a0      	cbnz	r0, 80093d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093a8:	b96d      	cbnz	r5, 80093c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80093ac:	f043 0320 	orr.w	r3, r3, #32
 80093b0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093b2:	2320      	movs	r3, #32
 80093b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b8:	2300      	movs	r3, #0
 80093ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80093be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80093c2:	2003      	movs	r0, #3
}
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093c6:	f7ff facf 	bl	8008968 <HAL_GetTick>
 80093ca:	1b80      	subs	r0, r0, r6
 80093cc:	42a8      	cmp	r0, r5
 80093ce:	d9df      	bls.n	8009390 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 80093d0:	e7eb      	b.n	80093aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80093d2:	2001      	movs	r0, #1
 80093d4:	e7f6      	b.n	80093c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

080093d6 <HAL_I2C_MspInit>:
}
 80093d6:	4770      	bx	lr

080093d8 <HAL_I2C_Init>:
{
 80093d8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80093da:	4604      	mov	r4, r0
 80093dc:	2800      	cmp	r0, #0
 80093de:	d04a      	beq.n	8009476 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80093e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80093e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80093e8:	b91b      	cbnz	r3, 80093f2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80093ea:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80093ee:	f7ff fff2 	bl	80093d6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80093f2:	2324      	movs	r3, #36	; 0x24
 80093f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	f022 0201 	bic.w	r2, r2, #1
 8009400:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009402:	6862      	ldr	r2, [r4, #4]
 8009404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009408:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009410:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009412:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009416:	2901      	cmp	r1, #1
 8009418:	d124      	bne.n	8009464 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800941a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800941e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800942a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800942c:	68da      	ldr	r2, [r3, #12]
 800942e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009432:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009434:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009438:	430a      	orrs	r2, r1
 800943a:	69a1      	ldr	r1, [r4, #24]
 800943c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009440:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009442:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8009446:	430a      	orrs	r2, r1
 8009448:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	f042 0201 	orr.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009452:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8009454:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009456:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009458:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800945c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800945e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8009462:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009464:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009468:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800946a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800946c:	bf04      	itt	eq
 800946e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8009472:	605a      	streq	r2, [r3, #4]
 8009474:	e7d4      	b.n	8009420 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8009476:	2001      	movs	r0, #1
 8009478:	e7f3      	b.n	8009462 <HAL_I2C_Init+0x8a>

0800947a <HAL_I2C_MspDeInit>:
 800947a:	4770      	bx	lr

0800947c <HAL_I2C_DeInit>:
{
 800947c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800947e:	4604      	mov	r4, r0
 8009480:	b198      	cbz	r0, 80094aa <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8009482:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009484:	2324      	movs	r3, #36	; 0x24
 8009486:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800948a:	6813      	ldr	r3, [r2, #0]
 800948c:	f023 0301 	bic.w	r3, r3, #1
 8009490:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8009492:	f7ff fff2 	bl	800947a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009496:	2000      	movs	r0, #0
 8009498:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800949a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800949e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094a2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80094a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80094aa:	2001      	movs	r0, #1
 80094ac:	e7fc      	b.n	80094a8 <HAL_I2C_DeInit+0x2c>
	...

080094b0 <HAL_I2C_Master_Transmit>:
{
 80094b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80094ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80094bc:	2b20      	cmp	r3, #32
{
 80094be:	4604      	mov	r4, r0
 80094c0:	460e      	mov	r6, r1
 80094c2:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80094c4:	f040 808a 	bne.w	80095dc <HAL_I2C_Master_Transmit+0x12c>
    __HAL_LOCK(hi2c);
 80094c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f000 8085 	beq.w	80095dc <HAL_I2C_Master_Transmit+0x12c>
 80094d2:	f04f 0a01 	mov.w	sl, #1
 80094d6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80094da:	f7ff fa45 	bl	8008968 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094de:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80094e0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094e2:	9000      	str	r0, [sp, #0]
 80094e4:	4652      	mov	r2, sl
 80094e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094ea:	4620      	mov	r0, r4
 80094ec:	f7ff fe0a 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d148      	bne.n	8009586 <HAL_I2C_Master_Transmit+0xd6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094f4:	2321      	movs	r3, #33	; 0x21
 80094f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094fa:	2310      	movs	r3, #16
 80094fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009500:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009502:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8009508:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800950c:	b29b      	uxth	r3, r3
 800950e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8009510:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009512:	4b33      	ldr	r3, [pc, #204]	; (80095e0 <HAL_I2C_Master_Transmit+0x130>)
 8009514:	d925      	bls.n	8009562 <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009516:	22ff      	movs	r2, #255	; 0xff
 8009518:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800951a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800951c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009520:	4631      	mov	r1, r6
 8009522:	4620      	mov	r0, r4
 8009524:	f7ff fdda 	bl	80090dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009528:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800952a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800952c:	462a      	mov	r2, r5
 800952e:	4639      	mov	r1, r7
 8009530:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009532:	b9f3      	cbnz	r3, 8009572 <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009534:	f7ff ff28 	bl	8009388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009538:	b9f0      	cbnz	r0, 8009578 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	2120      	movs	r1, #32
 800953e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009546:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800954a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009554:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009558:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800955c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009560:	e00e      	b.n	8009580 <HAL_I2C_Master_Transmit+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 8009562:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009564:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009566:	b292      	uxth	r2, r2
 8009568:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800956a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	e7d6      	b.n	8009520 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009572:	f7ff fe6c 	bl	800924e <I2C_WaitOnTXISFlagUntilTimeout>
 8009576:	b140      	cbz	r0, 800958a <HAL_I2C_Master_Transmit+0xda>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009578:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800957a:	2b04      	cmp	r3, #4
 800957c:	d103      	bne.n	8009586 <HAL_I2C_Master_Transmit+0xd6>
          return HAL_ERROR;
 800957e:	2001      	movs	r0, #1
}
 8009580:	b002      	add	sp, #8
 8009582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 8009586:	2003      	movs	r0, #3
 8009588:	e7fa      	b.n	8009580 <HAL_I2C_Master_Transmit+0xd0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800958a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	6262      	str	r2, [r4, #36]	; 0x24
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8009596:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009598:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800959a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800959c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800959e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80095a0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80095a2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80095a4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	d1be      	bne.n	8009528 <HAL_I2C_Master_Transmit+0x78>
 80095aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0ba      	beq.n	8009528 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095b2:	9500      	str	r5, [sp, #0]
 80095b4:	463b      	mov	r3, r7
 80095b6:	2180      	movs	r1, #128	; 0x80
 80095b8:	4620      	mov	r0, r4
 80095ba:	f7ff fda3 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80095be:	2800      	cmp	r0, #0
 80095c0:	d1e1      	bne.n	8009586 <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2bff      	cmp	r3, #255	; 0xff
 80095c8:	d903      	bls.n	80095d2 <HAL_I2C_Master_Transmit+0x122>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095ca:	22ff      	movs	r2, #255	; 0xff
 80095cc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80095ce:	9000      	str	r0, [sp, #0]
 80095d0:	e7a4      	b.n	800951c <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 80095d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095d4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80095d6:	b292      	uxth	r2, r2
 80095d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80095da:	e7c6      	b.n	800956a <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 80095dc:	2002      	movs	r0, #2
 80095de:	e7cf      	b.n	8009580 <HAL_I2C_Master_Transmit+0xd0>
 80095e0:	80002000 	.word	0x80002000

080095e4 <HAL_I2C_Master_Receive>:
{
 80095e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80095ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80095ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f0:	2b20      	cmp	r3, #32
{
 80095f2:	4604      	mov	r4, r0
 80095f4:	460e      	mov	r6, r1
 80095f6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f8:	f040 808a 	bne.w	8009710 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 80095fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009600:	2b01      	cmp	r3, #1
 8009602:	f000 8085 	beq.w	8009710 <HAL_I2C_Master_Receive+0x12c>
 8009606:	f04f 0a01 	mov.w	sl, #1
 800960a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800960e:	f7ff f9ab 	bl	8008968 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009612:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009614:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009616:	9000      	str	r0, [sp, #0]
 8009618:	4652      	mov	r2, sl
 800961a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800961e:	4620      	mov	r0, r4
 8009620:	f7ff fd70 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8009624:	2800      	cmp	r0, #0
 8009626:	d148      	bne.n	80096ba <HAL_I2C_Master_Receive+0xd6>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009628:	2322      	movs	r3, #34	; 0x22
 800962a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800962e:	2310      	movs	r3, #16
 8009630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009634:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009636:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800963a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800963c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009640:	b29b      	uxth	r3, r3
 8009642:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8009644:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009646:	4b33      	ldr	r3, [pc, #204]	; (8009714 <HAL_I2C_Master_Receive+0x130>)
 8009648:	d925      	bls.n	8009696 <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800964a:	22ff      	movs	r2, #255	; 0xff
 800964c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800964e:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009654:	4631      	mov	r1, r6
 8009656:	4620      	mov	r0, r4
 8009658:	f7ff fd40 	bl	80090dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800965c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800965e:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009660:	462a      	mov	r2, r5
 8009662:	4639      	mov	r1, r7
 8009664:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009666:	b9f3      	cbnz	r3, 80096a6 <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009668:	f7ff fe8e 	bl	8009388 <I2C_WaitOnSTOPFlagUntilTimeout>
 800966c:	b9f0      	cbnz	r0, 80096ac <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	2120      	movs	r1, #32
 8009672:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800967a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800967e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009682:	f022 0201 	bic.w	r2, r2, #1
 8009686:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009688:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800968c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009690:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009694:	e00e      	b.n	80096b4 <HAL_I2C_Master_Receive+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 8009696:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009698:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800969a:	b292      	uxth	r2, r2
 800969c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800969e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	e7d6      	b.n	8009654 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096a6:	f7ff fd90 	bl	80091ca <I2C_WaitOnRXNEFlagUntilTimeout>
 80096aa:	b140      	cbz	r0, 80096be <HAL_I2C_Master_Receive+0xda>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d103      	bne.n	80096ba <HAL_I2C_Master_Receive+0xd6>
          return HAL_ERROR;
 80096b2:	2001      	movs	r0, #1
}
 80096b4:	b002      	add	sp, #8
 80096b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 80096ba:	2003      	movs	r0, #3
 80096bc:	e7fa      	b.n	80096b4 <HAL_I2C_Master_Receive+0xd0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c4:	1c59      	adds	r1, r3, #1
 80096c6:	6261      	str	r1, [r4, #36]	; 0x24
 80096c8:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80096ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80096cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80096ce:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80096d0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80096d2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80096d4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80096d6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80096d8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d1be      	bne.n	800965c <HAL_I2C_Master_Receive+0x78>
 80096de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0ba      	beq.n	800965c <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096e6:	9500      	str	r5, [sp, #0]
 80096e8:	463b      	mov	r3, r7
 80096ea:	2180      	movs	r1, #128	; 0x80
 80096ec:	4620      	mov	r0, r4
 80096ee:	f7ff fd09 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d1e1      	bne.n	80096ba <HAL_I2C_Master_Receive+0xd6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	2bff      	cmp	r3, #255	; 0xff
 80096fc:	d903      	bls.n	8009706 <HAL_I2C_Master_Receive+0x122>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096fe:	22ff      	movs	r2, #255	; 0xff
 8009700:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009702:	9000      	str	r0, [sp, #0]
 8009704:	e7a4      	b.n	8009650 <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8009706:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009708:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800970a:	b292      	uxth	r2, r2
 800970c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800970e:	e7c6      	b.n	800969e <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 8009710:	2002      	movs	r0, #2
 8009712:	e7cf      	b.n	80096b4 <HAL_I2C_Master_Receive+0xd0>
 8009714:	80002400 	.word	0x80002400

08009718 <HAL_I2C_Mem_Write>:
{
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b085      	sub	sp, #20
 800971e:	469b      	mov	fp, r3
 8009720:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009724:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009726:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800972a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800972e:	2b20      	cmp	r3, #32
{
 8009730:	4604      	mov	r4, r0
 8009732:	460f      	mov	r7, r1
 8009734:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009736:	f040 80a5 	bne.w	8009884 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 800973a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800973c:	b91b      	cbnz	r3, 8009746 <HAL_I2C_Mem_Write+0x2e>
      return  HAL_ERROR;
 800973e:	2001      	movs	r0, #1
}
 8009740:	b005      	add	sp, #20
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d0f8      	beq.n	800973e <HAL_I2C_Mem_Write+0x26>
    __HAL_LOCK(hi2c);
 800974c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009750:	2b01      	cmp	r3, #1
 8009752:	f000 8097 	beq.w	8009884 <HAL_I2C_Mem_Write+0x16c>
 8009756:	2501      	movs	r5, #1
 8009758:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800975c:	f7ff f904 	bl	8008968 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009760:	2319      	movs	r3, #25
 8009762:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009764:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009766:	462a      	mov	r2, r5
 8009768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800976c:	4620      	mov	r0, r4
 800976e:	f7ff fcc9 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8009772:	4680      	mov	r8, r0
 8009774:	b9c8      	cbnz	r0, 80097aa <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009776:	2321      	movs	r3, #33	; 0x21
 8009778:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009784:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8009786:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009788:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 800978a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800978c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800978e:	e9cd 9600 	strd	r9, r6, [sp]
 8009792:	465b      	mov	r3, fp
 8009794:	4652      	mov	r2, sl
 8009796:	4639      	mov	r1, r7
 8009798:	4620      	mov	r0, r4
 800979a:	f7ff fd81 	bl	80092a0 <I2C_RequestMemoryWrite>
 800979e:	b130      	cbz	r0, 80097ae <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80097a2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d0c9      	beq.n	800973e <HAL_I2C_Mem_Write+0x26>
          return HAL_TIMEOUT;
 80097aa:	2003      	movs	r0, #3
 80097ac:	e7c8      	b.n	8009740 <HAL_I2C_Mem_Write+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	2bff      	cmp	r3, #255	; 0xff
 80097b4:	d910      	bls.n	80097d8 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097b6:	22ff      	movs	r2, #255	; 0xff
 80097b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097ba:	9000      	str	r0, [sp, #0]
 80097bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097c0:	4639      	mov	r1, r7
 80097c2:	4620      	mov	r0, r4
 80097c4:	f7ff fc8a 	bl	80090dc <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097c8:	4632      	mov	r2, r6
 80097ca:	4649      	mov	r1, r9
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff fd3e 	bl	800924e <I2C_WaitOnTXISFlagUntilTimeout>
 80097d2:	b148      	cbz	r0, 80097e8 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097d6:	e7e6      	b.n	80097a6 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80097d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097da:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80097dc:	b292      	uxth	r2, r2
 80097de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	e7eb      	b.n	80097c0 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80097e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	6262      	str	r2, [r4, #36]	; 0x24
 80097ee:	6822      	ldr	r2, [r4, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80097f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80097f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80097f8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80097fa:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80097fc:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80097fe:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009800:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009802:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009804:	b9ba      	cbnz	r2, 8009836 <HAL_I2C_Mem_Write+0x11e>
 8009806:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009808:	b29b      	uxth	r3, r3
 800980a:	b1a3      	cbz	r3, 8009836 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800980c:	9600      	str	r6, [sp, #0]
 800980e:	464b      	mov	r3, r9
 8009810:	2180      	movs	r1, #128	; 0x80
 8009812:	4620      	mov	r0, r4
 8009814:	f7ff fc76 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8009818:	2800      	cmp	r0, #0
 800981a:	d1c6      	bne.n	80097aa <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800981c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800981e:	b29b      	uxth	r3, r3
 8009820:	2bff      	cmp	r3, #255	; 0xff
 8009822:	d927      	bls.n	8009874 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009824:	22ff      	movs	r2, #255	; 0xff
 8009826:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009828:	9000      	str	r0, [sp, #0]
 800982a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800982e:	4639      	mov	r1, r7
 8009830:	4620      	mov	r0, r4
 8009832:	f7ff fc53 	bl	80090dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8009836:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009838:	b29b      	uxth	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1c4      	bne.n	80097c8 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800983e:	4632      	mov	r2, r6
 8009840:	4649      	mov	r1, r9
 8009842:	4620      	mov	r0, r4
 8009844:	f7ff fda0 	bl	8009388 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009848:	2800      	cmp	r0, #0
 800984a:	d1c3      	bne.n	80097d4 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	2120      	movs	r1, #32
 8009850:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009858:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800985c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009860:	f022 0201 	bic.w	r2, r2, #1
 8009864:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009866:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800986a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800986e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009872:	e765      	b.n	8009740 <HAL_I2C_Mem_Write+0x28>
          hi2c->XferSize = hi2c->XferCount;
 8009874:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009876:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009878:	b292      	uxth	r2, r2
 800987a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800987c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	e7d4      	b.n	800982e <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8009884:	2002      	movs	r0, #2
 8009886:	e75b      	b.n	8009740 <HAL_I2C_Mem_Write+0x28>

08009888 <HAL_I2C_Mem_Read>:
{
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	b085      	sub	sp, #20
 800988e:	469b      	mov	fp, r3
 8009890:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009894:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009896:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800989a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800989e:	2b20      	cmp	r3, #32
{
 80098a0:	4604      	mov	r4, r0
 80098a2:	460f      	mov	r7, r1
 80098a4:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80098a6:	f040 80a8 	bne.w	80099fa <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80098aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098ac:	b91b      	cbnz	r3, 80098b6 <HAL_I2C_Mem_Read+0x2e>
      return  HAL_ERROR;
 80098ae:	2001      	movs	r0, #1
}
 80098b0:	b005      	add	sp, #20
 80098b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0f8      	beq.n	80098ae <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 80098bc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	f000 809a 	beq.w	80099fa <HAL_I2C_Mem_Read+0x172>
 80098c6:	2501      	movs	r5, #1
 80098c8:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80098cc:	f7ff f84c 	bl	8008968 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098d0:	2319      	movs	r3, #25
 80098d2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80098d4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098d6:	462a      	mov	r2, r5
 80098d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80098dc:	4620      	mov	r0, r4
 80098de:	f7ff fc11 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 80098e2:	4680      	mov	r8, r0
 80098e4:	b9c8      	cbnz	r0, 800991a <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80098e6:	2322      	movs	r3, #34	; 0x22
 80098e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80098ec:	2340      	movs	r3, #64	; 0x40
 80098ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80098f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80098f6:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80098fa:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80098fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80098fe:	e9cd 9600 	strd	r9, r6, [sp]
 8009902:	465b      	mov	r3, fp
 8009904:	4652      	mov	r2, sl
 8009906:	4639      	mov	r1, r7
 8009908:	4620      	mov	r0, r4
 800990a:	f7ff fd03 	bl	8009314 <I2C_RequestMemoryRead>
 800990e:	b130      	cbz	r0, 800991e <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009910:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009912:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009916:	2b04      	cmp	r3, #4
 8009918:	d0c9      	beq.n	80098ae <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 800991a:	2003      	movs	r0, #3
 800991c:	e7c8      	b.n	80098b0 <HAL_I2C_Mem_Read+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800991e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009920:	b29b      	uxth	r3, r3
 8009922:	2bff      	cmp	r3, #255	; 0xff
 8009924:	4b36      	ldr	r3, [pc, #216]	; (8009a00 <HAL_I2C_Mem_Read+0x178>)
 8009926:	d944      	bls.n	80099b2 <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009928:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800992a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800992c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800992e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009932:	4639      	mov	r1, r7
 8009934:	4620      	mov	r0, r4
 8009936:	f7ff fbd1 	bl	80090dc <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800993a:	9600      	str	r6, [sp, #0]
 800993c:	464b      	mov	r3, r9
 800993e:	2200      	movs	r2, #0
 8009940:	2104      	movs	r1, #4
 8009942:	4620      	mov	r0, r4
 8009944:	f7ff fbde 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 8009948:	2800      	cmp	r0, #0
 800994a:	d1e6      	bne.n	800991a <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009952:	1c59      	adds	r1, r3, #1
 8009954:	6261      	str	r1, [r4, #36]	; 0x24
 8009956:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009958:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800995a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800995c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800995e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009960:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009962:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009964:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009966:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009968:	b9ba      	cbnz	r2, 800999a <HAL_I2C_Mem_Read+0x112>
 800996a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800996c:	b29b      	uxth	r3, r3
 800996e:	b1a3      	cbz	r3, 800999a <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009970:	9600      	str	r6, [sp, #0]
 8009972:	464b      	mov	r3, r9
 8009974:	2180      	movs	r1, #128	; 0x80
 8009976:	4620      	mov	r0, r4
 8009978:	f7ff fbc4 	bl	8009104 <I2C_WaitOnFlagUntilTimeout>
 800997c:	2800      	cmp	r0, #0
 800997e:	d1cc      	bne.n	800991a <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009980:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009982:	b29b      	uxth	r3, r3
 8009984:	2bff      	cmp	r3, #255	; 0xff
 8009986:	d91c      	bls.n	80099c2 <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009988:	22ff      	movs	r2, #255	; 0xff
 800998a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800998c:	9000      	str	r0, [sp, #0]
 800998e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009992:	4639      	mov	r1, r7
 8009994:	4620      	mov	r0, r4
 8009996:	f7ff fba1 	bl	80090dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800999a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1cb      	bne.n	800993a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099a2:	4632      	mov	r2, r6
 80099a4:	4649      	mov	r1, r9
 80099a6:	4620      	mov	r0, r4
 80099a8:	f7ff fcee 	bl	8009388 <I2C_WaitOnSTOPFlagUntilTimeout>
 80099ac:	b188      	cbz	r0, 80099d2 <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80099b0:	e7b1      	b.n	8009916 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80099b2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80099b4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80099b6:	b292      	uxth	r2, r2
 80099b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80099ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	e7b7      	b.n	8009932 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80099c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099c4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80099c6:	b292      	uxth	r2, r2
 80099c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80099ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	e7df      	b.n	8009992 <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	2120      	movs	r1, #32
 80099d6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80099de:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80099e2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80099e6:	f022 0201 	bic.w	r2, r2, #1
 80099ea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80099ec:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80099f0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099f4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80099f8:	e75a      	b.n	80098b0 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80099fa:	2002      	movs	r0, #2
 80099fc:	e758      	b.n	80098b0 <HAL_I2C_Mem_Read+0x28>
 80099fe:	bf00      	nop
 8009a00:	80002400 	.word	0x80002400

08009a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a04:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	b2dc      	uxtb	r4, r3
 8009a0e:	d11d      	bne.n	8009a4c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a10:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d019      	beq.n	8009a4c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a18:	2324      	movs	r3, #36	; 0x24
 8009a1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a1e:	6803      	ldr	r3, [r0, #0]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	f022 0201 	bic.w	r2, r2, #1
 8009a26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4311      	orrs	r1, r2
 8009a34:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	f042 0201 	orr.w	r2, r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a3e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009a40:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009a44:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009a48:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009a4a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009a4c:	2002      	movs	r0, #2
 8009a4e:	e7fc      	b.n	8009a4a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009a50 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009a50:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <HAL_PWREx_GetVoltageRange+0xc>)
 8009a52:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8009a54:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	40007000 	.word	0x40007000

08009a60 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a60:	4b16      	ldr	r3, [pc, #88]	; (8009abc <HAL_PWREx_ControlVoltageScaling+0x5c>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a62:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a68:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a6c:	d11c      	bne.n	8009aa8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a6e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009a72:	d101      	bne.n	8009a78 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8009a74:	2000      	movs	r0, #0
 8009a76:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a78:	681a      	ldr	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009a7a:	4911      	ldr	r1, [pc, #68]	; (8009ac0 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a7c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8009a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a84:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009a86:	4a0f      	ldr	r2, [pc, #60]	; (8009ac4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	fbb2 f1f1 	udiv	r1, r2, r1
 8009a8e:	2232      	movs	r2, #50	; 0x32
 8009a90:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8009a92:	b112      	cbz	r2, 8009a9a <HAL_PWREx_ControlVoltageScaling+0x3a>
 8009a94:	6959      	ldr	r1, [r3, #20]
 8009a96:	0549      	lsls	r1, r1, #21
 8009a98:	d404      	bmi.n	8009aa4 <HAL_PWREx_ControlVoltageScaling+0x44>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	055b      	lsls	r3, r3, #21
 8009a9e:	d5e9      	bpl.n	8009a74 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8009aa0:	2003      	movs	r0, #3
}  
 8009aa2:	4770      	bx	lr
        wait_loop_index--;
 8009aa4:	3a01      	subs	r2, #1
 8009aa6:	e7f4      	b.n	8009a92 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009aa8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009aac:	bf1f      	itttt	ne
 8009aae:	681a      	ldrne	r2, [r3, #0]
 8009ab0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8009ab4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8009ab8:	601a      	strne	r2, [r3, #0]
 8009aba:	e7db      	b.n	8009a74 <HAL_PWREx_ControlVoltageScaling+0x14>
 8009abc:	40007000 	.word	0x40007000
 8009ac0:	000f4240 	.word	0x000f4240
 8009ac4:	20000528 	.word	0x20000528

08009ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009aca:	4d1e      	ldr	r5, [pc, #120]	; (8009b44 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009acc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009ace:	00da      	lsls	r2, r3, #3
{
 8009ad0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009ad2:	d518      	bpl.n	8009b06 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009ad4:	f7ff ffbc 	bl	8009a50 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ad8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009adc:	d123      	bne.n	8009b26 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009ade:	2c80      	cmp	r4, #128	; 0x80
 8009ae0:	d929      	bls.n	8009b36 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009ae2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009ae4:	bf8c      	ite	hi
 8009ae6:	2402      	movhi	r4, #2
 8009ae8:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009aea:	4917      	ldr	r1, [pc, #92]	; (8009b48 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8009aec:	680a      	ldr	r2, [r1, #0]
 8009aee:	f022 0207 	bic.w	r2, r2, #7
 8009af2:	4322      	orrs	r2, r4
 8009af4:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8009af6:	6808      	ldr	r0, [r1, #0]
 8009af8:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8009afc:	1b00      	subs	r0, r0, r4
 8009afe:	bf18      	it	ne
 8009b00:	2001      	movne	r0, #1
 8009b02:	b003      	add	sp, #12
 8009b04:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8009b0e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b14:	9301      	str	r3, [sp, #4]
 8009b16:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009b18:	f7ff ff9a 	bl	8009a50 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009b1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b22:	65ab      	str	r3, [r5, #88]	; 0x58
 8009b24:	e7d8      	b.n	8009ad8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8009b26:	2c80      	cmp	r4, #128	; 0x80
 8009b28:	d807      	bhi.n	8009b3a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8009b2a:	d008      	beq.n	8009b3e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8009b2c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8009b30:	425c      	negs	r4, r3
 8009b32:	415c      	adcs	r4, r3
 8009b34:	e7d9      	b.n	8009aea <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009b36:	2400      	movs	r4, #0
 8009b38:	e7d7      	b.n	8009aea <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8009b3a:	2403      	movs	r4, #3
 8009b3c:	e7d5      	b.n	8009aea <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8009b3e:	2402      	movs	r4, #2
 8009b40:	e7d3      	b.n	8009aea <RCC_SetFlashLatencyFromMSIRange+0x22>
 8009b42:	bf00      	nop
 8009b44:	40021000 	.word	0x40021000
 8009b48:	40022000 	.word	0x40022000

08009b4c <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009b4c:	4b2f      	ldr	r3, [pc, #188]	; (8009c0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	f012 0f0c 	tst.w	r2, #12
{
 8009b54:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009b56:	d009      	beq.n	8009b6c <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009b5e:	2a0c      	cmp	r2, #12
 8009b60:	d12e      	bne.n	8009bc0 <HAL_RCC_GetSysClockFreq+0x74>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	f002 0203 	and.w	r2, r2, #3
 8009b68:	2a01      	cmp	r2, #1
 8009b6a:	d129      	bne.n	8009bc0 <HAL_RCC_GetSysClockFreq+0x74>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009b6c:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8009b6e:	4928      	ldr	r1, [pc, #160]	; (8009c10 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009b70:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b72:	bf55      	itete	pl
 8009b74:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b78:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009b7a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009b7e:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009b82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8009b86:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8009b88:	f011 0f0c 	tst.w	r1, #12
 8009b8c:	bf0c      	ite	eq
 8009b8e:	4610      	moveq	r0, r2
 8009b90:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009b92:	6899      	ldr	r1, [r3, #8]
 8009b94:	f001 010c 	and.w	r1, r1, #12
 8009b98:	290c      	cmp	r1, #12
 8009b9a:	d131      	bne.n	8009c00 <HAL_RCC_GetSysClockFreq+0xb4>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009b9c:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009b9e:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ba0:	f004 0403 	and.w	r4, r4, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009ba4:	f3c0 1002 	ubfx	r0, r0, #4, #3
    switch (pllsource)
 8009ba8:	2c02      	cmp	r4, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009baa:	f100 0101 	add.w	r1, r0, #1
    switch (pllsource)
 8009bae:	d019      	beq.n	8009be4 <HAL_RCC_GetSysClockFreq+0x98>
 8009bb0:	2c03      	cmp	r4, #3
 8009bb2:	d026      	beq.n	8009c02 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bb4:	fbb2 f2f1 	udiv	r2, r2, r1
 8009bb8:	68d8      	ldr	r0, [r3, #12]
 8009bba:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8009bbe:	e017      	b.n	8009bf0 <HAL_RCC_GetSysClockFreq+0xa4>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	f002 020c 	and.w	r2, r2, #12
 8009bc6:	2a04      	cmp	r2, #4
 8009bc8:	d007      	beq.n	8009bda <HAL_RCC_GetSysClockFreq+0x8e>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009bca:	689a      	ldr	r2, [r3, #8]
 8009bcc:	f002 020c 	and.w	r2, r2, #12
 8009bd0:	2a08      	cmp	r2, #8
 8009bd2:	d104      	bne.n	8009bde <HAL_RCC_GetSysClockFreq+0x92>
    sysclockfreq = HSE_VALUE;
 8009bd4:	480f      	ldr	r0, [pc, #60]	; (8009c14 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	e7db      	b.n	8009b92 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8009bda:	480f      	ldr	r0, [pc, #60]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009bdc:	e7fb      	b.n	8009bd6 <HAL_RCC_GetSysClockFreq+0x8a>
  uint32_t sysclockfreq = 0U;
 8009bde:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009be0:	4602      	mov	r2, r0
 8009be2:	e7d6      	b.n	8009b92 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	480c      	ldr	r0, [pc, #48]	; (8009c18 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009be8:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bec:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8009bf6:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009bf8:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009bfa:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8009bfc:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8009c00:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	4803      	ldr	r0, [pc, #12]	; (8009c14 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009c06:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8009c0a:	e7ef      	b.n	8009bec <HAL_RCC_GetSysClockFreq+0xa0>
 8009c0c:	40021000 	.word	0x40021000
 8009c10:	08028318 	.word	0x08028318
 8009c14:	007a1200 	.word	0x007a1200
 8009c18:	00f42400 	.word	0x00f42400

08009c1c <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c1c:	6803      	ldr	r3, [r0, #0]
{
 8009c1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c22:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c24:	06d8      	lsls	r0, r3, #27
 8009c26:	d53b      	bpl.n	8009ca0 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8009c28:	4ca9      	ldr	r4, [pc, #676]	; (8009ed0 <HAL_RCC_OscConfig+0x2b4>)
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	f013 0f0c 	tst.w	r3, #12
 8009c30:	d160      	bne.n	8009cf4 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	0799      	lsls	r1, r3, #30
 8009c36:	d505      	bpl.n	8009c44 <HAL_RCC_OscConfig+0x28>
 8009c38:	69ab      	ldr	r3, [r5, #24]
 8009c3a:	b91b      	cbnz	r3, 8009c44 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8009c3c:	2001      	movs	r0, #1
}
 8009c3e:	b002      	add	sp, #8
 8009c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	6a28      	ldr	r0, [r5, #32]
 8009c48:	071a      	lsls	r2, r3, #28
 8009c4a:	bf56      	itet	pl
 8009c4c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8009c50:	6823      	ldrmi	r3, [r4, #0]
 8009c52:	091b      	lsrpl	r3, r3, #4
 8009c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c58:	4298      	cmp	r0, r3
 8009c5a:	d936      	bls.n	8009cca <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009c5c:	f7ff ff34 	bl	8009ac8 <RCC_SetFlashLatencyFromMSIRange>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d1eb      	bne.n	8009c3c <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	f043 0308 	orr.w	r3, r3, #8
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	6a2a      	ldr	r2, [r5, #32]
 8009c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c74:	4313      	orrs	r3, r2
 8009c76:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009c78:	6863      	ldr	r3, [r4, #4]
 8009c7a:	69ea      	ldr	r2, [r5, #28]
 8009c7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c84:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009c86:	f7ff ff61 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
 8009c8a:	68a3      	ldr	r3, [r4, #8]
 8009c8c:	4a91      	ldr	r2, [pc, #580]	; (8009ed4 <HAL_RCC_OscConfig+0x2b8>)
 8009c8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009c92:	5cd3      	ldrb	r3, [r2, r3]
 8009c94:	40d8      	lsrs	r0, r3
 8009c96:	4b90      	ldr	r3, [pc, #576]	; (8009ed8 <HAL_RCC_OscConfig+0x2bc>)
 8009c98:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8009c9a:	200f      	movs	r0, #15
 8009c9c:	f7fe fe3a 	bl	8008914 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	07de      	lsls	r6, r3, #31
 8009ca4:	d45b      	bmi.n	8009d5e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ca6:	682b      	ldr	r3, [r5, #0]
 8009ca8:	079c      	lsls	r4, r3, #30
 8009caa:	f100 80a3 	bmi.w	8009df4 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cae:	682b      	ldr	r3, [r5, #0]
 8009cb0:	0719      	lsls	r1, r3, #28
 8009cb2:	f100 80e1 	bmi.w	8009e78 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cb6:	682b      	ldr	r3, [r5, #0]
 8009cb8:	075a      	lsls	r2, r3, #29
 8009cba:	f100 810f 	bmi.w	8009edc <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009cbe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	f040 8176 	bne.w	8009fb2 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e7b9      	b.n	8009c3e <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cd8:	4303      	orrs	r3, r0
 8009cda:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	69ea      	ldr	r2, [r5, #28]
 8009ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ce8:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cea:	f7ff feed 	bl	8009ac8 <RCC_SetFlashLatencyFromMSIRange>
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d0c9      	beq.n	8009c86 <HAL_RCC_OscConfig+0x6a>
 8009cf2:	e7a3      	b.n	8009c3c <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009cf4:	69ab      	ldr	r3, [r5, #24]
 8009cf6:	b313      	cbz	r3, 8009d3e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009d00:	f7fe fe32 	bl	8008968 <HAL_GetTick>
 8009d04:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	079b      	lsls	r3, r3, #30
 8009d0a:	d511      	bpl.n	8009d30 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	f043 0308 	orr.w	r3, r3, #8
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	6a2a      	ldr	r2, [r5, #32]
 8009d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	69ea      	ldr	r2, [r5, #28]
 8009d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d2c:	6063      	str	r3, [r4, #4]
 8009d2e:	e7b7      	b.n	8009ca0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d30:	f7fe fe1a 	bl	8008968 <HAL_GetTick>
 8009d34:	1b80      	subs	r0, r0, r6
 8009d36:	2802      	cmp	r0, #2
 8009d38:	d9e5      	bls.n	8009d06 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8009d3a:	2003      	movs	r0, #3
 8009d3c:	e77f      	b.n	8009c3e <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	f023 0301 	bic.w	r3, r3, #1
 8009d44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009d46:	f7fe fe0f 	bl	8008968 <HAL_GetTick>
 8009d4a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	079f      	lsls	r7, r3, #30
 8009d50:	d5a6      	bpl.n	8009ca0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d52:	f7fe fe09 	bl	8008968 <HAL_GetTick>
 8009d56:	1b80      	subs	r0, r0, r6
 8009d58:	2802      	cmp	r0, #2
 8009d5a:	d9f7      	bls.n	8009d4c <HAL_RCC_OscConfig+0x130>
 8009d5c:	e7ed      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8009d5e:	4c5c      	ldr	r4, [pc, #368]	; (8009ed0 <HAL_RCC_OscConfig+0x2b4>)
 8009d60:	68a3      	ldr	r3, [r4, #8]
 8009d62:	f003 030c 	and.w	r3, r3, #12
 8009d66:	2b08      	cmp	r3, #8
 8009d68:	d009      	beq.n	8009d7e <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8009d70:	2b0c      	cmp	r3, #12
 8009d72:	d10b      	bne.n	8009d8c <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009d74:	68e3      	ldr	r3, [r4, #12]
 8009d76:	f003 0303 	and.w	r3, r3, #3
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d106      	bne.n	8009d8c <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d7e:	6823      	ldr	r3, [r4, #0]
 8009d80:	0398      	lsls	r0, r3, #14
 8009d82:	d590      	bpl.n	8009ca6 <HAL_RCC_OscConfig+0x8a>
 8009d84:	686b      	ldr	r3, [r5, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d18d      	bne.n	8009ca6 <HAL_RCC_OscConfig+0x8a>
 8009d8a:	e757      	b.n	8009c3c <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d8c:	686b      	ldr	r3, [r5, #4]
 8009d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d92:	d110      	bne.n	8009db6 <HAL_RCC_OscConfig+0x19a>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009d9c:	f7fe fde4 	bl	8008968 <HAL_GetTick>
 8009da0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	0399      	lsls	r1, r3, #14
 8009da6:	f53f af7e 	bmi.w	8009ca6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009daa:	f7fe fddd 	bl	8008968 <HAL_GetTick>
 8009dae:	1b80      	subs	r0, r0, r6
 8009db0:	2864      	cmp	r0, #100	; 0x64
 8009db2:	d9f6      	bls.n	8009da2 <HAL_RCC_OscConfig+0x186>
 8009db4:	e7c1      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dba:	d104      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x1aa>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	e7e6      	b.n	8009d94 <HAL_RCC_OscConfig+0x178>
 8009dc6:	6822      	ldr	r2, [r4, #0]
 8009dc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009dd4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e0      	bne.n	8009d9c <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8009dda:	f7fe fdc5 	bl	8008968 <HAL_GetTick>
 8009dde:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	039a      	lsls	r2, r3, #14
 8009de4:	f57f af5f 	bpl.w	8009ca6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009de8:	f7fe fdbe 	bl	8008968 <HAL_GetTick>
 8009dec:	1b80      	subs	r0, r0, r6
 8009dee:	2864      	cmp	r0, #100	; 0x64
 8009df0:	d9f6      	bls.n	8009de0 <HAL_RCC_OscConfig+0x1c4>
 8009df2:	e7a2      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8009df4:	4c36      	ldr	r4, [pc, #216]	; (8009ed0 <HAL_RCC_OscConfig+0x2b4>)
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	f003 030c 	and.w	r3, r3, #12
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d009      	beq.n	8009e14 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009e00:	68a3      	ldr	r3, [r4, #8]
 8009e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8009e06:	2b0c      	cmp	r3, #12
 8009e08:	d113      	bne.n	8009e32 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009e0a:	68e3      	ldr	r3, [r4, #12]
 8009e0c:	f003 0303 	and.w	r3, r3, #3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d10e      	bne.n	8009e32 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e14:	6823      	ldr	r3, [r4, #0]
 8009e16:	055b      	lsls	r3, r3, #21
 8009e18:	d503      	bpl.n	8009e22 <HAL_RCC_OscConfig+0x206>
 8009e1a:	68eb      	ldr	r3, [r5, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f43f af0d 	beq.w	8009c3c <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e22:	6863      	ldr	r3, [r4, #4]
 8009e24:	692a      	ldr	r2, [r5, #16]
 8009e26:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8009e2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e2e:	6063      	str	r3, [r4, #4]
 8009e30:	e73d      	b.n	8009cae <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e32:	68eb      	ldr	r3, [r5, #12]
 8009e34:	b17b      	cbz	r3, 8009e56 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009e3e:	f7fe fd93 	bl	8008968 <HAL_GetTick>
 8009e42:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	055f      	lsls	r7, r3, #21
 8009e48:	d4eb      	bmi.n	8009e22 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e4a:	f7fe fd8d 	bl	8008968 <HAL_GetTick>
 8009e4e:	1b80      	subs	r0, r0, r6
 8009e50:	2802      	cmp	r0, #2
 8009e52:	d9f7      	bls.n	8009e44 <HAL_RCC_OscConfig+0x228>
 8009e54:	e771      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009e5e:	f7fe fd83 	bl	8008968 <HAL_GetTick>
 8009e62:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	0558      	lsls	r0, r3, #21
 8009e68:	f57f af21 	bpl.w	8009cae <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e6c:	f7fe fd7c 	bl	8008968 <HAL_GetTick>
 8009e70:	1b80      	subs	r0, r0, r6
 8009e72:	2802      	cmp	r0, #2
 8009e74:	d9f6      	bls.n	8009e64 <HAL_RCC_OscConfig+0x248>
 8009e76:	e760      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e78:	696b      	ldr	r3, [r5, #20]
 8009e7a:	4c15      	ldr	r4, [pc, #84]	; (8009ed0 <HAL_RCC_OscConfig+0x2b4>)
 8009e7c:	b19b      	cbz	r3, 8009ea6 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8009e7e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009e8a:	f7fe fd6d 	bl	8008968 <HAL_GetTick>
 8009e8e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8009e90:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009e94:	079b      	lsls	r3, r3, #30
 8009e96:	f53f af0e 	bmi.w	8009cb6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e9a:	f7fe fd65 	bl	8008968 <HAL_GetTick>
 8009e9e:	1b80      	subs	r0, r0, r6
 8009ea0:	2802      	cmp	r0, #2
 8009ea2:	d9f5      	bls.n	8009e90 <HAL_RCC_OscConfig+0x274>
 8009ea4:	e749      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8009ea6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009eaa:	f023 0301 	bic.w	r3, r3, #1
 8009eae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8009eb2:	f7fe fd59 	bl	8008968 <HAL_GetTick>
 8009eb6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8009eb8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009ebc:	079f      	lsls	r7, r3, #30
 8009ebe:	f57f aefa 	bpl.w	8009cb6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ec2:	f7fe fd51 	bl	8008968 <HAL_GetTick>
 8009ec6:	1b80      	subs	r0, r0, r6
 8009ec8:	2802      	cmp	r0, #2
 8009eca:	d9f5      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x29c>
 8009ecc:	e735      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
 8009ece:	bf00      	nop
 8009ed0:	40021000 	.word	0x40021000
 8009ed4:	08028348 	.word	0x08028348
 8009ed8:	20000528 	.word	0x20000528
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009edc:	4c66      	ldr	r4, [pc, #408]	; (800a078 <HAL_RCC_OscConfig+0x45c>)
 8009ede:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ee0:	00de      	lsls	r6, r3, #3
 8009ee2:	d427      	bmi.n	8009f34 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eea:	65a3      	str	r3, [r4, #88]	; 0x58
 8009eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009ef6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ef8:	4e60      	ldr	r6, [pc, #384]	; (800a07c <HAL_RCC_OscConfig+0x460>)
 8009efa:	6833      	ldr	r3, [r6, #0]
 8009efc:	05d8      	lsls	r0, r3, #23
 8009efe:	d51b      	bpl.n	8009f38 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f00:	68ab      	ldr	r3, [r5, #8]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d129      	bne.n	8009f5a <HAL_RCC_OscConfig+0x33e>
 8009f06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f0a:	f043 0301 	orr.w	r3, r3, #1
 8009f0e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8009f12:	f7fe fd29 	bl	8008968 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009f1a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8009f1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f20:	079a      	lsls	r2, r3, #30
 8009f22:	d540      	bpl.n	8009fa6 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8009f24:	2f00      	cmp	r7, #0
 8009f26:	f43f aeca 	beq.w	8009cbe <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f30:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f32:	e6c4      	b.n	8009cbe <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8009f34:	2700      	movs	r7, #0
 8009f36:	e7df      	b.n	8009ef8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f38:	6833      	ldr	r3, [r6, #0]
 8009f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f3e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8009f40:	f7fe fd12 	bl	8008968 <HAL_GetTick>
 8009f44:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009f46:	6833      	ldr	r3, [r6, #0]
 8009f48:	05d9      	lsls	r1, r3, #23
 8009f4a:	d4d9      	bmi.n	8009f00 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f4c:	f7fe fd0c 	bl	8008968 <HAL_GetTick>
 8009f50:	eba0 0008 	sub.w	r0, r0, r8
 8009f54:	2802      	cmp	r0, #2
 8009f56:	d9f6      	bls.n	8009f46 <HAL_RCC_OscConfig+0x32a>
 8009f58:	e6ef      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d106      	bne.n	8009f6c <HAL_RCC_OscConfig+0x350>
 8009f5e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f62:	f043 0304 	orr.w	r3, r3, #4
 8009f66:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8009f6a:	e7cc      	b.n	8009f06 <HAL_RCC_OscConfig+0x2ea>
 8009f6c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009f70:	f022 0201 	bic.w	r2, r2, #1
 8009f74:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8009f78:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8009f7c:	f022 0204 	bic.w	r2, r2, #4
 8009f80:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d1c4      	bne.n	8009f12 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8009f88:	f7fe fcee 	bl	8008968 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f8c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009f90:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8009f92:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f96:	079b      	lsls	r3, r3, #30
 8009f98:	d5c4      	bpl.n	8009f24 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f9a:	f7fe fce5 	bl	8008968 <HAL_GetTick>
 8009f9e:	1b80      	subs	r0, r0, r6
 8009fa0:	4540      	cmp	r0, r8
 8009fa2:	d9f6      	bls.n	8009f92 <HAL_RCC_OscConfig+0x376>
 8009fa4:	e6c9      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fa6:	f7fe fcdf 	bl	8008968 <HAL_GetTick>
 8009faa:	1b80      	subs	r0, r0, r6
 8009fac:	4540      	cmp	r0, r8
 8009fae:	d9b5      	bls.n	8009f1c <HAL_RCC_OscConfig+0x300>
 8009fb0:	e6c3      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009fb2:	4c31      	ldr	r4, [pc, #196]	; (800a078 <HAL_RCC_OscConfig+0x45c>)
 8009fb4:	68a3      	ldr	r3, [r4, #8]
 8009fb6:	f003 030c 	and.w	r3, r3, #12
 8009fba:	2b0c      	cmp	r3, #12
 8009fbc:	f43f ae3e 	beq.w	8009c3c <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8009fc0:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009fc2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8009fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fc8:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009fca:	d137      	bne.n	800a03c <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8009fcc:	f7fe fccc 	bl	8008968 <HAL_GetTick>
 8009fd0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	019f      	lsls	r7, r3, #6
 8009fd6:	d42b      	bmi.n	800a030 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fd8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009fda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009fdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fe0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8009fe2:	3a01      	subs	r2, #1
 8009fe4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009fe8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8009fea:	0912      	lsrs	r2, r2, #4
 8009fec:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8009ff0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8009ff2:	0852      	lsrs	r2, r2, #1
 8009ff4:	3a01      	subs	r2, #1
 8009ff6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8009ffa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8009ffc:	0852      	lsrs	r2, r2, #1
 8009ffe:	3a01      	subs	r2, #1
 800a000:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a004:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a00c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a00e:	68e3      	ldr	r3, [r4, #12]
 800a010:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a014:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a016:	f7fe fca7 	bl	8008968 <HAL_GetTick>
 800a01a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	0198      	lsls	r0, r3, #6
 800a020:	f53f ae51 	bmi.w	8009cc6 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a024:	f7fe fca0 	bl	8008968 <HAL_GetTick>
 800a028:	1b40      	subs	r0, r0, r5
 800a02a:	2802      	cmp	r0, #2
 800a02c:	d9f6      	bls.n	800a01c <HAL_RCC_OscConfig+0x400>
 800a02e:	e684      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a030:	f7fe fc9a 	bl	8008968 <HAL_GetTick>
 800a034:	1b80      	subs	r0, r0, r6
 800a036:	2802      	cmp	r0, #2
 800a038:	d9cb      	bls.n	8009fd2 <HAL_RCC_OscConfig+0x3b6>
 800a03a:	e67e      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	0119      	lsls	r1, r3, #4
 800a040:	d406      	bmi.n	800a050 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a042:	6823      	ldr	r3, [r4, #0]
           &&
 800a044:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a046:	bf5e      	ittt	pl
 800a048:	68e3      	ldrpl	r3, [r4, #12]
 800a04a:	f023 0303 	bicpl.w	r3, r3, #3
 800a04e:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a050:	68e3      	ldr	r3, [r4, #12]
 800a052:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a05c:	f7fe fc84 	bl	8008968 <HAL_GetTick>
 800a060:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	019b      	lsls	r3, r3, #6
 800a066:	f57f ae2e 	bpl.w	8009cc6 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a06a:	f7fe fc7d 	bl	8008968 <HAL_GetTick>
 800a06e:	1b40      	subs	r0, r0, r5
 800a070:	2802      	cmp	r0, #2
 800a072:	d9f6      	bls.n	800a062 <HAL_RCC_OscConfig+0x446>
 800a074:	e661      	b.n	8009d3a <HAL_RCC_OscConfig+0x11e>
 800a076:	bf00      	nop
 800a078:	40021000 	.word	0x40021000
 800a07c:	40007000 	.word	0x40007000

0800a080 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a080:	4a55      	ldr	r2, [pc, #340]	; (800a1d8 <HAL_RCC_ClockConfig+0x158>)
 800a082:	6813      	ldr	r3, [r2, #0]
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	428b      	cmp	r3, r1
{
 800a08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a08e:	4605      	mov	r5, r0
 800a090:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a092:	d32a      	bcc.n	800a0ea <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	07d9      	lsls	r1, r3, #31
 800a098:	d434      	bmi.n	800a104 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a09a:	6829      	ldr	r1, [r5, #0]
 800a09c:	078a      	lsls	r2, r1, #30
 800a09e:	f100 8081 	bmi.w	800a1a4 <HAL_RCC_ClockConfig+0x124>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a0a2:	4a4d      	ldr	r2, [pc, #308]	; (800a1d8 <HAL_RCC_ClockConfig+0x158>)
 800a0a4:	6813      	ldr	r3, [r2, #0]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	42b3      	cmp	r3, r6
 800a0ac:	f200 8082 	bhi.w	800a1b4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0b0:	f011 0f04 	tst.w	r1, #4
 800a0b4:	4c49      	ldr	r4, [pc, #292]	; (800a1dc <HAL_RCC_ClockConfig+0x15c>)
 800a0b6:	f040 8088 	bne.w	800a1ca <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0ba:	070b      	lsls	r3, r1, #28
 800a0bc:	d506      	bpl.n	800a0cc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	692a      	ldr	r2, [r5, #16]
 800a0c2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a0c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a0ca:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a0cc:	f7ff fd3e 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
 800a0d0:	68a3      	ldr	r3, [r4, #8]
 800a0d2:	4a43      	ldr	r2, [pc, #268]	; (800a1e0 <HAL_RCC_ClockConfig+0x160>)
 800a0d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a0d8:	5cd3      	ldrb	r3, [r2, r3]
 800a0da:	40d8      	lsrs	r0, r3
 800a0dc:	4b41      	ldr	r3, [pc, #260]	; (800a1e4 <HAL_RCC_ClockConfig+0x164>)
 800a0de:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800a0e0:	200f      	movs	r0, #15
 800a0e2:	f7fe fc17 	bl	8008914 <HAL_InitTick>
  return HAL_OK;
 800a0e6:	2000      	movs	r0, #0
 800a0e8:	e00a      	b.n	800a100 <HAL_RCC_ClockConfig+0x80>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ea:	6813      	ldr	r3, [r2, #0]
 800a0ec:	f023 0307 	bic.w	r3, r3, #7
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a0f4:	6813      	ldr	r3, [r2, #0]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	428b      	cmp	r3, r1
 800a0fc:	d0ca      	beq.n	800a094 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800a0fe:	2001      	movs	r0, #1
}
 800a100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a104:	686a      	ldr	r2, [r5, #4]
 800a106:	4c35      	ldr	r4, [pc, #212]	; (800a1dc <HAL_RCC_ClockConfig+0x15c>)
 800a108:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a10a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a10c:	d11b      	bne.n	800a146 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a10e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a112:	d0f4      	beq.n	800a0fe <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	f023 0303 	bic.w	r3, r3, #3
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a11e:	f7fe fc23 	bl	8008968 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a122:	686b      	ldr	r3, [r5, #4]
 800a124:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 800a126:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a128:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a12c:	d117      	bne.n	800a15e <HAL_RCC_ClockConfig+0xde>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a12e:	68a3      	ldr	r3, [r4, #8]
 800a130:	f003 030c 	and.w	r3, r3, #12
 800a134:	2b0c      	cmp	r3, #12
 800a136:	d0b0      	beq.n	800a09a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a138:	f7fe fc16 	bl	8008968 <HAL_GetTick>
 800a13c:	1bc0      	subs	r0, r0, r7
 800a13e:	4540      	cmp	r0, r8
 800a140:	d9f5      	bls.n	800a12e <HAL_RCC_ClockConfig+0xae>
          return HAL_TIMEOUT;
 800a142:	2003      	movs	r0, #3
 800a144:	e7dc      	b.n	800a100 <HAL_RCC_ClockConfig+0x80>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a146:	2a02      	cmp	r2, #2
 800a148:	d102      	bne.n	800a150 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a14a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a14e:	e7e0      	b.n	800a112 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a150:	b912      	cbnz	r2, 800a158 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800a152:	f013 0f02 	tst.w	r3, #2
 800a156:	e7dc      	b.n	800a112 <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a158:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a15c:	e7d9      	b.n	800a112 <HAL_RCC_ClockConfig+0x92>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d10a      	bne.n	800a178 <HAL_RCC_ClockConfig+0xf8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800a162:	68a3      	ldr	r3, [r4, #8]
 800a164:	f003 030c 	and.w	r3, r3, #12
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d096      	beq.n	800a09a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a16c:	f7fe fbfc 	bl	8008968 <HAL_GetTick>
 800a170:	1bc0      	subs	r0, r0, r7
 800a172:	4540      	cmp	r0, r8
 800a174:	d9f5      	bls.n	800a162 <HAL_RCC_ClockConfig+0xe2>
 800a176:	e7e4      	b.n	800a142 <HAL_RCC_ClockConfig+0xc2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a178:	b973      	cbnz	r3, 800a198 <HAL_RCC_ClockConfig+0x118>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800a17a:	68a3      	ldr	r3, [r4, #8]
 800a17c:	f013 0f0c 	tst.w	r3, #12
 800a180:	d08b      	beq.n	800a09a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a182:	f7fe fbf1 	bl	8008968 <HAL_GetTick>
 800a186:	1bc0      	subs	r0, r0, r7
 800a188:	4540      	cmp	r0, r8
 800a18a:	d9f6      	bls.n	800a17a <HAL_RCC_ClockConfig+0xfa>
 800a18c:	e7d9      	b.n	800a142 <HAL_RCC_ClockConfig+0xc2>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a18e:	f7fe fbeb 	bl	8008968 <HAL_GetTick>
 800a192:	1bc0      	subs	r0, r0, r7
 800a194:	4540      	cmp	r0, r8
 800a196:	d8d4      	bhi.n	800a142 <HAL_RCC_ClockConfig+0xc2>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800a198:	68a3      	ldr	r3, [r4, #8]
 800a19a:	f003 030c 	and.w	r3, r3, #12
 800a19e:	2b04      	cmp	r3, #4
 800a1a0:	d1f5      	bne.n	800a18e <HAL_RCC_ClockConfig+0x10e>
 800a1a2:	e77a      	b.n	800a09a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1a4:	4a0d      	ldr	r2, [pc, #52]	; (800a1dc <HAL_RCC_ClockConfig+0x15c>)
 800a1a6:	68a8      	ldr	r0, [r5, #8]
 800a1a8:	6893      	ldr	r3, [r2, #8]
 800a1aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1ae:	4303      	orrs	r3, r0
 800a1b0:	6093      	str	r3, [r2, #8]
 800a1b2:	e776      	b.n	800a0a2 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b4:	6813      	ldr	r3, [r2, #0]
 800a1b6:	f023 0307 	bic.w	r3, r3, #7
 800a1ba:	4333      	orrs	r3, r6
 800a1bc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	42b3      	cmp	r3, r6
 800a1c6:	d19a      	bne.n	800a0fe <HAL_RCC_ClockConfig+0x7e>
 800a1c8:	e772      	b.n	800a0b0 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1ca:	68a3      	ldr	r3, [r4, #8]
 800a1cc:	68ea      	ldr	r2, [r5, #12]
 800a1ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	e770      	b.n	800a0ba <HAL_RCC_ClockConfig+0x3a>
 800a1d8:	40022000 	.word	0x40022000
 800a1dc:	40021000 	.word	0x40021000
 800a1e0:	08028348 	.word	0x08028348
 800a1e4:	20000528 	.word	0x20000528

0800a1e8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <HAL_RCC_GetPCLK1Freq+0x14>)
 800a1ea:	4a05      	ldr	r2, [pc, #20]	; (800a200 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a1f2:	5cd3      	ldrb	r3, [r2, r3]
 800a1f4:	4a03      	ldr	r2, [pc, #12]	; (800a204 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a1f6:	6810      	ldr	r0, [r2, #0]
}
 800a1f8:	40d8      	lsrs	r0, r3
 800a1fa:	4770      	bx	lr
 800a1fc:	40021000 	.word	0x40021000
 800a200:	08028358 	.word	0x08028358
 800a204:	20000528 	.word	0x20000528

0800a208 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <HAL_RCC_GetPCLK2Freq+0x14>)
 800a20a:	4a05      	ldr	r2, [pc, #20]	; (800a220 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a212:	5cd3      	ldrb	r3, [r2, r3]
 800a214:	4a03      	ldr	r2, [pc, #12]	; (800a224 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a216:	6810      	ldr	r0, [r2, #0]
}
 800a218:	40d8      	lsrs	r0, r3
 800a21a:	4770      	bx	lr
 800a21c:	40021000 	.word	0x40021000
 800a220:	08028358 	.word	0x08028358
 800a224:	20000528 	.word	0x20000528

0800a228 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a228:	4a44      	ldr	r2, [pc, #272]	; (800a33c <RCCEx_PLLSAI1_Config+0x114>)
{
 800a22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22c:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a22e:	68d1      	ldr	r1, [r2, #12]
 800a230:	6803      	ldr	r3, [r0, #0]
 800a232:	f011 0f03 	tst.w	r1, #3
{
 800a236:	4605      	mov	r5, r0
 800a238:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a23a:	d029      	beq.n	800a290 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a23c:	68d1      	ldr	r1, [r2, #12]
 800a23e:	f001 0103 	and.w	r1, r1, #3
 800a242:	4299      	cmp	r1, r3
 800a244:	d178      	bne.n	800a338 <RCCEx_PLLSAI1_Config+0x110>
       ||
 800a246:	2900      	cmp	r1, #0
 800a248:	d076      	beq.n	800a338 <RCCEx_PLLSAI1_Config+0x110>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a24a:	68d3      	ldr	r3, [r2, #12]
       ||
 800a24c:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a24e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a252:	3301      	adds	r3, #1
       ||
 800a254:	4293      	cmp	r3, r2
 800a256:	d16f      	bne.n	800a338 <RCCEx_PLLSAI1_Config+0x110>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a25e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a260:	f7fe fb82 	bl	8008968 <HAL_GetTick>
 800a264:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	011a      	lsls	r2, r3, #4
 800a26a:	d430      	bmi.n	800a2ce <RCCEx_PLLSAI1_Config+0xa6>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a26c:	68ab      	ldr	r3, [r5, #8]
 800a26e:	021f      	lsls	r7, r3, #8
 800a270:	b3a6      	cbz	r6, 800a2dc <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a272:	2e01      	cmp	r6, #1
 800a274:	d14d      	bne.n	800a312 <RCCEx_PLLSAI1_Config+0xea>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a276:	692a      	ldr	r2, [r5, #16]
 800a278:	6921      	ldr	r1, [r4, #16]
 800a27a:	0852      	lsrs	r2, r2, #1
 800a27c:	1e53      	subs	r3, r2, #1
 800a27e:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800a282:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800a286:	433a      	orrs	r2, r7
 800a288:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 800a28c:	6122      	str	r2, [r4, #16]
 800a28e:	e030      	b.n	800a2f2 <RCCEx_PLLSAI1_Config+0xca>
    switch(PllSai1->PLLSAI1Source)
 800a290:	2b02      	cmp	r3, #2
 800a292:	d011      	beq.n	800a2b8 <RCCEx_PLLSAI1_Config+0x90>
 800a294:	2b03      	cmp	r3, #3
 800a296:	d013      	beq.n	800a2c0 <RCCEx_PLLSAI1_Config+0x98>
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d14d      	bne.n	800a338 <RCCEx_PLLSAI1_Config+0x110>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a29c:	6812      	ldr	r2, [r2, #0]
 800a29e:	f012 0f02 	tst.w	r2, #2
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2a2:	d049      	beq.n	800a338 <RCCEx_PLLSAI1_Config+0x110>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a2a4:	68e0      	ldr	r0, [r4, #12]
 800a2a6:	686a      	ldr	r2, [r5, #4]
 800a2a8:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a2ac:	3a01      	subs	r2, #1
 800a2ae:	4318      	orrs	r0, r3
 800a2b0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2b4:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a2b6:	e7cf      	b.n	800a258 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a2b8:	6812      	ldr	r2, [r2, #0]
 800a2ba:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a2be:	e7f0      	b.n	800a2a2 <RCCEx_PLLSAI1_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a2c0:	6811      	ldr	r1, [r2, #0]
 800a2c2:	0389      	lsls	r1, r1, #14
 800a2c4:	d4ee      	bmi.n	800a2a4 <RCCEx_PLLSAI1_Config+0x7c>
 800a2c6:	6812      	ldr	r2, [r2, #0]
 800a2c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a2cc:	e7e9      	b.n	800a2a2 <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a2ce:	f7fe fb4b 	bl	8008968 <HAL_GetTick>
 800a2d2:	1bc0      	subs	r0, r0, r7
 800a2d4:	2802      	cmp	r0, #2
 800a2d6:	d9c6      	bls.n	800a266 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800a2d8:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a2dc:	6921      	ldr	r1, [r4, #16]
 800a2de:	68eb      	ldr	r3, [r5, #12]
 800a2e0:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800a2e4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a2e8:	091b      	lsrs	r3, r3, #4
 800a2ea:	4339      	orrs	r1, r7
 800a2ec:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800a2f0:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2f8:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a2fa:	f7fe fb35 	bl	8008968 <HAL_GetTick>
 800a2fe:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	d512      	bpl.n	800a32c <RCCEx_PLLSAI1_Config+0x104>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	69aa      	ldr	r2, [r5, #24]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	2000      	movs	r0, #0
  return status;
 800a310:	e7e3      	b.n	800a2da <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a312:	696b      	ldr	r3, [r5, #20]
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	085b      	lsrs	r3, r3, #1
 800a318:	1e59      	subs	r1, r3, #1
 800a31a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800a31e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a322:	433b      	orrs	r3, r7
 800a324:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	e7e2      	b.n	800a2f2 <RCCEx_PLLSAI1_Config+0xca>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a32c:	f7fe fb1c 	bl	8008968 <HAL_GetTick>
 800a330:	1b80      	subs	r0, r0, r6
 800a332:	2802      	cmp	r0, #2
 800a334:	d9e4      	bls.n	800a300 <RCCEx_PLLSAI1_Config+0xd8>
 800a336:	e7cf      	b.n	800a2d8 <RCCEx_PLLSAI1_Config+0xb0>
      status = HAL_ERROR;
 800a338:	2001      	movs	r0, #1
 800a33a:	e7ce      	b.n	800a2da <RCCEx_PLLSAI1_Config+0xb2>
 800a33c:	40021000 	.word	0x40021000

0800a340 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a340:	4a3d      	ldr	r2, [pc, #244]	; (800a438 <RCCEx_PLLSAI2_Config+0xf8>)
{
 800a342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a344:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a346:	68d1      	ldr	r1, [r2, #12]
 800a348:	6803      	ldr	r3, [r0, #0]
 800a34a:	f011 0f03 	tst.w	r1, #3
{
 800a34e:	4605      	mov	r5, r0
 800a350:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a352:	d027      	beq.n	800a3a4 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a354:	68d1      	ldr	r1, [r2, #12]
 800a356:	f001 0103 	and.w	r1, r1, #3
 800a35a:	4299      	cmp	r1, r3
 800a35c:	d169      	bne.n	800a432 <RCCEx_PLLSAI2_Config+0xf2>
       ||
 800a35e:	2900      	cmp	r1, #0
 800a360:	d067      	beq.n	800a432 <RCCEx_PLLSAI2_Config+0xf2>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a362:	68d3      	ldr	r3, [r2, #12]
       ||
 800a364:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a366:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a36a:	3301      	adds	r3, #1
       ||
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d160      	bne.n	800a432 <RCCEx_PLLSAI2_Config+0xf2>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a376:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a378:	f7fe faf6 	bl	8008968 <HAL_GetTick>
 800a37c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	009a      	lsls	r2, r3, #2
 800a382:	d42e      	bmi.n	800a3e2 <RCCEx_PLLSAI2_Config+0xa2>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a384:	68ab      	ldr	r3, [r5, #8]
 800a386:	0218      	lsls	r0, r3, #8
 800a388:	b396      	cbz	r6, 800a3f0 <RCCEx_PLLSAI2_Config+0xb0>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a38a:	6963      	ldr	r3, [r4, #20]
 800a38c:	6929      	ldr	r1, [r5, #16]
 800a38e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a392:	0849      	lsrs	r1, r1, #1
 800a394:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a398:	3901      	subs	r1, #1
 800a39a:	4303      	orrs	r3, r0
 800a39c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a3a0:	6163      	str	r3, [r4, #20]
 800a3a2:	e030      	b.n	800a406 <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d011      	beq.n	800a3cc <RCCEx_PLLSAI2_Config+0x8c>
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d013      	beq.n	800a3d4 <RCCEx_PLLSAI2_Config+0x94>
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d140      	bne.n	800a432 <RCCEx_PLLSAI2_Config+0xf2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	f012 0f02 	tst.w	r2, #2
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a3b6:	d03c      	beq.n	800a432 <RCCEx_PLLSAI2_Config+0xf2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a3b8:	68e0      	ldr	r0, [r4, #12]
 800a3ba:	686a      	ldr	r2, [r5, #4]
 800a3bc:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a3c0:	3a01      	subs	r2, #1
 800a3c2:	4318      	orrs	r0, r3
 800a3c4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a3c8:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a3ca:	e7d1      	b.n	800a370 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a3cc:	6812      	ldr	r2, [r2, #0]
 800a3ce:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a3d2:	e7f0      	b.n	800a3b6 <RCCEx_PLLSAI2_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a3d4:	6811      	ldr	r1, [r2, #0]
 800a3d6:	0389      	lsls	r1, r1, #14
 800a3d8:	d4ee      	bmi.n	800a3b8 <RCCEx_PLLSAI2_Config+0x78>
 800a3da:	6812      	ldr	r2, [r2, #0]
 800a3dc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a3e0:	e7e9      	b.n	800a3b6 <RCCEx_PLLSAI2_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a3e2:	f7fe fac1 	bl	8008968 <HAL_GetTick>
 800a3e6:	1bc0      	subs	r0, r0, r7
 800a3e8:	2802      	cmp	r0, #2
 800a3ea:	d9c8      	bls.n	800a37e <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800a3ec:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a3f0:	6962      	ldr	r2, [r4, #20]
 800a3f2:	68eb      	ldr	r3, [r5, #12]
 800a3f4:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800a3f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a3fc:	091b      	lsrs	r3, r3, #4
 800a3fe:	4302      	orrs	r2, r0
 800a400:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800a404:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a40c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a40e:	f7fe faab 	bl	8008968 <HAL_GetTick>
 800a412:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	d505      	bpl.n	800a426 <RCCEx_PLLSAI2_Config+0xe6>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a41a:	6963      	ldr	r3, [r4, #20]
 800a41c:	696a      	ldr	r2, [r5, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	6163      	str	r3, [r4, #20]
 800a422:	2000      	movs	r0, #0
  return status;
 800a424:	e7e3      	b.n	800a3ee <RCCEx_PLLSAI2_Config+0xae>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a426:	f7fe fa9f 	bl	8008968 <HAL_GetTick>
 800a42a:	1b80      	subs	r0, r0, r6
 800a42c:	2802      	cmp	r0, #2
 800a42e:	d9f1      	bls.n	800a414 <RCCEx_PLLSAI2_Config+0xd4>
 800a430:	e7dc      	b.n	800a3ec <RCCEx_PLLSAI2_Config+0xac>
      status = HAL_ERROR;
 800a432:	2001      	movs	r0, #1
 800a434:	e7db      	b.n	800a3ee <RCCEx_PLLSAI2_Config+0xae>
 800a436:	bf00      	nop
 800a438:	40021000 	.word	0x40021000

0800a43c <HAL_RCCEx_PeriphCLKConfig>:
{
 800a43c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a440:	6806      	ldr	r6, [r0, #0]
 800a442:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800a446:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a448:	d009      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a44a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a44c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a450:	d022      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a452:	d813      	bhi.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a454:	b331      	cbz	r1, 800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800a456:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a45a:	d02a      	beq.n	800a4b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a45c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	04d8      	lsls	r0, r3, #19
 800a462:	d509      	bpl.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a464:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a466:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a46a:	d02c      	beq.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800a46c:	d826      	bhi.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a46e:	b381      	cbz	r1, 800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 800a470:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a474:	d070      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800a476:	2601      	movs	r6, #1
 800a478:	4635      	mov	r5, r6
 800a47a:	e039      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a47c:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800a480:	d1ec      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a482:	4ab5      	ldr	r2, [pc, #724]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a484:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a486:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a48a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a48e:	430b      	orrs	r3, r1
 800a490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800a494:	2600      	movs	r6, #0
 800a496:	e7e2      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a498:	4aaf      	ldr	r2, [pc, #700]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a49a:	68d3      	ldr	r3, [r2, #12]
 800a49c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4a0:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800a4a2:	e7ee      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a4a4:	3004      	adds	r0, #4
 800a4a6:	f7ff febf 	bl	800a228 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a4aa:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d1d6      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x22>
 800a4b0:	e7e7      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	3020      	adds	r0, #32
 800a4b6:	f7ff ff43 	bl	800a340 <RCCEx_PLLSAI2_Config>
 800a4ba:	e7f6      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a4bc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a4c0:	d1d9      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a4c2:	4635      	mov	r5, r6
 800a4c4:	e009      	b.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a4c6:	4aa4      	ldr	r2, [pc, #656]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a4c8:	68d3      	ldr	r3, [r2, #12]
 800a4ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4ce:	60d3      	str	r3, [r2, #12]
      break;
 800a4d0:	e7f7      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a4d2:	1d20      	adds	r0, r4, #4
 800a4d4:	f7ff fea8 	bl	800a228 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a4d8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a4da:	2d00      	cmp	r5, #0
 800a4dc:	d142      	bne.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a4de:	4a9e      	ldr	r2, [pc, #632]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a4e0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a4e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a4e6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a4ea:	430b      	orrs	r3, r1
 800a4ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	0399      	lsls	r1, r3, #14
 800a4f4:	f140 815e 	bpl.w	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4f8:	4f97      	ldr	r7, [pc, #604]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a4fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4fc:	00da      	lsls	r2, r3, #3
 800a4fe:	d433      	bmi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a506:	65bb      	str	r3, [r7, #88]	; 0x58
 800a508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a50a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a512:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a516:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800a75c <HAL_RCCEx_PeriphCLKConfig+0x320>
 800a51a:	f8d9 3000 	ldr.w	r3, [r9]
 800a51e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a522:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800a526:	f7fe fa1f 	bl	8008968 <HAL_GetTick>
 800a52a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800a52c:	f8d9 3000 	ldr.w	r3, [r9]
 800a530:	05db      	lsls	r3, r3, #23
 800a532:	d51c      	bpl.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 800a534:	bb15      	cbnz	r5, 800a57c <HAL_RCCEx_PeriphCLKConfig+0x140>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a53a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a53e:	f040 810f 	bne.w	800a760 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a542:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a546:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a54e:	4313      	orrs	r3, r2
 800a550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a554:	4635      	mov	r5, r6
 800a556:	e011      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a558:	2100      	movs	r1, #0
 800a55a:	f104 0020 	add.w	r0, r4, #32
 800a55e:	f7ff feef 	bl	800a340 <RCCEx_PLLSAI2_Config>
 800a562:	e7b9      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800a564:	462e      	mov	r6, r5
 800a566:	e7c3      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800a568:	f04f 0800 	mov.w	r8, #0
 800a56c:	e7d3      	b.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xda>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a56e:	f7fe f9fb 	bl	8008968 <HAL_GetTick>
 800a572:	eba0 000a 	sub.w	r0, r0, sl
 800a576:	2802      	cmp	r0, #2
 800a578:	d9d8      	bls.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800a57a:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800a57c:	f1b8 0f00 	cmp.w	r8, #0
 800a580:	d003      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a588:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	07da      	lsls	r2, r3, #31
 800a58e:	d508      	bpl.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a590:	4971      	ldr	r1, [pc, #452]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a592:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a594:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a598:	f022 0203 	bic.w	r2, r2, #3
 800a59c:	4302      	orrs	r2, r0
 800a59e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a5a2:	079f      	lsls	r7, r3, #30
 800a5a4:	d508      	bpl.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a5a6:	496c      	ldr	r1, [pc, #432]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a5a8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a5aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a5ae:	f022 020c 	bic.w	r2, r2, #12
 800a5b2:	4302      	orrs	r2, r0
 800a5b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a5b8:	075e      	lsls	r6, r3, #29
 800a5ba:	d508      	bpl.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a5bc:	4966      	ldr	r1, [pc, #408]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a5be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a5c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a5c4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a5c8:	4302      	orrs	r2, r0
 800a5ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5ce:	0718      	lsls	r0, r3, #28
 800a5d0:	d508      	bpl.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a5d2:	4961      	ldr	r1, [pc, #388]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a5d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a5d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a5da:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a5de:	4302      	orrs	r2, r0
 800a5e0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a5e4:	06d9      	lsls	r1, r3, #27
 800a5e6:	d508      	bpl.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a5e8:	495b      	ldr	r1, [pc, #364]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a5ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a5ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a5f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a5f4:	4302      	orrs	r2, r0
 800a5f6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a5fa:	069a      	lsls	r2, r3, #26
 800a5fc:	d508      	bpl.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a5fe:	4956      	ldr	r1, [pc, #344]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a600:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a602:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a606:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a60a:	4302      	orrs	r2, r0
 800a60c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a610:	059f      	lsls	r7, r3, #22
 800a612:	d508      	bpl.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a614:	4950      	ldr	r1, [pc, #320]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a616:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a618:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a61c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a620:	4302      	orrs	r2, r0
 800a622:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a626:	055e      	lsls	r6, r3, #21
 800a628:	d508      	bpl.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a62a:	494b      	ldr	r1, [pc, #300]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a62c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a62e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a632:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a636:	4302      	orrs	r2, r0
 800a638:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a63c:	0658      	lsls	r0, r3, #25
 800a63e:	d508      	bpl.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a640:	4945      	ldr	r1, [pc, #276]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a642:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a644:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a648:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a64c:	4302      	orrs	r2, r0
 800a64e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a652:	0619      	lsls	r1, r3, #24
 800a654:	d508      	bpl.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a656:	4940      	ldr	r1, [pc, #256]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a65a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a65e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a662:	4302      	orrs	r2, r0
 800a664:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a668:	05da      	lsls	r2, r3, #23
 800a66a:	d508      	bpl.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a66c:	493a      	ldr	r1, [pc, #232]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a66e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a670:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a674:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a678:	4302      	orrs	r2, r0
 800a67a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a67e:	049b      	lsls	r3, r3, #18
 800a680:	d510      	bpl.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a682:	4a35      	ldr	r2, [pc, #212]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a684:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a686:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a68a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a68e:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a690:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a698:	f040 808e 	bne.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a69c:	68d3      	ldr	r3, [r2, #12]
 800a69e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6a2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	031f      	lsls	r7, r3, #12
 800a6a8:	d510      	bpl.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a6aa:	4a2b      	ldr	r2, [pc, #172]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a6ac:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a6ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a6b2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a6b6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a6b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a6bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a6c0:	f040 8086 	bne.w	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6c4:	68d3      	ldr	r3, [r2, #12]
 800a6c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6ca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	035e      	lsls	r6, r3, #13
 800a6d0:	d50f      	bpl.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6d2:	4a21      	ldr	r2, [pc, #132]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a6d4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a6d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a6da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a6de:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a6e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a6e8:	d17e      	bne.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6ea:	68d3      	ldr	r3, [r2, #12]
 800a6ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6f0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	0458      	lsls	r0, r3, #17
 800a6f6:	d512      	bpl.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6f8:	4917      	ldr	r1, [pc, #92]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a6fa:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a6fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a700:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a704:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a706:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a70a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a70e:	d176      	bne.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a710:	2102      	movs	r1, #2
 800a712:	1d20      	adds	r0, r4, #4
 800a714:	f7ff fd88 	bl	800a228 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a718:	2800      	cmp	r0, #0
 800a71a:	bf18      	it	ne
 800a71c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a71e:	6822      	ldr	r2, [r4, #0]
 800a720:	0411      	lsls	r1, r2, #16
 800a722:	d508      	bpl.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a724:	490c      	ldr	r1, [pc, #48]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a726:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a728:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a72c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a730:	4303      	orrs	r3, r0
 800a732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a736:	03d3      	lsls	r3, r2, #15
 800a738:	d509      	bpl.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a73a:	4a07      	ldr	r2, [pc, #28]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a73c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a740:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a748:	430b      	orrs	r3, r1
 800a74a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800a74e:	4628      	mov	r0, r5
 800a750:	b002      	add	sp, #8
 800a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a756:	bf00      	nop
 800a758:	40021000 	.word	0x40021000
 800a75c:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a760:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a764:	4293      	cmp	r3, r2
 800a766:	f43f aeec 	beq.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a76a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a76e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a77a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a77e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a786:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800a78c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a790:	f57f aed7 	bpl.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800a794:	f7fe f8e8 	bl	8008968 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a798:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a79c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a79e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7a2:	0799      	lsls	r1, r3, #30
 800a7a4:	f53f aecd 	bmi.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7a8:	f7fe f8de 	bl	8008968 <HAL_GetTick>
 800a7ac:	1b40      	subs	r0, r0, r5
 800a7ae:	4548      	cmp	r0, r9
 800a7b0:	d9f5      	bls.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a7b2:	e6e2      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800a7b4:	4635      	mov	r5, r6
 800a7b6:	e6e8      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a7b8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a7bc:	f47f af72 	bne.w	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	1d20      	adds	r0, r4, #4
 800a7c4:	f7ff fd30 	bl	800a228 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	bf18      	it	ne
 800a7cc:	4605      	movne	r5, r0
 800a7ce:	e769      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a7d0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a7d4:	f47f af7a 	bne.w	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a7d8:	2101      	movs	r1, #1
 800a7da:	1d20      	adds	r0, r4, #4
 800a7dc:	f7ff fd24 	bl	800a228 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	bf18      	it	ne
 800a7e4:	4605      	movne	r5, r0
 800a7e6:	e771      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a7e8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a7ec:	d181      	bne.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	1d20      	adds	r0, r4, #4
 800a7f2:	f7ff fd19 	bl	800a228 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	bf18      	it	ne
 800a7fa:	4605      	movne	r5, r0
 800a7fc:	e779      	b.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a7fe:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800a802:	d18c      	bne.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a804:	2102      	movs	r1, #2
 800a806:	f104 0020 	add.w	r0, r4, #32
 800a80a:	f7ff fd99 	bl	800a340 <RCCEx_PLLSAI2_Config>
 800a80e:	e783      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

0800a810 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a810:	4a02      	ldr	r2, [pc, #8]	; (800a81c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800a812:	6813      	ldr	r3, [r2, #0]
 800a814:	f043 0304 	orr.w	r3, r3, #4
 800a818:	6013      	str	r3, [r2, #0]
}
 800a81a:	4770      	bx	lr
 800a81c:	40021000 	.word	0x40021000

0800a820 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 800a820:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 800a822:	4604      	mov	r4, r0
 800a824:	b188      	cbz	r0, 800a84a <HAL_RNG_Init+0x2a>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* defined(RNG_CR_CED) */

  if(hrng->State == HAL_RNG_STATE_RESET)
 800a826:	7943      	ldrb	r3, [r0, #5]
 800a828:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a82c:	b913      	cbnz	r3, 800a834 <HAL_RNG_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a82e:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a830:	f7f9 fe1a 	bl	8004468 <HAL_RNG_MspInit>
  /* Clock Error Detection configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a834:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800a836:	2302      	movs	r3, #2
 800a838:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800a83a:	6813      	ldr	r3, [r2, #0]
 800a83c:	f043 0304 	orr.w	r3, r3, #4
 800a840:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a842:	2301      	movs	r3, #1
 800a844:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800a846:	2000      	movs	r0, #0
}
 800a848:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a84a:	2001      	movs	r0, #1
 800a84c:	e7fc      	b.n	800a848 <HAL_RNG_Init+0x28>

0800a84e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;    
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng); 
 800a850:	7903      	ldrb	r3, [r0, #4]
 800a852:	2b01      	cmp	r3, #1
{
 800a854:	4604      	mov	r4, r0
 800a856:	460e      	mov	r6, r1
  __HAL_LOCK(hrng); 
 800a858:	d021      	beq.n	800a89e <HAL_RNG_GenerateRandomNumber+0x50>
  
  /* Check RNS peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 800a85a:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng); 
 800a85c:	2001      	movs	r0, #1
  if(hrng->State == HAL_RNG_STATE_READY)
 800a85e:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng); 
 800a860:	7120      	strb	r0, [r4, #4]
  if(hrng->State == HAL_RNG_STATE_READY)
 800a862:	d10f      	bne.n	800a884 <HAL_RNG_GenerateRandomNumber+0x36>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 800a864:	2302      	movs	r3, #2
 800a866:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a868:	f7fe f87e 	bl	8008968 <HAL_GetTick>
 800a86c:	4607      	mov	r7, r0
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a86e:	6822      	ldr	r2, [r4, #0]
 800a870:	6855      	ldr	r5, [r2, #4]
 800a872:	f015 0501 	ands.w	r5, r5, #1
 800a876:	d008      	beq.n	800a88a <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_TIMEOUT;
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a878:	6893      	ldr	r3, [r2, #8]
 800a87a:	60a3      	str	r3, [r4, #8]
    *random32bit = hrng->RandomNumber;
 800a87c:	6033      	str	r3, [r6, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 800a87e:	2301      	movs	r3, #1
 800a880:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800a882:	2000      	movs	r0, #0
  {
    status = HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a884:	2300      	movs	r3, #0
 800a886:	7123      	strb	r3, [r4, #4]

  return status;
 800a888:	e008      	b.n	800a89c <HAL_RNG_GenerateRandomNumber+0x4e>
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800a88a:	f7fe f86d 	bl	8008968 <HAL_GetTick>
 800a88e:	1bc0      	subs	r0, r0, r7
 800a890:	2802      	cmp	r0, #2
 800a892:	d9ec      	bls.n	800a86e <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_ERROR;
 800a894:	2304      	movs	r3, #4
 800a896:	7163      	strb	r3, [r4, #5]
        __HAL_UNLOCK(hrng);
 800a898:	7125      	strb	r5, [r4, #4]
        return HAL_TIMEOUT;
 800a89a:	2003      	movs	r0, #3
}
 800a89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng); 
 800a89e:	2002      	movs	r0, #2
 800a8a0:	e7fc      	b.n	800a89c <HAL_RNG_GenerateRandomNumber+0x4e>

0800a8a2 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a8a2:	6802      	ldr	r2, [r0, #0]
{
 800a8a4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a8a6:	68d3      	ldr	r3, [r2, #12]
 800a8a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8ac:	60d3      	str	r3, [r2, #12]
{
 800a8ae:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800a8b0:	f7fe f85a 	bl	8008968 <HAL_GetTick>
 800a8b4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	069b      	lsls	r3, r3, #26
 800a8bc:	d501      	bpl.n	800a8c2 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800a8be:	2000      	movs	r0, #0
}
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8c2:	f7fe f851 	bl	8008968 <HAL_GetTick>
 800a8c6:	1b40      	subs	r0, r0, r5
 800a8c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a8cc:	d9f3      	bls.n	800a8b6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800a8ce:	2003      	movs	r0, #3
 800a8d0:	e7f6      	b.n	800a8c0 <HAL_RTC_WaitForSynchro+0x1e>

0800a8d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a8d2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a8d4:	6803      	ldr	r3, [r0, #0]
 800a8d6:	68da      	ldr	r2, [r3, #12]
 800a8d8:	0652      	lsls	r2, r2, #25
{
 800a8da:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a8dc:	d501      	bpl.n	800a8e2 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800a8de:	2000      	movs	r0, #0
}
 800a8e0:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800a8e8:	f7fe f83e 	bl	8008968 <HAL_GetTick>
 800a8ec:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	065b      	lsls	r3, r3, #25
 800a8f4:	d4f3      	bmi.n	800a8de <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8f6:	f7fe f837 	bl	8008968 <HAL_GetTick>
 800a8fa:	1b40      	subs	r0, r0, r5
 800a8fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a900:	d9f5      	bls.n	800a8ee <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800a902:	2003      	movs	r0, #3
 800a904:	e7ec      	b.n	800a8e0 <RTC_EnterInitMode+0xe>

0800a906 <HAL_RTC_Init>:
{
 800a906:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800a908:	4604      	mov	r4, r0
 800a90a:	b1d8      	cbz	r0, 800a944 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a90c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800a910:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a914:	b91b      	cbnz	r3, 800a91e <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800a916:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800a91a:	f7f9 fdbb 	bl	8004494 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a91e:	2302      	movs	r3, #2
 800a920:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	22ca      	movs	r2, #202	; 0xca
 800a928:	625a      	str	r2, [r3, #36]	; 0x24
 800a92a:	2253      	movs	r2, #83	; 0x53
 800a92c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff ffcf 	bl	800a8d2 <RTC_EnterInitMode>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	4605      	mov	r5, r0
 800a938:	b130      	cbz	r0, 800a948 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a93a:	22ff      	movs	r2, #255	; 0xff
 800a93c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a93e:	2304      	movs	r3, #4
 800a940:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800a944:	2501      	movs	r5, #1
 800a946:	e031      	b.n	800a9ac <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a948:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a94a:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a94c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800a950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a954:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a956:	6862      	ldr	r2, [r4, #4]
 800a958:	6899      	ldr	r1, [r3, #8]
 800a95a:	4302      	orrs	r2, r0
 800a95c:	69a0      	ldr	r0, [r4, #24]
 800a95e:	4302      	orrs	r2, r0
 800a960:	430a      	orrs	r2, r1
 800a962:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a964:	68e2      	ldr	r2, [r4, #12]
 800a966:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a968:	691a      	ldr	r2, [r3, #16]
 800a96a:	68a1      	ldr	r1, [r4, #8]
 800a96c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a970:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a972:	68da      	ldr	r2, [r3, #12]
 800a974:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a978:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	069b      	lsls	r3, r3, #26
 800a97e:	d405      	bmi.n	800a98c <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a980:	4620      	mov	r0, r4
 800a982:	f7ff ff8e 	bl	800a8a2 <HAL_RTC_WaitForSynchro>
 800a986:	b108      	cbz	r0, 800a98c <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	e7d6      	b.n	800a93a <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a98c:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a98e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a992:	f022 0203 	bic.w	r2, r2, #3
 800a996:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a998:	69e2      	ldr	r2, [r4, #28]
 800a99a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a99c:	4302      	orrs	r2, r0
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9a2:	22ff      	movs	r2, #255	; 0xff
 800a9a4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}

0800a9b0 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800a9b0:	2300      	movs	r3, #0

  while(Value >= 10)
 800a9b2:	2809      	cmp	r0, #9
 800a9b4:	d803      	bhi.n	800a9be <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a9b6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800a9ba:	b2c0      	uxtb	r0, r0
 800a9bc:	4770      	bx	lr
    Value -= 10;
 800a9be:	380a      	subs	r0, #10
    bcdhigh++;
 800a9c0:	3301      	adds	r3, #1
    Value -= 10;
 800a9c2:	b2c0      	uxtb	r0, r0
 800a9c4:	e7f5      	b.n	800a9b2 <RTC_ByteToBcd2+0x2>

0800a9c6 <HAL_RTC_SetTime>:
{
 800a9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800a9ca:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a9ce:	2b01      	cmp	r3, #1
{
 800a9d0:	4605      	mov	r5, r0
 800a9d2:	460e      	mov	r6, r1
 800a9d4:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 800a9d8:	d032      	beq.n	800aa40 <HAL_RTC_SetTime+0x7a>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9e0:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 800a9e4:	6801      	ldr	r1, [r0, #0]
 800a9e6:	7874      	ldrb	r4, [r6, #1]
 800a9e8:	7830      	ldrb	r0, [r6, #0]
 800a9ea:	78b7      	ldrb	r7, [r6, #2]
 800a9ec:	bb5a      	cbnz	r2, 800aa46 <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a9ee:	688a      	ldr	r2, [r1, #8]
 800a9f0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800a9f4:	bf08      	it	eq
 800a9f6:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800a9f8:	f7ff ffda 	bl	800a9b0 <RTC_ByteToBcd2>
 800a9fc:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f7ff ffd6 	bl	800a9b0 <RTC_ByteToBcd2>
 800aa04:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aa06:	4638      	mov	r0, r7
 800aa08:	f7ff ffd2 	bl	800a9b0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800aa0c:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aa0e:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800aa12:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 800aa16:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa1a:	23ca      	movs	r3, #202	; 0xca
 800aa1c:	624b      	str	r3, [r1, #36]	; 0x24
 800aa1e:	2353      	movs	r3, #83	; 0x53
 800aa20:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800aa22:	4628      	mov	r0, r5
 800aa24:	f7ff ff55 	bl	800a8d2 <RTC_EnterInitMode>
 800aa28:	682a      	ldr	r2, [r5, #0]
 800aa2a:	4607      	mov	r7, r0
 800aa2c:	b1c0      	cbz	r0, 800aa60 <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa2e:	23ff      	movs	r3, #255	; 0xff
 800aa30:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aa32:	2304      	movs	r3, #4
 800aa34:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 800aa3e:	2701      	movs	r7, #1
}
 800aa40:	4638      	mov	r0, r7
 800aa42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa46:	688a      	ldr	r2, [r1, #8]
 800aa48:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800aa4c:	bf08      	it	eq
 800aa4e:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800aa50:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16));
 800aa52:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800aa54:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800aa58:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800aa5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800aa5e:	e7dc      	b.n	800aa1a <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aa60:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800aa64:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800aa68:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800aa6a:	6893      	ldr	r3, [r2, #8]
 800aa6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa70:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aa72:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800aa76:	6891      	ldr	r1, [r2, #8]
 800aa78:	4303      	orrs	r3, r0
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800aa7e:	68d3      	ldr	r3, [r2, #12]
 800aa80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa84:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa86:	6893      	ldr	r3, [r2, #8]
 800aa88:	069b      	lsls	r3, r3, #26
 800aa8a:	d40c      	bmi.n	800aaa6 <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f7ff ff08 	bl	800a8a2 <HAL_RTC_WaitForSynchro>
 800aa92:	b140      	cbz	r0, 800aaa6 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa94:	682b      	ldr	r3, [r5, #0]
 800aa96:	22ff      	movs	r2, #255	; 0xff
 800aa98:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa9a:	2304      	movs	r3, #4
 800aa9c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800aaa0:	f885 7020 	strb.w	r7, [r5, #32]
 800aaa4:	e7cb      	b.n	800aa3e <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaa6:	682b      	ldr	r3, [r5, #0]
 800aaa8:	22ff      	movs	r2, #255	; 0xff
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 800aab2:	2300      	movs	r3, #0
 800aab4:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 800aab8:	e7c2      	b.n	800aa40 <HAL_RTC_SetTime+0x7a>

0800aaba <HAL_RTC_SetDate>:
{
 800aaba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800aabc:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aac0:	2b01      	cmp	r3, #1
{
 800aac2:	4604      	mov	r4, r0
 800aac4:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 800aac8:	d035      	beq.n	800ab36 <HAL_RTC_SetDate+0x7c>
 800aaca:	2301      	movs	r3, #1
 800aacc:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aad0:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800aad4:	780d      	ldrb	r5, [r1, #0]
 800aad6:	784b      	ldrb	r3, [r1, #1]
 800aad8:	788f      	ldrb	r7, [r1, #2]
 800aada:	78c8      	ldrb	r0, [r1, #3]
 800aadc:	036d      	lsls	r5, r5, #13
 800aade:	2a00      	cmp	r2, #0
 800aae0:	d14e      	bne.n	800ab80 <HAL_RTC_SetDate+0xc6>
 800aae2:	06da      	lsls	r2, r3, #27
 800aae4:	d503      	bpl.n	800aaee <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800aae6:	f023 0310 	bic.w	r3, r3, #16
 800aaea:	330a      	adds	r3, #10
 800aaec:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800aaee:	f7ff ff5f 	bl	800a9b0 <RTC_ByteToBcd2>
 800aaf2:	4606      	mov	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800aaf4:	7848      	ldrb	r0, [r1, #1]
 800aaf6:	f7ff ff5b 	bl	800a9b0 <RTC_ByteToBcd2>
 800aafa:	4601      	mov	r1, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800aafc:	4638      	mov	r0, r7
 800aafe:	f7ff ff57 	bl	800a9b0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ab02:	ea40 0205 	orr.w	r2, r0, r5
 800ab06:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 800ab0a:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	22ca      	movs	r2, #202	; 0xca
 800ab12:	625a      	str	r2, [r3, #36]	; 0x24
 800ab14:	2253      	movs	r2, #83	; 0x53
 800ab16:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7ff feda 	bl	800a8d2 <RTC_EnterInitMode>
 800ab1e:	6822      	ldr	r2, [r4, #0]
 800ab20:	4606      	mov	r6, r0
 800ab22:	b150      	cbz	r0, 800ab3a <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab24:	23ff      	movs	r3, #255	; 0xff
 800ab26:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ab28:	2304      	movs	r3, #4
 800ab2a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800ab34:	2601      	movs	r6, #1
}
 800ab36:	4630      	mov	r0, r6
 800ab38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ab3a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800ab3e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800ab42:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ab44:	68d3      	ldr	r3, [r2, #12]
 800ab46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab4a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ab4c:	6893      	ldr	r3, [r2, #8]
 800ab4e:	069b      	lsls	r3, r3, #26
 800ab50:	d40c      	bmi.n	800ab6c <HAL_RTC_SetDate+0xb2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ab52:	4620      	mov	r0, r4
 800ab54:	f7ff fea5 	bl	800a8a2 <HAL_RTC_WaitForSynchro>
 800ab58:	b140      	cbz	r0, 800ab6c <HAL_RTC_SetDate+0xb2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ab60:	2304      	movs	r3, #4
 800ab62:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ab66:	f884 6020 	strb.w	r6, [r4, #32]
 800ab6a:	e7e3      	b.n	800ab34 <HAL_RTC_SetDate+0x7a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	22ff      	movs	r2, #255	; 0xff
 800ab70:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800ab72:	2301      	movs	r3, #1
 800ab74:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 800ab7e:	e7da      	b.n	800ab36 <HAL_RTC_SetDate+0x7c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ab80:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800ab84:	433d      	orrs	r5, r7
 800ab86:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800ab8a:	e7c0      	b.n	800ab0e <HAL_RTC_SetDate+0x54>

0800ab8c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ab8c:	0903      	lsrs	r3, r0, #4
 800ab8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800ab92:	f000 000f 	and.w	r0, r0, #15
 800ab96:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800ab9a:	b2c0      	uxtb	r0, r0
 800ab9c:	4770      	bx	lr

0800ab9e <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ab9e:	6803      	ldr	r3, [r0, #0]
 800aba0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800aba2:	6048      	str	r0, [r1, #4]
{
 800aba4:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800aba6:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800aba8:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800abaa:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800abae:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800abb2:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800abb6:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800abb8:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800abbc:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800abc0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800abc4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800abc6:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800abc8:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800abca:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800abcc:	b952      	cbnz	r2, 800abe4 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800abce:	f7ff ffdd 	bl	800ab8c <RTC_Bcd2ToByte>
 800abd2:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800abd4:	4630      	mov	r0, r6
 800abd6:	f7ff ffd9 	bl	800ab8c <RTC_Bcd2ToByte>
 800abda:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800abdc:	4620      	mov	r0, r4
 800abde:	f7ff ffd5 	bl	800ab8c <RTC_Bcd2ToByte>
 800abe2:	7088      	strb	r0, [r1, #2]
}
 800abe4:	2000      	movs	r0, #0
 800abe6:	bd70      	pop	{r4, r5, r6, pc}

0800abe8 <HAL_RTC_GetDate>:
{
 800abe8:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800abea:	6803      	ldr	r3, [r0, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800abee:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800abf2:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800abf6:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800abfa:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800abfe:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800ac00:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ac02:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800ac04:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800ac06:	b952      	cbnz	r2, 800ac1e <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ac08:	f7ff ffc0 	bl	800ab8c <RTC_Bcd2ToByte>
 800ac0c:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ac0e:	4628      	mov	r0, r5
 800ac10:	f7ff ffbc 	bl	800ab8c <RTC_Bcd2ToByte>
 800ac14:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ac16:	4620      	mov	r0, r4
 800ac18:	f7ff ffb8 	bl	800ab8c <RTC_Bcd2ToByte>
 800ac1c:	7088      	strb	r0, [r1, #2]
}
 800ac1e:	2000      	movs	r0, #0
 800ac20:	bd38      	pop	{r3, r4, r5, pc}

0800ac22 <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac22:	6803      	ldr	r3, [r0, #0]
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ac2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac2c:	6842      	ldr	r2, [r0, #4]
 800ac2e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ac32:	d10a      	bne.n	800ac4a <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 800ac34:	6882      	ldr	r2, [r0, #8]
 800ac36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ac3a:	d002      	beq.n	800ac42 <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac3c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ac40:	d103      	bne.n	800ac4a <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ac4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ac50:	d107      	bne.n	800ac62 <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac62:	2301      	movs	r3, #1
 800ac64:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800ac6e:	2003      	movs	r0, #3
 800ac70:	4770      	bx	lr

0800ac72 <SPI_WaitFlagStateUntilTimeout>:
{
 800ac72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac76:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	4616      	mov	r6, r2
 800ac80:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac82:	682a      	ldr	r2, [r5, #0]
 800ac84:	6893      	ldr	r3, [r2, #8]
 800ac86:	ea37 0303 	bics.w	r3, r7, r3
 800ac8a:	bf0c      	ite	eq
 800ac8c:	2301      	moveq	r3, #1
 800ac8e:	2300      	movne	r3, #0
 800ac90:	429e      	cmp	r6, r3
 800ac92:	d102      	bne.n	800ac9a <SPI_WaitFlagStateUntilTimeout+0x28>
}
 800ac94:	2000      	movs	r0, #0
 800ac96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800ac9a:	1c63      	adds	r3, r4, #1
 800ac9c:	d0f2      	beq.n	800ac84 <SPI_WaitFlagStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ac9e:	b924      	cbnz	r4, 800acaa <SPI_WaitFlagStateUntilTimeout+0x38>
 800aca0:	4628      	mov	r0, r5
}
 800aca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	f7ff bfbc 	b.w	800ac22 <SPI_WaitFifoStateUntilTimeout.part.0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800acaa:	f7fd fe5d 	bl	8008968 <HAL_GetTick>
 800acae:	eba0 0008 	sub.w	r0, r0, r8
 800acb2:	42a0      	cmp	r0, r4
 800acb4:	d3e5      	bcc.n	800ac82 <SPI_WaitFlagStateUntilTimeout+0x10>
 800acb6:	e7f3      	b.n	800aca0 <SPI_WaitFlagStateUntilTimeout+0x2e>

0800acb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800acbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acc0:	4607      	mov	r7, r0
 800acc2:	460e      	mov	r6, r1
 800acc4:	4615      	mov	r5, r2
 800acc6:	461c      	mov	r4, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	6893      	ldr	r3, [r2, #8]
 800accc:	4033      	ands	r3, r6
 800acce:	42ab      	cmp	r3, r5
 800acd0:	d103      	bne.n	800acda <SPI_WaitFifoStateUntilTimeout+0x22>
      }
    }
  }

  return HAL_OK;
}
 800acd2:	2000      	movs	r0, #0
 800acd4:	b002      	add	sp, #8
 800acd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800acda:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800acde:	d106      	bne.n	800acee <SPI_WaitFifoStateUntilTimeout+0x36>
 800ace0:	b92d      	cbnz	r5, 800acee <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800ace2:	7b13      	ldrb	r3, [r2, #12]
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800acea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800acee:	1c63      	adds	r3, r4, #1
 800acf0:	d0eb      	beq.n	800acca <SPI_WaitFifoStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800acf2:	b92c      	cbnz	r4, 800ad00 <SPI_WaitFifoStateUntilTimeout+0x48>
 800acf4:	4638      	mov	r0, r7
}
 800acf6:	b002      	add	sp, #8
 800acf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acfc:	f7ff bf91 	b.w	800ac22 <SPI_WaitFifoStateUntilTimeout.part.0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800ad00:	f7fd fe32 	bl	8008968 <HAL_GetTick>
 800ad04:	eba0 0008 	sub.w	r0, r0, r8
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d3dd      	bcc.n	800acc8 <SPI_WaitFifoStateUntilTimeout+0x10>
 800ad0c:	e7f2      	b.n	800acf4 <SPI_WaitFifoStateUntilTimeout+0x3c>

0800ad0e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ad0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad10:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad12:	6842      	ldr	r2, [r0, #4]
 800ad14:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad1c:	d10b      	bne.n	800ad36 <SPI_EndRxTransaction+0x28>
 800ad1e:	6882      	ldr	r2, [r0, #8]
 800ad20:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ad24:	d002      	beq.n	800ad2c <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad26:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ad2a:	d104      	bne.n	800ad36 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ad2c:	6821      	ldr	r1, [r4, #0]
 800ad2e:	680a      	ldr	r2, [r1, #0]
 800ad30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad34:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad36:	9600      	str	r6, [sp, #0]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	2180      	movs	r1, #128	; 0x80
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	9303      	str	r3, [sp, #12]
 800ad40:	f7ff ff97 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	4605      	mov	r5, r0
 800ad48:	b128      	cbz	r0, 800ad56 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ad4c:	f043 0320 	orr.w	r3, r3, #32
 800ad50:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad52:	2503      	movs	r5, #3
 800ad54:	e013      	b.n	800ad7e <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad56:	6862      	ldr	r2, [r4, #4]
 800ad58:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ad5c:	d10f      	bne.n	800ad7e <SPI_EndRxTransaction+0x70>
 800ad5e:	68a2      	ldr	r2, [r4, #8]
 800ad60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ad64:	d002      	beq.n	800ad6c <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad66:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ad6a:	d108      	bne.n	800ad7e <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad6c:	9600      	str	r6, [sp, #0]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad74:	4620      	mov	r0, r4
 800ad76:	f7ff ff9f 	bl	800acb8 <SPI_WaitFifoStateUntilTimeout>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d1e5      	bne.n	800ad4a <SPI_EndRxTransaction+0x3c>
}
 800ad7e:	4628      	mov	r0, r5
 800ad80:	b004      	add	sp, #16
 800ad82:	bd70      	pop	{r4, r5, r6, pc}

0800ad84 <SPI_EndRxTxTransaction>:
{
 800ad84:	b530      	push	{r4, r5, lr}
 800ad86:	b085      	sub	sp, #20
 800ad88:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad8a:	9200      	str	r2, [sp, #0]
 800ad8c:	9103      	str	r1, [sp, #12]
{
 800ad8e:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad90:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ad94:	2200      	movs	r2, #0
{
 800ad96:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad98:	f7ff ff8e 	bl	800acb8 <SPI_WaitFifoStateUntilTimeout>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	4602      	mov	r2, r0
 800ada0:	b128      	cbz	r0, 800adae <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ada2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ada4:	f043 0320 	orr.w	r3, r3, #32
 800ada8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800adaa:	2003      	movs	r0, #3
 800adac:	e011      	b.n	800add2 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800adae:	9500      	str	r5, [sp, #0]
 800adb0:	2180      	movs	r1, #128	; 0x80
 800adb2:	4620      	mov	r0, r4
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	f7ff ff5c 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	4602      	mov	r2, r0
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d1ef      	bne.n	800ada2 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800adc2:	9500      	str	r5, [sp, #0]
 800adc4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800adc8:	4620      	mov	r0, r4
 800adca:	f7ff ff75 	bl	800acb8 <SPI_WaitFifoStateUntilTimeout>
 800adce:	2800      	cmp	r0, #0
 800add0:	d1e7      	bne.n	800ada2 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 800add2:	b005      	add	sp, #20
 800add4:	bd30      	pop	{r4, r5, pc}

0800add6 <HAL_SPI_MspInit>:
}
 800add6:	4770      	bx	lr

0800add8 <HAL_SPI_Init>:
{
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800adda:	4604      	mov	r4, r0
 800addc:	2800      	cmp	r0, #0
 800adde:	d053      	beq.n	800ae88 <HAL_SPI_Init+0xb0>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ade0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800ade4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ade8:	b91b      	cbnz	r3, 800adf2 <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 800adea:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800adee:	f7ff fff2 	bl	800add6 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800adf2:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adf4:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800adf6:	2302      	movs	r3, #2
 800adf8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800adfc:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adfe:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800ae02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae06:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae08:	f04f 0300 	mov.w	r3, #0
 800ae0c:	d83e      	bhi.n	800ae8c <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ae0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae12:	d000      	beq.n	800ae16 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae14:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800ae16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ae18:	b92b      	cbnz	r3, 800ae26 <HAL_SPI_Init+0x4e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ae1a:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800ae1e:	bf8c      	ite	hi
 800ae20:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800ae22:	2301      	movls	r3, #1
 800ae24:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800ae26:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ae2a:	433b      	orrs	r3, r7
 800ae2c:	6927      	ldr	r7, [r4, #16]
 800ae2e:	69a1      	ldr	r1, [r4, #24]
 800ae30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae32:	433b      	orrs	r3, r7
 800ae34:	6967      	ldr	r7, [r4, #20]
 800ae36:	433b      	orrs	r3, r7
 800ae38:	69e7      	ldr	r7, [r4, #28]
 800ae3a:	433b      	orrs	r3, r7
 800ae3c:	6a27      	ldr	r7, [r4, #32]
 800ae3e:	433b      	orrs	r3, r7
 800ae40:	4333      	orrs	r3, r6
 800ae42:	f401 7700 	and.w	r7, r1, #512	; 0x200
 800ae46:	433b      	orrs	r3, r7
 800ae48:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800ae4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ae4c:	2b02      	cmp	r3, #2
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 800ae4e:	bf02      	ittt	eq
 800ae50:	6813      	ldreq	r3, [r2, #0]
 800ae52:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800ae56:	6013      	streq	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae5a:	431d      	orrs	r5, r3
 800ae5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae5e:	0c09      	lsrs	r1, r1, #16
 800ae60:	431d      	orrs	r5, r3
 800ae62:	f001 0104 	and.w	r1, r1, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae66:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae6a:	ea45 0501 	orr.w	r5, r5, r1
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800ae6e:	bf08      	it	eq
 800ae70:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800ae72:	ea40 0005 	orr.w	r0, r0, r5
 800ae76:	6050      	str	r0, [r2, #4]
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800ae78:	bf08      	it	eq
 800ae7a:	6113      	streq	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae7c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800ae7e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae80:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ae82:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800ae88:	2001      	movs	r0, #1
 800ae8a:	e7fc      	b.n	800ae86 <HAL_SPI_Init+0xae>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ae8c:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ae8e:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800ae92:	e7be      	b.n	800ae12 <HAL_SPI_Init+0x3a>

0800ae94 <HAL_SPI_MspDeInit>:
 800ae94:	4770      	bx	lr

0800ae96 <HAL_SPI_DeInit>:
{
 800ae96:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800ae98:	4604      	mov	r4, r0
 800ae9a:	b180      	cbz	r0, 800aebe <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800ae9c:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800aea4:	6813      	ldr	r3, [r2, #0]
 800aea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeaa:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800aeac:	f7ff fff2 	bl	800ae94 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800aeb4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800aeb8:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 800aebc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aebe:	2001      	movs	r0, #1
 800aec0:	e7fc      	b.n	800aebc <HAL_SPI_DeInit+0x26>

0800aec2 <HAL_SPI_TransmitReceive>:
{
 800aec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aec6:	b085      	sub	sp, #20
 800aec8:	4699      	mov	r9, r3
  __IO uint16_t tmpreg = 0U;
 800aeca:	2300      	movs	r3, #0
 800aecc:	f8ad 300e 	strh.w	r3, [sp, #14]
  __HAL_LOCK(hspi);
 800aed0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800aed4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800aed6:	2b01      	cmp	r3, #1
{
 800aed8:	4604      	mov	r4, r0
 800aeda:	460d      	mov	r5, r1
 800aedc:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800aede:	f000 81a4 	beq.w	800b22a <HAL_SPI_TransmitReceive+0x368>
 800aee2:	2301      	movs	r3, #1
 800aee4:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800aee8:	f7fd fd3e 	bl	8008968 <HAL_GetTick>
  tmp  = hspi->State;
 800aeec:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800aef0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800aef2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800aef4:	4680      	mov	r8, r0
  tmp  = hspi->State;
 800aef6:	b2d9      	uxtb	r1, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800aef8:	d00a      	beq.n	800af10 <HAL_SPI_TransmitReceive+0x4e>
 800aefa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800aefe:	f040 8192 	bne.w	800b226 <HAL_SPI_TransmitReceive+0x364>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f040 818e 	bne.w	800b226 <HAL_SPI_TransmitReceive+0x364>
 800af0a:	2904      	cmp	r1, #4
 800af0c:	f040 818b 	bne.w	800b226 <HAL_SPI_TransmitReceive+0x364>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800af10:	2d00      	cmp	r5, #0
 800af12:	f000 8170 	beq.w	800b1f6 <HAL_SPI_TransmitReceive+0x334>
 800af16:	2e00      	cmp	r6, #0
 800af18:	f000 816d 	beq.w	800b1f6 <HAL_SPI_TransmitReceive+0x334>
 800af1c:	f1b9 0f00 	cmp.w	r9, #0
 800af20:	f000 8169 	beq.w	800b1f6 <HAL_SPI_TransmitReceive+0x334>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af24:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af2a:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800af2c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af2e:	bf1c      	itt	ne
 800af30:	2305      	movne	r3, #5
 800af32:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af38:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af3c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800af3e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800af42:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800af46:	6823      	ldr	r3, [r4, #0]
 800af48:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800af4c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800af4e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800af52:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af56:	d107      	bne.n	800af68 <HAL_SPI_TransmitReceive+0xa6>
    SPI_RESET_CRC(hspi);
 800af58:	6819      	ldr	r1, [r3, #0]
 800af5a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800af5e:	6019      	str	r1, [r3, #0]
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800af66:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800af68:	68e0      	ldr	r0, [r4, #12]
 800af6a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800af6e:	d804      	bhi.n	800af7a <HAL_SPI_TransmitReceive+0xb8>
 800af70:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800af74:	b289      	uxth	r1, r1
 800af76:	2901      	cmp	r1, #1
 800af78:	d937      	bls.n	800afea <HAL_SPI_TransmitReceive+0x128>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af7a:	6859      	ldr	r1, [r3, #4]
 800af7c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800af80:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af82:	6819      	ldr	r1, [r3, #0]
 800af84:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800af86:	bf5e      	ittt	pl
 800af88:	6819      	ldrpl	r1, [r3, #0]
 800af8a:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 800af8e:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af90:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800af94:	d97f      	bls.n	800b096 <HAL_SPI_TransmitReceive+0x1d4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800af96:	b11a      	cbz	r2, 800afa0 <HAL_SPI_TransmitReceive+0xde>
 800af98:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800af9a:	b292      	uxth	r2, r2
 800af9c:	2a01      	cmp	r2, #1
 800af9e:	d106      	bne.n	800afae <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800afa0:	f835 2b02 	ldrh.w	r2, [r5], #2
 800afa4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800afa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800afa8:	3b01      	subs	r3, #1
 800afaa:	b29b      	uxth	r3, r3
 800afac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800afae:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	b9e3      	cbnz	r3, 800aff2 <HAL_SPI_TransmitReceive+0x130>
 800afb8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	b9c3      	cbnz	r3, 800aff2 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc6:	f040 80ff 	bne.w	800b1c8 <HAL_SPI_TransmitReceive+0x306>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800afca:	2201      	movs	r2, #1
 800afcc:	f8cd 8000 	str.w	r8, [sp]
 800afd0:	463b      	mov	r3, r7
 800afd2:	4611      	mov	r1, r2
 800afd4:	4620      	mov	r0, r4
 800afd6:	f7ff fe4c 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800afda:	2800      	cmp	r0, #0
 800afdc:	f000 80e9 	beq.w	800b1b2 <HAL_SPI_TransmitReceive+0x2f0>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800afe0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	6623      	str	r3, [r4, #96]	; 0x60
 800afe8:	e04a      	b.n	800b080 <HAL_SPI_TransmitReceive+0x1be>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800afea:	6859      	ldr	r1, [r3, #4]
 800afec:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800aff0:	e7c6      	b.n	800af80 <HAL_SPI_TransmitReceive+0xbe>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800aff2:	f1b9 0f00 	cmp.w	r9, #0
 800aff6:	d028      	beq.n	800b04a <HAL_SPI_TransmitReceive+0x188>
 800aff8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800affa:	b29b      	uxth	r3, r3
 800affc:	b32b      	cbz	r3, 800b04a <HAL_SPI_TransmitReceive+0x188>
 800affe:	6823      	ldr	r3, [r4, #0]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	0790      	lsls	r0, r2, #30
 800b004:	d521      	bpl.n	800b04a <HAL_SPI_TransmitReceive+0x188>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b006:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b00a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b00c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b00e:	3a01      	subs	r2, #1
 800b010:	b292      	uxth	r2, r2
 800b012:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b014:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
 800b018:	fa1f f989 	uxth.w	r9, r9
 800b01c:	f1b9 0f00 	cmp.w	r9, #0
 800b020:	d111      	bne.n	800b046 <HAL_SPI_TransmitReceive+0x184>
 800b022:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b024:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b028:	d10f      	bne.n	800b04a <HAL_SPI_TransmitReceive+0x188>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	0751      	lsls	r1, r2, #29
 800b02e:	d406      	bmi.n	800b03e <HAL_SPI_TransmitReceive+0x17c>
 800b030:	685a      	ldr	r2, [r3, #4]
 800b032:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b034:	bf42      	ittt	mi
 800b036:	681a      	ldrmi	r2, [r3, #0]
 800b038:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b03c:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b044:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b046:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b04a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b04e:	b29b      	uxth	r3, r3
 800b050:	b173      	cbz	r3, 800b070 <HAL_SPI_TransmitReceive+0x1ae>
 800b052:	6821      	ldr	r1, [r4, #0]
 800b054:	688a      	ldr	r2, [r1, #8]
 800b056:	f012 0201 	ands.w	r2, r2, #1
 800b05a:	d009      	beq.n	800b070 <HAL_SPI_TransmitReceive+0x1ae>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b05c:	68cb      	ldr	r3, [r1, #12]
 800b05e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b062:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b066:	3b01      	subs	r3, #1
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800b06e:	4691      	mov	r9, r2
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b070:	1c7b      	adds	r3, r7, #1
 800b072:	d09e      	beq.n	800afb2 <HAL_SPI_TransmitReceive+0xf0>
 800b074:	f7fd fc78 	bl	8008968 <HAL_GetTick>
 800b078:	eba0 0008 	sub.w	r0, r0, r8
 800b07c:	42b8      	cmp	r0, r7
 800b07e:	d398      	bcc.n	800afb2 <HAL_SPI_TransmitReceive+0xf0>
          errorcode = HAL_TIMEOUT;
 800b080:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b082:	2301      	movs	r3, #1
 800b084:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b088:	2300      	movs	r3, #0
 800b08a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b08e:	4628      	mov	r0, r5
 800b090:	b005      	add	sp, #20
 800b092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b096:	b11a      	cbz	r2, 800b0a0 <HAL_SPI_TransmitReceive+0x1de>
 800b098:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b09a:	b292      	uxth	r2, r2
 800b09c:	2a01      	cmp	r2, #1
 800b09e:	d10a      	bne.n	800b0b6 <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800b0a0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b0a2:	b292      	uxth	r2, r2
 800b0a4:	2a01      	cmp	r2, #1
 800b0a6:	d974      	bls.n	800b192 <HAL_SPI_TransmitReceive+0x2d0>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b0a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b0ac:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800b0ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b0b0:	3b02      	subs	r3, #2
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b0b6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	b92b      	cbnz	r3, 800b0cc <HAL_SPI_TransmitReceive+0x20a>
 800b0c0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f43f af7a 	beq.w	800afc0 <HAL_SPI_TransmitReceive+0xfe>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b0cc:	f1b9 0f00 	cmp.w	r9, #0
 800b0d0:	d035      	beq.n	800b13e <HAL_SPI_TransmitReceive+0x27c>
 800b0d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d031      	beq.n	800b13e <HAL_SPI_TransmitReceive+0x27c>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	0790      	lsls	r0, r2, #30
 800b0e0:	d52d      	bpl.n	800b13e <HAL_SPI_TransmitReceive+0x27c>
        if (hspi->TxXferCount > 1U)
 800b0e2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b0e4:	b292      	uxth	r2, r2
 800b0e6:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b0e8:	bf8b      	itete	hi
 800b0ea:	f835 2b02 	ldrhhi.w	r2, [r5], #2
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b0ee:	f815 2b01 	ldrbls.w	r2, [r5], #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b0f2:	60da      	strhi	r2, [r3, #12]
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b0f4:	731a      	strbls	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b0f6:	bf8b      	itete	hi
 800b0f8:	8fe3      	ldrhhi	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount--;
 800b0fa:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount -= 2U;
 800b0fc:	3b02      	subhi	r3, #2
          hspi->TxXferCount--;
 800b0fe:	f103 33ff 	addls.w	r3, r3, #4294967295
 800b102:	b29b      	uxth	r3, r3
 800b104:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b106:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
 800b10a:	fa1f f989 	uxth.w	r9, r9
 800b10e:	f1b9 0f00 	cmp.w	r9, #0
 800b112:	d112      	bne.n	800b13a <HAL_SPI_TransmitReceive+0x278>
 800b114:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b116:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b11a:	d110      	bne.n	800b13e <HAL_SPI_TransmitReceive+0x27c>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b11c:	6823      	ldr	r3, [r4, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	0751      	lsls	r1, r2, #29
 800b122:	d406      	bmi.n	800b132 <HAL_SPI_TransmitReceive+0x270>
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b128:	bf42      	ittt	mi
 800b12a:	681a      	ldrmi	r2, [r3, #0]
 800b12c:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b130:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b138:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b13a:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b13e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b142:	b29b      	uxth	r3, r3
 800b144:	b1e3      	cbz	r3, 800b180 <HAL_SPI_TransmitReceive+0x2be>
 800b146:	6820      	ldr	r0, [r4, #0]
 800b148:	6881      	ldr	r1, [r0, #8]
 800b14a:	f011 0101 	ands.w	r1, r1, #1
 800b14e:	d017      	beq.n	800b180 <HAL_SPI_TransmitReceive+0x2be>
        if (hspi->RxXferCount > 1U)
 800b150:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b154:	b29b      	uxth	r3, r3
 800b156:	2b01      	cmp	r3, #1
 800b158:	d921      	bls.n	800b19e <HAL_SPI_TransmitReceive+0x2dc>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b15a:	68c3      	ldr	r3, [r0, #12]
 800b15c:	f826 3b02 	strh.w	r3, [r6], #2
          hspi->RxXferCount -= 2U;
 800b160:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b164:	3b02      	subs	r3, #2
 800b166:	b29b      	uxth	r3, r3
 800b168:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b16c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b01      	cmp	r3, #1
 800b174:	d803      	bhi.n	800b17e <HAL_SPI_TransmitReceive+0x2bc>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b176:	6843      	ldr	r3, [r0, #4]
 800b178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b17c:	6043      	str	r3, [r0, #4]
        txallowed = 1U;
 800b17e:	4689      	mov	r9, r1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b180:	1c7b      	adds	r3, r7, #1
 800b182:	d09a      	beq.n	800b0ba <HAL_SPI_TransmitReceive+0x1f8>
 800b184:	f7fd fbf0 	bl	8008968 <HAL_GetTick>
 800b188:	eba0 0008 	sub.w	r0, r0, r8
 800b18c:	42b8      	cmp	r0, r7
 800b18e:	d394      	bcc.n	800b0ba <HAL_SPI_TransmitReceive+0x1f8>
 800b190:	e776      	b.n	800b080 <HAL_SPI_TransmitReceive+0x1be>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b192:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b196:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800b198:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b19a:	3b01      	subs	r3, #1
 800b19c:	e789      	b.n	800b0b2 <HAL_SPI_TransmitReceive+0x1f0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b19e:	7b03      	ldrb	r3, [r0, #12]
 800b1a0:	f806 3b01 	strb.w	r3, [r6], #1
          hspi->RxXferCount--;
 800b1a4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b1b0:	e7e5      	b.n	800b17e <HAL_SPI_TransmitReceive+0x2bc>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b1b2:	68e2      	ldr	r2, [r4, #12]
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b1ba:	d11e      	bne.n	800b1fa <HAL_SPI_TransmitReceive+0x338>
      tmpreg = hspi->Instance->DR;
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1c0:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b1c4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	6895      	ldr	r5, [r2, #8]
 800b1cc:	f015 0510 	ands.w	r5, r5, #16
 800b1d0:	d007      	beq.n	800b1e2 <HAL_SPI_TransmitReceive+0x320>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b1d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b1d4:	f043 0302 	orr.w	r3, r3, #2
 800b1d8:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b1da:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b1de:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800b1e0:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1e2:	4642      	mov	r2, r8
 800b1e4:	4639      	mov	r1, r7
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f7ff fdcc 	bl	800ad84 <SPI_EndRxTxTransaction>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f af48 	beq.w	800b082 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b1f6:	2501      	movs	r5, #1
 800b1f8:	e743      	b.n	800b082 <HAL_SPI_TransmitReceive+0x1c0>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1fa:	7b1b      	ldrb	r3, [r3, #12]
 800b1fc:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 800b200:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b204:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b206:	2b02      	cmp	r3, #2
 800b208:	d1de      	bne.n	800b1c8 <HAL_SPI_TransmitReceive+0x306>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b20a:	2201      	movs	r2, #1
 800b20c:	f8cd 8000 	str.w	r8, [sp]
 800b210:	463b      	mov	r3, r7
 800b212:	4611      	mov	r1, r2
 800b214:	4620      	mov	r0, r4
 800b216:	f7ff fd2c 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f47f aee0 	bne.w	800afe0 <HAL_SPI_TransmitReceive+0x11e>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b220:	6823      	ldr	r3, [r4, #0]
 800b222:	7b1b      	ldrb	r3, [r3, #12]
 800b224:	e7cc      	b.n	800b1c0 <HAL_SPI_TransmitReceive+0x2fe>
    errorcode = HAL_BUSY;
 800b226:	2502      	movs	r5, #2
 800b228:	e72b      	b.n	800b082 <HAL_SPI_TransmitReceive+0x1c0>
  __HAL_LOCK(hspi);
 800b22a:	2502      	movs	r5, #2
 800b22c:	e72f      	b.n	800b08e <HAL_SPI_TransmitReceive+0x1cc>

0800b22e <HAL_SPI_Receive>:
{
 800b22e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b232:	461d      	mov	r5, r3
  __IO uint16_t tmpreg = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	f8ad 300e 	strh.w	r3, [sp, #14]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b23a:	6843      	ldr	r3, [r0, #4]
 800b23c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800b240:	4604      	mov	r4, r0
 800b242:	460e      	mov	r6, r1
 800b244:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b246:	d10c      	bne.n	800b262 <HAL_SPI_Receive+0x34>
 800b248:	6883      	ldr	r3, [r0, #8]
 800b24a:	b953      	cbnz	r3, 800b262 <HAL_SPI_Receive+0x34>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b24c:	2304      	movs	r3, #4
 800b24e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b252:	4613      	mov	r3, r2
 800b254:	9500      	str	r5, [sp, #0]
 800b256:	460a      	mov	r2, r1
 800b258:	f7ff fe33 	bl	800aec2 <HAL_SPI_TransmitReceive>
}
 800b25c:	b004      	add	sp, #16
 800b25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800b262:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b266:	2b01      	cmp	r3, #1
 800b268:	f000 80f6 	beq.w	800b458 <HAL_SPI_Receive+0x22a>
 800b26c:	2301      	movs	r3, #1
 800b26e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b272:	f7fd fb79 	bl	8008968 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b276:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b27a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b27c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b27e:	b2d8      	uxtb	r0, r3
 800b280:	f040 80e8 	bne.w	800b454 <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 800b284:	2e00      	cmp	r6, #0
 800b286:	f000 8092 	beq.w	800b3ae <HAL_SPI_Receive+0x180>
 800b28a:	f1b8 0f00 	cmp.w	r8, #0
 800b28e:	f000 808e 	beq.w	800b3ae <HAL_SPI_Receive+0x180>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b292:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b294:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b296:	2304      	movs	r3, #4
 800b298:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b29c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2a0:	f04f 0300 	mov.w	r3, #0
 800b2a4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800b2a6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800b2aa:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b2ae:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b2b0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b2b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b2b4:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	d10d      	bne.n	800b2d8 <HAL_SPI_Receive+0xaa>
    SPI_RESET_CRC(hspi);
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2ca:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 800b2cc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b2d0:	3a01      	subs	r2, #1
 800b2d2:	b292      	uxth	r2, r2
 800b2d4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2d8:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2da:	685a      	ldr	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2e0:	bf8c      	ite	hi
 800b2e2:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b2e6:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
 800b2ea:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2ec:	68a2      	ldr	r2, [r4, #8]
 800b2ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b2f2:	bf02      	ittt	eq
 800b2f4:	681a      	ldreq	r2, [r3, #0]
 800b2f6:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b2fa:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800b300:	bf5e      	ittt	pl
 800b302:	681a      	ldrpl	r2, [r3, #0]
 800b304:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800b308:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b30a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b30e:	d91e      	bls.n	800b34e <HAL_SPI_Receive+0x120>
    while (hspi->RxXferCount > 0U)
 800b310:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b314:	b29b      	uxth	r3, r3
 800b316:	b1fb      	cbz	r3, 800b358 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	689a      	ldr	r2, [r3, #8]
 800b31c:	07d1      	lsls	r1, r2, #31
 800b31e:	d555      	bpl.n	800b3cc <HAL_SPI_Receive+0x19e>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b326:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b332:	e7ed      	b.n	800b310 <HAL_SPI_Receive+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	689a      	ldr	r2, [r3, #8]
 800b338:	07d2      	lsls	r2, r2, #31
 800b33a:	d536      	bpl.n	800b3aa <HAL_SPI_Receive+0x17c>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b33c:	7b1b      	ldrb	r3, [r3, #12]
 800b33e:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800b342:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b346:	3b01      	subs	r3, #1
 800b348:	b29b      	uxth	r3, r3
 800b34a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800b34e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b352:	b29b      	uxth	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1ed      	bne.n	800b334 <HAL_SPI_Receive+0x106>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b35a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b35e:	d14a      	bne.n	800b3f6 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b360:	6822      	ldr	r2, [r4, #0]
 800b362:	6813      	ldr	r3, [r2, #0]
 800b364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b368:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b36a:	2201      	movs	r2, #1
 800b36c:	9700      	str	r7, [sp, #0]
 800b36e:	462b      	mov	r3, r5
 800b370:	4611      	mov	r1, r2
 800b372:	4620      	mov	r0, r4
 800b374:	f7ff fc7d 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800b378:	b9c0      	cbnz	r0, 800b3ac <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b37a:	68e2      	ldr	r2, [r4, #12]
 800b37c:	6823      	ldr	r3, [r4, #0]
 800b37e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b382:	bf8a      	itet	hi
 800b384:	68db      	ldrhi	r3, [r3, #12]
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b386:	7b1b      	ldrbls	r3, [r3, #12]
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b388:	8033      	strhhi	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b38a:	f04f 0201 	mov.w	r2, #1
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b38e:	bf98      	it	ls
 800b390:	7033      	strbls	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b392:	9700      	str	r7, [sp, #0]
 800b394:	462b      	mov	r3, r5
 800b396:	4611      	mov	r1, r2
 800b398:	4620      	mov	r0, r4
 800b39a:	f7ff fc6a 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800b39e:	b1f8      	cbz	r0, 800b3e0 <HAL_SPI_Receive+0x1b2>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b3a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b3a2:	f043 0302 	orr.w	r3, r3, #2
 800b3a6:	6623      	str	r3, [r4, #96]	; 0x60
 800b3a8:	e000      	b.n	800b3ac <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b3aa:	b93d      	cbnz	r5, 800b3bc <HAL_SPI_Receive+0x18e>
          errorcode = HAL_TIMEOUT;
 800b3ac:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800b3ba:	e74f      	b.n	800b25c <HAL_SPI_Receive+0x2e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b3bc:	1c68      	adds	r0, r5, #1
 800b3be:	d0c6      	beq.n	800b34e <HAL_SPI_Receive+0x120>
 800b3c0:	f7fd fad2 	bl	8008968 <HAL_GetTick>
 800b3c4:	1bc0      	subs	r0, r0, r7
 800b3c6:	42a8      	cmp	r0, r5
 800b3c8:	d3c1      	bcc.n	800b34e <HAL_SPI_Receive+0x120>
 800b3ca:	e7ef      	b.n	800b3ac <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b3cc:	2d00      	cmp	r5, #0
 800b3ce:	d0ed      	beq.n	800b3ac <HAL_SPI_Receive+0x17e>
 800b3d0:	1c6a      	adds	r2, r5, #1
 800b3d2:	d09d      	beq.n	800b310 <HAL_SPI_Receive+0xe2>
 800b3d4:	f7fd fac8 	bl	8008968 <HAL_GetTick>
 800b3d8:	1bc0      	subs	r0, r0, r7
 800b3da:	42a8      	cmp	r0, r5
 800b3dc:	d398      	bcc.n	800b310 <HAL_SPI_Receive+0xe2>
 800b3de:	e7e5      	b.n	800b3ac <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3e0:	68e2      	ldr	r2, [r4, #12]
 800b3e2:	6823      	ldr	r3, [r4, #0]
 800b3e4:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b3e8:	d11d      	bne.n	800b426 <HAL_SPI_Receive+0x1f8>
      tmpreg = hspi->Instance->DR;
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b3ee:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b3f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3f6:	463a      	mov	r2, r7
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f7ff fc87 	bl	800ad0e <SPI_EndRxTransaction>
 800b400:	b108      	cbz	r0, 800b406 <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b402:	2320      	movs	r3, #32
 800b404:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	6893      	ldr	r3, [r2, #8]
 800b40a:	06db      	lsls	r3, r3, #27
 800b40c:	d506      	bpl.n	800b41c <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b40e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b410:	f043 0302 	orr.w	r3, r3, #2
 800b414:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b416:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b41a:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b41c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b41e:	3800      	subs	r0, #0
 800b420:	bf18      	it	ne
 800b422:	2001      	movne	r0, #1
error :
 800b424:	e7c3      	b.n	800b3ae <HAL_SPI_Receive+0x180>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b426:	7b1b      	ldrb	r3, [r3, #12]
 800b428:	f8ad 300e 	strh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b42c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 800b430:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b434:	d1df      	bne.n	800b3f6 <HAL_SPI_Receive+0x1c8>
 800b436:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d1dc      	bne.n	800b3f6 <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) != HAL_OK)
 800b43c:	2201      	movs	r2, #1
 800b43e:	9700      	str	r7, [sp, #0]
 800b440:	462b      	mov	r3, r5
 800b442:	4611      	mov	r1, r2
 800b444:	4620      	mov	r0, r4
 800b446:	f7ff fc14 	bl	800ac72 <SPI_WaitFlagStateUntilTimeout>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d1a8      	bne.n	800b3a0 <HAL_SPI_Receive+0x172>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	7b1b      	ldrb	r3, [r3, #12]
 800b452:	e7cc      	b.n	800b3ee <HAL_SPI_Receive+0x1c0>
    errorcode = HAL_BUSY;
 800b454:	2002      	movs	r0, #2
 800b456:	e7aa      	b.n	800b3ae <HAL_SPI_Receive+0x180>
  __HAL_LOCK(hspi);
 800b458:	2002      	movs	r0, #2
 800b45a:	e6ff      	b.n	800b25c <HAL_SPI_Receive+0x2e>

0800b45c <HAL_SPI_Transmit_IT>:
{
 800b45c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800b45e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b462:	2801      	cmp	r0, #1
 800b464:	d049      	beq.n	800b4fa <HAL_SPI_Transmit_IT+0x9e>
 800b466:	2001      	movs	r0, #1
 800b468:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800b46c:	2900      	cmp	r1, #0
 800b46e:	d03c      	beq.n	800b4ea <HAL_SPI_Transmit_IT+0x8e>
 800b470:	2a00      	cmp	r2, #0
 800b472:	d03a      	beq.n	800b4ea <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b474:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800b478:	2801      	cmp	r0, #1
 800b47a:	d13a      	bne.n	800b4f2 <HAL_SPI_Transmit_IT+0x96>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b47c:	2003      	movs	r0, #3
 800b47e:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b482:	2000      	movs	r0, #0
 800b484:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b486:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b488:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 800b48a:	491d      	ldr	r1, [pc, #116]	; (800b500 <HAL_SPI_Transmit_IT+0xa4>)
  hspi->RxXferCount = 0U;
 800b48c:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->TxXferSize  = Size;
 800b490:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b492:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b494:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b498:	64d8      	str	r0, [r3, #76]	; 0x4c
    hspi->TxISR = SPI_TxISR_8BIT;
 800b49a:	4a1a      	ldr	r2, [pc, #104]	; (800b504 <HAL_SPI_Transmit_IT+0xa8>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b49c:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 800b49e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b4a2:	bf98      	it	ls
 800b4a4:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4a6:	6899      	ldr	r1, [r3, #8]
 800b4a8:	651a      	str	r2, [r3, #80]	; 0x50
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800b4b0:	bf02      	ittt	eq
 800b4b2:	6811      	ldreq	r1, [r2, #0]
 800b4b4:	f441 4180 	orreq.w	r1, r1, #16384	; 0x4000
 800b4b8:	6011      	streq	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b4bc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b4c0:	d107      	bne.n	800b4d2 <HAL_SPI_Transmit_IT+0x76>
    SPI_RESET_CRC(hspi);
 800b4c2:	6811      	ldr	r1, [r2, #0]
 800b4c4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b4c8:	6011      	str	r1, [r2, #0]
 800b4ca:	6811      	ldr	r1, [r2, #0]
 800b4cc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b4d0:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b4d2:	6851      	ldr	r1, [r2, #4]
 800b4d4:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 800b4d8:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4da:	6810      	ldr	r0, [r2, #0]
 800b4dc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b4e0:	d109      	bne.n	800b4f6 <HAL_SPI_Transmit_IT+0x9a>
    __HAL_SPI_ENABLE(hspi);
 800b4e2:	6811      	ldr	r1, [r2, #0]
 800b4e4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b4e8:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b4f0:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800b4f2:	2002      	movs	r0, #2
 800b4f4:	e7f9      	b.n	800b4ea <HAL_SPI_Transmit_IT+0x8e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	e7f7      	b.n	800b4ea <HAL_SPI_Transmit_IT+0x8e>
  __HAL_LOCK(hspi);
 800b4fa:	2002      	movs	r0, #2
}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	0800b75b 	.word	0x0800b75b
 800b504:	0800b78d 	.word	0x0800b78d

0800b508 <HAL_SPI_TransmitReceive_IT>:
{
 800b508:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 800b50a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800b50e:	2c01      	cmp	r4, #1
 800b510:	d073      	beq.n	800b5fa <HAL_SPI_TransmitReceive_IT+0xf2>
 800b512:	2401      	movs	r4, #1
 800b514:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 800b518:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b51c:	2c01      	cmp	r4, #1
  tmp  = hspi->State;
 800b51e:	b2e5      	uxtb	r5, r4
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b520:	d008      	beq.n	800b534 <HAL_SPI_TransmitReceive_IT+0x2c>
 800b522:	6844      	ldr	r4, [r0, #4]
 800b524:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800b528:	d161      	bne.n	800b5ee <HAL_SPI_TransmitReceive_IT+0xe6>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800b52a:	6884      	ldr	r4, [r0, #8]
 800b52c:	2c00      	cmp	r4, #0
 800b52e:	d15e      	bne.n	800b5ee <HAL_SPI_TransmitReceive_IT+0xe6>
 800b530:	2d04      	cmp	r5, #4
 800b532:	d15c      	bne.n	800b5ee <HAL_SPI_TransmitReceive_IT+0xe6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b534:	2900      	cmp	r1, #0
 800b536:	d05c      	beq.n	800b5f2 <HAL_SPI_TransmitReceive_IT+0xea>
 800b538:	2a00      	cmp	r2, #0
 800b53a:	d05a      	beq.n	800b5f2 <HAL_SPI_TransmitReceive_IT+0xea>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d058      	beq.n	800b5f2 <HAL_SPI_TransmitReceive_IT+0xea>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b540:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->TxXferSize  = Size;
 800b544:	8783      	strh	r3, [r0, #60]	; 0x3c
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b546:	2c04      	cmp	r4, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b548:	bf1c      	itt	ne
 800b54a:	2405      	movne	r4, #5
 800b54c:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b550:	2400      	movs	r4, #0
 800b552:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->RxXferSize  = Size;
 800b554:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->TxXferCount = Size;
 800b558:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800b55a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b55e:	68c3      	ldr	r3, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b560:	6402      	str	r2, [r0, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b562:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b566:	bf8b      	itete	hi
 800b568:	4a25      	ldrhi	r2, [pc, #148]	; (800b600 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b56a:	4a26      	ldrls	r2, [pc, #152]	; (800b604 <HAL_SPI_TransmitReceive_IT+0xfc>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b56c:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b56e:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b570:	bf8c      	ite	hi
 800b572:	4a25      	ldrhi	r2, [pc, #148]	; (800b608 <HAL_SPI_TransmitReceive_IT+0x100>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b574:	4a25      	ldrls	r2, [pc, #148]	; (800b60c <HAL_SPI_TransmitReceive_IT+0x104>)
 800b576:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b578:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b57a:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b57c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b580:	6802      	ldr	r2, [r0, #0]
 800b582:	d12d      	bne.n	800b5e0 <HAL_SPI_TransmitReceive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b584:	2101      	movs	r1, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b586:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b58a:	6481      	str	r1, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b58c:	d803      	bhi.n	800b596 <HAL_SPI_TransmitReceive_IT+0x8e>
 800b58e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b590:	2902      	cmp	r1, #2
      hspi->CRCSize = 2U;
 800b592:	bf08      	it	eq
 800b594:	6481      	streq	r1, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b596:	6811      	ldr	r1, [r2, #0]
 800b598:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b59c:	6011      	str	r1, [r2, #0]
 800b59e:	6811      	ldr	r1, [r2, #0]
 800b5a0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b5a4:	6011      	str	r1, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 800b5a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5aa:	d804      	bhi.n	800b5b6 <HAL_SPI_TransmitReceive_IT+0xae>
 800b5ac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d917      	bls.n	800b5e6 <HAL_SPI_TransmitReceive_IT+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5b6:	6853      	ldr	r3, [r2, #4]
 800b5b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5bc:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b5be:	6853      	ldr	r3, [r2, #4]
 800b5c0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b5c4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5c6:	6813      	ldr	r3, [r2, #0]
 800b5c8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800b5cc:	d113      	bne.n	800b5f6 <HAL_SPI_TransmitReceive_IT+0xee>
    __HAL_SPI_ENABLE(hspi);
 800b5ce:	6811      	ldr	r1, [r2, #0]
 800b5d0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b5d4:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6481      	str	r1, [r0, #72]	; 0x48
 800b5e4:	e7df      	b.n	800b5a6 <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b5e6:	6853      	ldr	r3, [r2, #4]
 800b5e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5ec:	e7e6      	b.n	800b5bc <HAL_SPI_TransmitReceive_IT+0xb4>
    errorcode = HAL_BUSY;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	e7f1      	b.n	800b5d6 <HAL_SPI_TransmitReceive_IT+0xce>
    errorcode = HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e7ef      	b.n	800b5d6 <HAL_SPI_TransmitReceive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	e7ed      	b.n	800b5d6 <HAL_SPI_TransmitReceive_IT+0xce>
  __HAL_LOCK(hspi);
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e7ee      	b.n	800b5dc <HAL_SPI_TransmitReceive_IT+0xd4>
 800b5fe:	bf00      	nop
 800b600:	0800bae9 	.word	0x0800bae9
 800b604:	0800b9dd 	.word	0x0800b9dd
 800b608:	0800ba93 	.word	0x0800ba93
 800b60c:	0800b97b 	.word	0x0800b97b

0800b610 <HAL_SPI_Receive_IT>:
{
 800b610:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b612:	6886      	ldr	r6, [r0, #8]
{
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b618:	b95e      	cbnz	r6, 800b632 <HAL_SPI_Receive_IT+0x22>
 800b61a:	6843      	ldr	r3, [r0, #4]
 800b61c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b620:	d107      	bne.n	800b632 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b622:	2304      	movs	r3, #4
 800b624:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 800b628:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b62a:	4613      	mov	r3, r2
 800b62c:	460a      	mov	r2, r1
 800b62e:	f7ff bf6b 	b.w	800b508 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 800b632:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b636:	2b01      	cmp	r3, #1
 800b638:	d05d      	beq.n	800b6f6 <HAL_SPI_Receive_IT+0xe6>
 800b63a:	2301      	movs	r3, #1
 800b63c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800b640:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b644:	2b01      	cmp	r3, #1
 800b646:	b2d8      	uxtb	r0, r3
 800b648:	d151      	bne.n	800b6ee <HAL_SPI_Receive_IT+0xde>
  if ((pData == NULL) || (Size == 0U))
 800b64a:	2d00      	cmp	r5, #0
 800b64c:	d047      	beq.n	800b6de <HAL_SPI_Receive_IT+0xce>
 800b64e:	2a00      	cmp	r2, #0
 800b650:	d045      	beq.n	800b6de <HAL_SPI_Receive_IT+0xce>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b652:	2304      	movs	r3, #4
 800b654:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b658:	2300      	movs	r3, #0
 800b65a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b65c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b65e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800b662:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b664:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b666:	6523      	str	r3, [r4, #80]	; 0x50
 800b668:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b66a:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 800b66c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b670:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b672:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b674:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b678:	bf8b      	itete	hi
 800b67a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b67e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b682:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b684:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800b686:	bf8c      	ite	hi
 800b688:	4a1c      	ldrhi	r2, [pc, #112]	; (800b6fc <HAL_SPI_Receive_IT+0xec>)
    hspi->RxISR = SPI_RxISR_8BIT;
 800b68a:	4a1d      	ldrls	r2, [pc, #116]	; (800b700 <HAL_SPI_Receive_IT+0xf0>)
 800b68c:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b68e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b692:	bf02      	ittt	eq
 800b694:	681a      	ldreq	r2, [r3, #0]
 800b696:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b69a:	601a      	streq	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b69c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b69e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b6a2:	d121      	bne.n	800b6e8 <HAL_SPI_Receive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b6a4:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b6a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b6aa:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b6ac:	d803      	bhi.n	800b6b6 <HAL_SPI_Receive_IT+0xa6>
 800b6ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b6b0:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 800b6b2:	bf08      	it	eq
 800b6b4:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	681a      	ldr	r2, [r3, #0]
 800b6c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6c4:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b6cc:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b6ce:	6818      	ldr	r0, [r3, #0]
 800b6d0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b6d4:	d10d      	bne.n	800b6f2 <HAL_SPI_Receive_IT+0xe2>
    __HAL_SPI_ENABLE(hspi);
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6dc:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b6e4:	bc70      	pop	{r4, r5, r6}
 800b6e6:	4770      	bx	lr
    hspi->CRCSize = 0U;
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	64a2      	str	r2, [r4, #72]	; 0x48
 800b6ec:	e7eb      	b.n	800b6c6 <HAL_SPI_Receive_IT+0xb6>
    errorcode = HAL_BUSY;
 800b6ee:	2002      	movs	r0, #2
 800b6f0:	e7f5      	b.n	800b6de <HAL_SPI_Receive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	e7f3      	b.n	800b6de <HAL_SPI_Receive_IT+0xce>
  __HAL_LOCK(hspi);
 800b6f6:	2002      	movs	r0, #2
 800b6f8:	e7f4      	b.n	800b6e4 <HAL_SPI_Receive_IT+0xd4>
 800b6fa:	bf00      	nop
 800b6fc:	0800b891 	.word	0x0800b891
 800b700:	0800b815 	.word	0x0800b815

0800b704 <HAL_SPI_TxRxCpltCallback>:
 800b704:	4770      	bx	lr

0800b706 <HAL_SPI_ErrorCallback>:
 800b706:	4770      	bx	lr

0800b708 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b708:	b513      	push	{r0, r1, r4, lr}
 800b70a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b70c:	f7fd f92c 	bl	8008968 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b710:	6821      	ldr	r1, [r4, #0]
 800b712:	684b      	ldr	r3, [r1, #4]
 800b714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 800b718:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b71a:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b71c:	4620      	mov	r0, r4
 800b71e:	2164      	movs	r1, #100	; 0x64
 800b720:	f7ff fb30 	bl	800ad84 <SPI_EndRxTxTransaction>
 800b724:	b118      	cbz	r0, 800b72e <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b726:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b728:	f043 0320 	orr.w	r3, r3, #32
 800b72c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b72e:	68a3      	ldr	r3, [r4, #8]
 800b730:	b933      	cbnz	r3, 800b740 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b732:	9301      	str	r3, [sp, #4]
 800b734:	6823      	ldr	r3, [r4, #0]
 800b736:	68da      	ldr	r2, [r3, #12]
 800b738:	9201      	str	r2, [sp, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b740:	2301      	movs	r3, #1
 800b742:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b746:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    HAL_SPI_ErrorCallback(hspi);
 800b748:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b74a:	b11b      	cbz	r3, 800b754 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 800b74c:	f7ff ffdb 	bl	800b706 <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 800b750:	b002      	add	sp, #8
 800b752:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 800b754:	f7f9 fb30 	bl	8004db8 <HAL_SPI_TxCpltCallback>
}
 800b758:	e7fa      	b.n	800b750 <SPI_CloseTx_ISR+0x48>

0800b75a <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b75a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	6382      	str	r2, [r0, #56]	; 0x38
 800b760:	6802      	ldr	r2, [r0, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 800b766:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b768:	3b01      	subs	r3, #1
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b76e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b770:	b29b      	uxth	r3, r3
 800b772:	b953      	cbnz	r3, 800b78a <SPI_TxISR_8BIT+0x30>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b774:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b77a:	bf01      	itttt	eq
 800b77c:	6802      	ldreq	r2, [r0, #0]
 800b77e:	6813      	ldreq	r3, [r2, #0]
 800b780:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b784:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800b786:	f7ff bfbf 	b.w	800b708 <SPI_CloseTx_ISR>
}
 800b78a:	4770      	bx	lr

0800b78c <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b78c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b78e:	6802      	ldr	r2, [r0, #0]
 800b790:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b794:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b796:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800b798:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b7a0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	b94b      	cbnz	r3, 800b7ba <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b7ac:	bf02      	ittt	eq
 800b7ae:	6813      	ldreq	r3, [r2, #0]
 800b7b0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b7b4:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800b7b6:	f7ff bfa7 	b.w	800b708 <SPI_CloseTx_ISR>
}
 800b7ba:	4770      	bx	lr

0800b7bc <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b7bc:	6802      	ldr	r2, [r0, #0]
 800b7be:	6853      	ldr	r3, [r2, #4]
 800b7c0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 800b7c4:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b7c6:	6053      	str	r3, [r2, #4]
{
 800b7c8:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b7ca:	f7fd f8cd 	bl	8008968 <HAL_GetTick>
 800b7ce:	2164      	movs	r1, #100	; 0x64
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f7ff fa9b 	bl	800ad0e <SPI_EndRxTransaction>
 800b7d8:	b118      	cbz	r0, 800b7e2 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b7dc:	f043 0320 	orr.w	r3, r3, #32
 800b7e0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b7e2:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b7e4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800b7e6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b7ea:	6893      	ldr	r3, [r2, #8]
 800b7ec:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b7f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b7f2:	d009      	beq.n	800b808 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b7f4:	f043 0302 	orr.w	r3, r3, #2
 800b7f8:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b7fa:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b7fe:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 800b800:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 800b802:	f7ff ff80 	bl	800b706 <HAL_SPI_ErrorCallback>
}
 800b806:	e004      	b.n	800b812 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 800b808:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1f9      	bne.n	800b802 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 800b80e:	f7f9 facb 	bl	8004da8 <HAL_SPI_RxCpltCallback>
}
 800b812:	bd10      	pop	{r4, pc}

0800b814 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800b814:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b816:	6802      	ldr	r2, [r0, #0]
 800b818:	1c59      	adds	r1, r3, #1
 800b81a:	6401      	str	r1, [r0, #64]	; 0x40
 800b81c:	7b12      	ldrb	r2, [r2, #12]
 800b81e:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800b820:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b824:	3b01      	subs	r3, #1
 800b826:	b29b      	uxth	r3, r3
 800b828:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b82c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b830:	b29b      	uxth	r3, r3
 800b832:	2b01      	cmp	r3, #1
 800b834:	d108      	bne.n	800b848 <SPI_RxISR_8BIT+0x34>
 800b836:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b83c:	bf01      	itttt	eq
 800b83e:	6802      	ldreq	r2, [r0, #0]
 800b840:	6813      	ldreq	r3, [r2, #0]
 800b842:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b846:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800b848:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	b943      	cbnz	r3, 800b862 <SPI_RxISR_8BIT+0x4e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b850:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b856:	d102      	bne.n	800b85e <SPI_RxISR_8BIT+0x4a>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800b858:	4b02      	ldr	r3, [pc, #8]	; (800b864 <SPI_RxISR_8BIT+0x50>)
 800b85a:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800b85c:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800b85e:	f7ff bfad 	b.w	800b7bc <SPI_CloseRx_ISR>
}
 800b862:	4770      	bx	lr
 800b864:	0800b869 	.word	0x0800b869

0800b868 <SPI_RxISR_8BITCRC>:
{
 800b868:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800b86a:	2200      	movs	r2, #0
 800b86c:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800b870:	6802      	ldr	r2, [r0, #0]
 800b872:	7b12      	ldrb	r2, [r2, #12]
 800b874:	b2d2      	uxtb	r2, r2
 800b876:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800b87a:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800b87e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800b880:	3a01      	subs	r2, #1
 800b882:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800b884:	b912      	cbnz	r2, 800b88c <SPI_RxISR_8BITCRC+0x24>
}
 800b886:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 800b888:	f7ff bf98 	b.w	800b7bc <SPI_CloseRx_ISR>
}
 800b88c:	b002      	add	sp, #8
 800b88e:	4770      	bx	lr

0800b890 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b890:	6802      	ldr	r2, [r0, #0]
 800b892:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b894:	68d1      	ldr	r1, [r2, #12]
 800b896:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b89a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800b89c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b8a8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d107      	bne.n	800b8c2 <SPI_RxISR_16BIT+0x32>
 800b8b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b8b8:	bf02      	ittt	eq
 800b8ba:	6813      	ldreq	r3, [r2, #0]
 800b8bc:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b8c0:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800b8c2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	b943      	cbnz	r3, 800b8dc <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b8cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8d0:	d102      	bne.n	800b8d8 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800b8d2:	4b03      	ldr	r3, [pc, #12]	; (800b8e0 <SPI_RxISR_16BIT+0x50>)
 800b8d4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800b8d6:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800b8d8:	f7ff bf70 	b.w	800b7bc <SPI_CloseRx_ISR>
}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	0800b8e5 	.word	0x0800b8e5

0800b8e4 <SPI_RxISR_16BITCRC>:
{
 800b8e4:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800b8ec:	6803      	ldr	r3, [r0, #0]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	b292      	uxth	r2, r2
 800b8f2:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800b8f6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b900:	605a      	str	r2, [r3, #4]
}
 800b902:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 800b904:	f7ff bf5a 	b.w	800b7bc <SPI_CloseRx_ISR>

0800b908 <SPI_CloseRxTx_ISR>:
{
 800b908:	b510      	push	{r4, lr}
 800b90a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800b90c:	f7fd f82c 	bl	8008968 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b910:	6821      	ldr	r1, [r4, #0]
 800b912:	684b      	ldr	r3, [r1, #4]
 800b914:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 800b918:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b91a:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b91c:	4620      	mov	r0, r4
 800b91e:	2164      	movs	r1, #100	; 0x64
 800b920:	f7ff fa30 	bl	800ad84 <SPI_EndRxTxTransaction>
 800b924:	b118      	cbz	r0, 800b92e <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b926:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b928:	f043 0320 	orr.w	r3, r3, #32
 800b92c:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b92e:	6822      	ldr	r2, [r4, #0]
 800b930:	6893      	ldr	r3, [r2, #8]
 800b932:	f013 0f10 	tst.w	r3, #16
 800b936:	f04f 0301 	mov.w	r3, #1
 800b93a:	d00c      	beq.n	800b956 <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 800b93c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b940:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b942:	f043 0302 	orr.w	r3, r3, #2
 800b946:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b948:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b94c:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 800b94e:	4620      	mov	r0, r4
 800b950:	f7ff fed9 	bl	800b706 <HAL_SPI_ErrorCallback>
}
 800b954:	e00a      	b.n	800b96c <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b956:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b958:	b962      	cbnz	r2, 800b974 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b95a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 800b95e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b962:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 800b964:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b966:	d102      	bne.n	800b96e <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 800b968:	f7f9 fa1e 	bl	8004da8 <HAL_SPI_RxCpltCallback>
}
 800b96c:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 800b96e:	f7ff fec9 	bl	800b704 <HAL_SPI_TxRxCpltCallback>
 800b972:	e7fb      	b.n	800b96c <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 800b974:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800b978:	e7e9      	b.n	800b94e <SPI_CloseRxTx_ISR+0x46>

0800b97a <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 800b97a:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 800b97c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b97e:	6801      	ldr	r1, [r0, #0]
 800b980:	b292      	uxth	r2, r2
 800b982:	2a01      	cmp	r2, #1
 800b984:	d918      	bls.n	800b9b8 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b986:	f833 2b02 	ldrh.w	r2, [r3], #2
 800b98a:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800b98c:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800b98e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b990:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800b992:	b29b      	uxth	r3, r3
 800b994:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b996:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b998:	b29b      	uxth	r3, r3
 800b99a:	b9f3      	cbnz	r3, 800b9da <SPI_2linesTxISR_8BIT+0x60>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b99c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b99e:	6803      	ldr	r3, [r0, #0]
 800b9a0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b9a4:	d10f      	bne.n	800b9c6 <SPI_2linesTxISR_8BIT+0x4c>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b9ac:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b9ae:	685a      	ldr	r2, [r3, #4]
 800b9b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9b4:	605a      	str	r2, [r3, #4]
      return;
 800b9b6:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b9b8:	1c5a      	adds	r2, r3, #1
 800b9ba:	6382      	str	r2, [r0, #56]	; 0x38
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	730b      	strb	r3, [r1, #12]
    hspi->TxXferCount--;
 800b9c0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	e7e5      	b.n	800b992 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b9c6:	685a      	ldr	r2, [r3, #4]
 800b9c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b9cc:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 800b9ce:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	b90b      	cbnz	r3, 800b9da <SPI_2linesTxISR_8BIT+0x60>
      SPI_CloseRxTx_ISR(hspi);
 800b9d6:	f7ff bf97 	b.w	800b908 <SPI_CloseRxTx_ISR>
}
 800b9da:	4770      	bx	lr

0800b9dc <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 800b9dc:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 800b9e0:	6802      	ldr	r2, [r0, #0]
 800b9e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b9e4:	b289      	uxth	r1, r1
 800b9e6:	2901      	cmp	r1, #1
 800b9e8:	d922      	bls.n	800ba30 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b9ea:	68d1      	ldr	r1, [r2, #12]
 800b9ec:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800b9f0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800b9f2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b9f6:	3b02      	subs	r3, #2
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800b9fe:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d103      	bne.n	800ba10 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ba08:	6853      	ldr	r3, [r2, #4]
 800ba0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ba0e:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 800ba10:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	b9f3      	cbnz	r3, 800ba56 <SPI_2linesRxISR_8BIT+0x7a>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba18:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ba1a:	6803      	ldr	r3, [r0, #0]
 800ba1c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ba20:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba22:	d110      	bne.n	800ba46 <SPI_2linesRxISR_8BIT+0x6a>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ba24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba28:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800ba2a:	4b0b      	ldr	r3, [pc, #44]	; (800ba58 <SPI_2linesRxISR_8BIT+0x7c>)
 800ba2c:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800ba2e:	4770      	bx	lr
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800ba30:	1c59      	adds	r1, r3, #1
 800ba32:	6401      	str	r1, [r0, #64]	; 0x40
 800ba34:	7b12      	ldrb	r2, [r2, #12]
 800ba36:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 800ba38:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800ba44:	e7e4      	b.n	800ba10 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ba46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ba4a:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 800ba4c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	b90b      	cbnz	r3, 800ba56 <SPI_2linesRxISR_8BIT+0x7a>
      SPI_CloseRxTx_ISR(hspi);
 800ba52:	f7ff bf59 	b.w	800b908 <SPI_CloseRxTx_ISR>
}
 800ba56:	4770      	bx	lr
 800ba58:	0800ba5d 	.word	0x0800ba5d

0800ba5c <SPI_2linesRxISR_8BITCRC>:
{
 800ba5c:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800ba5e:	2200      	movs	r2, #0
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800ba60:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t tmpreg = 0U;
 800ba62:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800ba66:	7b0a      	ldrb	r2, [r1, #12]
 800ba68:	b2d2      	uxtb	r2, r2
 800ba6a:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800ba6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800ba72:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800ba74:	3a01      	subs	r2, #1
 800ba76:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800ba78:	b94a      	cbnz	r2, 800ba8e <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ba7a:	684a      	ldr	r2, [r1, #4]
 800ba7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ba80:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800ba82:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	b913      	cbnz	r3, 800ba8e <SPI_2linesRxISR_8BITCRC+0x32>
}
 800ba88:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 800ba8a:	f7ff bf3d 	b.w	800b908 <SPI_CloseRxTx_ISR>
}
 800ba8e:	b002      	add	sp, #8
 800ba90:	4770      	bx	lr

0800ba92 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba92:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800ba94:	6802      	ldr	r2, [r0, #0]
{
 800ba96:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba98:	f831 4b02 	ldrh.w	r4, [r1], #2
 800ba9c:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba9e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800baa0:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800baa2:	3901      	subs	r1, #1
 800baa4:	b289      	uxth	r1, r1
 800baa6:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800baa8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800baaa:	b289      	uxth	r1, r1
 800baac:	b959      	cbnz	r1, 800bac6 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800baae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800bab0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bab4:	d10a      	bne.n	800bacc <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bab6:	6813      	ldr	r3, [r2, #0]
 800bab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800babc:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800babe:	6853      	ldr	r3, [r2, #4]
 800bac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bac4:	6053      	str	r3, [r2, #4]
}
 800bac6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baca:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bacc:	6851      	ldr	r1, [r2, #4]
 800bace:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bad2:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800bad4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bad8:	b29b      	uxth	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d1f3      	bne.n	800bac6 <SPI_2linesTxISR_16BIT+0x34>
}
 800bade:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bae2:	f7ff bf11 	b.w	800b908 <SPI_CloseRxTx_ISR>
	...

0800bae8 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bae8:	6801      	ldr	r1, [r0, #0]
 800baea:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800baec:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800baee:	68cc      	ldr	r4, [r1, #12]
 800baf0:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800baf4:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800baf6:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bafa:	3a01      	subs	r2, #1
 800bafc:	b292      	uxth	r2, r2
 800bafe:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800bb02:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bb06:	b292      	uxth	r2, r2
 800bb08:	b92a      	cbnz	r2, 800bb16 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb0a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bb0c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bb10:	d104      	bne.n	800bb1c <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800bb12:	4a08      	ldr	r2, [pc, #32]	; (800bb34 <SPI_2linesRxISR_16BIT+0x4c>)
 800bb14:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800bb16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb1a:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bb1c:	684a      	ldr	r2, [r1, #4]
 800bb1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb22:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bb24:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1f4      	bne.n	800bb16 <SPI_2linesRxISR_16BIT+0x2e>
}
 800bb2c:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bb30:	f7ff beea 	b.w	800b908 <SPI_CloseRxTx_ISR>
 800bb34:	0800bb39 	.word	0x0800bb39

0800bb38 <SPI_2linesRxISR_16BITCRC>:
{
 800bb38:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800bb40:	6803      	ldr	r3, [r0, #0]
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	b292      	uxth	r2, r2
 800bb46:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800bb4a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb54:	605a      	str	r2, [r3, #4]
}
 800bb56:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 800bb58:	f7ff bed6 	b.w	800b908 <SPI_CloseRxTx_ISR>

0800bb5c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800bb5c:	6803      	ldr	r3, [r0, #0]
{
 800bb5e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800bb60:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800bb62:	689a      	ldr	r2, [r3, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800bb64:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800bb68:	2d01      	cmp	r5, #1
{
 800bb6a:	b085      	sub	sp, #20
 800bb6c:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800bb6e:	d106      	bne.n	800bb7e <HAL_SPI_IRQHandler+0x22>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800bb70:	064d      	lsls	r5, r1, #25
 800bb72:	d504      	bpl.n	800bb7e <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 800bb74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800bb76:	b005      	add	sp, #20
 800bb78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 800bb7c:	4718      	bx	r3
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800bb7e:	0795      	lsls	r5, r2, #30
 800bb80:	d504      	bpl.n	800bb8c <HAL_SPI_IRQHandler+0x30>
 800bb82:	0608      	lsls	r0, r1, #24
 800bb84:	d502      	bpl.n	800bb8c <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 800bb86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bb88:	4620      	mov	r0, r4
 800bb8a:	e7f4      	b.n	800bb76 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800bb8c:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800bb90:	d051      	beq.n	800bc36 <HAL_SPI_IRQHandler+0xda>
 800bb92:	068d      	lsls	r5, r1, #26
 800bb94:	d54f      	bpl.n	800bc36 <HAL_SPI_IRQHandler+0xda>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800bb96:	0650      	lsls	r0, r2, #25
 800bb98:	d50f      	bpl.n	800bbba <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb9a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800bb9e:	2803      	cmp	r0, #3
 800bba0:	f04f 0500 	mov.w	r5, #0
 800bba4:	d041      	beq.n	800bc2a <HAL_SPI_IRQHandler+0xce>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bba6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bba8:	f040 0004 	orr.w	r0, r0, #4
 800bbac:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbae:	9500      	str	r5, [sp, #0]
 800bbb0:	68d8      	ldr	r0, [r3, #12]
 800bbb2:	9000      	str	r0, [sp, #0]
 800bbb4:	6898      	ldr	r0, [r3, #8]
 800bbb6:	9000      	str	r0, [sp, #0]
 800bbb8:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 800bbba:	0695      	lsls	r5, r2, #26
 800bbbc:	d50c      	bpl.n	800bbd8 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bbbe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bbc0:	f040 0001 	orr.w	r0, r0, #1
 800bbc4:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	9002      	str	r0, [sp, #8]
 800bbca:	6898      	ldr	r0, [r3, #8]
 800bbcc:	9002      	str	r0, [sp, #8]
 800bbce:	6818      	ldr	r0, [r3, #0]
 800bbd0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800bbd4:	6018      	str	r0, [r3, #0]
 800bbd6:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800bbd8:	05d0      	lsls	r0, r2, #23
 800bbda:	d508      	bpl.n	800bbee <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbdc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bbde:	f042 0208 	orr.w	r2, r2, #8
 800bbe2:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	9203      	str	r2, [sp, #12]
 800bbe8:	689a      	ldr	r2, [r3, #8]
 800bbea:	9203      	str	r2, [sp, #12]
 800bbec:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bbf0:	b30a      	cbz	r2, 800bc36 <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bbf8:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bc00:	078a      	lsls	r2, r1, #30
 800bc02:	d01a      	beq.n	800bc3a <HAL_SPI_IRQHandler+0xde>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc04:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800bc06:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc08:	f022 0203 	bic.w	r2, r2, #3
 800bc0c:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800bc0e:	b118      	cbz	r0, 800bc18 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc10:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <HAL_SPI_IRQHandler+0xe8>)
 800bc12:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800bc14:	f7fc ff39 	bl	8008a8a <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800bc18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc1a:	b160      	cbz	r0, 800bc36 <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <HAL_SPI_IRQHandler+0xe8>)
 800bc1e:	6383      	str	r3, [r0, #56]	; 0x38
}
 800bc20:	b005      	add	sp, #20
 800bc22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800bc26:	f7fc bf30 	b.w	8008a8a <HAL_DMA_Abort_IT>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc2a:	9501      	str	r5, [sp, #4]
 800bc2c:	68da      	ldr	r2, [r3, #12]
 800bc2e:	9201      	str	r2, [sp, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	9b01      	ldr	r3, [sp, #4]
}
 800bc36:	b005      	add	sp, #20
 800bc38:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f7ff fd63 	bl	800b706 <HAL_SPI_ErrorCallback>
 800bc40:	e7f9      	b.n	800bc36 <HAL_SPI_IRQHandler+0xda>
 800bc42:	bf00      	nop
 800bc44:	0800bc49 	.word	0x0800bc49

0800bc48 <SPI_DMAAbortOnError>:
{
 800bc48:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc4a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800bc52:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800bc54:	f7ff fd57 	bl	800b706 <HAL_SPI_ErrorCallback>
}
 800bc58:	bd08      	pop	{r3, pc}

0800bc5a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc5a:	6803      	ldr	r3, [r0, #0]
 800bc5c:	68da      	ldr	r2, [r3, #12]
 800bc5e:	f042 0201 	orr.w	r2, r2, #1
 800bc62:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	f042 0201 	orr.w	r2, r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_TIM_OC_DelayElapsedCallback>:
 800bc70:	4770      	bx	lr

0800bc72 <HAL_TIM_IC_CaptureCallback>:
 800bc72:	4770      	bx	lr

0800bc74 <HAL_TIM_PWM_PulseFinishedCallback>:
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIM_TriggerCallback>:
 800bc76:	4770      	bx	lr

0800bc78 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc78:	6803      	ldr	r3, [r0, #0]
 800bc7a:	691a      	ldr	r2, [r3, #16]
 800bc7c:	0791      	lsls	r1, r2, #30
{
 800bc7e:	b510      	push	{r4, lr}
 800bc80:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc82:	d50e      	bpl.n	800bca2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800bc84:	68da      	ldr	r2, [r3, #12]
 800bc86:	0792      	lsls	r2, r2, #30
 800bc88:	d50b      	bpl.n	800bca2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc8a:	f06f 0202 	mvn.w	r2, #2
 800bc8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc90:	2201      	movs	r2, #1
 800bc92:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	079b      	lsls	r3, r3, #30
 800bc98:	d077      	beq.n	800bd8a <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800bc9a:	f7ff ffea 	bl	800bc72 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	691a      	ldr	r2, [r3, #16]
 800bca6:	0750      	lsls	r0, r2, #29
 800bca8:	d510      	bpl.n	800bccc <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	0751      	lsls	r1, r2, #29
 800bcae:	d50d      	bpl.n	800bccc <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcb0:	f06f 0204 	mvn.w	r2, #4
 800bcb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bcc0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800bcc2:	d068      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800bcc4:	f7ff ffd5 	bl	800bc72 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	691a      	ldr	r2, [r3, #16]
 800bcd0:	0712      	lsls	r2, r2, #28
 800bcd2:	d50f      	bpl.n	800bcf4 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800bcd4:	68da      	ldr	r2, [r3, #12]
 800bcd6:	0710      	lsls	r0, r2, #28
 800bcd8:	d50c      	bpl.n	800bcf4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bcda:	f06f 0208 	mvn.w	r2, #8
 800bcde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bce0:	2204      	movs	r2, #4
 800bce2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800bce4:	69db      	ldr	r3, [r3, #28]
 800bce6:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bce8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800bcea:	d05a      	beq.n	800bda2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800bcec:	f7ff ffc1 	bl	800bc72 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	691a      	ldr	r2, [r3, #16]
 800bcf8:	06d2      	lsls	r2, r2, #27
 800bcfa:	d510      	bpl.n	800bd1e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800bcfc:	68da      	ldr	r2, [r3, #12]
 800bcfe:	06d0      	lsls	r0, r2, #27
 800bd00:	d50d      	bpl.n	800bd1e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd02:	f06f 0210 	mvn.w	r2, #16
 800bd06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd08:	2208      	movs	r2, #8
 800bd0a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800bd0c:	69db      	ldr	r3, [r3, #28]
 800bd0e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bd12:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800bd14:	d04b      	beq.n	800bdae <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800bd16:	f7ff ffac 	bl	800bc72 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	691a      	ldr	r2, [r3, #16]
 800bd22:	07d1      	lsls	r1, r2, #31
 800bd24:	d508      	bpl.n	800bd38 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	07d2      	lsls	r2, r2, #31
 800bd2a:	d505      	bpl.n	800bd38 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd2c:	f06f 0201 	mvn.w	r2, #1
 800bd30:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd32:	4620      	mov	r0, r4
 800bd34:	f7f8 fb40 	bl	80043b8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd38:	6823      	ldr	r3, [r4, #0]
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	0610      	lsls	r0, r2, #24
 800bd3e:	d508      	bpl.n	800bd52 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800bd40:	68da      	ldr	r2, [r3, #12]
 800bd42:	0611      	lsls	r1, r2, #24
 800bd44:	d505      	bpl.n	800bd52 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f000 f8dc 	bl	800bf0a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	691a      	ldr	r2, [r3, #16]
 800bd56:	0652      	lsls	r2, r2, #25
 800bd58:	d508      	bpl.n	800bd6c <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	0650      	lsls	r0, r2, #25
 800bd5e:	d505      	bpl.n	800bd6c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd64:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bd66:	4620      	mov	r0, r4
 800bd68:	f7ff ff85 	bl	800bc76 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	691a      	ldr	r2, [r3, #16]
 800bd70:	0691      	lsls	r1, r2, #26
 800bd72:	d522      	bpl.n	800bdba <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	0692      	lsls	r2, r2, #26
 800bd78:	d51f      	bpl.n	800bdba <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd7a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800bd7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd80:	611a      	str	r2, [r3, #16]
    }
  }
}
 800bd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800bd86:	f000 b8bf 	b.w	800bf08 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd8a:	f7ff ff71 	bl	800bc70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f7ff ff70 	bl	800bc74 <HAL_TIM_PWM_PulseFinishedCallback>
 800bd94:	e783      	b.n	800bc9e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd96:	f7ff ff6b 	bl	800bc70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7ff ff6a 	bl	800bc74 <HAL_TIM_PWM_PulseFinishedCallback>
 800bda0:	e792      	b.n	800bcc8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda2:	f7ff ff65 	bl	800bc70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda6:	4620      	mov	r0, r4
 800bda8:	f7ff ff64 	bl	800bc74 <HAL_TIM_PWM_PulseFinishedCallback>
 800bdac:	e7a0      	b.n	800bcf0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdae:	f7ff ff5f 	bl	800bc70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f7ff ff5e 	bl	800bc74 <HAL_TIM_PWM_PulseFinishedCallback>
 800bdb8:	e7af      	b.n	800bd1a <HAL_TIM_IRQHandler+0xa2>
}
 800bdba:	bd10      	pop	{r4, pc}

0800bdbc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdbc:	4a30      	ldr	r2, [pc, #192]	; (800be80 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800bdbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdc0:	4290      	cmp	r0, r2
 800bdc2:	d012      	beq.n	800bdea <TIM_Base_SetConfig+0x2e>
 800bdc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bdc8:	d00f      	beq.n	800bdea <TIM_Base_SetConfig+0x2e>
 800bdca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800bdce:	4290      	cmp	r0, r2
 800bdd0:	d00b      	beq.n	800bdea <TIM_Base_SetConfig+0x2e>
 800bdd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdd6:	4290      	cmp	r0, r2
 800bdd8:	d007      	beq.n	800bdea <TIM_Base_SetConfig+0x2e>
 800bdda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdde:	4290      	cmp	r0, r2
 800bde0:	d003      	beq.n	800bdea <TIM_Base_SetConfig+0x2e>
 800bde2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800bde6:	4290      	cmp	r0, r2
 800bde8:	d119      	bne.n	800be1e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800bdea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800bdf0:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdf2:	4a23      	ldr	r2, [pc, #140]	; (800be80 <TIM_Base_SetConfig+0xc4>)
 800bdf4:	4290      	cmp	r0, r2
 800bdf6:	d01d      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800bdf8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bdfc:	d01a      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800bdfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800be02:	4290      	cmp	r0, r2
 800be04:	d016      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800be06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be0a:	4290      	cmp	r0, r2
 800be0c:	d012      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800be0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be12:	4290      	cmp	r0, r2
 800be14:	d00e      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800be16:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800be1a:	4290      	cmp	r0, r2
 800be1c:	d00a      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800be1e:	4a19      	ldr	r2, [pc, #100]	; (800be84 <TIM_Base_SetConfig+0xc8>)
 800be20:	4290      	cmp	r0, r2
 800be22:	d007      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800be24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be28:	4290      	cmp	r0, r2
 800be2a:	d003      	beq.n	800be34 <TIM_Base_SetConfig+0x78>
 800be2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be30:	4290      	cmp	r0, r2
 800be32:	d103      	bne.n	800be3c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be34:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800be36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be3a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800be3c:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800be3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800be42:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800be44:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be46:	688b      	ldr	r3, [r1, #8]
 800be48:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800be4a:	680b      	ldr	r3, [r1, #0]
 800be4c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be4e:	4b0c      	ldr	r3, [pc, #48]	; (800be80 <TIM_Base_SetConfig+0xc4>)
 800be50:	4298      	cmp	r0, r3
 800be52:	d00f      	beq.n	800be74 <TIM_Base_SetConfig+0xb8>
 800be54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be58:	4298      	cmp	r0, r3
 800be5a:	d00b      	beq.n	800be74 <TIM_Base_SetConfig+0xb8>
 800be5c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800be60:	4298      	cmp	r0, r3
 800be62:	d007      	beq.n	800be74 <TIM_Base_SetConfig+0xb8>
 800be64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be68:	4298      	cmp	r0, r3
 800be6a:	d003      	beq.n	800be74 <TIM_Base_SetConfig+0xb8>
 800be6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be70:	4298      	cmp	r0, r3
 800be72:	d101      	bne.n	800be78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be74:	690b      	ldr	r3, [r1, #16]
 800be76:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be78:	2301      	movs	r3, #1
 800be7a:	6143      	str	r3, [r0, #20]
}
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	40012c00 	.word	0x40012c00
 800be84:	40014000 	.word	0x40014000

0800be88 <HAL_TIM_Base_Init>:
{
 800be88:	b510      	push	{r4, lr}
  if(htim == NULL)
 800be8a:	4604      	mov	r4, r0
 800be8c:	b1a0      	cbz	r0, 800beb8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800be8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800be92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800be96:	b91b      	cbnz	r3, 800bea0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800be98:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800be9c:	f7f8 fb4e 	bl	800453c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800bea0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bea2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800bea4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bea8:	1d21      	adds	r1, r4, #4
 800beaa:	f7ff ff87 	bl	800bdbc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800beae:	2301      	movs	r3, #1
 800beb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800beb4:	2000      	movs	r0, #0
}
 800beb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800beb8:	2001      	movs	r0, #1
 800beba:	e7fc      	b.n	800beb6 <HAL_TIM_Base_Init+0x2e>

0800bebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800bebc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bebe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d01c      	beq.n	800bf00 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bec6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bec8:	4d0e      	ldr	r5, [pc, #56]	; (800bf04 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800beca:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800becc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bece:	42aa      	cmp	r2, r5
 800bed0:	d003      	beq.n	800beda <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800bed2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800bed6:	42aa      	cmp	r2, r5
 800bed8:	d103      	bne.n	800bee2 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800beda:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bedc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bee0:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bee2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bee4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800bee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800beea:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800beec:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bef0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bef2:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800bef4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800bef6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800bef8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800befc:	4618      	mov	r0, r3
}
 800befe:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800bf00:	2002      	movs	r0, #2
 800bf02:	e7fc      	b.n	800befe <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800bf04:	40012c00 	.word	0x40012c00

0800bf08 <HAL_TIMEx_CommutationCallback>:
 800bf08:	4770      	bx	lr

0800bf0a <HAL_TIMEx_BreakCallback>:
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_UART_MspInit>:
  UNUSED(huart);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800bf0c:	4770      	bx	lr
	...

0800bf10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf12:	69c1      	ldr	r1, [r0, #28]
  if(UART_INSTANCE_LOWPOWER(huart))
 800bf14:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf16:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf18:	681d      	ldr	r5, [r3, #0]
{
 800bf1a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf1c:	6900      	ldr	r0, [r0, #16]
 800bf1e:	4302      	orrs	r2, r0
 800bf20:	6960      	ldr	r0, [r4, #20]
 800bf22:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf24:	48ac      	ldr	r0, [pc, #688]	; (800c1d8 <UART_SetConfig+0x2c8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf26:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf28:	4028      	ands	r0, r5
 800bf2a:	4302      	orrs	r2, r0
 800bf2c:	601a      	str	r2, [r3, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	68e0      	ldr	r0, [r4, #12]
 800bf32:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bf36:	4302      	orrs	r2, r0
 800bf38:	605a      	str	r2, [r3, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf3a:	4aa8      	ldr	r2, [pc, #672]	; (800c1dc <UART_SetConfig+0x2cc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf3c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf3e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bf40:	bf1c      	itt	ne
 800bf42:	6a22      	ldrne	r2, [r4, #32]
 800bf44:	4310      	orrne	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800bf4c:	4302      	orrs	r2, r0
 800bf4e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf50:	4aa3      	ldr	r2, [pc, #652]	; (800c1e0 <UART_SetConfig+0x2d0>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d11c      	bne.n	800bf90 <UART_SetConfig+0x80>
 800bf56:	4ba3      	ldr	r3, [pc, #652]	; (800c1e4 <UART_SetConfig+0x2d4>)
 800bf58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	3b01      	subs	r3, #1
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	f200 8120 	bhi.w	800c1a8 <UART_SetConfig+0x298>
 800bf68:	4a9f      	ldr	r2, [pc, #636]	; (800c1e8 <UART_SetConfig+0x2d8>)
 800bf6a:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf6c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bf70:	f040 80df 	bne.w	800c132 <UART_SetConfig+0x222>
  {
    switch (clocksource)
 800bf74:	2b08      	cmp	r3, #8
 800bf76:	f200 80d9 	bhi.w	800c12c <UART_SetConfig+0x21c>
 800bf7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bf7e:	0148      	.short	0x0148
 800bf80:	011e0118 	.word	0x011e0118
 800bf84:	012a00d7 	.word	0x012a00d7
 800bf88:	00d700d7 	.word	0x00d700d7
 800bf8c:	003400d7 	.word	0x003400d7
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf90:	4a96      	ldr	r2, [pc, #600]	; (800c1ec <UART_SetConfig+0x2dc>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d108      	bne.n	800bfa8 <UART_SetConfig+0x98>
 800bf96:	4b93      	ldr	r3, [pc, #588]	; (800c1e4 <UART_SetConfig+0x2d4>)
 800bf98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bf9c:	4b92      	ldr	r3, [pc, #584]	; (800c1e8 <UART_SetConfig+0x2d8>)
 800bf9e:	f002 020c 	and.w	r2, r2, #12
 800bfa2:	4413      	add	r3, r2
 800bfa4:	78db      	ldrb	r3, [r3, #3]
  if(UART_INSTANCE_LOWPOWER(huart))
 800bfa6:	e7e1      	b.n	800bf6c <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfa8:	4a91      	ldr	r2, [pc, #580]	; (800c1f0 <UART_SetConfig+0x2e0>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d120      	bne.n	800bff0 <UART_SetConfig+0xe0>
 800bfae:	4b8d      	ldr	r3, [pc, #564]	; (800c1e4 <UART_SetConfig+0x2d4>)
 800bfb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bfb8:	2b20      	cmp	r3, #32
 800bfba:	f000 80fb 	beq.w	800c1b4 <UART_SetConfig+0x2a4>
 800bfbe:	d80c      	bhi.n	800bfda <UART_SetConfig+0xca>
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 8121 	beq.w	800c208 <UART_SetConfig+0x2f8>
 800bfc6:	2b10      	cmp	r3, #16
 800bfc8:	f000 8100 	beq.w	800c1cc <UART_SetConfig+0x2bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfcc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bfd0:	f000 80ac 	beq.w	800c12c <UART_SetConfig+0x21c>
 800bfd4:	2501      	movs	r5, #1
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e0cd      	b.n	800c176 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfda:	2b30      	cmp	r3, #48	; 0x30
 800bfdc:	d1f6      	bne.n	800bfcc <UART_SetConfig+0xbc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfde:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bfe2:	f040 80da 	bne.w	800c19a <UART_SetConfig+0x28a>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bfe6:	6862      	ldr	r2, [r4, #4]
 800bfe8:	0853      	lsrs	r3, r2, #1
 800bfea:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bfee:	e0ea      	b.n	800c1c6 <UART_SetConfig+0x2b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bff0:	4a80      	ldr	r2, [pc, #512]	; (800c1f4 <UART_SetConfig+0x2e4>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d10f      	bne.n	800c016 <UART_SetConfig+0x106>
 800bff6:	4b7b      	ldr	r3, [pc, #492]	; (800c1e4 <UART_SetConfig+0x2d4>)
 800bff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bffc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c000:	2b80      	cmp	r3, #128	; 0x80
 800c002:	f000 80d7 	beq.w	800c1b4 <UART_SetConfig+0x2a4>
 800c006:	d804      	bhi.n	800c012 <UART_SetConfig+0x102>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 80fd 	beq.w	800c208 <UART_SetConfig+0x2f8>
 800c00e:	2b40      	cmp	r3, #64	; 0x40
 800c010:	e7da      	b.n	800bfc8 <UART_SetConfig+0xb8>
 800c012:	2bc0      	cmp	r3, #192	; 0xc0
 800c014:	e7e2      	b.n	800bfdc <UART_SetConfig+0xcc>
 800c016:	4a78      	ldr	r2, [pc, #480]	; (800c1f8 <UART_SetConfig+0x2e8>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d112      	bne.n	800c042 <UART_SetConfig+0x132>
 800c01c:	4b71      	ldr	r3, [pc, #452]	; (800c1e4 <UART_SetConfig+0x2d4>)
 800c01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c02a:	f000 80c3 	beq.w	800c1b4 <UART_SetConfig+0x2a4>
 800c02e:	d805      	bhi.n	800c03c <UART_SetConfig+0x12c>
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 80e9 	beq.w	800c208 <UART_SetConfig+0x2f8>
 800c036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c03a:	e7c5      	b.n	800bfc8 <UART_SetConfig+0xb8>
 800c03c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c040:	e7cc      	b.n	800bfdc <UART_SetConfig+0xcc>
 800c042:	4a66      	ldr	r2, [pc, #408]	; (800c1dc <UART_SetConfig+0x2cc>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d1c1      	bne.n	800bfcc <UART_SetConfig+0xbc>
 800c048:	4b66      	ldr	r3, [pc, #408]	; (800c1e4 <UART_SetConfig+0x2d4>)
 800c04a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800c04e:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800c052:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c056:	d02b      	beq.n	800c0b0 <UART_SetConfig+0x1a0>
 800c058:	d809      	bhi.n	800c06e <UART_SetConfig+0x15e>
 800c05a:	b17d      	cbz	r5, 800c07c <UART_SetConfig+0x16c>
 800c05c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c060:	d022      	beq.n	800c0a8 <UART_SetConfig+0x198>
        ret = HAL_ERROR;
 800c062:	2501      	movs	r5, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c064:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800c066:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  
  return ret;
}
 800c06a:	4628      	mov	r0, r5
 800c06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c06e:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800c072:	d1f6      	bne.n	800c062 <UART_SetConfig+0x152>
 800c074:	2508      	movs	r5, #8
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c076:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c07a:	e004      	b.n	800c086 <UART_SetConfig+0x176>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c07c:	f7fe f8b4 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800c080:	2800      	cmp	r0, #0
 800c082:	f000 808f 	beq.w	800c1a4 <UART_SetConfig+0x294>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800c086:	6862      	ldr	r2, [r4, #4]
 800c088:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c08c:	4283      	cmp	r3, r0
 800c08e:	d8e8      	bhi.n	800c062 <UART_SetConfig+0x152>
 800c090:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800c094:	d8e5      	bhi.n	800c062 <UART_SetConfig+0x152>
        switch (clocksource)
 800c096:	2d08      	cmp	r5, #8
 800c098:	d845      	bhi.n	800c126 <UART_SetConfig+0x216>
 800c09a:	e8df f005 	tbb	[pc, r5]
 800c09e:	440c      	.short	0x440c
 800c0a0:	442e4422 	.word	0x442e4422
 800c0a4:	4444      	.short	0x4444
 800c0a6:	3b          	.byte	0x3b
 800c0a7:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c0a8:	f7fd fd50 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
      break;
 800c0ac:	2504      	movs	r5, #4
 800c0ae:	e7e7      	b.n	800c080 <UART_SetConfig+0x170>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c0b0:	4852      	ldr	r0, [pc, #328]	; (800c1fc <UART_SetConfig+0x2ec>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0b2:	2502      	movs	r5, #2
 800c0b4:	e7e7      	b.n	800c086 <UART_SetConfig+0x176>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c0b6:	f7fe f897 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
 800c0ba:	6862      	ldr	r2, [r4, #4]
 800c0bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c0c0:	0856      	lsrs	r6, r2, #1
 800c0c2:	2700      	movs	r7, #0
 800c0c4:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	f7f4 fdeb 	bl	8000ca8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0d2:	4b4b      	ldr	r3, [pc, #300]	; (800c200 <UART_SetConfig+0x2f0>)
 800c0d4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d8c2      	bhi.n	800c062 <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	60d8      	str	r0, [r3, #12]
 800c0e0:	e7c0      	b.n	800c064 <UART_SetConfig+0x154>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c0e2:	4848      	ldr	r0, [pc, #288]	; (800c204 <UART_SetConfig+0x2f4>)
 800c0e4:	0855      	lsrs	r5, r2, #1
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	1940      	adds	r0, r0, r5
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	f141 0100 	adc.w	r1, r1, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c0f2:	f7f4 fdd9 	bl	8000ca8 <__aeabi_uldivmod>
          break;
 800c0f6:	2500      	movs	r5, #0
 800c0f8:	e7eb      	b.n	800c0d2 <UART_SetConfig+0x1c2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c0fa:	f7fd fd27 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
 800c0fe:	6862      	ldr	r2, [r4, #4]
 800c100:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c104:	0856      	lsrs	r6, r2, #1
 800c106:	2700      	movs	r7, #0
 800c108:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c10c:	2300      	movs	r3, #0
 800c10e:	4630      	mov	r0, r6
 800c110:	4639      	mov	r1, r7
 800c112:	e7ee      	b.n	800c0f2 <UART_SetConfig+0x1e2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c114:	0850      	lsrs	r0, r2, #1
 800c116:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800c11a:	f04f 0300 	mov.w	r3, #0
 800c11e:	bf2c      	ite	cs
 800c120:	2101      	movcs	r1, #1
 800c122:	2100      	movcc	r1, #0
 800c124:	e7e5      	b.n	800c0f2 <UART_SetConfig+0x1e2>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800c126:	2501      	movs	r5, #1
 800c128:	2000      	movs	r0, #0
 800c12a:	e7d2      	b.n	800c0d2 <UART_SetConfig+0x1c2>
      ret = HAL_ERROR;
 800c12c:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c12e:	2300      	movs	r3, #0
 800c130:	e077      	b.n	800c222 <UART_SetConfig+0x312>
    switch (clocksource)
 800c132:	2b08      	cmp	r3, #8
 800c134:	f63f af4e 	bhi.w	800bfd4 <UART_SetConfig+0xc4>
 800c138:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <UART_SetConfig+0x230>)
 800c13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13e:	bf00      	nop
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c181 	.word	0x0800c181
 800c148:	0800c187 	.word	0x0800c187
 800c14c:	0800bfd5 	.word	0x0800bfd5
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800bfd5 	.word	0x0800bfd5
 800c158:	0800bfd5 	.word	0x0800bfd5
 800c15c:	0800bfd5 	.word	0x0800bfd5
 800c160:	0800c19b 	.word	0x0800c19b
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c164:	f7fe f840 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c16e:	fbb0 f0f3 	udiv	r0, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c172:	2500      	movs	r5, #0
 800c174:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c176:	f1a0 0210 	sub.w	r2, r0, #16
 800c17a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c17e:	e7ab      	b.n	800c0d8 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c180:	f7fe f842 	bl	800a208 <HAL_RCC_GetPCLK2Freq>
 800c184:	e7f0      	b.n	800c168 <UART_SetConfig+0x258>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c186:	6863      	ldr	r3, [r4, #4]
 800c188:	0858      	lsrs	r0, r3, #1
 800c18a:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800c18e:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 800c192:	e7ec      	b.n	800c16e <UART_SetConfig+0x25e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c194:	f7fd fcda 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
 800c198:	e7e6      	b.n	800c168 <UART_SetConfig+0x258>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c19a:	6863      	ldr	r3, [r4, #4]
 800c19c:	0858      	lsrs	r0, r3, #1
 800c19e:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800c1a2:	e7e4      	b.n	800c16e <UART_SetConfig+0x25e>
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	e75d      	b.n	800c064 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1a8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c1ac:	d1e8      	bne.n	800c180 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c1ae:	f7fe f82b 	bl	800a208 <HAL_RCC_GetPCLK2Freq>
 800c1b2:	e02e      	b.n	800c212 <UART_SetConfig+0x302>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c1b8:	d1e5      	bne.n	800c186 <UART_SetConfig+0x276>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c1ba:	6862      	ldr	r2, [r4, #4]
 800c1bc:	0853      	lsrs	r3, r2, #1
 800c1be:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c1c2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c1c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1ca:	e028      	b.n	800c21e <UART_SetConfig+0x30e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1cc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c1d0:	d1e0      	bne.n	800c194 <UART_SetConfig+0x284>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c1d2:	f7fd fcbb 	bl	8009b4c <HAL_RCC_GetSysClockFreq>
 800c1d6:	e01c      	b.n	800c212 <UART_SetConfig+0x302>
 800c1d8:	efff69f3 	.word	0xefff69f3
 800c1dc:	40008000 	.word	0x40008000
 800c1e0:	40013800 	.word	0x40013800
 800c1e4:	40021000 	.word	0x40021000
 800c1e8:	08028360 	.word	0x08028360
 800c1ec:	40004400 	.word	0x40004400
 800c1f0:	40004800 	.word	0x40004800
 800c1f4:	40004c00 	.word	0x40004c00
 800c1f8:	40005000 	.word	0x40005000
 800c1fc:	00f42400 	.word	0x00f42400
 800c200:	000ffcff 	.word	0x000ffcff
 800c204:	f4240000 	.word	0xf4240000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c208:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c20c:	d1aa      	bne.n	800c164 <UART_SetConfig+0x254>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c20e:	f7fd ffeb 	bl	800a1e8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c212:	6863      	ldr	r3, [r4, #4]
 800c214:	085a      	lsrs	r2, r3, #1
 800c216:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c21a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c21e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c220:	2500      	movs	r5, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c222:	f1a3 0110 	sub.w	r1, r3, #16
 800c226:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c22a:	4291      	cmp	r1, r2
 800c22c:	f63f af19 	bhi.w	800c062 <UART_SetConfig+0x152>
      brrtemp = usartdiv & 0xFFF0U;
 800c230:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800c234:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c236:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800c23a:	4313      	orrs	r3, r2
 800c23c:	60cb      	str	r3, [r1, #12]
 800c23e:	e711      	b.n	800c064 <UART_SetConfig+0x154>

0800c240 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c240:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c242:	07da      	lsls	r2, r3, #31
{
 800c244:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c246:	d506      	bpl.n	800c256 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c248:	6801      	ldr	r1, [r0, #0]
 800c24a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c24c:	684a      	ldr	r2, [r1, #4]
 800c24e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c252:	4322      	orrs	r2, r4
 800c254:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c256:	079c      	lsls	r4, r3, #30
 800c258:	d506      	bpl.n	800c268 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c25a:	6801      	ldr	r1, [r0, #0]
 800c25c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c25e:	684a      	ldr	r2, [r1, #4]
 800c260:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c264:	4322      	orrs	r2, r4
 800c266:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c268:	0759      	lsls	r1, r3, #29
 800c26a:	d506      	bpl.n	800c27a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c26c:	6801      	ldr	r1, [r0, #0]
 800c26e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c270:	684a      	ldr	r2, [r1, #4]
 800c272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c276:	4322      	orrs	r2, r4
 800c278:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c27a:	071a      	lsls	r2, r3, #28
 800c27c:	d506      	bpl.n	800c28c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c27e:	6801      	ldr	r1, [r0, #0]
 800c280:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c282:	684a      	ldr	r2, [r1, #4]
 800c284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c288:	4322      	orrs	r2, r4
 800c28a:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c28c:	06dc      	lsls	r4, r3, #27
 800c28e:	d506      	bpl.n	800c29e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c290:	6801      	ldr	r1, [r0, #0]
 800c292:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c294:	688a      	ldr	r2, [r1, #8]
 800c296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c29a:	4322      	orrs	r2, r4
 800c29c:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c29e:	0699      	lsls	r1, r3, #26
 800c2a0:	d506      	bpl.n	800c2b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2a2:	6801      	ldr	r1, [r0, #0]
 800c2a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c2a6:	688a      	ldr	r2, [r1, #8]
 800c2a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2ac:	4322      	orrs	r2, r4
 800c2ae:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2b0:	065a      	lsls	r2, r3, #25
 800c2b2:	d50f      	bpl.n	800c2d4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2b4:	6801      	ldr	r1, [r0, #0]
 800c2b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c2b8:	684a      	ldr	r2, [r1, #4]
 800c2ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c2be:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2c6:	d105      	bne.n	800c2d4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2c8:	684a      	ldr	r2, [r1, #4]
 800c2ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c2cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c2d0:	4322      	orrs	r2, r4
 800c2d2:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2d4:	061b      	lsls	r3, r3, #24
 800c2d6:	d506      	bpl.n	800c2e6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2d8:	6802      	ldr	r2, [r0, #0]
 800c2da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c2dc:	6853      	ldr	r3, [r2, #4]
 800c2de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c2e2:	430b      	orrs	r3, r1
 800c2e4:	6053      	str	r3, [r2, #4]
  }
}
 800c2e6:	bd10      	pop	{r4, pc}

0800c2e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	460e      	mov	r6, r1
 800c2f4:	4615      	mov	r5, r2
 800c2f6:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2f8:	6822      	ldr	r2, [r4, #0]
 800c2fa:	69d3      	ldr	r3, [r2, #28]
 800c2fc:	ea36 0303 	bics.w	r3, r6, r3
 800c300:	bf0c      	ite	eq
 800c302:	2301      	moveq	r3, #1
 800c304:	2300      	movne	r3, #0
 800c306:	42ab      	cmp	r3, r5
 800c308:	d001      	beq.n	800c30e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c30a:	2000      	movs	r0, #0
 800c30c:	e017      	b.n	800c33e <UART_WaitOnFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 800c30e:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c312:	d0f2      	beq.n	800c2fa <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c314:	f1b8 0f00 	cmp.w	r8, #0
 800c318:	d113      	bne.n	800c342 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c31a:	6823      	ldr	r3, [r4, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c322:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	f022 0201 	bic.w	r2, r2, #1
 800c32a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c32c:	2320      	movs	r3, #32
 800c32e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800c332:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800c336:	2300      	movs	r3, #0
 800c338:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c33c:	2003      	movs	r0, #3
}
 800c33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c342:	f7fc fb11 	bl	8008968 <HAL_GetTick>
 800c346:	1bc0      	subs	r0, r0, r7
 800c348:	4540      	cmp	r0, r8
 800c34a:	d9d5      	bls.n	800c2f8 <UART_WaitOnFlagUntilTimeout+0x10>
 800c34c:	e7e5      	b.n	800c31a <UART_WaitOnFlagUntilTimeout+0x32>

0800c34e <HAL_UART_Transmit>:
{
 800c34e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c350:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800c352:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c356:	2b20      	cmp	r3, #32
{
 800c358:	b085      	sub	sp, #20
 800c35a:	4604      	mov	r4, r0
 800c35c:	460d      	mov	r5, r1
 800c35e:	4616      	mov	r6, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800c360:	d149      	bne.n	800c3f6 <HAL_UART_Transmit+0xa8>
    if((pData == NULL ) || (Size == 0U))
 800c362:	2900      	cmp	r1, #0
 800c364:	d045      	beq.n	800c3f2 <HAL_UART_Transmit+0xa4>
 800c366:	2a00      	cmp	r2, #0
 800c368:	d043      	beq.n	800c3f2 <HAL_UART_Transmit+0xa4>
    __HAL_LOCK(huart);
 800c36a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d041      	beq.n	800c3f6 <HAL_UART_Transmit+0xa8>
 800c372:	2301      	movs	r3, #1
 800c374:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c378:	2300      	movs	r3, #0
 800c37a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c37c:	2321      	movs	r3, #33	; 0x21
 800c37e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 800c382:	f7fc faf1 	bl	8008968 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800c386:	f8a4 6050 	strh.w	r6, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800c38a:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800c38c:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800c390:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c394:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 800c396:	b292      	uxth	r2, r2
 800c398:	b952      	cbnz	r2, 800c3b0 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c39a:	2140      	movs	r1, #64	; 0x40
 800c39c:	4620      	mov	r0, r4
 800c39e:	f7ff ffa3 	bl	800c2e8 <UART_WaitOnFlagUntilTimeout>
 800c3a2:	b968      	cbnz	r0, 800c3c0 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800c3a4:	2320      	movs	r3, #32
 800c3a6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800c3aa:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 800c3ae:	e008      	b.n	800c3c2 <HAL_UART_Transmit+0x74>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2180      	movs	r1, #128	; 0x80
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	f7ff ff96 	bl	800c2e8 <UART_WaitOnFlagUntilTimeout>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	b110      	cbz	r0, 800c3c6 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800c3c0:	2003      	movs	r0, #3
}
 800c3c2:	b005      	add	sp, #20
 800c3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3c6:	68a2      	ldr	r2, [r4, #8]
 800c3c8:	6821      	ldr	r1, [r4, #0]
 800c3ca:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c3ce:	d10d      	bne.n	800c3ec <HAL_UART_Transmit+0x9e>
 800c3d0:	6922      	ldr	r2, [r4, #16]
 800c3d2:	b95a      	cbnz	r2, 800c3ec <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c3d4:	f835 2b02 	ldrh.w	r2, [r5], #2
 800c3d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c3dc:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800c3de:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c3e2:	3a01      	subs	r2, #1
 800c3e4:	b292      	uxth	r2, r2
 800c3e6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800c3ea:	e7d1      	b.n	800c390 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c3ec:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c3f0:	e7f4      	b.n	800c3dc <HAL_UART_Transmit+0x8e>
      return  HAL_ERROR;
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	e7e5      	b.n	800c3c2 <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 800c3f6:	2002      	movs	r0, #2
 800c3f8:	e7e3      	b.n	800c3c2 <HAL_UART_Transmit+0x74>

0800c3fa <HAL_UART_Receive>:
{
 800c3fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c3fe:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800c400:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800c404:	2b20      	cmp	r3, #32
{
 800c406:	4604      	mov	r4, r0
 800c408:	460d      	mov	r5, r1
 800c40a:	4617      	mov	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800c40c:	d15f      	bne.n	800c4ce <HAL_UART_Receive+0xd4>
    if((pData == NULL ) || (Size == 0U))
 800c40e:	2900      	cmp	r1, #0
 800c410:	d05b      	beq.n	800c4ca <HAL_UART_Receive+0xd0>
 800c412:	2a00      	cmp	r2, #0
 800c414:	d059      	beq.n	800c4ca <HAL_UART_Receive+0xd0>
    __HAL_LOCK(huart);
 800c416:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d057      	beq.n	800c4ce <HAL_UART_Receive+0xd4>
 800c41e:	2301      	movs	r3, #1
 800c420:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c424:	2300      	movs	r3, #0
 800c426:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c428:	2322      	movs	r3, #34	; 0x22
 800c42a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 800c42e:	f7fc fa9b 	bl	8008968 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c432:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800c434:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800c438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800c43c:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800c43e:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800c442:	d115      	bne.n	800c470 <HAL_UART_Receive+0x76>
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	b98b      	cbnz	r3, 800c46c <HAL_UART_Receive+0x72>
 800c448:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c44c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800c450:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800c454:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800c458:	b290      	uxth	r0, r2
 800c45a:	b9b8      	cbnz	r0, 800c48c <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 800c45c:	2320      	movs	r3, #32
 800c45e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 800c462:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800c466:	b002      	add	sp, #8
 800c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800c46c:	23ff      	movs	r3, #255	; 0xff
 800c46e:	e7ed      	b.n	800c44c <HAL_UART_Receive+0x52>
 800c470:	b923      	cbnz	r3, 800c47c <HAL_UART_Receive+0x82>
 800c472:	6923      	ldr	r3, [r4, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d0f9      	beq.n	800c46c <HAL_UART_Receive+0x72>
 800c478:	237f      	movs	r3, #127	; 0x7f
 800c47a:	e7e7      	b.n	800c44c <HAL_UART_Receive+0x52>
 800c47c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c480:	d1e6      	bne.n	800c450 <HAL_UART_Receive+0x56>
 800c482:	6923      	ldr	r3, [r4, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d0f7      	beq.n	800c478 <HAL_UART_Receive+0x7e>
 800c488:	233f      	movs	r3, #63	; 0x3f
 800c48a:	e7df      	b.n	800c44c <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c48c:	9600      	str	r6, [sp, #0]
 800c48e:	4643      	mov	r3, r8
 800c490:	2200      	movs	r2, #0
 800c492:	2120      	movs	r1, #32
 800c494:	4620      	mov	r0, r4
 800c496:	f7ff ff27 	bl	800c2e8 <UART_WaitOnFlagUntilTimeout>
 800c49a:	b9d0      	cbnz	r0, 800c4d2 <HAL_UART_Receive+0xd8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c49c:	68a2      	ldr	r2, [r4, #8]
 800c49e:	6823      	ldr	r3, [r4, #0]
 800c4a0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c4a4:	d10c      	bne.n	800c4c0 <HAL_UART_Receive+0xc6>
 800c4a6:	6922      	ldr	r2, [r4, #16]
 800c4a8:	b952      	cbnz	r2, 800c4c0 <HAL_UART_Receive+0xc6>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800c4aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4ac:	403b      	ands	r3, r7
 800c4ae:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800c4b2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800c4b6:	3a01      	subs	r2, #1
 800c4b8:	b292      	uxth	r2, r2
 800c4ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800c4be:	e7c9      	b.n	800c454 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c4c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4c2:	403b      	ands	r3, r7
 800c4c4:	f805 3b01 	strb.w	r3, [r5], #1
 800c4c8:	e7f3      	b.n	800c4b2 <HAL_UART_Receive+0xb8>
      return  HAL_ERROR;
 800c4ca:	2001      	movs	r0, #1
 800c4cc:	e7cb      	b.n	800c466 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800c4ce:	2002      	movs	r0, #2
 800c4d0:	e7c9      	b.n	800c466 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800c4d2:	2003      	movs	r0, #3
 800c4d4:	e7c7      	b.n	800c466 <HAL_UART_Receive+0x6c>

0800c4d6 <UART_CheckIdleState>:
{
 800c4d6:	b530      	push	{r4, r5, lr}
 800c4d8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4da:	2500      	movs	r5, #0
{
 800c4dc:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4de:	6745      	str	r5, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800c4e0:	f7fc fa42 	bl	8008968 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4e4:	6822      	ldr	r2, [r4, #0]
 800c4e6:	6812      	ldr	r2, [r2, #0]
 800c4e8:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800c4ea:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4ec:	d416      	bmi.n	800c51c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ee:	6822      	ldr	r2, [r4, #0]
 800c4f0:	6812      	ldr	r2, [r2, #0]
 800c4f2:	0752      	lsls	r2, r2, #29
 800c4f4:	d509      	bpl.n	800c50a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4f6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c4fa:	9200      	str	r2, [sp, #0]
 800c4fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c500:	2200      	movs	r2, #0
 800c502:	4620      	mov	r0, r4
 800c504:	f7ff fef0 	bl	800c2e8 <UART_WaitOnFlagUntilTimeout>
 800c508:	b9a8      	cbnz	r0, 800c536 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 800c50a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c50c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800c50e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800c512:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800c516:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800c51a:	e00d      	b.n	800c538 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c51c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c520:	9200      	str	r2, [sp, #0]
 800c522:	9003      	str	r0, [sp, #12]
 800c524:	462a      	mov	r2, r5
 800c526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c52a:	4620      	mov	r0, r4
 800c52c:	f7ff fedc 	bl	800c2e8 <UART_WaitOnFlagUntilTimeout>
 800c530:	9b03      	ldr	r3, [sp, #12]
 800c532:	2800      	cmp	r0, #0
 800c534:	d0db      	beq.n	800c4ee <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800c536:	2003      	movs	r0, #3
}
 800c538:	b005      	add	sp, #20
 800c53a:	bd30      	pop	{r4, r5, pc}

0800c53c <HAL_UART_Init>:
{
 800c53c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800c53e:	4604      	mov	r4, r0
 800c540:	b360      	cbz	r0, 800c59c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800c542:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c546:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c54a:	b91b      	cbnz	r3, 800c554 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800c54c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c550:	f7ff fcdc 	bl	800bf0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c554:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c556:	2324      	movs	r3, #36	; 0x24
 800c558:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800c55c:	6813      	ldr	r3, [r2, #0]
 800c55e:	f023 0301 	bic.w	r3, r3, #1
 800c562:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c564:	4620      	mov	r0, r4
 800c566:	f7ff fcd3 	bl	800bf10 <UART_SetConfig>
 800c56a:	2801      	cmp	r0, #1
 800c56c:	d016      	beq.n	800c59c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c570:	b113      	cbz	r3, 800c578 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800c572:	4620      	mov	r0, r4
 800c574:	f7ff fe64 	bl	800c240 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c578:	6823      	ldr	r3, [r4, #0]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c580:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c582:	689a      	ldr	r2, [r3, #8]
 800c584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c588:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800c590:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800c598:	f7ff bf9d 	b.w	800c4d6 <UART_CheckIdleState>
}
 800c59c:	2001      	movs	r0, #1
 800c59e:	bd10      	pop	{r4, pc}

0800c5a0 <MQTTCloseSession>:

void MQTTCloseSession(MQTTClient* c)
{
    c->ping_outstanding = 0;
    c->isconnected = 0;
    if (c->cleansession)
 800c5a0:	6a42      	ldr	r2, [r0, #36]	; 0x24
    c->ping_outstanding = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	7703      	strb	r3, [r0, #28]
    c->isconnected = 0;
 800c5a6:	6203      	str	r3, [r0, #32]
    if (c->cleansession)
 800c5a8:	b122      	cbz	r2, 800c5b4 <MQTTCloseSession+0x14>
        c->messageHandlers[i].topicFilter = NULL;
 800c5aa:	6283      	str	r3, [r0, #40]	; 0x28
 800c5ac:	6303      	str	r3, [r0, #48]	; 0x30
 800c5ae:	6383      	str	r3, [r0, #56]	; 0x38
 800c5b0:	6403      	str	r3, [r0, #64]	; 0x40
 800c5b2:	6483      	str	r3, [r0, #72]	; 0x48
        MQTTCleanSession(c);
}
 800c5b4:	4770      	bx	lr

0800c5b6 <sendPacket>:
{
 800c5b6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	460f      	mov	r7, r1
 800c5be:	4616      	mov	r6, r2
        sent = 0;
 800c5c0:	2500      	movs	r5, #0
    while (sent < length && !TimerIsExpired(timer))
 800c5c2:	42bd      	cmp	r5, r7
 800c5c4:	da1d      	bge.n	800c602 <sendPacket+0x4c>
 800c5c6:	4630      	mov	r0, r6
 800c5c8:	f7f6 fbb9 	bl	8002d3e <TimerIsExpired>
 800c5cc:	b990      	cbnz	r0, 800c5f4 <sendPacket+0x3e>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length - sent, TimerLeftMS(timer)); // length changed by length - sent for long packets and non blocking sockets
 800c5ce:	6921      	ldr	r1, [r4, #16]
 800c5d0:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
 800c5d4:	4429      	add	r1, r5
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f8d9 a008 	ldr.w	sl, [r9, #8]
 800c5dc:	9101      	str	r1, [sp, #4]
 800c5de:	f7f6 fb9a 	bl	8002d16 <TimerLeftMS>
 800c5e2:	eba7 0805 	sub.w	r8, r7, r5
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	9901      	ldr	r1, [sp, #4]
 800c5ea:	4642      	mov	r2, r8
 800c5ec:	4648      	mov	r0, r9
 800c5ee:	47d0      	blx	sl
        if (rc < 0)  // there was an error writing the data
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	da04      	bge.n	800c5fe <sendPacket+0x48>
        rc = FAILURE;
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c5f8:	b002      	add	sp, #8
 800c5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sent += rc;
 800c5fe:	4405      	add	r5, r0
 800c600:	e7df      	b.n	800c5c2 <sendPacket+0xc>
    if (sent == length)
 800c602:	d1f7      	bne.n	800c5f4 <sendPacket+0x3e>
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c608:	69a1      	ldr	r1, [r4, #24]
 800c60a:	f7f6 fb79 	bl	8002d00 <TimerCountdown>
        rc = MQSUCCESS;
 800c60e:	2000      	movs	r0, #0
    return rc;
 800c610:	e7f2      	b.n	800c5f8 <sendPacket+0x42>
	...

0800c614 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c618:	6d45      	ldr	r5, [r0, #84]	; 0x54
{
 800c61a:	b093      	sub	sp, #76	; 0x4c
 800c61c:	460f      	mov	r7, r1
 800c61e:	4604      	mov	r4, r0
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c620:	6941      	ldr	r1, [r0, #20]
 800c622:	686e      	ldr	r6, [r5, #4]
 800c624:	9107      	str	r1, [sp, #28]
 800c626:	4638      	mov	r0, r7
 800c628:	f7f6 fb75 	bl	8002d16 <TimerLeftMS>
 800c62c:	9907      	ldr	r1, [sp, #28]
 800c62e:	4603      	mov	r3, r0
 800c630:	2201      	movs	r2, #1
 800c632:	4628      	mov	r0, r5
 800c634:	47b0      	blx	r6
    if (rc != 1)
 800c636:	2801      	cmp	r0, #1
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c638:	4606      	mov	r6, r0
    if (rc != 1)
 800c63a:	d14e      	bne.n	800c6da <cycle+0xc6>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c63c:	4638      	mov	r0, r7
 800c63e:	f7f6 fb6a 	bl	8002d16 <TimerLeftMS>
 800c642:	f04f 0805 	mov.w	r8, #5
 800c646:	4681      	mov	r9, r0
    *value = 0;
 800c648:	2500      	movs	r5, #0
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c64a:	f1b8 0801 	subs.w	r8, r8, #1
 800c64e:	d012      	beq.n	800c676 <cycle+0x62>
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800c650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c652:	464b      	mov	r3, r9
 800c654:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	a90e      	add	r1, sp, #56	; 0x38
 800c65c:	47d0      	blx	sl
        if (rc != 1)
 800c65e:	2801      	cmp	r0, #1
 800c660:	d109      	bne.n	800c676 <cycle+0x62>
        *value += (i & 127) * multiplier;
 800c662:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800c666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c66a:	fb06 5502 	mla	r5, r6, r2, r5
    } while ((i & 128) != 0);
 800c66e:	061a      	lsls	r2, r3, #24
        multiplier *= 128;
 800c670:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((i & 128) != 0);
 800c674:	d4e9      	bmi.n	800c64a <cycle+0x36>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c676:	6960      	ldr	r0, [r4, #20]
 800c678:	4629      	mov	r1, r5
 800c67a:	3001      	adds	r0, #1
 800c67c:	f000 fc80 	bl	800cf80 <MQTTPacket_encode>
    if (rem_len > (c->readbuf_size - len))
 800c680:	68e3      	ldr	r3, [r4, #12]
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c682:	3001      	adds	r0, #1
    if (rem_len > (c->readbuf_size - len))
 800c684:	1a1b      	subs	r3, r3, r0
 800c686:	42ab      	cmp	r3, r5
 800c688:	d20a      	bcs.n	800c6a0 <cycle+0x8c>
        rc = BUFFER_OVERFLOW;
 800c68a:	f06f 0501 	mvn.w	r5, #1
    }

exit:
    if (rc == MQSUCCESS)
        rc = packet_type;
    else if (c->isconnected)
 800c68e:	6a23      	ldr	r3, [r4, #32]
 800c690:	b113      	cbz	r3, 800c698 <cycle+0x84>
        MQTTCloseSession(c);
 800c692:	4620      	mov	r0, r4
 800c694:	f7ff ff84 	bl	800c5a0 <MQTTCloseSession>
    return rc;
}
 800c698:	4628      	mov	r0, r5
 800c69a:	b013      	add	sp, #76	; 0x4c
 800c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rem_len > 0)
 800c6a0:	b195      	cbz	r5, 800c6c8 <cycle+0xb4>
      rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer));
 800c6a2:	6961      	ldr	r1, [r4, #20]
 800c6a4:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800c6a6:	4401      	add	r1, r0
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800c6ae:	9107      	str	r1, [sp, #28]
 800c6b0:	f7f6 fb31 	bl	8002d16 <TimerLeftMS>
 800c6b4:	9907      	ldr	r1, [sp, #28]
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	462a      	mov	r2, r5
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	47c0      	blx	r8
      if (rc != rem_len)
 800c6be:	42a8      	cmp	r0, r5
 800c6c0:	d002      	beq.n	800c6c8 <cycle+0xb4>
        rc = 0;
 800c6c2:	2600      	movs	r6, #0
 800c6c4:	2500      	movs	r5, #0
 800c6c6:	e0ae      	b.n	800c826 <cycle+0x212>
    header.byte = c->readbuf[0];
 800c6c8:	6963      	ldr	r3, [r4, #20]
    if (c->keepAliveInterval > 0)
 800c6ca:	69a1      	ldr	r1, [r4, #24]
    header.byte = c->readbuf[0];
 800c6cc:	781e      	ldrb	r6, [r3, #0]
    rc = header.bits.type;
 800c6ce:	0936      	lsrs	r6, r6, #4
    if (c->keepAliveInterval > 0)
 800c6d0:	b119      	cbz	r1, 800c6da <cycle+0xc6>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800c6d2:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c6d6:	f7f6 fb13 	bl	8002d00 <TimerCountdown>
    switch (packet_type)
 800c6da:	2e0d      	cmp	r6, #13
 800c6dc:	f200 80f9 	bhi.w	800c8d2 <cycle+0x2be>
 800c6e0:	a301      	add	r3, pc, #4	; (adr r3, 800c6e8 <cycle+0xd4>)
 800c6e2:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800c6e6:	bf00      	nop
 800c6e8:	0800c6c5 	.word	0x0800c6c5
 800c6ec:	0800c8d3 	.word	0x0800c8d3
 800c6f0:	0800c6c5 	.word	0x0800c6c5
 800c6f4:	0800c721 	.word	0x0800c721
 800c6f8:	0800c6c5 	.word	0x0800c6c5
 800c6fc:	0800c879 	.word	0x0800c879
 800c700:	0800c879 	.word	0x0800c879
 800c704:	0800c6c5 	.word	0x0800c6c5
 800c708:	0800c8d3 	.word	0x0800c8d3
 800c70c:	0800c6c5 	.word	0x0800c6c5
 800c710:	0800c8d3 	.word	0x0800c8d3
 800c714:	0800c8d3 	.word	0x0800c8d3
 800c718:	0800c8d3 	.word	0x0800c8d3
 800c71c:	0800c8b9 	.word	0x0800c8b9
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800c720:	2300      	movs	r3, #0
 800c722:	9311      	str	r3, [sp, #68]	; 0x44
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c724:	68e3      	ldr	r3, [r4, #12]
 800c726:	9304      	str	r3, [sp, #16]
 800c728:	6963      	ldr	r3, [r4, #20]
 800c72a:	9303      	str	r3, [sp, #12]
 800c72c:	ab11      	add	r3, sp, #68	; 0x44
 800c72e:	9302      	str	r3, [sp, #8]
 800c730:	ad0b      	add	r5, sp, #44	; 0x2c
 800c732:	ab10      	add	r3, sp, #64	; 0x40
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	9500      	str	r5, [sp, #0]
 800c738:	ab0f      	add	r3, sp, #60	; 0x3c
 800c73a:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 800c73e:	a908      	add	r1, sp, #32
 800c740:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 800c744:	f000 fb9e 	bl	800ce84 <MQTTDeserialize_publish>
 800c748:	2801      	cmp	r0, #1
 800c74a:	d001      	beq.n	800c750 <cycle+0x13c>
 800c74c:	4635      	mov	r5, r6
    return rc;
 800c74e:	e7a3      	b.n	800c698 <cycle+0x84>
            msg.qos = (enum QoS)intQoS;
 800c750:	9b08      	ldr	r3, [sp, #32]
 800c752:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c756:	46a2      	mov	sl, r4
 800c758:	f104 0828 	add.w	r8, r4, #40	; 0x28
    int rc = FAILURE;
 800c75c:	f04f 3bff 	mov.w	fp, #4294967295
    md->message = aMessage;
 800c760:	f10d 0938 	add.w	r9, sp, #56	; 0x38
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c764:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800c768:	b1c9      	cbz	r1, 800c79e <cycle+0x18a>
 800c76a:	4628      	mov	r0, r5
 800c76c:	f000 fce4 	bl	800d138 <MQTTPacket_equals>
 800c770:	2800      	cmp	r0, #0
 800c772:	f040 80b3 	bne.w	800c8dc <cycle+0x2c8>
    char* curn_end = curn + topicName->lenstring.len;
 800c776:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c77a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800c77e:	4411      	add	r1, r2
    while (*curf && curn < curn_end)
 800c780:	1e58      	subs	r0, r3, #1
 800c782:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 80a5 	beq.w	800c8d6 <cycle+0x2c2>
 800c78c:	4291      	cmp	r1, r2
 800c78e:	d906      	bls.n	800c79e <cycle+0x18a>
        if (*curn == '/' && *curf != '/')
 800c790:	f892 c000 	ldrb.w	ip, [r2]
 800c794:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800c798:	d122      	bne.n	800c7e0 <cycle+0x1cc>
 800c79a:	2b2f      	cmp	r3, #47	; 0x2f
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c79c:	d02f      	beq.n	800c7fe <cycle+0x1ea>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c79e:	f10a 0a08 	add.w	sl, sl, #8
 800c7a2:	45d0      	cmp	r8, sl
 800c7a4:	d1de      	bne.n	800c764 <cycle+0x150>
    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800c7a6:	f1bb 0f00 	cmp.w	fp, #0
 800c7aa:	d006      	beq.n	800c7ba <cycle+0x1a6>
 800c7ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c7ae:	b123      	cbz	r3, 800c7ba <cycle+0x1a6>
    md->message = aMessage;
 800c7b0:	aa0e      	add	r2, sp, #56	; 0x38
    md->topicName = aTopicName;
 800c7b2:	950a      	str	r5, [sp, #40]	; 0x28
    md->message = aMessage;
 800c7b4:	9209      	str	r2, [sp, #36]	; 0x24
        c->defaultMessageHandler(&md);
 800c7b6:	a809      	add	r0, sp, #36	; 0x24
 800c7b8:	4798      	blx	r3
            if (msg.qos != QOS0)
 800c7ba:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800c7be:	b395      	cbz	r5, 800c826 <cycle+0x212>
                if (msg.qos == QOS1)
 800c7c0:	2d01      	cmp	r5, #1
 800c7c2:	d120      	bne.n	800c806 <cycle+0x1f2>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800c7c4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	2204      	movs	r2, #4
 800c7cc:	2300      	movs	r3, #0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800c7ce:	68a1      	ldr	r1, [r4, #8]
 800c7d0:	6920      	ldr	r0, [r4, #16]
 800c7d2:	f000 fd1d 	bl	800d210 <MQTTSerialize_ack>
                if (len <= 0)
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	dc1d      	bgt.n	800c816 <cycle+0x202>
        rc = FAILURE;
 800c7da:	f04f 35ff 	mov.w	r5, #4294967295
 800c7de:	e756      	b.n	800c68e <cycle+0x7a>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c7e0:	2b2b      	cmp	r3, #43	; 0x2b
 800c7e2:	d004      	beq.n	800c7ee <cycle+0x1da>
 800c7e4:	2b23      	cmp	r3, #35	; 0x23
 800c7e6:	d00c      	beq.n	800c802 <cycle+0x1ee>
 800c7e8:	459c      	cmp	ip, r3
 800c7ea:	e7d7      	b.n	800c79c <cycle+0x188>
 800c7ec:	461a      	mov	r2, r3
            while (nextpos < curn_end && *nextpos != '/')
 800c7ee:	1c53      	adds	r3, r2, #1
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	d004      	beq.n	800c7fe <cycle+0x1ea>
 800c7f4:	f892 c001 	ldrb.w	ip, [r2, #1]
 800c7f8:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800c7fc:	d1f6      	bne.n	800c7ec <cycle+0x1d8>
        curn++;
 800c7fe:	3201      	adds	r2, #1
 800c800:	e7bf      	b.n	800c782 <cycle+0x16e>
            curn = curn_end - 1;    // skip until end of string
 800c802:	1e4a      	subs	r2, r1, #1
 800c804:	e7fb      	b.n	800c7fe <cycle+0x1ea>
                else if (msg.qos == QOS2)
 800c806:	2d02      	cmp	r5, #2
 800c808:	d1e7      	bne.n	800c7da <cycle+0x1c6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800c80a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800c80e:	9300      	str	r3, [sp, #0]
 800c810:	2205      	movs	r2, #5
 800c812:	2300      	movs	r3, #0
 800c814:	e7db      	b.n	800c7ce <cycle+0x1ba>
                    rc = sendPacket(c, len, timer);
 800c816:	4601      	mov	r1, r0
 800c818:	463a      	mov	r2, r7
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7ff fecb 	bl	800c5b6 <sendPacket>
                if (rc == FAILURE)
 800c820:	1c43      	adds	r3, r0, #1
                    rc = sendPacket(c, len, timer);
 800c822:	4605      	mov	r5, r0
                if (rc == FAILURE)
 800c824:	d0d9      	beq.n	800c7da <cycle+0x1c6>
    if (c->keepAliveInterval == 0)
 800c826:	69a3      	ldr	r3, [r4, #24]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d04e      	beq.n	800c8ca <cycle+0x2b6>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800c82c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c830:	f7f6 fa85 	bl	8002d3e <TimerIsExpired>
 800c834:	2800      	cmp	r0, #0
 800c836:	d042      	beq.n	800c8be <cycle+0x2aa>
        if (c->ping_outstanding)
 800c838:	7f23      	ldrb	r3, [r4, #28]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1cd      	bne.n	800c7da <cycle+0x1c6>
            TimerInit(&timer);
 800c83e:	a80e      	add	r0, sp, #56	; 0x38
 800c840:	f7f6 fa85 	bl	8002d4e <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800c844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c848:	a80e      	add	r0, sp, #56	; 0x38
 800c84a:	f7f6 fa51 	bl	8002cf0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800c84e:	68a1      	ldr	r1, [r4, #8]
 800c850:	6920      	ldr	r0, [r4, #16]
 800c852:	f000 fb14 	bl	800ce7e <MQTTSerialize_pingreq>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQSUCCESS) // send the ping packet
 800c856:	1e01      	subs	r1, r0, #0
 800c858:	dd37      	ble.n	800c8ca <cycle+0x2b6>
 800c85a:	aa0e      	add	r2, sp, #56	; 0x38
 800c85c:	4620      	mov	r0, r4
 800c85e:	f7ff feaa 	bl	800c5b6 <sendPacket>
 800c862:	2800      	cmp	r0, #0
 800c864:	d1b9      	bne.n	800c7da <cycle+0x1c6>
                c->ping_outstanding = 1;
 800c866:	2301      	movs	r3, #1
 800c868:	7723      	strb	r3, [r4, #28]
                TimerCountdownMS(&c->last_received, 5000);  // allow for a few seconds to receive the ping response
 800c86a:	f241 3188 	movw	r1, #5000	; 0x1388
 800c86e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c872:	f7f6 fa3d 	bl	8002cf0 <TimerCountdownMS>
    return rc;
 800c876:	e028      	b.n	800c8ca <cycle+0x2b6>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c878:	68e3      	ldr	r3, [r4, #12]
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	aa0e      	add	r2, sp, #56	; 0x38
 800c87e:	6963      	ldr	r3, [r4, #20]
 800c880:	a909      	add	r1, sp, #36	; 0x24
 800c882:	a80b      	add	r0, sp, #44	; 0x2c
 800c884:	f000 fb43 	bl	800cf0e <MQTTDeserialize_ack>
 800c888:	2801      	cmp	r0, #1
 800c88a:	d1a6      	bne.n	800c7da <cycle+0x1c6>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 800c88c:	2e05      	cmp	r6, #5
 800c88e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800c892:	68a1      	ldr	r1, [r4, #8]
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	bf0c      	ite	eq
 800c898:	2206      	moveq	r2, #6
 800c89a:	2207      	movne	r2, #7
 800c89c:	6920      	ldr	r0, [r4, #16]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f000 fcb6 	bl	800d210 <MQTTSerialize_ack>
 800c8a4:	1e01      	subs	r1, r0, #0
 800c8a6:	dd98      	ble.n	800c7da <cycle+0x1c6>
            else if ((rc = sendPacket(c, len, timer)) != MQSUCCESS) // send the PUBREL packet
 800c8a8:	463a      	mov	r2, r7
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f7ff fe83 	bl	800c5b6 <sendPacket>
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d0b7      	beq.n	800c826 <cycle+0x212>
 800c8b6:	e790      	b.n	800c7da <cycle+0x1c6>
            c->ping_outstanding = 0;
 800c8b8:	2500      	movs	r5, #0
 800c8ba:	7725      	strb	r5, [r4, #28]
            break;
 800c8bc:	e7b3      	b.n	800c826 <cycle+0x212>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800c8be:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c8c2:	f7f6 fa3c 	bl	8002d3e <TimerIsExpired>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	d1b6      	bne.n	800c838 <cycle+0x224>
    if (rc == MQSUCCESS)
 800c8ca:	2d00      	cmp	r5, #0
 800c8cc:	f43f af3e 	beq.w	800c74c <cycle+0x138>
 800c8d0:	e6dd      	b.n	800c68e <cycle+0x7a>
 800c8d2:	4635      	mov	r5, r6
 800c8d4:	e6db      	b.n	800c68e <cycle+0x7a>
    return (curn == curn_end) && (*curf == '\0');
 800c8d6:	4291      	cmp	r1, r2
 800c8d8:	f47f af61 	bne.w	800c79e <cycle+0x18a>
            if (c->messageHandlers[i].fp != NULL)
 800c8dc:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f43f af5c 	beq.w	800c79e <cycle+0x18a>
    md->message = aMessage;
 800c8e6:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
                c->messageHandlers[i].fp(&md);
 800c8ea:	a809      	add	r0, sp, #36	; 0x24
 800c8ec:	4798      	blx	r3
                rc = MQSUCCESS;
 800c8ee:	f04f 0b00 	mov.w	fp, #0
 800c8f2:	e754      	b.n	800c79e <cycle+0x18a>

0800c8f4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	460f      	mov	r7, r1
 800c8fa:	4615      	mov	r5, r2
    int rc = FAILURE;
 800c8fc:	f04f 34ff 	mov.w	r4, #4294967295

    do
    {
        if (TimerIsExpired(timer))
 800c900:	4628      	mov	r0, r5
 800c902:	f7f6 fa1c 	bl	8002d3e <TimerIsExpired>
 800c906:	b940      	cbnz	r0, 800c91a <waitfor+0x26>
            break; // we timed out
        rc = cycle(c, timer);
 800c908:	4629      	mov	r1, r5
 800c90a:	4630      	mov	r0, r6
 800c90c:	f7ff fe82 	bl	800c614 <cycle>
    }
    while (rc != packet_type && rc >= 0);
 800c910:	42b8      	cmp	r0, r7
        rc = cycle(c, timer);
 800c912:	4604      	mov	r4, r0
    while (rc != packet_type && rc >= 0);
 800c914:	d001      	beq.n	800c91a <waitfor+0x26>
 800c916:	2800      	cmp	r0, #0
 800c918:	daf2      	bge.n	800c900 <waitfor+0xc>

    return rc;
}
 800c91a:	4620      	mov	r0, r4
 800c91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c91e <MQTTClientInit>:
{
 800c91e:	b510      	push	{r4, lr}
    c->buf = sendbuf;
 800c920:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
 800c922:	9b02      	ldr	r3, [sp, #8]
 800c924:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
 800c926:	9b03      	ldr	r3, [sp, #12]
 800c928:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
 800c92a:	9b04      	ldr	r3, [sp, #16]
    c->ipstack = network;
 800c92c:	6541      	str	r1, [r0, #84]	; 0x54
    c->readbuf_size = readbuf_size;
 800c92e:	60c3      	str	r3, [r0, #12]
        c->messageHandlers[i].topicFilter = 0;
 800c930:	2100      	movs	r1, #0
	  c->next_packetid = 1;
 800c932:	2301      	movs	r3, #1
{
 800c934:	4604      	mov	r4, r0
    c->cleansession = 0;
 800c936:	e9c0 1108 	strd	r1, r1, [r0, #32]
        c->messageHandlers[i].topicFilter = 0;
 800c93a:	6281      	str	r1, [r0, #40]	; 0x28
 800c93c:	6301      	str	r1, [r0, #48]	; 0x30
 800c93e:	6381      	str	r1, [r0, #56]	; 0x38
 800c940:	6401      	str	r1, [r0, #64]	; 0x40
 800c942:	6481      	str	r1, [r0, #72]	; 0x48
    c->command_timeout_ms = command_timeout_ms;
 800c944:	6042      	str	r2, [r0, #4]
    c->ping_outstanding = 0;
 800c946:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
 800c948:	6501      	str	r1, [r0, #80]	; 0x50
	  c->next_packetid = 1;
 800c94a:	f840 3b58 	str.w	r3, [r0], #88
    TimerInit(&c->last_sent);
 800c94e:	f7f6 f9fe 	bl	8002d4e <TimerInit>
    TimerInit(&c->last_received);
 800c952:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
 800c956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerInit(&c->last_received);
 800c95a:	f7f6 b9f8 	b.w	8002d4e <TimerInit>

0800c95e <MQTTYield>:
{
 800c95e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c960:	4604      	mov	r4, r0
    TimerInit(&timer);
 800c962:	a802      	add	r0, sp, #8
{
 800c964:	9101      	str	r1, [sp, #4]
    TimerInit(&timer);
 800c966:	f7f6 f9f2 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800c96a:	9901      	ldr	r1, [sp, #4]
 800c96c:	a802      	add	r0, sp, #8
 800c96e:	f7f6 f9bf 	bl	8002cf0 <TimerCountdownMS>
        if (cycle(c, &timer) < 0)
 800c972:	a902      	add	r1, sp, #8
 800c974:	4620      	mov	r0, r4
 800c976:	f7ff fe4d 	bl	800c614 <cycle>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	db07      	blt.n	800c98e <MQTTYield+0x30>
  	} while (!TimerIsExpired(&timer));
 800c97e:	a802      	add	r0, sp, #8
 800c980:	f7f6 f9dd 	bl	8002d3e <TimerIsExpired>
 800c984:	2800      	cmp	r0, #0
 800c986:	d0f4      	beq.n	800c972 <MQTTYield+0x14>
    int rc = MQSUCCESS;
 800c988:	2000      	movs	r0, #0
}
 800c98a:	b004      	add	sp, #16
 800c98c:	bd10      	pop	{r4, pc}
            rc = FAILURE;
 800c98e:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 800c992:	e7fa      	b.n	800c98a <MQTTYield+0x2c>

0800c994 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 800c994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c996:	b099      	sub	sp, #100	; 0x64
 800c998:	4604      	mov	r4, r0
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c99a:	af02      	add	r7, sp, #8
{
 800c99c:	460d      	mov	r5, r1
 800c99e:	4616      	mov	r6, r2
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800c9a0:	4921      	ldr	r1, [pc, #132]	; (800ca28 <MQTTConnectWithResults+0x94>)
 800c9a2:	2258      	movs	r2, #88	; 0x58
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	f015 fbff 	bl	80221a8 <memcpy>
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 800c9aa:	6a23      	ldr	r3, [r4, #32]
 800c9ac:	b123      	cbz	r3, 800c9b8 <MQTTConnectWithResults+0x24>
    int rc = FAILURE;
 800c9ae:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
}
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	b019      	add	sp, #100	; 0x64
 800c9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        options = &default_options; /* set default options if none were supplied */
 800c9b8:	2d00      	cmp	r5, #0
 800c9ba:	bf08      	it	eq
 800c9bc:	463d      	moveq	r5, r7
    TimerInit(&connect_timer);
 800c9be:	4668      	mov	r0, sp
 800c9c0:	f7f6 f9c5 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800c9c4:	6861      	ldr	r1, [r4, #4]
 800c9c6:	4668      	mov	r0, sp
 800c9c8:	f7f6 f992 	bl	8002cf0 <TimerCountdownMS>
    c->keepAliveInterval = options->keepAliveInterval;
 800c9cc:	8b29      	ldrh	r1, [r5, #24]
 800c9ce:	61a1      	str	r1, [r4, #24]
    c->cleansession = options->cleansession;
 800c9d0:	7eab      	ldrb	r3, [r5, #26]
 800c9d2:	6263      	str	r3, [r4, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 800c9d4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c9d8:	f7f6 f992 	bl	8002d00 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800c9dc:	68a1      	ldr	r1, [r4, #8]
 800c9de:	6920      	ldr	r0, [r4, #16]
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	f000 f957 	bl	800cc94 <MQTTSerialize_connect>
 800c9e6:	1e01      	subs	r1, r0, #0
 800c9e8:	dde1      	ble.n	800c9ae <MQTTConnectWithResults+0x1a>
    if ((rc = sendPacket(c, len, &connect_timer)) != MQSUCCESS)  // send the connect packet
 800c9ea:	466a      	mov	r2, sp
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f7ff fde2 	bl	800c5b6 <sendPacket>
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d1dc      	bne.n	800c9b2 <MQTTConnectWithResults+0x1e>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800c9f8:	466a      	mov	r2, sp
 800c9fa:	2102      	movs	r1, #2
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f7ff ff79 	bl	800c8f4 <waitfor>
 800ca02:	2802      	cmp	r0, #2
 800ca04:	d1d3      	bne.n	800c9ae <MQTTConnectWithResults+0x1a>
        data->sessionPresent = 0;
 800ca06:	4630      	mov	r0, r6
        data->rc = 0;
 800ca08:	7035      	strb	r5, [r6, #0]
        data->sessionPresent = 0;
 800ca0a:	f800 5f01 	strb.w	r5, [r0, #1]!
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 800ca0e:	4631      	mov	r1, r6
 800ca10:	68e3      	ldr	r3, [r4, #12]
 800ca12:	6962      	ldr	r2, [r4, #20]
 800ca14:	f000 fa0c 	bl	800ce30 <MQTTDeserialize_connack>
 800ca18:	2801      	cmp	r0, #1
 800ca1a:	d1c8      	bne.n	800c9ae <MQTTConnectWithResults+0x1a>
            rc = data->rc;
 800ca1c:	7835      	ldrb	r5, [r6, #0]
    if (rc == MQSUCCESS)
 800ca1e:	2d00      	cmp	r5, #0
 800ca20:	d1c7      	bne.n	800c9b2 <MQTTConnectWithResults+0x1e>
        c->isconnected = 1;
 800ca22:	6220      	str	r0, [r4, #32]
        c->ping_outstanding = 0;
 800ca24:	7725      	strb	r5, [r4, #28]
    return rc;
 800ca26:	e7c4      	b.n	800c9b2 <MQTTConnectWithResults+0x1e>
 800ca28:	08028370 	.word	0x08028370

0800ca2c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800ca2c:	b507      	push	{r0, r1, r2, lr}
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800ca2e:	aa01      	add	r2, sp, #4
 800ca30:	f7ff ffb0 	bl	800c994 <MQTTConnectWithResults>
}
 800ca34:	b003      	add	sp, #12
 800ca36:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca3a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 800ca3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3e:	4606      	mov	r6, r0
 800ca40:	460f      	mov	r7, r1
 800ca42:	4615      	mov	r5, r2
    int rc = FAILURE;
    int i = -1;

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca44:	2400      	movs	r4, #0
 800ca46:	f100 0828 	add.w	r8, r0, #40	; 0x28
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 800ca4a:	f858 0034 	ldr.w	r0, [r8, r4, lsl #3]
 800ca4e:	b150      	cbz	r0, 800ca66 <MQTTSetMessageHandler+0x2c>
 800ca50:	4639      	mov	r1, r7
 800ca52:	f7f3 fbbd 	bl	80001d0 <strcmp>
 800ca56:	b930      	cbnz	r0, 800ca66 <MQTTSetMessageHandler+0x2c>
        {
            if (messageHandler == NULL) /* remove existing */
 800ca58:	b99d      	cbnz	r5, 800ca82 <MQTTSetMessageHandler+0x48>
            {
                c->messageHandlers[i].topicFilter = NULL;
 800ca5a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
                c->messageHandlers[i].fp = NULL;
 800ca5e:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
            c->messageHandlers[i].topicFilter = topicFilter;
            c->messageHandlers[i].fp = messageHandler;
        }
    }
    return rc;
}
 800ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca66:	3401      	adds	r4, #1
 800ca68:	2c05      	cmp	r4, #5
 800ca6a:	d1ee      	bne.n	800ca4a <MQTTSetMessageHandler+0x10>
    if (messageHandler != NULL) {
 800ca6c:	b135      	cbz	r5, 800ca7c <MQTTSetMessageHandler+0x42>
 800ca6e:	2400      	movs	r4, #0
                if (c->messageHandlers[i].topicFilter == NULL)
 800ca70:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
 800ca74:	b12b      	cbz	r3, 800ca82 <MQTTSetMessageHandler+0x48>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ca76:	3401      	adds	r4, #1
 800ca78:	2c05      	cmp	r4, #5
 800ca7a:	d1f9      	bne.n	800ca70 <MQTTSetMessageHandler+0x36>
    if (messageHandler != NULL) {
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	e7ef      	b.n	800ca62 <MQTTSetMessageHandler+0x28>
            c->messageHandlers[i].topicFilter = topicFilter;
 800ca82:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
            c->messageHandlers[i].fp = messageHandler;
 800ca86:	e9c0 750a 	strd	r7, r5, [r0, #40]	; 0x28
 800ca8a:	2000      	movs	r0, #0
    return rc;
 800ca8c:	e7e9      	b.n	800ca62 <MQTTSetMessageHandler+0x28>

0800ca8e <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 800ca8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca92:	461f      	mov	r7, r3
 800ca94:	b08f      	sub	sp, #60	; 0x3c
    int rc = FAILURE;
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
 800ca96:	2300      	movs	r3, #0
 800ca98:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicFilter;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800ca9c:	6a03      	ldr	r3, [r0, #32]
{
 800ca9e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800caa2:	f88d 2017 	strb.w	r2, [sp, #23]
 800caa6:	4604      	mov	r4, r0
 800caa8:	460e      	mov	r6, r1
    topic.cstring = (char *)topicFilter;
 800caaa:	910b      	str	r1, [sp, #44]	; 0x2c
	  if (!c->isconnected)
 800caac:	b943      	cbnz	r3, 800cac0 <MQTTSubscribeWithResults+0x32>
    else
        rc = FAILURE;

exit:
    if (rc == FAILURE)
        MQTTCloseSession(c);
 800caae:	4620      	mov	r0, r4
 800cab0:	f7ff fd76 	bl	800c5a0 <MQTTCloseSession>
 800cab4:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800cab8:	4628      	mov	r0, r5
 800caba:	b00f      	add	sp, #60	; 0x3c
 800cabc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TimerInit(&timer);
 800cac0:	a809      	add	r0, sp, #36	; 0x24
 800cac2:	f7f6 f944 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cac6:	6861      	ldr	r1, [r4, #4]
 800cac8:	a809      	add	r0, sp, #36	; 0x24
 800caca:	f7f6 f911 	bl	8002cf0 <TimerCountdownMS>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cace:	6822      	ldr	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cad0:	68a1      	ldr	r1, [r4, #8]
 800cad2:	6920      	ldr	r0, [r4, #16]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cad8:	429a      	cmp	r2, r3
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cada:	f10d 0317 	add.w	r3, sp, #23
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cade:	bf14      	ite	ne
 800cae0:	3201      	addne	r2, #1
 800cae2:	2201      	moveq	r2, #1
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cae4:	9302      	str	r3, [sp, #8]
 800cae6:	f04f 0901 	mov.w	r9, #1
 800caea:	ab0b      	add	r3, sp, #44	; 0x2c
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800caec:	6022      	str	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800caee:	9301      	str	r3, [sp, #4]
 800caf0:	f8cd 9000 	str.w	r9, [sp]
 800caf4:	b293      	uxth	r3, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	f000 fbb1 	bl	800d25e <MQTTSerialize_subscribe>
    if (len <= 0)
 800cafc:	1e01      	subs	r1, r0, #0
 800cafe:	ddd6      	ble.n	800caae <MQTTSubscribeWithResults+0x20>
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800cb00:	aa09      	add	r2, sp, #36	; 0x24
 800cb02:	4620      	mov	r0, r4
 800cb04:	f7ff fd57 	bl	800c5b6 <sendPacket>
 800cb08:	4605      	mov	r5, r0
 800cb0a:	bb00      	cbnz	r0, 800cb4e <MQTTSubscribeWithResults+0xc0>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800cb0c:	aa09      	add	r2, sp, #36	; 0x24
 800cb0e:	2109      	movs	r1, #9
 800cb10:	4620      	mov	r0, r4
 800cb12:	f7ff feef 	bl	800c8f4 <waitfor>
 800cb16:	2809      	cmp	r0, #9
 800cb18:	d1c9      	bne.n	800caae <MQTTSubscribeWithResults+0x20>
        data->grantedQoS = QOS0;
 800cb1a:	f888 5000 	strb.w	r5, [r8]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800cb1e:	68e3      	ldr	r3, [r4, #12]
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	6963      	ldr	r3, [r4, #20]
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	aa08      	add	r2, sp, #32
 800cb28:	4643      	mov	r3, r8
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	f10d 001e 	add.w	r0, sp, #30
        int count = 0;
 800cb30:	9508      	str	r5, [sp, #32]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800cb32:	f000 fbe0 	bl	800d2f6 <MQTTDeserialize_suback>
 800cb36:	4548      	cmp	r0, r9
 800cb38:	d1be      	bne.n	800cab8 <MQTTSubscribeWithResults+0x2a>
            if (data->grantedQoS != 0x80)
 800cb3a:	f898 3000 	ldrb.w	r3, [r8]
 800cb3e:	2b80      	cmp	r3, #128	; 0x80
 800cb40:	d0ba      	beq.n	800cab8 <MQTTSubscribeWithResults+0x2a>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800cb42:	463a      	mov	r2, r7
 800cb44:	4631      	mov	r1, r6
 800cb46:	4620      	mov	r0, r4
 800cb48:	f7ff ff77 	bl	800ca3a <MQTTSetMessageHandler>
 800cb4c:	4605      	mov	r5, r0
    if (rc == FAILURE)
 800cb4e:	1c6b      	adds	r3, r5, #1
 800cb50:	d1b2      	bne.n	800cab8 <MQTTSubscribeWithResults+0x2a>
 800cb52:	e7ac      	b.n	800caae <MQTTSubscribeWithResults+0x20>

0800cb54 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 800cb54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 800cb56:	ac03      	add	r4, sp, #12
 800cb58:	9400      	str	r4, [sp, #0]
 800cb5a:	f7ff ff98 	bl	800ca8e <MQTTSubscribeWithResults>
}
 800cb5e:	b004      	add	sp, #16
 800cb60:	bd10      	pop	{r4, pc}

0800cb62 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800cb62:	b570      	push	{r4, r5, r6, lr}
    int rc = FAILURE;
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800cb64:	2300      	movs	r3, #0
{
 800cb66:	b08e      	sub	sp, #56	; 0x38
    MQTTString topic = MQTTString_initializer;
 800cb68:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800cb6c:	6a03      	ldr	r3, [r0, #32]
    topic.cstring = (char *)topicName;
 800cb6e:	910b      	str	r1, [sp, #44]	; 0x2c
{
 800cb70:	4604      	mov	r4, r0
 800cb72:	4615      	mov	r5, r2
	  if (!c->isconnected)
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d053      	beq.n	800cc20 <MQTTPublish+0xbe>
		    goto exit;

    TimerInit(&timer);
 800cb78:	a809      	add	r0, sp, #36	; 0x24
 800cb7a:	f7f6 f8e8 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cb7e:	6861      	ldr	r1, [r4, #4]
 800cb80:	a809      	add	r0, sp, #36	; 0x24
 800cb82:	f7f6 f8b5 	bl	8002cf0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800cb86:	782b      	ldrb	r3, [r5, #0]
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d808      	bhi.n	800cba0 <MQTTPublish+0x3e>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb94:	4293      	cmp	r3, r2
 800cb96:	bf14      	ite	ne
 800cb98:	3301      	addne	r3, #1
 800cb9a:	2301      	moveq	r3, #1
 800cb9c:	6023      	str	r3, [r4, #0]
        message->id = getNextPacketId(c);
 800cb9e:	80ab      	strh	r3, [r5, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800cba0:	68eb      	ldr	r3, [r5, #12]
 800cba2:	9306      	str	r3, [sp, #24]
 800cba4:	68ab      	ldr	r3, [r5, #8]
 800cba6:	9305      	str	r3, [sp, #20]
 800cba8:	aa0e      	add	r2, sp, #56	; 0x38
 800cbaa:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800cbae:	ab02      	add	r3, sp, #8
 800cbb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cbb4:	88ab      	ldrh	r3, [r5, #4]
 800cbb6:	9301      	str	r3, [sp, #4]
 800cbb8:	786b      	ldrb	r3, [r5, #1]
 800cbba:	68a1      	ldr	r1, [r4, #8]
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	6920      	ldr	r0, [r4, #16]
 800cbc0:	782b      	ldrb	r3, [r5, #0]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f000 fad3 	bl	800d16e <MQTTSerialize_publish>
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
 800cbc8:	1e01      	subs	r1, r0, #0
 800cbca:	dd29      	ble.n	800cc20 <MQTTPublish+0xbe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800cbcc:	aa09      	add	r2, sp, #36	; 0x24
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f7ff fcf1 	bl	800c5b6 <sendPacket>
 800cbd4:	4606      	mov	r6, r0
 800cbd6:	bb08      	cbnz	r0, 800cc1c <MQTTPublish+0xba>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800cbd8:	782b      	ldrb	r3, [r5, #0]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d115      	bne.n	800cc0a <MQTTPublish+0xa8>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800cbde:	aa09      	add	r2, sp, #36	; 0x24
 800cbe0:	2104      	movs	r1, #4
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f7ff fe86 	bl	800c8f4 <waitfor>
 800cbe8:	2804      	cmp	r0, #4
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800cbea:	d119      	bne.n	800cc20 <MQTTPublish+0xbe>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cbec:	68e3      	ldr	r3, [r4, #12]
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800cbf4:	6963      	ldr	r3, [r4, #20]
 800cbf6:	a908      	add	r1, sp, #32
 800cbf8:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800cbfc:	f000 f987 	bl	800cf0e <MQTTDeserialize_ack>
 800cc00:	2801      	cmp	r0, #1
 800cc02:	d10d      	bne.n	800cc20 <MQTTPublish+0xbe>
        MQTTCloseSession(c);
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800cc04:	4630      	mov	r0, r6
 800cc06:	b00e      	add	sp, #56	; 0x38
 800cc08:	bd70      	pop	{r4, r5, r6, pc}
    else if (message->qos == QOS2)
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d1fa      	bne.n	800cc04 <MQTTPublish+0xa2>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800cc0e:	aa09      	add	r2, sp, #36	; 0x24
 800cc10:	2107      	movs	r1, #7
 800cc12:	4620      	mov	r0, r4
 800cc14:	f7ff fe6e 	bl	800c8f4 <waitfor>
 800cc18:	2807      	cmp	r0, #7
 800cc1a:	e7e6      	b.n	800cbea <MQTTPublish+0x88>
    if (rc == FAILURE)
 800cc1c:	1c43      	adds	r3, r0, #1
 800cc1e:	d1f1      	bne.n	800cc04 <MQTTPublish+0xa2>
        MQTTCloseSession(c);
 800cc20:	4620      	mov	r0, r4
 800cc22:	f7ff fcbd 	bl	800c5a0 <MQTTCloseSession>
 800cc26:	f04f 36ff 	mov.w	r6, #4294967295
    return rc;
 800cc2a:	e7eb      	b.n	800cc04 <MQTTPublish+0xa2>

0800cc2c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 800cc2c:	b513      	push	{r0, r1, r4, lr}
 800cc2e:	4604      	mov	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 800cc30:	4668      	mov	r0, sp
 800cc32:	f7f6 f88c 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cc36:	6861      	ldr	r1, [r4, #4]
 800cc38:	4668      	mov	r0, sp
 800cc3a:	f7f6 f859 	bl	8002cf0 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 800cc3e:	68a1      	ldr	r1, [r4, #8]
 800cc40:	6920      	ldr	r0, [r4, #16]
 800cc42:	f000 f919 	bl	800ce78 <MQTTSerialize_disconnect>
    if (len > 0)
 800cc46:	1e01      	subs	r1, r0, #0
 800cc48:	dd0a      	ble.n	800cc60 <MQTTDisconnect+0x34>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 800cc4a:	466a      	mov	r2, sp
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f7ff fcb2 	bl	800c5b6 <sendPacket>
 800cc52:	4601      	mov	r1, r0
    MQTTCloseSession(c);
 800cc54:	4620      	mov	r0, r4
 800cc56:	f7ff fca3 	bl	800c5a0 <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800cc5a:	4608      	mov	r0, r1
 800cc5c:	b002      	add	sp, #8
 800cc5e:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
 800cc60:	f04f 31ff 	mov.w	r1, #4294967295
 800cc64:	e7f6      	b.n	800cc54 <MQTTDisconnect+0x28>

0800cc66 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800cc66:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
 800cc68:	2901      	cmp	r1, #1
{
 800cc6a:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800cc6c:	9001      	str	r0, [sp, #4]
	if (buflen < 2)
 800cc6e:	dd0e      	ble.n	800cc8e <MQTTSerialize_zero+0x28>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
 800cc70:	0112      	lsls	r2, r2, #4
	writeChar(&ptr, header.byte); /* write header */
 800cc72:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800cc76:	a801      	add	r0, sp, #4
 800cc78:	f000 f9e8 	bl	800d04c <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800cc7c:	9801      	ldr	r0, [sp, #4]
 800cc7e:	2100      	movs	r1, #0
 800cc80:	f000 f97e 	bl	800cf80 <MQTTPacket_encode>
 800cc84:	9b01      	ldr	r3, [sp, #4]
 800cc86:	4403      	add	r3, r0
	rc = ptr - buf;
 800cc88:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800cc8a:	b002      	add	sp, #8
 800cc8c:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cc8e:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800cc92:	e7fa      	b.n	800cc8a <MQTTSerialize_zero+0x24>

0800cc94 <MQTTSerialize_connect>:
{
 800cc94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (options->MQTTVersion == 3)
 800cc98:	7a13      	ldrb	r3, [r2, #8]
	unsigned char *ptr = buf;
 800cc9a:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 3)
 800cc9c:	2b03      	cmp	r3, #3
{
 800cc9e:	4606      	mov	r6, r0
 800cca0:	4689      	mov	r9, r1
 800cca2:	4614      	mov	r4, r2
	if (options->MQTTVersion == 3)
 800cca4:	f000 80b5 	beq.w	800ce12 <MQTTSerialize_connect+0x17e>
		len = 10;
 800cca8:	2b04      	cmp	r3, #4
 800ccaa:	bf14      	ite	ne
 800ccac:	2500      	movne	r5, #0
 800ccae:	250a      	moveq	r5, #10
	len += MQTTstrlen(options->clientID)+2;
 800ccb0:	f104 070c 	add.w	r7, r4, #12
 800ccb4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ccb8:	f000 fa32 	bl	800d120 <MQTTstrlen>
	if (options->willFlag)
 800ccbc:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 800ccbe:	3002      	adds	r0, #2
 800ccc0:	4405      	add	r5, r0
	if (options->willFlag)
 800ccc2:	b17b      	cbz	r3, 800cce4 <MQTTSerialize_connect+0x50>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800ccc4:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800ccc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cccc:	f000 fa28 	bl	800d120 <MQTTstrlen>
 800ccd0:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800ccd4:	4680      	mov	r8, r0
 800ccd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccda:	f000 fa21 	bl	800d120 <MQTTstrlen>
 800ccde:	4440      	add	r0, r8
 800cce0:	3004      	adds	r0, #4
 800cce2:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 800cce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cce6:	b90b      	cbnz	r3, 800ccec <MQTTSerialize_connect+0x58>
 800cce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ccea:	b13b      	cbz	r3, 800ccfc <MQTTSerialize_connect+0x68>
		len += MQTTstrlen(options->username)+2;
 800ccec:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ccf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ccf4:	f000 fa14 	bl	800d120 <MQTTstrlen>
 800ccf8:	3002      	adds	r0, #2
 800ccfa:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 800ccfc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ccfe:	b90b      	cbnz	r3, 800cd04 <MQTTSerialize_connect+0x70>
 800cd00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cd02:	b13b      	cbz	r3, 800cd14 <MQTTSerialize_connect+0x80>
		len += MQTTstrlen(options->password)+2;
 800cd04:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800cd08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd0c:	f000 fa08 	bl	800d120 <MQTTstrlen>
 800cd10:	3002      	adds	r0, #2
 800cd12:	4405      	add	r5, r0
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800cd14:	4628      	mov	r0, r5
 800cd16:	f000 f96f 	bl	800cff8 <MQTTPacket_len>
 800cd1a:	4548      	cmp	r0, r9
 800cd1c:	f300 8081 	bgt.w	800ce22 <MQTTSerialize_connect+0x18e>
	writeChar(&ptr, header.byte); /* write header */
 800cd20:	2110      	movs	r1, #16
 800cd22:	a801      	add	r0, sp, #4
 800cd24:	f000 f992 	bl	800d04c <writeChar>
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cd28:	4629      	mov	r1, r5
 800cd2a:	9801      	ldr	r0, [sp, #4]
 800cd2c:	f000 f928 	bl	800cf80 <MQTTPacket_encode>
 800cd30:	9b01      	ldr	r3, [sp, #4]
	if (options->MQTTVersion == 4)
 800cd32:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cd34:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 800cd36:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cd38:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 800cd3a:	d16c      	bne.n	800ce16 <MQTTSerialize_connect+0x182>
		writeCString(&ptr, "MQTT");
 800cd3c:	493a      	ldr	r1, [pc, #232]	; (800ce28 <MQTTSerialize_connect+0x194>)
 800cd3e:	a801      	add	r0, sp, #4
 800cd40:	f000 f99f 	bl	800d082 <writeCString>
		writeChar(&ptr, (char) 4);
 800cd44:	4629      	mov	r1, r5
		writeChar(&ptr, (char) 3);
 800cd46:	a801      	add	r0, sp, #4
 800cd48:	f000 f980 	bl	800d04c <writeChar>
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cd4c:	7ee3      	ldrb	r3, [r4, #27]
 800cd4e:	1e1a      	subs	r2, r3, #0
	flags.bits.cleansession = options->cleansession;
 800cd50:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 800cd52:	f04f 0100 	mov.w	r1, #0
	flags.bits.cleansession = options->cleansession;
 800cd56:	ea4f 0343 	mov.w	r3, r3, lsl #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cd5a:	bf18      	it	ne
 800cd5c:	2201      	movne	r2, #1
	flags.all = 0;
 800cd5e:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 800cd62:	f003 0302 	and.w	r3, r3, #2
 800cd66:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800cd6a:	f021 0206 	bic.w	r2, r1, #6
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	f363 0107 	bfi	r1, r3, #0, #8
	if (flags.bits.will)
 800cd74:	0748      	lsls	r0, r1, #29
 800cd76:	d50f      	bpl.n	800cd98 <MQTTSerialize_connect+0x104>
		flags.bits.willQoS = options->will.qos;
 800cd78:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cd7c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800cd80:	015b      	lsls	r3, r3, #5
 800cd82:	00d2      	lsls	r2, r2, #3
 800cd84:	f002 0218 	and.w	r2, r2, #24
 800cd88:	f003 0320 	and.w	r3, r3, #32
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	f021 0238 	bic.w	r2, r1, #56	; 0x38
 800cd92:	4313      	orrs	r3, r2
 800cd94:	f363 0107 	bfi	r1, r3, #0, #8
	if (options->username.cstring || options->username.lenstring.data)
 800cd98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd9a:	b90b      	cbnz	r3, 800cda0 <MQTTSerialize_connect+0x10c>
 800cd9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cd9e:	b10b      	cbz	r3, 800cda4 <MQTTSerialize_connect+0x110>
		flags.bits.username = 1;
 800cda0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 800cda4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cda6:	b90b      	cbnz	r3, 800cdac <MQTTSerialize_connect+0x118>
 800cda8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cdaa:	b10b      	cbz	r3, 800cdb0 <MQTTSerialize_connect+0x11c>
		flags.bits.password = 1;
 800cdac:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	writeChar(&ptr, flags.all);
 800cdb0:	b2cd      	uxtb	r5, r1
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	a801      	add	r0, sp, #4
 800cdb6:	f000 f949 	bl	800d04c <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800cdba:	8b21      	ldrh	r1, [r4, #24]
 800cdbc:	a801      	add	r0, sp, #4
 800cdbe:	f000 f94b 	bl	800d058 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800cdc2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800cdc6:	a801      	add	r0, sp, #4
 800cdc8:	f000 f96f 	bl	800d0aa <writeMQTTString>
	if (options->willFlag)
 800cdcc:	7ee3      	ldrb	r3, [r4, #27]
 800cdce:	b15b      	cbz	r3, 800cde8 <MQTTSerialize_connect+0x154>
		writeMQTTString(&ptr, options->will.topicName);
 800cdd0:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800cdd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdd6:	a801      	add	r0, sp, #4
 800cdd8:	f000 f967 	bl	800d0aa <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800cddc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cde0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cde2:	a801      	add	r0, sp, #4
 800cde4:	f000 f961 	bl	800d0aa <writeMQTTString>
	if (flags.bits.username)
 800cde8:	062a      	lsls	r2, r5, #24
 800cdea:	d505      	bpl.n	800cdf8 <MQTTSerialize_connect+0x164>
		writeMQTTString(&ptr, options->username);
 800cdec:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cdf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdf2:	a801      	add	r0, sp, #4
 800cdf4:	f000 f959 	bl	800d0aa <writeMQTTString>
	if (flags.bits.password)
 800cdf8:	066b      	lsls	r3, r5, #25
 800cdfa:	d505      	bpl.n	800ce08 <MQTTSerialize_connect+0x174>
		writeMQTTString(&ptr, options->password);
 800cdfc:	344c      	adds	r4, #76	; 0x4c
 800cdfe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ce02:	a801      	add	r0, sp, #4
 800ce04:	f000 f951 	bl	800d0aa <writeMQTTString>
	rc = ptr - buf;
 800ce08:	9801      	ldr	r0, [sp, #4]
 800ce0a:	1b80      	subs	r0, r0, r6
}
 800ce0c:	b003      	add	sp, #12
 800ce0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 800ce12:	250c      	movs	r5, #12
 800ce14:	e74c      	b.n	800ccb0 <MQTTSerialize_connect+0x1c>
		writeCString(&ptr, "MQIsdp");
 800ce16:	4905      	ldr	r1, [pc, #20]	; (800ce2c <MQTTSerialize_connect+0x198>)
 800ce18:	a801      	add	r0, sp, #4
 800ce1a:	f000 f932 	bl	800d082 <writeCString>
		writeChar(&ptr, (char) 3);
 800ce1e:	2103      	movs	r1, #3
 800ce20:	e791      	b.n	800cd46 <MQTTSerialize_connect+0xb2>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800ce22:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800ce26:	e7f1      	b.n	800ce0c <MQTTSerialize_connect+0x178>
 800ce28:	0802fd0a 	.word	0x0802fd0a
 800ce2c:	0802fd0f 	.word	0x0802fd0f

0800ce30 <MQTTDeserialize_connack>:
{
 800ce30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce32:	4605      	mov	r5, r0
	header.byte = readChar(&curdata);
 800ce34:	4668      	mov	r0, sp
{
 800ce36:	460c      	mov	r4, r1
	unsigned char* curdata = buf;
 800ce38:	9200      	str	r2, [sp, #0]
	header.byte = readChar(&curdata);
 800ce3a:	f000 f901 	bl	800d040 <readChar>
	if (header.bits.type != CONNACK)
 800ce3e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800ce42:	2820      	cmp	r0, #32
 800ce44:	d116      	bne.n	800ce74 <MQTTDeserialize_connack+0x44>
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ce46:	9800      	ldr	r0, [sp, #0]
 800ce48:	a901      	add	r1, sp, #4
 800ce4a:	f000 f8e7 	bl	800d01c <MQTTPacket_decodeBuf>
 800ce4e:	9b00      	ldr	r3, [sp, #0]
 800ce50:	4403      	add	r3, r0
 800ce52:	9300      	str	r3, [sp, #0]
	if (enddata - curdata < 2)
 800ce54:	9b01      	ldr	r3, [sp, #4]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	dd0a      	ble.n	800ce70 <MQTTDeserialize_connack+0x40>
	flags.all = readChar(&curdata);
 800ce5a:	4668      	mov	r0, sp
 800ce5c:	f000 f8f0 	bl	800d040 <readChar>
	*sessionPresent = flags.bits.sessionpresent;
 800ce60:	f000 0001 	and.w	r0, r0, #1
 800ce64:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
 800ce66:	4668      	mov	r0, sp
 800ce68:	f000 f8ea 	bl	800d040 <readChar>
 800ce6c:	7020      	strb	r0, [r4, #0]
	rc = 1;
 800ce6e:	2001      	movs	r0, #1
}
 800ce70:	b003      	add	sp, #12
 800ce72:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
 800ce74:	2000      	movs	r0, #0
	return rc;
 800ce76:	e7fb      	b.n	800ce70 <MQTTDeserialize_connack+0x40>

0800ce78 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 800ce78:	220e      	movs	r2, #14
 800ce7a:	f7ff bef4 	b.w	800cc66 <MQTTSerialize_zero>

0800ce7e <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800ce7e:	220c      	movs	r2, #12
 800ce80:	f7ff bef1 	b.w	800cc66 <MQTTSerialize_zero>

0800ce84 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800ce84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 800ce88:	2500      	movs	r5, #0
{
 800ce8a:	4681      	mov	r9, r0
 800ce8c:	461f      	mov	r7, r3

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800ce8e:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800ce90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce92:	9300      	str	r3, [sp, #0]
{
 800ce94:	460e      	mov	r6, r1
 800ce96:	4690      	mov	r8, r2
	int mylen = 0;
 800ce98:	9501      	str	r5, [sp, #4]
	header.byte = readChar(&curdata);
 800ce9a:	f000 f8d1 	bl	800d040 <readChar>
	if (header.bits.type != PUBLISH)
 800ce9e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	header.byte = readChar(&curdata);
 800cea2:	462c      	mov	r4, r5
	if (header.bits.type != PUBLISH)
 800cea4:	2b30      	cmp	r3, #48	; 0x30
	header.byte = readChar(&curdata);
 800cea6:	f360 0407 	bfi	r4, r0, #0, #8
	if (header.bits.type != PUBLISH)
 800ceaa:	d12c      	bne.n	800cf06 <MQTTDeserialize_publish+0x82>
		goto exit;
	*dup = header.bits.dup;
 800ceac:	f3c4 03c0 	ubfx	r3, r4, #3, #1
 800ceb0:	f889 3000 	strb.w	r3, [r9]
	*qos = header.bits.qos;
 800ceb4:	f3c4 0341 	ubfx	r3, r4, #1, #2
	*retained = header.bits.retain;
 800ceb8:	f3c4 0400 	ubfx	r4, r4, #0, #1
	*qos = header.bits.qos;
 800cebc:	6033      	str	r3, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cebe:	a901      	add	r1, sp, #4
	*retained = header.bits.retain;
 800cec0:	f888 4000 	strb.w	r4, [r8]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cec4:	9800      	ldr	r0, [sp, #0]
 800cec6:	f000 f8a9 	bl	800d01c <MQTTPacket_decodeBuf>
 800ceca:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800cecc:	9a01      	ldr	r2, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cece:	4404      	add	r4, r0
 800ced0:	9400      	str	r4, [sp, #0]
	enddata = curdata + mylen;
 800ced2:	4414      	add	r4, r2
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800ced4:	4605      	mov	r5, r0

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800ced6:	4622      	mov	r2, r4
 800ced8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ceda:	4669      	mov	r1, sp
 800cedc:	f000 f907 	bl	800d0ee <readMQTTLenString>
 800cee0:	b188      	cbz	r0, 800cf06 <MQTTDeserialize_publish+0x82>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800cee2:	9b00      	ldr	r3, [sp, #0]
 800cee4:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	db0d      	blt.n	800cf06 <MQTTDeserialize_publish+0x82>
		goto exit;

	if (*qos > 0)
 800ceea:	6833      	ldr	r3, [r6, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dd03      	ble.n	800cef8 <MQTTDeserialize_publish+0x74>
		*packetid = readInt(&curdata);
 800cef0:	4668      	mov	r0, sp
 800cef2:	f000 f89d 	bl	800d030 <readInt>
 800cef6:	8038      	strh	r0, [r7, #0]

	*payloadlen = enddata - curdata;
 800cef8:	9b00      	ldr	r3, [sp, #0]
 800cefa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cefc:	1ae4      	subs	r4, r4, r3
 800cefe:	6014      	str	r4, [r2, #0]
	*payload = curdata;
 800cf00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	rc = 1;
 800cf02:	2501      	movs	r5, #1
	*payload = curdata;
 800cf04:	6013      	str	r3, [r2, #0]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800cf06:	4628      	mov	r0, r5
 800cf08:	b003      	add	sp, #12
 800cf0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800cf0e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800cf0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf10:	4605      	mov	r5, r0
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800cf12:	4668      	mov	r0, sp
{
 800cf14:	460e      	mov	r6, r1
 800cf16:	4614      	mov	r4, r2
	unsigned char* curdata = buf;
 800cf18:	9300      	str	r3, [sp, #0]
	header.byte = readChar(&curdata);
 800cf1a:	f000 f891 	bl	800d040 <readChar>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
 800cf24:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	*packettype = header.bits.type;
 800cf28:	f3c3 1303 	ubfx	r3, r3, #4, #4
	*dup = header.bits.dup;
 800cf2c:	7032      	strb	r2, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cf2e:	9800      	ldr	r0, [sp, #0]
	*packettype = header.bits.type;
 800cf30:	702b      	strb	r3, [r5, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800cf32:	a901      	add	r1, sp, #4
 800cf34:	f000 f872 	bl	800d01c <MQTTPacket_decodeBuf>
 800cf38:	9b00      	ldr	r3, [sp, #0]
 800cf3a:	4403      	add	r3, r0
 800cf3c:	9300      	str	r3, [sp, #0]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
 800cf3e:	9b01      	ldr	r3, [sp, #4]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	dd04      	ble.n	800cf4e <MQTTDeserialize_ack+0x40>
		goto exit;
	*packetid = readInt(&curdata);
 800cf44:	4668      	mov	r0, sp
 800cf46:	f000 f873 	bl	800d030 <readInt>
 800cf4a:	8020      	strh	r0, [r4, #0]

	rc = 1;
 800cf4c:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800cf4e:	b002      	add	sp, #8
 800cf50:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf54 <bufchar>:

int bufchar(unsigned char* c, int count)
{
	int i;

	for (i = 0; i < count; ++i)
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <bufchar+0x28>)
{
 800cf56:	b530      	push	{r4, r5, lr}
 800cf58:	681a      	ldr	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	462c      	mov	r4, r5
 800cf5e:	428c      	cmp	r4, r1
 800cf60:	db06      	blt.n	800cf70 <bufchar+0x1c>
 800cf62:	2900      	cmp	r1, #0
 800cf64:	bfa8      	it	ge
 800cf66:	1852      	addge	r2, r2, r1
 800cf68:	b105      	cbz	r5, 800cf6c <bufchar+0x18>
 800cf6a:	601a      	str	r2, [r3, #0]
		*c = *bufptr++;
	return count;
}
 800cf6c:	4608      	mov	r0, r1
 800cf6e:	bd30      	pop	{r4, r5, pc}
		*c = *bufptr++;
 800cf70:	5d15      	ldrb	r5, [r2, r4]
 800cf72:	7005      	strb	r5, [r0, #0]
	for (i = 0; i < count; ++i)
 800cf74:	3401      	adds	r4, #1
 800cf76:	2501      	movs	r5, #1
 800cf78:	e7f1      	b.n	800cf5e <bufchar+0xa>
 800cf7a:	bf00      	nop
 800cf7c:	20001050 	.word	0x20001050

0800cf80 <MQTTPacket_encode>:
{
 800cf80:	b530      	push	{r4, r5, lr}
 800cf82:	f1c0 0202 	rsb	r2, r0, #2
 800cf86:	1e45      	subs	r5, r0, #1
		char d = length % 128;
 800cf88:	4248      	negs	r0, r1
 800cf8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cf8e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800cf92:	460c      	mov	r4, r1
 800cf94:	bf58      	it	pl
 800cf96:	4243      	negpl	r3, r0
		length /= 128;
 800cf98:	2900      	cmp	r1, #0
		char d = length % 128;
 800cf9a:	b2db      	uxtb	r3, r3
		length /= 128;
 800cf9c:	bfb8      	it	lt
 800cf9e:	317f      	addlt	r1, #127	; 0x7f
		if (length > 0)
 800cfa0:	2c7f      	cmp	r4, #127	; 0x7f
			d |= 0x80;
 800cfa2:	bfc8      	it	gt
 800cfa4:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
	} while (length > 0);
 800cfa8:	2c7f      	cmp	r4, #127	; 0x7f
 800cfaa:	eb02 0005 	add.w	r0, r2, r5
		length /= 128;
 800cfae:	ea4f 11e1 	mov.w	r1, r1, asr #7
		buf[rc++] = d;
 800cfb2:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while (length > 0);
 800cfb6:	dce7      	bgt.n	800cf88 <MQTTPacket_encode+0x8>
}
 800cfb8:	bd30      	pop	{r4, r5, pc}

0800cfba <MQTTPacket_decode>:
{
 800cfba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*value = 0;
 800cfbc:	2400      	movs	r4, #0
{
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	460d      	mov	r5, r1
	*value = 0;
 800cfc2:	600c      	str	r4, [r1, #0]
	int multiplier = 1;
 800cfc4:	2601      	movs	r6, #1
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	2c05      	cmp	r4, #5
 800cfca:	d011      	beq.n	800cff0 <MQTTPacket_decode+0x36>
		rc = (*getcharfn)(&c, 1);
 800cfcc:	2101      	movs	r1, #1
 800cfce:	f10d 0007 	add.w	r0, sp, #7
 800cfd2:	47b8      	blx	r7
		if (rc != 1)
 800cfd4:	2801      	cmp	r0, #1
 800cfd6:	d10b      	bne.n	800cff0 <MQTTPacket_decode+0x36>
		*value += (c & 127) * multiplier;
 800cfd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cfdc:	6829      	ldr	r1, [r5, #0]
 800cfde:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800cfe2:	fb06 1303 	mla	r3, r6, r3, r1
 800cfe6:	602b      	str	r3, [r5, #0]
	} while ((c & 128) != 0);
 800cfe8:	0613      	lsls	r3, r2, #24
		multiplier *= 128;
 800cfea:	ea4f 16c6 	mov.w	r6, r6, lsl #7
	} while ((c & 128) != 0);
 800cfee:	d4ea      	bmi.n	800cfc6 <MQTTPacket_decode+0xc>
}
 800cff0:	4620      	mov	r0, r4
 800cff2:	b003      	add	sp, #12
 800cff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cff8 <MQTTPacket_len>:
	rem_len += 1; /* header byte */
 800cff8:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
 800cffa:	2b7f      	cmp	r3, #127	; 0x7f
 800cffc:	dc01      	bgt.n	800d002 <MQTTPacket_len+0xa>
		rem_len += 1;
 800cffe:	3002      	adds	r0, #2
 800d000:	4770      	bx	lr
	else if (rem_len < 16384)
 800d002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d006:	da01      	bge.n	800d00c <MQTTPacket_len+0x14>
		rem_len += 2;
 800d008:	3003      	adds	r0, #3
 800d00a:	4770      	bx	lr
	else if (rem_len < 2097151)
 800d00c:	4a02      	ldr	r2, [pc, #8]	; (800d018 <MQTTPacket_len+0x20>)
 800d00e:	4293      	cmp	r3, r2
		rem_len += 3;
 800d010:	bfd4      	ite	le
 800d012:	3004      	addle	r0, #4
		rem_len += 4;
 800d014:	3005      	addgt	r0, #5
}
 800d016:	4770      	bx	lr
 800d018:	001ffffe 	.word	0x001ffffe

0800d01c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
	bufptr = buf;
 800d01c:	4b02      	ldr	r3, [pc, #8]	; (800d028 <MQTTPacket_decodeBuf+0xc>)
 800d01e:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
 800d020:	4802      	ldr	r0, [pc, #8]	; (800d02c <MQTTPacket_decodeBuf+0x10>)
 800d022:	f7ff bfca 	b.w	800cfba <MQTTPacket_decode>
 800d026:	bf00      	nop
 800d028:	20001050 	.word	0x20001050
 800d02c:	0800cf55 	.word	0x0800cf55

0800d030 <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 800d030:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 800d032:	7819      	ldrb	r1, [r3, #0]
 800d034:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
 800d036:	3302      	adds	r3, #2
 800d038:	6003      	str	r3, [r0, #0]
	return len;
}
 800d03a:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 800d03e:	4770      	bx	lr

0800d040 <readChar>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
	char c = **pptr;
 800d040:	6802      	ldr	r2, [r0, #0]
{
 800d042:	4603      	mov	r3, r0
	char c = **pptr;
 800d044:	f812 0b01 	ldrb.w	r0, [r2], #1
	(*pptr)++;
 800d048:	601a      	str	r2, [r3, #0]
	return c;
}
 800d04a:	4770      	bx	lr

0800d04c <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 800d04c:	6803      	ldr	r3, [r0, #0]
 800d04e:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 800d050:	6803      	ldr	r3, [r0, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	6003      	str	r3, [r0, #0]
}
 800d056:	4770      	bx	lr

0800d058 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 800d058:	2900      	cmp	r1, #0
 800d05a:	6802      	ldr	r2, [r0, #0]
 800d05c:	460b      	mov	r3, r1
 800d05e:	bfb8      	it	lt
 800d060:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 800d064:	121b      	asrs	r3, r3, #8
 800d066:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d068:	6802      	ldr	r2, [r0, #0]
 800d06a:	1c53      	adds	r3, r2, #1
 800d06c:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d06e:	424b      	negs	r3, r1
 800d070:	b2db      	uxtb	r3, r3
 800d072:	b2c9      	uxtb	r1, r1
 800d074:	bf58      	it	pl
 800d076:	4259      	negpl	r1, r3
 800d078:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 800d07a:	6803      	ldr	r3, [r0, #0]
 800d07c:	3301      	adds	r3, #1
 800d07e:	6003      	str	r3, [r0, #0]
}
 800d080:	4770      	bx	lr

0800d082 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d082:	b570      	push	{r4, r5, r6, lr}
 800d084:	4604      	mov	r4, r0
	int len = strlen(string);
 800d086:	4608      	mov	r0, r1
{
 800d088:	460e      	mov	r6, r1
	int len = strlen(string);
 800d08a:	f7f3 f8ab 	bl	80001e4 <strlen>
 800d08e:	4605      	mov	r5, r0
	writeInt(pptr, len);
 800d090:	4601      	mov	r1, r0
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff ffe0 	bl	800d058 <writeInt>
	memcpy(*pptr, string, len);
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	462a      	mov	r2, r5
 800d09c:	4631      	mov	r1, r6
 800d09e:	f015 f883 	bl	80221a8 <memcpy>
	*pptr += len;
 800d0a2:	6820      	ldr	r0, [r4, #0]
 800d0a4:	4428      	add	r0, r5
 800d0a6:	6020      	str	r0, [r4, #0]
}
 800d0a8:	bd70      	pop	{r4, r5, r6, pc}

0800d0aa <writeMQTTString>:


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d0aa:	b530      	push	{r4, r5, lr}
 800d0ac:	b085      	sub	sp, #20
 800d0ae:	ad04      	add	r5, sp, #16
 800d0b0:	e905 000e 	stmdb	r5, {r1, r2, r3}
 800d0b4:	9d02      	ldr	r5, [sp, #8]
	if (mqttstring.lenstring.len > 0)
 800d0b6:	2d00      	cmp	r5, #0
{
 800d0b8:	4604      	mov	r4, r0
	if (mqttstring.lenstring.len > 0)
 800d0ba:	dd0c      	ble.n	800d0d6 <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d0bc:	4629      	mov	r1, r5
 800d0be:	f7ff ffcb 	bl	800d058 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d0c2:	462a      	mov	r2, r5
 800d0c4:	9903      	ldr	r1, [sp, #12]
 800d0c6:	6800      	ldr	r0, [r0, #0]
 800d0c8:	f015 f86e 	bl	80221a8 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d0cc:	6822      	ldr	r2, [r4, #0]
 800d0ce:	442a      	add	r2, r5
 800d0d0:	6022      	str	r2, [r4, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800d0d2:	b005      	add	sp, #20
 800d0d4:	bd30      	pop	{r4, r5, pc}
 800d0d6:	9901      	ldr	r1, [sp, #4]
	else if (mqttstring.cstring)
 800d0d8:	b121      	cbz	r1, 800d0e4 <writeMQTTString+0x3a>
}
 800d0da:	b005      	add	sp, #20
 800d0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 800d0e0:	f7ff bfcf 	b.w	800d082 <writeCString>
}
 800d0e4:	b005      	add	sp, #20
 800d0e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 800d0ea:	f7ff bfb5 	b.w	800d058 <writeInt>

0800d0ee <readMQTTLenString>:
{
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d0ee:	680b      	ldr	r3, [r1, #0]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	2b01      	cmp	r3, #1
{
 800d0f4:	b570      	push	{r4, r5, r6, lr}
 800d0f6:	4605      	mov	r5, r0
 800d0f8:	460c      	mov	r4, r1
 800d0fa:	4616      	mov	r6, r2
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d0fc:	dc03      	bgt.n	800d106 <readMQTTLenString+0x18>
	int rc = 0;
 800d0fe:	2000      	movs	r0, #0
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 800d100:	2300      	movs	r3, #0
 800d102:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d104:	bd70      	pop	{r4, r5, r6, pc}
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d106:	4608      	mov	r0, r1
 800d108:	f7ff ff92 	bl	800d030 <readInt>
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d10c:	6822      	ldr	r2, [r4, #0]
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d10e:	6068      	str	r0, [r5, #4]
 800d110:	4603      	mov	r3, r0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d112:	4413      	add	r3, r2
 800d114:	42b3      	cmp	r3, r6
 800d116:	d8f2      	bhi.n	800d0fe <readMQTTLenString+0x10>
			mqttstring->lenstring.data = (char*)*pptr;
 800d118:	60aa      	str	r2, [r5, #8]
			rc = 1;
 800d11a:	2001      	movs	r0, #1
			*pptr += mqttstring->lenstring.len;
 800d11c:	6023      	str	r3, [r4, #0]
			rc = 1;
 800d11e:	e7ef      	b.n	800d100 <readMQTTLenString+0x12>

0800d120 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800d120:	b084      	sub	sp, #16
 800d122:	ab04      	add	r3, sp, #16
 800d124:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800d128:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 800d12a:	b110      	cbz	r0, 800d132 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 800d12c:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 800d12e:	f7f3 b859 	b.w	80001e4 <strlen>
}
 800d132:	9802      	ldr	r0, [sp, #8]
 800d134:	b004      	add	sp, #16
 800d136:	4770      	bx	lr

0800d138 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800d138:	b570      	push	{r4, r5, r6, lr}
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
 800d13a:	6805      	ldr	r5, [r0, #0]
{
 800d13c:	460e      	mov	r6, r1
	if (a->cstring)
 800d13e:	b18d      	cbz	r5, 800d164 <MQTTPacket_equals+0x2c>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
 800d140:	4628      	mov	r0, r5
 800d142:	f7f3 f84f 	bl	80001e4 <strlen>
 800d146:	4604      	mov	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
 800d148:	4630      	mov	r0, r6
 800d14a:	f7f3 f84b 	bl	80001e4 <strlen>
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d14e:	4284      	cmp	r4, r0
 800d150:	d10b      	bne.n	800d16a <MQTTPacket_equals+0x32>
 800d152:	4622      	mov	r2, r4
 800d154:	4631      	mov	r1, r6
 800d156:	4628      	mov	r0, r5
 800d158:	f016 fb16 	bl	8023788 <strncmp>
 800d15c:	fab0 f080 	clz	r0, r0
 800d160:	0940      	lsrs	r0, r0, #5
}
 800d162:	bd70      	pop	{r4, r5, r6, pc}
		alen = a->lenstring.len;
 800d164:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 800d168:	e7ee      	b.n	800d148 <MQTTPacket_equals+0x10>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d16a:	2000      	movs	r0, #0
 800d16c:	e7f9      	b.n	800d162 <MQTTPacket_equals+0x2a>

0800d16e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800d16e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d172:	af0e      	add	r7, sp, #56	; 0x38
 800d174:	460e      	mov	r6, r1
	unsigned char *ptr = buf;
 800d176:	9000      	str	r0, [sp, #0]
{
 800d178:	4681      	mov	r9, r0
 800d17a:	4615      	mov	r5, r2
 800d17c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d180:	4698      	mov	r8, r3
 800d182:	ab01      	add	r3, sp, #4
 800d184:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d188:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d18c:	f7ff ffc8 	bl	800d120 <MQTTstrlen>
 800d190:	3002      	adds	r0, #2
	if (qos > 0)
 800d192:	f1b8 0f00 	cmp.w	r8, #0
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d196:	eb00 040a 	add.w	r4, r0, sl
		len += 2; /* packetid */
 800d19a:	bfc8      	it	gt
 800d19c:	3402      	addgt	r4, #2
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f7ff ff2a 	bl	800cff8 <MQTTPacket_len>
 800d1a4:	42b0      	cmp	r0, r6
 800d1a6:	dc30      	bgt.n	800d20a <MQTTSerialize_publish+0x9c>
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
	header.bits.qos = qos;
	header.bits.retain = retained;
 800d1a8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800d1ac:	f006 0601 	and.w	r6, r6, #1
 800d1b0:	f008 0103 	and.w	r1, r8, #3
 800d1b4:	f046 0630 	orr.w	r6, r6, #48	; 0x30
 800d1b8:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 800d1bc:	00e9      	lsls	r1, r5, #3
 800d1be:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 800d1c2:	4331      	orrs	r1, r6
 800d1c4:	4668      	mov	r0, sp
 800d1c6:	f7ff ff41 	bl	800d04c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	9800      	ldr	r0, [sp, #0]
 800d1ce:	f7ff fed7 	bl	800cf80 <MQTTPacket_encode>
 800d1d2:	9b00      	ldr	r3, [sp, #0]
 800d1d4:	4418      	add	r0, r3
 800d1d6:	9000      	str	r0, [sp, #0]

	writeMQTTString(&ptr, topicName);
 800d1d8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d1dc:	4668      	mov	r0, sp
 800d1de:	f7ff ff64 	bl	800d0aa <writeMQTTString>

	if (qos > 0)
 800d1e2:	f1b8 0f00 	cmp.w	r8, #0
 800d1e6:	dd04      	ble.n	800d1f2 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
 800d1e8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800d1ec:	4668      	mov	r0, sp
 800d1ee:	f7ff ff33 	bl	800d058 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800d1f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d1f4:	9800      	ldr	r0, [sp, #0]
 800d1f6:	4652      	mov	r2, sl
 800d1f8:	f014 ffd6 	bl	80221a8 <memcpy>
	ptr += payloadlen;
 800d1fc:	9800      	ldr	r0, [sp, #0]
 800d1fe:	4450      	add	r0, sl

	rc = ptr - buf;
 800d200:	eba0 0009 	sub.w	r0, r0, r9

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d204:	b004      	add	sp, #16
 800d206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d20a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d20e:	e7f9      	b.n	800d204 <MQTTSerialize_publish+0x96>

0800d210 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800d210:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 4)
 800d212:	2903      	cmp	r1, #3
{
 800d214:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800d216:	9001      	str	r0, [sp, #4]
	if (buflen < 4)
 800d218:	dd1e      	ble.n	800d258 <MQTTSerialize_ack+0x48>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
	header.bits.dup = dup;
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d21a:	1f90      	subs	r0, r2, #6
 800d21c:	00d9      	lsls	r1, r3, #3
 800d21e:	4243      	negs	r3, r0
 800d220:	4143      	adcs	r3, r0
 800d222:	f001 0108 	and.w	r1, r1, #8
 800d226:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
 800d22a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
	writeChar(&ptr, header.byte); /* write header */
 800d22e:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
 800d232:	a801      	add	r0, sp, #4
 800d234:	f7ff ff0a 	bl	800d04c <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d238:	2102      	movs	r1, #2
 800d23a:	9801      	ldr	r0, [sp, #4]
 800d23c:	f7ff fea0 	bl	800cf80 <MQTTPacket_encode>
 800d240:	9b01      	ldr	r3, [sp, #4]
	writeInt(&ptr, packetid);
 800d242:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d246:	4418      	add	r0, r3
 800d248:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
 800d24a:	a801      	add	r0, sp, #4
 800d24c:	f7ff ff04 	bl	800d058 <writeInt>
	rc = ptr - buf;
 800d250:	9b01      	ldr	r3, [sp, #4]
 800d252:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d254:	b002      	add	sp, #8
 800d256:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d258:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d25c:	e7fa      	b.n	800d254 <MQTTSerialize_ack+0x44>

0800d25e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800d25e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d262:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	unsigned char *ptr = buf;
 800d266:	9001      	str	r0, [sp, #4]
{
 800d268:	4605      	mov	r5, r0
 800d26a:	4689      	mov	r9, r1
 800d26c:	4614      	mov	r4, r2
 800d26e:	4698      	mov	r8, r3
	int len = 2; /* packetid */
 800d270:	2602      	movs	r6, #2
	for (i = 0; i < count; ++i)
 800d272:	2700      	movs	r7, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d274:	f04f 0a0c 	mov.w	sl, #12
	for (i = 0; i < count; ++i)
 800d278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d27a:	42bb      	cmp	r3, r7
 800d27c:	dc21      	bgt.n	800d2c2 <MQTTSerialize_subscribe+0x64>
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800d27e:	4630      	mov	r0, r6
 800d280:	f7ff feba 	bl	800cff8 <MQTTPacket_len>
 800d284:	4548      	cmp	r0, r9
 800d286:	dc33      	bgt.n	800d2f0 <MQTTSerialize_subscribe+0x92>
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
	header.bits.qos = 1;
 800d288:	00e1      	lsls	r1, r4, #3
 800d28a:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 800d28e:	f041 0182 	orr.w	r1, r1, #130	; 0x82
 800d292:	a801      	add	r0, sp, #4
 800d294:	f7ff feda 	bl	800d04c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d298:	4631      	mov	r1, r6
 800d29a:	9801      	ldr	r0, [sp, #4]
 800d29c:	f7ff fe70 	bl	800cf80 <MQTTPacket_encode>
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	4418      	add	r0, r3
 800d2a4:	9001      	str	r0, [sp, #4]

	writeInt(&ptr, packetid);
 800d2a6:	4641      	mov	r1, r8
 800d2a8:	a801      	add	r0, sp, #4
 800d2aa:	f7ff fed5 	bl	800d058 <writeInt>

	for (i = 0; i < count; ++i)
 800d2ae:	2400      	movs	r4, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800d2b0:	260c      	movs	r6, #12
	for (i = 0; i < count; ++i)
 800d2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2b4:	429c      	cmp	r4, r3
 800d2b6:	db0d      	blt.n	800d2d4 <MQTTSerialize_subscribe+0x76>
		writeChar(&ptr, requestedQoSs[i]);
	}

	rc = ptr - buf;
 800d2b8:	9801      	ldr	r0, [sp, #4]
 800d2ba:	1b40      	subs	r0, r0, r5
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d2bc:	b003      	add	sp, #12
 800d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d2c2:	fb0a b207 	mla	r2, sl, r7, fp
 800d2c6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d2c8:	f7ff ff2a 	bl	800d120 <MQTTstrlen>
 800d2cc:	3003      	adds	r0, #3
 800d2ce:	4406      	add	r6, r0
	for (i = 0; i < count; ++i)
 800d2d0:	3701      	adds	r7, #1
 800d2d2:	e7d1      	b.n	800d278 <MQTTSerialize_subscribe+0x1a>
		writeMQTTString(&ptr, topicFilters[i]);
 800d2d4:	fb06 b304 	mla	r3, r6, r4, fp
 800d2d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d2da:	a801      	add	r0, sp, #4
 800d2dc:	f7ff fee5 	bl	800d0aa <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800d2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2e2:	a801      	add	r0, sp, #4
 800d2e4:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
 800d2e8:	f7ff feb0 	bl	800d04c <writeChar>
	for (i = 0; i < count; ++i)
 800d2ec:	3401      	adds	r4, #1
 800d2ee:	e7e0      	b.n	800d2b2 <MQTTSerialize_subscribe+0x54>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d2f0:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d2f4:	e7e2      	b.n	800d2bc <MQTTSerialize_subscribe+0x5e>

0800d2f6 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800d2f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d2fa:	4680      	mov	r8, r0
 800d2fc:	461f      	mov	r7, r3
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d2fe:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800d300:	9b08      	ldr	r3, [sp, #32]
 800d302:	9300      	str	r3, [sp, #0]
{
 800d304:	460e      	mov	r6, r1
 800d306:	4615      	mov	r5, r2
	header.byte = readChar(&curdata);
 800d308:	f7ff fe9a 	bl	800d040 <readChar>
	if (header.bits.type != SUBACK)
 800d30c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d310:	2890      	cmp	r0, #144	; 0x90
 800d312:	d124      	bne.n	800d35e <MQTTDeserialize_suback+0x68>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d314:	9800      	ldr	r0, [sp, #0]
 800d316:	a901      	add	r1, sp, #4
 800d318:	f7ff fe80 	bl	800d01c <MQTTPacket_decodeBuf>
 800d31c:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800d31e:	9b01      	ldr	r3, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d320:	4404      	add	r4, r0
	if (enddata - curdata < 2)
 800d322:	2b01      	cmp	r3, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d324:	9400      	str	r4, [sp, #0]
	if (enddata - curdata < 2)
 800d326:	dd0b      	ble.n	800d340 <MQTTDeserialize_suback+0x4a>
		goto exit;

	*packetid = readInt(&curdata);
 800d328:	4668      	mov	r0, sp
	enddata = curdata + mylen;
 800d32a:	441c      	add	r4, r3
	*packetid = readInt(&curdata);
 800d32c:	f7ff fe80 	bl	800d030 <readInt>

	*count = 0;
 800d330:	2300      	movs	r3, #0
	*packetid = readInt(&curdata);
 800d332:	f8a8 0000 	strh.w	r0, [r8]
	*count = 0;
 800d336:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
 800d338:	9b00      	ldr	r3, [sp, #0]
 800d33a:	42a3      	cmp	r3, r4
 800d33c:	d303      	bcc.n	800d346 <MQTTDeserialize_suback+0x50>
			goto exit;
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
	}

	rc = 1;
 800d33e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d340:	b002      	add	sp, #8
 800d342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*count > maxcount)
 800d346:	682b      	ldr	r3, [r5, #0]
 800d348:	42b3      	cmp	r3, r6
 800d34a:	dc0a      	bgt.n	800d362 <MQTTDeserialize_suback+0x6c>
		grantedQoSs[(*count)++] = readChar(&curdata);
 800d34c:	4668      	mov	r0, sp
 800d34e:	f7ff fe77 	bl	800d040 <readChar>
 800d352:	682b      	ldr	r3, [r5, #0]
 800d354:	1c5a      	adds	r2, r3, #1
 800d356:	602a      	str	r2, [r5, #0]
 800d358:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
 800d35c:	e7ec      	b.n	800d338 <MQTTDeserialize_suback+0x42>
	int rc = 0;
 800d35e:	2000      	movs	r0, #0
 800d360:	e7ee      	b.n	800d340 <MQTTDeserialize_suback+0x4a>
			rc = -1;
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
 800d366:	e7eb      	b.n	800d340 <MQTTDeserialize_suback+0x4a>

0800d368 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800d368:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d36c:	2100      	movs	r1, #0
 800d36e:	f014 bf43 	b.w	80221f8 <memset>

0800d372 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 800d372:	b120      	cbz	r0, 800d37e <mbedtls_aes_free+0xc>
 800d374:	f500 738c 	add.w	r3, r0, #280	; 0x118
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d378:	2200      	movs	r2, #0
 800d37a:	4298      	cmp	r0, r3
 800d37c:	d100      	bne.n	800d380 <mbedtls_aes_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
}
 800d37e:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d380:	f800 2b01 	strb.w	r2, [r0], #1
 800d384:	e7f9      	b.n	800d37a <mbedtls_aes_free+0x8>
	...

0800d388 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
 800d388:	2ac0      	cmp	r2, #192	; 0xc0
{
 800d38a:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( keybits )
 800d38c:	d049      	beq.n	800d422 <mbedtls_aes_setkey_enc+0x9a>
 800d38e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d392:	d048      	beq.n	800d426 <mbedtls_aes_setkey_enc+0x9e>
 800d394:	2a80      	cmp	r2, #128	; 0x80
 800d396:	f040 80e5 	bne.w	800d564 <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
 800d39a:	230a      	movs	r3, #10

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d39c:	4604      	mov	r4, r0
        case 256: ctx->nr = 14; break;
 800d39e:	6003      	str	r3, [r0, #0]
    ctx->rk = RK = ctx->buf;
 800d3a0:	f100 0308 	add.w	r3, r0, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d3a4:	0952      	lsrs	r2, r2, #5
    ctx->rk = RK = ctx->buf;
 800d3a6:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d3aa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d3ae:	428a      	cmp	r2, r1
 800d3b0:	d13b      	bne.n	800d42a <mbedtls_aes_setkey_enc+0xa2>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800d3b2:	6803      	ldr	r3, [r0, #0]
 800d3b4:	2b0c      	cmp	r3, #12
 800d3b6:	d046      	beq.n	800d446 <mbedtls_aes_setkey_enc+0xbe>
 800d3b8:	2b0e      	cmp	r3, #14
 800d3ba:	d07c      	beq.n	800d4b6 <mbedtls_aes_setkey_enc+0x12e>
 800d3bc:	2b0a      	cmp	r3, #10
 800d3be:	d12e      	bne.n	800d41e <mbedtls_aes_setkey_enc+0x96>
 800d3c0:	4d6a      	ldr	r5, [pc, #424]	; (800d56c <mbedtls_aes_setkey_enc+0x1e4>)
 800d3c2:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
 800d3c6:	4629      	mov	r1, r5
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d3c8:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d3ca:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d3ce:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d3d0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d3d4:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d3d6:	407c      	eors	r4, r7
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d3d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d3dc:	4063      	eors	r3, r4
 800d3de:	eb01 6412 	add.w	r4, r1, r2, lsr #24
 800d3e2:	3010      	adds	r0, #16
 800d3e4:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 800d3e8:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800d3ec:	fa51 f482 	uxtab	r4, r1, r2
 800d3f0:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d3f4:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800d3f8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d3fc:	440c      	add	r4, r1
 800d3fe:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d402:	ea83 2304 	eor.w	r3, r3, r4, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 800d406:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d40a:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
 800d40c:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
 800d40e:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
 800d410:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
 800d412:	4063      	eors	r3, r4
 800d414:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
 800d416:	4053      	eors	r3, r2
 800d418:	6143      	str	r3, [r0, #20]
            for( i = 0; i < 10; i++, RK += 4 )
 800d41a:	4286      	cmp	r6, r0
 800d41c:	d1d4      	bne.n	800d3c8 <mbedtls_aes_setkey_enc+0x40>
    switch( ctx->nr )
 800d41e:	2000      	movs	r0, #0
 800d420:	e0a2      	b.n	800d568 <mbedtls_aes_setkey_enc+0x1e0>
        case 192: ctx->nr = 12; break;
 800d422:	230c      	movs	r3, #12
 800d424:	e7ba      	b.n	800d39c <mbedtls_aes_setkey_enc+0x14>
        case 256: ctx->nr = 14; break;
 800d426:	230e      	movs	r3, #14
 800d428:	e7b8      	b.n	800d39c <mbedtls_aes_setkey_enc+0x14>
        GET_UINT32_LE( RK[i], key, i << 2 );
 800d42a:	788b      	ldrb	r3, [r1, #2]
 800d42c:	784d      	ldrb	r5, [r1, #1]
 800d42e:	041b      	lsls	r3, r3, #16
 800d430:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d434:	780d      	ldrb	r5, [r1, #0]
 800d436:	432b      	orrs	r3, r5
 800d438:	78cd      	ldrb	r5, [r1, #3]
 800d43a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d43e:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d442:	3104      	adds	r1, #4
 800d444:	e7b3      	b.n	800d3ae <mbedtls_aes_setkey_enc+0x26>
 800d446:	4c49      	ldr	r4, [pc, #292]	; (800d56c <mbedtls_aes_setkey_enc+0x1e4>)
 800d448:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
 800d44c:	4621      	mov	r1, r4
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d44e:	69c2      	ldr	r2, [r0, #28]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d450:	f854 6b04 	ldr.w	r6, [r4], #4
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d454:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d456:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d45a:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d45c:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d45e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d462:	4073      	eors	r3, r6
 800d464:	eb01 6612 	add.w	r6, r1, r2, lsr #24
 800d468:	3018      	adds	r0, #24
 800d46a:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800d46e:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800d472:	fa51 f682 	uxtab	r6, r1, r2
 800d476:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d47a:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800d47e:	f3c2 4607 	ubfx	r6, r2, #16, #8
 800d482:	440e      	add	r6, r1
 800d484:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d488:	ea83 2306 	eor.w	r3, r3, r6, lsl #8

                RK[7]  = RK[1] ^ RK[6];
 800d48c:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d490:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
 800d492:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
 800d494:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
 800d498:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
 800d49a:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
 800d49c:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
 800d4a0:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
 800d4a2:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
 800d4a4:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
 800d4a6:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
 800d4a8:	4073      	eors	r3, r6
 800d4aa:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
 800d4ac:	4053      	eors	r3, r2
 800d4ae:	61c3      	str	r3, [r0, #28]
            for( i = 0; i < 8; i++, RK += 6 )
 800d4b0:	4285      	cmp	r5, r0
 800d4b2:	d1cc      	bne.n	800d44e <mbedtls_aes_setkey_enc+0xc6>
 800d4b4:	e7b3      	b.n	800d41e <mbedtls_aes_setkey_enc+0x96>
 800d4b6:	4d2d      	ldr	r5, [pc, #180]	; (800d56c <mbedtls_aes_setkey_enc+0x1e4>)
 800d4b8:	f100 06e0 	add.w	r6, r0, #224	; 0xe0
 800d4bc:	4629      	mov	r1, r5
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d4be:	6a44      	ldr	r4, [r0, #36]	; 0x24
                RK[8]  = RK[0] ^ RCON[i] ^
 800d4c0:	f855 2b04 	ldr.w	r2, [r5], #4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d4c4:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d4c6:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800d4ca:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d4cc:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d4ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d4d2:	6987      	ldr	r7, [r0, #24]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d4d4:	4053      	eors	r3, r2
 800d4d6:	eb01 6214 	add.w	r2, r1, r4, lsr #24
 800d4da:	3020      	adds	r0, #32
 800d4dc:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d4e0:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800d4e4:	fa51 f284 	uxtab	r2, r1, r4
 800d4e8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d4ec:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800d4f0:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800d4f4:	440a      	add	r2, r1
 800d4f6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d4fa:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 800d4fe:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ RCON[i] ^
 800d502:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
 800d504:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
 800d506:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
 800d50a:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
 800d50c:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
 800d50e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
 800d512:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
 800d514:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d516:	fa51 f283 	uxtab	r2, r1, r3
                RK[11] = RK[3] ^ RK[10];
 800d51a:	6143      	str	r3, [r0, #20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d51c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d520:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800d522:	eb01 6713 	add.w	r7, r1, r3, lsr #24
 800d526:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d52a:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d52e:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800d532:	440f      	add	r7, r1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d534:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d538:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d53a:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d53e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d542:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
 800d546:	ea82 4303 	eor.w	r3, r2, r3, lsl #16

                RK[13] = RK[5] ^ RK[12];
 800d54a:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
 800d54e:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
 800d550:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
 800d552:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
 800d554:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
 800d556:	4053      	eors	r3, r2
 800d558:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
 800d55a:	4063      	eors	r3, r4
 800d55c:	6243      	str	r3, [r0, #36]	; 0x24
            for( i = 0; i < 7; i++, RK += 8 )
 800d55e:	4286      	cmp	r6, r0
 800d560:	d1ad      	bne.n	800d4be <mbedtls_aes_setkey_enc+0x136>
 800d562:	e75c      	b.n	800d41e <mbedtls_aes_setkey_enc+0x96>
    switch( keybits )
 800d564:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
 800d568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d56a:	bf00      	nop
 800d56c:	080283c8 	.word	0x080283c8

0800d570 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	b0c9      	sub	sp, #292	; 0x124
 800d576:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 800d578:	a802      	add	r0, sp, #8
{
 800d57a:	e9cd 2100 	strd	r2, r1, [sp]
    mbedtls_aes_init( &cty );
 800d57e:	f7ff fef3 	bl	800d368 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d582:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d586:	e9dd 2100 	ldrd	r2, r1, [sp]
    ctx->rk = RK = ctx->buf;
 800d58a:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d58c:	a802      	add	r0, sp, #8
 800d58e:	f7ff fefb 	bl	800d388 <mbedtls_aes_setkey_enc>
 800d592:	4680      	mov	r8, r0
 800d594:	2800      	cmp	r0, #0
 800d596:	d137      	bne.n	800d608 <mbedtls_aes_setkey_dec+0x98>
        goto exit;

    ctx->nr = cty.nr;
 800d598:	9e02      	ldr	r6, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800d59a:	9b03      	ldr	r3, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d59c:	4938      	ldr	r1, [pc, #224]	; (800d680 <mbedtls_aes_setkey_dec+0x110>)
    ctx->nr = cty.nr;
 800d59e:	6026      	str	r6, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 800d5a0:	0135      	lsls	r5, r6, #4
 800d5a2:	eb03 1206 	add.w	r2, r3, r6, lsl #4
    *RK++ = *SK++;
 800d5a6:	595b      	ldr	r3, [r3, r5]
 800d5a8:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
 800d5aa:	6853      	ldr	r3, [r2, #4]
 800d5ac:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
 800d5ae:	6893      	ldr	r3, [r2, #8]
 800d5b0:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
 800d5b2:	f104 0318 	add.w	r3, r4, #24
 800d5b6:	9300      	str	r3, [sp, #0]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d5b8:	f106 3aff 	add.w	sl, r6, #4294967295
    *RK++ = *SK++;
 800d5bc:	68d3      	ldr	r3, [r2, #12]
 800d5be:	6163      	str	r3, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d5c0:	3a10      	subs	r2, #16
 800d5c2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800d5c6:	4696      	mov	lr, r2
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	f1a3 0c10 	sub.w	ip, r3, #16
 800d5d0:	dc21      	bgt.n	800d616 <mbedtls_aes_setkey_dec+0xa6>
 800d5d2:	9b00      	ldr	r3, [sp, #0]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 800d5d4:	9800      	ldr	r0, [sp, #0]
 800d5d6:	2e00      	cmp	r6, #0
 800d5d8:	f1a5 0510 	sub.w	r5, r5, #16
 800d5dc:	bfd8      	it	le
 800d5de:	2500      	movle	r5, #0
 800d5e0:	eb03 0105 	add.w	r1, r3, r5
 800d5e4:	f06f 030f 	mvn.w	r3, #15
 800d5e8:	fb03 fa0a 	mul.w	sl, r3, sl
 800d5ec:	bfd8      	it	le
 800d5ee:	f04f 0a00 	movle.w	sl, #0
 800d5f2:	eb02 030a 	add.w	r3, r2, sl
 800d5f6:	f852 200a 	ldr.w	r2, [r2, sl]
 800d5fa:	5142      	str	r2, [r0, r5]
    *RK++ = *SK++;
 800d5fc:	685a      	ldr	r2, [r3, #4]
 800d5fe:	604a      	str	r2, [r1, #4]
    *RK++ = *SK++;
 800d600:	689a      	ldr	r2, [r3, #8]
 800d602:	608a      	str	r2, [r1, #8]
    *RK++ = *SK++;
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	60cb      	str	r3, [r1, #12]

exit:
    mbedtls_aes_free( &cty );
 800d608:	a802      	add	r0, sp, #8
 800d60a:	f7ff feb2 	bl	800d372 <mbedtls_aes_free>

    return( ret );
}
 800d60e:	4640      	mov	r0, r8
 800d610:	b049      	add	sp, #292	; 0x124
 800d612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d616:	f1ae 0b04 	sub.w	fp, lr, #4
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d61a:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800d61e:	fa51 f784 	uxtab	r7, r1, r4
 800d622:	f897 9028 	ldrb.w	r9, [r7, #40]	; 0x28
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d626:	eb01 6714 	add.w	r7, r1, r4, lsr #24
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d62a:	eb01 0989 	add.w	r9, r1, r9, lsl #2
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d62e:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d632:	f8d9 9128 	ldr.w	r9, [r9, #296]	; 0x128
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d636:	eb01 0787 	add.w	r7, r1, r7, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d63a:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800d63e:	ea89 0907 	eor.w	r9, r9, r7
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d642:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800d646:	440f      	add	r7, r1
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d648:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800d64c:	440c      	add	r4, r1
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d64e:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d652:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d656:	eb01 0787 	add.w	r7, r1, r7, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d65a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d65e:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800d662:	f8d4 4d28 	ldr.w	r4, [r4, #3368]	; 0xd28
 800d666:	ea89 0707 	eor.w	r7, r9, r7
 800d66a:	4067      	eors	r7, r4
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d66c:	f84c 7b04 	str.w	r7, [ip], #4
        for( j = 0; j < 4; j++, SK++ )
 800d670:	459c      	cmp	ip, r3
 800d672:	d1d2      	bne.n	800d61a <mbedtls_aes_setkey_dec+0xaa>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d674:	3801      	subs	r0, #1
 800d676:	f1ae 0e10 	sub.w	lr, lr, #16
 800d67a:	3310      	adds	r3, #16
 800d67c:	e7a5      	b.n	800d5ca <mbedtls_aes_setkey_dec+0x5a>
 800d67e:	bf00      	nop
 800d680:	080283c8 	.word	0x080283c8

0800d684 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800d684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800d688:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d68a:	680e      	ldr	r6, [r1, #0]
 800d68c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d68e:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d690:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d692:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d694:	4066      	eors	r6, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d696:	685c      	ldr	r4, [r3, #4]
 800d698:	4065      	eors	r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d69a:	689c      	ldr	r4, [r3, #8]
{
 800d69c:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d69e:	1040      	asrs	r0, r0, #1
 800d6a0:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d6a2:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d6a6:	68cf      	ldr	r7, [r1, #12]
 800d6a8:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d6aa:	9000      	str	r0, [sp, #0]
 800d6ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d6b0:	4bc2      	ldr	r3, [pc, #776]	; (800d9bc <mbedtls_internal_aes_encrypt+0x338>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d6b2:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d6b4:	f850 7c10 	ldr.w	r7, [r0, #-16]
 800d6b8:	9701      	str	r7, [sp, #4]
 800d6ba:	b2f7      	uxtb	r7, r6
 800d6bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6c0:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800d6c4:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d6c6:	ea87 0e04 	eor.w	lr, r7, r4
 800d6ca:	0e0f      	lsrs	r7, r1, #24
 800d6cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6d0:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800d6d4:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d6d8:	ea8e 0e07 	eor.w	lr, lr, r7
 800d6dc:	f3c5 2707 	ubfx	r7, r5, #8, #8
 800d6e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6e4:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800d6e8:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d6ec:	ea8e 0e07 	eor.w	lr, lr, r7
 800d6f0:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800d6f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6f8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d6fc:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d700:	f8da a430 	ldr.w	sl, [sl, #1072]	; 0x430
 800d704:	ea8e 0e07 	eor.w	lr, lr, r7
 800d708:	b2ef      	uxtb	r7, r5
 800d70a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d70e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800d712:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d714:	ea87 0c04 	eor.w	ip, r7, r4
 800d718:	0e37      	lsrs	r7, r6, #24
 800d71a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d71e:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800d722:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d726:	ea8c 0c07 	eor.w	ip, ip, r7
 800d72a:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800d72e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d732:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d736:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d73a:	ea8c 0c07 	eor.w	ip, ip, r7
 800d73e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800d742:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d746:	fa5f f88e 	uxtb.w	r8, lr
 800d74a:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d74e:	ea8c 0c07 	eor.w	ip, ip, r7
 800d752:	fa5f f78b 	uxtb.w	r7, fp
 800d756:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d75a:	f3cc 2907 	ubfx	r9, ip, #8, #8
 800d75e:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d760:	4067      	eors	r7, r4
 800d762:	ea87 070a 	eor.w	r7, r7, sl
 800d766:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800d76a:	b2c9      	uxtb	r1, r1
 800d76c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d770:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800d774:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d776:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d77a:	4061      	eors	r1, r4
 800d77c:	f8da a830 	ldr.w	sl, [sl, #2096]	; 0x830
 800d780:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800d784:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d788:	ea87 070a 	eor.w	r7, r7, sl
 800d78c:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 800d790:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800d794:	f8d4 4430 	ldr.w	r4, [r4, #1072]	; 0x430
 800d798:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800d79c:	4061      	eors	r1, r4
 800d79e:	f8d6 4830 	ldr.w	r4, [r6, #2096]	; 0x830
 800d7a2:	4061      	eors	r1, r4
 800d7a4:	f8d5 4c30 	ldr.w	r4, [r5, #3120]	; 0xc30
 800d7a8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d7ac:	4061      	eors	r1, r4
 800d7ae:	f8da ac30 	ldr.w	sl, [sl, #3120]	; 0xc30
 800d7b2:	f850 4c0c 	ldr.w	r4, [r0, #-12]
 800d7b6:	9402      	str	r4, [sp, #8]
 800d7b8:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800d7bc:	9603      	str	r6, [sp, #12]
 800d7be:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800d7c2:	ea87 070a 	eor.w	r7, r7, sl
 800d7c6:	9604      	str	r6, [sp, #16]
 800d7c8:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800d7cc:	9605      	str	r6, [sp, #20]
 800d7ce:	b2fe      	uxtb	r6, r7
 800d7d0:	9606      	str	r6, [sp, #24]
 800d7d2:	f3c1 2607 	ubfx	r6, r1, #8, #8
 800d7d6:	9607      	str	r6, [sp, #28]
 800d7d8:	f3ce 4607 	ubfx	r6, lr, #16, #8
 800d7dc:	9608      	str	r6, [sp, #32]
 800d7de:	0e0d      	lsrs	r5, r1, #24
 800d7e0:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800d7e4:	b2c9      	uxtb	r1, r1
 800d7e6:	9609      	str	r6, [sp, #36]	; 0x24
 800d7e8:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800d7ec:	910b      	str	r1, [sp, #44]	; 0x2c
 800d7ee:	9900      	ldr	r1, [sp, #0]
 800d7f0:	960a      	str	r6, [sp, #40]	; 0x28
 800d7f2:	2900      	cmp	r1, #0
 800d7f4:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800d7f8:	fa5f f48c 	uxtb.w	r4, ip
 800d7fc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800d800:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800d804:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800d808:	ea4f 6717 	mov.w	r7, r7, lsr #24
 800d80c:	f100 0020 	add.w	r0, r0, #32
 800d810:	dc77      	bgt.n	800d902 <mbedtls_internal_aes_encrypt+0x27e>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d812:	4b6b      	ldr	r3, [pc, #428]	; (800d9c0 <mbedtls_internal_aes_encrypt+0x33c>)
    X0 = *RK++ ^ \
 800d814:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800d816:	4498      	add	r8, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d818:	4499      	add	r9, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800d81a:	f898 6028 	ldrb.w	r6, [r8, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800d81e:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800d822:	449a      	add	sl, r3
    X0 = *RK++ ^ \
 800d824:	4046      	eors	r6, r0
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800d826:	441d      	add	r5, r3
    X0 = *RK++ ^ \
 800d828:	ea86 2601 	eor.w	r6, r6, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800d82c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28

    X1 = *RK++ ^ \
 800d830:	9802      	ldr	r0, [sp, #8]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800d832:	441c      	add	r4, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800d834:	449b      	add	fp, r3
    X0 = *RK++ ^ \
 800d836:	ea86 4601 	eor.w	r6, r6, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800d83a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800d83e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800d842:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    X0 = *RK++ ^ \
 800d844:	ea86 6601 	eor.w	r6, r6, r1, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800d848:	f89b 1028 	ldrb.w	r1, [fp, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800d84c:	7016      	strb	r6, [r2, #0]
    X1 = *RK++ ^ \
 800d84e:	4045      	eors	r5, r0
 800d850:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d854:	9903      	ldr	r1, [sp, #12]
 800d856:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800d858:	449e      	add	lr, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800d85a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800d85e:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800d862:	9904      	ldr	r1, [sp, #16]
 800d864:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800d866:	449c      	add	ip, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800d868:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800d86c:	ea85 6501 	eor.w	r5, r5, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d870:	9907      	ldr	r1, [sp, #28]
    PUT_UINT32_LE( X1, output,  4 );
 800d872:	7115      	strb	r5, [r2, #4]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d874:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800d876:	441f      	add	r7, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800d878:	f891 8028 	ldrb.w	r8, [r1, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800d87c:	9906      	ldr	r1, [sp, #24]
 800d87e:	4419      	add	r1, r3
 800d880:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800d884:	9905      	ldr	r1, [sp, #20]
 800d886:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800d888:	9908      	ldr	r1, [sp, #32]
 800d88a:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800d88c:	ea80 2008 	eor.w	r0, r0, r8, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800d890:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800d894:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800d898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d89a:	4419      	add	r1, r3
 800d89c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800d8a0:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800d8a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d8a6:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800d8a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800d8ac:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X3 = *RK++ ^ \
 800d8b0:	4061      	eors	r1, r4
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800d8b2:	f89e 4028 	ldrb.w	r4, [lr, #40]	; 0x28
    X3 = *RK++ ^ \
 800d8b6:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800d8ba:	f89c 4028 	ldrb.w	r4, [ip, #40]	; 0x28
    X3 = *RK++ ^ \
 800d8be:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
 800d8c2:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800d8c6:	0a31      	lsrs	r1, r6, #8
 800d8c8:	7051      	strb	r1, [r2, #1]
 800d8ca:	0c31      	lsrs	r1, r6, #16
 800d8cc:	7091      	strb	r1, [r2, #2]
 800d8ce:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 800d8d0:	0a29      	lsrs	r1, r5, #8
    PUT_UINT32_LE( X0, output,  0 );
 800d8d2:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800d8d4:	7151      	strb	r1, [r2, #5]
 800d8d6:	0c29      	lsrs	r1, r5, #16
 800d8d8:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800d8da:	0a01      	lsrs	r1, r0, #8
 800d8dc:	7251      	strb	r1, [r2, #9]
 800d8de:	0c01      	lsrs	r1, r0, #16
 800d8e0:	7210      	strb	r0, [r2, #8]
 800d8e2:	7291      	strb	r1, [r2, #10]
 800d8e4:	0e00      	lsrs	r0, r0, #24
    PUT_UINT32_LE( X3, output, 12 );
 800d8e6:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800d8e8:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 800d8ea:	72d0      	strb	r0, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800d8ec:	7313      	strb	r3, [r2, #12]
 800d8ee:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800d8f0:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800d8f2:	0c19      	lsrs	r1, r3, #16
 800d8f4:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800d8f6:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X3, output, 12 );
 800d8f8:	7391      	strb	r1, [r2, #14]
 800d8fa:	73d3      	strb	r3, [r2, #15]
}
 800d8fc:	b00d      	add	sp, #52	; 0x34
 800d8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800d902:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800d906:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d90a:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 800d90e:	f8d5 1430 	ldr.w	r1, [r5, #1072]	; 0x430
 800d912:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800d916:	404e      	eors	r6, r1
 800d918:	9901      	ldr	r1, [sp, #4]
 800d91a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d91e:	404e      	eors	r6, r1
 800d920:	f8d9 1830 	ldr.w	r1, [r9, #2096]	; 0x830
 800d924:	404e      	eors	r6, r1
 800d926:	f8da 1c30 	ldr.w	r1, [sl, #3120]	; 0xc30
 800d92a:	404e      	eors	r6, r1
 800d92c:	9904      	ldr	r1, [sp, #16]
 800d92e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d932:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d936:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800d938:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
 800d93c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800d93e:	404d      	eors	r5, r1
 800d940:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800d944:	9902      	ldr	r1, [sp, #8]
 800d946:	404d      	eors	r5, r1
 800d948:	f8db 1830 	ldr.w	r1, [fp, #2096]	; 0x830
 800d94c:	404d      	eors	r5, r1
 800d94e:	9903      	ldr	r1, [sp, #12]
 800d950:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d954:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800d958:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800d95c:	404d      	eors	r5, r1
 800d95e:	9906      	ldr	r1, [sp, #24]
 800d960:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d968:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800d96a:	f8d8 1430 	ldr.w	r1, [r8, #1072]	; 0x430
 800d96e:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d972:	404c      	eors	r4, r1
 800d974:	9905      	ldr	r1, [sp, #20]
 800d976:	404c      	eors	r4, r1
 800d978:	9907      	ldr	r1, [sp, #28]
 800d97a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d97e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800d982:	f8d1 1830 	ldr.w	r1, [r1, #2096]	; 0x830
 800d986:	404c      	eors	r4, r1
 800d988:	9908      	ldr	r1, [sp, #32]
 800d98a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d98e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800d992:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800d996:	ea84 0b01 	eor.w	fp, r4, r1
 800d99a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d99c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d9a0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d9a2:	4079      	eors	r1, r7
 800d9a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800d9a6:	4079      	eors	r1, r7
 800d9a8:	f8de 7830 	ldr.w	r7, [lr, #2096]	; 0x830
 800d9ac:	4079      	eors	r1, r7
 800d9ae:	f8dc 7c30 	ldr.w	r7, [ip, #3120]	; 0xc30
 800d9b2:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d9b4:	9f00      	ldr	r7, [sp, #0]
 800d9b6:	3f01      	subs	r7, #1
 800d9b8:	9700      	str	r7, [sp, #0]
 800d9ba:	e67b      	b.n	800d6b4 <mbedtls_internal_aes_encrypt+0x30>
 800d9bc:	080294c0 	.word	0x080294c0
 800d9c0:	080283c8 	.word	0x080283c8

0800d9c4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800d9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800d9c8:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d9ca:	680d      	ldr	r5, [r1, #0]
 800d9cc:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d9ce:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d9d0:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d9d2:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d9d4:	4065      	eors	r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d9d6:	685c      	ldr	r4, [r3, #4]
 800d9d8:	4066      	eors	r6, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d9da:	689c      	ldr	r4, [r3, #8]
{
 800d9dc:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d9de:	1040      	asrs	r0, r0, #1
 800d9e0:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d9e2:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d9e6:	68cf      	ldr	r7, [r1, #12]
 800d9e8:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d9ea:	9000      	str	r0, [sp, #0]
 800d9ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d9f0:	4bc7      	ldr	r3, [pc, #796]	; (800dd10 <mbedtls_internal_aes_decrypt+0x34c>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d9f2:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d9f4:	b2ef      	uxtb	r7, r5
 800d9f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d9fa:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800d9fe:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800da02:	9401      	str	r4, [sp, #4]
 800da04:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800da08:	ea87 0c04 	eor.w	ip, r7, r4
 800da0c:	0e37      	lsrs	r7, r6, #24
 800da0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da12:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800da16:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800da1a:	ea8c 0c07 	eor.w	ip, ip, r7
 800da1e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800da22:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da26:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 800da2a:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800da2e:	ea8c 0c07 	eor.w	ip, ip, r7
 800da32:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800da36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da3a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800da3e:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800da42:	f8da a528 	ldr.w	sl, [sl, #1320]	; 0x528
 800da46:	ea8c 0c07 	eor.w	ip, ip, r7
 800da4a:	b2cf      	uxtb	r7, r1
 800da4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da50:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800da54:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800da58:	ea87 0e04 	eor.w	lr, r7, r4
 800da5c:	0e2f      	lsrs	r7, r5, #24
 800da5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da62:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800da66:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800da6a:	ea8e 0e07 	eor.w	lr, lr, r7
 800da6e:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800da72:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da76:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800da7a:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800da7e:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800da82:	ea8e 0e07 	eor.w	lr, lr, r7
 800da86:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800da8a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da8e:	fa5f f88c 	uxtb.w	r8, ip
 800da92:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800da96:	ea8e 0e07 	eor.w	lr, lr, r7
 800da9a:	fa5f f78b 	uxtb.w	r7, fp
 800da9e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800daa2:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800daa6:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800daaa:	4067      	eors	r7, r4
 800daac:	ea87 070a 	eor.w	r7, r7, sl
 800dab0:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 800dab4:	b2f6      	uxtb	r6, r6
 800dab6:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800daba:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800dabe:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800dac2:	f8da a928 	ldr.w	sl, [sl, #2344]	; 0x928
 800dac6:	f8d6 6128 	ldr.w	r6, [r6, #296]	; 0x128
 800daca:	ea87 070a 	eor.w	r7, r7, sl
 800dace:	4066      	eors	r6, r4
 800dad0:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 800dad4:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800dad8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dadc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dae0:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800dae4:	f8da ad28 	ldr.w	sl, [sl, #3368]	; 0xd28
 800dae8:	f8d4 4528 	ldr.w	r4, [r4, #1320]	; 0x528
 800daec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800daf0:	ea87 070a 	eor.w	r7, r7, sl
 800daf4:	4066      	eors	r6, r4
 800daf6:	f8d5 4928 	ldr.w	r4, [r5, #2344]	; 0x928
 800dafa:	f3ce 4507 	ubfx	r5, lr, #16, #8
 800dafe:	9503      	str	r5, [sp, #12]
 800db00:	0e3d      	lsrs	r5, r7, #24
 800db02:	4066      	eors	r6, r4
 800db04:	9504      	str	r5, [sp, #16]
 800db06:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800db0a:	9505      	str	r5, [sp, #20]
 800db0c:	404e      	eors	r6, r1
 800db0e:	b2fd      	uxtb	r5, r7
 800db10:	9506      	str	r5, [sp, #24]
 800db12:	f3c6 2507 	ubfx	r5, r6, #8, #8
 800db16:	9507      	str	r5, [sp, #28]
 800db18:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800db1c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800db20:	9508      	str	r5, [sp, #32]
 800db22:	ea4f 651e 	mov.w	r5, lr, lsr #24
 800db26:	9102      	str	r1, [sp, #8]
 800db28:	9509      	str	r5, [sp, #36]	; 0x24
 800db2a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800db2e:	950a      	str	r5, [sp, #40]	; 0x28
 800db30:	fa5f f58e 	uxtb.w	r5, lr
 800db34:	950b      	str	r5, [sp, #44]	; 0x2c
 800db36:	9d00      	ldr	r5, [sp, #0]
 800db38:	2d00      	cmp	r5, #0
 800db3a:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800db3e:	f3cc 2407 	ubfx	r4, ip, #8, #8
 800db42:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 800db46:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 800db4a:	b2f1      	uxtb	r1, r6
 800db4c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800db50:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800db54:	f100 0020 	add.w	r0, r0, #32
 800db58:	dc77      	bgt.n	800dc4a <mbedtls_internal_aes_decrypt+0x286>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800db5a:	4b6e      	ldr	r3, [pc, #440]	; (800dd14 <mbedtls_internal_aes_decrypt+0x350>)
    X0 = *RK++ ^ \
 800db5c:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800db5e:	4498      	add	r8, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800db60:	4499      	add	r9, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800db62:	f818 5cc8 	ldrb.w	r5, [r8, #-200]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800db66:	f819 0cc8 	ldrb.w	r0, [r9, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800db6a:	449a      	add	sl, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800db6c:	4419      	add	r1, r3
    X0 = *RK++ ^ \
 800db6e:	4075      	eors	r5, r6
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800db70:	449b      	add	fp, r3
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800db72:	f811 6cc8 	ldrb.w	r6, [r1, #-200]
    X1 = *RK++ ^ \
 800db76:	9902      	ldr	r1, [sp, #8]
    X0 = *RK++ ^ \
 800db78:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800db7c:	f81a 0cc8 	ldrb.w	r0, [sl, #-200]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800db80:	441c      	add	r4, r3
    X0 = *RK++ ^ \
 800db82:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
    X1 = *RK++ ^ \
 800db86:	404e      	eors	r6, r1
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800db88:	f81b 0cc8 	ldrb.w	r0, [fp, #-200]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800db8c:	9903      	ldr	r1, [sp, #12]
    X0 = *RK++ ^ \
 800db8e:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800db92:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800db94:	f814 0cc8 	ldrb.w	r0, [r4, #-200]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800db98:	7015      	strb	r5, [r2, #0]
    X1 = *RK++ ^ \
 800db9a:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800db9e:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800dba2:	9904      	ldr	r1, [sp, #16]
 800dba4:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800dba6:	ea86 4600 	eor.w	r6, r6, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800dbaa:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800dbae:	9907      	ldr	r1, [sp, #28]
 800dbb0:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800dbb2:	ea86 6600 	eor.w	r6, r6, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800dbb6:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800dbba:	9906      	ldr	r1, [sp, #24]
    PUT_UINT32_LE( X1, output,  4 );
 800dbbc:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800dbbe:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800dbc0:	449e      	add	lr, r3
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800dbc2:	f811 4cc8 	ldrb.w	r4, [r1, #-200]
    X2 = *RK++ ^ \
 800dbc6:	9905      	ldr	r1, [sp, #20]
 800dbc8:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800dbca:	9908      	ldr	r1, [sp, #32]
 800dbcc:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800dbce:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800dbd2:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X3 = *RK++ ^ \
 800dbd6:	980a      	ldr	r0, [sp, #40]	; 0x28
    X2 = *RK++ ^ \
 800dbd8:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800dbdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dbde:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800dbe0:	441f      	add	r7, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800dbe2:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X2 = *RK++ ^ \
 800dbe6:	ea84 6401 	eor.w	r4, r4, r1, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800dbea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbec:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800dbee:	449c      	add	ip, r3
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800dbf0:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800dbf4:	f81c 3cc8 	ldrb.w	r3, [ip, #-200]
    X3 = *RK++ ^ \
 800dbf8:	4041      	eors	r1, r0
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800dbfa:	f81e 0cc8 	ldrb.w	r0, [lr, #-200]
    X3 = *RK++ ^ \
 800dbfe:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800dc02:	f817 0cc8 	ldrb.w	r0, [r7, #-200]
    X3 = *RK++ ^ \
 800dc06:	ea81 4100 	eor.w	r1, r1, r0, lsl #16
 800dc0a:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800dc0e:	0a29      	lsrs	r1, r5, #8
 800dc10:	7051      	strb	r1, [r2, #1]
 800dc12:	0c29      	lsrs	r1, r5, #16
 800dc14:	7091      	strb	r1, [r2, #2]
 800dc16:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X1, output,  4 );
 800dc18:	0a31      	lsrs	r1, r6, #8
    PUT_UINT32_LE( X0, output,  0 );
 800dc1a:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800dc1c:	7151      	strb	r1, [r2, #5]
 800dc1e:	0c31      	lsrs	r1, r6, #16
 800dc20:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800dc22:	0a21      	lsrs	r1, r4, #8
 800dc24:	7251      	strb	r1, [r2, #9]
 800dc26:	0c21      	lsrs	r1, r4, #16
 800dc28:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800dc2a:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800dc2c:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 800dc2e:	7214      	strb	r4, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800dc30:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800dc32:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
 800dc34:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800dc36:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800dc38:	0c19      	lsrs	r1, r3, #16
 800dc3a:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800dc3c:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800dc3e:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800dc40:	7391      	strb	r1, [r2, #14]
 800dc42:	73d3      	strb	r3, [r2, #15]
}
 800dc44:	b00d      	add	sp, #52	; 0x34
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dc4a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800dc4e:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800dc52:	f8d8 5128 	ldr.w	r5, [r8, #296]	; 0x128
 800dc56:	f8db 6528 	ldr.w	r6, [fp, #1320]	; 0x528
 800dc5a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800dc5e:	4075      	eors	r5, r6
 800dc60:	9e01      	ldr	r6, [sp, #4]
 800dc62:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dc66:	4075      	eors	r5, r6
 800dc68:	f8d9 6928 	ldr.w	r6, [r9, #2344]	; 0x928
 800dc6c:	4075      	eors	r5, r6
 800dc6e:	f8da 6d28 	ldr.w	r6, [sl, #3368]	; 0xd28
 800dc72:	4075      	eors	r5, r6
 800dc74:	9e04      	ldr	r6, [sp, #16]
 800dc76:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc7a:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 800dc7e:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
 800dc82:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800dc86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc8a:	404e      	eors	r6, r1
 800dc8c:	9902      	ldr	r1, [sp, #8]
 800dc8e:	404e      	eors	r6, r1
 800dc90:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
 800dc94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dc96:	404e      	eors	r6, r1
 800dc98:	9903      	ldr	r1, [sp, #12]
 800dc9a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dc9e:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800dca2:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800dca6:	404e      	eors	r6, r1
 800dca8:	9906      	ldr	r1, [sp, #24]
 800dcaa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dcae:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800dcb2:	f8d1 4128 	ldr.w	r4, [r1, #296]	; 0x128
 800dcb6:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800dcba:	f8dc c528 	ldr.w	ip, [ip, #1320]	; 0x528
 800dcbe:	404c      	eors	r4, r1
 800dcc0:	9905      	ldr	r1, [sp, #20]
 800dcc2:	404c      	eors	r4, r1
 800dcc4:	9907      	ldr	r1, [sp, #28]
 800dcc6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dcca:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800dcce:	f8d1 1928 	ldr.w	r1, [r1, #2344]	; 0x928
 800dcd2:	404c      	eors	r4, r1
 800dcd4:	9908      	ldr	r1, [sp, #32]
 800dcd6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dcda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcde:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800dce2:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800dce6:	ea84 0b01 	eor.w	fp, r4, r1
 800dcea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dcec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dcee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dcf2:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 800dcf6:	ea81 010c 	eor.w	r1, r1, ip
 800dcfa:	4061      	eors	r1, r4
 800dcfc:	f8de c928 	ldr.w	ip, [lr, #2344]	; 0x928
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dd00:	9c00      	ldr	r4, [sp, #0]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dd02:	ea81 010c 	eor.w	r1, r1, ip
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dd06:	3c01      	subs	r4, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800dd08:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dd0a:	9400      	str	r4, [sp, #0]
 800dd0c:	e672      	b.n	800d9f4 <mbedtls_internal_aes_decrypt+0x30>
 800dd0e:	bf00      	nop
 800dd10:	080283c8 	.word	0x080283c8
 800dd14:	0802a5b8 	.word	0x0802a5b8

0800dd18 <mbedtls_aes_crypt_cbc.part.0>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
/*
 * AES-CBC buffer encryption/decryption
 */
int mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	b085      	sub	sp, #20
 800dd1e:	4681      	mov	r9, r0
 800dd20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dd22:	4617      	mov	r7, r2
 800dd24:	350f      	adds	r5, #15
 800dd26:	461c      	mov	r4, r3
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 800dd28:	eb03 0801 	add.w	r8, r3, r1
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 800dd2c:	f10d 0a10 	add.w	sl, sp, #16
        while( length > 0 )
 800dd30:	4544      	cmp	r4, r8
 800dd32:	f1a5 020f 	sub.w	r2, r5, #15
 800dd36:	d103      	bne.n	800dd40 <mbedtls_aes_crypt_cbc.part.0+0x28>
            length -= 16;
        }
    }

    return( 0 );
}
 800dd38:	2000      	movs	r0, #0
 800dd3a:	b005      	add	sp, #20
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memcpy( temp, input, 16 );
 800dd40:	46ec      	mov	ip, sp
 800dd42:	4623      	mov	r3, r4
 800dd44:	f104 0b10 	add.w	fp, r4, #16
 800dd48:	4666      	mov	r6, ip
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	6859      	ldr	r1, [r3, #4]
 800dd4e:	46e6      	mov	lr, ip
 800dd50:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800dd54:	3308      	adds	r3, #8
 800dd56:	455b      	cmp	r3, fp
 800dd58:	46f4      	mov	ip, lr
 800dd5a:	d1f6      	bne.n	800dd4a <mbedtls_aes_crypt_cbc.part.0+0x32>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800dd5c:	4621      	mov	r1, r4
 800dd5e:	4648      	mov	r0, r9
 800dd60:	f7ff fe30 	bl	800d9c4 <mbedtls_internal_aes_decrypt>
            for( i = 0; i < 16; i++ )
 800dd64:	f1a5 0310 	sub.w	r3, r5, #16
 800dd68:	1e79      	subs	r1, r7, #1
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800dd6a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800dd6e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800dd72:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800dd74:	ea82 0200 	eor.w	r2, r2, r0
 800dd78:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800dd7a:	d1f6      	bne.n	800dd6a <mbedtls_aes_crypt_cbc.part.0+0x52>
            memcpy( iv, temp, 16 );
 800dd7c:	463a      	mov	r2, r7
 800dd7e:	4633      	mov	r3, r6
 800dd80:	cb03      	ldmia	r3!, {r0, r1}
 800dd82:	4553      	cmp	r3, sl
 800dd84:	6010      	str	r0, [r2, #0]
 800dd86:	6051      	str	r1, [r2, #4]
 800dd88:	461e      	mov	r6, r3
 800dd8a:	f102 0208 	add.w	r2, r2, #8
 800dd8e:	d1f6      	bne.n	800dd7e <mbedtls_aes_crypt_cbc.part.0+0x66>
            input  += 16;
 800dd90:	3410      	adds	r4, #16
            length -= 16;
 800dd92:	3510      	adds	r5, #16
 800dd94:	e7cc      	b.n	800dd30 <mbedtls_aes_crypt_cbc.part.0+0x18>

0800dd96 <mbedtls_aes_crypt_ecb>:
{
 800dd96:	b410      	push	{r4}
 800dd98:	460c      	mov	r4, r1
    if( mode == MBEDTLS_AES_ENCRYPT )
 800dd9a:	2c01      	cmp	r4, #1
{
 800dd9c:	4611      	mov	r1, r2
 800dd9e:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 800dda0:	d103      	bne.n	800ddaa <mbedtls_aes_crypt_ecb+0x14>
}
 800dda2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800dda6:	f7ff bc6d 	b.w	800d684 <mbedtls_internal_aes_encrypt>
}
 800ddaa:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800ddae:	f7ff be09 	b.w	800d9c4 <mbedtls_internal_aes_decrypt>

0800ddb2 <mbedtls_aes_crypt_cbc>:
{
 800ddb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddb6:	4689      	mov	r9, r1
 800ddb8:	4611      	mov	r1, r2
    if( length % 16 )
 800ddba:	070a      	lsls	r2, r1, #28
{
 800ddbc:	461e      	mov	r6, r3
 800ddbe:	4680      	mov	r8, r0
 800ddc0:	e9dd 3708 	ldrd	r3, r7, [sp, #32]
    if( length % 16 )
 800ddc4:	d12d      	bne.n	800de22 <mbedtls_aes_crypt_cbc+0x70>
    if( mode == MBEDTLS_AES_DECRYPT )
 800ddc6:	f1b9 0f00 	cmp.w	r9, #0
 800ddca:	d125      	bne.n	800de18 <mbedtls_aes_crypt_cbc+0x66>
 800ddcc:	9708      	str	r7, [sp, #32]
 800ddce:	4632      	mov	r2, r6
}
 800ddd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd4:	f7ff bfa0 	b.w	800dd18 <mbedtls_aes_crypt_cbc.part.0>
            for( i = 0; i < 16; i++ )
 800ddd8:	2200      	movs	r2, #0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800ddda:	5c8b      	ldrb	r3, [r1, r2]
 800dddc:	5cb0      	ldrb	r0, [r6, r2]
 800ddde:	4043      	eors	r3, r0
 800dde0:	54ab      	strb	r3, [r5, r2]
            for( i = 0; i < 16; i++ )
 800dde2:	3201      	adds	r2, #1
 800dde4:	2a10      	cmp	r2, #16
 800dde6:	d1f8      	bne.n	800ddda <mbedtls_aes_crypt_cbc+0x28>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800dde8:	462b      	mov	r3, r5
 800ddea:	462a      	mov	r2, r5
 800ddec:	4649      	mov	r1, r9
 800ddee:	4640      	mov	r0, r8
 800ddf0:	f7ff ffd1 	bl	800dd96 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800ddf4:	4633      	mov	r3, r6
 800ddf6:	f105 0210 	add.w	r2, r5, #16
 800ddfa:	f855 1b04 	ldr.w	r1, [r5], #4
 800ddfe:	f843 1b04 	str.w	r1, [r3], #4
 800de02:	4295      	cmp	r5, r2
 800de04:	d1f9      	bne.n	800ddfa <mbedtls_aes_crypt_cbc+0x48>
            length -= 16;
 800de06:	3c10      	subs	r4, #16
 800de08:	ebaa 0104 	sub.w	r1, sl, r4
 800de0c:	1b3d      	subs	r5, r7, r4
        while( length > 0 )
 800de0e:	2c00      	cmp	r4, #0
 800de10:	d1e2      	bne.n	800ddd8 <mbedtls_aes_crypt_cbc+0x26>
    return( 0 );
 800de12:	4620      	mov	r0, r4
}
 800de14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de18:	460c      	mov	r4, r1
 800de1a:	eb03 0a01 	add.w	sl, r3, r1
 800de1e:	440f      	add	r7, r1
 800de20:	e7f2      	b.n	800de08 <mbedtls_aes_crypt_cbc+0x56>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800de22:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800de26:	e7f5      	b.n	800de14 <mbedtls_aes_crypt_cbc+0x62>

0800de28 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 800de28:	6803      	ldr	r3, [r0, #0]
{
 800de2a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
 800de2c:	1acd      	subs	r5, r1, r3
 800de2e:	2d00      	cmp	r5, #0
 800de30:	dd0d      	ble.n	800de4e <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
 800de32:	f993 6000 	ldrsb.w	r6, [r3]
 800de36:	781c      	ldrb	r4, [r3, #0]
 800de38:	2e00      	cmp	r6, #0
 800de3a:	db0b      	blt.n	800de54 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
 800de3c:	1c5c      	adds	r4, r3, #1
 800de3e:	6004      	str	r4, [r0, #0]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 800de44:	6803      	ldr	r3, [r0, #0]
 800de46:	1ac9      	subs	r1, r1, r3
 800de48:	6813      	ldr	r3, [r2, #0]
 800de4a:	428b      	cmp	r3, r1
 800de4c:	d932      	bls.n	800deb4 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800de4e:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
 800de52:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
 800de54:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800de58:	3c01      	subs	r4, #1
 800de5a:	2c03      	cmp	r4, #3
 800de5c:	d827      	bhi.n	800deae <mbedtls_asn1_get_len+0x86>
 800de5e:	e8df f004 	tbb	[pc, r4]
 800de62:	0902      	.short	0x0902
 800de64:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 800de66:	2d01      	cmp	r5, #1
 800de68:	d0f1      	beq.n	800de4e <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
 800de6a:	785c      	ldrb	r4, [r3, #1]
 800de6c:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 800de6e:	3302      	adds	r3, #2
            (*p) += 5;
 800de70:	6003      	str	r3, [r0, #0]
            break;
 800de72:	e7e7      	b.n	800de44 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
 800de74:	2d02      	cmp	r5, #2
 800de76:	ddea      	ble.n	800de4e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 800de78:	f8b3 4001 	ldrh.w	r4, [r3, #1]
 800de7c:	ba64      	rev16	r4, r4
 800de7e:	b2a4      	uxth	r4, r4
 800de80:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 800de82:	3303      	adds	r3, #3
 800de84:	e7f4      	b.n	800de70 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
 800de86:	2d03      	cmp	r5, #3
 800de88:	dde1      	ble.n	800de4e <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800de8a:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 800de8c:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800de8e:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800de90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800de94:	78dd      	ldrb	r5, [r3, #3]
 800de96:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 800de98:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 800de9a:	3304      	adds	r3, #4
 800de9c:	e7e8      	b.n	800de70 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
 800de9e:	2d04      	cmp	r5, #4
 800dea0:	ddd5      	ble.n	800de4e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800dea2:	f8d3 4001 	ldr.w	r4, [r3, #1]
 800dea6:	ba24      	rev	r4, r4
 800dea8:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 800deaa:	3305      	adds	r3, #5
 800deac:	e7e0      	b.n	800de70 <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
 800deae:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800deb2:	e7ce      	b.n	800de52 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
 800deb4:	2000      	movs	r0, #0
 800deb6:	e7cc      	b.n	800de52 <mbedtls_asn1_get_len+0x2a>

0800deb8 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800deb8:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 800deba:	6804      	ldr	r4, [r0, #0]
 800debc:	1b0e      	subs	r6, r1, r4
 800debe:	2e00      	cmp	r6, #0
 800dec0:	dd07      	ble.n	800ded2 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 800dec2:	7826      	ldrb	r6, [r4, #0]
 800dec4:	429e      	cmp	r6, r3
 800dec6:	d108      	bne.n	800deda <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800dec8:	3401      	adds	r4, #1
 800deca:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 800decc:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 800dece:	f7ff bfab 	b.w	800de28 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800ded2:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800ded6:	bc70      	pop	{r4, r5, r6}
 800ded8:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800deda:	f06f 0061 	mvn.w	r0, #97	; 0x61
 800dede:	e7fa      	b.n	800ded6 <mbedtls_asn1_get_tag+0x1e>

0800dee0 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 800dee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800dee2:	2301      	movs	r3, #1
{
 800dee4:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800dee6:	aa01      	add	r2, sp, #4
{
 800dee8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800deea:	f7ff ffe5 	bl	800deb8 <mbedtls_asn1_get_tag>
 800deee:	b950      	cbnz	r0, 800df06 <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 800def0:	9b01      	ldr	r3, [sp, #4]
 800def2:	2b01      	cmp	r3, #1
 800def4:	d109      	bne.n	800df0a <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800defc:	3a00      	subs	r2, #0
 800defe:	bf18      	it	ne
 800df00:	2201      	movne	r2, #1
 800df02:	602a      	str	r2, [r5, #0]
    (*p)++;
 800df04:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800df06:	b003      	add	sp, #12
 800df08:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800df0a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800df0e:	e7fa      	b.n	800df06 <mbedtls_asn1_get_bool+0x26>

0800df10 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 800df10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800df12:	2302      	movs	r3, #2
{
 800df14:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800df16:	aa01      	add	r2, sp, #4
{
 800df18:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800df1a:	f7ff ffcd 	bl	800deb8 <mbedtls_asn1_get_tag>
 800df1e:	b968      	cbnz	r0, 800df3c <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 800df20:	9b01      	ldr	r3, [sp, #4]
 800df22:	3b01      	subs	r3, #1
 800df24:	2b03      	cmp	r3, #3
 800df26:	d814      	bhi.n	800df52 <mbedtls_asn1_get_int+0x42>
 800df28:	6823      	ldr	r3, [r4, #0]
 800df2a:	f993 3000 	ldrsb.w	r3, [r3]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	db0f      	blt.n	800df52 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 800df32:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 800df34:	9b01      	ldr	r3, [sp, #4]
 800df36:	1e5a      	subs	r2, r3, #1
 800df38:	9201      	str	r2, [sp, #4]
 800df3a:	b90b      	cbnz	r3, 800df40 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 800df3c:	b003      	add	sp, #12
 800df3e:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	6829      	ldr	r1, [r5, #0]
 800df44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800df4c:	602a      	str	r2, [r5, #0]
        (*p)++;
 800df4e:	6023      	str	r3, [r4, #0]
 800df50:	e7f0      	b.n	800df34 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800df52:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800df56:	e7f1      	b.n	800df3c <mbedtls_asn1_get_int+0x2c>

0800df58 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 800df58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800df5a:	2302      	movs	r3, #2
{
 800df5c:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800df5e:	aa01      	add	r2, sp, #4
{
 800df60:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800df62:	f7ff ffa9 	bl	800deb8 <mbedtls_asn1_get_tag>
 800df66:	b940      	cbnz	r0, 800df7a <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 800df68:	9a01      	ldr	r2, [sp, #4]
 800df6a:	6821      	ldr	r1, [r4, #0]
 800df6c:	4628      	mov	r0, r5
 800df6e:	f000 fd2c 	bl	800e9ca <mbedtls_mpi_read_binary>

    *p += len;
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	9a01      	ldr	r2, [sp, #4]
 800df76:	4413      	add	r3, r2
 800df78:	6023      	str	r3, [r4, #0]

    return( ret );
}
 800df7a:	b003      	add	sp, #12
 800df7c:	bd30      	pop	{r4, r5, pc}

0800df7e <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 800df7e:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800df80:	2303      	movs	r3, #3
{
 800df82:	4605      	mov	r5, r0
 800df84:	460e      	mov	r6, r1
 800df86:	4614      	mov	r4, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800df88:	f7ff ff96 	bl	800deb8 <mbedtls_asn1_get_tag>
 800df8c:	b988      	cbnz	r0, 800dfb2 <mbedtls_asn1_get_bitstring+0x34>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 800df8e:	6812      	ldr	r2, [r2, #0]
 800df90:	b182      	cbz	r2, 800dfb4 <mbedtls_asn1_get_bitstring+0x36>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 800df92:	1e53      	subs	r3, r2, #1
 800df94:	6023      	str	r3, [r4, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 800df96:	682b      	ldr	r3, [r5, #0]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	7123      	strb	r3, [r4, #4]
    if( bs->unused_bits > 7 )
 800df9c:	2b07      	cmp	r3, #7
 800df9e:	d80c      	bhi.n	800dfba <mbedtls_asn1_get_bitstring+0x3c>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 800dfa0:	682b      	ldr	r3, [r5, #0]
 800dfa2:	1c59      	adds	r1, r3, #1

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 800dfa4:	4413      	add	r3, r2

    if( *p != end )
 800dfa6:	42b3      	cmp	r3, r6
    bs->p = *p;
 800dfa8:	60a1      	str	r1, [r4, #8]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800dfaa:	bf18      	it	ne
 800dfac:	f06f 0065 	mvnne.w	r0, #101	; 0x65
    *p += bs->len;
 800dfb0:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 800dfb2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800dfb4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 800dfb8:	e7fb      	b.n	800dfb2 <mbedtls_asn1_get_bitstring+0x34>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800dfba:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800dfbe:	e7f8      	b.n	800dfb2 <mbedtls_asn1_get_bitstring+0x34>

0800dfc0 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800dfc0:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800dfc2:	2303      	movs	r3, #3
{
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800dfc8:	f7ff ff76 	bl	800deb8 <mbedtls_asn1_get_tag>
 800dfcc:	b958      	cbnz	r0, 800dfe6 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 800dfce:	6813      	ldr	r3, [r2, #0]
 800dfd0:	1e5a      	subs	r2, r3, #1
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	602a      	str	r2, [r5, #0]
 800dfd6:	d904      	bls.n	800dfe2 <mbedtls_asn1_get_bitstring_null+0x22>
 800dfd8:	6823      	ldr	r3, [r4, #0]
 800dfda:	1c5a      	adds	r2, r3, #1
 800dfdc:	6022      	str	r2, [r4, #0]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	b10b      	cbz	r3, 800dfe6 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800dfe2:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800dfe6:	bd38      	pop	{r3, r4, r5, pc}

0800dfe8 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800dfe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	4614      	mov	r4, r2
 800dfee:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800dff0:	aa01      	add	r2, sp, #4
 800dff2:	2330      	movs	r3, #48	; 0x30
{
 800dff4:	4606      	mov	r6, r0
 800dff6:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800dff8:	f7ff ff5e 	bl	800deb8 <mbedtls_asn1_get_tag>
 800dffc:	4605      	mov	r5, r0
 800dffe:	b980      	cbnz	r0, 800e022 <mbedtls_asn1_get_sequence_of+0x3a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 800e000:	6833      	ldr	r3, [r6, #0]
 800e002:	9a01      	ldr	r2, [sp, #4]
 800e004:	4413      	add	r3, r2
 800e006:	429f      	cmp	r7, r3
 800e008:	d109      	bne.n	800e01e <mbedtls_asn1_get_sequence_of+0x36>
        *p += buf->len;

        /* Allocate and assign next pointer */
        if( *p < end )
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800e00a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e064 <mbedtls_asn1_get_sequence_of+0x7c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e00e:	1d22      	adds	r2, r4, #4
    while( *p < end )
 800e010:	6833      	ldr	r3, [r6, #0]
 800e012:	42bb      	cmp	r3, r7
 800e014:	d309      	bcc.n	800e02a <mbedtls_asn1_get_sequence_of+0x42>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 800e016:	f04f 0300 	mov.w	r3, #0
 800e01a:	60e3      	str	r3, [r4, #12]

    if( *p != end )
 800e01c:	d001      	beq.n	800e022 <mbedtls_asn1_get_sequence_of+0x3a>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e01e:	f06f 0565 	mvn.w	r5, #101	; 0x65

    return( 0 );
}
 800e022:	4628      	mov	r0, r5
 800e024:	b003      	add	sp, #12
 800e026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 800e02a:	781b      	ldrb	r3, [r3, #0]
 800e02c:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e02e:	4639      	mov	r1, r7
 800e030:	4643      	mov	r3, r8
 800e032:	4630      	mov	r0, r6
 800e034:	f7ff ff40 	bl	800deb8 <mbedtls_asn1_get_tag>
 800e038:	b978      	cbnz	r0, 800e05a <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 800e03a:	6833      	ldr	r3, [r6, #0]
        *p += buf->len;
 800e03c:	6861      	ldr	r1, [r4, #4]
        buf->p = *p;
 800e03e:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 800e040:	440b      	add	r3, r1
        if( *p < end )
 800e042:	42bb      	cmp	r3, r7
        *p += buf->len;
 800e044:	6033      	str	r3, [r6, #0]
        if( *p < end )
 800e046:	d2e3      	bcs.n	800e010 <mbedtls_asn1_get_sequence_of+0x28>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800e048:	f8d9 3000 	ldr.w	r3, [r9]
 800e04c:	2110      	movs	r1, #16
 800e04e:	2001      	movs	r0, #1
 800e050:	4798      	blx	r3
 800e052:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 800e054:	b118      	cbz	r0, 800e05e <mbedtls_asn1_get_sequence_of+0x76>
 800e056:	4604      	mov	r4, r0
 800e058:	e7d9      	b.n	800e00e <mbedtls_asn1_get_sequence_of+0x26>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e05a:	4605      	mov	r5, r0
 800e05c:	e7e1      	b.n	800e022 <mbedtls_asn1_get_sequence_of+0x3a>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 800e05e:	f06f 0569 	mvn.w	r5, #105	; 0x69
 800e062:	e7de      	b.n	800e022 <mbedtls_asn1_get_sequence_of+0x3a>
 800e064:	20000538 	.word	0x20000538

0800e068 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 800e068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e06c:	4690      	mov	r8, r2
 800e06e:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e070:	aa01      	add	r2, sp, #4
 800e072:	2330      	movs	r3, #48	; 0x30
{
 800e074:	4606      	mov	r6, r0
 800e076:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e078:	f7ff ff1e 	bl	800deb8 <mbedtls_asn1_get_tag>
 800e07c:	4604      	mov	r4, r0
 800e07e:	bb00      	cbnz	r0, 800e0c2 <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 800e080:	6837      	ldr	r7, [r6, #0]
 800e082:	eba9 0907 	sub.w	r9, r9, r7
 800e086:	f1b9 0f00 	cmp.w	r9, #0
 800e08a:	dd36      	ble.n	800e0fa <mbedtls_asn1_get_alg+0x92>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    end = *p + len;
 800e08c:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
 800e08e:	783b      	ldrb	r3, [r7, #0]
 800e090:	4642      	mov	r2, r8
    end = *p + len;
 800e092:	440f      	add	r7, r1
    alg->tag = **p;
 800e094:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800e098:	4639      	mov	r1, r7
 800e09a:	2306      	movs	r3, #6
 800e09c:	4630      	mov	r0, r6
 800e09e:	f7ff ff0b 	bl	800deb8 <mbedtls_asn1_get_tag>
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	b968      	cbnz	r0, 800e0c2 <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 800e0a6:	6832      	ldr	r2, [r6, #0]
    *p += alg->len;
 800e0a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
 800e0ac:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
 800e0b0:	1853      	adds	r3, r2, r1

    if( *p == end )
 800e0b2:	42bb      	cmp	r3, r7
    *p += alg->len;
 800e0b4:	6033      	str	r3, [r6, #0]
    if( *p == end )
 800e0b6:	d10b      	bne.n	800e0d0 <mbedtls_asn1_get_alg+0x68>
 800e0b8:	f105 030c 	add.w	r3, r5, #12
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800e0bc:	4602      	mov	r2, r0
 800e0be:	429d      	cmp	r5, r3
 800e0c0:	d103      	bne.n	800e0ca <mbedtls_asn1_get_alg+0x62>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	b003      	add	sp, #12
 800e0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800e0ca:	f805 2b01 	strb.w	r2, [r5], #1
 800e0ce:	e7f6      	b.n	800e0be <mbedtls_asn1_get_alg+0x56>
    params->tag = **p;
 800e0d0:	5c51      	ldrb	r1, [r2, r1]
 800e0d2:	462a      	mov	r2, r5
    (*p)++;
 800e0d4:	3301      	adds	r3, #1
    params->tag = **p;
 800e0d6:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800e0da:	4630      	mov	r0, r6
    (*p)++;
 800e0dc:	6033      	str	r3, [r6, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800e0de:	4639      	mov	r1, r7
 800e0e0:	f7ff fea2 	bl	800de28 <mbedtls_asn1_get_len>
 800e0e4:	b960      	cbnz	r0, 800e100 <mbedtls_asn1_get_alg+0x98>
    params->p = *p;
 800e0e6:	6833      	ldr	r3, [r6, #0]
    *p += params->len;
 800e0e8:	686a      	ldr	r2, [r5, #4]
    params->p = *p;
 800e0ea:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 800e0ec:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e0ee:	42bb      	cmp	r3, r7
    *p += params->len;
 800e0f0:	6033      	str	r3, [r6, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e0f2:	bf18      	it	ne
 800e0f4:	f06f 0465 	mvnne.w	r4, #101	; 0x65
 800e0f8:	e7e3      	b.n	800e0c2 <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e0fa:	f06f 045f 	mvn.w	r4, #95	; 0x5f
 800e0fe:	e7e0      	b.n	800e0c2 <mbedtls_asn1_get_alg+0x5a>
 800e100:	4604      	mov	r4, r0
 800e102:	e7de      	b.n	800e0c2 <mbedtls_asn1_get_alg+0x5a>

0800e104 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 800e104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 800e106:	2300      	movs	r3, #0
 800e108:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e10c:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 800e10e:	ab01      	add	r3, sp, #4
 800e110:	f7ff ffaa 	bl	800e068 <mbedtls_asn1_get_alg>
 800e114:	b940      	cbnz	r0, 800e128 <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 800e116:	9b01      	ldr	r3, [sp, #4]
 800e118:	2b05      	cmp	r3, #5
 800e11a:	d000      	beq.n	800e11e <mbedtls_asn1_get_alg_null+0x1a>
 800e11c:	b93b      	cbnz	r3, 800e12e <mbedtls_asn1_get_alg_null+0x2a>
 800e11e:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e120:	2b00      	cmp	r3, #0
 800e122:	bf18      	it	ne
 800e124:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
 800e128:	b005      	add	sp, #20
 800e12a:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e12e:	f06f 0067 	mvn.w	r0, #103	; 0x67
 800e132:	e7f9      	b.n	800e128 <mbedtls_asn1_get_alg_null+0x24>

0800e134 <mbedtls_asn1_write_len>:
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
 800e134:	6803      	ldr	r3, [r0, #0]
 800e136:	2a7f      	cmp	r2, #127	; 0x7f
 800e138:	eba3 0101 	sub.w	r1, r3, r1
 800e13c:	d807      	bhi.n	800e14e <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 800e13e:	2900      	cmp	r1, #0
 800e140:	dd69      	ble.n	800e216 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800e142:	1e59      	subs	r1, r3, #1
 800e144:	6001      	str	r1, [r0, #0]
 800e146:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 800e14a:	2001      	movs	r0, #1
 800e14c:	4770      	bx	lr
    }

    if( len <= 0xFF )
 800e14e:	2aff      	cmp	r2, #255	; 0xff
 800e150:	d80d      	bhi.n	800e16e <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 800e152:	2901      	cmp	r1, #1
 800e154:	dd5f      	ble.n	800e216 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800e156:	1e59      	subs	r1, r3, #1
 800e158:	6001      	str	r1, [r0, #0]
 800e15a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 800e15e:	6803      	ldr	r3, [r0, #0]
 800e160:	1e5a      	subs	r2, r3, #1
 800e162:	6002      	str	r2, [r0, #0]
 800e164:	2281      	movs	r2, #129	; 0x81
 800e166:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 800e16a:	2002      	movs	r0, #2
 800e16c:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 800e16e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e172:	d213      	bcs.n	800e19c <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 800e174:	2902      	cmp	r1, #2
 800e176:	dd4e      	ble.n	800e216 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e178:	1e59      	subs	r1, r3, #1
 800e17a:	6001      	str	r1, [r0, #0]
 800e17c:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e180:	6803      	ldr	r3, [r0, #0]
 800e182:	0a12      	lsrs	r2, r2, #8
 800e184:	1e59      	subs	r1, r3, #1
 800e186:	6001      	str	r1, [r0, #0]
 800e188:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 800e18c:	6803      	ldr	r3, [r0, #0]
 800e18e:	1e5a      	subs	r2, r3, #1
 800e190:	6002      	str	r2, [r0, #0]
 800e192:	2282      	movs	r2, #130	; 0x82
 800e194:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 800e198:	2003      	movs	r0, #3
 800e19a:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 800e19c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e1a0:	d219      	bcs.n	800e1d6 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 800e1a2:	2903      	cmp	r1, #3
 800e1a4:	dd37      	ble.n	800e216 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e1a6:	1e59      	subs	r1, r3, #1
 800e1a8:	6001      	str	r1, [r0, #0]
 800e1aa:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e1ae:	6803      	ldr	r3, [r0, #0]
 800e1b0:	1e59      	subs	r1, r3, #1
 800e1b2:	6001      	str	r1, [r0, #0]
 800e1b4:	0a11      	lsrs	r1, r2, #8
 800e1b6:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800e1ba:	6803      	ldr	r3, [r0, #0]
 800e1bc:	0c12      	lsrs	r2, r2, #16
 800e1be:	1e59      	subs	r1, r3, #1
 800e1c0:	6001      	str	r1, [r0, #0]
 800e1c2:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 800e1c6:	6803      	ldr	r3, [r0, #0]
 800e1c8:	1e5a      	subs	r2, r3, #1
 800e1ca:	6002      	str	r2, [r0, #0]
 800e1cc:	2283      	movs	r2, #131	; 0x83
 800e1ce:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 800e1d2:	2004      	movs	r0, #4
 800e1d4:	4770      	bx	lr
 */
#if defined(MBEDTLS_HAVE_INT64)
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800e1d6:	2904      	cmp	r1, #4
 800e1d8:	dd1d      	ble.n	800e216 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e1da:	1e59      	subs	r1, r3, #1
 800e1dc:	6001      	str	r1, [r0, #0]
 800e1de:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e1e2:	6803      	ldr	r3, [r0, #0]
 800e1e4:	1e59      	subs	r1, r3, #1
 800e1e6:	6001      	str	r1, [r0, #0]
 800e1e8:	0a11      	lsrs	r1, r2, #8
 800e1ea:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800e1ee:	6803      	ldr	r3, [r0, #0]
 800e1f0:	1e59      	subs	r1, r3, #1
 800e1f2:	6001      	str	r1, [r0, #0]
 800e1f4:	0c11      	lsrs	r1, r2, #16
 800e1f6:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 800e1fa:	6803      	ldr	r3, [r0, #0]
 800e1fc:	0e12      	lsrs	r2, r2, #24
 800e1fe:	1e59      	subs	r1, r3, #1
 800e200:	6001      	str	r1, [r0, #0]
 800e202:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 800e206:	6803      	ldr	r3, [r0, #0]
 800e208:	1e5a      	subs	r2, r3, #1
 800e20a:	6002      	str	r2, [r0, #0]
 800e20c:	2284      	movs	r2, #132	; 0x84
 800e20e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 800e212:	2005      	movs	r0, #5
 800e214:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e216:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 * On 32 bit platforms, this return statement will not be reached
 */
#if defined(MBEDTLS_HAVE_INT64)
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 800e21a:	4770      	bx	lr

0800e21c <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 800e21c:	6803      	ldr	r3, [r0, #0]
 800e21e:	1a59      	subs	r1, r3, r1
 800e220:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 800e222:	bfc1      	itttt	gt
 800e224:	f103 31ff 	addgt.w	r1, r3, #4294967295
 800e228:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 800e22a:	2001      	movgt	r0, #1
    *--(*p) = tag;
 800e22c:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e230:	bfd8      	it	le
 800e232:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 800e236:	4770      	bx	lr

0800e238 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 800e238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e23c:	4607      	mov	r7, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 800e23e:	4610      	mov	r0, r2
{
 800e240:	4688      	mov	r8, r1
 800e242:	4615      	mov	r5, r2
    len = mbedtls_mpi_size( X );
 800e244:	f000 fbbb 	bl	800e9be <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	4541      	cmp	r1, r8
    len = mbedtls_mpi_size( X );
 800e24c:	4606      	mov	r6, r0
    if( *p < start || (size_t)( *p - start ) < len )
 800e24e:	d204      	bcs.n	800e25a <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e250:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 800e254:	4620      	mov	r0, r4
 800e256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 800e25a:	eba1 0208 	sub.w	r2, r1, r8
 800e25e:	4282      	cmp	r2, r0
 800e260:	d3f6      	bcc.n	800e250 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 800e262:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e264:	4602      	mov	r2, r0
    (*p) -= len;
 800e266:	6039      	str	r1, [r7, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e268:	4628      	mov	r0, r5
 800e26a:	f000 fbe1 	bl	800ea30 <mbedtls_mpi_write_binary>
 800e26e:	4604      	mov	r4, r0
 800e270:	2800      	cmp	r0, #0
 800e272:	d1ef      	bne.n	800e254 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 800e274:	682b      	ldr	r3, [r5, #0]
 800e276:	2b01      	cmp	r3, #1
 800e278:	d10d      	bne.n	800e296 <mbedtls_asn1_write_mpi+0x5e>
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	f993 2000 	ldrsb.w	r2, [r3]
 800e280:	2a00      	cmp	r2, #0
 800e282:	da08      	bge.n	800e296 <mbedtls_asn1_write_mpi+0x5e>
        if( *p - start < 1 )
 800e284:	eba3 0208 	sub.w	r2, r3, r8
 800e288:	2a00      	cmp	r2, #0
 800e28a:	dde1      	ble.n	800e250 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 800e28c:	1e5a      	subs	r2, r3, #1
 800e28e:	603a      	str	r2, [r7, #0]
        len += 1;
 800e290:	3601      	adds	r6, #1
        *--(*p) = 0x00;
 800e292:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e296:	4632      	mov	r2, r6
 800e298:	4641      	mov	r1, r8
 800e29a:	4638      	mov	r0, r7
 800e29c:	f7ff ff4a 	bl	800e134 <mbedtls_asn1_write_len>
 800e2a0:	1e04      	subs	r4, r0, #0
 800e2a2:	dbd7      	blt.n	800e254 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	4638      	mov	r0, r7
 800e2aa:	f7ff ffb7 	bl	800e21c <mbedtls_asn1_write_tag>
 800e2ae:	1e03      	subs	r3, r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e2b0:	bfa6      	itte	ge
 800e2b2:	19a0      	addge	r0, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e2b4:	181c      	addge	r4, r3, r0
    ret = (int) len;
 800e2b6:	461c      	movlt	r4, r3
 800e2b8:	e7cc      	b.n	800e254 <mbedtls_asn1_write_mpi+0x1c>
	...

0800e2bc <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 800e2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 800e2c0:	f04f 0c00 	mov.w	ip, #0
{
 800e2c4:	9e07      	ldr	r6, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e2c6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800e3f0 <mbedtls_base64_decode+0x134>
    for( i = n = j = 0; i < slen; i++ )
 800e2ca:	4664      	mov	r4, ip
 800e2cc:	4665      	mov	r5, ip
 800e2ce:	42b5      	cmp	r5, r6
 800e2d0:	d30a      	bcc.n	800e2e8 <mbedtls_base64_decode+0x2c>
 800e2d2:	462e      	mov	r6, r5
 800e2d4:	e004      	b.n	800e2e0 <mbedtls_base64_decode+0x24>
            ++i;
 800e2d6:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 800e2d8:	42ae      	cmp	r6, r5
            ++x;
 800e2da:	f10e 0e01 	add.w	lr, lr, #1
        while( i < slen && src[i] == ' ' )
 800e2de:	d105      	bne.n	800e2ec <mbedtls_base64_decode+0x30>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 800e2e0:	bbb4      	cbnz	r4, 800e350 <mbedtls_base64_decode+0x94>
    {
        *olen = 0;
 800e2e2:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	e052      	b.n	800e38e <mbedtls_base64_decode+0xd2>
        x = 0;
 800e2e8:	f04f 0e00 	mov.w	lr, #0
        while( i < slen && src[i] == ' ' )
 800e2ec:	5d5f      	ldrb	r7, [r3, r5]
 800e2ee:	2f20      	cmp	r7, #32
 800e2f0:	d0f1      	beq.n	800e2d6 <mbedtls_base64_decode+0x1a>
        if( i == slen )
 800e2f2:	42ae      	cmp	r6, r5
 800e2f4:	d0f4      	beq.n	800e2e0 <mbedtls_base64_decode+0x24>
        if( ( slen - i ) >= 2 &&
 800e2f6:	eba6 0905 	sub.w	r9, r6, r5
 800e2fa:	f1b9 0f01 	cmp.w	r9, #1
 800e2fe:	d915      	bls.n	800e32c <mbedtls_base64_decode+0x70>
 800e300:	2f0d      	cmp	r7, #13
 800e302:	d113      	bne.n	800e32c <mbedtls_base64_decode+0x70>
            src[i] == '\r' && src[i + 1] == '\n' )
 800e304:	eb03 0905 	add.w	r9, r3, r5
 800e308:	f899 9001 	ldrb.w	r9, [r9, #1]
 800e30c:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
 800e310:	d01c      	beq.n	800e34c <mbedtls_base64_decode+0x90>
        if( x != 0 )
 800e312:	f1be 0f00 	cmp.w	lr, #0
 800e316:	d106      	bne.n	800e326 <mbedtls_base64_decode+0x6a>
        if( src[i] == '=' && ++j > 2 )
 800e318:	2f3d      	cmp	r7, #61	; 0x3d
 800e31a:	d109      	bne.n	800e330 <mbedtls_base64_decode+0x74>
 800e31c:	f10c 0c01 	add.w	ip, ip, #1
 800e320:	f1bc 0f02 	cmp.w	ip, #2
 800e324:	d907      	bls.n	800e336 <mbedtls_base64_decode+0x7a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 800e326:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 800e32a:	e030      	b.n	800e38e <mbedtls_base64_decode+0xd2>
        if( src[i] == '\n' )
 800e32c:	2f0a      	cmp	r7, #10
 800e32e:	e7ef      	b.n	800e310 <mbedtls_base64_decode+0x54>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e330:	f017 0f80 	tst.w	r7, #128	; 0x80
 800e334:	d1f7      	bne.n	800e326 <mbedtls_base64_decode+0x6a>
 800e336:	4447      	add	r7, r8
 800e338:	f897 7040 	ldrb.w	r7, [r7, #64]	; 0x40
 800e33c:	2f7f      	cmp	r7, #127	; 0x7f
 800e33e:	d0f2      	beq.n	800e326 <mbedtls_base64_decode+0x6a>
        if( base64_dec_map[src[i]] < 64 && j != 0 )
 800e340:	2f3f      	cmp	r7, #63	; 0x3f
 800e342:	d802      	bhi.n	800e34a <mbedtls_base64_decode+0x8e>
 800e344:	f1bc 0f00 	cmp.w	ip, #0
 800e348:	d1ed      	bne.n	800e326 <mbedtls_base64_decode+0x6a>
        n++;
 800e34a:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 800e34c:	3501      	adds	r5, #1
 800e34e:	e7be      	b.n	800e2ce <mbedtls_base64_decode+0x12>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 800e350:	f004 0707 	and.w	r7, r4, #7
 800e354:	2506      	movs	r5, #6
 800e356:	08e4      	lsrs	r4, r4, #3
 800e358:	436f      	muls	r7, r5
 800e35a:	436c      	muls	r4, r5
 800e35c:	3707      	adds	r7, #7
    n -= j;
 800e35e:	eba4 040c 	sub.w	r4, r4, ip
 800e362:	eb04 04d7 	add.w	r4, r4, r7, lsr #3
    if( dst == NULL || dlen < n )
 800e366:	b178      	cbz	r0, 800e388 <mbedtls_base64_decode+0xcc>
 800e368:	428c      	cmp	r4, r1
 800e36a:	d80d      	bhi.n	800e388 <mbedtls_base64_decode+0xcc>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e36c:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
 800e36e:	f8df e080 	ldr.w	lr, [pc, #128]	; 800e3f0 <mbedtls_base64_decode+0x134>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e372:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800e3f4 <mbedtls_base64_decode+0x138>
 800e376:	441e      	add	r6, r3
    if( dst == NULL || dlen < n )
 800e378:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e37a:	2503      	movs	r5, #3
 800e37c:	463c      	mov	r4, r7
 800e37e:	429e      	cmp	r6, r3
 800e380:	d107      	bne.n	800e392 <mbedtls_base64_decode+0xd6>
    *olen = p - dst;
 800e382:	1a09      	subs	r1, r1, r0
 800e384:	6011      	str	r1, [r2, #0]
 800e386:	e7ad      	b.n	800e2e4 <mbedtls_base64_decode+0x28>
        *olen = n;
 800e388:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 800e38a:	f06f 0029 	mvn.w	r0, #41	; 0x29
}
 800e38e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e392:	f813 9b01 	ldrb.w	r9, [r3], #1
 800e396:	f1a9 0c0a 	sub.w	ip, r9, #10
 800e39a:	fa5f fc8c 	uxtb.w	ip, ip
 800e39e:	f1bc 0f16 	cmp.w	ip, #22
 800e3a2:	d804      	bhi.n	800e3ae <mbedtls_base64_decode+0xf2>
 800e3a4:	fa28 fc0c 	lsr.w	ip, r8, ip
 800e3a8:	f01c 0f01 	tst.w	ip, #1
 800e3ac:	d1e7      	bne.n	800e37e <mbedtls_base64_decode+0xc2>
        j -= ( base64_dec_map[*src] == 64 );
 800e3ae:	44f1      	add	r9, lr
        if( ++n == 4 )
 800e3b0:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800e3b2:	f899 c040 	ldrb.w	ip, [r9, #64]	; 0x40
 800e3b6:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800e3ba:	bf08      	it	eq
 800e3bc:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e3be:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
 800e3c2:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e3c4:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
 800e3c8:	d1d9      	bne.n	800e37e <mbedtls_base64_decode+0xc2>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e3ca:	b17d      	cbz	r5, 800e3ec <mbedtls_base64_decode+0x130>
 800e3cc:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e3ce:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e3d0:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e3d2:	d102      	bne.n	800e3da <mbedtls_base64_decode+0x11e>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e3d4:	3101      	adds	r1, #1
            n = 0;
 800e3d6:	2400      	movs	r4, #0
 800e3d8:	e7d1      	b.n	800e37e <mbedtls_base64_decode+0xc2>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e3da:	2d02      	cmp	r5, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e3dc:	ea4f 2417 	mov.w	r4, r7, lsr #8
 800e3e0:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e3e2:	bf16      	itet	ne
 800e3e4:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e3e6:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e3e8:	3103      	addne	r1, #3
 800e3ea:	e7f4      	b.n	800e3d6 <mbedtls_base64_decode+0x11a>
            n = 0;
 800e3ec:	462c      	mov	r4, r5
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e3ee:	e7c6      	b.n	800e37e <mbedtls_base64_decode+0xc2>
 800e3f0:	0802a6b0 	.word	0x0802a6b0
 800e3f4:	00400009 	.word	0x00400009

0800e3f8 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800e3f8:	2300      	movs	r3, #0
{
 800e3fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3fc:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 800e3fe:	461c      	mov	r4, r3
 800e400:	4284      	cmp	r4, r0
 800e402:	d103      	bne.n	800e40c <mpi_sub_hlp+0x14>
 800e404:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800e408:	b9b3      	cbnz	r3, 800e438 <mpi_sub_hlp+0x40>
    {
        z = ( *d < c ); *d -= c;
        c = z; i++; d++;
    }
}
 800e40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 800e40c:	f856 cf04 	ldr.w	ip, [r6, #4]!
 800e410:	ebac 0503 	sub.w	r5, ip, r3
 800e414:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800e416:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800e41a:	42bd      	cmp	r5, r7
 800e41c:	bf2c      	ite	cs
 800e41e:	f04f 0e00 	movcs.w	lr, #0
 800e422:	f04f 0e01 	movcc.w	lr, #1
 800e426:	1bed      	subs	r5, r5, r7
 800e428:	459c      	cmp	ip, r3
 800e42a:	bf2c      	ite	cs
 800e42c:	4673      	movcs	r3, lr
 800e42e:	f10e 0301 	addcc.w	r3, lr, #1
 800e432:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800e434:	3401      	adds	r4, #1
 800e436:	e7e3      	b.n	800e400 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 800e438:	6811      	ldr	r1, [r2, #0]
 800e43a:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 800e43c:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 800e43e:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 800e442:	bf2c      	ite	cs
 800e444:	2300      	movcs	r3, #0
 800e446:	2301      	movcc	r3, #1
 800e448:	e7de      	b.n	800e408 <mpi_sub_hlp+0x10>

0800e44a <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800e44a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e44c:	b087      	sub	sp, #28
 800e44e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e452:	9301      	str	r3, [sp, #4]
    mbedtls_mpi_uint c = 0, t = 0;
 800e454:	2300      	movs	r3, #0
{
 800e456:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0, t = 0;
 800e458:	9305      	str	r3, [sp, #20]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800e45a:	4686      	mov	lr, r0
 800e45c:	f1be 0f0f 	cmp.w	lr, #15
 800e460:	f200 8085 	bhi.w	800e56e <mpi_mul_hlp+0x124>
 800e464:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800e468:	f06f 000f 	mvn.w	r0, #15
 800e46c:	fb00 cc03 	mla	ip, r0, r3, ip
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800e470:	f1bc 0f07 	cmp.w	ip, #7
 800e474:	d968      	bls.n	800e548 <mpi_mul_hlp+0xfe>
    {
        MULADDC_INIT
 800e476:	9803      	ldr	r0, [sp, #12]
 800e478:	9902      	ldr	r1, [sp, #8]
 800e47a:	9a05      	ldr	r2, [sp, #20]
 800e47c:	9b01      	ldr	r3, [sp, #4]
 800e47e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e482:	f04f 0500 	mov.w	r5, #0
 800e486:	680e      	ldr	r6, [r1, #0]
 800e488:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e48c:	18b7      	adds	r7, r6, r2
 800e48e:	f145 0200 	adc.w	r2, r5, #0
 800e492:	f841 7b04 	str.w	r7, [r1], #4
 800e496:	f850 4b04 	ldr.w	r4, [r0], #4
 800e49a:	f04f 0500 	mov.w	r5, #0
 800e49e:	680e      	ldr	r6, [r1, #0]
 800e4a0:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e4a4:	18b7      	adds	r7, r6, r2
 800e4a6:	f145 0200 	adc.w	r2, r5, #0
 800e4aa:	f841 7b04 	str.w	r7, [r1], #4
 800e4ae:	f850 4b04 	ldr.w	r4, [r0], #4
 800e4b2:	f04f 0500 	mov.w	r5, #0
 800e4b6:	680e      	ldr	r6, [r1, #0]
 800e4b8:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e4bc:	18b7      	adds	r7, r6, r2
 800e4be:	f145 0200 	adc.w	r2, r5, #0
 800e4c2:	f841 7b04 	str.w	r7, [r1], #4
 800e4c6:	f850 4b04 	ldr.w	r4, [r0], #4
 800e4ca:	f04f 0500 	mov.w	r5, #0
 800e4ce:	680e      	ldr	r6, [r1, #0]
 800e4d0:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e4d4:	18b7      	adds	r7, r6, r2
 800e4d6:	f145 0200 	adc.w	r2, r5, #0
 800e4da:	f841 7b04 	str.w	r7, [r1], #4
 800e4de:	f850 4b04 	ldr.w	r4, [r0], #4
 800e4e2:	f04f 0500 	mov.w	r5, #0
 800e4e6:	680e      	ldr	r6, [r1, #0]
 800e4e8:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e4ec:	18b7      	adds	r7, r6, r2
 800e4ee:	f145 0200 	adc.w	r2, r5, #0
 800e4f2:	f841 7b04 	str.w	r7, [r1], #4
 800e4f6:	f850 4b04 	ldr.w	r4, [r0], #4
 800e4fa:	f04f 0500 	mov.w	r5, #0
 800e4fe:	680e      	ldr	r6, [r1, #0]
 800e500:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e504:	18b7      	adds	r7, r6, r2
 800e506:	f145 0200 	adc.w	r2, r5, #0
 800e50a:	f841 7b04 	str.w	r7, [r1], #4
 800e50e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e512:	f04f 0500 	mov.w	r5, #0
 800e516:	680e      	ldr	r6, [r1, #0]
 800e518:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e51c:	18b7      	adds	r7, r6, r2
 800e51e:	f145 0200 	adc.w	r2, r5, #0
 800e522:	f841 7b04 	str.w	r7, [r1], #4
 800e526:	f850 4b04 	ldr.w	r4, [r0], #4
 800e52a:	f04f 0500 	mov.w	r5, #0
 800e52e:	680e      	ldr	r6, [r1, #0]
 800e530:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e534:	18b7      	adds	r7, r6, r2
 800e536:	f145 0200 	adc.w	r2, r5, #0
 800e53a:	f841 7b04 	str.w	r7, [r1], #4
 800e53e:	9205      	str	r2, [sp, #20]
 800e540:	9102      	str	r1, [sp, #8]
 800e542:	9003      	str	r0, [sp, #12]
    for( ; i >= 8; i -= 8 )
 800e544:	f1ac 0c08 	sub.w	ip, ip, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800e548:	f1bc 0f00 	cmp.w	ip, #0
 800e54c:	f040 80d9 	bne.w	800e702 <mpi_mul_hlp+0x2b8>
 800e550:	9a02      	ldr	r2, [sp, #8]
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 800e552:	9905      	ldr	r1, [sp, #20]
 800e554:	6813      	ldr	r3, [r2, #0]
 800e556:	440b      	add	r3, r1
 800e558:	f842 3b04 	str.w	r3, [r2], #4
 800e55c:	9905      	ldr	r1, [sp, #20]
 800e55e:	428b      	cmp	r3, r1
 800e560:	bf34      	ite	cc
 800e562:	2301      	movcc	r3, #1
 800e564:	2300      	movcs	r3, #0
 800e566:	9305      	str	r3, [sp, #20]
    }
    while( c != 0 );
 800e568:	d3f3      	bcc.n	800e552 <mpi_mul_hlp+0x108>
}
 800e56a:	b007      	add	sp, #28
 800e56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( ; i >= 16; i -= 16 )
 800e56e:	f1ae 0e10 	sub.w	lr, lr, #16
        MULADDC_INIT
 800e572:	9803      	ldr	r0, [sp, #12]
 800e574:	9902      	ldr	r1, [sp, #8]
 800e576:	9a05      	ldr	r2, [sp, #20]
 800e578:	9b01      	ldr	r3, [sp, #4]
 800e57a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e57e:	f04f 0500 	mov.w	r5, #0
 800e582:	680e      	ldr	r6, [r1, #0]
 800e584:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e588:	18b7      	adds	r7, r6, r2
 800e58a:	f145 0200 	adc.w	r2, r5, #0
 800e58e:	f841 7b04 	str.w	r7, [r1], #4
 800e592:	f850 4b04 	ldr.w	r4, [r0], #4
 800e596:	f04f 0500 	mov.w	r5, #0
 800e59a:	680e      	ldr	r6, [r1, #0]
 800e59c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e5a0:	18b7      	adds	r7, r6, r2
 800e5a2:	f145 0200 	adc.w	r2, r5, #0
 800e5a6:	f841 7b04 	str.w	r7, [r1], #4
 800e5aa:	f850 4b04 	ldr.w	r4, [r0], #4
 800e5ae:	f04f 0500 	mov.w	r5, #0
 800e5b2:	680e      	ldr	r6, [r1, #0]
 800e5b4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e5b8:	18b7      	adds	r7, r6, r2
 800e5ba:	f145 0200 	adc.w	r2, r5, #0
 800e5be:	f841 7b04 	str.w	r7, [r1], #4
 800e5c2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e5c6:	f04f 0500 	mov.w	r5, #0
 800e5ca:	680e      	ldr	r6, [r1, #0]
 800e5cc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e5d0:	18b7      	adds	r7, r6, r2
 800e5d2:	f145 0200 	adc.w	r2, r5, #0
 800e5d6:	f841 7b04 	str.w	r7, [r1], #4
 800e5da:	f850 4b04 	ldr.w	r4, [r0], #4
 800e5de:	f04f 0500 	mov.w	r5, #0
 800e5e2:	680e      	ldr	r6, [r1, #0]
 800e5e4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e5e8:	18b7      	adds	r7, r6, r2
 800e5ea:	f145 0200 	adc.w	r2, r5, #0
 800e5ee:	f841 7b04 	str.w	r7, [r1], #4
 800e5f2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e5f6:	f04f 0500 	mov.w	r5, #0
 800e5fa:	680e      	ldr	r6, [r1, #0]
 800e5fc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e600:	18b7      	adds	r7, r6, r2
 800e602:	f145 0200 	adc.w	r2, r5, #0
 800e606:	f841 7b04 	str.w	r7, [r1], #4
 800e60a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e60e:	f04f 0500 	mov.w	r5, #0
 800e612:	680e      	ldr	r6, [r1, #0]
 800e614:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e618:	18b7      	adds	r7, r6, r2
 800e61a:	f145 0200 	adc.w	r2, r5, #0
 800e61e:	f841 7b04 	str.w	r7, [r1], #4
 800e622:	f850 4b04 	ldr.w	r4, [r0], #4
 800e626:	f04f 0500 	mov.w	r5, #0
 800e62a:	680e      	ldr	r6, [r1, #0]
 800e62c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e630:	18b7      	adds	r7, r6, r2
 800e632:	f145 0200 	adc.w	r2, r5, #0
 800e636:	f841 7b04 	str.w	r7, [r1], #4
 800e63a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e63e:	f04f 0500 	mov.w	r5, #0
 800e642:	680e      	ldr	r6, [r1, #0]
 800e644:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e648:	18b7      	adds	r7, r6, r2
 800e64a:	f145 0200 	adc.w	r2, r5, #0
 800e64e:	f841 7b04 	str.w	r7, [r1], #4
 800e652:	f850 4b04 	ldr.w	r4, [r0], #4
 800e656:	f04f 0500 	mov.w	r5, #0
 800e65a:	680e      	ldr	r6, [r1, #0]
 800e65c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e660:	18b7      	adds	r7, r6, r2
 800e662:	f145 0200 	adc.w	r2, r5, #0
 800e666:	f841 7b04 	str.w	r7, [r1], #4
 800e66a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e66e:	f04f 0500 	mov.w	r5, #0
 800e672:	680e      	ldr	r6, [r1, #0]
 800e674:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e678:	18b7      	adds	r7, r6, r2
 800e67a:	f145 0200 	adc.w	r2, r5, #0
 800e67e:	f841 7b04 	str.w	r7, [r1], #4
 800e682:	f850 4b04 	ldr.w	r4, [r0], #4
 800e686:	f04f 0500 	mov.w	r5, #0
 800e68a:	680e      	ldr	r6, [r1, #0]
 800e68c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e690:	18b7      	adds	r7, r6, r2
 800e692:	f145 0200 	adc.w	r2, r5, #0
 800e696:	f841 7b04 	str.w	r7, [r1], #4
 800e69a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e69e:	f04f 0500 	mov.w	r5, #0
 800e6a2:	680e      	ldr	r6, [r1, #0]
 800e6a4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6a8:	18b7      	adds	r7, r6, r2
 800e6aa:	f145 0200 	adc.w	r2, r5, #0
 800e6ae:	f841 7b04 	str.w	r7, [r1], #4
 800e6b2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e6b6:	f04f 0500 	mov.w	r5, #0
 800e6ba:	680e      	ldr	r6, [r1, #0]
 800e6bc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6c0:	18b7      	adds	r7, r6, r2
 800e6c2:	f145 0200 	adc.w	r2, r5, #0
 800e6c6:	f841 7b04 	str.w	r7, [r1], #4
 800e6ca:	f850 4b04 	ldr.w	r4, [r0], #4
 800e6ce:	f04f 0500 	mov.w	r5, #0
 800e6d2:	680e      	ldr	r6, [r1, #0]
 800e6d4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6d8:	18b7      	adds	r7, r6, r2
 800e6da:	f145 0200 	adc.w	r2, r5, #0
 800e6de:	f841 7b04 	str.w	r7, [r1], #4
 800e6e2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e6e6:	f04f 0500 	mov.w	r5, #0
 800e6ea:	680e      	ldr	r6, [r1, #0]
 800e6ec:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6f0:	18b7      	adds	r7, r6, r2
 800e6f2:	f145 0200 	adc.w	r2, r5, #0
 800e6f6:	f841 7b04 	str.w	r7, [r1], #4
 800e6fa:	9205      	str	r2, [sp, #20]
 800e6fc:	9102      	str	r1, [sp, #8]
 800e6fe:	9003      	str	r0, [sp, #12]
    for( ; i >= 16; i -= 16 )
 800e700:	e6ac      	b.n	800e45c <mpi_mul_hlp+0x12>
    for( ; i > 0; i-- )
 800e702:	f10c 3cff 	add.w	ip, ip, #4294967295
        MULADDC_INIT
 800e706:	9803      	ldr	r0, [sp, #12]
 800e708:	9902      	ldr	r1, [sp, #8]
 800e70a:	9a05      	ldr	r2, [sp, #20]
 800e70c:	9b01      	ldr	r3, [sp, #4]
 800e70e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e712:	f04f 0500 	mov.w	r5, #0
 800e716:	680e      	ldr	r6, [r1, #0]
 800e718:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e71c:	18b7      	adds	r7, r6, r2
 800e71e:	f145 0200 	adc.w	r2, r5, #0
 800e722:	f841 7b04 	str.w	r7, [r1], #4
 800e726:	9205      	str	r2, [sp, #20]
 800e728:	9102      	str	r1, [sp, #8]
 800e72a:	9003      	str	r0, [sp, #12]
    for( ; i > 0; i-- )
 800e72c:	e70c      	b.n	800e548 <mpi_mul_hlp+0xfe>

0800e72e <mbedtls_mpi_init>:
    if( X == NULL )
 800e72e:	b120      	cbz	r0, 800e73a <mbedtls_mpi_init+0xc>
    X->n = 0;
 800e730:	2300      	movs	r3, #0
 800e732:	2201      	movs	r2, #1
 800e734:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
 800e738:	6083      	str	r3, [r0, #8]
}
 800e73a:	4770      	bx	lr

0800e73c <mbedtls_mpi_free>:
{
 800e73c:	b510      	push	{r4, lr}
    if( X == NULL )
 800e73e:	4604      	mov	r4, r0
 800e740:	b170      	cbz	r0, 800e760 <mbedtls_mpi_free+0x24>
    if( X->p != NULL )
 800e742:	6880      	ldr	r0, [r0, #8]
 800e744:	b138      	cbz	r0, 800e756 <mbedtls_mpi_free+0x1a>
        mbedtls_mpi_zeroize( X->p, X->n );
 800e746:	6862      	ldr	r2, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e748:	4603      	mov	r3, r0
 800e74a:	2100      	movs	r1, #0
 800e74c:	3a01      	subs	r2, #1
 800e74e:	d208      	bcs.n	800e762 <mbedtls_mpi_free+0x26>
        mbedtls_free( X->p );
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <mbedtls_mpi_free+0x2c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4798      	blx	r3
    X->n = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	2201      	movs	r2, #1
 800e75a:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 800e75e:	60a3      	str	r3, [r4, #8]
}
 800e760:	bd10      	pop	{r4, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e762:	f843 1b04 	str.w	r1, [r3], #4
 800e766:	e7f1      	b.n	800e74c <mbedtls_mpi_free+0x10>
 800e768:	2000053c 	.word	0x2000053c

0800e76c <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e76c:	f242 7310 	movw	r3, #10000	; 0x2710
 800e770:	4299      	cmp	r1, r3
{
 800e772:	b570      	push	{r4, r5, r6, lr}
 800e774:	4604      	mov	r4, r0
 800e776:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e778:	d902      	bls.n	800e780 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e77a:	f06f 000f 	mvn.w	r0, #15
}
 800e77e:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 800e780:	6843      	ldr	r3, [r0, #4]
 800e782:	428b      	cmp	r3, r1
 800e784:	d218      	bcs.n	800e7b8 <mbedtls_mpi_grow+0x4c>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800e786:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <mbedtls_mpi_grow+0x58>)
 800e788:	2104      	movs	r1, #4
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4628      	mov	r0, r5
 800e78e:	4798      	blx	r3
 800e790:	4606      	mov	r6, r0
 800e792:	2800      	cmp	r0, #0
 800e794:	d0f1      	beq.n	800e77a <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 800e796:	68a1      	ldr	r1, [r4, #8]
 800e798:	b161      	cbz	r1, 800e7b4 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 800e79a:	6862      	ldr	r2, [r4, #4]
 800e79c:	0092      	lsls	r2, r2, #2
 800e79e:	f013 fd03 	bl	80221a8 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800e7a2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	3a01      	subs	r2, #1
 800e7ac:	d206      	bcs.n	800e7bc <mbedtls_mpi_grow+0x50>
            mbedtls_free( X->p );
 800e7ae:	4b06      	ldr	r3, [pc, #24]	; (800e7c8 <mbedtls_mpi_grow+0x5c>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4798      	blx	r3
        X->p = p;
 800e7b4:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	e7e0      	b.n	800e77e <mbedtls_mpi_grow+0x12>
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e7bc:	f843 1b04 	str.w	r1, [r3], #4
 800e7c0:	e7f3      	b.n	800e7aa <mbedtls_mpi_grow+0x3e>
 800e7c2:	bf00      	nop
 800e7c4:	20000538 	.word	0x20000538
 800e7c8:	2000053c 	.word	0x2000053c

0800e7cc <mbedtls_mpi_shrink>:
    if( X->n <= nblimbs )
 800e7cc:	6843      	ldr	r3, [r0, #4]
 800e7ce:	428b      	cmp	r3, r1
{
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	460d      	mov	r5, r1
    if( X->n <= nblimbs )
 800e7d6:	d807      	bhi.n	800e7e8 <mbedtls_mpi_shrink+0x1c>
}
 800e7d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800e7dc:	f7ff bfc6 	b.w	800e76c <mbedtls_mpi_grow>
        if( X->p[i] != 0 )
 800e7e0:	68a2      	ldr	r2, [r4, #8]
 800e7e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e7e6:	b912      	cbnz	r2, 800e7ee <mbedtls_mpi_shrink+0x22>
    for( i = X->n - 1; i > 0; i-- )
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1f8      	bne.n	800e7e0 <mbedtls_mpi_shrink+0x14>
    i++;
 800e7ee:	3301      	adds	r3, #1
    if( i < nblimbs )
 800e7f0:	429d      	cmp	r5, r3
 800e7f2:	bf38      	it	cc
 800e7f4:	461d      	movcc	r5, r3
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800e7f6:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <mbedtls_mpi_shrink+0x68>)
 800e7f8:	2104      	movs	r1, #4
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	4798      	blx	r3
 800e800:	4606      	mov	r6, r0
 800e802:	b1a0      	cbz	r0, 800e82e <mbedtls_mpi_shrink+0x62>
    if( X->p != NULL )
 800e804:	68a1      	ldr	r1, [r4, #8]
 800e806:	b159      	cbz	r1, 800e820 <mbedtls_mpi_shrink+0x54>
        memcpy( p, X->p, i * ciL );
 800e808:	00aa      	lsls	r2, r5, #2
 800e80a:	f013 fccd 	bl	80221a8 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800e80e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e812:	2100      	movs	r1, #0
 800e814:	4603      	mov	r3, r0
 800e816:	3a01      	subs	r2, #1
 800e818:	d206      	bcs.n	800e828 <mbedtls_mpi_shrink+0x5c>
        mbedtls_free( X->p );
 800e81a:	4b07      	ldr	r3, [pc, #28]	; (800e838 <mbedtls_mpi_shrink+0x6c>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4798      	blx	r3
    X->p = p;
 800e820:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800e824:	2000      	movs	r0, #0
}
 800e826:	bd70      	pop	{r4, r5, r6, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e828:	f843 1b04 	str.w	r1, [r3], #4
 800e82c:	e7f3      	b.n	800e816 <mbedtls_mpi_shrink+0x4a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e82e:	f06f 000f 	mvn.w	r0, #15
 800e832:	e7f8      	b.n	800e826 <mbedtls_mpi_shrink+0x5a>
 800e834:	20000538 	.word	0x20000538
 800e838:	2000053c 	.word	0x2000053c

0800e83c <mbedtls_mpi_copy>:
    if( X == Y )
 800e83c:	4288      	cmp	r0, r1
{
 800e83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e840:	4606      	mov	r6, r0
 800e842:	460f      	mov	r7, r1
    if( X == Y )
 800e844:	d022      	beq.n	800e88c <mbedtls_mpi_copy+0x50>
    if( Y->p == NULL )
 800e846:	688c      	ldr	r4, [r1, #8]
 800e848:	b91c      	cbnz	r4, 800e852 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 800e84a:	f7ff ff77 	bl	800e73c <mbedtls_mpi_free>
}
 800e84e:	4620      	mov	r0, r4
 800e850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 800e852:	684a      	ldr	r2, [r1, #4]
 800e854:	3a01      	subs	r2, #1
 800e856:	b11a      	cbz	r2, 800e860 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 800e858:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d0f9      	beq.n	800e854 <mbedtls_mpi_copy+0x18>
    X->s = Y->s;
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	6033      	str	r3, [r6, #0]
    i++;
 800e864:	1c55      	adds	r5, r2, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800e866:	4629      	mov	r1, r5
 800e868:	4630      	mov	r0, r6
 800e86a:	f7ff ff7f 	bl	800e76c <mbedtls_mpi_grow>
 800e86e:	4604      	mov	r4, r0
 800e870:	2800      	cmp	r0, #0
 800e872:	d1ec      	bne.n	800e84e <mbedtls_mpi_copy+0x12>
    memset( X->p, 0, X->n * ciL );
 800e874:	6872      	ldr	r2, [r6, #4]
 800e876:	4601      	mov	r1, r0
 800e878:	0092      	lsls	r2, r2, #2
 800e87a:	68b0      	ldr	r0, [r6, #8]
 800e87c:	f013 fcbc 	bl	80221f8 <memset>
    memcpy( X->p, Y->p, i * ciL );
 800e880:	68b9      	ldr	r1, [r7, #8]
 800e882:	68b0      	ldr	r0, [r6, #8]
 800e884:	00aa      	lsls	r2, r5, #2
 800e886:	f013 fc8f 	bl	80221a8 <memcpy>
 800e88a:	e7e0      	b.n	800e84e <mbedtls_mpi_copy+0x12>
        return( 0 );
 800e88c:	2400      	movs	r4, #0
 800e88e:	e7de      	b.n	800e84e <mbedtls_mpi_copy+0x12>

0800e890 <mbedtls_mpi_safe_cond_assign>:
{
 800e890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e892:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800e894:	6849      	ldr	r1, [r1, #4]
{
 800e896:	4605      	mov	r5, r0
 800e898:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800e89a:	f7ff ff67 	bl	800e76c <mbedtls_mpi_grow>
 800e89e:	b998      	cbnz	r0, 800e8c8 <mbedtls_mpi_safe_cond_assign+0x38>
    assign = (assign | (unsigned char)-assign) >> 7;
 800e8a0:	4262      	negs	r2, r4
 800e8a2:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800e8a4:	6834      	ldr	r4, [r6, #0]
 800e8a6:	682b      	ldr	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800e8a8:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assign = (assign | (unsigned char)-assign) >> 7;
 800e8ac:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800e8b0:	f1c2 0101 	rsb	r1, r2, #1
 800e8b4:	4354      	muls	r4, r2
 800e8b6:	fb03 4301 	mla	r3, r3, r1, r4
 800e8ba:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800e8bc:	4603      	mov	r3, r0
 800e8be:	459e      	cmp	lr, r3
 800e8c0:	d103      	bne.n	800e8ca <mbedtls_mpi_safe_cond_assign+0x3a>
    for( ; i < X->n; i++ )
 800e8c2:	686e      	ldr	r6, [r5, #4]
 800e8c4:	429e      	cmp	r6, r3
 800e8c6:	d80e      	bhi.n	800e8e6 <mbedtls_mpi_safe_cond_assign+0x56>
}
 800e8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800e8ca:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800e8ce:	68b4      	ldr	r4, [r6, #8]
 800e8d0:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800e8d4:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e8d8:	434f      	muls	r7, r1
 800e8da:	fb04 7402 	mla	r4, r4, r2, r7
 800e8de:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	e7eb      	b.n	800e8be <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 800e8e6:	68ac      	ldr	r4, [r5, #8]
 800e8e8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800e8ec:	434a      	muls	r2, r1
 800e8ee:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( ; i < X->n; i++ )
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	e7e6      	b.n	800e8c4 <mbedtls_mpi_safe_cond_assign+0x34>

0800e8f6 <mbedtls_mpi_lset>:
{
 800e8f6:	b570      	push	{r4, r5, r6, lr}
 800e8f8:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800e8fa:	2101      	movs	r1, #1
{
 800e8fc:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800e8fe:	f7ff ff35 	bl	800e76c <mbedtls_mpi_grow>
 800e902:	4605      	mov	r5, r0
 800e904:	b988      	cbnz	r0, 800e92a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 800e906:	6862      	ldr	r2, [r4, #4]
 800e908:	4601      	mov	r1, r0
 800e90a:	0092      	lsls	r2, r2, #2
 800e90c:	68a0      	ldr	r0, [r4, #8]
 800e90e:	f013 fc73 	bl	80221f8 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 800e912:	68a3      	ldr	r3, [r4, #8]
 800e914:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 800e918:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 800e91a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800e91e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800e920:	bfb4      	ite	lt
 800e922:	f04f 33ff 	movlt.w	r3, #4294967295
 800e926:	2301      	movge	r3, #1
 800e928:	6023      	str	r3, [r4, #0]
}
 800e92a:	4628      	mov	r0, r5
 800e92c:	bd70      	pop	{r4, r5, r6, pc}

0800e92e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 800e92e:	6843      	ldr	r3, [r0, #4]
 800e930:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800e934:	bf3f      	itttt	cc
 800e936:	094a      	lsrcc	r2, r1, #5
 800e938:	6883      	ldrcc	r3, [r0, #8]
 800e93a:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 800e93e:	f001 011f 	andcc.w	r1, r1, #31
 800e942:	bf3a      	itte	cc
 800e944:	fa20 f101 	lsrcc.w	r1, r0, r1
 800e948:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
 800e94c:	2000      	movcs	r0, #0
}
 800e94e:	4770      	bx	lr

0800e950 <mbedtls_mpi_lsb>:
{
 800e950:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
 800e952:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 800e954:	6845      	ldr	r5, [r0, #4]
 800e956:	460a      	mov	r2, r1
 800e958:	4295      	cmp	r5, r2
 800e95a:	d102      	bne.n	800e962 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 800e95c:	2400      	movs	r4, #0
}
 800e95e:	4620      	mov	r0, r4
 800e960:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800e962:	6883      	ldr	r3, [r0, #8]
 800e964:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 800e968:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800e96a:	fa26 f703 	lsr.w	r7, r6, r3
 800e96e:	07ff      	lsls	r7, r7, #31
 800e970:	eb01 0403 	add.w	r4, r1, r3
 800e974:	d4f3      	bmi.n	800e95e <mbedtls_mpi_lsb+0xe>
        for( j = 0; j < biL; j++, count++ )
 800e976:	3301      	adds	r3, #1
 800e978:	2b20      	cmp	r3, #32
 800e97a:	eb01 0403 	add.w	r4, r1, r3
 800e97e:	d1f4      	bne.n	800e96a <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 800e980:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 800e982:	4621      	mov	r1, r4
 800e984:	e7e8      	b.n	800e958 <mbedtls_mpi_lsb+0x8>

0800e986 <mbedtls_mpi_bitlen>:
{
 800e986:	4602      	mov	r2, r0
    if( X->n == 0 )
 800e988:	6840      	ldr	r0, [r0, #4]
 800e98a:	b188      	cbz	r0, 800e9b0 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
 800e98c:	6892      	ldr	r2, [r2, #8]
 800e98e:	1e43      	subs	r3, r0, #1
 800e990:	b97b      	cbnz	r3, 800e9b2 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
 800e992:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
 800e996:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800e998:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
 800e99c:	4211      	tst	r1, r2
 800e99e:	d104      	bne.n	800e9aa <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 800e9a0:	3001      	adds	r0, #1
 800e9a2:	2820      	cmp	r0, #32
        mask >>= 1;
 800e9a4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
 800e9a8:	d1f8      	bne.n	800e99c <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
 800e9b0:	4770      	bx	lr
        if( X->p[i] != 0 )
 800e9b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e9b6:	2900      	cmp	r1, #0
 800e9b8:	d1eb      	bne.n	800e992 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	e7e8      	b.n	800e990 <mbedtls_mpi_bitlen+0xa>

0800e9be <mbedtls_mpi_size>:
{
 800e9be:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800e9c0:	f7ff ffe1 	bl	800e986 <mbedtls_mpi_bitlen>
 800e9c4:	3007      	adds	r0, #7
}
 800e9c6:	08c0      	lsrs	r0, r0, #3
 800e9c8:	bd08      	pop	{r3, pc}

0800e9ca <mbedtls_mpi_read_binary>:
{
 800e9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9cc:	4607      	mov	r7, r0
 800e9ce:	460c      	mov	r4, r1
 800e9d0:	4616      	mov	r6, r2
    for( n = 0; n < buflen; n++ )
 800e9d2:	2500      	movs	r5, #0
 800e9d4:	42b5      	cmp	r5, r6
 800e9d6:	d001      	beq.n	800e9dc <mbedtls_mpi_read_binary+0x12>
        if( buf[n] != 0 )
 800e9d8:	5d63      	ldrb	r3, [r4, r5]
 800e9da:	b1ab      	cbz	r3, 800ea08 <mbedtls_mpi_read_binary+0x3e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, CHARS_TO_LIMBS( buflen - n ) ) );
 800e9dc:	1b71      	subs	r1, r6, r5
 800e9de:	f011 0303 	ands.w	r3, r1, #3
 800e9e2:	bf18      	it	ne
 800e9e4:	2301      	movne	r3, #1
 800e9e6:	eb03 0191 	add.w	r1, r3, r1, lsr #2
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	f7ff febe 	bl	800e76c <mbedtls_mpi_grow>
 800e9f0:	b948      	cbnz	r0, 800ea06 <mbedtls_mpi_read_binary+0x3c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800e9f2:	4601      	mov	r1, r0
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	f7ff ff7e 	bl	800e8f6 <mbedtls_mpi_lset>
 800e9fa:	b920      	cbnz	r0, 800ea06 <mbedtls_mpi_read_binary+0x3c>
 800e9fc:	4434      	add	r4, r6
    for( i = buflen, j = 0; i > n; i--, j++ )
 800e9fe:	4603      	mov	r3, r0
 800ea00:	1af2      	subs	r2, r6, r3
 800ea02:	42aa      	cmp	r2, r5
 800ea04:	d802      	bhi.n	800ea0c <mbedtls_mpi_read_binary+0x42>
}
 800ea06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( n = 0; n < buflen; n++ )
 800ea08:	3501      	adds	r5, #1
 800ea0a:	e7e3      	b.n	800e9d4 <mbedtls_mpi_read_binary+0xa>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 800ea0c:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
 800ea10:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800ea14:	f023 0c03 	bic.w	ip, r3, #3
 800ea18:	00d9      	lsls	r1, r3, #3
 800ea1a:	f001 0118 	and.w	r1, r1, #24
 800ea1e:	fa02 f101 	lsl.w	r1, r2, r1
 800ea22:	f85e 200c 	ldr.w	r2, [lr, ip]
 800ea26:	430a      	orrs	r2, r1
 800ea28:	f84e 200c 	str.w	r2, [lr, ip]
    for( i = buflen, j = 0; i > n; i--, j++ )
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	e7e7      	b.n	800ea00 <mbedtls_mpi_read_binary+0x36>

0800ea30 <mbedtls_mpi_write_binary>:
{
 800ea30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea32:	4615      	mov	r5, r2
 800ea34:	4607      	mov	r7, r0
 800ea36:	460c      	mov	r4, r1
    n = mbedtls_mpi_size( X );
 800ea38:	f7ff ffc1 	bl	800e9be <mbedtls_mpi_size>
    if( buflen < n )
 800ea3c:	42a8      	cmp	r0, r5
    n = mbedtls_mpi_size( X );
 800ea3e:	4606      	mov	r6, r0
    if( buflen < n )
 800ea40:	d816      	bhi.n	800ea70 <mbedtls_mpi_write_binary+0x40>
    memset( buf, 0, buflen );
 800ea42:	462a      	mov	r2, r5
 800ea44:	2100      	movs	r1, #0
 800ea46:	4620      	mov	r0, r4
 800ea48:	f013 fbd6 	bl	80221f8 <memset>
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800ea4c:	1962      	adds	r2, r4, r5
 800ea4e:	2300      	movs	r3, #0
 800ea50:	42b3      	cmp	r3, r6
 800ea52:	d101      	bne.n	800ea58 <mbedtls_mpi_write_binary+0x28>
    return( 0 );
 800ea54:	2000      	movs	r0, #0
}
 800ea56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 800ea58:	68bd      	ldr	r5, [r7, #8]
 800ea5a:	f023 0403 	bic.w	r4, r3, #3
 800ea5e:	00d9      	lsls	r1, r3, #3
 800ea60:	f001 0018 	and.w	r0, r1, #24
 800ea64:	5929      	ldr	r1, [r5, r4]
 800ea66:	40c1      	lsrs	r1, r0
 800ea68:	f802 1d01 	strb.w	r1, [r2, #-1]!
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800ea6c:	3301      	adds	r3, #1
 800ea6e:	e7ef      	b.n	800ea50 <mbedtls_mpi_write_binary+0x20>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 800ea70:	f06f 0007 	mvn.w	r0, #7
 800ea74:	e7ef      	b.n	800ea56 <mbedtls_mpi_write_binary+0x26>

0800ea76 <mbedtls_mpi_shift_l>:
{
 800ea76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea78:	4604      	mov	r4, r0
 800ea7a:	460e      	mov	r6, r1
    v0 = count / (biL    );
 800ea7c:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
 800ea7e:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 800ea82:	f7ff ff80 	bl	800e986 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800ea86:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800ea88:	4430      	add	r0, r6
    if( X->n * biL < i )
 800ea8a:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 800ea8e:	d804      	bhi.n	800ea9a <mbedtls_mpi_shift_l+0x24>
    if( v0 > 0 )
 800ea90:	2e1f      	cmp	r6, #31
 800ea92:	d80e      	bhi.n	800eab2 <mbedtls_mpi_shift_l+0x3c>
    if( t1 > 0 )
 800ea94:	bb5f      	cbnz	r7, 800eaee <mbedtls_mpi_shift_l+0x78>
    ret = 0;
 800ea96:	2000      	movs	r0, #0
 800ea98:	e00a      	b.n	800eab0 <mbedtls_mpi_shift_l+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800ea9a:	f010 011f 	ands.w	r1, r0, #31
 800ea9e:	bf18      	it	ne
 800eaa0:	2101      	movne	r1, #1
 800eaa2:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f7ff fe60 	bl	800e76c <mbedtls_mpi_grow>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d0ef      	beq.n	800ea90 <mbedtls_mpi_shift_l+0x1a>
}
 800eab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 800eab2:	6863      	ldr	r3, [r4, #4]
 800eab4:	f06f 0003 	mvn.w	r0, #3
 800eab8:	009a      	lsls	r2, r3, #2
 800eaba:	4368      	muls	r0, r5
 800eabc:	4619      	mov	r1, r3
 800eabe:	42a9      	cmp	r1, r5
 800eac0:	f1a2 0204 	sub.w	r2, r2, #4
 800eac4:	d80a      	bhi.n	800eadc <mbedtls_mpi_shift_l+0x66>
 800eac6:	42ab      	cmp	r3, r5
 800eac8:	bf28      	it	cs
 800eaca:	462b      	movcs	r3, r5
 800eacc:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 800eace:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
 800ead0:	3b04      	subs	r3, #4
 800ead2:	1d19      	adds	r1, r3, #4
 800ead4:	d0de      	beq.n	800ea94 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
 800ead6:	68a1      	ldr	r1, [r4, #8]
 800ead8:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
 800eada:	e7f9      	b.n	800ead0 <mbedtls_mpi_shift_l+0x5a>
            X->p[i - 1] = X->p[i - v0 - 1];
 800eadc:	68a6      	ldr	r6, [r4, #8]
 800eade:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
 800eae2:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 800eae4:	f85c c000 	ldr.w	ip, [ip, r0]
 800eae8:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
 800eaec:	e7e7      	b.n	800eabe <mbedtls_mpi_shift_l+0x48>
        for( i = v0; i < X->n; i++ )
 800eaee:	6866      	ldr	r6, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;
 800eaf0:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
 800eaf2:	f1c7 0c20 	rsb	ip, r7, #32
        for( i = v0; i < X->n; i++ )
 800eaf6:	42ae      	cmp	r6, r5
 800eaf8:	d9cd      	bls.n	800ea96 <mbedtls_mpi_shift_l+0x20>
            r1 = X->p[i] >> (biL - t1);
 800eafa:	68a0      	ldr	r0, [r4, #8]
 800eafc:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
 800eb00:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
 800eb04:	4313      	orrs	r3, r2
 800eb06:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
 800eb0a:	fa21 f20c 	lsr.w	r2, r1, ip
        for( i = v0; i < X->n; i++ )
 800eb0e:	3501      	adds	r5, #1
 800eb10:	e7f1      	b.n	800eaf6 <mbedtls_mpi_shift_l+0x80>

0800eb12 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800eb12:	6843      	ldr	r3, [r0, #4]
{
 800eb14:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 800eb16:	094e      	lsrs	r6, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800eb18:	42b3      	cmp	r3, r6
    v1 = count & (biL - 1);
 800eb1a:	f001 041f 	and.w	r4, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800eb1e:	d301      	bcc.n	800eb24 <mbedtls_mpi_shift_r+0x12>
 800eb20:	d104      	bne.n	800eb2c <mbedtls_mpi_shift_r+0x1a>
 800eb22:	b35c      	cbz	r4, 800eb7c <mbedtls_mpi_shift_r+0x6a>
}
 800eb24:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 800eb26:	2100      	movs	r1, #0
 800eb28:	f7ff bee5 	b.w	800e8f6 <mbedtls_mpi_lset>
    if( v0 > 0 )
 800eb2c:	291f      	cmp	r1, #31
 800eb2e:	d827      	bhi.n	800eb80 <mbedtls_mpi_shift_r+0x6e>
    if( v1 > 0 )
 800eb30:	bb04      	cbnz	r4, 800eb74 <mbedtls_mpi_shift_r+0x62>
}
 800eb32:	2000      	movs	r0, #0
 800eb34:	bcf0      	pop	{r4, r5, r6, r7}
 800eb36:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 800eb38:	6882      	ldr	r2, [r0, #8]
 800eb3a:	5957      	ldr	r7, [r2, r5]
 800eb3c:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 800eb40:	3504      	adds	r5, #4
 800eb42:	3101      	adds	r1, #1
 800eb44:	1b9a      	subs	r2, r3, r6
 800eb46:	428a      	cmp	r2, r1
 800eb48:	d8f6      	bhi.n	800eb38 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
 800eb4a:	2100      	movs	r1, #0
        for( ; i < X->n; i++ )
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d9ef      	bls.n	800eb30 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
 800eb50:	6885      	ldr	r5, [r0, #8]
 800eb52:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
        for( ; i < X->n; i++ )
 800eb56:	3201      	adds	r2, #1
 800eb58:	e7f8      	b.n	800eb4c <mbedtls_mpi_shift_r+0x3a>
            r1 = X->p[i - 1] << (biL - v1);
 800eb5a:	6886      	ldr	r6, [r0, #8]
 800eb5c:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
 800eb60:	fa25 f204 	lsr.w	r2, r5, r4
            X->p[i - 1] |= r0;
 800eb64:	430a      	orrs	r2, r1
 800eb66:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
            r0 = r1;
 800eb6a:	fa05 f107 	lsl.w	r1, r5, r7
        for( i = X->n; i > 0; i-- )
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	d2f3      	bcs.n	800eb5a <mbedtls_mpi_shift_r+0x48>
 800eb72:	e7de      	b.n	800eb32 <mbedtls_mpi_shift_r+0x20>
    mbedtls_mpi_uint r0 = 0, r1;
 800eb74:	2100      	movs	r1, #0
            r1 = X->p[i - 1] << (biL - v1);
 800eb76:	f1c4 0720 	rsb	r7, r4, #32
 800eb7a:	e7f8      	b.n	800eb6e <mbedtls_mpi_shift_r+0x5c>
    if( v0 > 0 )
 800eb7c:	291f      	cmp	r1, #31
 800eb7e:	d9d8      	bls.n	800eb32 <mbedtls_mpi_shift_r+0x20>
 800eb80:	00b5      	lsls	r5, r6, #2
{
 800eb82:	2100      	movs	r1, #0
 800eb84:	e7de      	b.n	800eb44 <mbedtls_mpi_shift_r+0x32>

0800eb86 <mbedtls_mpi_cmp_abs>:
{
 800eb86:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
 800eb88:	6843      	ldr	r3, [r0, #4]
 800eb8a:	b92b      	cbnz	r3, 800eb98 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
 800eb8c:	684a      	ldr	r2, [r1, #4]
 800eb8e:	b962      	cbnz	r2, 800ebaa <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
 800eb90:	1e18      	subs	r0, r3, #0
 800eb92:	bf18      	it	ne
 800eb94:	2001      	movne	r0, #1
 800eb96:	e028      	b.n	800ebea <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
 800eb98:	6882      	ldr	r2, [r0, #8]
 800eb9a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb9e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800eba2:	2a00      	cmp	r2, #0
 800eba4:	d1f2      	bne.n	800eb8c <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
 800eba6:	3b01      	subs	r3, #1
 800eba8:	e7ef      	b.n	800eb8a <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
 800ebaa:	688c      	ldr	r4, [r1, #8]
 800ebac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ebb0:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ebb4:	b985      	cbnz	r5, 800ebd8 <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
 800ebb6:	3a01      	subs	r2, #1
 800ebb8:	e7e9      	b.n	800eb8e <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800ebba:	6882      	ldr	r2, [r0, #8]
 800ebbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ebc0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ebc4:	4291      	cmp	r1, r2
 800ebc6:	d805      	bhi.n	800ebd4 <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800ebc8:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebcc:	d20a      	bcs.n	800ebe4 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
 800ebce:	f04f 30ff 	mov.w	r0, #4294967295
 800ebd2:	e00a      	b.n	800ebea <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
 800ebd4:	2001      	movs	r0, #1
 800ebd6:	e008      	b.n	800ebea <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
 800ebd8:	b10b      	cbz	r3, 800ebde <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d8fa      	bhi.n	800ebd4 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d3f5      	bcc.n	800ebce <mbedtls_mpi_cmp_abs+0x48>
 800ebe2:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
 800ebe4:	1c5a      	adds	r2, r3, #1
 800ebe6:	d1e8      	bne.n	800ebba <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
 800ebe8:	2000      	movs	r0, #0
}
 800ebea:	bd30      	pop	{r4, r5, pc}

0800ebec <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800ebec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf0:	4615      	mov	r5, r2
 800ebf2:	9301      	str	r3, [sp, #4]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 800ebf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebf6:	685a      	ldr	r2, [r3, #4]
 800ebf8:	686b      	ldr	r3, [r5, #4]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	429a      	cmp	r2, r3
{
 800ebfe:	4606      	mov	r6, r0
 800ec00:	468a      	mov	sl, r1
    if( T->n < N->n + 1 || T->p == NULL )
 800ec02:	d357      	bcc.n	800ecb4 <mpi_montmul+0xc8>
 800ec04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec06:	6898      	ldr	r0, [r3, #8]
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	d053      	beq.n	800ecb4 <mpi_montmul+0xc8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 800ec0c:	0092      	lsls	r2, r2, #2
 800ec0e:	2100      	movs	r1, #0
 800ec10:	f013 faf2 	bl	80221f8 <memset>

    d = T->p;
 800ec14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    n = N->n;
 800ec16:	f8d5 9004 	ldr.w	r9, [r5, #4]
    d = T->p;
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800ec1e:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
 800ec22:	f8dd 8000 	ldr.w	r8, [sp]
    m = ( B->n < n ) ? B->n : n;
 800ec26:	454b      	cmp	r3, r9
 800ec28:	bf28      	it	cs
 800ec2a:	464b      	movcs	r3, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 800ec2c:	f109 0701 	add.w	r7, r9, #1
    m = ( B->n < n ) ? B->n : n;
 800ec30:	ee07 3a90 	vmov	s15, r3
        *d++ = u0; d[n + 1] = 0;
 800ec34:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 800ec36:	2400      	movs	r4, #0
 800ec38:	454c      	cmp	r4, r9
 800ec3a:	68b0      	ldr	r0, [r6, #8]
 800ec3c:	d119      	bne.n	800ec72 <mpi_montmul+0x86>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 800ec3e:	9b00      	ldr	r3, [sp, #0]
 800ec40:	1f39      	subs	r1, r7, #4
 800ec42:	440b      	add	r3, r1
 800ec44:	463a      	mov	r2, r7
 800ec46:	4619      	mov	r1, r3
 800ec48:	f013 faae 	bl	80221a8 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	4630      	mov	r0, r6
 800ec50:	f7ff ff99 	bl	800eb86 <mbedtls_mpi_cmp_abs>
 800ec54:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 800ec56:	bfb3      	iteet	lt
 800ec58:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
        mpi_sub_hlp( n, N->p, A->p );
 800ec5a:	68b2      	ldrge	r2, [r6, #8]
 800ec5c:	68a9      	ldrge	r1, [r5, #8]
        mpi_sub_hlp( n, A->p, T->p );
 800ec5e:	689a      	ldrlt	r2, [r3, #8]
 800ec60:	bfb8      	it	lt
 800ec62:	68b1      	ldrlt	r1, [r6, #8]
 800ec64:	4620      	mov	r0, r4
 800ec66:	f7ff fbc7 	bl	800e3f8 <mpi_sub_hlp>

    return( 0 );
 800ec6a:	2000      	movs	r0, #0
}
 800ec6c:	b003      	add	sp, #12
 800ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ec72:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
 800ec76:	f850 b024 	ldr.w	fp, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800ec7a:	680b      	ldr	r3, [r1, #0]
 800ec7c:	f8d8 0000 	ldr.w	r0, [r8]
 800ec80:	9a01      	ldr	r2, [sp, #4]
 800ec82:	fb03 030b 	mla	r3, r3, fp, r0
 800ec86:	4353      	muls	r3, r2
 800ec88:	ee07 3a10 	vmov	s14, r3
        mpi_mul_hlp( m, B->p, d, u0 );
 800ec8c:	ee17 0a90 	vmov	r0, s15
 800ec90:	4642      	mov	r2, r8
 800ec92:	465b      	mov	r3, fp
 800ec94:	f7ff fbd9 	bl	800e44a <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 800ec98:	4642      	mov	r2, r8
 800ec9a:	ee17 3a10 	vmov	r3, s14
 800ec9e:	68a9      	ldr	r1, [r5, #8]
 800eca0:	4648      	mov	r0, r9
 800eca2:	f7ff fbd2 	bl	800e44a <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 800eca6:	f848 bb04 	str.w	fp, [r8], #4
 800ecaa:	2300      	movs	r3, #0
 800ecac:	f848 3007 	str.w	r3, [r8, r7]
    for( i = 0; i < n; i++ )
 800ecb0:	3401      	adds	r4, #1
 800ecb2:	e7c1      	b.n	800ec38 <mpi_montmul+0x4c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800ecb4:	f06f 0003 	mvn.w	r0, #3
 800ecb8:	e7d8      	b.n	800ec6c <mpi_montmul+0x80>

0800ecba <mbedtls_mpi_cmp_mpi>:
{
 800ecba:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
 800ecbc:	6843      	ldr	r3, [r0, #4]
{
 800ecbe:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
 800ecc0:	b923      	cbnz	r3, 800eccc <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 800ecc2:	6848      	ldr	r0, [r1, #4]
 800ecc4:	b958      	cbnz	r0, 800ecde <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d138      	bne.n	800ed3c <mbedtls_mpi_cmp_mpi+0x82>
 800ecca:	e031      	b.n	800ed30 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
 800eccc:	6890      	ldr	r0, [r2, #8]
 800ecce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ecd2:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d1f3      	bne.n	800ecc2 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	e7f0      	b.n	800ecc0 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 800ecde:	688c      	ldr	r4, [r1, #8]
 800ece0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ece4:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ece8:	bb25      	cbnz	r5, 800ed34 <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
 800ecea:	3801      	subs	r0, #1
 800ecec:	e7ea      	b.n	800ecc4 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
 800ecee:	4283      	cmp	r3, r0
 800ecf0:	6809      	ldr	r1, [r1, #0]
 800ecf2:	d201      	bcs.n	800ecf8 <mbedtls_mpi_cmp_mpi+0x3e>
 800ecf4:	4248      	negs	r0, r1
 800ecf6:	e022      	b.n	800ed3e <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800ecf8:	6810      	ldr	r0, [r2, #0]
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	dd03      	ble.n	800ed06 <mbedtls_mpi_cmp_mpi+0x4c>
 800ecfe:	2900      	cmp	r1, #0
 800ed00:	da13      	bge.n	800ed2a <mbedtls_mpi_cmp_mpi+0x70>
 800ed02:	2001      	movs	r0, #1
 800ed04:	e01b      	b.n	800ed3e <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800ed06:	2900      	cmp	r1, #0
 800ed08:	dd0f      	ble.n	800ed2a <mbedtls_mpi_cmp_mpi+0x70>
 800ed0a:	b170      	cbz	r0, 800ed2a <mbedtls_mpi_cmp_mpi+0x70>
 800ed0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed10:	e015      	b.n	800ed3e <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800ed12:	6891      	ldr	r1, [r2, #8]
 800ed14:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800ed18:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ed1c:	428d      	cmp	r5, r1
 800ed1e:	d80e      	bhi.n	800ed3e <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800ed20:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed24:	d202      	bcs.n	800ed2c <mbedtls_mpi_cmp_mpi+0x72>
 800ed26:	4240      	negs	r0, r0
 800ed28:	e009      	b.n	800ed3e <mbedtls_mpi_cmp_mpi+0x84>
 800ed2a:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
 800ed2c:	1c59      	adds	r1, r3, #1
 800ed2e:	d1f0      	bne.n	800ed12 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
 800ed30:	2000      	movs	r0, #0
 800ed32:	e004      	b.n	800ed3e <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d0da      	beq.n	800ecee <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
 800ed38:	4283      	cmp	r3, r0
 800ed3a:	d9d8      	bls.n	800ecee <mbedtls_mpi_cmp_mpi+0x34>
 800ed3c:	6810      	ldr	r0, [r2, #0]
}
 800ed3e:	bd30      	pop	{r4, r5, pc}

0800ed40 <mbedtls_mpi_cmp_int>:
{
 800ed40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 800ed42:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800ed46:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 800ed4a:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 800ed4c:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 800ed4e:	bfb4      	ite	lt
 800ed50:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed54:	2301      	movge	r3, #1
 800ed56:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800ed58:	a901      	add	r1, sp, #4
    Y.n = 1;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	9302      	str	r3, [sp, #8]
    Y.p = p;
 800ed5e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800ed62:	f7ff ffaa 	bl	800ecba <mbedtls_mpi_cmp_mpi>
}
 800ed66:	b005      	add	sp, #20
 800ed68:	f85d fb04 	ldr.w	pc, [sp], #4

0800ed6c <mbedtls_mpi_add_abs>:
    if( X == B )
 800ed6c:	4290      	cmp	r0, r2
{
 800ed6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed72:	4607      	mov	r7, r0
 800ed74:	460d      	mov	r5, r1
 800ed76:	4616      	mov	r6, r2
    if( X == B )
 800ed78:	d002      	beq.n	800ed80 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 800ed7a:	4288      	cmp	r0, r1
 800ed7c:	d129      	bne.n	800edd2 <mbedtls_mpi_add_abs+0x66>
{
 800ed7e:	4635      	mov	r5, r6
    X->s = 1;
 800ed80:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 800ed82:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
 800ed84:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
 800ed86:	bb66      	cbnz	r6, 800ede2 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	f7ff fcee 	bl	800e76c <mbedtls_mpi_grow>
 800ed90:	4604      	mov	r4, r0
 800ed92:	bb18      	cbnz	r0, 800eddc <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	68a9      	ldr	r1, [r5, #8]
 800ed98:	4605      	mov	r5, r0
    for( i = 0; i < j; i++, o++, p++ )
 800ed9a:	4286      	cmp	r6, r0
 800ed9c:	d12a      	bne.n	800edf4 <mbedtls_mpi_add_abs+0x88>
 800ed9e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
 800eda2:	b1dd      	cbz	r5, 800eddc <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	42b2      	cmp	r2, r6
 800eda8:	f106 0801 	add.w	r8, r6, #1
 800edac:	d808      	bhi.n	800edc0 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800edae:	4641      	mov	r1, r8
 800edb0:	4638      	mov	r0, r7
 800edb2:	f7ff fcdb 	bl	800e76c <mbedtls_mpi_grow>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	d12f      	bne.n	800ee1a <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	1955      	adds	r5, r2, r5
 800edc4:	f843 5b04 	str.w	r5, [r3], #4
 800edc8:	4646      	mov	r6, r8
 800edca:	bf2c      	ite	cs
 800edcc:	2501      	movcs	r5, #1
 800edce:	2500      	movcc	r5, #0
 800edd0:	e7e7      	b.n	800eda2 <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800edd2:	f7ff fd33 	bl	800e83c <mbedtls_mpi_copy>
 800edd6:	4604      	mov	r4, r0
 800edd8:	2800      	cmp	r0, #0
 800edda:	d0d0      	beq.n	800ed7e <mbedtls_mpi_add_abs+0x12>
}
 800eddc:	4620      	mov	r0, r4
 800edde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800ede2:	68ab      	ldr	r3, [r5, #8]
 800ede4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ede8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1cb      	bne.n	800ed88 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
 800edf0:	3e01      	subs	r6, #1
 800edf2:	e7c8      	b.n	800ed86 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
 800edf4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800edf8:	eb12 0c05 	adds.w	ip, r2, r5
 800edfc:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 800ee00:	bf2c      	ite	cs
 800ee02:	2501      	movcs	r5, #1
 800ee04:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
 800ee06:	eb1c 0202 	adds.w	r2, ip, r2
 800ee0a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800ee0e:	bf2c      	ite	cs
 800ee10:	2201      	movcs	r2, #1
 800ee12:	2200      	movcc	r2, #0
 800ee14:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
 800ee16:	3001      	adds	r0, #1
 800ee18:	e7bf      	b.n	800ed9a <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800ee1a:	4604      	mov	r4, r0
    return( ret );
 800ee1c:	e7de      	b.n	800eddc <mbedtls_mpi_add_abs+0x70>

0800ee1e <mbedtls_mpi_sub_abs>:
{
 800ee1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee20:	460f      	mov	r7, r1
 800ee22:	b085      	sub	sp, #20
 800ee24:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ee26:	4611      	mov	r1, r2
 800ee28:	4638      	mov	r0, r7
{
 800ee2a:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800ee2c:	f7ff feab 	bl	800eb86 <mbedtls_mpi_cmp_abs>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	db2e      	blt.n	800ee92 <mbedtls_mpi_sub_abs+0x74>
    X->n = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	2201      	movs	r2, #1
    if( X == B )
 800ee38:	42b5      	cmp	r5, r6
    X->n = 0;
 800ee3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 800ee3e:	9303      	str	r3, [sp, #12]
    if( X == B )
 800ee40:	d106      	bne.n	800ee50 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800ee42:	4629      	mov	r1, r5
 800ee44:	a801      	add	r0, sp, #4
 800ee46:	f7ff fcf9 	bl	800e83c <mbedtls_mpi_copy>
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	b998      	cbnz	r0, 800ee76 <mbedtls_mpi_sub_abs+0x58>
        B = &TB;
 800ee4e:	ad01      	add	r5, sp, #4
    if( X != A )
 800ee50:	42b7      	cmp	r7, r6
 800ee52:	d109      	bne.n	800ee68 <mbedtls_mpi_sub_abs+0x4a>
    X->s = 1;
 800ee54:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800ee58:	2301      	movs	r3, #1
 800ee5a:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
 800ee5c:	b988      	cbnz	r0, 800ee82 <mbedtls_mpi_sub_abs+0x64>
    mpi_sub_hlp( n, B->p, X->p );
 800ee5e:	68b2      	ldr	r2, [r6, #8]
 800ee60:	f7ff faca 	bl	800e3f8 <mpi_sub_hlp>
    ret = 0;
 800ee64:	2400      	movs	r4, #0
 800ee66:	e006      	b.n	800ee76 <mbedtls_mpi_sub_abs+0x58>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800ee68:	4639      	mov	r1, r7
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f7ff fce6 	bl	800e83c <mbedtls_mpi_copy>
 800ee70:	4604      	mov	r4, r0
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d0ee      	beq.n	800ee54 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 800ee76:	a801      	add	r0, sp, #4
 800ee78:	f7ff fc60 	bl	800e73c <mbedtls_mpi_free>
}
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	b005      	add	sp, #20
 800ee80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 800ee82:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800ee86:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d1e7      	bne.n	800ee5e <mbedtls_mpi_sub_abs+0x40>
    for( n = B->n; n > 0; n-- )
 800ee8e:	3801      	subs	r0, #1
 800ee90:	e7e4      	b.n	800ee5c <mbedtls_mpi_sub_abs+0x3e>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800ee92:	f06f 0409 	mvn.w	r4, #9
 800ee96:	e7f1      	b.n	800ee7c <mbedtls_mpi_sub_abs+0x5e>

0800ee98 <mbedtls_mpi_add_mpi>:
{
 800ee98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800ee9a:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
 800ee9c:	6813      	ldr	r3, [r2, #0]
 800ee9e:	436b      	muls	r3, r5
{
 800eea0:	4604      	mov	r4, r0
 800eea2:	460f      	mov	r7, r1
 800eea4:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 800eea6:	d516      	bpl.n	800eed6 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4638      	mov	r0, r7
 800eeac:	f7ff fe6b 	bl	800eb86 <mbedtls_mpi_cmp_abs>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	db06      	blt.n	800eec2 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800eeb4:	4632      	mov	r2, r6
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f7ff ffb0 	bl	800ee1e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800eebe:	b140      	cbz	r0, 800eed2 <mbedtls_mpi_add_mpi+0x3a>
}
 800eec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800eec2:	463a      	mov	r2, r7
 800eec4:	4631      	mov	r1, r6
 800eec6:	4620      	mov	r0, r4
 800eec8:	f7ff ffa9 	bl	800ee1e <mbedtls_mpi_sub_abs>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d1f7      	bne.n	800eec0 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800eed0:	426d      	negs	r5, r5
        X->s = s;
 800eed2:	6025      	str	r5, [r4, #0]
    return( ret );
 800eed4:	e7f4      	b.n	800eec0 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800eed6:	f7ff ff49 	bl	800ed6c <mbedtls_mpi_add_abs>
 800eeda:	e7f0      	b.n	800eebe <mbedtls_mpi_add_mpi+0x26>

0800eedc <mbedtls_mpi_sub_mpi>:
{
 800eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800eede:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
 800eee0:	6813      	ldr	r3, [r2, #0]
 800eee2:	436b      	muls	r3, r5
 800eee4:	2b00      	cmp	r3, #0
{
 800eee6:	4604      	mov	r4, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 800eeec:	dd16      	ble.n	800ef1c <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800eeee:	4611      	mov	r1, r2
 800eef0:	4638      	mov	r0, r7
 800eef2:	f7ff fe48 	bl	800eb86 <mbedtls_mpi_cmp_abs>
 800eef6:	2800      	cmp	r0, #0
 800eef8:	db06      	blt.n	800ef08 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800eefa:	4632      	mov	r2, r6
 800eefc:	4639      	mov	r1, r7
 800eefe:	4620      	mov	r0, r4
 800ef00:	f7ff ff8d 	bl	800ee1e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800ef04:	b140      	cbz	r0, 800ef18 <mbedtls_mpi_sub_mpi+0x3c>
}
 800ef06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800ef08:	463a      	mov	r2, r7
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f7ff ff86 	bl	800ee1e <mbedtls_mpi_sub_abs>
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d1f7      	bne.n	800ef06 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 800ef16:	426d      	negs	r5, r5
        X->s = s;
 800ef18:	6025      	str	r5, [r4, #0]
    return( ret );
 800ef1a:	e7f4      	b.n	800ef06 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800ef1c:	f7ff ff26 	bl	800ed6c <mbedtls_mpi_add_abs>
 800ef20:	e7f0      	b.n	800ef04 <mbedtls_mpi_sub_mpi+0x28>

0800ef22 <mbedtls_mpi_sub_int>:
{
 800ef22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800ef24:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800ef28:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 800ef2c:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 800ef2e:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800ef30:	bfb4      	ite	lt
 800ef32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef36:	2301      	movge	r3, #1
 800ef38:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800ef3a:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800ef40:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800ef44:	f7ff ffca 	bl	800eedc <mbedtls_mpi_sub_mpi>
}
 800ef48:	b005      	add	sp, #20
 800ef4a:	f85d fb04 	ldr.w	pc, [sp], #4

0800ef4e <mbedtls_mpi_mul_mpi>:
{
 800ef4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
 800ef52:	2300      	movs	r3, #0
{
 800ef54:	b087      	sub	sp, #28
 800ef56:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800ef58:	4288      	cmp	r0, r1
    X->n = 0;
 800ef5a:	f04f 0201 	mov.w	r2, #1
 800ef5e:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 800ef62:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 800ef66:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
 800ef6a:	4680      	mov	r8, r0
 800ef6c:	460e      	mov	r6, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800ef6e:	d105      	bne.n	800ef7c <mbedtls_mpi_mul_mpi+0x2e>
 800ef70:	4668      	mov	r0, sp
 800ef72:	f7ff fc63 	bl	800e83c <mbedtls_mpi_copy>
 800ef76:	4604      	mov	r4, r0
 800ef78:	b9e8      	cbnz	r0, 800efb6 <mbedtls_mpi_mul_mpi+0x68>
 800ef7a:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800ef7c:	45a8      	cmp	r8, r5
 800ef7e:	d106      	bne.n	800ef8e <mbedtls_mpi_mul_mpi+0x40>
 800ef80:	4641      	mov	r1, r8
 800ef82:	a803      	add	r0, sp, #12
 800ef84:	f7ff fc5a 	bl	800e83c <mbedtls_mpi_copy>
 800ef88:	4604      	mov	r4, r0
 800ef8a:	b9a0      	cbnz	r0, 800efb6 <mbedtls_mpi_mul_mpi+0x68>
 800ef8c:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 800ef8e:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800ef92:	f1b9 0f00 	cmp.w	r9, #0
 800ef96:	d118      	bne.n	800efca <mbedtls_mpi_mul_mpi+0x7c>
    for( j = B->n; j > 0; j-- )
 800ef98:	686f      	ldr	r7, [r5, #4]
 800ef9a:	bb07      	cbnz	r7, 800efde <mbedtls_mpi_mul_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800ef9c:	eb09 0107 	add.w	r1, r9, r7
 800efa0:	4640      	mov	r0, r8
 800efa2:	f7ff fbe3 	bl	800e76c <mbedtls_mpi_grow>
 800efa6:	4604      	mov	r4, r0
 800efa8:	b928      	cbnz	r0, 800efb6 <mbedtls_mpi_mul_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800efaa:	4601      	mov	r1, r0
 800efac:	4640      	mov	r0, r8
 800efae:	f7ff fca2 	bl	800e8f6 <mbedtls_mpi_lset>
 800efb2:	4604      	mov	r4, r0
 800efb4:	b338      	cbz	r0, 800f006 <mbedtls_mpi_mul_mpi+0xb8>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800efb6:	a803      	add	r0, sp, #12
 800efb8:	f7ff fbc0 	bl	800e73c <mbedtls_mpi_free>
 800efbc:	4668      	mov	r0, sp
 800efbe:	f7ff fbbd 	bl	800e73c <mbedtls_mpi_free>
}
 800efc2:	4620      	mov	r0, r4
 800efc4:	b007      	add	sp, #28
 800efc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
 800efca:	68b3      	ldr	r3, [r6, #8]
 800efcc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800efd0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1df      	bne.n	800ef98 <mbedtls_mpi_mul_mpi+0x4a>
    for( i = A->n; i > 0; i-- )
 800efd8:	f109 39ff 	add.w	r9, r9, #4294967295
 800efdc:	e7d9      	b.n	800ef92 <mbedtls_mpi_mul_mpi+0x44>
        if( B->p[j - 1] != 0 )
 800efde:	68ab      	ldr	r3, [r5, #8]
 800efe0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800efe4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1d7      	bne.n	800ef9c <mbedtls_mpi_mul_mpi+0x4e>
    for( j = B->n; j > 0; j-- )
 800efec:	3f01      	subs	r7, #1
 800efee:	e7d4      	b.n	800ef9a <mbedtls_mpi_mul_mpi+0x4c>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 800eff0:	68ab      	ldr	r3, [r5, #8]
 800eff2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800eff6:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800effa:	68b1      	ldr	r1, [r6, #8]
 800effc:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800f000:	4648      	mov	r0, r9
 800f002:	f7ff fa22 	bl	800e44a <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 800f006:	3f01      	subs	r7, #1
 800f008:	d2f2      	bcs.n	800eff0 <mbedtls_mpi_mul_mpi+0xa2>
    X->s = A->s * B->s;
 800f00a:	6832      	ldr	r2, [r6, #0]
 800f00c:	682b      	ldr	r3, [r5, #0]
 800f00e:	4353      	muls	r3, r2
 800f010:	f8c8 3000 	str.w	r3, [r8]
 800f014:	e7cf      	b.n	800efb6 <mbedtls_mpi_mul_mpi+0x68>

0800f016 <mbedtls_mpi_mul_int>:
{
 800f016:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 800f018:	2301      	movs	r3, #1
    p[0] = b;
 800f01a:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800f01c:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800f01e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 800f022:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800f026:	f7ff ff92 	bl	800ef4e <mbedtls_mpi_mul_mpi>
}
 800f02a:	b005      	add	sp, #20
 800f02c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f030 <mbedtls_mpi_div_mpi>:
{
 800f030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f034:	ed2d 8b02 	vpush	{d8}
 800f038:	4606      	mov	r6, r0
 800f03a:	b095      	sub	sp, #84	; 0x54
 800f03c:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800f03e:	4618      	mov	r0, r3
 800f040:	2100      	movs	r1, #0
{
 800f042:	ee08 3a90 	vmov	s17, r3
 800f046:	4691      	mov	r9, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800f048:	f7ff fe7a 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	f000 81a9 	beq.w	800f3a4 <mbedtls_mpi_div_mpi+0x374>
    X->n = 0;
 800f052:	2400      	movs	r4, #0
 800f054:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f056:	ee18 1a90 	vmov	r1, s17
 800f05a:	4648      	mov	r0, r9
    X->n = 0;
 800f05c:	e9cd 5405 	strd	r5, r4, [sp, #20]
    X->s = 1;
 800f060:	e9cd 4507 	strd	r4, r5, [sp, #28]
    X->p = NULL;
 800f064:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    X->n = 0;
 800f068:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
    X->s = 1;
 800f06c:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
    X->p = NULL;
 800f070:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    X->n = 0;
 800f074:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
    X->p = NULL;
 800f078:	9413      	str	r4, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f07a:	f7ff fd84 	bl	800eb86 <mbedtls_mpi_cmp_abs>
 800f07e:	42a0      	cmp	r0, r4
 800f080:	da29      	bge.n	800f0d6 <mbedtls_mpi_div_mpi+0xa6>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800f082:	b94e      	cbnz	r6, 800f098 <mbedtls_mpi_div_mpi+0x68>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800f084:	f1b8 0f00 	cmp.w	r8, #0
 800f088:	d11d      	bne.n	800f0c6 <mbedtls_mpi_div_mpi+0x96>
        return( 0 );
 800f08a:	2400      	movs	r4, #0
}
 800f08c:	4620      	mov	r0, r4
 800f08e:	b015      	add	sp, #84	; 0x54
 800f090:	ecbd 8b02 	vpop	{d8}
 800f094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800f098:	4621      	mov	r1, r4
 800f09a:	4630      	mov	r0, r6
 800f09c:	f7ff fc2b 	bl	800e8f6 <mbedtls_mpi_lset>
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d0ee      	beq.n	800f084 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f0a6:	a805      	add	r0, sp, #20
 800f0a8:	f7ff fb48 	bl	800e73c <mbedtls_mpi_free>
 800f0ac:	a808      	add	r0, sp, #32
 800f0ae:	f7ff fb45 	bl	800e73c <mbedtls_mpi_free>
 800f0b2:	a80b      	add	r0, sp, #44	; 0x2c
 800f0b4:	f7ff fb42 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800f0b8:	a80e      	add	r0, sp, #56	; 0x38
 800f0ba:	f7ff fb3f 	bl	800e73c <mbedtls_mpi_free>
 800f0be:	a811      	add	r0, sp, #68	; 0x44
 800f0c0:	f7ff fb3c 	bl	800e73c <mbedtls_mpi_free>
    return( ret );
 800f0c4:	e7e2      	b.n	800f08c <mbedtls_mpi_div_mpi+0x5c>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	f7ff fbb7 	bl	800e83c <mbedtls_mpi_copy>
 800f0ce:	4604      	mov	r4, r0
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d1e8      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
 800f0d4:	e7d9      	b.n	800f08a <mbedtls_mpi_div_mpi+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800f0d6:	4649      	mov	r1, r9
 800f0d8:	a805      	add	r0, sp, #20
 800f0da:	f7ff fbaf 	bl	800e83c <mbedtls_mpi_copy>
 800f0de:	4604      	mov	r4, r0
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	d1e0      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800f0e4:	af08      	add	r7, sp, #32
 800f0e6:	ee18 1a90 	vmov	r1, s17
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	f7ff fba6 	bl	800e83c <mbedtls_mpi_copy>
 800f0f0:	4604      	mov	r4, r0
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d1d7      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f0f6:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X.s = Y.s = 1;
 800f0fa:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f0fc:	3102      	adds	r1, #2
 800f0fe:	a80b      	add	r0, sp, #44	; 0x2c
    X.s = Y.s = 1;
 800f100:	9505      	str	r5, [sp, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f102:	f7ff fb33 	bl	800e76c <mbedtls_mpi_grow>
 800f106:	4604      	mov	r4, r0
 800f108:	2800      	cmp	r0, #0
 800f10a:	d1cc      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800f10c:	4601      	mov	r1, r0
 800f10e:	a80b      	add	r0, sp, #44	; 0x2c
 800f110:	f7ff fbf1 	bl	800e8f6 <mbedtls_mpi_lset>
 800f114:	4604      	mov	r4, r0
 800f116:	2800      	cmp	r0, #0
 800f118:	d1c5      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800f11a:	2102      	movs	r1, #2
 800f11c:	a80e      	add	r0, sp, #56	; 0x38
 800f11e:	f7ff fb25 	bl	800e76c <mbedtls_mpi_grow>
 800f122:	4604      	mov	r4, r0
 800f124:	2800      	cmp	r0, #0
 800f126:	d1be      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800f128:	2103      	movs	r1, #3
 800f12a:	a811      	add	r0, sp, #68	; 0x44
 800f12c:	f7ff fb1e 	bl	800e76c <mbedtls_mpi_grow>
 800f130:	4604      	mov	r4, r0
 800f132:	2800      	cmp	r0, #0
 800f134:	d1b7      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800f136:	4638      	mov	r0, r7
 800f138:	f7ff fc25 	bl	800e986 <mbedtls_mpi_bitlen>
 800f13c:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 800f140:	281f      	cmp	r0, #31
 800f142:	d075      	beq.n	800f230 <mbedtls_mpi_div_mpi+0x200>
        k = biL - 1 - k;
 800f144:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800f148:	4619      	mov	r1, r3
 800f14a:	a805      	add	r0, sp, #20
        k = biL - 1 - k;
 800f14c:	ee08 3a10 	vmov	s16, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800f150:	f7ff fc91 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f154:	4604      	mov	r4, r0
 800f156:	2800      	cmp	r0, #0
 800f158:	d1a5      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800f15a:	ee18 1a10 	vmov	r1, s16
 800f15e:	4638      	mov	r0, r7
 800f160:	f7ff fc89 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f164:	4604      	mov	r4, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	d19d      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    n = X.n - 1;
 800f16a:	9d06      	ldr	r5, [sp, #24]
    t = Y.n - 1;
 800f16c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800f170:	eba5 030a 	sub.w	r3, r5, sl
 800f174:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f178:	4659      	mov	r1, fp
 800f17a:	4638      	mov	r0, r7
 800f17c:	9300      	str	r3, [sp, #0]
 800f17e:	f7ff fc7a 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f182:	4604      	mov	r4, r0
 800f184:	2800      	cmp	r0, #0
 800f186:	d18e      	bne.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
        Z.p[n - t]++;
 800f188:	9b00      	ldr	r3, [sp, #0]
 800f18a:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800f18c:	4639      	mov	r1, r7
 800f18e:	a805      	add	r0, sp, #20
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	f7ff fd92 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800f196:	2800      	cmp	r0, #0
 800f198:	9b00      	ldr	r3, [sp, #0]
 800f19a:	da4c      	bge.n	800f236 <mbedtls_mpi_div_mpi+0x206>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800f19c:	4659      	mov	r1, fp
 800f19e:	4638      	mov	r0, r7
 800f1a0:	f7ff fcb7 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	f47f af7d 	bne.w	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    t = Y.n - 1;
 800f1ac:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f1b0:	9300      	str	r3, [sp, #0]
        if( X.p[i] >= Y.p[t] )
 800f1b2:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
 800f1b4:	1e6f      	subs	r7, r5, #1
        if( X.p[i] >= Y.p[t] )
 800f1b6:	9301      	str	r3, [sp, #4]
 800f1b8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f1bc:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800f1c0:	3b02      	subs	r3, #2
 800f1c2:	3d01      	subs	r5, #1
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	eba5 0a0a 	sub.w	sl, r5, sl
 800f1ca:	9303      	str	r3, [sp, #12]
 800f1cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
 800f1d0:	9b00      	ldr	r3, [sp, #0]
 800f1d2:	429f      	cmp	r7, r3
 800f1d4:	d83e      	bhi.n	800f254 <mbedtls_mpi_div_mpi+0x224>
    if( Q != NULL )
 800f1d6:	b15e      	cbz	r6, 800f1f0 <mbedtls_mpi_div_mpi+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800f1d8:	a90b      	add	r1, sp, #44	; 0x2c
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f7ff fb2e 	bl	800e83c <mbedtls_mpi_copy>
 800f1e0:	bb20      	cbnz	r0, 800f22c <mbedtls_mpi_div_mpi+0x1fc>
        Q->s = A->s * B->s;
 800f1e2:	ee18 3a90 	vmov	r3, s17
 800f1e6:	f8d9 2000 	ldr.w	r2, [r9]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4353      	muls	r3, r2
 800f1ee:	6033      	str	r3, [r6, #0]
    if( R != NULL )
 800f1f0:	f1b8 0f00 	cmp.w	r8, #0
 800f1f4:	f43f af57 	beq.w	800f0a6 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800f1f8:	ee18 1a10 	vmov	r1, s16
 800f1fc:	a805      	add	r0, sp, #20
 800f1fe:	f7ff fc88 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f202:	b998      	cbnz	r0, 800f22c <mbedtls_mpi_div_mpi+0x1fc>
        X.s = A->s;
 800f204:	f8d9 3000 	ldr.w	r3, [r9]
 800f208:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800f20a:	a905      	add	r1, sp, #20
 800f20c:	4640      	mov	r0, r8
 800f20e:	f7ff fb15 	bl	800e83c <mbedtls_mpi_copy>
 800f212:	4601      	mov	r1, r0
 800f214:	2800      	cmp	r0, #0
 800f216:	f040 80c3 	bne.w	800f3a0 <mbedtls_mpi_div_mpi+0x370>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800f21a:	4640      	mov	r0, r8
 800f21c:	f7ff fd90 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f220:	2800      	cmp	r0, #0
 800f222:	f47f af40 	bne.w	800f0a6 <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
 800f226:	2301      	movs	r3, #1
 800f228:	f8c8 3000 	str.w	r3, [r8]
 800f22c:	4604      	mov	r4, r0
 800f22e:	e73a      	b.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
    else k = 0;
 800f230:	ee08 4a10 	vmov	s16, r4
 800f234:	e799      	b.n	800f16a <mbedtls_mpi_div_mpi+0x13a>
        Z.p[n - t]++;
 800f236:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f238:	9300      	str	r3, [sp, #0]
 800f23a:	58ca      	ldr	r2, [r1, r3]
 800f23c:	3201      	adds	r2, #1
 800f23e:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800f240:	a905      	add	r1, sp, #20
 800f242:	463a      	mov	r2, r7
 800f244:	4608      	mov	r0, r1
 800f246:	f7ff fe49 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800f24a:	9b00      	ldr	r3, [sp, #0]
 800f24c:	4604      	mov	r4, r0
 800f24e:	2800      	cmp	r0, #0
 800f250:	d09c      	beq.n	800f18c <mbedtls_mpi_div_mpi+0x15c>
 800f252:	e728      	b.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
        if( X.p[i] >= Y.p[t] )
 800f254:	9801      	ldr	r0, [sp, #4]
 800f256:	9b07      	ldr	r3, [sp, #28]
 800f258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f25a:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800f25e:	5812      	ldr	r2, [r2, r0]
 800f260:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800f264:	f1ab 0004 	sub.w	r0, fp, #4
 800f268:	9002      	str	r0, [sp, #8]
 800f26a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f26c:	4291      	cmp	r1, r2
 800f26e:	eb00 050a 	add.w	r5, r0, sl
 800f272:	d37e      	bcc.n	800f372 <mbedtls_mpi_div_mpi+0x342>
            Z.p[i - t - 1] = ~0;
 800f274:	f04f 33ff 	mov.w	r3, #4294967295
 800f278:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
 800f27c:	682b      	ldr	r3, [r5, #0]
 800f27e:	3301      	adds	r3, #1
 800f280:	602b      	str	r3, [r5, #0]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f282:	f1ab 0508 	sub.w	r5, fp, #8
            Z.p[i - t - 1]--;
 800f286:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f288:	f852 300a 	ldr.w	r3, [r2, sl]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800f292:	2100      	movs	r1, #0
 800f294:	a80e      	add	r0, sp, #56	; 0x38
 800f296:	f7ff fb2e 	bl	800e8f6 <mbedtls_mpi_lset>
 800f29a:	2800      	cmp	r0, #0
 800f29c:	d1c6      	bne.n	800f22c <mbedtls_mpi_div_mpi+0x1fc>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f29e:	9b00      	ldr	r3, [sp, #0]
 800f2a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d07a      	beq.n	800f39c <mbedtls_mpi_div_mpi+0x36c>
 800f2a6:	9b03      	ldr	r3, [sp, #12]
 800f2a8:	58d1      	ldr	r1, [r2, r3]
 800f2aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2ac:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800f2ae:	9901      	ldr	r1, [sp, #4]
 800f2b0:	5852      	ldr	r2, [r2, r1]
 800f2b2:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800f2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2b6:	a90e      	add	r1, sp, #56	; 0x38
 800f2b8:	4608      	mov	r0, r1
 800f2ba:	f853 200a 	ldr.w	r2, [r3, sl]
 800f2be:	f7ff feaa 	bl	800f016 <mbedtls_mpi_mul_int>
 800f2c2:	4601      	mov	r1, r0
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d16b      	bne.n	800f3a0 <mbedtls_mpi_div_mpi+0x370>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800f2c8:	a811      	add	r0, sp, #68	; 0x44
 800f2ca:	f7ff fb14 	bl	800e8f6 <mbedtls_mpi_lset>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d1ac      	bne.n	800f22c <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f2d2:	9a07      	ldr	r2, [sp, #28]
 800f2d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f2d6:	9902      	ldr	r1, [sp, #8]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f2d8:	2f01      	cmp	r7, #1
 800f2da:	bf18      	it	ne
 800f2dc:	5950      	ldrne	r0, [r2, r5]
 800f2de:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f2e0:	5851      	ldr	r1, [r2, r1]
 800f2e2:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 800f2e4:	f852 200b 	ldr.w	r2, [r2, fp]
 800f2e8:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800f2ea:	a911      	add	r1, sp, #68	; 0x44
 800f2ec:	a80e      	add	r0, sp, #56	; 0x38
 800f2ee:	f7ff fce4 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	dcc7      	bgt.n	800f286 <mbedtls_mpi_div_mpi+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800f2f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2f8:	a908      	add	r1, sp, #32
 800f2fa:	f853 200a 	ldr.w	r2, [r3, sl]
 800f2fe:	a80e      	add	r0, sp, #56	; 0x38
 800f300:	f7ff fe89 	bl	800f016 <mbedtls_mpi_mul_int>
 800f304:	2800      	cmp	r0, #0
 800f306:	d191      	bne.n	800f22c <mbedtls_mpi_div_mpi+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800f308:	ea4f 05ca 	mov.w	r5, sl, lsl #3
 800f30c:	4629      	mov	r1, r5
 800f30e:	a80e      	add	r0, sp, #56	; 0x38
 800f310:	f7ff fbb1 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f314:	2800      	cmp	r0, #0
 800f316:	d189      	bne.n	800f22c <mbedtls_mpi_div_mpi+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800f318:	a905      	add	r1, sp, #20
 800f31a:	4608      	mov	r0, r1
 800f31c:	aa0e      	add	r2, sp, #56	; 0x38
 800f31e:	f7ff fddd 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800f322:	4601      	mov	r1, r0
 800f324:	2800      	cmp	r0, #0
 800f326:	d13b      	bne.n	800f3a0 <mbedtls_mpi_div_mpi+0x370>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800f328:	a805      	add	r0, sp, #20
 800f32a:	f7ff fd09 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f32e:	2800      	cmp	r0, #0
 800f330:	da1b      	bge.n	800f36a <mbedtls_mpi_div_mpi+0x33a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800f332:	a908      	add	r1, sp, #32
 800f334:	a80e      	add	r0, sp, #56	; 0x38
 800f336:	f7ff fa81 	bl	800e83c <mbedtls_mpi_copy>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	f47f af76 	bne.w	800f22c <mbedtls_mpi_div_mpi+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800f340:	4629      	mov	r1, r5
 800f342:	a80e      	add	r0, sp, #56	; 0x38
 800f344:	f7ff fb97 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f348:	2800      	cmp	r0, #0
 800f34a:	f47f af6f 	bne.w	800f22c <mbedtls_mpi_div_mpi+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800f34e:	a905      	add	r1, sp, #20
 800f350:	aa0e      	add	r2, sp, #56	; 0x38
 800f352:	4608      	mov	r0, r1
 800f354:	f7ff fda0 	bl	800ee98 <mbedtls_mpi_add_mpi>
 800f358:	2800      	cmp	r0, #0
 800f35a:	f47f af67 	bne.w	800f22c <mbedtls_mpi_div_mpi+0x1fc>
            Z.p[i - t - 1]--;
 800f35e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f360:	f852 300a 	ldr.w	r3, [r2, sl]
 800f364:	3b01      	subs	r3, #1
 800f366:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
 800f36a:	3f01      	subs	r7, #1
 800f36c:	f1aa 0a04 	sub.w	sl, sl, #4
 800f370:	e72e      	b.n	800f1d0 <mbedtls_mpi_div_mpi+0x1a0>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f372:	9802      	ldr	r0, [sp, #8]
 800f374:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
 800f376:	b172      	cbz	r2, 800f396 <mbedtls_mpi_div_mpi+0x366>
    quotient = dividend / d;
 800f378:	2300      	movs	r3, #0
 800f37a:	f7f1 fc95 	bl	8000ca8 <__aeabi_uldivmod>
 800f37e:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
 800f380:	2100      	movs	r1, #0
    quotient = dividend / d;
 800f382:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
 800f384:	4299      	cmp	r1, r3
 800f386:	f04f 30ff 	mov.w	r0, #4294967295
 800f38a:	bf08      	it	eq
 800f38c:	4290      	cmpeq	r0, r2
 800f38e:	d200      	bcs.n	800f392 <mbedtls_mpi_div_mpi+0x362>
 800f390:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f392:	602a      	str	r2, [r5, #0]
 800f394:	e772      	b.n	800f27c <mbedtls_mpi_div_mpi+0x24c>
        return ( ~0 );
 800f396:	f04f 32ff 	mov.w	r2, #4294967295
 800f39a:	e7fa      	b.n	800f392 <mbedtls_mpi_div_mpi+0x362>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f39c:	9900      	ldr	r1, [sp, #0]
 800f39e:	e784      	b.n	800f2aa <mbedtls_mpi_div_mpi+0x27a>
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	e680      	b.n	800f0a6 <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800f3a4:	f06f 040b 	mvn.w	r4, #11
 800f3a8:	e670      	b.n	800f08c <mbedtls_mpi_div_mpi+0x5c>

0800f3aa <mbedtls_mpi_mod_mpi>:
{
 800f3aa:	b570      	push	{r4, r5, r6, lr}
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f3b0:	4610      	mov	r0, r2
 800f3b2:	2100      	movs	r1, #0
{
 800f3b4:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f3b6:	f7ff fcc3 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	db24      	blt.n	800f408 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800f3be:	462a      	mov	r2, r5
 800f3c0:	4633      	mov	r3, r6
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	f7ff fe33 	bl	800f030 <mbedtls_mpi_div_mpi>
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	b138      	cbz	r0, 800f3de <mbedtls_mpi_mod_mpi+0x34>
}
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800f3d2:	4632      	mov	r2, r6
 800f3d4:	4621      	mov	r1, r4
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	f7ff fd5e 	bl	800ee98 <mbedtls_mpi_add_mpi>
 800f3dc:	b990      	cbnz	r0, 800f404 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800f3de:	2100      	movs	r1, #0
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f7ff fcad 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	dbf3      	blt.n	800f3d2 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800f3ea:	4631      	mov	r1, r6
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f7ff fc64 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	dbeb      	blt.n	800f3ce <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800f3f6:	4632      	mov	r2, r6
 800f3f8:	4621      	mov	r1, r4
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f7ff fd6e 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800f400:	2800      	cmp	r0, #0
 800f402:	d0f2      	beq.n	800f3ea <mbedtls_mpi_mod_mpi+0x40>
 800f404:	4605      	mov	r5, r0
 800f406:	e7e2      	b.n	800f3ce <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f408:	f06f 0509 	mvn.w	r5, #9
 800f40c:	e7df      	b.n	800f3ce <mbedtls_mpi_mod_mpi+0x24>

0800f40e <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 800f40e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f412:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800f416:	4605      	mov	r5, r0
 800f418:	4688      	mov	r8, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f41a:	4618      	mov	r0, r3
 800f41c:	2100      	movs	r1, #0
{
 800f41e:	9202      	str	r2, [sp, #8]
 800f420:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f422:	f7ff fc8d 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f426:	2800      	cmp	r0, #0
 800f428:	f2c0 821c 	blt.w	800f864 <mbedtls_mpi_exp_mod+0x456>
 800f42c:	68a3      	ldr	r3, [r4, #8]
 800f42e:	681e      	ldr	r6, [r3, #0]
 800f430:	f016 0301 	ands.w	r3, r6, #1
 800f434:	9304      	str	r3, [sp, #16]
 800f436:	f000 8215 	beq.w	800f864 <mbedtls_mpi_exp_mod+0x456>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 800f43a:	9802      	ldr	r0, [sp, #8]
 800f43c:	2100      	movs	r1, #0
 800f43e:	f7ff fc7f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f442:	2800      	cmp	r0, #0
 800f444:	f2c0 820e 	blt.w	800f864 <mbedtls_mpi_exp_mod+0x456>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800f448:	1cb7      	adds	r7, r6, #2
 800f44a:	007f      	lsls	r7, r7, #1
 800f44c:	f007 0708 	and.w	r7, r7, #8
 800f450:	4437      	add	r7, r6
 800f452:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 800f454:	fb07 f306 	mul.w	r3, r7, r6
 800f458:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 800f45c:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 800f45e:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
 800f462:	d1f7      	bne.n	800f454 <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
 800f464:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 800f466:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f46a:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 800f46c:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 800f470:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 800f474:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 800f478:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 800f47c:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 800f47e:	f012 febb 	bl	80221f8 <memset>

    i = mbedtls_mpi_bitlen( E );
 800f482:	9802      	ldr	r0, [sp, #8]
 800f484:	f7ff fa7f 	bl	800e986 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f488:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 800f48c:	f080 80e2 	bcs.w	800f654 <mbedtls_mpi_exp_mod+0x246>
 800f490:	28ef      	cmp	r0, #239	; 0xef
 800f492:	f200 80e1 	bhi.w	800f658 <mbedtls_mpi_exp_mod+0x24a>
 800f496:	284f      	cmp	r0, #79	; 0x4f
 800f498:	f200 80e0 	bhi.w	800f65c <mbedtls_mpi_exp_mod+0x24e>
 800f49c:	9b04      	ldr	r3, [sp, #16]
 800f49e:	2817      	cmp	r0, #23
 800f4a0:	bf94      	ite	ls
 800f4a2:	461e      	movls	r6, r3
 800f4a4:	2603      	movhi	r6, #3
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 800f4a6:	6861      	ldr	r1, [r4, #4]
 800f4a8:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800f4ac:	4649      	mov	r1, r9
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f7ff f95c 	bl	800e76c <mbedtls_mpi_grow>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	f040 81a9 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800f4bc:	4649      	mov	r1, r9
 800f4be:	a817      	add	r0, sp, #92	; 0x5c
 800f4c0:	f7ff f954 	bl	800e76c <mbedtls_mpi_grow>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	f040 81a1 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800f4cc:	ea4f 0149 	mov.w	r1, r9, lsl #1
 800f4d0:	a80b      	add	r0, sp, #44	; 0x2c
 800f4d2:	f7ff f94b 	bl	800e76c <mbedtls_mpi_grow>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	f040 8198 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 800f4de:	f8d8 3000 	ldr.w	r3, [r8]
 800f4e2:	9303      	str	r3, [sp, #12]
    if( neg )
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	d10b      	bne.n	800f500 <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800f4e8:	4641      	mov	r1, r8
 800f4ea:	a80e      	add	r0, sp, #56	; 0x38
 800f4ec:	f7ff f9a6 	bl	800e83c <mbedtls_mpi_copy>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	f040 818b 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
        Apos.s = 1;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 800f4fc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 800f500:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f504:	b11b      	cbz	r3, 800f50e <mbedtls_mpi_exp_mod+0x100>
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f040 80a9 	bne.w	800f660 <mbedtls_mpi_exp_mod+0x252>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800f50e:	2101      	movs	r1, #1
 800f510:	a808      	add	r0, sp, #32
 800f512:	f7ff f9f0 	bl	800e8f6 <mbedtls_mpi_lset>
 800f516:	4602      	mov	r2, r0
 800f518:	2800      	cmp	r0, #0
 800f51a:	f040 8178 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800f51e:	6861      	ldr	r1, [r4, #4]
 800f520:	a808      	add	r0, sp, #32
 800f522:	0189      	lsls	r1, r1, #6
 800f524:	f7ff faa7 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f528:	4602      	mov	r2, r0
 800f52a:	2800      	cmp	r0, #0
 800f52c:	f040 816f 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800f530:	a908      	add	r1, sp, #32
 800f532:	4622      	mov	r2, r4
 800f534:	4608      	mov	r0, r1
 800f536:	f7ff ff38 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 800f53a:	4602      	mov	r2, r0
 800f53c:	2800      	cmp	r0, #0
 800f53e:	f040 8166 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>

        if( _RR != NULL )
 800f542:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f546:	b13b      	cbz	r3, 800f558 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800f548:	ab08      	add	r3, sp, #32
 800f54a:	cb03      	ldmia	r3!, {r0, r1}
 800f54c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f550:	6010      	str	r0, [r2, #0]
 800f552:	6818      	ldr	r0, [r3, #0]
 800f554:	6051      	str	r1, [r2, #4]
 800f556:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800f558:	4621      	mov	r1, r4
 800f55a:	4640      	mov	r0, r8
 800f55c:	f7ff fbad 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800f560:	2800      	cmp	r0, #0
 800f562:	f2c0 8086 	blt.w	800f672 <mbedtls_mpi_exp_mod+0x264>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800f566:	4622      	mov	r2, r4
 800f568:	4641      	mov	r1, r8
 800f56a:	a817      	add	r0, sp, #92	; 0x5c
 800f56c:	f7ff ff1d 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 800f570:	4602      	mov	r2, r0
 800f572:	2800      	cmp	r0, #0
 800f574:	f040 814b 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f578:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    *mm = ~x + 1;
 800f57c:	427b      	negs	r3, r7
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f57e:	4622      	mov	r2, r4
 800f580:	f8cd 9000 	str.w	r9, [sp]
 800f584:	a908      	add	r1, sp, #32
 800f586:	a817      	add	r0, sp, #92	; 0x5c
 800f588:	9305      	str	r3, [sp, #20]
 800f58a:	f7ff fb2f 	bl	800ebec <mpi_montmul>
 800f58e:	4602      	mov	r2, r0
 800f590:	2800      	cmp	r0, #0
 800f592:	f040 813c 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800f596:	a908      	add	r1, sp, #32
 800f598:	4628      	mov	r0, r5
 800f59a:	f7ff f94f 	bl	800e83c <mbedtls_mpi_copy>
 800f59e:	4602      	mov	r2, r0
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	f040 8134 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
    mbedtls_mpi_uint z = 1;
 800f5a6:	aa07      	add	r2, sp, #28
 800f5a8:	2701      	movs	r7, #1
    U.p = &z;
 800f5aa:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f5ac:	9b05      	ldr	r3, [sp, #20]
 800f5ae:	f8cd 9000 	str.w	r9, [sp]
 800f5b2:	4622      	mov	r2, r4
 800f5b4:	a911      	add	r1, sp, #68	; 0x44
 800f5b6:	4628      	mov	r0, r5
    U.n = U.s = (int) z;
 800f5b8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
 800f5bc:	9707      	str	r7, [sp, #28]
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f5be:	f7ff fb15 	bl	800ebec <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	2800      	cmp	r0, #0
 800f5c6:	f040 8122 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>

    if( wsize > 1 )
 800f5ca:	42be      	cmp	r6, r7
 800f5cc:	9b05      	ldr	r3, [sp, #20]
 800f5ce:	d155      	bne.n	800f67c <mbedtls_mpi_exp_mod+0x26e>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 800f5d0:	9a02      	ldr	r2, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 800f5d2:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
 800f5d6:	f8d2 b004 	ldr.w	fp, [r2, #4]
    nbits   = 0;
 800f5da:	4647      	mov	r7, r8
    bufsize = 0;
 800f5dc:	46c1      	mov	r9, r8
    wbits   = 0;
 800f5de:	46c2      	mov	sl, r8

    while( 1 )
    {
        if( bufsize == 0 )
 800f5e0:	f1b9 0f00 	cmp.w	r9, #0
 800f5e4:	f040 80ac 	bne.w	800f740 <mbedtls_mpi_exp_mod+0x332>
        {
            if( nblimbs == 0 )
 800f5e8:	f1bb 0f00 	cmp.w	fp, #0
 800f5ec:	f040 80a4 	bne.w	800f738 <mbedtls_mpi_exp_mod+0x32a>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 800f5f0:	f04f 0901 	mov.w	r9, #1
 800f5f4:	fa09 f906 	lsl.w	r9, r9, r6
 800f5f8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 800f5fc:	45bb      	cmp	fp, r7
 800f5fe:	f040 80e7 	bne.w	800f7d0 <mbedtls_mpi_exp_mod+0x3c2>
    mbedtls_mpi_uint z = 1;
 800f602:	2201      	movs	r2, #1
 800f604:	a907      	add	r1, sp, #28
    U.n = U.s = (int) z;
 800f606:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
 800f60a:	9207      	str	r2, [sp, #28]
    U.p = &z;
 800f60c:	9113      	str	r1, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f60e:	4622      	mov	r2, r4
 800f610:	f8cd 8000 	str.w	r8, [sp]
 800f614:	a911      	add	r1, sp, #68	; 0x44
 800f616:	4628      	mov	r0, r5
 800f618:	f7ff fae8 	bl	800ebec <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f61c:	4602      	mov	r2, r0
 800f61e:	2800      	cmp	r0, #0
 800f620:	f040 80f5 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800f624:	9b03      	ldr	r3, [sp, #12]
 800f626:	3301      	adds	r3, #1
 800f628:	f040 80f1 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
 800f62c:	9b02      	ldr	r3, [sp, #8]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	f000 80ec 	beq.w	800f80e <mbedtls_mpi_exp_mod+0x400>
 800f636:	9b02      	ldr	r3, [sp, #8]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	07db      	lsls	r3, r3, #31
 800f63e:	f140 80e6 	bpl.w	800f80e <mbedtls_mpi_exp_mod+0x400>
    {
        X->s = -1;
 800f642:	9b03      	ldr	r3, [sp, #12]
 800f644:	602b      	str	r3, [r5, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800f646:	462a      	mov	r2, r5
 800f648:	4621      	mov	r1, r4
 800f64a:	4628      	mov	r0, r5
 800f64c:	f7ff fc24 	bl	800ee98 <mbedtls_mpi_add_mpi>
 800f650:	4602      	mov	r2, r0
    }

cleanup:
 800f652:	e0dc      	b.n	800f80e <mbedtls_mpi_exp_mod+0x400>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f654:	2606      	movs	r6, #6
 800f656:	e726      	b.n	800f4a6 <mbedtls_mpi_exp_mod+0x98>
 800f658:	2605      	movs	r6, #5
 800f65a:	e724      	b.n	800f4a6 <mbedtls_mpi_exp_mod+0x98>
 800f65c:	2604      	movs	r6, #4
 800f65e:	e722      	b.n	800f4a6 <mbedtls_mpi_exp_mod+0x98>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800f660:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f664:	6810      	ldr	r0, [r2, #0]
 800f666:	6851      	ldr	r1, [r2, #4]
 800f668:	ab08      	add	r3, sp, #32
 800f66a:	c303      	stmia	r3!, {r0, r1}
 800f66c:	6890      	ldr	r0, [r2, #8]
 800f66e:	6018      	str	r0, [r3, #0]
 800f670:	e772      	b.n	800f558 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800f672:	4641      	mov	r1, r8
 800f674:	a817      	add	r0, sp, #92	; 0x5c
 800f676:	f7ff f8e1 	bl	800e83c <mbedtls_mpi_copy>
 800f67a:	e779      	b.n	800f570 <mbedtls_mpi_exp_mod+0x162>
 800f67c:	f106 3bff 	add.w	fp, r6, #4294967295
 800f680:	fa07 f80b 	lsl.w	r8, r7, fp
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800f684:	270c      	movs	r7, #12
 800f686:	6861      	ldr	r1, [r4, #4]
 800f688:	9305      	str	r3, [sp, #20]
 800f68a:	fa07 f70b 	lsl.w	r7, r7, fp
 800f68e:	ab14      	add	r3, sp, #80	; 0x50
 800f690:	441f      	add	r7, r3
 800f692:	3101      	adds	r1, #1
 800f694:	4638      	mov	r0, r7
 800f696:	f7ff f869 	bl	800e76c <mbedtls_mpi_grow>
 800f69a:	4602      	mov	r2, r0
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f040 80b6 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800f6a2:	a917      	add	r1, sp, #92	; 0x5c
 800f6a4:	4638      	mov	r0, r7
 800f6a6:	f7ff f8c9 	bl	800e83c <mbedtls_mpi_copy>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f040 80ae 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f6b2:	9b05      	ldr	r3, [sp, #20]
        for( i = 0; i < wsize - 1; i++ )
 800f6b4:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f6b6:	4622      	mov	r2, r4
 800f6b8:	f8cd 9000 	str.w	r9, [sp]
 800f6bc:	4639      	mov	r1, r7
 800f6be:	4638      	mov	r0, r7
 800f6c0:	9305      	str	r3, [sp, #20]
 800f6c2:	f7ff fa93 	bl	800ebec <mpi_montmul>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	f040 80a0 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
        for( i = 0; i < wsize - 1; i++ )
 800f6ce:	f10a 0a01 	add.w	sl, sl, #1
 800f6d2:	45d3      	cmp	fp, sl
 800f6d4:	9b05      	ldr	r3, [sp, #20]
 800f6d6:	d8ee      	bhi.n	800f6b6 <mbedtls_mpi_exp_mod+0x2a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f6d8:	f04f 0a01 	mov.w	sl, #1
 800f6dc:	46bb      	mov	fp, r7
 800f6de:	f108 0801 	add.w	r8, r8, #1
 800f6e2:	fa0a fa06 	lsl.w	sl, sl, r6
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f6e6:	af0b      	add	r7, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f6e8:	45c2      	cmp	sl, r8
 800f6ea:	f67f af71 	bls.w	800f5d0 <mbedtls_mpi_exp_mod+0x1c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800f6ee:	6861      	ldr	r1, [r4, #4]
 800f6f0:	9305      	str	r3, [sp, #20]
 800f6f2:	f10b 090c 	add.w	r9, fp, #12
 800f6f6:	3101      	adds	r1, #1
 800f6f8:	4648      	mov	r0, r9
 800f6fa:	f7ff f837 	bl	800e76c <mbedtls_mpi_grow>
 800f6fe:	4602      	mov	r2, r0
 800f700:	2800      	cmp	r0, #0
 800f702:	f040 8084 	bne.w	800f80e <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800f706:	4659      	mov	r1, fp
 800f708:	4648      	mov	r0, r9
 800f70a:	f7ff f897 	bl	800e83c <mbedtls_mpi_copy>
 800f70e:	4602      	mov	r2, r0
 800f710:	2800      	cmp	r0, #0
 800f712:	d17c      	bne.n	800f80e <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f714:	4622      	mov	r2, r4
 800f716:	9b05      	ldr	r3, [sp, #20]
 800f718:	9700      	str	r7, [sp, #0]
 800f71a:	a917      	add	r1, sp, #92	; 0x5c
 800f71c:	4648      	mov	r0, r9
 800f71e:	f7ff fa65 	bl	800ebec <mpi_montmul>
 800f722:	4602      	mov	r2, r0
 800f724:	2800      	cmp	r0, #0
 800f726:	d172      	bne.n	800f80e <mbedtls_mpi_exp_mod+0x400>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f728:	9b05      	ldr	r3, [sp, #20]
 800f72a:	f108 0801 	add.w	r8, r8, #1
 800f72e:	46cb      	mov	fp, r9
 800f730:	e7da      	b.n	800f6e8 <mbedtls_mpi_exp_mod+0x2da>
        state = 2;
 800f732:	f04f 0802 	mov.w	r8, #2
 800f736:	e753      	b.n	800f5e0 <mbedtls_mpi_exp_mod+0x1d2>
            nblimbs--;
 800f738:	f10b 3bff 	add.w	fp, fp, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800f73c:	f04f 0920 	mov.w	r9, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800f740:	9a02      	ldr	r2, [sp, #8]
 800f742:	6892      	ldr	r2, [r2, #8]
 800f744:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
        bufsize--;
 800f748:	f109 39ff 	add.w	r9, r9, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800f74c:	fa22 f209 	lsr.w	r2, r2, r9
        if( ei == 0 && state == 0 )
 800f750:	f012 0201 	ands.w	r2, r2, #1
 800f754:	d113      	bne.n	800f77e <mbedtls_mpi_exp_mod+0x370>
 800f756:	f1b8 0f00 	cmp.w	r8, #0
 800f75a:	f43f af41 	beq.w	800f5e0 <mbedtls_mpi_exp_mod+0x1d2>
        if( ei == 0 && state == 1 )
 800f75e:	f1b8 0f01 	cmp.w	r8, #1
 800f762:	d10c      	bne.n	800f77e <mbedtls_mpi_exp_mod+0x370>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f764:	aa0b      	add	r2, sp, #44	; 0x2c
 800f766:	9200      	str	r2, [sp, #0]
 800f768:	4629      	mov	r1, r5
 800f76a:	4622      	mov	r2, r4
 800f76c:	4628      	mov	r0, r5
 800f76e:	9305      	str	r3, [sp, #20]
 800f770:	f7ff fa3c 	bl	800ebec <mpi_montmul>
 800f774:	4602      	mov	r2, r0
 800f776:	2800      	cmp	r0, #0
 800f778:	d149      	bne.n	800f80e <mbedtls_mpi_exp_mod+0x400>
 800f77a:	9b05      	ldr	r3, [sp, #20]
 800f77c:	e730      	b.n	800f5e0 <mbedtls_mpi_exp_mod+0x1d2>
        nbits++;
 800f77e:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
 800f780:	1bf1      	subs	r1, r6, r7
 800f782:	408a      	lsls	r2, r1
        if( nbits == wsize )
 800f784:	42be      	cmp	r6, r7
        wbits |= ( ei << ( wsize - nbits ) );
 800f786:	ea4a 0a02 	orr.w	sl, sl, r2
        if( nbits == wsize )
 800f78a:	d1d2      	bne.n	800f732 <mbedtls_mpi_exp_mod+0x324>
            for( i = 0; i < wsize; i++ )
 800f78c:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f790:	aa0b      	add	r2, sp, #44	; 0x2c
 800f792:	9200      	str	r2, [sp, #0]
 800f794:	4629      	mov	r1, r5
 800f796:	4622      	mov	r2, r4
 800f798:	4628      	mov	r0, r5
 800f79a:	9305      	str	r3, [sp, #20]
 800f79c:	f7ff fa26 	bl	800ebec <mpi_montmul>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	bba0      	cbnz	r0, 800f80e <mbedtls_mpi_exp_mod+0x400>
            for( i = 0; i < wsize; i++ )
 800f7a4:	f108 0801 	add.w	r8, r8, #1
 800f7a8:	4547      	cmp	r7, r8
 800f7aa:	9b05      	ldr	r3, [sp, #20]
 800f7ac:	d8f0      	bhi.n	800f790 <mbedtls_mpi_exp_mod+0x382>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800f7ae:	aa0b      	add	r2, sp, #44	; 0x2c
 800f7b0:	a814      	add	r0, sp, #80	; 0x50
 800f7b2:	210c      	movs	r1, #12
 800f7b4:	9200      	str	r2, [sp, #0]
 800f7b6:	fb01 010a 	mla	r1, r1, sl, r0
 800f7ba:	4622      	mov	r2, r4
 800f7bc:	4628      	mov	r0, r5
 800f7be:	f7ff fa15 	bl	800ebec <mpi_montmul>
 800f7c2:	4602      	mov	r2, r0
 800f7c4:	bb18      	cbnz	r0, 800f80e <mbedtls_mpi_exp_mod+0x400>
            state--;
 800f7c6:	f8dd 8010 	ldr.w	r8, [sp, #16]
            nbits = 0;
 800f7ca:	4607      	mov	r7, r0
            wbits = 0;
 800f7cc:	4682      	mov	sl, r0
 800f7ce:	e7d4      	b.n	800f77a <mbedtls_mpi_exp_mod+0x36c>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f7d0:	4622      	mov	r2, r4
 800f7d2:	f8cd 8000 	str.w	r8, [sp]
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4628      	mov	r0, r5
 800f7da:	9304      	str	r3, [sp, #16]
 800f7dc:	f7ff fa06 	bl	800ebec <mpi_montmul>
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	b9a0      	cbnz	r0, 800f80e <mbedtls_mpi_exp_mod+0x400>
        wbits <<= 1;
 800f7e4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 800f7e8:	ea19 0f0a 	tst.w	r9, sl
 800f7ec:	9b04      	ldr	r3, [sp, #16]
 800f7ee:	d102      	bne.n	800f7f6 <mbedtls_mpi_exp_mod+0x3e8>
    for( i = 0; i < nbits; i++ )
 800f7f0:	f10b 0b01 	add.w	fp, fp, #1
 800f7f4:	e702      	b.n	800f5fc <mbedtls_mpi_exp_mod+0x1ee>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800f7f6:	4622      	mov	r2, r4
 800f7f8:	f8cd 8000 	str.w	r8, [sp]
 800f7fc:	a917      	add	r1, sp, #92	; 0x5c
 800f7fe:	4628      	mov	r0, r5
 800f800:	9304      	str	r3, [sp, #16]
 800f802:	f7ff f9f3 	bl	800ebec <mpi_montmul>
 800f806:	9b04      	ldr	r3, [sp, #16]
 800f808:	4602      	mov	r2, r0
 800f80a:	2800      	cmp	r0, #0
 800f80c:	d0f0      	beq.n	800f7f0 <mbedtls_mpi_exp_mod+0x3e2>

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800f80e:	1e74      	subs	r4, r6, #1
 800f810:	2301      	movs	r3, #1
 800f812:	fa03 f404 	lsl.w	r4, r3, r4
 800f816:	fa03 f606 	lsl.w	r6, r3, r6
        mbedtls_mpi_free( &W[i] );
 800f81a:	250c      	movs	r5, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800f81c:	42a6      	cmp	r6, r4
 800f81e:	9202      	str	r2, [sp, #8]
 800f820:	d818      	bhi.n	800f854 <mbedtls_mpi_exp_mod+0x446>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800f822:	a817      	add	r0, sp, #92	; 0x5c
 800f824:	f7fe ff8a 	bl	800e73c <mbedtls_mpi_free>
 800f828:	a80b      	add	r0, sp, #44	; 0x2c
 800f82a:	f7fe ff87 	bl	800e73c <mbedtls_mpi_free>
 800f82e:	a80e      	add	r0, sp, #56	; 0x38
 800f830:	f7fe ff84 	bl	800e73c <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800f834:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f838:	9a02      	ldr	r2, [sp, #8]
 800f83a:	b10b      	cbz	r3, 800f840 <mbedtls_mpi_exp_mod+0x432>
 800f83c:	689b      	ldr	r3, [r3, #8]
 800f83e:	b923      	cbnz	r3, 800f84a <mbedtls_mpi_exp_mod+0x43c>
        mbedtls_mpi_free( &RR );
 800f840:	a808      	add	r0, sp, #32
 800f842:	9202      	str	r2, [sp, #8]
 800f844:	f7fe ff7a 	bl	800e73c <mbedtls_mpi_free>
 800f848:	9a02      	ldr	r2, [sp, #8]

    return( ret );
}
 800f84a:	4610      	mov	r0, r2
 800f84c:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 800f850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &W[i] );
 800f854:	ab14      	add	r3, sp, #80	; 0x50
 800f856:	fb05 3004 	mla	r0, r5, r4, r3
 800f85a:	f7fe ff6f 	bl	800e73c <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800f85e:	3401      	adds	r4, #1
 800f860:	9a02      	ldr	r2, [sp, #8]
 800f862:	e7db      	b.n	800f81c <mbedtls_mpi_exp_mod+0x40e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800f864:	f06f 0203 	mvn.w	r2, #3
 800f868:	e7ef      	b.n	800f84a <mbedtls_mpi_exp_mod+0x43c>

0800f86a <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800f86a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86c:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	2701      	movs	r7, #1
{
 800f872:	4605      	mov	r5, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800f874:	a804      	add	r0, sp, #16
    X->n = 0;
 800f876:	e9cd 7301 	strd	r7, r3, [sp, #4]
    X->s = 1;
 800f87a:	e9cd 3703 	strd	r3, r7, [sp, #12]
    X->p = NULL;
 800f87e:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 800f882:	e9cd 7307 	strd	r7, r3, [sp, #28]
{
 800f886:	4616      	mov	r6, r2
    X->p = NULL;
 800f888:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800f88a:	f7fe ffd7 	bl	800e83c <mbedtls_mpi_copy>
 800f88e:	4604      	mov	r4, r0
 800f890:	2800      	cmp	r0, #0
 800f892:	d157      	bne.n	800f944 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800f894:	4631      	mov	r1, r6
 800f896:	a807      	add	r0, sp, #28
 800f898:	f7fe ffd0 	bl	800e83c <mbedtls_mpi_copy>
 800f89c:	4604      	mov	r4, r0
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d150      	bne.n	800f944 <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 800f8a2:	a804      	add	r0, sp, #16
 800f8a4:	f7ff f854 	bl	800e950 <mbedtls_mpi_lsb>
 800f8a8:	4606      	mov	r6, r0
    lzt = mbedtls_mpi_lsb( &TB );
 800f8aa:	a807      	add	r0, sp, #28
 800f8ac:	f7ff f850 	bl	800e950 <mbedtls_mpi_lsb>

    if( lzt < lz )
 800f8b0:	4286      	cmp	r6, r0
 800f8b2:	bf28      	it	cs
 800f8b4:	4606      	movcs	r6, r0
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800f8b6:	4631      	mov	r1, r6
 800f8b8:	a804      	add	r0, sp, #16
 800f8ba:	f7ff f92a 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f8be:	4604      	mov	r4, r0
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d13f      	bne.n	800f944 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	a807      	add	r0, sp, #28
 800f8c8:	f7ff f923 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d138      	bne.n	800f944 <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 800f8d2:	9707      	str	r7, [sp, #28]
 800f8d4:	9704      	str	r7, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	a804      	add	r0, sp, #16
 800f8da:	f7ff fa31 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f8de:	b958      	cbnz	r0, 800f8f8 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800f8e0:	4631      	mov	r1, r6
 800f8e2:	a807      	add	r0, sp, #28
 800f8e4:	f7ff f8c7 	bl	800ea76 <mbedtls_mpi_shift_l>
 800f8e8:	4604      	mov	r4, r0
 800f8ea:	bb58      	cbnz	r0, 800f944 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800f8ec:	a907      	add	r1, sp, #28
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f7fe ffa4 	bl	800e83c <mbedtls_mpi_copy>
 800f8f4:	4604      	mov	r4, r0

cleanup:
 800f8f6:	e025      	b.n	800f944 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800f8f8:	a804      	add	r0, sp, #16
 800f8fa:	f7ff f829 	bl	800e950 <mbedtls_mpi_lsb>
 800f8fe:	4601      	mov	r1, r0
 800f900:	a804      	add	r0, sp, #16
 800f902:	f7ff f906 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f906:	4604      	mov	r4, r0
 800f908:	b9e0      	cbnz	r0, 800f944 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800f90a:	a807      	add	r0, sp, #28
 800f90c:	f7ff f820 	bl	800e950 <mbedtls_mpi_lsb>
 800f910:	4601      	mov	r1, r0
 800f912:	a807      	add	r0, sp, #28
 800f914:	f7ff f8fd 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f918:	4604      	mov	r4, r0
 800f91a:	b998      	cbnz	r0, 800f944 <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800f91c:	a907      	add	r1, sp, #28
 800f91e:	a804      	add	r0, sp, #16
 800f920:	f7ff f9cb 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800f924:	2800      	cmp	r0, #0
 800f926:	db19      	blt.n	800f95c <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800f928:	a904      	add	r1, sp, #16
 800f92a:	aa07      	add	r2, sp, #28
 800f92c:	4608      	mov	r0, r1
 800f92e:	f7ff fa76 	bl	800ee1e <mbedtls_mpi_sub_abs>
 800f932:	4604      	mov	r4, r0
 800f934:	b930      	cbnz	r0, 800f944 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800f936:	2101      	movs	r1, #1
 800f938:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800f93a:	f7ff f8ea 	bl	800eb12 <mbedtls_mpi_shift_r>
 800f93e:	4604      	mov	r4, r0
 800f940:	2800      	cmp	r0, #0
 800f942:	d0c8      	beq.n	800f8d6 <mbedtls_mpi_gcd+0x6c>

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800f944:	a801      	add	r0, sp, #4
 800f946:	f7fe fef9 	bl	800e73c <mbedtls_mpi_free>
 800f94a:	a804      	add	r0, sp, #16
 800f94c:	f7fe fef6 	bl	800e73c <mbedtls_mpi_free>
 800f950:	a807      	add	r0, sp, #28
 800f952:	f7fe fef3 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
}
 800f956:	4620      	mov	r0, r4
 800f958:	b00b      	add	sp, #44	; 0x2c
 800f95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800f95c:	a907      	add	r1, sp, #28
 800f95e:	aa04      	add	r2, sp, #16
 800f960:	4608      	mov	r0, r1
 800f962:	f7ff fa5c 	bl	800ee1e <mbedtls_mpi_sub_abs>
 800f966:	4604      	mov	r4, r0
 800f968:	2800      	cmp	r0, #0
 800f96a:	d1eb      	bne.n	800f944 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800f96c:	2101      	movs	r1, #1
 800f96e:	a807      	add	r0, sp, #28
 800f970:	e7e3      	b.n	800f93a <mbedtls_mpi_gcd+0xd0>

0800f972 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800f972:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800f974:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
 800f978:	4605      	mov	r5, r0
 800f97a:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800f97e:	460c      	mov	r4, r1
 800f980:	4616      	mov	r6, r2
 800f982:	4618      	mov	r0, r3
    if( size > MBEDTLS_MPI_MAX_SIZE )
 800f984:	d80b      	bhi.n	800f99e <mbedtls_mpi_fill_random+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800f986:	460a      	mov	r2, r1
 800f988:	4669      	mov	r1, sp
 800f98a:	47b0      	blx	r6
 800f98c:	b920      	cbnz	r0, 800f998 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800f98e:	4622      	mov	r2, r4
 800f990:	4669      	mov	r1, sp
 800f992:	4628      	mov	r0, r5
 800f994:	f7ff f819 	bl	800e9ca <mbedtls_mpi_read_binary>

cleanup:
    return( ret );
}
 800f998:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800f99c:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800f99e:	f06f 0003 	mvn.w	r0, #3
 800f9a2:	e7f9      	b.n	800f998 <mbedtls_mpi_fill_random+0x26>

0800f9a4 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	4606      	mov	r6, r0
 800f9aa:	b09c      	sub	sp, #112	; 0x70
 800f9ac:	4688      	mov	r8, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800f9ae:	4610      	mov	r0, r2
 800f9b0:	2101      	movs	r1, #1
{
 800f9b2:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800f9b4:	f7ff f9c4 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800f9b8:	2800      	cmp	r0, #0
 800f9ba:	f340 814c 	ble.w	800fc56 <mbedtls_mpi_inv_mod+0x2b2>
    X->n = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	2701      	movs	r7, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800f9c2:	462a      	mov	r2, r5
 800f9c4:	4641      	mov	r1, r8
 800f9c6:	a801      	add	r0, sp, #4
    X->n = 0;
 800f9c8:	e9cd 7304 	strd	r7, r3, [sp, #16]
    X->s = 1;
 800f9cc:	e9cd 3706 	strd	r3, r7, [sp, #24]
    X->p = NULL;
 800f9d0:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 800f9d4:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
    X->s = 1;
 800f9d8:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    X->p = NULL;
 800f9dc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 800f9e0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800f9e4:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
    X->s = 1;
 800f9e8:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
    X->p = NULL;
 800f9ec:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 800f9f0:	e9cd 7316 	strd	r7, r3, [sp, #88]	; 0x58
    X->s = 1;
 800f9f4:	e9cd 3718 	strd	r3, r7, [sp, #96]	; 0x60
    X->p = NULL;
 800f9f8:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800f9fc:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800f9fe:	f7ff ff34 	bl	800f86a <mbedtls_mpi_gcd>
 800fa02:	4604      	mov	r4, r0
 800fa04:	2800      	cmp	r0, #0
 800fa06:	f040 8097 	bne.w	800fb38 <mbedtls_mpi_inv_mod+0x194>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	a801      	add	r0, sp, #4
 800fa0e:	f7ff f997 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800fa12:	2800      	cmp	r0, #0
 800fa14:	f040 811c 	bne.w	800fc50 <mbedtls_mpi_inv_mod+0x2ac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800fa18:	462a      	mov	r2, r5
 800fa1a:	4641      	mov	r1, r8
 800fa1c:	a804      	add	r0, sp, #16
 800fa1e:	f7ff fcc4 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 800fa22:	4604      	mov	r4, r0
 800fa24:	2800      	cmp	r0, #0
 800fa26:	f040 8087 	bne.w	800fb38 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800fa2a:	a904      	add	r1, sp, #16
 800fa2c:	a807      	add	r0, sp, #28
 800fa2e:	f7fe ff05 	bl	800e83c <mbedtls_mpi_copy>
 800fa32:	4604      	mov	r4, r0
 800fa34:	2800      	cmp	r0, #0
 800fa36:	d17f      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800fa38:	4629      	mov	r1, r5
 800fa3a:	a810      	add	r0, sp, #64	; 0x40
 800fa3c:	f7fe fefe 	bl	800e83c <mbedtls_mpi_copy>
 800fa40:	4604      	mov	r4, r0
 800fa42:	2800      	cmp	r0, #0
 800fa44:	d178      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800fa46:	4629      	mov	r1, r5
 800fa48:	a813      	add	r0, sp, #76	; 0x4c
 800fa4a:	f7fe fef7 	bl	800e83c <mbedtls_mpi_copy>
 800fa4e:	4604      	mov	r4, r0
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d171      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800fa54:	4639      	mov	r1, r7
 800fa56:	a80a      	add	r0, sp, #40	; 0x28
 800fa58:	f7fe ff4d 	bl	800e8f6 <mbedtls_mpi_lset>
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d16a      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800fa62:	4601      	mov	r1, r0
 800fa64:	a80d      	add	r0, sp, #52	; 0x34
 800fa66:	f7fe ff46 	bl	800e8f6 <mbedtls_mpi_lset>
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	d163      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800fa70:	4601      	mov	r1, r0
 800fa72:	a816      	add	r0, sp, #88	; 0x58
 800fa74:	f7fe ff3f 	bl	800e8f6 <mbedtls_mpi_lset>
 800fa78:	4604      	mov	r4, r0
 800fa7a:	2800      	cmp	r0, #0
 800fa7c:	d15c      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800fa7e:	4639      	mov	r1, r7
 800fa80:	a819      	add	r0, sp, #100	; 0x64
 800fa82:	f7fe ff38 	bl	800e8f6 <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800fa86:	4604      	mov	r4, r0
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	d155      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
        while( ( TU.p[0] & 1 ) == 0 )
 800fa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	07d8      	lsls	r0, r3, #31
 800fa92:	d53c      	bpl.n	800fb0e <mbedtls_mpi_inv_mod+0x16a>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800fa94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	07db      	lsls	r3, r3, #31
 800fa9a:	f140 8082 	bpl.w	800fba2 <mbedtls_mpi_inv_mod+0x1fe>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800fa9e:	a913      	add	r1, sp, #76	; 0x4c
 800faa0:	a807      	add	r0, sp, #28
 800faa2:	f7ff f90a 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f2c0 80ab 	blt.w	800fc02 <mbedtls_mpi_inv_mod+0x25e>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800faac:	a907      	add	r1, sp, #28
 800faae:	aa13      	add	r2, sp, #76	; 0x4c
 800fab0:	4608      	mov	r0, r1
 800fab2:	f7ff fa13 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fab6:	4604      	mov	r4, r0
 800fab8:	2800      	cmp	r0, #0
 800faba:	d13d      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800fabc:	a90a      	add	r1, sp, #40	; 0x28
 800fabe:	aa16      	add	r2, sp, #88	; 0x58
 800fac0:	4608      	mov	r0, r1
 800fac2:	f7ff fa0b 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fac6:	4604      	mov	r4, r0
 800fac8:	2800      	cmp	r0, #0
 800faca:	d135      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800facc:	aa19      	add	r2, sp, #100	; 0x64
 800face:	a90d      	add	r1, sp, #52	; 0x34
 800fad0:	4608      	mov	r0, r1
 800fad2:	f7ff fa03 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fad6:	4604      	mov	r4, r0
 800fad8:	bb70      	cbnz	r0, 800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800fada:	2100      	movs	r1, #0
 800fadc:	a807      	add	r0, sp, #28
 800fade:	f7ff f92f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d1d2      	bne.n	800fa8c <mbedtls_mpi_inv_mod+0xe8>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800fae6:	2100      	movs	r1, #0
 800fae8:	a816      	add	r0, sp, #88	; 0x58
 800faea:	f7ff f929 	bl	800ed40 <mbedtls_mpi_cmp_int>
 800faee:	2800      	cmp	r0, #0
 800faf0:	f2c0 809a 	blt.w	800fc28 <mbedtls_mpi_inv_mod+0x284>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800faf4:	4629      	mov	r1, r5
 800faf6:	a816      	add	r0, sp, #88	; 0x58
 800faf8:	f7ff f8df 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	f280 809d 	bge.w	800fc3c <mbedtls_mpi_inv_mod+0x298>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800fb02:	a916      	add	r1, sp, #88	; 0x58
 800fb04:	4630      	mov	r0, r6
 800fb06:	f7fe fe99 	bl	800e83c <mbedtls_mpi_copy>
 800fb0a:	4604      	mov	r4, r0

cleanup:
 800fb0c:	e014      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800fb0e:	2101      	movs	r1, #1
 800fb10:	a807      	add	r0, sp, #28
 800fb12:	f7fe fffe 	bl	800eb12 <mbedtls_mpi_shift_r>
 800fb16:	4604      	mov	r4, r0
 800fb18:	b970      	cbnz	r0, 800fb38 <mbedtls_mpi_inv_mod+0x194>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800fb1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	07df      	lsls	r7, r3, #31
 800fb20:	d429      	bmi.n	800fb76 <mbedtls_mpi_inv_mod+0x1d2>
 800fb22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	07dc      	lsls	r4, r3, #31
 800fb28:	d425      	bmi.n	800fb76 <mbedtls_mpi_inv_mod+0x1d2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800fb2a:	2101      	movs	r1, #1
 800fb2c:	a80a      	add	r0, sp, #40	; 0x28
 800fb2e:	f7fe fff0 	bl	800eb12 <mbedtls_mpi_shift_r>
 800fb32:	4604      	mov	r4, r0
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d02f      	beq.n	800fb98 <mbedtls_mpi_inv_mod+0x1f4>

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800fb38:	a804      	add	r0, sp, #16
 800fb3a:	f7fe fdff 	bl	800e73c <mbedtls_mpi_free>
 800fb3e:	a807      	add	r0, sp, #28
 800fb40:	f7fe fdfc 	bl	800e73c <mbedtls_mpi_free>
 800fb44:	a80a      	add	r0, sp, #40	; 0x28
 800fb46:	f7fe fdf9 	bl	800e73c <mbedtls_mpi_free>
 800fb4a:	a80d      	add	r0, sp, #52	; 0x34
 800fb4c:	f7fe fdf6 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800fb50:	a801      	add	r0, sp, #4
 800fb52:	f7fe fdf3 	bl	800e73c <mbedtls_mpi_free>
 800fb56:	a810      	add	r0, sp, #64	; 0x40
 800fb58:	f7fe fdf0 	bl	800e73c <mbedtls_mpi_free>
 800fb5c:	a813      	add	r0, sp, #76	; 0x4c
 800fb5e:	f7fe fded 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800fb62:	a816      	add	r0, sp, #88	; 0x58
 800fb64:	f7fe fdea 	bl	800e73c <mbedtls_mpi_free>
 800fb68:	a819      	add	r0, sp, #100	; 0x64
 800fb6a:	f7fe fde7 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
}
 800fb6e:	4620      	mov	r0, r4
 800fb70:	b01c      	add	sp, #112	; 0x70
 800fb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800fb76:	a90a      	add	r1, sp, #40	; 0x28
 800fb78:	aa10      	add	r2, sp, #64	; 0x40
 800fb7a:	4608      	mov	r0, r1
 800fb7c:	f7ff f98c 	bl	800ee98 <mbedtls_mpi_add_mpi>
 800fb80:	4604      	mov	r4, r0
 800fb82:	2800      	cmp	r0, #0
 800fb84:	d1d8      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800fb86:	a90d      	add	r1, sp, #52	; 0x34
 800fb88:	aa04      	add	r2, sp, #16
 800fb8a:	4608      	mov	r0, r1
 800fb8c:	f7ff f9a6 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fb90:	4604      	mov	r4, r0
 800fb92:	2800      	cmp	r0, #0
 800fb94:	d0c9      	beq.n	800fb2a <mbedtls_mpi_inv_mod+0x186>
 800fb96:	e7cf      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800fb98:	2101      	movs	r1, #1
 800fb9a:	a80d      	add	r0, sp, #52	; 0x34
 800fb9c:	f7fe ffb9 	bl	800eb12 <mbedtls_mpi_shift_r>
 800fba0:	e771      	b.n	800fa86 <mbedtls_mpi_inv_mod+0xe2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800fba2:	2101      	movs	r1, #1
 800fba4:	a813      	add	r0, sp, #76	; 0x4c
 800fba6:	f7fe ffb4 	bl	800eb12 <mbedtls_mpi_shift_r>
 800fbaa:	4604      	mov	r4, r0
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d1c3      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800fbb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	07d9      	lsls	r1, r3, #31
 800fbb6:	d413      	bmi.n	800fbe0 <mbedtls_mpi_inv_mod+0x23c>
 800fbb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	07da      	lsls	r2, r3, #31
 800fbbe:	d40f      	bmi.n	800fbe0 <mbedtls_mpi_inv_mod+0x23c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800fbc0:	2101      	movs	r1, #1
 800fbc2:	a816      	add	r0, sp, #88	; 0x58
 800fbc4:	f7fe ffa5 	bl	800eb12 <mbedtls_mpi_shift_r>
 800fbc8:	4604      	mov	r4, r0
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	d1b4      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800fbce:	2101      	movs	r1, #1
 800fbd0:	a819      	add	r0, sp, #100	; 0x64
 800fbd2:	f7fe ff9e 	bl	800eb12 <mbedtls_mpi_shift_r>
 800fbd6:	4604      	mov	r4, r0
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	f43f af5b 	beq.w	800fa94 <mbedtls_mpi_inv_mod+0xf0>
 800fbde:	e7ab      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800fbe0:	a916      	add	r1, sp, #88	; 0x58
 800fbe2:	aa10      	add	r2, sp, #64	; 0x40
 800fbe4:	4608      	mov	r0, r1
 800fbe6:	f7ff f957 	bl	800ee98 <mbedtls_mpi_add_mpi>
 800fbea:	4604      	mov	r4, r0
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d1a3      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800fbf0:	a919      	add	r1, sp, #100	; 0x64
 800fbf2:	aa04      	add	r2, sp, #16
 800fbf4:	4608      	mov	r0, r1
 800fbf6:	f7ff f971 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d0df      	beq.n	800fbc0 <mbedtls_mpi_inv_mod+0x21c>
 800fc00:	e79a      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800fc02:	a913      	add	r1, sp, #76	; 0x4c
 800fc04:	aa07      	add	r2, sp, #28
 800fc06:	4608      	mov	r0, r1
 800fc08:	f7ff f968 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fc0c:	4604      	mov	r4, r0
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d192      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800fc12:	a916      	add	r1, sp, #88	; 0x58
 800fc14:	aa0a      	add	r2, sp, #40	; 0x28
 800fc16:	4608      	mov	r0, r1
 800fc18:	f7ff f960 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	d18a      	bne.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800fc22:	aa0d      	add	r2, sp, #52	; 0x34
 800fc24:	a919      	add	r1, sp, #100	; 0x64
 800fc26:	e753      	b.n	800fad0 <mbedtls_mpi_inv_mod+0x12c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800fc28:	a916      	add	r1, sp, #88	; 0x58
 800fc2a:	462a      	mov	r2, r5
 800fc2c:	4608      	mov	r0, r1
 800fc2e:	f7ff f933 	bl	800ee98 <mbedtls_mpi_add_mpi>
 800fc32:	4604      	mov	r4, r0
 800fc34:	2800      	cmp	r0, #0
 800fc36:	f43f af56 	beq.w	800fae6 <mbedtls_mpi_inv_mod+0x142>
 800fc3a:	e77d      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800fc3c:	a916      	add	r1, sp, #88	; 0x58
 800fc3e:	462a      	mov	r2, r5
 800fc40:	4608      	mov	r0, r1
 800fc42:	f7ff f94b 	bl	800eedc <mbedtls_mpi_sub_mpi>
 800fc46:	4604      	mov	r4, r0
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	f43f af53 	beq.w	800faf4 <mbedtls_mpi_inv_mod+0x150>
 800fc4e:	e773      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800fc50:	f06f 040d 	mvn.w	r4, #13
 800fc54:	e770      	b.n	800fb38 <mbedtls_mpi_inv_mod+0x194>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800fc56:	f06f 0403 	mvn.w	r4, #3
 800fc5a:	e788      	b.n	800fb6e <mbedtls_mpi_inv_mod+0x1ca>

0800fc5c <mbedtls_cipher_get_block_size>:
 * \return              size of the cipher's blocks, or 0 if ctx has not been
 *                      initialised.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 800fc5c:	b110      	cbz	r0, 800fc64 <mbedtls_cipher_get_block_size+0x8>
 800fc5e:	6800      	ldr	r0, [r0, #0]
 800fc60:	b100      	cbz	r0, 800fc64 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 800fc62:	6940      	ldr	r0, [r0, #20]
}
 800fc64:	4770      	bx	lr

0800fc66 <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 800fc66:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 800fc68:	1a89      	subs	r1, r1, r2
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 800fc6a:	2400      	movs	r4, #0
 800fc6c:	b2e3      	uxtb	r3, r4
 800fc6e:	428b      	cmp	r3, r1
 800fc70:	f104 0401 	add.w	r4, r4, #1
 800fc74:	d300      	bcc.n	800fc78 <add_pkcs_padding+0x12>
        output[data_len + i] = (unsigned char) padding_len;
}
 800fc76:	bd10      	pop	{r4, pc}
        output[data_len + i] = (unsigned char) padding_len;
 800fc78:	4403      	add	r3, r0
 800fc7a:	5499      	strb	r1, [r3, r2]
    for( i = 0; i < padding_len; i++ )
 800fc7c:	e7f6      	b.n	800fc6c <add_pkcs_padding+0x6>
	...

0800fc80 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 800fc80:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800fc82:	b308      	cbz	r0, 800fcc8 <get_pkcs_padding+0x48>
 800fc84:	b302      	cbz	r2, 800fcc8 <get_pkcs_padding+0x48>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800fc86:	1843      	adds	r3, r0, r1
 800fc88:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800fc8c:	fab5 f385 	clz	r3, r5
    *data_len = input_len - padding_len;
 800fc90:	1b4e      	subs	r6, r1, r5
    bad |= padding_len == 0;
 800fc92:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 800fc94:	6016      	str	r6, [r2, #0]
    bad |= padding_len == 0;
 800fc96:	428d      	cmp	r5, r1
 800fc98:	bf88      	it	hi
 800fc9a:	f043 0301 	orrhi.w	r3, r3, #1

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 800fc9e:	2200      	movs	r2, #0
 800fca0:	428a      	cmp	r2, r1
 800fca2:	d104      	bne.n	800fcae <get_pkcs_padding+0x2e>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	4809      	ldr	r0, [pc, #36]	; (800fccc <get_pkcs_padding+0x4c>)
 800fca8:	bf08      	it	eq
 800fcaa:	2000      	moveq	r0, #0
}
 800fcac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 800fcae:	5c84      	ldrb	r4, [r0, r2]
 800fcb0:	4296      	cmp	r6, r2
 800fcb2:	ea84 0405 	eor.w	r4, r4, r5
 800fcb6:	bf8c      	ite	hi
 800fcb8:	2700      	movhi	r7, #0
 800fcba:	2701      	movls	r7, #1
 800fcbc:	fb14 f407 	smulbb	r4, r4, r7
 800fcc0:	4323      	orrs	r3, r4
 800fcc2:	b2db      	uxtb	r3, r3
    for( i = 0; i < input_len; i++ )
 800fcc4:	3201      	adds	r2, #1
 800fcc6:	e7eb      	b.n	800fca0 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fcc8:	4801      	ldr	r0, [pc, #4]	; (800fcd0 <get_pkcs_padding+0x50>)
 800fcca:	e7ef      	b.n	800fcac <get_pkcs_padding+0x2c>
 800fccc:	ffff9e00 	.word	0xffff9e00
 800fcd0:	ffff9f00 	.word	0xffff9f00

0800fcd4 <add_one_and_zeros_padding>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 800fcd4:	2380      	movs	r3, #128	; 0x80
{
 800fcd6:	b530      	push	{r4, r5, lr}
    output[data_len] = 0x80;
 800fcd8:	5483      	strb	r3, [r0, r2]
    size_t padding_len = output_len - data_len;
 800fcda:	1a89      	subs	r1, r1, r2
    for( i = 1; i < padding_len; i++ )
 800fcdc:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 800fcde:	2400      	movs	r4, #0
    for( i = 1; i < padding_len; i++ )
 800fce0:	428b      	cmp	r3, r1
 800fce2:	d300      	bcc.n	800fce6 <add_one_and_zeros_padding+0x12>
}
 800fce4:	bd30      	pop	{r4, r5, pc}
        output[data_len + i] = 0x00;
 800fce6:	18c5      	adds	r5, r0, r3
    for( i = 1; i < padding_len; i++ )
 800fce8:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 800fcea:	54ac      	strb	r4, [r5, r2]
    for( i = 1; i < padding_len; i++ )
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	e7f7      	b.n	800fce0 <add_one_and_zeros_padding+0xc>

0800fcf0 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 800fcf0:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 800fcf2:	2301      	movs	r3, #1
    size_t padding_len = output_len - data_len;
 800fcf4:	1a8d      	subs	r5, r1, r2
        output[data_len + i - 1] = 0x00;
 800fcf6:	2600      	movs	r6, #0
    for( i = 1; i < padding_len; i++ )
 800fcf8:	42ab      	cmp	r3, r5
 800fcfa:	d303      	bcc.n	800fd04 <add_zeros_and_len_padding+0x14>
    output[output_len - 1] = (unsigned char) padding_len;
 800fcfc:	4401      	add	r1, r0
 800fcfe:	f801 5c01 	strb.w	r5, [r1, #-1]
}
 800fd02:	bd70      	pop	{r4, r5, r6, pc}
        output[data_len + i - 1] = 0x00;
 800fd04:	18c4      	adds	r4, r0, r3
 800fd06:	4414      	add	r4, r2
    for( i = 1; i < padding_len; i++ )
 800fd08:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 800fd0a:	f804 6c01 	strb.w	r6, [r4, #-1]
    for( i = 1; i < padding_len; i++ )
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	e7f2      	b.n	800fcf8 <add_zeros_and_len_padding+0x8>
	...

0800fd14 <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 800fd14:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800fd16:	b1f8      	cbz	r0, 800fd58 <get_zeros_and_len_padding+0x44>
 800fd18:	b1f2      	cbz	r2, 800fd58 <get_zeros_and_len_padding+0x44>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800fd1a:	1e4d      	subs	r5, r1, #1
 800fd1c:	5d44      	ldrb	r4, [r0, r5]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800fd1e:	fab4 f384 	clz	r3, r4
    *data_len = input_len - padding_len;
 800fd22:	1b0e      	subs	r6, r1, r4
    bad |= padding_len == 0;
 800fd24:	095b      	lsrs	r3, r3, #5
 800fd26:	428c      	cmp	r4, r1
 800fd28:	bf94      	ite	ls
 800fd2a:	4619      	movls	r1, r3
 800fd2c:	f043 0101 	orrhi.w	r1, r3, #1
    *data_len = input_len - padding_len;
 800fd30:	6016      	str	r6, [r2, #0]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 800fd32:	2300      	movs	r3, #0
 800fd34:	429d      	cmp	r5, r3
 800fd36:	d804      	bhi.n	800fd42 <get_zeros_and_len_padding+0x2e>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fd38:	2900      	cmp	r1, #0
 800fd3a:	4808      	ldr	r0, [pc, #32]	; (800fd5c <get_zeros_and_len_padding+0x48>)
 800fd3c:	bf08      	it	eq
 800fd3e:	2000      	moveq	r0, #0
}
 800fd40:	bd70      	pop	{r4, r5, r6, pc}
        bad |= input[i] * ( i >= pad_idx );
 800fd42:	429e      	cmp	r6, r3
 800fd44:	5cc2      	ldrb	r2, [r0, r3]
 800fd46:	bf8c      	ite	hi
 800fd48:	2400      	movhi	r4, #0
 800fd4a:	2401      	movls	r4, #1
 800fd4c:	fb12 f204 	smulbb	r2, r2, r4
 800fd50:	4311      	orrs	r1, r2
 800fd52:	b2c9      	uxtb	r1, r1
    for( i = 0; i < input_len - 1; i++ )
 800fd54:	3301      	adds	r3, #1
 800fd56:	e7ed      	b.n	800fd34 <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fd58:	4801      	ldr	r0, [pc, #4]	; (800fd60 <get_zeros_and_len_padding+0x4c>)
 800fd5a:	e7f1      	b.n	800fd40 <get_zeros_and_len_padding+0x2c>
 800fd5c:	ffff9e00 	.word	0xffff9e00
 800fd60:	ffff9f00 	.word	0xffff9f00

0800fd64 <add_zeros_padding>:
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 800fd64:	2300      	movs	r3, #0
    for( i = data_len; i < output_len; i++ )
 800fd66:	428a      	cmp	r2, r1
 800fd68:	d300      	bcc.n	800fd6c <add_zeros_padding+0x8>
}
 800fd6a:	4770      	bx	lr
        output[i] = 0x00;
 800fd6c:	5483      	strb	r3, [r0, r2]
    for( i = data_len; i < output_len; i++ )
 800fd6e:	3201      	adds	r2, #1
 800fd70:	e7f9      	b.n	800fd66 <add_zeros_padding+0x2>
	...

0800fd74 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 800fd74:	b118      	cbz	r0, 800fd7e <get_no_padding+0xa>
 800fd76:	b112      	cbz	r2, 800fd7e <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 800fd78:	6011      	str	r1, [r2, #0]

    return( 0 );
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fd7e:	4801      	ldr	r0, [pc, #4]	; (800fd84 <get_no_padding+0x10>)
}
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	ffff9f00 	.word	0xffff9f00

0800fd88 <get_one_and_zeros_padding>:
{
 800fd88:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( NULL == input || NULL == data_len )
 800fd8a:	b320      	cbz	r0, 800fdd6 <get_one_and_zeros_padding+0x4e>
 800fd8c:	b31a      	cbz	r2, 800fdd6 <get_one_and_zeros_padding+0x4e>
    *data_len = 0;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	6013      	str	r3, [r2, #0]
static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
 800fd92:	4408      	add	r0, r1
    bad = 0xFF;
 800fd94:	26ff      	movs	r6, #255	; 0xff
    for( i = input_len; i > 0; i-- )
 800fd96:	b921      	cbnz	r1, 800fda2 <get_one_and_zeros_padding+0x1a>
    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fd98:	2e00      	cmp	r6, #0
 800fd9a:	4810      	ldr	r0, [pc, #64]	; (800fddc <get_one_and_zeros_padding+0x54>)
 800fd9c:	bf08      	it	eq
 800fd9e:	2000      	moveq	r0, #0
}
 800fda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        done |= ( input[i-1] != 0 );
 800fda2:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
 800fda6:	2c00      	cmp	r4, #0
 800fda8:	bf0c      	ite	eq
 800fdaa:	461c      	moveq	r4, r3
 800fdac:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800fdb0:	ea83 0504 	eor.w	r5, r3, r4
        done |= ( input[i-1] != 0 );
 800fdb4:	3901      	subs	r1, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800fdb6:	fb01 f705 	mul.w	r7, r1, r5
 800fdba:	6815      	ldr	r5, [r2, #0]
 800fdbc:	433d      	orrs	r5, r7
 800fdbe:	6015      	str	r5, [r2, #0]
        bad &= ( input[i-1] ^ 0x80 ) | ( done == prev_done );
 800fdc0:	7805      	ldrb	r5, [r0, #0]
 800fdc2:	f085 0580 	eor.w	r5, r5, #128	; 0x80
 800fdc6:	42a3      	cmp	r3, r4
 800fdc8:	bf14      	ite	ne
 800fdca:	462b      	movne	r3, r5
 800fdcc:	f045 0301 	orreq.w	r3, r5, #1
 800fdd0:	401e      	ands	r6, r3
        done |= ( input[i-1] != 0 );
 800fdd2:	4623      	mov	r3, r4
 800fdd4:	e7df      	b.n	800fd96 <get_one_and_zeros_padding+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fdd6:	4802      	ldr	r0, [pc, #8]	; (800fde0 <get_one_and_zeros_padding+0x58>)
 800fdd8:	e7e2      	b.n	800fda0 <get_one_and_zeros_padding+0x18>
 800fdda:	bf00      	nop
 800fddc:	ffff9e00 	.word	0xffff9e00
 800fde0:	ffff9f00 	.word	0xffff9f00

0800fde4 <get_zeros_padding>:
{
 800fde4:	b530      	push	{r4, r5, lr}
    if( NULL == input || NULL == data_len )
 800fde6:	b1a0      	cbz	r0, 800fe12 <get_zeros_padding+0x2e>
 800fde8:	b19a      	cbz	r2, 800fe12 <get_zeros_padding+0x2e>
    *data_len = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	6013      	str	r3, [r2, #0]
    for( i = input_len; i > 0; i-- )
 800fdee:	b909      	cbnz	r1, 800fdf4 <get_zeros_padding+0x10>
 800fdf0:	4608      	mov	r0, r1
}
 800fdf2:	bd30      	pop	{r4, r5, pc}
        done |= ( input[i-1] != 0 );
 800fdf4:	1e4d      	subs	r5, r1, #1
 800fdf6:	5d44      	ldrb	r4, [r0, r5]
 800fdf8:	2c00      	cmp	r4, #0
 800fdfa:	bf0c      	ite	eq
 800fdfc:	461c      	moveq	r4, r3
 800fdfe:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= i * ( done != prev_done );
 800fe02:	4063      	eors	r3, r4
 800fe04:	4359      	muls	r1, r3
 800fe06:	6813      	ldr	r3, [r2, #0]
 800fe08:	4319      	orrs	r1, r3
 800fe0a:	6011      	str	r1, [r2, #0]
        done |= ( input[i-1] != 0 );
 800fe0c:	4623      	mov	r3, r4
    for( i = input_len; i > 0; i-- )
 800fe0e:	4629      	mov	r1, r5
 800fe10:	e7ed      	b.n	800fdee <get_zeros_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800fe12:	4801      	ldr	r0, [pc, #4]	; (800fe18 <get_zeros_padding+0x34>)
 800fe14:	e7ed      	b.n	800fdf2 <get_zeros_padding+0xe>
 800fe16:	bf00      	nop
 800fe18:	ffff9f00 	.word	0xffff9f00

0800fe1c <mbedtls_cipher_info_from_type>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fe1c:	4b04      	ldr	r3, [pc, #16]	; (800fe30 <mbedtls_cipher_info_from_type+0x14>)
 800fe1e:	685a      	ldr	r2, [r3, #4]
 800fe20:	b90a      	cbnz	r2, 800fe26 <mbedtls_cipher_info_from_type+0xa>
}
 800fe22:	4610      	mov	r0, r2
 800fe24:	4770      	bx	lr
        if( def->type == cipher_type )
 800fe26:	7819      	ldrb	r1, [r3, #0]
 800fe28:	4281      	cmp	r1, r0
 800fe2a:	d0fa      	beq.n	800fe22 <mbedtls_cipher_info_from_type+0x6>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fe2c:	3308      	adds	r3, #8
 800fe2e:	e7f6      	b.n	800fe1e <mbedtls_cipher_info_from_type+0x2>
 800fe30:	0802a80c 	.word	0x0802a80c

0800fe34 <mbedtls_cipher_info_from_values>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fe34:	4b08      	ldr	r3, [pc, #32]	; (800fe58 <mbedtls_cipher_info_from_values+0x24>)
{
 800fe36:	b530      	push	{r4, r5, lr}
 800fe38:	4604      	mov	r4, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fe3a:	6858      	ldr	r0, [r3, #4]
 800fe3c:	b900      	cbnz	r0, 800fe40 <mbedtls_cipher_info_from_values+0xc>
}
 800fe3e:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 800fe40:	6985      	ldr	r5, [r0, #24]
 800fe42:	782d      	ldrb	r5, [r5, #0]
 800fe44:	42a5      	cmp	r5, r4
 800fe46:	d105      	bne.n	800fe54 <mbedtls_cipher_info_from_values+0x20>
 800fe48:	6845      	ldr	r5, [r0, #4]
 800fe4a:	428d      	cmp	r5, r1
 800fe4c:	d102      	bne.n	800fe54 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 800fe4e:	7845      	ldrb	r5, [r0, #1]
 800fe50:	4295      	cmp	r5, r2
 800fe52:	d0f4      	beq.n	800fe3e <mbedtls_cipher_info_from_values+0xa>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 800fe54:	3308      	adds	r3, #8
 800fe56:	e7f0      	b.n	800fe3a <mbedtls_cipher_info_from_values+0x6>
 800fe58:	0802a80c 	.word	0x0802a80c

0800fe5c <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 800fe5c:	2240      	movs	r2, #64	; 0x40
 800fe5e:	2100      	movs	r1, #0
 800fe60:	f012 b9ca 	b.w	80221f8 <memset>

0800fe64 <mbedtls_cipher_free>:
{
 800fe64:	b510      	push	{r4, lr}
    if( ctx == NULL )
 800fe66:	4604      	mov	r4, r0
 800fe68:	b150      	cbz	r0, 800fe80 <mbedtls_cipher_free+0x1c>
    if( ctx->cipher_ctx )
 800fe6a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800fe6c:	b118      	cbz	r0, 800fe76 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	699b      	ldr	r3, [r3, #24]
 800fe72:	699b      	ldr	r3, [r3, #24]
 800fe74:	4798      	blx	r3
 800fe76:	f104 0340 	add.w	r3, r4, #64	; 0x40
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	429c      	cmp	r4, r3
 800fe7e:	d100      	bne.n	800fe82 <mbedtls_cipher_free+0x1e>
}
 800fe80:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800fe82:	f804 2b01 	strb.w	r2, [r4], #1
 800fe86:	e7f9      	b.n	800fe7c <mbedtls_cipher_free+0x18>

0800fe88 <mbedtls_cipher_setkey>:
{
 800fe88:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 800fe8a:	b1c8      	cbz	r0, 800fec0 <mbedtls_cipher_setkey+0x38>
 800fe8c:	6804      	ldr	r4, [r0, #0]
 800fe8e:	b1bc      	cbz	r4, 800fec0 <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 800fe90:	6925      	ldr	r5, [r4, #16]
 800fe92:	07ad      	lsls	r5, r5, #30
 800fe94:	d402      	bmi.n	800fe9c <mbedtls_cipher_setkey+0x14>
 800fe96:	6865      	ldr	r5, [r4, #4]
 800fe98:	4295      	cmp	r5, r2
 800fe9a:	d111      	bne.n	800fec0 <mbedtls_cipher_setkey+0x38>
    if( MBEDTLS_ENCRYPT == operation ||
 800fe9c:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 800fe9e:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 800fea0:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 800fea2:	d004      	beq.n	800feae <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800fea4:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 800fea6:	2d03      	cmp	r5, #3
 800fea8:	d001      	beq.n	800feae <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 800feaa:	2d05      	cmp	r5, #5
 800feac:	d104      	bne.n	800feb8 <mbedtls_cipher_setkey+0x30>
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 800feae:	69a3      	ldr	r3, [r4, #24]
 800feb0:	68db      	ldr	r3, [r3, #12]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800feb2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800feb4:	bc30      	pop	{r4, r5}
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800feb6:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 800feb8:	b913      	cbnz	r3, 800fec0 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 800feba:	69a3      	ldr	r3, [r4, #24]
 800febc:	691b      	ldr	r3, [r3, #16]
 800febe:	e7f8      	b.n	800feb2 <mbedtls_cipher_setkey+0x2a>
}
 800fec0:	4801      	ldr	r0, [pc, #4]	; (800fec8 <mbedtls_cipher_setkey+0x40>)
 800fec2:	bc30      	pop	{r4, r5}
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	ffff9f00 	.word	0xffff9f00

0800fecc <mbedtls_cipher_set_iv>:
{
 800fecc:	b538      	push	{r3, r4, r5, lr}
 800fece:	4614      	mov	r4, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 800fed0:	4605      	mov	r5, r0
 800fed2:	b1a8      	cbz	r0, 800ff00 <mbedtls_cipher_set_iv+0x34>
 800fed4:	6803      	ldr	r3, [r0, #0]
 800fed6:	b19b      	cbz	r3, 800ff00 <mbedtls_cipher_set_iv+0x34>
 800fed8:	b191      	cbz	r1, 800ff00 <mbedtls_cipher_set_iv+0x34>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 800feda:	2a10      	cmp	r2, #16
 800fedc:	d80e      	bhi.n	800fefc <mbedtls_cipher_set_iv+0x30>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 800fede:	691a      	ldr	r2, [r3, #16]
 800fee0:	07d2      	lsls	r2, r2, #31
 800fee2:	d403      	bmi.n	800feec <mbedtls_cipher_set_iv+0x20>
        actual_iv_size = ctx->cipher_info->iv_size;
 800fee4:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 800fee6:	429c      	cmp	r4, r3
 800fee8:	d30a      	bcc.n	800ff00 <mbedtls_cipher_set_iv+0x34>
 800feea:	461c      	mov	r4, r3
    memcpy( ctx->iv, iv, actual_iv_size );
 800feec:	4622      	mov	r2, r4
 800feee:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fef2:	f012 f959 	bl	80221a8 <memcpy>
    ctx->iv_size = actual_iv_size;
 800fef6:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 800fef8:	2000      	movs	r0, #0
}
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800fefc:	4801      	ldr	r0, [pc, #4]	; (800ff04 <mbedtls_cipher_set_iv+0x38>)
 800fefe:	e7fc      	b.n	800fefa <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff00:	4801      	ldr	r0, [pc, #4]	; (800ff08 <mbedtls_cipher_set_iv+0x3c>)
 800ff02:	e7fa      	b.n	800fefa <mbedtls_cipher_set_iv+0x2e>
 800ff04:	ffff9f80 	.word	0xffff9f80
 800ff08:	ffff9f00 	.word	0xffff9f00

0800ff0c <mbedtls_cipher_reset>:
    if( NULL == ctx || NULL == ctx->cipher_info )
 800ff0c:	b128      	cbz	r0, 800ff1a <mbedtls_cipher_reset+0xe>
 800ff0e:	6803      	ldr	r3, [r0, #0]
 800ff10:	b11b      	cbz	r3, 800ff1a <mbedtls_cipher_reset+0xe>
    ctx->unprocessed_len = 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 800ff16:	4618      	mov	r0, r3
 800ff18:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff1a:	4801      	ldr	r0, [pc, #4]	; (800ff20 <mbedtls_cipher_reset+0x14>)
}
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	ffff9f00 	.word	0xffff9f00

0800ff24 <mbedtls_cipher_update>:
{
 800ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff28:	b085      	sub	sp, #20
 800ff2a:	4615      	mov	r5, r2
 800ff2c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800ff30:	9103      	str	r1, [sp, #12]
 800ff32:	4699      	mov	r9, r3
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800ff34:	4604      	mov	r4, r0
 800ff36:	b918      	cbnz	r0, 800ff40 <mbedtls_cipher_update+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff38:	485f      	ldr	r0, [pc, #380]	; (80100b8 <mbedtls_cipher_update+0x194>)
}
 800ff3a:	b005      	add	sp, #20
 800ff3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 800ff40:	6802      	ldr	r2, [r0, #0]
 800ff42:	2a00      	cmp	r2, #0
 800ff44:	d0f8      	beq.n	800ff38 <mbedtls_cipher_update+0x14>
 800ff46:	f1ba 0f00 	cmp.w	sl, #0
 800ff4a:	d0f5      	beq.n	800ff38 <mbedtls_cipher_update+0x14>
    *olen = 0;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f8ca 3000 	str.w	r3, [sl]
    block_size = mbedtls_cipher_get_block_size( ctx );
 800ff52:	f7ff fe83 	bl	800fc5c <mbedtls_cipher_get_block_size>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800ff56:	7853      	ldrb	r3, [r2, #1]
 800ff58:	2b01      	cmp	r3, #1
    block_size = mbedtls_cipher_get_block_size( ctx );
 800ff5a:	4606      	mov	r6, r0
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 800ff5c:	d110      	bne.n	800ff80 <mbedtls_cipher_update+0x5c>
        if( ilen != block_size )
 800ff5e:	42a8      	cmp	r0, r5
 800ff60:	f040 80a3 	bne.w	80100aa <mbedtls_cipher_update+0x186>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800ff64:	6993      	ldr	r3, [r2, #24]
        *olen = ilen;
 800ff66:	f8ca 0000 	str.w	r0, [sl]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800ff6a:	685d      	ldr	r5, [r3, #4]
 800ff6c:	9a03      	ldr	r2, [sp, #12]
 800ff6e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 800ff72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ff74:	464b      	mov	r3, r9
 800ff76:	46ac      	mov	ip, r5
}
 800ff78:	b005      	add	sp, #20
 800ff7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 800ff7e:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800ff80:	2b06      	cmp	r3, #6
 800ff82:	d10a      	bne.n	800ff9a <mbedtls_cipher_update+0x76>
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800ff84:	9a03      	ldr	r2, [sp, #12]
 800ff86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 800ff88:	f8ca 5000 	str.w	r5, [sl]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800ff8c:	464b      	mov	r3, r9
 800ff8e:	4629      	mov	r1, r5
}
 800ff90:	b005      	add	sp, #20
 800ff92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 800ff96:	f004 b90d 	b.w	80141b4 <mbedtls_gcm_update>
    if ( 0 == block_size )
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	f000 8087 	beq.w	80100ae <mbedtls_cipher_update+0x18a>
    if( input == output &&
 800ffa0:	9a03      	ldr	r2, [sp, #12]
 800ffa2:	454a      	cmp	r2, r9
 800ffa4:	d108      	bne.n	800ffb8 <mbedtls_cipher_update+0x94>
 800ffa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ffa8:	2a00      	cmp	r2, #0
 800ffaa:	d1c5      	bne.n	800ff38 <mbedtls_cipher_update+0x14>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 800ffac:	fbb5 f2f0 	udiv	r2, r5, r0
 800ffb0:	fb00 5212 	mls	r2, r0, r2, r5
 800ffb4:	2a00      	cmp	r2, #0
 800ffb6:	d1bf      	bne.n	800ff38 <mbedtls_cipher_update+0x14>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d17a      	bne.n	80100b2 <mbedtls_cipher_update+0x18e>
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800ffbc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800ffc0:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 800ffc4:	b97b      	cbnz	r3, 800ffe6 <mbedtls_cipher_update+0xc2>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800ffc6:	eba6 0308 	sub.w	r3, r6, r8
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 800ffca:	42ab      	cmp	r3, r5
 800ffcc:	d311      	bcc.n	800fff2 <mbedtls_cipher_update+0xce>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800ffce:	f108 0014 	add.w	r0, r8, #20
 800ffd2:	462a      	mov	r2, r5
 800ffd4:	9903      	ldr	r1, [sp, #12]
 800ffd6:	4420      	add	r0, r4
 800ffd8:	f012 f8e6 	bl	80221a8 <memcpy>
            ctx->unprocessed_len += ilen;
 800ffdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ffde:	442a      	add	r2, r5
 800ffe0:	6262      	str	r2, [r4, #36]	; 0x24
        return( 0 );
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	e7a9      	b.n	800ff3a <mbedtls_cipher_update+0x16>
                ilen <= block_size - ctx->unprocessed_len ) ||
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d103      	bne.n	800fff2 <mbedtls_cipher_update+0xce>
                ilen < block_size - ctx->unprocessed_len ) )
 800ffea:	eba6 0308 	sub.w	r3, r6, r8
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 800ffee:	42ab      	cmp	r3, r5
 800fff0:	d8ed      	bhi.n	800ffce <mbedtls_cipher_update+0xaa>
        if( 0 != ctx->unprocessed_len )
 800fff2:	f1b8 0f00 	cmp.w	r8, #0
 800fff6:	d025      	beq.n	8010044 <mbedtls_cipher_update+0x120>
            copy_len = block_size - ctx->unprocessed_len;
 800fff8:	eba6 0b08 	sub.w	fp, r6, r8
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800fffc:	f108 0014 	add.w	r0, r8, #20
 8010000:	9903      	ldr	r1, [sp, #12]
 8010002:	465a      	mov	r2, fp
 8010004:	4420      	add	r0, r4
 8010006:	f012 f8cf 	bl	80221a8 <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 801000a:	4623      	mov	r3, r4
 801000c:	f853 2b14 	ldr.w	r2, [r3], #20
 8010010:	6992      	ldr	r2, [r2, #24]
 8010012:	e9cd 3900 	strd	r3, r9, [sp]
 8010016:	6893      	ldr	r3, [r2, #8]
 8010018:	f994 1008 	ldrsb.w	r1, [r4, #8]
 801001c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801001e:	461f      	mov	r7, r3
 8010020:	4632      	mov	r2, r6
 8010022:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8010026:	47b8      	blx	r7
 8010028:	2800      	cmp	r0, #0
 801002a:	d186      	bne.n	800ff3a <mbedtls_cipher_update+0x16>
            *olen += block_size;
 801002c:	f8da 3000 	ldr.w	r3, [sl]
 8010030:	4433      	add	r3, r6
 8010032:	f8ca 3000 	str.w	r3, [sl]
            input += copy_len;
 8010036:	9b03      	ldr	r3, [sp, #12]
            ctx->unprocessed_len = 0;
 8010038:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 801003a:	445b      	add	r3, fp
 801003c:	4445      	add	r5, r8
            output += block_size;
 801003e:	44b1      	add	r9, r6
            input += copy_len;
 8010040:	9303      	str	r3, [sp, #12]
            ilen -= copy_len;
 8010042:	1bad      	subs	r5, r5, r6
        if( 0 != ilen )
 8010044:	2d00      	cmp	r5, #0
 8010046:	d0cc      	beq.n	800ffe2 <mbedtls_cipher_update+0xbe>
            copy_len = ilen % block_size;
 8010048:	fbb5 f8f6 	udiv	r8, r5, r6
 801004c:	fb06 5818 	mls	r8, r6, r8, r5
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 8010050:	f1b8 0f00 	cmp.w	r8, #0
 8010054:	d104      	bne.n	8010060 <mbedtls_cipher_update+0x13c>
 8010056:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	bf08      	it	eq
 801005e:	46b0      	moveq	r8, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	eba5 0508 	sub.w	r5, r5, r8
 8010066:	4642      	mov	r2, r8
 8010068:	1959      	adds	r1, r3, r5
 801006a:	f104 0014 	add.w	r0, r4, #20
 801006e:	f012 f89b 	bl	80221a8 <memcpy>
            ctx->unprocessed_len += copy_len;
 8010072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010074:	4442      	add	r2, r8
 8010076:	6262      	str	r2, [r4, #36]	; 0x24
        if( ilen )
 8010078:	2d00      	cmp	r5, #0
 801007a:	d0b2      	beq.n	800ffe2 <mbedtls_cipher_update+0xbe>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 801007c:	6823      	ldr	r3, [r4, #0]
 801007e:	9a03      	ldr	r2, [sp, #12]
 8010080:	699b      	ldr	r3, [r3, #24]
 8010082:	9200      	str	r2, [sp, #0]
 8010084:	f8cd 9004 	str.w	r9, [sp, #4]
 8010088:	689e      	ldr	r6, [r3, #8]
 801008a:	f994 1008 	ldrsb.w	r1, [r4, #8]
 801008e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010090:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8010094:	462a      	mov	r2, r5
 8010096:	47b0      	blx	r6
 8010098:	2800      	cmp	r0, #0
 801009a:	f47f af4e 	bne.w	800ff3a <mbedtls_cipher_update+0x16>
            *olen += ilen;
 801009e:	f8da 2000 	ldr.w	r2, [sl]
 80100a2:	4415      	add	r5, r2
 80100a4:	f8ca 5000 	str.w	r5, [sl]
 80100a8:	e747      	b.n	800ff3a <mbedtls_cipher_update+0x16>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80100aa:	4804      	ldr	r0, [pc, #16]	; (80100bc <mbedtls_cipher_update+0x198>)
 80100ac:	e745      	b.n	800ff3a <mbedtls_cipher_update+0x16>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 80100ae:	4804      	ldr	r0, [pc, #16]	; (80100c0 <mbedtls_cipher_update+0x19c>)
 80100b0:	e743      	b.n	800ff3a <mbedtls_cipher_update+0x16>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80100b2:	4804      	ldr	r0, [pc, #16]	; (80100c4 <mbedtls_cipher_update+0x1a0>)
 80100b4:	e741      	b.n	800ff3a <mbedtls_cipher_update+0x16>
 80100b6:	bf00      	nop
 80100b8:	ffff9f00 	.word	0xffff9f00
 80100bc:	ffff9d80 	.word	0xffff9d80
 80100c0:	ffff9c80 	.word	0xffff9c80
 80100c4:	ffff9f80 	.word	0xffff9f80

080100c8 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 80100c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100ca:	460e      	mov	r6, r1
 80100cc:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 80100ce:	4604      	mov	r4, r0
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d055      	beq.n	8010180 <mbedtls_cipher_finish+0xb8>
 80100d4:	6801      	ldr	r1, [r0, #0]
 80100d6:	2900      	cmp	r1, #0
 80100d8:	d052      	beq.n	8010180 <mbedtls_cipher_finish+0xb8>
 80100da:	2a00      	cmp	r2, #0
 80100dc:	d050      	beq.n	8010180 <mbedtls_cipher_finish+0xb8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80100e2:	784a      	ldrb	r2, [r1, #1]
 80100e4:	2a03      	cmp	r2, #3
 80100e6:	d009      	beq.n	80100fc <mbedtls_cipher_finish+0x34>
 80100e8:	1f57      	subs	r7, r2, #5
 80100ea:	2f02      	cmp	r7, #2
 80100ec:	d906      	bls.n	80100fc <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 80100ee:	2a01      	cmp	r2, #1
 80100f0:	d107      	bne.n	8010102 <mbedtls_cipher_finish+0x3a>
    {
        if( ctx->unprocessed_len != 0 )
 80100f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80100f4:	2b00      	cmp	r3, #0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80100f6:	4b24      	ldr	r3, [pc, #144]	; (8010188 <mbedtls_cipher_finish+0xc0>)
 80100f8:	bf08      	it	eq
 80100fa:	2300      	moveq	r3, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	b003      	add	sp, #12
 8010100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8010102:	2a02      	cmp	r2, #2
 8010104:	d13e      	bne.n	8010184 <mbedtls_cipher_finish+0xbc>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 8010106:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801010a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801010c:	2b01      	cmp	r3, #1
 801010e:	d12c      	bne.n	801016a <mbedtls_cipher_finish+0xa2>
            if( NULL == ctx->add_padding )
 8010110:	68c7      	ldr	r7, [r0, #12]
 8010112:	b90f      	cbnz	r7, 8010118 <mbedtls_cipher_finish+0x50>
                if( 0 != ctx->unprocessed_len )
 8010114:	2a00      	cmp	r2, #0
 8010116:	e7ee      	b.n	80100f6 <mbedtls_cipher_finish+0x2e>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 8010118:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 801011a:	3014      	adds	r0, #20
 801011c:	b31b      	cbz	r3, 8010166 <mbedtls_cipher_finish+0x9e>
        return (int) ctx->iv_size;
 801011e:	4619      	mov	r1, r3
 8010120:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8010122:	4620      	mov	r0, r4
 8010124:	f7ff fd9a 	bl	800fc5c <mbedtls_cipher_get_block_size>
 8010128:	4623      	mov	r3, r4
 801012a:	4602      	mov	r2, r0
 801012c:	f853 1b14 	ldr.w	r1, [r3], #20
 8010130:	6989      	ldr	r1, [r1, #24]
 8010132:	e9cd 3600 	strd	r3, r6, [sp]
 8010136:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801013a:	688f      	ldr	r7, [r1, #8]
 801013c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801013e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8010142:	47b8      	blx	r7
 8010144:	4603      	mov	r3, r0
 8010146:	2800      	cmp	r0, #0
 8010148:	d1d8      	bne.n	80100fc <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 801014a:	4620      	mov	r0, r4
 801014c:	f7ff fd86 	bl	800fc5c <mbedtls_cipher_get_block_size>
 8010150:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8010154:	4601      	mov	r1, r0
 8010156:	b98a      	cbnz	r2, 801017c <mbedtls_cipher_finish+0xb4>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8010158:	6923      	ldr	r3, [r4, #16]
 801015a:	462a      	mov	r2, r5
 801015c:	4630      	mov	r0, r6
}
 801015e:	b003      	add	sp, #12
 8010160:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8010164:	4718      	bx	r3

    return (int) ctx->cipher_info->iv_size;
 8010166:	68c9      	ldr	r1, [r1, #12]
 8010168:	e7da      	b.n	8010120 <mbedtls_cipher_finish+0x58>
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 801016a:	f7ff fd77 	bl	800fc5c <mbedtls_cipher_get_block_size>
 801016e:	4290      	cmp	r0, r2
 8010170:	d0d7      	beq.n	8010122 <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 8010172:	68e3      	ldr	r3, [r4, #12]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d0cd      	beq.n	8010114 <mbedtls_cipher_finish+0x4c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8010178:	4b03      	ldr	r3, [pc, #12]	; (8010188 <mbedtls_cipher_finish+0xc0>)
 801017a:	e7bf      	b.n	80100fc <mbedtls_cipher_finish+0x34>
        *olen = mbedtls_cipher_get_block_size( ctx );
 801017c:	6028      	str	r0, [r5, #0]
        return( 0 );
 801017e:	e7bd      	b.n	80100fc <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010180:	4b02      	ldr	r3, [pc, #8]	; (801018c <mbedtls_cipher_finish+0xc4>)
 8010182:	e7bb      	b.n	80100fc <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8010184:	4b02      	ldr	r3, [pc, #8]	; (8010190 <mbedtls_cipher_finish+0xc8>)
 8010186:	e7b9      	b.n	80100fc <mbedtls_cipher_finish+0x34>
 8010188:	ffff9d80 	.word	0xffff9d80
 801018c:	ffff9f00 	.word	0xffff9f00
 8010190:	ffff9f80 	.word	0xffff9f80

08010194 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 8010194:	b308      	cbz	r0, 80101da <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8010196:	6803      	ldr	r3, [r0, #0]
    if( NULL == ctx ||
 8010198:	785b      	ldrb	r3, [r3, #1]
 801019a:	2b02      	cmp	r3, #2
 801019c:	d11d      	bne.n	80101da <mbedtls_cipher_set_padding_mode+0x46>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 801019e:	2904      	cmp	r1, #4
 80101a0:	d81d      	bhi.n	80101de <mbedtls_cipher_set_padding_mode+0x4a>
 80101a2:	e8df f001 	tbb	[pc, r1]
 80101a6:	0903      	.short	0x0903
 80101a8:	110d      	.short	0x110d
 80101aa:	15          	.byte	0x15
 80101ab:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 80101ac:	4b0d      	ldr	r3, [pc, #52]	; (80101e4 <mbedtls_cipher_set_padding_mode+0x50>)
 80101ae:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 80101b0:	4b0d      	ldr	r3, [pc, #52]	; (80101e8 <mbedtls_cipher_set_padding_mode+0x54>)
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
 80101b2:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80101b4:	2000      	movs	r0, #0
        break;
 80101b6:	4770      	bx	lr
        ctx->add_padding = add_one_and_zeros_padding;
 80101b8:	4b0c      	ldr	r3, [pc, #48]	; (80101ec <mbedtls_cipher_set_padding_mode+0x58>)
 80101ba:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 80101bc:	4b0c      	ldr	r3, [pc, #48]	; (80101f0 <mbedtls_cipher_set_padding_mode+0x5c>)
 80101be:	e7f8      	b.n	80101b2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_and_len_padding;
 80101c0:	4b0c      	ldr	r3, [pc, #48]	; (80101f4 <mbedtls_cipher_set_padding_mode+0x60>)
 80101c2:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 80101c4:	4b0c      	ldr	r3, [pc, #48]	; (80101f8 <mbedtls_cipher_set_padding_mode+0x64>)
 80101c6:	e7f4      	b.n	80101b2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
 80101c8:	4b0c      	ldr	r3, [pc, #48]	; (80101fc <mbedtls_cipher_set_padding_mode+0x68>)
 80101ca:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 80101cc:	4b0c      	ldr	r3, [pc, #48]	; (8010200 <mbedtls_cipher_set_padding_mode+0x6c>)
 80101ce:	e7f0      	b.n	80101b2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->get_padding = get_no_padding;
 80101d0:	4a0c      	ldr	r2, [pc, #48]	; (8010204 <mbedtls_cipher_set_padding_mode+0x70>)
 80101d2:	6102      	str	r2, [r0, #16]
        ctx->add_padding = NULL;
 80101d4:	2300      	movs	r3, #0
 80101d6:	60c3      	str	r3, [r0, #12]
        break;
 80101d8:	e7ec      	b.n	80101b4 <mbedtls_cipher_set_padding_mode+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80101da:	480b      	ldr	r0, [pc, #44]	; (8010208 <mbedtls_cipher_set_padding_mode+0x74>)
 80101dc:	4770      	bx	lr
    if( NULL == ctx ||
 80101de:	480b      	ldr	r0, [pc, #44]	; (801020c <mbedtls_cipher_set_padding_mode+0x78>)
}
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	0800fc67 	.word	0x0800fc67
 80101e8:	0800fc81 	.word	0x0800fc81
 80101ec:	0800fcd5 	.word	0x0800fcd5
 80101f0:	0800fd89 	.word	0x0800fd89
 80101f4:	0800fcf1 	.word	0x0800fcf1
 80101f8:	0800fd15 	.word	0x0800fd15
 80101fc:	0800fd65 	.word	0x0800fd65
 8010200:	0800fde5 	.word	0x0800fde5
 8010204:	0800fd75 	.word	0x0800fd75
 8010208:	ffff9f00 	.word	0xffff9f00
 801020c:	ffff9f80 	.word	0xffff9f80

08010210 <mbedtls_cipher_setup>:
{
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 8010214:	460d      	mov	r5, r1
 8010216:	b181      	cbz	r1, 801023a <mbedtls_cipher_setup+0x2a>
 8010218:	b178      	cbz	r0, 801023a <mbedtls_cipher_setup+0x2a>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 801021a:	2240      	movs	r2, #64	; 0x40
 801021c:	2100      	movs	r1, #0
 801021e:	f011 ffeb 	bl	80221f8 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8010222:	69ab      	ldr	r3, [r5, #24]
 8010224:	695b      	ldr	r3, [r3, #20]
 8010226:	4798      	blx	r3
 8010228:	63e0      	str	r0, [r4, #60]	; 0x3c
 801022a:	b140      	cbz	r0, 801023e <mbedtls_cipher_setup+0x2e>
    ctx->cipher_info = cipher_info;
 801022c:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 801022e:	2100      	movs	r1, #0
 8010230:	4620      	mov	r0, r4
 8010232:	f7ff ffaf 	bl	8010194 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 8010236:	2000      	movs	r0, #0
}
 8010238:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801023a:	4802      	ldr	r0, [pc, #8]	; (8010244 <mbedtls_cipher_setup+0x34>)
 801023c:	e7fc      	b.n	8010238 <mbedtls_cipher_setup+0x28>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 801023e:	4802      	ldr	r0, [pc, #8]	; (8010248 <mbedtls_cipher_setup+0x38>)
 8010240:	e7fa      	b.n	8010238 <mbedtls_cipher_setup+0x28>
 8010242:	bf00      	nop
 8010244:	ffff9f00 	.word	0xffff9f00
 8010248:	ffff9e80 	.word	0xffff9e80

0801024c <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 801024c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801024e:	b085      	sub	sp, #20
 8010250:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8010254:	4604      	mov	r4, r0
 8010256:	461e      	mov	r6, r3
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8010258:	f7ff fe38 	bl	800fecc <mbedtls_cipher_set_iv>
 801025c:	b9b0      	cbnz	r0, 801028c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 801025e:	4620      	mov	r0, r4
 8010260:	f7ff fe54 	bl	800ff0c <mbedtls_cipher_reset>
 8010264:	b990      	cbnz	r0, 801028c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 8010266:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010268:	9500      	str	r5, [sp, #0]
 801026a:	463b      	mov	r3, r7
 801026c:	4631      	mov	r1, r6
 801026e:	4620      	mov	r0, r4
 8010270:	f7ff fe58 	bl	800ff24 <mbedtls_cipher_update>
 8010274:	b950      	cbnz	r0, 801028c <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 8010276:	6829      	ldr	r1, [r5, #0]
 8010278:	aa03      	add	r2, sp, #12
 801027a:	4439      	add	r1, r7
 801027c:	4620      	mov	r0, r4
 801027e:	f7ff ff23 	bl	80100c8 <mbedtls_cipher_finish>
 8010282:	b918      	cbnz	r0, 801028c <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 8010284:	682b      	ldr	r3, [r5, #0]
 8010286:	9a03      	ldr	r2, [sp, #12]
 8010288:	4413      	add	r3, r2
 801028a:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 801028c:	b005      	add	sp, #20
 801028e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010290 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 8010290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8010294:	6807      	ldr	r7, [r0, #0]
{
 8010296:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 801029a:	787f      	ldrb	r7, [r7, #1]
 801029c:	2f06      	cmp	r7, #6
{
 801029e:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80102a2:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80102a6:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80102aa:	d110      	bne.n	80102ce <mbedtls_cipher_auth_encrypt+0x3e>
    {
        *olen = ilen;
 80102ac:	f8c9 4000 	str.w	r4, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 80102b0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80102b4:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 80102b8:	e9cd 6c0a 	strd	r6, ip, [sp, #40]	; 0x28
 80102bc:	9207      	str	r2, [sp, #28]
 80102be:	460b      	mov	r3, r1
 80102c0:	4622      	mov	r2, r4
 80102c2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 80102c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 80102c8:	2101      	movs	r1, #1
 80102ca:	f004 b850 	b.w	801436e <mbedtls_gcm_crypt_and_tag>
}
 80102ce:	4801      	ldr	r0, [pc, #4]	; (80102d4 <mbedtls_cipher_auth_encrypt+0x44>)
 80102d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102d4:	ffff9f80 	.word	0xffff9f80

080102d8 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 80102d8:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80102da:	6805      	ldr	r5, [r0, #0]
 80102dc:	786d      	ldrb	r5, [r5, #1]
{
 80102de:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80102e0:	2d06      	cmp	r5, #6
{
 80102e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80102e4:	d119      	bne.n	801031a <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
 80102e6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80102e8:	602c      	str	r4, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 80102ea:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80102ec:	9505      	str	r5, [sp, #20]
 80102ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80102f0:	9504      	str	r5, [sp, #16]
 80102f2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80102f4:	9503      	str	r5, [sp, #12]
 80102f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80102f8:	9502      	str	r5, [sp, #8]
 80102fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80102fc:	e9cd 3500 	strd	r3, r5, [sp]
 8010300:	4613      	mov	r3, r2
 8010302:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010304:	460a      	mov	r2, r1
 8010306:	4621      	mov	r1, r4
 8010308:	f004 f854 	bl	80143b4 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 801030c:	4b04      	ldr	r3, [pc, #16]	; (8010320 <mbedtls_cipher_auth_decrypt+0x48>)
 801030e:	f110 0f12 	cmn.w	r0, #18
 8010312:	bf08      	it	eq
 8010314:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8010316:	b007      	add	sp, #28
 8010318:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 801031a:	4802      	ldr	r0, [pc, #8]	; (8010324 <mbedtls_cipher_auth_decrypt+0x4c>)
 801031c:	e7fb      	b.n	8010316 <mbedtls_cipher_auth_decrypt+0x3e>
 801031e:	bf00      	nop
 8010320:	ffff9d00 	.word	0xffff9d00
 8010324:	ffff9f80 	.word	0xffff9f80

08010328 <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8010328:	b510      	push	{r4, lr}
 801032a:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 801032c:	f004 f86e 	bl	801440c <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8010330:	4b02      	ldr	r3, [pc, #8]	; (801033c <gcm_ctx_free+0x14>)
 8010332:	4620      	mov	r0, r4
 8010334:	681b      	ldr	r3, [r3, #0]
}
 8010336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801033a:	4718      	bx	r3
 801033c:	2000053c 	.word	0x2000053c

08010340 <gcm_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010340:	4b06      	ldr	r3, [pc, #24]	; (801035c <gcm_ctx_alloc+0x1c>)
{
 8010342:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f44f 71c4 	mov.w	r1, #392	; 0x188
 801034a:	2001      	movs	r0, #1
 801034c:	4798      	blx	r3
    if( ctx != NULL )
 801034e:	4604      	mov	r4, r0
 8010350:	b108      	cbz	r0, 8010356 <gcm_ctx_alloc+0x16>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8010352:	f003 fddd 	bl	8013f10 <mbedtls_gcm_init>
}
 8010356:	4620      	mov	r0, r4
 8010358:	bd10      	pop	{r4, pc}
 801035a:	bf00      	nop
 801035c:	20000538 	.word	0x20000538

08010360 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8010360:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8010362:	460a      	mov	r2, r1
 8010364:	2102      	movs	r1, #2
 8010366:	f003 bdd8 	b.w	8013f1a <mbedtls_gcm_setkey>
	...

0801036c <aes_ctx_free>:
{
 801036c:	b510      	push	{r4, lr}
 801036e:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8010370:	f7fc ffff 	bl	800d372 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8010374:	4b02      	ldr	r3, [pc, #8]	; (8010380 <aes_ctx_free+0x14>)
 8010376:	4620      	mov	r0, r4
 8010378:	681b      	ldr	r3, [r3, #0]
}
 801037a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801037e:	4718      	bx	r3
 8010380:	2000053c 	.word	0x2000053c

08010384 <aes_ctx_alloc>:
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8010384:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <aes_ctx_alloc+0x1c>)
{
 8010386:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801038e:	2001      	movs	r0, #1
 8010390:	4798      	blx	r3
    if( aes == NULL )
 8010392:	4604      	mov	r4, r0
 8010394:	b108      	cbz	r0, 801039a <aes_ctx_alloc+0x16>
    mbedtls_aes_init( aes );
 8010396:	f7fc ffe7 	bl	800d368 <mbedtls_aes_init>
}
 801039a:	4620      	mov	r0, r4
 801039c:	bd10      	pop	{r4, pc}
 801039e:	bf00      	nop
 80103a0:	20000538 	.word	0x20000538

080103a4 <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80103a4:	f7fd b8e4 	b.w	800d570 <mbedtls_aes_setkey_dec>

080103a8 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80103a8:	f7fc bfee 	b.w	800d388 <mbedtls_aes_setkey_enc>

080103ac <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 80103ac:	f7fd bd01 	b.w	800ddb2 <mbedtls_aes_crypt_cbc>

080103b0 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80103b0:	f7fd bcf1 	b.w	800dd96 <mbedtls_aes_crypt_ecb>

080103b4 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 80103b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_aes_context aes_ctx;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80103b8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 80103bc:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 80103c0:	4604      	mov	r4, r0
 80103c2:	460f      	mov	r7, r1
 80103c4:	4616      	mov	r6, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80103c6:	d87b      	bhi.n	80104c0 <block_cipher_df+0x10c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 80103c8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80103cc:	2100      	movs	r1, #0
 80103ce:	a85e      	add	r0, sp, #376	; 0x178
 80103d0:	f011 ff12 	bl	80221f8 <memset>
    mbedtls_aes_init( &aes_ctx );
 80103d4:	a818      	add	r0, sp, #96	; 0x60
 80103d6:	f7fc ffc7 	bl	800d368 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 80103da:	ba73      	rev16	r3, r6
 80103dc:	f8ad 318a 	strh.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 80103e0:	2330      	movs	r3, #48	; 0x30
 80103e2:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 80103e6:	ab64      	add	r3, sp, #400	; 0x190
 80103e8:	4632      	mov	r2, r6
    *p++ = ( data_len >> 24 ) & 0xff;
 80103ea:	2500      	movs	r5, #0
    memcpy( p, data, data_len );
 80103ec:	4639      	mov	r1, r7
 80103ee:	4618      	mov	r0, r3
    *p++ = ( data_len >> 24 ) & 0xff;
 80103f0:	f8ad 5188 	strh.w	r5, [sp, #392]	; 0x188
    memcpy( p, data, data_len );
 80103f4:	f011 fed8 	bl	80221a8 <memcpy>
    p[data_len] = 0x80;
 80103f8:	2280      	movs	r2, #128	; 0x80
 80103fa:	5582      	strb	r2, [r0, r6]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 80103fc:	aa04      	add	r2, sp, #16
 80103fe:	3619      	adds	r6, #25

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8010400:	462b      	mov	r3, r5
 8010402:	4611      	mov	r1, r2
        key[i] = i;
 8010404:	f802 3b01 	strb.w	r3, [r2], #1
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8010408:	3301      	adds	r3, #1
 801040a:	2b20      	cmp	r3, #32
 801040c:	d1fa      	bne.n	8010404 <block_cipher_df+0x50>

    mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 801040e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010412:	a818      	add	r0, sp, #96	; 0x60
 8010414:	f7fc ffb8 	bl	800d388 <mbedtls_aes_setkey_enc>

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010418:	2700      	movs	r7, #0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801041a:	466d      	mov	r5, sp
 801041c:	2210      	movs	r2, #16
 801041e:	2100      	movs	r1, #0
 8010420:	4628      	mov	r0, r5
 8010422:	f011 fee9 	bl	80221f8 <memset>
        use_len = buf_len;
 8010426:	46b1      	mov	r9, r6
 8010428:	f20d 1387 	addw	r3, sp, #391	; 0x187

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 801042c:	462a      	mov	r2, r5
 801042e:	f1a3 0810 	sub.w	r8, r3, #16
                chain[i] ^= p[i];
 8010432:	7811      	ldrb	r1, [r2, #0]
 8010434:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8010438:	4041      	eors	r1, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 801043a:	4598      	cmp	r8, r3
                chain[i] ^= p[i];
 801043c:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8010440:	d1f7      	bne.n	8010432 <block_cipher_df+0x7e>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8010442:	f1b9 0f10 	cmp.w	r9, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 8010446:	462b      	mov	r3, r5
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8010448:	bf94      	ite	ls
 801044a:	eba9 0909 	subls.w	r9, r9, r9
 801044e:	f1a9 0910 	subhi.w	r9, r9, #16
            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 8010452:	462a      	mov	r2, r5
 8010454:	2101      	movs	r1, #1
 8010456:	a818      	add	r0, sp, #96	; 0x60
 8010458:	f7fd fc9d 	bl	800dd96 <mbedtls_aes_crypt_ecb>
        while( use_len > 0 )
 801045c:	f108 0310 	add.w	r3, r8, #16
 8010460:	f1b9 0f00 	cmp.w	r9, #0
 8010464:	d1e2      	bne.n	801042c <block_cipher_df+0x78>
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8010466:	ab0c      	add	r3, sp, #48	; 0x30
 8010468:	eb07 0c03 	add.w	ip, r7, r3
 801046c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010470:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 8010474:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010478:	3710      	adds	r7, #16
        buf[3]++;
 801047a:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801047c:	2f30      	cmp	r7, #48	; 0x30
        buf[3]++;
 801047e:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010482:	d1cb      	bne.n	801041c <block_cipher_df+0x68>
    }

    /*
     * Do final encryption with reduced data
     */
    mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 8010484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010488:	a90c      	add	r1, sp, #48	; 0x30
 801048a:	a818      	add	r0, sp, #96	; 0x60
 801048c:	f7fc ff7c 	bl	800d388 <mbedtls_aes_setkey_enc>
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010490:	f104 0630 	add.w	r6, r4, #48	; 0x30
    {
        mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8010494:	ad14      	add	r5, sp, #80	; 0x50
 8010496:	462b      	mov	r3, r5
 8010498:	462a      	mov	r2, r5
 801049a:	2101      	movs	r1, #1
 801049c:	a818      	add	r0, sp, #96	; 0x60
 801049e:	f7fd fc7a 	bl	800dd96 <mbedtls_aes_crypt_ecb>
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80104a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80104a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80104aa:	3410      	adds	r4, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80104ac:	42a6      	cmp	r6, r4
 80104ae:	d1f2      	bne.n	8010496 <block_cipher_df+0xe2>
    }

    mbedtls_aes_free( &aes_ctx );
 80104b0:	a818      	add	r0, sp, #96	; 0x60
 80104b2:	f7fc ff5e 	bl	800d372 <mbedtls_aes_free>

    return( 0 );
 80104b6:	2000      	movs	r0, #0
}
 80104b8:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 80104bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80104c0:	f06f 0037 	mvn.w	r0, #55	; 0x37
 80104c4:	e7f8      	b.n	80104b8 <block_cipher_df+0x104>

080104c6 <ctr_drbg_update_internal>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 80104c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ca:	b08c      	sub	sp, #48	; 0x30
 80104cc:	4604      	mov	r4, r0
 80104ce:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 80104d0:	2230      	movs	r2, #48	; 0x30
 80104d2:	2100      	movs	r1, #0
 80104d4:	4668      	mov	r0, sp
 80104d6:	f011 fe8f 	bl	80221f8 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80104da:	f04f 0800 	mov.w	r8, #0
                break;

        /*
         * Crypt counter block
         */
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80104de:	f104 0720 	add.w	r7, r4, #32
 80104e2:	466e      	mov	r6, sp
 80104e4:	eb0d 0308 	add.w	r3, sp, r8
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80104e8:	f104 010f 	add.w	r1, r4, #15
            if( ++ctx->counter[i - 1] != 0 )
 80104ec:	780a      	ldrb	r2, [r1, #0]
 80104ee:	3201      	adds	r2, #1
 80104f0:	b2d2      	uxtb	r2, r2
 80104f2:	4608      	mov	r0, r1
 80104f4:	f801 2901 	strb.w	r2, [r1], #-1
 80104f8:	b90a      	cbnz	r2, 80104fe <ctr_drbg_update_internal+0x38>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80104fa:	42a0      	cmp	r0, r4
 80104fc:	d1f6      	bne.n	80104ec <ctr_drbg_update_internal+0x26>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 80104fe:	4622      	mov	r2, r4
 8010500:	2101      	movs	r1, #1
 8010502:	4638      	mov	r0, r7
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010504:	f108 0810 	add.w	r8, r8, #16
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 8010508:	f7fd fc45 	bl	800dd96 <mbedtls_aes_crypt_ecb>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801050c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8010510:	d1e7      	bne.n	80104e2 <ctr_drbg_update_internal+0x1c>
 8010512:	1e6b      	subs	r3, r5, #1
 8010514:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 8010516:	7832      	ldrb	r2, [r6, #0]
 8010518:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801051c:	404a      	eors	r2, r1
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 801051e:	42ab      	cmp	r3, r5
        tmp[i] ^= data[i];
 8010520:	f806 2b01 	strb.w	r2, [r6], #1
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8010524:	d1f7      	bne.n	8010516 <ctr_drbg_update_internal+0x50>

    /*
     * Update key and counter
     */
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 8010526:	f44f 7280 	mov.w	r2, #256	; 0x100
 801052a:	4669      	mov	r1, sp
 801052c:	4638      	mov	r0, r7
 801052e:	f7fc ff2b 	bl	800d388 <mbedtls_aes_setkey_enc>
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8010532:	ad0c      	add	r5, sp, #48	; 0x30
 8010534:	aa08      	add	r2, sp, #32
 8010536:	4613      	mov	r3, r2
 8010538:	cb03      	ldmia	r3!, {r0, r1}
 801053a:	42ab      	cmp	r3, r5
 801053c:	6020      	str	r0, [r4, #0]
 801053e:	6061      	str	r1, [r4, #4]
 8010540:	461a      	mov	r2, r3
 8010542:	f104 0408 	add.w	r4, r4, #8
 8010546:	d1f6      	bne.n	8010536 <ctr_drbg_update_internal+0x70>

    return( 0 );
}
 8010548:	2000      	movs	r0, #0
 801054a:	b00c      	add	sp, #48	; 0x30
 801054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010550 <mbedtls_ctr_drbg_free.part.0>:
void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
 8010550:	b510      	push	{r4, lr}
 8010552:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->aes_ctx );
 8010554:	3020      	adds	r0, #32
 8010556:	f7fc ff0c 	bl	800d372 <mbedtls_aes_free>
static void mbedtls_zeroize( void *v, size_t n ) {
 801055a:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801055e:	2200      	movs	r2, #0
 8010560:	429c      	cmp	r4, r3
 8010562:	d100      	bne.n	8010566 <mbedtls_ctr_drbg_free.part.0+0x16>
}
 8010564:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8010566:	f804 2b01 	strb.w	r2, [r4], #1
 801056a:	e7f9      	b.n	8010560 <mbedtls_ctr_drbg_free.part.0+0x10>

0801056c <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 801056c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010570:	2100      	movs	r1, #0
 8010572:	f011 be41 	b.w	80221f8 <memset>

08010576 <mbedtls_ctr_drbg_free>:
    if( ctx == NULL )
 8010576:	b108      	cbz	r0, 801057c <mbedtls_ctr_drbg_free+0x6>
 8010578:	f7ff bfea 	b.w	8010550 <mbedtls_ctr_drbg_free.part.0>
}
 801057c:	4770      	bx	lr

0801057e <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 801057e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010582:	6985      	ldr	r5, [r0, #24]
 8010584:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
{
 8010588:	b0e0      	sub	sp, #384	; 0x180
 801058a:	4604      	mov	r4, r0
 801058c:	4688      	mov	r8, r1
 801058e:	4616      	mov	r6, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010590:	d82d      	bhi.n	80105ee <mbedtls_ctr_drbg_reseed+0x70>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 8010592:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8010596:	4293      	cmp	r3, r2
 8010598:	d329      	bcc.n	80105ee <mbedtls_ctr_drbg_reseed+0x70>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 801059a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801059e:	2100      	movs	r1, #0
 80105a0:	4668      	mov	r0, sp
 80105a2:	f011 fe29 	bl	80221f8 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 80105a6:	462a      	mov	r2, r5
 80105a8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80105ac:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80105b0:	4669      	mov	r1, sp
 80105b2:	4798      	blx	r3
 80105b4:	4605      	mov	r5, r0
 80105b6:	b9e8      	cbnz	r0, 80105f4 <mbedtls_ctr_drbg_reseed+0x76>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 80105b8:	69a7      	ldr	r7, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 80105ba:	f1b8 0f00 	cmp.w	r8, #0
 80105be:	d007      	beq.n	80105d0 <mbedtls_ctr_drbg_reseed+0x52>
 80105c0:	b136      	cbz	r6, 80105d0 <mbedtls_ctr_drbg_reseed+0x52>
    {
        memcpy( seed + seedlen, additional, len );
 80105c2:	eb0d 0007 	add.w	r0, sp, r7
 80105c6:	4632      	mov	r2, r6
 80105c8:	4641      	mov	r1, r8
 80105ca:	f011 fded 	bl	80221a8 <memcpy>
        seedlen += len;
 80105ce:	4437      	add	r7, r6
    }

    /*
     * Reduce to 384 bits
     */
    block_cipher_df( seed, seed, seedlen );
 80105d0:	463a      	mov	r2, r7
 80105d2:	4669      	mov	r1, sp
 80105d4:	4668      	mov	r0, sp
 80105d6:	f7ff feed 	bl	80103b4 <block_cipher_df>

    /*
     * Update state
     */
    ctr_drbg_update_internal( ctx, seed );
 80105da:	4669      	mov	r1, sp
 80105dc:	4620      	mov	r0, r4
 80105de:	f7ff ff72 	bl	80104c6 <ctr_drbg_update_internal>
    ctx->reseed_counter = 1;
 80105e2:	2301      	movs	r3, #1
 80105e4:	6123      	str	r3, [r4, #16]

    return( 0 );
}
 80105e6:	4628      	mov	r0, r5
 80105e8:	b060      	add	sp, #384	; 0x180
 80105ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80105ee:	f06f 0537 	mvn.w	r5, #55	; 0x37
 80105f2:	e7f8      	b.n	80105e6 <mbedtls_ctr_drbg_reseed+0x68>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 80105f4:	f06f 0533 	mvn.w	r5, #51	; 0x33
 80105f8:	e7f5      	b.n	80105e6 <mbedtls_ctr_drbg_reseed+0x68>

080105fa <mbedtls_ctr_drbg_seed_entropy_len>:
{
 80105fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105fc:	b08b      	sub	sp, #44	; 0x2c
 80105fe:	4604      	mov	r4, r0
 8010600:	460f      	mov	r7, r1
 8010602:	4616      	mov	r6, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 8010604:	2100      	movs	r1, #0
 8010606:	2220      	movs	r2, #32
 8010608:	a802      	add	r0, sp, #8
{
 801060a:	461d      	mov	r5, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 801060c:	f011 fdf4 	bl	80221f8 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 8010610:	f104 0020 	add.w	r0, r4, #32
 8010614:	9001      	str	r0, [sp, #4]
 8010616:	f7fc fea7 	bl	800d368 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 801061a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801061c:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 801061e:	f242 7310 	movw	r3, #10000	; 0x2710
 8010622:	61e3      	str	r3, [r4, #28]
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 8010624:	a902      	add	r1, sp, #8
    ctx->p_entropy = p_entropy;
 8010626:	e9c4 764e 	strd	r7, r6, [r4, #312]	; 0x138
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 801062a:	9801      	ldr	r0, [sp, #4]
 801062c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010630:	f7fc feaa 	bl	800d388 <mbedtls_aes_setkey_enc>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 8010634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010636:	4629      	mov	r1, r5
 8010638:	4620      	mov	r0, r4
 801063a:	f7ff ffa0 	bl	801057e <mbedtls_ctr_drbg_reseed>
}
 801063e:	b00b      	add	sp, #44	; 0x2c
 8010640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010642 <mbedtls_ctr_drbg_seed>:
{
 8010642:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 8010644:	2430      	movs	r4, #48	; 0x30
 8010646:	9401      	str	r4, [sp, #4]
 8010648:	9c04      	ldr	r4, [sp, #16]
 801064a:	9400      	str	r4, [sp, #0]
 801064c:	f7ff ffd5 	bl	80105fa <mbedtls_ctr_drbg_seed_entropy_len>
}
 8010650:	b002      	add	sp, #8
 8010652:	bd10      	pop	{r4, pc}

08010654 <mbedtls_ctr_drbg_random_with_add>:

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 8010654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010658:	b090      	sub	sp, #64	; 0x40
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 801065a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 801065e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010662:	4604      	mov	r4, r0
 8010664:	460e      	mov	r6, r1
 8010666:	4615      	mov	r5, r2
 8010668:	461f      	mov	r7, r3
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 801066a:	d84d      	bhi.n	8010708 <mbedtls_ctr_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 801066c:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8010670:	d84d      	bhi.n	801070e <mbedtls_ctr_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8010672:	2230      	movs	r2, #48	; 0x30
 8010674:	2100      	movs	r1, #0
 8010676:	a804      	add	r0, sp, #16
 8010678:	f011 fdbe 	bl	80221f8 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 801067c:	6922      	ldr	r2, [r4, #16]
 801067e:	69e3      	ldr	r3, [r4, #28]
 8010680:	429a      	cmp	r2, r3
 8010682:	dc01      	bgt.n	8010688 <mbedtls_ctr_drbg_random_with_add+0x34>
 8010684:	6963      	ldr	r3, [r4, #20]
 8010686:	b143      	cbz	r3, 801069a <mbedtls_ctr_drbg_random_with_add+0x46>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8010688:	4642      	mov	r2, r8
 801068a:	4639      	mov	r1, r7
 801068c:	4620      	mov	r0, r4
 801068e:	f7ff ff76 	bl	801057e <mbedtls_ctr_drbg_reseed>
 8010692:	b170      	cbz	r0, 80106b2 <mbedtls_ctr_drbg_random_with_add+0x5e>
    ctr_drbg_update_internal( ctx, add_input );

    ctx->reseed_counter++;

    return( 0 );
}
 8010694:	b010      	add	sp, #64	; 0x40
 8010696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( add_len > 0 )
 801069a:	f1b8 0f00 	cmp.w	r8, #0
 801069e:	d008      	beq.n	80106b2 <mbedtls_ctr_drbg_random_with_add+0x5e>
        block_cipher_df( add_input, additional, add_len );
 80106a0:	4639      	mov	r1, r7
 80106a2:	4642      	mov	r2, r8
 80106a4:	a804      	add	r0, sp, #16
 80106a6:	f7ff fe85 	bl	80103b4 <block_cipher_df>
        ctr_drbg_update_internal( ctx, add_input );
 80106aa:	a904      	add	r1, sp, #16
 80106ac:	4620      	mov	r0, r4
 80106ae:	f7ff ff0a 	bl	80104c6 <ctr_drbg_update_internal>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 80106b2:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 80106b6:	b945      	cbnz	r5, 80106ca <mbedtls_ctr_drbg_random_with_add+0x76>
    ctr_drbg_update_internal( ctx, add_input );
 80106b8:	a904      	add	r1, sp, #16
 80106ba:	4620      	mov	r0, r4
 80106bc:	f7ff ff03 	bl	80104c6 <ctr_drbg_update_internal>
    ctx->reseed_counter++;
 80106c0:	6923      	ldr	r3, [r4, #16]
 80106c2:	3301      	adds	r3, #1
 80106c4:	6123      	str	r3, [r4, #16]
    return( 0 );
 80106c6:	4628      	mov	r0, r5
 80106c8:	e7e4      	b.n	8010694 <mbedtls_ctr_drbg_random_with_add+0x40>
 80106ca:	f104 020f 	add.w	r2, r4, #15
            if( ++ctx->counter[i - 1] != 0 )
 80106ce:	7813      	ldrb	r3, [r2, #0]
 80106d0:	3301      	adds	r3, #1
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	4611      	mov	r1, r2
 80106d6:	f802 3901 	strb.w	r3, [r2], #-1
 80106da:	b90b      	cbnz	r3, 80106e0 <mbedtls_ctr_drbg_random_with_add+0x8c>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80106dc:	42a1      	cmp	r1, r4
 80106de:	d1f6      	bne.n	80106ce <mbedtls_ctr_drbg_random_with_add+0x7a>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 80106e0:	466b      	mov	r3, sp
 80106e2:	4622      	mov	r2, r4
 80106e4:	2101      	movs	r1, #1
 80106e6:	4638      	mov	r0, r7
 80106e8:	f7fd fb55 	bl	800dd96 <mbedtls_aes_crypt_ecb>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 80106ec:	2d10      	cmp	r5, #16
 80106ee:	46a8      	mov	r8, r5
 80106f0:	bf28      	it	cs
 80106f2:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 80106f6:	4630      	mov	r0, r6
 80106f8:	4642      	mov	r2, r8
 80106fa:	4669      	mov	r1, sp
 80106fc:	f011 fd54 	bl	80221a8 <memcpy>
        p += use_len;
 8010700:	4446      	add	r6, r8
        output_len -= use_len;
 8010702:	eba5 0508 	sub.w	r5, r5, r8
 8010706:	e7d6      	b.n	80106b6 <mbedtls_ctr_drbg_random_with_add+0x62>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8010708:	f06f 0035 	mvn.w	r0, #53	; 0x35
 801070c:	e7c2      	b.n	8010694 <mbedtls_ctr_drbg_random_with_add+0x40>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 801070e:	f06f 0037 	mvn.w	r0, #55	; 0x37
 8010712:	e7bf      	b.n	8010694 <mbedtls_ctr_drbg_random_with_add+0x40>

08010714 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 8010714:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8010716:	2300      	movs	r3, #0
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	f7ff ff9b 	bl	8010654 <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 801071e:	b003      	add	sp, #12
 8010720:	f85d fb04 	ldr.w	pc, [sp], #4

08010724 <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 8010724:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8010726:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
 801072a:	46a4      	mov	ip, r4
#endif
}
 801072c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8010730:	4760      	bx	ip
	...

08010734 <mbedtls_debug_print_mpi.part.0>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8010734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010738:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 801073c:	4698      	mov	r8, r3
 801073e:	f8dd 9244 	ldr.w	r9, [sp, #580]	; 0x244
 8010742:	9003      	str	r0, [sp, #12]
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 8010744:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8010748:	f8d9 3008 	ldr.w	r3, [r9, #8]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 801074c:	460e      	mov	r6, r1
 801074e:	4617      	mov	r7, r2
    for( n = X->n - 1; n > 0; n-- )
 8010750:	3d01      	subs	r5, #1
 8010752:	2d00      	cmp	r5, #0
 8010754:	d13e      	bne.n	80107d4 <mbedtls_debug_print_mpi.part.0+0xa0>
        if( X->p[n] != 0 )
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 8010756:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 801075a:	231f      	movs	r3, #31
 801075c:	fa22 f103 	lsr.w	r1, r2, r3
 8010760:	07c9      	lsls	r1, r1, #31
 8010762:	d401      	bmi.n	8010768 <mbedtls_debug_print_mpi.part.0+0x34>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 8010764:	3b01      	subs	r3, #1
 8010766:	d2f9      	bcs.n	801075c <mbedtls_debug_print_mpi.part.0+0x28>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8010768:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 801076c:	f10d 0a18 	add.w	sl, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 8010770:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 8010772:	4a3f      	ldr	r2, [pc, #252]	; (8010870 <mbedtls_debug_print_mpi.part.0+0x13c>)
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	f44f 7100 	mov.w	r1, #512	; 0x200
 801077a:	9b90      	ldr	r3, [sp, #576]	; 0x240
 801077c:	4650      	mov	r0, sl
 801077e:	f012 ff29 	bl	80235d4 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 8010782:	9803      	ldr	r0, [sp, #12]
 8010784:	f8cd a000 	str.w	sl, [sp]
 8010788:	4643      	mov	r3, r8
 801078a:	6800      	ldr	r0, [r0, #0]
 801078c:	463a      	mov	r2, r7
 801078e:	4631      	mov	r1, r6

    idx = 0;
 8010790:	2400      	movs	r4, #0
    debug_send_line( ssl, level, file, line, str );
 8010792:	f7ff ffc7 	bl	8010724 <debug_send_line.isra.0>
    int j, k, zeros = 1;
 8010796:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 8010798:	9402      	str	r4, [sp, #8]
 801079a:	1c6a      	adds	r2, r5, #1
 801079c:	d120      	bne.n	80107e0 <mbedtls_debug_print_mpi.part.0+0xac>
            j++;
        }

    }

    if( zeros == 1 )
 801079e:	ad06      	add	r5, sp, #24
 80107a0:	b133      	cbz	r3, 80107b0 <mbedtls_debug_print_mpi.part.0+0x7c>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 80107a2:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80107a6:	1928      	adds	r0, r5, r4
 80107a8:	4a32      	ldr	r2, [pc, #200]	; (8010874 <mbedtls_debug_print_mpi.part.0+0x140>)
 80107aa:	f012 ff13 	bl	80235d4 <sniprintf>
 80107ae:	3403      	adds	r4, #3

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 80107b0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80107b4:	4a30      	ldr	r2, [pc, #192]	; (8010878 <mbedtls_debug_print_mpi.part.0+0x144>)
 80107b6:	1928      	adds	r0, r5, r4
 80107b8:	f012 ff0c 	bl	80235d4 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 80107bc:	9803      	ldr	r0, [sp, #12]
 80107be:	9500      	str	r5, [sp, #0]
 80107c0:	6800      	ldr	r0, [r0, #0]
 80107c2:	4643      	mov	r3, r8
 80107c4:	463a      	mov	r2, r7
 80107c6:	4631      	mov	r1, r6
 80107c8:	f7ff ffac 	bl	8010724 <debug_send_line.isra.0>
}
 80107cc:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 80107d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( X->p[n] != 0 )
 80107d4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80107d8:	2a00      	cmp	r2, #0
 80107da:	d1bc      	bne.n	8010756 <mbedtls_debug_print_mpi.part.0+0x22>
    for( n = X->n - 1; n > 0; n-- )
 80107dc:	3d01      	subs	r5, #1
 80107de:	e7b8      	b.n	8010752 <mbedtls_debug_print_mpi.part.0+0x1e>
        if( zeros && X->p[i - 1] == 0 )
 80107e0:	00aa      	lsls	r2, r5, #2
 80107e2:	9204      	str	r2, [sp, #16]
 80107e4:	b12b      	cbz	r3, 80107f2 <mbedtls_debug_print_mpi.part.0+0xbe>
 80107e6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80107ea:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80107ee:	2a00      	cmp	r2, #0
 80107f0:	d03b      	beq.n	801086a <mbedtls_debug_print_mpi.part.0+0x136>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 80107f2:	f04f 0b18 	mov.w	fp, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 80107f6:	b143      	cbz	r3, 801080a <mbedtls_debug_print_mpi.part.0+0xd6>
 80107f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80107fc:	9904      	ldr	r1, [sp, #16]
 80107fe:	5852      	ldr	r2, [r2, r1]
 8010800:	fa22 f20b 	lsr.w	r2, r2, fp
 8010804:	f012 0fff 	tst.w	r2, #255	; 0xff
 8010808:	d02a      	beq.n	8010860 <mbedtls_debug_print_mpi.part.0+0x12c>
            if( j % 16 == 0 )
 801080a:	9b02      	ldr	r3, [sp, #8]
 801080c:	f013 030f 	ands.w	r3, r3, #15
 8010810:	9305      	str	r3, [sp, #20]
 8010812:	d112      	bne.n	801083a <mbedtls_debug_print_mpi.part.0+0x106>
                if( j > 0 )
 8010814:	9b02      	ldr	r3, [sp, #8]
 8010816:	b183      	cbz	r3, 801083a <mbedtls_debug_print_mpi.part.0+0x106>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8010818:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 801081c:	4a16      	ldr	r2, [pc, #88]	; (8010878 <mbedtls_debug_print_mpi.part.0+0x144>)
 801081e:	eb0a 0004 	add.w	r0, sl, r4
 8010822:	f012 fed7 	bl	80235d4 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 8010826:	9803      	ldr	r0, [sp, #12]
 8010828:	f8cd a000 	str.w	sl, [sp]
 801082c:	6800      	ldr	r0, [r0, #0]
 801082e:	4643      	mov	r3, r8
 8010830:	463a      	mov	r2, r7
 8010832:	4631      	mov	r1, r6
 8010834:	f7ff ff76 	bl	8010724 <debug_send_line.isra.0>
                    idx = 0;
 8010838:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 801083a:	9a04      	ldr	r2, [sp, #16]
 801083c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010840:	589b      	ldr	r3, [r3, r2]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010842:	4a0e      	ldr	r2, [pc, #56]	; (801087c <mbedtls_debug_print_mpi.part.0+0x148>)
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8010844:	fa23 f30b 	lsr.w	r3, r3, fp
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010848:	a806      	add	r0, sp, #24
 801084a:	b2db      	uxtb	r3, r3
 801084c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010850:	4420      	add	r0, r4
 8010852:	f012 febf 	bl	80235d4 <sniprintf>
            j++;
 8010856:	9b02      	ldr	r3, [sp, #8]
 8010858:	3301      	adds	r3, #1
 801085a:	9302      	str	r3, [sp, #8]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 801085c:	4404      	add	r4, r0
                zeros = 0;
 801085e:	2300      	movs	r3, #0
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8010860:	f1ab 0b08 	sub.w	fp, fp, #8
 8010864:	f11b 0f08 	cmn.w	fp, #8
 8010868:	d1c5      	bne.n	80107f6 <mbedtls_debug_print_mpi.part.0+0xc2>
    for( i = n + 1, j = 0; i > 0; i-- )
 801086a:	3d01      	subs	r5, #1
 801086c:	e795      	b.n	801079a <mbedtls_debug_print_mpi.part.0+0x66>
 801086e:	bf00      	nop
 8010870:	0802fd82 	.word	0x0802fd82
 8010874:	0802fda5 	.word	0x0802fda5
 8010878:	08030391 	.word	0x08030391
 801087c:	0802fd9f 	.word	0x0802fd9f

08010880 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 8010880:	4b01      	ldr	r3, [pc, #4]	; (8010888 <mbedtls_debug_set_threshold+0x8>)
 8010882:	6018      	str	r0, [r3, #0]
}
 8010884:	4770      	bx	lr
 8010886:	bf00      	nop
 8010888:	20001054 	.word	0x20001054

0801088c <mbedtls_debug_print_msg>:
{
 801088c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010890:	460f      	mov	r7, r1
 8010892:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8010896:	4690      	mov	r8, r2
 8010898:	4699      	mov	r9, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 801089a:	4606      	mov	r6, r0
 801089c:	b1f8      	cbz	r0, 80108de <mbedtls_debug_print_msg+0x52>
 801089e:	6803      	ldr	r3, [r0, #0]
 80108a0:	b1eb      	cbz	r3, 80108de <mbedtls_debug_print_msg+0x52>
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	b1db      	cbz	r3, 80108de <mbedtls_debug_print_msg+0x52>
 80108a6:	4b10      	ldr	r3, [pc, #64]	; (80108e8 <mbedtls_debug_print_msg+0x5c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	428b      	cmp	r3, r1
 80108ac:	db17      	blt.n	80108de <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 80108ae:	ad04      	add	r5, sp, #16
    va_start( argp, format );
 80108b0:	ab8d      	add	r3, sp, #564	; 0x234
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 80108b2:	9a8c      	ldr	r2, [sp, #560]	; 0x230
    va_start( argp, format );
 80108b4:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 80108b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80108ba:	4628      	mov	r0, r5
 80108bc:	f014 f920 	bl	8024b00 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 80108c0:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 80108c4:	d804      	bhi.n	80108d0 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 80108c6:	230a      	movs	r3, #10
        str[ret + 1] = '\0';
 80108c8:	182c      	adds	r4, r5, r0
        str[ret]     = '\n';
 80108ca:	542b      	strb	r3, [r5, r0]
        str[ret + 1] = '\0';
 80108cc:	2300      	movs	r3, #0
 80108ce:	7063      	strb	r3, [r4, #1]
    debug_send_line( ssl, level, file, line, str );
 80108d0:	9500      	str	r5, [sp, #0]
 80108d2:	6830      	ldr	r0, [r6, #0]
 80108d4:	464b      	mov	r3, r9
 80108d6:	4642      	mov	r2, r8
 80108d8:	4639      	mov	r1, r7
 80108da:	f7ff ff23 	bl	8010724 <debug_send_line.isra.0>
}
 80108de:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 80108e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108e6:	bf00      	nop
 80108e8:	20001054 	.word	0x20001054

080108ec <mbedtls_debug_print_ret>:
{
 80108ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108f0:	4616      	mov	r6, r2
 80108f2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 80108f6:	6802      	ldr	r2, [r0, #0]
{
 80108f8:	461f      	mov	r7, r3
 80108fa:	4604      	mov	r4, r0
 80108fc:	9b89      	ldr	r3, [sp, #548]	; 0x224
 80108fe:	460d      	mov	r5, r1
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010900:	b1e2      	cbz	r2, 801093c <mbedtls_debug_print_ret+0x50>
 8010902:	6912      	ldr	r2, [r2, #16]
 8010904:	b1d2      	cbz	r2, 801093c <mbedtls_debug_print_ret+0x50>
 8010906:	4a0f      	ldr	r2, [pc, #60]	; (8010944 <mbedtls_debug_print_ret+0x58>)
 8010908:	6812      	ldr	r2, [r2, #0]
 801090a:	428a      	cmp	r2, r1
 801090c:	db16      	blt.n	801093c <mbedtls_debug_print_ret+0x50>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 801090e:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8010912:	d013      	beq.n	801093c <mbedtls_debug_print_ret+0x50>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 8010914:	425a      	negs	r2, r3
 8010916:	f10d 0808 	add.w	r8, sp, #8
 801091a:	e9cd 3200 	strd	r3, r2, [sp]
 801091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010922:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8010924:	4a08      	ldr	r2, [pc, #32]	; (8010948 <mbedtls_debug_print_ret+0x5c>)
 8010926:	4640      	mov	r0, r8
 8010928:	f012 fe54 	bl	80235d4 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 801092c:	6820      	ldr	r0, [r4, #0]
 801092e:	f8cd 8000 	str.w	r8, [sp]
 8010932:	463b      	mov	r3, r7
 8010934:	4632      	mov	r2, r6
 8010936:	4629      	mov	r1, r5
 8010938:	f7ff fef4 	bl	8010724 <debug_send_line.isra.0>
}
 801093c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8010940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010944:	20001054 	.word	0x20001054
 8010948:	0802fda9 	.word	0x0802fda9

0801094c <mbedtls_debug_print_buf>:
{
 801094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010950:	469a      	mov	sl, r3
 8010952:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010956:	6803      	ldr	r3, [r0, #0]
{
 8010958:	f8dd 8258 	ldr.w	r8, [sp, #600]	; 0x258
 801095c:	4606      	mov	r6, r0
 801095e:	460f      	mov	r7, r1
 8010960:	4691      	mov	r9, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010962:	2b00      	cmp	r3, #0
 8010964:	d03e      	beq.n	80109e4 <mbedtls_debug_print_buf+0x98>
 8010966:	691b      	ldr	r3, [r3, #16]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d03b      	beq.n	80109e4 <mbedtls_debug_print_buf+0x98>
 801096c:	4b42      	ldr	r3, [pc, #264]	; (8010a78 <mbedtls_debug_print_buf+0x12c>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	428b      	cmp	r3, r1
 8010972:	db37      	blt.n	80109e4 <mbedtls_debug_print_buf+0x98>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 8010974:	ac0a      	add	r4, sp, #40	; 0x28
 8010976:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8010978:	4a40      	ldr	r2, [pc, #256]	; (8010a7c <mbedtls_debug_print_buf+0x130>)
 801097a:	f8cd 8000 	str.w	r8, [sp]
 801097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010982:	4620      	mov	r0, r4
 8010984:	f012 fe26 	bl	80235d4 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010988:	4653      	mov	r3, sl
 801098a:	6830      	ldr	r0, [r6, #0]
 801098c:	9400      	str	r4, [sp, #0]
 801098e:	464a      	mov	r2, r9
 8010990:	4639      	mov	r1, r7
 8010992:	f7ff fec7 	bl	8010724 <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 8010996:	2211      	movs	r2, #17
 8010998:	2100      	movs	r1, #0
 801099a:	a805      	add	r0, sp, #20
 801099c:	f011 fc2c 	bl	80221f8 <memset>
    for( i = 0; i < len; i++ )
 80109a0:	9b95      	ldr	r3, [sp, #596]	; 0x254
    idx = 0;
 80109a2:	2400      	movs	r4, #0
 80109a4:	3b01      	subs	r3, #1
 80109a6:	9303      	str	r3, [sp, #12]
    for( i = 0; i < len; i++ )
 80109a8:	4625      	mov	r5, r4
 80109aa:	4545      	cmp	r5, r8
 80109ac:	d11e      	bne.n	80109ec <mbedtls_debug_print_buf+0xa0>
    if( len > 0 )
 80109ae:	f1b8 0f00 	cmp.w	r8, #0
 80109b2:	d017      	beq.n	80109e4 <mbedtls_debug_print_buf+0x98>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 80109b4:	4d32      	ldr	r5, [pc, #200]	; (8010a80 <mbedtls_debug_print_buf+0x134>)
        for( /* i = i */; i % 16 != 0; i++ )
 80109b6:	ab0a      	add	r3, sp, #40	; 0x28
 80109b8:	f018 0f0f 	tst.w	r8, #15
 80109bc:	eb03 0004 	add.w	r0, r3, r4
 80109c0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80109c4:	d150      	bne.n	8010a68 <mbedtls_debug_print_buf+0x11c>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 80109c6:	ad0a      	add	r5, sp, #40	; 0x28
 80109c8:	4a2e      	ldr	r2, [pc, #184]	; (8010a84 <mbedtls_debug_print_buf+0x138>)
 80109ca:	ab05      	add	r3, sp, #20
 80109cc:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80109d0:	1928      	adds	r0, r5, r4
 80109d2:	f012 fdff 	bl	80235d4 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 80109d6:	6830      	ldr	r0, [r6, #0]
 80109d8:	9500      	str	r5, [sp, #0]
 80109da:	4653      	mov	r3, sl
 80109dc:	464a      	mov	r2, r9
 80109de:	4639      	mov	r1, r7
 80109e0:	f7ff fea0 	bl	8010724 <debug_send_line.isra.0>
}
 80109e4:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 80109e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i >= 4096 )
 80109ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80109f0:	d0e9      	beq.n	80109c6 <mbedtls_debug_print_buf+0x7a>
        if( i % 16 == 0 )
 80109f2:	f015 0b0f 	ands.w	fp, r5, #15
 80109f6:	d11f      	bne.n	8010a38 <mbedtls_debug_print_buf+0xec>
            if( i > 0 )
 80109f8:	b1ad      	cbz	r5, 8010a26 <mbedtls_debug_print_buf+0xda>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 80109fa:	a80a      	add	r0, sp, #40	; 0x28
 80109fc:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a00:	4a20      	ldr	r2, [pc, #128]	; (8010a84 <mbedtls_debug_print_buf+0x138>)
 8010a02:	ab05      	add	r3, sp, #20
 8010a04:	4420      	add	r0, r4
 8010a06:	f012 fde5 	bl	80235d4 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 8010a0a:	ab0a      	add	r3, sp, #40	; 0x28
 8010a0c:	6830      	ldr	r0, [r6, #0]
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	464a      	mov	r2, r9
 8010a12:	4653      	mov	r3, sl
 8010a14:	4639      	mov	r1, r7
 8010a16:	f7ff fe85 	bl	8010724 <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 8010a1a:	2211      	movs	r2, #17
 8010a1c:	4659      	mov	r1, fp
 8010a1e:	a805      	add	r0, sp, #20
 8010a20:	f011 fbea 	bl	80221f8 <memset>
                idx = 0;
 8010a24:	465c      	mov	r4, fp
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 8010a26:	a80a      	add	r0, sp, #40	; 0x28
 8010a28:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a2c:	4420      	add	r0, r4
 8010a2e:	4a16      	ldr	r2, [pc, #88]	; (8010a88 <mbedtls_debug_print_buf+0x13c>)
 8010a30:	462b      	mov	r3, r5
 8010a32:	f012 fdcf 	bl	80235d4 <sniprintf>
 8010a36:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8010a38:	9a03      	ldr	r2, [sp, #12]
 8010a3a:	a80a      	add	r0, sp, #40	; 0x28
 8010a3c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010a40:	9203      	str	r2, [sp, #12]
 8010a42:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a46:	4a11      	ldr	r2, [pc, #68]	; (8010a8c <mbedtls_debug_print_buf+0x140>)
 8010a48:	4420      	add	r0, r4
 8010a4a:	f012 fdc3 	bl	80235d4 <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 8010a4e:	9b03      	ldr	r3, [sp, #12]
 8010a50:	781b      	ldrb	r3, [r3, #0]
 8010a52:	f1a3 0220 	sub.w	r2, r3, #32
 8010a56:	2a5e      	cmp	r2, #94	; 0x5e
 8010a58:	aa05      	add	r2, sp, #20
 8010a5a:	bf88      	it	hi
 8010a5c:	232e      	movhi	r3, #46	; 0x2e
 8010a5e:	f802 300b 	strb.w	r3, [r2, fp]
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8010a62:	4404      	add	r4, r0
    for( i = 0; i < len; i++ )
 8010a64:	3501      	adds	r5, #1
 8010a66:	e7a0      	b.n	80109aa <mbedtls_debug_print_buf+0x5e>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010a68:	462a      	mov	r2, r5
 8010a6a:	f012 fdb3 	bl	80235d4 <sniprintf>
        for( /* i = i */; i % 16 != 0; i++ )
 8010a6e:	f108 0801 	add.w	r8, r8, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010a72:	4404      	add	r4, r0
        for( /* i = i */; i % 16 != 0; i++ )
 8010a74:	e79f      	b.n	80109b6 <mbedtls_debug_print_buf+0x6a>
 8010a76:	bf00      	nop
 8010a78:	20001054 	.word	0x20001054
 8010a7c:	0802fdc5 	.word	0x0802fdc5
 8010a80:	0802d522 	.word	0x0802d522
 8010a84:	0802fdde 	.word	0x0802fdde
 8010a88:	0802fde4 	.word	0x0802fde4
 8010a8c:	0802fd9f 	.word	0x0802fd9f

08010a90 <mbedtls_debug_print_mpi>:
{
 8010a90:	b470      	push	{r4, r5, r6}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8010a92:	6805      	ldr	r5, [r0, #0]
{
 8010a94:	9e04      	ldr	r6, [sp, #16]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8010a96:	b14d      	cbz	r5, 8010aac <mbedtls_debug_print_mpi+0x1c>
 8010a98:	692d      	ldr	r5, [r5, #16]
 8010a9a:	b13d      	cbz	r5, 8010aac <mbedtls_debug_print_mpi+0x1c>
 8010a9c:	b136      	cbz	r6, 8010aac <mbedtls_debug_print_mpi+0x1c>
 8010a9e:	4d04      	ldr	r5, [pc, #16]	; (8010ab0 <mbedtls_debug_print_mpi+0x20>)
 8010aa0:	682d      	ldr	r5, [r5, #0]
 8010aa2:	428d      	cmp	r5, r1
 8010aa4:	db02      	blt.n	8010aac <mbedtls_debug_print_mpi+0x1c>
}
 8010aa6:	bc70      	pop	{r4, r5, r6}
 8010aa8:	f7ff be44 	b.w	8010734 <mbedtls_debug_print_mpi.part.0>
 8010aac:	bc70      	pop	{r4, r5, r6}
 8010aae:	4770      	bx	lr
 8010ab0:	20001054 	.word	0x20001054

08010ab4 <mbedtls_debug_print_ecp.part.0>:
void mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,
 8010ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ab8:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8010abc:	e9dd 988a 	ldrd	r9, r8, [sp, #552]	; 0x228
 8010ac0:	4604      	mov	r4, r0
 8010ac2:	460d      	mov	r5, r1
 8010ac4:	4616      	mov	r6, r2
 8010ac6:	461f      	mov	r7, r3
    mbedtls_snprintf( str, sizeof( str ), "%s(X)", text );
 8010ac8:	4a13      	ldr	r2, [pc, #76]	; (8010b18 <mbedtls_debug_print_ecp.part.0+0x64>)
 8010aca:	464b      	mov	r3, r9
 8010acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010ad0:	a802      	add	r0, sp, #8
 8010ad2:	f012 fd7f 	bl	80235d4 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );
 8010ad6:	ab02      	add	r3, sp, #8
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	4632      	mov	r2, r6
 8010adc:	463b      	mov	r3, r7
 8010ade:	4629      	mov	r1, r5
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f8cd 8004 	str.w	r8, [sp, #4]
 8010ae6:	f7ff ffd3 	bl	8010a90 <mbedtls_debug_print_mpi>
    mbedtls_snprintf( str, sizeof( str ), "%s(Y)", text );
 8010aea:	464b      	mov	r3, r9
 8010aec:	4a0b      	ldr	r2, [pc, #44]	; (8010b1c <mbedtls_debug_print_ecp.part.0+0x68>)
 8010aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010af2:	a802      	add	r0, sp, #8
 8010af4:	f012 fd6e 	bl	80235d4 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
 8010af8:	f108 030c 	add.w	r3, r8, #12
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	ab02      	add	r3, sp, #8
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	4632      	mov	r2, r6
 8010b04:	463b      	mov	r3, r7
 8010b06:	4629      	mov	r1, r5
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f7ff ffc1 	bl	8010a90 <mbedtls_debug_print_mpi>
}
 8010b0e:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8010b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b16:	bf00      	nop
 8010b18:	0802fdeb 	.word	0x0802fdeb
 8010b1c:	0802fdf1 	.word	0x0802fdf1

08010b20 <mbedtls_debug_print_ecp>:
{
 8010b20:	b430      	push	{r4, r5}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010b22:	6805      	ldr	r5, [r0, #0]
 8010b24:	b145      	cbz	r5, 8010b38 <mbedtls_debug_print_ecp+0x18>
 8010b26:	692d      	ldr	r5, [r5, #16]
 8010b28:	b135      	cbz	r5, 8010b38 <mbedtls_debug_print_ecp+0x18>
 8010b2a:	4d04      	ldr	r5, [pc, #16]	; (8010b3c <mbedtls_debug_print_ecp+0x1c>)
 8010b2c:	682d      	ldr	r5, [r5, #0]
 8010b2e:	428d      	cmp	r5, r1
 8010b30:	db02      	blt.n	8010b38 <mbedtls_debug_print_ecp+0x18>
}
 8010b32:	bc30      	pop	{r4, r5}
 8010b34:	f7ff bfbe 	b.w	8010ab4 <mbedtls_debug_print_ecp.part.0>
 8010b38:	bc30      	pop	{r4, r5}
 8010b3a:	4770      	bx	lr
 8010b3c:	20001054 	.word	0x20001054

08010b40 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 8010b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b44:	4698      	mov	r8, r3
 8010b46:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8010b4a:	6803      	ldr	r3, [r0, #0]
{
 8010b4c:	f8dd a84c 	ldr.w	sl, [sp, #2124]	; 0x84c
 8010b50:	4604      	mov	r4, r0
 8010b52:	460d      	mov	r5, r1
 8010b54:	4616      	mov	r6, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d049      	beq.n	8010bee <mbedtls_debug_print_crt+0xae>
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d046      	beq.n	8010bee <mbedtls_debug_print_crt+0xae>
 8010b60:	f1ba 0f00 	cmp.w	sl, #0
 8010b64:	d043      	beq.n	8010bee <mbedtls_debug_print_crt+0xae>
 8010b66:	4b50      	ldr	r3, [pc, #320]	; (8010ca8 <mbedtls_debug_print_crt+0x168>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	428b      	cmp	r3, r1
 8010b6c:	db3f      	blt.n	8010bee <mbedtls_debug_print_crt+0xae>
    int i = 0;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	9302      	str	r3, [sp, #8]

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8010b72:	9b02      	ldr	r3, [sp, #8]
 8010b74:	4a4d      	ldr	r2, [pc, #308]	; (8010cac <mbedtls_debug_print_crt+0x16c>)
 8010b76:	3301      	adds	r3, #1
 8010b78:	af08      	add	r7, sp, #32
 8010b7a:	9302      	str	r3, [sp, #8]
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b82:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8010b86:	4638      	mov	r0, r7
 8010b88:	f012 fd24 	bl	80235d4 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8010b8c:	6820      	ldr	r0, [r4, #0]
 8010b8e:	9700      	str	r7, [sp, #0]
 8010b90:	4643      	mov	r3, r8
 8010b92:	4632      	mov	r2, r6
 8010b94:	4629      	mov	r1, r5
 8010b96:	f7ff fdc5 	bl	8010724 <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 8010b9a:	f50d 6784 	add.w	r7, sp, #1056	; 0x420
 8010b9e:	4653      	mov	r3, sl
 8010ba0:	4a43      	ldr	r2, [pc, #268]	; (8010cb0 <mbedtls_debug_print_crt+0x170>)
 8010ba2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8010ba6:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8010baa:	f00f fa95 	bl	80200d8 <mbedtls_x509_crt_info>
    for( cur = text; *cur != '\0'; cur++ )
 8010bae:	f240 19ff 	movw	r9, #511	; 0x1ff
    start = text;
 8010bb2:	463b      	mov	r3, r7
            str[len] = '\0';
 8010bb4:	f04f 0b00 	mov.w	fp, #0
 8010bb8:	463a      	mov	r2, r7
    for( cur = text; *cur != '\0'; cur++ )
 8010bba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010bbe:	b9d1      	cbnz	r1, 8010bf6 <mbedtls_debug_print_crt+0xb6>
    memset( items, 0, sizeof( items ) );
 8010bc0:	2224      	movs	r2, #36	; 0x24
 8010bc2:	a888      	add	r0, sp, #544	; 0x220
 8010bc4:	f011 fb18 	bl	80221f8 <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8010bc8:	a988      	add	r1, sp, #544	; 0x220
 8010bca:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
 8010bce:	f004 ff3f 	bl	8015a50 <mbedtls_pk_debug>
 8010bd2:	b348      	cbz	r0, 8010c28 <mbedtls_debug_print_crt+0xe8>
        debug_send_line( ssl, level, file, line,
 8010bd4:	4b37      	ldr	r3, [pc, #220]	; (8010cb4 <mbedtls_debug_print_crt+0x174>)
 8010bd6:	9300      	str	r3, [sp, #0]
 8010bd8:	6820      	ldr	r0, [r4, #0]
 8010bda:	4643      	mov	r3, r8
 8010bdc:	4632      	mov	r2, r6
 8010bde:	4629      	mov	r1, r5
 8010be0:	f7ff fda0 	bl	8010724 <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8010be4:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
    while( crt != NULL )
 8010be8:	f1ba 0f00 	cmp.w	sl, #0
 8010bec:	d1c1      	bne.n	8010b72 <mbedtls_debug_print_crt+0x32>
    }
}
 8010bee:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8010bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 8010bf6:	290a      	cmp	r1, #10
 8010bf8:	d1de      	bne.n	8010bb8 <mbedtls_debug_print_crt+0x78>
            size_t len = cur - start + 1;
 8010bfa:	1ad2      	subs	r2, r2, r3
 8010bfc:	3201      	adds	r2, #1
            if( len > DEBUG_BUF_SIZE - 1 )
 8010bfe:	454a      	cmp	r2, r9
 8010c00:	bf28      	it	cs
 8010c02:	464a      	movcs	r2, r9
            memcpy( str, start, len );
 8010c04:	4619      	mov	r1, r3
 8010c06:	a888      	add	r0, sp, #544	; 0x220
 8010c08:	9203      	str	r2, [sp, #12]
 8010c0a:	f011 facd 	bl	80221a8 <memcpy>
            str[len] = '\0';
 8010c0e:	9a03      	ldr	r2, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 8010c10:	6820      	ldr	r0, [r4, #0]
            str[len] = '\0';
 8010c12:	ab88      	add	r3, sp, #544	; 0x220
            debug_send_line( ssl, level, file, line, str );
 8010c14:	4629      	mov	r1, r5
            str[len] = '\0';
 8010c16:	f803 b002 	strb.w	fp, [r3, r2]
            debug_send_line( ssl, level, file, line, str );
 8010c1a:	9300      	str	r3, [sp, #0]
 8010c1c:	4632      	mov	r2, r6
 8010c1e:	4643      	mov	r3, r8
 8010c20:	f7ff fd80 	bl	8010724 <debug_send_line.isra.0>
            start = cur + 1;
 8010c24:	463b      	mov	r3, r7
    for( cur = text; *cur != '\0'; cur++ )
 8010c26:	e7c7      	b.n	8010bb8 <mbedtls_debug_print_crt+0x78>
 8010c28:	f50d 7b08 	add.w	fp, sp, #544	; 0x220
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010c2c:	4681      	mov	r9, r0
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 8010c2e:	f89b 3000 	ldrb.w	r3, [fp]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d0d6      	beq.n	8010be4 <mbedtls_debug_print_crt+0xa4>
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 8010c36:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	af04      	add	r7, sp, #16
 8010c3e:	4b1e      	ldr	r3, [pc, #120]	; (8010cb8 <mbedtls_debug_print_crt+0x178>)
 8010c40:	4a1e      	ldr	r2, [pc, #120]	; (8010cbc <mbedtls_debug_print_crt+0x17c>)
 8010c42:	2110      	movs	r1, #16
 8010c44:	4638      	mov	r0, r7
 8010c46:	f012 fcc5 	bl	80235d4 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	73fb      	strb	r3, [r7, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 8010c4e:	f89b 3000 	ldrb.w	r3, [fp]
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d111      	bne.n	8010c7a <mbedtls_debug_print_crt+0x13a>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8010c56:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010c5a:	4632      	mov	r2, r6
 8010c5c:	e9cd 7300 	strd	r7, r3, [sp]
 8010c60:	4629      	mov	r1, r5
 8010c62:	4643      	mov	r3, r8
 8010c64:	4620      	mov	r0, r4
 8010c66:	f7ff ff13 	bl	8010a90 <mbedtls_debug_print_mpi>
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010c6a:	f109 0901 	add.w	r9, r9, #1
 8010c6e:	f1b9 0f03 	cmp.w	r9, #3
 8010c72:	f10b 0b0c 	add.w	fp, fp, #12
 8010c76:	d1da      	bne.n	8010c2e <mbedtls_debug_print_crt+0xee>
 8010c78:	e7b4      	b.n	8010be4 <mbedtls_debug_print_crt+0xa4>
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d10a      	bne.n	8010c94 <mbedtls_debug_print_crt+0x154>
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
 8010c7e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010c82:	4632      	mov	r2, r6
 8010c84:	e9cd 7300 	strd	r7, r3, [sp]
 8010c88:	4629      	mov	r1, r5
 8010c8a:	4643      	mov	r3, r8
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f7ff ff47 	bl	8010b20 <mbedtls_debug_print_ecp>
 8010c92:	e7ea      	b.n	8010c6a <mbedtls_debug_print_crt+0x12a>
            debug_send_line( ssl, level, file, line,
 8010c94:	4b0a      	ldr	r3, [pc, #40]	; (8010cc0 <mbedtls_debug_print_crt+0x180>)
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	6820      	ldr	r0, [r4, #0]
 8010c9a:	4643      	mov	r3, r8
 8010c9c:	4632      	mov	r2, r6
 8010c9e:	4629      	mov	r1, r5
 8010ca0:	f7ff fd40 	bl	8010724 <debug_send_line.isra.0>
 8010ca4:	e7e1      	b.n	8010c6a <mbedtls_debug_print_crt+0x12a>
 8010ca6:	bf00      	nop
 8010ca8:	20001054 	.word	0x20001054
 8010cac:	0802fdf7 	.word	0x0802fdf7
 8010cb0:	08030129 	.word	0x08030129
 8010cb4:	0802fe00 	.word	0x0802fe00
 8010cb8:	0802fe14 	.word	0x0802fe14
 8010cbc:	0802fe1a 	.word	0x0802fe1a
 8010cc0:	0802fe1f 	.word	0x0802fe1f

08010cc4 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 8010cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cc6:	b08f      	sub	sp, #60	; 0x3c
 8010cc8:	4616      	mov	r6, r2
 8010cca:	4605      	mov	r5, r0
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
 8010ccc:	a805      	add	r0, sp, #20
{
 8010cce:	460f      	mov	r7, r1
 8010cd0:	9303      	str	r3, [sp, #12]
    mbedtls_ecp_point_init( &P );
 8010cd2:	f001 f88b 	bl	8011dec <mbedtls_ecp_point_init>

    /*
     * Make sure Q is a valid pubkey before using it
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4628      	mov	r0, r5
 8010cda:	f001 fea7 	bl	8012a2c <mbedtls_ecp_check_pubkey>
 8010cde:	4604      	mov	r4, r0
 8010ce0:	b9a0      	cbnz	r0, 8010d0c <mbedtls_ecdh_compute_shared+0x48>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );
 8010ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	9a03      	ldr	r2, [sp, #12]
 8010cec:	4633      	mov	r3, r6
 8010cee:	a905      	add	r1, sp, #20
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f001 ff7f 	bl	8012bf4 <mbedtls_ecp_mul>
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	b940      	cbnz	r0, 8010d0c <mbedtls_ecdh_compute_shared+0x48>

    if( mbedtls_ecp_is_zero( &P ) )
 8010cfa:	a805      	add	r0, sp, #20
 8010cfc:	f001 fdb0 	bl	8012860 <mbedtls_ecp_is_zero>
 8010d00:	b950      	cbnz	r0, 8010d18 <mbedtls_ecdh_compute_shared+0x54>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 8010d02:	a905      	add	r1, sp, #20
 8010d04:	4638      	mov	r0, r7
 8010d06:	f7fd fd99 	bl	800e83c <mbedtls_mpi_copy>
 8010d0a:	4604      	mov	r4, r0

cleanup:
    mbedtls_ecp_point_free( &P );
 8010d0c:	a805      	add	r0, sp, #20
 8010d0e:	f001 f887 	bl	8011e20 <mbedtls_ecp_point_free>

    return( ret );
}
 8010d12:	4620      	mov	r0, r4
 8010d14:	b00f      	add	sp, #60	; 0x3c
 8010d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010d18:	4c00      	ldr	r4, [pc, #0]	; (8010d1c <mbedtls_ecdh_compute_shared+0x58>)
 8010d1a:	e7f7      	b.n	8010d0c <mbedtls_ecdh_compute_shared+0x48>
 8010d1c:	ffffb080 	.word	0xffffb080

08010d20 <mbedtls_ecdh_init>:
/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 8010d20:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010d24:	2100      	movs	r1, #0
 8010d26:	f011 ba67 	b.w	80221f8 <memset>

08010d2a <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 8010d2a:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	b1f8      	cbz	r0, 8010d70 <mbedtls_ecdh_free+0x46>
        return;

    mbedtls_ecp_group_free( &ctx->grp );
 8010d30:	f001 f87a 	bl	8011e28 <mbedtls_ecp_group_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 8010d34:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8010d38:	f001 f872 	bl	8011e20 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 8010d3c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8010d40:	f001 f86e 	bl	8011e20 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vi  );
 8010d44:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8010d48:	f001 f86a 	bl	8011e20 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf  );
 8010d4c:	f504 7082 	add.w	r0, r4, #260	; 0x104
 8010d50:	f001 f866 	bl	8011e20 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->d  );
 8010d54:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8010d58:	f7fd fcf0 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->z  );
 8010d5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010d60:	f7fd fcec 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->_d );
 8010d64:	f504 7094 	add.w	r0, r4, #296	; 0x128
}
 8010d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->_d );
 8010d6c:	f7fd bce6 	b.w	800e73c <mbedtls_mpi_free>
}
 8010d70:	bd10      	pop	{r4, pc}

08010d72 <mbedtls_ecdh_read_params>:
 *          ECPoint         public;
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                      const unsigned char **buf, const unsigned char *end )
{
 8010d72:	b570      	push	{r4, r5, r6, lr}
 8010d74:	4616      	mov	r6, r2
    int ret;

    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8010d76:	680a      	ldr	r2, [r1, #0]
 8010d78:	1ab2      	subs	r2, r6, r2
{
 8010d7a:	4605      	mov	r5, r0
 8010d7c:	460c      	mov	r4, r1
    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8010d7e:	f001 fe31 	bl	80129e4 <mbedtls_ecp_tls_read_group>
 8010d82:	b948      	cbnz	r0, 8010d98 <mbedtls_ecdh_read_params+0x26>
        return( ret );

    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	4622      	mov	r2, r4
 8010d88:	1af3      	subs	r3, r6, r3
 8010d8a:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 8010d8e:	4628      	mov	r0, r5
                != 0 )
        return( ret );

    return( 0 );
}
 8010d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 8010d94:	f001 bdf6 	b.w	8012984 <mbedtls_ecp_tls_read_point>
}
 8010d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d9c <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8010d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010da0:	4616      	mov	r6, r2
 8010da2:	461f      	mov	r7, r3
 8010da4:	460d      	mov	r5, r1
 8010da6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL || ctx->grp.pbits == 0 )
 8010daa:	4604      	mov	r4, r0
 8010dac:	b1b0      	cbz	r0, 8010ddc <mbedtls_ecdh_make_public+0x40>
 8010dae:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010db0:	b1a1      	cbz	r1, 8010ddc <mbedtls_ecdh_make_public+0x40>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 8010db2:	f100 0888 	add.w	r8, r0, #136	; 0x88
    return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );
 8010db6:	9200      	str	r2, [sp, #0]
 8010db8:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8010dbc:	4642      	mov	r2, r8
 8010dbe:	f002 f803 	bl	8012dc8 <mbedtls_ecp_gen_keypair>
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 8010dc2:	b960      	cbnz	r0, 8010dde <mbedtls_ecdh_make_public+0x42>
                != 0 )
        return( ret );

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 8010dc4:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8010dc8:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 8010dcc:	462b      	mov	r3, r5
 8010dce:	4641      	mov	r1, r8
 8010dd0:	4620      	mov	r0, r4
                                olen, buf, blen );
}
 8010dd2:	b002      	add	sp, #8
 8010dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 8010dd8:	f001 bdec 	b.w	80129b4 <mbedtls_ecp_tls_write_point>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010ddc:	4801      	ldr	r0, [pc, #4]	; (8010de4 <mbedtls_ecdh_make_public+0x48>)
}
 8010dde:	b002      	add	sp, #8
 8010de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de4:	ffffb080 	.word	0xffffb080

08010de8 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8010de8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010dec:	4616      	mov	r6, r2
 8010dee:	4698      	mov	r8, r3
 8010df0:	460f      	mov	r7, r1
 8010df2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL )
 8010df6:	4604      	mov	r4, r0
 8010df8:	b918      	cbnz	r0, 8010e02 <mbedtls_ecdh_calc_secret+0x1a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010dfa:	4812      	ldr	r0, [pc, #72]	; (8010e44 <mbedtls_ecdh_calc_secret+0x5c>)
    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
}
 8010dfc:	b002      	add	sp, #8
 8010dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,
 8010e02:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
 8010e06:	e9cd 3200 	strd	r3, r2, [sp]
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8010e10:	f100 02ac 	add.w	r2, r0, #172	; 0xac
 8010e14:	f7ff ff56 	bl	8010cc4 <mbedtls_ecdh_compute_shared>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d1ef      	bne.n	8010dfc <mbedtls_ecdh_calc_secret+0x14>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	f7fd fdce 	bl	800e9be <mbedtls_mpi_size>
 8010e22:	4540      	cmp	r0, r8
 8010e24:	d8e9      	bhi.n	8010dfa <mbedtls_ecdh_calc_secret+0x12>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8010e26:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010e28:	f012 0307 	ands.w	r3, r2, #7
 8010e2c:	bf18      	it	ne
 8010e2e:	2301      	movne	r3, #1
 8010e30:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8010e34:	4631      	mov	r1, r6
 8010e36:	4628      	mov	r0, r5
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8010e38:	603a      	str	r2, [r7, #0]
}
 8010e3a:	b002      	add	sp, #8
 8010e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8010e40:	f7fd bdf6 	b.w	800ea30 <mbedtls_mpi_write_binary>
 8010e44:	ffffb080 	.word	0xffffb080

08010e48 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 8010e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8010e4a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8010e4c:	3507      	adds	r5, #7
 8010e4e:	08ed      	lsrs	r5, r5, #3
    size_t use_size = blen > n_size ? n_size : blen;
 8010e50:	429d      	cmp	r5, r3
 8010e52:	462c      	mov	r4, r5
{
 8010e54:	460f      	mov	r7, r1
    size_t use_size = blen > n_size ? n_size : blen;
 8010e56:	bf28      	it	cs
 8010e58:	461c      	movcs	r4, r3
{
 8010e5a:	4611      	mov	r1, r2
 8010e5c:	4606      	mov	r6, r0

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 8010e5e:	4622      	mov	r2, r4
 8010e60:	4638      	mov	r0, r7
 8010e62:	f7fd fdb2 	bl	800e9ca <mbedtls_mpi_read_binary>
 8010e66:	4605      	mov	r5, r0
 8010e68:	b9e8      	cbnz	r0, 8010ea6 <derive_mpi+0x5e>
    if( use_size * 8 > grp->nbits )
 8010e6a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8010e6c:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 8010e70:	ea4f 01c4 	mov.w	r1, r4, lsl #3
 8010e74:	d310      	bcc.n	8010e98 <derive_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 8010e76:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4638      	mov	r0, r7
 8010e7e:	9201      	str	r2, [sp, #4]
 8010e80:	f7fd ff1b 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8010e84:	2800      	cmp	r0, #0
 8010e86:	db0e      	blt.n	8010ea6 <derive_mpi+0x5e>
 8010e88:	9a01      	ldr	r2, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8010e8a:	4639      	mov	r1, r7
 8010e8c:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
 8010e8e:	b003      	add	sp, #12
 8010e90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 8010e94:	f7fe b822 	b.w	800eedc <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 8010e98:	1ac9      	subs	r1, r1, r3
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	f7fd fe39 	bl	800eb12 <mbedtls_mpi_shift_r>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d0e8      	beq.n	8010e76 <derive_mpi+0x2e>
 8010ea4:	4605      	mov	r5, r0
}
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	b003      	add	sp, #12
 8010eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010eac <mbedtls_ecdsa_sign>:
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8010eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb0:	ed2d 8b02 	vpush	{d8}
 8010eb4:	ee08 3a10 	vmov	s16, r3
    int ret, key_tries, sign_tries, blind_tries;
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8010eb8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 8010eba:	b097      	sub	sp, #92	; 0x5c
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	4688      	mov	r8, r1
 8010ec0:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f000 80af 	beq.w	8011026 <mbedtls_ecdsa_sign+0x17a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_ecp_point_init( &R );
 8010ec8:	a80d      	add	r0, sp, #52	; 0x34
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8010eca:	ae04      	add	r6, sp, #16
    mbedtls_ecp_point_init( &R );
 8010ecc:	f000 ff8e 	bl	8011dec <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	f7fd fc2c 	bl	800e72e <mbedtls_mpi_init>
 8010ed6:	a807      	add	r0, sp, #28
 8010ed8:	f7fd fc29 	bl	800e72e <mbedtls_mpi_init>
 8010edc:	a80a      	add	r0, sp, #40	; 0x28
 8010ede:	f7fd fc26 	bl	800e72e <mbedtls_mpi_init>
 8010ee2:	f04f 0a0c 	mov.w	sl, #12
         */
        key_tries = 0;
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 8010ee6:	f105 094c 	add.w	r9, r5, #76	; 0x4c
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8010eea:	270c      	movs	r7, #12
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
 8010eec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8010eee:	9300      	str	r3, [sp, #0]
 8010ef0:	4631      	mov	r1, r6
 8010ef2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010ef4:	aa0d      	add	r2, sp, #52	; 0x34
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f001 ff66 	bl	8012dc8 <mbedtls_ecp_gen_keypair>
 8010efc:	4601      	mov	r1, r0
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d17b      	bne.n	8010ffa <mbedtls_ecdsa_sign+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 8010f02:	a90d      	add	r1, sp, #52	; 0x34
 8010f04:	464a      	mov	r2, r9
 8010f06:	4640      	mov	r0, r8
 8010f08:	f7fe fa4f 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8010f0c:	4601      	mov	r1, r0
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d173      	bne.n	8010ffa <mbedtls_ecdsa_sign+0x14e>

            if( key_tries++ > 10 )
 8010f12:	3f01      	subs	r7, #1
 8010f14:	f000 8085 	beq.w	8011022 <mbedtls_ecdsa_sign+0x176>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }
        }
        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
 8010f18:	4640      	mov	r0, r8
 8010f1a:	f7fd ff11 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d0e4      	beq.n	8010eec <mbedtls_ecdsa_sign+0x40>

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8010f22:	a907      	add	r1, sp, #28
 8010f24:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8010f28:	4628      	mov	r0, r5
 8010f2a:	f7ff ff8d 	bl	8010e48 <derive_mpi>
 8010f2e:	4601      	mov	r1, r0
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d162      	bne.n	8010ffa <mbedtls_ecdsa_sign+0x14e>
 8010f34:	f04f 0b1f 	mov.w	fp, #31
         * avoiding a potential timing leak.
         */
        blind_tries = 0;
        do
        {
            size_t n_size = ( grp->nbits + 7 ) / 8;
 8010f38:	6def      	ldr	r7, [r5, #92]	; 0x5c
 8010f3a:	3707      	adds	r7, #7
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
 8010f3c:	08f9      	lsrs	r1, r7, #3
 8010f3e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8010f42:	a80a      	add	r0, sp, #40	; 0x28
 8010f44:	f7fe fd15 	bl	800f972 <mbedtls_mpi_fill_random>
 8010f48:	4601      	mov	r1, r0
 8010f4a:	2800      	cmp	r0, #0
 8010f4c:	d155      	bne.n	8010ffa <mbedtls_ecdsa_sign+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
 8010f4e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8010f50:	f027 0707 	bic.w	r7, r7, #7
 8010f54:	1a79      	subs	r1, r7, r1
 8010f56:	a80a      	add	r0, sp, #40	; 0x28
 8010f58:	f7fd fddb 	bl	800eb12 <mbedtls_mpi_shift_r>
 8010f5c:	4601      	mov	r1, r0
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d14b      	bne.n	8010ffa <mbedtls_ecdsa_sign+0x14e>

            /* See mbedtls_ecp_gen_keypair() */
            if( ++blind_tries > 30 )
 8010f62:	f1bb 0b01 	subs.w	fp, fp, #1
 8010f66:	d060      	beq.n	801102a <mbedtls_ecdsa_sign+0x17e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 8010f68:	2101      	movs	r1, #1
 8010f6a:	a80a      	add	r0, sp, #40	; 0x28
 8010f6c:	f7fd fee8 	bl	800ed40 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
 8010f70:	2800      	cmp	r0, #0
 8010f72:	dbe1      	blt.n	8010f38 <mbedtls_ecdsa_sign+0x8c>
 8010f74:	4649      	mov	r1, r9
 8010f76:	a80a      	add	r0, sp, #40	; 0x28
 8010f78:	f7fd fe9f 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	dadb      	bge.n	8010f38 <mbedtls_ecdsa_sign+0x8c>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
 8010f80:	4641      	mov	r1, r8
 8010f82:	ee18 2a10 	vmov	r2, s16
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7fd ffe1 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8010f8c:	4601      	mov	r1, r0
 8010f8e:	bba0      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 8010f90:	a907      	add	r1, sp, #28
 8010f92:	4608      	mov	r0, r1
 8010f94:	4622      	mov	r2, r4
 8010f96:	f7fd ff7f 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8010f9a:	4601      	mov	r1, r0
 8010f9c:	bb68      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 8010f9e:	a907      	add	r1, sp, #28
 8010fa0:	4608      	mov	r0, r1
 8010fa2:	aa0a      	add	r2, sp, #40	; 0x28
 8010fa4:	f7fd ffd3 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8010fa8:	4601      	mov	r1, r0
 8010faa:	bb30      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
 8010fac:	4631      	mov	r1, r6
 8010fae:	aa0a      	add	r2, sp, #40	; 0x28
 8010fb0:	4630      	mov	r0, r6
 8010fb2:	f7fd ffcc 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	b9f8      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
 8010fba:	4631      	mov	r1, r6
 8010fbc:	464a      	mov	r2, r9
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7fe fcf0 	bl	800f9a4 <mbedtls_mpi_inv_mod>
 8010fc4:	4601      	mov	r1, r0
 8010fc6:	b9c0      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8010fc8:	4621      	mov	r1, r4
 8010fca:	aa07      	add	r2, sp, #28
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f7fd ffbe 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8010fd2:	4601      	mov	r1, r0
 8010fd4:	b988      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8010fd6:	4621      	mov	r1, r4
 8010fd8:	464a      	mov	r2, r9
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f7fe f9e5 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	b950      	cbnz	r0, 8010ffa <mbedtls_ecdsa_sign+0x14e>

        if( sign_tries++ > 10 )
 8010fe4:	f1ba 0a01 	subs.w	sl, sl, #1
 8010fe8:	d01b      	beq.n	8011022 <mbedtls_ecdsa_sign+0x176>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
            goto cleanup;
        }
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 8010fea:	9003      	str	r0, [sp, #12]
 8010fec:	4620      	mov	r0, r4
 8010fee:	f7fd fea7 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8010ff2:	9903      	ldr	r1, [sp, #12]
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	f43f af78 	beq.w	8010eea <mbedtls_ecdsa_sign+0x3e>

cleanup:
    mbedtls_ecp_point_free( &R );
 8010ffa:	a80d      	add	r0, sp, #52	; 0x34
 8010ffc:	9103      	str	r1, [sp, #12]
 8010ffe:	f000 ff0f 	bl	8011e20 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 8011002:	a804      	add	r0, sp, #16
 8011004:	f7fd fb9a 	bl	800e73c <mbedtls_mpi_free>
 8011008:	a807      	add	r0, sp, #28
 801100a:	f7fd fb97 	bl	800e73c <mbedtls_mpi_free>
 801100e:	a80a      	add	r0, sp, #40	; 0x28
 8011010:	f7fd fb94 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
 8011014:	9903      	ldr	r1, [sp, #12]
}
 8011016:	4608      	mov	r0, r1
 8011018:	b017      	add	sp, #92	; 0x5c
 801101a:	ecbd 8b02 	vpop	{d8}
 801101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 8011022:	4903      	ldr	r1, [pc, #12]	; (8011030 <mbedtls_ecdsa_sign+0x184>)
 8011024:	e7e9      	b.n	8010ffa <mbedtls_ecdsa_sign+0x14e>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011026:	4903      	ldr	r1, [pc, #12]	; (8011034 <mbedtls_ecdsa_sign+0x188>)
 8011028:	e7f5      	b.n	8011016 <mbedtls_ecdsa_sign+0x16a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 801102a:	4901      	ldr	r1, [pc, #4]	; (8011030 <mbedtls_ecdsa_sign+0x184>)
 801102c:	e7f3      	b.n	8011016 <mbedtls_ecdsa_sign+0x16a>
 801102e:	bf00      	nop
 8011030:	ffffb300 	.word	0xffffb300
 8011034:	ffffb080 	.word	0xffffb080

08011038 <mbedtls_ecdsa_sign_det>:
 * Deterministic signature wrapper
 */
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                    mbedtls_md_type_t md_alg )
{
 8011038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801103c:	b0c5      	sub	sp, #276	; 0x114
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 801103e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 8011040:	f8dd b13c 	ldr.w	fp, [sp, #316]	; 0x13c
 8011044:	4605      	mov	r5, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011046:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
{
 801104a:	4689      	mov	r9, r1
 801104c:	4692      	mov	sl, r2
 801104e:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011050:	f003 fb08 	bl	8014664 <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 8011054:	3407      	adds	r4, #7
 8011056:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011058:	4680      	mov	r8, r0
 801105a:	2800      	cmp	r0, #0
 801105c:	d03c      	beq.n	80110d8 <mbedtls_ecdsa_sign_det+0xa0>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 801105e:	a807      	add	r0, sp, #28
    mbedtls_hmac_drbg_init( &rng_ctx );
 8011060:	ae0a      	add	r6, sp, #40	; 0x28
    mbedtls_mpi_init( &h );
 8011062:	f7fd fb64 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 8011066:	4630      	mov	r0, r6
 8011068:	f003 f9ea 	bl	8014440 <mbedtls_hmac_drbg_init>

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 801106c:	4622      	mov	r2, r4
 801106e:	a923      	add	r1, sp, #140	; 0x8c
 8011070:	4638      	mov	r0, r7
 8011072:	f7fd fcdd 	bl	800ea30 <mbedtls_mpi_write_binary>
 8011076:	4603      	mov	r3, r0
 8011078:	bb10      	cbnz	r0, 80110c0 <mbedtls_ecdsa_sign_det+0x88>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 801107a:	465b      	mov	r3, fp
 801107c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 801107e:	a907      	add	r1, sp, #28
 8011080:	4628      	mov	r0, r5
 8011082:	f7ff fee1 	bl	8010e48 <derive_mpi>
 8011086:	4603      	mov	r3, r0
 8011088:	b9d0      	cbnz	r0, 80110c0 <mbedtls_ecdsa_sign_det+0x88>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 801108a:	ab23      	add	r3, sp, #140	; 0x8c
 801108c:	1919      	adds	r1, r3, r4
 801108e:	4622      	mov	r2, r4
 8011090:	a807      	add	r0, sp, #28
 8011092:	f7fd fccd 	bl	800ea30 <mbedtls_mpi_write_binary>
 8011096:	4603      	mov	r3, r0
 8011098:	b990      	cbnz	r0, 80110c0 <mbedtls_ecdsa_sign_det+0x88>
    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
 801109a:	0063      	lsls	r3, r4, #1
 801109c:	aa23      	add	r2, sp, #140	; 0x8c
 801109e:	4641      	mov	r1, r8
 80110a0:	4630      	mov	r0, r6
 80110a2:	f003 fa1d 	bl	80144e0 <mbedtls_hmac_drbg_seed_buf>

    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
 80110a6:	4b0d      	ldr	r3, [pc, #52]	; (80110dc <mbedtls_ecdsa_sign_det+0xa4>)
 80110a8:	9603      	str	r6, [sp, #12]
 80110aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80110ae:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	4652      	mov	r2, sl
 80110b4:	463b      	mov	r3, r7
 80110b6:	4649      	mov	r1, r9
 80110b8:	4628      	mov	r0, r5
 80110ba:	f7ff fef7 	bl	8010eac <mbedtls_ecdsa_sign>
 80110be:	4603      	mov	r3, r0
                      mbedtls_hmac_drbg_random, &rng_ctx );

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 80110c0:	4630      	mov	r0, r6
 80110c2:	9305      	str	r3, [sp, #20]
 80110c4:	f003 fac9 	bl	801465a <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 80110c8:	a807      	add	r0, sp, #28
 80110ca:	f7fd fb37 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
 80110ce:	9b05      	ldr	r3, [sp, #20]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	b045      	add	sp, #276	; 0x114
 80110d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80110d8:	4b01      	ldr	r3, [pc, #4]	; (80110e0 <mbedtls_ecdsa_sign_det+0xa8>)
 80110da:	e7f9      	b.n	80110d0 <mbedtls_ecdsa_sign_det+0x98>
 80110dc:	0801464b 	.word	0x0801464b
 80110e0:	ffffb080 	.word	0xffffb080

080110e4 <mbedtls_ecdsa_verify>:
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                  const unsigned char *buf, size_t blen,
                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
{
 80110e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e8:	b099      	sub	sp, #100	; 0x64
 80110ea:	4605      	mov	r5, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;

    mbedtls_ecp_point_init( &R );
 80110ec:	a80f      	add	r0, sp, #60	; 0x3c
{
 80110ee:	4698      	mov	r8, r3
 80110f0:	468a      	mov	sl, r1
 80110f2:	4693      	mov	fp, r2
 80110f4:	e9dd 6922 	ldrd	r6, r9, [sp, #136]	; 0x88
    mbedtls_ecp_point_init( &R );
 80110f8:	f000 fe78 	bl	8011dec <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 80110fc:	a803      	add	r0, sp, #12
 80110fe:	f7fd fb16 	bl	800e72e <mbedtls_mpi_init>
 8011102:	a806      	add	r0, sp, #24
 8011104:	f7fd fb13 	bl	800e72e <mbedtls_mpi_init>
 8011108:	a809      	add	r0, sp, #36	; 0x24
 801110a:	f7fd fb10 	bl	800e72e <mbedtls_mpi_init>
 801110e:	a80c      	add	r0, sp, #48	; 0x30
 8011110:	f7fd fb0d 	bl	800e72e <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8011114:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8011116:	2b00      	cmp	r3, #0
 8011118:	d07f      	beq.n	801121a <mbedtls_ecdsa_verify+0x136>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 801111a:	2101      	movs	r1, #1
 801111c:	4630      	mov	r0, r6
 801111e:	f7fd fe0f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8011122:	2800      	cmp	r0, #0
 8011124:	db65      	blt.n	80111f2 <mbedtls_ecdsa_verify+0x10e>
 8011126:	f105 074c 	add.w	r7, r5, #76	; 0x4c
 801112a:	4639      	mov	r1, r7
 801112c:	4630      	mov	r0, r6
 801112e:	f7fd fdc4 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8011132:	2800      	cmp	r0, #0
 8011134:	da5d      	bge.n	80111f2 <mbedtls_ecdsa_verify+0x10e>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8011136:	2101      	movs	r1, #1
 8011138:	4648      	mov	r0, r9
 801113a:	f7fd fe01 	bl	800ed40 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 801113e:	2800      	cmp	r0, #0
 8011140:	db57      	blt.n	80111f2 <mbedtls_ecdsa_verify+0x10e>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8011142:	4639      	mov	r1, r7
 8011144:	4648      	mov	r0, r9
 8011146:	f7fd fdb8 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 801114a:	2800      	cmp	r0, #0
 801114c:	da51      	bge.n	80111f2 <mbedtls_ecdsa_verify+0x10e>
    }

    /*
     * Additional precaution: make sure Q is valid
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 801114e:	4641      	mov	r1, r8
 8011150:	4628      	mov	r0, r5
 8011152:	f001 fc6b 	bl	8012a2c <mbedtls_ecp_check_pubkey>
 8011156:	4604      	mov	r4, r0
 8011158:	2800      	cmp	r0, #0
 801115a:	d14b      	bne.n	80111f4 <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 801115c:	465b      	mov	r3, fp
 801115e:	4652      	mov	r2, sl
 8011160:	a903      	add	r1, sp, #12
 8011162:	4628      	mov	r0, r5
 8011164:	f7ff fe70 	bl	8010e48 <derive_mpi>
 8011168:	4604      	mov	r4, r0
 801116a:	2800      	cmp	r0, #0
 801116c:	d142      	bne.n	80111f4 <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 801116e:	463a      	mov	r2, r7
 8011170:	4649      	mov	r1, r9
 8011172:	a806      	add	r0, sp, #24
 8011174:	f7fe fc16 	bl	800f9a4 <mbedtls_mpi_inv_mod>
 8011178:	4604      	mov	r4, r0
 801117a:	2800      	cmp	r0, #0
 801117c:	d13a      	bne.n	80111f4 <mbedtls_ecdsa_verify+0x110>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
 801117e:	aa06      	add	r2, sp, #24
 8011180:	a903      	add	r1, sp, #12
 8011182:	a809      	add	r0, sp, #36	; 0x24
 8011184:	f7fd fee3 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011188:	4604      	mov	r4, r0
 801118a:	bb98      	cbnz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
 801118c:	a909      	add	r1, sp, #36	; 0x24
 801118e:	463a      	mov	r2, r7
 8011190:	4608      	mov	r0, r1
 8011192:	f7fe f90a 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8011196:	4604      	mov	r4, r0
 8011198:	bb60      	cbnz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
 801119a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 801119e:	aa06      	add	r2, sp, #24
 80111a0:	4631      	mov	r1, r6
 80111a2:	4648      	mov	r0, r9
 80111a4:	f7fd fed3 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80111a8:	4604      	mov	r4, r0
 80111aa:	bb18      	cbnz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
 80111ac:	463a      	mov	r2, r7
 80111ae:	4649      	mov	r1, r9
 80111b0:	4648      	mov	r0, r9
 80111b2:	f7fe f8fa 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 80111b6:	4604      	mov	r4, r0
 80111b8:	b9e0      	cbnz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>
     * Step 5: R = u1 G + u2 Q
     *
     * Since we're not using any secret data, no need to pass a RNG to
     * mbedtls_ecp_mul() for countermesures.
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
 80111ba:	e9cd 9800 	strd	r9, r8, [sp]
 80111be:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80111c2:	aa09      	add	r2, sp, #36	; 0x24
 80111c4:	a90f      	add	r1, sp, #60	; 0x3c
 80111c6:	4628      	mov	r0, r5
 80111c8:	f001 fd7c 	bl	8012cc4 <mbedtls_ecp_muladd>
 80111cc:	4604      	mov	r4, r0
 80111ce:	b988      	cbnz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>

    if( mbedtls_ecp_is_zero( &R ) )
 80111d0:	a80f      	add	r0, sp, #60	; 0x3c
 80111d2:	f001 fb45 	bl	8012860 <mbedtls_ecp_is_zero>
 80111d6:	b960      	cbnz	r0, 80111f2 <mbedtls_ecdsa_verify+0x10e>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 80111d8:	a90f      	add	r1, sp, #60	; 0x3c
 80111da:	463a      	mov	r2, r7
 80111dc:	4608      	mov	r0, r1
 80111de:	f7fe f8e4 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 80111e2:	4604      	mov	r4, r0
 80111e4:	b930      	cbnz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 80111e6:	4631      	mov	r1, r6
 80111e8:	a80f      	add	r0, sp, #60	; 0x3c
 80111ea:	f7fd fd66 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 80111ee:	4604      	mov	r4, r0
 80111f0:	b100      	cbz	r0, 80111f4 <mbedtls_ecdsa_verify+0x110>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 80111f2:	4c0b      	ldr	r4, [pc, #44]	; (8011220 <mbedtls_ecdsa_verify+0x13c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 80111f4:	a80f      	add	r0, sp, #60	; 0x3c
 80111f6:	f000 fe13 	bl	8011e20 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 80111fa:	a803      	add	r0, sp, #12
 80111fc:	f7fd fa9e 	bl	800e73c <mbedtls_mpi_free>
 8011200:	a806      	add	r0, sp, #24
 8011202:	f7fd fa9b 	bl	800e73c <mbedtls_mpi_free>
 8011206:	a809      	add	r0, sp, #36	; 0x24
 8011208:	f7fd fa98 	bl	800e73c <mbedtls_mpi_free>
 801120c:	a80c      	add	r0, sp, #48	; 0x30
 801120e:	f7fd fa95 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
}
 8011212:	4620      	mov	r0, r4
 8011214:	b019      	add	sp, #100	; 0x64
 8011216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801121a:	4c02      	ldr	r4, [pc, #8]	; (8011224 <mbedtls_ecdsa_verify+0x140>)
 801121c:	e7f9      	b.n	8011212 <mbedtls_ecdsa_verify+0x12e>
 801121e:	bf00      	nop
 8011220:	ffffb200 	.word	0xffffb200
 8011224:	ffffb080 	.word	0xffffb080

08011228 <mbedtls_ecdsa_write_signature>:
int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng )
{
 8011228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801122a:	b0b1      	sub	sp, #196	; 0xc4
 801122c:	4604      	mov	r4, r0
    int ret;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 801122e:	a806      	add	r0, sp, #24
{
 8011230:	4615      	mov	r5, r2
 8011232:	460f      	mov	r7, r1
 8011234:	461e      	mov	r6, r3
    mbedtls_mpi_init( &r );
 8011236:	f7fd fa7a 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 801123a:	a809      	add	r0, sp, #36	; 0x24
 801123c:	f7fd fa77 	bl	800e72e <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
 8011240:	9500      	str	r5, [sp, #0]
 8011242:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8011246:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 801124a:	aa09      	add	r2, sp, #36	; 0x24
 801124c:	a906      	add	r1, sp, #24
 801124e:	4620      	mov	r0, r4
 8011250:	f7ff fef2 	bl	8011038 <mbedtls_ecdsa_sign_det>
 8011254:	4605      	mov	r5, r0
 8011256:	bb58      	cbnz	r0, 80112b0 <mbedtls_ecdsa_write_signature+0x88>
    unsigned char *p = buf + sizeof( buf );
 8011258:	f10d 03bd 	add.w	r3, sp, #189	; 0xbd
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 801125c:	aa09      	add	r2, sp, #36	; 0x24
 801125e:	a90c      	add	r1, sp, #48	; 0x30
 8011260:	a805      	add	r0, sp, #20
    unsigned char *p = buf + sizeof( buf );
 8011262:	9305      	str	r3, [sp, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 8011264:	f7fc ffe8 	bl	800e238 <mbedtls_asn1_write_mpi>
 8011268:	1e04      	subs	r4, r0, #0
 801126a:	db20      	blt.n	80112ae <mbedtls_ecdsa_write_signature+0x86>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 801126c:	aa06      	add	r2, sp, #24
 801126e:	a90c      	add	r1, sp, #48	; 0x30
 8011270:	a805      	add	r0, sp, #20
 8011272:	f7fc ffe1 	bl	800e238 <mbedtls_asn1_write_mpi>
 8011276:	2800      	cmp	r0, #0
 8011278:	db23      	blt.n	80112c2 <mbedtls_ecdsa_write_signature+0x9a>
 801127a:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 801127c:	4632      	mov	r2, r6
 801127e:	a90c      	add	r1, sp, #48	; 0x30
 8011280:	a805      	add	r0, sp, #20
 8011282:	f7fc ff57 	bl	800e134 <mbedtls_asn1_write_len>
 8011286:	1e04      	subs	r4, r0, #0
 8011288:	db11      	blt.n	80112ae <mbedtls_ecdsa_write_signature+0x86>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 801128a:	2230      	movs	r2, #48	; 0x30
 801128c:	eb0d 0102 	add.w	r1, sp, r2
 8011290:	a805      	add	r0, sp, #20
 8011292:	f7fc ffc3 	bl	800e21c <mbedtls_asn1_write_tag>
 8011296:	1e02      	subs	r2, r0, #0
 8011298:	db15      	blt.n	80112c6 <mbedtls_ecdsa_write_signature+0x9e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 801129a:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 801129c:	4414      	add	r4, r2
    memcpy( sig, p, len );
 801129e:	4622      	mov	r2, r4
 80112a0:	9905      	ldr	r1, [sp, #20]
 80112a2:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80112a4:	f010 ff80 	bl	80221a8 <memcpy>
    *slen = len;
 80112a8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80112aa:	601c      	str	r4, [r3, #0]
    return( 0 );
 80112ac:	462c      	mov	r4, r5

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#endif

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 80112ae:	4625      	mov	r5, r4

cleanup:
    mbedtls_mpi_free( &r );
 80112b0:	a806      	add	r0, sp, #24
 80112b2:	f7fd fa43 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80112b6:	a809      	add	r0, sp, #36	; 0x24
 80112b8:	f7fd fa40 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
}
 80112bc:	4628      	mov	r0, r5
 80112be:	b031      	add	sp, #196	; 0xc4
 80112c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112c2:	4604      	mov	r4, r0
 80112c4:	e7f3      	b.n	80112ae <mbedtls_ecdsa_write_signature+0x86>
 80112c6:	4614      	mov	r4, r2
 80112c8:	e7f1      	b.n	80112ae <mbedtls_ecdsa_write_signature+0x86>
	...

080112cc <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 80112cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112d0:	b08a      	sub	sp, #40	; 0x28
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
    size_t len;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 80112d2:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
 80112d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
 80112d6:	9302      	str	r3, [sp, #8]
{
 80112d8:	4680      	mov	r8, r0
    mbedtls_mpi_init( &s );
 80112da:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 80112dc:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 80112de:	441d      	add	r5, r3
{
 80112e0:	4689      	mov	r9, r1
 80112e2:	4692      	mov	sl, r2
    mbedtls_mpi_init( &r );
 80112e4:	f7fd fa23 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 80112e8:	4630      	mov	r0, r6
 80112ea:	f7fd fa20 	bl	800e72e <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80112ee:	2330      	movs	r3, #48	; 0x30
 80112f0:	aa03      	add	r2, sp, #12
 80112f2:	4629      	mov	r1, r5
 80112f4:	a802      	add	r0, sp, #8
 80112f6:	f7fc fddf 	bl	800deb8 <mbedtls_asn1_get_tag>
 80112fa:	b158      	cbz	r0, 8011314 <mbedtls_ecdsa_read_signature+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80112fc:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80

    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 8011300:	4638      	mov	r0, r7
 8011302:	f7fd fa1b 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8011306:	4630      	mov	r0, r6
 8011308:	f7fd fa18 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
}
 801130c:	4620      	mov	r0, r4
 801130e:	b00a      	add	sp, #40	; 0x28
 8011310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( p + len != end )
 8011314:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011318:	4413      	add	r3, r2
 801131a:	429d      	cmp	r5, r3
 801131c:	d11f      	bne.n	801135e <mbedtls_ecdsa_read_signature+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 801131e:	463a      	mov	r2, r7
 8011320:	4629      	mov	r1, r5
 8011322:	a802      	add	r0, sp, #8
 8011324:	f7fc fe18 	bl	800df58 <mbedtls_asn1_get_mpi>
 8011328:	2800      	cmp	r0, #0
 801132a:	d1e7      	bne.n	80112fc <mbedtls_ecdsa_read_signature+0x30>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 801132c:	4632      	mov	r2, r6
 801132e:	4629      	mov	r1, r5
 8011330:	a802      	add	r0, sp, #8
 8011332:	f7fc fe11 	bl	800df58 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 8011336:	2800      	cmp	r0, #0
 8011338:	d1e0      	bne.n	80112fc <mbedtls_ecdsa_read_signature+0x30>
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
 801133a:	e9cd 7600 	strd	r7, r6, [sp]
 801133e:	f108 0388 	add.w	r3, r8, #136	; 0x88
 8011342:	4652      	mov	r2, sl
 8011344:	4649      	mov	r1, r9
 8011346:	4640      	mov	r0, r8
 8011348:	f7ff fecc 	bl	80110e4 <mbedtls_ecdsa_verify>
 801134c:	4604      	mov	r4, r0
 801134e:	2800      	cmp	r0, #0
 8011350:	d1d6      	bne.n	8011300 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 8011352:	9a02      	ldr	r2, [sp, #8]
 8011354:	4b03      	ldr	r3, [pc, #12]	; (8011364 <mbedtls_ecdsa_read_signature+0x98>)
 8011356:	42aa      	cmp	r2, r5
 8011358:	bf18      	it	ne
 801135a:	461c      	movne	r4, r3
 801135c:	e7d0      	b.n	8011300 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 801135e:	4c02      	ldr	r4, [pc, #8]	; (8011368 <mbedtls_ecdsa_read_signature+0x9c>)
 8011360:	e7ce      	b.n	8011300 <mbedtls_ecdsa_read_signature+0x34>
 8011362:	bf00      	nop
 8011364:	ffffb400 	.word	0xffffb400
 8011368:	ffffb01a 	.word	0xffffb01a

0801136c <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	4605      	mov	r5, r0
 8011370:	460e      	mov	r6, r1
    int ret;

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 8011372:	f000 fdb5 	bl	8011ee0 <mbedtls_ecp_group_copy>
 8011376:	4604      	mov	r4, r0
 8011378:	b978      	cbnz	r0, 801139a <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 801137a:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 801137e:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 8011382:	f7fd fa5b 	bl	800e83c <mbedtls_mpi_copy>
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 8011386:	4604      	mov	r4, r0
 8011388:	b938      	cbnz	r0, 801139a <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 801138a:	f106 0188 	add.w	r1, r6, #136	; 0x88
 801138e:	f105 0088 	add.w	r0, r5, #136	; 0x88
 8011392:	f000 fd8f 	bl	8011eb4 <mbedtls_ecp_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 8011396:	4604      	mov	r4, r0
 8011398:	b110      	cbz	r0, 80113a0 <mbedtls_ecdsa_from_keypair+0x34>
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    mbedtls_ecp_keypair_free( ctx );
 801139a:	4628      	mov	r0, r5
 801139c:	f000 fd7a 	bl	8011e94 <mbedtls_ecp_keypair_free>
}
 80113a0:	4620      	mov	r0, r4
 80113a2:	bd70      	pop	{r4, r5, r6, pc}

080113a4 <mbedtls_ecdsa_init>:
    mbedtls_ecp_keypair_init( ctx );
 80113a4:	f000 bd2c 	b.w	8011e00 <mbedtls_ecp_keypair_init>

080113a8 <mbedtls_ecdsa_free>:
    mbedtls_ecp_keypair_free( ctx );
 80113a8:	f000 bd74 	b.w	8011e94 <mbedtls_ecp_keypair_free>

080113ac <ecp_get_type>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
 80113ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80113ae:	b12b      	cbz	r3, 80113bc <ecp_get_type+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
 80113b0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80113b2:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 80113b4:	bf0c      	ite	eq
 80113b6:	2002      	moveq	r0, #2
 80113b8:	2001      	movne	r0, #1
 80113ba:	4770      	bx	lr
        return( ECP_TYPE_NONE );
 80113bc:	4618      	mov	r0, r3
}
 80113be:	4770      	bx	lr

080113c0 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 80113c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80113c2:	460d      	mov	r5, r1
 80113c4:	4604      	mov	r4, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80113c6:	350c      	adds	r5, #12
    mbedtls_mpi_init( &mQY );
 80113c8:	a801      	add	r0, sp, #4
{
 80113ca:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 80113cc:	f7fd f9af 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 80113d0:	1d21      	adds	r1, r4, #4
 80113d2:	462a      	mov	r2, r5
 80113d4:	a801      	add	r0, sp, #4
 80113d6:	f7fd fd81 	bl	800eedc <mbedtls_mpi_sub_mpi>
 80113da:	4604      	mov	r4, r0
 80113dc:	b968      	cbnz	r0, 80113fa <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 80113de:	4601      	mov	r1, r0
 80113e0:	4628      	mov	r0, r5
 80113e2:	f7fd fcad 	bl	800ed40 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 80113e6:	a901      	add	r1, sp, #4
 80113e8:	2800      	cmp	r0, #0
 80113ea:	bf0c      	ite	eq
 80113ec:	2200      	moveq	r2, #0
 80113ee:	f006 0201 	andne.w	r2, r6, #1
 80113f2:	4628      	mov	r0, r5
 80113f4:	f7fd fa4c 	bl	800e890 <mbedtls_mpi_safe_cond_assign>
 80113f8:	4604      	mov	r4, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 80113fa:	a801      	add	r0, sp, #4
 80113fc:	f7fd f99e 	bl	800e73c <mbedtls_mpi_free>

    return( ret );
}
 8011400:	4620      	mov	r0, r4
 8011402:	b004      	add	sp, #16
 8011404:	bd70      	pop	{r4, r5, r6, pc}

08011406 <ecp_select_comb>:
 * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char t_len,
                            unsigned char i )
{
 8011406:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 801140e:	4606      	mov	r6, r0
 8011410:	460d      	mov	r5, r1
 8011412:	461f      	mov	r7, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 8011414:	f3c8 0945 	ubfx	r9, r8, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < t_len; j++ )
 8011418:	4614      	mov	r4, r2
    ii =  ( i & 0x7Fu ) >> 1;
 801141a:	f04f 0b00 	mov.w	fp, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 801141e:	f101 0a0c 	add.w	sl, r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 8011422:	fa5f f28b 	uxtb.w	r2, fp
 8011426:	eba2 0309 	sub.w	r3, r2, r9
 801142a:	425a      	negs	r2, r3
 801142c:	415a      	adcs	r2, r3
 801142e:	4621      	mov	r1, r4
 8011430:	4628      	mov	r0, r5
 8011432:	9201      	str	r2, [sp, #4]
 8011434:	f7fd fa2c 	bl	800e890 <mbedtls_mpi_safe_cond_assign>
 8011438:	b9a8      	cbnz	r0, 8011466 <ecp_select_comb+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 801143a:	9a01      	ldr	r2, [sp, #4]
 801143c:	f104 010c 	add.w	r1, r4, #12
 8011440:	4650      	mov	r0, sl
 8011442:	f7fd fa25 	bl	800e890 <mbedtls_mpi_safe_cond_assign>
 8011446:	b970      	cbnz	r0, 8011466 <ecp_select_comb+0x60>
    for( j = 0; j < t_len; j++ )
 8011448:	f10b 0b01 	add.w	fp, fp, #1
 801144c:	45bb      	cmp	fp, r7
 801144e:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8011452:	d1e6      	bne.n	8011422 <ecp_select_comb+0x1c>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 8011454:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 8011458:	4629      	mov	r1, r5
 801145a:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
 801145c:	b003      	add	sp, #12
 801145e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 8011462:	f7ff bfad 	b.w	80113c0 <ecp_safe_invert_jac>
}
 8011466:	b003      	add	sp, #12
 8011468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801146c <ecp_modp>:
    if( grp->modp == NULL )
 801146c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 801146e:	b570      	push	{r4, r5, r6, lr}
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 8011474:	b92b      	cbnz	r3, 8011482 <ecp_modp+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 8011476:	1d0a      	adds	r2, r1, #4
}
 8011478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 801147c:	4601      	mov	r1, r0
 801147e:	f7fd bf94 	b.w	800f3aa <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8011482:	6803      	ldr	r3, [r0, #0]
 8011484:	2b00      	cmp	r3, #0
 8011486:	db09      	blt.n	801149c <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 8011488:	4620      	mov	r0, r4
 801148a:	f7fd fa7c 	bl	800e986 <mbedtls_mpi_bitlen>
 801148e:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 8011490:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 8011494:	d908      	bls.n	80114a8 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011496:	4e17      	ldr	r6, [pc, #92]	; (80114f4 <ecp_modp+0x88>)
}
 8011498:	4630      	mov	r0, r6
 801149a:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 801149c:	2100      	movs	r1, #0
 801149e:	f7fd fc4f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80114a2:	2800      	cmp	r0, #0
 80114a4:	d0f0      	beq.n	8011488 <ecp_modp+0x1c>
 80114a6:	e7f6      	b.n	8011496 <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 80114a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114aa:	4620      	mov	r0, r4
 80114ac:	4798      	blx	r3
 80114ae:	4606      	mov	r6, r0
 80114b0:	2800      	cmp	r0, #0
 80114b2:	d1f1      	bne.n	8011498 <ecp_modp+0x2c>
 80114b4:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	da04      	bge.n	80114c6 <ecp_modp+0x5a>
 80114bc:	2100      	movs	r1, #0
 80114be:	4620      	mov	r0, r4
 80114c0:	f7fd fc3e 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80114c4:	b968      	cbnz	r0, 80114e2 <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 80114c6:	4629      	mov	r1, r5
 80114c8:	4620      	mov	r0, r4
 80114ca:	f7fd fbf6 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 80114ce:	2800      	cmp	r0, #0
 80114d0:	dbe2      	blt.n	8011498 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80114d2:	462a      	mov	r2, r5
 80114d4:	4621      	mov	r1, r4
 80114d6:	4620      	mov	r0, r4
 80114d8:	f7fd fca1 	bl	800ee1e <mbedtls_mpi_sub_abs>
 80114dc:	2800      	cmp	r0, #0
 80114de:	d0f2      	beq.n	80114c6 <ecp_modp+0x5a>
 80114e0:	e006      	b.n	80114f0 <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 80114e2:	462a      	mov	r2, r5
 80114e4:	4621      	mov	r1, r4
 80114e6:	4620      	mov	r0, r4
 80114e8:	f7fd fcd6 	bl	800ee98 <mbedtls_mpi_add_mpi>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	d0e2      	beq.n	80114b6 <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 80114f0:	4606      	mov	r6, r0
 80114f2:	e7d1      	b.n	8011498 <ecp_modp+0x2c>
 80114f4:	ffffb080 	.word	0xffffb080

080114f8 <ecp_double_jac>:
{
 80114f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbl_count++;
 80114fc:	4cb9      	ldr	r4, [pc, #740]	; (80117e4 <ecp_double_jac+0x2ec>)
 80114fe:	6823      	ldr	r3, [r4, #0]
{
 8011500:	b08c      	sub	sp, #48	; 0x30
    dbl_count++;
 8011502:	3301      	adds	r3, #1
{
 8011504:	4607      	mov	r7, r0
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 8011506:	4668      	mov	r0, sp
    dbl_count++;
 8011508:	6023      	str	r3, [r4, #0]
{
 801150a:	460d      	mov	r5, r1
 801150c:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 801150e:	f7fd f90e 	bl	800e72e <mbedtls_mpi_init>
 8011512:	a803      	add	r0, sp, #12
 8011514:	f7fd f90b 	bl	800e72e <mbedtls_mpi_init>
 8011518:	a806      	add	r0, sp, #24
 801151a:	f7fd f908 	bl	800e72e <mbedtls_mpi_init>
 801151e:	a809      	add	r0, sp, #36	; 0x24
 8011520:	f7fd f905 	bl	800e72e <mbedtls_mpi_init>
    if( grp->A.p == NULL )
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	46a2      	mov	sl, r4
 8011528:	2b00      	cmp	r3, #0
 801152a:	f040 8189 	bne.w	8011840 <ecp_double_jac+0x348>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801152e:	f108 0218 	add.w	r2, r8, #24
 8011532:	4611      	mov	r1, r2
 8011534:	a803      	add	r0, sp, #12
 8011536:	f7fd fd0a 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801153a:	4604      	mov	r4, r0
 801153c:	2800      	cmp	r0, #0
 801153e:	f040 815c 	bne.w	80117fa <ecp_double_jac+0x302>
 8011542:	4639      	mov	r1, r7
 8011544:	a803      	add	r0, sp, #12
 8011546:	f7ff ff91 	bl	801146c <ecp_modp>
 801154a:	4604      	mov	r4, r0
 801154c:	2800      	cmp	r0, #0
 801154e:	f040 8154 	bne.w	80117fa <ecp_double_jac+0x302>
 8011552:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8011556:	aa03      	add	r2, sp, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011558:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 801155a:	4641      	mov	r1, r8
 801155c:	a806      	add	r0, sp, #24
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801155e:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8011562:	f7fd fc99 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8011566:	4604      	mov	r4, r0
 8011568:	2800      	cmp	r0, #0
 801156a:	f040 8146 	bne.w	80117fa <ecp_double_jac+0x302>
 801156e:	1d3e      	adds	r6, r7, #4
 8011570:	4631      	mov	r1, r6
 8011572:	a806      	add	r0, sp, #24
 8011574:	f7fd fba1 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8011578:	2800      	cmp	r0, #0
 801157a:	f280 8135 	bge.w	80117e8 <ecp_double_jac+0x2f0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 801157e:	aa03      	add	r2, sp, #12
 8011580:	4641      	mov	r1, r8
 8011582:	a809      	add	r0, sp, #36	; 0x24
 8011584:	f7fd fcaa 	bl	800eedc <mbedtls_mpi_sub_mpi>
 8011588:	4604      	mov	r4, r0
 801158a:	2800      	cmp	r0, #0
 801158c:	f040 8135 	bne.w	80117fa <ecp_double_jac+0x302>
 8011590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011592:	2b00      	cmp	r3, #0
 8011594:	f2c0 8141 	blt.w	801181a <ecp_double_jac+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011598:	aa09      	add	r2, sp, #36	; 0x24
 801159a:	a906      	add	r1, sp, #24
 801159c:	a803      	add	r0, sp, #12
 801159e:	f7fd fcd6 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80115a2:	4604      	mov	r4, r0
 80115a4:	2800      	cmp	r0, #0
 80115a6:	f040 8128 	bne.w	80117fa <ecp_double_jac+0x302>
 80115aa:	4639      	mov	r1, r7
 80115ac:	a803      	add	r0, sp, #12
 80115ae:	f7ff ff5d 	bl	801146c <ecp_modp>
 80115b2:	4604      	mov	r4, r0
 80115b4:	2800      	cmp	r0, #0
 80115b6:	f040 8120 	bne.w	80117fa <ecp_double_jac+0x302>
 80115ba:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80115be:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 80115c0:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80115c2:	a903      	add	r1, sp, #12
 80115c4:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 80115c6:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80115ca:	f7fd fd24 	bl	800f016 <mbedtls_mpi_mul_int>
 80115ce:	4604      	mov	r4, r0
 80115d0:	2800      	cmp	r0, #0
 80115d2:	f040 8112 	bne.w	80117fa <ecp_double_jac+0x302>
 80115d6:	4631      	mov	r1, r6
 80115d8:	4668      	mov	r0, sp
 80115da:	f7fd fb6e 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 80115de:	2800      	cmp	r0, #0
 80115e0:	f280 8128 	bge.w	8011834 <ecp_double_jac+0x33c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 80115e4:	f108 090c 	add.w	r9, r8, #12
 80115e8:	464a      	mov	r2, r9
 80115ea:	4649      	mov	r1, r9
 80115ec:	a806      	add	r0, sp, #24
 80115ee:	f7fd fcae 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80115f2:	4604      	mov	r4, r0
 80115f4:	2800      	cmp	r0, #0
 80115f6:	f040 8100 	bne.w	80117fa <ecp_double_jac+0x302>
 80115fa:	4639      	mov	r1, r7
 80115fc:	a806      	add	r0, sp, #24
 80115fe:	f7ff ff35 	bl	801146c <ecp_modp>
 8011602:	4604      	mov	r4, r0
 8011604:	2800      	cmp	r0, #0
 8011606:	f040 80f8 	bne.w	80117fa <ecp_double_jac+0x302>
 801160a:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 801160e:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011610:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011612:	a806      	add	r0, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011614:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011618:	f7fd fa2d 	bl	800ea76 <mbedtls_mpi_shift_l>
 801161c:	4604      	mov	r4, r0
 801161e:	2800      	cmp	r0, #0
 8011620:	f040 80eb 	bne.w	80117fa <ecp_double_jac+0x302>
 8011624:	1d3e      	adds	r6, r7, #4
 8011626:	4631      	mov	r1, r6
 8011628:	a806      	add	r0, sp, #24
 801162a:	f7fd fb46 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 801162e:	2800      	cmp	r0, #0
 8011630:	f280 8190 	bge.w	8011954 <ecp_double_jac+0x45c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8011634:	aa06      	add	r2, sp, #24
 8011636:	4641      	mov	r1, r8
 8011638:	a803      	add	r0, sp, #12
 801163a:	f7fd fc88 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801163e:	4604      	mov	r4, r0
 8011640:	2800      	cmp	r0, #0
 8011642:	f040 80da 	bne.w	80117fa <ecp_double_jac+0x302>
 8011646:	4639      	mov	r1, r7
 8011648:	a803      	add	r0, sp, #12
 801164a:	f7ff ff0f 	bl	801146c <ecp_modp>
 801164e:	4604      	mov	r4, r0
 8011650:	2800      	cmp	r0, #0
 8011652:	f040 80d2 	bne.w	80117fa <ecp_double_jac+0x302>
 8011656:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 801165a:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 801165c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 801165e:	a803      	add	r0, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8011660:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8011664:	f7fd fa07 	bl	800ea76 <mbedtls_mpi_shift_l>
 8011668:	4604      	mov	r4, r0
 801166a:	2800      	cmp	r0, #0
 801166c:	f040 80c5 	bne.w	80117fa <ecp_double_jac+0x302>
 8011670:	4631      	mov	r1, r6
 8011672:	a803      	add	r0, sp, #12
 8011674:	f7fd fb21 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8011678:	2800      	cmp	r0, #0
 801167a:	f280 8175 	bge.w	8011968 <ecp_double_jac+0x470>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 801167e:	aa06      	add	r2, sp, #24
 8011680:	4611      	mov	r1, r2
 8011682:	a809      	add	r0, sp, #36	; 0x24
 8011684:	f7fd fc63 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011688:	4604      	mov	r4, r0
 801168a:	2800      	cmp	r0, #0
 801168c:	f040 80b5 	bne.w	80117fa <ecp_double_jac+0x302>
 8011690:	4639      	mov	r1, r7
 8011692:	a809      	add	r0, sp, #36	; 0x24
 8011694:	f7ff feea 	bl	801146c <ecp_modp>
 8011698:	4604      	mov	r4, r0
 801169a:	2800      	cmp	r0, #0
 801169c:	f040 80ad 	bne.w	80117fa <ecp_double_jac+0x302>
 80116a0:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80116a4:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80116a6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80116a8:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80116aa:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80116ae:	f7fd f9e2 	bl	800ea76 <mbedtls_mpi_shift_l>
 80116b2:	4604      	mov	r4, r0
 80116b4:	2800      	cmp	r0, #0
 80116b6:	f040 80a0 	bne.w	80117fa <ecp_double_jac+0x302>
 80116ba:	4631      	mov	r1, r6
 80116bc:	a809      	add	r0, sp, #36	; 0x24
 80116be:	f7fd fafc 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 80116c2:	2800      	cmp	r0, #0
 80116c4:	f280 8156 	bge.w	8011974 <ecp_double_jac+0x47c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80116c8:	466a      	mov	r2, sp
 80116ca:	4669      	mov	r1, sp
 80116cc:	a806      	add	r0, sp, #24
 80116ce:	f7fd fc3e 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80116d2:	4604      	mov	r4, r0
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f040 8090 	bne.w	80117fa <ecp_double_jac+0x302>
 80116da:	4639      	mov	r1, r7
 80116dc:	a806      	add	r0, sp, #24
 80116de:	f7ff fec5 	bl	801146c <ecp_modp>
 80116e2:	4604      	mov	r4, r0
 80116e4:	2800      	cmp	r0, #0
 80116e6:	f040 8088 	bne.w	80117fa <ecp_double_jac+0x302>
 80116ea:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80116ee:	a906      	add	r1, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80116f0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80116f2:	aa03      	add	r2, sp, #12
 80116f4:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 80116f6:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 80116fa:	f7fd fbef 	bl	800eedc <mbedtls_mpi_sub_mpi>
 80116fe:	4604      	mov	r4, r0
 8011700:	2800      	cmp	r0, #0
 8011702:	d17a      	bne.n	80117fa <ecp_double_jac+0x302>
 8011704:	9b06      	ldr	r3, [sp, #24]
 8011706:	2b00      	cmp	r3, #0
 8011708:	f2c0 813a 	blt.w	8011980 <ecp_double_jac+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 801170c:	a906      	add	r1, sp, #24
 801170e:	aa03      	add	r2, sp, #12
 8011710:	4608      	mov	r0, r1
 8011712:	f7fd fbe3 	bl	800eedc <mbedtls_mpi_sub_mpi>
 8011716:	4604      	mov	r4, r0
 8011718:	2800      	cmp	r0, #0
 801171a:	d16e      	bne.n	80117fa <ecp_double_jac+0x302>
 801171c:	9b06      	ldr	r3, [sp, #24]
 801171e:	2b00      	cmp	r3, #0
 8011720:	f2c0 813b 	blt.w	801199a <ecp_double_jac+0x4a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 8011724:	a903      	add	r1, sp, #12
 8011726:	aa06      	add	r2, sp, #24
 8011728:	4608      	mov	r0, r1
 801172a:	f7fd fbd7 	bl	800eedc <mbedtls_mpi_sub_mpi>
 801172e:	4604      	mov	r4, r0
 8011730:	2800      	cmp	r0, #0
 8011732:	d162      	bne.n	80117fa <ecp_double_jac+0x302>
 8011734:	9b03      	ldr	r3, [sp, #12]
 8011736:	2b00      	cmp	r3, #0
 8011738:	f2c0 813c 	blt.w	80119b4 <ecp_double_jac+0x4bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 801173c:	a903      	add	r1, sp, #12
 801173e:	466a      	mov	r2, sp
 8011740:	4608      	mov	r0, r1
 8011742:	f7fd fc04 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011746:	4604      	mov	r4, r0
 8011748:	2800      	cmp	r0, #0
 801174a:	d156      	bne.n	80117fa <ecp_double_jac+0x302>
 801174c:	4639      	mov	r1, r7
 801174e:	a803      	add	r0, sp, #12
 8011750:	f7ff fe8c 	bl	801146c <ecp_modp>
 8011754:	4604      	mov	r4, r0
 8011756:	2800      	cmp	r0, #0
 8011758:	d14f      	bne.n	80117fa <ecp_double_jac+0x302>
 801175a:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 801175e:	a903      	add	r1, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8011760:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011762:	aa09      	add	r2, sp, #36	; 0x24
 8011764:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 8011766:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 801176a:	f7fd fbb7 	bl	800eedc <mbedtls_mpi_sub_mpi>
 801176e:	4604      	mov	r4, r0
 8011770:	2800      	cmp	r0, #0
 8011772:	d142      	bne.n	80117fa <ecp_double_jac+0x302>
 8011774:	9b03      	ldr	r3, [sp, #12]
 8011776:	2b00      	cmp	r3, #0
 8011778:	f2c0 8129 	blt.w	80119ce <ecp_double_jac+0x4d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 801177c:	f108 0218 	add.w	r2, r8, #24
 8011780:	4649      	mov	r1, r9
 8011782:	a809      	add	r0, sp, #36	; 0x24
 8011784:	f7fd fbe3 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011788:	4604      	mov	r4, r0
 801178a:	2800      	cmp	r0, #0
 801178c:	d135      	bne.n	80117fa <ecp_double_jac+0x302>
 801178e:	4639      	mov	r1, r7
 8011790:	a809      	add	r0, sp, #36	; 0x24
 8011792:	f7ff fe6b 	bl	801146c <ecp_modp>
 8011796:	4604      	mov	r4, r0
 8011798:	bb78      	cbnz	r0, 80117fa <ecp_double_jac+0x302>
 801179a:	4a12      	ldr	r2, [pc, #72]	; (80117e4 <ecp_double_jac+0x2ec>)
 801179c:	6853      	ldr	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 801179e:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80117a0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80117a2:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80117a4:	6053      	str	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80117a6:	f7fd f966 	bl	800ea76 <mbedtls_mpi_shift_l>
 80117aa:	4604      	mov	r4, r0
 80117ac:	bb28      	cbnz	r0, 80117fa <ecp_double_jac+0x302>
 80117ae:	4631      	mov	r1, r6
 80117b0:	a809      	add	r0, sp, #36	; 0x24
 80117b2:	f7fd fa82 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 80117b6:	2800      	cmp	r0, #0
 80117b8:	f280 8116 	bge.w	80119e8 <ecp_double_jac+0x4f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 80117bc:	a906      	add	r1, sp, #24
 80117be:	4628      	mov	r0, r5
 80117c0:	f7fd f83c 	bl	800e83c <mbedtls_mpi_copy>
 80117c4:	4604      	mov	r4, r0
 80117c6:	b9c0      	cbnz	r0, 80117fa <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 80117c8:	a903      	add	r1, sp, #12
 80117ca:	f105 000c 	add.w	r0, r5, #12
 80117ce:	f7fd f835 	bl	800e83c <mbedtls_mpi_copy>
 80117d2:	4604      	mov	r4, r0
 80117d4:	b988      	cbnz	r0, 80117fa <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 80117d6:	a909      	add	r1, sp, #36	; 0x24
 80117d8:	f105 0018 	add.w	r0, r5, #24
 80117dc:	f7fd f82e 	bl	800e83c <mbedtls_mpi_copy>
 80117e0:	4604      	mov	r4, r0
cleanup:
 80117e2:	e00a      	b.n	80117fa <ecp_double_jac+0x302>
 80117e4:	20001058 	.word	0x20001058
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80117e8:	a906      	add	r1, sp, #24
 80117ea:	4632      	mov	r2, r6
 80117ec:	4608      	mov	r0, r1
 80117ee:	f7fd fb16 	bl	800ee1e <mbedtls_mpi_sub_abs>
 80117f2:	4604      	mov	r4, r0
 80117f4:	2800      	cmp	r0, #0
 80117f6:	f43f aebb 	beq.w	8011570 <ecp_double_jac+0x78>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 80117fa:	4668      	mov	r0, sp
 80117fc:	f7fc ff9e 	bl	800e73c <mbedtls_mpi_free>
 8011800:	a803      	add	r0, sp, #12
 8011802:	f7fc ff9b 	bl	800e73c <mbedtls_mpi_free>
 8011806:	a806      	add	r0, sp, #24
 8011808:	f7fc ff98 	bl	800e73c <mbedtls_mpi_free>
 801180c:	a809      	add	r0, sp, #36	; 0x24
 801180e:	f7fc ff95 	bl	800e73c <mbedtls_mpi_free>
}
 8011812:	4620      	mov	r0, r4
 8011814:	b00c      	add	sp, #48	; 0x30
 8011816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 801181a:	2100      	movs	r1, #0
 801181c:	a809      	add	r0, sp, #36	; 0x24
 801181e:	f7fd fa8f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8011822:	2800      	cmp	r0, #0
 8011824:	f43f aeb8 	beq.w	8011598 <ecp_double_jac+0xa0>
 8011828:	a909      	add	r1, sp, #36	; 0x24
 801182a:	4632      	mov	r2, r6
 801182c:	4608      	mov	r0, r1
 801182e:	f7fd fb33 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8011832:	e6a9      	b.n	8011588 <ecp_double_jac+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011834:	4632      	mov	r2, r6
 8011836:	4669      	mov	r1, sp
 8011838:	4668      	mov	r0, sp
 801183a:	f7fd faf0 	bl	800ee1e <mbedtls_mpi_sub_abs>
 801183e:	e6c6      	b.n	80115ce <ecp_double_jac+0xd6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011840:	4642      	mov	r2, r8
 8011842:	4641      	mov	r1, r8
 8011844:	a803      	add	r0, sp, #12
 8011846:	f7fd fb82 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801184a:	4604      	mov	r4, r0
 801184c:	2800      	cmp	r0, #0
 801184e:	d1d4      	bne.n	80117fa <ecp_double_jac+0x302>
 8011850:	4639      	mov	r1, r7
 8011852:	a803      	add	r0, sp, #12
 8011854:	f7ff fe0a 	bl	801146c <ecp_modp>
 8011858:	4604      	mov	r4, r0
 801185a:	2800      	cmp	r0, #0
 801185c:	d1cd      	bne.n	80117fa <ecp_double_jac+0x302>
 801185e:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011862:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011864:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011866:	a903      	add	r1, sp, #12
 8011868:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 801186a:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 801186e:	f7fd fbd2 	bl	800f016 <mbedtls_mpi_mul_int>
 8011872:	4604      	mov	r4, r0
 8011874:	2800      	cmp	r0, #0
 8011876:	d1c0      	bne.n	80117fa <ecp_double_jac+0x302>
 8011878:	1d3e      	adds	r6, r7, #4
 801187a:	4631      	mov	r1, r6
 801187c:	4668      	mov	r0, sp
 801187e:	f7fd fa1c 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8011882:	2800      	cmp	r0, #0
 8011884:	da5d      	bge.n	8011942 <ecp_double_jac+0x44a>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 8011886:	f107 0910 	add.w	r9, r7, #16
 801188a:	2100      	movs	r1, #0
 801188c:	4648      	mov	r0, r9
 801188e:	f7fd fa57 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8011892:	2800      	cmp	r0, #0
 8011894:	f43f aea6 	beq.w	80115e4 <ecp_double_jac+0xec>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011898:	f108 0218 	add.w	r2, r8, #24
 801189c:	4611      	mov	r1, r2
 801189e:	a803      	add	r0, sp, #12
 80118a0:	f7fd fb55 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80118a4:	4604      	mov	r4, r0
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d1a7      	bne.n	80117fa <ecp_double_jac+0x302>
 80118aa:	4639      	mov	r1, r7
 80118ac:	a803      	add	r0, sp, #12
 80118ae:	f7ff fddd 	bl	801146c <ecp_modp>
 80118b2:	4604      	mov	r4, r0
 80118b4:	2800      	cmp	r0, #0
 80118b6:	d1a0      	bne.n	80117fa <ecp_double_jac+0x302>
 80118b8:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80118bc:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80118be:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80118c0:	4611      	mov	r1, r2
 80118c2:	a806      	add	r0, sp, #24
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 80118c4:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80118c8:	f7fd fb41 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80118cc:	4604      	mov	r4, r0
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d193      	bne.n	80117fa <ecp_double_jac+0x302>
 80118d2:	4639      	mov	r1, r7
 80118d4:	a806      	add	r0, sp, #24
 80118d6:	f7ff fdc9 	bl	801146c <ecp_modp>
 80118da:	4604      	mov	r4, r0
 80118dc:	2800      	cmp	r0, #0
 80118de:	d18c      	bne.n	80117fa <ecp_double_jac+0x302>
 80118e0:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 80118e4:	464a      	mov	r2, r9
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80118e6:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 80118e8:	a906      	add	r1, sp, #24
 80118ea:	a803      	add	r0, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 80118ec:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 80118f0:	f7fd fb2d 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80118f4:	4604      	mov	r4, r0
 80118f6:	2800      	cmp	r0, #0
 80118f8:	f47f af7f 	bne.w	80117fa <ecp_double_jac+0x302>
 80118fc:	4639      	mov	r1, r7
 80118fe:	a803      	add	r0, sp, #12
 8011900:	f7ff fdb4 	bl	801146c <ecp_modp>
 8011904:	4604      	mov	r4, r0
 8011906:	2800      	cmp	r0, #0
 8011908:	f47f af77 	bne.w	80117fa <ecp_double_jac+0x302>
 801190c:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011910:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011912:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011914:	4669      	mov	r1, sp
 8011916:	4668      	mov	r0, sp
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011918:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 801191c:	f7fd fabc 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8011920:	4604      	mov	r4, r0
 8011922:	2800      	cmp	r0, #0
 8011924:	f47f af69 	bne.w	80117fa <ecp_double_jac+0x302>
 8011928:	4631      	mov	r1, r6
 801192a:	4668      	mov	r0, sp
 801192c:	f7fd f9c5 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8011930:	2800      	cmp	r0, #0
 8011932:	f6ff ae57 	blt.w	80115e4 <ecp_double_jac+0xec>
 8011936:	4632      	mov	r2, r6
 8011938:	4669      	mov	r1, sp
 801193a:	4668      	mov	r0, sp
 801193c:	f7fd fa6f 	bl	800ee1e <mbedtls_mpi_sub_abs>
 8011940:	e7ee      	b.n	8011920 <ecp_double_jac+0x428>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011942:	4632      	mov	r2, r6
 8011944:	4669      	mov	r1, sp
 8011946:	4668      	mov	r0, sp
 8011948:	f7fd fa69 	bl	800ee1e <mbedtls_mpi_sub_abs>
 801194c:	4604      	mov	r4, r0
 801194e:	2800      	cmp	r0, #0
 8011950:	d093      	beq.n	801187a <ecp_double_jac+0x382>
 8011952:	e752      	b.n	80117fa <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011954:	a906      	add	r1, sp, #24
 8011956:	4632      	mov	r2, r6
 8011958:	4608      	mov	r0, r1
 801195a:	f7fd fa60 	bl	800ee1e <mbedtls_mpi_sub_abs>
 801195e:	4604      	mov	r4, r0
 8011960:	2800      	cmp	r0, #0
 8011962:	f43f ae60 	beq.w	8011626 <ecp_double_jac+0x12e>
 8011966:	e748      	b.n	80117fa <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8011968:	a903      	add	r1, sp, #12
 801196a:	4632      	mov	r2, r6
 801196c:	4608      	mov	r0, r1
 801196e:	f7fd fa56 	bl	800ee1e <mbedtls_mpi_sub_abs>
 8011972:	e679      	b.n	8011668 <ecp_double_jac+0x170>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011974:	a909      	add	r1, sp, #36	; 0x24
 8011976:	4632      	mov	r2, r6
 8011978:	4608      	mov	r0, r1
 801197a:	f7fd fa50 	bl	800ee1e <mbedtls_mpi_sub_abs>
 801197e:	e698      	b.n	80116b2 <ecp_double_jac+0x1ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011980:	2100      	movs	r1, #0
 8011982:	a806      	add	r0, sp, #24
 8011984:	f7fd f9dc 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8011988:	2800      	cmp	r0, #0
 801198a:	f43f aebf 	beq.w	801170c <ecp_double_jac+0x214>
 801198e:	a906      	add	r1, sp, #24
 8011990:	4632      	mov	r2, r6
 8011992:	4608      	mov	r0, r1
 8011994:	f7fd fa80 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8011998:	e6b1      	b.n	80116fe <ecp_double_jac+0x206>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 801199a:	2100      	movs	r1, #0
 801199c:	a806      	add	r0, sp, #24
 801199e:	f7fd f9cf 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	f43f aebe 	beq.w	8011724 <ecp_double_jac+0x22c>
 80119a8:	a906      	add	r1, sp, #24
 80119aa:	4632      	mov	r2, r6
 80119ac:	4608      	mov	r0, r1
 80119ae:	f7fd fa73 	bl	800ee98 <mbedtls_mpi_add_mpi>
 80119b2:	e6b0      	b.n	8011716 <ecp_double_jac+0x21e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 80119b4:	2100      	movs	r1, #0
 80119b6:	a803      	add	r0, sp, #12
 80119b8:	f7fd f9c2 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80119bc:	2800      	cmp	r0, #0
 80119be:	f43f aebd 	beq.w	801173c <ecp_double_jac+0x244>
 80119c2:	a903      	add	r1, sp, #12
 80119c4:	4632      	mov	r2, r6
 80119c6:	4608      	mov	r0, r1
 80119c8:	f7fd fa66 	bl	800ee98 <mbedtls_mpi_add_mpi>
 80119cc:	e6af      	b.n	801172e <ecp_double_jac+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80119ce:	2100      	movs	r1, #0
 80119d0:	a803      	add	r0, sp, #12
 80119d2:	f7fd f9b5 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80119d6:	2800      	cmp	r0, #0
 80119d8:	f43f aed0 	beq.w	801177c <ecp_double_jac+0x284>
 80119dc:	a903      	add	r1, sp, #12
 80119de:	4632      	mov	r2, r6
 80119e0:	4608      	mov	r0, r1
 80119e2:	f7fd fa59 	bl	800ee98 <mbedtls_mpi_add_mpi>
 80119e6:	e6c2      	b.n	801176e <ecp_double_jac+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80119e8:	a909      	add	r1, sp, #36	; 0x24
 80119ea:	4632      	mov	r2, r6
 80119ec:	4608      	mov	r0, r1
 80119ee:	f7fd fa16 	bl	800ee1e <mbedtls_mpi_sub_abs>
 80119f2:	e6da      	b.n	80117aa <ecp_double_jac+0x2b2>

080119f4 <ecp_normalize_jac>:
{
 80119f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 80119f8:	f101 0518 	add.w	r5, r1, #24
{
 80119fc:	b086      	sub	sp, #24
 80119fe:	4606      	mov	r6, r0
 8011a00:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8011a02:	4628      	mov	r0, r5
 8011a04:	2100      	movs	r1, #0
 8011a06:	f7fd f99b 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8011a0a:	4604      	mov	r4, r0
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d05d      	beq.n	8011acc <ecp_normalize_jac+0xd8>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011a10:	4668      	mov	r0, sp
 8011a12:	f7fc fe8c 	bl	800e72e <mbedtls_mpi_init>
 8011a16:	a803      	add	r0, sp, #12
 8011a18:	f7fc fe89 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8011a1c:	1d32      	adds	r2, r6, #4
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4668      	mov	r0, sp
 8011a22:	f7fd ffbf 	bl	800f9a4 <mbedtls_mpi_inv_mod>
 8011a26:	4604      	mov	r4, r0
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	d149      	bne.n	8011ac0 <ecp_normalize_jac+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011a2c:	466a      	mov	r2, sp
 8011a2e:	4669      	mov	r1, sp
 8011a30:	a803      	add	r0, sp, #12
 8011a32:	f7fd fa8c 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011a36:	4604      	mov	r4, r0
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	d141      	bne.n	8011ac0 <ecp_normalize_jac+0xcc>
 8011a3c:	4631      	mov	r1, r6
 8011a3e:	a803      	add	r0, sp, #12
 8011a40:	f7ff fd14 	bl	801146c <ecp_modp>
 8011a44:	4604      	mov	r4, r0
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d13a      	bne.n	8011ac0 <ecp_normalize_jac+0xcc>
 8011a4a:	4f22      	ldr	r7, [pc, #136]	; (8011ad4 <ecp_normalize_jac+0xe0>)
 8011a4c:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011a4e:	aa03      	add	r2, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011a50:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011a52:	4641      	mov	r1, r8
 8011a54:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011a56:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011a58:	f7fd fa79 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011a5c:	4604      	mov	r4, r0
 8011a5e:	bb78      	cbnz	r0, 8011ac0 <ecp_normalize_jac+0xcc>
 8011a60:	4631      	mov	r1, r6
 8011a62:	4640      	mov	r0, r8
 8011a64:	f7ff fd02 	bl	801146c <ecp_modp>
 8011a68:	4604      	mov	r4, r0
 8011a6a:	bb48      	cbnz	r0, 8011ac0 <ecp_normalize_jac+0xcc>
 8011a6c:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011a6e:	f108 080c 	add.w	r8, r8, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011a72:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011a74:	aa03      	add	r2, sp, #12
 8011a76:	4641      	mov	r1, r8
 8011a78:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011a7a:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011a7c:	f7fd fa67 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011a80:	4604      	mov	r4, r0
 8011a82:	b9e8      	cbnz	r0, 8011ac0 <ecp_normalize_jac+0xcc>
 8011a84:	4631      	mov	r1, r6
 8011a86:	4640      	mov	r0, r8
 8011a88:	f7ff fcf0 	bl	801146c <ecp_modp>
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	b9b8      	cbnz	r0, 8011ac0 <ecp_normalize_jac+0xcc>
 8011a90:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011a92:	466a      	mov	r2, sp
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011a94:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011a96:	4641      	mov	r1, r8
 8011a98:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011a9a:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011a9c:	f7fd fa57 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	b968      	cbnz	r0, 8011ac0 <ecp_normalize_jac+0xcc>
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	4640      	mov	r0, r8
 8011aa8:	f7ff fce0 	bl	801146c <ecp_modp>
 8011aac:	4604      	mov	r4, r0
 8011aae:	b938      	cbnz	r0, 8011ac0 <ecp_normalize_jac+0xcc>
 8011ab0:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011ab2:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011ab4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011ab6:	4628      	mov	r0, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011ab8:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011aba:	f7fc ff1c 	bl	800e8f6 <mbedtls_mpi_lset>
 8011abe:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011ac0:	4668      	mov	r0, sp
 8011ac2:	f7fc fe3b 	bl	800e73c <mbedtls_mpi_free>
 8011ac6:	a803      	add	r0, sp, #12
 8011ac8:	f7fc fe38 	bl	800e73c <mbedtls_mpi_free>
}
 8011acc:	4620      	mov	r0, r4
 8011ace:	b006      	add	sp, #24
 8011ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad4:	20001058 	.word	0x20001058

08011ad8 <ecp_normalize_jac_many>:
{
 8011ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( t_len < 2 )
 8011adc:	2a01      	cmp	r2, #1
{
 8011ade:	b08d      	sub	sp, #52	; 0x34
 8011ae0:	4605      	mov	r5, r0
 8011ae2:	4688      	mov	r8, r1
 8011ae4:	4617      	mov	r7, r2
    if( t_len < 2 )
 8011ae6:	d807      	bhi.n	8011af8 <ecp_normalize_jac_many+0x20>
        return( ecp_normalize_jac( grp, *T ) );
 8011ae8:	6809      	ldr	r1, [r1, #0]
 8011aea:	f7ff ff83 	bl	80119f4 <ecp_normalize_jac>
 8011aee:	4683      	mov	fp, r0
}
 8011af0:	4658      	mov	r0, fp
 8011af2:	b00d      	add	sp, #52	; 0x34
 8011af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )
 8011af8:	4b8f      	ldr	r3, [pc, #572]	; (8011d38 <ecp_normalize_jac_many+0x260>)
 8011afa:	210c      	movs	r1, #12
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4610      	mov	r0, r2
 8011b00:	4798      	blx	r3
 8011b02:	4606      	mov	r6, r0
 8011b04:	2800      	cmp	r0, #0
 8011b06:	f000 8114 	beq.w	8011d32 <ecp_normalize_jac_many+0x25a>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011b0a:	a803      	add	r0, sp, #12
 8011b0c:	f7fc fe0f 	bl	800e72e <mbedtls_mpi_init>
 8011b10:	a806      	add	r0, sp, #24
 8011b12:	f7fc fe0c 	bl	800e72e <mbedtls_mpi_init>
 8011b16:	a809      	add	r0, sp, #36	; 0x24
 8011b18:	f7fc fe09 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8011b1c:	f8d8 1000 	ldr.w	r1, [r8]
 8011b20:	4630      	mov	r0, r6
 8011b22:	3118      	adds	r1, #24
 8011b24:	f7fc fe8a 	bl	800e83c <mbedtls_mpi_copy>
 8011b28:	4683      	mov	fp, r0
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d140      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
        MOD_MUL( c[i] );
 8011b2e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8011d40 <ecp_normalize_jac_many+0x268>
 8011b32:	f108 0404 	add.w	r4, r8, #4
 8011b36:	f106 0a0c 	add.w	sl, r6, #12
 8011b3a:	eb08 0887 	add.w	r8, r8, r7, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 8011b3e:	f854 2b04 	ldr.w	r2, [r4], #4
 8011b42:	f1aa 010c 	sub.w	r1, sl, #12
 8011b46:	3218      	adds	r2, #24
 8011b48:	4650      	mov	r0, sl
 8011b4a:	f7fd fa00 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011b4e:	4683      	mov	fp, r0
 8011b50:	bb70      	cbnz	r0, 8011bb0 <ecp_normalize_jac_many+0xd8>
        MOD_MUL( c[i] );
 8011b52:	4629      	mov	r1, r5
 8011b54:	4650      	mov	r0, sl
 8011b56:	f7ff fc89 	bl	801146c <ecp_modp>
 8011b5a:	4683      	mov	fp, r0
 8011b5c:	bb40      	cbnz	r0, 8011bb0 <ecp_normalize_jac_many+0xd8>
 8011b5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    for( i = 1; i < t_len; i++ )
 8011b62:	4544      	cmp	r4, r8
        MOD_MUL( c[i] );
 8011b64:	f103 0301 	add.w	r3, r3, #1
 8011b68:	f8c9 3004 	str.w	r3, [r9, #4]
    for( i = 1; i < t_len; i++ )
 8011b6c:	f10a 0a0c 	add.w	sl, sl, #12
 8011b70:	d1e5      	bne.n	8011b3e <ecp_normalize_jac_many+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );
 8011b72:	f04f 080c 	mov.w	r8, #12
 8011b76:	fb08 6107 	mla	r1, r8, r7, r6
 8011b7a:	1d2a      	adds	r2, r5, #4
 8011b7c:	390c      	subs	r1, #12
 8011b7e:	eb0d 0008 	add.w	r0, sp, r8
 8011b82:	f7fd ff0f 	bl	800f9a4 <mbedtls_mpi_inv_mod>
 8011b86:	4683      	mov	fp, r0
 8011b88:	b990      	cbnz	r0, 8011bb0 <ecp_normalize_jac_many+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011b8a:	f8cd 8000 	str.w	r8, [sp]
 8011b8e:	f1a6 030c 	sub.w	r3, r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011b92:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8011d40 <ecp_normalize_jac_many+0x268>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011b96:	9301      	str	r3, [sp, #4]
    for( i = t_len - 1; ; i-- )
 8011b98:	f107 3aff 	add.w	sl, r7, #4294967295
        if( i == 0 ) {
 8011b9c:	f1ba 0f00 	cmp.w	sl, #0
 8011ba0:	d11e      	bne.n	8011be0 <ecp_normalize_jac_many+0x108>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 8011ba2:	a903      	add	r1, sp, #12
 8011ba4:	a806      	add	r0, sp, #24
 8011ba6:	f7fc fe49 	bl	800e83c <mbedtls_mpi_copy>
 8011baa:	4683      	mov	fp, r0
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d044      	beq.n	8011c3a <ecp_normalize_jac_many+0x162>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011bb0:	a803      	add	r0, sp, #12
 8011bb2:	f7fc fdc3 	bl	800e73c <mbedtls_mpi_free>
 8011bb6:	a806      	add	r0, sp, #24
 8011bb8:	f7fc fdc0 	bl	800e73c <mbedtls_mpi_free>
 8011bbc:	a809      	add	r0, sp, #36	; 0x24
 8011bbe:	f7fc fdbd 	bl	800e73c <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011bc2:	220c      	movs	r2, #12
 8011bc4:	4634      	mov	r4, r6
 8011bc6:	fb02 6707 	mla	r7, r2, r7, r6
        mbedtls_mpi_free( &c[i] );
 8011bca:	4620      	mov	r0, r4
 8011bcc:	340c      	adds	r4, #12
 8011bce:	f7fc fdb5 	bl	800e73c <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011bd2:	42a7      	cmp	r7, r4
 8011bd4:	d1f9      	bne.n	8011bca <ecp_normalize_jac_many+0xf2>
    mbedtls_free( c );
 8011bd6:	4a59      	ldr	r2, [pc, #356]	; (8011d3c <ecp_normalize_jac_many+0x264>)
 8011bd8:	4630      	mov	r0, r6
 8011bda:	6812      	ldr	r2, [r2, #0]
 8011bdc:	4790      	blx	r2
    return( ret );
 8011bde:	e787      	b.n	8011af0 <ecp_normalize_jac_many+0x18>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011be0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011be4:	a903      	add	r1, sp, #12
 8011be6:	fb03 220a 	mla	r2, r3, sl, r2
 8011bea:	a806      	add	r0, sp, #24
 8011bec:	f7fd f9af 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011bf0:	4683      	mov	fp, r0
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d1dc      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011bf6:	4629      	mov	r1, r5
 8011bf8:	a806      	add	r0, sp, #24
 8011bfa:	f7ff fc37 	bl	801146c <ecp_modp>
 8011bfe:	4683      	mov	fp, r0
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d1d5      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011c04:	f8d9 3004 	ldr.w	r3, [r9, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011c08:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8011c0c:	a903      	add	r1, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011c0e:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011c10:	3218      	adds	r2, #24
 8011c12:	4608      	mov	r0, r1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011c14:	f8c9 3004 	str.w	r3, [r9, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011c18:	f7fd f999 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011c1c:	4683      	mov	fp, r0
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	d1c6      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011c22:	4629      	mov	r1, r5
 8011c24:	a803      	add	r0, sp, #12
 8011c26:	f7ff fc21 	bl	801146c <ecp_modp>
 8011c2a:	4683      	mov	fp, r0
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d1bf      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011c30:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011c34:	3301      	adds	r3, #1
 8011c36:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011c3a:	aa06      	add	r2, sp, #24
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	a809      	add	r0, sp, #36	; 0x24
 8011c40:	f7fd f985 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011c44:	4683      	mov	fp, r0
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d1b2      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	a809      	add	r0, sp, #36	; 0x24
 8011c4e:	f7ff fc0d 	bl	801146c <ecp_modp>
 8011c52:	4683      	mov	fp, r0
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d1ab      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011c58:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011c5c:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011c60:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011c62:	aa09      	add	r2, sp, #36	; 0x24
 8011c64:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011c66:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011c6a:	f7fd f970 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011c6e:	4683      	mov	fp, r0
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d19d      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011c74:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011c78:	4629      	mov	r1, r5
 8011c7a:	f7ff fbf7 	bl	801146c <ecp_modp>
 8011c7e:	4683      	mov	fp, r0
 8011c80:	2800      	cmp	r0, #0
 8011c82:	d195      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011c84:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011c88:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011c8c:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011c8e:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011c90:	aa09      	add	r2, sp, #36	; 0x24
 8011c92:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011c94:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011c98:	f7fd f959 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011c9c:	4683      	mov	fp, r0
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d186      	bne.n	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011ca2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	300c      	adds	r0, #12
 8011caa:	f7ff fbdf 	bl	801146c <ecp_modp>
 8011cae:	4683      	mov	fp, r0
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	f47f af7d 	bne.w	8011bb0 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011cb6:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011cba:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011cbe:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011cc0:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011cc2:	aa06      	add	r2, sp, #24
 8011cc4:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011cc6:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011cca:	f7fd f940 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011cce:	4683      	mov	fp, r0
 8011cd0:	2800      	cmp	r0, #0
 8011cd2:	f47f af6d 	bne.w	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011cd6:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011cda:	4629      	mov	r1, r5
 8011cdc:	300c      	adds	r0, #12
 8011cde:	f7ff fbc5 	bl	801146c <ecp_modp>
 8011ce2:	4683      	mov	fp, r0
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	f47f af63 	bne.w	8011bb0 <ecp_normalize_jac_many+0xd8>
 8011cea:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011cee:	68a9      	ldr	r1, [r5, #8]
 8011cf0:	f854 0c04 	ldr.w	r0, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011cfa:	f7fc fd67 	bl	800e7cc <mbedtls_mpi_shrink>
 8011cfe:	4683      	mov	fp, r0
 8011d00:	2800      	cmp	r0, #0
 8011d02:	f47f af55 	bne.w	8011bb0 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8011d06:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011d0a:	68a9      	ldr	r1, [r5, #8]
 8011d0c:	300c      	adds	r0, #12
 8011d0e:	f7fc fd5d 	bl	800e7cc <mbedtls_mpi_shrink>
 8011d12:	4683      	mov	fp, r0
 8011d14:	2800      	cmp	r0, #0
 8011d16:	f47f af4b 	bne.w	8011bb0 <ecp_normalize_jac_many+0xd8>
        mbedtls_mpi_free( &T[i]->Z );
 8011d1a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8011d1e:	3018      	adds	r0, #24
 8011d20:	f7fc fd0c 	bl	800e73c <mbedtls_mpi_free>
        if( i == 0 )
 8011d24:	f1ba 0f00 	cmp.w	sl, #0
 8011d28:	f43f af42 	beq.w	8011bb0 <ecp_normalize_jac_many+0xd8>
    for( i = t_len - 1; ; i-- )
 8011d2c:	f10a 3aff 	add.w	sl, sl, #4294967295
        if( i == 0 ) {
 8011d30:	e734      	b.n	8011b9c <ecp_normalize_jac_many+0xc4>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 8011d32:	f8df b010 	ldr.w	fp, [pc, #16]	; 8011d44 <ecp_normalize_jac_many+0x26c>
 8011d36:	e6db      	b.n	8011af0 <ecp_normalize_jac_many+0x18>
 8011d38:	20000538 	.word	0x20000538
 8011d3c:	2000053c 	.word	0x2000053c
 8011d40:	20001058 	.word	0x20001058
 8011d44:	ffffb280 	.word	0xffffb280

08011d48 <mbedtls_ecp_point_init.part.0>:
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
 8011d48:	b510      	push	{r4, lr}
 8011d4a:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 8011d4c:	f7fc fcef 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8011d50:	f104 000c 	add.w	r0, r4, #12
 8011d54:	f7fc fceb 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8011d58:	f104 0018 	add.w	r0, r4, #24
}
 8011d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 8011d60:	f7fc bce5 	b.w	800e72e <mbedtls_mpi_init>

08011d64 <mbedtls_ecp_point_free.part.0>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 8011d64:	b510      	push	{r4, lr}
 8011d66:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 8011d68:	f7fc fce8 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8011d6c:	f104 000c 	add.w	r0, r4, #12
 8011d70:	f7fc fce4 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 8011d74:	f104 0018 	add.w	r0, r4, #24
}
 8011d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 8011d7c:	f7fc bcde 	b.w	800e73c <mbedtls_mpi_free>

08011d80 <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 8011d80:	4a0a      	ldr	r2, [pc, #40]	; (8011dac <mbedtls_ecp_grp_id_list+0x2c>)
 8011d82:	6893      	ldr	r3, [r2, #8]
{
 8011d84:	b530      	push	{r4, r5, lr}
    if( ! init_done )
 8011d86:	b95b      	cbnz	r3, 8011da0 <mbedtls_ecp_grp_id_list+0x20>
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011d88:	4c09      	ldr	r4, [pc, #36]	; (8011db0 <mbedtls_ecp_grp_id_list+0x30>)
 8011d8a:	f102 000c 	add.w	r0, r2, #12
 8011d8e:	250c      	movs	r5, #12
 8011d90:	fb05 f103 	mul.w	r1, r5, r3
 8011d94:	5d09      	ldrb	r1, [r1, r4]
        for( curve_info = mbedtls_ecp_curve_list();
 8011d96:	b929      	cbnz	r1, 8011da4 <mbedtls_ecp_grp_id_list+0x24>
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 8011d98:	4413      	add	r3, r2
 8011d9a:	7319      	strb	r1, [r3, #12]
        init_done = 1;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	6093      	str	r3, [r2, #8]
}
 8011da0:	4804      	ldr	r0, [pc, #16]	; (8011db4 <mbedtls_ecp_grp_id_list+0x34>)
 8011da2:	bd30      	pop	{r4, r5, pc}
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 8011da4:	f800 1b01 	strb.w	r1, [r0], #1
 8011da8:	3301      	adds	r3, #1
             curve_info++ )
 8011daa:	e7f1      	b.n	8011d90 <mbedtls_ecp_grp_id_list+0x10>
 8011dac:	20001058 	.word	0x20001058
 8011db0:	0802a990 	.word	0x0802a990
 8011db4:	20001064 	.word	0x20001064

08011db8 <mbedtls_ecp_curve_info_from_grp_id>:
{
 8011db8:	4602      	mov	r2, r0
    for( curve_info = mbedtls_ecp_curve_list();
 8011dba:	4804      	ldr	r0, [pc, #16]	; (8011dcc <mbedtls_ecp_curve_info_from_grp_id+0x14>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011dbc:	7803      	ldrb	r3, [r0, #0]
    for( curve_info = mbedtls_ecp_curve_list();
 8011dbe:	b90b      	cbnz	r3, 8011dc4 <mbedtls_ecp_curve_info_from_grp_id+0xc>
    return( NULL );
 8011dc0:	4618      	mov	r0, r3
}
 8011dc2:	4770      	bx	lr
        if( curve_info->grp_id == grp_id )
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d0fc      	beq.n	8011dc2 <mbedtls_ecp_curve_info_from_grp_id+0xa>
         curve_info++ )
 8011dc8:	300c      	adds	r0, #12
 8011dca:	e7f7      	b.n	8011dbc <mbedtls_ecp_curve_info_from_grp_id+0x4>
 8011dcc:	0802a990 	.word	0x0802a990

08011dd0 <mbedtls_ecp_curve_info_from_tls_id>:
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011dd0:	4905      	ldr	r1, [pc, #20]	; (8011de8 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
{
 8011dd2:	4602      	mov	r2, r0
        if( curve_info->tls_id == tls_id )
 8011dd4:	884b      	ldrh	r3, [r1, #2]
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	4608      	mov	r0, r1
 8011dda:	d003      	beq.n	8011de4 <mbedtls_ecp_curve_info_from_tls_id+0x14>
    for( curve_info = mbedtls_ecp_curve_list();
 8011ddc:	7b00      	ldrb	r0, [r0, #12]
 8011dde:	310c      	adds	r1, #12
 8011de0:	2800      	cmp	r0, #0
 8011de2:	d1f7      	bne.n	8011dd4 <mbedtls_ecp_curve_info_from_tls_id+0x4>
}
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop
 8011de8:	0802a990 	.word	0x0802a990

08011dec <mbedtls_ecp_point_init>:
    if( pt == NULL )
 8011dec:	b108      	cbz	r0, 8011df2 <mbedtls_ecp_point_init+0x6>
 8011dee:	f7ff bfab 	b.w	8011d48 <mbedtls_ecp_point_init.part.0>
}
 8011df2:	4770      	bx	lr

08011df4 <mbedtls_ecp_group_init>:
    if( grp == NULL )
 8011df4:	b118      	cbz	r0, 8011dfe <mbedtls_ecp_group_init+0xa>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 8011df6:	227c      	movs	r2, #124	; 0x7c
 8011df8:	2100      	movs	r1, #0
 8011dfa:	f010 b9fd 	b.w	80221f8 <memset>
}
 8011dfe:	4770      	bx	lr

08011e00 <mbedtls_ecp_keypair_init>:
{
 8011e00:	b510      	push	{r4, lr}
    if( key == NULL )
 8011e02:	4604      	mov	r4, r0
 8011e04:	b158      	cbz	r0, 8011e1e <mbedtls_ecp_keypair_init+0x1e>
    mbedtls_ecp_group_init( &key->grp );
 8011e06:	f7ff fff5 	bl	8011df4 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 8011e0a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8011e0e:	f7fc fc8e 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 8011e12:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8011e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 8011e1a:	f7ff bfe7 	b.w	8011dec <mbedtls_ecp_point_init>
}
 8011e1e:	bd10      	pop	{r4, pc}

08011e20 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 8011e20:	b108      	cbz	r0, 8011e26 <mbedtls_ecp_point_free+0x6>
 8011e22:	f7ff bf9f 	b.w	8011d64 <mbedtls_ecp_point_free.part.0>
}
 8011e26:	4770      	bx	lr

08011e28 <mbedtls_ecp_group_free>:
{
 8011e28:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 8011e2a:	4604      	mov	r4, r0
 8011e2c:	b1e0      	cbz	r0, 8011e68 <mbedtls_ecp_group_free+0x40>
    if( grp->h != 1 )
 8011e2e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d012      	beq.n	8011e5a <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 8011e34:	3004      	adds	r0, #4
 8011e36:	f7fc fc81 	bl	800e73c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 8011e3a:	f104 0010 	add.w	r0, r4, #16
 8011e3e:	f7fc fc7d 	bl	800e73c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8011e42:	f104 001c 	add.w	r0, r4, #28
 8011e46:	f7fc fc79 	bl	800e73c <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 8011e4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8011e4e:	f7ff ffe7 	bl	8011e20 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8011e52:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8011e56:	f7fc fc71 	bl	800e73c <mbedtls_mpi_free>
    if( grp->T != NULL )
 8011e5a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8011e5c:	b993      	cbnz	r3, 8011e84 <mbedtls_ecp_group_free+0x5c>
 8011e5e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8011e62:	2200      	movs	r2, #0
 8011e64:	429c      	cmp	r4, r3
 8011e66:	d110      	bne.n	8011e8a <mbedtls_ecp_group_free+0x62>
}
 8011e68:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_ecp_point_free( &grp->T[i] );
 8011e6a:	fb06 0005 	mla	r0, r6, r5, r0
 8011e6e:	f7ff ffd7 	bl	8011e20 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 8011e72:	3501      	adds	r5, #1
 8011e74:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 8011e78:	42ab      	cmp	r3, r5
 8011e7a:	d8f6      	bhi.n	8011e6a <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 8011e7c:	4b04      	ldr	r3, [pc, #16]	; (8011e90 <mbedtls_ecp_group_free+0x68>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4798      	blx	r3
 8011e82:	e7ec      	b.n	8011e5e <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 8011e84:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 8011e86:	2624      	movs	r6, #36	; 0x24
 8011e88:	e7f4      	b.n	8011e74 <mbedtls_ecp_group_free+0x4c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8011e8a:	f804 2b01 	strb.w	r2, [r4], #1
 8011e8e:	e7e9      	b.n	8011e64 <mbedtls_ecp_group_free+0x3c>
 8011e90:	2000053c 	.word	0x2000053c

08011e94 <mbedtls_ecp_keypair_free>:
{
 8011e94:	b510      	push	{r4, lr}
    if( key == NULL )
 8011e96:	4604      	mov	r4, r0
 8011e98:	b158      	cbz	r0, 8011eb2 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 8011e9a:	f7ff ffc5 	bl	8011e28 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 8011e9e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8011ea2:	f7fc fc4b 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 8011ea6:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8011eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 8011eae:	f7ff bfb7 	b.w	8011e20 <mbedtls_ecp_point_free>
}
 8011eb2:	bd10      	pop	{r4, pc}

08011eb4 <mbedtls_ecp_copy>:
{
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 8011eba:	f7fc fcbf 	bl	800e83c <mbedtls_mpi_copy>
 8011ebe:	b970      	cbnz	r0, 8011ede <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8011ec0:	f105 010c 	add.w	r1, r5, #12
 8011ec4:	f104 000c 	add.w	r0, r4, #12
 8011ec8:	f7fc fcb8 	bl	800e83c <mbedtls_mpi_copy>
 8011ecc:	b938      	cbnz	r0, 8011ede <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8011ece:	f105 0118 	add.w	r1, r5, #24
 8011ed2:	f104 0018 	add.w	r0, r4, #24
}
 8011ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 8011eda:	f7fc bcaf 	b.w	800e83c <mbedtls_mpi_copy>
}
 8011ede:	bd38      	pop	{r3, r4, r5, pc}

08011ee0 <mbedtls_ecp_group_copy>:
    return mbedtls_ecp_group_load( dst, src->id );
 8011ee0:	7809      	ldrb	r1, [r1, #0]
 8011ee2:	f001 bdc9 	b.w	8013a78 <mbedtls_ecp_group_load>

08011ee6 <mbedtls_ecp_set_zero>:
{
 8011ee6:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8011ee8:	2101      	movs	r1, #1
{
 8011eea:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8011eec:	f7fc fd03 	bl	800e8f6 <mbedtls_mpi_lset>
 8011ef0:	b960      	cbnz	r0, 8011f0c <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 8011ef2:	2101      	movs	r1, #1
 8011ef4:	f104 000c 	add.w	r0, r4, #12
 8011ef8:	f7fc fcfd 	bl	800e8f6 <mbedtls_mpi_lset>
 8011efc:	b930      	cbnz	r0, 8011f0c <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 8011efe:	4601      	mov	r1, r0
 8011f00:	f104 0018 	add.w	r0, r4, #24
}
 8011f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 8011f08:	f7fc bcf5 	b.w	800e8f6 <mbedtls_mpi_lset>
}
 8011f0c:	bd10      	pop	{r4, pc}
	...

08011f10 <ecp_add_mixed>:
{
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add_count++;
 8011f14:	4e0c      	ldr	r6, [pc, #48]	; (8011f48 <ecp_add_mixed+0x38>)
{
 8011f16:	469a      	mov	sl, r3
    add_count++;
 8011f18:	6973      	ldr	r3, [r6, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8011f1a:	f102 0918 	add.w	r9, r2, #24
{
 8011f1e:	b097      	sub	sp, #92	; 0x5c
 8011f20:	4607      	mov	r7, r0
 8011f22:	460d      	mov	r5, r1
    add_count++;
 8011f24:	3301      	adds	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8011f26:	2100      	movs	r1, #0
 8011f28:	4648      	mov	r0, r9
{
 8011f2a:	4690      	mov	r8, r2
    add_count++;
 8011f2c:	6173      	str	r3, [r6, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8011f2e:	f7fc ff07 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8011f32:	b958      	cbnz	r0, 8011f4c <ecp_add_mixed+0x3c>
        return( mbedtls_ecp_copy( R, Q ) );
 8011f34:	4651      	mov	r1, sl
        return( mbedtls_ecp_copy( R, P ) );
 8011f36:	4628      	mov	r0, r5
 8011f38:	f7ff ffbc 	bl	8011eb4 <mbedtls_ecp_copy>
 8011f3c:	4604      	mov	r4, r0
}
 8011f3e:	4620      	mov	r0, r4
 8011f40:	b017      	add	sp, #92	; 0x5c
 8011f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f46:	bf00      	nop
 8011f48:	20001058 	.word	0x20001058
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 8011f4c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	f040 8170 	bne.w	8012236 <ecp_add_mixed+0x326>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 8011f56:	a801      	add	r0, sp, #4
 8011f58:	f7fc fbe9 	bl	800e72e <mbedtls_mpi_init>
 8011f5c:	a804      	add	r0, sp, #16
 8011f5e:	f7fc fbe6 	bl	800e72e <mbedtls_mpi_init>
 8011f62:	a807      	add	r0, sp, #28
 8011f64:	f7fc fbe3 	bl	800e72e <mbedtls_mpi_init>
 8011f68:	a80a      	add	r0, sp, #40	; 0x28
 8011f6a:	f7fc fbe0 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 8011f6e:	a80d      	add	r0, sp, #52	; 0x34
 8011f70:	f7fc fbdd 	bl	800e72e <mbedtls_mpi_init>
 8011f74:	a810      	add	r0, sp, #64	; 0x40
 8011f76:	f7fc fbda 	bl	800e72e <mbedtls_mpi_init>
 8011f7a:	a813      	add	r0, sp, #76	; 0x4c
 8011f7c:	f7fc fbd7 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8011f80:	464a      	mov	r2, r9
 8011f82:	4649      	mov	r1, r9
 8011f84:	a801      	add	r0, sp, #4
 8011f86:	f7fc ffe2 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	f040 8179 	bne.w	8012284 <ecp_add_mixed+0x374>
 8011f92:	4639      	mov	r1, r7
 8011f94:	a801      	add	r0, sp, #4
 8011f96:	f7ff fa69 	bl	801146c <ecp_modp>
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	f040 8171 	bne.w	8012284 <ecp_add_mixed+0x374>
 8011fa2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011fa4:	464a      	mov	r2, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8011fa6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011fa8:	a901      	add	r1, sp, #4
 8011faa:	a804      	add	r0, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 8011fac:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011fae:	f7fc ffce 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	2800      	cmp	r0, #0
 8011fb6:	f040 8165 	bne.w	8012284 <ecp_add_mixed+0x374>
 8011fba:	4639      	mov	r1, r7
 8011fbc:	a804      	add	r0, sp, #16
 8011fbe:	f7ff fa55 	bl	801146c <ecp_modp>
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	f040 815d 	bne.w	8012284 <ecp_add_mixed+0x374>
 8011fca:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011fcc:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011fce:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8011fd4:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011fd6:	f7fc ffba 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8011fda:	4604      	mov	r4, r0
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	f040 8151 	bne.w	8012284 <ecp_add_mixed+0x374>
 8011fe2:	4639      	mov	r1, r7
 8011fe4:	a801      	add	r0, sp, #4
 8011fe6:	f7ff fa41 	bl	801146c <ecp_modp>
 8011fea:	4604      	mov	r4, r0
 8011fec:	2800      	cmp	r0, #0
 8011fee:	f040 8149 	bne.w	8012284 <ecp_add_mixed+0x374>
 8011ff2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011ff4:	a904      	add	r1, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011ff6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8011ff8:	f10a 020c 	add.w	r2, sl, #12
 8011ffc:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8011ffe:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012000:	f7fc ffa5 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012004:	4604      	mov	r4, r0
 8012006:	2800      	cmp	r0, #0
 8012008:	f040 813c 	bne.w	8012284 <ecp_add_mixed+0x374>
 801200c:	4639      	mov	r1, r7
 801200e:	a804      	add	r0, sp, #16
 8012010:	f7ff fa2c 	bl	801146c <ecp_modp>
 8012014:	4604      	mov	r4, r0
 8012016:	2800      	cmp	r0, #0
 8012018:	f040 8134 	bne.w	8012284 <ecp_add_mixed+0x374>
 801201c:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 801201e:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012020:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8012022:	4642      	mov	r2, r8
 8012024:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012026:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8012028:	f7fc ff58 	bl	800eedc <mbedtls_mpi_sub_mpi>
 801202c:	4604      	mov	r4, r0
 801202e:	2800      	cmp	r0, #0
 8012030:	f040 8128 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012034:	f107 0a04 	add.w	sl, r7, #4
 8012038:	9b01      	ldr	r3, [sp, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	f2c0 8112 	blt.w	8012264 <ecp_add_mixed+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8012040:	a904      	add	r1, sp, #16
 8012042:	f108 0a0c 	add.w	sl, r8, #12
 8012046:	4652      	mov	r2, sl
 8012048:	4608      	mov	r0, r1
 801204a:	f7fc ff47 	bl	800eedc <mbedtls_mpi_sub_mpi>
 801204e:	4604      	mov	r4, r0
 8012050:	2800      	cmp	r0, #0
 8012052:	f040 8117 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012056:	f107 0b04 	add.w	fp, r7, #4
 801205a:	9b04      	ldr	r3, [sp, #16]
 801205c:	2b00      	cmp	r3, #0
 801205e:	f2c0 8127 	blt.w	80122b0 <ecp_add_mixed+0x3a0>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 8012062:	2100      	movs	r1, #0
 8012064:	a801      	add	r0, sp, #4
 8012066:	f7fc fe6b 	bl	800ed40 <mbedtls_mpi_cmp_int>
 801206a:	4601      	mov	r1, r0
 801206c:	2800      	cmp	r0, #0
 801206e:	f000 8130 	beq.w	80122d2 <ecp_add_mixed+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 8012072:	aa01      	add	r2, sp, #4
 8012074:	4649      	mov	r1, r9
 8012076:	a813      	add	r0, sp, #76	; 0x4c
 8012078:	f7fc ff69 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801207c:	4604      	mov	r4, r0
 801207e:	2800      	cmp	r0, #0
 8012080:	f040 8100 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012084:	4639      	mov	r1, r7
 8012086:	a813      	add	r0, sp, #76	; 0x4c
 8012088:	f7ff f9f0 	bl	801146c <ecp_modp>
 801208c:	4604      	mov	r4, r0
 801208e:	2800      	cmp	r0, #0
 8012090:	f040 80f8 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012094:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8012096:	aa01      	add	r2, sp, #4
 8012098:	f10d 091c 	add.w	r9, sp, #28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 801209c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 801209e:	4611      	mov	r1, r2
 80120a0:	4648      	mov	r0, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80120a2:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80120a4:	f7fc ff53 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80120a8:	4604      	mov	r4, r0
 80120aa:	2800      	cmp	r0, #0
 80120ac:	f040 80ea 	bne.w	8012284 <ecp_add_mixed+0x374>
 80120b0:	4639      	mov	r1, r7
 80120b2:	4648      	mov	r0, r9
 80120b4:	f7ff f9da 	bl	801146c <ecp_modp>
 80120b8:	4604      	mov	r4, r0
 80120ba:	2800      	cmp	r0, #0
 80120bc:	f040 80e2 	bne.w	8012284 <ecp_add_mixed+0x374>
 80120c0:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80120c2:	aa01      	add	r2, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80120c4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80120c6:	4649      	mov	r1, r9
 80120c8:	a80a      	add	r0, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80120ca:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80120cc:	f7fc ff3f 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80120d0:	4604      	mov	r4, r0
 80120d2:	2800      	cmp	r0, #0
 80120d4:	f040 80d6 	bne.w	8012284 <ecp_add_mixed+0x374>
 80120d8:	4639      	mov	r1, r7
 80120da:	a80a      	add	r0, sp, #40	; 0x28
 80120dc:	f7ff f9c6 	bl	801146c <ecp_modp>
 80120e0:	4604      	mov	r4, r0
 80120e2:	2800      	cmp	r0, #0
 80120e4:	f040 80ce 	bne.w	8012284 <ecp_add_mixed+0x374>
 80120e8:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80120ea:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80120ec:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80120ee:	4649      	mov	r1, r9
 80120f0:	4648      	mov	r0, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 80120f2:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 80120f4:	f7fc ff2b 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80120f8:	4604      	mov	r4, r0
 80120fa:	2800      	cmp	r0, #0
 80120fc:	f040 80c2 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012100:	4639      	mov	r1, r7
 8012102:	4648      	mov	r0, r9
 8012104:	f7ff f9b2 	bl	801146c <ecp_modp>
 8012108:	4604      	mov	r4, r0
 801210a:	2800      	cmp	r0, #0
 801210c:	f040 80ba 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012110:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8012112:	2202      	movs	r2, #2
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8012114:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8012116:	4649      	mov	r1, r9
 8012118:	a801      	add	r0, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 801211a:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 801211c:	f7fc ff7b 	bl	800f016 <mbedtls_mpi_mul_int>
 8012120:	4604      	mov	r4, r0
 8012122:	2800      	cmp	r0, #0
 8012124:	f040 80ae 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012128:	f107 0804 	add.w	r8, r7, #4
 801212c:	4641      	mov	r1, r8
 801212e:	a801      	add	r0, sp, #4
 8012130:	f7fc fdc3 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8012134:	2800      	cmp	r0, #0
 8012136:	f280 80db 	bge.w	80122f0 <ecp_add_mixed+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 801213a:	aa04      	add	r2, sp, #16
 801213c:	4611      	mov	r1, r2
 801213e:	a80d      	add	r0, sp, #52	; 0x34
 8012140:	f7fc ff05 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012144:	4604      	mov	r4, r0
 8012146:	2800      	cmp	r0, #0
 8012148:	f040 809c 	bne.w	8012284 <ecp_add_mixed+0x374>
 801214c:	4639      	mov	r1, r7
 801214e:	a80d      	add	r0, sp, #52	; 0x34
 8012150:	f7ff f98c 	bl	801146c <ecp_modp>
 8012154:	4604      	mov	r4, r0
 8012156:	2800      	cmp	r0, #0
 8012158:	f040 8094 	bne.w	8012284 <ecp_add_mixed+0x374>
 801215c:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 801215e:	a90d      	add	r1, sp, #52	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8012160:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012162:	aa01      	add	r2, sp, #4
 8012164:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 8012166:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012168:	f7fc feb8 	bl	800eedc <mbedtls_mpi_sub_mpi>
 801216c:	4604      	mov	r4, r0
 801216e:	2800      	cmp	r0, #0
 8012170:	f040 8088 	bne.w	8012284 <ecp_add_mixed+0x374>
 8012174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012176:	2b00      	cmp	r3, #0
 8012178:	f2c0 80c4 	blt.w	8012304 <ecp_add_mixed+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 801217c:	a90d      	add	r1, sp, #52	; 0x34
 801217e:	aa0a      	add	r2, sp, #40	; 0x28
 8012180:	4608      	mov	r0, r1
 8012182:	f7fc feab 	bl	800eedc <mbedtls_mpi_sub_mpi>
 8012186:	4604      	mov	r4, r0
 8012188:	2800      	cmp	r0, #0
 801218a:	d17b      	bne.n	8012284 <ecp_add_mixed+0x374>
 801218c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801218e:	2b00      	cmp	r3, #0
 8012190:	f2c0 80c5 	blt.w	801231e <ecp_add_mixed+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8012194:	aa0d      	add	r2, sp, #52	; 0x34
 8012196:	4649      	mov	r1, r9
 8012198:	4648      	mov	r0, r9
 801219a:	f7fc fe9f 	bl	800eedc <mbedtls_mpi_sub_mpi>
 801219e:	4604      	mov	r4, r0
 80121a0:	2800      	cmp	r0, #0
 80121a2:	d16f      	bne.n	8012284 <ecp_add_mixed+0x374>
 80121a4:	464e      	mov	r6, r9
 80121a6:	9b07      	ldr	r3, [sp, #28]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f2c0 80c5 	blt.w	8012338 <ecp_add_mixed+0x428>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80121ae:	aa04      	add	r2, sp, #16
 80121b0:	4649      	mov	r1, r9
 80121b2:	4648      	mov	r0, r9
 80121b4:	f7fc fecb 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80121b8:	4604      	mov	r4, r0
 80121ba:	2800      	cmp	r0, #0
 80121bc:	d162      	bne.n	8012284 <ecp_add_mixed+0x374>
 80121be:	4639      	mov	r1, r7
 80121c0:	4648      	mov	r0, r9
 80121c2:	f7ff f953 	bl	801146c <ecp_modp>
 80121c6:	4604      	mov	r4, r0
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d15b      	bne.n	8012284 <ecp_add_mixed+0x374>
 80121cc:	4e69      	ldr	r6, [pc, #420]	; (8012374 <ecp_add_mixed+0x464>)
 80121ce:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80121d0:	a90a      	add	r1, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80121d2:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80121d4:	4652      	mov	r2, sl
 80121d6:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80121d8:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80121da:	f7fc feb8 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80121de:	4604      	mov	r4, r0
 80121e0:	2800      	cmp	r0, #0
 80121e2:	d14f      	bne.n	8012284 <ecp_add_mixed+0x374>
 80121e4:	4639      	mov	r1, r7
 80121e6:	a80a      	add	r0, sp, #40	; 0x28
 80121e8:	f7ff f940 	bl	801146c <ecp_modp>
 80121ec:	4604      	mov	r4, r0
 80121ee:	2800      	cmp	r0, #0
 80121f0:	d148      	bne.n	8012284 <ecp_add_mixed+0x374>
 80121f2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80121f4:	aa0a      	add	r2, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80121f6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80121f8:	4649      	mov	r1, r9
 80121fa:	a810      	add	r0, sp, #64	; 0x40
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 80121fc:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 80121fe:	f7fc fe6d 	bl	800eedc <mbedtls_mpi_sub_mpi>
 8012202:	4604      	mov	r4, r0
 8012204:	2800      	cmp	r0, #0
 8012206:	d13d      	bne.n	8012284 <ecp_add_mixed+0x374>
 8012208:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801220a:	2b00      	cmp	r3, #0
 801220c:	f2c0 80a5 	blt.w	801235a <ecp_add_mixed+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 8012210:	a90d      	add	r1, sp, #52	; 0x34
 8012212:	4628      	mov	r0, r5
 8012214:	f7fc fb12 	bl	800e83c <mbedtls_mpi_copy>
 8012218:	4604      	mov	r4, r0
 801221a:	bb98      	cbnz	r0, 8012284 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 801221c:	a910      	add	r1, sp, #64	; 0x40
 801221e:	f105 000c 	add.w	r0, r5, #12
 8012222:	f7fc fb0b 	bl	800e83c <mbedtls_mpi_copy>
 8012226:	4604      	mov	r4, r0
 8012228:	bb60      	cbnz	r0, 8012284 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 801222a:	a913      	add	r1, sp, #76	; 0x4c
 801222c:	f105 0018 	add.w	r0, r5, #24
 8012230:	f7fc fb04 	bl	800e83c <mbedtls_mpi_copy>
 8012234:	e056      	b.n	80122e4 <ecp_add_mixed+0x3d4>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 8012236:	f10a 0418 	add.w	r4, sl, #24
 801223a:	2100      	movs	r1, #0
 801223c:	4620      	mov	r0, r4
 801223e:	f7fc fd7f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012242:	b908      	cbnz	r0, 8012248 <ecp_add_mixed+0x338>
        return( mbedtls_ecp_copy( R, P ) );
 8012244:	4641      	mov	r1, r8
 8012246:	e676      	b.n	8011f36 <ecp_add_mixed+0x26>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8012248:	f8da 3020 	ldr.w	r3, [sl, #32]
 801224c:	2b00      	cmp	r3, #0
 801224e:	f43f ae82 	beq.w	8011f56 <ecp_add_mixed+0x46>
 8012252:	2101      	movs	r1, #1
 8012254:	4620      	mov	r0, r4
 8012256:	f7fc fd73 	bl	800ed40 <mbedtls_mpi_cmp_int>
 801225a:	2800      	cmp	r0, #0
 801225c:	f43f ae7b 	beq.w	8011f56 <ecp_add_mixed+0x46>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012260:	4c45      	ldr	r4, [pc, #276]	; (8012378 <ecp_add_mixed+0x468>)
 8012262:	e66c      	b.n	8011f3e <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8012264:	2100      	movs	r1, #0
 8012266:	a801      	add	r0, sp, #4
 8012268:	f7fc fd6a 	bl	800ed40 <mbedtls_mpi_cmp_int>
 801226c:	2800      	cmp	r0, #0
 801226e:	f43f aee7 	beq.w	8012040 <ecp_add_mixed+0x130>
 8012272:	a901      	add	r1, sp, #4
 8012274:	4652      	mov	r2, sl
 8012276:	4608      	mov	r0, r1
 8012278:	f7fc fe0e 	bl	800ee98 <mbedtls_mpi_add_mpi>
 801227c:	4604      	mov	r4, r0
 801227e:	2800      	cmp	r0, #0
 8012280:	f43f aeda 	beq.w	8012038 <ecp_add_mixed+0x128>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 8012284:	a801      	add	r0, sp, #4
 8012286:	f7fc fa59 	bl	800e73c <mbedtls_mpi_free>
 801228a:	a804      	add	r0, sp, #16
 801228c:	f7fc fa56 	bl	800e73c <mbedtls_mpi_free>
 8012290:	a807      	add	r0, sp, #28
 8012292:	f7fc fa53 	bl	800e73c <mbedtls_mpi_free>
 8012296:	a80a      	add	r0, sp, #40	; 0x28
 8012298:	f7fc fa50 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 801229c:	a80d      	add	r0, sp, #52	; 0x34
 801229e:	f7fc fa4d 	bl	800e73c <mbedtls_mpi_free>
 80122a2:	a810      	add	r0, sp, #64	; 0x40
 80122a4:	f7fc fa4a 	bl	800e73c <mbedtls_mpi_free>
 80122a8:	a813      	add	r0, sp, #76	; 0x4c
 80122aa:	f7fc fa47 	bl	800e73c <mbedtls_mpi_free>
    return( ret );
 80122ae:	e646      	b.n	8011f3e <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 80122b0:	2100      	movs	r1, #0
 80122b2:	a804      	add	r0, sp, #16
 80122b4:	f7fc fd44 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	f43f aed2 	beq.w	8012062 <ecp_add_mixed+0x152>
 80122be:	a904      	add	r1, sp, #16
 80122c0:	465a      	mov	r2, fp
 80122c2:	4608      	mov	r0, r1
 80122c4:	f7fc fde8 	bl	800ee98 <mbedtls_mpi_add_mpi>
 80122c8:	4604      	mov	r4, r0
 80122ca:	2800      	cmp	r0, #0
 80122cc:	f43f aec5 	beq.w	801205a <ecp_add_mixed+0x14a>
 80122d0:	e7d8      	b.n	8012284 <ecp_add_mixed+0x374>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 80122d2:	a804      	add	r0, sp, #16
 80122d4:	f7fc fd34 	bl	800ed40 <mbedtls_mpi_cmp_int>
 80122d8:	b930      	cbnz	r0, 80122e8 <ecp_add_mixed+0x3d8>
            ret = ecp_double_jac( grp, R, P );
 80122da:	4642      	mov	r2, r8
 80122dc:	4629      	mov	r1, r5
 80122de:	4638      	mov	r0, r7
 80122e0:	f7ff f90a 	bl	80114f8 <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 80122e4:	4604      	mov	r4, r0
cleanup:
 80122e6:	e7cd      	b.n	8012284 <ecp_add_mixed+0x374>
            ret = mbedtls_ecp_set_zero( R );
 80122e8:	4628      	mov	r0, r5
 80122ea:	f7ff fdfc 	bl	8011ee6 <mbedtls_ecp_set_zero>
 80122ee:	e7f9      	b.n	80122e4 <ecp_add_mixed+0x3d4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 80122f0:	a901      	add	r1, sp, #4
 80122f2:	4642      	mov	r2, r8
 80122f4:	4608      	mov	r0, r1
 80122f6:	f7fc fd92 	bl	800ee1e <mbedtls_mpi_sub_abs>
 80122fa:	4604      	mov	r4, r0
 80122fc:	2800      	cmp	r0, #0
 80122fe:	f43f af15 	beq.w	801212c <ecp_add_mixed+0x21c>
 8012302:	e7bf      	b.n	8012284 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012304:	2100      	movs	r1, #0
 8012306:	a80d      	add	r0, sp, #52	; 0x34
 8012308:	f7fc fd1a 	bl	800ed40 <mbedtls_mpi_cmp_int>
 801230c:	2800      	cmp	r0, #0
 801230e:	f43f af35 	beq.w	801217c <ecp_add_mixed+0x26c>
 8012312:	a90d      	add	r1, sp, #52	; 0x34
 8012314:	4642      	mov	r2, r8
 8012316:	4608      	mov	r0, r1
 8012318:	f7fc fdbe 	bl	800ee98 <mbedtls_mpi_add_mpi>
 801231c:	e726      	b.n	801216c <ecp_add_mixed+0x25c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 801231e:	2100      	movs	r1, #0
 8012320:	a80d      	add	r0, sp, #52	; 0x34
 8012322:	f7fc fd0d 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012326:	2800      	cmp	r0, #0
 8012328:	f43f af34 	beq.w	8012194 <ecp_add_mixed+0x284>
 801232c:	a90d      	add	r1, sp, #52	; 0x34
 801232e:	4642      	mov	r2, r8
 8012330:	4608      	mov	r0, r1
 8012332:	f7fc fdb1 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8012336:	e726      	b.n	8012186 <ecp_add_mixed+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8012338:	2100      	movs	r1, #0
 801233a:	4630      	mov	r0, r6
 801233c:	f7fc fd00 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012340:	2800      	cmp	r0, #0
 8012342:	f43f af34 	beq.w	80121ae <ecp_add_mixed+0x29e>
 8012346:	4642      	mov	r2, r8
 8012348:	4631      	mov	r1, r6
 801234a:	4630      	mov	r0, r6
 801234c:	f7fc fda4 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8012350:	4604      	mov	r4, r0
 8012352:	2800      	cmp	r0, #0
 8012354:	f43f af27 	beq.w	80121a6 <ecp_add_mixed+0x296>
 8012358:	e794      	b.n	8012284 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 801235a:	2100      	movs	r1, #0
 801235c:	a810      	add	r0, sp, #64	; 0x40
 801235e:	f7fc fcef 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012362:	2800      	cmp	r0, #0
 8012364:	f43f af54 	beq.w	8012210 <ecp_add_mixed+0x300>
 8012368:	a910      	add	r1, sp, #64	; 0x40
 801236a:	4642      	mov	r2, r8
 801236c:	4608      	mov	r0, r1
 801236e:	f7fc fd93 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8012372:	e746      	b.n	8012202 <ecp_add_mixed+0x2f2>
 8012374:	20001058 	.word	0x20001058
 8012378:	ffffb080 	.word	0xffffb080

0801237c <ecp_mul_comb>:
 */
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 801237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012380:	ed2d 8b04 	vpush	{d8-d9}
 8012384:	b0e5      	sub	sp, #404	; 0x194
 8012386:	4605      	mov	r5, r0
    size_t d;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *T;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 8012388:	a80d      	add	r0, sp, #52	; 0x34
{
 801238a:	460e      	mov	r6, r1
 801238c:	4692      	mov	sl, r2
 801238e:	461c      	mov	r4, r3
    mbedtls_mpi_init( &M );
 8012390:	f7fc f9cd 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 8012394:	a810      	add	r0, sp, #64	; 0x40
 8012396:	f7fc f9ca 	bl	800e72e <mbedtls_mpi_init>

    /* we need N to be odd to trnaform m in an odd number, check now */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 801239a:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 801239e:	2100      	movs	r1, #0
 80123a0:	4618      	mov	r0, r3
 80123a2:	ee08 3a90 	vmov	s17, r3
 80123a6:	f7fc fac2 	bl	800e92e <mbedtls_mpi_get_bit>
 80123aa:	2801      	cmp	r0, #1
 80123ac:	4607      	mov	r7, r0
 80123ae:	f040 824a 	bne.w	8012846 <ecp_mul_comb+0x4ca>
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 80123b2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80123b4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80123b8:	bf2c      	ite	cs
 80123ba:	2305      	movcs	r3, #5
 80123bc:	2304      	movcc	r3, #4
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80123be:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80123c2:	f104 000c 	add.w	r0, r4, #12
    w = grp->nbits >= 384 ? 5 : 4;
 80123c6:	9303      	str	r3, [sp, #12]
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80123c8:	f7fc fc77 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 80123cc:	9004      	str	r0, [sp, #16]
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d158      	bne.n	8012484 <ecp_mul_comb+0x108>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 80123d2:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80123d6:	4620      	mov	r0, r4
 80123d8:	f7fc fc6f 	bl	800ecba <mbedtls_mpi_cmp_mpi>
    if( p_eq_g )
 80123dc:	b918      	cbnz	r0, 80123e6 <ecp_mul_comb+0x6a>
        w++;
 80123de:	9b03      	ldr	r3, [sp, #12]
 80123e0:	3301      	adds	r3, #1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80123e2:	e9cd 3703 	strd	r3, r7, [sp, #12]
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
 80123e6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        w = 2;
 80123e8:	9a03      	ldr	r2, [sp, #12]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	bf28      	it	cs
 80123ee:	2202      	movcs	r2, #2
 80123f0:	9203      	str	r2, [sp, #12]

    /* Other sizes that depend on w */
    pre_len = 1U << ( w - 1 );
 80123f2:	3a01      	subs	r2, #1
 80123f4:	9206      	str	r2, [sp, #24]
 80123f6:	9906      	ldr	r1, [sp, #24]
 80123f8:	2201      	movs	r2, #1
 80123fa:	408a      	lsls	r2, r1
 80123fc:	9207      	str	r2, [sp, #28]
 80123fe:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8012402:	ee08 2a10 	vmov	s16, r2
    d = ( grp->nbits + w - 1 ) / w;
 8012406:	9a03      	ldr	r2, [sp, #12]
 8012408:	3b01      	subs	r3, #1
 801240a:	4413      	add	r3, r2
 801240c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012410:	9305      	str	r3, [sp, #20]

    /*
     * Prepare precomputed points: if P == G we want to
     * use grp->T if already initialized, or initialize it.
     */
    T = p_eq_g ? grp->T : NULL;
 8012412:	9b04      	ldr	r3, [sp, #16]
 8012414:	b12b      	cbz	r3, 8012422 <ecp_mul_comb+0xa6>
 8012416:	f8d5 b074 	ldr.w	fp, [r5, #116]	; 0x74

    if( T == NULL )
 801241a:	f1bb 0f00 	cmp.w	fp, #0
 801241e:	f040 80b0 	bne.w	8012582 <ecp_mul_comb+0x206>
    {
        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );
 8012422:	4b4f      	ldr	r3, [pc, #316]	; (8012560 <ecp_mul_comb+0x1e4>)
 8012424:	9807      	ldr	r0, [sp, #28]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	2124      	movs	r1, #36	; 0x24
 801242a:	4798      	blx	r3
        if( T == NULL )
 801242c:	4683      	mov	fp, r0
 801242e:	2800      	cmp	r0, #0
 8012430:	f000 8207 	beq.w	8012842 <ecp_mul_comb+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 8012434:	4621      	mov	r1, r4
 8012436:	f7ff fd3d 	bl	8011eb4 <mbedtls_ecp_copy>
 801243a:	4604      	mov	r4, r0
 801243c:	bba8      	cbnz	r0, 80124aa <ecp_mul_comb+0x12e>
 801243e:	4680      	mov	r8, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012440:	2701      	movs	r7, #1
 8012442:	9b06      	ldr	r3, [sp, #24]
 8012444:	fa37 f903 	lsrs.w	r9, r7, r3
 8012448:	d01f      	beq.n	801248a <ecp_mul_comb+0x10e>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 801244a:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 801244e:	fa5f f288 	uxtb.w	r2, r8
 8012452:	4649      	mov	r1, r9
 8012454:	4628      	mov	r0, r5
 8012456:	f7ff fb3f 	bl	8011ad8 <ecp_normalize_jac_many>
 801245a:	4604      	mov	r4, r0
 801245c:	bb28      	cbnz	r0, 80124aa <ecp_mul_comb+0x12e>
    k = 0;
 801245e:	4602      	mov	r2, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012460:	f04f 0801 	mov.w	r8, #1
            TT[k++] = &T[i + j];
 8012464:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012468:	9b06      	ldr	r3, [sp, #24]
 801246a:	fa38 f303 	lsrs.w	r3, r8, r3
 801246e:	4641      	mov	r1, r8
 8012470:	d17a      	bne.n	8012568 <ecp_mul_comb+0x1ec>
 8012472:	eb08 0002 	add.w	r0, r8, r2
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 8012476:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
 801247a:	b2c2      	uxtb	r2, r0
 801247c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8012480:	9208      	str	r2, [sp, #32]
 8012482:	e05f      	b.n	8012544 <ecp_mul_comb+0x1c8>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 8012484:	2300      	movs	r3, #0
 8012486:	9304      	str	r3, [sp, #16]
 8012488:	e7ad      	b.n	80123e6 <ecp_mul_comb+0x6a>
        cur = T + i;
 801248a:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 801248e:	0879      	lsrs	r1, r7, #1
        cur = T + i;
 8012490:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 8012494:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012498:	4610      	mov	r0, r2
 801249a:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 801249e:	9208      	str	r2, [sp, #32]
 80124a0:	f7ff fd08 	bl	8011eb4 <mbedtls_ecp_copy>
 80124a4:	9a08      	ldr	r2, [sp, #32]
 80124a6:	4604      	mov	r4, r0
 80124a8:	b360      	cbz	r0, 8012504 <ecp_mul_comb+0x188>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );

cleanup:

    if( T != NULL && ! p_eq_g )
 80124aa:	9b04      	ldr	r3, [sp, #16]
 80124ac:	b97b      	cbnz	r3, 80124ce <ecp_mul_comb+0x152>
 80124ae:	9d04      	ldr	r5, [sp, #16]
    {
        for( i = 0; i < pre_len; i++ )
            mbedtls_ecp_point_free( &T[i] );
 80124b0:	2724      	movs	r7, #36	; 0x24
 80124b2:	fb07 b005 	mla	r0, r7, r5, fp
 80124b6:	f7ff fcb3 	bl	8011e20 <mbedtls_ecp_point_free>
        for( i = 0; i < pre_len; i++ )
 80124ba:	3501      	adds	r5, #1
 80124bc:	ee18 2a10 	vmov	r2, s16
 80124c0:	b2eb      	uxtb	r3, r5
 80124c2:	4293      	cmp	r3, r2
 80124c4:	d3f5      	bcc.n	80124b2 <ecp_mul_comb+0x136>
        mbedtls_free( T );
 80124c6:	4b27      	ldr	r3, [pc, #156]	; (8012564 <ecp_mul_comb+0x1e8>)
 80124c8:	4658      	mov	r0, fp
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	4798      	blx	r3
    }

    mbedtls_mpi_free( &M );
 80124ce:	a80d      	add	r0, sp, #52	; 0x34
 80124d0:	f7fc f934 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &mm );
 80124d4:	a810      	add	r0, sp, #64	; 0x40
 80124d6:	f7fc f931 	bl	800e73c <mbedtls_mpi_free>

    if( ret != 0 )
 80124da:	b114      	cbz	r4, 80124e2 <ecp_mul_comb+0x166>
        mbedtls_ecp_point_free( R );
 80124dc:	4630      	mov	r0, r6
 80124de:	f7ff fc9f 	bl	8011e20 <mbedtls_ecp_point_free>

    return( ret );
}
 80124e2:	4620      	mov	r0, r4
 80124e4:	b065      	add	sp, #404	; 0x194
 80124e6:	ecbd 8b04 	vpop	{d8-d9}
 80124ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 80124ee:	4611      	mov	r1, r2
 80124f0:	4628      	mov	r0, r5
 80124f2:	9208      	str	r2, [sp, #32]
 80124f4:	f7ff f800 	bl	80114f8 <ecp_double_jac>
 80124f8:	4604      	mov	r4, r0
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d1d5      	bne.n	80124aa <ecp_mul_comb+0x12e>
        for( j = 0; j < d; j++ )
 80124fe:	9a08      	ldr	r2, [sp, #32]
 8012500:	f109 0901 	add.w	r9, r9, #1
 8012504:	9b05      	ldr	r3, [sp, #20]
 8012506:	454b      	cmp	r3, r9
 8012508:	d1f1      	bne.n	80124ee <ecp_mul_comb+0x172>
        TT[k++] = cur;
 801250a:	fa5f f388 	uxtb.w	r3, r8
 801250e:	a922      	add	r1, sp, #136	; 0x88
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012510:	007f      	lsls	r7, r7, #1
        TT[k++] = cur;
 8012512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012516:	b2ff      	uxtb	r7, r7
 8012518:	f108 0801 	add.w	r8, r8, #1
 801251c:	e791      	b.n	8012442 <ecp_mul_comb+0xc6>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 801251e:	2224      	movs	r2, #36	; 0x24
 8012520:	fb02 f209 	mul.w	r2, r2, r9
 8012524:	1899      	adds	r1, r3, r2
 8012526:	4628      	mov	r0, r5
 8012528:	445a      	add	r2, fp
 801252a:	930b      	str	r3, [sp, #44]	; 0x2c
 801252c:	910a      	str	r1, [sp, #40]	; 0x28
 801252e:	f7ff fcef 	bl	8011f10 <ecp_add_mixed>
 8012532:	4604      	mov	r4, r0
 8012534:	2800      	cmp	r0, #0
 8012536:	d1b8      	bne.n	80124aa <ecp_mul_comb+0x12e>
            TT[k++] = &T[i + j];
 8012538:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 801253c:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
 8012540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012542:	4649      	mov	r1, r9
 8012544:	9a08      	ldr	r2, [sp, #32]
 8012546:	1a57      	subs	r7, r2, r1
 8012548:	b2ff      	uxtb	r7, r7
        while( j-- )
 801254a:	f101 39ff 	add.w	r9, r1, #4294967295
 801254e:	2900      	cmp	r1, #0
 8012550:	d1e5      	bne.n	801251e <ecp_mul_comb+0x1a2>
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012552:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012556:	fa5f f888 	uxtb.w	r8, r8
 801255a:	463a      	mov	r2, r7
 801255c:	e784      	b.n	8012468 <ecp_mul_comb+0xec>
 801255e:	bf00      	nop
 8012560:	20000538 	.word	0x20000538
 8012564:	2000053c 	.word	0x2000053c
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 8012568:	a922      	add	r1, sp, #136	; 0x88
 801256a:	4628      	mov	r0, r5
 801256c:	f7ff fab4 	bl	8011ad8 <ecp_normalize_jac_many>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );
 8012570:	4604      	mov	r4, r0
 8012572:	2800      	cmp	r0, #0
 8012574:	d199      	bne.n	80124aa <ecp_mul_comb+0x12e>
        if( p_eq_g )
 8012576:	9b04      	ldr	r3, [sp, #16]
 8012578:	b11b      	cbz	r3, 8012582 <ecp_mul_comb+0x206>
            grp->T_size = pre_len;
 801257a:	9b07      	ldr	r3, [sp, #28]
            grp->T = T;
 801257c:	f8c5 b074 	str.w	fp, [r5, #116]	; 0x74
            grp->T_size = pre_len;
 8012580:	67ab      	str	r3, [r5, #120]	; 0x78
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 8012582:	2100      	movs	r1, #0
 8012584:	4650      	mov	r0, sl
 8012586:	f7fc f9d2 	bl	800e92e <mbedtls_mpi_get_bit>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 801258a:	af0d      	add	r7, sp, #52	; 0x34
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 801258c:	4681      	mov	r9, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 801258e:	4651      	mov	r1, sl
 8012590:	4638      	mov	r0, r7
 8012592:	f7fc f953 	bl	800e83c <mbedtls_mpi_copy>
 8012596:	4604      	mov	r4, r0
 8012598:	2800      	cmp	r0, #0
 801259a:	d186      	bne.n	80124aa <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 801259c:	ee18 1a90 	vmov	r1, s17
 80125a0:	4652      	mov	r2, sl
 80125a2:	a810      	add	r0, sp, #64	; 0x40
 80125a4:	f7fc fc9a 	bl	800eedc <mbedtls_mpi_sub_mpi>
 80125a8:	4604      	mov	r4, r0
 80125aa:	2800      	cmp	r0, #0
 80125ac:	f47f af7d 	bne.w	80124aa <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );
 80125b0:	f1b9 0901 	subs.w	r9, r9, #1
 80125b4:	bf18      	it	ne
 80125b6:	f04f 0901 	movne.w	r9, #1
 80125ba:	464a      	mov	r2, r9
 80125bc:	a910      	add	r1, sp, #64	; 0x40
 80125be:	4638      	mov	r0, r7
 80125c0:	f7fc f966 	bl	800e890 <mbedtls_mpi_safe_cond_assign>
 80125c4:	4604      	mov	r4, r0
 80125c6:	2800      	cmp	r0, #0
 80125c8:	f47f af6f 	bne.w	80124aa <ecp_mul_comb+0x12e>
    memset( x, 0, d+1 );
 80125cc:	9b05      	ldr	r3, [sp, #20]
 80125ce:	4601      	mov	r1, r0
 80125d0:	1c5a      	adds	r2, r3, #1
 80125d2:	a822      	add	r0, sp, #136	; 0x88
 80125d4:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 80125d8:	f00f fe0e 	bl	80221f8 <memset>
    for( i = 0; i < d; i++ )
 80125dc:	46a0      	mov	r8, r4
 80125de:	4653      	mov	r3, sl
 80125e0:	9a05      	ldr	r2, [sp, #20]
 80125e2:	4542      	cmp	r2, r8
 80125e4:	f040 80c0 	bne.w	8012768 <ecp_mul_comb+0x3ec>
    c = 0;
 80125e8:	2700      	movs	r7, #0
    for( i = 1; i <= d; i++ )
 80125ea:	2401      	movs	r4, #1
 80125ec:	45a0      	cmp	r8, r4
 80125ee:	f080 80d2 	bcs.w	8012796 <ecp_mul_comb+0x41a>
    if( pt == NULL )
 80125f2:	a819      	add	r0, sp, #100	; 0x64
 80125f4:	f7ff fba8 	bl	8011d48 <mbedtls_ecp_point_init.part.0>
    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );
 80125f8:	ab22      	add	r3, sp, #136	; 0x88
 80125fa:	465a      	mov	r2, fp
 80125fc:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4631      	mov	r1, r6
 8012604:	ee18 3a10 	vmov	r3, s16
 8012608:	4628      	mov	r0, r5
 801260a:	f7fe fefc 	bl	8011406 <ecp_select_comb>
 801260e:	4604      	mov	r4, r0
 8012610:	2800      	cmp	r0, #0
 8012612:	f040 8101 	bne.w	8012818 <ecp_mul_comb+0x49c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 8012616:	f106 0a18 	add.w	sl, r6, #24
 801261a:	2101      	movs	r1, #1
 801261c:	4650      	mov	r0, sl
 801261e:	f7fc f96a 	bl	800e8f6 <mbedtls_mpi_lset>
 8012622:	4604      	mov	r4, r0
 8012624:	2800      	cmp	r0, #0
 8012626:	f040 80f7 	bne.w	8012818 <ecp_mul_comb+0x49c>
    if( f_rng != 0 )
 801262a:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 80ef 	beq.w	8012810 <ecp_mul_comb+0x494>
    p_size = ( grp->pbits + 7 ) / 8;
 8012632:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012634:	af13      	add	r7, sp, #76	; 0x4c
    p_size = ( grp->pbits + 7 ) / 8;
 8012636:	3307      	adds	r3, #7
 8012638:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 801263a:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
 801263c:	ee08 3a90 	vmov	s17, r3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012640:	f7fc f875 	bl	800e72e <mbedtls_mpi_init>
 8012644:	a816      	add	r0, sp, #88	; 0x58
 8012646:	f7fc f872 	bl	800e72e <mbedtls_mpi_init>
 801264a:	230c      	movs	r3, #12
 801264c:	9303      	str	r3, [sp, #12]
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 801264e:	1d2b      	adds	r3, r5, #4
 8012650:	ee09 3a10 	vmov	s18, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 8012654:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 8012658:	ee18 1a90 	vmov	r1, s17
 801265c:	4638      	mov	r0, r7
 801265e:	f7fd f988 	bl	800f972 <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8012662:	4603      	mov	r3, r0
 8012664:	2800      	cmp	r0, #0
 8012666:	d173      	bne.n	8012750 <ecp_mul_comb+0x3d4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8012668:	ee19 1a10 	vmov	r1, s18
 801266c:	4638      	mov	r0, r7
 801266e:	f7fc fb24 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8012672:	2800      	cmp	r0, #0
 8012674:	f280 80ad 	bge.w	80127d2 <ecp_mul_comb+0x456>
        if( count++ > 10 )
 8012678:	9b03      	ldr	r3, [sp, #12]
 801267a:	3b01      	subs	r3, #1
 801267c:	9303      	str	r3, [sp, #12]
 801267e:	f000 80e4 	beq.w	801284a <ecp_mul_comb+0x4ce>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 8012682:	2101      	movs	r1, #1
 8012684:	4638      	mov	r0, r7
 8012686:	f7fc fb5b 	bl	800ed40 <mbedtls_mpi_cmp_int>
 801268a:	2800      	cmp	r0, #0
 801268c:	dde2      	ble.n	8012654 <ecp_mul_comb+0x2d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 801268e:	463a      	mov	r2, r7
 8012690:	4651      	mov	r1, sl
 8012692:	4650      	mov	r0, sl
 8012694:	f7fc fc5b 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012698:	4603      	mov	r3, r0
 801269a:	2800      	cmp	r0, #0
 801269c:	d158      	bne.n	8012750 <ecp_mul_comb+0x3d4>
 801269e:	4629      	mov	r1, r5
 80126a0:	4650      	mov	r0, sl
 80126a2:	f7fe fee3 	bl	801146c <ecp_modp>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2800      	cmp	r0, #0
 80126aa:	d151      	bne.n	8012750 <ecp_mul_comb+0x3d4>
 80126ac:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 801285c <ecp_mul_comb+0x4e0>
 80126b0:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80126b4:	463a      	mov	r2, r7
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80126b6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80126b8:	4639      	mov	r1, r7
 80126ba:	a816      	add	r0, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80126bc:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80126c0:	f7fc fc45 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d142      	bne.n	8012750 <ecp_mul_comb+0x3d4>
 80126ca:	4629      	mov	r1, r5
 80126cc:	a816      	add	r0, sp, #88	; 0x58
 80126ce:	f7fe fecd 	bl	801146c <ecp_modp>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2800      	cmp	r0, #0
 80126d6:	d13b      	bne.n	8012750 <ecp_mul_comb+0x3d4>
 80126d8:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80126dc:	aa16      	add	r2, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80126de:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80126e0:	4631      	mov	r1, r6
 80126e2:	4630      	mov	r0, r6
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80126e4:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 80126e8:	f7fc fc31 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80126ec:	4603      	mov	r3, r0
 80126ee:	bb78      	cbnz	r0, 8012750 <ecp_mul_comb+0x3d4>
 80126f0:	4629      	mov	r1, r5
 80126f2:	4630      	mov	r0, r6
 80126f4:	f7fe feba 	bl	801146c <ecp_modp>
 80126f8:	4603      	mov	r3, r0
 80126fa:	bb48      	cbnz	r0, 8012750 <ecp_mul_comb+0x3d4>
 80126fc:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 8012700:	a916      	add	r1, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8012702:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 8012704:	463a      	mov	r2, r7
 8012706:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8012708:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 801270c:	f7fc fc1f 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012710:	4603      	mov	r3, r0
 8012712:	b9e8      	cbnz	r0, 8012750 <ecp_mul_comb+0x3d4>
 8012714:	4629      	mov	r1, r5
 8012716:	a816      	add	r0, sp, #88	; 0x58
 8012718:	f7fe fea8 	bl	801146c <ecp_modp>
 801271c:	4603      	mov	r3, r0
 801271e:	b9b8      	cbnz	r0, 8012750 <ecp_mul_comb+0x3d4>
 8012720:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012724:	3301      	adds	r3, #1
 8012726:	f8ca 3004 	str.w	r3, [sl, #4]
 801272a:	4657      	mov	r7, sl
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 801272c:	f106 0a0c 	add.w	sl, r6, #12
 8012730:	aa16      	add	r2, sp, #88	; 0x58
 8012732:	4651      	mov	r1, sl
 8012734:	4650      	mov	r0, sl
 8012736:	f7fc fc0a 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801273a:	4603      	mov	r3, r0
 801273c:	b940      	cbnz	r0, 8012750 <ecp_mul_comb+0x3d4>
 801273e:	4629      	mov	r1, r5
 8012740:	4650      	mov	r0, sl
 8012742:	f7fe fe93 	bl	801146c <ecp_modp>
 8012746:	4603      	mov	r3, r0
 8012748:	b910      	cbnz	r0, 8012750 <ecp_mul_comb+0x3d4>
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	3201      	adds	r2, #1
 801274e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 8012750:	a813      	add	r0, sp, #76	; 0x4c
 8012752:	9303      	str	r3, [sp, #12]
 8012754:	f7fb fff2 	bl	800e73c <mbedtls_mpi_free>
 8012758:	a816      	add	r0, sp, #88	; 0x58
 801275a:	f7fb ffef 	bl	800e73c <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 801275e:	9b03      	ldr	r3, [sp, #12]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d055      	beq.n	8012810 <ecp_mul_comb+0x494>
 8012764:	461c      	mov	r4, r3
 8012766:	e057      	b.n	8012818 <ecp_mul_comb+0x49c>
 8012768:	4641      	mov	r1, r8
        for( j = 0; j < w; j++ )
 801276a:	2400      	movs	r4, #0
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 801276c:	4638      	mov	r0, r7
 801276e:	e9cd 1306 	strd	r1, r3, [sp, #24]
 8012772:	f7fc f8dc 	bl	800e92e <mbedtls_mpi_get_bit>
 8012776:	9b07      	ldr	r3, [sp, #28]
 8012778:	781a      	ldrb	r2, [r3, #0]
 801277a:	40a0      	lsls	r0, r4
 801277c:	4310      	orrs	r0, r2
 801277e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8012782:	4411      	add	r1, r2
        for( j = 0; j < w; j++ )
 8012784:	9a03      	ldr	r2, [sp, #12]
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 8012786:	7018      	strb	r0, [r3, #0]
        for( j = 0; j < w; j++ )
 8012788:	3401      	adds	r4, #1
 801278a:	42a2      	cmp	r2, r4
 801278c:	d8ee      	bhi.n	801276c <ecp_mul_comb+0x3f0>
    for( i = 0; i < d; i++ )
 801278e:	f108 0801 	add.w	r8, r8, #1
 8012792:	3301      	adds	r3, #1
 8012794:	e724      	b.n	80125e0 <ecp_mul_comb+0x264>
        cc   = x[i] & c;
 8012796:	f89a 0001 	ldrb.w	r0, [sl, #1]
        c   |= x[i] & ( x[i-1] * adjust );
 801279a:	f89a 2000 	ldrb.w	r2, [sl]
        x[i] = x[i] ^ c;
 801279e:	ea80 0307 	eor.w	r3, r0, r7
        adjust = 1 - ( x[i] & 0x01 );
 80127a2:	43d9      	mvns	r1, r3
 80127a4:	f001 0101 	and.w	r1, r1, #1
        c   |= x[i] & ( x[i-1] * adjust );
 80127a8:	fb12 f201 	smulbb	r2, r2, r1
 80127ac:	b25b      	sxtb	r3, r3
 80127ae:	b252      	sxtb	r2, r2
 80127b0:	ea03 0c02 	and.w	ip, r3, r2
        x[i] = x[i] ^ ( x[i-1] * adjust );
 80127b4:	4053      	eors	r3, r2
 80127b6:	f80a 3f01 	strb.w	r3, [sl, #1]!
        x[i-1] |= adjust << 7;
 80127ba:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
        cc   = x[i] & c;
 80127be:	4038      	ands	r0, r7
        c   |= x[i] & ( x[i-1] * adjust );
 80127c0:	ea4c 0700 	orr.w	r7, ip, r0
        x[i-1] |= adjust << 7;
 80127c4:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 80127c8:	b2ff      	uxtb	r7, r7
        x[i-1] |= adjust << 7;
 80127ca:	f80a 1c01 	strb.w	r1, [sl, #-1]
    for( i = 1; i <= d; i++ )
 80127ce:	3401      	adds	r4, #1
 80127d0:	e70c      	b.n	80125ec <ecp_mul_comb+0x270>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 80127d2:	2101      	movs	r1, #1
 80127d4:	4638      	mov	r0, r7
 80127d6:	f7fc f99c 	bl	800eb12 <mbedtls_mpi_shift_r>
 80127da:	e742      	b.n	8012662 <ecp_mul_comb+0x2e6>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 80127dc:	4632      	mov	r2, r6
 80127de:	4631      	mov	r1, r6
 80127e0:	4628      	mov	r0, r5
 80127e2:	f7fe fe89 	bl	80114f8 <ecp_double_jac>
 80127e6:	b988      	cbnz	r0, 801280c <ecp_mul_comb+0x490>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 80127e8:	f818 3007 	ldrb.w	r3, [r8, r7]
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	465a      	mov	r2, fp
 80127f0:	ee18 3a10 	vmov	r3, s16
 80127f4:	a919      	add	r1, sp, #100	; 0x64
 80127f6:	4628      	mov	r0, r5
 80127f8:	f7fe fe05 	bl	8011406 <ecp_select_comb>
 80127fc:	b930      	cbnz	r0, 801280c <ecp_mul_comb+0x490>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 80127fe:	ab19      	add	r3, sp, #100	; 0x64
 8012800:	4632      	mov	r2, r6
 8012802:	4631      	mov	r1, r6
 8012804:	4628      	mov	r0, r5
 8012806:	f7ff fb83 	bl	8011f10 <ecp_add_mixed>
 801280a:	b110      	cbz	r0, 8012812 <ecp_mul_comb+0x496>
 801280c:	4604      	mov	r4, r0
 801280e:	e003      	b.n	8012818 <ecp_mul_comb+0x49c>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 8012810:	af22      	add	r7, sp, #136	; 0x88
    while( i-- != 0 )
 8012812:	f1b8 0801 	subs.w	r8, r8, #1
 8012816:	d2e1      	bcs.n	80127dc <ecp_mul_comb+0x460>
    if( pt == NULL )
 8012818:	a819      	add	r0, sp, #100	; 0x64
 801281a:	f7ff faa3 	bl	8011d64 <mbedtls_ecp_point_free.part.0>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );
 801281e:	2c00      	cmp	r4, #0
 8012820:	f47f ae43 	bne.w	80124aa <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
 8012824:	464a      	mov	r2, r9
 8012826:	4631      	mov	r1, r6
 8012828:	4628      	mov	r0, r5
 801282a:	f7fe fdc9 	bl	80113c0 <ecp_safe_invert_jac>
 801282e:	4604      	mov	r4, r0
 8012830:	2800      	cmp	r0, #0
 8012832:	f47f ae3a 	bne.w	80124aa <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012836:	4631      	mov	r1, r6
 8012838:	4628      	mov	r0, r5
 801283a:	f7ff f8db 	bl	80119f4 <ecp_normalize_jac>
 801283e:	4604      	mov	r4, r0
cleanup:
 8012840:	e633      	b.n	80124aa <ecp_mul_comb+0x12e>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8012842:	4c03      	ldr	r4, [pc, #12]	; (8012850 <ecp_mul_comb+0x4d4>)
 8012844:	e643      	b.n	80124ce <ecp_mul_comb+0x152>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012846:	4c03      	ldr	r4, [pc, #12]	; (8012854 <ecp_mul_comb+0x4d8>)
 8012848:	e64b      	b.n	80124e2 <ecp_mul_comb+0x166>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 801284a:	4c03      	ldr	r4, [pc, #12]	; (8012858 <ecp_mul_comb+0x4dc>)
 801284c:	e7e4      	b.n	8012818 <ecp_mul_comb+0x49c>
 801284e:	bf00      	nop
 8012850:	ffffb280 	.word	0xffffb280
 8012854:	ffffb080 	.word	0xffffb080
 8012858:	ffffb300 	.word	0xffffb300
 801285c:	20001058 	.word	0x20001058

08012860 <mbedtls_ecp_is_zero>:
{
 8012860:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 8012862:	2100      	movs	r1, #0
 8012864:	3018      	adds	r0, #24
 8012866:	f7fc fa6b 	bl	800ed40 <mbedtls_mpi_cmp_int>
}
 801286a:	fab0 f080 	clz	r0, r0
 801286e:	0940      	lsrs	r0, r0, #5
 8012870:	bd08      	pop	{r3, pc}
	...

08012874 <mbedtls_ecp_point_write_binary>:
{
 8012874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 8012878:	2a01      	cmp	r2, #1
{
 801287a:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
 801287e:	4605      	mov	r5, r0
 8012880:	460e      	mov	r6, r1
 8012882:	4690      	mov	r8, r2
 8012884:	461f      	mov	r7, r3
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 8012886:	d83e      	bhi.n	8012906 <mbedtls_ecp_point_write_binary+0x92>
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8012888:	2100      	movs	r1, #0
 801288a:	f106 0018 	add.w	r0, r6, #24
 801288e:	f7fc fa57 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012892:	b948      	cbnz	r0, 80128a8 <mbedtls_ecp_point_write_binary+0x34>
        if( buflen < 1 )
 8012894:	f1b9 0f00 	cmp.w	r9, #0
 8012898:	d102      	bne.n	80128a0 <mbedtls_ecp_point_write_binary+0x2c>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 801289a:	481c      	ldr	r0, [pc, #112]	; (801290c <mbedtls_ecp_point_write_binary+0x98>)
}
 801289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *olen = 1;
 80128a0:	2301      	movs	r3, #1
        buf[0] = 0x00;
 80128a2:	7020      	strb	r0, [r4, #0]
        *olen = 1;
 80128a4:	603b      	str	r3, [r7, #0]
        return( 0 );
 80128a6:	e7f9      	b.n	801289c <mbedtls_ecp_point_write_binary+0x28>
    plen = mbedtls_mpi_size( &grp->P );
 80128a8:	1d28      	adds	r0, r5, #4
 80128aa:	f7fc f888 	bl	800e9be <mbedtls_mpi_size>
 80128ae:	4605      	mov	r5, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 80128b0:	f1b8 0f00 	cmp.w	r8, #0
 80128b4:	d117      	bne.n	80128e6 <mbedtls_ecp_point_write_binary+0x72>
        *olen = 2 * plen + 1;
 80128b6:	0043      	lsls	r3, r0, #1
 80128b8:	3301      	adds	r3, #1
        if( buflen < *olen )
 80128ba:	4599      	cmp	r9, r3
        *olen = 2 * plen + 1;
 80128bc:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
 80128be:	d3ec      	bcc.n	801289a <mbedtls_ecp_point_write_binary+0x26>
        buf[0] = 0x04;
 80128c0:	4621      	mov	r1, r4
 80128c2:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80128c4:	4602      	mov	r2, r0
        buf[0] = 0x04;
 80128c6:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80128ca:	4630      	mov	r0, r6
 80128cc:	f7fc f8b0 	bl	800ea30 <mbedtls_mpi_write_binary>
 80128d0:	2800      	cmp	r0, #0
 80128d2:	d1e3      	bne.n	801289c <mbedtls_ecp_point_write_binary+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 80128d4:	1c69      	adds	r1, r5, #1
 80128d6:	462a      	mov	r2, r5
 80128d8:	4421      	add	r1, r4
 80128da:	f106 000c 	add.w	r0, r6, #12
}
 80128de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 80128e2:	f7fc b8a5 	b.w	800ea30 <mbedtls_mpi_write_binary>
        *olen = plen + 1;
 80128e6:	1c43      	adds	r3, r0, #1
        if( buflen < *olen )
 80128e8:	4599      	cmp	r9, r3
        *olen = plen + 1;
 80128ea:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
 80128ec:	d3d5      	bcc.n	801289a <mbedtls_ecp_point_write_binary+0x26>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 80128ee:	2100      	movs	r1, #0
 80128f0:	f106 000c 	add.w	r0, r6, #12
 80128f4:	f7fc f81b 	bl	800e92e <mbedtls_mpi_get_bit>
 80128f8:	4621      	mov	r1, r4
 80128fa:	3002      	adds	r0, #2
 80128fc:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012900:	462a      	mov	r2, r5
 8012902:	4630      	mov	r0, r6
 8012904:	e7eb      	b.n	80128de <mbedtls_ecp_point_write_binary+0x6a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012906:	4802      	ldr	r0, [pc, #8]	; (8012910 <mbedtls_ecp_point_write_binary+0x9c>)
 8012908:	e7c8      	b.n	801289c <mbedtls_ecp_point_write_binary+0x28>
 801290a:	bf00      	nop
 801290c:	ffffb100 	.word	0xffffb100
 8012910:	ffffb080 	.word	0xffffb080

08012914 <mbedtls_ecp_point_read_binary>:
{
 8012914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012916:	460c      	mov	r4, r1
 8012918:	4615      	mov	r5, r2
    if( ilen < 1 )
 801291a:	461f      	mov	r7, r3
 801291c:	b90b      	cbnz	r3, 8012922 <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801291e:	4817      	ldr	r0, [pc, #92]	; (801297c <mbedtls_ecp_point_read_binary+0x68>)
}
 8012920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
 8012922:	7813      	ldrb	r3, [r2, #0]
 8012924:	b933      	cbnz	r3, 8012934 <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
 8012926:	2f01      	cmp	r7, #1
 8012928:	d1f9      	bne.n	801291e <mbedtls_ecp_point_read_binary+0xa>
}
 801292a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
 801292e:	4608      	mov	r0, r1
 8012930:	f7ff bad9 	b.w	8011ee6 <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
 8012934:	3004      	adds	r0, #4
 8012936:	f7fc f842 	bl	800e9be <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
 801293a:	782b      	ldrb	r3, [r5, #0]
 801293c:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
 801293e:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
 8012940:	d11a      	bne.n	8012978 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
 8012942:	0043      	lsls	r3, r0, #1
 8012944:	3301      	adds	r3, #1
 8012946:	429f      	cmp	r7, r3
 8012948:	d1e9      	bne.n	801291e <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 801294a:	4602      	mov	r2, r0
 801294c:	1c69      	adds	r1, r5, #1
 801294e:	4620      	mov	r0, r4
 8012950:	f7fc f83b 	bl	800e9ca <mbedtls_mpi_read_binary>
 8012954:	2800      	cmp	r0, #0
 8012956:	d1e3      	bne.n	8012920 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8012958:	1c71      	adds	r1, r6, #1
 801295a:	4632      	mov	r2, r6
 801295c:	4429      	add	r1, r5
 801295e:	f104 000c 	add.w	r0, r4, #12
 8012962:	f7fc f832 	bl	800e9ca <mbedtls_mpi_read_binary>
 8012966:	2800      	cmp	r0, #0
 8012968:	d1da      	bne.n	8012920 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 801296a:	f104 0018 	add.w	r0, r4, #24
 801296e:	2101      	movs	r1, #1
}
 8012970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8012974:	f7fb bfbf 	b.w	800e8f6 <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012978:	4801      	ldr	r0, [pc, #4]	; (8012980 <mbedtls_ecp_point_read_binary+0x6c>)
 801297a:	e7d1      	b.n	8012920 <mbedtls_ecp_point_read_binary+0xc>
 801297c:	ffffb080 	.word	0xffffb080
 8012980:	ffffb180 	.word	0xffffb180

08012984 <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
 8012984:	2b01      	cmp	r3, #1
{
 8012986:	b470      	push	{r4, r5, r6}
    if( buf_len < 2 )
 8012988:	d90e      	bls.n	80129a8 <mbedtls_ecp_tls_read_point+0x24>
    data_len = *(*buf)++;
 801298a:	6814      	ldr	r4, [r2, #0]
 801298c:	1c66      	adds	r6, r4, #1
 801298e:	6016      	str	r6, [r2, #0]
 8012990:	7825      	ldrb	r5, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
 8012992:	b14d      	cbz	r5, 80129a8 <mbedtls_ecp_tls_read_point+0x24>
 8012994:	1e5c      	subs	r4, r3, #1
 8012996:	42a5      	cmp	r5, r4
 8012998:	d806      	bhi.n	80129a8 <mbedtls_ecp_tls_read_point+0x24>
    *buf += data_len;
 801299a:	1973      	adds	r3, r6, r5
 801299c:	6013      	str	r3, [r2, #0]
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 801299e:	462b      	mov	r3, r5
 80129a0:	4632      	mov	r2, r6
}
 80129a2:	bc70      	pop	{r4, r5, r6}
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 80129a4:	f7ff bfb6 	b.w	8012914 <mbedtls_ecp_point_read_binary>
}
 80129a8:	4801      	ldr	r0, [pc, #4]	; (80129b0 <mbedtls_ecp_tls_read_point+0x2c>)
 80129aa:	bc70      	pop	{r4, r5, r6}
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop
 80129b0:	ffffb080 	.word	0xffffb080

080129b4 <mbedtls_ecp_tls_write_point>:
{
 80129b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80129b6:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
 80129ba:	461c      	mov	r4, r3
    if( blen < 1 )
 80129bc:	b16d      	cbz	r5, 80129da <mbedtls_ecp_tls_write_point+0x26>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 80129be:	3d01      	subs	r5, #1
 80129c0:	9501      	str	r5, [sp, #4]
 80129c2:	1c75      	adds	r5, r6, #1
 80129c4:	9500      	str	r5, [sp, #0]
 80129c6:	f7ff ff55 	bl	8012874 <mbedtls_ecp_point_write_binary>
 80129ca:	b920      	cbnz	r0, 80129d6 <mbedtls_ecp_tls_write_point+0x22>
    buf[0] = (unsigned char) *olen;
 80129cc:	6823      	ldr	r3, [r4, #0]
 80129ce:	7033      	strb	r3, [r6, #0]
    ++*olen;
 80129d0:	6823      	ldr	r3, [r4, #0]
 80129d2:	3301      	adds	r3, #1
 80129d4:	6023      	str	r3, [r4, #0]
}
 80129d6:	b002      	add	sp, #8
 80129d8:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80129da:	4801      	ldr	r0, [pc, #4]	; (80129e0 <mbedtls_ecp_tls_write_point+0x2c>)
 80129dc:	e7fb      	b.n	80129d6 <mbedtls_ecp_tls_write_point+0x22>
 80129de:	bf00      	nop
 80129e0:	ffffb080 	.word	0xffffb080

080129e4 <mbedtls_ecp_tls_read_group>:
    if( len < 3 )
 80129e4:	2a02      	cmp	r2, #2
{
 80129e6:	b510      	push	{r4, lr}
 80129e8:	4604      	mov	r4, r0
    if( len < 3 )
 80129ea:	d801      	bhi.n	80129f0 <mbedtls_ecp_tls_read_group+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80129ec:	480d      	ldr	r0, [pc, #52]	; (8012a24 <mbedtls_ecp_tls_read_group+0x40>)
}
 80129ee:	bd10      	pop	{r4, pc}
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
 80129f0:	680b      	ldr	r3, [r1, #0]
 80129f2:	1c5a      	adds	r2, r3, #1
 80129f4:	600a      	str	r2, [r1, #0]
 80129f6:	781a      	ldrb	r2, [r3, #0]
 80129f8:	2a03      	cmp	r2, #3
 80129fa:	d1f7      	bne.n	80129ec <mbedtls_ecp_tls_read_group+0x8>
    tls_id = *(*buf)++;
 80129fc:	1c9a      	adds	r2, r3, #2
 80129fe:	600a      	str	r2, [r1, #0]
    tls_id |= *(*buf)++;
 8012a00:	1cda      	adds	r2, r3, #3
    tls_id = *(*buf)++;
 8012a02:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
 8012a04:	600a      	str	r2, [r1, #0]
 8012a06:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
 8012a08:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8012a0c:	f7ff f9e0 	bl	8011dd0 <mbedtls_ecp_curve_info_from_tls_id>
 8012a10:	b128      	cbz	r0, 8012a1e <mbedtls_ecp_tls_read_group+0x3a>
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012a12:	7801      	ldrb	r1, [r0, #0]
 8012a14:	4620      	mov	r0, r4
}
 8012a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012a1a:	f001 b82d 	b.w	8013a78 <mbedtls_ecp_group_load>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012a1e:	4802      	ldr	r0, [pc, #8]	; (8012a28 <mbedtls_ecp_tls_read_group+0x44>)
 8012a20:	e7e5      	b.n	80129ee <mbedtls_ecp_tls_read_group+0xa>
 8012a22:	bf00      	nop
 8012a24:	ffffb080 	.word	0xffffb080
 8012a28:	ffffb180 	.word	0xffffb180

08012a2c <mbedtls_ecp_check_pubkey>:

/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8012a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a30:	4688      	mov	r8, r1
 8012a32:	b088      	sub	sp, #32
 8012a34:	4606      	mov	r6, r0
    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8012a36:	2101      	movs	r1, #1
 8012a38:	f108 0018 	add.w	r0, r8, #24
 8012a3c:	f7fc f980 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012a40:	9001      	str	r0, [sp, #4]
 8012a42:	b960      	cbnz	r0, 8012a5e <mbedtls_ecp_check_pubkey+0x32>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012a44:	4630      	mov	r0, r6
 8012a46:	f7fe fcb1 	bl	80113ac <ecp_get_type>
 8012a4a:	2801      	cmp	r0, #1
 8012a4c:	f040 80ac 	bne.w	8012ba8 <mbedtls_ecp_check_pubkey+0x17c>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012a50:	9901      	ldr	r1, [sp, #4]
 8012a52:	4640      	mov	r0, r8
 8012a54:	f7fc f974 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	9901      	ldr	r1, [sp, #4]
 8012a5c:	da01      	bge.n	8012a62 <mbedtls_ecp_check_pubkey+0x36>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012a5e:	4c53      	ldr	r4, [pc, #332]	; (8012bac <mbedtls_ecp_check_pubkey+0x180>)
 8012a60:	e077      	b.n	8012b52 <mbedtls_ecp_check_pubkey+0x126>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012a62:	f108 040c 	add.w	r4, r8, #12
 8012a66:	4620      	mov	r0, r4
 8012a68:	f7fc f96a 	bl	800ed40 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	dbf6      	blt.n	8012a5e <mbedtls_ecp_check_pubkey+0x32>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8012a70:	1d35      	adds	r5, r6, #4
 8012a72:	4629      	mov	r1, r5
 8012a74:	4640      	mov	r0, r8
 8012a76:	f7fc f920 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012a7a:	2800      	cmp	r0, #0
 8012a7c:	daef      	bge.n	8012a5e <mbedtls_ecp_check_pubkey+0x32>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8012a7e:	4629      	mov	r1, r5
 8012a80:	4620      	mov	r0, r4
 8012a82:	f7fc f91a 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8012a86:	2800      	cmp	r0, #0
 8012a88:	dae9      	bge.n	8012a5e <mbedtls_ecp_check_pubkey+0x32>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8012a8a:	a802      	add	r0, sp, #8
 8012a8c:	f7fb fe4f 	bl	800e72e <mbedtls_mpi_init>
 8012a90:	a805      	add	r0, sp, #20
 8012a92:	f7fb fe4c 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012a96:	4622      	mov	r2, r4
 8012a98:	4621      	mov	r1, r4
 8012a9a:	a802      	add	r0, sp, #8
 8012a9c:	f7fc fa57 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012aa0:	4604      	mov	r4, r0
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d14f      	bne.n	8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012aa6:	4631      	mov	r1, r6
 8012aa8:	a802      	add	r0, sp, #8
 8012aaa:	f7fe fcdf 	bl	801146c <ecp_modp>
 8012aae:	4604      	mov	r4, r0
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d148      	bne.n	8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012ab4:	4f3e      	ldr	r7, [pc, #248]	; (8012bb0 <mbedtls_ecp_check_pubkey+0x184>)
 8012ab6:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012ab8:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012aba:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012abc:	4641      	mov	r1, r8
 8012abe:	a805      	add	r0, sp, #20
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012ac0:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012ac2:	f7fc fa44 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012ac6:	4604      	mov	r4, r0
 8012ac8:	2800      	cmp	r0, #0
 8012aca:	d13c      	bne.n	8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012acc:	4631      	mov	r1, r6
 8012ace:	a805      	add	r0, sp, #20
 8012ad0:	f7fe fccc 	bl	801146c <ecp_modp>
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	d135      	bne.n	8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	3301      	adds	r3, #1
 8012ade:	607b      	str	r3, [r7, #4]
    if( grp->A.p == NULL )
 8012ae0:	69b3      	ldr	r3, [r6, #24]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d145      	bne.n	8012b72 <mbedtls_ecp_check_pubkey+0x146>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012ae6:	a905      	add	r1, sp, #20
 8012ae8:	2203      	movs	r2, #3
 8012aea:	4608      	mov	r0, r1
 8012aec:	f7fc fa19 	bl	800ef22 <mbedtls_mpi_sub_int>
 8012af0:	4604      	mov	r4, r0
 8012af2:	bb40      	cbnz	r0, 8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012af4:	9b05      	ldr	r3, [sp, #20]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	db2f      	blt.n	8012b5a <mbedtls_ecp_check_pubkey+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012afa:	a905      	add	r1, sp, #20
 8012afc:	4642      	mov	r2, r8
 8012afe:	4608      	mov	r0, r1
 8012b00:	f7fc fa25 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8012b04:	4604      	mov	r4, r0
 8012b06:	b9f0      	cbnz	r0, 8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012b08:	4631      	mov	r1, r6
 8012b0a:	a805      	add	r0, sp, #20
 8012b0c:	f7fe fcae 	bl	801146c <ecp_modp>
 8012b10:	4604      	mov	r4, r0
 8012b12:	b9c0      	cbnz	r0, 8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012b14:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012b16:	a905      	add	r1, sp, #20
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012b18:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012b1a:	f106 021c 	add.w	r2, r6, #28
 8012b1e:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012b20:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012b22:	f7fc f9b9 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8012b26:	4604      	mov	r4, r0
 8012b28:	b968      	cbnz	r0, 8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012b2a:	4629      	mov	r1, r5
 8012b2c:	a805      	add	r0, sp, #20
 8012b2e:	f7fc f8c4 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8012b32:	2800      	cmp	r0, #0
 8012b34:	da32      	bge.n	8012b9c <mbedtls_ecp_check_pubkey+0x170>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8012b36:	a905      	add	r1, sp, #20
 8012b38:	a802      	add	r0, sp, #8
 8012b3a:	f7fc f8be 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8012b3e:	4b1b      	ldr	r3, [pc, #108]	; (8012bac <mbedtls_ecp_check_pubkey+0x180>)
 8012b40:	1e04      	subs	r4, r0, #0
 8012b42:	bf18      	it	ne
 8012b44:	461c      	movne	r4, r3
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8012b46:	a802      	add	r0, sp, #8
 8012b48:	f7fb fdf8 	bl	800e73c <mbedtls_mpi_free>
 8012b4c:	a805      	add	r0, sp, #20
 8012b4e:	f7fb fdf5 	bl	800e73c <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8012b52:	4620      	mov	r0, r4
 8012b54:	b008      	add	sp, #32
 8012b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012b5a:	2100      	movs	r1, #0
 8012b5c:	a805      	add	r0, sp, #20
 8012b5e:	f7fc f8ef 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012b62:	2800      	cmp	r0, #0
 8012b64:	d0c9      	beq.n	8012afa <mbedtls_ecp_check_pubkey+0xce>
 8012b66:	a905      	add	r1, sp, #20
 8012b68:	462a      	mov	r2, r5
 8012b6a:	4608      	mov	r0, r1
 8012b6c:	f7fc f994 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8012b70:	e7be      	b.n	8012af0 <mbedtls_ecp_check_pubkey+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8012b72:	a905      	add	r1, sp, #20
 8012b74:	f106 0210 	add.w	r2, r6, #16
 8012b78:	4608      	mov	r0, r1
 8012b7a:	f7fc f98d 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8012b7e:	4604      	mov	r4, r0
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d1e0      	bne.n	8012b46 <mbedtls_ecp_check_pubkey+0x11a>
 8012b84:	4629      	mov	r1, r5
 8012b86:	a805      	add	r0, sp, #20
 8012b88:	f7fc f897 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	dbb4      	blt.n	8012afa <mbedtls_ecp_check_pubkey+0xce>
 8012b90:	a905      	add	r1, sp, #20
 8012b92:	462a      	mov	r2, r5
 8012b94:	4608      	mov	r0, r1
 8012b96:	f7fc f942 	bl	800ee1e <mbedtls_mpi_sub_abs>
 8012b9a:	e7f0      	b.n	8012b7e <mbedtls_ecp_check_pubkey+0x152>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012b9c:	a905      	add	r1, sp, #20
 8012b9e:	462a      	mov	r2, r5
 8012ba0:	4608      	mov	r0, r1
 8012ba2:	f7fc f93c 	bl	800ee1e <mbedtls_mpi_sub_abs>
 8012ba6:	e7be      	b.n	8012b26 <mbedtls_ecp_check_pubkey+0xfa>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012ba8:	4c02      	ldr	r4, [pc, #8]	; (8012bb4 <mbedtls_ecp_check_pubkey+0x188>)
 8012baa:	e7d2      	b.n	8012b52 <mbedtls_ecp_check_pubkey+0x126>
 8012bac:	ffffb380 	.word	0xffffb380
 8012bb0:	20001058 	.word	0x20001058
 8012bb4:	ffffb080 	.word	0xffffb080

08012bb8 <mbedtls_ecp_check_privkey>:

/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
{
 8012bb8:	b538      	push	{r3, r4, r5, lr}
 8012bba:	460c      	mov	r4, r1
 8012bbc:	4605      	mov	r5, r0
        else
            return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012bbe:	f7fe fbf5 	bl	80113ac <ecp_get_type>
 8012bc2:	2801      	cmp	r0, #1
 8012bc4:	4601      	mov	r1, r0
 8012bc6:	d10d      	bne.n	8012be4 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f7fc f8b9 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	db06      	blt.n	8012be0 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8012bd2:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7fc f86f 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	db03      	blt.n	8012be8 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012be0:	4802      	ldr	r0, [pc, #8]	; (8012bec <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8012be2:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012be4:	4802      	ldr	r0, [pc, #8]	; (8012bf0 <mbedtls_ecp_check_privkey+0x38>)
 8012be6:	e7fc      	b.n	8012be2 <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
 8012be8:	2000      	movs	r0, #0
 8012bea:	e7fa      	b.n	8012be2 <mbedtls_ecp_check_privkey+0x2a>
 8012bec:	ffffb380 	.word	0xffffb380
 8012bf0:	ffffb080 	.word	0xffffb080

08012bf4 <mbedtls_ecp_mul>:
{
 8012bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012bfc:	f103 0018 	add.w	r0, r3, #24
 8012c00:	2101      	movs	r1, #1
{
 8012c02:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8012c06:	4616      	mov	r6, r2
 8012c08:	469a      	mov	sl, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012c0a:	f7fc f899 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012c0e:	b9d0      	cbnz	r0, 8012c46 <mbedtls_ecp_mul+0x52>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012c10:	4631      	mov	r1, r6
 8012c12:	4628      	mov	r0, r5
 8012c14:	f7ff ffd0 	bl	8012bb8 <mbedtls_ecp_check_privkey>
 8012c18:	4604      	mov	r4, r0
 8012c1a:	b9a8      	cbnz	r0, 8012c48 <mbedtls_ecp_mul+0x54>
        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )
 8012c1c:	4651      	mov	r1, sl
 8012c1e:	4628      	mov	r0, r5
 8012c20:	f7ff ff04 	bl	8012a2c <mbedtls_ecp_check_pubkey>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012c24:	4604      	mov	r4, r0
 8012c26:	b978      	cbnz	r0, 8012c48 <mbedtls_ecp_mul+0x54>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012c28:	4628      	mov	r0, r5
 8012c2a:	f7fe fbbf 	bl	80113ac <ecp_get_type>
 8012c2e:	2801      	cmp	r0, #1
 8012c30:	d10a      	bne.n	8012c48 <mbedtls_ecp_mul+0x54>
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 8012c32:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8012c36:	4653      	mov	r3, sl
 8012c38:	4632      	mov	r2, r6
 8012c3a:	4639      	mov	r1, r7
 8012c3c:	4628      	mov	r0, r5
}
 8012c3e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 8012c42:	f7ff bb9b 	b.w	801237c <ecp_mul_comb>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012c46:	4c02      	ldr	r4, [pc, #8]	; (8012c50 <mbedtls_ecp_mul+0x5c>)
}
 8012c48:	4620      	mov	r0, r4
 8012c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c4e:	bf00      	nop
 8012c50:	ffffb080 	.word	0xffffb080

08012c54 <mbedtls_ecp_mul_shortcuts>:
{
 8012c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c56:	4607      	mov	r7, r0
 8012c58:	b085      	sub	sp, #20
 8012c5a:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	2101      	movs	r1, #1
{
 8012c60:	4615      	mov	r5, r2
 8012c62:	461e      	mov	r6, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012c64:	f7fc f86c 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012c68:	b930      	cbnz	r0, 8012c78 <mbedtls_ecp_mul_shortcuts+0x24>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012c6a:	4631      	mov	r1, r6
 8012c6c:	4620      	mov	r0, r4
}
 8012c6e:	b005      	add	sp, #20
 8012c70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012c74:	f7ff b91e 	b.w	8011eb4 <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8012c78:	f04f 31ff 	mov.w	r1, #4294967295
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	f7fc f85f 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012c82:	b9a0      	cbnz	r0, 8012cae <mbedtls_ecp_mul_shortcuts+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012c84:	4631      	mov	r1, r6
 8012c86:	4620      	mov	r0, r4
 8012c88:	f7ff f914 	bl	8011eb4 <mbedtls_ecp_copy>
 8012c8c:	b9c0      	cbnz	r0, 8012cc0 <mbedtls_ecp_mul_shortcuts+0x6c>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8012c8e:	f104 020c 	add.w	r2, r4, #12
 8012c92:	4601      	mov	r1, r0
 8012c94:	4610      	mov	r0, r2
 8012c96:	9203      	str	r2, [sp, #12]
 8012c98:	f7fc f852 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8012c9c:	9a03      	ldr	r2, [sp, #12]
 8012c9e:	b178      	cbz	r0, 8012cc0 <mbedtls_ecp_mul_shortcuts+0x6c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8012ca0:	1d39      	adds	r1, r7, #4
 8012ca2:	4610      	mov	r0, r2
}
 8012ca4:	b005      	add	sp, #20
 8012ca6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8012caa:	f7fc b917 	b.w	800eedc <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e9cd 3300 	strd	r3, r3, [sp]
 8012cb4:	462a      	mov	r2, r5
 8012cb6:	4633      	mov	r3, r6
 8012cb8:	4621      	mov	r1, r4
 8012cba:	4638      	mov	r0, r7
 8012cbc:	f7ff ff9a 	bl	8012bf4 <mbedtls_ecp_mul>
}
 8012cc0:	b005      	add	sp, #20
 8012cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012cc4 <mbedtls_ecp_muladd>:
{
 8012cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cc6:	b08b      	sub	sp, #44	; 0x2c
 8012cc8:	4605      	mov	r5, r0
 8012cca:	460e      	mov	r6, r1
 8012ccc:	4614      	mov	r4, r2
 8012cce:	461f      	mov	r7, r3
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8012cd0:	f7fe fb6c 	bl	80113ac <ecp_get_type>
 8012cd4:	2801      	cmp	r0, #1
 8012cd6:	d125      	bne.n	8012d24 <mbedtls_ecp_muladd+0x60>
    if( pt == NULL )
 8012cd8:	a801      	add	r0, sp, #4
 8012cda:	f7ff f835 	bl	8011d48 <mbedtls_ecp_point_init.part.0>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );
 8012cde:	4622      	mov	r2, r4
 8012ce0:	463b      	mov	r3, r7
 8012ce2:	a901      	add	r1, sp, #4
 8012ce4:	4628      	mov	r0, r5
 8012ce6:	f7ff ffb5 	bl	8012c54 <mbedtls_ecp_mul_shortcuts>
 8012cea:	4604      	mov	r4, r0
 8012cec:	b9a0      	cbnz	r0, 8012d18 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );
 8012cee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012cf2:	4631      	mov	r1, r6
 8012cf4:	4628      	mov	r0, r5
 8012cf6:	f7ff ffad 	bl	8012c54 <mbedtls_ecp_mul_shortcuts>
 8012cfa:	4604      	mov	r4, r0
 8012cfc:	b960      	cbnz	r0, 8012d18 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );
 8012cfe:	4633      	mov	r3, r6
 8012d00:	aa01      	add	r2, sp, #4
 8012d02:	4631      	mov	r1, r6
 8012d04:	4628      	mov	r0, r5
 8012d06:	f7ff f903 	bl	8011f10 <ecp_add_mixed>
 8012d0a:	4604      	mov	r4, r0
 8012d0c:	b920      	cbnz	r0, 8012d18 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012d0e:	4631      	mov	r1, r6
 8012d10:	4628      	mov	r0, r5
 8012d12:	f7fe fe6f 	bl	80119f4 <ecp_normalize_jac>
 8012d16:	4604      	mov	r4, r0
    if( pt == NULL )
 8012d18:	a801      	add	r0, sp, #4
 8012d1a:	f7ff f823 	bl	8011d64 <mbedtls_ecp_point_free.part.0>
}
 8012d1e:	4620      	mov	r0, r4
 8012d20:	b00b      	add	sp, #44	; 0x2c
 8012d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012d24:	4c00      	ldr	r4, [pc, #0]	; (8012d28 <mbedtls_ecp_muladd+0x64>)
 8012d26:	e7fa      	b.n	8012d1e <mbedtls_ecp_muladd+0x5a>
 8012d28:	ffffb180 	.word	0xffffb180

08012d2c <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8012d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d30:	b095      	sub	sp, #84	; 0x54
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012d32:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
{
 8012d34:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8012d38:	4605      	mov	r5, r0
 8012d3a:	4688      	mov	r8, r1
 8012d3c:	4614      	mov	r4, r2
 8012d3e:	461f      	mov	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
    }
    else
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012d40:	f7fe fb34 	bl	80113ac <ecp_get_type>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012d44:	3607      	adds	r6, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012d46:	2801      	cmp	r0, #1
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012d48:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012d4c:	d003      	beq.n	8012d56 <mbedtls_ecp_gen_keypair_base+0x2a>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
    }
    else
#endif /* ECP_SHORTWEIERSTRASS */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012d4e:	481d      	ldr	r0, [pc, #116]	; (8012dc4 <mbedtls_ecp_gen_keypair_base+0x98>)
cleanup:
    if( ret != 0 )
        return( ret );

    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
}
 8012d50:	b015      	add	sp, #84	; 0x54
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	f04f 091f 	mov.w	r9, #31
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8012d5a:	f026 0607 	bic.w	r6, r6, #7
            MBEDTLS_MPI_CHK( f_rng( p_rng, rnd, n_size ) );
 8012d5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012d60:	465a      	mov	r2, fp
 8012d62:	a903      	add	r1, sp, #12
 8012d64:	4650      	mov	r0, sl
 8012d66:	4798      	blx	r3
 8012d68:	2800      	cmp	r0, #0
 8012d6a:	d1f1      	bne.n	8012d50 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( d, rnd, n_size ) );
 8012d6c:	465a      	mov	r2, fp
 8012d6e:	a903      	add	r1, sp, #12
 8012d70:	4620      	mov	r0, r4
 8012d72:	f7fb fe2a 	bl	800e9ca <mbedtls_mpi_read_binary>
 8012d76:	2800      	cmp	r0, #0
 8012d78:	d1ea      	bne.n	8012d50 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8012d7a:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	1a71      	subs	r1, r6, r1
 8012d80:	f7fb fec7 	bl	800eb12 <mbedtls_mpi_shift_r>
 8012d84:	2800      	cmp	r0, #0
 8012d86:	d1e3      	bne.n	8012d50 <mbedtls_ecp_gen_keypair_base+0x24>
            if( ++count > 30 )
 8012d88:	f1b9 0901 	subs.w	r9, r9, #1
 8012d8c:	d102      	bne.n	8012d94 <mbedtls_ecp_gen_keypair_base+0x68>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8012d8e:	f5a0 409a 	sub.w	r0, r0, #19712	; 0x4d00
 8012d92:	e7dd      	b.n	8012d50 <mbedtls_ecp_gen_keypair_base+0x24>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012d94:	2101      	movs	r1, #1
 8012d96:	4620      	mov	r0, r4
 8012d98:	f7fb ffd2 	bl	800ed40 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	dbde      	blt.n	8012d5e <mbedtls_ecp_gen_keypair_base+0x32>
 8012da0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8012da4:	4620      	mov	r0, r4
 8012da6:	f7fb ff88 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012daa:	2800      	cmp	r0, #0
 8012dac:	dad7      	bge.n	8012d5e <mbedtls_ecp_gen_keypair_base+0x32>
    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 8012dae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012db0:	9300      	str	r3, [sp, #0]
 8012db2:	f8cd a004 	str.w	sl, [sp, #4]
 8012db6:	4643      	mov	r3, r8
 8012db8:	4622      	mov	r2, r4
 8012dba:	4639      	mov	r1, r7
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	f7ff ff19 	bl	8012bf4 <mbedtls_ecp_mul>
 8012dc2:	e7c5      	b.n	8012d50 <mbedtls_ecp_gen_keypair_base+0x24>
 8012dc4:	ffffb080 	.word	0xffffb080

08012dc8 <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 8012dc8:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 8012dca:	9c04      	ldr	r4, [sp, #16]
 8012dcc:	e9cd 3400 	strd	r3, r4, [sp]
 8012dd0:	4613      	mov	r3, r2
 8012dd2:	460a      	mov	r2, r1
 8012dd4:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8012dd8:	f7ff ffa8 	bl	8012d2c <mbedtls_ecp_gen_keypair_base>
}
 8012ddc:	b002      	add	sp, #8
 8012dde:	bd10      	pop	{r4, pc}

08012de0 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 8012de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8012de4:	7803      	ldrb	r3, [r0, #0]
{
 8012de6:	b0aa      	sub	sp, #168	; 0xa8
 8012de8:	4605      	mov	r5, r0
 8012dea:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8012dec:	b923      	cbnz	r3, 8012df8 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012dee:	4c29      	ldr	r4, [pc, #164]	; (8012e94 <mbedtls_ecp_check_pub_priv+0xb4>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 8012df0:	4620      	mov	r0, r4
 8012df2:	b02a      	add	sp, #168	; 0xa8
 8012df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8012df8:	780a      	ldrb	r2, [r1, #0]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d1f7      	bne.n	8012dee <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8012dfe:	f101 0888 	add.w	r8, r1, #136	; 0x88
 8012e02:	4641      	mov	r1, r8
 8012e04:	3088      	adds	r0, #136	; 0x88
 8012e06:	f7fb ff58 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 8012e0a:	2800      	cmp	r0, #0
 8012e0c:	d1ef      	bne.n	8012dee <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8012e0e:	f104 0794 	add.w	r7, r4, #148	; 0x94
 8012e12:	4639      	mov	r1, r7
 8012e14:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8012e18:	f7fb ff4f 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d1e6      	bne.n	8012dee <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 8012e20:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8012e24:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012e28:	4631      	mov	r1, r6
 8012e2a:	f7fb ff46 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 8012e2e:	4605      	mov	r5, r0
 8012e30:	2800      	cmp	r0, #0
 8012e32:	d1dc      	bne.n	8012dee <mbedtls_ecp_check_pub_priv+0xe>
    if( pt == NULL )
 8012e34:	a802      	add	r0, sp, #8
 8012e36:	f7fe ff87 	bl	8011d48 <mbedtls_ecp_point_init.part.0>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 8012e3a:	227c      	movs	r2, #124	; 0x7c
 8012e3c:	4629      	mov	r1, r5
 8012e3e:	a80b      	add	r0, sp, #44	; 0x2c
 8012e40:	f00f f9da 	bl	80221f8 <memset>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 8012e44:	4621      	mov	r1, r4
 8012e46:	a80b      	add	r0, sp, #44	; 0x2c
 8012e48:	f7ff f84a 	bl	8011ee0 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 8012e4c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8012e50:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8012e54:	e9cd 5500 	strd	r5, r5, [sp]
 8012e58:	a902      	add	r1, sp, #8
 8012e5a:	a80b      	add	r0, sp, #44	; 0x2c
 8012e5c:	f7ff feca 	bl	8012bf4 <mbedtls_ecp_mul>
 8012e60:	4604      	mov	r4, r0
 8012e62:	b980      	cbnz	r0, 8012e86 <mbedtls_ecp_check_pub_priv+0xa6>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8012e64:	4641      	mov	r1, r8
 8012e66:	a802      	add	r0, sp, #8
 8012e68:	f7fb ff27 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8012e6c:	b950      	cbnz	r0, 8012e84 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8012e6e:	4639      	mov	r1, r7
 8012e70:	a805      	add	r0, sp, #20
 8012e72:	f7fb ff22 	bl	800ecba <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 8012e76:	b928      	cbnz	r0, 8012e84 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 8012e78:	4631      	mov	r1, r6
 8012e7a:	a808      	add	r0, sp, #32
 8012e7c:	f7fb ff1d 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 8012e80:	4604      	mov	r4, r0
 8012e82:	b100      	cbz	r0, 8012e86 <mbedtls_ecp_check_pub_priv+0xa6>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8012e84:	4c03      	ldr	r4, [pc, #12]	; (8012e94 <mbedtls_ecp_check_pub_priv+0xb4>)
    if( pt == NULL )
 8012e86:	a802      	add	r0, sp, #8
 8012e88:	f7fe ff6c 	bl	8011d64 <mbedtls_ecp_point_free.part.0>
    mbedtls_ecp_group_free( &grp );
 8012e8c:	a80b      	add	r0, sp, #44	; 0x2c
 8012e8e:	f7fe ffcb 	bl	8011e28 <mbedtls_ecp_group_free>
    return( ret );
 8012e92:	e7ad      	b.n	8012df0 <mbedtls_ecp_check_pub_priv+0x10>
 8012e94:	ffffb080 	.word	0xffffb080

08012e98 <add32>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
 8012e98:	6803      	ldr	r3, [r0, #0]
 8012e9a:	1859      	adds	r1, r3, r1
 8012e9c:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
 8012e9e:	7811      	ldrb	r1, [r2, #0]
 8012ea0:	bf2c      	ite	cs
 8012ea2:	2301      	movcs	r3, #1
 8012ea4:	2300      	movcc	r3, #0
 8012ea6:	440b      	add	r3, r1
 8012ea8:	7013      	strb	r3, [r2, #0]
}
 8012eaa:	4770      	bx	lr

08012eac <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
 8012eac:	7813      	ldrb	r3, [r2, #0]
{
 8012eae:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
 8012eb0:	6804      	ldr	r4, [r0, #0]
 8012eb2:	428c      	cmp	r4, r1
 8012eb4:	bf38      	it	cc
 8012eb6:	3b01      	subcc	r3, #1
 8012eb8:	7013      	strb	r3, [r2, #0]
    *dst -= src;
 8012eba:	6803      	ldr	r3, [r0, #0]
 8012ebc:	1a59      	subs	r1, r3, r1
 8012ebe:	6001      	str	r1, [r0, #0]
}
 8012ec0:	bd10      	pop	{r4, pc}

08012ec2 <fix_negative.isra.0>:

/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 8012ec2:	b538      	push	{r3, r4, r5, lr}
 8012ec4:	4613      	mov	r3, r2
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8012ec6:	6852      	ldr	r2, [r2, #4]
 8012ec8:	689d      	ldr	r5, [r3, #8]
 8012eca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8012ece:	3a01      	subs	r2, #1
 8012ed0:	4249      	negs	r1, r1
 8012ed2:	f845 1022 	str.w	r1, [r5, r2, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	4619      	mov	r1, r3
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 8012eda:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8012edc:	f7fb ff9f 	bl	800ee1e <mbedtls_mpi_sub_abs>
 8012ee0:	b910      	cbnz	r0, 8012ee8 <fix_negative.isra.0+0x26>
    N->s = -1;
 8012ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee6:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 8012ee8:	bd38      	pop	{r3, r4, r5, pc}

08012eea <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 8012eea:	b570      	push	{r4, r5, r6, lr}
    INIT( 384 );
 8012eec:	230d      	movs	r3, #13
{
 8012eee:	b092      	sub	sp, #72	; 0x48
    INIT( 384 );
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012ef6:	2100      	movs	r1, #0
{
 8012ef8:	4604      	mov	r4, r0
    INIT( 384 );
 8012efa:	2234      	movs	r2, #52	; 0x34
 8012efc:	a805      	add	r0, sp, #20
 8012efe:	f88d 1003 	strb.w	r1, [sp, #3]
 8012f02:	9004      	str	r0, [sp, #16]
 8012f04:	f00f f978 	bl	80221f8 <memset>
 8012f08:	2118      	movs	r1, #24
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	f7fb fc2e 	bl	800e76c <mbedtls_mpi_grow>
 8012f10:	4605      	mov	r5, r0
 8012f12:	2800      	cmp	r0, #0
 8012f14:	f040 82b4 	bne.w	8013480 <ecp_mod_p384+0x596>
 8012f18:	68a3      	ldr	r3, [r4, #8]
 8012f1a:	681a      	ldr	r2, [r3, #0]

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 8012f1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    INIT( 384 );
 8012f1e:	9201      	str	r2, [sp, #4]
    ADD( 12 ); ADD( 21 ); ADD( 20 );
 8012f20:	a801      	add	r0, sp, #4
 8012f22:	f10d 0203 	add.w	r2, sp, #3
 8012f26:	f7ff ffb7 	bl	8012e98 <add32>
 8012f2a:	68a3      	ldr	r3, [r4, #8]
 8012f2c:	f10d 0203 	add.w	r2, sp, #3
 8012f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012f32:	a801      	add	r0, sp, #4
 8012f34:	f7ff ffb0 	bl	8012e98 <add32>
 8012f38:	68a3      	ldr	r3, [r4, #8]
 8012f3a:	f10d 0203 	add.w	r2, sp, #3
 8012f3e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012f40:	a801      	add	r0, sp, #4
 8012f42:	f7ff ffa9 	bl	8012e98 <add32>
    SUB( 23 );                                              NEXT; // A0
 8012f46:	68a3      	ldr	r3, [r4, #8]
 8012f48:	f10d 0203 	add.w	r2, sp, #3
 8012f4c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012f4e:	a801      	add	r0, sp, #4
 8012f50:	f7ff ffac 	bl	8012eac <sub32>
 8012f54:	68a3      	ldr	r3, [r4, #8]
 8012f56:	9a01      	ldr	r2, [sp, #4]
 8012f58:	601a      	str	r2, [r3, #0]
 8012f5a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012f5e:	685b      	ldr	r3, [r3, #4]
 8012f60:	9301      	str	r3, [sp, #4]
 8012f62:	2900      	cmp	r1, #0
 8012f64:	f88d 5003 	strb.w	r5, [sp, #3]
 8012f68:	f10d 0203 	add.w	r2, sp, #3
 8012f6c:	f280 828b 	bge.w	8013486 <ecp_mod_p384+0x59c>
 8012f70:	4249      	negs	r1, r1
 8012f72:	a801      	add	r0, sp, #4
 8012f74:	f7ff ff9a 	bl	8012eac <sub32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 8012f78:	68a3      	ldr	r3, [r4, #8]
 8012f7a:	f10d 0203 	add.w	r2, sp, #3
 8012f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012f80:	a801      	add	r0, sp, #4
 8012f82:	f7ff ff89 	bl	8012e98 <add32>
 8012f86:	68a3      	ldr	r3, [r4, #8]
 8012f88:	f10d 0203 	add.w	r2, sp, #3
 8012f8c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012f8e:	a801      	add	r0, sp, #4
 8012f90:	f7ff ff82 	bl	8012e98 <add32>
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	f10d 0203 	add.w	r2, sp, #3
 8012f9a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012f9c:	a801      	add	r0, sp, #4
 8012f9e:	f7ff ff7b 	bl	8012e98 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 8012fa2:	68a3      	ldr	r3, [r4, #8]
 8012fa4:	f10d 0203 	add.w	r2, sp, #3
 8012fa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012faa:	a801      	add	r0, sp, #4
 8012fac:	f7ff ff7e 	bl	8012eac <sub32>
 8012fb0:	68a3      	ldr	r3, [r4, #8]
 8012fb2:	f10d 0203 	add.w	r2, sp, #3
 8012fb6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012fb8:	a801      	add	r0, sp, #4
 8012fba:	f7ff ff77 	bl	8012eac <sub32>
 8012fbe:	68a3      	ldr	r3, [r4, #8]
 8012fc0:	9a01      	ldr	r2, [sp, #4]
 8012fc2:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8012fc6:	605a      	str	r2, [r3, #4]
 8012fc8:	689b      	ldr	r3, [r3, #8]
 8012fca:	9301      	str	r3, [sp, #4]
 8012fcc:	2300      	movs	r3, #0
 8012fce:	4299      	cmp	r1, r3
 8012fd0:	f88d 3003 	strb.w	r3, [sp, #3]
 8012fd4:	f10d 0203 	add.w	r2, sp, #3
 8012fd8:	f280 8259 	bge.w	801348e <ecp_mod_p384+0x5a4>
 8012fdc:	4249      	negs	r1, r1
 8012fde:	a801      	add	r0, sp, #4
 8012fe0:	f7ff ff64 	bl	8012eac <sub32>

    ADD( 14 ); ADD( 23 );
 8012fe4:	68a3      	ldr	r3, [r4, #8]
 8012fe6:	f10d 0203 	add.w	r2, sp, #3
 8012fea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8012fec:	a801      	add	r0, sp, #4
 8012fee:	f7ff ff53 	bl	8012e98 <add32>
 8012ff2:	68a3      	ldr	r3, [r4, #8]
 8012ff4:	f10d 0203 	add.w	r2, sp, #3
 8012ff8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012ffa:	a801      	add	r0, sp, #4
 8012ffc:	f7ff ff4c 	bl	8012e98 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8013000:	68a3      	ldr	r3, [r4, #8]
 8013002:	f10d 0203 	add.w	r2, sp, #3
 8013006:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013008:	a801      	add	r0, sp, #4
 801300a:	f7ff ff4f 	bl	8012eac <sub32>
 801300e:	68a3      	ldr	r3, [r4, #8]
 8013010:	f10d 0203 	add.w	r2, sp, #3
 8013014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013016:	a801      	add	r0, sp, #4
 8013018:	f7ff ff48 	bl	8012eac <sub32>
 801301c:	68a3      	ldr	r3, [r4, #8]
 801301e:	9a01      	ldr	r2, [sp, #4]
 8013020:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013024:	609a      	str	r2, [r3, #8]
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	9301      	str	r3, [sp, #4]
 801302a:	2300      	movs	r3, #0
 801302c:	4299      	cmp	r1, r3
 801302e:	f88d 3003 	strb.w	r3, [sp, #3]
 8013032:	f10d 0203 	add.w	r2, sp, #3
 8013036:	f280 822e 	bge.w	8013496 <ecp_mod_p384+0x5ac>
 801303a:	4249      	negs	r1, r1
 801303c:	a801      	add	r0, sp, #4
 801303e:	f7ff ff35 	bl	8012eac <sub32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 8013042:	68a3      	ldr	r3, [r4, #8]
 8013044:	f10d 0203 	add.w	r2, sp, #3
 8013048:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801304a:	a801      	add	r0, sp, #4
 801304c:	f7ff ff24 	bl	8012e98 <add32>
 8013050:	68a3      	ldr	r3, [r4, #8]
 8013052:	f10d 0203 	add.w	r2, sp, #3
 8013056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013058:	a801      	add	r0, sp, #4
 801305a:	f7ff ff1d 	bl	8012e98 <add32>
 801305e:	68a3      	ldr	r3, [r4, #8]
 8013060:	f10d 0203 	add.w	r2, sp, #3
 8013064:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013066:	a801      	add	r0, sp, #4
 8013068:	f7ff ff16 	bl	8012e98 <add32>
 801306c:	68a3      	ldr	r3, [r4, #8]
 801306e:	f10d 0203 	add.w	r2, sp, #3
 8013072:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013074:	a801      	add	r0, sp, #4
 8013076:	f7ff ff0f 	bl	8012e98 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 801307a:	68a3      	ldr	r3, [r4, #8]
 801307c:	f10d 0203 	add.w	r2, sp, #3
 8013080:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013082:	a801      	add	r0, sp, #4
 8013084:	f7ff ff12 	bl	8012eac <sub32>
 8013088:	68a3      	ldr	r3, [r4, #8]
 801308a:	f10d 0203 	add.w	r2, sp, #3
 801308e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013090:	a801      	add	r0, sp, #4
 8013092:	f7ff ff0b 	bl	8012eac <sub32>
 8013096:	68a3      	ldr	r3, [r4, #8]
 8013098:	f10d 0203 	add.w	r2, sp, #3
 801309c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801309e:	a801      	add	r0, sp, #4
 80130a0:	f7ff ff04 	bl	8012eac <sub32>
 80130a4:	68a3      	ldr	r3, [r4, #8]
 80130a6:	9a01      	ldr	r2, [sp, #4]
 80130a8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80130ac:	60da      	str	r2, [r3, #12]
 80130ae:	691b      	ldr	r3, [r3, #16]
 80130b0:	9301      	str	r3, [sp, #4]
 80130b2:	2300      	movs	r3, #0
 80130b4:	4299      	cmp	r1, r3
 80130b6:	f88d 3003 	strb.w	r3, [sp, #3]
 80130ba:	f10d 0203 	add.w	r2, sp, #3
 80130be:	f280 81ee 	bge.w	801349e <ecp_mod_p384+0x5b4>
 80130c2:	4249      	negs	r1, r1
 80130c4:	a801      	add	r0, sp, #4
 80130c6:	f7ff fef1 	bl	8012eac <sub32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 80130ca:	68a3      	ldr	r3, [r4, #8]
 80130cc:	f10d 0203 	add.w	r2, sp, #3
 80130d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80130d2:	a801      	add	r0, sp, #4
 80130d4:	f7ff fee0 	bl	8012e98 <add32>
 80130d8:	68a3      	ldr	r3, [r4, #8]
 80130da:	f10d 0203 	add.w	r2, sp, #3
 80130de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80130e0:	a801      	add	r0, sp, #4
 80130e2:	f7ff fed9 	bl	8012e98 <add32>
 80130e6:	68a3      	ldr	r3, [r4, #8]
 80130e8:	f10d 0203 	add.w	r2, sp, #3
 80130ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80130ee:	a801      	add	r0, sp, #4
 80130f0:	f7ff fed2 	bl	8012e98 <add32>
 80130f4:	68a3      	ldr	r3, [r4, #8]
 80130f6:	f10d 0203 	add.w	r2, sp, #3
 80130fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80130fc:	a801      	add	r0, sp, #4
 80130fe:	f7ff fecb 	bl	8012e98 <add32>
 8013102:	68a3      	ldr	r3, [r4, #8]
 8013104:	f10d 0203 	add.w	r2, sp, #3
 8013108:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801310a:	a801      	add	r0, sp, #4
 801310c:	f7ff fec4 	bl	8012e98 <add32>
 8013110:	68a3      	ldr	r3, [r4, #8]
 8013112:	f10d 0203 	add.w	r2, sp, #3
 8013116:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013118:	a801      	add	r0, sp, #4
 801311a:	f7ff febd 	bl	8012e98 <add32>
 801311e:	68a3      	ldr	r3, [r4, #8]
 8013120:	f10d 0203 	add.w	r2, sp, #3
 8013124:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013126:	a801      	add	r0, sp, #4
 8013128:	f7ff feb6 	bl	8012e98 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 801312c:	68a3      	ldr	r3, [r4, #8]
 801312e:	f10d 0203 	add.w	r2, sp, #3
 8013132:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013134:	a801      	add	r0, sp, #4
 8013136:	f7ff feb9 	bl	8012eac <sub32>
 801313a:	68a3      	ldr	r3, [r4, #8]
 801313c:	f10d 0203 	add.w	r2, sp, #3
 8013140:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013142:	a801      	add	r0, sp, #4
 8013144:	f7ff feb2 	bl	8012eac <sub32>
 8013148:	68a3      	ldr	r3, [r4, #8]
 801314a:	f10d 0203 	add.w	r2, sp, #3
 801314e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013150:	a801      	add	r0, sp, #4
 8013152:	f7ff feab 	bl	8012eac <sub32>
 8013156:	68a3      	ldr	r3, [r4, #8]
 8013158:	9a01      	ldr	r2, [sp, #4]
 801315a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801315e:	611a      	str	r2, [r3, #16]
 8013160:	695b      	ldr	r3, [r3, #20]
 8013162:	9301      	str	r3, [sp, #4]
 8013164:	2300      	movs	r3, #0
 8013166:	4299      	cmp	r1, r3
 8013168:	f88d 3003 	strb.w	r3, [sp, #3]
 801316c:	f10d 0203 	add.w	r2, sp, #3
 8013170:	f280 8199 	bge.w	80134a6 <ecp_mod_p384+0x5bc>
 8013174:	4249      	negs	r1, r1
 8013176:	a801      	add	r0, sp, #4
 8013178:	f7ff fe98 	bl	8012eac <sub32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 801317c:	68a3      	ldr	r3, [r4, #8]
 801317e:	f10d 0203 	add.w	r2, sp, #3
 8013182:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013184:	a801      	add	r0, sp, #4
 8013186:	f7ff fe87 	bl	8012e98 <add32>
 801318a:	68a3      	ldr	r3, [r4, #8]
 801318c:	f10d 0203 	add.w	r2, sp, #3
 8013190:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013192:	a801      	add	r0, sp, #4
 8013194:	f7ff fe80 	bl	8012e98 <add32>
 8013198:	68a3      	ldr	r3, [r4, #8]
 801319a:	f10d 0203 	add.w	r2, sp, #3
 801319e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80131a0:	a801      	add	r0, sp, #4
 80131a2:	f7ff fe79 	bl	8012e98 <add32>
 80131a6:	68a3      	ldr	r3, [r4, #8]
 80131a8:	f10d 0203 	add.w	r2, sp, #3
 80131ac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80131ae:	a801      	add	r0, sp, #4
 80131b0:	f7ff fe72 	bl	8012e98 <add32>
 80131b4:	68a3      	ldr	r3, [r4, #8]
 80131b6:	f10d 0203 	add.w	r2, sp, #3
 80131ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80131bc:	a801      	add	r0, sp, #4
 80131be:	f7ff fe6b 	bl	8012e98 <add32>
 80131c2:	68a3      	ldr	r3, [r4, #8]
 80131c4:	f10d 0203 	add.w	r2, sp, #3
 80131c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80131ca:	a801      	add	r0, sp, #4
 80131cc:	f7ff fe64 	bl	8012e98 <add32>
 80131d0:	68a3      	ldr	r3, [r4, #8]
 80131d2:	f10d 0203 	add.w	r2, sp, #3
 80131d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80131d8:	a801      	add	r0, sp, #4
 80131da:	f7ff fe5d 	bl	8012e98 <add32>
    SUB( 16 );                                              NEXT; // A5
 80131de:	68a3      	ldr	r3, [r4, #8]
 80131e0:	f10d 0203 	add.w	r2, sp, #3
 80131e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80131e6:	a801      	add	r0, sp, #4
 80131e8:	f7ff fe60 	bl	8012eac <sub32>
 80131ec:	68a3      	ldr	r3, [r4, #8]
 80131ee:	9a01      	ldr	r2, [sp, #4]
 80131f0:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80131f4:	615a      	str	r2, [r3, #20]
 80131f6:	699b      	ldr	r3, [r3, #24]
 80131f8:	9301      	str	r3, [sp, #4]
 80131fa:	2300      	movs	r3, #0
 80131fc:	4299      	cmp	r1, r3
 80131fe:	f88d 3003 	strb.w	r3, [sp, #3]
 8013202:	f10d 0203 	add.w	r2, sp, #3
 8013206:	f280 8152 	bge.w	80134ae <ecp_mod_p384+0x5c4>
 801320a:	4249      	negs	r1, r1
 801320c:	a801      	add	r0, sp, #4
 801320e:	f7ff fe4d 	bl	8012eac <sub32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 8013212:	68a3      	ldr	r3, [r4, #8]
 8013214:	f10d 0203 	add.w	r2, sp, #3
 8013218:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801321a:	a801      	add	r0, sp, #4
 801321c:	f7ff fe3c 	bl	8012e98 <add32>
 8013220:	68a3      	ldr	r3, [r4, #8]
 8013222:	f10d 0203 	add.w	r2, sp, #3
 8013226:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013228:	a801      	add	r0, sp, #4
 801322a:	f7ff fe35 	bl	8012e98 <add32>
 801322e:	68a3      	ldr	r3, [r4, #8]
 8013230:	f10d 0203 	add.w	r2, sp, #3
 8013234:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8013236:	a801      	add	r0, sp, #4
 8013238:	f7ff fe2e 	bl	8012e98 <add32>
 801323c:	68a3      	ldr	r3, [r4, #8]
 801323e:	f10d 0203 	add.w	r2, sp, #3
 8013242:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013244:	a801      	add	r0, sp, #4
 8013246:	f7ff fe27 	bl	8012e98 <add32>
 801324a:	68a3      	ldr	r3, [r4, #8]
 801324c:	f10d 0203 	add.w	r2, sp, #3
 8013250:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013252:	a801      	add	r0, sp, #4
 8013254:	f7ff fe20 	bl	8012e98 <add32>
 8013258:	68a3      	ldr	r3, [r4, #8]
 801325a:	f10d 0203 	add.w	r2, sp, #3
 801325e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013260:	a801      	add	r0, sp, #4
 8013262:	f7ff fe19 	bl	8012e98 <add32>
    SUB( 17 );                                              NEXT; // A6
 8013266:	68a3      	ldr	r3, [r4, #8]
 8013268:	f10d 0203 	add.w	r2, sp, #3
 801326c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801326e:	a801      	add	r0, sp, #4
 8013270:	f7ff fe1c 	bl	8012eac <sub32>
 8013274:	68a3      	ldr	r3, [r4, #8]
 8013276:	9a01      	ldr	r2, [sp, #4]
 8013278:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801327c:	619a      	str	r2, [r3, #24]
 801327e:	69db      	ldr	r3, [r3, #28]
 8013280:	9301      	str	r3, [sp, #4]
 8013282:	2300      	movs	r3, #0
 8013284:	4299      	cmp	r1, r3
 8013286:	f88d 3003 	strb.w	r3, [sp, #3]
 801328a:	f10d 0203 	add.w	r2, sp, #3
 801328e:	f280 8112 	bge.w	80134b6 <ecp_mod_p384+0x5cc>
 8013292:	4249      	negs	r1, r1
 8013294:	a801      	add	r0, sp, #4
 8013296:	f7ff fe09 	bl	8012eac <sub32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 801329a:	68a3      	ldr	r3, [r4, #8]
 801329c:	f10d 0203 	add.w	r2, sp, #3
 80132a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80132a2:	a801      	add	r0, sp, #4
 80132a4:	f7ff fdf8 	bl	8012e98 <add32>
 80132a8:	68a3      	ldr	r3, [r4, #8]
 80132aa:	f10d 0203 	add.w	r2, sp, #3
 80132ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80132b0:	a801      	add	r0, sp, #4
 80132b2:	f7ff fdf1 	bl	8012e98 <add32>
 80132b6:	68a3      	ldr	r3, [r4, #8]
 80132b8:	f10d 0203 	add.w	r2, sp, #3
 80132bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80132be:	a801      	add	r0, sp, #4
 80132c0:	f7ff fdea 	bl	8012e98 <add32>
 80132c4:	68a3      	ldr	r3, [r4, #8]
 80132c6:	f10d 0203 	add.w	r2, sp, #3
 80132ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80132cc:	a801      	add	r0, sp, #4
 80132ce:	f7ff fde3 	bl	8012e98 <add32>
    SUB( 18 );                                              NEXT; // A7
 80132d2:	68a3      	ldr	r3, [r4, #8]
 80132d4:	f10d 0203 	add.w	r2, sp, #3
 80132d8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80132da:	a801      	add	r0, sp, #4
 80132dc:	f7ff fde6 	bl	8012eac <sub32>
 80132e0:	68a3      	ldr	r3, [r4, #8]
 80132e2:	9a01      	ldr	r2, [sp, #4]
 80132e4:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80132e8:	61da      	str	r2, [r3, #28]
 80132ea:	6a1b      	ldr	r3, [r3, #32]
 80132ec:	9301      	str	r3, [sp, #4]
 80132ee:	2300      	movs	r3, #0
 80132f0:	4299      	cmp	r1, r3
 80132f2:	f88d 3003 	strb.w	r3, [sp, #3]
 80132f6:	f10d 0203 	add.w	r2, sp, #3
 80132fa:	f280 80e0 	bge.w	80134be <ecp_mod_p384+0x5d4>
 80132fe:	4249      	negs	r1, r1
 8013300:	a801      	add	r0, sp, #4
 8013302:	f7ff fdd3 	bl	8012eac <sub32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 8013306:	68a3      	ldr	r3, [r4, #8]
 8013308:	f10d 0203 	add.w	r2, sp, #3
 801330c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801330e:	a801      	add	r0, sp, #4
 8013310:	f7ff fdc2 	bl	8012e98 <add32>
 8013314:	68a3      	ldr	r3, [r4, #8]
 8013316:	f10d 0203 	add.w	r2, sp, #3
 801331a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801331c:	a801      	add	r0, sp, #4
 801331e:	f7ff fdbb 	bl	8012e98 <add32>
 8013322:	68a3      	ldr	r3, [r4, #8]
 8013324:	f10d 0203 	add.w	r2, sp, #3
 8013328:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801332a:	a801      	add	r0, sp, #4
 801332c:	f7ff fdb4 	bl	8012e98 <add32>
    SUB( 19 );                                              NEXT; // A8
 8013330:	68a3      	ldr	r3, [r4, #8]
 8013332:	f10d 0203 	add.w	r2, sp, #3
 8013336:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013338:	a801      	add	r0, sp, #4
 801333a:	f7ff fdb7 	bl	8012eac <sub32>
 801333e:	68a3      	ldr	r3, [r4, #8]
 8013340:	9a01      	ldr	r2, [sp, #4]
 8013342:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013346:	621a      	str	r2, [r3, #32]
 8013348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801334a:	9301      	str	r3, [sp, #4]
 801334c:	2300      	movs	r3, #0
 801334e:	4299      	cmp	r1, r3
 8013350:	f88d 3003 	strb.w	r3, [sp, #3]
 8013354:	f10d 0203 	add.w	r2, sp, #3
 8013358:	f280 80b5 	bge.w	80134c6 <ecp_mod_p384+0x5dc>
 801335c:	4249      	negs	r1, r1
 801335e:	a801      	add	r0, sp, #4
 8013360:	f7ff fda4 	bl	8012eac <sub32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 8013364:	68a3      	ldr	r3, [r4, #8]
 8013366:	f10d 0203 	add.w	r2, sp, #3
 801336a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801336c:	a801      	add	r0, sp, #4
 801336e:	f7ff fd93 	bl	8012e98 <add32>
 8013372:	68a3      	ldr	r3, [r4, #8]
 8013374:	f10d 0203 	add.w	r2, sp, #3
 8013378:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801337a:	a801      	add	r0, sp, #4
 801337c:	f7ff fd8c 	bl	8012e98 <add32>
 8013380:	68a3      	ldr	r3, [r4, #8]
 8013382:	f10d 0203 	add.w	r2, sp, #3
 8013386:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8013388:	a801      	add	r0, sp, #4
 801338a:	f7ff fd85 	bl	8012e98 <add32>
    SUB( 20 );                                              NEXT; // A9
 801338e:	68a3      	ldr	r3, [r4, #8]
 8013390:	f10d 0203 	add.w	r2, sp, #3
 8013394:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013396:	a801      	add	r0, sp, #4
 8013398:	f7ff fd88 	bl	8012eac <sub32>
 801339c:	68a3      	ldr	r3, [r4, #8]
 801339e:	9a01      	ldr	r2, [sp, #4]
 80133a0:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80133a4:	625a      	str	r2, [r3, #36]	; 0x24
 80133a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133a8:	9301      	str	r3, [sp, #4]
 80133aa:	2300      	movs	r3, #0
 80133ac:	4299      	cmp	r1, r3
 80133ae:	f88d 3003 	strb.w	r3, [sp, #3]
 80133b2:	f10d 0203 	add.w	r2, sp, #3
 80133b6:	f280 808a 	bge.w	80134ce <ecp_mod_p384+0x5e4>
 80133ba:	4249      	negs	r1, r1
 80133bc:	a801      	add	r0, sp, #4
 80133be:	f7ff fd75 	bl	8012eac <sub32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 80133c2:	68a3      	ldr	r3, [r4, #8]
 80133c4:	f10d 0203 	add.w	r2, sp, #3
 80133c8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80133ca:	a801      	add	r0, sp, #4
 80133cc:	f7ff fd64 	bl	8012e98 <add32>
 80133d0:	68a3      	ldr	r3, [r4, #8]
 80133d2:	f10d 0203 	add.w	r2, sp, #3
 80133d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80133d8:	a801      	add	r0, sp, #4
 80133da:	f7ff fd5d 	bl	8012e98 <add32>
 80133de:	68a3      	ldr	r3, [r4, #8]
 80133e0:	f10d 0203 	add.w	r2, sp, #3
 80133e4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80133e6:	a801      	add	r0, sp, #4
 80133e8:	f7ff fd56 	bl	8012e98 <add32>
    SUB( 21 );                                              NEXT; // A10
 80133ec:	68a3      	ldr	r3, [r4, #8]
 80133ee:	f10d 0203 	add.w	r2, sp, #3
 80133f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80133f4:	a801      	add	r0, sp, #4
 80133f6:	f7ff fd59 	bl	8012eac <sub32>
 80133fa:	68a3      	ldr	r3, [r4, #8]
 80133fc:	9a01      	ldr	r2, [sp, #4]
 80133fe:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013402:	629a      	str	r2, [r3, #40]	; 0x28
 8013404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013406:	9301      	str	r3, [sp, #4]
 8013408:	2300      	movs	r3, #0
 801340a:	4299      	cmp	r1, r3
 801340c:	f88d 3003 	strb.w	r3, [sp, #3]
 8013410:	f10d 0203 	add.w	r2, sp, #3
 8013414:	da5f      	bge.n	80134d6 <ecp_mod_p384+0x5ec>
 8013416:	4249      	negs	r1, r1
 8013418:	a801      	add	r0, sp, #4
 801341a:	f7ff fd47 	bl	8012eac <sub32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 801341e:	68a3      	ldr	r3, [r4, #8]
 8013420:	f10d 0203 	add.w	r2, sp, #3
 8013424:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013426:	a801      	add	r0, sp, #4
 8013428:	f7ff fd36 	bl	8012e98 <add32>
 801342c:	68a3      	ldr	r3, [r4, #8]
 801342e:	f10d 0203 	add.w	r2, sp, #3
 8013432:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013434:	a801      	add	r0, sp, #4
 8013436:	f7ff fd2f 	bl	8012e98 <add32>
 801343a:	68a3      	ldr	r3, [r4, #8]
 801343c:	f10d 0203 	add.w	r2, sp, #3
 8013440:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013442:	a801      	add	r0, sp, #4
 8013444:	f7ff fd28 	bl	8012e98 <add32>
    SUB( 22 );                                              LAST; // A11
 8013448:	68a3      	ldr	r3, [r4, #8]
 801344a:	f10d 0203 	add.w	r2, sp, #3
 801344e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013450:	a801      	add	r0, sp, #4
 8013452:	f7ff fd2b 	bl	8012eac <sub32>
 8013456:	68a2      	ldr	r2, [r4, #8]
 8013458:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801345c:	9b01      	ldr	r3, [sp, #4]
 801345e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013460:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8013464:	6313      	str	r3, [r2, #48]	; 0x30
 8013466:	6860      	ldr	r0, [r4, #4]
 8013468:	2300      	movs	r3, #0
 801346a:	9301      	str	r3, [sp, #4]
 801346c:	230c      	movs	r3, #12
 801346e:	3301      	adds	r3, #1
 8013470:	4298      	cmp	r0, r3
 8013472:	d834      	bhi.n	80134de <ecp_mod_p384+0x5f4>
 8013474:	2900      	cmp	r1, #0
 8013476:	da03      	bge.n	8013480 <ecp_mod_p384+0x596>
 8013478:	aa02      	add	r2, sp, #8
 801347a:	4620      	mov	r0, r4
 801347c:	f7ff fd21 	bl	8012ec2 <fix_negative.isra.0>

cleanup:
    return( ret );
}
 8013480:	4628      	mov	r0, r5
 8013482:	b012      	add	sp, #72	; 0x48
 8013484:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 23 );                                              NEXT; // A0
 8013486:	a801      	add	r0, sp, #4
 8013488:	f7ff fd06 	bl	8012e98 <add32>
 801348c:	e574      	b.n	8012f78 <ecp_mod_p384+0x8e>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 801348e:	a801      	add	r0, sp, #4
 8013490:	f7ff fd02 	bl	8012e98 <add32>
 8013494:	e5a6      	b.n	8012fe4 <ecp_mod_p384+0xfa>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8013496:	a801      	add	r0, sp, #4
 8013498:	f7ff fcfe 	bl	8012e98 <add32>
 801349c:	e5d1      	b.n	8013042 <ecp_mod_p384+0x158>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 801349e:	a801      	add	r0, sp, #4
 80134a0:	f7ff fcfa 	bl	8012e98 <add32>
 80134a4:	e611      	b.n	80130ca <ecp_mod_p384+0x1e0>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 80134a6:	a801      	add	r0, sp, #4
 80134a8:	f7ff fcf6 	bl	8012e98 <add32>
 80134ac:	e666      	b.n	801317c <ecp_mod_p384+0x292>
    SUB( 16 );                                              NEXT; // A5
 80134ae:	a801      	add	r0, sp, #4
 80134b0:	f7ff fcf2 	bl	8012e98 <add32>
 80134b4:	e6ad      	b.n	8013212 <ecp_mod_p384+0x328>
    SUB( 17 );                                              NEXT; // A6
 80134b6:	a801      	add	r0, sp, #4
 80134b8:	f7ff fcee 	bl	8012e98 <add32>
 80134bc:	e6ed      	b.n	801329a <ecp_mod_p384+0x3b0>
    SUB( 18 );                                              NEXT; // A7
 80134be:	a801      	add	r0, sp, #4
 80134c0:	f7ff fcea 	bl	8012e98 <add32>
 80134c4:	e71f      	b.n	8013306 <ecp_mod_p384+0x41c>
    SUB( 19 );                                              NEXT; // A8
 80134c6:	a801      	add	r0, sp, #4
 80134c8:	f7ff fce6 	bl	8012e98 <add32>
 80134cc:	e74a      	b.n	8013364 <ecp_mod_p384+0x47a>
    SUB( 20 );                                              NEXT; // A9
 80134ce:	a801      	add	r0, sp, #4
 80134d0:	f7ff fce2 	bl	8012e98 <add32>
 80134d4:	e775      	b.n	80133c2 <ecp_mod_p384+0x4d8>
    SUB( 21 );                                              NEXT; // A10
 80134d6:	a801      	add	r0, sp, #4
 80134d8:	f7ff fcde 	bl	8012e98 <add32>
 80134dc:	e79f      	b.n	801341e <ecp_mod_p384+0x534>
    SUB( 22 );                                              LAST; // A11
 80134de:	9e01      	ldr	r6, [sp, #4]
 80134e0:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 80134e4:	e7c3      	b.n	801346e <ecp_mod_p384+0x584>

080134e6 <ecp_mod_p256>:
{
 80134e6:	b570      	push	{r4, r5, r6, lr}
    INIT( 256 );
 80134e8:	2309      	movs	r3, #9
{
 80134ea:	b08e      	sub	sp, #56	; 0x38
    INIT( 256 );
 80134ec:	2201      	movs	r2, #1
 80134ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80134f2:	2100      	movs	r1, #0
{
 80134f4:	4604      	mov	r4, r0
    INIT( 256 );
 80134f6:	2224      	movs	r2, #36	; 0x24
 80134f8:	a805      	add	r0, sp, #20
 80134fa:	f88d 1003 	strb.w	r1, [sp, #3]
 80134fe:	9004      	str	r0, [sp, #16]
 8013500:	f00e fe7a 	bl	80221f8 <memset>
 8013504:	2110      	movs	r1, #16
 8013506:	4620      	mov	r0, r4
 8013508:	f7fb f930 	bl	800e76c <mbedtls_mpi_grow>
 801350c:	4605      	mov	r5, r0
 801350e:	2800      	cmp	r0, #0
 8013510:	f040 821b 	bne.w	801394a <ecp_mod_p256+0x464>
 8013514:	68a3      	ldr	r3, [r4, #8]
 8013516:	681a      	ldr	r2, [r3, #0]
    ADD(  8 ); ADD(  9 );
 8013518:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
 801351a:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
 801351c:	a801      	add	r0, sp, #4
 801351e:	f10d 0203 	add.w	r2, sp, #3
 8013522:	f7ff fcb9 	bl	8012e98 <add32>
 8013526:	68a3      	ldr	r3, [r4, #8]
 8013528:	f10d 0203 	add.w	r2, sp, #3
 801352c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801352e:	a801      	add	r0, sp, #4
 8013530:	f7ff fcb2 	bl	8012e98 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013534:	68a3      	ldr	r3, [r4, #8]
 8013536:	f10d 0203 	add.w	r2, sp, #3
 801353a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801353c:	a801      	add	r0, sp, #4
 801353e:	f7ff fcb5 	bl	8012eac <sub32>
 8013542:	68a3      	ldr	r3, [r4, #8]
 8013544:	f10d 0203 	add.w	r2, sp, #3
 8013548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801354a:	a801      	add	r0, sp, #4
 801354c:	f7ff fcae 	bl	8012eac <sub32>
 8013550:	68a3      	ldr	r3, [r4, #8]
 8013552:	f10d 0203 	add.w	r2, sp, #3
 8013556:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013558:	a801      	add	r0, sp, #4
 801355a:	f7ff fca7 	bl	8012eac <sub32>
 801355e:	68a3      	ldr	r3, [r4, #8]
 8013560:	f10d 0203 	add.w	r2, sp, #3
 8013564:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013566:	a801      	add	r0, sp, #4
 8013568:	f7ff fca0 	bl	8012eac <sub32>
 801356c:	68a3      	ldr	r3, [r4, #8]
 801356e:	9a01      	ldr	r2, [sp, #4]
 8013570:	601a      	str	r2, [r3, #0]
 8013572:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	2900      	cmp	r1, #0
 801357c:	f88d 5003 	strb.w	r5, [sp, #3]
 8013580:	f10d 0203 	add.w	r2, sp, #3
 8013584:	f280 81e4 	bge.w	8013950 <ecp_mod_p256+0x46a>
 8013588:	4249      	negs	r1, r1
 801358a:	a801      	add	r0, sp, #4
 801358c:	f7ff fc8e 	bl	8012eac <sub32>
    ADD(  9 ); ADD( 10 );
 8013590:	68a3      	ldr	r3, [r4, #8]
 8013592:	f10d 0203 	add.w	r2, sp, #3
 8013596:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013598:	a801      	add	r0, sp, #4
 801359a:	f7ff fc7d 	bl	8012e98 <add32>
 801359e:	68a3      	ldr	r3, [r4, #8]
 80135a0:	f10d 0203 	add.w	r2, sp, #3
 80135a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80135a6:	a801      	add	r0, sp, #4
 80135a8:	f7ff fc76 	bl	8012e98 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 80135ac:	68a3      	ldr	r3, [r4, #8]
 80135ae:	f10d 0203 	add.w	r2, sp, #3
 80135b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80135b4:	a801      	add	r0, sp, #4
 80135b6:	f7ff fc79 	bl	8012eac <sub32>
 80135ba:	68a3      	ldr	r3, [r4, #8]
 80135bc:	f10d 0203 	add.w	r2, sp, #3
 80135c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80135c2:	a801      	add	r0, sp, #4
 80135c4:	f7ff fc72 	bl	8012eac <sub32>
 80135c8:	68a3      	ldr	r3, [r4, #8]
 80135ca:	f10d 0203 	add.w	r2, sp, #3
 80135ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80135d0:	a801      	add	r0, sp, #4
 80135d2:	f7ff fc6b 	bl	8012eac <sub32>
 80135d6:	68a3      	ldr	r3, [r4, #8]
 80135d8:	f10d 0203 	add.w	r2, sp, #3
 80135dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80135de:	a801      	add	r0, sp, #4
 80135e0:	f7ff fc64 	bl	8012eac <sub32>
 80135e4:	68a3      	ldr	r3, [r4, #8]
 80135e6:	9a01      	ldr	r2, [sp, #4]
 80135e8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80135ec:	605a      	str	r2, [r3, #4]
 80135ee:	689b      	ldr	r3, [r3, #8]
 80135f0:	9301      	str	r3, [sp, #4]
 80135f2:	2300      	movs	r3, #0
 80135f4:	4299      	cmp	r1, r3
 80135f6:	f88d 3003 	strb.w	r3, [sp, #3]
 80135fa:	f10d 0203 	add.w	r2, sp, #3
 80135fe:	f280 81ab 	bge.w	8013958 <ecp_mod_p256+0x472>
 8013602:	4249      	negs	r1, r1
 8013604:	a801      	add	r0, sp, #4
 8013606:	f7ff fc51 	bl	8012eac <sub32>
    ADD( 10 ); ADD( 11 );
 801360a:	68a3      	ldr	r3, [r4, #8]
 801360c:	f10d 0203 	add.w	r2, sp, #3
 8013610:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013612:	a801      	add	r0, sp, #4
 8013614:	f7ff fc40 	bl	8012e98 <add32>
 8013618:	68a3      	ldr	r3, [r4, #8]
 801361a:	f10d 0203 	add.w	r2, sp, #3
 801361e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013620:	a801      	add	r0, sp, #4
 8013622:	f7ff fc39 	bl	8012e98 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8013626:	68a3      	ldr	r3, [r4, #8]
 8013628:	f10d 0203 	add.w	r2, sp, #3
 801362c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801362e:	a801      	add	r0, sp, #4
 8013630:	f7ff fc3c 	bl	8012eac <sub32>
 8013634:	68a3      	ldr	r3, [r4, #8]
 8013636:	f10d 0203 	add.w	r2, sp, #3
 801363a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801363c:	a801      	add	r0, sp, #4
 801363e:	f7ff fc35 	bl	8012eac <sub32>
 8013642:	68a3      	ldr	r3, [r4, #8]
 8013644:	f10d 0203 	add.w	r2, sp, #3
 8013648:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801364a:	a801      	add	r0, sp, #4
 801364c:	f7ff fc2e 	bl	8012eac <sub32>
 8013650:	68a3      	ldr	r3, [r4, #8]
 8013652:	9a01      	ldr	r2, [sp, #4]
 8013654:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013658:	609a      	str	r2, [r3, #8]
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	9301      	str	r3, [sp, #4]
 801365e:	2300      	movs	r3, #0
 8013660:	4299      	cmp	r1, r3
 8013662:	f88d 3003 	strb.w	r3, [sp, #3]
 8013666:	f10d 0203 	add.w	r2, sp, #3
 801366a:	f280 8179 	bge.w	8013960 <ecp_mod_p256+0x47a>
 801366e:	4249      	negs	r1, r1
 8013670:	a801      	add	r0, sp, #4
 8013672:	f7ff fc1b 	bl	8012eac <sub32>
    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 8013676:	68a3      	ldr	r3, [r4, #8]
 8013678:	f10d 0203 	add.w	r2, sp, #3
 801367c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801367e:	a801      	add	r0, sp, #4
 8013680:	f7ff fc0a 	bl	8012e98 <add32>
 8013684:	68a3      	ldr	r3, [r4, #8]
 8013686:	f10d 0203 	add.w	r2, sp, #3
 801368a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801368c:	a801      	add	r0, sp, #4
 801368e:	f7ff fc03 	bl	8012e98 <add32>
 8013692:	68a3      	ldr	r3, [r4, #8]
 8013694:	f10d 0203 	add.w	r2, sp, #3
 8013698:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801369a:	a801      	add	r0, sp, #4
 801369c:	f7ff fbfc 	bl	8012e98 <add32>
 80136a0:	68a3      	ldr	r3, [r4, #8]
 80136a2:	f10d 0203 	add.w	r2, sp, #3
 80136a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80136a8:	a801      	add	r0, sp, #4
 80136aa:	f7ff fbf5 	bl	8012e98 <add32>
 80136ae:	68a3      	ldr	r3, [r4, #8]
 80136b0:	f10d 0203 	add.w	r2, sp, #3
 80136b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80136b6:	a801      	add	r0, sp, #4
 80136b8:	f7ff fbee 	bl	8012e98 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80136bc:	68a3      	ldr	r3, [r4, #8]
 80136be:	f10d 0203 	add.w	r2, sp, #3
 80136c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80136c4:	a801      	add	r0, sp, #4
 80136c6:	f7ff fbf1 	bl	8012eac <sub32>
 80136ca:	68a3      	ldr	r3, [r4, #8]
 80136cc:	f10d 0203 	add.w	r2, sp, #3
 80136d0:	6a19      	ldr	r1, [r3, #32]
 80136d2:	a801      	add	r0, sp, #4
 80136d4:	f7ff fbea 	bl	8012eac <sub32>
 80136d8:	68a3      	ldr	r3, [r4, #8]
 80136da:	f10d 0203 	add.w	r2, sp, #3
 80136de:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80136e0:	a801      	add	r0, sp, #4
 80136e2:	f7ff fbe3 	bl	8012eac <sub32>
 80136e6:	68a3      	ldr	r3, [r4, #8]
 80136e8:	9a01      	ldr	r2, [sp, #4]
 80136ea:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80136ee:	60da      	str	r2, [r3, #12]
 80136f0:	691b      	ldr	r3, [r3, #16]
 80136f2:	9301      	str	r3, [sp, #4]
 80136f4:	2300      	movs	r3, #0
 80136f6:	4299      	cmp	r1, r3
 80136f8:	f88d 3003 	strb.w	r3, [sp, #3]
 80136fc:	f10d 0203 	add.w	r2, sp, #3
 8013700:	f280 8132 	bge.w	8013968 <ecp_mod_p256+0x482>
 8013704:	4249      	negs	r1, r1
 8013706:	a801      	add	r0, sp, #4
 8013708:	f7ff fbd0 	bl	8012eac <sub32>
    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 801370c:	68a3      	ldr	r3, [r4, #8]
 801370e:	f10d 0203 	add.w	r2, sp, #3
 8013712:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013714:	a801      	add	r0, sp, #4
 8013716:	f7ff fbbf 	bl	8012e98 <add32>
 801371a:	68a3      	ldr	r3, [r4, #8]
 801371c:	f10d 0203 	add.w	r2, sp, #3
 8013720:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013722:	a801      	add	r0, sp, #4
 8013724:	f7ff fbb8 	bl	8012e98 <add32>
 8013728:	68a3      	ldr	r3, [r4, #8]
 801372a:	f10d 0203 	add.w	r2, sp, #3
 801372e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013730:	a801      	add	r0, sp, #4
 8013732:	f7ff fbb1 	bl	8012e98 <add32>
 8013736:	68a3      	ldr	r3, [r4, #8]
 8013738:	f10d 0203 	add.w	r2, sp, #3
 801373c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801373e:	a801      	add	r0, sp, #4
 8013740:	f7ff fbaa 	bl	8012e98 <add32>
 8013744:	68a3      	ldr	r3, [r4, #8]
 8013746:	f10d 0203 	add.w	r2, sp, #3
 801374a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801374c:	a801      	add	r0, sp, #4
 801374e:	f7ff fba3 	bl	8012e98 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013752:	68a3      	ldr	r3, [r4, #8]
 8013754:	f10d 0203 	add.w	r2, sp, #3
 8013758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801375a:	a801      	add	r0, sp, #4
 801375c:	f7ff fba6 	bl	8012eac <sub32>
 8013760:	68a3      	ldr	r3, [r4, #8]
 8013762:	f10d 0203 	add.w	r2, sp, #3
 8013766:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013768:	a801      	add	r0, sp, #4
 801376a:	f7ff fb9f 	bl	8012eac <sub32>
 801376e:	68a3      	ldr	r3, [r4, #8]
 8013770:	9a01      	ldr	r2, [sp, #4]
 8013772:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013776:	611a      	str	r2, [r3, #16]
 8013778:	695b      	ldr	r3, [r3, #20]
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	2300      	movs	r3, #0
 801377e:	4299      	cmp	r1, r3
 8013780:	f88d 3003 	strb.w	r3, [sp, #3]
 8013784:	f10d 0203 	add.w	r2, sp, #3
 8013788:	f280 80f2 	bge.w	8013970 <ecp_mod_p256+0x48a>
 801378c:	4249      	negs	r1, r1
 801378e:	a801      	add	r0, sp, #4
 8013790:	f7ff fb8c 	bl	8012eac <sub32>
    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 8013794:	68a3      	ldr	r3, [r4, #8]
 8013796:	f10d 0203 	add.w	r2, sp, #3
 801379a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801379c:	a801      	add	r0, sp, #4
 801379e:	f7ff fb7b 	bl	8012e98 <add32>
 80137a2:	68a3      	ldr	r3, [r4, #8]
 80137a4:	f10d 0203 	add.w	r2, sp, #3
 80137a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80137aa:	a801      	add	r0, sp, #4
 80137ac:	f7ff fb74 	bl	8012e98 <add32>
 80137b0:	68a3      	ldr	r3, [r4, #8]
 80137b2:	f10d 0203 	add.w	r2, sp, #3
 80137b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80137b8:	a801      	add	r0, sp, #4
 80137ba:	f7ff fb6d 	bl	8012e98 <add32>
 80137be:	68a3      	ldr	r3, [r4, #8]
 80137c0:	f10d 0203 	add.w	r2, sp, #3
 80137c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80137c6:	a801      	add	r0, sp, #4
 80137c8:	f7ff fb66 	bl	8012e98 <add32>
 80137cc:	68a3      	ldr	r3, [r4, #8]
 80137ce:	f10d 0203 	add.w	r2, sp, #3
 80137d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80137d4:	a801      	add	r0, sp, #4
 80137d6:	f7ff fb5f 	bl	8012e98 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80137da:	68a3      	ldr	r3, [r4, #8]
 80137dc:	f10d 0203 	add.w	r2, sp, #3
 80137e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80137e2:	a801      	add	r0, sp, #4
 80137e4:	f7ff fb62 	bl	8012eac <sub32>
 80137e8:	68a3      	ldr	r3, [r4, #8]
 80137ea:	f10d 0203 	add.w	r2, sp, #3
 80137ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80137f0:	a801      	add	r0, sp, #4
 80137f2:	f7ff fb5b 	bl	8012eac <sub32>
 80137f6:	68a3      	ldr	r3, [r4, #8]
 80137f8:	9a01      	ldr	r2, [sp, #4]
 80137fa:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80137fe:	615a      	str	r2, [r3, #20]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	9301      	str	r3, [sp, #4]
 8013804:	2300      	movs	r3, #0
 8013806:	4299      	cmp	r1, r3
 8013808:	f88d 3003 	strb.w	r3, [sp, #3]
 801380c:	f10d 0203 	add.w	r2, sp, #3
 8013810:	f280 80b2 	bge.w	8013978 <ecp_mod_p256+0x492>
 8013814:	4249      	negs	r1, r1
 8013816:	a801      	add	r0, sp, #4
 8013818:	f7ff fb48 	bl	8012eac <sub32>
    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 801381c:	68a3      	ldr	r3, [r4, #8]
 801381e:	f10d 0203 	add.w	r2, sp, #3
 8013822:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013824:	a801      	add	r0, sp, #4
 8013826:	f7ff fb37 	bl	8012e98 <add32>
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	f10d 0203 	add.w	r2, sp, #3
 8013830:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013832:	a801      	add	r0, sp, #4
 8013834:	f7ff fb30 	bl	8012e98 <add32>
 8013838:	68a3      	ldr	r3, [r4, #8]
 801383a:	f10d 0203 	add.w	r2, sp, #3
 801383e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013840:	a801      	add	r0, sp, #4
 8013842:	f7ff fb29 	bl	8012e98 <add32>
 8013846:	68a3      	ldr	r3, [r4, #8]
 8013848:	f10d 0203 	add.w	r2, sp, #3
 801384c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801384e:	a801      	add	r0, sp, #4
 8013850:	f7ff fb22 	bl	8012e98 <add32>
 8013854:	68a3      	ldr	r3, [r4, #8]
 8013856:	f10d 0203 	add.w	r2, sp, #3
 801385a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801385c:	a801      	add	r0, sp, #4
 801385e:	f7ff fb1b 	bl	8012e98 <add32>
 8013862:	68a3      	ldr	r3, [r4, #8]
 8013864:	f10d 0203 	add.w	r2, sp, #3
 8013868:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801386a:	a801      	add	r0, sp, #4
 801386c:	f7ff fb14 	bl	8012e98 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8013870:	68a3      	ldr	r3, [r4, #8]
 8013872:	f10d 0203 	add.w	r2, sp, #3
 8013876:	6a19      	ldr	r1, [r3, #32]
 8013878:	a801      	add	r0, sp, #4
 801387a:	f7ff fb17 	bl	8012eac <sub32>
 801387e:	68a3      	ldr	r3, [r4, #8]
 8013880:	f10d 0203 	add.w	r2, sp, #3
 8013884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013886:	a801      	add	r0, sp, #4
 8013888:	f7ff fb10 	bl	8012eac <sub32>
 801388c:	68a3      	ldr	r3, [r4, #8]
 801388e:	9a01      	ldr	r2, [sp, #4]
 8013890:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013894:	619a      	str	r2, [r3, #24]
 8013896:	69db      	ldr	r3, [r3, #28]
 8013898:	9301      	str	r3, [sp, #4]
 801389a:	2300      	movs	r3, #0
 801389c:	4299      	cmp	r1, r3
 801389e:	f88d 3003 	strb.w	r3, [sp, #3]
 80138a2:	f10d 0203 	add.w	r2, sp, #3
 80138a6:	da6b      	bge.n	8013980 <ecp_mod_p256+0x49a>
 80138a8:	4249      	negs	r1, r1
 80138aa:	a801      	add	r0, sp, #4
 80138ac:	f7ff fafe 	bl	8012eac <sub32>
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80138b0:	68a3      	ldr	r3, [r4, #8]
 80138b2:	f10d 0203 	add.w	r2, sp, #3
 80138b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80138b8:	a801      	add	r0, sp, #4
 80138ba:	f7ff faed 	bl	8012e98 <add32>
 80138be:	68a3      	ldr	r3, [r4, #8]
 80138c0:	f10d 0203 	add.w	r2, sp, #3
 80138c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80138c6:	a801      	add	r0, sp, #4
 80138c8:	f7ff fae6 	bl	8012e98 <add32>
 80138cc:	68a3      	ldr	r3, [r4, #8]
 80138ce:	f10d 0203 	add.w	r2, sp, #3
 80138d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80138d4:	a801      	add	r0, sp, #4
 80138d6:	f7ff fadf 	bl	8012e98 <add32>
 80138da:	68a3      	ldr	r3, [r4, #8]
 80138dc:	f10d 0203 	add.w	r2, sp, #3
 80138e0:	6a19      	ldr	r1, [r3, #32]
 80138e2:	a801      	add	r0, sp, #4
 80138e4:	f7ff fad8 	bl	8012e98 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 80138e8:	68a3      	ldr	r3, [r4, #8]
 80138ea:	f10d 0203 	add.w	r2, sp, #3
 80138ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80138f0:	a801      	add	r0, sp, #4
 80138f2:	f7ff fadb 	bl	8012eac <sub32>
 80138f6:	68a3      	ldr	r3, [r4, #8]
 80138f8:	f10d 0203 	add.w	r2, sp, #3
 80138fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80138fe:	a801      	add	r0, sp, #4
 8013900:	f7ff fad4 	bl	8012eac <sub32>
 8013904:	68a3      	ldr	r3, [r4, #8]
 8013906:	f10d 0203 	add.w	r2, sp, #3
 801390a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801390c:	a801      	add	r0, sp, #4
 801390e:	f7ff facd 	bl	8012eac <sub32>
 8013912:	68a3      	ldr	r3, [r4, #8]
 8013914:	f10d 0203 	add.w	r2, sp, #3
 8013918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801391a:	a801      	add	r0, sp, #4
 801391c:	f7ff fac6 	bl	8012eac <sub32>
 8013920:	68a2      	ldr	r2, [r4, #8]
 8013922:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013926:	9b01      	ldr	r3, [sp, #4]
 8013928:	61d3      	str	r3, [r2, #28]
 801392a:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 801392e:	6213      	str	r3, [r2, #32]
 8013930:	6860      	ldr	r0, [r4, #4]
 8013932:	2300      	movs	r3, #0
 8013934:	9301      	str	r3, [sp, #4]
 8013936:	2308      	movs	r3, #8
 8013938:	3301      	adds	r3, #1
 801393a:	4298      	cmp	r0, r3
 801393c:	d824      	bhi.n	8013988 <ecp_mod_p256+0x4a2>
 801393e:	2900      	cmp	r1, #0
 8013940:	da03      	bge.n	801394a <ecp_mod_p256+0x464>
 8013942:	aa02      	add	r2, sp, #8
 8013944:	4620      	mov	r0, r4
 8013946:	f7ff fabc 	bl	8012ec2 <fix_negative.isra.0>
}
 801394a:	4628      	mov	r0, r5
 801394c:	b00e      	add	sp, #56	; 0x38
 801394e:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013950:	a801      	add	r0, sp, #4
 8013952:	f7ff faa1 	bl	8012e98 <add32>
 8013956:	e61b      	b.n	8013590 <ecp_mod_p256+0xaa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8013958:	a801      	add	r0, sp, #4
 801395a:	f7ff fa9d 	bl	8012e98 <add32>
 801395e:	e654      	b.n	801360a <ecp_mod_p256+0x124>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8013960:	a801      	add	r0, sp, #4
 8013962:	f7ff fa99 	bl	8012e98 <add32>
 8013966:	e686      	b.n	8013676 <ecp_mod_p256+0x190>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 8013968:	a801      	add	r0, sp, #4
 801396a:	f7ff fa95 	bl	8012e98 <add32>
 801396e:	e6cd      	b.n	801370c <ecp_mod_p256+0x226>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013970:	a801      	add	r0, sp, #4
 8013972:	f7ff fa91 	bl	8012e98 <add32>
 8013976:	e70d      	b.n	8013794 <ecp_mod_p256+0x2ae>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8013978:	a801      	add	r0, sp, #4
 801397a:	f7ff fa8d 	bl	8012e98 <add32>
 801397e:	e74d      	b.n	801381c <ecp_mod_p256+0x336>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8013980:	a801      	add	r0, sp, #4
 8013982:	f7ff fa89 	bl	8012e98 <add32>
 8013986:	e793      	b.n	80138b0 <ecp_mod_p256+0x3ca>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8013988:	9e01      	ldr	r6, [sp, #4]
 801398a:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 801398e:	e7d3      	b.n	8013938 <ecp_mod_p256+0x452>

08013990 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 8013990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( N->n < p_limbs )
 8013994:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013998:	f1b9 0f07 	cmp.w	r9, #7
{
 801399c:	b093      	sub	sp, #76	; 0x4c
 801399e:	4604      	mov	r4, r0
    if( N->n < p_limbs )
 80139a0:	d966      	bls.n	8013a70 <ecp_mod_p256k1+0xe0>
    R.s = 1;
 80139a2:	2301      	movs	r3, #1
    R.p = Rp;
 80139a4:	4a33      	ldr	r2, [pc, #204]	; (8013a74 <ecp_mod_p256k1+0xe4>)
    R.s = 1;
 80139a6:	9304      	str	r3, [sp, #16]
    M.s = 1;
 80139a8:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( p_limbs - adjust );
 80139aa:	f1a9 0308 	sub.w	r3, r9, #8
    if( M.n > p_limbs + adjust )
 80139ae:	2b08      	cmp	r3, #8
    M.p = Mp;
 80139b0:	ae07      	add	r6, sp, #28
    R.p = Rp;
 80139b2:	9206      	str	r2, [sp, #24]
    R.n = P_KOBLITZ_R;
 80139b4:	f04f 0202 	mov.w	r2, #2
        M.n = p_limbs + adjust;
 80139b8:	bf88      	it	hi
 80139ba:	2308      	movhi	r3, #8
    R.n = P_KOBLITZ_R;
 80139bc:	9205      	str	r2, [sp, #20]
    memset( Mp, 0, sizeof Mp );
 80139be:	2100      	movs	r1, #0
 80139c0:	222c      	movs	r2, #44	; 0x2c
 80139c2:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 80139c4:	9302      	str	r3, [sp, #8]
    M.p = Mp;
 80139c6:	9603      	str	r6, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 80139c8:	f00e fc16 	bl	80221f8 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 80139cc:	68a7      	ldr	r7, [r4, #8]
 80139ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80139d2:	f107 0520 	add.w	r5, r7, #32
 80139d6:	4629      	mov	r1, r5
 80139d8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80139dc:	4630      	mov	r0, r6
 80139de:	f00e fbe3 	bl	80221a8 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 80139e2:	f108 0302 	add.w	r3, r8, #2
 80139e6:	9302      	str	r3, [sp, #8]
    if( mask != 0 )
 80139e8:	4629      	mov	r1, r5
 80139ea:	eb07 0789 	add.w	r7, r7, r9, lsl #2
        N->p[i] = 0;
 80139ee:	2300      	movs	r3, #0
    for( i = p_limbs; i < N->n; i++ )
 80139f0:	42b9      	cmp	r1, r7
 80139f2:	d136      	bne.n	8013a62 <ecp_mod_p256k1+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 80139f4:	a901      	add	r1, sp, #4
 80139f6:	aa04      	add	r2, sp, #16
 80139f8:	4608      	mov	r0, r1
 80139fa:	f7fb faa8 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80139fe:	bb68      	cbnz	r0, 8013a5c <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013a00:	aa01      	add	r2, sp, #4
 8013a02:	4621      	mov	r1, r4
 8013a04:	4620      	mov	r0, r4
 8013a06:	f7fb f9b1 	bl	800ed6c <mbedtls_mpi_add_abs>
 8013a0a:	bb38      	cbnz	r0, 8013a5c <ecp_mod_p256k1+0xcc>
    M.n = N->n - ( p_limbs - adjust );
 8013a0c:	6865      	ldr	r5, [r4, #4]
 8013a0e:	f1a5 0308 	sub.w	r3, r5, #8
    if( M.n > p_limbs + adjust )
 8013a12:	2b08      	cmp	r3, #8
        M.n = p_limbs + adjust;
 8013a14:	bf88      	it	hi
 8013a16:	2308      	movhi	r3, #8
    memset( Mp, 0, sizeof Mp );
 8013a18:	222c      	movs	r2, #44	; 0x2c
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 8013a1e:	9302      	str	r3, [sp, #8]
    memset( Mp, 0, sizeof Mp );
 8013a20:	f00e fbea 	bl	80221f8 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013a24:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013a28:	68a7      	ldr	r7, [r4, #8]
 8013a2a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013a2e:	f107 0120 	add.w	r1, r7, #32
 8013a32:	4630      	mov	r0, r6
 8013a34:	f00e fbb8 	bl	80221a8 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 8013a38:	9b05      	ldr	r3, [sp, #20]
 8013a3a:	4443      	add	r3, r8
 8013a3c:	9302      	str	r3, [sp, #8]
        N->p[i] = 0;
 8013a3e:	2200      	movs	r2, #0
    M.n += R.n; /* Make room for multiplication by R */
 8013a40:	2308      	movs	r3, #8
    for( i = p_limbs; i < N->n; i++ )
 8013a42:	429d      	cmp	r5, r3
 8013a44:	d810      	bhi.n	8013a68 <ecp_mod_p256k1+0xd8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013a46:	a901      	add	r1, sp, #4
 8013a48:	aa04      	add	r2, sp, #16
 8013a4a:	4608      	mov	r0, r1
 8013a4c:	f7fb fa7f 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8013a50:	b920      	cbnz	r0, 8013a5c <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013a52:	aa01      	add	r2, sp, #4
 8013a54:	4621      	mov	r1, r4
 8013a56:	4620      	mov	r0, r4
 8013a58:	f7fb f988 	bl	800ed6c <mbedtls_mpi_add_abs>
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
}
 8013a5c:	b013      	add	sp, #76	; 0x4c
 8013a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        N->p[i] = 0;
 8013a62:	f841 3b04 	str.w	r3, [r1], #4
    for( i = p_limbs; i < N->n; i++ )
 8013a66:	e7c3      	b.n	80139f0 <ecp_mod_p256k1+0x60>
        N->p[i] = 0;
 8013a68:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    for( i = p_limbs; i < N->n; i++ )
 8013a6c:	3301      	adds	r3, #1
 8013a6e:	e7e8      	b.n	8013a42 <ecp_mod_p256k1+0xb2>
        return( 0 );
 8013a70:	2000      	movs	r0, #0
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013a72:	e7f3      	b.n	8013a5c <ecp_mod_p256k1+0xcc>
 8013a74:	2000052c 	.word	0x2000052c

08013a78 <mbedtls_ecp_group_load>:
{
 8013a78:	b538      	push	{r3, r4, r5, lr}
 8013a7a:	4604      	mov	r4, r0
 8013a7c:	460d      	mov	r5, r1
    mbedtls_ecp_group_free( grp );
 8013a7e:	f7fe f9d3 	bl	8011e28 <mbedtls_ecp_group_free>
    grp->id = id;
 8013a82:	7025      	strb	r5, [r4, #0]
    switch( id )
 8013a84:	3d03      	subs	r5, #3
 8013a86:	2d09      	cmp	r5, #9
 8013a88:	f200 80a9 	bhi.w	8013bde <mbedtls_ecp_group_load+0x166>
 8013a8c:	e8df f005 	tbb	[pc, r5]
 8013a90:	6ba73005 	.word	0x6ba73005
 8013a94:	a7a7a789 	.word	0xa7a7a789
 8013a98:	4ba7      	.short	0x4ba7
            NIST_MODP( p256 );
 8013a9a:	4b53      	ldr	r3, [pc, #332]	; (8013be8 <mbedtls_ecp_group_load+0x170>)
 8013a9c:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013a9e:	4b53      	ldr	r3, [pc, #332]	; (8013bec <mbedtls_ecp_group_load+0x174>)
 8013aa0:	60e3      	str	r3, [r4, #12]
 8013aa2:	f103 0120 	add.w	r1, r3, #32
 8013aa6:	6261      	str	r1, [r4, #36]	; 0x24
 8013aa8:	f103 0140 	add.w	r1, r3, #64	; 0x40
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013aac:	2501      	movs	r5, #1
 8013aae:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013ab0:	6561      	str	r1, [r4, #84]	; 0x54
 8013ab2:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013ab6:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013aba:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013abe:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013ac2:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013ac6:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013aca:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013acc:	3380      	adds	r3, #128	; 0x80
    X->s = 1;
 8013ace:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 8013ad2:	4b47      	ldr	r3, [pc, #284]	; (8013bf0 <mbedtls_ecp_group_load+0x178>)
 8013ad4:	64a3      	str	r3, [r4, #72]	; 0x48
    X->n = 1;
 8013ad6:	6465      	str	r5, [r4, #68]	; 0x44
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8013ad8:	1d20      	adds	r0, r4, #4
 8013ada:	f7fa ff54 	bl	800e986 <mbedtls_mpi_bitlen>
 8013ade:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8013ae0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013ae4:	f7fa ff4f 	bl	800e986 <mbedtls_mpi_bitlen>
    grp->h = 1;
 8013ae8:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8013aec:	2000      	movs	r0, #0
}
 8013aee:	bd38      	pop	{r3, r4, r5, pc}
            NIST_MODP( p384 );
 8013af0:	4b40      	ldr	r3, [pc, #256]	; (8013bf4 <mbedtls_ecp_group_load+0x17c>)
 8013af2:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013af4:	4b40      	ldr	r3, [pc, #256]	; (8013bf8 <mbedtls_ecp_group_load+0x180>)
 8013af6:	60e3      	str	r3, [r4, #12]
 8013af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013afc:	6261      	str	r1, [r4, #36]	; 0x24
 8013afe:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b02:	2501      	movs	r5, #1
 8013b04:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 8013b06:	6561      	str	r1, [r4, #84]	; 0x54
 8013b08:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b0c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013b10:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013b14:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013b18:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013b1c:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b20:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013b22:	33c0      	adds	r3, #192	; 0xc0
 8013b24:	e7d3      	b.n	8013ace <mbedtls_ecp_group_load+0x56>
            grp->modp = ecp_mod_p256k1;
 8013b26:	4b35      	ldr	r3, [pc, #212]	; (8013bfc <mbedtls_ecp_group_load+0x184>)
 8013b28:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013b2a:	4b35      	ldr	r3, [pc, #212]	; (8013c00 <mbedtls_ecp_group_load+0x188>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b2c:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013b2e:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013b32:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013b36:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8013b3a:	6261      	str	r1, [r4, #36]	; 0x24
 8013b3c:	f103 0128 	add.w	r1, r3, #40	; 0x28
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b40:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013b42:	6561      	str	r1, [r4, #84]	; 0x54
 8013b44:	f103 0148 	add.w	r1, r3, #72	; 0x48
    X->s = 1;
 8013b48:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b4c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013b50:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013b54:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013b58:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b5c:	6165      	str	r5, [r4, #20]
 8013b5e:	6225      	str	r5, [r4, #32]
 8013b60:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013b62:	3368      	adds	r3, #104	; 0x68
 8013b64:	e7b3      	b.n	8013ace <mbedtls_ecp_group_load+0x56>
 8013b66:	4b27      	ldr	r3, [pc, #156]	; (8013c04 <mbedtls_ecp_group_load+0x18c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b68:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013b6a:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013b6e:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013b72:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8013b76:	6261      	str	r1, [r4, #36]	; 0x24
 8013b78:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b7c:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013b7e:	6561      	str	r1, [r4, #84]	; 0x54
 8013b80:	f103 0180 	add.w	r1, r3, #128	; 0x80
    X->s = 1;
 8013b84:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b88:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013b8c:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013b90:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013b94:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013b98:	6162      	str	r2, [r4, #20]
 8013b9a:	6222      	str	r2, [r4, #32]
 8013b9c:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013b9e:	33a0      	adds	r3, #160	; 0xa0
 8013ba0:	e795      	b.n	8013ace <mbedtls_ecp_group_load+0x56>
 8013ba2:	4b19      	ldr	r3, [pc, #100]	; (8013c08 <mbedtls_ecp_group_load+0x190>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013ba4:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013ba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    X->s = 1;
 8013baa:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013bae:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8013bb2:	6261      	str	r1, [r4, #36]	; 0x24
 8013bb4:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013bb8:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 8013bba:	6561      	str	r1, [r4, #84]	; 0x54
 8013bbc:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    X->s = 1;
 8013bc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013bc4:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013bc8:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013bcc:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013bd0:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013bd4:	6162      	str	r2, [r4, #20]
 8013bd6:	6222      	str	r2, [r4, #32]
 8013bd8:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013bda:	33f0      	adds	r3, #240	; 0xf0
 8013bdc:	e777      	b.n	8013ace <mbedtls_ecp_group_load+0x56>
            mbedtls_ecp_group_free( grp );
 8013bde:	4620      	mov	r0, r4
 8013be0:	f7fe f922 	bl	8011e28 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8013be4:	4809      	ldr	r0, [pc, #36]	; (8013c0c <mbedtls_ecp_group_load+0x194>)
 8013be6:	e782      	b.n	8013aee <mbedtls_ecp_group_load+0x76>
 8013be8:	080134e7 	.word	0x080134e7
 8013bec:	0802a9f0 	.word	0x0802a9f0
 8013bf0:	20000534 	.word	0x20000534
 8013bf4:	08012eeb 	.word	0x08012eeb
 8013bf8:	0802aa90 	.word	0x0802aa90
 8013bfc:	08013991 	.word	0x08013991
 8013c00:	0802ab80 	.word	0x0802ab80
 8013c04:	0802ac08 	.word	0x0802ac08
 8013c08:	0802acc8 	.word	0x0802acc8
 8013c0c:	ffffb180 	.word	0xffffb180

08013c10 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 8013c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013c12:	2b40      	cmp	r3, #64	; 0x40
{
 8013c14:	b093      	sub	sp, #76	; 0x4c
 8013c16:	4606      	mov	r6, r0
 8013c18:	460f      	mov	r7, r1
 8013c1a:	4615      	mov	r5, r2
 8013c1c:	461c      	mov	r4, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013c1e:	d907      	bls.n	8013c30 <entropy_update+0x20>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        mbedtls_sha512( data, len, tmp, 0 );
 8013c20:	4621      	mov	r1, r4
 8013c22:	4628      	mov	r0, r5
 8013c24:	2300      	movs	r3, #0
 8013c26:	aa02      	add	r2, sp, #8
 8013c28:	f006 f986 	bl	8019f38 <mbedtls_sha512>
#else
        mbedtls_sha256( data, len, tmp, 0 );
#endif
        p = tmp;
 8013c2c:	ad02      	add	r5, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8013c2e:	2440      	movs	r4, #64	; 0x40

    header[0] = source_id;
    header[1] = use_len & 0xFF;

#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013c30:	a901      	add	r1, sp, #4
 8013c32:	4630      	mov	r0, r6
 8013c34:	2202      	movs	r2, #2
    header[0] = source_id;
 8013c36:	f88d 7004 	strb.w	r7, [sp, #4]
    header[1] = use_len & 0xFF;
 8013c3a:	f88d 4005 	strb.w	r4, [sp, #5]
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013c3e:	f006 f870 	bl	8019d22 <mbedtls_sha512_update>
    mbedtls_sha512_update( &ctx->accumulator, p, use_len );
 8013c42:	4630      	mov	r0, r6
 8013c44:	4622      	mov	r2, r4
 8013c46:	4629      	mov	r1, r5
 8013c48:	f006 f86b 	bl	8019d22 <mbedtls_sha512_update>
    mbedtls_sha256_update( &ctx->accumulator, header, 2 );
    mbedtls_sha256_update( &ctx->accumulator, p, use_len );
#endif

    return( 0 );
}
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	b013      	add	sp, #76	; 0x4c
 8013c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c52 <entropy_gather_internal.part.0>:
}

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013c52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
    int ret, i, have_one_strong = 0;
 8013c56:	2500      	movs	r5, #0
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013c58:	b0a3      	sub	sp, #140	; 0x8c
 8013c5a:	4606      	mov	r6, r0
 8013c5c:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8013c5e:	46a8      	mov	r8, r5
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 8013c60:	46a9      	mov	r9, r5
    for( i = 0; i < ctx->source_count; i++ )
 8013c62:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
 8013c66:	4598      	cmp	r8, r3
 8013c68:	db07      	blt.n	8013c7a <entropy_gather_internal.part.0+0x28>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE );
 8013c6a:	2d00      	cmp	r5, #0
 8013c6c:	bf14      	ite	ne
 8013c6e:	2000      	movne	r0, #0
 8013c70:	f06f 003c 	mvneq.w	r0, #60	; 0x3c

    return( 0 );
}
 8013c74:	b023      	add	sp, #140	; 0x8c
 8013c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8013c7a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        olen = 0;
 8013c7e:	f8cd 9004 	str.w	r9, [sp, #4]
            have_one_strong = 1;
 8013c82:	2b01      	cmp	r3, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8013c84:	e9d4 7037 	ldrd	r7, r0, [r4, #220]	; 0xdc
 8013c88:	ab01      	add	r3, sp, #4
 8013c8a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8013c8e:	a902      	add	r1, sp, #8
            have_one_strong = 1;
 8013c90:	bf08      	it	eq
 8013c92:	2501      	moveq	r5, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8013c94:	47b8      	blx	r7
 8013c96:	2800      	cmp	r0, #0
 8013c98:	d1ec      	bne.n	8013c74 <entropy_gather_internal.part.0+0x22>
        if( olen > 0 )
 8013c9a:	9b01      	ldr	r3, [sp, #4]
 8013c9c:	b15b      	cbz	r3, 8013cb6 <entropy_gather_internal.part.0+0x64>
            entropy_update( ctx, (unsigned char) i, buf, olen );
 8013c9e:	aa02      	add	r2, sp, #8
 8013ca0:	fa5f f188 	uxtb.w	r1, r8
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	f7ff ffb3 	bl	8013c10 <entropy_update>
            ctx->source[i].size += olen;
 8013caa:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8013cae:	9a01      	ldr	r2, [sp, #4]
 8013cb0:	4413      	add	r3, r2
 8013cb2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    for( i = 0; i < ctx->source_count; i++ )
 8013cb6:	f108 0801 	add.w	r8, r8, #1
 8013cba:	3414      	adds	r4, #20
 8013cbc:	e7d1      	b.n	8013c62 <entropy_gather_internal.part.0+0x10>
	...

08013cc0 <mbedtls_entropy_init>:
{
 8013cc0:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 8013cc2:	f44f 7284 	mov.w	r2, #264	; 0x108
{
 8013cc6:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 8013cc8:	2100      	movs	r1, #0
 8013cca:	f00e fa95 	bl	80221f8 <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8013cce:	2100      	movs	r1, #0
 8013cd0:	4620      	mov	r0, r4
 8013cd2:	f005 f9cd 	bl	8019070 <mbedtls_sha512_starts>
    idx = ctx->source_count;
 8013cd6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013cda:	2a01      	cmp	r2, #1
 8013cdc:	dc10      	bgt.n	8013d00 <mbedtls_entropy_init+0x40>
    ctx->source[idx].f_source  = f_source;
 8013cde:	2314      	movs	r3, #20
 8013ce0:	fb03 4302 	mla	r3, r3, r2, r4
 8013ce4:	4907      	ldr	r1, [pc, #28]	; (8013d04 <mbedtls_entropy_init+0x44>)
 8013ce6:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    ctx->source[idx].p_source  = p_source;
 8013cea:	2100      	movs	r1, #0
 8013cec:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    ctx->source[idx].strong    = strong;
 8013cf0:	2101      	movs	r1, #1
 8013cf2:	f04f 0c20 	mov.w	ip, #32
    ctx->source_count++;
 8013cf6:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 8013cf8:	e9c3 c13a 	strd	ip, r1, [r3, #232]	; 0xe8
    ctx->source_count++;
 8013cfc:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
}
 8013d00:	bd10      	pop	{r4, pc}
 8013d02:	bf00      	nop
 8013d04:	080012e1 	.word	0x080012e1

08013d08 <mbedtls_entropy_free>:
static void mbedtls_zeroize( void *v, size_t n ) {
 8013d08:	f500 7384 	add.w	r3, r0, #264	; 0x108
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	4298      	cmp	r0, r3
 8013d10:	d100      	bne.n	8013d14 <mbedtls_entropy_free+0xc>
}
 8013d12:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013d14:	f800 2b01 	strb.w	r2, [r0], #1
 8013d18:	e7f9      	b.n	8013d0e <mbedtls_entropy_free+0x6>

08013d1a <mbedtls_entropy_add_source>:
{
 8013d1a:	b530      	push	{r4, r5, lr}
    idx = ctx->source_count;
 8013d1c:	f8d0 50d8 	ldr.w	r5, [r0, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013d20:	2d01      	cmp	r5, #1
 8013d22:	dc0e      	bgt.n	8013d42 <mbedtls_entropy_add_source+0x28>
    ctx->source[idx].f_source  = f_source;
 8013d24:	2414      	movs	r4, #20
 8013d26:	fb04 0405 	mla	r4, r4, r5, r0
    ctx->source_count++;
 8013d2a:	3501      	adds	r5, #1
    ctx->source[idx].threshold = threshold;
 8013d2c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ctx->source[idx].strong    = strong;
 8013d30:	9b03      	ldr	r3, [sp, #12]
 8013d32:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    ctx->source[idx].p_source  = p_source;
 8013d36:	e9c4 1237 	strd	r1, r2, [r4, #220]	; 0xdc
    ctx->source_count++;
 8013d3a:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    int idx, ret = 0;
 8013d3e:	2000      	movs	r0, #0
}
 8013d40:	bd30      	pop	{r4, r5, pc}
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 8013d42:	f06f 003d 	mvn.w	r0, #61	; 0x3d
    return( ret );
 8013d46:	e7fb      	b.n	8013d40 <mbedtls_entropy_add_source+0x26>

08013d48 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8013d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013d4c:	2a40      	cmp	r2, #64	; 0x40
{
 8013d4e:	b090      	sub	sp, #64	; 0x40
 8013d50:	4604      	mov	r4, r0
 8013d52:	460f      	mov	r7, r1
 8013d54:	4616      	mov	r6, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013d56:	d905      	bls.n	8013d64 <mbedtls_entropy_func+0x1c>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8013d58:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	b010      	add	sp, #64	; 0x40
 8013d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d64:	f44f 7881 	mov.w	r8, #258	; 0x102
        if( count++ > ENTROPY_MAX_LOOP )
 8013d68:	f1b8 0801 	subs.w	r8, r8, #1
 8013d6c:	d0f4      	beq.n	8013d58 <mbedtls_entropy_func+0x10>
    if( ctx->source_count == 0 )
 8013d6e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d048      	beq.n	8013e08 <mbedtls_entropy_func+0xc0>
 8013d76:	4620      	mov	r0, r4
 8013d78:	f7ff ff6b 	bl	8013c52 <entropy_gather_internal.part.0>
        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8013d7c:	4605      	mov	r5, r0
 8013d7e:	2800      	cmp	r0, #0
 8013d80:	d1ec      	bne.n	8013d5c <mbedtls_entropy_func+0x14>
        for( i = 0; i < ctx->source_count; i++ )
 8013d82:	f8d4 e0d8 	ldr.w	lr, [r4, #216]	; 0xd8
 8013d86:	4623      	mov	r3, r4
 8013d88:	4684      	mov	ip, r0
        done = 1;
 8013d8a:	2201      	movs	r2, #1
        for( i = 0; i < ctx->source_count; i++ )
 8013d8c:	45e6      	cmp	lr, ip
 8013d8e:	dc2c      	bgt.n	8013dea <mbedtls_entropy_func+0xa2>
    while( ! done );
 8013d90:	2a00      	cmp	r2, #0
 8013d92:	d0e9      	beq.n	8013d68 <mbedtls_entropy_func+0x20>
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8013d94:	2240      	movs	r2, #64	; 0x40
 8013d96:	2100      	movs	r1, #0
 8013d98:	4668      	mov	r0, sp
 8013d9a:	f00e fa2d 	bl	80221f8 <memset>
    mbedtls_sha512_finish( &ctx->accumulator, buf );
 8013d9e:	4620      	mov	r0, r4
 8013da0:	4669      	mov	r1, sp
 8013da2:	f005 ffc3 	bl	8019d2c <mbedtls_sha512_finish>
    memset( &ctx->accumulator, 0, sizeof( mbedtls_sha512_context ) );
 8013da6:	22d8      	movs	r2, #216	; 0xd8
 8013da8:	2100      	movs	r1, #0
 8013daa:	4620      	mov	r0, r4
 8013dac:	f00e fa24 	bl	80221f8 <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8013db0:	4620      	mov	r0, r4
 8013db2:	2100      	movs	r1, #0
 8013db4:	f005 f95c 	bl	8019070 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx->accumulator, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8013db8:	4620      	mov	r0, r4
 8013dba:	2240      	movs	r2, #64	; 0x40
 8013dbc:	4669      	mov	r1, sp
 8013dbe:	f005 ffb0 	bl	8019d22 <mbedtls_sha512_update>
    mbedtls_sha512( buf, MBEDTLS_ENTROPY_BLOCK_SIZE, buf, 0 );
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	466a      	mov	r2, sp
 8013dc6:	2140      	movs	r1, #64	; 0x40
 8013dc8:	4668      	mov	r0, sp
 8013dca:	f006 f8b5 	bl	8019f38 <mbedtls_sha512>
    for( i = 0; i < ctx->source_count; i++ )
 8013dce:	2300      	movs	r3, #0
 8013dd0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
        ctx->source[i].size = 0;
 8013dd4:	2114      	movs	r1, #20
 8013dd6:	34e4      	adds	r4, #228	; 0xe4
 8013dd8:	4618      	mov	r0, r3
    for( i = 0; i < ctx->source_count; i++ )
 8013dda:	4293      	cmp	r3, r2
 8013ddc:	db0e      	blt.n	8013dfc <mbedtls_entropy_func+0xb4>
    memcpy( output, buf, len );
 8013dde:	4632      	mov	r2, r6
 8013de0:	4669      	mov	r1, sp
 8013de2:	4638      	mov	r0, r7
 8013de4:	f00e f9e0 	bl	80221a8 <memcpy>
    ret = 0;
 8013de8:	e7b8      	b.n	8013d5c <mbedtls_entropy_func+0x14>
                done = 0;
 8013dea:	e9d3 1039 	ldrd	r1, r0, [r3, #228]	; 0xe4
        for( i = 0; i < ctx->source_count; i++ )
 8013dee:	f10c 0c01 	add.w	ip, ip, #1
                done = 0;
 8013df2:	4281      	cmp	r1, r0
 8013df4:	bf38      	it	cc
 8013df6:	2200      	movcc	r2, #0
        for( i = 0; i < ctx->source_count; i++ )
 8013df8:	3314      	adds	r3, #20
 8013dfa:	e7c7      	b.n	8013d8c <mbedtls_entropy_func+0x44>
        ctx->source[i].size = 0;
 8013dfc:	fb01 fc03 	mul.w	ip, r1, r3
    for( i = 0; i < ctx->source_count; i++ )
 8013e00:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 8013e02:	f844 000c 	str.w	r0, [r4, ip]
    for( i = 0; i < ctx->source_count; i++ )
 8013e06:	e7e8      	b.n	8013dda <mbedtls_entropy_func+0x92>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8013e08:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 8013e0c:	e7a6      	b.n	8013d5c <mbedtls_entropy_func+0x14>
	...

08013e10 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8013e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8013e14:	7bcc      	ldrb	r4, [r1, #15]
 8013e16:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8013f0c <gcm_mult+0xfc>
{
 8013e1a:	9100      	str	r1, [sp, #0]
 8013e1c:	f004 040f 	and.w	r4, r4, #15
 8013e20:	eb00 04c4 	add.w	r4, r0, r4, lsl #3

    zh = ctx->HH[lo];
 8013e24:	e9d4 a530 	ldrd	sl, r5, [r4, #192]	; 0xc0
    zl = ctx->HL[lo];
 8013e28:	e9d4 3410 	ldrd	r3, r4, [r4, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
 8013e2c:	260f      	movs	r6, #15
    {
        lo = x[i] & 0xf;
 8013e2e:	9900      	ldr	r1, [sp, #0]
 8013e30:	5d8f      	ldrb	r7, [r1, r6]
        hi = x[i] >> 4;
 8013e32:	0939      	lsrs	r1, r7, #4
        lo = x[i] & 0xf;
 8013e34:	f007 0b0f 	and.w	fp, r7, #15
        hi = x[i] >> 4;
 8013e38:	f003 070f 	and.w	r7, r3, #15
 8013e3c:	9101      	str	r1, [sp, #4]

        if( i != 15 )
 8013e3e:	f85e 7037 	ldr.w	r7, [lr, r7, lsl #3]
 8013e42:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8013e46:	0439      	lsls	r1, r7, #16
 8013e48:	ea4f 181a 	mov.w	r8, sl, lsr #4
 8013e4c:	0927      	lsrs	r7, r4, #4
 8013e4e:	2e0f      	cmp	r6, #15
 8013e50:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
 8013e54:	ea47 770a 	orr.w	r7, r7, sl, lsl #28
 8013e58:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
 8013e5c:	ea4f 1915 	mov.w	r9, r5, lsr #4
 8013e60:	d00d      	beq.n	8013e7e <gcm_mult+0x6e>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
 8013e62:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 8013e66:	e9d4 3530 	ldrd	r3, r5, [r4, #192]	; 0xc0
 8013e6a:	ea83 0a08 	eor.w	sl, r3, r8
            zl ^= ctx->HL[lo];
 8013e6e:	e9d4 3410 	ldrd	r3, r4, [r4, #64]	; 0x40
            zh ^= ctx->HH[lo];
 8013e72:	4069      	eors	r1, r5
 8013e74:	ea81 0509 	eor.w	r5, r1, r9
            zl ^= ctx->HL[lo];
 8013e78:	ea8c 0303 	eor.w	r3, ip, r3
 8013e7c:	407c      	eors	r4, r7

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 8013e7e:	9901      	ldr	r1, [sp, #4]
 8013e80:	ea4f 770a 	mov.w	r7, sl, lsl #28
 8013e84:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8013e88:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
 8013e8c:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
 8013e90:	ea47 1414 	orr.w	r4, r7, r4, lsr #4
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 8013e94:	e9d8 7130 	ldrd	r7, r1, [r8, #192]	; 0xc0
        zh = ( zh >> 4 );
 8013e98:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 8013e9c:	ea4a 7a05 	orr.w	sl, sl, r5, lsl #28
        zh ^= (uint64_t) last4[rem] << 48;
 8013ea0:	f003 030f 	and.w	r3, r3, #15
 8013ea4:	ea81 1515 	eor.w	r5, r1, r5, lsr #4
 8013ea8:	4918      	ldr	r1, [pc, #96]	; (8013f0c <gcm_mult+0xfc>)
 8013eaa:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
        zh ^= ctx->HH[hi];
 8013eae:	ea8a 0a07 	eor.w	sl, sl, r7
 8013eb2:	ea85 4503 	eor.w	r5, r5, r3, lsl #16
        zl ^= ctx->HL[hi];
 8013eb6:	e9d8 3710 	ldrd	r3, r7, [r8, #64]	; 0x40
    for( i = 15; i >= 0; i-- )
 8013eba:	3e01      	subs	r6, #1
        zl ^= ctx->HL[hi];
 8013ebc:	ea8c 0303 	eor.w	r3, ip, r3
 8013ec0:	ea84 0407 	eor.w	r4, r4, r7
    for( i = 15; i >= 0; i-- )
 8013ec4:	d2b3      	bcs.n	8013e2e <gcm_mult+0x1e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8013ec6:	0e29      	lsrs	r1, r5, #24
 8013ec8:	7011      	strb	r1, [r2, #0]
 8013eca:	0c29      	lsrs	r1, r5, #16
 8013ecc:	7051      	strb	r1, [r2, #1]
 8013ece:	0a29      	lsrs	r1, r5, #8
 8013ed0:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8013ed2:	ea4f 611a 	mov.w	r1, sl, lsr #24
 8013ed6:	7111      	strb	r1, [r2, #4]
 8013ed8:	ea4f 411a 	mov.w	r1, sl, lsr #16
 8013edc:	7151      	strb	r1, [r2, #5]
 8013ede:	ea4f 211a 	mov.w	r1, sl, lsr #8
 8013ee2:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8013ee4:	0e21      	lsrs	r1, r4, #24
 8013ee6:	7211      	strb	r1, [r2, #8]
 8013ee8:	0c21      	lsrs	r1, r4, #16
 8013eea:	7251      	strb	r1, [r2, #9]
 8013eec:	0a21      	lsrs	r1, r4, #8
 8013eee:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8013ef0:	0e19      	lsrs	r1, r3, #24
 8013ef2:	7311      	strb	r1, [r2, #12]
 8013ef4:	0c19      	lsrs	r1, r3, #16
 8013ef6:	7351      	strb	r1, [r2, #13]
 8013ef8:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 8013efa:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 8013efc:	f882 a007 	strb.w	sl, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8013f00:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8013f02:	7391      	strb	r1, [r2, #14]
 8013f04:	73d3      	strb	r3, [r2, #15]
}
 8013f06:	b003      	add	sp, #12
 8013f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f0c:	0802ade8 	.word	0x0802ade8

08013f10 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8013f10:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8013f14:	2100      	movs	r1, #0
 8013f16:	f00e b96f 	b.w	80221f8 <memset>

08013f1a <mbedtls_gcm_setkey>:
{
 8013f1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f1e:	4604      	mov	r4, r0
 8013f20:	b08d      	sub	sp, #52	; 0x34
 8013f22:	4608      	mov	r0, r1
 8013f24:	4690      	mov	r8, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8013f26:	4619      	mov	r1, r3
 8013f28:	2201      	movs	r2, #1
{
 8013f2a:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8013f2c:	f7fb ff82 	bl	800fe34 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8013f30:	4605      	mov	r5, r0
 8013f32:	2800      	cmp	r0, #0
 8013f34:	f000 8096 	beq.w	8014064 <mbedtls_gcm_setkey+0x14a>
    if( cipher_info->block_size != 16 )
 8013f38:	6947      	ldr	r7, [r0, #20]
 8013f3a:	2f10      	cmp	r7, #16
 8013f3c:	f040 8092 	bne.w	8014064 <mbedtls_gcm_setkey+0x14a>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8013f40:	4620      	mov	r0, r4
 8013f42:	f7fb ff8f 	bl	800fe64 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8013f46:	4629      	mov	r1, r5
 8013f48:	4620      	mov	r0, r4
 8013f4a:	f7fc f961 	bl	8010210 <mbedtls_cipher_setup>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	f040 8085 	bne.w	801405e <mbedtls_gcm_setkey+0x144>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8013f54:	2301      	movs	r3, #1
 8013f56:	4632      	mov	r2, r6
 8013f58:	4641      	mov	r1, r8
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f7fb ff94 	bl	800fe88 <mbedtls_cipher_setkey>
 8013f60:	2800      	cmp	r0, #0
 8013f62:	d17c      	bne.n	801405e <mbedtls_gcm_setkey+0x144>
    memset( h, 0, 16 );
 8013f64:	4601      	mov	r1, r0
    size_t olen = 0;
 8013f66:	9007      	str	r0, [sp, #28]
    memset( h, 0, 16 );
 8013f68:	463a      	mov	r2, r7
 8013f6a:	a808      	add	r0, sp, #32
 8013f6c:	f00e f944 	bl	80221f8 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8013f70:	ab07      	add	r3, sp, #28
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	ab08      	add	r3, sp, #32
 8013f76:	463a      	mov	r2, r7
 8013f78:	4619      	mov	r1, r3
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f7fb ffd2 	bl	800ff24 <mbedtls_cipher_update>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	d16c      	bne.n	801405e <mbedtls_gcm_setkey+0x144>
    GET_UINT32_BE( lo, h,  4  );
 8013f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f86:	9f08      	ldr	r7, [sp, #32]
 8013f88:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8013f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013f8c:	ba1b      	rev	r3, r3
 8013f8e:	ba3f      	rev	r7, r7
    GET_UINT32_BE( lo, h,  12 );
 8013f90:	ba36      	rev	r6, r6
 8013f92:	fa92 fc82 	rev.w	ip, r2
    ctx->HL[8] = vl;
 8013f96:	e9c4 6c20 	strd	r6, ip, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 8013f9a:	e9c4 3740 	strd	r3, r7, [r4, #256]	; 0x100
    ctx->HH[0] = 0;
 8013f9e:	f04f 0800 	mov.w	r8, #0
 8013fa2:	f04f 0900 	mov.w	r9, #0
 8013fa6:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 8013faa:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 8013fae:	2103      	movs	r1, #3
    for( i = 4; i > 0; i >>= 1 )
 8013fb0:	2504      	movs	r5, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8013fb2:	f04f 4861 	mov.w	r8, #3774873600	; 0xe1000000
 8013fb6:	f006 0201 	and.w	r2, r6, #1
 8013fba:	fb08 f202 	mul.w	r2, r8, r2
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8013fbe:	ea4f 7ec3 	mov.w	lr, r3, lsl #31
 8013fc2:	0876      	lsrs	r6, r6, #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8013fc4:	085b      	lsrs	r3, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8013fc6:	ea46 76cc 	orr.w	r6, r6, ip, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8013fca:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8013fce:	ea4e 0c5c 	orr.w	ip, lr, ip, lsr #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8013fd2:	ea82 0757 	eor.w	r7, r2, r7, lsr #1
    for( i = 4; i > 0; i >>= 1 )
 8013fd6:	3901      	subs	r1, #1
 8013fd8:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
        ctx->HL[i] = vl;
 8013fdc:	e9c2 6c10 	strd	r6, ip, [r2, #64]	; 0x40
        ctx->HH[i] = vh;
 8013fe0:	e9c2 3730 	strd	r3, r7, [r2, #192]	; 0xc0
    for( i = 4; i > 0; i >>= 1 )
 8013fe4:	ea4f 0565 	mov.w	r5, r5, asr #1
 8013fe8:	d1e5      	bne.n	8013fb6 <mbedtls_gcm_setkey+0x9c>
 8013fea:	f04f 0e03 	mov.w	lr, #3
    for( i = 2; i <= 8; i *= 2 )
 8013fee:	2202      	movs	r2, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8013ff0:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8013ff4:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
 8013ff8:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
 8013ffc:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
        vh = *HiH;
 8014000:	6871      	ldr	r1, [r6, #4]
 8014002:	9103      	str	r1, [sp, #12]
        vl = *HiL;
 8014004:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
 8014008:	9104      	str	r1, [sp, #16]
        vh = *HiH;
 801400a:	f859 b032 	ldr.w	fp, [r9, r2, lsl #3]
        vl = *HiL;
 801400e:	6859      	ldr	r1, [r3, #4]
 8014010:	9105      	str	r1, [sp, #20]
        for( j = 1; j < i; j++ )
 8014012:	f104 0548 	add.w	r5, r4, #72	; 0x48
 8014016:	f106 0108 	add.w	r1, r6, #8
 801401a:	9302      	str	r3, [sp, #8]
 801401c:	eb06 0ac2 	add.w	sl, r6, r2, lsl #3
            HiH[j] = vh ^ ctx->HH[j];
 8014020:	e9d5 7620 	ldrd	r7, r6, [r5, #128]	; 0x80
 8014024:	9b03      	ldr	r3, [sp, #12]
 8014026:	ea87 070b 	eor.w	r7, r7, fp
 801402a:	405e      	eors	r6, r3
 801402c:	e9c1 7600 	strd	r7, r6, [r1]
            HiL[j] = vl ^ ctx->HL[j];
 8014030:	9b04      	ldr	r3, [sp, #16]
 8014032:	682e      	ldr	r6, [r5, #0]
 8014034:	46ac      	mov	ip, r5
 8014036:	405e      	eors	r6, r3
 8014038:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801403c:	9b05      	ldr	r3, [sp, #20]
 801403e:	405f      	eors	r7, r3
 8014040:	9b02      	ldr	r3, [sp, #8]
 8014042:	3108      	adds	r1, #8
 8014044:	f843 6f08 	str.w	r6, [r3, #8]!
        for( j = 1; j < i; j++ )
 8014048:	4551      	cmp	r1, sl
            HiL[j] = vl ^ ctx->HL[j];
 801404a:	f105 0508 	add.w	r5, r5, #8
 801404e:	9302      	str	r3, [sp, #8]
 8014050:	605f      	str	r7, [r3, #4]
        for( j = 1; j < i; j++ )
 8014052:	d1e5      	bne.n	8014020 <mbedtls_gcm_setkey+0x106>
    for( i = 2; i <= 8; i *= 2 )
 8014054:	f1be 0e01 	subs.w	lr, lr, #1
 8014058:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801405c:	d1cc      	bne.n	8013ff8 <mbedtls_gcm_setkey+0xde>
}
 801405e:	b00d      	add	sp, #52	; 0x34
 8014060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8014064:	f06f 0013 	mvn.w	r0, #19
 8014068:	e7f9      	b.n	801405e <mbedtls_gcm_setkey+0x144>

0801406a <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 801406a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801406e:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8014070:	f04f 0800 	mov.w	r8, #0
{
 8014074:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    size_t use_len, olen = 0;
 8014078:	f8cd 800c 	str.w	r8, [sp, #12]
{
 801407c:	4604      	mov	r4, r0
 801407e:	468b      	mov	fp, r1
 8014080:	4616      	mov	r6, r2

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8014082:	461d      	mov	r5, r3
 8014084:	2b00      	cmp	r3, #0
 8014086:	f000 8092 	beq.w	80141ae <mbedtls_gcm_starts+0x144>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 801408a:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 801408e:	2210      	movs	r2, #16
 8014090:	4641      	mov	r1, r8
 8014092:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8014094:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8014098:	f00e f8ae 	bl	80221f8 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 801409c:	2210      	movs	r2, #16
 801409e:	4641      	mov	r1, r8
 80140a0:	4650      	mov	r0, sl
 80140a2:	f00e f8a9 	bl	80221f8 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 80140a6:	2200      	movs	r2, #0
 80140a8:	2300      	movs	r3, #0
    ctx->add_len = 0;

    if( iv_len == 12 )
 80140aa:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 80140ac:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
    ctx->add_len = 0;
 80140b0:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
    ctx->mode = mode;
 80140b4:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    if( iv_len == 12 )
 80140b8:	d11d      	bne.n	80140f6 <mbedtls_gcm_starts+0x8c>
    {
        memcpy( ctx->y, iv, iv_len );
 80140ba:	6833      	ldr	r3, [r6, #0]
 80140bc:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 80140c0:	6873      	ldr	r3, [r6, #4]
 80140c2:	607b      	str	r3, [r7, #4]
 80140c4:	68b3      	ldr	r3, [r6, #8]
 80140c6:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 80140c8:	2301      	movs	r3, #1
 80140ca:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 80140ce:	ab03      	add	r3, sp, #12
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	2210      	movs	r2, #16
 80140d4:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 80140d8:	4639      	mov	r1, r7
 80140da:	4620      	mov	r0, r4
 80140dc:	f7fb ff22 	bl	800ff24 <mbedtls_cipher_update>
 80140e0:	4605      	mov	r5, r0
 80140e2:	b920      	cbnz	r0, 80140ee <mbedtls_gcm_starts+0x84>
      ( (uint64_t) add_len ) >> 61 != 0 )
 80140e4:	e9c4 9052 	strd	r9, r0, [r4, #328]	; 0x148
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 80140e8:	f1b9 0f00 	cmp.w	r9, #0
 80140ec:	d145      	bne.n	801417a <mbedtls_gcm_starts+0x110>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 80140ee:	4628      	mov	r0, r5
 80140f0:	b009      	add	sp, #36	; 0x24
 80140f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 80140f6:	f3c5 5247 	ubfx	r2, r5, #21, #8
 80140fa:	f88d 201c 	strb.w	r2, [sp, #28]
        memset( work_buf, 0x00, 16 );
 80140fe:	e9cd 8804 	strd	r8, r8, [sp, #16]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8014102:	f3c5 324f 	ubfx	r2, r5, #13, #16
 8014106:	00eb      	lsls	r3, r5, #3
 8014108:	f88d 201d 	strb.w	r2, [sp, #29]
 801410c:	f3c5 1257 	ubfx	r2, r5, #5, #24
        memset( work_buf, 0x00, 16 );
 8014110:	f8cd 8018 	str.w	r8, [sp, #24]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8014114:	f88d 201e 	strb.w	r2, [sp, #30]
 8014118:	f88d 301f 	strb.w	r3, [sp, #31]
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 801411c:	2d10      	cmp	r5, #16
 801411e:	46ab      	mov	fp, r5
 8014120:	f504 78b0 	add.w	r8, r4, #352	; 0x160
 8014124:	bf28      	it	cs
 8014126:	f04f 0b10 	movcs.w	fp, #16
            for( i = 0; i < use_len; i++ )
 801412a:	4633      	mov	r3, r6
 801412c:	eb0b 0006 	add.w	r0, fp, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8014130:	4642      	mov	r2, r8
                ctx->y[i] ^= p[i];
 8014132:	f813 cb01 	ldrb.w	ip, [r3], #1
 8014136:	7811      	ldrb	r1, [r2, #0]
            for( i = 0; i < use_len; i++ )
 8014138:	4283      	cmp	r3, r0
                ctx->y[i] ^= p[i];
 801413a:	ea81 010c 	eor.w	r1, r1, ip
 801413e:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < use_len; i++ )
 8014142:	d1f6      	bne.n	8014132 <mbedtls_gcm_starts+0xc8>
            gcm_mult( ctx, ctx->y, ctx->y );
 8014144:	463a      	mov	r2, r7
 8014146:	4639      	mov	r1, r7
 8014148:	4620      	mov	r0, r4
 801414a:	f7ff fe61 	bl	8013e10 <gcm_mult>
        while( iv_len > 0 )
 801414e:	ebb5 050b 	subs.w	r5, r5, fp
            p += use_len;
 8014152:	445e      	add	r6, fp
        while( iv_len > 0 )
 8014154:	d1e2      	bne.n	801411c <mbedtls_gcm_starts+0xb2>
 8014156:	aa04      	add	r2, sp, #16
 8014158:	f504 71b8 	add.w	r1, r4, #368	; 0x170
            ctx->y[i] ^= work_buf[i];
 801415c:	f898 3000 	ldrb.w	r3, [r8]
 8014160:	f812 0b01 	ldrb.w	r0, [r2], #1
 8014164:	4043      	eors	r3, r0
 8014166:	f808 3b01 	strb.w	r3, [r8], #1
        for( i = 0; i < 16; i++ )
 801416a:	4588      	cmp	r8, r1
 801416c:	d1f6      	bne.n	801415c <mbedtls_gcm_starts+0xf2>
        gcm_mult( ctx, ctx->y, ctx->y );
 801416e:	463a      	mov	r2, r7
 8014170:	4639      	mov	r1, r7
 8014172:	4620      	mov	r0, r4
 8014174:	f7ff fe4c 	bl	8013e10 <gcm_mult>
 8014178:	e7a9      	b.n	80140ce <mbedtls_gcm_starts+0x64>
        use_len = ( add_len < 16 ) ? add_len : 16;
 801417a:	464f      	mov	r7, r9
 801417c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801417e:	2f10      	cmp	r7, #16
 8014180:	bf28      	it	cs
 8014182:	2710      	movcs	r7, #16
        for( i = 0; i < use_len; i++ )
 8014184:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 8014188:	19de      	adds	r6, r3, r7
            ctx->buf[i] ^= p[i];
 801418a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801418e:	7811      	ldrb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 8014190:	429e      	cmp	r6, r3
            ctx->buf[i] ^= p[i];
 8014192:	ea81 0100 	eor.w	r1, r1, r0
 8014196:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
 801419a:	d1f6      	bne.n	801418a <mbedtls_gcm_starts+0x120>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 801419c:	4652      	mov	r2, sl
 801419e:	4651      	mov	r1, sl
 80141a0:	4620      	mov	r0, r4
 80141a2:	f7ff fe35 	bl	8013e10 <gcm_mult>
        add_len -= use_len;
 80141a6:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
 80141aa:	9612      	str	r6, [sp, #72]	; 0x48
 80141ac:	e79c      	b.n	80140e8 <mbedtls_gcm_starts+0x7e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80141ae:	f06f 0513 	mvn.w	r5, #19
 80141b2:	e79c      	b.n	80140ee <mbedtls_gcm_starts+0x84>

080141b4 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	461f      	mov	r7, r3
 80141ba:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80141bc:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 80141be:	4297      	cmp	r7, r2
{
 80141c0:	4604      	mov	r4, r0
 80141c2:	460d      	mov	r5, r1
 80141c4:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 80141c6:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
 80141c8:	d902      	bls.n	80141d0 <mbedtls_gcm_update+0x1c>
 80141ca:	1abb      	subs	r3, r7, r2
 80141cc:	428b      	cmp	r3, r1
 80141ce:	d36a      	bcc.n	80142a6 <mbedtls_gcm_update+0xf2>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 80141d0:	e9d4 ab50 	ldrd	sl, fp, [r4, #320]	; 0x140
 80141d4:	2300      	movs	r3, #0
 80141d6:	eb1a 0805 	adds.w	r8, sl, r5
 80141da:	eb5b 0903 	adcs.w	r9, fp, r3
 80141de:	f04f 0000 	mov.w	r0, #0
 80141e2:	f04f 0100 	mov.w	r1, #0
 80141e6:	bf24      	itt	cs
 80141e8:	2001      	movcs	r0, #1
 80141ea:	2100      	movcs	r1, #0
 80141ec:	ea50 0301 	orrs.w	r3, r0, r1
 80141f0:	d159      	bne.n	80142a6 <mbedtls_gcm_update+0xf2>
 80141f2:	230f      	movs	r3, #15
 80141f4:	f06f 021f 	mvn.w	r2, #31
 80141f8:	454b      	cmp	r3, r9
 80141fa:	bf08      	it	eq
 80141fc:	4542      	cmpeq	r2, r8
 80141fe:	d352      	bcc.n	80142a6 <mbedtls_gcm_update+0xf2>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8014200:	e9c4 8950 	strd	r8, r9, [r4, #320]	; 0x140

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8014204:	f504 7ab0 	add.w	sl, r4, #352	; 0x160
 8014208:	f204 196b 	addw	r9, r4, #363	; 0x16b
    while( length > 0 )
 801420c:	b91d      	cbnz	r5, 8014216 <mbedtls_gcm_update+0x62>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 801420e:	4628      	mov	r0, r5
}
 8014210:	b009      	add	sp, #36	; 0x24
 8014212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 8014216:	2d10      	cmp	r5, #16
 8014218:	46a8      	mov	r8, r5
 801421a:	f204 126f 	addw	r2, r4, #367	; 0x16f
 801421e:	bf28      	it	cs
 8014220:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
 8014224:	7813      	ldrb	r3, [r2, #0]
 8014226:	3301      	adds	r3, #1
 8014228:	b2db      	uxtb	r3, r3
 801422a:	f802 3901 	strb.w	r3, [r2], #-1
 801422e:	b90b      	cbnz	r3, 8014234 <mbedtls_gcm_update+0x80>
        for( i = 16; i > 12; i-- )
 8014230:	454a      	cmp	r2, r9
 8014232:	d1f7      	bne.n	8014224 <mbedtls_gcm_update+0x70>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8014234:	ab03      	add	r3, sp, #12
 8014236:	9300      	str	r3, [sp, #0]
 8014238:	2210      	movs	r2, #16
 801423a:	ab04      	add	r3, sp, #16
 801423c:	4651      	mov	r1, sl
 801423e:	4620      	mov	r0, r4
 8014240:	f7fb fe70 	bl	800ff24 <mbedtls_cipher_update>
 8014244:	2800      	cmp	r0, #0
 8014246:	d1e3      	bne.n	8014210 <mbedtls_gcm_update+0x5c>
 8014248:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 801424c:	4631      	mov	r1, r6
 801424e:	f10d 0c10 	add.w	ip, sp, #16
 8014252:	f107 3eff 	add.w	lr, r7, #4294967295
 8014256:	4446      	add	r6, r8
 8014258:	461a      	mov	r2, r3
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 801425a:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 801425e:	b928      	cbnz	r0, 801426c <mbedtls_gcm_update+0xb8>
                ctx->buf[i] ^= p[i];
 8014260:	7818      	ldrb	r0, [r3, #0]
 8014262:	f891 b000 	ldrb.w	fp, [r1]
 8014266:	ea80 000b 	eor.w	r0, r0, fp
 801426a:	7018      	strb	r0, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 801426c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8014270:	f81c bb01 	ldrb.w	fp, [ip], #1
 8014274:	ea8b 0b00 	eor.w	fp, fp, r0
 8014278:	f80e bf01 	strb.w	fp, [lr, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 801427c:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 8014280:	2801      	cmp	r0, #1
                ctx->buf[i] ^= out_p[i];
 8014282:	bf02      	ittt	eq
 8014284:	7818      	ldrbeq	r0, [r3, #0]
 8014286:	ea8b 0b00 	eoreq.w	fp, fp, r0
 801428a:	f883 b000 	strbeq.w	fp, [r3]
        for( i = 0; i < use_len; i++ )
 801428e:	428e      	cmp	r6, r1
 8014290:	f103 0301 	add.w	r3, r3, #1
 8014294:	d1e1      	bne.n	801425a <mbedtls_gcm_update+0xa6>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 8014296:	4611      	mov	r1, r2
 8014298:	4620      	mov	r0, r4
 801429a:	f7ff fdb9 	bl	8013e10 <gcm_mult>
        length -= use_len;
 801429e:	eba5 0508 	sub.w	r5, r5, r8
        out_p += use_len;
 80142a2:	4447      	add	r7, r8
 80142a4:	e7b2      	b.n	801420c <mbedtls_gcm_update+0x58>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80142a6:	f06f 0013 	mvn.w	r0, #19
 80142aa:	e7b1      	b.n	8014210 <mbedtls_gcm_update+0x5c>

080142ac <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80142ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80142b0:	e9d0 3550 	ldrd	r3, r5, [r0, #320]	; 0x140
 80142b4:	00ed      	lsls	r5, r5, #3
 80142b6:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80142ba:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80142be:	e9d0 3652 	ldrd	r3, r6, [r0, #328]	; 0x148
 80142c2:	00f6      	lsls	r6, r6, #3
 80142c4:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80142c8:	ea4f 09c3 	mov.w	r9, r3, lsl #3

    if( tag_len > 16 || tag_len < 4 )
 80142cc:	1f13      	subs	r3, r2, #4
 80142ce:	2b0c      	cmp	r3, #12
{
 80142d0:	4604      	mov	r4, r0
 80142d2:	460f      	mov	r7, r1
 80142d4:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 80142d6:	d847      	bhi.n	8014368 <mbedtls_gcm_finish+0xbc>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 80142d8:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 80142dc:	4638      	mov	r0, r7
 80142de:	f00d ff63 	bl	80221a8 <memcpy>

    if( orig_len || orig_add_len )
 80142e2:	ea48 0209 	orr.w	r2, r8, r9
 80142e6:	ea45 0306 	orr.w	r3, r5, r6
 80142ea:	4313      	orrs	r3, r2
 80142ec:	d103      	bne.n	80142f6 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 80142ee:	2000      	movs	r0, #0
}
 80142f0:	b004      	add	sp, #16
 80142f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 80142f6:	0e33      	lsrs	r3, r6, #24
 80142f8:	f88d 3000 	strb.w	r3, [sp]
 80142fc:	0c33      	lsrs	r3, r6, #16
 80142fe:	f88d 3001 	strb.w	r3, [sp, #1]
 8014302:	0a33      	lsrs	r3, r6, #8
 8014304:	f88d 3002 	strb.w	r3, [sp, #2]
 8014308:	fa99 f389 	rev.w	r3, r9
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 801430c:	9301      	str	r3, [sp, #4]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 801430e:	0e2b      	lsrs	r3, r5, #24
 8014310:	f88d 3008 	strb.w	r3, [sp, #8]
 8014314:	0c2b      	lsrs	r3, r5, #16
 8014316:	f88d 3009 	strb.w	r3, [sp, #9]
 801431a:	0a2b      	lsrs	r3, r5, #8
 801431c:	f88d 300a 	strb.w	r3, [sp, #10]
 8014320:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 8014324:	fa98 f388 	rev.w	r3, r8
 8014328:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 801432c:	9303      	str	r3, [sp, #12]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 801432e:	f88d 6003 	strb.w	r6, [sp, #3]
        for( i = 0; i < 16; i++ )
 8014332:	4668      	mov	r0, sp
 8014334:	f504 75c0 	add.w	r5, r4, #384	; 0x180
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8014338:	4613      	mov	r3, r2
            ctx->buf[i] ^= work_buf[i];
 801433a:	7819      	ldrb	r1, [r3, #0]
 801433c:	f810 6b01 	ldrb.w	r6, [r0], #1
 8014340:	4071      	eors	r1, r6
 8014342:	f803 1b01 	strb.w	r1, [r3], #1
        for( i = 0; i < 16; i++ )
 8014346:	42ab      	cmp	r3, r5
 8014348:	d1f7      	bne.n	801433a <mbedtls_gcm_finish+0x8e>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 801434a:	4620      	mov	r0, r4
 801434c:	4611      	mov	r1, r2
 801434e:	f7ff fd5f 	bl	8013e10 <gcm_mult>
        for( i = 0; i < tag_len; i++ )
 8014352:	44ba      	add	sl, r7
 8014354:	4638      	mov	r0, r7
            tag[i] ^= ctx->buf[i];
 8014356:	7803      	ldrb	r3, [r0, #0]
 8014358:	f812 1b01 	ldrb.w	r1, [r2], #1
 801435c:	404b      	eors	r3, r1
 801435e:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < tag_len; i++ )
 8014362:	4582      	cmp	sl, r0
 8014364:	d1f7      	bne.n	8014356 <mbedtls_gcm_finish+0xaa>
 8014366:	e7c2      	b.n	80142ee <mbedtls_gcm_finish+0x42>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8014368:	f06f 0013 	mvn.w	r0, #19
 801436c:	e7c0      	b.n	80142f0 <mbedtls_gcm_finish+0x44>

0801436e <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 801436e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014372:	4615      	mov	r5, r2
 8014374:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8014376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014378:	9301      	str	r3, [sp, #4]
 801437a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801437c:	9300      	str	r3, [sp, #0]
 801437e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8014380:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
 8014384:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8014388:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 801438a:	f7ff fe6e 	bl	801406a <mbedtls_gcm_starts>
 801438e:	b970      	cbnz	r0, 80143ae <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8014390:	464b      	mov	r3, r9
 8014392:	4642      	mov	r2, r8
 8014394:	4629      	mov	r1, r5
 8014396:	4620      	mov	r0, r4
 8014398:	f7ff ff0c 	bl	80141b4 <mbedtls_gcm_update>
 801439c:	b938      	cbnz	r0, 80143ae <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 801439e:	463a      	mov	r2, r7
 80143a0:	4631      	mov	r1, r6
 80143a2:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80143a4:	b003      	add	sp, #12
 80143a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80143aa:	f7ff bf7f 	b.w	80142ac <mbedtls_gcm_finish>
}
 80143ae:	b003      	add	sp, #12
 80143b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080143b4 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80143b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143b6:	b08d      	sub	sp, #52	; 0x34
 80143b8:	460e      	mov	r6, r1
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80143ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80143bc:	9103      	str	r1, [sp, #12]
 80143be:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 80143c0:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80143c2:	9102      	str	r1, [sp, #8]
 80143c4:	9912      	ldr	r1, [sp, #72]	; 0x48
{
 80143c6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80143c8:	9404      	str	r4, [sp, #16]
 80143ca:	ad08      	add	r5, sp, #32
 80143cc:	e9cd 3100 	strd	r3, r1, [sp]
 80143d0:	e9cd 7505 	strd	r7, r5, [sp, #20]
 80143d4:	4613      	mov	r3, r2
 80143d6:	2100      	movs	r1, #0
 80143d8:	4632      	mov	r2, r6
 80143da:	f7ff ffc8 	bl	801436e <mbedtls_gcm_crypt_and_tag>
 80143de:	b948      	cbnz	r0, 80143f4 <mbedtls_gcm_auth_decrypt+0x40>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80143e0:	4603      	mov	r3, r0
 80143e2:	42bb      	cmp	r3, r7
 80143e4:	d108      	bne.n	80143f8 <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 80143e6:	b128      	cbz	r0, 80143f4 <mbedtls_gcm_auth_decrypt+0x40>
 80143e8:	4426      	add	r6, r4
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80143ea:	2300      	movs	r3, #0
 80143ec:	42b4      	cmp	r4, r6
 80143ee:	d10a      	bne.n	8014406 <mbedtls_gcm_auth_decrypt+0x52>
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80143f0:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 80143f4:	b00d      	add	sp, #52	; 0x34
 80143f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 80143f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80143fa:	5ce9      	ldrb	r1, [r5, r3]
 80143fc:	5cd2      	ldrb	r2, [r2, r3]
 80143fe:	404a      	eors	r2, r1
 8014400:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
 8014402:	3301      	adds	r3, #1
 8014404:	e7ed      	b.n	80143e2 <mbedtls_gcm_auth_decrypt+0x2e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014406:	f804 3b01 	strb.w	r3, [r4], #1
 801440a:	e7ef      	b.n	80143ec <mbedtls_gcm_auth_decrypt+0x38>

0801440c <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 801440c:	b510      	push	{r4, lr}
 801440e:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8014410:	f7fb fd28 	bl	800fe64 <mbedtls_cipher_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014414:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8014418:	2200      	movs	r2, #0
 801441a:	429c      	cmp	r4, r3
 801441c:	d100      	bne.n	8014420 <mbedtls_gcm_free+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
}
 801441e:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014420:	f804 2b01 	strb.w	r2, [r4], #1
 8014424:	e7f9      	b.n	801441a <mbedtls_gcm_free+0xe>

08014426 <mbedtls_hmac_drbg_free.part.0>:
}

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
 8014426:	b510      	push	{r4, lr}
 8014428:	4604      	mov	r4, r0
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 801442a:	f000 f92d 	bl	8014688 <mbedtls_md_free>
static void mbedtls_zeroize( void *v, size_t n ) {
 801442e:	f104 0364 	add.w	r3, r4, #100	; 0x64
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014432:	2200      	movs	r2, #0
 8014434:	429c      	cmp	r4, r3
 8014436:	d100      	bne.n	801443a <mbedtls_hmac_drbg_free.part.0+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
}
 8014438:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801443a:	f804 2b01 	strb.w	r2, [r4], #1
 801443e:	e7f9      	b.n	8014434 <mbedtls_hmac_drbg_free.part.0+0xe>

08014440 <mbedtls_hmac_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 8014440:	2264      	movs	r2, #100	; 0x64
 8014442:	2100      	movs	r1, #0
 8014444:	f00d bed8 	b.w	80221f8 <memset>

08014448 <mbedtls_hmac_drbg_update>:
{
 8014448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801444c:	4604      	mov	r4, r0
 801444e:	b093      	sub	sp, #76	; 0x4c
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014450:	6800      	ldr	r0, [r0, #0]
{
 8014452:	460e      	mov	r6, r1
 8014454:	4617      	mov	r7, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014456:	f000 fa55 	bl	8014904 <mbedtls_md_get_size>
 801445a:	4605      	mov	r5, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 801445c:	2e00      	cmp	r6, #0
 801445e:	d03c      	beq.n	80144da <mbedtls_hmac_drbg_update+0x92>
 8014460:	2f00      	cmp	r7, #0
 8014462:	bf14      	ite	ne
 8014464:	f04f 0802 	movne.w	r8, #2
 8014468:	f04f 0801 	moveq.w	r8, #1
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 801446c:	2300      	movs	r3, #0
 801446e:	f88d 3004 	strb.w	r3, [sp, #4]
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 8014472:	f104 090c 	add.w	r9, r4, #12
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 8014476:	4620      	mov	r0, r4
 8014478:	f000 fa20 	bl	80148bc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801447c:	462a      	mov	r2, r5
 801447e:	4649      	mov	r1, r9
 8014480:	4620      	mov	r0, r4
 8014482:	f000 f9df 	bl	8014844 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );
 8014486:	2201      	movs	r2, #1
 8014488:	a901      	add	r1, sp, #4
 801448a:	4620      	mov	r0, r4
 801448c:	f000 f9da 	bl	8014844 <mbedtls_md_hmac_update>
        if( rounds == 2 )
 8014490:	f1b8 0f02 	cmp.w	r8, #2
 8014494:	d104      	bne.n	80144a0 <mbedtls_hmac_drbg_update+0x58>
            mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );
 8014496:	463a      	mov	r2, r7
 8014498:	4631      	mov	r1, r6
 801449a:	4620      	mov	r0, r4
 801449c:	f000 f9d2 	bl	8014844 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, K );
 80144a0:	a902      	add	r1, sp, #8
 80144a2:	4620      	mov	r0, r4
 80144a4:	f000 f9de 	bl	8014864 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );
 80144a8:	462a      	mov	r2, r5
 80144aa:	a902      	add	r1, sp, #8
 80144ac:	4620      	mov	r0, r4
 80144ae:	f000 f969 	bl	8014784 <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80144b2:	462a      	mov	r2, r5
 80144b4:	4649      	mov	r1, r9
 80144b6:	4620      	mov	r0, r4
 80144b8:	f000 f9c4 	bl	8014844 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 80144bc:	4649      	mov	r1, r9
 80144be:	4620      	mov	r0, r4
 80144c0:	f000 f9d0 	bl	8014864 <mbedtls_md_hmac_finish>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 80144c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80144c8:	3301      	adds	r3, #1
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	4543      	cmp	r3, r8
 80144ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80144d2:	d3d0      	bcc.n	8014476 <mbedtls_hmac_drbg_update+0x2e>
}
 80144d4:	b013      	add	sp, #76	; 0x4c
 80144d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 80144da:	f04f 0801 	mov.w	r8, #1
 80144de:	e7c5      	b.n	801446c <mbedtls_hmac_drbg_update+0x24>

080144e0 <mbedtls_hmac_drbg_seed_buf>:
{
 80144e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144e4:	4617      	mov	r7, r2
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 80144e6:	2201      	movs	r2, #1
{
 80144e8:	4604      	mov	r4, r0
 80144ea:	460e      	mov	r6, r1
 80144ec:	4698      	mov	r8, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 80144ee:	f000 f8ef 	bl	80146d0 <mbedtls_md_setup>
 80144f2:	4605      	mov	r5, r0
 80144f4:	b9b0      	cbnz	r0, 8014524 <mbedtls_hmac_drbg_seed_buf+0x44>
    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );
 80144f6:	4630      	mov	r0, r6
 80144f8:	f000 fa04 	bl	8014904 <mbedtls_md_get_size>
 80144fc:	f104 090c 	add.w	r9, r4, #12
 8014500:	4602      	mov	r2, r0
 8014502:	4649      	mov	r1, r9
 8014504:	4620      	mov	r0, r4
 8014506:	f000 f93d 	bl	8014784 <mbedtls_md_hmac_starts>
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 801450a:	4630      	mov	r0, r6
 801450c:	f000 f9fa 	bl	8014904 <mbedtls_md_get_size>
 8014510:	2101      	movs	r1, #1
 8014512:	4602      	mov	r2, r0
 8014514:	4648      	mov	r0, r9
 8014516:	f00d fe6f 	bl	80221f8 <memset>
    mbedtls_hmac_drbg_update( ctx, data, data_len );
 801451a:	4642      	mov	r2, r8
 801451c:	4639      	mov	r1, r7
 801451e:	4620      	mov	r0, r4
 8014520:	f7ff ff92 	bl	8014448 <mbedtls_hmac_drbg_update>
}
 8014524:	4628      	mov	r0, r5
 8014526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801452a <mbedtls_hmac_drbg_reseed>:
{
 801452a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 801452e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8014532:	b0e0      	sub	sp, #384	; 0x180
 8014534:	4604      	mov	r4, r0
 8014536:	4688      	mov	r8, r1
 8014538:	4616      	mov	r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 801453a:	d828      	bhi.n	801458e <mbedtls_hmac_drbg_reseed+0x64>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 801453c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801453e:	18ab      	adds	r3, r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014540:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8014544:	d823      	bhi.n	801458e <mbedtls_hmac_drbg_reseed+0x64>
    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 8014546:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801454a:	2100      	movs	r1, #0
 801454c:	4668      	mov	r0, sp
 801454e:	f00d fe53 	bl	80221f8 <memset>
    if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )
 8014552:	462a      	mov	r2, r5
 8014554:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014556:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014558:	4669      	mov	r1, sp
 801455a:	4798      	blx	r3
 801455c:	4605      	mov	r5, r0
 801455e:	b9c8      	cbnz	r0, 8014594 <mbedtls_hmac_drbg_reseed+0x6a>
    seedlen = ctx->entropy_len;
 8014560:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if( additional != NULL && len != 0 )
 8014562:	f1b8 0f00 	cmp.w	r8, #0
 8014566:	d007      	beq.n	8014578 <mbedtls_hmac_drbg_reseed+0x4e>
 8014568:	b136      	cbz	r6, 8014578 <mbedtls_hmac_drbg_reseed+0x4e>
        memcpy( seed + seedlen, additional, len );
 801456a:	eb0d 0007 	add.w	r0, sp, r7
 801456e:	4632      	mov	r2, r6
 8014570:	4641      	mov	r1, r8
 8014572:	f00d fe19 	bl	80221a8 <memcpy>
        seedlen += len;
 8014576:	4437      	add	r7, r6
    mbedtls_hmac_drbg_update( ctx, seed, seedlen );
 8014578:	463a      	mov	r2, r7
 801457a:	4669      	mov	r1, sp
 801457c:	4620      	mov	r0, r4
 801457e:	f7ff ff63 	bl	8014448 <mbedtls_hmac_drbg_update>
    ctx->reseed_counter = 1;
 8014582:	2301      	movs	r3, #1
 8014584:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8014586:	4628      	mov	r0, r5
 8014588:	b060      	add	sp, #384	; 0x180
 801458a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 801458e:	f06f 0504 	mvn.w	r5, #4
 8014592:	e7f8      	b.n	8014586 <mbedtls_hmac_drbg_reseed+0x5c>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 8014594:	f06f 0508 	mvn.w	r5, #8
 8014598:	e7f5      	b.n	8014586 <mbedtls_hmac_drbg_reseed+0x5c>

0801459a <mbedtls_hmac_drbg_random_with_add>:
{
 801459a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459e:	4604      	mov	r4, r0
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80145a0:	6800      	ldr	r0, [r0, #0]
{
 80145a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80145a4:	4616      	mov	r6, r2
 80145a6:	4688      	mov	r8, r1
 80145a8:	461f      	mov	r7, r3
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80145aa:	f000 f9ab 	bl	8014904 <mbedtls_md_get_size>
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80145ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80145b2:	4681      	mov	r9, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80145b4:	d843      	bhi.n	801463e <mbedtls_hmac_drbg_random_with_add+0xa4>
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 80145b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80145ba:	d843      	bhi.n	8014644 <mbedtls_hmac_drbg_random_with_add+0xaa>
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 80145bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80145be:	b1db      	cbz	r3, 80145f8 <mbedtls_hmac_drbg_random_with_add+0x5e>
 80145c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d003      	beq.n	80145ce <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 80145c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80145c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80145ca:	429a      	cmp	r2, r3
 80145cc:	dd14      	ble.n	80145f8 <mbedtls_hmac_drbg_random_with_add+0x5e>
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 80145ce:	462a      	mov	r2, r5
 80145d0:	4639      	mov	r1, r7
 80145d2:	4620      	mov	r0, r4
 80145d4:	f7ff ffa9 	bl	801452a <mbedtls_hmac_drbg_reseed>
 80145d8:	b960      	cbnz	r0, 80145f4 <mbedtls_hmac_drbg_random_with_add+0x5a>
        add_len = 0; /* VII.4 */
 80145da:	4605      	mov	r5, r0
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80145dc:	f104 0a0c 	add.w	sl, r4, #12
    while( left != 0 )
 80145e0:	b9a6      	cbnz	r6, 801460c <mbedtls_hmac_drbg_random_with_add+0x72>
    mbedtls_hmac_drbg_update( ctx, additional, add_len );
 80145e2:	4620      	mov	r0, r4
 80145e4:	462a      	mov	r2, r5
 80145e6:	4639      	mov	r1, r7
 80145e8:	f7ff ff2e 	bl	8014448 <mbedtls_hmac_drbg_update>
    ctx->reseed_counter++;
 80145ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80145ee:	3301      	adds	r3, #1
 80145f0:	64e3      	str	r3, [r4, #76]	; 0x4c
    return( 0 );
 80145f2:	4630      	mov	r0, r6
}
 80145f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( additional != NULL && add_len != 0 )
 80145f8:	2f00      	cmp	r7, #0
 80145fa:	d0ef      	beq.n	80145dc <mbedtls_hmac_drbg_random_with_add+0x42>
 80145fc:	2d00      	cmp	r5, #0
 80145fe:	d0ed      	beq.n	80145dc <mbedtls_hmac_drbg_random_with_add+0x42>
        mbedtls_hmac_drbg_update( ctx, additional, add_len );
 8014600:	462a      	mov	r2, r5
 8014602:	4639      	mov	r1, r7
 8014604:	4620      	mov	r0, r4
 8014606:	f7ff ff1f 	bl	8014448 <mbedtls_hmac_drbg_update>
 801460a:	e7e7      	b.n	80145dc <mbedtls_hmac_drbg_random_with_add+0x42>
        size_t use_len = left > md_len ? md_len : left;
 801460c:	454e      	cmp	r6, r9
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 801460e:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 8014610:	46b3      	mov	fp, r6
 8014612:	bf28      	it	cs
 8014614:	46cb      	movcs	fp, r9
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 8014616:	f000 f951 	bl	80148bc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801461a:	464a      	mov	r2, r9
 801461c:	4651      	mov	r1, sl
 801461e:	4620      	mov	r0, r4
 8014620:	f000 f910 	bl	8014844 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 8014624:	4651      	mov	r1, sl
 8014626:	4620      	mov	r0, r4
 8014628:	f000 f91c 	bl	8014864 <mbedtls_md_hmac_finish>
        memcpy( out, ctx->V, use_len );
 801462c:	4640      	mov	r0, r8
 801462e:	465a      	mov	r2, fp
 8014630:	4651      	mov	r1, sl
 8014632:	f00d fdb9 	bl	80221a8 <memcpy>
        out += use_len;
 8014636:	44d8      	add	r8, fp
        left -= use_len;
 8014638:	eba6 060b 	sub.w	r6, r6, fp
 801463c:	e7d0      	b.n	80145e0 <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 801463e:	f06f 0002 	mvn.w	r0, #2
 8014642:	e7d7      	b.n	80145f4 <mbedtls_hmac_drbg_random_with_add+0x5a>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 8014644:	f06f 0004 	mvn.w	r0, #4
 8014648:	e7d4      	b.n	80145f4 <mbedtls_hmac_drbg_random_with_add+0x5a>

0801464a <mbedtls_hmac_drbg_random>:
{
 801464a:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 801464c:	2300      	movs	r3, #0
 801464e:	9300      	str	r3, [sp, #0]
 8014650:	f7ff ffa3 	bl	801459a <mbedtls_hmac_drbg_random_with_add>
}
 8014654:	b003      	add	sp, #12
 8014656:	f85d fb04 	ldr.w	pc, [sp], #4

0801465a <mbedtls_hmac_drbg_free>:
    if( ctx == NULL )
 801465a:	b108      	cbz	r0, 8014660 <mbedtls_hmac_drbg_free+0x6>
 801465c:	f7ff bee3 	b.w	8014426 <mbedtls_hmac_drbg_free.part.0>
}
 8014660:	4770      	bx	lr
	...

08014664 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 8014664:	3803      	subs	r0, #3
 8014666:	b2c0      	uxtb	r0, r0
 8014668:	2805      	cmp	r0, #5
 801466a:	bf9d      	ittte	ls
 801466c:	4b02      	ldrls	r3, [pc, #8]	; (8014678 <mbedtls_md_info_from_type+0x14>)
 801466e:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 8014672:	69c0      	ldrls	r0, [r0, #28]
{
 8014674:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 8014676:	4770      	bx	lr
 8014678:	0802b9d8 	.word	0x0802b9d8

0801467c <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 801467c:	2300      	movs	r3, #0
 801467e:	6003      	str	r3, [r0, #0]
 8014680:	6043      	str	r3, [r0, #4]
 8014682:	6083      	str	r3, [r0, #8]
}
 8014684:	4770      	bx	lr
	...

08014688 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 8014688:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 801468a:	4604      	mov	r4, r0
 801468c:	b1b8      	cbz	r0, 80146be <mbedtls_md_free+0x36>
 801468e:	6803      	ldr	r3, [r0, #0]
 8014690:	b1ab      	cbz	r3, 80146be <mbedtls_md_free+0x36>
        return;

    if( ctx->md_ctx != NULL )
 8014692:	6840      	ldr	r0, [r0, #4]
 8014694:	b108      	cbz	r0, 801469a <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 8014696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014698:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 801469a:	68a3      	ldr	r3, [r4, #8]
 801469c:	b153      	cbz	r3, 80146b4 <mbedtls_md_free+0x2c>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 801469e:	6822      	ldr	r2, [r4, #0]
 80146a0:	68d2      	ldr	r2, [r2, #12]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146a2:	2100      	movs	r1, #0
 80146a4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80146a8:	4293      	cmp	r3, r2
 80146aa:	d109      	bne.n	80146c0 <mbedtls_md_free+0x38>
        mbedtls_free( ctx->hmac_ctx );
 80146ac:	4b07      	ldr	r3, [pc, #28]	; (80146cc <mbedtls_md_free+0x44>)
 80146ae:	68a0      	ldr	r0, [r4, #8]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	4798      	blx	r3
 80146b4:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146b8:	2200      	movs	r2, #0
 80146ba:	429c      	cmp	r4, r3
 80146bc:	d103      	bne.n	80146c6 <mbedtls_md_free+0x3e>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
}
 80146be:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80146c0:	f803 1b01 	strb.w	r1, [r3], #1
 80146c4:	e7f0      	b.n	80146a8 <mbedtls_md_free+0x20>
 80146c6:	f804 2b01 	strb.w	r2, [r4], #1
 80146ca:	e7f6      	b.n	80146ba <mbedtls_md_free+0x32>
 80146cc:	2000053c 	.word	0x2000053c

080146d0 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	4604      	mov	r4, r0
 80146d4:	4616      	mov	r6, r2
    if( md_info == NULL || ctx == NULL )
 80146d6:	460d      	mov	r5, r1
 80146d8:	b1a1      	cbz	r1, 8014704 <mbedtls_md_setup+0x34>
 80146da:	b198      	cbz	r0, 8014704 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 80146dc:	6a0b      	ldr	r3, [r1, #32]
 80146de:	4798      	blx	r3
 80146e0:	6060      	str	r0, [r4, #4]
 80146e2:	b150      	cbz	r0, 80146fa <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 80146e4:	b15e      	cbz	r6, 80146fe <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 80146e6:	4b08      	ldr	r3, [pc, #32]	; (8014708 <mbedtls_md_setup+0x38>)
 80146e8:	68e9      	ldr	r1, [r5, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	2002      	movs	r0, #2
 80146ee:	4798      	blx	r3
 80146f0:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 80146f2:	b920      	cbnz	r0, 80146fe <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 80146f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146f6:	6860      	ldr	r0, [r4, #4]
 80146f8:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 80146fa:	4804      	ldr	r0, [pc, #16]	; (801470c <mbedtls_md_setup+0x3c>)
 80146fc:	e001      	b.n	8014702 <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 80146fe:	6025      	str	r5, [r4, #0]

    return( 0 );
 8014700:	2000      	movs	r0, #0
}
 8014702:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014704:	4802      	ldr	r0, [pc, #8]	; (8014710 <mbedtls_md_setup+0x40>)
 8014706:	e7fc      	b.n	8014702 <mbedtls_md_setup+0x32>
 8014708:	20000538 	.word	0x20000538
 801470c:	ffffae80 	.word	0xffffae80
 8014710:	ffffaf00 	.word	0xffffaf00

08014714 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
 8014714:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014716:	b130      	cbz	r0, 8014726 <mbedtls_md_starts+0x12>
 8014718:	6803      	ldr	r3, [r0, #0]
 801471a:	b123      	cbz	r3, 8014726 <mbedtls_md_starts+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->starts_func( ctx->md_ctx );
 801471c:	6840      	ldr	r0, [r0, #4]
 801471e:	691b      	ldr	r3, [r3, #16]
 8014720:	4798      	blx	r3

    return( 0 );
 8014722:	2000      	movs	r0, #0
}
 8014724:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014726:	4801      	ldr	r0, [pc, #4]	; (801472c <mbedtls_md_starts+0x18>)
 8014728:	e7fc      	b.n	8014724 <mbedtls_md_starts+0x10>
 801472a:	bf00      	nop
 801472c:	ffffaf00 	.word	0xffffaf00

08014730 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014730:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014732:	b130      	cbz	r0, 8014742 <mbedtls_md_update+0x12>
 8014734:	6803      	ldr	r3, [r0, #0]
 8014736:	b123      	cbz	r3, 8014742 <mbedtls_md_update+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014738:	6840      	ldr	r0, [r0, #4]
 801473a:	695b      	ldr	r3, [r3, #20]
 801473c:	4798      	blx	r3

    return( 0 );
 801473e:	2000      	movs	r0, #0
}
 8014740:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014742:	4801      	ldr	r0, [pc, #4]	; (8014748 <mbedtls_md_update+0x18>)
 8014744:	e7fc      	b.n	8014740 <mbedtls_md_update+0x10>
 8014746:	bf00      	nop
 8014748:	ffffaf00 	.word	0xffffaf00

0801474c <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 801474c:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 801474e:	b130      	cbz	r0, 801475e <mbedtls_md_finish+0x12>
 8014750:	6803      	ldr	r3, [r0, #0]
 8014752:	b123      	cbz	r3, 801475e <mbedtls_md_finish+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->finish_func( ctx->md_ctx, output );
 8014754:	6840      	ldr	r0, [r0, #4]
 8014756:	699b      	ldr	r3, [r3, #24]
 8014758:	4798      	blx	r3

    return( 0 );
 801475a:	2000      	movs	r0, #0
}
 801475c:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801475e:	4801      	ldr	r0, [pc, #4]	; (8014764 <mbedtls_md_finish+0x18>)
 8014760:	e7fc      	b.n	801475c <mbedtls_md_finish+0x10>
 8014762:	bf00      	nop
 8014764:	ffffaf00 	.word	0xffffaf00

08014768 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 8014768:	b510      	push	{r4, lr}
 801476a:	4604      	mov	r4, r0
 801476c:	4608      	mov	r0, r1
 801476e:	4611      	mov	r1, r2
 8014770:	461a      	mov	r2, r3
    if( md_info == NULL )
 8014772:	b11c      	cbz	r4, 801477c <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    md_info->digest_func( input, ilen, output );
 8014774:	69e3      	ldr	r3, [r4, #28]
 8014776:	4798      	blx	r3

    return( 0 );
 8014778:	2000      	movs	r0, #0
}
 801477a:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801477c:	4800      	ldr	r0, [pc, #0]	; (8014780 <mbedtls_md+0x18>)
 801477e:	e7fc      	b.n	801477a <mbedtls_md+0x12>
 8014780:	ffffaf00 	.word	0xffffaf00

08014784 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 8014784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014788:	460d      	mov	r5, r1
 801478a:	b090      	sub	sp, #64	; 0x40
 801478c:	4616      	mov	r6, r2
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 801478e:	4604      	mov	r4, r0
 8014790:	2800      	cmp	r0, #0
 8014792:	d052      	beq.n	801483a <mbedtls_md_hmac_starts+0xb6>
 8014794:	6803      	ldr	r3, [r0, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d04f      	beq.n	801483a <mbedtls_md_hmac_starts+0xb6>
 801479a:	6882      	ldr	r2, [r0, #8]
 801479c:	2a00      	cmp	r2, #0
 801479e:	d04c      	beq.n	801483a <mbedtls_md_hmac_starts+0xb6>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80147a0:	68da      	ldr	r2, [r3, #12]
 80147a2:	42b2      	cmp	r2, r6
 80147a4:	d210      	bcs.n	80147c8 <mbedtls_md_hmac_starts+0x44>
    {
        ctx->md_info->starts_func( ctx->md_ctx );
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	6840      	ldr	r0, [r0, #4]
 80147aa:	4798      	blx	r3
        ctx->md_info->update_func( ctx->md_ctx, key, keylen );
 80147ac:	6823      	ldr	r3, [r4, #0]
 80147ae:	6860      	ldr	r0, [r4, #4]
 80147b0:	695b      	ldr	r3, [r3, #20]
 80147b2:	4632      	mov	r2, r6
 80147b4:	4629      	mov	r1, r5
 80147b6:	4798      	blx	r3
        ctx->md_info->finish_func( ctx->md_ctx, sum );
 80147b8:	6823      	ldr	r3, [r4, #0]
 80147ba:	6860      	ldr	r0, [r4, #4]
 80147bc:	699b      	ldr	r3, [r3, #24]
 80147be:	4669      	mov	r1, sp
 80147c0:	4798      	blx	r3

        keylen = ctx->md_info->size;
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	689e      	ldr	r6, [r3, #8]
        key = sum;
 80147c6:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80147c8:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 80147ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80147ce:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 80147d0:	2136      	movs	r1, #54	; 0x36
 80147d2:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 80147d4:	eb08 0702 	add.w	r7, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 80147d8:	f00d fd0e 	bl	80221f8 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 80147dc:	6823      	ldr	r3, [r4, #0]
 80147de:	215c      	movs	r1, #92	; 0x5c
 80147e0:	68da      	ldr	r2, [r3, #12]
 80147e2:	4638      	mov	r0, r7
 80147e4:	f00d fd08 	bl	80221f8 <memset>

    for( i = 0; i < keylen; i++ )
 80147e8:	3d01      	subs	r5, #1
 80147ea:	4643      	mov	r3, r8
 80147ec:	1e78      	subs	r0, r7, #1
 80147ee:	4446      	add	r6, r8
 80147f0:	42b3      	cmp	r3, r6
 80147f2:	d114      	bne.n	801481e <mbedtls_md_hmac_starts+0x9a>
 80147f4:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80147f6:	4619      	mov	r1, r3
 80147f8:	eb0d 0203 	add.w	r2, sp, r3
 80147fc:	3301      	adds	r3, #1
 80147fe:	2b41      	cmp	r3, #65	; 0x41
 8014800:	d119      	bne.n	8014836 <mbedtls_md_hmac_starts+0xb2>
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    mbedtls_zeroize( sum, sizeof( sum ) );

    ctx->md_info->starts_func( ctx->md_ctx );
 8014802:	6823      	ldr	r3, [r4, #0]
 8014804:	6860      	ldr	r0, [r4, #4]
 8014806:	691b      	ldr	r3, [r3, #16]
 8014808:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 801480a:	6823      	ldr	r3, [r4, #0]
 801480c:	6860      	ldr	r0, [r4, #4]
 801480e:	695d      	ldr	r5, [r3, #20]
 8014810:	68da      	ldr	r2, [r3, #12]
 8014812:	4641      	mov	r1, r8
 8014814:	47a8      	blx	r5

    return( 0 );
 8014816:	2000      	movs	r0, #0
}
 8014818:	b010      	add	sp, #64	; 0x40
 801481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 801481e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8014822:	781a      	ldrb	r2, [r3, #0]
 8014824:	404a      	eors	r2, r1
 8014826:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 801482a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801482e:	7829      	ldrb	r1, [r5, #0]
 8014830:	404a      	eors	r2, r1
 8014832:	7002      	strb	r2, [r0, #0]
    for( i = 0; i < keylen; i++ )
 8014834:	e7dc      	b.n	80147f0 <mbedtls_md_hmac_starts+0x6c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014836:	7011      	strb	r1, [r2, #0]
 8014838:	e7de      	b.n	80147f8 <mbedtls_md_hmac_starts+0x74>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801483a:	4801      	ldr	r0, [pc, #4]	; (8014840 <mbedtls_md_hmac_starts+0xbc>)
 801483c:	e7ec      	b.n	8014818 <mbedtls_md_hmac_starts+0x94>
 801483e:	bf00      	nop
 8014840:	ffffaf00 	.word	0xffffaf00

08014844 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014844:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014846:	b140      	cbz	r0, 801485a <mbedtls_md_hmac_update+0x16>
 8014848:	6803      	ldr	r3, [r0, #0]
 801484a:	b133      	cbz	r3, 801485a <mbedtls_md_hmac_update+0x16>
 801484c:	6884      	ldr	r4, [r0, #8]
 801484e:	b124      	cbz	r4, 801485a <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014850:	6840      	ldr	r0, [r0, #4]
 8014852:	695b      	ldr	r3, [r3, #20]
 8014854:	4798      	blx	r3

    return( 0 );
 8014856:	2000      	movs	r0, #0
}
 8014858:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801485a:	4801      	ldr	r0, [pc, #4]	; (8014860 <mbedtls_md_hmac_update+0x1c>)
 801485c:	e7fc      	b.n	8014858 <mbedtls_md_hmac_update+0x14>
 801485e:	bf00      	nop
 8014860:	ffffaf00 	.word	0xffffaf00

08014864 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8014864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014866:	460e      	mov	r6, r1
 8014868:	b091      	sub	sp, #68	; 0x44
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 801486a:	4604      	mov	r4, r0
 801486c:	b308      	cbz	r0, 80148b2 <mbedtls_md_hmac_finish+0x4e>
 801486e:	6802      	ldr	r2, [r0, #0]
 8014870:	b1fa      	cbz	r2, 80148b2 <mbedtls_md_hmac_finish+0x4e>
 8014872:	6883      	ldr	r3, [r0, #8]
 8014874:	b1eb      	cbz	r3, 80148b2 <mbedtls_md_hmac_finish+0x4e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014876:	68d5      	ldr	r5, [r2, #12]

    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014878:	6840      	ldr	r0, [r0, #4]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 801487a:	441d      	add	r5, r3
    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 801487c:	4669      	mov	r1, sp
 801487e:	6993      	ldr	r3, [r2, #24]
 8014880:	4798      	blx	r3
    ctx->md_info->starts_func( ctx->md_ctx );
 8014882:	6823      	ldr	r3, [r4, #0]
 8014884:	6860      	ldr	r0, [r4, #4]
 8014886:	691b      	ldr	r3, [r3, #16]
 8014888:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, opad, ctx->md_info->block_size );
 801488a:	6823      	ldr	r3, [r4, #0]
 801488c:	6860      	ldr	r0, [r4, #4]
 801488e:	68da      	ldr	r2, [r3, #12]
 8014890:	695f      	ldr	r7, [r3, #20]
 8014892:	4629      	mov	r1, r5
 8014894:	47b8      	blx	r7
    ctx->md_info->update_func( ctx->md_ctx, tmp, ctx->md_info->size );
 8014896:	6823      	ldr	r3, [r4, #0]
 8014898:	6860      	ldr	r0, [r4, #4]
 801489a:	689a      	ldr	r2, [r3, #8]
 801489c:	695d      	ldr	r5, [r3, #20]
 801489e:	4669      	mov	r1, sp
 80148a0:	47a8      	blx	r5
    ctx->md_info->finish_func( ctx->md_ctx, output );
 80148a2:	6823      	ldr	r3, [r4, #0]
 80148a4:	6860      	ldr	r0, [r4, #4]
 80148a6:	699b      	ldr	r3, [r3, #24]
 80148a8:	4631      	mov	r1, r6
 80148aa:	4798      	blx	r3

    return( 0 );
 80148ac:	2000      	movs	r0, #0
}
 80148ae:	b011      	add	sp, #68	; 0x44
 80148b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80148b2:	4801      	ldr	r0, [pc, #4]	; (80148b8 <mbedtls_md_hmac_finish+0x54>)
 80148b4:	e7fb      	b.n	80148ae <mbedtls_md_hmac_finish+0x4a>
 80148b6:	bf00      	nop
 80148b8:	ffffaf00 	.word	0xffffaf00

080148bc <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 80148bc:	b570      	push	{r4, r5, r6, lr}
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80148be:	4604      	mov	r4, r0
 80148c0:	b170      	cbz	r0, 80148e0 <mbedtls_md_hmac_reset+0x24>
 80148c2:	6803      	ldr	r3, [r0, #0]
 80148c4:	b163      	cbz	r3, 80148e0 <mbedtls_md_hmac_reset+0x24>
 80148c6:	6885      	ldr	r5, [r0, #8]
 80148c8:	b155      	cbz	r5, 80148e0 <mbedtls_md_hmac_reset+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    ctx->md_info->starts_func( ctx->md_ctx );
 80148ca:	691b      	ldr	r3, [r3, #16]
 80148cc:	6840      	ldr	r0, [r0, #4]
 80148ce:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 80148d0:	6823      	ldr	r3, [r4, #0]
 80148d2:	6860      	ldr	r0, [r4, #4]
 80148d4:	695e      	ldr	r6, [r3, #20]
 80148d6:	68da      	ldr	r2, [r3, #12]
 80148d8:	4629      	mov	r1, r5
 80148da:	47b0      	blx	r6

    return( 0 );
 80148dc:	2000      	movs	r0, #0
}
 80148de:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80148e0:	4800      	ldr	r0, [pc, #0]	; (80148e4 <mbedtls_md_hmac_reset+0x28>)
 80148e2:	e7fc      	b.n	80148de <mbedtls_md_hmac_reset+0x22>
 80148e4:	ffffaf00 	.word	0xffffaf00

080148e8 <mbedtls_md_process>:

    return( 0 );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 80148e8:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80148ea:	b130      	cbz	r0, 80148fa <mbedtls_md_process+0x12>
 80148ec:	6803      	ldr	r3, [r0, #0]
 80148ee:	b123      	cbz	r3, 80148fa <mbedtls_md_process+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->process_func( ctx->md_ctx, data );
 80148f0:	6840      	ldr	r0, [r0, #4]
 80148f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148f4:	4798      	blx	r3

    return( 0 );
 80148f6:	2000      	movs	r0, #0
}
 80148f8:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80148fa:	4801      	ldr	r0, [pc, #4]	; (8014900 <mbedtls_md_process+0x18>)
 80148fc:	e7fc      	b.n	80148f8 <mbedtls_md_process+0x10>
 80148fe:	bf00      	nop
 8014900:	ffffaf00 	.word	0xffffaf00

08014904 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8014904:	b100      	cbz	r0, 8014908 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8014906:	7a00      	ldrb	r0, [r0, #8]
}
 8014908:	4770      	bx	lr

0801490a <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 801490a:	b100      	cbz	r0, 801490e <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
 801490c:	6840      	ldr	r0, [r0, #4]
}
 801490e:	4770      	bx	lr

08014910 <mbedtls_md5_init>:
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8014910:	2258      	movs	r2, #88	; 0x58
 8014912:	2100      	movs	r1, #0
 8014914:	f00d bc70 	b.w	80221f8 <memset>

08014918 <mbedtls_md5_free>:
}

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
    if( ctx == NULL )
 8014918:	b120      	cbz	r0, 8014924 <mbedtls_md5_free+0xc>
 801491a:	f100 0358 	add.w	r3, r0, #88	; 0x58
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801491e:	2200      	movs	r2, #0
 8014920:	4298      	cmp	r0, r3
 8014922:	d100      	bne.n	8014926 <mbedtls_md5_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_md5_context ) );
}
 8014924:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014926:	f800 2b01 	strb.w	r2, [r0], #1
 801492a:	e7f9      	b.n	8014920 <mbedtls_md5_free+0x8>

0801492c <mbedtls_md5_clone>:

void mbedtls_md5_clone( mbedtls_md5_context *dst,
                        const mbedtls_md5_context *src )
{
 801492c:	b508      	push	{r3, lr}
    *dst = *src;
 801492e:	2258      	movs	r2, #88	; 0x58
 8014930:	f00d fc3a 	bl	80221a8 <memcpy>
}
 8014934:	bd08      	pop	{r3, pc}
	...

08014938 <mbedtls_md5_starts>:
/*
 * MD5 context setup
 */
void mbedtls_md5_starts( mbedtls_md5_context *ctx )
{
    ctx->total[0] = 0;
 8014938:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 801493a:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 801493e:	4b08      	ldr	r3, [pc, #32]	; (8014960 <mbedtls_md5_starts+0x28>)
 8014940:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 8014942:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8014946:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 8014948:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 801494c:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8014950:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 8014954:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 8014956:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 801495a:	6143      	str	r3, [r0, #20]
}
 801495c:	4770      	bx	lr
 801495e:	bf00      	nop
 8014960:	67452301 	.word	0x67452301

08014964 <mbedtls_md5_process>:

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
void mbedtls_md5_process( mbedtls_md5_context *ctx, const unsigned char data[64] )
{
 8014964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014968:	b08d      	sub	sp, #52	; 0x34
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
    GET_UINT32_LE( X[ 1], data,  4 );
 801496a:	684b      	ldr	r3, [r1, #4]
 801496c:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X[ 2], data,  8 );
 801496e:	688b      	ldr	r3, [r1, #8]
 8014970:	9302      	str	r3, [sp, #8]
    GET_UINT32_LE( X[ 3], data, 12 );
 8014972:	68cb      	ldr	r3, [r1, #12]
 8014974:	9303      	str	r3, [sp, #12]
    GET_UINT32_LE( X[ 4], data, 16 );
 8014976:	690b      	ldr	r3, [r1, #16]
 8014978:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X[ 5], data, 20 );
    GET_UINT32_LE( X[ 6], data, 24 );
 801497a:	698b      	ldr	r3, [r1, #24]
 801497c:	9305      	str	r3, [sp, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
    GET_UINT32_LE( X[ 8], data, 32 );
 801497e:	6a0b      	ldr	r3, [r1, #32]
 8014980:	9306      	str	r3, [sp, #24]
    GET_UINT32_LE( X[ 9], data, 36 );
 8014982:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8014984:	9307      	str	r3, [sp, #28]
    GET_UINT32_LE( X[10], data, 40 );
 8014986:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014988:	9308      	str	r3, [sp, #32]
    GET_UINT32_LE( X[11], data, 44 );
 801498a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801498c:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_LE( X[12], data, 48 );
    GET_UINT32_LE( X[13], data, 52 );
 801498e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014990:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_LE( X[14], data, 56 );
    GET_UINT32_LE( X[15], data, 60 );
 8014992:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8014994:	930b      	str	r3, [sp, #44]	; 0x2c
 8014996:	4adb      	ldr	r2, [pc, #876]	; (8014d04 <mbedtls_md5_process+0x3a0>)
 8014998:	6883      	ldr	r3, [r0, #8]
    GET_UINT32_LE( X[ 0], data,  0 );
 801499a:	f8d1 a000 	ldr.w	sl, [r1]
    GET_UINT32_LE( X[ 5], data, 20 );
 801499e:	f8d1 e014 	ldr.w	lr, [r1, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
 80149a2:	f8d1 901c 	ldr.w	r9, [r1, #28]
    GET_UINT32_LE( X[12], data, 48 );
 80149a6:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
    GET_UINT32_LE( X[14], data, 56 );
 80149aa:	f8d1 8038 	ldr.w	r8, [r1, #56]	; 0x38
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
    B = ctx->state[1];
 80149ae:	68c6      	ldr	r6, [r0, #12]
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 80149b0:	4dd5      	ldr	r5, [pc, #852]	; (8014d08 <mbedtls_md5_process+0x3a4>)
 80149b2:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 8014d9c <mbedtls_md5_process+0x438>
 80149b6:	441a      	add	r2, r3
 80149b8:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 80149bc:	404b      	eors	r3, r1
 80149be:	4033      	ands	r3, r6
 80149c0:	4452      	add	r2, sl
 80149c2:	404b      	eors	r3, r1
 80149c4:	4413      	add	r3, r2
 80149c6:	4ad1      	ldr	r2, [pc, #836]	; (8014d0c <mbedtls_md5_process+0x3a8>)
 80149c8:	440a      	add	r2, r1
 80149ca:	9901      	ldr	r1, [sp, #4]
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80149cc:	6904      	ldr	r4, [r0, #16]
 80149ce:	9f04      	ldr	r7, [sp, #16]
 80149d0:	440a      	add	r2, r1
 80149d2:	6901      	ldr	r1, [r0, #16]
    P( A, B, C, D,  0,  7, 0xD76AA478 );
 80149d4:	eb06 6373 	add.w	r3, r6, r3, ror #25
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 80149d8:	4071      	eors	r1, r6
 80149da:	4019      	ands	r1, r3
 80149dc:	4061      	eors	r1, r4
 80149de:	4411      	add	r1, r2
 80149e0:	4acb      	ldr	r2, [pc, #812]	; (8014d10 <mbedtls_md5_process+0x3ac>)
 80149e2:	4422      	add	r2, r4
 80149e4:	9c02      	ldr	r4, [sp, #8]
 80149e6:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  2, 17, 0x242070DB );
 80149ea:	4422      	add	r2, r4
 80149ec:	ea86 0403 	eor.w	r4, r6, r3
 80149f0:	400c      	ands	r4, r1
 80149f2:	4074      	eors	r4, r6
 80149f4:	4414      	add	r4, r2
 80149f6:	9a03      	ldr	r2, [sp, #12]
 80149f8:	4435      	add	r5, r6
 80149fa:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 80149fe:	4415      	add	r5, r2
 8014a00:	ea83 0201 	eor.w	r2, r3, r1
 8014a04:	4022      	ands	r2, r4
 8014a06:	405a      	eors	r2, r3
 8014a08:	442a      	add	r2, r5
 8014a0a:	4dc2      	ldr	r5, [pc, #776]	; (8014d14 <mbedtls_md5_process+0x3b0>)
 8014a0c:	443d      	add	r5, r7
 8014a0e:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8014a12:	441d      	add	r5, r3
 8014a14:	ea81 0304 	eor.w	r3, r1, r4
 8014a18:	4013      	ands	r3, r2
 8014a1a:	404b      	eors	r3, r1
 8014a1c:	442b      	add	r3, r5
 8014a1e:	4dbe      	ldr	r5, [pc, #760]	; (8014d18 <mbedtls_md5_process+0x3b4>)
 8014a20:	9f05      	ldr	r7, [sp, #20]
 8014a22:	4475      	add	r5, lr
 8014a24:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8014a28:	440d      	add	r5, r1
 8014a2a:	ea84 0102 	eor.w	r1, r4, r2
 8014a2e:	4019      	ands	r1, r3
 8014a30:	4061      	eors	r1, r4
 8014a32:	4429      	add	r1, r5
 8014a34:	4db9      	ldr	r5, [pc, #740]	; (8014d1c <mbedtls_md5_process+0x3b8>)
 8014a36:	443d      	add	r5, r7
 8014a38:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8014a3c:	4425      	add	r5, r4
 8014a3e:	ea82 0403 	eor.w	r4, r2, r3
 8014a42:	400c      	ands	r4, r1
 8014a44:	4054      	eors	r4, r2
 8014a46:	442c      	add	r4, r5
 8014a48:	4db5      	ldr	r5, [pc, #724]	; (8014d20 <mbedtls_md5_process+0x3bc>)
 8014a4a:	9f06      	ldr	r7, [sp, #24]
 8014a4c:	444d      	add	r5, r9
 8014a4e:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A,  7, 22, 0xFD469501 );
 8014a52:	4415      	add	r5, r2
 8014a54:	ea83 0201 	eor.w	r2, r3, r1
 8014a58:	4022      	ands	r2, r4
 8014a5a:	405a      	eors	r2, r3
 8014a5c:	442a      	add	r2, r5
 8014a5e:	4db1      	ldr	r5, [pc, #708]	; (8014d24 <mbedtls_md5_process+0x3c0>)
 8014a60:	443d      	add	r5, r7
 8014a62:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D,  8,  7, 0x698098D8 );
 8014a66:	441d      	add	r5, r3
 8014a68:	ea81 0304 	eor.w	r3, r1, r4
 8014a6c:	4013      	ands	r3, r2
 8014a6e:	404b      	eors	r3, r1
 8014a70:	9f07      	ldr	r7, [sp, #28]
 8014a72:	442b      	add	r3, r5
 8014a74:	4dac      	ldr	r5, [pc, #688]	; (8014d28 <mbedtls_md5_process+0x3c4>)
 8014a76:	443d      	add	r5, r7
 8014a78:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 8014a7c:	440d      	add	r5, r1
 8014a7e:	ea84 0102 	eor.w	r1, r4, r2
 8014a82:	4019      	ands	r1, r3
 8014a84:	4061      	eors	r1, r4
 8014a86:	4429      	add	r1, r5
 8014a88:	9d08      	ldr	r5, [sp, #32]
 8014a8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014a8c:	f5a5 4524 	sub.w	r5, r5, #41984	; 0xa400
 8014a90:	3d4f      	subs	r5, #79	; 0x4f
 8014a92:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 8014a96:	4425      	add	r5, r4
 8014a98:	ea82 0403 	eor.w	r4, r2, r3
 8014a9c:	400c      	ands	r4, r1
 8014a9e:	4054      	eors	r4, r2
 8014aa0:	442c      	add	r4, r5
 8014aa2:	4da2      	ldr	r5, [pc, #648]	; (8014d2c <mbedtls_md5_process+0x3c8>)
 8014aa4:	443d      	add	r5, r7
 8014aa6:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 8014aaa:	4415      	add	r5, r2
 8014aac:	ea83 0201 	eor.w	r2, r3, r1
 8014ab0:	4022      	ands	r2, r4
 8014ab2:	405a      	eors	r2, r3
 8014ab4:	442a      	add	r2, r5
 8014ab6:	4d9e      	ldr	r5, [pc, #632]	; (8014d30 <mbedtls_md5_process+0x3cc>)
 8014ab8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014aba:	4465      	add	r5, ip
 8014abc:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D, 12,  7, 0x6B901122 );
 8014ac0:	441d      	add	r5, r3
 8014ac2:	ea81 0304 	eor.w	r3, r1, r4
 8014ac6:	4013      	ands	r3, r2
 8014ac8:	404b      	eors	r3, r1
 8014aca:	442b      	add	r3, r5
 8014acc:	4d99      	ldr	r5, [pc, #612]	; (8014d34 <mbedtls_md5_process+0x3d0>)
 8014ace:	443d      	add	r5, r7
 8014ad0:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C, 13, 12, 0xFD987193 );
 8014ad4:	440d      	add	r5, r1
 8014ad6:	ea84 0102 	eor.w	r1, r4, r2
 8014ada:	4019      	ands	r1, r3
 8014adc:	4061      	eors	r1, r4
 8014ade:	4429      	add	r1, r5
 8014ae0:	4d95      	ldr	r5, [pc, #596]	; (8014d38 <mbedtls_md5_process+0x3d4>)
 8014ae2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014ae4:	4445      	add	r5, r8
 8014ae6:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 14, 17, 0xA679438E );
 8014aea:	4425      	add	r5, r4
 8014aec:	ea82 0403 	eor.w	r4, r2, r3
 8014af0:	400c      	ands	r4, r1
 8014af2:	4054      	eors	r4, r2
 8014af4:	442c      	add	r4, r5
 8014af6:	4d91      	ldr	r5, [pc, #580]	; (8014d3c <mbedtls_md5_process+0x3d8>)
 8014af8:	443d      	add	r5, r7
 8014afa:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A, 15, 22, 0x49B40821 );
 8014afe:	4415      	add	r5, r2
 8014b00:	ea83 0201 	eor.w	r2, r3, r1
 8014b04:	4022      	ands	r2, r4
 8014b06:	405a      	eors	r2, r3
 8014b08:	9f01      	ldr	r7, [sp, #4]
 8014b0a:	442a      	add	r2, r5
 8014b0c:	4d8c      	ldr	r5, [pc, #560]	; (8014d40 <mbedtls_md5_process+0x3dc>)
 8014b0e:	eb04 22b2 	add.w	r2, r4, r2, ror #10

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 8014b12:	443d      	add	r5, r7
 8014b14:	441d      	add	r5, r3
 8014b16:	ea84 0302 	eor.w	r3, r4, r2
 8014b1a:	400b      	ands	r3, r1
 8014b1c:	4063      	eors	r3, r4
 8014b1e:	9f05      	ldr	r7, [sp, #20]
 8014b20:	442b      	add	r3, r5
 8014b22:	4d88      	ldr	r5, [pc, #544]	; (8014d44 <mbedtls_md5_process+0x3e0>)
 8014b24:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  6,  9, 0xC040B340 );
 8014b28:	443d      	add	r5, r7
 8014b2a:	440d      	add	r5, r1
 8014b2c:	ea82 0103 	eor.w	r1, r2, r3
 8014b30:	4021      	ands	r1, r4
 8014b32:	4051      	eors	r1, r2
 8014b34:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014b36:	4429      	add	r1, r5
 8014b38:	4d83      	ldr	r5, [pc, #524]	; (8014d48 <mbedtls_md5_process+0x3e4>)
 8014b3a:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 8014b3e:	443d      	add	r5, r7
 8014b40:	4425      	add	r5, r4
 8014b42:	ea83 0401 	eor.w	r4, r3, r1
 8014b46:	4014      	ands	r4, r2
 8014b48:	405c      	eors	r4, r3
 8014b4a:	442c      	add	r4, r5
 8014b4c:	4d7f      	ldr	r5, [pc, #508]	; (8014d4c <mbedtls_md5_process+0x3e8>)
 8014b4e:	9f08      	ldr	r7, [sp, #32]
 8014b50:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 8014b54:	4455      	add	r5, sl
 8014b56:	4415      	add	r5, r2
 8014b58:	ea81 0204 	eor.w	r2, r1, r4
 8014b5c:	401a      	ands	r2, r3
 8014b5e:	404a      	eors	r2, r1
 8014b60:	442a      	add	r2, r5
 8014b62:	4d7b      	ldr	r5, [pc, #492]	; (8014d50 <mbedtls_md5_process+0x3ec>)
 8014b64:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  5,  5, 0xD62F105D );
 8014b68:	4475      	add	r5, lr
 8014b6a:	441d      	add	r5, r3
 8014b6c:	ea84 0302 	eor.w	r3, r4, r2
 8014b70:	400b      	ands	r3, r1
 8014b72:	4063      	eors	r3, r4
 8014b74:	442b      	add	r3, r5
 8014b76:	4d77      	ldr	r5, [pc, #476]	; (8014d54 <mbedtls_md5_process+0x3f0>)
 8014b78:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 10,  9, 0x02441453 );
 8014b7c:	443d      	add	r5, r7
 8014b7e:	440d      	add	r5, r1
 8014b80:	ea82 0103 	eor.w	r1, r2, r3
 8014b84:	4021      	ands	r1, r4
 8014b86:	4051      	eors	r1, r2
 8014b88:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014b8a:	4429      	add	r1, r5
 8014b8c:	4d72      	ldr	r5, [pc, #456]	; (8014d58 <mbedtls_md5_process+0x3f4>)
 8014b8e:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 8014b92:	443d      	add	r5, r7
 8014b94:	4425      	add	r5, r4
 8014b96:	ea83 0401 	eor.w	r4, r3, r1
 8014b9a:	4014      	ands	r4, r2
 8014b9c:	405c      	eors	r4, r3
 8014b9e:	9f04      	ldr	r7, [sp, #16]
 8014ba0:	442c      	add	r4, r5
 8014ba2:	4d6e      	ldr	r5, [pc, #440]	; (8014d5c <mbedtls_md5_process+0x3f8>)
 8014ba4:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 8014ba8:	443d      	add	r5, r7
 8014baa:	4415      	add	r5, r2
 8014bac:	ea81 0204 	eor.w	r2, r1, r4
 8014bb0:	401a      	ands	r2, r3
 8014bb2:	404a      	eors	r2, r1
 8014bb4:	9f07      	ldr	r7, [sp, #28]
 8014bb6:	442a      	add	r2, r5
 8014bb8:	4d69      	ldr	r5, [pc, #420]	; (8014d60 <mbedtls_md5_process+0x3fc>)
 8014bba:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 8014bbe:	443d      	add	r5, r7
 8014bc0:	441d      	add	r5, r3
 8014bc2:	ea84 0302 	eor.w	r3, r4, r2
 8014bc6:	400b      	ands	r3, r1
 8014bc8:	4063      	eors	r3, r4
 8014bca:	442b      	add	r3, r5
 8014bcc:	4d65      	ldr	r5, [pc, #404]	; (8014d64 <mbedtls_md5_process+0x400>)
 8014bce:	9f03      	ldr	r7, [sp, #12]
 8014bd0:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 8014bd4:	4445      	add	r5, r8
 8014bd6:	440d      	add	r5, r1
 8014bd8:	ea82 0103 	eor.w	r1, r2, r3
 8014bdc:	4021      	ands	r1, r4
 8014bde:	4051      	eors	r1, r2
 8014be0:	4429      	add	r1, r5
 8014be2:	4d61      	ldr	r5, [pc, #388]	; (8014d68 <mbedtls_md5_process+0x404>)
 8014be4:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 8014be8:	443d      	add	r5, r7
 8014bea:	442c      	add	r4, r5
 8014bec:	ea83 0501 	eor.w	r5, r3, r1
 8014bf0:	4015      	ands	r5, r2
 8014bf2:	405d      	eors	r5, r3
 8014bf4:	9f06      	ldr	r7, [sp, #24]
 8014bf6:	442c      	add	r4, r5
 8014bf8:	4d5c      	ldr	r5, [pc, #368]	; (8014d6c <mbedtls_md5_process+0x408>)
 8014bfa:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  8, 20, 0x455A14ED );
 8014bfe:	443d      	add	r5, r7
 8014c00:	442a      	add	r2, r5
 8014c02:	ea81 0504 	eor.w	r5, r1, r4
 8014c06:	401d      	ands	r5, r3
 8014c08:	404d      	eors	r5, r1
 8014c0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014c0c:	442a      	add	r2, r5
 8014c0e:	4d58      	ldr	r5, [pc, #352]	; (8014d70 <mbedtls_md5_process+0x40c>)
 8014c10:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 8014c14:	443d      	add	r5, r7
 8014c16:	442b      	add	r3, r5
 8014c18:	ea84 0502 	eor.w	r5, r4, r2
 8014c1c:	400d      	ands	r5, r1
 8014c1e:	4065      	eors	r5, r4
 8014c20:	9f02      	ldr	r7, [sp, #8]
 8014c22:	442b      	add	r3, r5
 8014c24:	4d53      	ldr	r5, [pc, #332]	; (8014d74 <mbedtls_md5_process+0x410>)
 8014c26:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 8014c2a:	443d      	add	r5, r7
 8014c2c:	4429      	add	r1, r5
 8014c2e:	ea82 0503 	eor.w	r5, r2, r3
 8014c32:	4025      	ands	r5, r4
 8014c34:	4055      	eors	r5, r2
 8014c36:	4429      	add	r1, r5
 8014c38:	4d4f      	ldr	r5, [pc, #316]	; (8014d78 <mbedtls_md5_process+0x414>)
 8014c3a:	9f06      	ldr	r7, [sp, #24]
 8014c3c:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 8014c40:	444d      	add	r5, r9
 8014c42:	442c      	add	r4, r5
 8014c44:	ea83 0501 	eor.w	r5, r3, r1
 8014c48:	4015      	ands	r5, r2
 8014c4a:	405d      	eors	r5, r3
 8014c4c:	4425      	add	r5, r4
 8014c4e:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 8014c52:	ea81 0405 	eor.w	r4, r1, r5
 8014c56:	44e3      	add	fp, ip
 8014c58:	4493      	add	fp, r2
 8014c5a:	ea04 0203 	and.w	r2, r4, r3
 8014c5e:	404a      	eors	r2, r1
 8014c60:	445a      	add	r2, fp
 8014c62:	f5ae 2bb8 	sub.w	fp, lr, #376832	; 0x5c000
 8014c66:	eb05 3232 	add.w	r2, r5, r2, ror #12

#undef F

#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 8014c6a:	f2ab 6bbe 	subw	fp, fp, #1726	; 0x6be
 8014c6e:	4054      	eors	r4, r2
 8014c70:	445b      	add	r3, fp
 8014c72:	4423      	add	r3, r4
 8014c74:	4c41      	ldr	r4, [pc, #260]	; (8014d7c <mbedtls_md5_process+0x418>)
 8014c76:	443c      	add	r4, r7
 8014c78:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  8, 11, 0x8771F681 );
 8014c7c:	440c      	add	r4, r1
 8014c7e:	ea85 0102 	eor.w	r1, r5, r2
 8014c82:	4059      	eors	r1, r3
 8014c84:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014c86:	4421      	add	r1, r4
 8014c88:	4c3d      	ldr	r4, [pc, #244]	; (8014d80 <mbedtls_md5_process+0x41c>)
 8014c8a:	443c      	add	r4, r7
 8014c8c:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 8014c90:	4425      	add	r5, r4
 8014c92:	ea82 0403 	eor.w	r4, r2, r3
 8014c96:	404c      	eors	r4, r1
 8014c98:	4425      	add	r5, r4
 8014c9a:	4c3a      	ldr	r4, [pc, #232]	; (8014d84 <mbedtls_md5_process+0x420>)
 8014c9c:	9f01      	ldr	r7, [sp, #4]
 8014c9e:	4444      	add	r4, r8
 8014ca0:	eb01 4535 	add.w	r5, r1, r5, ror #16
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8014ca4:	4414      	add	r4, r2
 8014ca6:	ea83 0201 	eor.w	r2, r3, r1
 8014caa:	406a      	eors	r2, r5
 8014cac:	4422      	add	r2, r4
 8014cae:	4c36      	ldr	r4, [pc, #216]	; (8014d88 <mbedtls_md5_process+0x424>)
 8014cb0:	443c      	add	r4, r7
 8014cb2:	eb05 2272 	add.w	r2, r5, r2, ror #9
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 8014cb6:	441c      	add	r4, r3
 8014cb8:	ea81 0305 	eor.w	r3, r1, r5
 8014cbc:	4053      	eors	r3, r2
 8014cbe:	9f04      	ldr	r7, [sp, #16]
 8014cc0:	4423      	add	r3, r4
 8014cc2:	4c32      	ldr	r4, [pc, #200]	; (8014d8c <mbedtls_md5_process+0x428>)
 8014cc4:	443c      	add	r4, r7
 8014cc6:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 8014cca:	440c      	add	r4, r1
 8014ccc:	ea85 0102 	eor.w	r1, r5, r2
 8014cd0:	4059      	eors	r1, r3
 8014cd2:	4421      	add	r1, r4
 8014cd4:	4c2e      	ldr	r4, [pc, #184]	; (8014d90 <mbedtls_md5_process+0x42c>)
 8014cd6:	9f08      	ldr	r7, [sp, #32]
 8014cd8:	444c      	add	r4, r9
 8014cda:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 8014cde:	4425      	add	r5, r4
 8014ce0:	ea82 0403 	eor.w	r4, r2, r3
 8014ce4:	404c      	eors	r4, r1
 8014ce6:	442c      	add	r4, r5
 8014ce8:	4d2a      	ldr	r5, [pc, #168]	; (8014d94 <mbedtls_md5_process+0x430>)
 8014cea:	443d      	add	r5, r7
 8014cec:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 8014cf0:	4415      	add	r5, r2
 8014cf2:	ea83 0201 	eor.w	r2, r3, r1
 8014cf6:	4062      	eors	r2, r4
 8014cf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014cfa:	442a      	add	r2, r5
 8014cfc:	4d26      	ldr	r5, [pc, #152]	; (8014d98 <mbedtls_md5_process+0x434>)
 8014cfe:	443d      	add	r5, r7
 8014d00:	e04e      	b.n	8014da0 <mbedtls_md5_process+0x43c>
 8014d02:	bf00      	nop
 8014d04:	d76aa478 	.word	0xd76aa478
 8014d08:	c1bdceee 	.word	0xc1bdceee
 8014d0c:	e8c7b756 	.word	0xe8c7b756
 8014d10:	242070db 	.word	0x242070db
 8014d14:	f57c0faf 	.word	0xf57c0faf
 8014d18:	4787c62a 	.word	0x4787c62a
 8014d1c:	a8304613 	.word	0xa8304613
 8014d20:	fd469501 	.word	0xfd469501
 8014d24:	698098d8 	.word	0x698098d8
 8014d28:	8b44f7af 	.word	0x8b44f7af
 8014d2c:	895cd7be 	.word	0x895cd7be
 8014d30:	6b901122 	.word	0x6b901122
 8014d34:	fd987193 	.word	0xfd987193
 8014d38:	a679438e 	.word	0xa679438e
 8014d3c:	49b40821 	.word	0x49b40821
 8014d40:	f61e2562 	.word	0xf61e2562
 8014d44:	c040b340 	.word	0xc040b340
 8014d48:	265e5a51 	.word	0x265e5a51
 8014d4c:	e9b6c7aa 	.word	0xe9b6c7aa
 8014d50:	d62f105d 	.word	0xd62f105d
 8014d54:	02441453 	.word	0x02441453
 8014d58:	d8a1e681 	.word	0xd8a1e681
 8014d5c:	e7d3fbc8 	.word	0xe7d3fbc8
 8014d60:	21e1cde6 	.word	0x21e1cde6
 8014d64:	c33707d6 	.word	0xc33707d6
 8014d68:	f4d50d87 	.word	0xf4d50d87
 8014d6c:	455a14ed 	.word	0x455a14ed
 8014d70:	a9e3e905 	.word	0xa9e3e905
 8014d74:	fcefa3f8 	.word	0xfcefa3f8
 8014d78:	676f02d9 	.word	0x676f02d9
 8014d7c:	8771f681 	.word	0x8771f681
 8014d80:	6d9d6122 	.word	0x6d9d6122
 8014d84:	fde5380c 	.word	0xfde5380c
 8014d88:	a4beea44 	.word	0xa4beea44
 8014d8c:	4bdecfa9 	.word	0x4bdecfa9
 8014d90:	f6bb4b60 	.word	0xf6bb4b60
 8014d94:	bebfbc70 	.word	0xbebfbc70
 8014d98:	289b7ec6 	.word	0x289b7ec6
 8014d9c:	8d2a4c8a 	.word	0x8d2a4c8a
 8014da0:	eb04 2272 	add.w	r2, r4, r2, ror #9
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 8014da4:	441d      	add	r5, r3
 8014da6:	ea81 0304 	eor.w	r3, r1, r4
 8014daa:	4053      	eors	r3, r2
 8014dac:	442b      	add	r3, r5
 8014dae:	4d7b      	ldr	r5, [pc, #492]	; (8014f9c <mbedtls_md5_process+0x638>)
 8014db0:	9f03      	ldr	r7, [sp, #12]
 8014db2:	4455      	add	r5, sl
 8014db4:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 8014db8:	4429      	add	r1, r5
 8014dba:	ea84 0502 	eor.w	r5, r4, r2
 8014dbe:	405d      	eors	r5, r3
 8014dc0:	4429      	add	r1, r5
 8014dc2:	4d77      	ldr	r5, [pc, #476]	; (8014fa0 <mbedtls_md5_process+0x63c>)
 8014dc4:	443d      	add	r5, r7
 8014dc6:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 8014dca:	4425      	add	r5, r4
 8014dcc:	ea82 0403 	eor.w	r4, r2, r3
 8014dd0:	404c      	eors	r4, r1
 8014dd2:	9f05      	ldr	r7, [sp, #20]
 8014dd4:	442c      	add	r4, r5
 8014dd6:	4d73      	ldr	r5, [pc, #460]	; (8014fa4 <mbedtls_md5_process+0x640>)
 8014dd8:	443d      	add	r5, r7
 8014dda:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A,  6, 23, 0x04881D05 );
 8014dde:	442a      	add	r2, r5
 8014de0:	ea83 0501 	eor.w	r5, r3, r1
 8014de4:	4065      	eors	r5, r4
 8014de6:	9f07      	ldr	r7, [sp, #28]
 8014de8:	4415      	add	r5, r2
 8014dea:	4a6f      	ldr	r2, [pc, #444]	; (8014fa8 <mbedtls_md5_process+0x644>)
 8014dec:	443a      	add	r2, r7
 8014dee:	eb04 2575 	add.w	r5, r4, r5, ror #9
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 8014df2:	4413      	add	r3, r2
 8014df4:	ea81 0204 	eor.w	r2, r1, r4
 8014df8:	406a      	eors	r2, r5
 8014dfa:	441a      	add	r2, r3
 8014dfc:	4b6b      	ldr	r3, [pc, #428]	; (8014fac <mbedtls_md5_process+0x648>)
 8014dfe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014e00:	4463      	add	r3, ip
 8014e02:	eb05 7232 	add.w	r2, r5, r2, ror #28
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 8014e06:	440b      	add	r3, r1
 8014e08:	ea84 0105 	eor.w	r1, r4, r5
 8014e0c:	4051      	eors	r1, r2
 8014e0e:	4419      	add	r1, r3
 8014e10:	4b67      	ldr	r3, [pc, #412]	; (8014fb0 <mbedtls_md5_process+0x64c>)
 8014e12:	443b      	add	r3, r7
 8014e14:	eb02 5171 	add.w	r1, r2, r1, ror #21
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 8014e18:	441c      	add	r4, r3
 8014e1a:	ea85 0302 	eor.w	r3, r5, r2
 8014e1e:	404b      	eors	r3, r1
 8014e20:	9f02      	ldr	r7, [sp, #8]
 8014e22:	441c      	add	r4, r3
 8014e24:	4b63      	ldr	r3, [pc, #396]	; (8014fb4 <mbedtls_md5_process+0x650>)
 8014e26:	443b      	add	r3, r7
 8014e28:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 8014e2c:	441d      	add	r5, r3
 8014e2e:	ea82 0301 	eor.w	r3, r2, r1
 8014e32:	4063      	eors	r3, r4
 8014e34:	442b      	add	r3, r5
 8014e36:	4d60      	ldr	r5, [pc, #384]	; (8014fb8 <mbedtls_md5_process+0x654>)
 8014e38:	9f03      	ldr	r7, [sp, #12]
 8014e3a:	eb04 2373 	add.w	r3, r4, r3, ror #9

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 8014e3e:	4455      	add	r5, sl
 8014e40:	ea63 0a01 	orn	sl, r3, r1
 8014e44:	ea8a 0a04 	eor.w	sl, sl, r4
 8014e48:	442a      	add	r2, r5
 8014e4a:	4452      	add	r2, sl
 8014e4c:	4d5b      	ldr	r5, [pc, #364]	; (8014fbc <mbedtls_md5_process+0x658>)
 8014e4e:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 8014e52:	444d      	add	r5, r9
 8014e54:	ea62 0904 	orn	r9, r2, r4
 8014e58:	ea89 0903 	eor.w	r9, r9, r3
 8014e5c:	4429      	add	r1, r5
 8014e5e:	4449      	add	r1, r9
 8014e60:	4d57      	ldr	r5, [pc, #348]	; (8014fc0 <mbedtls_md5_process+0x65c>)
 8014e62:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 8014e66:	4445      	add	r5, r8
 8014e68:	ea61 0803 	orn	r8, r1, r3
 8014e6c:	ea88 0802 	eor.w	r8, r8, r2
 8014e70:	442c      	add	r4, r5
 8014e72:	4444      	add	r4, r8
 8014e74:	4d53      	ldr	r5, [pc, #332]	; (8014fc4 <mbedtls_md5_process+0x660>)
 8014e76:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 8014e7a:	4475      	add	r5, lr
 8014e7c:	ea64 0e02 	orn	lr, r4, r2
 8014e80:	ea8e 0e01 	eor.w	lr, lr, r1
 8014e84:	442b      	add	r3, r5
 8014e86:	4473      	add	r3, lr
 8014e88:	4d4f      	ldr	r5, [pc, #316]	; (8014fc8 <mbedtls_md5_process+0x664>)
 8014e8a:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 8014e8e:	4465      	add	r5, ip
 8014e90:	ea63 0c01 	orn	ip, r3, r1
 8014e94:	ea8c 0c04 	eor.w	ip, ip, r4
 8014e98:	442a      	add	r2, r5
 8014e9a:	4d4c      	ldr	r5, [pc, #304]	; (8014fcc <mbedtls_md5_process+0x668>)
 8014e9c:	4462      	add	r2, ip
 8014e9e:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 8014ea2:	443d      	add	r5, r7
 8014ea4:	4429      	add	r1, r5
 8014ea6:	ea62 0704 	orn	r7, r2, r4
 8014eaa:	9d08      	ldr	r5, [sp, #32]
 8014eac:	405f      	eors	r7, r3
 8014eae:	4439      	add	r1, r7
 8014eb0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014eb4:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 8014eb8:	f6a5 3583 	subw	r5, r5, #2947	; 0xb83
 8014ebc:	4425      	add	r5, r4
 8014ebe:	ea61 0403 	orn	r4, r1, r3
 8014ec2:	4054      	eors	r4, r2
 8014ec4:	9f01      	ldr	r7, [sp, #4]
 8014ec6:	442c      	add	r4, r5
 8014ec8:	4d41      	ldr	r5, [pc, #260]	; (8014fd0 <mbedtls_md5_process+0x66c>)
 8014eca:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 8014ece:	443d      	add	r5, r7
 8014ed0:	ea64 0702 	orn	r7, r4, r2
 8014ed4:	404f      	eors	r7, r1
 8014ed6:	442b      	add	r3, r5
 8014ed8:	443b      	add	r3, r7
 8014eda:	4d3e      	ldr	r5, [pc, #248]	; (8014fd4 <mbedtls_md5_process+0x670>)
 8014edc:	9f06      	ldr	r7, [sp, #24]
 8014ede:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 8014ee2:	443d      	add	r5, r7
 8014ee4:	ea63 0701 	orn	r7, r3, r1
 8014ee8:	4067      	eors	r7, r4
 8014eea:	442a      	add	r2, r5
 8014eec:	443a      	add	r2, r7
 8014eee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014ef0:	4f39      	ldr	r7, [pc, #228]	; (8014fd8 <mbedtls_md5_process+0x674>)
 8014ef2:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 8014ef6:	442f      	add	r7, r5
 8014ef8:	ea62 0c04 	orn	ip, r2, r4
 8014efc:	ea8c 0c03 	eor.w	ip, ip, r3
 8014f00:	4439      	add	r1, r7
 8014f02:	4461      	add	r1, ip
 8014f04:	9f05      	ldr	r7, [sp, #20]
 8014f06:	4d35      	ldr	r5, [pc, #212]	; (8014fdc <mbedtls_md5_process+0x678>)
 8014f08:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  6, 15, 0xA3014314 );
 8014f0c:	443d      	add	r5, r7
 8014f0e:	ea61 0703 	orn	r7, r1, r3
 8014f12:	4057      	eors	r7, r2
 8014f14:	442c      	add	r4, r5
 8014f16:	443c      	add	r4, r7
 8014f18:	4d31      	ldr	r5, [pc, #196]	; (8014fe0 <mbedtls_md5_process+0x67c>)
 8014f1a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014f1c:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 8014f20:	443d      	add	r5, r7
 8014f22:	441d      	add	r5, r3
 8014f24:	ea64 0302 	orn	r3, r4, r2
 8014f28:	404b      	eors	r3, r1
 8014f2a:	9f04      	ldr	r7, [sp, #16]
 8014f2c:	442b      	add	r3, r5
 8014f2e:	4d2d      	ldr	r5, [pc, #180]	; (8014fe4 <mbedtls_md5_process+0x680>)
 8014f30:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 8014f34:	443d      	add	r5, r7
 8014f36:	4415      	add	r5, r2
 8014f38:	ea63 0201 	orn	r2, r3, r1
 8014f3c:	4062      	eors	r2, r4
 8014f3e:	442a      	add	r2, r5
 8014f40:	4f29      	ldr	r7, [pc, #164]	; (8014fe8 <mbedtls_md5_process+0x684>)
 8014f42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8014f44:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 8014f48:	442f      	add	r7, r5
 8014f4a:	440f      	add	r7, r1
 8014f4c:	ea62 0104 	orn	r1, r2, r4
 8014f50:	4059      	eors	r1, r3
 8014f52:	4439      	add	r1, r7
 8014f54:	4d25      	ldr	r5, [pc, #148]	; (8014fec <mbedtls_md5_process+0x688>)
 8014f56:	9f02      	ldr	r7, [sp, #8]
 8014f58:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 8014f5c:	443d      	add	r5, r7
 8014f5e:	4425      	add	r5, r4
 8014f60:	ea61 0403 	orn	r4, r1, r3
 8014f64:	4054      	eors	r4, r2
 8014f66:	9f07      	ldr	r7, [sp, #28]
 8014f68:	442c      	add	r4, r5
 8014f6a:	4d21      	ldr	r5, [pc, #132]	; (8014ff0 <mbedtls_md5_process+0x68c>)
 8014f6c:	443d      	add	r5, r7
 8014f6e:	442b      	add	r3, r5
    P( B, C, D, A,  9, 21, 0xEB86D391 );

#undef F

    ctx->state[0] += A;
 8014f70:	6885      	ldr	r5, [r0, #8]
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 8014f72:	eb01 4474 	add.w	r4, r1, r4, ror #17
    ctx->state[0] += A;
 8014f76:	4415      	add	r5, r2
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 8014f78:	ea64 0202 	orn	r2, r4, r2
 8014f7c:	404a      	eors	r2, r1
 8014f7e:	441a      	add	r2, r3
    ctx->state[1] += B;
    ctx->state[2] += C;
 8014f80:	6903      	ldr	r3, [r0, #16]
    ctx->state[0] += A;
 8014f82:	6085      	str	r5, [r0, #8]
    ctx->state[1] += B;
 8014f84:	4426      	add	r6, r4
    ctx->state[2] += C;
 8014f86:	441c      	add	r4, r3
    ctx->state[3] += D;
 8014f88:	6943      	ldr	r3, [r0, #20]
    ctx->state[2] += C;
 8014f8a:	6104      	str	r4, [r0, #16]
    ctx->state[1] += B;
 8014f8c:	eb06 26f2 	add.w	r6, r6, r2, ror #11
    ctx->state[3] += D;
 8014f90:	4419      	add	r1, r3
    ctx->state[1] += B;
 8014f92:	60c6      	str	r6, [r0, #12]
    ctx->state[3] += D;
 8014f94:	6141      	str	r1, [r0, #20]
}
 8014f96:	b00d      	add	sp, #52	; 0x34
 8014f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f9c:	eaa127fa 	.word	0xeaa127fa
 8014fa0:	d4ef3085 	.word	0xd4ef3085
 8014fa4:	04881d05 	.word	0x04881d05
 8014fa8:	d9d4d039 	.word	0xd9d4d039
 8014fac:	e6db99e5 	.word	0xe6db99e5
 8014fb0:	1fa27cf8 	.word	0x1fa27cf8
 8014fb4:	c4ac5665 	.word	0xc4ac5665
 8014fb8:	f4292244 	.word	0xf4292244
 8014fbc:	432aff97 	.word	0x432aff97
 8014fc0:	ab9423a7 	.word	0xab9423a7
 8014fc4:	fc93a039 	.word	0xfc93a039
 8014fc8:	655b59c3 	.word	0x655b59c3
 8014fcc:	8f0ccc92 	.word	0x8f0ccc92
 8014fd0:	85845dd1 	.word	0x85845dd1
 8014fd4:	6fa87e4f 	.word	0x6fa87e4f
 8014fd8:	fe2ce6e0 	.word	0xfe2ce6e0
 8014fdc:	a3014314 	.word	0xa3014314
 8014fe0:	4e0811a1 	.word	0x4e0811a1
 8014fe4:	f7537e82 	.word	0xf7537e82
 8014fe8:	bd3af235 	.word	0xbd3af235
 8014fec:	2ad7d2bb 	.word	0x2ad7d2bb
 8014ff0:	eb86d391 	.word	0xeb86d391

08014ff4 <mbedtls_md5_update.part.0>:
#endif /* !MBEDTLS_MD5_PROCESS_ALT */

/*
 * MD5 process buffer
 */
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 8014ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 8014ff8:	6803      	ldr	r3, [r0, #0]
 8014ffa:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8014ffe:	189b      	adds	r3, r3, r2
 8015000:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8015002:	bf24      	itt	cs
 8015004:	6843      	ldrcs	r3, [r0, #4]
 8015006:	3301      	addcs	r3, #1
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 8015008:	4605      	mov	r5, r0
 801500a:	460e      	mov	r6, r1
 801500c:	4614      	mov	r4, r2
        ctx->total[1]++;
 801500e:	bf28      	it	cs
 8015010:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8015012:	b197      	cbz	r7, 801503a <mbedtls_md5_update.part.0+0x46>
    fill = 64 - left;
 8015014:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 8015018:	4591      	cmp	r9, r2
 801501a:	d80e      	bhi.n	801503a <mbedtls_md5_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801501c:	f100 0818 	add.w	r8, r0, #24
 8015020:	464a      	mov	r2, r9
 8015022:	eb08 0007 	add.w	r0, r8, r7
 8015026:	f00d f8bf 	bl	80221a8 <memcpy>
        mbedtls_md5_process( ctx, ctx->buffer );
 801502a:	4641      	mov	r1, r8
 801502c:	4628      	mov	r0, r5
 801502e:	f7ff fc99 	bl	8014964 <mbedtls_md5_process>
        input += fill;
 8015032:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 8015034:	443c      	add	r4, r7
        input += fill;
 8015036:	444e      	add	r6, r9
        left = 0;
 8015038:	2700      	movs	r7, #0
 801503a:	46a0      	mov	r8, r4
 801503c:	eb06 0904 	add.w	r9, r6, r4
 8015040:	e004      	b.n	801504c <mbedtls_md5_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_md5_process( ctx, input );
 8015042:	4628      	mov	r0, r5
 8015044:	f7ff fc8e 	bl	8014964 <mbedtls_md5_process>
        input += 64;
        ilen  -= 64;
 8015048:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 801504c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8015050:	eba9 0108 	sub.w	r1, r9, r8
 8015054:	d8f5      	bhi.n	8015042 <mbedtls_md5_update.part.0+0x4e>
 8015056:	09a2      	lsrs	r2, r4, #6
 8015058:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 801505c:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8015060:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 8015064:	4431      	add	r1, r6
 8015066:	b132      	cbz	r2, 8015076 <mbedtls_md5_update.part.0+0x82>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8015068:	f105 0018 	add.w	r0, r5, #24
 801506c:	4438      	add	r0, r7
    }
}
 801506e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8015072:	f00d b899 	b.w	80221a8 <memcpy>
}
 8015076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801507a <mbedtls_md5_update>:
    if( ilen == 0 )
 801507a:	b10a      	cbz	r2, 8015080 <mbedtls_md5_update+0x6>
 801507c:	f7ff bfba 	b.w	8014ff4 <mbedtls_md5_update.part.0>
}
 8015080:	4770      	bx	lr
	...

08015084 <mbedtls_md5_finish>:

/*
 * MD5 final digest
 */
void mbedtls_md5_finish( mbedtls_md5_context *ctx, unsigned char output[16] )
{
 8015084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015086:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8015088:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 801508c:	0f53      	lsrs	r3, r2, #29
 801508e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 8015092:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_LE( low,  msglen, 0 );
    PUT_UINT32_LE( high, msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8015094:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8015098:	2a37      	cmp	r2, #55	; 0x37
{
 801509a:	4604      	mov	r4, r0
    PUT_UINT32_LE( high, msglen, 4 );
 801509c:	e9cd 1300 	strd	r1, r3, [sp]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80150a0:	bf94      	ite	ls
 80150a2:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 80150a6:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_md5_update( ctx, md5_padding, padn );
 80150aa:	4917      	ldr	r1, [pc, #92]	; (8015108 <mbedtls_md5_finish+0x84>)
 80150ac:	f7ff ffe5 	bl	801507a <mbedtls_md5_update>
    if( ilen == 0 )
 80150b0:	2208      	movs	r2, #8
 80150b2:	4669      	mov	r1, sp
 80150b4:	4620      	mov	r0, r4
 80150b6:	f7ff ff9d 	bl	8014ff4 <mbedtls_md5_update.part.0>
    mbedtls_md5_update( ctx, msglen, 8 );

    PUT_UINT32_LE( ctx->state[0], output,  0 );
 80150ba:	68a3      	ldr	r3, [r4, #8]
 80150bc:	702b      	strb	r3, [r5, #0]
 80150be:	68a3      	ldr	r3, [r4, #8]
 80150c0:	0a1b      	lsrs	r3, r3, #8
 80150c2:	706b      	strb	r3, [r5, #1]
 80150c4:	8963      	ldrh	r3, [r4, #10]
 80150c6:	70ab      	strb	r3, [r5, #2]
 80150c8:	7ae3      	ldrb	r3, [r4, #11]
 80150ca:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 80150cc:	68e3      	ldr	r3, [r4, #12]
 80150ce:	712b      	strb	r3, [r5, #4]
 80150d0:	68e3      	ldr	r3, [r4, #12]
 80150d2:	0a1b      	lsrs	r3, r3, #8
 80150d4:	716b      	strb	r3, [r5, #5]
 80150d6:	89e3      	ldrh	r3, [r4, #14]
 80150d8:	71ab      	strb	r3, [r5, #6]
 80150da:	7be3      	ldrb	r3, [r4, #15]
 80150dc:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 80150de:	6923      	ldr	r3, [r4, #16]
 80150e0:	722b      	strb	r3, [r5, #8]
 80150e2:	6923      	ldr	r3, [r4, #16]
 80150e4:	0a1b      	lsrs	r3, r3, #8
 80150e6:	726b      	strb	r3, [r5, #9]
 80150e8:	8a63      	ldrh	r3, [r4, #18]
 80150ea:	72ab      	strb	r3, [r5, #10]
 80150ec:	7ce3      	ldrb	r3, [r4, #19]
 80150ee:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 80150f0:	6963      	ldr	r3, [r4, #20]
 80150f2:	732b      	strb	r3, [r5, #12]
 80150f4:	6963      	ldr	r3, [r4, #20]
 80150f6:	0a1b      	lsrs	r3, r3, #8
 80150f8:	736b      	strb	r3, [r5, #13]
 80150fa:	8ae3      	ldrh	r3, [r4, #22]
 80150fc:	73ab      	strb	r3, [r5, #14]
 80150fe:	7de3      	ldrb	r3, [r4, #23]
 8015100:	73eb      	strb	r3, [r5, #15]
}
 8015102:	b003      	add	sp, #12
 8015104:	bd30      	pop	{r4, r5, pc}
 8015106:	bf00      	nop
 8015108:	0802ba0c 	.word	0x0802ba0c

0801510c <mbedtls_md5>:

/*
 * output = MD5( input buffer )
 */
void mbedtls_md5( const unsigned char *input, size_t ilen, unsigned char output[16] )
{
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	b096      	sub	sp, #88	; 0x58
 8015110:	4605      	mov	r5, r0
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 8015112:	4668      	mov	r0, sp
{
 8015114:	460e      	mov	r6, r1
 8015116:	4614      	mov	r4, r2
    mbedtls_md5_init( &ctx );
 8015118:	f7ff fbfa 	bl	8014910 <mbedtls_md5_init>
    mbedtls_md5_starts( &ctx );
 801511c:	4668      	mov	r0, sp
 801511e:	f7ff fc0b 	bl	8014938 <mbedtls_md5_starts>
    mbedtls_md5_update( &ctx, input, ilen );
 8015122:	4632      	mov	r2, r6
 8015124:	4629      	mov	r1, r5
 8015126:	4668      	mov	r0, sp
 8015128:	f7ff ffa7 	bl	801507a <mbedtls_md5_update>
    mbedtls_md5_finish( &ctx, output );
 801512c:	4621      	mov	r1, r4
 801512e:	4668      	mov	r0, sp
 8015130:	f7ff ffa8 	bl	8015084 <mbedtls_md5_finish>
    mbedtls_md5_free( &ctx );
 8015134:	4668      	mov	r0, sp
 8015136:	f7ff fbef 	bl	8014918 <mbedtls_md5_free>
}
 801513a:	b016      	add	sp, #88	; 0x58
 801513c:	bd70      	pop	{r4, r5, r6, pc}

0801513e <md5_process_wrap>:
                 (const mbedtls_md5_context *) src );
}

static void md5_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_md5_process( (mbedtls_md5_context *) ctx, data );
 801513e:	f7ff bc11 	b.w	8014964 <mbedtls_md5_process>

08015142 <md5_clone_wrap>:
    mbedtls_md5_clone( (mbedtls_md5_context *) dst,
 8015142:	f7ff bbf3 	b.w	801492c <mbedtls_md5_clone>
	...

08015148 <md5_ctx_free>:
{
 8015148:	b510      	push	{r4, lr}
 801514a:	4604      	mov	r4, r0
    mbedtls_md5_free( (mbedtls_md5_context *) ctx );
 801514c:	f7ff fbe4 	bl	8014918 <mbedtls_md5_free>
    mbedtls_free( ctx );
 8015150:	4b02      	ldr	r3, [pc, #8]	; (801515c <md5_ctx_free+0x14>)
 8015152:	4620      	mov	r0, r4
 8015154:	681b      	ldr	r3, [r3, #0]
}
 8015156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801515a:	4718      	bx	r3
 801515c:	2000053c 	.word	0x2000053c

08015160 <md5_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 8015160:	4b05      	ldr	r3, [pc, #20]	; (8015178 <md5_ctx_alloc+0x18>)
{
 8015162:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	2158      	movs	r1, #88	; 0x58
 8015168:	2001      	movs	r0, #1
 801516a:	4798      	blx	r3
    if( ctx != NULL )
 801516c:	4604      	mov	r4, r0
 801516e:	b108      	cbz	r0, 8015174 <md5_ctx_alloc+0x14>
        mbedtls_md5_init( (mbedtls_md5_context *) ctx );
 8015170:	f7ff fbce 	bl	8014910 <mbedtls_md5_init>
}
 8015174:	4620      	mov	r0, r4
 8015176:	bd10      	pop	{r4, pc}
 8015178:	20000538 	.word	0x20000538

0801517c <md5_finish_wrap>:
    mbedtls_md5_finish( (mbedtls_md5_context *) ctx, output );
 801517c:	f7ff bf82 	b.w	8015084 <mbedtls_md5_finish>

08015180 <md5_update_wrap>:
    mbedtls_md5_update( (mbedtls_md5_context *) ctx, input, ilen );
 8015180:	f7ff bf7b 	b.w	801507a <mbedtls_md5_update>

08015184 <md5_starts_wrap>:
    mbedtls_md5_starts( (mbedtls_md5_context *) ctx );
 8015184:	f7ff bbd8 	b.w	8014938 <mbedtls_md5_starts>

08015188 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static void sha1_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha1_process( (mbedtls_sha1_context *) ctx, data );
 8015188:	f002 bb1e 	b.w	80177c8 <mbedtls_sha1_process>

0801518c <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 801518c:	f002 bafd 	b.w	801778a <mbedtls_sha1_clone>

08015190 <sha1_ctx_free>:
{
 8015190:	b510      	push	{r4, lr}
 8015192:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 8015194:	f002 faef 	bl	8017776 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 8015198:	4b02      	ldr	r3, [pc, #8]	; (80151a4 <sha1_ctx_free+0x14>)
 801519a:	4620      	mov	r0, r4
 801519c:	681b      	ldr	r3, [r3, #0]
}
 801519e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80151a2:	4718      	bx	r3
 80151a4:	2000053c 	.word	0x2000053c

080151a8 <sha1_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80151a8:	4b05      	ldr	r3, [pc, #20]	; (80151c0 <sha1_ctx_alloc+0x18>)
{
 80151aa:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	215c      	movs	r1, #92	; 0x5c
 80151b0:	2001      	movs	r0, #1
 80151b2:	4798      	blx	r3
    if( ctx != NULL )
 80151b4:	4604      	mov	r4, r0
 80151b6:	b108      	cbz	r0, 80151bc <sha1_ctx_alloc+0x14>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80151b8:	f002 fad9 	bl	801776e <mbedtls_sha1_init>
}
 80151bc:	4620      	mov	r0, r4
 80151be:	bd10      	pop	{r4, pc}
 80151c0:	20000538 	.word	0x20000538

080151c4 <sha1_finish_wrap>:
    mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx, output );
 80151c4:	f003 ba48 	b.w	8018658 <mbedtls_sha1_finish>

080151c8 <sha1_update_wrap>:
    mbedtls_sha1_update( (mbedtls_sha1_context *) ctx, input, ilen );
 80151c8:	f003 ba41 	b.w	801864e <mbedtls_sha1_update>

080151cc <sha1_starts_wrap>:
    mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx );
 80151cc:	f002 bae2 	b.w	8017794 <mbedtls_sha1_starts>

080151d0 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static void sha224_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha256_process( (mbedtls_sha256_context *) ctx, data );
 80151d0:	f003 bb0e 	b.w	80187f0 <mbedtls_sha256_process>

080151d4 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 80151d4:	f003 bab5 	b.w	8018742 <mbedtls_sha256_clone>

080151d8 <sha224_ctx_free>:
{
 80151d8:	b510      	push	{r4, lr}
 80151da:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 80151dc:	f003 faa7 	bl	801872e <mbedtls_sha256_free>
    mbedtls_free( ctx );
 80151e0:	4b02      	ldr	r3, [pc, #8]	; (80151ec <sha224_ctx_free+0x14>)
 80151e2:	4620      	mov	r0, r4
 80151e4:	681b      	ldr	r3, [r3, #0]
}
 80151e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80151ea:	4718      	bx	r3
 80151ec:	2000053c 	.word	0x2000053c

080151f0 <sha224_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80151f0:	4b05      	ldr	r3, [pc, #20]	; (8015208 <sha224_ctx_alloc+0x18>)
{
 80151f2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	216c      	movs	r1, #108	; 0x6c
 80151f8:	2001      	movs	r0, #1
 80151fa:	4798      	blx	r3
    if( ctx != NULL )
 80151fc:	4604      	mov	r4, r0
 80151fe:	b108      	cbz	r0, 8015204 <sha224_ctx_alloc+0x14>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8015200:	f003 fa91 	bl	8018726 <mbedtls_sha256_init>
}
 8015204:	4620      	mov	r0, r4
 8015206:	bd10      	pop	{r4, pc}
 8015208:	20000538 	.word	0x20000538

0801520c <sha224_wrap>:
    mbedtls_sha256( input, ilen, output, 1 );
 801520c:	2301      	movs	r3, #1
 801520e:	f003 bf01 	b.w	8019014 <mbedtls_sha256>

08015212 <sha256_wrap>:
}

static void sha256_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha256( input, ilen, output, 0 );
 8015212:	2300      	movs	r3, #0
 8015214:	f003 befe 	b.w	8019014 <mbedtls_sha256>

08015218 <sha224_finish_wrap>:
    mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx, output );
 8015218:	f003 be8e 	b.w	8018f38 <mbedtls_sha256_finish>

0801521c <sha224_update_wrap>:
    mbedtls_sha256_update( (mbedtls_sha256_context *) ctx, input, ilen );
 801521c:	f003 be87 	b.w	8018f2e <mbedtls_sha256_update>

08015220 <sha224_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 1 );
 8015220:	2101      	movs	r1, #1
 8015222:	f003 ba93 	b.w	801874c <mbedtls_sha256_starts>

08015226 <sha256_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 0 );
 8015226:	2100      	movs	r1, #0
 8015228:	f003 ba90 	b.w	801874c <mbedtls_sha256_starts>

0801522c <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static void sha384_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha512_process( (mbedtls_sha512_context *) ctx, data );
 801522c:	f003 bfbc 	b.w	80191a8 <mbedtls_sha512_process>

08015230 <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 8015230:	f003 bf19 	b.w	8019066 <mbedtls_sha512_clone>

08015234 <sha384_ctx_free>:
{
 8015234:	b510      	push	{r4, lr}
 8015236:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8015238:	f003 ff0b 	bl	8019052 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 801523c:	4b02      	ldr	r3, [pc, #8]	; (8015248 <sha384_ctx_free+0x14>)
 801523e:	4620      	mov	r0, r4
 8015240:	681b      	ldr	r3, [r3, #0]
}
 8015242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015246:	4718      	bx	r3
 8015248:	2000053c 	.word	0x2000053c

0801524c <sha384_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 801524c:	4b05      	ldr	r3, [pc, #20]	; (8015264 <sha384_ctx_alloc+0x18>)
{
 801524e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	21d8      	movs	r1, #216	; 0xd8
 8015254:	2001      	movs	r0, #1
 8015256:	4798      	blx	r3
    if( ctx != NULL )
 8015258:	4604      	mov	r4, r0
 801525a:	b108      	cbz	r0, 8015260 <sha384_ctx_alloc+0x14>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 801525c:	f003 fef5 	bl	801904a <mbedtls_sha512_init>
}
 8015260:	4620      	mov	r0, r4
 8015262:	bd10      	pop	{r4, pc}
 8015264:	20000538 	.word	0x20000538

08015268 <sha384_wrap>:
    mbedtls_sha512( input, ilen, output, 1 );
 8015268:	2301      	movs	r3, #1
 801526a:	f004 be65 	b.w	8019f38 <mbedtls_sha512>

0801526e <sha512_wrap>:
}

static void sha512_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha512( input, ilen, output, 0 );
 801526e:	2300      	movs	r3, #0
 8015270:	f004 be62 	b.w	8019f38 <mbedtls_sha512>

08015274 <sha384_finish_wrap>:
    mbedtls_sha512_finish( (mbedtls_sha512_context *) ctx, output );
 8015274:	f004 bd5a 	b.w	8019d2c <mbedtls_sha512_finish>

08015278 <sha384_update_wrap>:
    mbedtls_sha512_update( (mbedtls_sha512_context *) ctx, input, ilen );
 8015278:	f004 bd53 	b.w	8019d22 <mbedtls_sha512_update>

0801527c <sha384_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 1 );
 801527c:	2101      	movs	r1, #1
 801527e:	f003 bef7 	b.w	8019070 <mbedtls_sha512_starts>

08015282 <sha512_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 0 );
 8015282:	2100      	movs	r1, #0
 8015284:	f003 bef4 	b.w	8019070 <mbedtls_sha512_starts>

08015288 <oid_sig_alg_from_asn1.part.0>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8015288:	b538      	push	{r3, r4, r5, lr}
 801528a:	4c09      	ldr	r4, [pc, #36]	; (80152b0 <oid_sig_alg_from_asn1.part.0+0x28>)
 801528c:	4605      	mov	r5, r0
 801528e:	6820      	ldr	r0, [r4, #0]
 8015290:	b910      	cbnz	r0, 8015298 <oid_sig_alg_from_asn1.part.0+0x10>
 8015292:	4604      	mov	r4, r0
 8015294:	4620      	mov	r0, r4
 8015296:	bd38      	pop	{r3, r4, r5, pc}
 8015298:	686b      	ldr	r3, [r5, #4]
 801529a:	6862      	ldr	r2, [r4, #4]
 801529c:	429a      	cmp	r2, r3
 801529e:	d104      	bne.n	80152aa <oid_sig_alg_from_asn1.part.0+0x22>
 80152a0:	68a9      	ldr	r1, [r5, #8]
 80152a2:	f00c ff73 	bl	802218c <memcmp>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d0f4      	beq.n	8015294 <oid_sig_alg_from_asn1.part.0+0xc>
 80152aa:	3414      	adds	r4, #20
 80152ac:	e7ef      	b.n	801528e <oid_sig_alg_from_asn1.part.0+0x6>
 80152ae:	bf00      	nop
 80152b0:	0802be30 	.word	0x0802be30

080152b4 <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80152b4:	b570      	push	{r4, r5, r6, lr}
 80152b6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80152b8:	4605      	mov	r5, r0
 80152ba:	b110      	cbz	r0, 80152c2 <mbedtls_oid_get_attr_short_name+0xe>
 80152bc:	4c09      	ldr	r4, [pc, #36]	; (80152e4 <mbedtls_oid_get_attr_short_name+0x30>)
 80152be:	6820      	ldr	r0, [r4, #0]
 80152c0:	b910      	cbnz	r0, 80152c8 <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80152c2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80152c6:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80152c8:	686b      	ldr	r3, [r5, #4]
 80152ca:	6862      	ldr	r2, [r4, #4]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d103      	bne.n	80152d8 <mbedtls_oid_get_attr_short_name+0x24>
 80152d0:	68a9      	ldr	r1, [r5, #8]
 80152d2:	f00c ff5b 	bl	802218c <memcmp>
 80152d6:	b108      	cbz	r0, 80152dc <mbedtls_oid_get_attr_short_name+0x28>
 80152d8:	3414      	adds	r4, #20
 80152da:	e7f0      	b.n	80152be <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80152dc:	6923      	ldr	r3, [r4, #16]
 80152de:	6033      	str	r3, [r6, #0]
 80152e0:	e7f1      	b.n	80152c6 <mbedtls_oid_get_attr_short_name+0x12>
 80152e2:	bf00      	nop
 80152e4:	0802bf48 	.word	0x0802bf48

080152e8 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80152e8:	b570      	push	{r4, r5, r6, lr}
 80152ea:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80152ec:	4605      	mov	r5, r0
 80152ee:	b110      	cbz	r0, 80152f6 <mbedtls_oid_get_x509_ext_type+0xe>
 80152f0:	4c09      	ldr	r4, [pc, #36]	; (8015318 <mbedtls_oid_get_x509_ext_type+0x30>)
 80152f2:	6820      	ldr	r0, [r4, #0]
 80152f4:	b910      	cbnz	r0, 80152fc <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 80152f6:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80152fa:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 80152fc:	686b      	ldr	r3, [r5, #4]
 80152fe:	6862      	ldr	r2, [r4, #4]
 8015300:	429a      	cmp	r2, r3
 8015302:	d103      	bne.n	801530c <mbedtls_oid_get_x509_ext_type+0x24>
 8015304:	68a9      	ldr	r1, [r5, #8]
 8015306:	f00c ff41 	bl	802218c <memcmp>
 801530a:	b108      	cbz	r0, 8015310 <mbedtls_oid_get_x509_ext_type+0x28>
 801530c:	3414      	adds	r4, #20
 801530e:	e7f0      	b.n	80152f2 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8015310:	6923      	ldr	r3, [r4, #16]
 8015312:	6033      	str	r3, [r6, #0]
 8015314:	e7f1      	b.n	80152fa <mbedtls_oid_get_x509_ext_type+0x12>
 8015316:	bf00      	nop
 8015318:	0802c0d8 	.word	0x0802c0d8

0801531c <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 801531c:	b570      	push	{r4, r5, r6, lr}
 801531e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015320:	4605      	mov	r5, r0
 8015322:	b110      	cbz	r0, 801532a <mbedtls_oid_get_extended_key_usage+0xe>
 8015324:	4c09      	ldr	r4, [pc, #36]	; (801534c <mbedtls_oid_get_extended_key_usage+0x30>)
 8015326:	6820      	ldr	r0, [r4, #0]
 8015328:	b910      	cbnz	r0, 8015330 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 801532a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801532e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015330:	686b      	ldr	r3, [r5, #4]
 8015332:	6862      	ldr	r2, [r4, #4]
 8015334:	429a      	cmp	r2, r3
 8015336:	d103      	bne.n	8015340 <mbedtls_oid_get_extended_key_usage+0x24>
 8015338:	68a9      	ldr	r1, [r5, #8]
 801533a:	f00c ff27 	bl	802218c <memcmp>
 801533e:	b108      	cbz	r0, 8015344 <mbedtls_oid_get_extended_key_usage+0x28>
 8015340:	3410      	adds	r4, #16
 8015342:	e7f0      	b.n	8015326 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8015344:	68e3      	ldr	r3, [r4, #12]
 8015346:	6033      	str	r3, [r6, #0]
 8015348:	e7f1      	b.n	801532e <mbedtls_oid_get_extended_key_usage+0x12>
 801534a:	bf00      	nop
 801534c:	0802c150 	.word	0x0802c150

08015350 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8015350:	b510      	push	{r4, lr}
 8015352:	460c      	mov	r4, r1
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8015354:	b130      	cbz	r0, 8015364 <mbedtls_oid_get_sig_alg_desc+0x14>
 8015356:	f7ff ff97 	bl	8015288 <oid_sig_alg_from_asn1.part.0>
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 801535a:	b118      	cbz	r0, 8015364 <mbedtls_oid_get_sig_alg_desc+0x14>
 801535c:	68c3      	ldr	r3, [r0, #12]
 801535e:	6023      	str	r3, [r4, #0]
 8015360:	2000      	movs	r0, #0
 8015362:	bd10      	pop	{r4, pc}
 8015364:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015368:	e7fb      	b.n	8015362 <mbedtls_oid_get_sig_alg_desc+0x12>

0801536a <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 801536a:	b538      	push	{r3, r4, r5, lr}
 801536c:	460d      	mov	r5, r1
 801536e:	4614      	mov	r4, r2
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8015370:	b140      	cbz	r0, 8015384 <mbedtls_oid_get_sig_alg+0x1a>
 8015372:	f7ff ff89 	bl	8015288 <oid_sig_alg_from_asn1.part.0>
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 8015376:	b128      	cbz	r0, 8015384 <mbedtls_oid_get_sig_alg+0x1a>
 8015378:	7c03      	ldrb	r3, [r0, #16]
 801537a:	702b      	strb	r3, [r5, #0]
 801537c:	7c43      	ldrb	r3, [r0, #17]
 801537e:	7023      	strb	r3, [r4, #0]
 8015380:	2000      	movs	r0, #0
 8015382:	bd38      	pop	{r3, r4, r5, pc}
 8015384:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015388:	e7fb      	b.n	8015382 <mbedtls_oid_get_sig_alg+0x18>
	...

0801538c <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 801538c:	b570      	push	{r4, r5, r6, lr}
 801538e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 8015390:	4605      	mov	r5, r0
 8015392:	b110      	cbz	r0, 801539a <mbedtls_oid_get_pk_alg+0xe>
 8015394:	4c09      	ldr	r4, [pc, #36]	; (80153bc <mbedtls_oid_get_pk_alg+0x30>)
 8015396:	6820      	ldr	r0, [r4, #0]
 8015398:	b910      	cbnz	r0, 80153a0 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 801539a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801539e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80153a0:	686b      	ldr	r3, [r5, #4]
 80153a2:	6862      	ldr	r2, [r4, #4]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d103      	bne.n	80153b0 <mbedtls_oid_get_pk_alg+0x24>
 80153a8:	68a9      	ldr	r1, [r5, #8]
 80153aa:	f00c feef 	bl	802218c <memcmp>
 80153ae:	b108      	cbz	r0, 80153b4 <mbedtls_oid_get_pk_alg+0x28>
 80153b0:	3414      	adds	r4, #20
 80153b2:	e7f0      	b.n	8015396 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80153b4:	7c23      	ldrb	r3, [r4, #16]
 80153b6:	7033      	strb	r3, [r6, #0]
 80153b8:	e7f1      	b.n	801539e <mbedtls_oid_get_pk_alg+0x12>
 80153ba:	bf00      	nop
 80153bc:	0802c1c0 	.word	0x0802c1c0

080153c0 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 80153c4:	4605      	mov	r5, r0
 80153c6:	b110      	cbz	r0, 80153ce <mbedtls_oid_get_ec_grp+0xe>
 80153c8:	4c09      	ldr	r4, [pc, #36]	; (80153f0 <mbedtls_oid_get_ec_grp+0x30>)
 80153ca:	6820      	ldr	r0, [r4, #0]
 80153cc:	b910      	cbnz	r0, 80153d4 <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80153ce:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80153d2:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 80153d4:	686b      	ldr	r3, [r5, #4]
 80153d6:	6862      	ldr	r2, [r4, #4]
 80153d8:	429a      	cmp	r2, r3
 80153da:	d103      	bne.n	80153e4 <mbedtls_oid_get_ec_grp+0x24>
 80153dc:	68a9      	ldr	r1, [r5, #8]
 80153de:	f00c fed5 	bl	802218c <memcmp>
 80153e2:	b108      	cbz	r0, 80153e8 <mbedtls_oid_get_ec_grp+0x28>
 80153e4:	3414      	adds	r4, #20
 80153e6:	e7f0      	b.n	80153ca <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 80153e8:	7c23      	ldrb	r3, [r4, #16]
 80153ea:	7033      	strb	r3, [r6, #0]
 80153ec:	e7f1      	b.n	80153d2 <mbedtls_oid_get_ec_grp+0x12>
 80153ee:	bf00      	nop
 80153f0:	0802c210 	.word	0x0802c210

080153f4 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 80153f4:	b570      	push	{r4, r5, r6, lr}
 80153f6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 80153f8:	4605      	mov	r5, r0
 80153fa:	b110      	cbz	r0, 8015402 <mbedtls_oid_get_md_alg+0xe>
 80153fc:	4c09      	ldr	r4, [pc, #36]	; (8015424 <mbedtls_oid_get_md_alg+0x30>)
 80153fe:	6820      	ldr	r0, [r4, #0]
 8015400:	b910      	cbnz	r0, 8015408 <mbedtls_oid_get_md_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 8015402:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015406:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 8015408:	686b      	ldr	r3, [r5, #4]
 801540a:	6862      	ldr	r2, [r4, #4]
 801540c:	429a      	cmp	r2, r3
 801540e:	d103      	bne.n	8015418 <mbedtls_oid_get_md_alg+0x24>
 8015410:	68a9      	ldr	r1, [r5, #8]
 8015412:	f00c febb 	bl	802218c <memcmp>
 8015416:	b108      	cbz	r0, 801541c <mbedtls_oid_get_md_alg+0x28>
 8015418:	3414      	adds	r4, #20
 801541a:	e7f0      	b.n	80153fe <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 801541c:	7c23      	ldrb	r3, [r4, #16]
 801541e:	7033      	strb	r3, [r6, #0]
 8015420:	e7f1      	b.n	8015406 <mbedtls_oid_get_md_alg+0x12>
 8015422:	bf00      	nop
 8015424:	0802c2c4 	.word	0x0802c2c4

08015428 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8015428:	b530      	push	{r4, r5, lr}
 801542a:	4b08      	ldr	r3, [pc, #32]	; (801544c <mbedtls_oid_get_oid_by_md+0x24>)
 801542c:	681c      	ldr	r4, [r3, #0]
 801542e:	b914      	cbnz	r4, 8015436 <mbedtls_oid_get_oid_by_md+0xe>
 8015430:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015434:	e006      	b.n	8015444 <mbedtls_oid_get_oid_by_md+0x1c>
 8015436:	7c1d      	ldrb	r5, [r3, #16]
 8015438:	4285      	cmp	r5, r0
 801543a:	d104      	bne.n	8015446 <mbedtls_oid_get_oid_by_md+0x1e>
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	600c      	str	r4, [r1, #0]
 8015440:	2000      	movs	r0, #0
 8015442:	6013      	str	r3, [r2, #0]
 8015444:	bd30      	pop	{r4, r5, pc}
 8015446:	3314      	adds	r3, #20
 8015448:	e7f0      	b.n	801542c <mbedtls_oid_get_oid_by_md+0x4>
 801544a:	bf00      	nop
 801544c:	0802c2c4 	.word	0x0802c2c4

08015450 <pem_aes_decrypt>:
 * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
 */
static void pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
                               unsigned char *buf, size_t buflen,
                               const unsigned char *pwd, size_t pwdlen )
{
 8015450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015454:	b0eb      	sub	sp, #428	; 0x1ac
 8015456:	e9dd ab74 	ldrd	sl, fp, [sp, #464]	; 0x1d0
 801545a:	4607      	mov	r7, r0
    mbedtls_aes_context aes_ctx;
    unsigned char aes_key[32];

    mbedtls_aes_init( &aes_ctx );
 801545c:	a824      	add	r0, sp, #144	; 0x90
{
 801545e:	4699      	mov	r9, r3
 8015460:	460d      	mov	r5, r1
 8015462:	4690      	mov	r8, r2
    mbedtls_aes_init( &aes_ctx );
 8015464:	f7f7 ff80 	bl	800d368 <mbedtls_aes_init>
    mbedtls_md5_init( &md5_ctx );
 8015468:	a80e      	add	r0, sp, #56	; 0x38
 801546a:	f7ff fa51 	bl	8014910 <mbedtls_md5_init>
    mbedtls_md5_starts( &md5_ctx );
 801546e:	a80e      	add	r0, sp, #56	; 0x38
 8015470:	f7ff fa62 	bl	8014938 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 8015474:	465a      	mov	r2, fp
 8015476:	4651      	mov	r1, sl
 8015478:	a80e      	add	r0, sp, #56	; 0x38
 801547a:	f7ff fdfe 	bl	801507a <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 801547e:	ac02      	add	r4, sp, #8
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 8015480:	2208      	movs	r2, #8
 8015482:	4639      	mov	r1, r7
 8015484:	a80e      	add	r0, sp, #56	; 0x38
 8015486:	f7ff fdf8 	bl	801507a <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 801548a:	4621      	mov	r1, r4
 801548c:	a80e      	add	r0, sp, #56	; 0x38
 801548e:	f7ff fdf9 	bl	8015084 <mbedtls_md5_finish>
        memcpy( key, md5sum, keylen );
 8015492:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015496:	ae06      	add	r6, sp, #24
    if( keylen <= 16 )
 8015498:	2d10      	cmp	r5, #16
        memcpy( key, md5sum, keylen );
 801549a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        mbedtls_md5_free( &md5_ctx );
 801549e:	a80e      	add	r0, sp, #56	; 0x38
    if( keylen <= 16 )
 80154a0:	d120      	bne.n	80154e4 <pem_aes_decrypt+0x94>
        mbedtls_md5_free( &md5_ctx );
 80154a2:	f7ff fa39 	bl	8014918 <mbedtls_md5_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80154a6:	2100      	movs	r1, #0
 80154a8:	460a      	mov	r2, r1
 80154aa:	1863      	adds	r3, r4, r1
 80154ac:	3101      	adds	r1, #1
 80154ae:	2911      	cmp	r1, #17
 80154b0:	d116      	bne.n	80154e0 <pem_aes_decrypt+0x90>

    pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen );

    mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 );
 80154b2:	00ea      	lsls	r2, r5, #3
 80154b4:	a906      	add	r1, sp, #24
 80154b6:	a824      	add	r0, sp, #144	; 0x90
 80154b8:	f7f8 f85a 	bl	800d570 <mbedtls_aes_setkey_dec>
    mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
 80154bc:	463b      	mov	r3, r7
 80154be:	464a      	mov	r2, r9
 80154c0:	2100      	movs	r1, #0
 80154c2:	e9cd 8800 	strd	r8, r8, [sp]
 80154c6:	a824      	add	r0, sp, #144	; 0x90
 80154c8:	f7f8 fc73 	bl	800ddb2 <mbedtls_aes_crypt_cbc>
                     aes_iv, buf, buf );

    mbedtls_aes_free( &aes_ctx );
 80154cc:	a824      	add	r0, sp, #144	; 0x90
 80154ce:	f7f7 ff50 	bl	800d372 <mbedtls_aes_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80154d2:	ab06      	add	r3, sp, #24
 80154d4:	2200      	movs	r2, #0
 80154d6:	3d01      	subs	r5, #1
 80154d8:	d22e      	bcs.n	8015538 <pem_aes_decrypt+0xe8>
    mbedtls_zeroize( aes_key, keylen );
}
 80154da:	b06b      	add	sp, #428	; 0x1ac
 80154dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80154e0:	701a      	strb	r2, [r3, #0]
 80154e2:	e7e2      	b.n	80154aa <pem_aes_decrypt+0x5a>
    mbedtls_md5_starts( &md5_ctx );
 80154e4:	f7ff fa28 	bl	8014938 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, md5sum,  16 );
 80154e8:	2210      	movs	r2, #16
 80154ea:	4621      	mov	r1, r4
 80154ec:	a80e      	add	r0, sp, #56	; 0x38
 80154ee:	f7ff fdc4 	bl	801507a <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 80154f2:	465a      	mov	r2, fp
 80154f4:	4651      	mov	r1, sl
 80154f6:	a80e      	add	r0, sp, #56	; 0x38
 80154f8:	f7ff fdbf 	bl	801507a <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 80154fc:	2208      	movs	r2, #8
 80154fe:	4639      	mov	r1, r7
 8015500:	a80e      	add	r0, sp, #56	; 0x38
 8015502:	f7ff fdba 	bl	801507a <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 8015506:	4621      	mov	r1, r4
 8015508:	a80e      	add	r0, sp, #56	; 0x38
 801550a:	f7ff fdbb 	bl	8015084 <mbedtls_md5_finish>
    if( keylen < 32 )
 801550e:	2d20      	cmp	r5, #32
        use_len = keylen - 16;
 8015510:	bf14      	ite	ne
 8015512:	f1a5 0210 	subne.w	r2, r5, #16
    use_len = 16;
 8015516:	2210      	moveq	r2, #16
    memcpy( key + 16, md5sum, use_len );
 8015518:	a902      	add	r1, sp, #8
 801551a:	a80a      	add	r0, sp, #40	; 0x28
 801551c:	f00c fe44 	bl	80221a8 <memcpy>
    mbedtls_md5_free( &md5_ctx );
 8015520:	a80e      	add	r0, sp, #56	; 0x38
 8015522:	f7ff f9f9 	bl	8014918 <mbedtls_md5_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015526:	2100      	movs	r1, #0
 8015528:	460a      	mov	r2, r1
 801552a:	ab02      	add	r3, sp, #8
 801552c:	440b      	add	r3, r1
 801552e:	3101      	adds	r1, #1
 8015530:	2911      	cmp	r1, #17
 8015532:	d0be      	beq.n	80154b2 <pem_aes_decrypt+0x62>
 8015534:	701a      	strb	r2, [r3, #0]
 8015536:	e7f8      	b.n	801552a <pem_aes_decrypt+0xda>
 8015538:	f803 2b01 	strb.w	r2, [r3], #1
 801553c:	e7cb      	b.n	80154d6 <pem_aes_decrypt+0x86>

0801553e <mbedtls_pem_init>:
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 801553e:	2300      	movs	r3, #0
 8015540:	6003      	str	r3, [r0, #0]
 8015542:	6043      	str	r3, [r0, #4]
 8015544:	6083      	str	r3, [r0, #8]
}
 8015546:	4770      	bx	lr

08015548 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8015548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801554c:	b089      	sub	sp, #36	; 0x24
 801554e:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 8015552:	460d      	mov	r5, r1
 8015554:	4693      	mov	fp, r2
 8015556:	469a      	mov	sl, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8015558:	4606      	mov	r6, r0
 801555a:	2800      	cmp	r0, #0
 801555c:	f000 8126 	beq.w	80157ac <mbedtls_pem_read_buffer+0x264>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 8015560:	4618      	mov	r0, r3
 8015562:	f00e f936 	bl	80237d2 <strstr>

    if( s1 == NULL )
 8015566:	4604      	mov	r4, r0
 8015568:	2800      	cmp	r0, #0
 801556a:	f000 8121 	beq.w	80157b0 <mbedtls_pem_read_buffer+0x268>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 801556e:	4659      	mov	r1, fp
 8015570:	4650      	mov	r0, sl
 8015572:	f00e f92e 	bl	80237d2 <strstr>

    if( s2 == NULL || s2 <= s1 )
 8015576:	4681      	mov	r9, r0
 8015578:	2800      	cmp	r0, #0
 801557a:	f000 8119 	beq.w	80157b0 <mbedtls_pem_read_buffer+0x268>
 801557e:	4284      	cmp	r4, r0
 8015580:	f080 8116 	bcs.w	80157b0 <mbedtls_pem_read_buffer+0x268>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 8015584:	4628      	mov	r0, r5
 8015586:	f7ea fe2d 	bl	80001e4 <strlen>
    if( *s1 == ' '  ) s1++;
 801558a:	5c23      	ldrb	r3, [r4, r0]
    s1 += strlen( header );
 801558c:	1825      	adds	r5, r4, r0
    if( *s1 == ' '  ) s1++;
 801558e:	2b20      	cmp	r3, #32
 8015590:	bf08      	it	eq
 8015592:	3501      	addeq	r5, #1
    if( *s1 == '\r' ) s1++;
 8015594:	782b      	ldrb	r3, [r5, #0]
 8015596:	2b0d      	cmp	r3, #13
 8015598:	bf08      	it	eq
 801559a:	3501      	addeq	r5, #1
    if( *s1 == '\n' ) s1++;
 801559c:	782b      	ldrb	r3, [r5, #0]
 801559e:	2b0a      	cmp	r3, #10
 80155a0:	f040 8106 	bne.w	80157b0 <mbedtls_pem_read_buffer+0x268>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80155a4:	4658      	mov	r0, fp
 80155a6:	f7ea fe1d 	bl	80001e4 <strlen>
    if( *end == ' '  ) end++;
 80155aa:	f819 3000 	ldrb.w	r3, [r9, r0]
    end += strlen( footer );
 80155ae:	eb09 0200 	add.w	r2, r9, r0
    if( *end == ' '  ) end++;
 80155b2:	2b20      	cmp	r3, #32
 80155b4:	bf08      	it	eq
 80155b6:	3201      	addeq	r2, #1
    if( *s1 == '\n' ) s1++;
 80155b8:	1c6c      	adds	r4, r5, #1
    if( *end == '\r' ) end++;
 80155ba:	7813      	ldrb	r3, [r2, #0]
 80155bc:	2b0d      	cmp	r3, #13
 80155be:	bf08      	it	eq
 80155c0:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
 80155c2:	7813      	ldrb	r3, [r2, #0]
 80155c4:	2b0a      	cmp	r3, #10
 80155c6:	bf08      	it	eq
 80155c8:	3201      	addeq	r2, #1
    *use_len = end - data;
 80155ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155cc:	eba2 020a 	sub.w	r2, r2, sl
 80155d0:	601a      	str	r2, [r3, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 80155d2:	eba9 0304 	sub.w	r3, r9, r4
 80155d6:	2b15      	cmp	r3, #21
 80155d8:	f340 80ab 	ble.w	8015732 <mbedtls_pem_read_buffer+0x1ea>
 80155dc:	4978      	ldr	r1, [pc, #480]	; (80157c0 <mbedtls_pem_read_buffer+0x278>)
 80155de:	2216      	movs	r2, #22
 80155e0:	4620      	mov	r0, r4
 80155e2:	f00c fdd3 	bl	802218c <memcmp>
 80155e6:	2800      	cmp	r0, #0
 80155e8:	f040 80a3 	bne.w	8015732 <mbedtls_pem_read_buffer+0x1ea>
#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
        enc++;

        s1 += 22;
        if( *s1 == '\r' ) s1++;
 80155ec:	7deb      	ldrb	r3, [r5, #23]
 80155ee:	2b0d      	cmp	r3, #13
 80155f0:	bf0a      	itet	eq
 80155f2:	7e2b      	ldrbeq	r3, [r5, #24]
        s1 += 22;
 80155f4:	f105 0417 	addne.w	r4, r5, #23
        if( *s1 == '\r' ) s1++;
 80155f8:	f105 0418 	addeq.w	r4, r5, #24
        if( *s1 == '\n' ) s1++;
 80155fc:	2b0a      	cmp	r3, #10
 80155fe:	d004      	beq.n	801560a <mbedtls_pem_read_buffer+0xc2>
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
 8015600:	4c70      	ldr	r4, [pc, #448]	; (80157c4 <mbedtls_pem_read_buffer+0x27c>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 8015602:	4620      	mov	r0, r4
 8015604:	b009      	add	sp, #36	; 0x24
 8015606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *s1 == '\n' ) s1++;
 801560a:	1c65      	adds	r5, r4, #1
        if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
 801560c:	eba9 0a05 	sub.w	sl, r9, r5
 8015610:	f1ba 0f0d 	cmp.w	sl, #13
 8015614:	f340 80ce 	ble.w	80157b4 <mbedtls_pem_read_buffer+0x26c>
 8015618:	496b      	ldr	r1, [pc, #428]	; (80157c8 <mbedtls_pem_read_buffer+0x280>)
 801561a:	220e      	movs	r2, #14
 801561c:	4628      	mov	r0, r5
 801561e:	f00c fdb5 	bl	802218c <memcmp>
 8015622:	2800      	cmp	r0, #0
 8015624:	f040 80c6 	bne.w	80157b4 <mbedtls_pem_read_buffer+0x26c>
            if( s2 - s1 < 22 )
 8015628:	f1ba 0f15 	cmp.w	sl, #21
 801562c:	f340 80c2 	ble.w	80157b4 <mbedtls_pem_read_buffer+0x26c>
            else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
 8015630:	4966      	ldr	r1, [pc, #408]	; (80157cc <mbedtls_pem_read_buffer+0x284>)
 8015632:	2216      	movs	r2, #22
 8015634:	4628      	mov	r0, r5
 8015636:	f00c fda9 	bl	802218c <memcmp>
 801563a:	b1b0      	cbz	r0, 801566a <mbedtls_pem_read_buffer+0x122>
            else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
 801563c:	4964      	ldr	r1, [pc, #400]	; (80157d0 <mbedtls_pem_read_buffer+0x288>)
 801563e:	2216      	movs	r2, #22
 8015640:	4628      	mov	r0, r5
 8015642:	f00c fda3 	bl	802218c <memcmp>
 8015646:	b190      	cbz	r0, 801566e <mbedtls_pem_read_buffer+0x126>
            else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
 8015648:	4962      	ldr	r1, [pc, #392]	; (80157d4 <mbedtls_pem_read_buffer+0x28c>)
 801564a:	2216      	movs	r2, #22
 801564c:	4628      	mov	r0, r5
 801564e:	f00c fd9d 	bl	802218c <memcmp>
 8015652:	2800      	cmp	r0, #0
 8015654:	f040 80ae 	bne.w	80157b4 <mbedtls_pem_read_buffer+0x26c>
                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
 8015658:	2507      	movs	r5, #7
            s1 += 22;
 801565a:	f104 0317 	add.w	r3, r4, #23
            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
 801565e:	eba9 0303 	sub.w	r3, r9, r3
 8015662:	2b1f      	cmp	r3, #31
 8015664:	dc05      	bgt.n	8015672 <mbedtls_pem_read_buffer+0x12a>
                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
 8015666:	4c5c      	ldr	r4, [pc, #368]	; (80157d8 <mbedtls_pem_read_buffer+0x290>)
 8015668:	e7cb      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
 801566a:	2505      	movs	r5, #5
 801566c:	e7f5      	b.n	801565a <mbedtls_pem_read_buffer+0x112>
                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
 801566e:	2506      	movs	r5, #6
 8015670:	e7f3      	b.n	801565a <mbedtls_pem_read_buffer+0x112>
    memset( iv, 0, iv_len );
 8015672:	f10d 0a10 	add.w	sl, sp, #16
 8015676:	2210      	movs	r2, #16
 8015678:	2100      	movs	r1, #0
 801567a:	4650      	mov	r0, sl
 801567c:	f00c fdbc 	bl	80221f8 <memset>
    for( i = 0; i < iv_len * 2; i++, s++ )
 8015680:	f104 0016 	add.w	r0, r4, #22
 8015684:	2200      	movs	r2, #0
        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
 8015686:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 801568a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801568e:	fa5f fc83 	uxtb.w	ip, r3
 8015692:	f1bc 0f09 	cmp.w	ip, #9
 8015696:	d905      	bls.n	80156a4 <mbedtls_pem_read_buffer+0x15c>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 8015698:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 801569c:	2b05      	cmp	r3, #5
 801569e:	d814      	bhi.n	80156ca <mbedtls_pem_read_buffer+0x182>
 80156a0:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80156a4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 80156a8:	07d1      	lsls	r1, r2, #31
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80156aa:	f81a 100c 	ldrb.w	r1, [sl, ip]
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 80156ae:	bf58      	it	pl
 80156b0:	011b      	lslpl	r3, r3, #4
    for( i = 0; i < iv_len * 2; i++, s++ )
 80156b2:	3201      	adds	r2, #1
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80156b4:	430b      	orrs	r3, r1
    for( i = 0; i < iv_len * 2; i++, s++ )
 80156b6:	2a20      	cmp	r2, #32
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80156b8:	f80a 300c 	strb.w	r3, [sl, ip]
    for( i = 0; i < iv_len * 2; i++, s++ )
 80156bc:	d1e3      	bne.n	8015686 <mbedtls_pem_read_buffer+0x13e>
        if( *s1 == '\r' ) s1++;
 80156be:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80156c2:	2b0d      	cmp	r3, #13
 80156c4:	d008      	beq.n	80156d8 <mbedtls_pem_read_buffer+0x190>
            s1 += 32;
 80156c6:	3437      	adds	r4, #55	; 0x37
 80156c8:	e007      	b.n	80156da <mbedtls_pem_read_buffer+0x192>
        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
 80156ca:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80156ce:	2b05      	cmp	r3, #5
 80156d0:	d8c9      	bhi.n	8015666 <mbedtls_pem_read_buffer+0x11e>
 80156d2:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 80156d6:	e7e5      	b.n	80156a4 <mbedtls_pem_read_buffer+0x15c>
        if( *s1 == '\r' ) s1++;
 80156d8:	3438      	adds	r4, #56	; 0x38
        if( *s1 == '\n' ) s1++;
 80156da:	7823      	ldrb	r3, [r4, #0]
 80156dc:	2b0a      	cmp	r3, #10
 80156de:	d18f      	bne.n	8015600 <mbedtls_pem_read_buffer+0xb8>
 80156e0:	3401      	adds	r4, #1
        enc++;
 80156e2:	f04f 0a01 	mov.w	sl, #1
    if( s1 >= s2 )
 80156e6:	454c      	cmp	r4, r9
 80156e8:	d28a      	bcs.n	8015600 <mbedtls_pem_read_buffer+0xb8>
    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 80156ea:	2100      	movs	r1, #0
 80156ec:	eba9 0904 	sub.w	r9, r9, r4
 80156f0:	f8cd 9000 	str.w	r9, [sp]
 80156f4:	4623      	mov	r3, r4
 80156f6:	aa03      	add	r2, sp, #12
 80156f8:	4608      	mov	r0, r1
 80156fa:	f7f8 fddf 	bl	800e2bc <mbedtls_base64_decode>
    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 80156fe:	302c      	adds	r0, #44	; 0x2c
 8015700:	d05a      	beq.n	80157b8 <mbedtls_pem_read_buffer+0x270>
    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8015702:	4b36      	ldr	r3, [pc, #216]	; (80157dc <mbedtls_pem_read_buffer+0x294>)
 8015704:	9903      	ldr	r1, [sp, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	2001      	movs	r0, #1
 801570a:	4798      	blx	r3
 801570c:	4683      	mov	fp, r0
 801570e:	2800      	cmp	r0, #0
 8015710:	d054      	beq.n	80157bc <mbedtls_pem_read_buffer+0x274>
    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8015712:	4623      	mov	r3, r4
 8015714:	9903      	ldr	r1, [sp, #12]
 8015716:	f8cd 9000 	str.w	r9, [sp]
 801571a:	aa03      	add	r2, sp, #12
 801571c:	f7f8 fdce 	bl	800e2bc <mbedtls_base64_decode>
 8015720:	4604      	mov	r4, r0
 8015722:	b148      	cbz	r0, 8015738 <mbedtls_pem_read_buffer+0x1f0>
        mbedtls_free( buf );
 8015724:	4b2e      	ldr	r3, [pc, #184]	; (80157e0 <mbedtls_pem_read_buffer+0x298>)
 8015726:	4658      	mov	r0, fp
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	4798      	blx	r3
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 801572c:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100
 8015730:	e767      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
 8015732:	2500      	movs	r5, #0
    enc = 0;
 8015734:	46aa      	mov	sl, r5
 8015736:	e7d6      	b.n	80156e6 <mbedtls_pem_read_buffer+0x19e>
    if( enc != 0 )
 8015738:	f1ba 0f00 	cmp.w	sl, #0
 801573c:	d031      	beq.n	80157a2 <mbedtls_pem_read_buffer+0x25a>
        if( pwd == NULL )
 801573e:	b92f      	cbnz	r7, 801574c <mbedtls_pem_read_buffer+0x204>
            mbedtls_free( buf );
 8015740:	4b27      	ldr	r3, [pc, #156]	; (80157e0 <mbedtls_pem_read_buffer+0x298>)
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 8015742:	4c28      	ldr	r4, [pc, #160]	; (80157e4 <mbedtls_pem_read_buffer+0x29c>)
            mbedtls_free( buf );
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	4658      	mov	r0, fp
 8015748:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 801574a:	e75a      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
 801574c:	2d05      	cmp	r5, #5
 801574e:	9b03      	ldr	r3, [sp, #12]
 8015750:	d118      	bne.n	8015784 <mbedtls_pem_read_buffer+0x23c>
            pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
 8015752:	e9cd 7800 	strd	r7, r8, [sp]
 8015756:	2110      	movs	r1, #16
 8015758:	465a      	mov	r2, fp
 801575a:	eb0d 0001 	add.w	r0, sp, r1
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 801575e:	f7ff fe77 	bl	8015450 <pem_aes_decrypt>
        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
 8015762:	9b03      	ldr	r3, [sp, #12]
 8015764:	2b02      	cmp	r3, #2
 8015766:	d907      	bls.n	8015778 <mbedtls_pem_read_buffer+0x230>
 8015768:	f89b 3000 	ldrb.w	r3, [fp]
 801576c:	2b30      	cmp	r3, #48	; 0x30
 801576e:	d103      	bne.n	8015778 <mbedtls_pem_read_buffer+0x230>
 8015770:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8015774:	2b83      	cmp	r3, #131	; 0x83
 8015776:	d914      	bls.n	80157a2 <mbedtls_pem_read_buffer+0x25a>
            mbedtls_free( buf );
 8015778:	4b19      	ldr	r3, [pc, #100]	; (80157e0 <mbedtls_pem_read_buffer+0x298>)
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 801577a:	4c1b      	ldr	r4, [pc, #108]	; (80157e8 <mbedtls_pem_read_buffer+0x2a0>)
            mbedtls_free( buf );
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	4658      	mov	r0, fp
 8015780:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 8015782:	e73e      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
 8015784:	2d06      	cmp	r5, #6
 8015786:	d105      	bne.n	8015794 <mbedtls_pem_read_buffer+0x24c>
            pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
 8015788:	e9cd 7800 	strd	r7, r8, [sp]
 801578c:	465a      	mov	r2, fp
 801578e:	2118      	movs	r1, #24
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 8015790:	a804      	add	r0, sp, #16
 8015792:	e7e4      	b.n	801575e <mbedtls_pem_read_buffer+0x216>
        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
 8015794:	2d07      	cmp	r5, #7
 8015796:	d1e4      	bne.n	8015762 <mbedtls_pem_read_buffer+0x21a>
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 8015798:	e9cd 7800 	strd	r7, r8, [sp]
 801579c:	465a      	mov	r2, fp
 801579e:	2120      	movs	r1, #32
 80157a0:	e7f6      	b.n	8015790 <mbedtls_pem_read_buffer+0x248>
    ctx->buflen = len;
 80157a2:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 80157a4:	f8c6 b000 	str.w	fp, [r6]
    ctx->buflen = len;
 80157a8:	6073      	str	r3, [r6, #4]
    return( 0 );
 80157aa:	e72a      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 80157ac:	4c0f      	ldr	r4, [pc, #60]	; (80157ec <mbedtls_pem_read_buffer+0x2a4>)
 80157ae:	e728      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 80157b0:	4c0f      	ldr	r4, [pc, #60]	; (80157f0 <mbedtls_pem_read_buffer+0x2a8>)
 80157b2:	e726      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
 80157b4:	4c0f      	ldr	r4, [pc, #60]	; (80157f4 <mbedtls_pem_read_buffer+0x2ac>)
 80157b6:	e724      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80157b8:	4c0f      	ldr	r4, [pc, #60]	; (80157f8 <mbedtls_pem_read_buffer+0x2b0>)
 80157ba:	e722      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 80157bc:	4c0f      	ldr	r4, [pc, #60]	; (80157fc <mbedtls_pem_read_buffer+0x2b4>)
 80157be:	e720      	b.n	8015602 <mbedtls_pem_read_buffer+0xba>
 80157c0:	08030831 	.word	0x08030831
 80157c4:	ffffef00 	.word	0xffffef00
 80157c8:	08030848 	.word	0x08030848
 80157cc:	08030857 	.word	0x08030857
 80157d0:	0803086e 	.word	0x0803086e
 80157d4:	08030885 	.word	0x08030885
 80157d8:	ffffee00 	.word	0xffffee00
 80157dc:	20000538 	.word	0x20000538
 80157e0:	2000053c 	.word	0x2000053c
 80157e4:	ffffed00 	.word	0xffffed00
 80157e8:	ffffec80 	.word	0xffffec80
 80157ec:	ffffeb80 	.word	0xffffeb80
 80157f0:	ffffef80 	.word	0xffffef80
 80157f4:	ffffed80 	.word	0xffffed80
 80157f8:	ffffeed4 	.word	0xffffeed4
 80157fc:	ffffee80 	.word	0xffffee80

08015800 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 8015800:	b538      	push	{r3, r4, r5, lr}
    mbedtls_free( ctx->buf );
 8015802:	4d08      	ldr	r5, [pc, #32]	; (8015824 <mbedtls_pem_free+0x24>)
{
 8015804:	4604      	mov	r4, r0
    mbedtls_free( ctx->buf );
 8015806:	682b      	ldr	r3, [r5, #0]
 8015808:	6800      	ldr	r0, [r0, #0]
 801580a:	4798      	blx	r3
    mbedtls_free( ctx->info );
 801580c:	682b      	ldr	r3, [r5, #0]
 801580e:	68a0      	ldr	r0, [r4, #8]
 8015810:	4798      	blx	r3
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015812:	f104 030c 	add.w	r3, r4, #12
 8015816:	2200      	movs	r2, #0
 8015818:	429c      	cmp	r4, r3
 801581a:	d100      	bne.n	801581e <mbedtls_pem_free+0x1e>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
}
 801581c:	bd38      	pop	{r3, r4, r5, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801581e:	f804 2b01 	strb.w	r2, [r4], #1
 8015822:	e7f9      	b.n	8015818 <mbedtls_pem_free+0x18>
 8015824:	2000053c 	.word	0x2000053c

08015828 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 8015828:	b110      	cbz	r0, 8015830 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 801582a:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 801582c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8015830:	4770      	bx	lr

08015832 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8015832:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015834:	4604      	mov	r4, r0
 8015836:	b148      	cbz	r0, 801584c <mbedtls_pk_free+0x1a>
 8015838:	6803      	ldr	r3, [r0, #0]
 801583a:	b13b      	cbz	r3, 801584c <mbedtls_pk_free+0x1a>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 801583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801583e:	6840      	ldr	r0, [r0, #4]
 8015840:	4798      	blx	r3
static void mbedtls_zeroize( void *v, size_t n ) {
 8015842:	f104 0308 	add.w	r3, r4, #8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015846:	2200      	movs	r2, #0
 8015848:	429c      	cmp	r4, r3
 801584a:	d100      	bne.n	801584e <mbedtls_pk_free+0x1c>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
}
 801584c:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801584e:	f804 2b01 	strb.w	r2, [r4], #1
 8015852:	e7f9      	b.n	8015848 <mbedtls_pk_free+0x16>

08015854 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 8015854:	3801      	subs	r0, #1
 8015856:	b2c0      	uxtb	r0, r0
 8015858:	2803      	cmp	r0, #3
 801585a:	bf9a      	itte	ls
 801585c:	4b02      	ldrls	r3, [pc, #8]	; (8015868 <mbedtls_pk_info_from_type+0x14>)
 801585e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 8015862:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	0802c35c 	.word	0x0802c35c

0801586c <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 801586c:	b570      	push	{r4, r5, r6, lr}
 801586e:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 8015870:	4605      	mov	r5, r0
 8015872:	b148      	cbz	r0, 8015888 <mbedtls_pk_setup+0x1c>
 8015874:	b141      	cbz	r1, 8015888 <mbedtls_pk_setup+0x1c>
 8015876:	6804      	ldr	r4, [r0, #0]
 8015878:	b934      	cbnz	r4, 8015888 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 801587a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801587c:	4798      	blx	r3
 801587e:	6068      	str	r0, [r5, #4]
 8015880:	b120      	cbz	r0, 801588c <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8015882:	602e      	str	r6, [r5, #0]

    return( 0 );
 8015884:	4620      	mov	r0, r4
}
 8015886:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015888:	4801      	ldr	r0, [pc, #4]	; (8015890 <mbedtls_pk_setup+0x24>)
 801588a:	e7fc      	b.n	8015886 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 801588c:	4801      	ldr	r0, [pc, #4]	; (8015894 <mbedtls_pk_setup+0x28>)
 801588e:	e7fa      	b.n	8015886 <mbedtls_pk_setup+0x1a>
 8015890:	ffffc180 	.word	0xffffc180
 8015894:	ffffc080 	.word	0xffffc080

08015898 <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 8015898:	4603      	mov	r3, r0
 801589a:	4608      	mov	r0, r1
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 801589c:	b11b      	cbz	r3, 80158a6 <mbedtls_pk_can_do+0xe>
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	b10b      	cbz	r3, 80158a6 <mbedtls_pk_can_do+0xe>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	4718      	bx	r3
}
 80158a6:	2000      	movs	r0, #0
 80158a8:	4770      	bx	lr
	...

080158ac <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 80158ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158b0:	460d      	mov	r5, r1
 80158b2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80158b6:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 80158b8:	4604      	mov	r4, r0
 80158ba:	b910      	cbnz	r0, 80158c2 <mbedtls_pk_verify+0x16>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80158bc:	480e      	ldr	r0, [pc, #56]	; (80158f8 <mbedtls_pk_verify+0x4c>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
 80158be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 80158c2:	6802      	ldr	r2, [r0, #0]
 80158c4:	2a00      	cmp	r2, #0
 80158c6:	d0f9      	beq.n	80158bc <mbedtls_pk_verify+0x10>
    if( *hash_len != 0 )
 80158c8:	b93b      	cbnz	r3, 80158da <mbedtls_pk_verify+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 80158ca:	4608      	mov	r0, r1
 80158cc:	f7fe feca 	bl	8014664 <mbedtls_md_info_from_type>
 80158d0:	2800      	cmp	r0, #0
 80158d2:	d0f3      	beq.n	80158bc <mbedtls_pk_verify+0x10>
    *hash_len = mbedtls_md_get_size( md_info );
 80158d4:	f7ff f816 	bl	8014904 <mbedtls_md_get_size>
 80158d8:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
 80158da:	6822      	ldr	r2, [r4, #0]
 80158dc:	6917      	ldr	r7, [r2, #16]
 80158de:	b147      	cbz	r7, 80158f2 <mbedtls_pk_verify+0x46>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 80158e0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80158e4:	4632      	mov	r2, r6
 80158e6:	6860      	ldr	r0, [r4, #4]
 80158e8:	4629      	mov	r1, r5
 80158ea:	46bc      	mov	ip, r7
}
 80158ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 80158f0:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 80158f2:	4802      	ldr	r0, [pc, #8]	; (80158fc <mbedtls_pk_verify+0x50>)
 80158f4:	e7e3      	b.n	80158be <mbedtls_pk_verify+0x12>
 80158f6:	bf00      	nop
 80158f8:	ffffc180 	.word	0xffffc180
 80158fc:	ffffc100 	.word	0xffffc100

08015900 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015904:	460d      	mov	r5, r1
 8015906:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 801590a:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 801590e:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015910:	4604      	mov	r4, r0
 8015912:	b910      	cbnz	r0, 801591a <mbedtls_pk_sign+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015914:	4810      	ldr	r0, [pc, #64]	; (8015958 <mbedtls_pk_sign+0x58>)
    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
}
 8015916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 801591a:	6802      	ldr	r2, [r0, #0]
 801591c:	2a00      	cmp	r2, #0
 801591e:	d0f9      	beq.n	8015914 <mbedtls_pk_sign+0x14>
    if( *hash_len != 0 )
 8015920:	b93b      	cbnz	r3, 8015932 <mbedtls_pk_sign+0x32>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8015922:	4608      	mov	r0, r1
 8015924:	f7fe fe9e 	bl	8014664 <mbedtls_md_info_from_type>
 8015928:	2800      	cmp	r0, #0
 801592a:	d0f3      	beq.n	8015914 <mbedtls_pk_sign+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 801592c:	f7fe ffea 	bl	8014904 <mbedtls_md_get_size>
 8015930:	4603      	mov	r3, r0
    if( ctx->pk_info->sign_func == NULL )
 8015932:	6822      	ldr	r2, [r4, #0]
 8015934:	f8d2 e014 	ldr.w	lr, [r2, #20]
 8015938:	f1be 0f00 	cmp.w	lr, #0
 801593c:	d00a      	beq.n	8015954 <mbedtls_pk_sign+0x54>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 801593e:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8015942:	e9cd 7808 	strd	r7, r8, [sp, #32]
 8015946:	4632      	mov	r2, r6
 8015948:	6860      	ldr	r0, [r4, #4]
 801594a:	4629      	mov	r1, r5
 801594c:	46f4      	mov	ip, lr
}
 801594e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015952:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015954:	4801      	ldr	r0, [pc, #4]	; (801595c <mbedtls_pk_sign+0x5c>)
 8015956:	e7de      	b.n	8015916 <mbedtls_pk_sign+0x16>
 8015958:	ffffc180 	.word	0xffffc180
 801595c:	ffffc100 	.word	0xffffc100

08015960 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015960:	b410      	push	{r4}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015962:	b140      	cbz	r0, 8015976 <mbedtls_pk_encrypt+0x16>
 8015964:	6804      	ldr	r4, [r0, #0]
 8015966:	b134      	cbz	r4, 8015976 <mbedtls_pk_encrypt+0x16>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 8015968:	69e4      	ldr	r4, [r4, #28]
 801596a:	b144      	cbz	r4, 801597e <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 801596c:	46a4      	mov	ip, r4
 801596e:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
 8015970:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8015974:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015976:	4803      	ldr	r0, [pc, #12]	; (8015984 <mbedtls_pk_encrypt+0x24>)
}
 8015978:	f85d 4b04 	ldr.w	r4, [sp], #4
 801597c:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 801597e:	4802      	ldr	r0, [pc, #8]	; (8015988 <mbedtls_pk_encrypt+0x28>)
 8015980:	e7fa      	b.n	8015978 <mbedtls_pk_encrypt+0x18>
 8015982:	bf00      	nop
 8015984:	ffffc180 	.word	0xffffc180
 8015988:	ffffc100 	.word	0xffffc100

0801598c <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 801598c:	b120      	cbz	r0, 8015998 <mbedtls_pk_get_bitlen+0xc>
 801598e:	6803      	ldr	r3, [r0, #0]
 8015990:	b113      	cbz	r3, 8015998 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8015992:	689b      	ldr	r3, [r3, #8]
 8015994:	6840      	ldr	r0, [r0, #4]
 8015996:	4718      	bx	r3
}
 8015998:	2000      	movs	r0, #0
 801599a:	4770      	bx	lr

0801599c <mbedtls_pk_verify_ext>:
{
 801599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a0:	b087      	sub	sp, #28
 80159a2:	e9dd 9b10 	ldrd	r9, fp, [sp, #64]	; 0x40
 80159a6:	e9dd a812 	ldrd	sl, r8, [sp, #72]	; 0x48
 80159aa:	4607      	mov	r7, r0
 80159ac:	460c      	mov	r4, r1
 80159ae:	461e      	mov	r6, r3
    if( ctx == NULL || ctx->pk_info == NULL )
 80159b0:	4615      	mov	r5, r2
 80159b2:	b922      	cbnz	r2, 80159be <mbedtls_pk_verify_ext+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 80159b4:	4c22      	ldr	r4, [pc, #136]	; (8015a40 <mbedtls_pk_verify_ext+0xa4>)
}
 80159b6:	4620      	mov	r0, r4
 80159b8:	b007      	add	sp, #28
 80159ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 80159be:	6813      	ldr	r3, [r2, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d0f7      	beq.n	80159b4 <mbedtls_pk_verify_ext+0x18>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 80159c4:	4601      	mov	r1, r0
 80159c6:	4610      	mov	r0, r2
 80159c8:	f7ff ff66 	bl	8015898 <mbedtls_pk_can_do>
 80159cc:	b398      	cbz	r0, 8015a36 <mbedtls_pk_verify_ext+0x9a>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 80159ce:	2f06      	cmp	r7, #6
 80159d0:	d124      	bne.n	8015a1c <mbedtls_pk_verify_ext+0x80>
        if( options == NULL )
 80159d2:	2c00      	cmp	r4, #0
 80159d4:	d0ee      	beq.n	80159b4 <mbedtls_pk_verify_ext+0x18>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 80159d6:	4628      	mov	r0, r5
 80159d8:	f7ff ffd8 	bl	801598c <mbedtls_pk_get_bitlen>
 80159dc:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
 80159de:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
 80159e2:	d32a      	bcc.n	8015a3a <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 80159e4:	f8cd a014 	str.w	sl, [sp, #20]
 80159e8:	6863      	ldr	r3, [r4, #4]
 80159ea:	9304      	str	r3, [sp, #16]
 80159ec:	7823      	ldrb	r3, [r4, #0]
 80159ee:	e9cd 6b00 	strd	r6, fp, [sp]
 80159f2:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80159f6:	2300      	movs	r3, #0
 80159f8:	6868      	ldr	r0, [r5, #4]
 80159fa:	461a      	mov	r2, r3
 80159fc:	4619      	mov	r1, r3
 80159fe:	f001 fcb3 	bl	8017368 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 8015a02:	4604      	mov	r4, r0
 8015a04:	2800      	cmp	r0, #0
 8015a06:	d1d6      	bne.n	80159b6 <mbedtls_pk_verify_ext+0x1a>
 8015a08:	4628      	mov	r0, r5
 8015a0a:	f7ff ffbf 	bl	801598c <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015a0e:	4b0d      	ldr	r3, [pc, #52]	; (8015a44 <mbedtls_pk_verify_ext+0xa8>)
 8015a10:	3007      	adds	r0, #7
 8015a12:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
 8015a16:	bf88      	it	hi
 8015a18:	461c      	movhi	r4, r3
 8015a1a:	e7cc      	b.n	80159b6 <mbedtls_pk_verify_ext+0x1a>
    if( options != NULL )
 8015a1c:	2c00      	cmp	r4, #0
 8015a1e:	d1c9      	bne.n	80159b4 <mbedtls_pk_verify_ext+0x18>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015a20:	465b      	mov	r3, fp
 8015a22:	464a      	mov	r2, r9
 8015a24:	4631      	mov	r1, r6
 8015a26:	4628      	mov	r0, r5
 8015a28:	e9cd a810 	strd	sl, r8, [sp, #64]	; 0x40
}
 8015a2c:	b007      	add	sp, #28
 8015a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015a32:	f7ff bf3b 	b.w	80158ac <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015a36:	4c04      	ldr	r4, [pc, #16]	; (8015a48 <mbedtls_pk_verify_ext+0xac>)
 8015a38:	e7bd      	b.n	80159b6 <mbedtls_pk_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015a3a:	4c04      	ldr	r4, [pc, #16]	; (8015a4c <mbedtls_pk_verify_ext+0xb0>)
 8015a3c:	e7bb      	b.n	80159b6 <mbedtls_pk_verify_ext+0x1a>
 8015a3e:	bf00      	nop
 8015a40:	ffffc180 	.word	0xffffc180
 8015a44:	ffffc700 	.word	0xffffc700
 8015a48:	ffffc100 	.word	0xffffc100
 8015a4c:	ffffbc80 	.word	0xffffbc80

08015a50 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 8015a50:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015a52:	b138      	cbz	r0, 8015a64 <mbedtls_pk_debug+0x14>
 8015a54:	6803      	ldr	r3, [r0, #0]
 8015a56:	b12b      	cbz	r3, 8015a64 <mbedtls_pk_debug+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 8015a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a5a:	b12b      	cbz	r3, 8015a68 <mbedtls_pk_debug+0x18>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8015a5c:	6840      	ldr	r0, [r0, #4]
 8015a5e:	4798      	blx	r3
    return( 0 );
 8015a60:	2000      	movs	r0, #0
}
 8015a62:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015a64:	4801      	ldr	r0, [pc, #4]	; (8015a6c <mbedtls_pk_debug+0x1c>)
 8015a66:	e7fc      	b.n	8015a62 <mbedtls_pk_debug+0x12>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015a68:	4801      	ldr	r0, [pc, #4]	; (8015a70 <mbedtls_pk_debug+0x20>)
 8015a6a:	e7fa      	b.n	8015a62 <mbedtls_pk_debug+0x12>
 8015a6c:	ffffc180 	.word	0xffffc180
 8015a70:	ffffc100 	.word	0xffffc100

08015a74 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015a74:	b118      	cbz	r0, 8015a7e <mbedtls_pk_get_name+0xa>
 8015a76:	6803      	ldr	r3, [r0, #0]
 8015a78:	b10b      	cbz	r3, 8015a7e <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 8015a7a:	6858      	ldr	r0, [r3, #4]
 8015a7c:	4770      	bx	lr
        return( "invalid PK" );
 8015a7e:	4801      	ldr	r0, [pc, #4]	; (8015a84 <mbedtls_pk_get_name+0x10>)
}
 8015a80:	4770      	bx	lr
 8015a82:	bf00      	nop
 8015a84:	0803089c 	.word	0x0803089c

08015a88 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015a88:	b110      	cbz	r0, 8015a90 <mbedtls_pk_get_type+0x8>
 8015a8a:	6800      	ldr	r0, [r0, #0]
 8015a8c:	b100      	cbz	r0, 8015a90 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 8015a8e:	7800      	ldrb	r0, [r0, #0]
}
 8015a90:	4770      	bx	lr

08015a92 <rsa_can_do>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8015a92:	2801      	cmp	r0, #1
 8015a94:	d002      	beq.n	8015a9c <rsa_can_do+0xa>
 8015a96:	1f83      	subs	r3, r0, #6
 8015a98:	4258      	negs	r0, r3
 8015a9a:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8015a9c:	4770      	bx	lr

08015a9e <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
    return( 8 * ((const mbedtls_rsa_context *) ctx)->len );
 8015a9e:	6840      	ldr	r0, [r0, #4]
}
 8015aa0:	00c0      	lsls	r0, r0, #3
 8015aa2:	4770      	bx	lr

08015aa4 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015aa4:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8015aa6:	4a06      	ldr	r2, [pc, #24]	; (8015ac0 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015aa8:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 8015aaa:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015aac:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8015aae:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 8015ab2:	4b04      	ldr	r3, [pc, #16]	; (8015ac4 <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8015ab4:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8015ab6:	3014      	adds	r0, #20
    items->name = "rsa.E";
 8015ab8:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8015aba:	6148      	str	r0, [r1, #20]
}
 8015abc:	4770      	bx	lr
 8015abe:	bf00      	nop
 8015ac0:	080308a7 	.word	0x080308a7
 8015ac4:	080308ad 	.word	0x080308ad

08015ac8 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 8015ac8:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 8015aca:	2802      	cmp	r0, #2
 8015acc:	bf8c      	ite	hi
 8015ace:	2000      	movhi	r0, #0
 8015ad0:	2001      	movls	r0, #1
 8015ad2:	4770      	bx	lr

08015ad4 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 8015ad4:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8015ad6:	4770      	bx	lr

08015ad8 <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 8015ad8:	2302      	movs	r3, #2
 8015ada:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015adc:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 8015ade:	4b02      	ldr	r3, [pc, #8]	; (8015ae8 <eckey_debug+0x10>)
 8015ae0:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015ae2:	6088      	str	r0, [r1, #8]
}
 8015ae4:	4770      	bx	lr
 8015ae6:	bf00      	nop
 8015ae8:	080308b3 	.word	0x080308b3

08015aec <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 8015aec:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 8015aee:	2801      	cmp	r0, #1
 8015af0:	bf8c      	ite	hi
 8015af2:	2000      	movhi	r0, #0
 8015af4:	2001      	movls	r0, #1
 8015af6:	4770      	bx	lr

08015af8 <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 8015af8:	1f03      	subs	r3, r0, #4
 8015afa:	4258      	negs	r0, r3
 8015afc:	4158      	adcs	r0, r3
 8015afe:	4770      	bx	lr

08015b00 <rsa_free_wrap>:
{
 8015b00:	b510      	push	{r4, lr}
 8015b02:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8015b04:	f001 fdfc 	bl	8017700 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8015b08:	4b02      	ldr	r3, [pc, #8]	; (8015b14 <rsa_free_wrap+0x14>)
 8015b0a:	4620      	mov	r0, r4
 8015b0c:	681b      	ldr	r3, [r3, #0]
}
 8015b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015b12:	4718      	bx	r3
 8015b14:	2000053c 	.word	0x2000053c

08015b18 <rsa_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015b18:	4b06      	ldr	r3, [pc, #24]	; (8015b34 <rsa_alloc_wrap+0x1c>)
{
 8015b1a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	21ac      	movs	r1, #172	; 0xac
 8015b20:	2001      	movs	r0, #1
 8015b22:	4798      	blx	r3
    if( ctx != NULL )
 8015b24:	4604      	mov	r4, r0
 8015b26:	b118      	cbz	r0, 8015b30 <rsa_alloc_wrap+0x18>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8015b28:	2200      	movs	r2, #0
 8015b2a:	4611      	mov	r1, r2
 8015b2c:	f000 fcc2 	bl	80164b4 <mbedtls_rsa_init>
}
 8015b30:	4620      	mov	r0, r4
 8015b32:	bd10      	pop	{r4, pc}
 8015b34:	20000538 	.word	0x20000538

08015b38 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 8015b38:	f000 bdfc 	b.w	8016734 <mbedtls_rsa_check_pub_priv>

08015b3c <rsa_encrypt_wrap>:
{
 8015b3c:	b4f0      	push	{r4, r5, r6, r7}
    *olen = ((mbedtls_rsa_context *) ctx)->len;
 8015b3e:	9f04      	ldr	r7, [sp, #16]
 8015b40:	6846      	ldr	r6, [r0, #4]
 8015b42:	603e      	str	r6, [r7, #0]
    if( *olen > osize )
 8015b44:	9f05      	ldr	r7, [sp, #20]
 8015b46:	42be      	cmp	r6, r7
{
 8015b48:	460d      	mov	r5, r1
 8015b4a:	4614      	mov	r4, r2
 8015b4c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    if( *olen > osize )
 8015b50:	d806      	bhi.n	8015b60 <rsa_encrypt_wrap+0x24>
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015b52:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8015b56:	9404      	str	r4, [sp, #16]
 8015b58:	2300      	movs	r3, #0
}
 8015b5a:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015b5c:	f001 b8d2 	b.w	8016d04 <mbedtls_rsa_pkcs1_encrypt>
}
 8015b60:	4801      	ldr	r0, [pc, #4]	; (8015b68 <rsa_encrypt_wrap+0x2c>)
 8015b62:	bcf0      	pop	{r4, r5, r6, r7}
 8015b64:	4770      	bx	lr
 8015b66:	bf00      	nop
 8015b68:	ffffbc00 	.word	0xffffbc00

08015b6c <rsa_decrypt_wrap>:
{
 8015b6c:	b4f0      	push	{r4, r5, r6, r7}
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015b6e:	6847      	ldr	r7, [r0, #4]
{
 8015b70:	4616      	mov	r6, r2
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015b72:	42b7      	cmp	r7, r6
{
 8015b74:	460c      	mov	r4, r1
 8015b76:	9a07      	ldr	r2, [sp, #28]
 8015b78:	e9dd 5105 	ldrd	r5, r1, [sp, #20]
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015b7c:	d106      	bne.n	8015b8c <rsa_decrypt_wrap+0x20>
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 8015b7e:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8015b82:	9405      	str	r4, [sp, #20]
 8015b84:	2301      	movs	r3, #1
}
 8015b86:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 8015b88:	f001 ba2a 	b.w	8016fe0 <mbedtls_rsa_pkcs1_decrypt>
}
 8015b8c:	4801      	ldr	r0, [pc, #4]	; (8015b94 <rsa_decrypt_wrap+0x28>)
 8015b8e:	bcf0      	pop	{r4, r5, r6, r7}
 8015b90:	4770      	bx	lr
 8015b92:	bf00      	nop
 8015b94:	ffffbf80 	.word	0xffffbf80

08015b98 <rsa_sign_wrap>:
{
 8015b98:	b4f0      	push	{r4, r5, r6, r7}
    *sig_len = ((mbedtls_rsa_context *) ctx)->len;
 8015b9a:	9e05      	ldr	r6, [sp, #20]
 8015b9c:	6847      	ldr	r7, [r0, #4]
 8015b9e:	6037      	str	r7, [r6, #0]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015ba0:	9e04      	ldr	r6, [sp, #16]
{
 8015ba2:	460c      	mov	r4, r1
 8015ba4:	4615      	mov	r5, r2
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015ba6:	e9cd 4304 	strd	r4, r3, [sp, #16]
{
 8015baa:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015bae:	2301      	movs	r3, #1
 8015bb0:	e9cd 5606 	strd	r5, r6, [sp, #24]
}
 8015bb4:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015bb6:	f001 bbc1 	b.w	801733c <mbedtls_rsa_pkcs1_sign>
	...

08015bbc <rsa_verify_wrap>:
{
 8015bbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015bbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 8015bc0:	6846      	ldr	r6, [r0, #4]
 8015bc2:	42ae      	cmp	r6, r5
{
 8015bc4:	4604      	mov	r4, r0
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 8015bc6:	d811      	bhi.n	8015bec <rsa_verify_wrap+0x30>
    if( ( ret = mbedtls_rsa_pkcs1_verify( (mbedtls_rsa_context *) ctx, NULL, NULL,
 8015bc8:	9e08      	ldr	r6, [sp, #32]
 8015bca:	e9cd 1300 	strd	r1, r3, [sp]
 8015bce:	2300      	movs	r3, #0
 8015bd0:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	f001 fd7c 	bl	80176d4 <mbedtls_rsa_pkcs1_verify>
 8015bdc:	b920      	cbnz	r0, 8015be8 <rsa_verify_wrap+0x2c>
    if( sig_len > ((mbedtls_rsa_context *) ctx)->len )
 8015bde:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015be0:	4b03      	ldr	r3, [pc, #12]	; (8015bf0 <rsa_verify_wrap+0x34>)
 8015be2:	42aa      	cmp	r2, r5
 8015be4:	bf38      	it	cc
 8015be6:	4618      	movcc	r0, r3
}
 8015be8:	b004      	add	sp, #16
 8015bea:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015bec:	4801      	ldr	r0, [pc, #4]	; (8015bf4 <rsa_verify_wrap+0x38>)
 8015bee:	e7fb      	b.n	8015be8 <rsa_verify_wrap+0x2c>
 8015bf0:	ffffc700 	.word	0xffffc700
 8015bf4:	ffffbc80 	.word	0xffffbc80

08015bf8 <eckey_free_wrap>:
{
 8015bf8:	b510      	push	{r4, lr}
 8015bfa:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8015bfc:	f7fc f94a 	bl	8011e94 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 8015c00:	4b02      	ldr	r3, [pc, #8]	; (8015c0c <eckey_free_wrap+0x14>)
 8015c02:	4620      	mov	r0, r4
 8015c04:	681b      	ldr	r3, [r3, #0]
}
 8015c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015c0a:	4718      	bx	r3
 8015c0c:	2000053c 	.word	0x2000053c

08015c10 <eckey_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015c10:	4b05      	ldr	r3, [pc, #20]	; (8015c28 <eckey_alloc_wrap+0x18>)
{
 8015c12:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	21ac      	movs	r1, #172	; 0xac
 8015c18:	2001      	movs	r0, #1
 8015c1a:	4798      	blx	r3
    if( ctx != NULL )
 8015c1c:	4604      	mov	r4, r0
 8015c1e:	b108      	cbz	r0, 8015c24 <eckey_alloc_wrap+0x14>
        mbedtls_ecp_keypair_init( ctx );
 8015c20:	f7fc f8ee 	bl	8011e00 <mbedtls_ecp_keypair_init>
}
 8015c24:	4620      	mov	r0, r4
 8015c26:	bd10      	pop	{r4, pc}
 8015c28:	20000538 	.word	0x20000538

08015c2c <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 8015c2c:	f7fd b8d8 	b.w	8012de0 <mbedtls_ecp_check_pub_priv>

08015c30 <ecdsa_alloc_wrap>:
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}

static void *ecdsa_alloc_wrap( void )
{
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015c30:	4b05      	ldr	r3, [pc, #20]	; (8015c48 <ecdsa_alloc_wrap+0x18>)
{
 8015c32:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	21ac      	movs	r1, #172	; 0xac
 8015c38:	2001      	movs	r0, #1
 8015c3a:	4798      	blx	r3

    if( ctx != NULL )
 8015c3c:	4604      	mov	r4, r0
 8015c3e:	b108      	cbz	r0, 8015c44 <ecdsa_alloc_wrap+0x14>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 8015c40:	f7fb fbb0 	bl	80113a4 <mbedtls_ecdsa_init>

    return( ctx );
}
 8015c44:	4620      	mov	r0, r4
 8015c46:	bd10      	pop	{r4, pc}
 8015c48:	20000538 	.word	0x20000538

08015c4c <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 8015c4c:	b510      	push	{r4, lr}
 8015c4e:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 8015c50:	f7fb fbaa 	bl	80113a8 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 8015c54:	4b02      	ldr	r3, [pc, #8]	; (8015c60 <ecdsa_free_wrap+0x14>)
 8015c56:	4620      	mov	r0, r4
 8015c58:	681b      	ldr	r3, [r3, #0]
}
 8015c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015c5e:	4718      	bx	r3
 8015c60:	2000053c 	.word	0x2000053c

08015c64 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015c64:	f7fb bae0 	b.w	8011228 <mbedtls_ecdsa_write_signature>

08015c68 <eckey_sign_wrap>:
{
 8015c68:	b530      	push	{r4, r5, lr}
 8015c6a:	b0b3      	sub	sp, #204	; 0xcc
 8015c6c:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015c6e:	a807      	add	r0, sp, #28
{
 8015c70:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8015c74:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
 8015c76:	f7fb fb95 	bl	80113a4 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015c7a:	4621      	mov	r1, r4
 8015c7c:	a807      	add	r0, sp, #28
 8015c7e:	f7fb fb75 	bl	801136c <mbedtls_ecdsa_from_keypair>
 8015c82:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015c86:	4604      	mov	r4, r0
 8015c88:	b960      	cbnz	r0, 8015ca4 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015c8a:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8015c8c:	9103      	str	r1, [sp, #12]
 8015c8e:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8015c90:	9102      	str	r1, [sp, #8]
 8015c92:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8015c94:	9101      	str	r1, [sp, #4]
 8015c96:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8015c98:	9100      	str	r1, [sp, #0]
 8015c9a:	a807      	add	r0, sp, #28
 8015c9c:	4629      	mov	r1, r5
 8015c9e:	f7fb fac3 	bl	8011228 <mbedtls_ecdsa_write_signature>
 8015ca2:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015ca4:	a807      	add	r0, sp, #28
 8015ca6:	f7fb fb7f 	bl	80113a8 <mbedtls_ecdsa_free>
}
 8015caa:	4620      	mov	r0, r4
 8015cac:	b033      	add	sp, #204	; 0xcc
 8015cae:	bd30      	pop	{r4, r5, pc}

08015cb0 <ecdsa_verify_wrap>:
{
 8015cb0:	b507      	push	{r0, r1, r2, lr}
 8015cb2:	4611      	mov	r1, r2
 8015cb4:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 8015cb6:	9b05      	ldr	r3, [sp, #20]
 8015cb8:	9300      	str	r3, [sp, #0]
 8015cba:	9b04      	ldr	r3, [sp, #16]
 8015cbc:	f7fb fb06 	bl	80112cc <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 8015cc0:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015cc4:	bf08      	it	eq
 8015cc6:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 8015cca:	b003      	add	sp, #12
 8015ccc:	f85d fb04 	ldr.w	pc, [sp], #4

08015cd0 <eckey_verify_wrap>:
{
 8015cd0:	b530      	push	{r4, r5, lr}
 8015cd2:	b0b1      	sub	sp, #196	; 0xc4
 8015cd4:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015cd6:	a805      	add	r0, sp, #20
{
 8015cd8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015cdc:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
 8015cde:	f7fb fb61 	bl	80113a4 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015ce2:	4621      	mov	r1, r4
 8015ce4:	a805      	add	r0, sp, #20
 8015ce6:	f7fb fb41 	bl	801136c <mbedtls_ecdsa_from_keypair>
 8015cea:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015cee:	4604      	mov	r4, r0
 8015cf0:	b940      	cbnz	r0, 8015d04 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 8015cf2:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8015cf4:	9101      	str	r1, [sp, #4]
 8015cf6:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8015cf8:	9100      	str	r1, [sp, #0]
 8015cfa:	a805      	add	r0, sp, #20
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	f7ff ffd7 	bl	8015cb0 <ecdsa_verify_wrap>
 8015d02:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015d04:	a805      	add	r0, sp, #20
 8015d06:	f7fb fb4f 	bl	80113a8 <mbedtls_ecdsa_free>
}
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	b031      	add	sp, #196	; 0xc4
 8015d0e:	bd30      	pop	{r4, r5, pc}

08015d10 <pk_use_ecparams>:
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 8015d10:	6803      	ldr	r3, [r0, #0]
 8015d12:	2b06      	cmp	r3, #6
{
 8015d14:	b513      	push	{r0, r1, r4, lr}
 8015d16:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 8015d18:	d002      	beq.n	8015d20 <pk_use_ecparams+0x10>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8015d1a:	480a      	ldr	r0, [pc, #40]	; (8015d44 <pk_use_ecparams+0x34>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
 8015d1c:	b002      	add	sp, #8
 8015d1e:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 8015d20:	f10d 0107 	add.w	r1, sp, #7
 8015d24:	f7ff fb4c 	bl	80153c0 <mbedtls_oid_get_ec_grp>
 8015d28:	b948      	cbnz	r0, 8015d3e <pk_use_ecparams+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 8015d2a:	7823      	ldrb	r3, [r4, #0]
 8015d2c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015d30:	b10b      	cbz	r3, 8015d36 <pk_use_ecparams+0x26>
 8015d32:	428b      	cmp	r3, r1
 8015d34:	d1f1      	bne.n	8015d1a <pk_use_ecparams+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 8015d36:	4620      	mov	r0, r4
 8015d38:	f7fd fe9e 	bl	8013a78 <mbedtls_ecp_group_load>
 8015d3c:	e7ee      	b.n	8015d1c <pk_use_ecparams+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 8015d3e:	4802      	ldr	r0, [pc, #8]	; (8015d48 <pk_use_ecparams+0x38>)
 8015d40:	e7ec      	b.n	8015d1c <pk_use_ecparams+0xc>
 8015d42:	bf00      	nop
 8015d44:	ffffc300 	.word	0xffffc300
 8015d48:	ffffc600 	.word	0xffffc600

08015d4c <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8015d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d4e:	4605      	mov	r5, r0
 8015d50:	4610      	mov	r0, r2
    int ret;
    size_t len;
    unsigned char *p, *end;

    p = (unsigned char *) key;
 8015d52:	9101      	str	r1, [sp, #4]
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015d54:	2330      	movs	r3, #48	; 0x30
 8015d56:	4401      	add	r1, r0
 8015d58:	466a      	mov	r2, sp
 8015d5a:	a801      	add	r0, sp, #4
 8015d5c:	f7f8 f8ac 	bl	800deb8 <mbedtls_asn1_get_tag>
 8015d60:	4604      	mov	r4, r0
 8015d62:	b120      	cbz	r0, 8015d6e <pk_parse_key_pkcs1_der+0x22>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->QP ) ) != 0 )
    {
        mbedtls_rsa_free( rsa );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015d64:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
        return( ret );
    }

    return( 0 );
}
 8015d68:	4620      	mov	r0, r4
 8015d6a:	b003      	add	sp, #12
 8015d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8015d6e:	e9dd 1600 	ldrd	r1, r6, [sp]
 8015d72:	440e      	add	r6, r1
    if( ( ret = mbedtls_asn1_get_int( &p, end, &rsa->ver ) ) != 0 )
 8015d74:	462a      	mov	r2, r5
 8015d76:	4631      	mov	r1, r6
 8015d78:	a801      	add	r0, sp, #4
 8015d7a:	f7f8 f8c9 	bl	800df10 <mbedtls_asn1_get_int>
 8015d7e:	4604      	mov	r4, r0
 8015d80:	2800      	cmp	r0, #0
 8015d82:	d1ef      	bne.n	8015d64 <pk_parse_key_pkcs1_der+0x18>
    if( rsa->ver != 0 )
 8015d84:	682b      	ldr	r3, [r5, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d159      	bne.n	8015e3e <pk_parse_key_pkcs1_der+0xf2>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8015d8a:	f105 0708 	add.w	r7, r5, #8
 8015d8e:	463a      	mov	r2, r7
 8015d90:	4631      	mov	r1, r6
 8015d92:	a801      	add	r0, sp, #4
 8015d94:	f7f8 f8e0 	bl	800df58 <mbedtls_asn1_get_mpi>
 8015d98:	4604      	mov	r4, r0
 8015d9a:	bbb8      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8015d9c:	f105 0214 	add.w	r2, r5, #20
 8015da0:	4631      	mov	r1, r6
 8015da2:	a801      	add	r0, sp, #4
 8015da4:	f7f8 f8d8 	bl	800df58 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8015da8:	4604      	mov	r4, r0
 8015daa:	bb78      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 8015dac:	f105 0220 	add.w	r2, r5, #32
 8015db0:	4631      	mov	r1, r6
 8015db2:	a801      	add	r0, sp, #4
 8015db4:	f7f8 f8d0 	bl	800df58 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8015db8:	4604      	mov	r4, r0
 8015dba:	bb38      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 8015dbc:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8015dc0:	4631      	mov	r1, r6
 8015dc2:	a801      	add	r0, sp, #4
 8015dc4:	f7f8 f8c8 	bl	800df58 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 8015dc8:	4604      	mov	r4, r0
 8015dca:	b9f8      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 8015dcc:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8015dd0:	4631      	mov	r1, r6
 8015dd2:	a801      	add	r0, sp, #4
 8015dd4:	f7f8 f8c0 	bl	800df58 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 8015dd8:	4604      	mov	r4, r0
 8015dda:	b9b8      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 8015ddc:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8015de0:	4631      	mov	r1, r6
 8015de2:	a801      	add	r0, sp, #4
 8015de4:	f7f8 f8b8 	bl	800df58 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 8015de8:	4604      	mov	r4, r0
 8015dea:	b978      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 8015dec:	f105 0250 	add.w	r2, r5, #80	; 0x50
 8015df0:	4631      	mov	r1, r6
 8015df2:	a801      	add	r0, sp, #4
 8015df4:	f7f8 f8b0 	bl	800df58 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 8015df8:	4604      	mov	r4, r0
 8015dfa:	b938      	cbnz	r0, 8015e0c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->QP ) ) != 0 )
 8015dfc:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 8015e00:	4631      	mov	r1, r6
 8015e02:	a801      	add	r0, sp, #4
 8015e04:	f7f8 f8a8 	bl	800df58 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 8015e08:	4604      	mov	r4, r0
 8015e0a:	b118      	cbz	r0, 8015e14 <pk_parse_key_pkcs1_der+0xc8>
        mbedtls_rsa_free( rsa );
 8015e0c:	4628      	mov	r0, r5
 8015e0e:	f001 fc77 	bl	8017700 <mbedtls_rsa_free>
 8015e12:	e7a7      	b.n	8015d64 <pk_parse_key_pkcs1_der+0x18>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8015e14:	4638      	mov	r0, r7
 8015e16:	f7f8 fdd2 	bl	800e9be <mbedtls_mpi_size>
    if( p != end )
 8015e1a:	9b01      	ldr	r3, [sp, #4]
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8015e1c:	6068      	str	r0, [r5, #4]
    if( p != end )
 8015e1e:	42b3      	cmp	r3, r6
        mbedtls_rsa_free( rsa );
 8015e20:	4628      	mov	r0, r5
    if( p != end )
 8015e22:	d003      	beq.n	8015e2c <pk_parse_key_pkcs1_der+0xe0>
        mbedtls_rsa_free( rsa );
 8015e24:	f001 fc6c 	bl	8017700 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015e28:	4c06      	ldr	r4, [pc, #24]	; (8015e44 <pk_parse_key_pkcs1_der+0xf8>)
 8015e2a:	e79d      	b.n	8015d68 <pk_parse_key_pkcs1_der+0x1c>
    if( ( ret = mbedtls_rsa_check_privkey( rsa ) ) != 0 )
 8015e2c:	f000 fb7a 	bl	8016524 <mbedtls_rsa_check_privkey>
 8015e30:	4604      	mov	r4, r0
 8015e32:	2800      	cmp	r0, #0
 8015e34:	d098      	beq.n	8015d68 <pk_parse_key_pkcs1_der+0x1c>
        mbedtls_rsa_free( rsa );
 8015e36:	4628      	mov	r0, r5
 8015e38:	f001 fc62 	bl	8017700 <mbedtls_rsa_free>
        return( ret );
 8015e3c:	e794      	b.n	8015d68 <pk_parse_key_pkcs1_der+0x1c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8015e3e:	4c02      	ldr	r4, [pc, #8]	; (8015e48 <pk_parse_key_pkcs1_der+0xfc>)
 8015e40:	e792      	b.n	8015d68 <pk_parse_key_pkcs1_der+0x1c>
 8015e42:	bf00      	nop
 8015e44:	ffffc29a 	.word	0xffffc29a
 8015e48:	ffffc280 	.word	0xffffc280

08015e4c <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 8015e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e4e:	b08b      	sub	sp, #44	; 0x2c
 8015e50:	4605      	mov	r5, r0
 8015e52:	4610      	mov	r0, r2
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8015e54:	9106      	str	r1, [sp, #24]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015e56:	2330      	movs	r3, #48	; 0x30
 8015e58:	4401      	add	r1, r0
 8015e5a:	aa05      	add	r2, sp, #20
 8015e5c:	a806      	add	r0, sp, #24
 8015e5e:	f7f8 f82b 	bl	800deb8 <mbedtls_asn1_get_tag>
 8015e62:	b120      	cbz	r0, 8015e6e <pk_parse_key_sec1_der+0x22>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015e64:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 8015e68:	4620      	mov	r0, r4
 8015e6a:	b00b      	add	sp, #44	; 0x2c
 8015e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8015e6e:	e9dd 3705 	ldrd	r3, r7, [sp, #20]
 8015e72:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8015e74:	aa04      	add	r2, sp, #16
 8015e76:	4639      	mov	r1, r7
 8015e78:	a806      	add	r0, sp, #24
 8015e7a:	f7f8 f849 	bl	800df10 <mbedtls_asn1_get_int>
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	d1f0      	bne.n	8015e64 <pk_parse_key_sec1_der+0x18>
    if( version != 1 )
 8015e82:	9b04      	ldr	r3, [sp, #16]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	f040 8091 	bne.w	8015fac <pk_parse_key_sec1_der+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8015e8a:	2304      	movs	r3, #4
 8015e8c:	aa05      	add	r2, sp, #20
 8015e8e:	4639      	mov	r1, r7
 8015e90:	a806      	add	r0, sp, #24
 8015e92:	f7f8 f811 	bl	800deb8 <mbedtls_asn1_get_tag>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d1e4      	bne.n	8015e64 <pk_parse_key_sec1_der+0x18>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 8015e9a:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 8015e9e:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	f7f8 fd91 	bl	800e9ca <mbedtls_mpi_read_binary>
 8015ea8:	4604      	mov	r4, r0
 8015eaa:	b128      	cbz	r0, 8015eb8 <pk_parse_key_sec1_der+0x6c>
        mbedtls_ecp_keypair_free( eck );
 8015eac:	4628      	mov	r0, r5
 8015eae:	f7fb fff1 	bl	8011e94 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015eb2:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 8015eb6:	e7d7      	b.n	8015e68 <pk_parse_key_sec1_der+0x1c>
    p += len;
 8015eb8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8015ebc:	4413      	add	r3, r2
    if( p != end )
 8015ebe:	42bb      	cmp	r3, r7
    p += len;
 8015ec0:	9306      	str	r3, [sp, #24]
    if( p != end )
 8015ec2:	d05c      	beq.n	8015f7e <pk_parse_key_sec1_der+0x132>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015ec4:	23a0      	movs	r3, #160	; 0xa0
 8015ec6:	aa05      	add	r2, sp, #20
 8015ec8:	4639      	mov	r1, r7
 8015eca:	a806      	add	r0, sp, #24
 8015ecc:	f7f7 fff4 	bl	800deb8 <mbedtls_asn1_get_tag>
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	bb20      	cbnz	r0, 8015f1e <pk_parse_key_sec1_der+0xd2>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8015ed4:	e9dd 4305 	ldrd	r4, r3, [sp, #20]
 8015ed8:	441c      	add	r4, r3
    params->tag = **p;
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	9307      	str	r3, [sp, #28]
    if( params->tag != MBEDTLS_ASN1_OID
 8015ede:	2b06      	cmp	r3, #6
 8015ee0:	d11b      	bne.n	8015f1a <pk_parse_key_sec1_der+0xce>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 8015ee2:	aa08      	add	r2, sp, #32
 8015ee4:	4621      	mov	r1, r4
 8015ee6:	a806      	add	r0, sp, #24
 8015ee8:	f7f7 ffe6 	bl	800deb8 <mbedtls_asn1_get_tag>
 8015eec:	b160      	cbz	r0, 8015f08 <pk_parse_key_sec1_der+0xbc>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8015eee:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 8015ef2:	d105      	bne.n	8015f00 <pk_parse_key_sec1_der+0xb4>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
 8015ef4:	4629      	mov	r1, r5
 8015ef6:	a807      	add	r0, sp, #28
 8015ef8:	f7ff ff0a 	bl	8015d10 <pk_use_ecparams>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8015efc:	4604      	mov	r4, r0
 8015efe:	b188      	cbz	r0, 8015f24 <pk_parse_key_sec1_der+0xd8>
        mbedtls_ecp_keypair_free( eck );
 8015f00:	4628      	mov	r0, r5
 8015f02:	f7fb ffc7 	bl	8011e94 <mbedtls_ecp_keypair_free>
        return( ret );
 8015f06:	e7af      	b.n	8015e68 <pk_parse_key_sec1_der+0x1c>
    params->p = *p;
 8015f08:	9b06      	ldr	r3, [sp, #24]
    *p += params->len;
 8015f0a:	9a08      	ldr	r2, [sp, #32]
    params->p = *p;
 8015f0c:	9309      	str	r3, [sp, #36]	; 0x24
    *p += params->len;
 8015f0e:	4413      	add	r3, r2
    if( *p != end )
 8015f10:	429c      	cmp	r4, r3
    *p += params->len;
 8015f12:	9306      	str	r3, [sp, #24]
    if( *p != end )
 8015f14:	d0ee      	beq.n	8015ef4 <pk_parse_key_sec1_der+0xa8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015f16:	4c27      	ldr	r4, [pc, #156]	; (8015fb4 <pk_parse_key_sec1_der+0x168>)
 8015f18:	e7f2      	b.n	8015f00 <pk_parse_key_sec1_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015f1a:	4c27      	ldr	r4, [pc, #156]	; (8015fb8 <pk_parse_key_sec1_der+0x16c>)
                mbedtls_ecp_keypair_free( eck );
 8015f1c:	e7f0      	b.n	8015f00 <pk_parse_key_sec1_der+0xb4>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8015f1e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8015f22:	d1c3      	bne.n	8015eac <pk_parse_key_sec1_der+0x60>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015f24:	23a1      	movs	r3, #161	; 0xa1
 8015f26:	aa05      	add	r2, sp, #20
 8015f28:	4639      	mov	r1, r7
 8015f2a:	a806      	add	r0, sp, #24
 8015f2c:	f7f7 ffc4 	bl	800deb8 <mbedtls_asn1_get_tag>
 8015f30:	4604      	mov	r4, r0
 8015f32:	bb08      	cbnz	r0, 8015f78 <pk_parse_key_sec1_der+0x12c>
            end2 = p + len;
 8015f34:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
 8015f38:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 8015f3a:	aa05      	add	r2, sp, #20
 8015f3c:	4621      	mov	r1, r4
 8015f3e:	a806      	add	r0, sp, #24
 8015f40:	f7f8 f83e 	bl	800dfc0 <mbedtls_asn1_get_bitstring_null>
 8015f44:	2800      	cmp	r0, #0
 8015f46:	d18d      	bne.n	8015e64 <pk_parse_key_sec1_der+0x18>
            if( p + len != end2 )
 8015f48:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8015f4c:	4413      	add	r3, r2
 8015f4e:	429c      	cmp	r4, r3
 8015f50:	d12e      	bne.n	8015fb0 <pk_parse_key_sec1_der+0x164>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8015f52:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8015f56:	1aa3      	subs	r3, r4, r2
 8015f58:	4628      	mov	r0, r5
 8015f5a:	9103      	str	r1, [sp, #12]
 8015f5c:	f7fc fcda 	bl	8012914 <mbedtls_ecp_point_read_binary>
 8015f60:	9903      	ldr	r1, [sp, #12]
 8015f62:	b910      	cbnz	r0, 8015f6a <pk_parse_key_sec1_der+0x11e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8015f64:	4628      	mov	r0, r5
 8015f66:	f7fc fd61 	bl	8012a2c <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 8015f6a:	9406      	str	r4, [sp, #24]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 8015f6c:	b1a8      	cbz	r0, 8015f9a <pk_parse_key_sec1_der+0x14e>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 8015f6e:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 8015f72:	d004      	beq.n	8015f7e <pk_parse_key_sec1_der+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8015f74:	4c11      	ldr	r4, [pc, #68]	; (8015fbc <pk_parse_key_sec1_der+0x170>)
 8015f76:	e777      	b.n	8015e68 <pk_parse_key_sec1_der+0x1c>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8015f78:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8015f7c:	d196      	bne.n	8015eac <pk_parse_key_sec1_der+0x60>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
 8015f7e:	2300      	movs	r3, #0
 8015f80:	e9cd 3300 	strd	r3, r3, [sp]
 8015f84:	4632      	mov	r2, r6
 8015f86:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015f8a:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8015f8e:	4628      	mov	r0, r5
 8015f90:	f7fc fe30 	bl	8012bf4 <mbedtls_ecp_mul>
    if( ! pubkey_done &&
 8015f94:	4604      	mov	r4, r0
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d188      	bne.n	8015eac <pk_parse_key_sec1_der+0x60>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 8015f9a:	4631      	mov	r1, r6
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	f7fc fe0b 	bl	8012bb8 <mbedtls_ecp_check_privkey>
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	f43f af5f 	beq.w	8015e68 <pk_parse_key_sec1_der+0x1c>
 8015faa:	e7a9      	b.n	8015f00 <pk_parse_key_sec1_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 8015fac:	4c04      	ldr	r4, [pc, #16]	; (8015fc0 <pk_parse_key_sec1_der+0x174>)
 8015fae:	e75b      	b.n	8015e68 <pk_parse_key_sec1_der+0x1c>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8015fb0:	4c00      	ldr	r4, [pc, #0]	; (8015fb4 <pk_parse_key_sec1_der+0x168>)
 8015fb2:	e759      	b.n	8015e68 <pk_parse_key_sec1_der+0x1c>
 8015fb4:	ffffc29a 	.word	0xffffc29a
 8015fb8:	ffffc29e 	.word	0xffffc29e
 8015fbc:	ffffc300 	.word	0xffffc300
 8015fc0:	ffffc280 	.word	0xffffc280

08015fc4 <pk_get_pk_alg>:
{
 8015fc4:	b530      	push	{r4, r5, lr}
 8015fc6:	4615      	mov	r5, r2
 8015fc8:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 8015fca:	2200      	movs	r2, #0
 8015fcc:	e9c3 2200 	strd	r2, r2, [r3]
 8015fd0:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8015fd2:	aa01      	add	r2, sp, #4
{
 8015fd4:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8015fd6:	f7f8 f847 	bl	800e068 <mbedtls_asn1_get_alg>
 8015fda:	b118      	cbz	r0, 8015fe4 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 8015fdc:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 8015fe0:	b005      	add	sp, #20
 8015fe2:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	a801      	add	r0, sp, #4
 8015fe8:	f7ff f9d0 	bl	801538c <mbedtls_oid_get_pk_alg>
 8015fec:	b960      	cbnz	r0, 8016008 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8015fee:	782b      	ldrb	r3, [r5, #0]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d1f5      	bne.n	8015fe0 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8015ff4:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8015ff6:	2b05      	cmp	r3, #5
 8015ff8:	d000      	beq.n	8015ffc <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8015ffa:	b93b      	cbnz	r3, 801600c <pk_get_pk_alg+0x48>
 8015ffc:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 8015ffe:	4b04      	ldr	r3, [pc, #16]	; (8016010 <pk_get_pk_alg+0x4c>)
 8016000:	2a00      	cmp	r2, #0
 8016002:	bf18      	it	ne
 8016004:	4618      	movne	r0, r3
 8016006:	e7eb      	b.n	8015fe0 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016008:	4802      	ldr	r0, [pc, #8]	; (8016014 <pk_get_pk_alg+0x50>)
 801600a:	e7e9      	b.n	8015fe0 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 801600c:	4800      	ldr	r0, [pc, #0]	; (8016010 <pk_get_pk_alg+0x4c>)
 801600e:	e7e7      	b.n	8015fe0 <pk_get_pk_alg+0x1c>
 8016010:	ffffc580 	.word	0xffffc580
 8016014:	ffffc380 	.word	0xffffc380

08016018 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8016018:	b530      	push	{r4, r5, lr}
 801601a:	b08b      	sub	sp, #44	; 0x2c
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801601c:	2300      	movs	r3, #0
{
 801601e:	4605      	mov	r5, r0
 8016020:	4610      	mov	r0, r2
    unsigned char *p = (unsigned char *) key;
 8016022:	9106      	str	r1, [sp, #24]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8016024:	f88d 300f 	strb.w	r3, [sp, #15]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8016028:	4401      	add	r1, r0
 801602a:	2330      	movs	r3, #48	; 0x30
 801602c:	aa05      	add	r2, sp, #20
 801602e:	a806      	add	r0, sp, #24
 8016030:	f7f7 ff42 	bl	800deb8 <mbedtls_asn1_get_tag>
 8016034:	b120      	cbz	r0, 8016040 <pk_parse_key_pkcs8_unencrypted_der+0x28>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8016036:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 801603a:	4620      	mov	r0, r4
 801603c:	b00b      	add	sp, #44	; 0x2c
 801603e:	bd30      	pop	{r4, r5, pc}
    end = p + len;
 8016040:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8016044:	aa04      	add	r2, sp, #16
    end = p + len;
 8016046:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8016048:	a806      	add	r0, sp, #24
 801604a:	9101      	str	r1, [sp, #4]
 801604c:	f7f7 ff60 	bl	800df10 <mbedtls_asn1_get_int>
 8016050:	9901      	ldr	r1, [sp, #4]
 8016052:	2800      	cmp	r0, #0
 8016054:	d1ef      	bne.n	8016036 <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( version != 0 )
 8016056:	9b04      	ldr	r3, [sp, #16]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d140      	bne.n	80160de <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 801605c:	ab07      	add	r3, sp, #28
 801605e:	f10d 020f 	add.w	r2, sp, #15
 8016062:	a806      	add	r0, sp, #24
 8016064:	9101      	str	r1, [sp, #4]
 8016066:	f7ff ffad 	bl	8015fc4 <pk_get_pk_alg>
 801606a:	9901      	ldr	r1, [sp, #4]
 801606c:	2800      	cmp	r0, #0
 801606e:	d1e2      	bne.n	8016036 <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8016070:	2304      	movs	r3, #4
 8016072:	aa05      	add	r2, sp, #20
 8016074:	a806      	add	r0, sp, #24
 8016076:	f7f7 ff1f 	bl	800deb8 <mbedtls_asn1_get_tag>
 801607a:	2800      	cmp	r0, #0
 801607c:	d1db      	bne.n	8016036 <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( len < 1 )
 801607e:	9b05      	ldr	r3, [sp, #20]
 8016080:	b37b      	cbz	r3, 80160e2 <pk_parse_key_pkcs8_unencrypted_der+0xca>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8016082:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8016086:	f7ff fbe5 	bl	8015854 <mbedtls_pk_info_from_type>
 801608a:	4601      	mov	r1, r0
 801608c:	b908      	cbnz	r0, 8016092 <pk_parse_key_pkcs8_unencrypted_der+0x7a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 801608e:	4c16      	ldr	r4, [pc, #88]	; (80160e8 <pk_parse_key_pkcs8_unencrypted_der+0xd0>)
 8016090:	e7d3      	b.n	801603a <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 8016092:	4628      	mov	r0, r5
 8016094:	f7ff fbea 	bl	801586c <mbedtls_pk_setup>
 8016098:	4604      	mov	r4, r0
 801609a:	2800      	cmp	r0, #0
 801609c:	d1cd      	bne.n	801603a <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
 801609e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d10b      	bne.n	80160be <pk_parse_key_pkcs8_unencrypted_der+0xa6>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80160a6:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80160aa:	6868      	ldr	r0, [r5, #4]
 80160ac:	f7ff fe4e 	bl	8015d4c <pk_parse_key_pkcs1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 80160b0:	4604      	mov	r4, r0
 80160b2:	2800      	cmp	r0, #0
 80160b4:	d0c1      	beq.n	801603a <pk_parse_key_pkcs8_unencrypted_der+0x22>
            mbedtls_pk_free( pk );
 80160b6:	4628      	mov	r0, r5
 80160b8:	f7ff fbbb 	bl	8015832 <mbedtls_pk_free>
            return( ret );
 80160bc:	e7bd      	b.n	801603a <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 80160be:	3b02      	subs	r3, #2
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d8e4      	bhi.n	801608e <pk_parse_key_pkcs8_unencrypted_der+0x76>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 80160c4:	6869      	ldr	r1, [r5, #4]
 80160c6:	a807      	add	r0, sp, #28
 80160c8:	f7ff fe22 	bl	8015d10 <pk_use_ecparams>
 80160cc:	4604      	mov	r4, r0
 80160ce:	2800      	cmp	r0, #0
 80160d0:	d1f1      	bne.n	80160b6 <pk_parse_key_pkcs8_unencrypted_der+0x9e>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
 80160d2:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80160d6:	6868      	ldr	r0, [r5, #4]
 80160d8:	f7ff feb8 	bl	8015e4c <pk_parse_key_sec1_der>
 80160dc:	e7e8      	b.n	80160b0 <pk_parse_key_pkcs8_unencrypted_der+0x98>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 80160de:	4c03      	ldr	r4, [pc, #12]	; (80160ec <pk_parse_key_pkcs8_unencrypted_der+0xd4>)
 80160e0:	e7ab      	b.n	801603a <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80160e2:	4c03      	ldr	r4, [pc, #12]	; (80160f0 <pk_parse_key_pkcs8_unencrypted_der+0xd8>)
 80160e4:	e7a9      	b.n	801603a <pk_parse_key_pkcs8_unencrypted_der+0x22>
 80160e6:	bf00      	nop
 80160e8:	ffffc380 	.word	0xffffc380
 80160ec:	ffffc280 	.word	0xffffc280
 80160f0:	ffffc2a0 	.word	0xffffc2a0

080160f4 <mbedtls_pk_parse_subpubkey>:
{
 80160f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160f8:	b088      	sub	sp, #32
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80160fa:	2300      	movs	r3, #0
{
 80160fc:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 80160fe:	f88d 300b 	strb.w	r3, [sp, #11]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8016102:	aa03      	add	r2, sp, #12
 8016104:	2330      	movs	r3, #48	; 0x30
{
 8016106:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8016108:	f7f7 fed6 	bl	800deb8 <mbedtls_asn1_get_tag>
 801610c:	b128      	cbz	r0, 801611a <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801610e:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
}
 8016112:	4628      	mov	r0, r5
 8016114:	b008      	add	sp, #32
 8016116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 801611a:	9b03      	ldr	r3, [sp, #12]
 801611c:	6837      	ldr	r7, [r6, #0]
 801611e:	441f      	add	r7, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8016120:	f10d 020b 	add.w	r2, sp, #11
 8016124:	ab05      	add	r3, sp, #20
 8016126:	4639      	mov	r1, r7
 8016128:	4630      	mov	r0, r6
 801612a:	f7ff ff4b 	bl	8015fc4 <pk_get_pk_alg>
 801612e:	4605      	mov	r5, r0
 8016130:	2800      	cmp	r0, #0
 8016132:	d1ee      	bne.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8016134:	aa03      	add	r2, sp, #12
 8016136:	4639      	mov	r1, r7
 8016138:	4630      	mov	r0, r6
 801613a:	f7f7 ff41 	bl	800dfc0 <mbedtls_asn1_get_bitstring_null>
 801613e:	b110      	cbz	r0, 8016146 <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8016140:	f5a0 556c 	sub.w	r5, r0, #15104	; 0x3b00
 8016144:	e7e5      	b.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8016146:	6833      	ldr	r3, [r6, #0]
 8016148:	9a03      	ldr	r2, [sp, #12]
 801614a:	4413      	add	r3, r2
 801614c:	429f      	cmp	r7, r3
 801614e:	d16e      	bne.n	801622e <mbedtls_pk_parse_subpubkey+0x13a>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8016150:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8016154:	f7ff fb7e 	bl	8015854 <mbedtls_pk_info_from_type>
 8016158:	4601      	mov	r1, r0
 801615a:	2800      	cmp	r0, #0
 801615c:	d069      	beq.n	8016232 <mbedtls_pk_parse_subpubkey+0x13e>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 801615e:	4640      	mov	r0, r8
 8016160:	f7ff fb84 	bl	801586c <mbedtls_pk_setup>
 8016164:	4605      	mov	r5, r0
 8016166:	2800      	cmp	r0, #0
 8016168:	d1d3      	bne.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 801616a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801616e:	2b01      	cmp	r3, #1
 8016170:	d13a      	bne.n	80161e8 <mbedtls_pk_parse_subpubkey+0xf4>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8016172:	2330      	movs	r3, #48	; 0x30
 8016174:	aa04      	add	r2, sp, #16
 8016176:	4639      	mov	r1, r7
 8016178:	4630      	mov	r0, r6
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 801617a:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801617e:	f7f7 fe9b 	bl	800deb8 <mbedtls_asn1_get_tag>
 8016182:	b138      	cbz	r0, 8016194 <mbedtls_pk_parse_subpubkey+0xa0>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8016184:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
    if( ret == 0 && *p != end )
 8016188:	b344      	cbz	r4, 80161dc <mbedtls_pk_parse_subpubkey+0xe8>
        mbedtls_pk_free( pk );
 801618a:	4640      	mov	r0, r8
 801618c:	f7ff fb51 	bl	8015832 <mbedtls_pk_free>
 8016190:	4625      	mov	r5, r4
 8016192:	e7be      	b.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8016194:	6833      	ldr	r3, [r6, #0]
 8016196:	9a04      	ldr	r2, [sp, #16]
 8016198:	4413      	add	r3, r2
 801619a:	429f      	cmp	r7, r3
 801619c:	d001      	beq.n	80161a2 <mbedtls_pk_parse_subpubkey+0xae>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 801619e:	4c26      	ldr	r4, [pc, #152]	; (8016238 <mbedtls_pk_parse_subpubkey+0x144>)
 80161a0:	e7f3      	b.n	801618a <mbedtls_pk_parse_subpubkey+0x96>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 80161a2:	f109 0a08 	add.w	sl, r9, #8
 80161a6:	4652      	mov	r2, sl
 80161a8:	4639      	mov	r1, r7
 80161aa:	4630      	mov	r0, r6
 80161ac:	f7f7 fed4 	bl	800df58 <mbedtls_asn1_get_mpi>
 80161b0:	2800      	cmp	r0, #0
 80161b2:	d1e7      	bne.n	8016184 <mbedtls_pk_parse_subpubkey+0x90>
        ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->E ) ) != 0 )
 80161b4:	f109 0214 	add.w	r2, r9, #20
 80161b8:	4639      	mov	r1, r7
 80161ba:	4630      	mov	r0, r6
 80161bc:	f7f7 fecc 	bl	800df58 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 80161c0:	2800      	cmp	r0, #0
 80161c2:	d1df      	bne.n	8016184 <mbedtls_pk_parse_subpubkey+0x90>
    if( *p != end )
 80161c4:	6833      	ldr	r3, [r6, #0]
 80161c6:	429f      	cmp	r7, r3
 80161c8:	d1e9      	bne.n	801619e <mbedtls_pk_parse_subpubkey+0xaa>
    if( ( ret = mbedtls_rsa_check_pubkey( rsa ) ) != 0 )
 80161ca:	4648      	mov	r0, r9
 80161cc:	f000 f97e 	bl	80164cc <mbedtls_rsa_check_pubkey>
 80161d0:	b940      	cbnz	r0, 80161e4 <mbedtls_pk_parse_subpubkey+0xf0>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 80161d2:	4650      	mov	r0, sl
 80161d4:	f7f8 fbf3 	bl	800e9be <mbedtls_mpi_size>
 80161d8:	f8c9 0004 	str.w	r0, [r9, #4]
    if( ret == 0 && *p != end )
 80161dc:	6833      	ldr	r3, [r6, #0]
 80161de:	42bb      	cmp	r3, r7
 80161e0:	d1dd      	bne.n	801619e <mbedtls_pk_parse_subpubkey+0xaa>
 80161e2:	e796      	b.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 80161e4:	4c15      	ldr	r4, [pc, #84]	; (801623c <mbedtls_pk_parse_subpubkey+0x148>)
 80161e6:	e7d0      	b.n	801618a <mbedtls_pk_parse_subpubkey+0x96>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 80161e8:	3b02      	subs	r3, #2
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	d81d      	bhi.n	801622a <mbedtls_pk_parse_subpubkey+0x136>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 80161ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80161f2:	a805      	add	r0, sp, #20
 80161f4:	f7ff fd8c 	bl	8015d10 <pk_use_ecparams>
        if( ret == 0 )
 80161f8:	4604      	mov	r4, r0
 80161fa:	2800      	cmp	r0, #0
 80161fc:	d1c5      	bne.n	801618a <mbedtls_pk_parse_subpubkey+0x96>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 80161fe:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8016202:	6832      	ldr	r2, [r6, #0]
 8016204:	f109 0188 	add.w	r1, r9, #136	; 0x88
 8016208:	1abb      	subs	r3, r7, r2
 801620a:	4648      	mov	r0, r9
 801620c:	9101      	str	r1, [sp, #4]
 801620e:	f7fc fb81 	bl	8012914 <mbedtls_ecp_point_read_binary>
 8016212:	9901      	ldr	r1, [sp, #4]
 8016214:	4604      	mov	r4, r0
 8016216:	b918      	cbnz	r0, 8016220 <mbedtls_pk_parse_subpubkey+0x12c>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8016218:	4648      	mov	r0, r9
 801621a:	f7fc fc07 	bl	8012a2c <mbedtls_ecp_check_pubkey>
 801621e:	4604      	mov	r4, r0
    *p = (unsigned char *) end;
 8016220:	6037      	str	r7, [r6, #0]
    if( ret == 0 && *p != end )
 8016222:	2c00      	cmp	r4, #0
 8016224:	f43f af75 	beq.w	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
 8016228:	e7af      	b.n	801618a <mbedtls_pk_parse_subpubkey+0x96>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 801622a:	4c05      	ldr	r4, [pc, #20]	; (8016240 <mbedtls_pk_parse_subpubkey+0x14c>)
 801622c:	e7ad      	b.n	801618a <mbedtls_pk_parse_subpubkey+0x96>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 801622e:	4d02      	ldr	r5, [pc, #8]	; (8016238 <mbedtls_pk_parse_subpubkey+0x144>)
 8016230:	e76f      	b.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016232:	4d03      	ldr	r5, [pc, #12]	; (8016240 <mbedtls_pk_parse_subpubkey+0x14c>)
 8016234:	e76d      	b.n	8016112 <mbedtls_pk_parse_subpubkey+0x1e>
 8016236:	bf00      	nop
 8016238:	ffffc49a 	.word	0xffffc49a
 801623c:	ffffc500 	.word	0xffffc500
 8016240:	ffffc380 	.word	0xffffc380

08016244 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8016244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016248:	b089      	sub	sp, #36	; 0x24
 801624a:	4605      	mov	r5, r0
 801624c:	4617      	mov	r7, r2

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 801624e:	a805      	add	r0, sp, #20
{
 8016250:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016254:	460e      	mov	r6, r1
 8016256:	4698      	mov	r8, r3
    mbedtls_pem_init( &pem );
 8016258:	f7ff f971 	bl	801553e <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 801625c:	2f00      	cmp	r7, #0
 801625e:	d139      	bne.n	80162d4 <mbedtls_pk_parse_key+0x90>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 8016260:	463a      	mov	r2, r7
 8016262:	4631      	mov	r1, r6
 8016264:	4628      	mov	r0, r5
 8016266:	f7ff fed7 	bl	8016018 <pk_parse_key_pkcs8_unencrypted_der>
 801626a:	2800      	cmp	r0, #0
 801626c:	f000 80b5 	beq.w	80163da <mbedtls_pk_parse_key+0x196>
        return( 0 );

    mbedtls_pk_free( pk );
 8016270:	4628      	mov	r0, r5
 8016272:	f7ff fade 	bl	8015832 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 8016276:	2001      	movs	r0, #1
 8016278:	f7ff faec 	bl	8015854 <mbedtls_pk_info_from_type>
 801627c:	4601      	mov	r1, r0
 801627e:	2800      	cmp	r0, #0
 8016280:	d041      	beq.n	8016306 <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 8016282:	4628      	mov	r0, r5
 8016284:	f7ff faf2 	bl	801586c <mbedtls_pk_setup>
 8016288:	2800      	cmp	r0, #0
 801628a:	f040 80a6 	bne.w	80163da <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) ) == 0 )
 801628e:	6868      	ldr	r0, [r5, #4]
 8016290:	463a      	mov	r2, r7
 8016292:	4631      	mov	r1, r6
 8016294:	f7ff fd5a 	bl	8015d4c <pk_parse_key_pkcs1_der>
    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 8016298:	2800      	cmp	r0, #0
 801629a:	f000 809e 	beq.w	80163da <mbedtls_pk_parse_key+0x196>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 801629e:	4628      	mov	r0, r5
 80162a0:	f7ff fac7 	bl	8015832 <mbedtls_pk_free>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 80162a4:	2002      	movs	r0, #2
 80162a6:	f7ff fad5 	bl	8015854 <mbedtls_pk_info_from_type>
 80162aa:	4601      	mov	r1, r0
 80162ac:	b358      	cbz	r0, 8016306 <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 80162ae:	4628      	mov	r0, r5
 80162b0:	f7ff fadc 	bl	801586c <mbedtls_pk_setup>
 80162b4:	2800      	cmp	r0, #0
 80162b6:	f040 8090 	bne.w	80163da <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), key, keylen ) ) == 0 )
 80162ba:	6868      	ldr	r0, [r5, #4]
 80162bc:	463a      	mov	r2, r7
 80162be:	4631      	mov	r1, r6
 80162c0:	f7ff fdc4 	bl	8015e4c <pk_parse_key_sec1_der>
    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 80162c4:	2800      	cmp	r0, #0
 80162c6:	f000 8088 	beq.w	80163da <mbedtls_pk_parse_key+0x196>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 80162ca:	4628      	mov	r0, r5
 80162cc:	f7ff fab1 	bl	8015832 <mbedtls_pk_free>
#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80162d0:	4c43      	ldr	r4, [pc, #268]	; (80163e0 <mbedtls_pk_parse_key+0x19c>)
 80162d2:	e019      	b.n	8016308 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80162d4:	f107 39ff 	add.w	r9, r7, #4294967295
 80162d8:	f816 3009 	ldrb.w	r3, [r6, r9]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d1bf      	bne.n	8016260 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 80162e0:	f10d 0a10 	add.w	sl, sp, #16
 80162e4:	e9cd ba01 	strd	fp, sl, [sp, #4]
 80162e8:	4a3e      	ldr	r2, [pc, #248]	; (80163e4 <mbedtls_pk_parse_key+0x1a0>)
 80162ea:	493f      	ldr	r1, [pc, #252]	; (80163e8 <mbedtls_pk_parse_key+0x1a4>)
 80162ec:	f8cd 8000 	str.w	r8, [sp]
 80162f0:	4633      	mov	r3, r6
 80162f2:	a805      	add	r0, sp, #20
 80162f4:	f7ff f928 	bl	8015548 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80162f8:	4604      	mov	r4, r0
 80162fa:	b9e0      	cbnz	r0, 8016336 <mbedtls_pk_parse_key+0xf2>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 80162fc:	2001      	movs	r0, #1
 80162fe:	f7ff faa9 	bl	8015854 <mbedtls_pk_info_from_type>
 8016302:	4601      	mov	r1, r0
 8016304:	b920      	cbnz	r0, 8016310 <mbedtls_pk_parse_key+0xcc>
            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016306:	4c39      	ldr	r4, [pc, #228]	; (80163ec <mbedtls_pk_parse_key+0x1a8>)
}
 8016308:	4620      	mov	r0, r4
 801630a:	b009      	add	sp, #36	; 0x24
 801630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( ret = mbedtls_pk_setup( pk, pk_info                    ) ) != 0 ||
 8016310:	4628      	mov	r0, r5
 8016312:	f7ff faab 	bl	801586c <mbedtls_pk_setup>
 8016316:	4604      	mov	r4, r0
 8016318:	b930      	cbnz	r0, 8016328 <mbedtls_pk_parse_key+0xe4>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
 801631a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801631e:	6868      	ldr	r0, [r5, #4]
 8016320:	f7ff fd14 	bl	8015d4c <pk_parse_key_pkcs1_der>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8016324:	4604      	mov	r4, r0
 8016326:	b110      	cbz	r0, 801632e <mbedtls_pk_parse_key+0xea>
            mbedtls_pk_free( pk );
 8016328:	4628      	mov	r0, r5
 801632a:	f7ff fa82 	bl	8015832 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 801632e:	a805      	add	r0, sp, #20
 8016330:	f7ff fa66 	bl	8015800 <mbedtls_pem_free>
        return( ret );
 8016334:	e7e8      	b.n	8016308 <mbedtls_pk_parse_key+0xc4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8016336:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 801633a:	d101      	bne.n	8016340 <mbedtls_pk_parse_key+0xfc>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 801633c:	4c2c      	ldr	r4, [pc, #176]	; (80163f0 <mbedtls_pk_parse_key+0x1ac>)
 801633e:	e7e3      	b.n	8016308 <mbedtls_pk_parse_key+0xc4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8016340:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8016344:	d101      	bne.n	801634a <mbedtls_pk_parse_key+0x106>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8016346:	4c2b      	ldr	r4, [pc, #172]	; (80163f4 <mbedtls_pk_parse_key+0x1b0>)
 8016348:	e7de      	b.n	8016308 <mbedtls_pk_parse_key+0xc4>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801634a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 801634e:	d1db      	bne.n	8016308 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016350:	f816 3009 	ldrb.w	r3, [r6, r9]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d183      	bne.n	8016260 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 8016358:	e9cd ba01 	strd	fp, sl, [sp, #4]
 801635c:	4a26      	ldr	r2, [pc, #152]	; (80163f8 <mbedtls_pk_parse_key+0x1b4>)
 801635e:	4927      	ldr	r1, [pc, #156]	; (80163fc <mbedtls_pk_parse_key+0x1b8>)
 8016360:	f8cd 8000 	str.w	r8, [sp]
 8016364:	4633      	mov	r3, r6
 8016366:	a805      	add	r0, sp, #20
 8016368:	f7ff f8ee 	bl	8015548 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 801636c:	4604      	mov	r4, r0
 801636e:	b988      	cbnz	r0, 8016394 <mbedtls_pk_parse_key+0x150>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 8016370:	2002      	movs	r0, #2
 8016372:	f7ff fa6f 	bl	8015854 <mbedtls_pk_info_from_type>
 8016376:	4601      	mov	r1, r0
 8016378:	2800      	cmp	r0, #0
 801637a:	d0c4      	beq.n	8016306 <mbedtls_pk_parse_key+0xc2>
        if( ( ret = mbedtls_pk_setup( pk, pk_info                   ) ) != 0 ||
 801637c:	4628      	mov	r0, r5
 801637e:	f7ff fa75 	bl	801586c <mbedtls_pk_setup>
 8016382:	4604      	mov	r4, r0
 8016384:	2800      	cmp	r0, #0
 8016386:	d1cf      	bne.n	8016328 <mbedtls_pk_parse_key+0xe4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 8016388:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801638c:	6868      	ldr	r0, [r5, #4]
 801638e:	f7ff fd5d 	bl	8015e4c <pk_parse_key_sec1_der>
 8016392:	e7c7      	b.n	8016324 <mbedtls_pk_parse_key+0xe0>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8016394:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 8016398:	d0d0      	beq.n	801633c <mbedtls_pk_parse_key+0xf8>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 801639a:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 801639e:	d0d2      	beq.n	8016346 <mbedtls_pk_parse_key+0x102>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80163a0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80163a4:	d1b0      	bne.n	8016308 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80163a6:	f816 3009 	ldrb.w	r3, [r6, r9]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	f47f af58 	bne.w	8016260 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 80163b0:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	4a12      	ldr	r2, [pc, #72]	; (8016400 <mbedtls_pk_parse_key+0x1bc>)
 80163b8:	4912      	ldr	r1, [pc, #72]	; (8016404 <mbedtls_pk_parse_key+0x1c0>)
 80163ba:	4633      	mov	r3, r6
 80163bc:	a805      	add	r0, sp, #20
 80163be:	f7ff f8c3 	bl	8015548 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80163c2:	4604      	mov	r4, r0
 80163c4:	b928      	cbnz	r0, 80163d2 <mbedtls_pk_parse_key+0x18e>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 80163c6:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80163ca:	4628      	mov	r0, r5
 80163cc:	f7ff fe24 	bl	8016018 <pk_parse_key_pkcs8_unencrypted_der>
 80163d0:	e7a8      	b.n	8016324 <mbedtls_pk_parse_key+0xe0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80163d2:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80163d6:	d197      	bne.n	8016308 <mbedtls_pk_parse_key+0xc4>
 80163d8:	e742      	b.n	8016260 <mbedtls_pk_parse_key+0x1c>
        return( 0 );
 80163da:	2400      	movs	r4, #0
 80163dc:	e794      	b.n	8016308 <mbedtls_pk_parse_key+0xc4>
 80163de:	bf00      	nop
 80163e0:	ffffc300 	.word	0xffffc300
 80163e4:	080308ca 	.word	0x080308ca
 80163e8:	080308e8 	.word	0x080308e8
 80163ec:	ffffc380 	.word	0xffffc380
 80163f0:	ffffc480 	.word	0xffffc480
 80163f4:	ffffc400 	.word	0xffffc400
 80163f8:	08030908 	.word	0x08030908
 80163fc:	08030925 	.word	0x08030925
 8016400:	08030944 	.word	0x08030944
 8016404:	0803095e 	.word	0x0803095e

08016408 <mbedtls_platform_set_calloc_free>:
void (*mbedtls_free)( void * )     = MBEDTLS_PLATFORM_STD_FREE;

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc = calloc_func;
 8016408:	4b02      	ldr	r3, [pc, #8]	; (8016414 <mbedtls_platform_set_calloc_free+0xc>)
    mbedtls_free = free_func;
 801640a:	e9c3 0100 	strd	r0, r1, [r3]
    return( 0 );
}
 801640e:	2000      	movs	r0, #0
 8016410:	4770      	bx	lr
 8016412:	bf00      	nop
 8016414:	20000538 	.word	0x20000538

08016418 <mbedtls_zeroize>:
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8016418:	4401      	add	r1, r0
 801641a:	2300      	movs	r3, #0
 801641c:	4288      	cmp	r0, r1
 801641e:	d100      	bne.n	8016422 <mbedtls_zeroize+0xa>
}
 8016420:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8016422:	f800 3b01 	strb.w	r3, [r0], #1
 8016426:	e7f9      	b.n	801641c <mbedtls_zeroize+0x4>

08016428 <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static void mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8016428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801642c:	b092      	sub	sp, #72	; 0x48
 801642e:	4604      	mov	r4, r0
 8016430:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016432:	460d      	mov	r5, r1
 8016434:	4617      	mov	r7, r2
    unsigned char counter[4];
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8016436:	2100      	movs	r1, #0
 8016438:	2240      	movs	r2, #64	; 0x40
 801643a:	a802      	add	r0, sp, #8
{
 801643c:	4698      	mov	r8, r3
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 801643e:	f00b fedb 	bl	80221f8 <memset>
    memset( counter, 0, 4 );
 8016442:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8016444:	6830      	ldr	r0, [r6, #0]
    memset( counter, 0, 4 );
 8016446:	9301      	str	r3, [sp, #4]
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8016448:	f7fe fa5c 	bl	8014904 <mbedtls_md_get_size>
 801644c:	4681      	mov	r9, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 801644e:	b935      	cbnz	r5, 801645e <mgf_mask+0x36>
        counter[3]++;

        dlen -= use_len;
    }

    mbedtls_zeroize( mask, sizeof( mask ) );
 8016450:	2140      	movs	r1, #64	; 0x40
 8016452:	a802      	add	r0, sp, #8
 8016454:	f7ff ffe0 	bl	8016418 <mbedtls_zeroize>
}
 8016458:	b012      	add	sp, #72	; 0x48
 801645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( dlen < hlen )
 801645e:	454d      	cmp	r5, r9
        mbedtls_md_starts( md_ctx );
 8016460:	4630      	mov	r0, r6
 8016462:	46aa      	mov	sl, r5
 8016464:	bf28      	it	cs
 8016466:	46ca      	movcs	sl, r9
 8016468:	f7fe f954 	bl	8014714 <mbedtls_md_starts>
        mbedtls_md_update( md_ctx, src, slen );
 801646c:	4642      	mov	r2, r8
 801646e:	4639      	mov	r1, r7
 8016470:	4630      	mov	r0, r6
 8016472:	f7fe f95d 	bl	8014730 <mbedtls_md_update>
        mbedtls_md_update( md_ctx, counter, 4 );
 8016476:	2204      	movs	r2, #4
 8016478:	eb0d 0102 	add.w	r1, sp, r2
 801647c:	4630      	mov	r0, r6
 801647e:	f7fe f957 	bl	8014730 <mbedtls_md_update>
        mbedtls_md_finish( md_ctx, mask );
 8016482:	a902      	add	r1, sp, #8
 8016484:	4630      	mov	r0, r6
 8016486:	f7fe f961 	bl	801474c <mbedtls_md_finish>
        for( i = 0; i < use_len; ++i )
 801648a:	aa02      	add	r2, sp, #8
 801648c:	eb04 010a 	add.w	r1, r4, sl
 8016490:	428c      	cmp	r4, r1
 8016492:	d107      	bne.n	80164a4 <mgf_mask+0x7c>
        counter[3]++;
 8016494:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8016498:	3301      	adds	r3, #1
 801649a:	f88d 3007 	strb.w	r3, [sp, #7]
        dlen -= use_len;
 801649e:	eba5 050a 	sub.w	r5, r5, sl
 80164a2:	e7d4      	b.n	801644e <mgf_mask+0x26>
            *p++ ^= mask[i];
 80164a4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80164a8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80164ac:	4043      	eors	r3, r0
 80164ae:	f804 3c01 	strb.w	r3, [r4, #-1]
        for( i = 0; i < use_len; ++i )
 80164b2:	e7ed      	b.n	8016490 <mgf_mask+0x68>

080164b4 <mbedtls_rsa_init>:
{
 80164b4:	b570      	push	{r4, r5, r6, lr}
 80164b6:	4604      	mov	r4, r0
 80164b8:	460e      	mov	r6, r1
 80164ba:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80164bc:	2100      	movs	r1, #0
 80164be:	22ac      	movs	r2, #172	; 0xac
 80164c0:	f00b fe9a 	bl	80221f8 <memset>
    ctx->hash_id = hash_id;
 80164c4:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
 80164c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080164cc <mbedtls_rsa_check_pubkey>:
    if( !ctx->N.p || !ctx->E.p )
 80164cc:	6902      	ldr	r2, [r0, #16]
{
 80164ce:	b538      	push	{r3, r4, r5, lr}
 80164d0:	4604      	mov	r4, r0
    if( !ctx->N.p || !ctx->E.p )
 80164d2:	b302      	cbz	r2, 8016516 <mbedtls_rsa_check_pubkey+0x4a>
 80164d4:	69c3      	ldr	r3, [r0, #28]
 80164d6:	b1f3      	cbz	r3, 8016516 <mbedtls_rsa_check_pubkey+0x4a>
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 80164d8:	6812      	ldr	r2, [r2, #0]
 80164da:	07d2      	lsls	r2, r2, #31
 80164dc:	d51b      	bpl.n	8016516 <mbedtls_rsa_check_pubkey+0x4a>
        ( ctx->E.p[0] & 1 ) == 0 )
 80164de:	681b      	ldr	r3, [r3, #0]
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 80164e0:	07db      	lsls	r3, r3, #31
 80164e2:	d518      	bpl.n	8016516 <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 80164e4:	f100 0508 	add.w	r5, r0, #8
 80164e8:	4628      	mov	r0, r5
 80164ea:	f7f8 fa4c 	bl	800e986 <mbedtls_mpi_bitlen>
 80164ee:	287f      	cmp	r0, #127	; 0x7f
 80164f0:	d911      	bls.n	8016516 <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_bitlen( &ctx->N ) > MBEDTLS_MPI_MAX_BITS )
 80164f2:	4628      	mov	r0, r5
 80164f4:	f7f8 fa47 	bl	800e986 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 80164f8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80164fc:	d80b      	bhi.n	8016516 <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 80164fe:	3414      	adds	r4, #20
 8016500:	4620      	mov	r0, r4
 8016502:	f7f8 fa40 	bl	800e986 <mbedtls_mpi_bitlen>
 8016506:	2801      	cmp	r0, #1
 8016508:	d905      	bls.n	8016516 <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 801650a:	4629      	mov	r1, r5
 801650c:	4620      	mov	r0, r4
 801650e:	f7f8 fbd4 	bl	800ecba <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 8016512:	2800      	cmp	r0, #0
 8016514:	db01      	blt.n	801651a <mbedtls_rsa_check_pubkey+0x4e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016516:	4802      	ldr	r0, [pc, #8]	; (8016520 <mbedtls_rsa_check_pubkey+0x54>)
}
 8016518:	bd38      	pop	{r3, r4, r5, pc}
    return( 0 );
 801651a:	2000      	movs	r0, #0
 801651c:	e7fc      	b.n	8016518 <mbedtls_rsa_check_pubkey+0x4c>
 801651e:	bf00      	nop
 8016520:	ffffbe00 	.word	0xffffbe00

08016524 <mbedtls_rsa_check_privkey>:
{
 8016524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016528:	b0a9      	sub	sp, #164	; 0xa4
 801652a:	4605      	mov	r5, r0
    if( ( ret = mbedtls_rsa_check_pubkey( ctx ) ) != 0 )
 801652c:	f7ff ffce 	bl	80164cc <mbedtls_rsa_check_pubkey>
 8016530:	4604      	mov	r4, r0
 8016532:	2800      	cmp	r0, #0
 8016534:	f040 80cb 	bne.w	80166ce <mbedtls_rsa_check_privkey+0x1aa>
    if( !ctx->P.p || !ctx->Q.p || !ctx->D.p )
 8016538:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801653a:	2b00      	cmp	r3, #0
 801653c:	f000 80f5 	beq.w	801672a <mbedtls_rsa_check_privkey+0x206>
 8016540:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8016542:	2b00      	cmp	r3, #0
 8016544:	f000 80f1 	beq.w	801672a <mbedtls_rsa_check_privkey+0x206>
 8016548:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 80ed 	beq.w	801672a <mbedtls_rsa_check_privkey+0x206>
    mbedtls_mpi_init( &PQ ); mbedtls_mpi_init( &DE ); mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 );
 8016550:	a801      	add	r0, sp, #4
 8016552:	f7f8 f8ec 	bl	800e72e <mbedtls_mpi_init>
 8016556:	a804      	add	r0, sp, #16
 8016558:	f7f8 f8e9 	bl	800e72e <mbedtls_mpi_init>
 801655c:	a807      	add	r0, sp, #28
 801655e:	f7f8 f8e6 	bl	800e72e <mbedtls_mpi_init>
 8016562:	a80a      	add	r0, sp, #40	; 0x28
 8016564:	f7f8 f8e3 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &H  ); mbedtls_mpi_init( &I  ); mbedtls_mpi_init( &G  ); mbedtls_mpi_init( &G2 );
 8016568:	a80d      	add	r0, sp, #52	; 0x34
 801656a:	f7f8 f8e0 	bl	800e72e <mbedtls_mpi_init>
 801656e:	a810      	add	r0, sp, #64	; 0x40
 8016570:	f7f8 f8dd 	bl	800e72e <mbedtls_mpi_init>
 8016574:	a813      	add	r0, sp, #76	; 0x4c
 8016576:	f7f8 f8da 	bl	800e72e <mbedtls_mpi_init>
 801657a:	a816      	add	r0, sp, #88	; 0x58
 801657c:	f7f8 f8d7 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L1 ); mbedtls_mpi_init( &L2 ); mbedtls_mpi_init( &DP ); mbedtls_mpi_init( &DQ );
 8016580:	a819      	add	r0, sp, #100	; 0x64
 8016582:	f7f8 f8d4 	bl	800e72e <mbedtls_mpi_init>
 8016586:	a81c      	add	r0, sp, #112	; 0x70
 8016588:	f7f8 f8d1 	bl	800e72e <mbedtls_mpi_init>
 801658c:	a81f      	add	r0, sp, #124	; 0x7c
 801658e:	f7f8 f8ce 	bl	800e72e <mbedtls_mpi_init>
 8016592:	a822      	add	r0, sp, #136	; 0x88
 8016594:	f7f8 f8cb 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 8016598:	f105 072c 	add.w	r7, r5, #44	; 0x2c
    mbedtls_mpi_init( &QP );
 801659c:	a825      	add	r0, sp, #148	; 0x94
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 801659e:	f105 0638 	add.w	r6, r5, #56	; 0x38
    mbedtls_mpi_init( &QP );
 80165a2:	f7f8 f8c4 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80165a6:	4632      	mov	r2, r6
 80165a8:	4639      	mov	r1, r7
 80165aa:	a801      	add	r0, sp, #4
 80165ac:	f7f8 fccf 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80165b0:	4604      	mov	r4, r0
 80165b2:	2800      	cmp	r0, #0
 80165b4:	d15e      	bne.n	8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DE, &ctx->D, &ctx->E ) );
 80165b6:	f105 0820 	add.w	r8, r5, #32
 80165ba:	f105 0914 	add.w	r9, r5, #20
 80165be:	464a      	mov	r2, r9
 80165c0:	4641      	mov	r1, r8
 80165c2:	a804      	add	r0, sp, #16
 80165c4:	f7f8 fcc3 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80165c8:	4604      	mov	r4, r0
 80165ca:	2800      	cmp	r0, #0
 80165cc:	d152      	bne.n	8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80165ce:	2201      	movs	r2, #1
 80165d0:	4639      	mov	r1, r7
 80165d2:	a807      	add	r0, sp, #28
 80165d4:	f7f8 fca5 	bl	800ef22 <mbedtls_mpi_sub_int>
 80165d8:	4604      	mov	r4, r0
 80165da:	2800      	cmp	r0, #0
 80165dc:	d14a      	bne.n	8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80165de:	2201      	movs	r2, #1
 80165e0:	4631      	mov	r1, r6
 80165e2:	a80a      	add	r0, sp, #40	; 0x28
 80165e4:	f7f8 fc9d 	bl	800ef22 <mbedtls_mpi_sub_int>
 80165e8:	4604      	mov	r4, r0
 80165ea:	2800      	cmp	r0, #0
 80165ec:	d142      	bne.n	8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &P1, &Q1 ) );
 80165ee:	aa0a      	add	r2, sp, #40	; 0x28
 80165f0:	a907      	add	r1, sp, #28
 80165f2:	a80d      	add	r0, sp, #52	; 0x34
 80165f4:	f7f8 fcab 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80165f8:	4604      	mov	r4, r0
 80165fa:	2800      	cmp	r0, #0
 80165fc:	d13a      	bne.n	8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
 80165fe:	aa0d      	add	r2, sp, #52	; 0x34
 8016600:	4649      	mov	r1, r9
 8016602:	a813      	add	r0, sp, #76	; 0x4c
 8016604:	f7f9 f931 	bl	800f86a <mbedtls_mpi_gcd>
 8016608:	4604      	mov	r4, r0
 801660a:	2800      	cmp	r0, #0
 801660c:	d132      	bne.n	8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G2, &P1, &Q1 ) );
 801660e:	aa0a      	add	r2, sp, #40	; 0x28
 8016610:	a907      	add	r1, sp, #28
 8016612:	a816      	add	r0, sp, #88	; 0x58
 8016614:	f7f9 f929 	bl	800f86a <mbedtls_mpi_gcd>
 8016618:	4604      	mov	r4, r0
 801661a:	bb58      	cbnz	r0, 8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L1, &L2, &H, &G2 ) );
 801661c:	ab16      	add	r3, sp, #88	; 0x58
 801661e:	aa0d      	add	r2, sp, #52	; 0x34
 8016620:	a91c      	add	r1, sp, #112	; 0x70
 8016622:	a819      	add	r0, sp, #100	; 0x64
 8016624:	f7f8 fd04 	bl	800f030 <mbedtls_mpi_div_mpi>
 8016628:	4604      	mov	r4, r0
 801662a:	bb18      	cbnz	r0, 8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &I, &DE, &L1  ) );
 801662c:	aa19      	add	r2, sp, #100	; 0x64
 801662e:	a904      	add	r1, sp, #16
 8016630:	a810      	add	r0, sp, #64	; 0x40
 8016632:	f7f8 feba 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8016636:	4604      	mov	r4, r0
 8016638:	b9e0      	cbnz	r0, 8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DP, &ctx->D, &P1 ) );
 801663a:	aa07      	add	r2, sp, #28
 801663c:	4641      	mov	r1, r8
 801663e:	a81f      	add	r0, sp, #124	; 0x7c
 8016640:	f7f8 feb3 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8016644:	4604      	mov	r4, r0
 8016646:	b9a8      	cbnz	r0, 8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DQ, &ctx->D, &Q1 ) );
 8016648:	aa0a      	add	r2, sp, #40	; 0x28
 801664a:	4641      	mov	r1, r8
 801664c:	a822      	add	r0, sp, #136	; 0x88
 801664e:	f7f8 feac 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8016652:	4604      	mov	r4, r0
 8016654:	b970      	cbnz	r0, 8016674 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &QP, &ctx->Q, &ctx->P ) );
 8016656:	463a      	mov	r2, r7
 8016658:	4631      	mov	r1, r6
 801665a:	a825      	add	r0, sp, #148	; 0x94
 801665c:	f7f9 f9a2 	bl	800f9a4 <mbedtls_mpi_inv_mod>
 8016660:	4604      	mov	r4, r0
 8016662:	b938      	cbnz	r0, 8016674 <mbedtls_rsa_check_privkey+0x150>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 8016664:	f105 0108 	add.w	r1, r5, #8
 8016668:	a801      	add	r0, sp, #4
 801666a:	f7f8 fb26 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 801666e:	2800      	cmp	r0, #0
 8016670:	d031      	beq.n	80166d6 <mbedtls_rsa_check_privkey+0x1b2>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8016672:	4c2f      	ldr	r4, [pc, #188]	; (8016730 <mbedtls_rsa_check_privkey+0x20c>)
    mbedtls_mpi_free( &PQ ); mbedtls_mpi_free( &DE ); mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 );
 8016674:	a801      	add	r0, sp, #4
 8016676:	f7f8 f861 	bl	800e73c <mbedtls_mpi_free>
 801667a:	a804      	add	r0, sp, #16
 801667c:	f7f8 f85e 	bl	800e73c <mbedtls_mpi_free>
 8016680:	a807      	add	r0, sp, #28
 8016682:	f7f8 f85b 	bl	800e73c <mbedtls_mpi_free>
 8016686:	a80a      	add	r0, sp, #40	; 0x28
 8016688:	f7f8 f858 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &H  ); mbedtls_mpi_free( &I  ); mbedtls_mpi_free( &G  ); mbedtls_mpi_free( &G2 );
 801668c:	a80d      	add	r0, sp, #52	; 0x34
 801668e:	f7f8 f855 	bl	800e73c <mbedtls_mpi_free>
 8016692:	a810      	add	r0, sp, #64	; 0x40
 8016694:	f7f8 f852 	bl	800e73c <mbedtls_mpi_free>
 8016698:	a813      	add	r0, sp, #76	; 0x4c
 801669a:	f7f8 f84f 	bl	800e73c <mbedtls_mpi_free>
 801669e:	a816      	add	r0, sp, #88	; 0x58
 80166a0:	f7f8 f84c 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &L1 ); mbedtls_mpi_free( &L2 ); mbedtls_mpi_free( &DP ); mbedtls_mpi_free( &DQ );
 80166a4:	a819      	add	r0, sp, #100	; 0x64
 80166a6:	f7f8 f849 	bl	800e73c <mbedtls_mpi_free>
 80166aa:	a81c      	add	r0, sp, #112	; 0x70
 80166ac:	f7f8 f846 	bl	800e73c <mbedtls_mpi_free>
 80166b0:	a81f      	add	r0, sp, #124	; 0x7c
 80166b2:	f7f8 f843 	bl	800e73c <mbedtls_mpi_free>
 80166b6:	a822      	add	r0, sp, #136	; 0x88
 80166b8:	f7f8 f840 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &QP );
 80166bc:	a825      	add	r0, sp, #148	; 0x94
 80166be:	f7f8 f83d 	bl	800e73c <mbedtls_mpi_free>
    if( ret == MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 80166c2:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 80166c6:	d002      	beq.n	80166ce <mbedtls_rsa_check_privkey+0x1aa>
    if( ret != 0 )
 80166c8:	b10c      	cbz	r4, 80166ce <mbedtls_rsa_check_privkey+0x1aa>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED + ret );
 80166ca:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
}
 80166ce:	4620      	mov	r0, r4
 80166d0:	b029      	add	sp, #164	; 0xa4
 80166d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 80166d6:	f105 0144 	add.w	r1, r5, #68	; 0x44
 80166da:	a81f      	add	r0, sp, #124	; 0x7c
 80166dc:	f7f8 faed 	bl	800ecba <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d1c6      	bne.n	8016672 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 80166e4:	f105 0150 	add.w	r1, r5, #80	; 0x50
 80166e8:	a822      	add	r0, sp, #136	; 0x88
 80166ea:	f7f8 fae6 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d1bf      	bne.n	8016672 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 80166f2:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 80166f6:	a825      	add	r0, sp, #148	; 0x94
 80166f8:	f7f8 fadf 	bl	800ecba <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 80166fc:	2800      	cmp	r0, #0
 80166fe:	d1b8      	bne.n	8016672 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 8016700:	2100      	movs	r1, #0
 8016702:	a81c      	add	r0, sp, #112	; 0x70
 8016704:	f7f8 fb1c 	bl	800ed40 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 8016708:	2800      	cmp	r0, #0
 801670a:	d1b2      	bne.n	8016672 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &I, 1 ) != 0 ||
 801670c:	2101      	movs	r1, #1
 801670e:	a810      	add	r0, sp, #64	; 0x40
 8016710:	f7f8 fb16 	bl	800ed40 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 8016714:	2800      	cmp	r0, #0
 8016716:	d1ac      	bne.n	8016672 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8016718:	2101      	movs	r1, #1
 801671a:	a813      	add	r0, sp, #76	; 0x4c
 801671c:	f7f8 fb10 	bl	800ed40 <mbedtls_mpi_cmp_int>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8016720:	4b03      	ldr	r3, [pc, #12]	; (8016730 <mbedtls_rsa_check_privkey+0x20c>)
 8016722:	1e04      	subs	r4, r0, #0
 8016724:	bf18      	it	ne
 8016726:	461c      	movne	r4, r3
 8016728:	e7a4      	b.n	8016674 <mbedtls_rsa_check_privkey+0x150>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801672a:	4c01      	ldr	r4, [pc, #4]	; (8016730 <mbedtls_rsa_check_privkey+0x20c>)
 801672c:	e7cf      	b.n	80166ce <mbedtls_rsa_check_privkey+0x1aa>
 801672e:	bf00      	nop
 8016730:	ffffbe00 	.word	0xffffbe00

08016734 <mbedtls_rsa_check_pub_priv>:
{
 8016734:	b538      	push	{r3, r4, r5, lr}
 8016736:	4605      	mov	r5, r0
 8016738:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 801673a:	f7ff fec7 	bl	80164cc <mbedtls_rsa_check_pubkey>
 801673e:	b988      	cbnz	r0, 8016764 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8016740:	4620      	mov	r0, r4
 8016742:	f7ff feef 	bl	8016524 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 8016746:	b968      	cbnz	r0, 8016764 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8016748:	f104 0108 	add.w	r1, r4, #8
 801674c:	f105 0008 	add.w	r0, r5, #8
 8016750:	f7f8 fab3 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8016754:	b930      	cbnz	r0, 8016764 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8016756:	f104 0114 	add.w	r1, r4, #20
 801675a:	f105 0014 	add.w	r0, r5, #20
 801675e:	f7f8 faac 	bl	800ecba <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8016762:	b100      	cbz	r0, 8016766 <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016764:	4800      	ldr	r0, [pc, #0]	; (8016768 <mbedtls_rsa_check_pub_priv+0x34>)
}
 8016766:	bd38      	pop	{r3, r4, r5, pc}
 8016768:	ffffbe00 	.word	0xffffbe00

0801676c <mbedtls_rsa_public>:
{
 801676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801676e:	4605      	mov	r5, r0
 8016770:	b089      	sub	sp, #36	; 0x24
    mbedtls_mpi_init( &T );
 8016772:	a805      	add	r0, sp, #20
{
 8016774:	9103      	str	r1, [sp, #12]
 8016776:	4616      	mov	r6, r2
    mbedtls_mpi_init( &T );
 8016778:	f7f7 ffd9 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 801677c:	686a      	ldr	r2, [r5, #4]
 801677e:	9903      	ldr	r1, [sp, #12]
 8016780:	a805      	add	r0, sp, #20
 8016782:	f7f8 f922 	bl	800e9ca <mbedtls_mpi_read_binary>
 8016786:	4604      	mov	r4, r0
 8016788:	b9d8      	cbnz	r0, 80167c2 <mbedtls_rsa_public+0x56>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 801678a:	f105 0308 	add.w	r3, r5, #8
 801678e:	4619      	mov	r1, r3
 8016790:	a805      	add	r0, sp, #20
 8016792:	9303      	str	r3, [sp, #12]
 8016794:	f7f8 fa91 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8016798:	2800      	cmp	r0, #0
 801679a:	9b03      	ldr	r3, [sp, #12]
 801679c:	da1a      	bge.n	80167d4 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 801679e:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80167a2:	a905      	add	r1, sp, #20
 80167a4:	9200      	str	r2, [sp, #0]
 80167a6:	4608      	mov	r0, r1
 80167a8:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
 80167ac:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80167ae:	f7f8 fe2e 	bl	800f40e <mbedtls_mpi_exp_mod>
 80167b2:	4604      	mov	r4, r0
 80167b4:	b928      	cbnz	r0, 80167c2 <mbedtls_rsa_public+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80167b6:	463a      	mov	r2, r7
 80167b8:	4631      	mov	r1, r6
 80167ba:	a805      	add	r0, sp, #20
 80167bc:	f7f8 f938 	bl	800ea30 <mbedtls_mpi_write_binary>
 80167c0:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 80167c2:	a805      	add	r0, sp, #20
 80167c4:	f7f7 ffba 	bl	800e73c <mbedtls_mpi_free>
    if( ret != 0 )
 80167c8:	b10c      	cbz	r4, 80167ce <mbedtls_rsa_public+0x62>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 80167ca:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 80167ce:	4620      	mov	r0, r4
 80167d0:	b009      	add	sp, #36	; 0x24
 80167d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 80167d4:	f06f 0403 	mvn.w	r4, #3
 80167d8:	e7f3      	b.n	80167c2 <mbedtls_rsa_public+0x56>
	...

080167dc <mbedtls_rsa_private>:
{
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	461e      	mov	r6, r3
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 80167e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 80167e4:	b09d      	sub	sp, #116	; 0x74
 80167e6:	4604      	mov	r4, r0
 80167e8:	460d      	mov	r5, r1
 80167ea:	4617      	mov	r7, r2
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	f000 8179 	beq.w	8016ae4 <mbedtls_rsa_private+0x308>
 80167f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	f000 8175 	beq.w	8016ae4 <mbedtls_rsa_private+0x308>
 80167fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	f000 8171 	beq.w	8016ae4 <mbedtls_rsa_private+0x308>
    mbedtls_mpi_init( &T ); mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8016802:	a804      	add	r0, sp, #16
 8016804:	f7f7 ff93 	bl	800e72e <mbedtls_mpi_init>
 8016808:	a807      	add	r0, sp, #28
 801680a:	f7f7 ff90 	bl	800e72e <mbedtls_mpi_init>
 801680e:	a80a      	add	r0, sp, #40	; 0x28
 8016810:	f7f7 ff8d 	bl	800e72e <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 ); mbedtls_mpi_init( &R );
 8016814:	a80d      	add	r0, sp, #52	; 0x34
 8016816:	f7f7 ff8a 	bl	800e72e <mbedtls_mpi_init>
 801681a:	a810      	add	r0, sp, #64	; 0x40
 801681c:	f7f7 ff87 	bl	800e72e <mbedtls_mpi_init>
 8016820:	a813      	add	r0, sp, #76	; 0x4c
 8016822:	f7f7 ff84 	bl	800e72e <mbedtls_mpi_init>
    if( f_rng != NULL )
 8016826:	b12d      	cbz	r5, 8016834 <mbedtls_rsa_private+0x58>
        mbedtls_mpi_init( &DP_blind );
 8016828:	a816      	add	r0, sp, #88	; 0x58
 801682a:	f7f7 ff80 	bl	800e72e <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 801682e:	a819      	add	r0, sp, #100	; 0x64
 8016830:	f7f7 ff7d 	bl	800e72e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8016834:	6862      	ldr	r2, [r4, #4]
 8016836:	4631      	mov	r1, r6
 8016838:	a804      	add	r0, sp, #16
 801683a:	f7f8 f8c6 	bl	800e9ca <mbedtls_mpi_read_binary>
 801683e:	4603      	mov	r3, r0
 8016840:	2800      	cmp	r0, #0
 8016842:	f040 80e0 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8016846:	f104 0608 	add.w	r6, r4, #8
 801684a:	4631      	mov	r1, r6
 801684c:	a804      	add	r0, sp, #16
 801684e:	f7f8 fa34 	bl	800ecba <mbedtls_mpi_cmp_mpi>
 8016852:	2800      	cmp	r0, #0
 8016854:	f280 8141 	bge.w	8016ada <mbedtls_rsa_private+0x2fe>
    mbedtls_mpi *DP = &ctx->DP;
 8016858:	f104 0a44 	add.w	sl, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 801685c:	f104 0950 	add.w	r9, r4, #80	; 0x50
    if( f_rng != NULL )
 8016860:	2d00      	cmp	r5, #0
 8016862:	f000 8089 	beq.w	8016978 <mbedtls_rsa_private+0x19c>
    if( ctx->Vf.p != NULL )
 8016866:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801686a:	2b00      	cmp	r3, #0
 801686c:	f000 80ee 	beq.w	8016a4c <mbedtls_rsa_private+0x270>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8016870:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8016874:	460a      	mov	r2, r1
 8016876:	4608      	mov	r0, r1
 8016878:	9103      	str	r1, [sp, #12]
 801687a:	f7f8 fb68 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801687e:	4603      	mov	r3, r0
 8016880:	2800      	cmp	r0, #0
 8016882:	f040 80c0 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8016886:	9903      	ldr	r1, [sp, #12]
 8016888:	4632      	mov	r2, r6
 801688a:	4608      	mov	r0, r1
 801688c:	f7f8 fd8d 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8016890:	4603      	mov	r3, r0
 8016892:	2800      	cmp	r0, #0
 8016894:	f040 80b7 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8016898:	f104 0198 	add.w	r1, r4, #152	; 0x98
 801689c:	460a      	mov	r2, r1
 801689e:	4608      	mov	r0, r1
 80168a0:	9103      	str	r1, [sp, #12]
 80168a2:	f7f8 fb54 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80168a6:	4603      	mov	r3, r0
 80168a8:	2800      	cmp	r0, #0
 80168aa:	f040 80ac 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 80168ae:	9903      	ldr	r1, [sp, #12]
 80168b0:	4632      	mov	r2, r6
 80168b2:	4608      	mov	r0, r1
 80168b4:	f7f8 fd79 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2800      	cmp	r0, #0
 80168bc:	f040 80a3 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 80168c0:	a904      	add	r1, sp, #16
 80168c2:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80168c6:	4608      	mov	r0, r1
 80168c8:	f7f8 fb41 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80168cc:	4603      	mov	r3, r0
 80168ce:	2800      	cmp	r0, #0
 80168d0:	f040 8099 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 80168d4:	a904      	add	r1, sp, #16
 80168d6:	4632      	mov	r2, r6
 80168d8:	4608      	mov	r0, r1
 80168da:	f7f8 fd66 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 80168de:	4603      	mov	r3, r0
 80168e0:	2800      	cmp	r0, #0
 80168e2:	f040 8090 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 80168e6:	2201      	movs	r2, #1
 80168e8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80168ec:	a80d      	add	r0, sp, #52	; 0x34
 80168ee:	f7f8 fb18 	bl	800ef22 <mbedtls_mpi_sub_int>
 80168f2:	4603      	mov	r3, r0
 80168f4:	2800      	cmp	r0, #0
 80168f6:	f040 8086 	bne.w	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 80168fa:	2201      	movs	r2, #1
 80168fc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8016900:	a810      	add	r0, sp, #64	; 0x40
 8016902:	f7f8 fb0e 	bl	800ef22 <mbedtls_mpi_sub_int>
 8016906:	4603      	mov	r3, r0
 8016908:	2800      	cmp	r0, #0
 801690a:	d17c      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 801690c:	463b      	mov	r3, r7
 801690e:	462a      	mov	r2, r5
 8016910:	211c      	movs	r1, #28
 8016912:	a813      	add	r0, sp, #76	; 0x4c
 8016914:	f7f9 f82d 	bl	800f972 <mbedtls_mpi_fill_random>
 8016918:	4603      	mov	r3, r0
 801691a:	2800      	cmp	r0, #0
 801691c:	d173      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 801691e:	aa13      	add	r2, sp, #76	; 0x4c
 8016920:	a90d      	add	r1, sp, #52	; 0x34
 8016922:	a816      	add	r0, sp, #88	; 0x58
 8016924:	f7f8 fb13 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8016928:	4603      	mov	r3, r0
 801692a:	2800      	cmp	r0, #0
 801692c:	d16b      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 801692e:	a916      	add	r1, sp, #88	; 0x58
 8016930:	4652      	mov	r2, sl
 8016932:	4608      	mov	r0, r1
 8016934:	f7f8 fab0 	bl	800ee98 <mbedtls_mpi_add_mpi>
 8016938:	4603      	mov	r3, r0
 801693a:	2800      	cmp	r0, #0
 801693c:	d163      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 801693e:	463b      	mov	r3, r7
 8016940:	462a      	mov	r2, r5
 8016942:	211c      	movs	r1, #28
 8016944:	a813      	add	r0, sp, #76	; 0x4c
 8016946:	f7f9 f814 	bl	800f972 <mbedtls_mpi_fill_random>
 801694a:	4603      	mov	r3, r0
 801694c:	2800      	cmp	r0, #0
 801694e:	d15a      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8016950:	aa13      	add	r2, sp, #76	; 0x4c
 8016952:	a910      	add	r1, sp, #64	; 0x40
 8016954:	a819      	add	r0, sp, #100	; 0x64
 8016956:	f7f8 fafa 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 801695a:	4603      	mov	r3, r0
 801695c:	2800      	cmp	r0, #0
 801695e:	d152      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8016960:	a919      	add	r1, sp, #100	; 0x64
 8016962:	464a      	mov	r2, r9
 8016964:	4608      	mov	r0, r1
 8016966:	f7f8 fa97 	bl	800ee98 <mbedtls_mpi_add_mpi>
 801696a:	4603      	mov	r3, r0
 801696c:	2800      	cmp	r0, #0
 801696e:	d14a      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        DQ = &DQ_blind;
 8016970:	f10d 0964 	add.w	r9, sp, #100	; 0x64
        DP = &DP_blind;
 8016974:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T1, &T, DP, &ctx->P, &ctx->RP ) );
 8016978:	f104 0374 	add.w	r3, r4, #116	; 0x74
 801697c:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8016980:	9300      	str	r3, [sp, #0]
 8016982:	4652      	mov	r2, sl
 8016984:	4643      	mov	r3, r8
 8016986:	a904      	add	r1, sp, #16
 8016988:	a807      	add	r0, sp, #28
 801698a:	f7f8 fd40 	bl	800f40e <mbedtls_mpi_exp_mod>
 801698e:	4603      	mov	r3, r0
 8016990:	2800      	cmp	r0, #0
 8016992:	d138      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T2, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8016994:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8016998:	f104 0738 	add.w	r7, r4, #56	; 0x38
 801699c:	9300      	str	r3, [sp, #0]
 801699e:	464a      	mov	r2, r9
 80169a0:	463b      	mov	r3, r7
 80169a2:	a904      	add	r1, sp, #16
 80169a4:	a80a      	add	r0, sp, #40	; 0x28
 80169a6:	f7f8 fd32 	bl	800f40e <mbedtls_mpi_exp_mod>
 80169aa:	4603      	mov	r3, r0
 80169ac:	bb58      	cbnz	r0, 8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &T1, &T2 ) );
 80169ae:	aa0a      	add	r2, sp, #40	; 0x28
 80169b0:	a907      	add	r1, sp, #28
 80169b2:	a804      	add	r0, sp, #16
 80169b4:	f7f8 fa92 	bl	800eedc <mbedtls_mpi_sub_mpi>
 80169b8:	4603      	mov	r3, r0
 80169ba:	bb20      	cbnz	r0, 8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->QP ) );
 80169bc:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 80169c0:	a904      	add	r1, sp, #16
 80169c2:	a807      	add	r0, sp, #28
 80169c4:	f7f8 fac3 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80169c8:	4603      	mov	r3, r0
 80169ca:	b9e0      	cbnz	r0, 8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T1, &ctx->P ) );
 80169cc:	4642      	mov	r2, r8
 80169ce:	a907      	add	r1, sp, #28
 80169d0:	a804      	add	r0, sp, #16
 80169d2:	f7f8 fcea 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 80169d6:	4603      	mov	r3, r0
 80169d8:	b9a8      	cbnz	r0, 8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->Q ) );
 80169da:	463a      	mov	r2, r7
 80169dc:	a904      	add	r1, sp, #16
 80169de:	a807      	add	r0, sp, #28
 80169e0:	f7f8 fab5 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 80169e4:	4603      	mov	r3, r0
 80169e6:	b970      	cbnz	r0, 8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &T2, &T1 ) );
 80169e8:	aa07      	add	r2, sp, #28
 80169ea:	a90a      	add	r1, sp, #40	; 0x28
 80169ec:	a804      	add	r0, sp, #16
 80169ee:	f7f8 fa53 	bl	800ee98 <mbedtls_mpi_add_mpi>
 80169f2:	4603      	mov	r3, r0
 80169f4:	b938      	cbnz	r0, 8016a06 <mbedtls_rsa_private+0x22a>
    if( f_rng != NULL )
 80169f6:	2d00      	cmp	r5, #0
 80169f8:	d15d      	bne.n	8016ab6 <mbedtls_rsa_private+0x2da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80169fa:	6862      	ldr	r2, [r4, #4]
 80169fc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80169fe:	a804      	add	r0, sp, #16
 8016a00:	f7f8 f816 	bl	800ea30 <mbedtls_mpi_write_binary>
 8016a04:	4603      	mov	r3, r0
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8016a06:	a804      	add	r0, sp, #16
 8016a08:	9303      	str	r3, [sp, #12]
 8016a0a:	f7f7 fe97 	bl	800e73c <mbedtls_mpi_free>
 8016a0e:	a807      	add	r0, sp, #28
 8016a10:	f7f7 fe94 	bl	800e73c <mbedtls_mpi_free>
 8016a14:	a80a      	add	r0, sp, #40	; 0x28
 8016a16:	f7f7 fe91 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &R );
 8016a1a:	a80d      	add	r0, sp, #52	; 0x34
 8016a1c:	f7f7 fe8e 	bl	800e73c <mbedtls_mpi_free>
 8016a20:	a810      	add	r0, sp, #64	; 0x40
 8016a22:	f7f7 fe8b 	bl	800e73c <mbedtls_mpi_free>
 8016a26:	a813      	add	r0, sp, #76	; 0x4c
 8016a28:	f7f7 fe88 	bl	800e73c <mbedtls_mpi_free>
    if( f_rng != NULL )
 8016a2c:	9b03      	ldr	r3, [sp, #12]
 8016a2e:	b135      	cbz	r5, 8016a3e <mbedtls_rsa_private+0x262>
        mbedtls_mpi_free( &DP_blind );
 8016a30:	a816      	add	r0, sp, #88	; 0x58
 8016a32:	f7f7 fe83 	bl	800e73c <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8016a36:	a819      	add	r0, sp, #100	; 0x64
 8016a38:	f7f7 fe80 	bl	800e73c <mbedtls_mpi_free>
 8016a3c:	9b03      	ldr	r3, [sp, #12]
    if( ret != 0 )
 8016a3e:	b10b      	cbz	r3, 8016a44 <mbedtls_rsa_private+0x268>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8016a40:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	b01d      	add	sp, #116	; 0x74
 8016a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a4c:	230c      	movs	r3, #12
 8016a4e:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016a50:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016a54:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        if( count++ > 10 )
 8016a58:	9b03      	ldr	r3, [sp, #12]
 8016a5a:	3b01      	subs	r3, #1
 8016a5c:	9303      	str	r3, [sp, #12]
 8016a5e:	d03f      	beq.n	8016ae0 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016a60:	6861      	ldr	r1, [r4, #4]
 8016a62:	463b      	mov	r3, r7
 8016a64:	462a      	mov	r2, r5
 8016a66:	3901      	subs	r1, #1
 8016a68:	4658      	mov	r0, fp
 8016a6a:	f7f8 ff82 	bl	800f972 <mbedtls_mpi_fill_random>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	2800      	cmp	r0, #0
 8016a72:	d1c8      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016a74:	4632      	mov	r2, r6
 8016a76:	4659      	mov	r1, fp
 8016a78:	4640      	mov	r0, r8
 8016a7a:	f7f8 fef6 	bl	800f86a <mbedtls_mpi_gcd>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d1c0      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8016a84:	2101      	movs	r1, #1
 8016a86:	4640      	mov	r0, r8
 8016a88:	f7f8 f95a 	bl	800ed40 <mbedtls_mpi_cmp_int>
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	d1e3      	bne.n	8016a58 <mbedtls_rsa_private+0x27c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016a90:	4632      	mov	r2, r6
 8016a92:	4659      	mov	r1, fp
 8016a94:	4640      	mov	r0, r8
 8016a96:	f7f8 ff85 	bl	800f9a4 <mbedtls_mpi_inv_mod>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d1b2      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8016aa0:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8016aa4:	9300      	str	r3, [sp, #0]
 8016aa6:	f104 0214 	add.w	r2, r4, #20
 8016aaa:	4633      	mov	r3, r6
 8016aac:	4641      	mov	r1, r8
 8016aae:	4640      	mov	r0, r8
 8016ab0:	f7f8 fcad 	bl	800f40e <mbedtls_mpi_exp_mod>
 8016ab4:	e700      	b.n	80168b8 <mbedtls_rsa_private+0xdc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8016ab6:	a904      	add	r1, sp, #16
 8016ab8:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8016abc:	4608      	mov	r0, r1
 8016abe:	f7f8 fa46 	bl	800ef4e <mbedtls_mpi_mul_mpi>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d19e      	bne.n	8016a06 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8016ac8:	a904      	add	r1, sp, #16
 8016aca:	4632      	mov	r2, r6
 8016acc:	4608      	mov	r0, r1
 8016ace:	f7f8 fc6c 	bl	800f3aa <mbedtls_mpi_mod_mpi>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	d090      	beq.n	80169fa <mbedtls_rsa_private+0x21e>
 8016ad8:	e795      	b.n	8016a06 <mbedtls_rsa_private+0x22a>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8016ada:	f06f 0303 	mvn.w	r3, #3
 8016ade:	e792      	b.n	8016a06 <mbedtls_rsa_private+0x22a>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8016ae0:	4b01      	ldr	r3, [pc, #4]	; (8016ae8 <mbedtls_rsa_private+0x30c>)
 8016ae2:	e790      	b.n	8016a06 <mbedtls_rsa_private+0x22a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016ae4:	4b01      	ldr	r3, [pc, #4]	; (8016aec <mbedtls_rsa_private+0x310>)
 8016ae6:	e7ad      	b.n	8016a44 <mbedtls_rsa_private+0x268>
 8016ae8:	ffffbb80 	.word	0xffffbb80
 8016aec:	ffffbf80 	.word	0xffffbf80

08016af0 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8016af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af4:	b08b      	sub	sp, #44	; 0x2c
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016af6:	2b01      	cmp	r3, #1
{
 8016af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016afc:	9102      	str	r1, [sp, #8]
 8016afe:	4607      	mov	r7, r0
 8016b00:	4693      	mov	fp, r2
 8016b02:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016b04:	d108      	bne.n	8016b18 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
 8016b06:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016b0a:	2b01      	cmp	r3, #1
 8016b0c:	d004      	beq.n	8016b18 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016b0e:	4c40      	ldr	r4, [pc, #256]	; (8016c10 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
    mbedtls_md_free( &md_ctx );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8016b10:	4620      	mov	r0, r4
 8016b12:	b00b      	add	sp, #44	; 0x2c
 8016b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8016b18:	9b02      	ldr	r3, [sp, #8]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d0f7      	beq.n	8016b0e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016b1e:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 8016b22:	f7fd fd9f 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016b26:	4682      	mov	sl, r0
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	d0f0      	beq.n	8016b0e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
 8016b2c:	687e      	ldr	r6, [r7, #4]
    hlen = mbedtls_md_get_size( md_info );
 8016b2e:	f7fd fee9 	bl	8014904 <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016b32:	b202      	sxth	r2, r0
 8016b34:	0053      	lsls	r3, r2, #1
 8016b36:	9304      	str	r3, [sp, #16]
 8016b38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016b3a:	3302      	adds	r3, #2
 8016b3c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016b40:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016b42:	4293      	cmp	r3, r2
    hlen = mbedtls_md_get_size( md_info );
 8016b44:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016b46:	d3e2      	bcc.n	8016b0e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8016b48:	42b3      	cmp	r3, r6
 8016b4a:	d8e0      	bhi.n	8016b0e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
 8016b4c:	4632      	mov	r2, r6
 8016b4e:	2100      	movs	r1, #0
    *p++ = 0;
 8016b50:	46c1      	mov	r9, r8
    memset( output, 0, olen );
 8016b52:	4640      	mov	r0, r8
 8016b54:	f00b fb50 	bl	80221f8 <memset>
    *p++ = 0;
 8016b58:	2300      	movs	r3, #0
 8016b5a:	f809 3b01 	strb.w	r3, [r9], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8016b5e:	462a      	mov	r2, r5
 8016b60:	9b02      	ldr	r3, [sp, #8]
 8016b62:	4649      	mov	r1, r9
 8016b64:	4658      	mov	r0, fp
 8016b66:	4798      	blx	r3
 8016b68:	4604      	mov	r4, r0
 8016b6a:	b110      	cbz	r0, 8016b72 <mbedtls_rsa_rsaes_oaep_encrypt+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016b6c:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
 8016b70:	e7ce      	b.n	8016b10 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mbedtls_md( md_info, label, label_len, p );
 8016b72:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    p += hlen;
 8016b76:	eb09 0305 	add.w	r3, r9, r5
    mbedtls_md( md_info, label, label_len, p );
 8016b7a:	4650      	mov	r0, sl
 8016b7c:	9305      	str	r3, [sp, #20]
 8016b7e:	f7fd fdf3 	bl	8014768 <mbedtls_md>
    p += olen - 2 * hlen - 2 - ilen;
 8016b82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016b84:	1af2      	subs	r2, r6, r3
 8016b86:	3a02      	subs	r2, #2
 8016b88:	9b04      	ldr	r3, [sp, #16]
 8016b8a:	442a      	add	r2, r5
 8016b8c:	1ad2      	subs	r2, r2, r3
 8016b8e:	9b05      	ldr	r3, [sp, #20]
    *p++ = 1;
 8016b90:	2101      	movs	r1, #1
    p += olen - 2 * hlen - 2 - ilen;
 8016b92:	1898      	adds	r0, r3, r2
    *p++ = 1;
 8016b94:	5499      	strb	r1, [r3, r2]
    memcpy( p, input, ilen );
 8016b96:	3001      	adds	r0, #1
 8016b98:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
 8016b9c:	f00b fb04 	bl	80221a8 <memcpy>
    mbedtls_md_init( &md_ctx );
 8016ba0:	a807      	add	r0, sp, #28
 8016ba2:	f7fd fd6b 	bl	801467c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016ba6:	4622      	mov	r2, r4
 8016ba8:	4651      	mov	r1, sl
 8016baa:	a807      	add	r0, sp, #28
 8016bac:	f7fd fd90 	bl	80146d0 <mbedtls_md_setup>
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	b118      	cbz	r0, 8016bbc <mbedtls_rsa_rsaes_oaep_encrypt+0xcc>
        mbedtls_md_free( &md_ctx );
 8016bb4:	a807      	add	r0, sp, #28
 8016bb6:	f7fd fd67 	bl	8014688 <mbedtls_md_free>
        return( ret );
 8016bba:	e7a9      	b.n	8016b10 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8016bbc:	1c6c      	adds	r4, r5, #1
 8016bbe:	3e01      	subs	r6, #1
 8016bc0:	4444      	add	r4, r8
 8016bc2:	1b76      	subs	r6, r6, r5
 8016bc4:	ab07      	add	r3, sp, #28
 8016bc6:	9300      	str	r3, [sp, #0]
 8016bc8:	464a      	mov	r2, r9
 8016bca:	462b      	mov	r3, r5
 8016bcc:	4631      	mov	r1, r6
 8016bce:	4620      	mov	r0, r4
 8016bd0:	f7ff fc2a 	bl	8016428 <mgf_mask>
    mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8016bd4:	ab07      	add	r3, sp, #28
 8016bd6:	9300      	str	r3, [sp, #0]
 8016bd8:	4622      	mov	r2, r4
 8016bda:	4633      	mov	r3, r6
 8016bdc:	4629      	mov	r1, r5
 8016bde:	4648      	mov	r0, r9
 8016be0:	f7ff fc22 	bl	8016428 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016be4:	a807      	add	r0, sp, #28
 8016be6:	f7fd fd4f 	bl	8014688 <mbedtls_md_free>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016bea:	9b03      	ldr	r3, [sp, #12]
 8016bec:	b933      	cbnz	r3, 8016bfc <mbedtls_rsa_rsaes_oaep_encrypt+0x10c>
            ? mbedtls_rsa_public(  ctx, output, output )
 8016bee:	4642      	mov	r2, r8
 8016bf0:	4641      	mov	r1, r8
 8016bf2:	4638      	mov	r0, r7
 8016bf4:	f7ff fdba 	bl	801676c <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016bf8:	4604      	mov	r4, r0
 8016bfa:	e789      	b.n	8016b10 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
 8016bfc:	9902      	ldr	r1, [sp, #8]
 8016bfe:	f8cd 8000 	str.w	r8, [sp]
 8016c02:	4643      	mov	r3, r8
 8016c04:	465a      	mov	r2, fp
 8016c06:	4638      	mov	r0, r7
 8016c08:	f7ff fde8 	bl	80167dc <mbedtls_rsa_private>
 8016c0c:	e7f4      	b.n	8016bf8 <mbedtls_rsa_rsaes_oaep_encrypt+0x108>
 8016c0e:	bf00      	nop
 8016c10:	ffffbf80 	.word	0xffffbf80

08016c14 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8016c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c18:	4698      	mov	r8, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016c1a:	f1b8 0f01 	cmp.w	r8, #1
{
 8016c1e:	e9dd a30c 	ldrd	sl, r3, [sp, #48]	; 0x30
 8016c22:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016c24:	4606      	mov	r6, r0
 8016c26:	460f      	mov	r7, r1
 8016c28:	4691      	mov	r9, r2
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016c2a:	d103      	bne.n	8016c34 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
 8016c2c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8016c30:	2a00      	cmp	r2, #0
 8016c32:	d15e      	bne.n	8016cf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8016c34:	2f00      	cmp	r7, #0
 8016c36:	d05c      	beq.n	8016cf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d05a      	beq.n	8016cf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016c3c:	2d00      	cmp	r5, #0
 8016c3e:	d058      	beq.n	8016cf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016c40:	f11a 0f0c 	cmn.w	sl, #12
    olen = ctx->len;
 8016c44:	6874      	ldr	r4, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016c46:	d854      	bhi.n	8016cf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016c48:	f10a 020b 	add.w	r2, sl, #11
 8016c4c:	42a2      	cmp	r2, r4
 8016c4e:	d850      	bhi.n	8016cf2 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 8016c50:	4629      	mov	r1, r5
    nb_pad = olen - 3 - ilen;
 8016c52:	eba4 040a 	sub.w	r4, r4, sl
    *p++ = 0;
 8016c56:	2200      	movs	r2, #0
 8016c58:	f801 2b02 	strb.w	r2, [r1], #2
    nb_pad = olen - 3 - ilen;
 8016c5c:	3c03      	subs	r4, #3
    if( mode == MBEDTLS_RSA_PUBLIC )
 8016c5e:	f1b8 0f00 	cmp.w	r8, #0
 8016c62:	d12d      	bne.n	8016cc0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8016c64:	2202      	movs	r2, #2
 8016c66:	4414      	add	r4, r2
 8016c68:	706a      	strb	r2, [r5, #1]

        while( nb_pad-- > 0 )
 8016c6a:	442c      	add	r4, r5
 8016c6c:	428c      	cmp	r4, r1
 8016c6e:	d112      	bne.n	8016c96 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
    }

    *p++ = 0;
 8016c70:	4608      	mov	r0, r1
 8016c72:	2200      	movs	r2, #0
 8016c74:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8016c78:	4619      	mov	r1, r3
 8016c7a:	4652      	mov	r2, sl
 8016c7c:	f00b fa94 	bl	80221a8 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016c80:	f1b8 0f00 	cmp.w	r8, #0
 8016c84:	d12b      	bne.n	8016cde <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xca>
            ? mbedtls_rsa_public(  ctx, output, output )
 8016c86:	462a      	mov	r2, r5
 8016c88:	4629      	mov	r1, r5
 8016c8a:	4630      	mov	r0, r6
}
 8016c8c:	b003      	add	sp, #12
 8016c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ? mbedtls_rsa_public(  ctx, output, output )
 8016c92:	f7ff bd6b 	b.w	801676c <mbedtls_rsa_public>
 8016c96:	f04f 0b64 	mov.w	fp, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	4648      	mov	r0, r9
 8016c9e:	9301      	str	r3, [sp, #4]
 8016ca0:	9100      	str	r1, [sp, #0]
 8016ca2:	47b8      	blx	r7
            } while( *p == 0 && --rng_dl && ret == 0 );
 8016ca4:	9900      	ldr	r1, [sp, #0]
 8016ca6:	9b01      	ldr	r3, [sp, #4]
 8016ca8:	780a      	ldrb	r2, [r1, #0]
 8016caa:	bb22      	cbnz	r2, 8016cf6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe2>
 8016cac:	f1bb 0b01 	subs.w	fp, fp, #1
 8016cb0:	d001      	beq.n	8016cb6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	d0f1      	beq.n	8016c9a <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x86>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016cb6:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 8016cba:	b003      	add	sp, #12
 8016cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *p++ = MBEDTLS_RSA_SIGN;
 8016cc0:	462a      	mov	r2, r5
 8016cc2:	2001      	movs	r0, #1
 8016cc4:	f802 0f01 	strb.w	r0, [r2, #1]!
        while( nb_pad-- > 0 )
 8016cc8:	1820      	adds	r0, r4, r0
 8016cca:	4428      	add	r0, r5
            *p++ = 0xFF;
 8016ccc:	f04f 0cff 	mov.w	ip, #255	; 0xff
        while( nb_pad-- > 0 )
 8016cd0:	4282      	cmp	r2, r0
 8016cd2:	d101      	bne.n	8016cd8 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
 8016cd4:	4421      	add	r1, r4
 8016cd6:	e7cb      	b.n	8016c70 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
            *p++ = 0xFF;
 8016cd8:	f802 cf01 	strb.w	ip, [r2, #1]!
 8016cdc:	e7f8      	b.n	8016cd0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016cde:	462b      	mov	r3, r5
 8016ce0:	464a      	mov	r2, r9
 8016ce2:	4639      	mov	r1, r7
 8016ce4:	4630      	mov	r0, r6
 8016ce6:	950c      	str	r5, [sp, #48]	; 0x30
}
 8016ce8:	b003      	add	sp, #12
 8016cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016cee:	f7ff bd75 	b.w	80167dc <mbedtls_rsa_private>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016cf2:	4803      	ldr	r0, [pc, #12]	; (8016d00 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xec>)
 8016cf4:	e7e1      	b.n	8016cba <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa6>
            if( rng_dl == 0 || ret != 0 )
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d1dd      	bne.n	8016cb6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
            p++;
 8016cfa:	3101      	adds	r1, #1
 8016cfc:	e7b6      	b.n	8016c6c <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
 8016cfe:	bf00      	nop
 8016d00:	ffffbf80 	.word	0xffffbf80

08016d04 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8016d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8016d06:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8016d0a:	b087      	sub	sp, #28
 8016d0c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016d10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    switch( ctx->padding )
 8016d12:	b124      	cbz	r4, 8016d1e <mbedtls_rsa_pkcs1_encrypt+0x1a>
 8016d14:	2c01      	cmp	r4, #1
 8016d16:	d007      	beq.n	8016d28 <mbedtls_rsa_pkcs1_encrypt+0x24>
 8016d18:	4808      	ldr	r0, [pc, #32]	; (8016d3c <mbedtls_rsa_pkcs1_encrypt+0x38>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8016d1a:	b007      	add	sp, #28
 8016d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d1e:	b007      	add	sp, #28
 8016d20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8016d24:	f7ff bf76 	b.w	8016c14 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8016d28:	2400      	movs	r4, #0
 8016d2a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016d2e:	e9cd 4400 	strd	r4, r4, [sp]
 8016d32:	9502      	str	r5, [sp, #8]
 8016d34:	f7ff fedc 	bl	8016af0 <mbedtls_rsa_rsaes_oaep_encrypt>
 8016d38:	e7ef      	b.n	8016d1a <mbedtls_rsa_pkcs1_encrypt+0x16>
 8016d3a:	bf00      	nop
 8016d3c:	ffffbf00 	.word	0xffffbf00

08016d40 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8016d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d44:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016d48:	2b01      	cmp	r3, #1
{
 8016d4a:	f8dd b494 	ldr.w	fp, [sp, #1172]	; 0x494
 8016d4e:	4604      	mov	r4, r0
 8016d50:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016d52:	d109      	bne.n	8016d68 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
 8016d54:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016d58:	2b01      	cmp	r3, #1
 8016d5a:	d005      	beq.n	8016d68 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016d5c:	4c57      	ldr	r4, [pc, #348]	; (8016ebc <mbedtls_rsa_rsaes_oaep_decrypt+0x17c>)
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8016d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
 8016d68:	6865      	ldr	r5, [r4, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 8016d6a:	f1a5 0310 	sub.w	r3, r5, #16
 8016d6e:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8016d72:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8016d76:	d8f1      	bhi.n	8016d5c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016d78:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 8016d7c:	f7fd fc72 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016d80:	4607      	mov	r7, r0
 8016d82:	2800      	cmp	r0, #0
 8016d84:	d0ea      	beq.n	8016d5c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    hlen = mbedtls_md_get_size( md_info );
 8016d86:	f7fd fdbd 	bl	8014904 <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 8016d8a:	f100 0a01 	add.w	sl, r0, #1
 8016d8e:	ebb5 0f4a 	cmp.w	r5, sl, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 8016d92:	4606      	mov	r6, r0
    if( 2 * hlen + 2 > ilen )
 8016d94:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8016d98:	d3e0      	bcc.n	8016d5c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016d9a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016d9e:	ab18      	add	r3, sp, #96	; 0x60
 8016da0:	f1b9 0f00 	cmp.w	r9, #0
 8016da4:	d11d      	bne.n	8016de2 <mbedtls_rsa_rsaes_oaep_decrypt+0xa2>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8016da6:	461a      	mov	r2, r3
 8016da8:	4659      	mov	r1, fp
 8016daa:	4620      	mov	r0, r4
 8016dac:	f7ff fcde 	bl	801676c <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016db0:	4604      	mov	r4, r0
    if( ret != 0 )
 8016db2:	b960      	cbnz	r0, 8016dce <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
    mbedtls_md_init( &md_ctx );
 8016db4:	a805      	add	r0, sp, #20
 8016db6:	f7fd fc61 	bl	801467c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016dba:	4622      	mov	r2, r4
 8016dbc:	4639      	mov	r1, r7
 8016dbe:	a805      	add	r0, sp, #20
 8016dc0:	f7fd fc86 	bl	80146d0 <mbedtls_md_setup>
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	b190      	cbz	r0, 8016dee <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
        mbedtls_md_free( &md_ctx );
 8016dc8:	a805      	add	r0, sp, #20
 8016dca:	f7fd fc5d 	bl	8014688 <mbedtls_md_free>
    mbedtls_zeroize( buf, sizeof( buf ) );
 8016dce:	a818      	add	r0, sp, #96	; 0x60
 8016dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016dd4:	f7ff fb20 	bl	8016418 <mbedtls_zeroize>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 8016dd8:	2140      	movs	r1, #64	; 0x40
 8016dda:	a808      	add	r0, sp, #32
 8016ddc:	f7ff fb1c 	bl	8016418 <mbedtls_zeroize>
    return( ret );
 8016de0:	e7bd      	b.n	8016d5e <mbedtls_rsa_rsaes_oaep_decrypt+0x1e>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	4620      	mov	r0, r4
 8016de6:	465b      	mov	r3, fp
 8016de8:	f7ff fcf8 	bl	80167dc <mbedtls_rsa_private>
 8016dec:	e7e0      	b.n	8016db0 <mbedtls_rsa_rsaes_oaep_decrypt+0x70>
    mbedtls_md( md_info, label, label_len, lhash );
 8016dee:	f10d 0920 	add.w	r9, sp, #32
 8016df2:	4638      	mov	r0, r7
 8016df4:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8016df8:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 8016dfc:	464b      	mov	r3, r9
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8016dfe:	af18      	add	r7, sp, #96	; 0x60
 8016e00:	f105 3bff 	add.w	fp, r5, #4294967295
    mbedtls_md( md_info, label, label_len, lhash );
 8016e04:	f7fd fcb0 	bl	8014768 <mbedtls_md>
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8016e08:	44ba      	add	sl, r7
 8016e0a:	ebab 0b06 	sub.w	fp, fp, r6
 8016e0e:	ab05      	add	r3, sp, #20
 8016e10:	9300      	str	r3, [sp, #0]
 8016e12:	4652      	mov	r2, sl
 8016e14:	465b      	mov	r3, fp
 8016e16:	4631      	mov	r1, r6
 8016e18:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 8016e1c:	f7ff fb04 	bl	8016428 <mgf_mask>
    mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 8016e20:	ab05      	add	r3, sp, #20
 8016e22:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8016e26:	9300      	str	r3, [sp, #0]
 8016e28:	4659      	mov	r1, fp
 8016e2a:	4633      	mov	r3, r6
 8016e2c:	4650      	mov	r0, sl
 8016e2e:	f7ff fafb 	bl	8016428 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016e32:	a805      	add	r0, sp, #20
 8016e34:	f7fd fc28 	bl	8014688 <mbedtls_md_free>
    p += hlen; /* Skip seed */
 8016e38:	f10d 0261 	add.w	r2, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
 8016e3c:	783b      	ldrb	r3, [r7, #0]
    p += hlen; /* Skip seed */
 8016e3e:	1990      	adds	r0, r2, r6
    for( i = 0; i < hlen; i++ )
 8016e40:	4622      	mov	r2, r4
 8016e42:	42b2      	cmp	r2, r6
 8016e44:	fa4f fc83 	sxtb.w	ip, r3
 8016e48:	d320      	bcc.n	8016e8c <mbedtls_rsa_rsaes_oaep_decrypt+0x14c>
 8016e4a:	4430      	add	r0, r6
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8016e4c:	eba5 0808 	sub.w	r8, r5, r8
    pad_done = 0;
 8016e50:	2600      	movs	r6, #0
 8016e52:	4603      	mov	r3, r0
 8016e54:	4480      	add	r8, r0
    pad_len = 0;
 8016e56:	4631      	mov	r1, r6
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8016e58:	4598      	cmp	r8, r3
 8016e5a:	d120      	bne.n	8016e9e <mbedtls_rsa_rsaes_oaep_decrypt+0x15e>
    bad |= *p++ ^ 0x01;
 8016e5c:	5c43      	ldrb	r3, [r0, r1]
 8016e5e:	f083 0301 	eor.w	r3, r3, #1
 8016e62:	ea4c 0303 	orr.w	r3, ip, r3
    if( bad != 0 )
 8016e66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016e6a:	d123      	bne.n	8016eb4 <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
    bad |= *p++ ^ 0x01;
 8016e6c:	3101      	adds	r1, #1
 8016e6e:	4401      	add	r1, r0
    if( ilen - ( p - buf ) > output_max_len )
 8016e70:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 8016e74:	1bca      	subs	r2, r1, r7
 8016e76:	1aaa      	subs	r2, r5, r2
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d81d      	bhi.n	8016eb8 <mbedtls_rsa_rsaes_oaep_decrypt+0x178>
    *olen = ilen - (p - buf);
 8016e7c:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    memcpy( output, p, *olen );
 8016e80:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
    *olen = ilen - (p - buf);
 8016e84:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8016e86:	f00b f98f 	bl	80221a8 <memcpy>
    ret = 0;
 8016e8a:	e7a0      	b.n	8016dce <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
        bad |= lhash[i] ^ *p++;
 8016e8c:	f819 3002 	ldrb.w	r3, [r9, r2]
 8016e90:	5c81      	ldrb	r1, [r0, r2]
 8016e92:	404b      	eors	r3, r1
 8016e94:	ea4c 0303 	orr.w	r3, ip, r3
 8016e98:	b2db      	uxtb	r3, r3
    for( i = 0; i < hlen; i++ )
 8016e9a:	3201      	adds	r2, #1
 8016e9c:	e7d1      	b.n	8016e42 <mbedtls_rsa_rsaes_oaep_decrypt+0x102>
        pad_done |= p[i];
 8016e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016ea2:	4316      	orrs	r6, r2
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8016ea4:	4272      	negs	r2, r6
 8016ea6:	4332      	orrs	r2, r6
 8016ea8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8016eac:	f082 0201 	eor.w	r2, r2, #1
 8016eb0:	4411      	add	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8016eb2:	e7d1      	b.n	8016e58 <mbedtls_rsa_rsaes_oaep_decrypt+0x118>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8016eb4:	4c02      	ldr	r4, [pc, #8]	; (8016ec0 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>)
 8016eb6:	e78a      	b.n	8016dce <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8016eb8:	4c02      	ldr	r4, [pc, #8]	; (8016ec4 <mbedtls_rsa_rsaes_oaep_decrypt+0x184>)
 8016eba:	e788      	b.n	8016dce <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
 8016ebc:	ffffbf80 	.word	0xffffbf80
 8016ec0:	ffffbf00 	.word	0xffffbf00
 8016ec4:	ffffbc00 	.word	0xffffbc00

08016ec8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8016ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ecc:	461f      	mov	r7, r3
 8016ece:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016ed2:	2f01      	cmp	r7, #1
{
 8016ed4:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016ed8:	d103      	bne.n	8016ee2 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
 8016eda:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 8016ede:	2c00      	cmp	r4, #0
 8016ee0:	d175      	bne.n	8016fce <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8016ee2:	6845      	ldr	r5, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8016ee4:	f1a5 0410 	sub.w	r4, r5, #16
 8016ee8:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 8016eec:	d86f      	bhi.n	8016fce <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8016eee:	ae02      	add	r6, sp, #8
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016ef0:	2f00      	cmp	r7, #0
 8016ef2:	d14d      	bne.n	8016f90 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc8>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8016ef4:	4632      	mov	r2, r6
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	f7ff fc38 	bl	801676c <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016efc:	4604      	mov	r4, r0

    if( ret != 0 )
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d13c      	bne.n	8016f7c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8016f02:	2f01      	cmp	r7, #1
 8016f04:	7871      	ldrb	r1, [r6, #1]
 8016f06:	f996 2000 	ldrsb.w	r2, [r6]
 8016f0a:	f1a5 0e03 	sub.w	lr, r5, #3
 8016f0e:	d143      	bne.n	8016f98 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd0>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8016f10:	f081 0302 	eor.w	r3, r1, #2
 8016f14:	4313      	orrs	r3, r2
 8016f16:	b2db      	uxtb	r3, r3

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8016f18:	f10d 0109 	add.w	r1, sp, #9
    unsigned char *p, bad, pad_done = 0;
 8016f1c:	4607      	mov	r7, r0
        for( i = 0; i < ilen - 3; i++ )
 8016f1e:	4684      	mov	ip, r0
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8016f20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016f24:	f1c2 0800 	rsb	r8, r2, #0
 8016f28:	ea42 0208 	orr.w	r2, r2, r8
 8016f2c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8016f30:	f082 0201 	eor.w	r2, r2, #1
 8016f34:	4317      	orrs	r7, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8016f36:	427a      	negs	r2, r7
 8016f38:	433a      	orrs	r2, r7
 8016f3a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        for( i = 0; i < ilen - 3; i++ )
 8016f3e:	f10c 0c01 	add.w	ip, ip, #1
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8016f42:	f082 0201 	eor.w	r2, r2, #1
        for( i = 0; i < ilen - 3; i++ )
 8016f46:	45e6      	cmp	lr, ip
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8016f48:	4410      	add	r0, r2
        for( i = 0; i < ilen - 3; i++ )
 8016f4a:	d8e9      	bhi.n	8016f20 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x58>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 8016f4c:	f10d 020a 	add.w	r2, sp, #10
 8016f50:	1c41      	adds	r1, r0, #1
 8016f52:	4411      	add	r1, r2
 8016f54:	5c12      	ldrb	r2, [r2, r0]
 8016f56:	4313      	orrs	r3, r2
    }

    bad |= ( pad_count < 8 );
 8016f58:	2807      	cmp	r0, #7
 8016f5a:	bf98      	it	ls
 8016f5c:	f043 0301 	orrls.w	r3, r3, #1

    if( bad )
 8016f60:	bb8b      	cbnz	r3, 8016fc6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfe>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 8016f62:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 8016f66:	1b8a      	subs	r2, r1, r6
 8016f68:	1aaa      	subs	r2, r5, r2
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d82d      	bhi.n	8016fca <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 8016f6e:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 8016f72:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    *olen = ilen - (p - buf);
 8016f76:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 8016f78:	f00b f916 	bl	80221a8 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 8016f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f80:	4630      	mov	r0, r6
 8016f82:	f7ff fa49 	bl	8016418 <mbedtls_zeroize>

    return( ret );
}
 8016f86:	4620      	mov	r0, r4
 8016f88:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
 8016f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016f90:	9600      	str	r6, [sp, #0]
 8016f92:	f7ff fc23 	bl	80167dc <mbedtls_rsa_private>
 8016f96:	e7b1      	b.n	8016efc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x34>
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 8016f98:	f081 0301 	eor.w	r3, r1, #1
 8016f9c:	4313      	orrs	r3, r2
 8016f9e:	b2db      	uxtb	r3, r3
        for( i = 0; i < ilen - 3; i++ )
 8016fa0:	f10d 0209 	add.w	r2, sp, #9
    unsigned char *p, bad, pad_done = 0;
 8016fa4:	4607      	mov	r7, r0
        for( i = 0; i < ilen - 3; i++ )
 8016fa6:	4601      	mov	r1, r0
            pad_done |= ( p[i] != 0xFF );
 8016fa8:	f812 cf01 	ldrb.w	ip, [r2, #1]!
        for( i = 0; i < ilen - 3; i++ )
 8016fac:	3101      	adds	r1, #1
            pad_done |= ( p[i] != 0xFF );
 8016fae:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8016fb2:	bf18      	it	ne
 8016fb4:	f047 0701 	orrne.w	r7, r7, #1
            pad_count += ( pad_done == 0 );
 8016fb8:	f087 0c01 	eor.w	ip, r7, #1
        for( i = 0; i < ilen - 3; i++ )
 8016fbc:	458e      	cmp	lr, r1
            pad_count += ( pad_done == 0 );
 8016fbe:	fa50 f08c 	uxtab	r0, r0, ip
        for( i = 0; i < ilen - 3; i++ )
 8016fc2:	d8f1      	bhi.n	8016fa8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xe0>
 8016fc4:	e7c2      	b.n	8016f4c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8016fc6:	4c03      	ldr	r4, [pc, #12]	; (8016fd4 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>)
 8016fc8:	e7d8      	b.n	8016f7c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 8016fca:	4c03      	ldr	r4, [pc, #12]	; (8016fd8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x110>)
 8016fcc:	e7d6      	b.n	8016f7c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016fce:	4c03      	ldr	r4, [pc, #12]	; (8016fdc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>)
 8016fd0:	e7d9      	b.n	8016f86 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xbe>
 8016fd2:	bf00      	nop
 8016fd4:	ffffbf00 	.word	0xffffbf00
 8016fd8:	ffffbc00 	.word	0xffffbc00
 8016fdc:	ffffbf80 	.word	0xffffbf80

08016fe0 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8016fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8016fe2:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8016fe6:	b087      	sub	sp, #28
 8016fe8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016fec:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 8016ff0:	b124      	cbz	r4, 8016ffc <mbedtls_rsa_pkcs1_decrypt+0x1c>
 8016ff2:	2c01      	cmp	r4, #1
 8016ff4:	d007      	beq.n	8017006 <mbedtls_rsa_pkcs1_decrypt+0x26>
 8016ff6:	4809      	ldr	r0, [pc, #36]	; (801701c <mbedtls_rsa_pkcs1_decrypt+0x3c>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8016ff8:	b007      	add	sp, #28
 8016ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ffc:	b007      	add	sp, #28
 8016ffe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8017002:	f7ff bf61 	b.w	8016ec8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8017006:	2400      	movs	r4, #0
 8017008:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801700c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8017010:	e9cd 4400 	strd	r4, r4, [sp]
 8017014:	f7ff fe94 	bl	8016d40 <mbedtls_rsa_rsaes_oaep_decrypt>
 8017018:	e7ee      	b.n	8016ff8 <mbedtls_rsa_pkcs1_decrypt+0x18>
 801701a:	bf00      	nop
 801701c:	ffffbf00 	.word	0xffffbf00

08017020 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8017020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017024:	ed2d 8b02 	vpush	{d8}
 8017028:	b09b      	sub	sp, #108	; 0x6c
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801702a:	2b01      	cmp	r3, #1
{
 801702c:	4607      	mov	r7, r0
 801702e:	ee08 2a10 	vmov	s16, r2
 8017032:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 8017036:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8017038:	9102      	str	r1, [sp, #8]
 801703a:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801703c:	d10b      	bne.n	8017056 <mbedtls_rsa_rsassa_pss_sign+0x36>
 801703e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017042:	2b01      	cmp	r3, #1
 8017044:	d007      	beq.n	8017056 <mbedtls_rsa_rsassa_pss_sign+0x36>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017046:	f8df a154 	ldr.w	sl, [pc, #340]	; 801719c <mbedtls_rsa_rsassa_pss_sign+0x17c>
    *p++ = 0xBC;

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
}
 801704a:	4650      	mov	r0, sl
 801704c:	b01b      	add	sp, #108	; 0x6c
 801704e:	ecbd 8b02 	vpop	{d8}
 8017052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8017056:	9b02      	ldr	r3, [sp, #8]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d0f4      	beq.n	8017046 <mbedtls_rsa_rsassa_pss_sign+0x26>
    olen = ctx->len;
 801705c:	f8d7 8004 	ldr.w	r8, [r7, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 8017060:	b130      	cbz	r0, 8017070 <mbedtls_rsa_rsassa_pss_sign+0x50>
        md_info = mbedtls_md_info_from_type( md_alg );
 8017062:	f7fd faff 	bl	8014664 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8017066:	2800      	cmp	r0, #0
 8017068:	d0ed      	beq.n	8017046 <mbedtls_rsa_rsassa_pss_sign+0x26>
        hashlen = mbedtls_md_get_size( md_info );
 801706a:	f7fd fc4b 	bl	8014904 <mbedtls_md_get_size>
 801706e:	9027      	str	r0, [sp, #156]	; 0x9c
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8017070:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 8017074:	f7fd faf6 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8017078:	4682      	mov	sl, r0
 801707a:	2800      	cmp	r0, #0
 801707c:	d0e3      	beq.n	8017046 <mbedtls_rsa_rsassa_pss_sign+0x26>
    hlen = mbedtls_md_get_size( md_info );
 801707e:	f7fd fc41 	bl	8014904 <mbedtls_md_get_size>
    if( olen < hlen + slen + 2 )
 8017082:	1c43      	adds	r3, r0, #1
 8017084:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 8017088:	4604      	mov	r4, r0
    if( olen < hlen + slen + 2 )
 801708a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801708e:	d3da      	bcc.n	8017046 <mbedtls_rsa_rsassa_pss_sign+0x26>
    memset( sig, 0, olen );
 8017090:	4642      	mov	r2, r8
 8017092:	2100      	movs	r1, #0
 8017094:	4630      	mov	r0, r6
 8017096:	f00b f8af 	bl	80221f8 <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 801709a:	ee18 0a10 	vmov	r0, s16
 801709e:	9b02      	ldr	r3, [sp, #8]
 80170a0:	4622      	mov	r2, r4
 80170a2:	a90a      	add	r1, sp, #40	; 0x28
 80170a4:	4798      	blx	r3
 80170a6:	b110      	cbz	r0, 80170ae <mbedtls_rsa_rsassa_pss_sign+0x8e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80170a8:	f5a0 4a89 	sub.w	sl, r0, #17536	; 0x4480
 80170ac:	e7cd      	b.n	801704a <mbedtls_rsa_rsassa_pss_sign+0x2a>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80170ae:	f107 0b08 	add.w	fp, r7, #8
 80170b2:	9005      	str	r0, [sp, #20]
 80170b4:	4658      	mov	r0, fp
 80170b6:	f7f7 fc66 	bl	800e986 <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 80170ba:	eba8 0505 	sub.w	r5, r8, r5
 80170be:	1972      	adds	r2, r6, r5
    *p++ = 0x01;
 80170c0:	f102 0901 	add.w	r9, r2, #1
 80170c4:	2201      	movs	r2, #1
 80170c6:	5572      	strb	r2, [r6, r5]
    memcpy( p, salt, slen );
 80170c8:	a90a      	add	r1, sp, #40	; 0x28
 80170ca:	4622      	mov	r2, r4
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80170cc:	9004      	str	r0, [sp, #16]
    mbedtls_md_init( &md_ctx );
 80170ce:	ad07      	add	r5, sp, #28
    memcpy( p, salt, slen );
 80170d0:	4648      	mov	r0, r9
 80170d2:	f00b f869 	bl	80221a8 <memcpy>
    mbedtls_md_init( &md_ctx );
 80170d6:	4628      	mov	r0, r5
 80170d8:	f7fd fad0 	bl	801467c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 80170dc:	9b05      	ldr	r3, [sp, #20]
 80170de:	4651      	mov	r1, sl
 80170e0:	461a      	mov	r2, r3
 80170e2:	4628      	mov	r0, r5
 80170e4:	f7fd faf4 	bl	80146d0 <mbedtls_md_setup>
 80170e8:	4682      	mov	sl, r0
 80170ea:	b118      	cbz	r0, 80170f4 <mbedtls_rsa_rsassa_pss_sign+0xd4>
        mbedtls_md_free( &md_ctx );
 80170ec:	4628      	mov	r0, r5
 80170ee:	f7fd facb 	bl	8014688 <mbedtls_md_free>
        return( ret );
 80170f2:	e7aa      	b.n	801704a <mbedtls_rsa_rsassa_pss_sign+0x2a>
    p += slen;
 80170f4:	eb09 0a04 	add.w	sl, r9, r4
    mbedtls_md_starts( &md_ctx );
 80170f8:	4628      	mov	r0, r5
 80170fa:	f7fd fb0b 	bl	8014714 <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, p, 8 );
 80170fe:	2208      	movs	r2, #8
 8017100:	4651      	mov	r1, sl
 8017102:	4628      	mov	r0, r5
 8017104:	f7fd fb14 	bl	8014730 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 8017108:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801710c:	4628      	mov	r0, r5
 801710e:	f7fd fb0f 	bl	8014730 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, salt, slen );
 8017112:	4622      	mov	r2, r4
 8017114:	a90a      	add	r1, sp, #40	; 0x28
 8017116:	4628      	mov	r0, r5
 8017118:	f7fd fb0a 	bl	8014730 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, p );
 801711c:	4651      	mov	r1, sl
 801711e:	4628      	mov	r0, r5
 8017120:	f7fd fb14 	bl	801474c <mbedtls_md_finish>
    mbedtls_zeroize( salt, sizeof( salt ) );
 8017124:	2140      	movs	r1, #64	; 0x40
 8017126:	a80a      	add	r0, sp, #40	; 0x28
 8017128:	f7ff f976 	bl	8016418 <mbedtls_zeroize>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801712c:	9b04      	ldr	r3, [sp, #16]
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 801712e:	9500      	str	r5, [sp, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017130:	1e58      	subs	r0, r3, #1
    if( msb % 8 == 0 )
 8017132:	f010 0f07 	tst.w	r0, #7
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8017136:	f108 31ff 	add.w	r1, r8, #4294967295
    if( msb % 8 == 0 )
 801713a:	bf0c      	ite	eq
 801713c:	2001      	moveq	r0, #1
 801713e:	2000      	movne	r0, #0
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8017140:	1b09      	subs	r1, r1, r4
 8017142:	4623      	mov	r3, r4
 8017144:	1a09      	subs	r1, r1, r0
 8017146:	4652      	mov	r2, sl
 8017148:	4430      	add	r0, r6
 801714a:	f7ff f96d 	bl	8016428 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 801714e:	4628      	mov	r0, r5
 8017150:	f7fd fa9a 	bl	8014688 <mbedtls_md_free>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017154:	4658      	mov	r0, fp
 8017156:	f7f7 fc16 	bl	800e986 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 801715a:	ebc0 00c8 	rsb	r0, r0, r8, lsl #3
 801715e:	7833      	ldrb	r3, [r6, #0]
 8017160:	3001      	adds	r0, #1
 8017162:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8017166:	fa48 f800 	asr.w	r8, r8, r0
 801716a:	ea08 0803 	and.w	r8, r8, r3
    *p++ = 0xBC;
 801716e:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 8017170:	f886 8000 	strb.w	r8, [r6]
    *p++ = 0xBC;
 8017174:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8017178:	9b03      	ldr	r3, [sp, #12]
 801717a:	b933      	cbnz	r3, 801718a <mbedtls_rsa_rsassa_pss_sign+0x16a>
            ? mbedtls_rsa_public(  ctx, sig, sig )
 801717c:	4632      	mov	r2, r6
 801717e:	4631      	mov	r1, r6
 8017180:	4638      	mov	r0, r7
 8017182:	f7ff faf3 	bl	801676c <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 8017186:	4682      	mov	sl, r0
 8017188:	e75f      	b.n	801704a <mbedtls_rsa_rsassa_pss_sign+0x2a>
 801718a:	ee18 2a10 	vmov	r2, s16
 801718e:	9902      	ldr	r1, [sp, #8]
 8017190:	9600      	str	r6, [sp, #0]
 8017192:	4633      	mov	r3, r6
 8017194:	4638      	mov	r0, r7
 8017196:	f7ff fb21 	bl	80167dc <mbedtls_rsa_private>
 801719a:	e7f4      	b.n	8017186 <mbedtls_rsa_rsassa_pss_sign+0x166>
 801719c:	ffffbf80 	.word	0xffffbf80

080171a0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80171a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171a4:	ed2d 8b02 	vpush	{d8}
 80171a8:	b089      	sub	sp, #36	; 0x24
 80171aa:	4691      	mov	r9, r2
    size_t i;
    unsigned char diff;
    volatile unsigned char diff_no_optimize;
    int ret;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80171ac:	2b01      	cmp	r3, #1
    size_t nb_pad, olen, oid_size = 0;
 80171ae:	f04f 0200 	mov.w	r2, #0
    const char *oid = NULL;
 80171b2:	e9cd 2206 	strd	r2, r2, [sp, #24]
{
 80171b6:	ee08 1a10 	vmov	s16, r1
 80171ba:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 80171be:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80171c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80171c4:	4604      	mov	r4, r0
 80171c6:	469a      	mov	sl, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80171c8:	d109      	bne.n	80171de <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
 80171ca:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 80171ce:	b132      	cbz	r2, 80171de <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80171d0:	4d56      	ldr	r5, [pc, #344]	; (801732c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x18c>)
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 80171d2:	4628      	mov	r0, r5
 80171d4:	b009      	add	sp, #36	; 0x24
 80171d6:	ecbd 8b02 	vpop	{d8}
 80171da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    olen = ctx->len;
 80171de:	f8d4 b004 	ldr.w	fp, [r4, #4]
    nb_pad = olen - 3;
 80171e2:	f1ab 0503 	sub.w	r5, fp, #3
    if( md_alg != MBEDTLS_MD_NONE )
 80171e6:	b19f      	cbz	r7, 8017210 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x70>
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 80171e8:	4638      	mov	r0, r7
 80171ea:	f7fd fa3b 	bl	8014664 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80171ee:	4680      	mov	r8, r0
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d0ed      	beq.n	80171d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 80171f4:	aa06      	add	r2, sp, #24
 80171f6:	a907      	add	r1, sp, #28
 80171f8:	4638      	mov	r0, r7
 80171fa:	f7fe f915 	bl	8015428 <mbedtls_oid_get_oid_by_md>
 80171fe:	2800      	cmp	r0, #0
 8017200:	d1e6      	bne.n	80171d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
        nb_pad -= 10 + oid_size;
 8017202:	9a06      	ldr	r2, [sp, #24]
        hashlen = mbedtls_md_get_size( md_info );
 8017204:	4640      	mov	r0, r8
        nb_pad -= 10 + oid_size;
 8017206:	1aad      	subs	r5, r5, r2
        hashlen = mbedtls_md_get_size( md_info );
 8017208:	f7fd fb7c 	bl	8014904 <mbedtls_md_get_size>
        nb_pad -= 10 + oid_size;
 801720c:	3d0a      	subs	r5, #10
        hashlen = mbedtls_md_get_size( md_info );
 801720e:	4680      	mov	r8, r0
    nb_pad -= hashlen;
 8017210:	eba5 0208 	sub.w	r2, r5, r8
    if( ( nb_pad < 8 ) || ( nb_pad > olen ) )
 8017214:	2a07      	cmp	r2, #7
 8017216:	d9db      	bls.n	80171d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
 8017218:	4593      	cmp	fp, r2
 801721a:	d3d9      	bcc.n	80171d0 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
    *p++ = 0;
 801721c:	46b3      	mov	fp, r6
 801721e:	2500      	movs	r5, #0
 8017220:	f80b 5b02 	strb.w	r5, [fp], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8017224:	2101      	movs	r1, #1
 8017226:	7071      	strb	r1, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8017228:	4658      	mov	r0, fp
 801722a:	21ff      	movs	r1, #255	; 0xff
 801722c:	9203      	str	r2, [sp, #12]
 801722e:	f00a ffe3 	bl	80221f8 <memset>
    p += nb_pad;
 8017232:	9a03      	ldr	r2, [sp, #12]
    *p++ = 0;
 8017234:	f80b 5002 	strb.w	r5, [fp, r2]
    p += nb_pad;
 8017238:	eb0b 0002 	add.w	r0, fp, r2
    if( md_alg == MBEDTLS_MD_NONE )
 801723c:	b977      	cbnz	r7, 801725c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        memcpy( p, hash, hashlen );
 801723e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017240:	4642      	mov	r2, r8
 8017242:	3001      	adds	r0, #1
        memcpy( p, hash, hashlen );
 8017244:	f00a ffb0 	bl	80221a8 <memcpy>
    if( mode == MBEDTLS_RSA_PUBLIC )
 8017248:	f1ba 0f00 	cmp.w	sl, #0
 801724c:	d12a      	bne.n	80172a4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x104>
        return( mbedtls_rsa_public(  ctx, sig, sig ) );
 801724e:	4632      	mov	r2, r6
 8017250:	4631      	mov	r1, r6
 8017252:	4620      	mov	r0, r4
 8017254:	f7ff fa8a 	bl	801676c <mbedtls_rsa_public>
 8017258:	4605      	mov	r5, r0
 801725a:	e7ba      	b.n	80171d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801725c:	2730      	movs	r7, #48	; 0x30
 801725e:	7047      	strb	r7, [r0, #1]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017260:	9a06      	ldr	r2, [sp, #24]
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 8017262:	70c7      	strb	r7, [r0, #3]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 8017264:	f102 0108 	add.w	r1, r2, #8
 8017268:	fa51 f188 	uxtab	r1, r1, r8
 801726c:	7081      	strb	r1, [r0, #2]
        *p++ = (unsigned char) ( 0x04 + oid_size );
 801726e:	b2d1      	uxtb	r1, r2
 8017270:	1d0f      	adds	r7, r1, #4
 8017272:	7107      	strb	r7, [r0, #4]
        *p++ = MBEDTLS_ASN1_OID;
 8017274:	2706      	movs	r7, #6
 8017276:	7147      	strb	r7, [r0, #5]
        *p++ = oid_size & 0xFF;
 8017278:	1dc7      	adds	r7, r0, #7
 801727a:	7181      	strb	r1, [r0, #6]
        memcpy( p, oid, oid_size );
 801727c:	9907      	ldr	r1, [sp, #28]
 801727e:	9203      	str	r2, [sp, #12]
 8017280:	4638      	mov	r0, r7
 8017282:	f00a ff91 	bl	80221a8 <memcpy>
        p += oid_size;
 8017286:	9a03      	ldr	r2, [sp, #12]
        *p++ = MBEDTLS_ASN1_NULL;
 8017288:	2105      	movs	r1, #5
        p += oid_size;
 801728a:	18b8      	adds	r0, r7, r2
        *p++ = MBEDTLS_ASN1_NULL;
 801728c:	54b9      	strb	r1, [r7, r2]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 801728e:	fa5f fb88 	uxtb.w	fp, r8
        *p++ = MBEDTLS_ASN1_OCTET_STRING;
 8017292:	2204      	movs	r2, #4
 8017294:	7082      	strb	r2, [r0, #2]
        *p++ = 0x00;
 8017296:	7045      	strb	r5, [r0, #1]
        *p++ = hashlen;
 8017298:	f880 b003 	strb.w	fp, [r0, #3]
        memcpy( p, hash, hashlen );
 801729c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801729e:	4642      	mov	r2, r8
 80172a0:	3004      	adds	r0, #4
 80172a2:	e7cf      	b.n	8017244 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    sig_try = mbedtls_calloc( 1, ctx->len );
 80172a4:	4d22      	ldr	r5, [pc, #136]	; (8017330 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x190>)
 80172a6:	6861      	ldr	r1, [r4, #4]
 80172a8:	682b      	ldr	r3, [r5, #0]
 80172aa:	2001      	movs	r0, #1
 80172ac:	4798      	blx	r3
    if( sig_try == NULL )
 80172ae:	4607      	mov	r7, r0
 80172b0:	b148      	cbz	r0, 80172c6 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x126>
    verif   = mbedtls_calloc( 1, ctx->len );
 80172b2:	682b      	ldr	r3, [r5, #0]
 80172b4:	6861      	ldr	r1, [r4, #4]
 80172b6:	2001      	movs	r0, #1
 80172b8:	4798      	blx	r3
    if( verif == NULL )
 80172ba:	4682      	mov	sl, r0
 80172bc:	b930      	cbnz	r0, 80172cc <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x12c>
        mbedtls_free( sig_try );
 80172be:	4b1d      	ldr	r3, [pc, #116]	; (8017334 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x194>)
 80172c0:	4638      	mov	r0, r7
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4798      	blx	r3
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 80172c6:	f06f 050f 	mvn.w	r5, #15
 80172ca:	e782      	b.n	80171d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 80172cc:	ee18 1a10 	vmov	r1, s16
 80172d0:	9700      	str	r7, [sp, #0]
 80172d2:	4633      	mov	r3, r6
 80172d4:	464a      	mov	r2, r9
 80172d6:	4620      	mov	r0, r4
 80172d8:	f7ff fa80 	bl	80167dc <mbedtls_rsa_private>
 80172dc:	4605      	mov	r5, r0
 80172de:	b9a0      	cbnz	r0, 801730a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 80172e0:	4652      	mov	r2, sl
 80172e2:	4639      	mov	r1, r7
 80172e4:	4620      	mov	r0, r4
 80172e6:	f7ff fa41 	bl	801676c <mbedtls_rsa_public>
 80172ea:	4605      	mov	r5, r0
 80172ec:	b968      	cbnz	r0, 801730a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
    for( diff = 0, i = 0; i < ctx->len; i++ )
 80172ee:	6862      	ldr	r2, [r4, #4]
 80172f0:	4601      	mov	r1, r0
 80172f2:	4603      	mov	r3, r0
 80172f4:	429a      	cmp	r2, r3
 80172f6:	d110      	bne.n	801731a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x17a>
    diff_no_optimize = diff;
 80172f8:	f88d 1017 	strb.w	r1, [sp, #23]
    if( diff_no_optimize != 0 )
 80172fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8017300:	b993      	cbnz	r3, 8017328 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x188>
    memcpy( sig, sig_try, ctx->len );
 8017302:	4639      	mov	r1, r7
 8017304:	4630      	mov	r0, r6
 8017306:	f00a ff4f 	bl	80221a8 <memcpy>
    mbedtls_free( sig_try );
 801730a:	4c0a      	ldr	r4, [pc, #40]	; (8017334 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x194>)
 801730c:	4638      	mov	r0, r7
 801730e:	6823      	ldr	r3, [r4, #0]
 8017310:	4798      	blx	r3
    mbedtls_free( verif );
 8017312:	6823      	ldr	r3, [r4, #0]
 8017314:	4650      	mov	r0, sl
 8017316:	4798      	blx	r3
    return( ret );
 8017318:	e75b      	b.n	80171d2 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        diff |= verif[i] ^ sig[i];
 801731a:	f81a 0003 	ldrb.w	r0, [sl, r3]
 801731e:	5cf4      	ldrb	r4, [r6, r3]
 8017320:	4060      	eors	r0, r4
 8017322:	4301      	orrs	r1, r0
    for( diff = 0, i = 0; i < ctx->len; i++ )
 8017324:	3301      	adds	r3, #1
 8017326:	e7e5      	b.n	80172f4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x154>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8017328:	4d03      	ldr	r5, [pc, #12]	; (8017338 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x198>)
 801732a:	e7ee      	b.n	801730a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
 801732c:	ffffbf80 	.word	0xffffbf80
 8017330:	20000538 	.word	0x20000538
 8017334:	2000053c 	.word	0x2000053c
 8017338:	ffffbd00 	.word	0xffffbd00

0801733c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 801733c:	b430      	push	{r4, r5}
    switch( ctx->padding )
 801733e:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 8017342:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 8017346:	b125      	cbz	r5, 8017352 <mbedtls_rsa_pkcs1_sign+0x16>
 8017348:	2d01      	cmp	r5, #1
 801734a:	d006      	beq.n	801735a <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 801734c:	4805      	ldr	r0, [pc, #20]	; (8017364 <mbedtls_rsa_pkcs1_sign+0x28>)
 801734e:	bc30      	pop	{r4, r5}
 8017350:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017352:	9402      	str	r4, [sp, #8]
}
 8017354:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017356:	f7ff bf23 	b.w	80171a0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801735a:	9402      	str	r4, [sp, #8]
}
 801735c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801735e:	f7ff be5f 	b.w	8017020 <mbedtls_rsa_rsassa_pss_sign>
 8017362:	bf00      	nop
 8017364:	ffffbf00 	.word	0xffffbf00

08017368 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 8017368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801736c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    size_t slen, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8017370:	2b01      	cmp	r3, #1
{
 8017372:	4604      	mov	r4, r0
 8017374:	f89d 5490 	ldrb.w	r5, [sp, #1168]	; 0x490
 8017378:	f8dd 04a4 	ldr.w	r0, [sp, #1188]	; 0x4a4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801737c:	d109      	bne.n	8017392 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
 801737e:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
 8017382:	2e01      	cmp	r6, #1
 8017384:	d005      	beq.n	8017392 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017386:	4b5c      	ldr	r3, [pc, #368]	; (80174f8 <mbedtls_rsa_rsassa_pss_verify_ext+0x190>)

    if( memcmp( p + slen, result, hlen ) == 0 )
        return( 0 );
    else
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
}
 8017388:	4618      	mov	r0, r3
 801738a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 801738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
 8017392:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 8017396:	f1a8 0610 	sub.w	r6, r8, #16
 801739a:	f5b6 7f7c 	cmp.w	r6, #1008	; 0x3f0
 801739e:	d8f2      	bhi.n	8017386 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 80173a0:	ae1a      	add	r6, sp, #104	; 0x68
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d14a      	bne.n	801743c <mbedtls_rsa_rsassa_pss_verify_ext+0xd4>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 80173a6:	4601      	mov	r1, r0
 80173a8:	4632      	mov	r2, r6
 80173aa:	4620      	mov	r0, r4
 80173ac:	f7ff f9de 	bl	801676c <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80173b0:	4603      	mov	r3, r0
    if( ret != 0 )
 80173b2:	2800      	cmp	r0, #0
 80173b4:	d1e8      	bne.n	8017388 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
 80173b6:	f108 37ff 	add.w	r7, r8, #4294967295
 80173ba:	5df3      	ldrb	r3, [r6, r7]
 80173bc:	2bbc      	cmp	r3, #188	; 0xbc
 80173be:	f040 8098 	bne.w	80174f2 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    if( md_alg != MBEDTLS_MD_NONE )
 80173c2:	b145      	cbz	r5, 80173d6 <mbedtls_rsa_rsassa_pss_verify_ext+0x6e>
        md_info = mbedtls_md_info_from_type( md_alg );
 80173c4:	4628      	mov	r0, r5
 80173c6:	f7fd f94d 	bl	8014664 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d0db      	beq.n	8017386 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
 80173ce:	f7fd fa99 	bl	8014904 <mbedtls_md_get_size>
 80173d2:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 80173d6:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
 80173da:	f7fd f943 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80173de:	4683      	mov	fp, r0
 80173e0:	2800      	cmp	r0, #0
 80173e2:	d0d0      	beq.n	8017386 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
 80173e4:	f7fd fa8e 	bl	8014904 <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
 80173e8:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 80173ea:	4682      	mov	sl, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80173ec:	f104 0008 	add.w	r0, r4, #8
    memset( zeros, 0, 8 );
 80173f0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80173f4:	f7f7 fac7 	bl	800e986 <mbedtls_mpi_bitlen>
 80173f8:	f100 39ff 	add.w	r9, r0, #4294967295
    if( msb % 8 == 0 )
 80173fc:	f019 0f07 	tst.w	r9, #7
        siglen -= 1;
 8017400:	bf08      	it	eq
 8017402:	46b8      	moveq	r8, r7
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8017404:	7832      	ldrb	r2, [r6, #0]
 8017406:	f1c8 0301 	rsb	r3, r8, #1
 801740a:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
        p++;
 801740e:	bf0c      	ite	eq
 8017410:	f10d 0469 	addeq.w	r4, sp, #105	; 0x69
    p = buf;
 8017414:	4634      	movne	r4, r6
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8017416:	411a      	asrs	r2, r3
 8017418:	9203      	str	r2, [sp, #12]
 801741a:	d1b4      	bne.n	8017386 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
 801741c:	ad07      	add	r5, sp, #28
 801741e:	4628      	mov	r0, r5
 8017420:	f7fd f92c 	bl	801467c <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8017424:	9a03      	ldr	r2, [sp, #12]
 8017426:	4659      	mov	r1, fp
 8017428:	4628      	mov	r0, r5
 801742a:	f7fd f951 	bl	80146d0 <mbedtls_md_setup>
 801742e:	b158      	cbz	r0, 8017448 <mbedtls_rsa_rsassa_pss_verify_ext+0xe0>
 8017430:	9003      	str	r0, [sp, #12]
        mbedtls_md_free( &md_ctx );
 8017432:	4628      	mov	r0, r5
 8017434:	f7fd f928 	bl	8014688 <mbedtls_md_free>
        return( ret );
 8017438:	9b03      	ldr	r3, [sp, #12]
 801743a:	e7a5      	b.n	8017388 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801743c:	4603      	mov	r3, r0
 801743e:	9600      	str	r6, [sp, #0]
 8017440:	4620      	mov	r0, r4
 8017442:	f7ff f9cb 	bl	80167dc <mbedtls_rsa_private>
 8017446:	e7b3      	b.n	80173b0 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
    mgf_mask( p, siglen - hlen - 1, p + siglen - hlen - 1, hlen, &md_ctx );
 8017448:	ea6f 010a 	mvn.w	r1, sl
 801744c:	4441      	add	r1, r8
 801744e:	4653      	mov	r3, sl
 8017450:	4620      	mov	r0, r4
 8017452:	9500      	str	r5, [sp, #0]
 8017454:	1862      	adds	r2, r4, r1
 8017456:	f7fe ffe7 	bl	8016428 <mgf_mask>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 801745a:	ebc9 00c8 	rsb	r0, r9, r8, lsl #3
 801745e:	7833      	ldrb	r3, [r6, #0]
 8017460:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8017464:	fa49 f900 	asr.w	r9, r9, r0
 8017468:	ea09 0903 	and.w	r9, r9, r3
 801746c:	f886 9000 	strb.w	r9, [r6]
    while( p < buf + siglen && *p == 0 )
 8017470:	44b0      	add	r8, r6
 8017472:	45a0      	cmp	r8, r4
 8017474:	d939      	bls.n	80174ea <mbedtls_rsa_rsassa_pss_verify_ext+0x182>
 8017476:	4623      	mov	r3, r4
 8017478:	f813 2b01 	ldrb.w	r2, [r3], #1
 801747c:	b39a      	cbz	r2, 80174e6 <mbedtls_rsa_rsassa_pss_verify_ext+0x17e>
    if( p == buf + siglen ||
 801747e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017482:	2b01      	cmp	r3, #1
 8017484:	d132      	bne.n	80174ec <mbedtls_rsa_rsassa_pss_verify_ext+0x184>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8017486:	f8dd 34a0 	ldr.w	r3, [sp, #1184]	; 0x4a0
    slen = siglen - hlen - 1; /* Currently length of salt + padding */
 801748a:	eba7 070a 	sub.w	r7, r7, sl
    slen -= p - buf;
 801748e:	1ba6      	subs	r6, r4, r6
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8017490:	1c5a      	adds	r2, r3, #1
    slen -= p - buf;
 8017492:	eba7 0606 	sub.w	r6, r7, r6
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 8017496:	d001      	beq.n	801749c <mbedtls_rsa_rsassa_pss_verify_ext+0x134>
 8017498:	42b3      	cmp	r3, r6
 801749a:	d127      	bne.n	80174ec <mbedtls_rsa_rsassa_pss_verify_ext+0x184>
    mbedtls_md_starts( &md_ctx );
 801749c:	4628      	mov	r0, r5
 801749e:	f7fd f939 	bl	8014714 <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, zeros, 8 );
 80174a2:	2208      	movs	r2, #8
 80174a4:	a905      	add	r1, sp, #20
 80174a6:	4628      	mov	r0, r5
 80174a8:	f7fd f942 	bl	8014730 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 80174ac:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
 80174b0:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 80174b4:	4628      	mov	r0, r5
 80174b6:	f7fd f93b 	bl	8014730 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, p, slen );
 80174ba:	4632      	mov	r2, r6
 80174bc:	4621      	mov	r1, r4
 80174be:	4628      	mov	r0, r5
 80174c0:	f7fd f936 	bl	8014730 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, result );
 80174c4:	a90a      	add	r1, sp, #40	; 0x28
 80174c6:	4628      	mov	r0, r5
 80174c8:	f7fd f940 	bl	801474c <mbedtls_md_finish>
    mbedtls_md_free( &md_ctx );
 80174cc:	4628      	mov	r0, r5
 80174ce:	f7fd f8db 	bl	8014688 <mbedtls_md_free>
    if( memcmp( p + slen, result, hlen ) == 0 )
 80174d2:	4652      	mov	r2, sl
 80174d4:	a90a      	add	r1, sp, #40	; 0x28
 80174d6:	19a0      	adds	r0, r4, r6
 80174d8:	f00a fe58 	bl	802218c <memcmp>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80174dc:	4a07      	ldr	r2, [pc, #28]	; (80174fc <mbedtls_rsa_rsassa_pss_verify_ext+0x194>)
 80174de:	1e03      	subs	r3, r0, #0
 80174e0:	bf18      	it	ne
 80174e2:	4613      	movne	r3, r2
 80174e4:	e750      	b.n	8017388 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
        p++;
 80174e6:	461c      	mov	r4, r3
 80174e8:	e7c3      	b.n	8017472 <mbedtls_rsa_rsassa_pss_verify_ext+0x10a>
    if( p == buf + siglen ||
 80174ea:	d1c8      	bne.n	801747e <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
        mbedtls_md_free( &md_ctx );
 80174ec:	4628      	mov	r0, r5
 80174ee:	f7fd f8cb 	bl	8014688 <mbedtls_md_free>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80174f2:	4b03      	ldr	r3, [pc, #12]	; (8017500 <mbedtls_rsa_rsassa_pss_verify_ext+0x198>)
 80174f4:	e748      	b.n	8017388 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
 80174f6:	bf00      	nop
 80174f8:	ffffbf80 	.word	0xffffbf80
 80174fc:	ffffbc80 	.word	0xffffbc80
 8017500:	ffffbf00 	.word	0xffffbf00

08017504 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8017504:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 8017506:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
 801750a:	b086      	sub	sp, #24
 801750c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8017510:	b17c      	cbz	r4, 8017532 <mbedtls_rsa_rsassa_pss_verify+0x2e>
 8017512:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 8017514:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017516:	9605      	str	r6, [sp, #20]
 8017518:	f04f 36ff 	mov.w	r6, #4294967295
 801751c:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8017520:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017522:	9402      	str	r4, [sp, #8]
 8017524:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017526:	e9cd 5400 	strd	r5, r4, [sp]
 801752a:	f7ff ff1d 	bl	8017368 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 801752e:	b006      	add	sp, #24
 8017530:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 8017532:	462c      	mov	r4, r5
 8017534:	e7ee      	b.n	8017514 <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

08017538 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8017538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801753c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
    mbedtls_md_type_t msg_md_alg;
    const mbedtls_md_info_t *md_info;
    mbedtls_asn1_buf oid;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017540:	2b01      	cmp	r3, #1
{
 8017542:	f89d 5440 	ldrb.w	r5, [sp, #1088]	; 0x440
 8017546:	f8dd 7444 	ldr.w	r7, [sp, #1092]	; 0x444
 801754a:	f8dd 6448 	ldr.w	r6, [sp, #1096]	; 0x448
 801754e:	f8dd c44c 	ldr.w	ip, [sp, #1100]	; 0x44c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017552:	d107      	bne.n	8017564 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x2c>
 8017554:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 8017558:	b124      	cbz	r4, 8017564 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x2c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801755a:	485b      	ldr	r0, [pc, #364]	; (80176c8 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x190>)

    if( p != end )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    return( 0 );
}
 801755c:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 8017560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    siglen = ctx->len;
 8017564:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 8017568:	f1a8 0410 	sub.w	r4, r8, #16
 801756c:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 8017570:	d8f3      	bhi.n	801755a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 8017572:	ac08      	add	r4, sp, #32
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 8017574:	b94b      	cbnz	r3, 801758a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x52>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 8017576:	4622      	mov	r2, r4
 8017578:	4661      	mov	r1, ip
 801757a:	f7ff f8f7 	bl	801676c <mbedtls_rsa_public>
    if( ret != 0 )
 801757e:	2800      	cmp	r0, #0
 8017580:	d1ec      	bne.n	801755c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 8017582:	7823      	ldrb	r3, [r4, #0]
 8017584:	b133      	cbz	r3, 8017594 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5c>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8017586:	4851      	ldr	r0, [pc, #324]	; (80176cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x194>)
 8017588:	e7e8      	b.n	801755c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801758a:	9400      	str	r4, [sp, #0]
 801758c:	4663      	mov	r3, ip
 801758e:	f7ff f925 	bl	80167dc <mbedtls_rsa_private>
 8017592:	e7f4      	b.n	801757e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x46>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 8017594:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8017598:	9304      	str	r3, [sp, #16]
 801759a:	7863      	ldrb	r3, [r4, #1]
 801759c:	2b01      	cmp	r3, #1
 801759e:	d1f2      	bne.n	8017586 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 80175a0:	f108 33ff 	add.w	r3, r8, #4294967295
 80175a4:	4423      	add	r3, r4
    while( *p != 0 )
 80175a6:	9804      	ldr	r0, [sp, #16]
 80175a8:	7802      	ldrb	r2, [r0, #0]
 80175aa:	b98a      	cbnz	r2, 80175d0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
    p++; /* skip 00 byte */
 80175ac:	3001      	adds	r0, #1
    if( p - buf < 11 )
 80175ae:	1b04      	subs	r4, r0, r4
 80175b0:	2c0a      	cmp	r4, #10
    p++; /* skip 00 byte */
 80175b2:	9004      	str	r0, [sp, #16]
    if( p - buf < 11 )
 80175b4:	dde7      	ble.n	8017586 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
    len = siglen - ( p - buf );
 80175b6:	eba8 0404 	sub.w	r4, r8, r4
    if( len == hashlen && md_alg == MBEDTLS_MD_NONE )
 80175ba:	42bc      	cmp	r4, r7
 80175bc:	d10f      	bne.n	80175de <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa6>
 80175be:	b975      	cbnz	r5, 80175de <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa6>
        if( memcmp( p, hash, hashlen ) == 0 )
 80175c0:	463a      	mov	r2, r7
 80175c2:	4631      	mov	r1, r6
 80175c4:	f00a fde2 	bl	802218c <memcmp>
 80175c8:	2800      	cmp	r0, #0
 80175ca:	d0c7      	beq.n	801755c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 80175cc:	4840      	ldr	r0, [pc, #256]	; (80176d0 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x198>)
 80175ce:	e7c5      	b.n	801755c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 80175d0:	4298      	cmp	r0, r3
 80175d2:	d2d8      	bcs.n	8017586 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
 80175d4:	2aff      	cmp	r2, #255	; 0xff
 80175d6:	d1d6      	bne.n	8017586 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
        p++;
 80175d8:	3001      	adds	r0, #1
 80175da:	9004      	str	r0, [sp, #16]
 80175dc:	e7e3      	b.n	80175a6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
    md_info = mbedtls_md_info_from_type( md_alg );
 80175de:	4628      	mov	r0, r5
 80175e0:	f7fd f840 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80175e4:	2800      	cmp	r0, #0
 80175e6:	d0b8      	beq.n	801755a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
    hashlen = mbedtls_md_get_size( md_info );
 80175e8:	f7fd f98c 	bl	8014904 <mbedtls_md_get_size>
    end = p + len;
 80175ec:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80175f0:	eb09 0704 	add.w	r7, r9, r4
    hashlen = mbedtls_md_get_size( md_info );
 80175f4:	4680      	mov	r8, r0
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 80175f6:	2330      	movs	r3, #48	; 0x30
 80175f8:	aa03      	add	r2, sp, #12
 80175fa:	4639      	mov	r1, r7
 80175fc:	a804      	add	r0, sp, #16
 80175fe:	f7f6 fc5b 	bl	800deb8 <mbedtls_asn1_get_tag>
 8017602:	2800      	cmp	r0, #0
 8017604:	d1e2      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len + 2 != len )
 8017606:	f8dd a010 	ldr.w	sl, [sp, #16]
 801760a:	f109 0902 	add.w	r9, r9, #2
 801760e:	45ca      	cmp	sl, r9
 8017610:	d1dc      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8017612:	9b03      	ldr	r3, [sp, #12]
 8017614:	3302      	adds	r3, #2
 8017616:	42a3      	cmp	r3, r4
 8017618:	d1d8      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 801761a:	2330      	movs	r3, #48	; 0x30
 801761c:	aa03      	add	r2, sp, #12
 801761e:	4639      	mov	r1, r7
 8017620:	a804      	add	r0, sp, #16
 8017622:	f7f6 fc49 	bl	800deb8 <mbedtls_asn1_get_tag>
 8017626:	2800      	cmp	r0, #0
 8017628:	d1d0      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len + 6 + hashlen != len )
 801762a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801762e:	f10a 0a02 	add.w	sl, sl, #2
 8017632:	45d1      	cmp	r9, sl
 8017634:	d1ca      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8017636:	9b03      	ldr	r3, [sp, #12]
 8017638:	3306      	adds	r3, #6
 801763a:	4443      	add	r3, r8
 801763c:	42a3      	cmp	r3, r4
 801763e:	d1c5      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8017640:	2306      	movs	r3, #6
 8017642:	aa06      	add	r2, sp, #24
 8017644:	4639      	mov	r1, r7
 8017646:	a804      	add	r0, sp, #16
 8017648:	f7f6 fc36 	bl	800deb8 <mbedtls_asn1_get_tag>
 801764c:	2800      	cmp	r0, #0
 801764e:	d1bd      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 )
 8017650:	9b04      	ldr	r3, [sp, #16]
 8017652:	f109 0902 	add.w	r9, r9, #2
 8017656:	454b      	cmp	r3, r9
 8017658:	d1b8      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    p += oid.len;
 801765a:	9a06      	ldr	r2, [sp, #24]
    oid.p = p;
 801765c:	9307      	str	r3, [sp, #28]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 801765e:	f10d 010b 	add.w	r1, sp, #11
    p += oid.len;
 8017662:	4413      	add	r3, r2
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 8017664:	a805      	add	r0, sp, #20
    p += oid.len;
 8017666:	9304      	str	r3, [sp, #16]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 8017668:	f7fd fec4 	bl	80153f4 <mbedtls_oid_get_md_alg>
 801766c:	2800      	cmp	r0, #0
 801766e:	d1ad      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( md_alg != msg_md_alg )
 8017670:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8017674:	42ab      	cmp	r3, r5
 8017676:	d1a9      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 8017678:	2305      	movs	r3, #5
 801767a:	aa03      	add	r2, sp, #12
 801767c:	4639      	mov	r1, r7
 801767e:	a804      	add	r0, sp, #16
    p0 = p;
 8017680:	9c04      	ldr	r4, [sp, #16]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 8017682:	f7f6 fc19 	bl	800deb8 <mbedtls_asn1_get_tag>
 8017686:	2800      	cmp	r0, #0
 8017688:	d1a0      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 )
 801768a:	9d04      	ldr	r5, [sp, #16]
 801768c:	3402      	adds	r4, #2
 801768e:	42a5      	cmp	r5, r4
 8017690:	d19c      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 8017692:	2304      	movs	r3, #4
 8017694:	aa03      	add	r2, sp, #12
 8017696:	4639      	mov	r1, r7
 8017698:	a804      	add	r0, sp, #16
 801769a:	f7f6 fc0d 	bl	800deb8 <mbedtls_asn1_get_tag>
 801769e:	2800      	cmp	r0, #0
 80176a0:	d194      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len != hashlen )
 80176a2:	9c04      	ldr	r4, [sp, #16]
 80176a4:	3502      	adds	r5, #2
 80176a6:	42ac      	cmp	r4, r5
 80176a8:	d190      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 80176aa:	9b03      	ldr	r3, [sp, #12]
 80176ac:	4543      	cmp	r3, r8
 80176ae:	d18d      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( memcmp( p, hash, hashlen ) != 0 )
 80176b0:	4642      	mov	r2, r8
 80176b2:	4631      	mov	r1, r6
 80176b4:	4620      	mov	r0, r4
 80176b6:	f00a fd69 	bl	802218c <memcmp>
 80176ba:	2800      	cmp	r0, #0
 80176bc:	d186      	bne.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    p += hashlen;
 80176be:	44a0      	add	r8, r4
    if( p != end )
 80176c0:	4547      	cmp	r7, r8
 80176c2:	f43f af4b 	beq.w	801755c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
 80176c6:	e781      	b.n	80175cc <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 80176c8:	ffffbf80 	.word	0xffffbf80
 80176cc:	ffffbf00 	.word	0xffffbf00
 80176d0:	ffffbc80 	.word	0xffffbc80

080176d4 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 80176d4:	b430      	push	{r4, r5}
    switch( ctx->padding )
 80176d6:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 80176da:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 80176de:	b125      	cbz	r5, 80176ea <mbedtls_rsa_pkcs1_verify+0x16>
 80176e0:	2d01      	cmp	r5, #1
 80176e2:	d006      	beq.n	80176f2 <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 80176e4:	4805      	ldr	r0, [pc, #20]	; (80176fc <mbedtls_rsa_pkcs1_verify+0x28>)
 80176e6:	bc30      	pop	{r4, r5}
 80176e8:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80176ea:	9402      	str	r4, [sp, #8]
}
 80176ec:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 80176ee:	f7ff bf23 	b.w	8017538 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80176f2:	9402      	str	r4, [sp, #8]
}
 80176f4:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 80176f6:	f7ff bf05 	b.w	8017504 <mbedtls_rsa_rsassa_pss_verify>
 80176fa:	bf00      	nop
 80176fc:	ffffbf00 	.word	0xffffbf00

08017700 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8017700:	b510      	push	{r4, lr}
 8017702:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8017704:	308c      	adds	r0, #140	; 0x8c
 8017706:	f7f7 f819 	bl	800e73c <mbedtls_mpi_free>
 801770a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801770e:	f7f7 f815 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP ); mbedtls_mpi_free( &ctx->RN );
 8017712:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8017716:	f7f7 f811 	bl	800e73c <mbedtls_mpi_free>
 801771a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801771e:	f7f7 f80d 	bl	800e73c <mbedtls_mpi_free>
 8017722:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017726:	f7f7 f809 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ ); mbedtls_mpi_free( &ctx->DP );
 801772a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801772e:	f7f7 f805 	bl	800e73c <mbedtls_mpi_free>
 8017732:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017736:	f7f7 f801 	bl	800e73c <mbedtls_mpi_free>
 801773a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801773e:	f7f6 fffd 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  ); mbedtls_mpi_free( &ctx->D );
 8017742:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8017746:	f7f6 fff9 	bl	800e73c <mbedtls_mpi_free>
 801774a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801774e:	f7f6 fff5 	bl	800e73c <mbedtls_mpi_free>
 8017752:	f104 0020 	add.w	r0, r4, #32
 8017756:	f7f6 fff1 	bl	800e73c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 801775a:	f104 0014 	add.w	r0, r4, #20
 801775e:	f7f6 ffed 	bl	800e73c <mbedtls_mpi_free>
 8017762:	f104 0008 	add.w	r0, r4, #8

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 8017766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 801776a:	f7f6 bfe7 	b.w	800e73c <mbedtls_mpi_free>

0801776e <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 801776e:	225c      	movs	r2, #92	; 0x5c
 8017770:	2100      	movs	r1, #0
 8017772:	f00a bd41 	b.w	80221f8 <memset>

08017776 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 8017776:	b120      	cbz	r0, 8017782 <mbedtls_sha1_free+0xc>
 8017778:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 801777c:	2200      	movs	r2, #0
 801777e:	4298      	cmp	r0, r3
 8017780:	d100      	bne.n	8017784 <mbedtls_sha1_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}
 8017782:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8017784:	f800 2b01 	strb.w	r2, [r0], #1
 8017788:	e7f9      	b.n	801777e <mbedtls_sha1_free+0x8>

0801778a <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 801778a:	b508      	push	{r3, lr}
    *dst = *src;
 801778c:	225c      	movs	r2, #92	; 0x5c
 801778e:	f00a fd0b 	bl	80221a8 <memcpy>
}
 8017792:	bd08      	pop	{r3, pc}

08017794 <mbedtls_sha1_starts>:
/*
 * SHA-1 context setup
 */
void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 8017794:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8017796:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 801779a:	4b09      	ldr	r3, [pc, #36]	; (80177c0 <mbedtls_sha1_starts+0x2c>)
 801779c:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 801779e:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80177a2:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 80177a4:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 80177a8:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 80177ac:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 80177b0:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 80177b2:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 80177b6:	6143      	str	r3, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
 80177b8:	4b02      	ldr	r3, [pc, #8]	; (80177c4 <mbedtls_sha1_starts+0x30>)
 80177ba:	6183      	str	r3, [r0, #24]
}
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	67452301 	.word	0x67452301
 80177c4:	c3d2e1f0 	.word	0xc3d2e1f0

080177c8 <mbedtls_sha1_process>:

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
void mbedtls_sha1_process( mbedtls_sha1_context *ctx, const unsigned char data[64] )
{
 80177c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177cc:	680d      	ldr	r5, [r1, #0]
 80177ce:	684a      	ldr	r2, [r1, #4]
 80177d0:	698f      	ldr	r7, [r1, #24]
 80177d2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80177d4:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 80177d8:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80177dc:	68ce      	ldr	r6, [r1, #12]
 80177de:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80177e2:	b099      	sub	sp, #100	; 0x64
 80177e4:	ba2b      	rev	r3, r5
 80177e6:	9306      	str	r3, [sp, #24]
 80177e8:	ba13      	rev	r3, r2
 80177ea:	9307      	str	r3, [sp, #28]
 80177ec:	694b      	ldr	r3, [r1, #20]
 80177ee:	9000      	str	r0, [sp, #0]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 80177f0:	ba1b      	rev	r3, r3
 80177f2:	9309      	str	r3, [sp, #36]	; 0x24
 80177f4:	ba3b      	rev	r3, r7
 80177f6:	9310      	str	r3, [sp, #64]	; 0x40
 80177f8:	69cb      	ldr	r3, [r1, #28]
 80177fa:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80177fc:	6a0a      	ldr	r2, [r1, #32]
 80177fe:	ba1b      	rev	r3, r3
 8017800:	9311      	str	r3, [sp, #68]	; 0x44
 8017802:	ba03      	rev	r3, r0
 8017804:	930a      	str	r3, [sp, #40]	; 0x28
 8017806:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8017808:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 801780a:	ba1b      	rev	r3, r3
 801780c:	930b      	str	r3, [sp, #44]	; 0x2c
 801780e:	ba23      	rev	r3, r4
 8017810:	930c      	str	r3, [sp, #48]	; 0x30
 8017812:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8017814:	ba1b      	rev	r3, r3
 8017816:	930d      	str	r3, [sp, #52]	; 0x34
 8017818:	fa9e f38e 	rev.w	r3, lr
 801781c:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
 8017820:	9302      	str	r3, [sp, #8]
 8017822:	fa9e f38e 	rev.w	r3, lr
 8017826:	9303      	str	r3, [sp, #12]
 8017828:	ba03      	rev	r3, r0
 801782a:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 801782c:	9b00      	ldr	r3, [sp, #0]
 801782e:	689b      	ldr	r3, [r3, #8]
 8017830:	930e      	str	r3, [sp, #56]	; 0x38
    B = ctx->state[1];
 8017832:	9b00      	ldr	r3, [sp, #0]
 8017834:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017836:	68db      	ldr	r3, [r3, #12]
 8017838:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
 801783a:	9b00      	ldr	r3, [sp, #0]
#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
 801783c:	9801      	ldr	r0, [sp, #4]
    C = ctx->state[2];
 801783e:	691b      	ldr	r3, [r3, #16]
 8017840:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8017842:	9b00      	ldr	r3, [sp, #0]
 8017844:	9f01      	ldr	r7, [sp, #4]
 8017846:	695b      	ldr	r3, [r3, #20]
 8017848:	930f      	str	r3, [sp, #60]	; 0x3c
    E = ctx->state[4];
 801784a:	9b00      	ldr	r3, [sp, #0]
 801784c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801784e:	699b      	ldr	r3, [r3, #24]
 8017850:	9317      	str	r3, [sp, #92]	; 0x5c
 8017852:	fa92 f982 	rev.w	r9, r2
    P( A, B, C, D, E, W[0]  );
 8017856:	9b05      	ldr	r3, [sp, #20]
 8017858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801785a:	ea83 0c02 	eor.w	ip, r3, r2
 801785e:	9b01      	ldr	r3, [sp, #4]
 8017860:	ea0c 0c03 	and.w	ip, ip, r3
 8017864:	ea8c 0c02 	eor.w	ip, ip, r2
 8017868:	4bde      	ldr	r3, [pc, #888]	; (8017be4 <mbedtls_sha1_process+0x41c>)
 801786a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801786c:	441a      	add	r2, r3
 801786e:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8017872:	4494      	add	ip, r2
 8017874:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, W[1]  );
 8017876:	9901      	ldr	r1, [sp, #4]
    P( A, B, C, D, E, W[0]  );
 8017878:	4494      	add	ip, r2
    P( E, A, B, C, D, W[1]  );
 801787a:	9a05      	ldr	r2, [sp, #20]
 801787c:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8017880:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017882:	400a      	ands	r2, r1
 8017884:	9905      	ldr	r1, [sp, #20]
 8017886:	404a      	eors	r2, r1
 8017888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801788a:	4419      	add	r1, r3
 801788c:	440a      	add	r2, r1
 801788e:	9907      	ldr	r1, [sp, #28]
 8017890:	440a      	add	r2, r1
 8017892:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017894:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, W[2]  );
 8017898:	ea81 04b0 	eor.w	r4, r1, r0, ror #2
 801789c:	ea04 040c 	and.w	r4, r4, ip
 80178a0:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
 80178a4:	9805      	ldr	r0, [sp, #20]
 80178a6:	fa9a fa8a 	rev.w	sl, sl
    GET_UINT32_BE( W[ 3], data, 12 );
 80178aa:	4418      	add	r0, r3
 80178ac:	4450      	add	r0, sl
    P( E, A, B, C, D, W[1]  );
 80178ae:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 80178b2:	4404      	add	r4, r0
    P( C, D, E, A, B, W[3]  );
 80178b4:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
 80178b8:	ba36      	rev	r6, r6
 80178ba:	4010      	ands	r0, r2
 80178bc:	eb03 07b7 	add.w	r7, r3, r7, ror #2
    P( D, E, A, B, C, W[2]  );
 80178c0:	eb04 64f2 	add.w	r4, r4, r2, ror #27
 80178c4:	4437      	add	r7, r6
    P( C, D, E, A, B, W[3]  );
 80178c6:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80178ca:	4048      	eors	r0, r1
 80178cc:	4438      	add	r0, r7
    P( B, C, D, E, A, W[4]  );
 80178ce:	ea82 07bc 	eor.w	r7, r2, ip, ror #2
 80178d2:	fa98 f888 	rev.w	r8, r8
 80178d6:	4027      	ands	r7, r4
 80178d8:	4419      	add	r1, r3
 80178da:	4441      	add	r1, r8
 80178dc:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( C, D, E, A, B, W[3]  );
 80178e0:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, W[4]  );
 80178e4:	440f      	add	r7, r1
    P( A, B, C, D, E, W[5]  );
 80178e6:	ea82 01b4 	eor.w	r1, r2, r4, ror #2
 80178ea:	eb05 0e03 	add.w	lr, r5, r3
 80178ee:	4001      	ands	r1, r0
    P( B, C, D, E, A, W[4]  );
 80178f0:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( A, B, C, D, E, W[5]  );
 80178f4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80178f6:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80178fa:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
 80178fe:	4051      	eors	r1, r2
 8017900:	4461      	add	r1, ip
    P( E, A, B, C, D, W[6]  );
 8017902:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
 8017906:	eb05 0e03 	add.w	lr, r5, r3
 801790a:	ea0c 0c07 	and.w	ip, ip, r7
 801790e:	4472      	add	r2, lr
 8017910:	ea8c 0cb4 	eor.w	ip, ip, r4, ror #2
 8017914:	4494      	add	ip, r2
 8017916:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( A, B, C, D, E, W[5]  );
 8017918:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( D, E, A, B, C, W[7]  );
 801791c:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
    P( E, A, B, C, D, W[6]  );
 8017920:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, W[7]  );
 8017924:	441a      	add	r2, r3
 8017926:	ea0e 0e01 	and.w	lr, lr, r1
 801792a:	ea4f 01b1 	mov.w	r1, r1, ror #2
 801792e:	eb02 04b4 	add.w	r4, r2, r4, ror #2
 8017932:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
 8017936:	ea81 02b7 	eor.w	r2, r1, r7, ror #2
 801793a:	44a6      	add	lr, r4
 801793c:	ea02 020c 	and.w	r2, r2, ip
 8017940:	eb09 0403 	add.w	r4, r9, r3
 8017944:	4420      	add	r0, r4
 8017946:	ea82 02b7 	eor.w	r2, r2, r7, ror #2
 801794a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
 801794c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, W[8]  );
 8017950:	4402      	add	r2, r0
    P( B, C, D, E, A, W[9]  );
 8017952:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
 8017956:	441c      	add	r4, r3
 8017958:	ea00 000e 	and.w	r0, r0, lr
    P( C, D, E, A, B, W[8]  );
 801795c:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, W[9]  );
 8017960:	eb04 07b7 	add.w	r7, r4, r7, ror #2
 8017964:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017968:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801796a:	4048      	eors	r0, r1
 801796c:	4438      	add	r0, r7
    P( A, B, C, D, E, W[10] );
 801796e:	ea8e 07bc 	eor.w	r7, lr, ip, ror #2
 8017972:	441c      	add	r4, r3
 8017974:	4017      	ands	r7, r2
 8017976:	4421      	add	r1, r4
 8017978:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
 801797c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    P( B, C, D, E, A, W[9]  );
 801797e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, W[10] );
 8017982:	440f      	add	r7, r1
    P( E, A, B, C, D, W[11] );
 8017984:	ea8e 01b2 	eor.w	r1, lr, r2, ror #2
 8017988:	441c      	add	r4, r3
 801798a:	4001      	ands	r1, r0
 801798c:	ea81 010e 	eor.w	r1, r1, lr
 8017990:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( A, B, C, D, E, W[10] );
 8017994:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[11] );
 8017998:	448c      	add	ip, r1
 801799a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 801799e:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, W[12] );
 80179a0:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
 80179a4:	4419      	add	r1, r3
 80179a6:	403c      	ands	r4, r7
 80179a8:	448e      	add	lr, r1
 80179aa:	ea84 04b2 	eor.w	r4, r4, r2, ror #2
 80179ae:	9902      	ldr	r1, [sp, #8]
    P( E, A, B, C, D, W[11] );
 80179b0:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( D, E, A, B, C, W[12] );
 80179b4:	4474      	add	r4, lr
    P( C, D, E, A, B, W[13] );
 80179b6:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
 80179ba:	4419      	add	r1, r3
 80179bc:	ea0e 0e0c 	and.w	lr, lr, ip
 80179c0:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 80179c4:	ea8e 0e00 	eor.w	lr, lr, r0
 80179c8:	4496      	add	lr, r2
 80179ca:	9a03      	ldr	r2, [sp, #12]
 80179cc:	441a      	add	r2, r3
    P( D, E, A, B, C, W[12] );
 80179ce:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( C, D, E, A, B, W[13] );
 80179d2:	4410      	add	r0, r2
 80179d4:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 80179d8:	9a04      	ldr	r2, [sp, #16]
    P( B, C, D, E, A, W[14] );
 80179da:	ea8c 0bb7 	eor.w	fp, ip, r7, ror #2
 80179de:	441a      	add	r2, r3
 80179e0:	ea0b 0b04 	and.w	fp, fp, r4
 80179e4:	ea8b 0bb7 	eor.w	fp, fp, r7, ror #2
 80179e8:	eb02 07b7 	add.w	r7, r2, r7, ror #2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 80179ec:	9a06      	ldr	r2, [sp, #24]
 80179ee:	ea82 050a 	eor.w	r5, r2, sl
 80179f2:	9a02      	ldr	r2, [sp, #8]
 80179f4:	ea85 0509 	eor.w	r5, r5, r9
    P( C, D, E, A, B, W[13] );
 80179f8:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
    P( A, B, C, D, E, W[15] );
 80179fc:	ea8c 01b4 	eor.w	r1, ip, r4, ror #2
    P( E, A, B, C, D, R(16) );
 8017a00:	406a      	eors	r2, r5
 8017a02:	9206      	str	r2, [sp, #24]
    P( A, B, C, D, E, W[15] );
 8017a04:	ea01 010e 	and.w	r1, r1, lr
 8017a08:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017a0c:	ea81 010c 	eor.w	r1, r1, ip
 8017a10:	4494      	add	ip, r2
    P( D, E, A, B, C, R(17) );
 8017a12:	9a07      	ldr	r2, [sp, #28]
 8017a14:	4483      	add	fp, r0
 8017a16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017a18:	4072      	eors	r2, r6
 8017a1a:	4042      	eors	r2, r0
 8017a1c:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, W[14] );
 8017a1e:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
    P( A, B, C, D, E, W[15] );
 8017a22:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(17) );
 8017a26:	4042      	eors	r2, r0
 8017a28:	4439      	add	r1, r7
    P( E, A, B, C, D, R(16) );
 8017a2a:	ea8e 07b4 	eor.w	r7, lr, r4, ror #2
    P( D, E, A, B, C, R(17) );
 8017a2e:	9207      	str	r2, [sp, #28]
    P( E, A, B, C, D, R(16) );
 8017a30:	ea07 070b 	and.w	r7, r7, fp
 8017a34:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017a38:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 8017a3c:	eb02 04b4 	add.w	r4, r2, r4, ror #2
    P( C, D, E, A, B, R(18) );
 8017a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a42:	ea8a 0a08 	eor.w	sl, sl, r8
 8017a46:	ea8a 0a02 	eor.w	sl, sl, r2
 8017a4a:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, W[15] );
 8017a4c:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( C, D, E, A, B, R(18) );
 8017a50:	ea8a 0a02 	eor.w	sl, sl, r2
 8017a54:	4467      	add	r7, ip
    P( D, E, A, B, C, R(17) );
 8017a56:	ea8e 0cbb 	eor.w	ip, lr, fp, ror #2
 8017a5a:	eb03 70fa 	add.w	r0, r3, sl, ror #31
 8017a5e:	ea0c 0c01 	and.w	ip, ip, r1
 8017a62:	ea8c 0c0e 	eor.w	ip, ip, lr
 8017a66:	4486      	add	lr, r0
    P( B, C, D, E, A, R(19) );
 8017a68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a6a:	44a4      	add	ip, r4
 8017a6c:	ea86 0400 	eor.w	r4, r6, r0
 8017a70:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017a72:	4044      	eors	r4, r0
 8017a74:	9806      	ldr	r0, [sp, #24]
 8017a76:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( E, A, B, C, D, R(16) );
 8017a7a:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( B, C, D, E, A, R(19) );
 8017a7e:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( D, E, A, B, C, R(17) );
 8017a82:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8017a86:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( B, C, D, E, A, R(19) );
 8017a8a:	9013      	str	r0, [sp, #76]	; 0x4c
 8017a8c:	ea81 00b7 	eor.w	r0, r1, r7, ror #2
 8017a90:	ea00 000c 	and.w	r0, r0, ip
 8017a94:	eb03 73f4 	add.w	r3, r3, r4, ror #31
 8017a98:	eb03 03bb 	add.w	r3, r3, fp, ror #2
 8017a9c:	4048      	eors	r0, r1
 8017a9e:	4418      	add	r0, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8017aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017aa2:	ea88 0803 	eor.w	r8, r8, r3
 8017aa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
 8017aa8:	ea4f 72fa 	mov.w	r2, sl, ror #31
    P( A, B, C, D, E, R(20) );
 8017aac:	ea88 0803 	eor.w	r8, r8, r3
 8017ab0:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(18) );
 8017ab2:	9212      	str	r2, [sp, #72]	; 0x48
 8017ab4:	ea81 02bb 	eor.w	r2, r1, fp, ror #2
    P( A, B, C, D, E, R(20) );
 8017ab8:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
    P( C, D, E, A, B, R(18) );
 8017abc:	403a      	ands	r2, r7
    P( A, B, C, D, E, R(20) );
 8017abe:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(18) );
 8017ac0:	ea82 02bb 	eor.w	r2, r2, fp, ror #2
 8017ac4:	4b48      	ldr	r3, [pc, #288]	; (8017be8 <mbedtls_sha1_process+0x420>)
 8017ac6:	9e08      	ldr	r6, [sp, #32]
 8017ac8:	4472      	add	r2, lr
 8017aca:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( B, C, D, E, A, R(19) );
 8017ace:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(20) );
 8017ad2:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
 8017ad6:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 8017ada:	4431      	add	r1, r6
 8017adc:	4055      	eors	r5, r2
    P( E, A, B, C, D, R(21) );
 8017ade:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017ae0:	440d      	add	r5, r1
 8017ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ae4:	4071      	eors	r1, r6
 8017ae6:	9e02      	ldr	r6, [sp, #8]
 8017ae8:	4071      	eors	r1, r6
 8017aea:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
    P( B, C, D, E, A, R(19) );
 8017aee:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(20) );
 8017af2:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
    P( E, A, B, C, D, R(21) );
 8017af6:	ea8c 06b2 	eor.w	r6, ip, r2, ror #2
 8017afa:	eb0e 07b7 	add.w	r7, lr, r7, ror #2
 8017afe:	4046      	eors	r6, r0
 8017b00:	443e      	add	r6, r7
    P( D, E, A, B, C, R(22) );
 8017b02:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( E, A, B, C, D, R(21) );
 8017b04:	9109      	str	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
 8017b06:	9903      	ldr	r1, [sp, #12]
 8017b08:	ea87 0709 	eor.w	r7, r7, r9
 8017b0c:	404f      	eors	r7, r1
 8017b0e:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( A, B, C, D, E, R(20) );
 8017b12:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( D, E, A, B, C, R(22) );
 8017b16:	ea4f 71f7 	mov.w	r1, r7, ror #31
    P( E, A, B, C, D, R(21) );
 8017b1a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017b1e:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
    P( D, E, A, B, C, R(22) );
 8017b22:	ea80 0bb2 	eor.w	fp, r0, r2, ror #2
 8017b26:	9110      	str	r1, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(23) );
 8017b28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017b2a:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(22) );
 8017b2c:	ea8b 0b05 	eor.w	fp, fp, r5
 8017b30:	44e3      	add	fp, ip
    P( C, D, E, A, B, R(23) );
 8017b32:	468c      	mov	ip, r1
 8017b34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017b36:	ea8c 0801 	eor.w	r8, ip, r1
 8017b3a:	9904      	ldr	r1, [sp, #16]
 8017b3c:	ea88 0801 	eor.w	r8, r8, r1
 8017b40:	9908      	ldr	r1, [sp, #32]
 8017b42:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
    P( E, A, B, C, D, R(21) );
 8017b46:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( D, E, A, B, C, R(22) );
 8017b4a:	eb03 7cf8 	add.w	ip, r3, r8, ror #31
    P( C, D, E, A, B, R(23) );
 8017b4e:	ea80 0eb5 	eor.w	lr, r0, r5, ror #2
 8017b52:	eb0c 02b2 	add.w	r2, ip, r2, ror #2
 8017b56:	ea8e 0e06 	eor.w	lr, lr, r6
 8017b5a:	ea4f 71f8 	mov.w	r1, r8, ror #31
 8017b5e:	4496      	add	lr, r2
    P( B, C, D, E, A, R(24) );
 8017b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(23) );
 8017b62:	9111      	str	r1, [sp, #68]	; 0x44
    P( B, C, D, E, A, R(24) );
 8017b64:	9906      	ldr	r1, [sp, #24]
 8017b66:	ea89 0202 	eor.w	r2, r9, r2
 8017b6a:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 8017b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
 8017b70:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(24) );
 8017b74:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
    P( C, D, E, A, B, R(23) );
 8017b78:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8017b7c:	eb03 79f2 	add.w	r9, r3, r2, ror #31
    P( B, C, D, E, A, R(24) );
 8017b80:	ea86 0cb5 	eor.w	ip, r6, r5, ror #2
 8017b84:	4448      	add	r0, r9
 8017b86:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( A, B, C, D, E, R(25) );
 8017b8a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017b8c:	4484      	add	ip, r0
 8017b8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017b90:	4048      	eors	r0, r1
 8017b92:	9907      	ldr	r1, [sp, #28]
 8017b94:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 8017b98:	ea80 71f7 	eor.w	r1, r0, r7, ror #31
    P( C, D, E, A, B, R(23) );
 8017b9c:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
    P( B, C, D, E, A, R(24) );
 8017ba0:	eb03 79f1 	add.w	r9, r3, r1, ror #31
    P( A, B, C, D, E, R(25) );
 8017ba4:	ea86 00bb 	eor.w	r0, r6, fp, ror #2
 8017ba8:	eb09 05b5 	add.w	r5, r9, r5, ror #2
 8017bac:	ea80 000e 	eor.w	r0, r0, lr
 8017bb0:	910a      	str	r1, [sp, #40]	; 0x28
 8017bb2:	4428      	add	r0, r5
    P( E, A, B, C, D, R(26) );
 8017bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017bb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017bb8:	404d      	eors	r5, r1
 8017bba:	ea85 7afa 	eor.w	sl, r5, sl, ror #31
    P( B, C, D, E, A, R(24) );
 8017bbe:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( E, A, B, C, D, R(26) );
 8017bc2:	ea8a 7af8 	eor.w	sl, sl, r8, ror #31
    P( A, B, C, D, E, R(25) );
 8017bc6:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017bca:	eb03 79fa 	add.w	r9, r3, sl, ror #31
    P( E, A, B, C, D, R(26) );
 8017bce:	ea8e 05bb 	eor.w	r5, lr, fp, ror #2
 8017bd2:	ea4f 71fa 	mov.w	r1, sl, ror #31
 8017bd6:	444e      	add	r6, r9
 8017bd8:	ea85 050c 	eor.w	r5, r5, ip
 8017bdc:	9114      	str	r1, [sp, #80]	; 0x50
 8017bde:	4435      	add	r5, r6
    P( D, E, A, B, C, R(27) );
 8017be0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017be2:	e003      	b.n	8017bec <mbedtls_sha1_process+0x424>
 8017be4:	5a827999 	.word	0x5a827999
 8017be8:	6ed9eba1 	.word	0x6ed9eba1
 8017bec:	9e02      	ldr	r6, [sp, #8]
 8017bee:	ea81 0906 	eor.w	r9, r1, r6
 8017bf2:	ea89 74f4 	eor.w	r4, r9, r4, ror #31
 8017bf6:	ea84 74f2 	eor.w	r4, r4, r2, ror #31
    P( A, B, C, D, E, R(25) );
 8017bfa:	eb00 60fc 	add.w	r0, r0, ip, ror #27
    P( E, A, B, C, D, R(26) );
 8017bfe:	eb03 79f4 	add.w	r9, r3, r4, ror #31
    P( D, E, A, B, C, R(27) );
 8017c02:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
 8017c06:	ea4f 71f4 	mov.w	r1, r4, ror #31
 8017c0a:	4046      	eors	r6, r0
 8017c0c:	eb09 0bbb 	add.w	fp, r9, fp, ror #2
 8017c10:	9115      	str	r1, [sp, #84]	; 0x54
 8017c12:	44b3      	add	fp, r6
    P( C, D, E, A, B, R(28) );
 8017c14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017c16:	9e03      	ldr	r6, [sp, #12]
 8017c18:	404e      	eors	r6, r1
 8017c1a:	9908      	ldr	r1, [sp, #32]
 8017c1c:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 8017c20:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(26) );
 8017c22:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( C, D, E, A, B, R(28) );
 8017c26:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
    P( D, E, A, B, C, R(27) );
 8017c2a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017c2e:	eb03 79f1 	add.w	r9, r3, r1, ror #31
    P( C, D, E, A, B, R(28) );
 8017c32:	910b      	str	r1, [sp, #44]	; 0x2c
 8017c34:	ea80 06bc 	eor.w	r6, r0, ip, ror #2
    P( B, C, D, E, A, R(29) );
 8017c38:	9902      	ldr	r1, [sp, #8]
 8017c3a:	44ce      	add	lr, r9
    P( C, D, E, A, B, R(28) );
 8017c3c:	406e      	eors	r6, r5
 8017c3e:	4476      	add	r6, lr
    P( B, C, D, E, A, R(29) );
 8017c40:	468e      	mov	lr, r1
 8017c42:	9904      	ldr	r1, [sp, #16]
 8017c44:	ea8e 0e01 	eor.w	lr, lr, r1
 8017c48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017c4a:	ea8e 7ef1 	eor.w	lr, lr, r1, ror #31
 8017c4e:	ea8e 71fa 	eor.w	r1, lr, sl, ror #31
    P( D, E, A, B, C, R(27) );
 8017c52:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( C, D, E, A, B, R(28) );
 8017c56:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
    P( B, C, D, E, A, R(29) );
 8017c5a:	9102      	str	r1, [sp, #8]
 8017c5c:	ea80 09b5 	eor.w	r9, r0, r5, ror #2
    P( A, B, C, D, E, R(30) );
 8017c60:	9903      	ldr	r1, [sp, #12]
 8017c62:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
    P( B, C, D, E, A, R(29) );
 8017c66:	ea89 090b 	eor.w	r9, r9, fp
 8017c6a:	44e1      	add	r9, ip
    P( A, B, C, D, E, R(30) );
 8017c6c:	468c      	mov	ip, r1
 8017c6e:	9906      	ldr	r1, [sp, #24]
 8017c70:	ea8c 7ef1 	eor.w	lr, ip, r1, ror #31
 8017c74:	ea8e 77f7 	eor.w	r7, lr, r7, ror #31
    P( C, D, E, A, B, R(28) );
 8017c78:	eb06 66fb 	add.w	r6, r6, fp, ror #27
    P( A, B, C, D, E, R(30) );
 8017c7c:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( B, C, D, E, A, R(29) );
 8017c80:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8017c84:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
    P( A, B, C, D, E, R(30) );
 8017c88:	ea8b 0cb5 	eor.w	ip, fp, r5, ror #2
 8017c8c:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8017c90:	4470      	add	r0, lr
 8017c92:	ea8c 0c06 	eor.w	ip, ip, r6
 8017c96:	910d      	str	r1, [sp, #52]	; 0x34
 8017c98:	4484      	add	ip, r0
    P( E, A, B, C, D, R(31) );
 8017c9a:	9904      	ldr	r1, [sp, #16]
 8017c9c:	9807      	ldr	r0, [sp, #28]
 8017c9e:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 8017ca2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ca4:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 8017ca8:	ea80 71f1 	eor.w	r1, r0, r1, ror #31
 8017cac:	910c      	str	r1, [sp, #48]	; 0x30
 8017cae:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8017cb2:	9116      	str	r1, [sp, #88]	; 0x58
 8017cb4:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8017cb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(29) );
 8017cb8:	eb09 69f6 	add.w	r9, r9, r6, ror #27
    P( A, B, C, D, E, R(30) );
 8017cbc:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( E, A, B, C, D, R(31) );
 8017cc0:	ea8b 0eb6 	eor.w	lr, fp, r6, ror #2
 8017cc4:	eb08 05b5 	add.w	r5, r8, r5, ror #2
 8017cc8:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(32) );
 8017ccc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017cce:	44ae      	add	lr, r5
 8017cd0:	9d06      	ldr	r5, [sp, #24]
 8017cd2:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
 8017cd6:	9902      	ldr	r1, [sp, #8]
 8017cd8:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 8017cdc:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
 8017ce0:	9103      	str	r1, [sp, #12]
 8017ce2:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( C, D, E, A, B, R(33) );
 8017ce6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017ce8:	44c3      	add	fp, r8
 8017cea:	4688      	mov	r8, r1
 8017cec:	9907      	ldr	r1, [sp, #28]
 8017cee:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
 8017cf2:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(30) );
 8017cf4:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(31) );
 8017cf8:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(32) );
 8017cfc:	ea89 05b6 	eor.w	r5, r9, r6, ror #2
    P( C, D, E, A, B, R(33) );
 8017d00:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
 8017d04:	ea88 71f7 	eor.w	r1, r8, r7, ror #31
    P( D, E, A, B, C, R(32) );
 8017d08:	ea85 050c 	eor.w	r5, r5, ip
    P( E, A, B, C, D, R(31) );
 8017d0c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(33) );
 8017d10:	ea89 08bc 	eor.w	r8, r9, ip, ror #2
 8017d14:	445d      	add	r5, fp
 8017d16:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 8017d1a:	eb0b 06b6 	add.w	r6, fp, r6, ror #2
 8017d1e:	ea88 080e 	eor.w	r8, r8, lr
 8017d22:	9104      	str	r1, [sp, #16]
 8017d24:	44b0      	add	r8, r6
    P( B, C, D, E, A, R(34) );
 8017d26:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017d28:	9e08      	ldr	r6, [sp, #32]
 8017d2a:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
 8017d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017d30:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
 8017d34:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
    P( D, E, A, B, C, R(32) );
 8017d38:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, R(34) );
 8017d3c:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(33) );
 8017d40:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017d44:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
    P( B, C, D, E, A, R(34) );
 8017d48:	9112      	str	r1, [sp, #72]	; 0x48
 8017d4a:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
    P( A, B, C, D, E, R(35) );
 8017d4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017d50:	44d9      	add	r9, fp
    P( B, C, D, E, A, R(34) );
 8017d52:	406e      	eors	r6, r5
 8017d54:	444e      	add	r6, r9
    P( A, B, C, D, E, R(35) );
 8017d56:	ea81 79f0 	eor.w	r9, r1, r0, ror #31
 8017d5a:	9903      	ldr	r1, [sp, #12]
 8017d5c:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 8017d60:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 8017d64:	ea4f 71f9 	mov.w	r1, r9, ror #31
    P( C, D, E, A, B, R(33) );
 8017d68:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( B, C, D, E, A, R(34) );
 8017d6c:	eb03 7bf9 	add.w	fp, r3, r9, ror #31
    P( A, B, C, D, E, R(35) );
 8017d70:	9113      	str	r1, [sp, #76]	; 0x4c
 8017d72:	ea8e 04b5 	eor.w	r4, lr, r5, ror #2
    P( E, A, B, C, D, R(36) );
 8017d76:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017d78:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
    P( A, B, C, D, E, R(35) );
 8017d7c:	ea84 0408 	eor.w	r4, r4, r8
 8017d80:	4464      	add	r4, ip
    P( E, A, B, C, D, R(36) );
 8017d82:	468c      	mov	ip, r1
 8017d84:	9908      	ldr	r1, [sp, #32]
 8017d86:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
 8017d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017d8c:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
 8017d90:	9904      	ldr	r1, [sp, #16]
    P( B, C, D, E, A, R(34) );
 8017d92:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( E, A, B, C, D, R(36) );
 8017d96:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
    P( A, B, C, D, E, R(35) );
 8017d9a:	ea4f 08b8 	mov.w	r8, r8, ror #2
 8017d9e:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
    P( E, A, B, C, D, R(36) );
 8017da2:	9106      	str	r1, [sp, #24]
 8017da4:	ea88 0cb5 	eor.w	ip, r8, r5, ror #2
    P( D, E, A, B, C, R(37) );
 8017da8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017daa:	44de      	add	lr, fp
    P( E, A, B, C, D, R(36) );
 8017dac:	ea8c 0c06 	eor.w	ip, ip, r6
 8017db0:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
 8017db2:	ea81 7ef0 	eor.w	lr, r1, r0, ror #31
 8017db6:	9902      	ldr	r1, [sp, #8]
 8017db8:	ea8e 71f1 	eor.w	r1, lr, r1, ror #31
 8017dbc:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 8017dc0:	9107      	str	r1, [sp, #28]
 8017dc2:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8017dc6:	eb01 05b5 	add.w	r5, r1, r5, ror #2
    P( C, D, E, A, B, R(38) );
 8017dca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017dcc:	ea81 7ef2 	eor.w	lr, r1, r2, ror #31
 8017dd0:	ea8e 7ef7 	eor.w	lr, lr, r7, ror #31
 8017dd4:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8017dd8:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8017ddc:	9110      	str	r1, [sp, #64]	; 0x40
 8017dde:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( B, C, D, E, A, R(39) );
 8017de2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(37) );
 8017de4:	ea88 0bb6 	eor.w	fp, r8, r6, ror #2
 8017de8:	4488      	add	r8, r1
    P( B, C, D, E, A, R(39) );
 8017dea:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017dec:	ea81 77f7 	eor.w	r7, r1, r7, ror #31
 8017df0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017df2:	ea87 70f1 	eor.w	r0, r7, r1, ror #31
 8017df6:	9906      	ldr	r1, [sp, #24]
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 8017df8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(35) );
 8017dfa:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( B, C, D, E, A, R(39) );
 8017dfe:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
    P( D, E, A, B, C, R(37) );
 8017e02:	ea8b 0b04 	eor.w	fp, fp, r4
    P( E, A, B, C, D, R(36) );
 8017e06:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(39) );
 8017e0a:	ea4f 71f0 	mov.w	r1, r0, ror #31
    P( D, E, A, B, C, R(37) );
 8017e0e:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8017e12:	44ab      	add	fp, r5
 8017e14:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( B, C, D, E, A, R(39) );
 8017e18:	910c      	str	r1, [sp, #48]	; 0x30
 8017e1a:	eb03 73f0 	add.w	r3, r3, r0, ror #31
 8017e1e:	ea84 01bc 	eor.w	r1, r4, ip, ror #2
 8017e22:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8017e26:	ea81 010b 	eor.w	r1, r1, fp
 8017e2a:	4419      	add	r1, r3
    P( A, B, C, D, E, R(40) );
 8017e2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e2e:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 8017e32:	9b03      	ldr	r3, [sp, #12]
 8017e34:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
 8017e38:	9b07      	ldr	r3, [sp, #28]
 8017e3a:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 8017e3e:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(38) );
 8017e40:	ea84 05b6 	eor.w	r5, r4, r6, ror #2
 8017e44:	4bda      	ldr	r3, [pc, #872]	; (80181b0 <mbedtls_sha1_process+0x9e8>)
 8017e46:	9a08      	ldr	r2, [sp, #32]
 8017e48:	ea85 050c 	eor.w	r5, r5, ip
 8017e4c:	4445      	add	r5, r8
 8017e4e:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( B, C, D, E, A, R(39) );
 8017e52:	eb03 76f2 	add.w	r6, r3, r2, ror #31
 8017e56:	4434      	add	r4, r6
    P( A, B, C, D, E, R(40) );
 8017e58:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
    P( B, C, D, E, A, R(39) );
 8017e5c:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(40) );
 8017e60:	ea05 02bb 	and.w	r2, r5, fp, ror #2
 8017e64:	ea06 06bc 	and.w	r6, r6, ip, ror #2
 8017e68:	eb04 64f1 	add.w	r4, r4, r1, ror #27
 8017e6c:	4316      	orrs	r6, r2
 8017e6e:	4426      	add	r6, r4
    P( E, A, B, C, D, R(41) );
 8017e70:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017e72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017e74:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 8017e78:	9c04      	ldr	r4, [sp, #16]
 8017e7a:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 8017e7e:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
 8017e82:	ea41 04b5 	orr.w	r4, r1, r5, ror #2
 8017e86:	9209      	str	r2, [sp, #36]	; 0x24
 8017e88:	ea04 02bb 	and.w	r2, r4, fp, ror #2
 8017e8c:	ea01 04b5 	and.w	r4, r1, r5, ror #2
 8017e90:	4314      	orrs	r4, r2
 8017e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e94:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017e98:	eb02 0cbc 	add.w	ip, r2, ip, ror #2
    P( D, E, A, B, C, R(42) );
 8017e9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e9e:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 8017ea2:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 8017ea6:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 8017eaa:	ea4f 72fa 	mov.w	r2, sl, ror #31
 8017eae:	9211      	str	r2, [sp, #68]	; 0x44
 8017eb0:	4464      	add	r4, ip
 8017eb2:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( E, A, B, C, D, R(41) );
 8017eb6:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( D, E, A, B, C, R(42) );
 8017eba:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
 8017ebe:	eb0b 62f4 	add.w	r2, fp, r4, ror #27
 8017ec2:	ea46 0bb1 	orr.w	fp, r6, r1, ror #2
 8017ec6:	ea06 07b1 	and.w	r7, r6, r1, ror #2
 8017eca:	ea0b 0bb5 	and.w	fp, fp, r5, ror #2
 8017ece:	ea4b 0b07 	orr.w	fp, fp, r7
 8017ed2:	4493      	add	fp, r2
    P( C, D, E, A, B, R(43) );
 8017ed4:	9f02      	ldr	r7, [sp, #8]
 8017ed6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017ed8:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 8017edc:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 8017ee0:	9a08      	ldr	r2, [sp, #32]
 8017ee2:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 8017ee6:	ea44 08b6 	orr.w	r8, r4, r6, ror #2
 8017eea:	ea4f 72f9 	mov.w	r2, r9, ror #31
 8017eee:	9214      	str	r2, [sp, #80]	; 0x50
 8017ef0:	ea08 02b1 	and.w	r2, r8, r1, ror #2
 8017ef4:	ea04 08b6 	and.w	r8, r4, r6, ror #2
 8017ef8:	ea42 0808 	orr.w	r8, r2, r8
 8017efc:	eb03 72f9 	add.w	r2, r3, r9, ror #31
 8017f00:	eb02 05b5 	add.w	r5, r2, r5, ror #2
 8017f04:	44a8      	add	r8, r5
    P( B, C, D, E, A, R(44) );
 8017f06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017f08:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017f0a:	ea82 75f5 	eor.w	r5, r2, r5, ror #31
 8017f0e:	9a06      	ldr	r2, [sp, #24]
 8017f10:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 8017f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f16:	ea85 72f2 	eor.w	r2, r5, r2, ror #31
 8017f1a:	eb03 7cf2 	add.w	ip, r3, r2, ror #31
 8017f1e:	eb0c 01b1 	add.w	r1, ip, r1, ror #2
 8017f22:	ea4b 0cb4 	orr.w	ip, fp, r4, ror #2
    P( C, D, E, A, B, R(43) );
 8017f26:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( B, C, D, E, A, R(44) );
 8017f2a:	ea0b 05b4 	and.w	r5, fp, r4, ror #2
 8017f2e:	ea0c 0cb6 	and.w	ip, ip, r6, ror #2
 8017f32:	920a      	str	r2, [sp, #40]	; 0x28
 8017f34:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( A, B, C, D, E, R(45) );
 8017f38:	9a16      	ldr	r2, [sp, #88]	; 0x58
    P( B, C, D, E, A, R(44) );
 8017f3a:	ea4c 0c05 	orr.w	ip, ip, r5
 8017f3e:	448c      	add	ip, r1
    P( A, B, C, D, E, R(45) );
 8017f40:	9907      	ldr	r1, [sp, #28]
    P( E, A, B, C, D, R(46) );
 8017f42:	9d03      	ldr	r5, [sp, #12]
    P( A, B, C, D, E, R(45) );
 8017f44:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 8017f48:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 8017f4c:	ea82 72fa 	eor.w	r2, r2, sl, ror #31
 8017f50:	9202      	str	r2, [sp, #8]
 8017f52:	ea48 02bb 	orr.w	r2, r8, fp, ror #2
 8017f56:	ea02 01b4 	and.w	r1, r2, r4, ror #2
 8017f5a:	ea08 02bb 	and.w	r2, r8, fp, ror #2
 8017f5e:	430a      	orrs	r2, r1
 8017f60:	9902      	ldr	r1, [sp, #8]
 8017f62:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8017f66:	eb01 06b6 	add.w	r6, r1, r6, ror #2
    P( E, A, B, C, D, R(46) );
 8017f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f6c:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 8017f70:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 8017f74:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8017f78:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8017f7c:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f7e:	4432      	add	r2, r6
 8017f80:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( A, B, C, D, E, R(45) );
 8017f84:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( E, A, B, C, D, R(46) );
 8017f88:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 8017f8c:	eb04 61f2 	add.w	r1, r4, r2, ror #27
 8017f90:	ea4c 04b8 	orr.w	r4, ip, r8, ror #2
 8017f94:	ea0c 06b8 	and.w	r6, ip, r8, ror #2
 8017f98:	ea04 04bb 	and.w	r4, r4, fp, ror #2
 8017f9c:	4334      	orrs	r4, r6
 8017f9e:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 8017fa0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017fa2:	9d04      	ldr	r5, [sp, #16]
 8017fa4:	ea81 77f5 	eor.w	r7, r1, r5, ror #31
 8017fa8:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(48) );
 8017faa:	9d03      	ldr	r5, [sp, #12]
    P( D, E, A, B, C, R(47) );
 8017fac:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
 8017fb0:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 8017fb4:	ea42 00bc 	orr.w	r0, r2, ip, ror #2
 8017fb8:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8017fbc:	910d      	str	r1, [sp, #52]	; 0x34
 8017fbe:	ea00 01b8 	and.w	r1, r0, r8, ror #2
 8017fc2:	ea02 00bc 	and.w	r0, r2, ip, ror #2
 8017fc6:	4308      	orrs	r0, r1
 8017fc8:	eb03 71f7 	add.w	r1, r3, r7, ror #31
 8017fcc:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( C, D, E, A, B, R(48) );
 8017fd0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017fd2:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
 8017fd6:	9908      	ldr	r1, [sp, #32]
 8017fd8:	ea85 75f1 	eor.w	r5, r5, r1, ror #31
 8017fdc:	9902      	ldr	r1, [sp, #8]
 8017fde:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
 8017fe2:	4458      	add	r0, fp
 8017fe4:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 8017fe8:	eb0b 08b8 	add.w	r8, fp, r8, ror #2
 8017fec:	ea44 0bb2 	orr.w	fp, r4, r2, ror #2
 8017ff0:	9103      	str	r1, [sp, #12]
 8017ff2:	ea0b 0bbc 	and.w	fp, fp, ip, ror #2
 8017ff6:	ea04 01b2 	and.w	r1, r4, r2, ror #2
    P( B, C, D, E, A, R(49) );
 8017ffa:	9d04      	ldr	r5, [sp, #16]
    P( C, D, E, A, B, R(48) );
 8017ffc:	ea4b 0b01 	orr.w	fp, fp, r1
    P( B, C, D, E, A, R(49) );
 8018000:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018002:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
 8018006:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(47) );
 8018008:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(49) );
 801800c:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 8018010:	ea86 71fe 	eor.w	r1, r6, lr, ror #31
 8018014:	ea40 05b4 	orr.w	r5, r0, r4, ror #2
 8018018:	9104      	str	r1, [sp, #16]
 801801a:	ea05 01b2 	and.w	r1, r5, r2, ror #2
 801801e:	ea00 05b4 	and.w	r5, r0, r4, ror #2
 8018022:	430d      	orrs	r5, r1
 8018024:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, R(50) );
 8018026:	9e06      	ldr	r6, [sp, #24]
 8018028:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801802c:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
 8018030:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018032:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
 8018036:	ea81 7afa 	eor.w	sl, r1, sl, ror #31
 801803a:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 801803e:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 8018042:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(48) );
 8018046:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(50) );
 8018048:	9112      	str	r1, [sp, #72]	; 0x48
 801804a:	4465      	add	r5, ip
 801804c:	eb03 71fa 	add.w	r1, r3, sl, ror #31
    P( B, C, D, E, A, R(49) );
 8018050:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(50) );
 8018054:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 8018058:	eb02 61f5 	add.w	r1, r2, r5, ror #27
 801805c:	ea4b 02b0 	orr.w	r2, fp, r0, ror #2
 8018060:	ea0b 0cb0 	and.w	ip, fp, r0, ror #2
 8018064:	ea02 02b4 	and.w	r2, r2, r4, ror #2
 8018068:	ea42 020c 	orr.w	r2, r2, ip
 801806c:	440a      	add	r2, r1
    P( E, A, B, C, D, R(51) );
 801806e:	9e07      	ldr	r6, [sp, #28]
 8018070:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018072:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
 8018076:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
 801807a:	9903      	ldr	r1, [sp, #12]
 801807c:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 8018080:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
 8018084:	ea4f 71f9 	mov.w	r1, r9, ror #31
 8018088:	9113      	str	r1, [sp, #76]	; 0x4c
 801808a:	ea06 01b0 	and.w	r1, r6, r0, ror #2
 801808e:	ea05 06bb 	and.w	r6, r5, fp, ror #2
 8018092:	430e      	orrs	r6, r1
 8018094:	eb03 71f9 	add.w	r1, r3, r9, ror #31
 8018098:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 801809c:	4426      	add	r6, r4
    P( D, E, A, B, C, R(52) );
 801809e:	9910      	ldr	r1, [sp, #64]	; 0x40
 80180a0:	9c06      	ldr	r4, [sp, #24]
 80180a2:	ea81 74f4 	eor.w	r4, r1, r4, ror #31
 80180a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80180a8:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
 80180ac:	9904      	ldr	r1, [sp, #16]
 80180ae:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 80180b2:	9106      	str	r1, [sp, #24]
 80180b4:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( E, A, B, C, D, R(51) );
 80180b8:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( D, E, A, B, C, R(52) );
 80180bc:	eb01 00b0 	add.w	r0, r1, r0, ror #2
 80180c0:	eb00 61f6 	add.w	r1, r0, r6, ror #27
 80180c4:	ea42 00b5 	orr.w	r0, r2, r5, ror #2
 80180c8:	ea02 04b5 	and.w	r4, r2, r5, ror #2
 80180cc:	ea00 00bb 	and.w	r0, r0, fp, ror #2
 80180d0:	4320      	orrs	r0, r4
 80180d2:	4408      	add	r0, r1
    P( C, D, E, A, B, R(53) );
 80180d4:	9c07      	ldr	r4, [sp, #28]
 80180d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80180d8:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 80180dc:	9c02      	ldr	r4, [sp, #8]
 80180de:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 80180e2:	ea46 08b2 	orr.w	r8, r6, r2, ror #2
 80180e6:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 80180ea:	9107      	str	r1, [sp, #28]
 80180ec:	ea08 01b5 	and.w	r1, r8, r5, ror #2
 80180f0:	ea06 08b2 	and.w	r8, r6, r2, ror #2
 80180f4:	ea41 0808 	orr.w	r8, r1, r8
 80180f8:	9907      	ldr	r1, [sp, #28]
 80180fa:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 80180fe:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( B, C, D, E, A, R(54) );
 8018102:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018104:	9c08      	ldr	r4, [sp, #32]
 8018106:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801810a:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 801810e:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8018112:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8018116:	9110      	str	r1, [sp, #64]	; 0x40
 8018118:	44d8      	add	r8, fp
 801811a:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( C, D, E, A, B, R(53) );
 801811e:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( B, C, D, E, A, R(54) );
 8018122:	eb01 05b5 	add.w	r5, r1, r5, ror #2
 8018126:	eb05 61f8 	add.w	r1, r5, r8, ror #27
 801812a:	ea40 05b6 	orr.w	r5, r0, r6, ror #2
 801812e:	ea00 04b6 	and.w	r4, r0, r6, ror #2
 8018132:	ea05 05b2 	and.w	r5, r5, r2, ror #2
 8018136:	4325      	orrs	r5, r4
 8018138:	440d      	add	r5, r1
    P( A, B, C, D, E, R(55) );
 801813a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801813c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801813e:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018142:	9c06      	ldr	r4, [sp, #24]
 8018144:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 8018148:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801814c:	ea48 0cb0 	orr.w	ip, r8, r0, ror #2
 8018150:	ea4f 74f1 	mov.w	r4, r1, ror #31
 8018154:	940c      	str	r4, [sp, #48]	; 0x30
 8018156:	ea0c 04b6 	and.w	r4, ip, r6, ror #2
 801815a:	ea08 0cb0 	and.w	ip, r8, r0, ror #2
 801815e:	ea44 0c0c 	orr.w	ip, r4, ip
 8018162:	eb03 74f1 	add.w	r4, r3, r1, ror #31
 8018166:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 801816a:	4494      	add	ip, r2
    P( E, A, B, C, D, R(56) );
 801816c:	9c08      	ldr	r4, [sp, #32]
 801816e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018170:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
 8018174:	9a03      	ldr	r2, [sp, #12]
 8018176:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 801817a:	9a07      	ldr	r2, [sp, #28]
 801817c:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
 8018180:	eb03 77f2 	add.w	r7, r3, r2, ror #31
 8018184:	eb07 06b6 	add.w	r6, r7, r6, ror #2
 8018188:	ea45 07b8 	orr.w	r7, r5, r8, ror #2
 801818c:	ea05 04b8 	and.w	r4, r5, r8, ror #2
 8018190:	ea07 07b0 	and.w	r7, r7, r0, ror #2
    P( A, B, C, D, E, R(55) );
 8018194:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
    P( E, A, B, C, D, R(56) );
 8018198:	9208      	str	r2, [sp, #32]
 801819a:	4327      	orrs	r7, r4
    P( D, E, A, B, C, R(57) );
 801819c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801819e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80181a0:	eb06 66fc 	add.w	r6, r6, ip, ror #27
    P( E, A, B, C, D, R(56) );
 80181a4:	4437      	add	r7, r6
    P( D, E, A, B, C, R(57) );
 80181a6:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
 80181aa:	9a04      	ldr	r2, [sp, #16]
 80181ac:	e002      	b.n	80181b4 <mbedtls_sha1_process+0x9ec>
 80181ae:	bf00      	nop
 80181b0:	8f1bbcdc 	.word	0x8f1bbcdc
 80181b4:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 80181b8:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
 80181bc:	9209      	str	r2, [sp, #36]	; 0x24
 80181be:	ea4c 02b5 	orr.w	r2, ip, r5, ror #2
 80181c2:	ea02 04b8 	and.w	r4, r2, r8, ror #2
 80181c6:	ea0c 02b5 	and.w	r2, ip, r5, ror #2
 80181ca:	4322      	orrs	r2, r4
 80181cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80181ce:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 80181d2:	eb04 00b0 	add.w	r0, r4, r0, ror #2
 80181d6:	4402      	add	r2, r0
    P( C, D, E, A, B, R(58) );
 80181d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80181da:	9811      	ldr	r0, [sp, #68]	; 0x44
 80181dc:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 80181e0:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
 80181e4:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
 80181e8:	ea4f 70fa 	mov.w	r0, sl, ror #31
 80181ec:	9011      	str	r0, [sp, #68]	; 0x44
 80181ee:	eb03 70fa 	add.w	r0, r3, sl, ror #31
    P( D, E, A, B, C, R(57) );
 80181f2:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( C, D, E, A, B, R(58) );
 80181f6:	eb00 08b8 	add.w	r8, r0, r8, ror #2
 80181fa:	eb08 60f2 	add.w	r0, r8, r2, ror #27
 80181fe:	ea47 08bc 	orr.w	r8, r7, ip, ror #2
 8018202:	ea07 04bc 	and.w	r4, r7, ip, ror #2
 8018206:	ea08 08b5 	and.w	r8, r8, r5, ror #2
 801820a:	ea48 0804 	orr.w	r8, r8, r4
 801820e:	4480      	add	r8, r0
    P( B, C, D, E, A, R(59) );
 8018210:	9c02      	ldr	r4, [sp, #8]
 8018212:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018214:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8018218:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 801821c:	9808      	ldr	r0, [sp, #32]
 801821e:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 8018222:	ea4f 70f9 	mov.w	r0, r9, ror #31
 8018226:	ea42 04b7 	orr.w	r4, r2, r7, ror #2
 801822a:	9014      	str	r0, [sp, #80]	; 0x50
 801822c:	ea04 04bc 	and.w	r4, r4, ip, ror #2
 8018230:	ea02 00b7 	and.w	r0, r2, r7, ror #2
 8018234:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 8018238:	eb03 03b5 	add.w	r3, r3, r5, ror #2
 801823c:	4320      	orrs	r0, r4
 801823e:	4418      	add	r0, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8018240:	e9dd 430a 	ldrd	r4, r3, [sp, #40]	; 0x28
 8018244:	ea83 75f4 	eor.w	r5, r3, r4, ror #31
 8018248:	9b06      	ldr	r3, [sp, #24]
 801824a:	ea85 75f3 	eor.w	r5, r5, r3, ror #31
 801824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018250:	ea85 73f3 	eor.w	r3, r5, r3, ror #31
 8018254:	930a      	str	r3, [sp, #40]	; 0x28
 8018256:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018258:	4bd8      	ldr	r3, [pc, #864]	; (80185bc <mbedtls_sha1_process+0xdf4>)
    P( E, A, B, C, D, R(61) );
 801825a:	9d02      	ldr	r5, [sp, #8]
 801825c:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8018260:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 8018264:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018266:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 801826a:	9d07      	ldr	r5, [sp, #28]
 801826c:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8018270:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
 8018274:	9402      	str	r4, [sp, #8]
 8018276:	9d02      	ldr	r5, [sp, #8]
    P( D, E, A, B, C, R(62) );
 8018278:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(59) );
 801827a:	ea4f 02b2 	mov.w	r2, r2, ror #2
 801827e:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( A, B, C, D, E, R(60) );
 8018282:	ea82 0bb7 	eor.w	fp, r2, r7, ror #2
 8018286:	eb05 07b7 	add.w	r7, r5, r7, ror #2
    P( D, E, A, B, C, R(62) );
 801828a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801828c:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
    P( A, B, C, D, E, R(60) );
 8018290:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(62) );
 8018294:	ea85 7efe 	eor.w	lr, r5, lr, ror #31
 8018298:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
    P( B, C, D, E, A, R(59) );
 801829c:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( E, A, B, C, D, R(61) );
 80182a0:	ea82 04b8 	eor.w	r4, r2, r8, ror #2
 80182a4:	44e3      	add	fp, ip
    P( A, B, C, D, E, R(60) );
 80182a6:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, R(62) );
 80182aa:	ea4f 75fe 	mov.w	r5, lr, ror #31
    P( E, A, B, C, D, R(61) );
 80182ae:	4044      	eors	r4, r0
 80182b0:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 80182b4:	950b      	str	r5, [sp, #44]	; 0x2c
 80182b6:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 80182ba:	eb03 75fe 	add.w	r5, r3, lr, ror #31
 80182be:	442a      	add	r2, r5
 80182c0:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(63) );
 80182c4:	9d04      	ldr	r5, [sp, #16]
 80182c6:	4494      	add	ip, r2
 80182c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80182ca:	443c      	add	r4, r7
 80182cc:	ea82 77f5 	eor.w	r7, r2, r5, ror #31
 80182d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
 80182d2:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(63) );
 80182d4:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 80182d8:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 80182dc:	ea4f 72f7 	mov.w	r2, r7, ror #31
 80182e0:	920d      	str	r2, [sp, #52]	; 0x34
 80182e2:	eb03 72f7 	add.w	r2, r3, r7, ror #31
 80182e6:	eb02 08b8 	add.w	r8, r2, r8, ror #2
    P( B, C, D, E, A, R(64) );
 80182ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80182ec:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 80182f0:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 80182f4:	9d02      	ldr	r5, [sp, #8]
    P( E, A, B, C, D, R(61) );
 80182f6:	eb04 64fb 	add.w	r4, r4, fp, ror #27
    P( C, D, E, A, B, R(63) );
 80182fa:	ea80 01bb 	eor.w	r1, r0, fp, ror #2
    P( D, E, A, B, C, R(62) );
 80182fe:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(64) );
 8018302:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
    P( C, D, E, A, B, R(63) );
 8018306:	4061      	eors	r1, r4
 8018308:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(64) );
 801830c:	9203      	str	r2, [sp, #12]
 801830e:	4441      	add	r1, r8
 8018310:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8018314:	ea84 08bb 	eor.w	r8, r4, fp, ror #2
 8018318:	4410      	add	r0, r2
 801831a:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(65) );
 801831e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018320:	4480      	add	r8, r0
 8018322:	9804      	ldr	r0, [sp, #16]
 8018324:	ea82 76f0 	eor.w	r6, r2, r0, ror #31
 8018328:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(66) );
 801832a:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, R(65) );
 801832c:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8018330:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
 8018334:	9204      	str	r2, [sp, #16]
 8018336:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 801833a:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
    P( E, A, B, C, D, R(66) );
 801833e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018340:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8018344:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 8018348:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 801834c:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( D, E, A, B, C, R(67) );
 8018350:	9807      	ldr	r0, [sp, #28]
    P( A, B, C, D, E, R(65) );
 8018352:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 8018356:	4414      	add	r4, r2
    P( D, E, A, B, C, R(67) );
 8018358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801835a:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
    P( C, D, E, A, B, R(63) );
 801835e:	eb01 61fc 	add.w	r1, r1, ip, ror #27
    P( D, E, A, B, C, R(67) );
 8018362:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 8018366:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(64) );
 8018368:	eb08 68f1 	add.w	r8, r8, r1, ror #27
    P( A, B, C, D, E, R(65) );
 801836c:	404e      	eors	r6, r1
 801836e:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
 8018372:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 8018376:	445e      	add	r6, fp
    P( E, A, B, C, D, R(66) );
 8018378:	ea81 0bbc 	eor.w	fp, r1, ip, ror #2
 801837c:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 8018380:	ea8b 0b08 	eor.w	fp, fp, r8
 8018384:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
 8018388:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(68) );
 801838a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801838c:	9c06      	ldr	r4, [sp, #24]
 801838e:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 8018392:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018394:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 8018398:	9804      	ldr	r0, [sp, #16]
    P( A, B, C, D, E, R(65) );
 801839a:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( D, E, A, B, C, R(67) );
 801839e:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
    P( E, A, B, C, D, R(66) );
 80183a2:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( C, D, E, A, B, R(68) );
 80183a6:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( D, E, A, B, C, R(67) );
 80183aa:	4072      	eors	r2, r6
 80183ac:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80183b0:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 80183b4:	4462      	add	r2, ip
    P( C, D, E, A, B, R(68) );
 80183b6:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 80183ba:	4401      	add	r1, r0
 80183bc:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( B, C, D, E, A, R(69) );
 80183c0:	9807      	ldr	r0, [sp, #28]
 80183c2:	448c      	add	ip, r1
 80183c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80183c6:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 80183ca:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 80183ce:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 80183d2:	eb03 70f1 	add.w	r0, r3, r1, ror #31
    P( D, E, A, B, C, R(67) );
 80183d6:	eb02 62fb 	add.w	r2, r2, fp, ror #27
    P( B, C, D, E, A, R(69) );
 80183da:	ea86 05bb 	eor.w	r5, r6, fp, ror #2
 80183de:	eb00 08b8 	add.w	r8, r0, r8, ror #2
    P( A, B, C, D, E, R(70) );
 80183e2:	9810      	ldr	r0, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(69) );
 80183e4:	4055      	eors	r5, r2
 80183e6:	4445      	add	r5, r8
    P( A, B, C, D, E, R(70) );
 80183e8:	4680      	mov	r8, r0
 80183ea:	9808      	ldr	r0, [sp, #32]
 80183ec:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
 80183f0:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
    P( C, D, E, A, B, R(68) );
 80183f4:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( A, B, C, D, E, R(70) );
 80183f8:	ea8e 70f9 	eor.w	r0, lr, r9, ror #31
    P( B, C, D, E, A, R(69) );
 80183fc:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
 8018400:	9006      	str	r0, [sp, #24]
 8018402:	ea82 08bb 	eor.w	r8, r2, fp, ror #2
 8018406:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 801840a:	4406      	add	r6, r0
 801840c:	ea88 080c 	eor.w	r8, r8, ip
    P( E, A, B, C, D, R(71) );
 8018410:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018412:	44b0      	add	r8, r6
 8018414:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018416:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 801841a:	ea80 77f7 	eor.w	r7, r0, r7, ror #31
 801841e:	ea87 70f4 	eor.w	r0, r7, r4, ror #31
 8018422:	9007      	str	r0, [sp, #28]
 8018424:	9e07      	ldr	r6, [sp, #28]
    P( D, E, A, B, C, R(72) );
 8018426:	9f08      	ldr	r7, [sp, #32]
 8018428:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 801842c:	eb06 0bbb 	add.w	fp, r6, fp, ror #2
 8018430:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018432:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 8018436:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(69) );
 8018438:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( E, A, B, C, D, R(71) );
 801843c:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
    P( D, E, A, B, C, R(72) );
 8018440:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
    P( A, B, C, D, E, R(70) );
 8018444:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( D, E, A, B, C, R(72) );
 8018448:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
    P( E, A, B, C, D, R(71) );
 801844c:	4068      	eors	r0, r5
 801844e:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8018452:	eb03 76f7 	add.w	r6, r3, r7, ror #31
    P( D, E, A, B, C, R(72) );
 8018456:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 801845a:	4432      	add	r2, r6
 801845c:	ea8e 0e08 	eor.w	lr, lr, r8
    P( C, D, E, A, B, R(73) );
 8018460:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018462:	4496      	add	lr, r2
 8018464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018466:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
 801846a:	9a04      	ldr	r2, [sp, #16]
 801846c:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8018470:	9a06      	ldr	r2, [sp, #24]
 8018472:	ea86 72f2 	eor.w	r2, r6, r2, ror #31
 8018476:	9208      	str	r2, [sp, #32]
 8018478:	9e08      	ldr	r6, [sp, #32]
 801847a:	4458      	add	r0, fp
    P( E, A, B, C, D, R(71) );
 801847c:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( D, E, A, B, C, R(72) );
 8018480:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
    P( C, D, E, A, B, R(73) );
 8018484:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
    P( B, C, D, E, A, R(74) );
 8018488:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801848a:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
    P( C, D, E, A, B, R(73) );
 801848e:	4042      	eors	r2, r0
 8018490:	4462      	add	r2, ip
    P( B, C, D, E, A, R(74) );
 8018492:	46b4      	mov	ip, r6
 8018494:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018496:	ea8c 7cf6 	eor.w	ip, ip, r6, ror #31
 801849a:	9e07      	ldr	r6, [sp, #28]
 801849c:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
    P( D, E, A, B, C, R(72) );
 80184a0:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( B, C, D, E, A, R(74) );
 80184a4:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
    P( C, D, E, A, B, R(73) );
 80184a8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80184ac:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
    P( B, C, D, E, A, R(74) );
 80184b0:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 80184b4:	445d      	add	r5, fp
 80184b6:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( A, B, C, D, E, R(75) );
 80184ba:	9e02      	ldr	r6, [sp, #8]
 80184bc:	44ac      	add	ip, r5
 80184be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80184c0:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
 80184c4:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 80184c8:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 80184cc:	eb03 75f7 	add.w	r5, r3, r7, ror #31
 80184d0:	eb05 08b8 	add.w	r8, r5, r8, ror #2
    P( E, A, B, C, D, R(76) );
 80184d4:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 80184d8:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
 80184dc:	ea85 74f4 	eor.w	r4, r5, r4, ror #31
 80184e0:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(73) );
 80184e2:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( A, B, C, D, E, R(75) );
 80184e6:	ea80 0bbe 	eor.w	fp, r0, lr, ror #2
    P( B, C, D, E, A, R(74) );
 80184ea:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( E, A, B, C, D, R(76) );
 80184ee:	ea84 76f5 	eor.w	r6, r4, r5, ror #31
    P( A, B, C, D, E, R(75) );
 80184f2:	ea8b 0b02 	eor.w	fp, fp, r2
 80184f6:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80184fa:	eb03 75f6 	add.w	r5, r3, r6, ror #31
    P( E, A, B, C, D, R(76) );
 80184fe:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 8018502:	ea84 040c 	eor.w	r4, r4, ip
 8018506:	4428      	add	r0, r5
 8018508:	4420      	add	r0, r4
    P( D, E, A, B, C, R(77) );
 801850a:	9d02      	ldr	r5, [sp, #8]
 801850c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801850e:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8018512:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 8018516:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 801851a:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801851e:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(75) );
 8018520:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( E, A, B, C, D, R(76) );
 8018524:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
    P( D, E, A, B, C, R(77) );
 8018528:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 801852c:	ea81 010b 	eor.w	r1, r1, fp
    P( C, D, E, A, B, R(78) );
 8018530:	9c03      	ldr	r4, [sp, #12]
 8018532:	448e      	add	lr, r1
 8018534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018536:	ea81 79f4 	eor.w	r9, r1, r4, ror #31
 801853a:	9906      	ldr	r1, [sp, #24]
    P( B, C, D, E, A, R(79) );
 801853c:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(78) );
 801853e:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
    P( B, C, D, E, A, R(79) );
 8018542:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018544:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018548:	9c07      	ldr	r4, [sp, #28]
 801854a:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801854e:	ea81 76f6 	eor.w	r6, r1, r6, ror #31

#undef K
#undef F

    ctx->state[0] += A;
 8018552:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(78) );
 8018554:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
    P( E, A, B, C, D, R(76) );
 8018558:	eb00 60fb 	add.w	r0, r0, fp, ror #27
    P( D, E, A, B, C, R(77) );
 801855c:	eb03 79f9 	add.w	r9, r3, r9, ror #31
 8018560:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    ctx->state[0] += A;
 8018564:	440b      	add	r3, r1
 8018566:	eb03 73f6 	add.w	r3, r3, r6, ror #31
 801856a:	444a      	add	r2, r9
    P( C, D, E, A, B, R(78) );
 801856c:	ea8b 09bc 	eor.w	r9, fp, ip, ror #2
    P( D, E, A, B, C, R(77) );
 8018570:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( C, D, E, A, B, R(78) );
 8018574:	ea89 0900 	eor.w	r9, r9, r0
    ctx->state[0] += A;
 8018578:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
    P( B, C, D, E, A, R(79) );
 801857c:	ea8b 03b0 	eor.w	r3, fp, r0, ror #2
 8018580:	444a      	add	r2, r9
 8018582:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
 8018586:	9900      	ldr	r1, [sp, #0]
    P( C, D, E, A, B, R(78) );
 8018588:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    ctx->state[0] += A;
 801858c:	4463      	add	r3, ip
 801858e:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 8018592:	608b      	str	r3, [r1, #8]
    ctx->state[1] += B;
 8018594:	9b01      	ldr	r3, [sp, #4]
 8018596:	441a      	add	r2, r3
    ctx->state[2] += C;
 8018598:	9b05      	ldr	r3, [sp, #20]
    ctx->state[1] += B;
 801859a:	60ca      	str	r2, [r1, #12]
    ctx->state[2] += C;
 801859c:	eb03 01be 	add.w	r1, r3, lr, ror #2
 80185a0:	9b00      	ldr	r3, [sp, #0]
 80185a2:	6119      	str	r1, [r3, #16]
    ctx->state[3] += D;
 80185a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185a6:	eb03 00b0 	add.w	r0, r3, r0, ror #2
 80185aa:	9b00      	ldr	r3, [sp, #0]
 80185ac:	6158      	str	r0, [r3, #20]
    ctx->state[4] += E;
 80185ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80185b0:	eb03 050b 	add.w	r5, r3, fp
 80185b4:	9b00      	ldr	r3, [sp, #0]
 80185b6:	619d      	str	r5, [r3, #24]
}
 80185b8:	e002      	b.n	80185c0 <mbedtls_sha1_process+0xdf8>
 80185ba:	bf00      	nop
 80185bc:	ca62c1d6 	.word	0xca62c1d6
 80185c0:	b019      	add	sp, #100	; 0x64
 80185c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c6:	bf00      	nop

080185c8 <mbedtls_sha1_update.part.0>:
#endif /* !MBEDTLS_SHA1_PROCESS_ALT */

/*
 * SHA-1 process buffer
 */
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 80185c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 80185cc:	6803      	ldr	r3, [r0, #0]
 80185ce:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80185d2:	189b      	adds	r3, r3, r2
 80185d4:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80185d6:	bf24      	itt	cs
 80185d8:	6843      	ldrcs	r3, [r0, #4]
 80185da:	3301      	addcs	r3, #1
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 80185dc:	4605      	mov	r5, r0
 80185de:	460e      	mov	r6, r1
 80185e0:	4614      	mov	r4, r2
        ctx->total[1]++;
 80185e2:	bf28      	it	cs
 80185e4:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 80185e6:	b197      	cbz	r7, 801860e <mbedtls_sha1_update.part.0+0x46>
    fill = 64 - left;
 80185e8:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 80185ec:	4591      	cmp	r9, r2
 80185ee:	d80e      	bhi.n	801860e <mbedtls_sha1_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80185f0:	f100 081c 	add.w	r8, r0, #28
 80185f4:	464a      	mov	r2, r9
 80185f6:	eb08 0007 	add.w	r0, r8, r7
 80185fa:	f009 fdd5 	bl	80221a8 <memcpy>
        mbedtls_sha1_process( ctx, ctx->buffer );
 80185fe:	4641      	mov	r1, r8
 8018600:	4628      	mov	r0, r5
 8018602:	f7ff f8e1 	bl	80177c8 <mbedtls_sha1_process>
        input += fill;
 8018606:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 8018608:	443c      	add	r4, r7
        input += fill;
 801860a:	444e      	add	r6, r9
        left = 0;
 801860c:	2700      	movs	r7, #0
 801860e:	46a0      	mov	r8, r4
 8018610:	eb06 0904 	add.w	r9, r6, r4
 8018614:	e004      	b.n	8018620 <mbedtls_sha1_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha1_process( ctx, input );
 8018616:	4628      	mov	r0, r5
 8018618:	f7ff f8d6 	bl	80177c8 <mbedtls_sha1_process>
        input += 64;
        ilen  -= 64;
 801861c:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8018620:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8018624:	eba9 0108 	sub.w	r1, r9, r8
 8018628:	d8f5      	bhi.n	8018616 <mbedtls_sha1_update.part.0+0x4e>
 801862a:	09a2      	lsrs	r2, r4, #6
 801862c:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8018630:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8018634:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 8018638:	4431      	add	r1, r6
 801863a:	b132      	cbz	r2, 801864a <mbedtls_sha1_update.part.0+0x82>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801863c:	f105 001c 	add.w	r0, r5, #28
 8018640:	4438      	add	r0, r7
}
 8018642:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018646:	f009 bdaf 	b.w	80221a8 <memcpy>
}
 801864a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801864e <mbedtls_sha1_update>:
    if( ilen == 0 )
 801864e:	b10a      	cbz	r2, 8018654 <mbedtls_sha1_update+0x6>
 8018650:	f7ff bfba 	b.w	80185c8 <mbedtls_sha1_update.part.0>
}
 8018654:	4770      	bx	lr
	...

08018658 <mbedtls_sha1_finish>:

/*
 * SHA-1 final digest
 */
void mbedtls_sha1_finish( mbedtls_sha1_context *ctx, unsigned char output[20] )
{
 8018658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801865a:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 801865c:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8018660:	0f53      	lsrs	r3, r2, #29
 8018662:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8018666:	ba1b      	rev	r3, r3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8018668:	9300      	str	r3, [sp, #0]
    low  = ( ctx->total[0] <<  3 );
 801866a:	00d3      	lsls	r3, r2, #3
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 801866c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018670:	2a37      	cmp	r2, #55	; 0x37
{
 8018672:	4604      	mov	r4, r0
 8018674:	ba1b      	rev	r3, r3
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018676:	bf94      	ite	ls
 8018678:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 801867c:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_sha1_update( ctx, sha1_padding, padn );
 8018680:	491b      	ldr	r1, [pc, #108]	; (80186f0 <mbedtls_sha1_finish+0x98>)
    PUT_UINT32_BE( low,  msglen, 4 );
 8018682:	9301      	str	r3, [sp, #4]
    mbedtls_sha1_update( ctx, sha1_padding, padn );
 8018684:	f7ff ffe3 	bl	801864e <mbedtls_sha1_update>
    if( ilen == 0 )
 8018688:	2208      	movs	r2, #8
 801868a:	4669      	mov	r1, sp
 801868c:	4620      	mov	r0, r4
 801868e:	f7ff ff9b 	bl	80185c8 <mbedtls_sha1_update.part.0>
    mbedtls_sha1_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8018692:	7ae3      	ldrb	r3, [r4, #11]
 8018694:	702b      	strb	r3, [r5, #0]
 8018696:	8963      	ldrh	r3, [r4, #10]
 8018698:	706b      	strb	r3, [r5, #1]
 801869a:	68a3      	ldr	r3, [r4, #8]
 801869c:	0a1b      	lsrs	r3, r3, #8
 801869e:	70ab      	strb	r3, [r5, #2]
 80186a0:	68a3      	ldr	r3, [r4, #8]
 80186a2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80186a4:	7be3      	ldrb	r3, [r4, #15]
 80186a6:	712b      	strb	r3, [r5, #4]
 80186a8:	89e3      	ldrh	r3, [r4, #14]
 80186aa:	716b      	strb	r3, [r5, #5]
 80186ac:	68e3      	ldr	r3, [r4, #12]
 80186ae:	0a1b      	lsrs	r3, r3, #8
 80186b0:	71ab      	strb	r3, [r5, #6]
 80186b2:	68e3      	ldr	r3, [r4, #12]
 80186b4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80186b6:	7ce3      	ldrb	r3, [r4, #19]
 80186b8:	722b      	strb	r3, [r5, #8]
 80186ba:	8a63      	ldrh	r3, [r4, #18]
 80186bc:	726b      	strb	r3, [r5, #9]
 80186be:	6923      	ldr	r3, [r4, #16]
 80186c0:	0a1b      	lsrs	r3, r3, #8
 80186c2:	72ab      	strb	r3, [r5, #10]
 80186c4:	6923      	ldr	r3, [r4, #16]
 80186c6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80186c8:	7de3      	ldrb	r3, [r4, #23]
 80186ca:	732b      	strb	r3, [r5, #12]
 80186cc:	8ae3      	ldrh	r3, [r4, #22]
 80186ce:	736b      	strb	r3, [r5, #13]
 80186d0:	6963      	ldr	r3, [r4, #20]
 80186d2:	0a1b      	lsrs	r3, r3, #8
 80186d4:	73ab      	strb	r3, [r5, #14]
 80186d6:	6963      	ldr	r3, [r4, #20]
 80186d8:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80186da:	7ee3      	ldrb	r3, [r4, #27]
 80186dc:	742b      	strb	r3, [r5, #16]
 80186de:	8b63      	ldrh	r3, [r4, #26]
 80186e0:	746b      	strb	r3, [r5, #17]
 80186e2:	69a3      	ldr	r3, [r4, #24]
 80186e4:	0a1b      	lsrs	r3, r3, #8
 80186e6:	74ab      	strb	r3, [r5, #18]
 80186e8:	69a3      	ldr	r3, [r4, #24]
 80186ea:	74eb      	strb	r3, [r5, #19]
}
 80186ec:	b003      	add	sp, #12
 80186ee:	bd30      	pop	{r4, r5, pc}
 80186f0:	0802c42c 	.word	0x0802c42c

080186f4 <mbedtls_sha1>:

/*
 * output = SHA-1( input buffer )
 */
void mbedtls_sha1( const unsigned char *input, size_t ilen, unsigned char output[20] )
{
 80186f4:	b570      	push	{r4, r5, r6, lr}
 80186f6:	b098      	sub	sp, #96	; 0x60
 80186f8:	4605      	mov	r5, r0
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 80186fa:	a801      	add	r0, sp, #4
{
 80186fc:	460e      	mov	r6, r1
 80186fe:	4614      	mov	r4, r2
    mbedtls_sha1_init( &ctx );
 8018700:	f7ff f835 	bl	801776e <mbedtls_sha1_init>
    mbedtls_sha1_starts( &ctx );
 8018704:	a801      	add	r0, sp, #4
 8018706:	f7ff f845 	bl	8017794 <mbedtls_sha1_starts>
    mbedtls_sha1_update( &ctx, input, ilen );
 801870a:	4632      	mov	r2, r6
 801870c:	4629      	mov	r1, r5
 801870e:	a801      	add	r0, sp, #4
 8018710:	f7ff ff9d 	bl	801864e <mbedtls_sha1_update>
    mbedtls_sha1_finish( &ctx, output );
 8018714:	4621      	mov	r1, r4
 8018716:	a801      	add	r0, sp, #4
 8018718:	f7ff ff9e 	bl	8018658 <mbedtls_sha1_finish>
    mbedtls_sha1_free( &ctx );
 801871c:	a801      	add	r0, sp, #4
 801871e:	f7ff f82a 	bl	8017776 <mbedtls_sha1_free>
}
 8018722:	b018      	add	sp, #96	; 0x60
 8018724:	bd70      	pop	{r4, r5, r6, pc}

08018726 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8018726:	226c      	movs	r2, #108	; 0x6c
 8018728:	2100      	movs	r1, #0
 801872a:	f009 bd65 	b.w	80221f8 <memset>

0801872e <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 801872e:	b120      	cbz	r0, 801873a <mbedtls_sha256_free+0xc>
 8018730:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018734:	2200      	movs	r2, #0
 8018736:	4298      	cmp	r0, r3
 8018738:	d100      	bne.n	801873c <mbedtls_sha256_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}
 801873a:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801873c:	f800 2b01 	strb.w	r2, [r0], #1
 8018740:	e7f9      	b.n	8018736 <mbedtls_sha256_free+0x8>

08018742 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8018742:	b508      	push	{r3, lr}
    *dst = *src;
 8018744:	226c      	movs	r2, #108	; 0x6c
 8018746:	f009 fd2f 	bl	80221a8 <memcpy>
}
 801874a:	bd08      	pop	{r3, pc}

0801874c <mbedtls_sha256_starts>:
/*
 * SHA-256 context setup
 */
void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 801874c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 801874e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8018752:	b9b9      	cbnz	r1, 8018784 <mbedtls_sha256_starts+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8018754:	4a19      	ldr	r2, [pc, #100]	; (80187bc <mbedtls_sha256_starts+0x70>)
 8018756:	4b1a      	ldr	r3, [pc, #104]	; (80187c0 <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8018758:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80187e8 <mbedtls_sha256_starts+0x9c>
        ctx->state[1] = 0xBB67AE85;
 801875c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 8018760:	4b18      	ldr	r3, [pc, #96]	; (80187c4 <mbedtls_sha256_starts+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 8018762:	4a19      	ldr	r2, [pc, #100]	; (80187c8 <mbedtls_sha256_starts+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 8018764:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 8018768:	4b18      	ldr	r3, [pc, #96]	; (80187cc <mbedtls_sha256_starts+0x80>)
 801876a:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 801876e:	4b18      	ldr	r3, [pc, #96]	; (80187d0 <mbedtls_sha256_starts+0x84>)
 8018770:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 8018772:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8018776:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 801877a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 801877e:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 8018780:	6681      	str	r1, [r0, #104]	; 0x68
}
 8018782:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 8018784:	4b13      	ldr	r3, [pc, #76]	; (80187d4 <mbedtls_sha256_starts+0x88>)
 8018786:	4a14      	ldr	r2, [pc, #80]	; (80187d8 <mbedtls_sha256_starts+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 8018788:	f8df c060 	ldr.w	ip, [pc, #96]	; 80187ec <mbedtls_sha256_starts+0xa0>
        ctx->state[1] = 0x367CD507;
 801878c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 8018790:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 8018794:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8018798:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 801879c:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 801879e:	4b0f      	ldr	r3, [pc, #60]	; (80187dc <mbedtls_sha256_starts+0x90>)
 80187a0:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 80187a4:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 80187a8:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 80187ac:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80187b0:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 80187b2:	4b0b      	ldr	r3, [pc, #44]	; (80187e0 <mbedtls_sha256_starts+0x94>)
 80187b4:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80187b6:	4b0b      	ldr	r3, [pc, #44]	; (80187e4 <mbedtls_sha256_starts+0x98>)
 80187b8:	e7e1      	b.n	801877e <mbedtls_sha256_starts+0x32>
 80187ba:	bf00      	nop
 80187bc:	6a09e667 	.word	0x6a09e667
 80187c0:	bb67ae85 	.word	0xbb67ae85
 80187c4:	a54ff53a 	.word	0xa54ff53a
 80187c8:	510e527f 	.word	0x510e527f
 80187cc:	9b05688c 	.word	0x9b05688c
 80187d0:	1f83d9ab 	.word	0x1f83d9ab
 80187d4:	367cd507 	.word	0x367cd507
 80187d8:	c1059ed8 	.word	0xc1059ed8
 80187dc:	ffc00b31 	.word	0xffc00b31
 80187e0:	64f98fa7 	.word	0x64f98fa7
 80187e4:	befa4fa4 	.word	0xbefa4fa4
 80187e8:	3c6ef372 	.word	0x3c6ef372
 80187ec:	f70e5939 	.word	0xf70e5939

080187f0 <mbedtls_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
{
 80187f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187f4:	b0d1      	sub	sp, #324	; 0x144
 80187f6:	f100 0308 	add.w	r3, r0, #8
 80187fa:	9305      	str	r3, [sp, #20]
 80187fc:	ab08      	add	r3, sp, #32
 80187fe:	9300      	str	r3, [sp, #0]
 8018800:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8018804:	9306      	str	r3, [sp, #24]
 8018806:	9a00      	ldr	r2, [sp, #0]
 8018808:	9b05      	ldr	r3, [sp, #20]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 801880a:	f853 0b04 	ldr.w	r0, [r3], #4
 801880e:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
 8018812:	9806      	ldr	r0, [sp, #24]
 8018814:	4298      	cmp	r0, r3
 8018816:	d1f8      	bne.n	801880a <mbedtls_sha256_process+0x1a>
 8018818:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 801881c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8018820:	464a      	mov	r2, r9
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8018822:	784b      	ldrb	r3, [r1, #1]
 8018824:	780c      	ldrb	r4, [r1, #0]
 8018826:	041b      	lsls	r3, r3, #16
 8018828:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 801882c:	78cc      	ldrb	r4, [r1, #3]
 801882e:	4323      	orrs	r3, r4
 8018830:	788c      	ldrb	r4, [r1, #2]
 8018832:	3104      	adds	r1, #4
 8018834:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
 8018838:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
 801883a:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
 801883e:	d1f0      	bne.n	8018822 <mbedtls_sha256_process+0x32>
 8018840:	9b00      	ldr	r3, [sp, #0]
 8018842:	9900      	ldr	r1, [sp, #0]
 8018844:	489b      	ldr	r0, [pc, #620]	; (8018ab4 <mbedtls_sha256_process+0x2c4>)
 8018846:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 801884a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801884e:	68c9      	ldr	r1, [r1, #12]
 8018850:	9001      	str	r0, [sp, #4]
 8018852:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
 8018856:	e9d3 7200 	ldrd	r7, r2, [r3]
 801885a:	689b      	ldr	r3, [r3, #8]
 801885c:	46ca      	mov	sl, r9
 801885e:	4686      	mov	lr, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018860:	f8de 0000 	ldr.w	r0, [lr]
 8018864:	f8da 4000 	ldr.w	r4, [sl]
 8018868:	ea4f 25f8 	mov.w	r5, r8, ror #11
 801886c:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
 8018870:	4420      	add	r0, r4
 8018872:	ea85 6578 	eor.w	r5, r5, r8, ror #25
 8018876:	4405      	add	r5, r0
 8018878:	ea8b 0006 	eor.w	r0, fp, r6
 801887c:	ea00 0008 	and.w	r0, r0, r8
 8018880:	ea80 000b 	eor.w	r0, r0, fp
 8018884:	4405      	add	r5, r0
 8018886:	ea47 0402 	orr.w	r4, r7, r2
 801888a:	ea4f 3077 	mov.w	r0, r7, ror #13
 801888e:	44ac      	add	ip, r5
 8018890:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8018894:	ea07 0502 	and.w	r5, r7, r2
 8018898:	401c      	ands	r4, r3
 801889a:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 801889e:	432c      	orrs	r4, r5
 80188a0:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80188a2:	f8de 5004 	ldr.w	r5, [lr, #4]
 80188a6:	f8da 0004 	ldr.w	r0, [sl, #4]
 80188aa:	4405      	add	r5, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80188ac:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80188ae:	44ab      	add	fp, r5
 80188b0:	ea88 0506 	eor.w	r5, r8, r6
 80188b4:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80188b6:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80188b8:	ea85 0406 	eor.w	r4, r5, r6
 80188bc:	eb0b 0504 	add.w	r5, fp, r4
 80188c0:	ea4f 2bf1 	mov.w	fp, r1, ror #11
 80188c4:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
 80188c8:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
 80188cc:	44ab      	add	fp, r5
 80188ce:	ea4c 0007 	orr.w	r0, ip, r7
 80188d2:	ea4f 357c 	mov.w	r5, ip, ror #13
 80188d6:	ea0c 0407 	and.w	r4, ip, r7
 80188da:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 80188de:	4010      	ands	r0, r2
 80188e0:	4320      	orrs	r0, r4
 80188e2:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80188e6:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80188ea:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80188ec:	f8da 0008 	ldr.w	r0, [sl, #8]
 80188f0:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80188f2:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80188f4:	4426      	add	r6, r4
 80188f6:	ea81 0408 	eor.w	r4, r1, r8
 80188fa:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 80188fc:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 80188fe:	ea84 0b08 	eor.w	fp, r4, r8
 8018902:	eb06 040b 	add.w	r4, r6, fp
 8018906:	ea4f 26f3 	mov.w	r6, r3, ror #11
 801890a:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
 801890e:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8018912:	4426      	add	r6, r4
 8018914:	ea4c 0005 	orr.w	r0, ip, r5
 8018918:	ea4f 3475 	mov.w	r4, r5, ror #13
 801891c:	ea0c 0b05 	and.w	fp, ip, r5
 8018920:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 8018924:	4038      	ands	r0, r7
 8018926:	ea40 000b 	orr.w	r0, r0, fp
 801892a:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 801892e:	4404      	add	r4, r0
 8018930:	4434      	add	r4, r6
 8018932:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8018934:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018938:	f8da 600c 	ldr.w	r6, [sl, #12]
 801893c:	ea81 0b03 	eor.w	fp, r1, r3
 8018940:	4430      	add	r0, r6
 8018942:	ea0b 0b02 	and.w	fp, fp, r2
 8018946:	ea4f 26f2 	mov.w	r6, r2, ror #11
 801894a:	ea8b 0b01 	eor.w	fp, fp, r1
 801894e:	4440      	add	r0, r8
 8018950:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
 8018954:	4458      	add	r0, fp
 8018956:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 801895a:	4406      	add	r6, r0
 801895c:	eb07 0806 	add.w	r8, r7, r6
 8018960:	ea4f 3074 	mov.w	r0, r4, ror #13
 8018964:	ea45 0704 	orr.w	r7, r5, r4
 8018968:	ea05 0b04 	and.w	fp, r5, r4
 801896c:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8018970:	ea07 070c 	and.w	r7, r7, ip
 8018974:	ea47 070b 	orr.w	r7, r7, fp
 8018978:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
 801897c:	4438      	add	r0, r7
 801897e:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8018980:	f8da 7010 	ldr.w	r7, [sl, #16]
 8018984:	f8de 6010 	ldr.w	r6, [lr, #16]
 8018988:	ea83 0b02 	eor.w	fp, r3, r2
 801898c:	443e      	add	r6, r7
 801898e:	4431      	add	r1, r6
 8018990:	ea0b 0b08 	and.w	fp, fp, r8
 8018994:	ea4f 26f8 	mov.w	r6, r8, ror #11
 8018998:	ea8b 0b03 	eor.w	fp, fp, r3
 801899c:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 80189a0:	4459      	add	r1, fp
 80189a2:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 80189a6:	440e      	add	r6, r1
 80189a8:	ea44 0700 	orr.w	r7, r4, r0
 80189ac:	ea4f 3170 	mov.w	r1, r0, ror #13
 80189b0:	ea04 0b00 	and.w	fp, r4, r0
 80189b4:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 80189b8:	402f      	ands	r7, r5
 80189ba:	ea47 070b 	orr.w	r7, r7, fp
 80189be:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 80189c2:	4439      	add	r1, r7
 80189c4:	4431      	add	r1, r6
 80189c6:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 80189c8:	f8da 7014 	ldr.w	r7, [sl, #20]
 80189cc:	f8de 6014 	ldr.w	r6, [lr, #20]
 80189d0:	ea82 0b08 	eor.w	fp, r2, r8
 80189d4:	443e      	add	r6, r7
 80189d6:	4433      	add	r3, r6
 80189d8:	ea0b 0b0c 	and.w	fp, fp, ip
 80189dc:	ea4f 26fc 	mov.w	r6, ip, ror #11
 80189e0:	ea8b 0b02 	eor.w	fp, fp, r2
 80189e4:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 80189e8:	445b      	add	r3, fp
 80189ea:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 80189ee:	441e      	add	r6, r3
 80189f0:	eb05 0b06 	add.w	fp, r5, r6
 80189f4:	ea4f 3371 	mov.w	r3, r1, ror #13
 80189f8:	ea40 0501 	orr.w	r5, r0, r1
 80189fc:	ea00 0701 	and.w	r7, r0, r1
 8018a00:	4025      	ands	r5, r4
 8018a02:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 8018a06:	433d      	orrs	r5, r7
 8018a08:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8018a0c:	442b      	add	r3, r5
 8018a0e:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8018a10:	f8de 5018 	ldr.w	r5, [lr, #24]
 8018a14:	f8da 6018 	ldr.w	r6, [sl, #24]
 8018a18:	4435      	add	r5, r6
 8018a1a:	4415      	add	r5, r2
 8018a1c:	ea88 020c 	eor.w	r2, r8, ip
 8018a20:	ea02 020b 	and.w	r2, r2, fp
 8018a24:	ea82 0708 	eor.w	r7, r2, r8
 8018a28:	19ea      	adds	r2, r5, r7
 8018a2a:	ea4f 25fb 	mov.w	r5, fp, ror #11
 8018a2e:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
 8018a32:	ea85 657b 	eor.w	r5, r5, fp, ror #25
 8018a36:	4415      	add	r5, r2
 8018a38:	1966      	adds	r6, r4, r5
 8018a3a:	ea4f 3273 	mov.w	r2, r3, ror #13
 8018a3e:	ea41 0403 	orr.w	r4, r1, r3
 8018a42:	4004      	ands	r4, r0
 8018a44:	ea01 0703 	and.w	r7, r1, r3
 8018a48:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8018a4c:	433c      	orrs	r4, r7
 8018a4e:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8018a52:	4422      	add	r2, r4
 8018a54:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8018a56:	f8de 401c 	ldr.w	r4, [lr, #28]
 8018a5a:	f8da 501c 	ldr.w	r5, [sl, #28]
 8018a5e:	1967      	adds	r7, r4, r5
 8018a60:	44b8      	add	r8, r7
 8018a62:	ea8c 070b 	eor.w	r7, ip, fp
 8018a66:	4037      	ands	r7, r6
 8018a68:	ea87 070c 	eor.w	r7, r7, ip
 8018a6c:	4447      	add	r7, r8
 8018a6e:	ea4f 28f6 	mov.w	r8, r6, ror #11
 8018a72:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
 8018a76:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 8018a7a:	4447      	add	r7, r8
 8018a7c:	eb00 0807 	add.w	r8, r0, r7
 8018a80:	ea43 0402 	orr.w	r4, r3, r2
 8018a84:	ea4f 3072 	mov.w	r0, r2, ror #13
 8018a88:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8018a8c:	400c      	ands	r4, r1
 8018a8e:	ea03 0502 	and.w	r5, r3, r2
 8018a92:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
 8018a96:	432c      	orrs	r4, r5
 8018a98:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
 8018a9a:	4807      	ldr	r0, [pc, #28]	; (8018ab8 <mbedtls_sha256_process+0x2c8>)
 8018a9c:	f10e 0e20 	add.w	lr, lr, #32
 8018aa0:	4570      	cmp	r0, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8018aa2:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
 8018aa4:	f10a 0a20 	add.w	sl, sl, #32
 8018aa8:	f47f aeda 	bne.w	8018860 <mbedtls_sha256_process+0x70>
 8018aac:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
 8018ab0:	9007      	str	r0, [sp, #28]
 8018ab2:	e003      	b.n	8018abc <mbedtls_sha256_process+0x2cc>
 8018ab4:	0802c560 	.word	0x0802c560
 8018ab8:	0802c5a0 	.word	0x0802c5a0
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8018abc:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8018ac0:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8018ac4:	f8d9 4000 	ldr.w	r4, [r9]
 8018ac8:	ea4f 4ef0 	mov.w	lr, r0, ror #19
 8018acc:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
 8018ad0:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
 8018ad4:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8018ad8:	ea4f 4ab5 	mov.w	sl, r5, ror #18
 8018adc:	4420      	add	r0, r4
 8018ade:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
 8018ae2:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
 8018ae6:	4486      	add	lr, r0
 8018ae8:	ea4f 24f8 	mov.w	r4, r8, ror #11
 8018aec:	eb0e 000a 	add.w	r0, lr, sl
 8018af0:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
 8018af4:	9004      	str	r0, [sp, #16]
 8018af6:	ea84 6078 	eor.w	r0, r4, r8, ror #25
 8018afa:	ea8b 0406 	eor.w	r4, fp, r6
 8018afe:	ea04 0408 	and.w	r4, r4, r8
 8018b02:	ea84 040b 	eor.w	r4, r4, fp
 8018b06:	4404      	add	r4, r0
 8018b08:	9801      	ldr	r0, [sp, #4]
 8018b0a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018b0c:	4420      	add	r0, r4
 8018b0e:	9c04      	ldr	r4, [sp, #16]
 8018b10:	f8c9 4040 	str.w	r4, [r9, #64]	; 0x40
 8018b14:	4420      	add	r0, r4
 8018b16:	4484      	add	ip, r0
 8018b18:	4461      	add	r1, ip
 8018b1a:	9102      	str	r1, [sp, #8]
 8018b1c:	ea47 0002 	orr.w	r0, r7, r2
 8018b20:	ea4f 3177 	mov.w	r1, r7, ror #13
 8018b24:	ea07 0402 	and.w	r4, r7, r2
 8018b28:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8018b2c:	4018      	ands	r0, r3
 8018b2e:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8018b32:	4320      	orrs	r0, r4
 8018b34:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018b36:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8018b3a:	f8d9 4008 	ldr.w	r4, [r9, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8018b3e:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018b40:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8018b44:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8018b48:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
 8018b4c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8018b50:	4429      	add	r1, r5
 8018b52:	4401      	add	r1, r0
 8018b54:	9802      	ldr	r0, [sp, #8]
 8018b56:	ea88 0e06 	eor.w	lr, r8, r6
 8018b5a:	ea0e 0e00 	and.w	lr, lr, r0
 8018b5e:	9801      	ldr	r0, [sp, #4]
 8018b60:	ea4f 45b4 	mov.w	r5, r4, ror #18
 8018b64:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018b66:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
 8018b6a:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
 8018b6e:	4429      	add	r1, r5
 8018b70:	4458      	add	r0, fp
 8018b72:	4408      	add	r0, r1
 8018b74:	ea8e 0e06 	eor.w	lr, lr, r6
 8018b78:	4486      	add	lr, r0
 8018b7a:	9802      	ldr	r0, [sp, #8]
 8018b7c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8018b80:	ea4f 25f0 	mov.w	r5, r0, ror #11
 8018b84:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
 8018b88:	ea85 6570 	eor.w	r5, r5, r0, ror #25
 8018b8c:	eb05 000e 	add.w	r0, r5, lr
 8018b90:	eb03 0b00 	add.w	fp, r3, r0
 8018b94:	ea4f 357c 	mov.w	r5, ip, ror #13
 8018b98:	ea47 030c 	orr.w	r3, r7, ip
 8018b9c:	ea07 0e0c 	and.w	lr, r7, ip
 8018ba0:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8018ba4:	4013      	ands	r3, r2
 8018ba6:	ea43 030e 	orr.w	r3, r3, lr
 8018baa:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 8018bae:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018bb0:	9b04      	ldr	r3, [sp, #16]
 8018bb2:	f8d9 e00c 	ldr.w	lr, [r9, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018bb6:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018bb8:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8018bbc:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8018bc0:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8018bc4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8018bc8:	4423      	add	r3, r4
 8018bca:	4403      	add	r3, r0
 8018bcc:	9802      	ldr	r0, [sp, #8]
 8018bce:	ea88 0a00 	eor.w	sl, r8, r0
 8018bd2:	9801      	ldr	r0, [sp, #4]
 8018bd4:	ea4f 44be 	mov.w	r4, lr, ror #18
 8018bd8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018bda:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
 8018bde:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
 8018be2:	4423      	add	r3, r4
 8018be4:	ea0a 0a0b 	and.w	sl, sl, fp
 8018be8:	4430      	add	r0, r6
 8018bea:	ea4f 24fb 	mov.w	r4, fp, ror #11
 8018bee:	4418      	add	r0, r3
 8018bf0:	ea8a 0a08 	eor.w	sl, sl, r8
 8018bf4:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
 8018bf8:	ea84 647b 	eor.w	r4, r4, fp, ror #25
 8018bfc:	4482      	add	sl, r0
 8018bfe:	eb04 000a 	add.w	r0, r4, sl
 8018c02:	4402      	add	r2, r0
 8018c04:	ea4c 0405 	orr.w	r4, ip, r5
 8018c08:	ea4f 3675 	mov.w	r6, r5, ror #13
 8018c0c:	9203      	str	r2, [sp, #12]
 8018c0e:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
 8018c12:	ea0c 0205 	and.w	r2, ip, r5
 8018c16:	403c      	ands	r4, r7
 8018c18:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
 8018c1c:	4314      	orrs	r4, r2
 8018c1e:	4434      	add	r4, r6
 8018c20:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018c22:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8018c26:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8018c2a:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
 8018c2e:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8018c32:	f8d9 2010 	ldr.w	r2, [r9, #16]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018c36:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018c3a:	4486      	add	lr, r0
 8018c3c:	4471      	add	r1, lr
 8018c3e:	ea4f 4eb2 	mov.w	lr, r2, ror #18
 8018c42:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
 8018c46:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
 8018c4a:	448e      	add	lr, r1
 8018c4c:	9902      	ldr	r1, [sp, #8]
 8018c4e:	9803      	ldr	r0, [sp, #12]
 8018c50:	ea81 010b 	eor.w	r1, r1, fp
 8018c54:	4001      	ands	r1, r0
 8018c56:	9802      	ldr	r0, [sp, #8]
 8018c58:	4041      	eors	r1, r0
 8018c5a:	9801      	ldr	r0, [sp, #4]
 8018c5c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8018c5e:	9803      	ldr	r0, [sp, #12]
 8018c60:	f8c9 e04c 	str.w	lr, [r9, #76]	; 0x4c
 8018c64:	4446      	add	r6, r8
 8018c66:	4476      	add	r6, lr
 8018c68:	4431      	add	r1, r6
 8018c6a:	9e03      	ldr	r6, [sp, #12]
 8018c6c:	ea4f 20f0 	mov.w	r0, r0, ror #11
 8018c70:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
 8018c74:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8018c78:	1846      	adds	r6, r0, r1
 8018c7a:	ea45 0004 	orr.w	r0, r5, r4
 8018c7e:	ea05 0104 	and.w	r1, r5, r4
 8018c82:	ea4f 3874 	mov.w	r8, r4, ror #13
 8018c86:	ea00 000c 	and.w	r0, r0, ip
 8018c8a:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8018c8e:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018c90:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018c94:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018c98:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018c9c:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018c9e:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
 8018ca2:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ca6:	4430      	add	r0, r6
 8018ca8:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018cac:	f8d9 6014 	ldr.w	r6, [r9, #20]
 8018cb0:	440a      	add	r2, r1
 8018cb2:	4413      	add	r3, r2
 8018cb4:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8018cb8:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 8018cbc:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 8018cc0:	441a      	add	r2, r3
 8018cc2:	9b03      	ldr	r3, [sp, #12]
 8018cc4:	9902      	ldr	r1, [sp, #8]
 8018cc6:	f8c9 2050 	str.w	r2, [r9, #80]	; 0x50
 8018cca:	ea8b 0703 	eor.w	r7, fp, r3
 8018cce:	9b01      	ldr	r3, [sp, #4]
 8018cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cd2:	4413      	add	r3, r2
 8018cd4:	440b      	add	r3, r1
 8018cd6:	ea07 070a 	and.w	r7, r7, sl
 8018cda:	ea4f 21fa 	mov.w	r1, sl, ror #11
 8018cde:	ea87 070b 	eor.w	r7, r7, fp
 8018ce2:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
 8018ce6:	441f      	add	r7, r3
 8018ce8:	ea81 617a 	eor.w	r1, r1, sl, ror #25
 8018cec:	19cb      	adds	r3, r1, r7
 8018cee:	ea44 0700 	orr.w	r7, r4, r0
 8018cf2:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018cf6:	ea04 0800 	and.w	r8, r4, r0
 8018cfa:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8018cfe:	402f      	ands	r7, r5
 8018d00:	ea47 0708 	orr.w	r7, r7, r8
 8018d04:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018d08:	4439      	add	r1, r7
 8018d0a:	4419      	add	r1, r3
 8018d0c:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8018d0e:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8018d12:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8018d16:	ea4f 47fe 	mov.w	r7, lr, ror #19
 8018d1a:	ea87 477e 	eor.w	r7, r7, lr, ror #17
 8018d1e:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
 8018d22:	199f      	adds	r7, r3, r6
 8018d24:	ea4f 43b8 	mov.w	r3, r8, ror #18
 8018d28:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 8018d2c:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 8018d30:	4477      	add	r7, lr
 8018d32:	441f      	add	r7, r3
 8018d34:	9b03      	ldr	r3, [sp, #12]
 8018d36:	f8c9 7054 	str.w	r7, [r9, #84]	; 0x54
 8018d3a:	ea83 0e0a 	eor.w	lr, r3, sl
 8018d3e:	ea0e 0e0c 	and.w	lr, lr, ip
 8018d42:	ea8e 0e03 	eor.w	lr, lr, r3
 8018d46:	9b01      	ldr	r3, [sp, #4]
 8018d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018d4a:	443b      	add	r3, r7
 8018d4c:	445b      	add	r3, fp
 8018d4e:	449e      	add	lr, r3
 8018d50:	ea4f 23fc 	mov.w	r3, ip, ror #11
 8018d54:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
 8018d58:	ea83 637c 	eor.w	r3, r3, ip, ror #25
 8018d5c:	eb03 060e 	add.w	r6, r3, lr
 8018d60:	eb05 0b06 	add.w	fp, r5, r6
 8018d64:	ea4f 3371 	mov.w	r3, r1, ror #13
 8018d68:	ea40 0501 	orr.w	r5, r0, r1
 8018d6c:	ea00 0e01 	and.w	lr, r0, r1
 8018d70:	4025      	ands	r5, r4
 8018d72:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 8018d76:	ea45 050e 	orr.w	r5, r5, lr
 8018d7a:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8018d7e:	442b      	add	r3, r5
 8018d80:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8018d82:	f8d9 503c 	ldr.w	r5, [r9, #60]	; 0x3c
 8018d86:	f8d9 e01c 	ldr.w	lr, [r9, #28]
 8018d8a:	ea4f 46f2 	mov.w	r6, r2, ror #19
 8018d8e:	ea86 4672 	eor.w	r6, r6, r2, ror #17
 8018d92:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
 8018d96:	eb05 0608 	add.w	r6, r5, r8
 8018d9a:	4416      	add	r6, r2
 8018d9c:	ea4f 42be 	mov.w	r2, lr, ror #18
 8018da0:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
 8018da4:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
 8018da8:	4416      	add	r6, r2
 8018daa:	9a01      	ldr	r2, [sp, #4]
 8018dac:	f8c9 6058 	str.w	r6, [r9, #88]	; 0x58
 8018db0:	6d95      	ldr	r5, [r2, #88]	; 0x58
 8018db2:	9a03      	ldr	r2, [sp, #12]
 8018db4:	4435      	add	r5, r6
 8018db6:	ea8a 080c 	eor.w	r8, sl, ip
 8018dba:	4415      	add	r5, r2
 8018dbc:	ea08 080b 	and.w	r8, r8, fp
 8018dc0:	ea4f 22fb 	mov.w	r2, fp, ror #11
 8018dc4:	ea88 080a 	eor.w	r8, r8, sl
 8018dc8:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 8018dcc:	4445      	add	r5, r8
 8018dce:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8018dd2:	4415      	add	r5, r2
 8018dd4:	1966      	adds	r6, r4, r5
 8018dd6:	ea4f 3273 	mov.w	r2, r3, ror #13
 8018dda:	ea41 0403 	orr.w	r4, r1, r3
 8018dde:	4004      	ands	r4, r0
 8018de0:	ea01 0803 	and.w	r8, r1, r3
 8018de4:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8018de8:	ea44 0408 	orr.w	r4, r4, r8
 8018dec:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8018df0:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8018df2:	ea4f 44f7 	mov.w	r4, r7, ror #19
 8018df6:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8018dfa:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8018dfc:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
 8018e00:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8018e04:	9c04      	ldr	r4, [sp, #16]
 8018e06:	44a6      	add	lr, r4
 8018e08:	ea4f 44b5 	mov.w	r4, r5, ror #18
 8018e0c:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
 8018e10:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
 8018e14:	9c01      	ldr	r4, [sp, #4]
 8018e16:	4477      	add	r7, lr
 8018e18:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 8018e1a:	443d      	add	r5, r7
 8018e1c:	ea8c 0e0b 	eor.w	lr, ip, fp
 8018e20:	442c      	add	r4, r5
 8018e22:	ea0e 0e06 	and.w	lr, lr, r6
 8018e26:	ea4f 27f6 	mov.w	r7, r6, ror #11
 8018e2a:	ea8e 0e0c 	eor.w	lr, lr, ip
 8018e2e:	4454      	add	r4, sl
 8018e30:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
 8018e34:	4474      	add	r4, lr
 8018e36:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 8018e3a:	4427      	add	r7, r4
 8018e3c:	eb00 0807 	add.w	r8, r0, r7
 8018e40:	ea43 0402 	orr.w	r4, r3, r2
 8018e44:	ea4f 3072 	mov.w	r0, r2, ror #13
 8018e48:	f8c9 505c 	str.w	r5, [r9, #92]	; 0x5c
 8018e4c:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8018e50:	400c      	ands	r4, r1
 8018e52:	ea03 0502 	and.w	r5, r3, r2
 8018e56:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
 8018e5a:	432c      	orrs	r4, r5
 8018e5c:	4404      	add	r4, r0
 8018e5e:	9801      	ldr	r0, [sp, #4]
 8018e60:	3020      	adds	r0, #32
 8018e62:	9001      	str	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
 8018e64:	9807      	ldr	r0, [sp, #28]
 8018e66:	f109 0920 	add.w	r9, r9, #32
 8018e6a:	4548      	cmp	r0, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8018e6c:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
 8018e6e:	f47f ae25 	bne.w	8018abc <mbedtls_sha256_process+0x2cc>
 8018e72:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
 8018e76:	e9cd 7208 	strd	r7, r2, [sp, #32]
 8018e7a:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
 8018e7e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8018e82:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 8018e86:	9b05      	ldr	r3, [sp, #20]
 8018e88:	9900      	ldr	r1, [sp, #0]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	f851 2b04 	ldr.w	r2, [r1], #4
 8018e90:	9100      	str	r1, [sp, #0]
 8018e92:	4413      	add	r3, r2
 8018e94:	9a05      	ldr	r2, [sp, #20]
 8018e96:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
 8018e9a:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
 8018e9c:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
 8018e9e:	4293      	cmp	r3, r2
 8018ea0:	d1f1      	bne.n	8018e86 <mbedtls_sha256_process+0x696>
}
 8018ea2:	b051      	add	sp, #324	; 0x144
 8018ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ea8 <mbedtls_sha256_update.part.0>:
#endif /* !MBEDTLS_SHA256_PROCESS_ALT */

/*
 * SHA-256 process buffer
 */
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 8018ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 8018eac:	6803      	ldr	r3, [r0, #0]
 8018eae:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8018eb2:	189b      	adds	r3, r3, r2
 8018eb4:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8018eb6:	bf24      	itt	cs
 8018eb8:	6843      	ldrcs	r3, [r0, #4]
 8018eba:	3301      	addcs	r3, #1
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 8018ebc:	4605      	mov	r5, r0
 8018ebe:	460e      	mov	r6, r1
 8018ec0:	4614      	mov	r4, r2
        ctx->total[1]++;
 8018ec2:	bf28      	it	cs
 8018ec4:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8018ec6:	b197      	cbz	r7, 8018eee <mbedtls_sha256_update.part.0+0x46>
    fill = 64 - left;
 8018ec8:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 8018ecc:	4591      	cmp	r9, r2
 8018ece:	d80e      	bhi.n	8018eee <mbedtls_sha256_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8018ed0:	f100 0828 	add.w	r8, r0, #40	; 0x28
 8018ed4:	464a      	mov	r2, r9
 8018ed6:	eb08 0007 	add.w	r0, r8, r7
 8018eda:	f009 f965 	bl	80221a8 <memcpy>
        mbedtls_sha256_process( ctx, ctx->buffer );
 8018ede:	4641      	mov	r1, r8
 8018ee0:	4628      	mov	r0, r5
 8018ee2:	f7ff fc85 	bl	80187f0 <mbedtls_sha256_process>
        input += fill;
 8018ee6:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 8018ee8:	443c      	add	r4, r7
        input += fill;
 8018eea:	444e      	add	r6, r9
        left = 0;
 8018eec:	2700      	movs	r7, #0
 8018eee:	46a0      	mov	r8, r4
 8018ef0:	eb06 0904 	add.w	r9, r6, r4
 8018ef4:	e004      	b.n	8018f00 <mbedtls_sha256_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha256_process( ctx, input );
 8018ef6:	4628      	mov	r0, r5
 8018ef8:	f7ff fc7a 	bl	80187f0 <mbedtls_sha256_process>
        input += 64;
        ilen  -= 64;
 8018efc:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8018f00:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8018f04:	eba9 0108 	sub.w	r1, r9, r8
 8018f08:	d8f5      	bhi.n	8018ef6 <mbedtls_sha256_update.part.0+0x4e>
 8018f0a:	09a2      	lsrs	r2, r4, #6
 8018f0c:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8018f10:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8018f14:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 8018f18:	4431      	add	r1, r6
 8018f1a:	b132      	cbz	r2, 8018f2a <mbedtls_sha256_update.part.0+0x82>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018f1c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8018f20:	4438      	add	r0, r7
}
 8018f22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018f26:	f009 b93f 	b.w	80221a8 <memcpy>
}
 8018f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018f2e <mbedtls_sha256_update>:
    if( ilen == 0 )
 8018f2e:	b10a      	cbz	r2, 8018f34 <mbedtls_sha256_update+0x6>
 8018f30:	f7ff bfba 	b.w	8018ea8 <mbedtls_sha256_update.part.0>
}
 8018f34:	4770      	bx	lr
	...

08018f38 <mbedtls_sha256_finish>:

/*
 * SHA-256 final digest
 */
void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
{
 8018f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f3a:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 8018f3c:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8018f40:	0f53      	lsrs	r3, r2, #29
 8018f42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8018f46:	ba1b      	rev	r3, r3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8018f48:	9300      	str	r3, [sp, #0]
    low  = ( ctx->total[0] <<  3 );
 8018f4a:	00d3      	lsls	r3, r2, #3
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 8018f4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018f50:	2a37      	cmp	r2, #55	; 0x37
{
 8018f52:	4604      	mov	r4, r0
 8018f54:	ba1b      	rev	r3, r3
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8018f56:	bf94      	ite	ls
 8018f58:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 8018f5c:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_sha256_update( ctx, sha256_padding, padn );
 8018f60:	492b      	ldr	r1, [pc, #172]	; (8019010 <mbedtls_sha256_finish+0xd8>)
    PUT_UINT32_BE( low,  msglen, 4 );
 8018f62:	9301      	str	r3, [sp, #4]
    mbedtls_sha256_update( ctx, sha256_padding, padn );
 8018f64:	f7ff ffe3 	bl	8018f2e <mbedtls_sha256_update>
    if( ilen == 0 )
 8018f68:	2208      	movs	r2, #8
 8018f6a:	4669      	mov	r1, sp
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	f7ff ff9b 	bl	8018ea8 <mbedtls_sha256_update.part.0>
    mbedtls_sha256_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8018f72:	7ae3      	ldrb	r3, [r4, #11]
 8018f74:	702b      	strb	r3, [r5, #0]
 8018f76:	8963      	ldrh	r3, [r4, #10]
 8018f78:	706b      	strb	r3, [r5, #1]
 8018f7a:	68a3      	ldr	r3, [r4, #8]
 8018f7c:	0a1b      	lsrs	r3, r3, #8
 8018f7e:	70ab      	strb	r3, [r5, #2]
 8018f80:	68a3      	ldr	r3, [r4, #8]
 8018f82:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8018f84:	7be3      	ldrb	r3, [r4, #15]
 8018f86:	712b      	strb	r3, [r5, #4]
 8018f88:	89e3      	ldrh	r3, [r4, #14]
 8018f8a:	716b      	strb	r3, [r5, #5]
 8018f8c:	68e3      	ldr	r3, [r4, #12]
 8018f8e:	0a1b      	lsrs	r3, r3, #8
 8018f90:	71ab      	strb	r3, [r5, #6]
 8018f92:	68e3      	ldr	r3, [r4, #12]
 8018f94:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 8018f96:	7ce3      	ldrb	r3, [r4, #19]
 8018f98:	722b      	strb	r3, [r5, #8]
 8018f9a:	8a63      	ldrh	r3, [r4, #18]
 8018f9c:	726b      	strb	r3, [r5, #9]
 8018f9e:	6923      	ldr	r3, [r4, #16]
 8018fa0:	0a1b      	lsrs	r3, r3, #8
 8018fa2:	72ab      	strb	r3, [r5, #10]
 8018fa4:	6923      	ldr	r3, [r4, #16]
 8018fa6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8018fa8:	7de3      	ldrb	r3, [r4, #23]
 8018faa:	732b      	strb	r3, [r5, #12]
 8018fac:	8ae3      	ldrh	r3, [r4, #22]
 8018fae:	736b      	strb	r3, [r5, #13]
 8018fb0:	6963      	ldr	r3, [r4, #20]
 8018fb2:	0a1b      	lsrs	r3, r3, #8
 8018fb4:	73ab      	strb	r3, [r5, #14]
 8018fb6:	6963      	ldr	r3, [r4, #20]
 8018fb8:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8018fba:	7ee3      	ldrb	r3, [r4, #27]
 8018fbc:	742b      	strb	r3, [r5, #16]
 8018fbe:	8b63      	ldrh	r3, [r4, #26]
 8018fc0:	746b      	strb	r3, [r5, #17]
 8018fc2:	69a3      	ldr	r3, [r4, #24]
 8018fc4:	0a1b      	lsrs	r3, r3, #8
 8018fc6:	74ab      	strb	r3, [r5, #18]
 8018fc8:	69a3      	ldr	r3, [r4, #24]
 8018fca:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8018fcc:	7fe3      	ldrb	r3, [r4, #31]
 8018fce:	752b      	strb	r3, [r5, #20]
 8018fd0:	8be3      	ldrh	r3, [r4, #30]
 8018fd2:	756b      	strb	r3, [r5, #21]
 8018fd4:	69e3      	ldr	r3, [r4, #28]
 8018fd6:	0a1b      	lsrs	r3, r3, #8
 8018fd8:	75ab      	strb	r3, [r5, #22]
 8018fda:	69e3      	ldr	r3, [r4, #28]
 8018fdc:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8018fde:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8018fe2:	762b      	strb	r3, [r5, #24]
 8018fe4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8018fe6:	766b      	strb	r3, [r5, #25]
 8018fe8:	6a23      	ldr	r3, [r4, #32]
 8018fea:	0a1b      	lsrs	r3, r3, #8
 8018fec:	76ab      	strb	r3, [r5, #26]
 8018fee:	6a23      	ldr	r3, [r4, #32]
 8018ff0:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8018ff2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8018ff4:	b94b      	cbnz	r3, 801900a <mbedtls_sha256_finish+0xd2>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8018ff6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8018ffa:	772b      	strb	r3, [r5, #28]
 8018ffc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8018ffe:	776b      	strb	r3, [r5, #29]
 8019000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019002:	0a1b      	lsrs	r3, r3, #8
 8019004:	77ab      	strb	r3, [r5, #30]
 8019006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019008:	77eb      	strb	r3, [r5, #31]
}
 801900a:	b003      	add	sp, #12
 801900c:	bd30      	pop	{r4, r5, pc}
 801900e:	bf00      	nop
 8019010:	0802c660 	.word	0x0802c660

08019014 <mbedtls_sha256>:
/*
 * output = SHA-256( input buffer )
 */
void mbedtls_sha256( const unsigned char *input, size_t ilen,
             unsigned char output[32], int is224 )
{
 8019014:	b570      	push	{r4, r5, r6, lr}
 8019016:	b09e      	sub	sp, #120	; 0x78
 8019018:	4605      	mov	r5, r0
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 801901a:	a803      	add	r0, sp, #12
{
 801901c:	9301      	str	r3, [sp, #4]
 801901e:	4614      	mov	r4, r2
 8019020:	460e      	mov	r6, r1
    mbedtls_sha256_init( &ctx );
 8019022:	f7ff fb80 	bl	8018726 <mbedtls_sha256_init>
    mbedtls_sha256_starts( &ctx, is224 );
 8019026:	9901      	ldr	r1, [sp, #4]
 8019028:	a803      	add	r0, sp, #12
 801902a:	f7ff fb8f 	bl	801874c <mbedtls_sha256_starts>
    mbedtls_sha256_update( &ctx, input, ilen );
 801902e:	4632      	mov	r2, r6
 8019030:	4629      	mov	r1, r5
 8019032:	a803      	add	r0, sp, #12
 8019034:	f7ff ff7b 	bl	8018f2e <mbedtls_sha256_update>
    mbedtls_sha256_finish( &ctx, output );
 8019038:	4621      	mov	r1, r4
 801903a:	a803      	add	r0, sp, #12
 801903c:	f7ff ff7c 	bl	8018f38 <mbedtls_sha256_finish>
    mbedtls_sha256_free( &ctx );
 8019040:	a803      	add	r0, sp, #12
 8019042:	f7ff fb74 	bl	801872e <mbedtls_sha256_free>
}
 8019046:	b01e      	add	sp, #120	; 0x78
 8019048:	bd70      	pop	{r4, r5, r6, pc}

0801904a <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 801904a:	22d8      	movs	r2, #216	; 0xd8
 801904c:	2100      	movs	r1, #0
 801904e:	f009 b8d3 	b.w	80221f8 <memset>

08019052 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 8019052:	b120      	cbz	r0, 801905e <mbedtls_sha512_free+0xc>
 8019054:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8019058:	2200      	movs	r2, #0
 801905a:	4298      	cmp	r0, r3
 801905c:	d100      	bne.n	8019060 <mbedtls_sha512_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}
 801905e:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8019060:	f800 2b01 	strb.w	r2, [r0], #1
 8019064:	e7f9      	b.n	801905a <mbedtls_sha512_free+0x8>

08019066 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 8019066:	b508      	push	{r3, lr}
    *dst = *src;
 8019068:	22d8      	movs	r2, #216	; 0xd8
 801906a:	f009 f89d 	bl	80221a8 <memcpy>
}
 801906e:	bd08      	pop	{r3, pc}

08019070 <mbedtls_sha512_starts>:
/*
 * SHA-512 context setup
 */
void mbedtls_sha512_starts( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 8019070:	2200      	movs	r2, #0
 8019072:	2300      	movs	r3, #0
 8019074:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 8019078:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 801907c:	bb51      	cbnz	r1, 80190d4 <mbedtls_sha512_starts+0x64>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 801907e:	a32a      	add	r3, pc, #168	; (adr r3, 8019128 <mbedtls_sha512_starts+0xb8>)
 8019080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019084:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8019088:	a329      	add	r3, pc, #164	; (adr r3, 8019130 <mbedtls_sha512_starts+0xc0>)
 801908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801908e:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 8019092:	a329      	add	r3, pc, #164	; (adr r3, 8019138 <mbedtls_sha512_starts+0xc8>)
 8019094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019098:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 801909c:	a328      	add	r3, pc, #160	; (adr r3, 8019140 <mbedtls_sha512_starts+0xd0>)
 801909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80190a6:	a328      	add	r3, pc, #160	; (adr r3, 8019148 <mbedtls_sha512_starts+0xd8>)
 80190a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ac:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80190b0:	a327      	add	r3, pc, #156	; (adr r3, 8019150 <mbedtls_sha512_starts+0xe0>)
 80190b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190b6:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80190ba:	a327      	add	r3, pc, #156	; (adr r3, 8019158 <mbedtls_sha512_starts+0xe8>)
 80190bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190c0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 80190c4:	a326      	add	r3, pc, #152	; (adr r3, 8019160 <mbedtls_sha512_starts+0xf0>)
 80190c6:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80190ca:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 80190ce:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
}
 80190d2:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 80190d4:	a324      	add	r3, pc, #144	; (adr r3, 8019168 <mbedtls_sha512_starts+0xf8>)
 80190d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190da:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 80190de:	a324      	add	r3, pc, #144	; (adr r3, 8019170 <mbedtls_sha512_starts+0x100>)
 80190e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e4:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 80190e8:	a323      	add	r3, pc, #140	; (adr r3, 8019178 <mbedtls_sha512_starts+0x108>)
 80190ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ee:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 80190f2:	a323      	add	r3, pc, #140	; (adr r3, 8019180 <mbedtls_sha512_starts+0x110>)
 80190f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 80190fc:	a322      	add	r3, pc, #136	; (adr r3, 8019188 <mbedtls_sha512_starts+0x118>)
 80190fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019102:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8019106:	a322      	add	r3, pc, #136	; (adr r3, 8019190 <mbedtls_sha512_starts+0x120>)
 8019108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801910c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 8019110:	a321      	add	r3, pc, #132	; (adr r3, 8019198 <mbedtls_sha512_starts+0x128>)
 8019112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019116:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 801911a:	a321      	add	r3, pc, #132	; (adr r3, 80191a0 <mbedtls_sha512_starts+0x130>)
 801911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019120:	e7d3      	b.n	80190ca <mbedtls_sha512_starts+0x5a>
 8019122:	bf00      	nop
 8019124:	f3af 8000 	nop.w
 8019128:	f3bcc908 	.word	0xf3bcc908
 801912c:	6a09e667 	.word	0x6a09e667
 8019130:	84caa73b 	.word	0x84caa73b
 8019134:	bb67ae85 	.word	0xbb67ae85
 8019138:	fe94f82b 	.word	0xfe94f82b
 801913c:	3c6ef372 	.word	0x3c6ef372
 8019140:	5f1d36f1 	.word	0x5f1d36f1
 8019144:	a54ff53a 	.word	0xa54ff53a
 8019148:	ade682d1 	.word	0xade682d1
 801914c:	510e527f 	.word	0x510e527f
 8019150:	2b3e6c1f 	.word	0x2b3e6c1f
 8019154:	9b05688c 	.word	0x9b05688c
 8019158:	fb41bd6b 	.word	0xfb41bd6b
 801915c:	1f83d9ab 	.word	0x1f83d9ab
 8019160:	137e2179 	.word	0x137e2179
 8019164:	5be0cd19 	.word	0x5be0cd19
 8019168:	c1059ed8 	.word	0xc1059ed8
 801916c:	cbbb9d5d 	.word	0xcbbb9d5d
 8019170:	367cd507 	.word	0x367cd507
 8019174:	629a292a 	.word	0x629a292a
 8019178:	3070dd17 	.word	0x3070dd17
 801917c:	9159015a 	.word	0x9159015a
 8019180:	f70e5939 	.word	0xf70e5939
 8019184:	152fecd8 	.word	0x152fecd8
 8019188:	ffc00b31 	.word	0xffc00b31
 801918c:	67332667 	.word	0x67332667
 8019190:	68581511 	.word	0x68581511
 8019194:	8eb44a87 	.word	0x8eb44a87
 8019198:	64f98fa7 	.word	0x64f98fa7
 801919c:	db0c2e0d 	.word	0xdb0c2e0d
 80191a0:	befa4fa4 	.word	0xbefa4fa4
 80191a4:	47b5481d 	.word	0x47b5481d

080191a8 <mbedtls_sha512_process>:
    UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

void mbedtls_sha512_process( mbedtls_sha512_context *ctx, const unsigned char data[128] )
{
 80191a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ac:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80191b0:	f101 0780 	add.w	r7, r1, #128	; 0x80
 80191b4:	9000      	str	r0, [sp, #0]
 80191b6:	a81e      	add	r0, sp, #120	; 0x78
 80191b8:	4606      	mov	r6, r0
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80191ba:	784a      	ldrb	r2, [r1, #1]
 80191bc:	780c      	ldrb	r4, [r1, #0]
 80191be:	f891 8002 	ldrb.w	r8, [r1, #2]
 80191c2:	79cb      	ldrb	r3, [r1, #7]
 80191c4:	f891 a004 	ldrb.w	sl, [r1, #4]
 80191c8:	0412      	lsls	r2, r2, #16
 80191ca:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80191ce:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 80191d2:	794a      	ldrb	r2, [r1, #5]
 80191d4:	f891 8003 	ldrb.w	r8, [r1, #3]
 80191d8:	ea43 640a 	orr.w	r4, r3, sl, lsl #24
 80191dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80191e0:	798a      	ldrb	r2, [r1, #6]
 80191e2:	3108      	adds	r1, #8
 80191e4:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
 80191e8:	ea45 0508 	orr.w	r5, r5, r8
    for( i = 0; i < 16; i++ )
 80191ec:	428f      	cmp	r7, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 80191ee:	e9c6 2500 	strd	r2, r5, [r6]
 80191f2:	f106 0608 	add.w	r6, r6, #8
    for( i = 0; i < 16; i++ )
 80191f6:	d1e0      	bne.n	80191ba <mbedtls_sha512_process+0x12>
 80191f8:	4601      	mov	r1, r0
 80191fa:	2610      	movs	r6, #16
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80191fc:	e9d1 421c 	ldrd	r4, r2, [r1, #112]	; 0x70
 8019200:	0ce3      	lsrs	r3, r4, #19
 8019202:	ea4f 4cd2 	mov.w	ip, r2, lsr #19
 8019206:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801920a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 801920e:	ea48 7854 	orr.w	r8, r8, r4, lsr #29
 8019212:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8019216:	ea4c 3c44 	orr.w	ip, ip, r4, lsl #13
 801921a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 801921e:	09a4      	lsrs	r4, r4, #6
 8019220:	468e      	mov	lr, r1
 8019222:	ea8c 0c08 	eor.w	ip, ip, r8
 8019226:	ea44 6482 	orr.w	r4, r4, r2, lsl #26
 801922a:	ea83 0309 	eor.w	r3, r3, r9
 801922e:	4063      	eors	r3, r4
 8019230:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
               S0(W[i - 15]) + W[i - 16];
 8019234:	e9de 4212 	ldrd	r4, r2, [lr, #72]	; 0x48
 8019238:	e9de 8e00 	ldrd	r8, lr, [lr]
 801923c:	e9d1 7502 	ldrd	r7, r5, [r1, #8]
 8019240:	eb14 0408 	adds.w	r4, r4, r8
 8019244:	eb42 020e 	adc.w	r2, r2, lr
 8019248:	191b      	adds	r3, r3, r4
 801924a:	eb4c 0c02 	adc.w	ip, ip, r2
 801924e:	087c      	lsrs	r4, r7, #1
 8019250:	0a3a      	lsrs	r2, r7, #8
 8019252:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8019256:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
 801925a:	ea4f 0e55 	mov.w	lr, r5, lsr #1
 801925e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8019262:	4054      	eors	r4, r2
 8019264:	09fa      	lsrs	r2, r7, #7
 8019266:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 801926a:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
 801926e:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 8019272:	ea8e 0e08 	eor.w	lr, lr, r8
 8019276:	4062      	eors	r2, r4
 8019278:	189a      	adds	r2, r3, r2
 801927a:	ea8e 15d5 	eor.w	r5, lr, r5, lsr #7
    for( ; i < 80; i++ )
 801927e:	f106 0601 	add.w	r6, r6, #1
               S0(W[i - 15]) + W[i - 16];
 8019282:	eb4c 0505 	adc.w	r5, ip, r5
 8019286:	3108      	adds	r1, #8
    for( ; i < 80; i++ )
 8019288:	2e50      	cmp	r6, #80	; 0x50
        W[i] = S1(W[i -  2]) + W[i -  7] +
 801928a:	e9c1 251e 	strd	r2, r5, [r1, #120]	; 0x78
    for( ; i < 80; i++ )
 801928e:	d1b5      	bne.n	80191fc <mbedtls_sha512_process+0x54>
    }

    A = ctx->state[0];
 8019290:	9b00      	ldr	r3, [sp, #0]
 8019292:	4926      	ldr	r1, [pc, #152]	; (801932c <mbedtls_sha512_process+0x184>)
 8019294:	691b      	ldr	r3, [r3, #16]
 8019296:	930e      	str	r3, [sp, #56]	; 0x38
 8019298:	9b00      	ldr	r3, [sp, #0]
 801929a:	695b      	ldr	r3, [r3, #20]
 801929c:	930f      	str	r3, [sp, #60]	; 0x3c
    B = ctx->state[1];
 801929e:	9b00      	ldr	r3, [sp, #0]
 80192a0:	699b      	ldr	r3, [r3, #24]
 80192a2:	9310      	str	r3, [sp, #64]	; 0x40
 80192a4:	9b00      	ldr	r3, [sp, #0]
 80192a6:	69db      	ldr	r3, [r3, #28]
 80192a8:	9311      	str	r3, [sp, #68]	; 0x44
    C = ctx->state[2];
 80192aa:	9b00      	ldr	r3, [sp, #0]
 80192ac:	6a1b      	ldr	r3, [r3, #32]
 80192ae:	9312      	str	r3, [sp, #72]	; 0x48
 80192b0:	9b00      	ldr	r3, [sp, #0]
 80192b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192b4:	9313      	str	r3, [sp, #76]	; 0x4c
    D = ctx->state[3];
 80192b6:	9b00      	ldr	r3, [sp, #0]
 80192b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ba:	9314      	str	r3, [sp, #80]	; 0x50
 80192bc:	9b00      	ldr	r3, [sp, #0]
 80192be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192c0:	9315      	str	r3, [sp, #84]	; 0x54
    E = ctx->state[4];
 80192c2:	9b00      	ldr	r3, [sp, #0]
 80192c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192c6:	9316      	str	r3, [sp, #88]	; 0x58
 80192c8:	9b00      	ldr	r3, [sp, #0]
 80192ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192cc:	9317      	str	r3, [sp, #92]	; 0x5c
    F = ctx->state[5];
 80192ce:	9b00      	ldr	r3, [sp, #0]
 80192d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192d2:	9318      	str	r3, [sp, #96]	; 0x60
 80192d4:	9b00      	ldr	r3, [sp, #0]
 80192d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80192d8:	9319      	str	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
 80192da:	9b00      	ldr	r3, [sp, #0]
 80192dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192de:	931a      	str	r3, [sp, #104]	; 0x68
 80192e0:	9b00      	ldr	r3, [sp, #0]
 80192e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192e4:	931b      	str	r3, [sp, #108]	; 0x6c
    H = ctx->state[7];
 80192e6:	9b00      	ldr	r3, [sp, #0]
 80192e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80192ea:	931c      	str	r3, [sp, #112]	; 0x70
 80192ec:	9b00      	ldr	r3, [sp, #0]
 80192ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80192f0:	931d      	str	r3, [sp, #116]	; 0x74
 80192f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80192f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80192f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80192f8:	930c      	str	r3, [sp, #48]	; 0x30
    G = ctx->state[6];
 80192fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80192fc:	9309      	str	r3, [sp, #36]	; 0x24
 80192fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019300:	930a      	str	r3, [sp, #40]	; 0x28
    F = ctx->state[5];
 8019302:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019304:	9307      	str	r3, [sp, #28]
 8019306:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019308:	9308      	str	r3, [sp, #32]
    E = ctx->state[4];
 801930a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801930c:	9305      	str	r3, [sp, #20]
 801930e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019310:	9306      	str	r3, [sp, #24]
    D = ctx->state[3];
 8019312:	e9dd a314 	ldrd	sl, r3, [sp, #80]	; 0x50
 8019316:	9304      	str	r3, [sp, #16]
    C = ctx->state[2];
 8019318:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801931a:	9302      	str	r3, [sp, #8]
    B = ctx->state[1];
 801931c:	e9dd ce10 	ldrd	ip, lr, [sp, #64]	; 0x40
    C = ctx->state[2];
 8019320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019322:	9303      	str	r3, [sp, #12]
    A = ctx->state[0];
 8019324:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019326:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019328:	9301      	str	r3, [sp, #4]
 801932a:	e001      	b.n	8019330 <mbedtls_sha512_process+0x188>
 801932c:	0802c818 	.word	0x0802c818
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 8019330:	9c05      	ldr	r4, [sp, #20]
 8019332:	9e05      	ldr	r6, [sp, #20]
 8019334:	9b01      	ldr	r3, [sp, #4]
 8019336:	ea4f 3894 	mov.w	r8, r4, lsr #14
 801933a:	9c06      	ldr	r4, [sp, #24]
 801933c:	ea48 4884 	orr.w	r8, r8, r4, lsl #18
 8019340:	ea4f 3994 	mov.w	r9, r4, lsr #14
 8019344:	9c05      	ldr	r4, [sp, #20]
 8019346:	ea49 4984 	orr.w	r9, r9, r4, lsl #18
 801934a:	0ca5      	lsrs	r5, r4, #18
 801934c:	9c06      	ldr	r4, [sp, #24]
 801934e:	ea45 3584 	orr.w	r5, r5, r4, lsl #14
 8019352:	0ca4      	lsrs	r4, r4, #18
 8019354:	ea44 3486 	orr.w	r4, r4, r6, lsl #14
 8019358:	ea89 0904 	eor.w	r9, r9, r4
 801935c:	9c06      	ldr	r4, [sp, #24]
 801935e:	05e4      	lsls	r4, r4, #23
 8019360:	ea44 2456 	orr.w	r4, r4, r6, lsr #9
 8019364:	ea88 0805 	eor.w	r8, r8, r5
 8019368:	05f5      	lsls	r5, r6, #23
 801936a:	9e06      	ldr	r6, [sp, #24]
 801936c:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
 8019370:	ea88 0805 	eor.w	r8, r8, r5
 8019374:	ea89 0904 	eor.w	r9, r9, r4
 8019378:	e9d1 5700 	ldrd	r5, r7, [r1]
 801937c:	e9d0 6400 	ldrd	r6, r4, [r0]
 8019380:	19ad      	adds	r5, r5, r6
 8019382:	eb47 0404 	adc.w	r4, r7, r4
 8019386:	9e07      	ldr	r6, [sp, #28]
 8019388:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801938a:	ea86 0b07 	eor.w	fp, r6, r7
 801938e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019390:	9e08      	ldr	r6, [sp, #32]
 8019392:	407e      	eors	r6, r7
 8019394:	9f05      	ldr	r7, [sp, #20]
 8019396:	ea0b 0b07 	and.w	fp, fp, r7
 801939a:	9f06      	ldr	r7, [sp, #24]
 801939c:	403e      	ands	r6, r7
 801939e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80193a0:	ea8b 0b07 	eor.w	fp, fp, r7
 80193a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80193a6:	eb18 0505 	adds.w	r5, r8, r5
 80193aa:	eb49 0404 	adc.w	r4, r9, r4
 80193ae:	407e      	eors	r6, r7
 80193b0:	eb15 050b 	adds.w	r5, r5, fp
 80193b4:	eb46 0404 	adc.w	r4, r6, r4
 80193b8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80193ba:	19ad      	adds	r5, r5, r6
 80193bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80193be:	eb44 0606 	adc.w	r6, r4, r6
 80193c2:	4634      	mov	r4, r6
 80193c4:	eb1a 0605 	adds.w	r6, sl, r5
 80193c8:	960b      	str	r6, [sp, #44]	; 0x2c
 80193ca:	9e04      	ldr	r6, [sp, #16]
 80193cc:	eb44 0606 	adc.w	r6, r4, r6
 80193d0:	960d      	str	r6, [sp, #52]	; 0x34
 80193d2:	ea4f 7913 	mov.w	r9, r3, lsr #28
 80193d6:	079e      	lsls	r6, r3, #30
 80193d8:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 80193dc:	ea49 1902 	orr.w	r9, r9, r2, lsl #4
 80193e0:	ea4f 7812 	mov.w	r8, r2, lsr #28
 80193e4:	0797      	lsls	r7, r2, #30
 80193e6:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
 80193ea:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 80193ee:	ea89 0906 	eor.w	r9, r9, r6
 80193f2:	065e      	lsls	r6, r3, #25
 80193f4:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
 80193f8:	ea88 0807 	eor.w	r8, r8, r7
 80193fc:	0657      	lsls	r7, r2, #25
 80193fe:	ea47 17d3 	orr.w	r7, r7, r3, lsr #7
 8019402:	ea89 0906 	eor.w	r9, r9, r6
 8019406:	ea43 060c 	orr.w	r6, r3, ip
 801940a:	9b02      	ldr	r3, [sp, #8]
 801940c:	401e      	ands	r6, r3
 801940e:	9b03      	ldr	r3, [sp, #12]
 8019410:	ea88 0807 	eor.w	r8, r8, r7
 8019414:	ea42 070e 	orr.w	r7, r2, lr
 8019418:	401f      	ands	r7, r3
 801941a:	9b01      	ldr	r3, [sp, #4]
 801941c:	ea03 0b0c 	and.w	fp, r3, ip
 8019420:	ea02 0a0e 	and.w	sl, r2, lr
 8019424:	ea46 060b 	orr.w	r6, r6, fp
 8019428:	eb19 0606 	adds.w	r6, r9, r6
 801942c:	ea47 070a 	orr.w	r7, r7, sl
 8019430:	eb48 0707 	adc.w	r7, r8, r7
 8019434:	1973      	adds	r3, r6, r5
 8019436:	9304      	str	r3, [sp, #16]
 8019438:	eb47 0304 	adc.w	r3, r7, r4
 801943c:	930c      	str	r3, [sp, #48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 801943e:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
 8019442:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8019446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019448:	19a4      	adds	r4, r4, r6
 801944a:	eb47 0505 	adc.w	r5, r7, r5
 801944e:	18e4      	adds	r4, r4, r3
 8019450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019452:	eb45 0803 	adc.w	r8, r5, r3
 8019456:	9b05      	ldr	r3, [sp, #20]
 8019458:	9d07      	ldr	r5, [sp, #28]
 801945a:	ea83 0a05 	eor.w	sl, r3, r5
 801945e:	9b06      	ldr	r3, [sp, #24]
 8019460:	9d08      	ldr	r5, [sp, #32]
 8019462:	405d      	eors	r5, r3
 8019464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019466:	ea0a 0a03 	and.w	sl, sl, r3
 801946a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801946c:	401d      	ands	r5, r3
 801946e:	9b07      	ldr	r3, [sp, #28]
 8019470:	ea8a 0a03 	eor.w	sl, sl, r3
 8019474:	9b08      	ldr	r3, [sp, #32]
 8019476:	ea85 0903 	eor.w	r9, r5, r3
 801947a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801947c:	eb14 0a0a 	adds.w	sl, r4, sl
 8019480:	ea4f 3493 	mov.w	r4, r3, lsr #14
 8019484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019486:	eb48 0509 	adc.w	r5, r8, r9
 801948a:	ea4f 3b93 	mov.w	fp, r3, lsr #14
 801948e:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
 8019492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019494:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
 8019498:	0c9c      	lsrs	r4, r3, #18
 801949a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801949c:	ea4f 4b93 	mov.w	fp, r3, lsr #18
 80194a0:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80194a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194a6:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
 80194aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194ac:	ea88 0b06 	eor.w	fp, r8, r6
 80194b0:	ea4f 58c3 	mov.w	r8, r3, lsl #23
 80194b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194b6:	ea89 0404 	eor.w	r4, r9, r4
 80194ba:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
 80194be:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 80194c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194c4:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
 80194c8:	ea84 0409 	eor.w	r4, r4, r9
 80194cc:	9b02      	ldr	r3, [sp, #8]
 80194ce:	eb1a 0404 	adds.w	r4, sl, r4
 80194d2:	ea8b 0808 	eor.w	r8, fp, r8
 80194d6:	eb45 0808 	adc.w	r8, r5, r8
 80194da:	191b      	adds	r3, r3, r4
 80194dc:	9309      	str	r3, [sp, #36]	; 0x24
 80194de:	9b03      	ldr	r3, [sp, #12]
 80194e0:	eb43 0308 	adc.w	r3, r3, r8
 80194e4:	930a      	str	r3, [sp, #40]	; 0x28
 80194e6:	9b04      	ldr	r3, [sp, #16]
 80194e8:	0f1f      	lsrs	r7, r3, #28
 80194ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194ec:	0f1e      	lsrs	r6, r3, #28
 80194ee:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 80194f2:	9b04      	ldr	r3, [sp, #16]
 80194f4:	ea46 1903 	orr.w	r9, r6, r3, lsl #4
 80194f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80194fa:	079e      	lsls	r6, r3, #30
 80194fc:	9b04      	ldr	r3, [sp, #16]
 80194fe:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 8019502:	079d      	lsls	r5, r3, #30
 8019504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019506:	ea89 0606 	eor.w	r6, r9, r6
 801950a:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
 801950e:	ea4f 6943 	mov.w	r9, r3, lsl #25
 8019512:	9b04      	ldr	r3, [sp, #16]
 8019514:	406f      	eors	r7, r5
 8019516:	ea49 19d3 	orr.w	r9, r9, r3, lsr #7
 801951a:	065d      	lsls	r5, r3, #25
 801951c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801951e:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019522:	406f      	eors	r7, r5
 8019524:	9b04      	ldr	r3, [sp, #16]
 8019526:	9d01      	ldr	r5, [sp, #4]
 8019528:	431d      	orrs	r5, r3
 801952a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801952c:	ea86 0609 	eor.w	r6, r6, r9
 8019530:	ea42 0903 	orr.w	r9, r2, r3
 8019534:	ea05 030c 	and.w	r3, r5, ip
 8019538:	9302      	str	r3, [sp, #8]
 801953a:	9d01      	ldr	r5, [sp, #4]
 801953c:	9b04      	ldr	r3, [sp, #16]
 801953e:	ea05 0b03 	and.w	fp, r5, r3
 8019542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019544:	ea02 0a03 	and.w	sl, r2, r3
 8019548:	9b02      	ldr	r3, [sp, #8]
 801954a:	ea09 090e 	and.w	r9, r9, lr
 801954e:	ea43 050b 	orr.w	r5, r3, fp
 8019552:	197d      	adds	r5, r7, r5
 8019554:	ea49 090a 	orr.w	r9, r9, sl
 8019558:	eb46 0909 	adc.w	r9, r6, r9
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801955c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 8019560:	192b      	adds	r3, r5, r4
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 8019562:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 8019566:	9302      	str	r3, [sp, #8]
 8019568:	eb49 0308 	adc.w	r3, r9, r8
 801956c:	9303      	str	r3, [sp, #12]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801956e:	9b07      	ldr	r3, [sp, #28]
 8019570:	19a4      	adds	r4, r4, r6
 8019572:	eb47 0505 	adc.w	r5, r7, r5
 8019576:	18e4      	adds	r4, r4, r3
 8019578:	9b08      	ldr	r3, [sp, #32]
 801957a:	eb45 0803 	adc.w	r8, r5, r3
 801957e:	9b05      	ldr	r3, [sp, #20]
 8019580:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019582:	ea83 0a05 	eor.w	sl, r3, r5
 8019586:	9b06      	ldr	r3, [sp, #24]
 8019588:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801958a:	405d      	eors	r5, r3
 801958c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801958e:	ea0a 0a03 	and.w	sl, sl, r3
 8019592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019594:	401d      	ands	r5, r3
 8019596:	9b05      	ldr	r3, [sp, #20]
 8019598:	ea8a 0a03 	eor.w	sl, sl, r3
 801959c:	9b06      	ldr	r3, [sp, #24]
 801959e:	ea85 0903 	eor.w	r9, r5, r3
 80195a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a4:	eb14 0a0a 	adds.w	sl, r4, sl
 80195a8:	ea4f 3493 	mov.w	r4, r3, lsr #14
 80195ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ae:	eb48 0509 	adc.w	r5, r8, r9
 80195b2:	ea4f 3b93 	mov.w	fp, r3, lsr #14
 80195b6:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
 80195ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195bc:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
 80195c0:	0c9c      	lsrs	r4, r3, #18
 80195c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195c4:	ea4f 4b93 	mov.w	fp, r3, lsr #18
 80195c8:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80195cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ce:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
 80195d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195d4:	ea88 0b06 	eor.w	fp, r8, r6
 80195d8:	ea4f 58c3 	mov.w	r8, r3, lsl #23
 80195dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195de:	ea89 0404 	eor.w	r4, r9, r4
 80195e2:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
 80195e6:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 80195ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ec:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
 80195f0:	ea84 0409 	eor.w	r4, r4, r9
 80195f4:	eb1a 0404 	adds.w	r4, sl, r4
 80195f8:	ea8b 0808 	eor.w	r8, fp, r8
 80195fc:	eb45 0808 	adc.w	r8, r5, r8
 8019600:	eb1c 0304 	adds.w	r3, ip, r4
 8019604:	9307      	str	r3, [sp, #28]
 8019606:	eb4e 0308 	adc.w	r3, lr, r8
 801960a:	9308      	str	r3, [sp, #32]
 801960c:	9b02      	ldr	r3, [sp, #8]
 801960e:	0f1f      	lsrs	r7, r3, #28
 8019610:	9b03      	ldr	r3, [sp, #12]
 8019612:	0f1e      	lsrs	r6, r3, #28
 8019614:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 8019618:	9b02      	ldr	r3, [sp, #8]
 801961a:	ea46 1c03 	orr.w	ip, r6, r3, lsl #4
 801961e:	9b03      	ldr	r3, [sp, #12]
 8019620:	079e      	lsls	r6, r3, #30
 8019622:	9b02      	ldr	r3, [sp, #8]
 8019624:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 8019628:	079d      	lsls	r5, r3, #30
 801962a:	9b03      	ldr	r3, [sp, #12]
 801962c:	ea8c 0606 	eor.w	r6, ip, r6
 8019630:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
 8019634:	ea4f 6c43 	mov.w	ip, r3, lsl #25
 8019638:	9b02      	ldr	r3, [sp, #8]
 801963a:	406f      	eors	r7, r5
 801963c:	ea4c 1cd3 	orr.w	ip, ip, r3, lsr #7
 8019640:	065d      	lsls	r5, r3, #25
 8019642:	9b03      	ldr	r3, [sp, #12]
 8019644:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019648:	406f      	eors	r7, r5
 801964a:	9b04      	ldr	r3, [sp, #16]
 801964c:	9d02      	ldr	r5, [sp, #8]
 801964e:	431d      	orrs	r5, r3
 8019650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019652:	ea86 060c 	eor.w	r6, r6, ip
 8019656:	469c      	mov	ip, r3
 8019658:	9b03      	ldr	r3, [sp, #12]
 801965a:	ea4c 0c03 	orr.w	ip, ip, r3
 801965e:	9b01      	ldr	r3, [sp, #4]
 8019660:	401d      	ands	r5, r3
 8019662:	9b04      	ldr	r3, [sp, #16]
 8019664:	469e      	mov	lr, r3
 8019666:	9b02      	ldr	r3, [sp, #8]
 8019668:	ea0e 0903 	and.w	r9, lr, r3
 801966c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801966e:	469e      	mov	lr, r3
 8019670:	9b03      	ldr	r3, [sp, #12]
 8019672:	ea0c 0c02 	and.w	ip, ip, r2
 8019676:	ea0e 0e03 	and.w	lr, lr, r3
 801967a:	ea45 0509 	orr.w	r5, r5, r9
 801967e:	197d      	adds	r5, r7, r5
 8019680:	ea4c 0c0e 	orr.w	ip, ip, lr
 8019684:	eb46 0c0c 	adc.w	ip, r6, ip
 8019688:	eb15 0904 	adds.w	r9, r5, r4
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 801968c:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
 8019690:	e9d1 4506 	ldrd	r4, r5, [r1, #24]
 8019694:	9b05      	ldr	r3, [sp, #20]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 8019696:	eb4c 0b08 	adc.w	fp, ip, r8
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 801969a:	19a4      	adds	r4, r4, r6
 801969c:	eb45 0707 	adc.w	r7, r5, r7
 80196a0:	18e4      	adds	r4, r4, r3
 80196a2:	9b06      	ldr	r3, [sp, #24]
 80196a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80196a6:	eb43 0707 	adc.w	r7, r3, r7
 80196aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196ac:	ea83 0605 	eor.w	r6, r3, r5
 80196b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196b2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80196b4:	405d      	eors	r5, r3
 80196b6:	9b07      	ldr	r3, [sp, #28]
 80196b8:	401e      	ands	r6, r3
 80196ba:	9b08      	ldr	r3, [sp, #32]
 80196bc:	401d      	ands	r5, r3
 80196be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196c0:	405e      	eors	r6, r3
 80196c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196c4:	ea85 0c03 	eor.w	ip, r5, r3
 80196c8:	9b07      	ldr	r3, [sp, #28]
 80196ca:	19a6      	adds	r6, r4, r6
 80196cc:	ea4f 3493 	mov.w	r4, r3, lsr #14
 80196d0:	9b08      	ldr	r3, [sp, #32]
 80196d2:	eb47 050c 	adc.w	r5, r7, ip
 80196d6:	ea4f 3e93 	mov.w	lr, r3, lsr #14
 80196da:	ea44 4c83 	orr.w	ip, r4, r3, lsl #18
 80196de:	9b07      	ldr	r3, [sp, #28]
 80196e0:	ea4e 4883 	orr.w	r8, lr, r3, lsl #18
 80196e4:	0c9c      	lsrs	r4, r3, #18
 80196e6:	9b08      	ldr	r3, [sp, #32]
 80196e8:	ea4f 4e93 	mov.w	lr, r3, lsr #18
 80196ec:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80196f0:	9b07      	ldr	r3, [sp, #28]
 80196f2:	ea4e 3783 	orr.w	r7, lr, r3, lsl #14
 80196f6:	9b08      	ldr	r3, [sp, #32]
 80196f8:	ea88 0e07 	eor.w	lr, r8, r7
 80196fc:	05df      	lsls	r7, r3, #23
 80196fe:	9b07      	ldr	r3, [sp, #28]
 8019700:	ea8c 0404 	eor.w	r4, ip, r4
 8019704:	ea47 2753 	orr.w	r7, r7, r3, lsr #9
 8019708:	ea4f 5cc3 	mov.w	ip, r3, lsl #23
 801970c:	9b08      	ldr	r3, [sp, #32]
 801970e:	ea4c 2c53 	orr.w	ip, ip, r3, lsr #9
 8019712:	ea84 040c 	eor.w	r4, r4, ip
 8019716:	9b01      	ldr	r3, [sp, #4]
 8019718:	1934      	adds	r4, r6, r4
 801971a:	ea8e 0707 	eor.w	r7, lr, r7
 801971e:	eb45 0707 	adc.w	r7, r5, r7
 8019722:	eb13 0804 	adds.w	r8, r3, r4
 8019726:	eb42 0307 	adc.w	r3, r2, r7
 801972a:	9305      	str	r3, [sp, #20]
 801972c:	ea4f 721b 	mov.w	r2, fp, lsr #28
 8019730:	ea4f 7519 	mov.w	r5, r9, lsr #28
 8019734:	ea4f 7389 	mov.w	r3, r9, lsl #30
 8019738:	ea42 1609 	orr.w	r6, r2, r9, lsl #4
 801973c:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
 8019740:	ea45 150b 	orr.w	r5, r5, fp, lsl #4
 8019744:	ea4f 728b 	mov.w	r2, fp, lsl #30
 8019748:	ea42 0299 	orr.w	r2, r2, r9, lsr #2
 801974c:	405d      	eors	r5, r3
 801974e:	ea4f 6349 	mov.w	r3, r9, lsl #25
 8019752:	4072      	eors	r2, r6
 8019754:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 8019758:	ea4f 664b 	mov.w	r6, fp, lsl #25
 801975c:	ea46 16d9 	orr.w	r6, r6, r9, lsr #7
 8019760:	405d      	eors	r5, r3
 8019762:	9b02      	ldr	r3, [sp, #8]
 8019764:	ea82 0a06 	eor.w	sl, r2, r6
 8019768:	9a04      	ldr	r2, [sp, #16]
 801976a:	9e03      	ldr	r6, [sp, #12]
 801976c:	ea43 0309 	orr.w	r3, r3, r9
 8019770:	4013      	ands	r3, r2
 8019772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019774:	ea46 060b 	orr.w	r6, r6, fp
 8019778:	4016      	ands	r6, r2
 801977a:	9a02      	ldr	r2, [sp, #8]
 801977c:	ea02 0e09 	and.w	lr, r2, r9
 8019780:	9a03      	ldr	r2, [sp, #12]
 8019782:	ea43 030e 	orr.w	r3, r3, lr
 8019786:	ea02 0c0b 	and.w	ip, r2, fp
 801978a:	18eb      	adds	r3, r5, r3
 801978c:	ea46 060c 	orr.w	r6, r6, ip
 8019790:	eb4a 0606 	adc.w	r6, sl, r6
 8019794:	191b      	adds	r3, r3, r4
 8019796:	9301      	str	r3, [sp, #4]
 8019798:	eb46 0307 	adc.w	r3, r6, r7
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 801979c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80197a0:	9306      	str	r3, [sp, #24]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80197a2:	e9d1 3208 	ldrd	r3, r2, [r1, #32]
 80197a6:	191b      	adds	r3, r3, r4
 80197a8:	eb42 0505 	adc.w	r5, r2, r5
 80197ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80197ae:	9c08      	ldr	r4, [sp, #32]
 80197b0:	eb13 0a02 	adds.w	sl, r3, r2
 80197b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197b6:	9a07      	ldr	r2, [sp, #28]
 80197b8:	eb43 0505 	adc.w	r5, r3, r5
 80197bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197be:	4053      	eors	r3, r2
 80197c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197c2:	4062      	eors	r2, r4
 80197c4:	9c05      	ldr	r4, [sp, #20]
 80197c6:	4022      	ands	r2, r4
 80197c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80197ca:	ea03 0308 	and.w	r3, r3, r8
 80197ce:	4063      	eors	r3, r4
 80197d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80197d2:	ea82 0604 	eor.w	r6, r2, r4
 80197d6:	9c05      	ldr	r4, [sp, #20]
 80197d8:	eb1a 0303 	adds.w	r3, sl, r3
 80197dc:	ea4f 3794 	mov.w	r7, r4, lsr #14
 80197e0:	eb45 0206 	adc.w	r2, r5, r6
 80197e4:	ea4f 3a98 	mov.w	sl, r8, lsr #14
 80197e8:	ea47 4588 	orr.w	r5, r7, r8, lsl #18
 80197ec:	ea4f 4698 	mov.w	r6, r8, lsr #18
 80197f0:	0ca7      	lsrs	r7, r4, #18
 80197f2:	ea46 3684 	orr.w	r6, r6, r4, lsl #14
 80197f6:	ea4a 4a84 	orr.w	sl, sl, r4, lsl #18
 80197fa:	ea47 3488 	orr.w	r4, r7, r8, lsl #14
 80197fe:	ea85 0704 	eor.w	r7, r5, r4
 8019802:	9c05      	ldr	r4, [sp, #20]
 8019804:	ea8a 0a06 	eor.w	sl, sl, r6
 8019808:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 801980c:	ea46 2654 	orr.w	r6, r6, r4, lsr #9
 8019810:	05e5      	lsls	r5, r4, #23
 8019812:	ea8a 0a06 	eor.w	sl, sl, r6
 8019816:	eb13 0a0a 	adds.w	sl, r3, sl
 801981a:	ea45 2558 	orr.w	r5, r5, r8, lsr #9
 801981e:	9b04      	ldr	r3, [sp, #16]
 8019820:	ea85 0507 	eor.w	r5, r5, r7
 8019824:	eb42 0505 	adc.w	r5, r2, r5
 8019828:	eb13 030a 	adds.w	r3, r3, sl
 801982c:	930b      	str	r3, [sp, #44]	; 0x2c
 801982e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019830:	9f06      	ldr	r7, [sp, #24]
 8019832:	416b      	adcs	r3, r5
 8019834:	930c      	str	r3, [sp, #48]	; 0x30
 8019836:	9b01      	ldr	r3, [sp, #4]
 8019838:	0f1c      	lsrs	r4, r3, #28
 801983a:	9b06      	ldr	r3, [sp, #24]
 801983c:	0f1a      	lsrs	r2, r3, #28
 801983e:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8019842:	9b01      	ldr	r3, [sp, #4]
 8019844:	ea42 1603 	orr.w	r6, r2, r3, lsl #4
 8019848:	9b06      	ldr	r3, [sp, #24]
 801984a:	079a      	lsls	r2, r3, #30
 801984c:	9b01      	ldr	r3, [sp, #4]
 801984e:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019852:	079b      	lsls	r3, r3, #30
 8019854:	ea43 0397 	orr.w	r3, r3, r7, lsr #2
 8019858:	405c      	eors	r4, r3
 801985a:	9b01      	ldr	r3, [sp, #4]
 801985c:	4072      	eors	r2, r6
 801985e:	067e      	lsls	r6, r7, #25
 8019860:	ea46 16d3 	orr.w	r6, r6, r3, lsr #7
 8019864:	065b      	lsls	r3, r3, #25
 8019866:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
 801986a:	405c      	eors	r4, r3
 801986c:	9b01      	ldr	r3, [sp, #4]
 801986e:	4072      	eors	r2, r6
 8019870:	ea4b 0607 	orr.w	r6, fp, r7
 8019874:	9f02      	ldr	r7, [sp, #8]
 8019876:	ea49 0303 	orr.w	r3, r9, r3
 801987a:	403b      	ands	r3, r7
 801987c:	9f03      	ldr	r7, [sp, #12]
 801987e:	403e      	ands	r6, r7
 8019880:	9f01      	ldr	r7, [sp, #4]
 8019882:	ea09 0c07 	and.w	ip, r9, r7
 8019886:	9f06      	ldr	r7, [sp, #24]
 8019888:	ea43 030c 	orr.w	r3, r3, ip
 801988c:	ea0b 0707 	and.w	r7, fp, r7
 8019890:	18e3      	adds	r3, r4, r3
 8019892:	ea46 0607 	orr.w	r6, r6, r7
 8019896:	eb42 0606 	adc.w	r6, r2, r6
 801989a:	eb13 0a0a 	adds.w	sl, r3, sl
 801989e:	eb46 0305 	adc.w	r3, r6, r5
 80198a2:	9304      	str	r3, [sp, #16]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80198a4:	e9d0 450a 	ldrd	r4, r5, [r0, #40]	; 0x28
 80198a8:	e9d1 320a 	ldrd	r3, r2, [r1, #40]	; 0x28
 80198ac:	191b      	adds	r3, r3, r4
 80198ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80198b0:	9e05      	ldr	r6, [sp, #20]
 80198b2:	eb45 0202 	adc.w	r2, r5, r2
 80198b6:	191b      	adds	r3, r3, r4
 80198b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80198ba:	eb42 0504 	adc.w	r5, r2, r4
 80198be:	9a07      	ldr	r2, [sp, #28]
 80198c0:	ea82 0408 	eor.w	r4, r2, r8
 80198c4:	9a08      	ldr	r2, [sp, #32]
 80198c6:	4072      	eors	r2, r6
 80198c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80198ca:	4034      	ands	r4, r6
 80198cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80198ce:	4032      	ands	r2, r6
 80198d0:	9e07      	ldr	r6, [sp, #28]
 80198d2:	4074      	eors	r4, r6
 80198d4:	9e08      	ldr	r6, [sp, #32]
 80198d6:	191c      	adds	r4, r3, r4
 80198d8:	ea82 0606 	eor.w	r6, r2, r6
 80198dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198de:	eb45 0206 	adc.w	r2, r5, r6
 80198e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80198e4:	0b9b      	lsrs	r3, r3, #14
 80198e6:	ea43 4685 	orr.w	r6, r3, r5, lsl #18
 80198ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198ec:	0baf      	lsrs	r7, r5, #14
 80198ee:	ea47 4c83 	orr.w	ip, r7, r3, lsl #18
 80198f2:	0c9b      	lsrs	r3, r3, #18
 80198f4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 80198f8:	0caf      	lsrs	r7, r5, #18
 80198fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80198fc:	ea47 3585 	orr.w	r5, r7, r5, lsl #14
 8019900:	ea8c 0705 	eor.w	r7, ip, r5
 8019904:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019906:	ea83 0e06 	eor.w	lr, r3, r6
 801990a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801990c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801990e:	05ed      	lsls	r5, r5, #23
 8019910:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
 8019914:	05f6      	lsls	r6, r6, #23
 8019916:	ea46 2653 	orr.w	r6, r6, r3, lsr #9
 801991a:	ea8e 0306 	eor.w	r3, lr, r6
 801991e:	18e3      	adds	r3, r4, r3
 8019920:	ea87 0705 	eor.w	r7, r7, r5
 8019924:	eb42 0707 	adc.w	r7, r2, r7
 8019928:	9a02      	ldr	r2, [sp, #8]
 801992a:	930d      	str	r3, [sp, #52]	; 0x34
 801992c:	18d2      	adds	r2, r2, r3
 801992e:	9209      	str	r2, [sp, #36]	; 0x24
 8019930:	9a03      	ldr	r2, [sp, #12]
 8019932:	9b04      	ldr	r3, [sp, #16]
 8019934:	417a      	adcs	r2, r7
 8019936:	920a      	str	r2, [sp, #40]	; 0x28
 8019938:	9a04      	ldr	r2, [sp, #16]
 801993a:	ea4f 751a 	mov.w	r5, sl, lsr #28
 801993e:	0f14      	lsrs	r4, r2, #28
 8019940:	ea44 160a 	orr.w	r6, r4, sl, lsl #4
 8019944:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8019948:	0794      	lsls	r4, r2, #30
 801994a:	ea4f 728a 	mov.w	r2, sl, lsl #30
 801994e:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019952:	4055      	eors	r5, r2
 8019954:	ea44 049a 	orr.w	r4, r4, sl, lsr #2
 8019958:	ea4f 624a 	mov.w	r2, sl, lsl #25
 801995c:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8019960:	4074      	eors	r4, r6
 8019962:	065e      	lsls	r6, r3, #25
 8019964:	9b01      	ldr	r3, [sp, #4]
 8019966:	ea46 16da 	orr.w	r6, r6, sl, lsr #7
 801996a:	4055      	eors	r5, r2
 801996c:	4074      	eors	r4, r6
 801996e:	ea43 020a 	orr.w	r2, r3, sl
 8019972:	9e04      	ldr	r6, [sp, #16]
 8019974:	9b06      	ldr	r3, [sp, #24]
 8019976:	431e      	orrs	r6, r3
 8019978:	9b01      	ldr	r3, [sp, #4]
 801997a:	ea03 0e0a 	and.w	lr, r3, sl
 801997e:	9b06      	ldr	r3, [sp, #24]
 8019980:	469c      	mov	ip, r3
 8019982:	9b04      	ldr	r3, [sp, #16]
 8019984:	ea02 0209 	and.w	r2, r2, r9
 8019988:	ea0c 0c03 	and.w	ip, ip, r3
 801998c:	ea06 060b 	and.w	r6, r6, fp
 8019990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019992:	ea42 020e 	orr.w	r2, r2, lr
 8019996:	18aa      	adds	r2, r5, r2
 8019998:	ea46 060c 	orr.w	r6, r6, ip
 801999c:	eb44 0606 	adc.w	r6, r4, r6
 80199a0:	18d3      	adds	r3, r2, r3
 80199a2:	9302      	str	r3, [sp, #8]
 80199a4:	eb46 0307 	adc.w	r3, r6, r7
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80199a8:	e9d0 450c 	ldrd	r4, r5, [r0, #48]	; 0x30
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80199ac:	9303      	str	r3, [sp, #12]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 80199ae:	e9d1 320c 	ldrd	r3, r2, [r1, #48]	; 0x30
 80199b2:	eb13 0c04 	adds.w	ip, r3, r4
 80199b6:	9b07      	ldr	r3, [sp, #28]
 80199b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80199ba:	eb42 0e05 	adc.w	lr, r2, r5
 80199be:	eb1c 0c03 	adds.w	ip, ip, r3
 80199c2:	9b08      	ldr	r3, [sp, #32]
 80199c4:	9a05      	ldr	r2, [sp, #20]
 80199c6:	eb4e 0e03 	adc.w	lr, lr, r3
 80199ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199cc:	ea82 0604 	eor.w	r6, r2, r4
 80199d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199d2:	ea88 0303 	eor.w	r3, r8, r3
 80199d6:	4013      	ands	r3, r2
 80199d8:	ea83 0308 	eor.w	r3, r3, r8
 80199dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199de:	eb1c 0c03 	adds.w	ip, ip, r3
 80199e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199e4:	ea06 0602 	and.w	r6, r6, r2
 80199e8:	9a05      	ldr	r2, [sp, #20]
 80199ea:	ea4f 3493 	mov.w	r4, r3, lsr #14
 80199ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199f0:	ea86 0602 	eor.w	r6, r6, r2
 80199f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199f6:	eb4e 0e06 	adc.w	lr, lr, r6
 80199fa:	ea44 4683 	orr.w	r6, r4, r3, lsl #18
 80199fe:	0b9b      	lsrs	r3, r3, #14
 8019a00:	ea43 4582 	orr.w	r5, r3, r2, lsl #18
 8019a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a06:	0c94      	lsrs	r4, r2, #18
 8019a08:	ea44 3283 	orr.w	r2, r4, r3, lsl #14
 8019a0c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019a0e:	0c9b      	lsrs	r3, r3, #18
 8019a10:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
 8019a14:	ea86 0402 	eor.w	r4, r6, r2
 8019a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a1a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019a1c:	406b      	eors	r3, r5
 8019a1e:	05d5      	lsls	r5, r2, #23
 8019a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a22:	ea45 2552 	orr.w	r5, r5, r2, lsr #9
 8019a26:	05d2      	lsls	r2, r2, #23
 8019a28:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8019a2c:	4062      	eors	r2, r4
 8019a2e:	eb1c 0c02 	adds.w	ip, ip, r2
 8019a32:	ea83 0305 	eor.w	r3, r3, r5
 8019a36:	eb4e 0e03 	adc.w	lr, lr, r3
 8019a3a:	eb19 030c 	adds.w	r3, r9, ip
 8019a3e:	9307      	str	r3, [sp, #28]
 8019a40:	eb4b 030e 	adc.w	r3, fp, lr
 8019a44:	9308      	str	r3, [sp, #32]
 8019a46:	9b02      	ldr	r3, [sp, #8]
 8019a48:	9e03      	ldr	r6, [sp, #12]
 8019a4a:	0f1c      	lsrs	r4, r3, #28
 8019a4c:	9b03      	ldr	r3, [sp, #12]
 8019a4e:	0f1a      	lsrs	r2, r3, #28
 8019a50:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8019a54:	9b02      	ldr	r3, [sp, #8]
 8019a56:	ea42 1503 	orr.w	r5, r2, r3, lsl #4
 8019a5a:	9b03      	ldr	r3, [sp, #12]
 8019a5c:	079a      	lsls	r2, r3, #30
 8019a5e:	9b02      	ldr	r3, [sp, #8]
 8019a60:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019a64:	079b      	lsls	r3, r3, #30
 8019a66:	ea43 0396 	orr.w	r3, r3, r6, lsr #2
 8019a6a:	405c      	eors	r4, r3
 8019a6c:	9b02      	ldr	r3, [sp, #8]
 8019a6e:	406a      	eors	r2, r5
 8019a70:	0675      	lsls	r5, r6, #25
 8019a72:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019a76:	065b      	lsls	r3, r3, #25
 8019a78:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8019a7c:	406a      	eors	r2, r5
 8019a7e:	9d04      	ldr	r5, [sp, #16]
 8019a80:	405c      	eors	r4, r3
 8019a82:	9b02      	ldr	r3, [sp, #8]
 8019a84:	4335      	orrs	r5, r6
 8019a86:	9e01      	ldr	r6, [sp, #4]
 8019a88:	ea4a 0303 	orr.w	r3, sl, r3
 8019a8c:	4033      	ands	r3, r6
 8019a8e:	9e06      	ldr	r6, [sp, #24]
 8019a90:	4035      	ands	r5, r6
 8019a92:	9e02      	ldr	r6, [sp, #8]
 8019a94:	ea0a 0706 	and.w	r7, sl, r6
 8019a98:	9e04      	ldr	r6, [sp, #16]
 8019a9a:	46b1      	mov	r9, r6
 8019a9c:	9e03      	ldr	r6, [sp, #12]
 8019a9e:	433b      	orrs	r3, r7
 8019aa0:	ea09 0606 	and.w	r6, r9, r6
 8019aa4:	18e3      	adds	r3, r4, r3
 8019aa6:	ea45 0506 	orr.w	r5, r5, r6
 8019aaa:	eb42 0505 	adc.w	r5, r2, r5
 8019aae:	eb13 0c0c 	adds.w	ip, r3, ip
 8019ab2:	eb45 0e0e 	adc.w	lr, r5, lr
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019ab6:	e9d1 320e 	ldrd	r3, r2, [r1, #56]	; 0x38
 8019aba:	e9d0 450e 	ldrd	r4, r5, [r0, #56]	; 0x38
 8019abe:	191b      	adds	r3, r3, r4
 8019ac0:	9c05      	ldr	r4, [sp, #20]
 8019ac2:	eb45 0202 	adc.w	r2, r5, r2
 8019ac6:	eb13 0308 	adds.w	r3, r3, r8
 8019aca:	eb42 0504 	adc.w	r5, r2, r4
 8019ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019ad0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019ad2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019ad4:	4054      	eors	r4, r2
 8019ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ad8:	4072      	eors	r2, r6
 8019ada:	9e07      	ldr	r6, [sp, #28]
 8019adc:	4034      	ands	r4, r6
 8019ade:	9e08      	ldr	r6, [sp, #32]
 8019ae0:	4032      	ands	r2, r6
 8019ae2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019ae4:	4074      	eors	r4, r6
 8019ae6:	eb13 0b04 	adds.w	fp, r3, r4
 8019aea:	9c07      	ldr	r4, [sp, #28]
 8019aec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019aee:	9b08      	ldr	r3, [sp, #32]
 8019af0:	ea4f 3794 	mov.w	r7, r4, lsr #14
 8019af4:	9c08      	ldr	r4, [sp, #32]
 8019af6:	ea82 0606 	eor.w	r6, r2, r6
 8019afa:	eb45 0206 	adc.w	r2, r5, r6
 8019afe:	ea47 4984 	orr.w	r9, r7, r4, lsl #18
 8019b02:	0ba6      	lsrs	r6, r4, #14
 8019b04:	9c07      	ldr	r4, [sp, #28]
 8019b06:	9d08      	ldr	r5, [sp, #32]
 8019b08:	ea46 4884 	orr.w	r8, r6, r4, lsl #18
 8019b0c:	0ca7      	lsrs	r7, r4, #18
 8019b0e:	9c08      	ldr	r4, [sp, #32]
 8019b10:	0cae      	lsrs	r6, r5, #18
 8019b12:	ea47 3484 	orr.w	r4, r7, r4, lsl #14
 8019b16:	9d07      	ldr	r5, [sp, #28]
 8019b18:	ea89 0704 	eor.w	r7, r9, r4
 8019b1c:	9c08      	ldr	r4, [sp, #32]
 8019b1e:	ea46 3585 	orr.w	r5, r6, r5, lsl #14
 8019b22:	ea88 0605 	eor.w	r6, r8, r5
 8019b26:	05e5      	lsls	r5, r4, #23
 8019b28:	9c07      	ldr	r4, [sp, #28]
 8019b2a:	ea45 2554 	orr.w	r5, r5, r4, lsr #9
 8019b2e:	05e4      	lsls	r4, r4, #23
 8019b30:	ea44 2453 	orr.w	r4, r4, r3, lsr #9
 8019b34:	407c      	eors	r4, r7
 8019b36:	9b01      	ldr	r3, [sp, #4]
 8019b38:	eb1b 0404 	adds.w	r4, fp, r4
 8019b3c:	ea85 0506 	eor.w	r5, r5, r6
 8019b40:	eb42 0505 	adc.w	r5, r2, r5
 8019b44:	191b      	adds	r3, r3, r4
 8019b46:	9305      	str	r3, [sp, #20]
 8019b48:	9b06      	ldr	r3, [sp, #24]
 8019b4a:	416b      	adcs	r3, r5
 8019b4c:	9306      	str	r3, [sp, #24]
 8019b4e:	ea4f 771c 	mov.w	r7, ip, lsr #28
 8019b52:	ea4f 738c 	mov.w	r3, ip, lsl #30
 8019b56:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
 8019b5a:	ea47 170e 	orr.w	r7, r7, lr, lsl #4
 8019b5e:	405f      	eors	r7, r3
 8019b60:	ea4f 634c 	mov.w	r3, ip, lsl #25
 8019b64:	ea4f 721e 	mov.w	r2, lr, lsr #28
 8019b68:	ea43 13de 	orr.w	r3, r3, lr, lsr #7
 8019b6c:	ea42 180c 	orr.w	r8, r2, ip, lsl #4
 8019b70:	405f      	eors	r7, r3
 8019b72:	ea4f 728e 	mov.w	r2, lr, lsl #30
 8019b76:	9b02      	ldr	r3, [sp, #8]
 8019b78:	ea42 029c 	orr.w	r2, r2, ip, lsr #2
 8019b7c:	ea88 0202 	eor.w	r2, r8, r2
 8019b80:	ea43 060c 	orr.w	r6, r3, ip
 8019b84:	ea4f 684e 	mov.w	r8, lr, lsl #25
 8019b88:	9b03      	ldr	r3, [sp, #12]
 8019b8a:	ea48 18dc 	orr.w	r8, r8, ip, lsr #7
 8019b8e:	ea82 0208 	eor.w	r2, r2, r8
 8019b92:	ea43 080e 	orr.w	r8, r3, lr
 8019b96:	9b04      	ldr	r3, [sp, #16]
 8019b98:	ea08 0803 	and.w	r8, r8, r3
 8019b9c:	9b02      	ldr	r3, [sp, #8]
 8019b9e:	ea03 0b0c 	and.w	fp, r3, ip
 8019ba2:	9b03      	ldr	r3, [sp, #12]
 8019ba4:	ea06 060a 	and.w	r6, r6, sl
 8019ba8:	ea03 090e 	and.w	r9, r3, lr
 8019bac:	ea4b 0306 	orr.w	r3, fp, r6
 8019bb0:	18fb      	adds	r3, r7, r3
 8019bb2:	ea48 0809 	orr.w	r8, r8, r9
 8019bb6:	eb42 0208 	adc.w	r2, r2, r8
 8019bba:	191b      	adds	r3, r3, r4
 8019bbc:	9301      	str	r3, [sp, #4]
    }
    while( i < 80 );
 8019bbe:	4b2b      	ldr	r3, [pc, #172]	; (8019c6c <mbedtls_sha512_process+0xac4>)
 8019bc0:	f101 0140 	add.w	r1, r1, #64	; 0x40
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019bc4:	eb45 0202 	adc.w	r2, r5, r2
    while( i < 80 );
 8019bc8:	428b      	cmp	r3, r1
 8019bca:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8019bce:	f47f abaf 	bne.w	8019330 <mbedtls_sha512_process+0x188>

    ctx->state[0] += A;
 8019bd2:	9901      	ldr	r1, [sp, #4]
 8019bd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 8019bd6:	9f06      	ldr	r7, [sp, #24]
    ctx->state[5] += F;
 8019bd8:	9d08      	ldr	r5, [sp, #32]
    ctx->state[0] += A;
 8019bda:	185b      	adds	r3, r3, r1
 8019bdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019bde:	eb41 0202 	adc.w	r2, r1, r2
 8019be2:	9900      	ldr	r1, [sp, #0]
 8019be4:	610b      	str	r3, [r1, #16]
    ctx->state[1] += B;
 8019be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ctx->state[0] += A;
 8019be8:	614a      	str	r2, [r1, #20]
    ctx->state[1] += B;
 8019bea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019bec:	eb13 030c 	adds.w	r3, r3, ip
 8019bf0:	eb42 020e 	adc.w	r2, r2, lr
 8019bf4:	618b      	str	r3, [r1, #24]
 8019bf6:	61ca      	str	r2, [r1, #28]
    ctx->state[2] += C;
 8019bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019bfa:	9a02      	ldr	r2, [sp, #8]
 8019bfc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8019bfe:	189b      	adds	r3, r3, r2
 8019c00:	9a03      	ldr	r2, [sp, #12]
 8019c02:	eb41 0202 	adc.w	r2, r1, r2
 8019c06:	9900      	ldr	r1, [sp, #0]
 8019c08:	620b      	str	r3, [r1, #32]
    ctx->state[3] += D;
 8019c0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ctx->state[2] += C;
 8019c0c:	624a      	str	r2, [r1, #36]	; 0x24
    ctx->state[3] += D;
 8019c0e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019c10:	9a04      	ldr	r2, [sp, #16]
 8019c12:	eb13 030a 	adds.w	r3, r3, sl
 8019c16:	eb41 0202 	adc.w	r2, r1, r2
 8019c1a:	9900      	ldr	r1, [sp, #0]
 8019c1c:	628b      	str	r3, [r1, #40]	; 0x28
 8019c1e:	62ca      	str	r2, [r1, #44]	; 0x2c
    ctx->state[4] += E;
 8019c20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019c22:	9a05      	ldr	r2, [sp, #20]
 8019c24:	189c      	adds	r4, r3, r2
 8019c26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ctx->state[5] += F;
 8019c28:	9a07      	ldr	r2, [sp, #28]
    ctx->state[4] += E;
 8019c2a:	eb43 0707 	adc.w	r7, r3, r7
    ctx->state[5] += F;
 8019c2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ctx->state[4] += E;
 8019c30:	e9c1 470c 	strd	r4, r7, [r1, #48]	; 0x30
    ctx->state[5] += F;
 8019c34:	189c      	adds	r4, r3, r2
 8019c36:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ctx->state[6] += G;
 8019c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ctx->state[5] += F;
 8019c3a:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[6] += G;
 8019c3e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ctx->state[5] += F;
 8019c40:	e9c1 450e 	strd	r4, r5, [r1, #56]	; 0x38
    ctx->state[6] += G;
 8019c44:	189c      	adds	r4, r3, r2
 8019c46:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019c48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ctx->state[7] += H;
 8019c4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ctx->state[6] += G;
 8019c4c:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[7] += H;
 8019c50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ctx->state[6] += G;
 8019c52:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
    ctx->state[7] += H;
 8019c56:	189d      	adds	r5, r3, r2
 8019c58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019c5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019c5c:	eb43 0404 	adc.w	r4, r3, r4
 8019c60:	e9c1 5412 	strd	r5, r4, [r1, #72]	; 0x48
}
 8019c64:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
 8019c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c6c:	0802ca98 	.word	0x0802ca98

08019c70 <mbedtls_sha512_update.part.0>:
#endif /* !MBEDTLS_SHA512_PROCESS_ALT */

/*
 * SHA-512 process buffer
 */
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c74:	4615      	mov	r5, r2
    unsigned int left;

    if( ilen == 0 )
        return;

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019c76:	e9d0 2300 	ldrd	r2, r3, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019c7a:	4689      	mov	r9, r1
 8019c7c:	1956      	adds	r6, r2, r5
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 8019c7e:	f04f 0100 	mov.w	r1, #0
 8019c82:	eb53 0701 	adcs.w	r7, r3, r1
 8019c86:	f04f 0a00 	mov.w	sl, #0
 8019c8a:	f04f 0b00 	mov.w	fp, #0
 8019c8e:	bf24      	itt	cs
 8019c90:	f04f 0a01 	movcs.w	sl, #1
 8019c94:	f04f 0b00 	movcs.w	fp, #0

    if( ctx->total[0] < (uint64_t) ilen )
 8019c98:	ea5a 030b 	orrs.w	r3, sl, fp
    ctx->total[0] += (uint64_t) ilen;
 8019c9c:	e9c0 6700 	strd	r6, r7, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019ca0:	4604      	mov	r4, r0
    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019ca2:	f002 087f 	and.w	r8, r2, #127	; 0x7f
    if( ctx->total[0] < (uint64_t) ilen )
 8019ca6:	d006      	beq.n	8019cb6 <mbedtls_sha512_update.part.0+0x46>
        ctx->total[1]++;
 8019ca8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8019cac:	3301      	adds	r3, #1
 8019cae:	f142 0200 	adc.w	r2, r2, #0
 8019cb2:	e9c4 3202 	strd	r3, r2, [r4, #8]

    if( left && ilen >= fill )
 8019cb6:	f1b8 0f00 	cmp.w	r8, #0
 8019cba:	d014      	beq.n	8019ce6 <mbedtls_sha512_update.part.0+0x76>
    fill = 128 - left;
 8019cbc:	f1c8 0780 	rsb	r7, r8, #128	; 0x80
    if( left && ilen >= fill )
 8019cc0:	42af      	cmp	r7, r5
 8019cc2:	d810      	bhi.n	8019ce6 <mbedtls_sha512_update.part.0+0x76>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8019cc4:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8019cc8:	4649      	mov	r1, r9
 8019cca:	463a      	mov	r2, r7
 8019ccc:	eb06 0008 	add.w	r0, r6, r8
 8019cd0:	f008 fa6a 	bl	80221a8 <memcpy>
        mbedtls_sha512_process( ctx, ctx->buffer );
 8019cd4:	4631      	mov	r1, r6
 8019cd6:	4620      	mov	r0, r4
 8019cd8:	f7ff fa66 	bl	80191a8 <mbedtls_sha512_process>
        input += fill;
 8019cdc:	3d80      	subs	r5, #128	; 0x80
        ilen  -= fill;
 8019cde:	4445      	add	r5, r8
        input += fill;
 8019ce0:	44b9      	add	r9, r7
        left = 0;
 8019ce2:	f04f 0800 	mov.w	r8, #0
 8019ce6:	462e      	mov	r6, r5
 8019ce8:	eb09 0705 	add.w	r7, r9, r5
 8019cec:	e003      	b.n	8019cf6 <mbedtls_sha512_update.part.0+0x86>
    }

    while( ilen >= 128 )
    {
        mbedtls_sha512_process( ctx, input );
 8019cee:	4620      	mov	r0, r4
 8019cf0:	f7ff fa5a 	bl	80191a8 <mbedtls_sha512_process>
        input += 128;
        ilen  -= 128;
 8019cf4:	3e80      	subs	r6, #128	; 0x80
    while( ilen >= 128 )
 8019cf6:	2e7f      	cmp	r6, #127	; 0x7f
 8019cf8:	eba7 0106 	sub.w	r1, r7, r6
 8019cfc:	d8f7      	bhi.n	8019cee <mbedtls_sha512_update.part.0+0x7e>
 8019cfe:	09ea      	lsrs	r2, r5, #7
 8019d00:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8019d04:	f025 017f 	bic.w	r1, r5, #127	; 0x7f
 8019d08:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8019d0c:	4449      	add	r1, r9
 8019d0e:	b132      	cbz	r2, 8019d1e <mbedtls_sha512_update.part.0+0xae>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019d10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019d14:	4440      	add	r0, r8
}
 8019d16:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019d1a:	f008 ba45 	b.w	80221a8 <memcpy>
}
 8019d1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019d22 <mbedtls_sha512_update>:
    if( ilen == 0 )
 8019d22:	b10a      	cbz	r2, 8019d28 <mbedtls_sha512_update+0x6>
 8019d24:	f7ff bfa4 	b.w	8019c70 <mbedtls_sha512_update.part.0>
}
 8019d28:	4770      	bx	lr
	...

08019d2c <mbedtls_sha512_finish>:

/*
 * SHA-512 final digest
 */
void mbedtls_sha512_finish( mbedtls_sha512_context *ctx, unsigned char output[64] )
{
 8019d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d2e:	460d      	mov	r5, r1
    size_t last, padn;
    uint64_t high, low;
    unsigned char msglen[16];

    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
 8019d30:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
    high = ( ctx->total[0] >> 61 )
 8019d34:	e9d0 2300 	ldrd	r2, r3, [r0]
         | ( ctx->total[1] <<  3 );
 8019d38:	00c9      	lsls	r1, r1, #3
{
 8019d3a:	b085      	sub	sp, #20
         | ( ctx->total[1] <<  3 );
 8019d3c:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
{
 8019d40:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, msglen, 0 );
 8019d42:	0e0f      	lsrs	r7, r1, #24
    high = ( ctx->total[0] >> 61 )
 8019d44:	0f58      	lsrs	r0, r3, #29
    low  = ( ctx->total[0] <<  3 );
 8019d46:	00db      	lsls	r3, r3, #3
 8019d48:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, msglen, 0 );
 8019d4c:	f88d 7000 	strb.w	r7, [sp]
 8019d50:	0c0f      	lsrs	r7, r1, #16
 8019d52:	f88d 7001 	strb.w	r7, [sp, #1]
 8019d56:	f88d 1003 	strb.w	r1, [sp, #3]
 8019d5a:	0a0f      	lsrs	r7, r1, #8
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d5c:	0e19      	lsrs	r1, r3, #24
    high = ( ctx->total[0] >> 61 )
 8019d5e:	ea40 00c6 	orr.w	r0, r0, r6, lsl #3
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d62:	f88d 1008 	strb.w	r1, [sp, #8]
    low  = ( ctx->total[0] <<  3 );
 8019d66:	00d6      	lsls	r6, r2, #3
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d68:	0c19      	lsrs	r1, r3, #16

    last = (size_t)( ctx->total[0] & 0x7F );
 8019d6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 8019d6e:	2a6f      	cmp	r2, #111	; 0x6f
 8019d70:	ba00      	rev	r0, r0
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d72:	f88d 1009 	strb.w	r1, [sp, #9]
 8019d76:	ea4f 2113 	mov.w	r1, r3, lsr #8
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 8019d7a:	bf94      	ite	ls
 8019d7c:	f1c2 0270 	rsbls	r2, r2, #112	; 0x70
 8019d80:	f1c2 02f0 	rsbhi	r2, r2, #240	; 0xf0
    PUT_UINT64_BE( high, msglen, 0 );
 8019d84:	9001      	str	r0, [sp, #4]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d86:	f88d 100a 	strb.w	r1, [sp, #10]

    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019d8a:	4620      	mov	r0, r4
 8019d8c:	4969      	ldr	r1, [pc, #420]	; (8019f34 <mbedtls_sha512_finish+0x208>)
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d8e:	f88d 300b 	strb.w	r3, [sp, #11]
 8019d92:	ba36      	rev	r6, r6
    PUT_UINT64_BE( high, msglen, 0 );
 8019d94:	f88d 7002 	strb.w	r7, [sp, #2]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019d98:	9603      	str	r6, [sp, #12]
    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019d9a:	f7ff ffc2 	bl	8019d22 <mbedtls_sha512_update>
    if( ilen == 0 )
 8019d9e:	2210      	movs	r2, #16
 8019da0:	4669      	mov	r1, sp
 8019da2:	4620      	mov	r0, r4
 8019da4:	f7ff ff64 	bl	8019c70 <mbedtls_sha512_update.part.0>
    mbedtls_sha512_update( ctx, msglen, 16 );

    PUT_UINT64_BE( ctx->state[0], output,  0 );
 8019da8:	7de3      	ldrb	r3, [r4, #23]
 8019daa:	702b      	strb	r3, [r5, #0]
 8019dac:	8ae3      	ldrh	r3, [r4, #22]
 8019dae:	706b      	strb	r3, [r5, #1]
 8019db0:	6963      	ldr	r3, [r4, #20]
 8019db2:	0a1b      	lsrs	r3, r3, #8
 8019db4:	70ab      	strb	r3, [r5, #2]
 8019db6:	6963      	ldr	r3, [r4, #20]
 8019db8:	70eb      	strb	r3, [r5, #3]
 8019dba:	7ce3      	ldrb	r3, [r4, #19]
 8019dbc:	712b      	strb	r3, [r5, #4]
 8019dbe:	8a63      	ldrh	r3, [r4, #18]
 8019dc0:	716b      	strb	r3, [r5, #5]
 8019dc2:	6923      	ldr	r3, [r4, #16]
 8019dc4:	0a1b      	lsrs	r3, r3, #8
 8019dc6:	71ab      	strb	r3, [r5, #6]
 8019dc8:	6923      	ldr	r3, [r4, #16]
 8019dca:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 8019dcc:	7fe3      	ldrb	r3, [r4, #31]
 8019dce:	722b      	strb	r3, [r5, #8]
 8019dd0:	8be3      	ldrh	r3, [r4, #30]
 8019dd2:	726b      	strb	r3, [r5, #9]
 8019dd4:	69e3      	ldr	r3, [r4, #28]
 8019dd6:	0a1b      	lsrs	r3, r3, #8
 8019dd8:	72ab      	strb	r3, [r5, #10]
 8019dda:	69e3      	ldr	r3, [r4, #28]
 8019ddc:	72eb      	strb	r3, [r5, #11]
 8019dde:	7ee3      	ldrb	r3, [r4, #27]
 8019de0:	732b      	strb	r3, [r5, #12]
 8019de2:	8b63      	ldrh	r3, [r4, #26]
 8019de4:	736b      	strb	r3, [r5, #13]
 8019de6:	69a3      	ldr	r3, [r4, #24]
 8019de8:	0a1b      	lsrs	r3, r3, #8
 8019dea:	73ab      	strb	r3, [r5, #14]
 8019dec:	69a3      	ldr	r3, [r4, #24]
 8019dee:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 8019df0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8019df4:	742b      	strb	r3, [r5, #16]
 8019df6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8019df8:	746b      	strb	r3, [r5, #17]
 8019dfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019dfc:	0a1b      	lsrs	r3, r3, #8
 8019dfe:	74ab      	strb	r3, [r5, #18]
 8019e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e02:	74eb      	strb	r3, [r5, #19]
 8019e04:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8019e08:	752b      	strb	r3, [r5, #20]
 8019e0a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8019e0c:	756b      	strb	r3, [r5, #21]
 8019e0e:	6a23      	ldr	r3, [r4, #32]
 8019e10:	0a1b      	lsrs	r3, r3, #8
 8019e12:	75ab      	strb	r3, [r5, #22]
 8019e14:	6a23      	ldr	r3, [r4, #32]
 8019e16:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 8019e18:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8019e1c:	762b      	strb	r3, [r5, #24]
 8019e1e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8019e20:	766b      	strb	r3, [r5, #25]
 8019e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019e24:	0a1b      	lsrs	r3, r3, #8
 8019e26:	76ab      	strb	r3, [r5, #26]
 8019e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019e2a:	76eb      	strb	r3, [r5, #27]
 8019e2c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8019e30:	772b      	strb	r3, [r5, #28]
 8019e32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8019e34:	776b      	strb	r3, [r5, #29]
 8019e36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019e38:	0a1b      	lsrs	r3, r3, #8
 8019e3a:	77ab      	strb	r3, [r5, #30]
 8019e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019e3e:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 8019e40:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019e44:	f885 3020 	strb.w	r3, [r5, #32]
 8019e48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019e4a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 8019e4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019e50:	0a1b      	lsrs	r3, r3, #8
 8019e52:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8019e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019e58:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 8019e5c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8019e60:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8019e64:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019e66:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8019e6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019e6c:	0a1b      	lsrs	r3, r3, #8
 8019e6e:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 8019e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019e74:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 8019e78:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8019e7c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8019e80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8019e82:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 8019e86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019e88:	0a1b      	lsrs	r3, r3, #8
 8019e8a:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 8019e8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019e90:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 8019e94:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8019e98:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8019e9c:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8019e9e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 8019ea2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019ea4:	0a1b      	lsrs	r3, r3, #8
 8019ea6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 8019eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019eac:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 8019eb0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d13b      	bne.n	8019f30 <mbedtls_sha512_finish+0x204>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 8019eb8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8019ebc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8019ec0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8019ec4:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 8019ec8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019eca:	0a1b      	lsrs	r3, r3, #8
 8019ecc:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8019ed0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019ed2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 8019ed6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019eda:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8019ede:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8019ee2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 8019ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ee8:	0a1b      	lsrs	r3, r3, #8
 8019eea:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8019eee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019ef0:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 8019ef4:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8019ef8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8019efc:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8019f00:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 8019f04:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019f06:	0a1b      	lsrs	r3, r3, #8
 8019f08:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 8019f0c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019f0e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 8019f12:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8019f16:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 8019f1a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8019f1e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 8019f22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019f24:	0a1b      	lsrs	r3, r3, #8
 8019f26:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8019f2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8019f2c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }
}
 8019f30:	b005      	add	sp, #20
 8019f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f34:	0802ca98 	.word	0x0802ca98

08019f38 <mbedtls_sha512>:
/*
 * output = SHA-512( input buffer )
 */
void mbedtls_sha512( const unsigned char *input, size_t ilen,
             unsigned char output[64], int is384 )
{
 8019f38:	b570      	push	{r4, r5, r6, lr}
 8019f3a:	b0b8      	sub	sp, #224	; 0xe0
 8019f3c:	4605      	mov	r5, r0
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 8019f3e:	a802      	add	r0, sp, #8
{
 8019f40:	9301      	str	r3, [sp, #4]
 8019f42:	4614      	mov	r4, r2
 8019f44:	460e      	mov	r6, r1
    mbedtls_sha512_init( &ctx );
 8019f46:	f7ff f880 	bl	801904a <mbedtls_sha512_init>
    mbedtls_sha512_starts( &ctx, is384 );
 8019f4a:	9901      	ldr	r1, [sp, #4]
 8019f4c:	a802      	add	r0, sp, #8
 8019f4e:	f7ff f88f 	bl	8019070 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx, input, ilen );
 8019f52:	4632      	mov	r2, r6
 8019f54:	4629      	mov	r1, r5
 8019f56:	a802      	add	r0, sp, #8
 8019f58:	f7ff fee3 	bl	8019d22 <mbedtls_sha512_update>
    mbedtls_sha512_finish( &ctx, output );
 8019f5c:	4621      	mov	r1, r4
 8019f5e:	a802      	add	r0, sp, #8
 8019f60:	f7ff fee4 	bl	8019d2c <mbedtls_sha512_finish>
    mbedtls_sha512_free( &ctx );
 8019f64:	a802      	add	r0, sp, #8
 8019f66:	f7ff f874 	bl	8019052 <mbedtls_sha512_free>
}
 8019f6a:	b038      	add	sp, #224	; 0xe0
 8019f6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019f70 <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 8019f70:	4602      	mov	r2, r0
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 8019f72:	4804      	ldr	r0, [pc, #16]	; (8019f84 <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
 8019f74:	6803      	ldr	r3, [r0, #0]
 8019f76:	b90b      	cbnz	r3, 8019f7c <mbedtls_ssl_ciphersuite_from_id+0xc>
            return( cur );

        cur++;
    }

    return( NULL );
 8019f78:	4618      	mov	r0, r3
}
 8019f7a:	4770      	bx	lr
        if( cur->id == ciphersuite )
 8019f7c:	4293      	cmp	r3, r2
 8019f7e:	d0fc      	beq.n	8019f7a <mbedtls_ssl_ciphersuite_from_id+0xa>
        cur++;
 8019f80:	3020      	adds	r0, #32
 8019f82:	e7f7      	b.n	8019f74 <mbedtls_ssl_ciphersuite_from_id+0x4>
 8019f84:	0802cdf8 	.word	0x0802cdf8

08019f88 <mbedtls_ssl_list_ciphersuites>:
{
 8019f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( supported_init == 0 )
 8019f8a:	4c0e      	ldr	r4, [pc, #56]	; (8019fc4 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8019f8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8019f8e:	b953      	cbnz	r3, 8019fa6 <mbedtls_ssl_list_ciphersuites+0x1e>
 8019f90:	4e0d      	ldr	r6, [pc, #52]	; (8019fc8 <mbedtls_ssl_list_ciphersuites+0x40>)
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 8019f92:	4621      	mov	r1, r4
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 8019f94:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8019f98:	f856 5b04 	ldr.w	r5, [r6], #4
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 8019f9c:	b92d      	cbnz	r5, 8019faa <mbedtls_ssl_list_ciphersuites+0x22>
        *q = 0;
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	600b      	str	r3, [r1, #0]
        supported_init = 1;
 8019fa2:	2301      	movs	r3, #1
 8019fa4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8019fa6:	4807      	ldr	r0, [pc, #28]	; (8019fc4 <mbedtls_ssl_list_ciphersuites+0x3c>)
 8019fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 8019faa:	42b9      	cmp	r1, r7
 8019fac:	d2f7      	bcs.n	8019f9e <mbedtls_ssl_list_ciphersuites+0x16>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 8019fae:	4628      	mov	r0, r5
 8019fb0:	f7ff ffde 	bl	8019f70 <mbedtls_ssl_ciphersuite_from_id>
 8019fb4:	2800      	cmp	r0, #0
 8019fb6:	d0ef      	beq.n	8019f98 <mbedtls_ssl_list_ciphersuites+0x10>
 8019fb8:	7a03      	ldrb	r3, [r0, #8]
 8019fba:	2b2a      	cmp	r3, #42	; 0x2a
                *(q++) = *p;
 8019fbc:	bf18      	it	ne
 8019fbe:	f841 5b04 	strne.w	r5, [r1], #4
             p++ )
 8019fc2:	e7e9      	b.n	8019f98 <mbedtls_ssl_list_ciphersuites+0x10>
 8019fc4:	20001070 	.word	0x20001070
 8019fc8:	0802d058 	.word	0x0802d058

08019fcc <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 8019fcc:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 8019fce:	f7ff ffcf 	bl	8019f70 <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 8019fd2:	b108      	cbz	r0, 8019fd8 <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 8019fd4:	6840      	ldr	r0, [r0, #4]
}
 8019fd6:	bd08      	pop	{r3, pc}
        return( "unknown" );
 8019fd8:	4800      	ldr	r0, [pc, #0]	; (8019fdc <mbedtls_ssl_get_ciphersuite_name+0x10>)
 8019fda:	e7fc      	b.n	8019fd6 <mbedtls_ssl_get_ciphersuite_name+0xa>
 8019fdc:	080309ae 	.word	0x080309ae

08019fe0 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 8019fe0:	7a80      	ldrb	r0, [r0, #10]
 8019fe2:	1e43      	subs	r3, r0, #1
 8019fe4:	2b09      	cmp	r3, #9
 8019fe6:	d808      	bhi.n	8019ffa <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x1a>
 8019fe8:	e8df f003 	tbb	[pc, r3]
 8019fec:	0a090909 	.word	0x0a090909
 8019ff0:	07090707 	.word	0x07090707
 8019ff4:	0505      	.short	0x0505
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
 8019ff6:	2002      	movs	r0, #2
 8019ff8:	4770      	bx	lr

        default:
            return( MBEDTLS_PK_NONE );
 8019ffa:	2000      	movs	r0, #0
 8019ffc:	4770      	bx	lr
            return( MBEDTLS_PK_RSA );
 8019ffe:	2001      	movs	r0, #1
    }
}
 801a000:	4770      	bx	lr

0801a002 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a002:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 801a004:	4603      	mov	r3, r0
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a006:	b112      	cbz	r2, 801a00e <mbedtls_ssl_own_key+0xc>
 801a008:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 801a00c:	b910      	cbnz	r0, 801a014 <mbedtls_ssl_own_key+0x12>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	6c18      	ldr	r0, [r3, #64]	; 0x40

    return( key_cert == NULL ? NULL : key_cert->key );
 801a012:	b100      	cbz	r0, 801a016 <mbedtls_ssl_own_key+0x14>
 801a014:	6840      	ldr	r0, [r0, #4]
}
 801a016:	4770      	bx	lr

0801a018 <ssl_write_client_hello>:

    return( 0 );
}

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 801a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a01c:	b087      	sub	sp, #28
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a01e:	4bbc      	ldr	r3, [pc, #752]	; (801a310 <ssl_write_client_hello+0x2f8>)
 801a020:	9300      	str	r3, [sp, #0]
{
 801a022:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a024:	f240 23cf 	movw	r3, #719	; 0x2cf
 801a028:	2102      	movs	r1, #2
 801a02a:	4aba      	ldr	r2, [pc, #744]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a02c:	f7f6 fc2e 	bl	801088c <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 801a030:	6821      	ldr	r1, [r4, #0]
 801a032:	698b      	ldr	r3, [r1, #24]
 801a034:	b96b      	cbnz	r3, 801a052 <ssl_write_client_hello+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a036:	4bb8      	ldr	r3, [pc, #736]	; (801a318 <ssl_write_client_hello+0x300>)
 801a038:	9300      	str	r3, [sp, #0]
 801a03a:	4ab6      	ldr	r2, [pc, #728]	; (801a314 <ssl_write_client_hello+0x2fc>)
        return( MBEDTLS_ERR_SSL_NO_RNG );
 801a03c:	4db7      	ldr	r5, [pc, #732]	; (801a31c <ssl_write_client_hello+0x304>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a03e:	f240 23d3 	movw	r3, #723	; 0x2d3
 801a042:	2101      	movs	r1, #1
 801a044:	4620      	mov	r0, r4
 801a046:	f7f6 fc21 	bl	801088c <mbedtls_debug_print_msg>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );

    return( 0 );
}
 801a04a:	4628      	mov	r0, r5
 801a04c:	b007      	add	sp, #28
 801a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a052:	68a3      	ldr	r3, [r4, #8]
 801a054:	b92b      	cbnz	r3, 801a062 <ssl_write_client_hello+0x4a>
        ssl->major_ver = ssl->conf->min_major_ver;
 801a056:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 801a05a:	6123      	str	r3, [r4, #16]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 801a05c:	f891 306b 	ldrb.w	r3, [r1, #107]	; 0x6b
 801a060:	6163      	str	r3, [r4, #20]
    if( ssl->conf->max_major_ver == 0 )
 801a062:	f891 0068 	ldrb.w	r0, [r1, #104]	; 0x68
 801a066:	b950      	cbnz	r0, 801a07e <ssl_write_client_hello+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a068:	4bad      	ldr	r3, [pc, #692]	; (801a320 <ssl_write_client_hello+0x308>)
 801a06a:	9300      	str	r3, [sp, #0]
 801a06c:	4aa9      	ldr	r2, [pc, #676]	; (801a314 <ssl_write_client_hello+0x2fc>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a06e:	4dad      	ldr	r5, [pc, #692]	; (801a324 <ssl_write_client_hello+0x30c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a070:	f240 23e1 	movw	r3, #737	; 0x2e1
 801a074:	2101      	movs	r1, #1
 801a076:	4620      	mov	r0, r4
 801a078:	f7f6 fc08 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a07c:	e7e5      	b.n	801a04a <ssl_write_client_hello+0x32>
    buf = ssl->out_msg;
 801a07e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                       ssl->conf->transport, p );
 801a082:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
    buf = ssl->out_msg;
 801a086:	9304      	str	r3, [sp, #16]
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801a088:	f891 1069 	ldrb.w	r1, [r1, #105]	; 0x69
 801a08c:	3304      	adds	r3, #4
 801a08e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801a092:	f005 f83f 	bl	801f114 <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 801a096:	9b04      	ldr	r3, [sp, #16]
 801a098:	4a9e      	ldr	r2, [pc, #632]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a09a:	795b      	ldrb	r3, [r3, #5]
 801a09c:	9302      	str	r3, [sp, #8]
 801a09e:	9b04      	ldr	r3, [sp, #16]
 801a0a0:	791b      	ldrb	r3, [r3, #4]
 801a0a2:	9301      	str	r3, [sp, #4]
 801a0a4:	4ba0      	ldr	r3, [pc, #640]	; (801a328 <ssl_write_client_hello+0x310>)
 801a0a6:	9300      	str	r3, [sp, #0]
 801a0a8:	2103      	movs	r1, #3
 801a0aa:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f7f6 fbec 	bl	801088c <mbedtls_debug_print_msg>
    t = mbedtls_time( NULL );
 801a0b4:	2000      	movs	r0, #0
    unsigned char *p = ssl->handshake->randbytes;
 801a0b6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    t = mbedtls_time( NULL );
 801a0b8:	f7e9 f8bc 	bl	8003234 <time>
    *p++ = (unsigned char)( t >> 24 );
 801a0bc:	0e03      	lsrs	r3, r0, #24
 801a0be:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
    *p++ = (unsigned char)( t >> 16 );
 801a0c2:	0c03      	lsrs	r3, r0, #16
 801a0c4:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
    *p++ = (unsigned char)( t >>  8 );
 801a0c8:	0a03      	lsrs	r3, r0, #8
 801a0ca:	f885 32ae 	strb.w	r3, [r5, #686]	; 0x2ae
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a0ce:	4b97      	ldr	r3, [pc, #604]	; (801a32c <ssl_write_client_hello+0x314>)
    *p++ = (unsigned char)( t       );
 801a0d0:	f885 02af 	strb.w	r0, [r5, #687]	; 0x2af
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a0d4:	4a8f      	ldr	r2, [pc, #572]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a0d6:	9300      	str	r3, [sp, #0]
 801a0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a0dc:	f240 23b7 	movw	r3, #695	; 0x2b7
 801a0e0:	2103      	movs	r1, #3
 801a0e2:	4620      	mov	r0, r4
 801a0e4:	f7f6 fbd2 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 801a0e8:	6823      	ldr	r3, [r4, #0]
 801a0ea:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 801a0ee:	699e      	ldr	r6, [r3, #24]
 801a0f0:	69d8      	ldr	r0, [r3, #28]
 801a0f2:	221c      	movs	r2, #28
 801a0f4:	47b0      	blx	r6
 801a0f6:	4605      	mov	r5, r0
 801a0f8:	b150      	cbz	r0, 801a110 <ssl_write_client_hello+0xf8>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 801a0fa:	4b8d      	ldr	r3, [pc, #564]	; (801a330 <ssl_write_client_hello+0x318>)
 801a0fc:	9300      	str	r3, [sp, #0]
 801a0fe:	9001      	str	r0, [sp, #4]
 801a100:	f240 23f9 	movw	r3, #761	; 0x2f9
 801a104:	4a83      	ldr	r2, [pc, #524]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a106:	2101      	movs	r1, #1
 801a108:	4620      	mov	r0, r4
 801a10a:	f7f6 fbef 	bl	80108ec <mbedtls_debug_print_ret>
        return( ret );
 801a10e:	e79c      	b.n	801a04a <ssl_write_client_hello+0x32>
    p += 2;
 801a110:	9b04      	ldr	r3, [sp, #16]
 801a112:	1d99      	adds	r1, r3, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 801a114:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a116:	4608      	mov	r0, r1
 801a118:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801a11c:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801a120:	f852 5b04 	ldr.w	r5, [r2], #4
 801a124:	f840 5b04 	str.w	r5, [r0], #4
 801a128:	429a      	cmp	r2, r3
 801a12a:	d1f9      	bne.n	801a120 <ssl_write_client_hello+0x108>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 801a12c:	2320      	movs	r3, #32
 801a12e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a132:	4b80      	ldr	r3, [pc, #512]	; (801a334 <ssl_write_client_hello+0x31c>)
 801a134:	4a77      	ldr	r2, [pc, #476]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a136:	9300      	str	r3, [sp, #0]
 801a138:	2103      	movs	r1, #3
 801a13a:	f240 23fe 	movw	r3, #766	; 0x2fe
 801a13e:	4620      	mov	r0, r4
 801a140:	f7f6 fc04 	bl	801094c <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 801a144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a146:	690b      	ldr	r3, [r1, #16]
    if( n < 16 || n > 32 ||
 801a148:	f1a3 0210 	sub.w	r2, r3, #16
 801a14c:	2a10      	cmp	r2, #16
 801a14e:	68a2      	ldr	r2, [r4, #8]
 801a150:	f200 80d8 	bhi.w	801a304 <ssl_write_client_hello+0x2ec>
 801a154:	2a00      	cmp	r2, #0
 801a156:	f040 80d8 	bne.w	801a30a <ssl_write_client_hello+0x2f2>
        ssl->handshake->resume == 0 )
 801a15a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801a15c:	f8d2 2330 	ldr.w	r2, [r2, #816]	; 0x330
        n = 0;
 801a160:	2a00      	cmp	r2, #0
 801a162:	bf08      	it	eq
 801a164:	2300      	moveq	r3, #0
        if( ssl->session_negotiate->ticket != NULL &&
 801a166:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 801a168:	b172      	cbz	r2, 801a188 <ssl_write_client_hello+0x170>
 801a16a:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 801a16c:	b162      	cbz	r2, 801a188 <ssl_write_client_hello+0x170>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 801a16e:	6823      	ldr	r3, [r4, #0]
 801a170:	2220      	movs	r2, #32
 801a172:	699d      	ldr	r5, [r3, #24]
 801a174:	69d8      	ldr	r0, [r3, #28]
 801a176:	3114      	adds	r1, #20
 801a178:	47a8      	blx	r5
            if( ret != 0 )
 801a17a:	4605      	mov	r5, r0
 801a17c:	2800      	cmp	r0, #0
 801a17e:	f47f af64 	bne.w	801a04a <ssl_write_client_hello+0x32>
            ssl->session_negotiate->id_len = n = 32;
 801a182:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a184:	2320      	movs	r3, #32
 801a186:	6113      	str	r3, [r2, #16]
    *p++ = (unsigned char) n;
 801a188:	9a04      	ldr	r2, [sp, #16]
 801a18a:	f102 0627 	add.w	r6, r2, #39	; 0x27
 801a18e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801a192:	4631      	mov	r1, r6
    for( i = 0; i < n; i++ )
 801a194:	2500      	movs	r5, #0
 801a196:	429d      	cmp	r5, r3
 801a198:	f040 80e0 	bne.w	801a35c <ssl_write_client_hello+0x344>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 801a19c:	4b66      	ldr	r3, [pc, #408]	; (801a338 <ssl_write_client_hello+0x320>)
 801a19e:	4a5d      	ldr	r2, [pc, #372]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a1a0:	9501      	str	r5, [sp, #4]
 801a1a2:	9300      	str	r3, [sp, #0]
 801a1a4:	2103      	movs	r1, #3
 801a1a6:	f240 3333 	movw	r3, #819	; 0x333
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f7f6 fb6e 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 801a1b0:	4b62      	ldr	r3, [pc, #392]	; (801a33c <ssl_write_client_hello+0x324>)
 801a1b2:	4a58      	ldr	r2, [pc, #352]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a1b4:	9300      	str	r3, [sp, #0]
 801a1b6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801a1ba:	f44f 734d 	mov.w	r3, #820	; 0x334
 801a1be:	2103      	movs	r1, #3
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f7f6 fbc3 	bl	801094c <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 801a1c6:	6823      	ldr	r3, [r4, #0]
 801a1c8:	6962      	ldr	r2, [r4, #20]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a1ca:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801a358 <ssl_write_client_hello+0x340>
 801a1ce:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a1d2:	f8df b140 	ldr.w	fp, [pc, #320]	; 801a314 <ssl_write_client_hello+0x2fc>
 801a1d6:	eb06 0805 	add.w	r8, r6, r5
    p += 2;
 801a1da:	f108 0602 	add.w	r6, r8, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a1de:	3f04      	subs	r7, #4
    n = 0;
 801a1e0:	2500      	movs	r5, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a1e2:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801a1e6:	f106 0902 	add.w	r9, r6, #2
 801a1ea:	2800      	cmp	r0, #0
 801a1ec:	f040 80bd 	bne.w	801a36a <ssl_write_client_hello+0x352>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a1f0:	68a3      	ldr	r3, [r4, #8]
 801a1f2:	b923      	cbnz	r3, 801a1fe <ssl_write_client_hello+0x1e6>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 801a1f4:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 801a1f6:	23ff      	movs	r3, #255	; 0xff
 801a1f8:	7073      	strb	r3, [r6, #1]
        n++;
 801a1fa:	3501      	adds	r5, #1
 801a1fc:	464e      	mov	r6, r9
    *q++ = (unsigned char)( n >> 7 );
 801a1fe:	09eb      	lsrs	r3, r5, #7
 801a200:	f888 3000 	strb.w	r3, [r8]
    *q++ = (unsigned char)( n << 1 );
 801a204:	006b      	lsls	r3, r5, #1
 801a206:	f888 3001 	strb.w	r3, [r8, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites", n ) );
 801a20a:	4b4d      	ldr	r3, [pc, #308]	; (801a340 <ssl_write_client_hello+0x328>)
 801a20c:	4a41      	ldr	r2, [pc, #260]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a20e:	9501      	str	r5, [sp, #4]
 801a210:	9300      	str	r3, [sp, #0]
 801a212:	2103      	movs	r1, #3
 801a214:	f44f 7366 	mov.w	r3, #920	; 0x398
 801a218:	4620      	mov	r0, r4
 801a21a:	f7f6 fb37 	bl	801088c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 801a21e:	2501      	movs	r5, #1
 801a220:	4b48      	ldr	r3, [pc, #288]	; (801a344 <ssl_write_client_hello+0x32c>)
 801a222:	4a3c      	ldr	r2, [pc, #240]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a224:	9300      	str	r3, [sp, #0]
 801a226:	2103      	movs	r1, #3
 801a228:	f240 33b7 	movw	r3, #951	; 0x3b7
 801a22c:	4620      	mov	r0, r4
 801a22e:	9501      	str	r5, [sp, #4]
 801a230:	f7f6 fb2c 	bl	801088c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a234:	f04f 0900 	mov.w	r9, #0
 801a238:	4b43      	ldr	r3, [pc, #268]	; (801a348 <ssl_write_client_hello+0x330>)
 801a23a:	9300      	str	r3, [sp, #0]
        *p++ = 1;
 801a23c:	4637      	mov	r7, r6
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a23e:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 801a242:	4a34      	ldr	r2, [pc, #208]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a244:	f8cd 9004 	str.w	r9, [sp, #4]
 801a248:	2103      	movs	r1, #3
 801a24a:	4620      	mov	r0, r4
 801a24c:	f7f6 fb1e 	bl	801088c <mbedtls_debug_print_msg>
        *p++ = 1;
 801a250:	f807 5b02 	strb.w	r5, [r7], #2
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a254:	1d33      	adds	r3, r6, #4
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 801a256:	f886 9001 	strb.w	r9, [r6, #1]
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a25a:	9305      	str	r3, [sp, #20]
    if( ssl->hostname == NULL )
 801a25c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a260:	2b00      	cmp	r3, #0
 801a262:	f000 80c2 	beq.w	801a3ea <ssl_write_client_hello+0x3d2>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a266:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a26a:	9301      	str	r3, [sp, #4]
 801a26c:	4b37      	ldr	r3, [pc, #220]	; (801a34c <ssl_write_client_hello+0x334>)
 801a26e:	9300      	str	r3, [sp, #0]
 801a270:	4a28      	ldr	r2, [pc, #160]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a272:	2347      	movs	r3, #71	; 0x47
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a274:	f505 559c 	add.w	r5, r5, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a278:	2103      	movs	r1, #3
 801a27a:	4620      	mov	r0, r4
 801a27c:	f7f6 fb06 	bl	801088c <mbedtls_debug_print_msg>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a280:	3508      	adds	r5, #8
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a282:	1d33      	adds	r3, r6, #4
 801a284:	42ab      	cmp	r3, r5
 801a286:	d80a      	bhi.n	801a29e <ssl_write_client_hello+0x286>
    hostname_len = strlen( ssl->hostname );
 801a288:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801a28c:	f7e5 ffaa 	bl	80001e4 <strlen>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a290:	1d33      	adds	r3, r6, #4
 801a292:	f100 0809 	add.w	r8, r0, #9
 801a296:	1aed      	subs	r5, r5, r3
 801a298:	4545      	cmp	r5, r8
 801a29a:	f080 808a 	bcs.w	801a3b2 <ssl_write_client_hello+0x39a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a29e:	4b2c      	ldr	r3, [pc, #176]	; (801a350 <ssl_write_client_hello+0x338>)
 801a2a0:	9300      	str	r3, [sp, #0]
 801a2a2:	4a1c      	ldr	r2, [pc, #112]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a2a4:	234e      	movs	r3, #78	; 0x4e
 801a2a6:	2101      	movs	r1, #1
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	f7f6 faef 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a2ae:	f04f 0800 	mov.w	r8, #0
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801a2b2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801a2b6:	f1ba 0f01 	cmp.w	sl, #1
 801a2ba:	d121      	bne.n	801a300 <ssl_write_client_hello+0x2e8>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a2bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a2c0:	4a14      	ldr	r2, [pc, #80]	; (801a314 <ssl_write_client_hello+0x2fc>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a2c2:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a2c6:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a2ca:	4b22      	ldr	r3, [pc, #136]	; (801a354 <ssl_write_client_hello+0x33c>)
 801a2cc:	9300      	str	r3, [sp, #0]
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a2ce:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a2d0:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a2d4:	2384      	movs	r3, #132	; 0x84
 801a2d6:	2103      	movs	r1, #3
 801a2d8:	4620      	mov	r0, r4
 801a2da:	f7f6 fad7 	bl	801088c <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 + ssl->verify_data_len )
 801a2de:	454d      	cmp	r5, r9
 801a2e0:	d806      	bhi.n	801a2f0 <ssl_write_client_hello+0x2d8>
 801a2e2:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a2e6:	eba9 0905 	sub.w	r9, r9, r5
 801a2ea:	3305      	adds	r3, #5
 801a2ec:	4599      	cmp	r9, r3
 801a2ee:	d27e      	bcs.n	801a3ee <ssl_write_client_hello+0x3d6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a2f0:	4b17      	ldr	r3, [pc, #92]	; (801a350 <ssl_write_client_hello+0x338>)
 801a2f2:	9300      	str	r3, [sp, #0]
 801a2f4:	4a07      	ldr	r2, [pc, #28]	; (801a314 <ssl_write_client_hello+0x2fc>)
 801a2f6:	2388      	movs	r3, #136	; 0x88
 801a2f8:	2101      	movs	r1, #1
 801a2fa:	4620      	mov	r0, r4
 801a2fc:	f7f6 fac6 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a300:	2500      	movs	r5, #0
 801a302:	e08b      	b.n	801a41c <ssl_write_client_hello+0x404>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a304:	b90a      	cbnz	r2, 801a30a <ssl_write_client_hello+0x2f2>
        n = 0;
 801a306:	4613      	mov	r3, r2
 801a308:	e72d      	b.n	801a166 <ssl_write_client_hello+0x14e>
 801a30a:	2300      	movs	r3, #0
 801a30c:	e73c      	b.n	801a188 <ssl_write_client_hello+0x170>
 801a30e:	bf00      	nop
 801a310:	08030c94 	.word	0x08030c94
 801a314:	08030c38 	.word	0x08030c38
 801a318:	08030caa 	.word	0x08030caa
 801a31c:	ffff8c00 	.word	0xffff8c00
 801a320:	08030cba 	.word	0x08030cba
 801a324:	ffff8f00 	.word	0xffff8f00
 801a328:	08030d10 	.word	0x08030d10
 801a32c:	08030d33 	.word	0x08030d33
 801a330:	08030d53 	.word	0x08030d53
 801a334:	08030d67 	.word	0x08030d67
 801a338:	08030d82 	.word	0x08030d82
 801a33c:	08030da4 	.word	0x08030da4
 801a340:	08030de1 	.word	0x08030de1
 801a344:	08030e03 	.word	0x08030e03
 801a348:	08030e23 	.word	0x08030e23
 801a34c:	08030e43 	.word	0x08030e43
 801a350:	08030e72 	.word	0x08030e72
 801a354:	08030e83 	.word	0x08030e83
 801a358:	08030dbd 	.word	0x08030dbd
        *p++ = ssl->session_negotiate->id[i];
 801a35c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a35e:	442a      	add	r2, r5
    for( i = 0; i < n; i++ )
 801a360:	3501      	adds	r5, #1
        *p++ = ssl->session_negotiate->id[i];
 801a362:	7d12      	ldrb	r2, [r2, #20]
 801a364:	f801 2b01 	strb.w	r2, [r1], #1
    for( i = 0; i < n; i++ )
 801a368:	e715      	b.n	801a196 <ssl_write_client_hello+0x17e>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 801a36a:	f7ff fe01 	bl	8019f70 <mbedtls_ssl_ciphersuite_from_id>
        if( ciphersuite_info == NULL )
 801a36e:	2800      	cmp	r0, #0
 801a370:	f43f af37 	beq.w	801a1e2 <ssl_write_client_hello+0x1ca>
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a374:	6823      	ldr	r3, [r4, #0]
 801a376:	6902      	ldr	r2, [r0, #16]
 801a378:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a37c:	428a      	cmp	r2, r1
 801a37e:	f73f af30 	bgt.w	801a1e2 <ssl_write_client_hello+0x1ca>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 801a382:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a386:	6982      	ldr	r2, [r0, #24]
 801a388:	429a      	cmp	r2, r3
 801a38a:	f6ff af2a 	blt.w	801a1e2 <ssl_write_client_hello+0x1ca>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a38e:	683b      	ldr	r3, [r7, #0]
 801a390:	465a      	mov	r2, fp
 801a392:	e9cd a300 	strd	sl, r3, [sp]
 801a396:	2103      	movs	r1, #3
 801a398:	f240 3376 	movw	r3, #886	; 0x376
 801a39c:	4620      	mov	r0, r4
 801a39e:	f7f6 fa75 	bl	801088c <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 801a3a2:	683b      	ldr	r3, [r7, #0]
 801a3a4:	121b      	asrs	r3, r3, #8
 801a3a6:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a3a8:	683b      	ldr	r3, [r7, #0]
 801a3aa:	7073      	strb	r3, [r6, #1]
        n++;
 801a3ac:	3501      	adds	r5, #1
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a3ae:	464e      	mov	r6, r9
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a3b0:	e717      	b.n	801a1e2 <ssl_write_client_hello+0x1ca>
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 801a3b2:	1d43      	adds	r3, r0, #5
 801a3b4:	0a1b      	lsrs	r3, r3, #8
 801a3b6:	71b3      	strb	r3, [r6, #6]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 801a3b8:	b2c3      	uxtb	r3, r0
 801a3ba:	1d5a      	adds	r2, r3, #5
 801a3bc:	71f2      	strb	r2, [r6, #7]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 801a3be:	1cc2      	adds	r2, r0, #3
 801a3c0:	0a12      	lsrs	r2, r2, #8
 801a3c2:	7232      	strb	r2, [r6, #8]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 801a3c4:	1cda      	adds	r2, r3, #3
 801a3c6:	7272      	strb	r2, [r6, #9]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 801a3c8:	0a02      	lsrs	r2, r0, #8
 801a3ca:	72f2      	strb	r2, [r6, #11]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 801a3cc:	f886 9004 	strb.w	r9, [r6, #4]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 801a3d0:	f886 9005 	strb.w	r9, [r6, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 801a3d4:	f886 900a 	strb.w	r9, [r6, #10]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 801a3d8:	7333      	strb	r3, [r6, #12]
    memcpy( p, ssl->hostname, hostname_len );
 801a3da:	4602      	mov	r2, r0
 801a3dc:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 801a3e0:	f106 000d 	add.w	r0, r6, #13
 801a3e4:	f007 fee0 	bl	80221a8 <memcpy>
    *olen = hostname_len + 9;
 801a3e8:	e763      	b.n	801a2b2 <ssl_write_client_hello+0x29a>
    *olen = 0;
 801a3ea:	4698      	mov	r8, r3
 801a3ec:	e761      	b.n	801a2b2 <ssl_write_client_hello+0x29a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );
 801a3ee:	23ff      	movs	r3, #255	; 0xff
 801a3f0:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801a3f2:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );
 801a3f4:	f885 a001 	strb.w	sl, [r5, #1]
    *p++ = 0x00;
 801a3f8:	70ab      	strb	r3, [r5, #2]
    *p++ = ( ssl->verify_data_len + 1 ) & 0xFF;
 801a3fa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a3fe:	3301      	adds	r3, #1
 801a400:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->verify_data_len & 0xFF;
 801a402:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a406:	712b      	strb	r3, [r5, #4]
    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );
 801a408:	1d68      	adds	r0, r5, #5
 801a40a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 801a40e:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 801a412:	f007 fec9 	bl	80221a8 <memcpy>
    *olen = 5 + ssl->verify_data_len;
 801a416:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 801a41a:	3505      	adds	r5, #5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a41c:	6823      	ldr	r3, [r4, #0]
 801a41e:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a422:	2903      	cmp	r1, #3
    ext_len += olen;
 801a424:	44a8      	add	r8, r5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a426:	d16f      	bne.n	801a508 <ssl_write_client_hello+0x4f0>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a428:	4b42      	ldr	r3, [pc, #264]	; (801a534 <ssl_write_client_hello+0x51c>)
 801a42a:	4a43      	ldr	r2, [pc, #268]	; (801a538 <ssl_write_client_hello+0x520>)
 801a42c:	9300      	str	r3, [sp, #0]
 801a42e:	4620      	mov	r0, r4
 801a430:	23b2      	movs	r3, #178	; 0xb2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a432:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a436:	f7f6 fa29 	bl	801088c <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a43a:	6823      	ldr	r3, [r4, #0]
 801a43c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    size_t sig_alg_len = 0;
 801a43e:	2200      	movs	r2, #0
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a440:	5881      	ldr	r1, [r0, r2]
 801a442:	2900      	cmp	r1, #0
 801a444:	d156      	bne.n	801a4f4 <ssl_write_client_hello+0x4dc>
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a446:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a44a:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a44e:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a450:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 801a452:	4599      	cmp	r9, r3
 801a454:	d850      	bhi.n	801a4f8 <ssl_write_client_hello+0x4e0>
 801a456:	eba3 0309 	sub.w	r3, r3, r9
 801a45a:	3206      	adds	r2, #6
 801a45c:	4293      	cmp	r3, r2
 801a45e:	d34b      	bcc.n	801a4f8 <ssl_write_client_hello+0x4e0>
 801a460:	f1a0 0b04 	sub.w	fp, r0, #4
    unsigned char *sig_alg_list = buf + 6;
 801a464:	f109 0a06 	add.w	sl, r9, #6
    sig_alg_len = 0;
 801a468:	460d      	mov	r5, r1
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a46a:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801a46e:	1caa      	adds	r2, r5, #2
 801a470:	f10a 0a04 	add.w	sl, sl, #4
 801a474:	2800      	cmp	r0, #0
 801a476:	d14a      	bne.n	801a50e <ssl_write_client_hello+0x4f6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 801a478:	230d      	movs	r3, #13
 801a47a:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a47e:	0a12      	lsrs	r2, r2, #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a480:	b2eb      	uxtb	r3, r5
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a482:	f889 2002 	strb.w	r2, [r9, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a486:	1c9a      	adds	r2, r3, #2
 801a488:	f889 2003 	strb.w	r2, [r9, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a48c:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 801a48e:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a492:	f889 2004 	strb.w	r2, [r9, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 801a496:	f889 3005 	strb.w	r3, [r9, #5]
    *olen = 6 + sig_alg_len;
 801a49a:	f105 0906 	add.w	r9, r5, #6
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a49e:	4b27      	ldr	r3, [pc, #156]	; (801a53c <ssl_write_client_hello+0x524>)
 801a4a0:	9300      	str	r3, [sp, #0]
 801a4a2:	4a25      	ldr	r2, [pc, #148]	; (801a538 <ssl_write_client_hello+0x520>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4a4:	f8d4 b0a0 	ldr.w	fp, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a4a8:	f240 1307 	movw	r3, #263	; 0x107
 801a4ac:	2103      	movs	r1, #3
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f7f6 f9ec 	bl	801088c <mbedtls_debug_print_msg>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a4b4:	6823      	ldr	r3, [r4, #0]
 801a4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ext_len += olen;
 801a4b8:	44c8      	add	r8, r9
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a4ba:	f103 3aff 	add.w	sl, r3, #4294967295
    size_t elliptic_curve_len = 0;
 801a4be:	f04f 0900 	mov.w	r9, #0
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a4c2:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 801a4c6:	2800      	cmp	r0, #0
 801a4c8:	d13c      	bne.n	801a544 <ssl_write_client_hello+0x52c>
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a4ca:	f108 0a02 	add.w	sl, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4ce:	f50b 5b9c 	add.w	fp, fp, #4992	; 0x1380
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a4d2:	44ba      	add	sl, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4d4:	f10b 0b08 	add.w	fp, fp, #8
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
 801a4d8:	45da      	cmp	sl, fp
 801a4da:	d806      	bhi.n	801a4ea <ssl_write_client_hello+0x4d2>
 801a4dc:	ebab 0b0a 	sub.w	fp, fp, sl
 801a4e0:	f109 0906 	add.w	r9, r9, #6
 801a4e4:	45cb      	cmp	fp, r9
 801a4e6:	f080 8178 	bcs.w	801a7da <ssl_write_client_hello+0x7c2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a4ea:	4b15      	ldr	r3, [pc, #84]	; (801a540 <ssl_write_client_hello+0x528>)
 801a4ec:	9300      	str	r3, [sp, #0]
 801a4ee:	f240 131d 	movw	r3, #285	; 0x11d
 801a4f2:	e030      	b.n	801a556 <ssl_write_client_hello+0x53e>
        sig_alg_len += 2;
 801a4f4:	3204      	adds	r2, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a4f6:	e7a3      	b.n	801a440 <ssl_write_client_hello+0x428>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a4f8:	4b11      	ldr	r3, [pc, #68]	; (801a540 <ssl_write_client_hello+0x528>)
 801a4fa:	9300      	str	r3, [sp, #0]
 801a4fc:	4a0e      	ldr	r2, [pc, #56]	; (801a538 <ssl_write_client_hello+0x520>)
 801a4fe:	23c0      	movs	r3, #192	; 0xc0
 801a500:	2101      	movs	r1, #1
 801a502:	4620      	mov	r0, r4
 801a504:	f7f6 f9c2 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a508:	f04f 0900 	mov.w	r9, #0
 801a50c:	e7c7      	b.n	801a49e <ssl_write_client_hello+0x486>
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a50e:	f004 fb7c 	bl	801ec0a <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 801a512:	f04f 0303 	mov.w	r3, #3
 801a516:	f80a 3c03 	strb.w	r3, [sl, #-3]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a51a:	f80a 0c04 	strb.w	r0, [sl, #-4]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a51e:	f8db 0000 	ldr.w	r0, [fp]
 801a522:	f004 fb72 	bl	801ec0a <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a526:	2301      	movs	r3, #1
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a528:	f80a 0c02 	strb.w	r0, [sl, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a52c:	3504      	adds	r5, #4
 801a52e:	f80a 3c01 	strb.w	r3, [sl, #-1]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a532:	e79a      	b.n	801a46a <ssl_write_client_hello+0x452>
 801a534:	08030eb0 	.word	0x08030eb0
 801a538:	08030c38 	.word	0x08030c38
 801a53c:	08030ee4 	.word	0x08030ee4
 801a540:	08030e72 	.word	0x08030e72
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801a544:	f7f7 fc38 	bl	8011db8 <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
 801a548:	2800      	cmp	r0, #0
 801a54a:	f040 8143 	bne.w	801a7d4 <ssl_write_client_hello+0x7bc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
 801a54e:	4bca      	ldr	r3, [pc, #808]	; (801a878 <ssl_write_client_hello+0x860>)
 801a550:	9300      	str	r3, [sp, #0]
 801a552:	f44f 738a 	mov.w	r3, #276	; 0x114
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a556:	4ac9      	ldr	r2, [pc, #804]	; (801a87c <ssl_write_client_hello+0x864>)
 801a558:	2101      	movs	r1, #1
 801a55a:	4620      	mov	r0, r4
 801a55c:	f7f6 f996 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a560:	2200      	movs	r2, #0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a562:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ext_len += olen;
 801a566:	eb08 0902 	add.w	r9, r8, r2
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a56a:	f109 0502 	add.w	r5, r9, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a56e:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a572:	4bc3      	ldr	r3, [pc, #780]	; (801a880 <ssl_write_client_hello+0x868>)
 801a574:	9300      	str	r3, [sp, #0]
 801a576:	4ac1      	ldr	r2, [pc, #772]	; (801a87c <ssl_write_client_hello+0x864>)
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a578:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a57a:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a57e:	f44f 73a4 	mov.w	r3, #328	; 0x148
 801a582:	2103      	movs	r1, #3
 801a584:	4620      	mov	r0, r4
 801a586:	f7f6 f981 	bl	801088c <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 6 )
 801a58a:	4545      	cmp	r5, r8
 801a58c:	d804      	bhi.n	801a598 <ssl_write_client_hello+0x580>
 801a58e:	eba8 0305 	sub.w	r3, r8, r5
 801a592:	2b05      	cmp	r3, #5
 801a594:	f200 8153 	bhi.w	801a83e <ssl_write_client_hello+0x826>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a598:	4bba      	ldr	r3, [pc, #744]	; (801a884 <ssl_write_client_hello+0x86c>)
 801a59a:	9300      	str	r3, [sp, #0]
 801a59c:	4ab7      	ldr	r2, [pc, #732]	; (801a87c <ssl_write_client_hello+0x864>)
 801a59e:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 801a5a2:	2101      	movs	r1, #1
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f7f6 f971 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a5aa:	f04f 0a00 	mov.w	sl, #0
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a5ae:	6823      	ldr	r3, [r4, #0]
 801a5b0:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 801a5b4:	f418 78e0 	ands.w	r8, r8, #448	; 0x1c0
    ext_len += olen;
 801a5b8:	44ca      	add	sl, r9
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a5ba:	d023      	beq.n	801a604 <ssl_write_client_hello+0x5ec>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a5c0:	4aae      	ldr	r2, [pc, #696]	; (801a87c <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5c2:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a5c6:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a5ca:	4baf      	ldr	r3, [pc, #700]	; (801a888 <ssl_write_client_hello+0x870>)
 801a5cc:	9300      	str	r3, [sp, #0]
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a5ce:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a5d0:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a5d4:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 801a5d8:	2103      	movs	r1, #3
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f7f6 f956 	bl	801088c <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 )
 801a5e0:	4545      	cmp	r5, r8
 801a5e2:	d804      	bhi.n	801a5ee <ssl_write_client_hello+0x5d6>
 801a5e4:	eba8 0305 	sub.w	r3, r8, r5
 801a5e8:	2b04      	cmp	r3, #4
 801a5ea:	f200 8135 	bhi.w	801a858 <ssl_write_client_hello+0x840>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a5ee:	4ba5      	ldr	r3, [pc, #660]	; (801a884 <ssl_write_client_hello+0x86c>)
 801a5f0:	9300      	str	r3, [sp, #0]
 801a5f2:	4aa2      	ldr	r2, [pc, #648]	; (801a87c <ssl_write_client_hello+0x864>)
 801a5f4:	f44f 73df 	mov.w	r3, #446	; 0x1be
 801a5f8:	2101      	movs	r1, #1
 801a5fa:	4620      	mov	r0, r4
 801a5fc:	f7f6 f946 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a600:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a604:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a606:	44c2      	add	sl, r8
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a608:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a60c:	f018 0808 	ands.w	r8, r8, #8
 801a610:	d023      	beq.n	801a65a <ssl_write_client_hello+0x642>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a612:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a616:	4a99      	ldr	r2, [pc, #612]	; (801a87c <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a618:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a61c:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a620:	4b9a      	ldr	r3, [pc, #616]	; (801a88c <ssl_write_client_hello+0x874>)
 801a622:	9300      	str	r3, [sp, #0]
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a624:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a626:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a62a:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 801a62e:	2103      	movs	r1, #3
 801a630:	4620      	mov	r0, r4
 801a632:	f7f6 f92b 	bl	801088c <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a636:	4545      	cmp	r5, r8
 801a638:	d804      	bhi.n	801a644 <ssl_write_client_hello+0x62c>
 801a63a:	eba8 0305 	sub.w	r3, r8, r5
 801a63e:	2b03      	cmp	r3, #3
 801a640:	f200 8130 	bhi.w	801a8a4 <ssl_write_client_hello+0x88c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a644:	4b8f      	ldr	r3, [pc, #572]	; (801a884 <ssl_write_client_hello+0x86c>)
 801a646:	9300      	str	r3, [sp, #0]
 801a648:	4a8c      	ldr	r2, [pc, #560]	; (801a87c <ssl_write_client_hello+0x864>)
 801a64a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a64e:	2101      	movs	r1, #1
 801a650:	4620      	mov	r0, r4
 801a652:	f7f6 f91b 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a656:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a65a:	6823      	ldr	r3, [r4, #0]
 801a65c:	f893 506d 	ldrb.w	r5, [r3, #109]	; 0x6d
 801a660:	f015 0502 	ands.w	r5, r5, #2
    ext_len += olen;
 801a664:	44d0      	add	r8, sl
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a666:	d025      	beq.n	801a6b4 <ssl_write_client_hello+0x69c>
 801a668:	f893 5069 	ldrb.w	r5, [r3, #105]	; 0x69
 801a66c:	b315      	cbz	r5, 801a6b4 <ssl_write_client_hello+0x69c>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a66e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a672:	4a82      	ldr	r2, [pc, #520]	; (801a87c <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a674:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a678:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a67c:	4b84      	ldr	r3, [pc, #528]	; (801a890 <ssl_write_client_hello+0x878>)
 801a67e:	9300      	str	r3, [sp, #0]
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a680:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a682:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a686:	f240 231f 	movw	r3, #543	; 0x21f
 801a68a:	2103      	movs	r1, #3
 801a68c:	4620      	mov	r0, r4
 801a68e:	f7f6 f8fd 	bl	801088c <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a692:	454d      	cmp	r5, r9
 801a694:	d804      	bhi.n	801a6a0 <ssl_write_client_hello+0x688>
 801a696:	eba9 0305 	sub.w	r3, r9, r5
 801a69a:	2b03      	cmp	r3, #3
 801a69c:	f200 810b 	bhi.w	801a8b6 <ssl_write_client_hello+0x89e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a6a0:	4b78      	ldr	r3, [pc, #480]	; (801a884 <ssl_write_client_hello+0x86c>)
 801a6a2:	9300      	str	r3, [sp, #0]
 801a6a4:	4a75      	ldr	r2, [pc, #468]	; (801a87c <ssl_write_client_hello+0x864>)
 801a6a6:	f44f 7309 	mov.w	r3, #548	; 0x224
 801a6aa:	2101      	movs	r1, #1
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	f7f6 f8ed 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a6b2:	2500      	movs	r5, #0
    if( ssl->conf->alpn_list == NULL )
 801a6b4:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a6b6:	44a8      	add	r8, r5
    if( ssl->conf->alpn_list == NULL )
 801a6b8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801a6ba:	b375      	cbz	r5, 801a71a <ssl_write_client_hello+0x702>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a6bc:	4b75      	ldr	r3, [pc, #468]	; (801a894 <ssl_write_client_hello+0x87c>)
 801a6be:	9300      	str	r3, [sp, #0]
 801a6c0:	4a6e      	ldr	r2, [pc, #440]	; (801a87c <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6c2:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a6c6:	f240 236e 	movw	r3, #622	; 0x26e
 801a6ca:	2103      	movs	r1, #3
 801a6cc:	4620      	mov	r0, r4
 801a6ce:	f7f6 f8dd 	bl	801088c <mbedtls_debug_print_msg>
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a6d2:	6823      	ldr	r3, [r4, #0]
 801a6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    size_t alpnlen = 0;
 801a6d6:	f04f 0a00 	mov.w	sl, #0
 801a6da:	f1a3 0904 	sub.w	r9, r3, #4
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a6de:	f859 0f04 	ldr.w	r0, [r9, #4]!
 801a6e2:	2800      	cmp	r0, #0
 801a6e4:	f040 80ef 	bne.w	801a8c6 <ssl_write_client_hello+0x8ae>
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a6e8:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6ec:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a6f0:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6f2:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < 6 + alpnlen )
 801a6f4:	4599      	cmp	r9, r3
 801a6f6:	d806      	bhi.n	801a706 <ssl_write_client_hello+0x6ee>
 801a6f8:	eba3 0309 	sub.w	r3, r3, r9
 801a6fc:	f10a 0a06 	add.w	sl, sl, #6
 801a700:	4553      	cmp	r3, sl
 801a702:	f080 80e6 	bcs.w	801a8d2 <ssl_write_client_hello+0x8ba>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a706:	4b5f      	ldr	r3, [pc, #380]	; (801a884 <ssl_write_client_hello+0x86c>)
 801a708:	9300      	str	r3, [sp, #0]
 801a70a:	4a5c      	ldr	r2, [pc, #368]	; (801a87c <ssl_write_client_hello+0x864>)
 801a70c:	f240 2375 	movw	r3, #629	; 0x275
 801a710:	2101      	movs	r1, #1
 801a712:	4620      	mov	r0, r4
 801a714:	f7f6 f8ba 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a718:	2500      	movs	r5, #0
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a71a:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a71c:	4445      	add	r5, r8
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a71e:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a722:	f018 0810 	ands.w	r8, r8, #16
 801a726:	d028      	beq.n	801a77a <ssl_write_client_hello+0x762>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a728:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a72c:	4a53      	ldr	r2, [pc, #332]	; (801a87c <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a72e:	f503 5a9c 	add.w	sl, r3, #4992	; 0x1380
    size_t tlen = ssl->session_negotiate->ticket_len;
 801a732:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801a734:	f105 0902 	add.w	r9, r5, #2
    size_t tlen = ssl->session_negotiate->ticket_len;
 801a738:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a73c:	4b56      	ldr	r3, [pc, #344]	; (801a898 <ssl_write_client_hello+0x880>)
 801a73e:	9300      	str	r3, [sp, #0]
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801a740:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a742:	f10a 0a08 	add.w	sl, sl, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a746:	f240 2341 	movw	r3, #577	; 0x241
 801a74a:	2103      	movs	r1, #3
 801a74c:	4620      	mov	r0, r4
 801a74e:	f7f6 f89d 	bl	801088c <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 + tlen )
 801a752:	45d1      	cmp	r9, sl
 801a754:	d806      	bhi.n	801a764 <ssl_write_client_hello+0x74c>
 801a756:	f10b 0804 	add.w	r8, fp, #4
 801a75a:	ebaa 0a09 	sub.w	sl, sl, r9
 801a75e:	45c2      	cmp	sl, r8
 801a760:	f080 80e8 	bcs.w	801a934 <ssl_write_client_hello+0x91c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a764:	4b47      	ldr	r3, [pc, #284]	; (801a884 <ssl_write_client_hello+0x86c>)
 801a766:	9300      	str	r3, [sp, #0]
 801a768:	4a44      	ldr	r2, [pc, #272]	; (801a87c <ssl_write_client_hello+0x864>)
 801a76a:	f240 2345 	movw	r3, #581	; 0x245
 801a76e:	2101      	movs	r1, #1
 801a770:	4620      	mov	r0, r4
 801a772:	f7f6 f88b 	bl	801088c <mbedtls_debug_print_msg>
    *olen = 0;
 801a776:	f04f 0800 	mov.w	r8, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801a77a:	4b48      	ldr	r3, [pc, #288]	; (801a89c <ssl_write_client_hello+0x884>)
 801a77c:	9300      	str	r3, [sp, #0]
    ext_len += olen;
 801a77e:	4445      	add	r5, r8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801a780:	4a3e      	ldr	r2, [pc, #248]	; (801a87c <ssl_write_client_hello+0x864>)
 801a782:	9501      	str	r5, [sp, #4]
 801a784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a788:	2103      	movs	r1, #3
 801a78a:	4620      	mov	r0, r4
 801a78c:	f7f6 f87e 	bl	801088c <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 801a790:	b12d      	cbz	r5, 801a79e <ssl_write_client_hello+0x786>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 801a792:	0a2b      	lsrs	r3, r5, #8
 801a794:	70b3      	strb	r3, [r6, #2]
        p += ext_len;
 801a796:	9b05      	ldr	r3, [sp, #20]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 801a798:	70f5      	strb	r5, [r6, #3]
        p += ext_len;
 801a79a:	442b      	add	r3, r5
 801a79c:	461f      	mov	r7, r3
    ssl->out_msglen  = p - buf;
 801a79e:	9b04      	ldr	r3, [sp, #16]
 801a7a0:	1aff      	subs	r7, r7, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801a7a2:	2316      	movs	r3, #22
 801a7a4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801a7a8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msglen  = p - buf;
 801a7ac:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801a7b0:	2601      	movs	r6, #1
 801a7b2:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801a7b4:	6863      	ldr	r3, [r4, #4]
 801a7b6:	4433      	add	r3, r6
 801a7b8:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801a7ba:	4620      	mov	r0, r4
 801a7bc:	f002 f9c4 	bl	801cb48 <mbedtls_ssl_write_record>
 801a7c0:	4605      	mov	r5, r0
 801a7c2:	2800      	cmp	r0, #0
 801a7c4:	f000 80de 	beq.w	801a984 <ssl_write_client_hello+0x96c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801a7c8:	4b35      	ldr	r3, [pc, #212]	; (801a8a0 <ssl_write_client_hello+0x888>)
 801a7ca:	9300      	str	r3, [sp, #0]
 801a7cc:	9001      	str	r0, [sp, #4]
 801a7ce:	f240 4317 	movw	r3, #1047	; 0x417
 801a7d2:	e497      	b.n	801a104 <ssl_write_client_hello+0xec>
        elliptic_curve_len += 2;
 801a7d4:	f109 0902 	add.w	r9, r9, #2
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a7d8:	e673      	b.n	801a4c2 <ssl_write_client_hello+0x4aa>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a7da:	6823      	ldr	r3, [r4, #0]
 801a7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7de:	f06f 0505 	mvn.w	r5, #5
 801a7e2:	f103 39ff 	add.w	r9, r3, #4294967295
    unsigned char *elliptic_curve_list = p + 6;
 801a7e6:	f10a 0b06 	add.w	fp, sl, #6
 801a7ea:	eba5 050a 	sub.w	r5, r5, sl
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a7ee:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 801a7f2:	eb05 020b 	add.w	r2, r5, fp
 801a7f6:	f10b 0b02 	add.w	fp, fp, #2
 801a7fa:	b9b0      	cbnz	r0, 801a82a <ssl_write_client_hello+0x812>
    if( elliptic_curve_len == 0 )
 801a7fc:	2a00      	cmp	r2, #0
 801a7fe:	f43f aeb0 	beq.w	801a562 <ssl_write_client_hello+0x54a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
 801a802:	230a      	movs	r3, #10
 801a804:	f88a 3001 	strb.w	r3, [sl, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
 801a808:	1c93      	adds	r3, r2, #2
 801a80a:	0a1b      	lsrs	r3, r3, #8
 801a80c:	f88a 3002 	strb.w	r3, [sl, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
 801a810:	b2d3      	uxtb	r3, r2
 801a812:	1c99      	adds	r1, r3, #2
 801a814:	f88a 1003 	strb.w	r1, [sl, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801a818:	0a11      	lsrs	r1, r2, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
 801a81a:	f88a 0000 	strb.w	r0, [sl]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801a81e:	f88a 1004 	strb.w	r1, [sl, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
 801a822:	f88a 3005 	strb.w	r3, [sl, #5]
    *olen = 6 + elliptic_curve_len;
 801a826:	3206      	adds	r2, #6
 801a828:	e69b      	b.n	801a562 <ssl_write_client_hello+0x54a>
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801a82a:	f7f7 fac5 	bl	8011db8 <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
 801a82e:	8843      	ldrh	r3, [r0, #2]
 801a830:	0a1b      	lsrs	r3, r3, #8
 801a832:	f80b 3c02 	strb.w	r3, [fp, #-2]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
 801a836:	8843      	ldrh	r3, [r0, #2]
 801a838:	f80b 3c01 	strb.w	r3, [fp, #-1]
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a83c:	e7d7      	b.n	801a7ee <ssl_write_client_hello+0x7d6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 801a83e:	220b      	movs	r2, #11
 801a840:	706a      	strb	r2, [r5, #1]
    *p++ = 2;
 801a842:	2202      	movs	r2, #2
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801a844:	2300      	movs	r3, #0
    *p++ = 2;
 801a846:	70ea      	strb	r2, [r5, #3]
    *p++ = 1;
 801a848:	2201      	movs	r2, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801a84a:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801a84c:	70ab      	strb	r3, [r5, #2]
    *p++ = 1;
 801a84e:	712a      	strb	r2, [r5, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 801a850:	716b      	strb	r3, [r5, #5]
    *olen = 6;
 801a852:	f04f 0a06 	mov.w	sl, #6
 801a856:	e6aa      	b.n	801a5ae <ssl_write_client_hello+0x596>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801a858:	2301      	movs	r3, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 801a85a:	2200      	movs	r2, #0
 801a85c:	702a      	strb	r2, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801a85e:	706b      	strb	r3, [r5, #1]
    *p++ = 0x00;
 801a860:	70aa      	strb	r2, [r5, #2]
    *p++ = 1;
 801a862:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->conf->mfl_code;
 801a864:	6823      	ldr	r3, [r4, #0]
 801a866:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801a86a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801a86e:	712b      	strb	r3, [r5, #4]
    *olen = 5;
 801a870:	f04f 0805 	mov.w	r8, #5
 801a874:	e6c6      	b.n	801a604 <ssl_write_client_hello+0x5ec>
 801a876:	bf00      	nop
 801a878:	08030f1d 	.word	0x08030f1d
 801a87c:	08030c38 	.word	0x08030c38
 801a880:	08030f40 	.word	0x08030f40
 801a884:	08030e72 	.word	0x08030e72
 801a888:	08030f77 	.word	0x08030f77
 801a88c:	08030faa 	.word	0x08030faa
 801a890:	08030fd8 	.word	0x08030fd8
 801a894:	0803100e 	.word	0x0803100e
 801a898:	08031032 	.word	0x08031032
 801a89c:	08031084 	.word	0x08031084
 801a8a0:	080310ad 	.word	0x080310ad
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801a8a4:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801a8a6:	f04f 0804 	mov.w	r8, #4
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801a8aa:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801a8ac:	f885 8001 	strb.w	r8, [r5, #1]
    *p++ = 0x00;
 801a8b0:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801a8b2:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801a8b4:	e6d1      	b.n	801a65a <ssl_write_client_hello+0x642>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801a8b6:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801a8b8:	2217      	movs	r2, #23
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801a8ba:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801a8bc:	706a      	strb	r2, [r5, #1]
    *p++ = 0x00;
 801a8be:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801a8c0:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801a8c2:	2504      	movs	r5, #4
 801a8c4:	e6f6      	b.n	801a6b4 <ssl_write_client_hello+0x69c>
        alpnlen += (unsigned char)( strlen( *cur ) & 0xFF ) + 1;
 801a8c6:	f7e5 fc8d 	bl	80001e4 <strlen>
 801a8ca:	b2c0      	uxtb	r0, r0
 801a8cc:	3001      	adds	r0, #1
 801a8ce:	4482      	add	sl, r0
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a8d0:	e705      	b.n	801a6de <ssl_write_client_hello+0x6c6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801a8d2:	2310      	movs	r3, #16
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );
 801a8d4:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801a8d8:	f889 3001 	strb.w	r3, [r9, #1]
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a8dc:	6823      	ldr	r3, [r4, #0]
 801a8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    p += 4;
 801a8e0:	f109 0506 	add.w	r5, r9, #6
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a8e4:	f1a3 0a04 	sub.w	sl, r3, #4
 801a8e8:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801a8ec:	b988      	cbnz	r0, 801a912 <ssl_write_client_hello+0x8fa>
    *olen = p - buf;
 801a8ee:	eba5 0509 	sub.w	r5, r5, r9
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 801a8f2:	1fab      	subs	r3, r5, #6
 801a8f4:	0a1b      	lsrs	r3, r3, #8
 801a8f6:	f889 3004 	strb.w	r3, [r9, #4]
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 801a8fa:	b2eb      	uxtb	r3, r5
 801a8fc:	1f9a      	subs	r2, r3, #6
 801a8fe:	f889 2005 	strb.w	r2, [r9, #5]
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801a902:	1f2a      	subs	r2, r5, #4
 801a904:	0a12      	lsrs	r2, r2, #8
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801a906:	3b04      	subs	r3, #4
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801a908:	f889 2002 	strb.w	r2, [r9, #2]
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801a90c:	f889 3003 	strb.w	r3, [r9, #3]
 801a910:	e703      	b.n	801a71a <ssl_write_client_hello+0x702>
        *p = (unsigned char)( strlen( *cur ) & 0xFF );
 801a912:	f7e5 fc67 	bl	80001e4 <strlen>
 801a916:	4683      	mov	fp, r0
 801a918:	4628      	mov	r0, r5
 801a91a:	f800 bb01 	strb.w	fp, [r0], #1
        memcpy( p + 1, *cur, *p );
 801a91e:	fa5f fb8b 	uxtb.w	fp, fp
 801a922:	465a      	mov	r2, fp
 801a924:	f8da 1000 	ldr.w	r1, [sl]
        p += 1 + *p;
 801a928:	f10b 0b01 	add.w	fp, fp, #1
        memcpy( p + 1, *cur, *p );
 801a92c:	f007 fc3c 	bl	80221a8 <memcpy>
        p += 1 + *p;
 801a930:	445d      	add	r5, fp
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a932:	e7d9      	b.n	801a8e8 <ssl_write_client_hello+0x8d0>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 801a934:	2300      	movs	r3, #0
 801a936:	f889 3000 	strb.w	r3, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 801a93a:	2323      	movs	r3, #35	; 0x23
 801a93c:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 801a940:	ea4f 231b 	mov.w	r3, fp, lsr #8
 801a944:	f889 3002 	strb.w	r3, [r9, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 801a948:	f889 b003 	strb.w	fp, [r9, #3]
    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 801a94c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a950:	b1ab      	cbz	r3, 801a97e <ssl_write_client_hello+0x966>
 801a952:	f1bb 0f00 	cmp.w	fp, #0
 801a956:	d012      	beq.n	801a97e <ssl_write_client_hello+0x966>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );
 801a958:	4b10      	ldr	r3, [pc, #64]	; (801a99c <ssl_write_client_hello+0x984>)
 801a95a:	9300      	str	r3, [sp, #0]
 801a95c:	4620      	mov	r0, r4
 801a95e:	4a10      	ldr	r2, [pc, #64]	; (801a9a0 <ssl_write_client_hello+0x988>)
 801a960:	f8cd b004 	str.w	fp, [sp, #4]
 801a964:	f240 2356 	movw	r3, #598	; 0x256
 801a968:	2103      	movs	r1, #3
 801a96a:	f7f5 ff8f 	bl	801088c <mbedtls_debug_print_msg>
    memcpy( p, ssl->session_negotiate->ticket, tlen );
 801a96e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a970:	465a      	mov	r2, fp
 801a972:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a974:	f109 0004 	add.w	r0, r9, #4
 801a978:	f007 fc16 	bl	80221a8 <memcpy>
    *olen += tlen;
 801a97c:	e6fd      	b.n	801a77a <ssl_write_client_hello+0x762>
    *olen = 4;
 801a97e:	f04f 0804 	mov.w	r8, #4
 801a982:	e6fa      	b.n	801a77a <ssl_write_client_hello+0x762>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 801a984:	4b07      	ldr	r3, [pc, #28]	; (801a9a4 <ssl_write_client_hello+0x98c>)
 801a986:	9300      	str	r3, [sp, #0]
 801a988:	4a05      	ldr	r2, [pc, #20]	; (801a9a0 <ssl_write_client_hello+0x988>)
 801a98a:	f240 431b 	movw	r3, #1051	; 0x41b
 801a98e:	2102      	movs	r1, #2
 801a990:	4620      	mov	r0, r4
 801a992:	f7f5 ff7b 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801a996:	f7ff bb58 	b.w	801a04a <ssl_write_client_hello+0x32>
 801a99a:	bf00      	nop
 801a99c:	08031060 	.word	0x08031060
 801a9a0:	08030c38 	.word	0x08030c38
 801a9a4:	080310c6 	.word	0x080310c6

0801a9a8 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 801a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801a9ac:	6843      	ldr	r3, [r0, #4]
{
 801a9ae:	ed2d 8b02 	vpush	{d8}
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801a9b2:	2b10      	cmp	r3, #16
{
 801a9b4:	b0a1      	sub	sp, #132	; 0x84
 801a9b6:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801a9b8:	f000 81a0 	beq.w	801acfc <mbedtls_ssl_handshake_client_step+0x354>
 801a9bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801a9be:	2a00      	cmp	r2, #0
 801a9c0:	f000 819c 	beq.w	801acfc <mbedtls_ssl_handshake_client_step+0x354>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 801a9c4:	9301      	str	r3, [sp, #4]
 801a9c6:	4baf      	ldr	r3, [pc, #700]	; (801ac84 <mbedtls_ssl_handshake_client_step+0x2dc>)
 801a9c8:	4aaf      	ldr	r2, [pc, #700]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801a9ca:	9300      	str	r3, [sp, #0]
 801a9cc:	2102      	movs	r1, #2
 801a9ce:	f640 5323 	movw	r3, #3363	; 0xd23
 801a9d2:	f7f5 ff5b 	bl	801088c <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801a9d6:	4620      	mov	r0, r4
 801a9d8:	f002 f82a 	bl	801ca30 <mbedtls_ssl_flush_output>
 801a9dc:	4605      	mov	r5, r0
 801a9de:	bb18      	cbnz	r0, 801aa28 <mbedtls_ssl_handshake_client_step+0x80>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801a9e0:	6863      	ldr	r3, [r4, #4]
 801a9e2:	2b0c      	cmp	r3, #12
 801a9e4:	d105      	bne.n	801a9f2 <mbedtls_ssl_handshake_client_step+0x4a>
        ssl->handshake->new_session_ticket != 0 )
 801a9e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801a9e8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801a9ec:	b10b      	cbz	r3, 801a9f2 <mbedtls_ssl_handshake_client_step+0x4a>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 801a9ee:	2311      	movs	r3, #17
 801a9f0:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 801a9f2:	6863      	ldr	r3, [r4, #4]
 801a9f4:	2b11      	cmp	r3, #17
 801a9f6:	f201 8236 	bhi.w	801be66 <mbedtls_ssl_handshake_client_step+0x14be>
 801a9fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 801a9fe:	0012      	.short	0x0012
 801aa00:	0020001b 	.word	0x0020001b
 801aa04:	0433042e 	.word	0x0433042e
 801aa08:	072f0682 	.word	0x072f0682
 801aa0c:	079f0770 	.word	0x079f0770
 801aa10:	096c0898 	.word	0x096c0898
 801aa14:	0a190971 	.word	0x0a190971
 801aa18:	0a230a1e 	.word	0x0a230a1e
 801aa1c:	0a340a2f 	.word	0x0a340a2f
 801aa20:	0976      	.short	0x0976
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 801aa22:	2201      	movs	r2, #1
 801aa24:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801aa26:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 801aa28:	4628      	mov	r0, r5
 801aa2a:	b021      	add	sp, #132	; 0x84
 801aa2c:	ecbd 8b02 	vpop	{d8}
 801aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ret = ssl_write_client_hello( ssl );
 801aa34:	4620      	mov	r0, r4
 801aa36:	f7ff faef 	bl	801a018 <ssl_write_client_hello>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801aa3a:	4605      	mov	r5, r0
           break;
 801aa3c:	e7f4      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 801aa3e:	4b93      	ldr	r3, [pc, #588]	; (801ac8c <mbedtls_ssl_handshake_client_step+0x2e4>)
 801aa40:	4a91      	ldr	r2, [pc, #580]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aa42:	9300      	str	r3, [sp, #0]
 801aa44:	2102      	movs	r1, #2
 801aa46:	f240 53a7 	movw	r3, #1447	; 0x5a7
 801aa4a:	4620      	mov	r0, r4
 801aa4c:	f7f5 ff1e 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801aa50:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 801aa52:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801aa54:	f002 ffc6 	bl	801d9e4 <mbedtls_ssl_read_record>
 801aa58:	4605      	mov	r5, r0
 801aa5a:	b150      	cbz	r0, 801aa72 <mbedtls_ssl_handshake_client_step+0xca>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801aa5c:	4b8c      	ldr	r3, [pc, #560]	; (801ac90 <mbedtls_ssl_handshake_client_step+0x2e8>)
 801aa5e:	9300      	str	r3, [sp, #0]
 801aa60:	9001      	str	r0, [sp, #4]
 801aa62:	f240 53ae 	movw	r3, #1454	; 0x5ae
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801aa66:	4a88      	ldr	r2, [pc, #544]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aa68:	2101      	movs	r1, #1
 801aa6a:	4620      	mov	r0, r4
 801aa6c:	f7f5 ff3e 	bl	80108ec <mbedtls_debug_print_ret>
        return( ret );
 801aa70:	e7da      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801aa72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801aa74:	2b16      	cmp	r3, #22
 801aa76:	d032      	beq.n	801aade <mbedtls_ssl_handshake_client_step+0x136>
        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801aa78:	68a1      	ldr	r1, [r4, #8]
 801aa7a:	2901      	cmp	r1, #1
 801aa7c:	d11f      	bne.n	801aabe <mbedtls_ssl_handshake_client_step+0x116>
            if( ssl->conf->renego_max_records >= 0 &&
 801aa7e:	6822      	ldr	r2, [r4, #0]
            ssl->renego_records_seen++;
 801aa80:	68e3      	ldr	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801aa82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
            ssl->renego_records_seen++;
 801aa84:	3301      	adds	r3, #1
            if( ssl->conf->renego_max_records >= 0 &&
 801aa86:	2a00      	cmp	r2, #0
            ssl->renego_records_seen++;
 801aa88:	60e3      	str	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801aa8a:	db0a      	blt.n	801aaa2 <mbedtls_ssl_handshake_client_step+0xfa>
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	dd08      	ble.n	801aaa2 <mbedtls_ssl_handshake_client_step+0xfa>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801aa90:	4b80      	ldr	r3, [pc, #512]	; (801ac94 <mbedtls_ssl_handshake_client_step+0x2ec>)
 801aa92:	4a7d      	ldr	r2, [pc, #500]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aa94:	9300      	str	r3, [sp, #0]
 801aa96:	f240 53bc 	movw	r3, #1468	; 0x5bc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801aa9a:	4620      	mov	r0, r4
 801aa9c:	f7f5 fef6 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801aaa0:	e01b      	b.n	801aada <mbedtls_ssl_handshake_client_step+0x132>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801aaa2:	4b7d      	ldr	r3, [pc, #500]	; (801ac98 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801aaa4:	9300      	str	r3, [sp, #0]
 801aaa6:	4a78      	ldr	r2, [pc, #480]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801aaa8:	4d7c      	ldr	r5, [pc, #496]	; (801ac9c <mbedtls_ssl_handshake_client_step+0x2f4>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801aaaa:	f240 53c1 	movw	r3, #1473	; 0x5c1
 801aaae:	2101      	movs	r1, #1
 801aab0:	4620      	mov	r0, r4
 801aab2:	f7f5 feeb 	bl	801088c <mbedtls_debug_print_msg>
            ssl->keep_current_message = 1;
 801aab6:	2301      	movs	r3, #1
 801aab8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801aabc:	e7b4      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aabe:	4b78      	ldr	r3, [pc, #480]	; (801aca0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801aac0:	9300      	str	r3, [sp, #0]
 801aac2:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801aac6:	4a70      	ldr	r2, [pc, #448]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aac8:	2101      	movs	r1, #1
 801aaca:	4620      	mov	r0, r4
 801aacc:	f7f5 fede 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801aad0:	220a      	movs	r2, #10
 801aad2:	2102      	movs	r1, #2
 801aad4:	4620      	mov	r0, r4
 801aad6:	f002 fb6f 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801aada:	4d72      	ldr	r5, [pc, #456]	; (801aca4 <mbedtls_ssl_handshake_client_step+0x2fc>)
 801aadc:	e7a4      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 801aade:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801aae2:	2b29      	cmp	r3, #41	; 0x29
 801aae4:	d902      	bls.n	801aaec <mbedtls_ssl_handshake_client_step+0x144>
 801aae6:	783b      	ldrb	r3, [r7, #0]
 801aae8:	2b02      	cmp	r3, #2
 801aaea:	d00f      	beq.n	801ab0c <mbedtls_ssl_handshake_client_step+0x164>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aaec:	4b6c      	ldr	r3, [pc, #432]	; (801aca0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801aaee:	9300      	str	r3, [sp, #0]
 801aaf0:	f240 53e4 	movw	r3, #1508	; 0x5e4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aaf4:	4a64      	ldr	r2, [pc, #400]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aaf6:	2101      	movs	r1, #1
 801aaf8:	4620      	mov	r0, r4
 801aafa:	f7f5 fec7 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801aafe:	2232      	movs	r2, #50	; 0x32
 801ab00:	2102      	movs	r1, #2
 801ab02:	4620      	mov	r0, r4
 801ab04:	f002 fb58 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801ab08:	4d67      	ldr	r5, [pc, #412]	; (801aca8 <mbedtls_ssl_handshake_client_step+0x300>)
 801ab0a:	e78d      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 801ab0c:	f107 0804 	add.w	r8, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 801ab10:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801ab14:	4b65      	ldr	r3, [pc, #404]	; (801acac <mbedtls_ssl_handshake_client_step+0x304>)
 801ab16:	4a5c      	ldr	r2, [pc, #368]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ab18:	9300      	str	r3, [sp, #0]
 801ab1a:	2103      	movs	r1, #3
 801ab1c:	f240 53f7 	movw	r3, #1527	; 0x5f7
 801ab20:	4620      	mov	r0, r4
 801ab22:	f7f5 ff13 	bl	801094c <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 801ab26:	4621      	mov	r1, r4
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ab28:	f104 0010 	add.w	r0, r4, #16
                      ssl->conf->transport, buf + 0 );
 801ab2c:	f851 3b14 	ldr.w	r3, [r1], #20
 801ab30:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ab34:	4643      	mov	r3, r8
 801ab36:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801ab3a:	f004 faee 	bl	801f11a <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ab3e:	6823      	ldr	r3, [r4, #0]
 801ab40:	6922      	ldr	r2, [r4, #16]
 801ab42:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 801ab46:	6961      	ldr	r1, [r4, #20]
 801ab48:	f893 6069 	ldrb.w	r6, [r3, #105]	; 0x69
 801ab4c:	4282      	cmp	r2, r0
 801ab4e:	db09      	blt.n	801ab64 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ab50:	f893 e06b 	ldrb.w	lr, [r3, #107]	; 0x6b
 801ab54:	f893 c068 	ldrb.w	ip, [r3, #104]	; 0x68
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ab58:	4571      	cmp	r1, lr
 801ab5a:	db03      	blt.n	801ab64 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ab5c:	4562      	cmp	r2, ip
 801ab5e:	dc01      	bgt.n	801ab64 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->major_ver > ssl->conf->max_major_ver ||
 801ab60:	42b1      	cmp	r1, r6
 801ab62:	dd19      	ble.n	801ab98 <mbedtls_ssl_handshake_client_step+0x1f0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ab64:	9606      	str	r6, [sp, #24]
 801ab66:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 801ab6a:	9203      	str	r2, [sp, #12]
 801ab6c:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801ab70:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801ab74:	4a44      	ldr	r2, [pc, #272]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801ab76:	4d4e      	ldr	r5, [pc, #312]	; (801acb0 <mbedtls_ssl_handshake_client_step+0x308>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ab78:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801ab7c:	4b4d      	ldr	r3, [pc, #308]	; (801acb4 <mbedtls_ssl_handshake_client_step+0x30c>)
 801ab7e:	9300      	str	r3, [sp, #0]
 801ab80:	2101      	movs	r1, #1
 801ab82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801ab86:	4620      	mov	r0, r4
 801ab88:	f7f5 fe80 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ab8c:	2246      	movs	r2, #70	; 0x46
 801ab8e:	2102      	movs	r1, #2
 801ab90:	4620      	mov	r0, r4
 801ab92:	f002 fb11 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801ab96:	e747      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    t = ( (uint32_t) buf[2] << 24 )
 801ab98:	46b9      	mov	r9, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu", t ) );
 801ab9a:	4a3b      	ldr	r2, [pc, #236]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ab9c:	f859 3f06 	ldr.w	r3, [r9, #6]!
 801aba0:	ba1b      	rev	r3, r3
 801aba2:	9301      	str	r3, [sp, #4]
 801aba4:	4b44      	ldr	r3, [pc, #272]	; (801acb8 <mbedtls_ssl_handshake_client_step+0x310>)
 801aba6:	9300      	str	r3, [sp, #0]
 801aba8:	2103      	movs	r1, #3
 801abaa:	f240 6311 	movw	r3, #1553	; 0x611
 801abae:	4620      	mov	r0, r4
 801abb0:	f7f5 fe6c 	bl	801088c <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 801abb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801abb6:	464a      	mov	r2, r9
 801abb8:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801abbc:	f107 0126 	add.w	r1, r7, #38	; 0x26
 801abc0:	f852 0b04 	ldr.w	r0, [r2], #4
 801abc4:	f843 0b04 	str.w	r0, [r3], #4
 801abc8:	428a      	cmp	r2, r1
 801abca:	d1f9      	bne.n	801abc0 <mbedtls_ssl_handshake_client_step+0x218>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801abcc:	2320      	movs	r3, #32
    n = buf[34];
 801abce:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801abd2:	4a2d      	ldr	r2, [pc, #180]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801abd4:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801abd8:	4b38      	ldr	r3, [pc, #224]	; (801acbc <mbedtls_ssl_handshake_client_step+0x314>)
 801abda:	9300      	str	r3, [sp, #0]
 801abdc:	2103      	movs	r1, #3
 801abde:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801abe2:	4620      	mov	r0, r4
 801abe4:	f7f5 feb2 	bl	801094c <mbedtls_debug_print_buf>
    if( n > 32 )
 801abe8:	2e20      	cmp	r6, #32
 801abea:	d904      	bls.n	801abf6 <mbedtls_ssl_handshake_client_step+0x24e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801abec:	4b2c      	ldr	r3, [pc, #176]	; (801aca0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801abee:	9300      	str	r3, [sp, #0]
 801abf0:	f240 631c 	movw	r3, #1564	; 0x61c
 801abf4:	e77e      	b.n	801aaf4 <mbedtls_ssl_handshake_client_step+0x14c>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 801abf6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801abfa:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 801abfe:	4293      	cmp	r3, r2
 801ac00:	d915      	bls.n	801ac2e <mbedtls_ssl_handshake_client_step+0x286>
        ext_len = ( ( buf[38 + n] <<  8 )
 801ac02:	eb08 0206 	add.w	r2, r8, r6
 801ac06:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 801ac0a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 801ac0e:	ea42 2b01 	orr.w	fp, r2, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801ac12:	f10b 32ff 	add.w	r2, fp, #4294967295
 801ac16:	2a02      	cmp	r2, #2
 801ac18:	d904      	bls.n	801ac24 <mbedtls_ssl_handshake_client_step+0x27c>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 801ac1a:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 801ac1e:	445a      	add	r2, fp
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d00f      	beq.n	801ac44 <mbedtls_ssl_handshake_client_step+0x29c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ac24:	4b1e      	ldr	r3, [pc, #120]	; (801aca0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ac26:	9300      	str	r3, [sp, #0]
 801ac28:	f240 632a 	movw	r3, #1578	; 0x62a
 801ac2c:	e762      	b.n	801aaf4 <mbedtls_ssl_handshake_client_step+0x14c>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 801ac2e:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 801ac32:	4293      	cmp	r3, r2
 801ac34:	d004      	beq.n	801ac40 <mbedtls_ssl_handshake_client_step+0x298>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ac36:	4b1a      	ldr	r3, [pc, #104]	; (801aca0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ac38:	9300      	str	r3, [sp, #0]
 801ac3a:	f240 6336 	movw	r3, #1590	; 0x636
 801ac3e:	e759      	b.n	801aaf4 <mbedtls_ssl_handshake_client_step+0x14c>
        ext_len = 0;
 801ac40:	f04f 0b00 	mov.w	fp, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ac44:	eb08 0306 	add.w	r3, r8, r6
 801ac48:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801ac4c:	f893 9024 	ldrb.w	r9, [r3, #36]	; 0x24
    comp = buf[37 + n];
 801ac50:	f106 0325 	add.w	r3, r6, #37	; 0x25
 801ac54:	9309      	str	r3, [sp, #36]	; 0x24
 801ac56:	f818 3003 	ldrb.w	r3, [r8, r3]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ac5a:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 801ac5e:	b39b      	cbz	r3, 801acc8 <mbedtls_ssl_handshake_client_step+0x320>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 801ac60:	9301      	str	r3, [sp, #4]
 801ac62:	4b17      	ldr	r3, [pc, #92]	; (801acc0 <mbedtls_ssl_handshake_client_step+0x318>)
 801ac64:	4a08      	ldr	r2, [pc, #32]	; (801ac88 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ac66:	9300      	str	r3, [sp, #0]
 801ac68:	2101      	movs	r1, #1
 801ac6a:	f240 6353 	movw	r3, #1619	; 0x653
 801ac6e:	4620      	mov	r0, r4
 801ac70:	f7f5 fe0c 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ac74:	222f      	movs	r2, #47	; 0x2f
 801ac76:	2102      	movs	r1, #2
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f002 fa9d 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 801ac7e:	4d11      	ldr	r5, [pc, #68]	; (801acc4 <mbedtls_ssl_handshake_client_step+0x31c>)
 801ac80:	e6d2      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
 801ac82:	bf00      	nop
 801ac84:	080310df 	.word	0x080310df
 801ac88:	08030c38 	.word	0x08030c38
 801ac8c:	080310f0 	.word	0x080310f0
 801ac90:	08031106 	.word	0x08031106
 801ac94:	0803111e 	.word	0x0803111e
 801ac98:	08031151 	.word	0x08031151
 801ac9c:	ffff9500 	.word	0xffff9500
 801aca0:	08031175 	.word	0x08031175
 801aca4:	ffff8900 	.word	0xffff8900
 801aca8:	ffff8680 	.word	0xffff8680
 801acac:	0803118e 	.word	0x0803118e
 801acb0:	ffff9180 	.word	0xffff9180
 801acb4:	080311a4 	.word	0x080311a4
 801acb8:	080311f0 	.word	0x080311f0
 801acbc:	08031210 	.word	0x08031210
 801acc0:	0803122b 	.word	0x0803122b
 801acc4:	ffff8f80 	.word	0xffff8f80
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801acc8:	4648      	mov	r0, r9
 801acca:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 801acce:	f7ff f94f 	bl	8019f70 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801acd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801acd4:	f8ca 0000 	str.w	r0, [sl]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801acd8:	6819      	ldr	r1, [r3, #0]
 801acda:	b989      	cbnz	r1, 801ad00 <mbedtls_ssl_handshake_client_step+0x358>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 801acdc:	4bb6      	ldr	r3, [pc, #728]	; (801afb8 <mbedtls_ssl_handshake_client_step+0x610>)
 801acde:	4ab7      	ldr	r2, [pc, #732]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ace0:	9300      	str	r3, [sp, #0]
 801ace2:	2101      	movs	r1, #1
 801ace4:	4620      	mov	r0, r4
 801ace6:	f8cd 9004 	str.w	r9, [sp, #4]
 801acea:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 801acee:	f7f5 fdcd 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801acf2:	2250      	movs	r2, #80	; 0x50
 801acf4:	2102      	movs	r1, #2
 801acf6:	4620      	mov	r0, r4
 801acf8:	f002 fa5e 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801acfc:	4db0      	ldr	r5, [pc, #704]	; (801afc0 <mbedtls_ssl_handshake_client_step+0x618>)
 801acfe:	e693      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 801ad00:	4620      	mov	r0, r4
 801ad02:	f003 f845 	bl	801dd90 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 801ad06:	4baf      	ldr	r3, [pc, #700]	; (801afc4 <mbedtls_ssl_handshake_client_step+0x61c>)
 801ad08:	4aac      	ldr	r2, [pc, #688]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ad0a:	9300      	str	r3, [sp, #0]
 801ad0c:	2103      	movs	r1, #3
 801ad0e:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 801ad12:	4620      	mov	r0, r4
 801ad14:	9601      	str	r6, [sp, #4]
 801ad16:	f7f5 fdb9 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 801ad1a:	3727      	adds	r7, #39	; 0x27
 801ad1c:	4baa      	ldr	r3, [pc, #680]	; (801afc8 <mbedtls_ssl_handshake_client_step+0x620>)
 801ad1e:	4aa7      	ldr	r2, [pc, #668]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ad20:	9300      	str	r3, [sp, #0]
 801ad22:	e9cd 7601 	strd	r7, r6, [sp, #4]
 801ad26:	f240 6369 	movw	r3, #1641	; 0x669
 801ad2a:	2103      	movs	r1, #3
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f7f5 fe0d 	bl	801094c <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 801ad32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ad34:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 801ad38:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 801ad3c:	b1ba      	cbz	r2, 801ad6e <mbedtls_ssl_handshake_client_step+0x3c6>
 801ad3e:	b1b6      	cbz	r6, 801ad6e <mbedtls_ssl_handshake_client_step+0x3c6>
 801ad40:	68a2      	ldr	r2, [r4, #8]
 801ad42:	b9a2      	cbnz	r2, 801ad6e <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801ad44:	f8da 2008 	ldr.w	r2, [sl, #8]
 801ad48:	4591      	cmp	r9, r2
 801ad4a:	d110      	bne.n	801ad6e <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->session_negotiate->ciphersuite != i ||
 801ad4c:	f8da 200c 	ldr.w	r2, [sl, #12]
 801ad50:	b96a      	cbnz	r2, 801ad6e <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->session_negotiate->compression != comp ||
 801ad52:	f8da 2010 	ldr.w	r2, [sl, #16]
 801ad56:	4296      	cmp	r6, r2
 801ad58:	d109      	bne.n	801ad6e <mbedtls_ssl_handshake_client_step+0x3c6>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 801ad5a:	4632      	mov	r2, r6
 801ad5c:	4639      	mov	r1, r7
 801ad5e:	f10a 0014 	add.w	r0, sl, #20
 801ad62:	930a      	str	r3, [sp, #40]	; 0x28
 801ad64:	f007 fa12 	bl	802218c <memcmp>
        ssl->session_negotiate->id_len != n ||
 801ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ad6a:	2800      	cmp	r0, #0
 801ad6c:	d04f      	beq.n	801ae0e <mbedtls_ssl_handshake_client_step+0x466>
        ssl->state++;
 801ad6e:	6862      	ldr	r2, [r4, #4]
 801ad70:	3201      	adds	r2, #1
 801ad72:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 801ad74:	2200      	movs	r2, #0
 801ad76:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        ssl->session_negotiate->start = mbedtls_time( NULL );
 801ad7a:	4610      	mov	r0, r2
 801ad7c:	f7e8 fa5a 	bl	8003234 <time>
 801ad80:	e9ca 0100 	strd	r0, r1, [sl]
        ssl->session_negotiate->ciphersuite = i;
 801ad84:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->session_negotiate->compression = comp;
 801ad86:	2200      	movs	r2, #0
        ssl->session_negotiate->id_len = n;
 801ad88:	e9c0 2603 	strd	r2, r6, [r0, #12]
        ssl->session_negotiate->ciphersuite = i;
 801ad8c:	f8c0 9008 	str.w	r9, [r0, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 801ad90:	4632      	mov	r2, r6
 801ad92:	4639      	mov	r1, r7
 801ad94:	3014      	adds	r0, #20
 801ad96:	f007 fa07 	bl	80221a8 <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 801ad9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ad9c:	4a8b      	ldr	r2, [pc, #556]	; (801afcc <mbedtls_ssl_handshake_client_step+0x624>)
 801ad9e:	f8d3 1330 	ldr.w	r1, [r3, #816]	; 0x330
 801ada2:	4b8b      	ldr	r3, [pc, #556]	; (801afd0 <mbedtls_ssl_handshake_client_step+0x628>)
 801ada4:	2900      	cmp	r1, #0
 801ada6:	bf08      	it	eq
 801ada8:	4613      	moveq	r3, r2
 801adaa:	9301      	str	r3, [sp, #4]
 801adac:	4b89      	ldr	r3, [pc, #548]	; (801afd4 <mbedtls_ssl_handshake_client_step+0x62c>)
 801adae:	4a83      	ldr	r2, [pc, #524]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801adb0:	9300      	str	r3, [sp, #0]
 801adb2:	2103      	movs	r1, #3
 801adb4:	f240 638e 	movw	r3, #1678	; 0x68e
 801adb8:	4620      	mov	r0, r4
 801adba:	f7f5 fd67 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 801adbe:	4b86      	ldr	r3, [pc, #536]	; (801afd8 <mbedtls_ssl_handshake_client_step+0x630>)
 801adc0:	4a7e      	ldr	r2, [pc, #504]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801adc2:	9300      	str	r3, [sp, #0]
 801adc4:	2103      	movs	r1, #3
 801adc6:	f240 6391 	movw	r3, #1681	; 0x691
 801adca:	4620      	mov	r0, r4
 801adcc:	f8cd 9004 	str.w	r9, [sp, #4]
 801add0:	f7f5 fd5c 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 801add4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801add6:	4a79      	ldr	r2, [pc, #484]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801add8:	f818 3003 	ldrb.w	r3, [r8, r3]
 801addc:	9301      	str	r3, [sp, #4]
 801adde:	4b7f      	ldr	r3, [pc, #508]	; (801afdc <mbedtls_ssl_handshake_client_step+0x634>)
 801ade0:	9300      	str	r3, [sp, #0]
 801ade2:	4620      	mov	r0, r4
 801ade4:	f240 6392 	movw	r3, #1682	; 0x692
 801ade8:	2103      	movs	r1, #3
 801adea:	f7f5 fd4f 	bl	801088c <mbedtls_debug_print_msg>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 801adee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801adf0:	6898      	ldr	r0, [r3, #8]
 801adf2:	f7ff f8bd 	bl	8019f70 <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL
 801adf6:	bb18      	cbnz	r0, 801ae40 <mbedtls_ssl_handshake_client_step+0x498>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801adf8:	4b79      	ldr	r3, [pc, #484]	; (801afe0 <mbedtls_ssl_handshake_client_step+0x638>)
 801adfa:	9300      	str	r3, [sp, #0]
 801adfc:	f240 639c 	movw	r3, #1692	; 0x69c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ae00:	4a6e      	ldr	r2, [pc, #440]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ae02:	2101      	movs	r1, #1
 801ae04:	4620      	mov	r0, r4
 801ae06:	f7f5 fd41 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ae0a:	222f      	movs	r2, #47	; 0x2f
 801ae0c:	e678      	b.n	801ab00 <mbedtls_ssl_handshake_client_step+0x158>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801ae0e:	230c      	movs	r3, #12
 801ae10:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801ae12:	4620      	mov	r0, r4
 801ae14:	f001 fac0 	bl	801c398 <mbedtls_ssl_derive_keys>
 801ae18:	4607      	mov	r7, r0
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d0bd      	beq.n	801ad9a <mbedtls_ssl_handshake_client_step+0x3f2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801ae1e:	4b71      	ldr	r3, [pc, #452]	; (801afe4 <mbedtls_ssl_handshake_client_step+0x63c>)
 801ae20:	4a66      	ldr	r2, [pc, #408]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ae22:	9001      	str	r0, [sp, #4]
 801ae24:	9300      	str	r3, [sp, #0]
 801ae26:	2101      	movs	r1, #1
 801ae28:	f240 6387 	movw	r3, #1671	; 0x687
 801ae2c:	4620      	mov	r0, r4
 801ae2e:	f7f5 fd5d 	bl	80108ec <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ae32:	2250      	movs	r2, #80	; 0x50
 801ae34:	2102      	movs	r1, #2
 801ae36:	4620      	mov	r0, r4
 801ae38:	f002 f9be 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( ret );
 801ae3c:	463d      	mov	r5, r7
 801ae3e:	e5f3      	b.n	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 801ae40:	6843      	ldr	r3, [r0, #4]
 801ae42:	9301      	str	r3, [sp, #4]
 801ae44:	4b68      	ldr	r3, [pc, #416]	; (801afe8 <mbedtls_ssl_handshake_client_step+0x640>)
 801ae46:	4a5d      	ldr	r2, [pc, #372]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ae48:	9300      	str	r3, [sp, #0]
 801ae4a:	2103      	movs	r1, #3
 801ae4c:	f240 63a2 	movw	r3, #1698	; 0x6a2
 801ae50:	4620      	mov	r0, r4
 801ae52:	f7f5 fd1b 	bl	801088c <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 801ae56:	6823      	ldr	r3, [r4, #0]
 801ae58:	6962      	ldr	r2, [r4, #20]
 801ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae5e:	3b04      	subs	r3, #4
 801ae60:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801ae64:	b921      	cbnz	r1, 801ae70 <mbedtls_ssl_handshake_client_step+0x4c8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ae66:	4b5e      	ldr	r3, [pc, #376]	; (801afe0 <mbedtls_ssl_handshake_client_step+0x638>)
 801ae68:	9300      	str	r3, [sp, #0]
 801ae6a:	f240 63a9 	movw	r3, #1705	; 0x6a9
 801ae6e:	e7c7      	b.n	801ae00 <mbedtls_ssl_handshake_client_step+0x458>
            ssl->session_negotiate->ciphersuite )
 801ae70:	6b62      	ldr	r2, [r4, #52]	; 0x34
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 801ae72:	6890      	ldr	r0, [r2, #8]
 801ae74:	4281      	cmp	r1, r0
 801ae76:	d1f3      	bne.n	801ae60 <mbedtls_ssl_handshake_client_step+0x4b8>
    ssl->session_negotiate->compression = comp;
 801ae78:	2700      	movs	r7, #0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801ae7a:	4b5c      	ldr	r3, [pc, #368]	; (801afec <mbedtls_ssl_handshake_client_step+0x644>)
    ssl->session_negotiate->compression = comp;
 801ae7c:	60d7      	str	r7, [r2, #12]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801ae7e:	2102      	movs	r1, #2
 801ae80:	9300      	str	r3, [sp, #0]
 801ae82:	4a4e      	ldr	r2, [pc, #312]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801ae84:	f8cd b004 	str.w	fp, [sp, #4]
 801ae88:	f240 63c5 	movw	r3, #1733	; 0x6c5
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f7f5 fcfd 	bl	801088c <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 801ae92:	3628      	adds	r6, #40	; 0x28
    int renegotiation_info_seen = 0;
 801ae94:	46b9      	mov	r9, r7
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801ae96:	4f49      	ldr	r7, [pc, #292]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
    ext = buf + 40 + n;
 801ae98:	44b0      	add	r8, r6
    while( ext_len )
 801ae9a:	f1bb 0f00 	cmp.w	fp, #0
 801ae9e:	d111      	bne.n	801aec4 <mbedtls_ssl_handshake_client_step+0x51c>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801aea0:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801aea4:	2900      	cmp	r1, #0
 801aea6:	f040 81a9 	bne.w	801b1fc <mbedtls_ssl_handshake_client_step+0x854>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 801aeaa:	6823      	ldr	r3, [r4, #0]
 801aeac:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801aeb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801aeb4:	2b20      	cmp	r3, #32
 801aeb6:	f040 81a1 	bne.w	801b1fc <mbedtls_ssl_handshake_client_step+0x854>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801aeba:	4b4d      	ldr	r3, [pc, #308]	; (801aff0 <mbedtls_ssl_handshake_client_step+0x648>)
 801aebc:	9300      	str	r3, [sp, #0]
 801aebe:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 801aec2:	e072      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801aec4:	f8b8 6002 	ldrh.w	r6, [r8, #2]
 801aec8:	f8b8 3000 	ldrh.w	r3, [r8]
 801aecc:	ba76      	rev16	r6, r6
 801aece:	b2b6      	uxth	r6, r6
        if( ext_size + 4 > ext_len )
 801aed0:	1d32      	adds	r2, r6, #4
 801aed2:	ba5b      	rev16	r3, r3
 801aed4:	455a      	cmp	r2, fp
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	920a      	str	r2, [sp, #40]	; 0x28
 801aeda:	d904      	bls.n	801aee6 <mbedtls_ssl_handshake_client_step+0x53e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801aedc:	4b40      	ldr	r3, [pc, #256]	; (801afe0 <mbedtls_ssl_handshake_client_step+0x638>)
 801aede:	9300      	str	r3, [sp, #0]
 801aee0:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 801aee4:	e606      	b.n	801aaf4 <mbedtls_ssl_handshake_client_step+0x14c>
        switch( ext_id )
 801aee6:	2b10      	cmp	r3, #16
 801aee8:	f000 8144 	beq.w	801b174 <mbedtls_ssl_handshake_client_step+0x7cc>
 801aeec:	dc10      	bgt.n	801af10 <mbedtls_ssl_handshake_client_step+0x568>
 801aeee:	2b04      	cmp	r3, #4
 801aef0:	f000 80c6 	beq.w	801b080 <mbedtls_ssl_handshake_client_step+0x6d8>
 801aef4:	2b0b      	cmp	r3, #11
 801aef6:	f000 810c 	beq.w	801b112 <mbedtls_ssl_handshake_client_step+0x76a>
 801aefa:	2b01      	cmp	r3, #1
 801aefc:	f000 80a4 	beq.w	801b048 <mbedtls_ssl_handshake_client_step+0x6a0>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801af00:	9301      	str	r3, [sp, #4]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801af02:	4b3c      	ldr	r3, [pc, #240]	; (801aff4 <mbedtls_ssl_handshake_client_step+0x64c>)
 801af04:	9300      	str	r3, [sp, #0]
 801af06:	463a      	mov	r2, r7
 801af08:	f240 734c 	movw	r3, #1868	; 0x74c
 801af0c:	2103      	movs	r1, #3
 801af0e:	e12b      	b.n	801b168 <mbedtls_ssl_handshake_client_step+0x7c0>
        switch( ext_id )
 801af10:	2b23      	cmp	r3, #35	; 0x23
 801af12:	f000 80e5 	beq.w	801b0e0 <mbedtls_ssl_handshake_client_step+0x738>
 801af16:	f64f 7201 	movw	r2, #65281	; 0xff01
 801af1a:	4293      	cmp	r3, r2
 801af1c:	d019      	beq.n	801af52 <mbedtls_ssl_handshake_client_step+0x5aa>
 801af1e:	2b17      	cmp	r3, #23
 801af20:	d1ee      	bne.n	801af00 <mbedtls_ssl_handshake_client_step+0x558>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found extended_master_secret extension" ) );
 801af22:	4b35      	ldr	r3, [pc, #212]	; (801aff8 <mbedtls_ssl_handshake_client_step+0x650>)
 801af24:	9300      	str	r3, [sp, #0]
 801af26:	463a      	mov	r2, r7
 801af28:	f240 730d 	movw	r3, #1805	; 0x70d
 801af2c:	2103      	movs	r1, #3
 801af2e:	4620      	mov	r0, r4
 801af30:	f7f5 fcac 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801af34:	6823      	ldr	r3, [r4, #0]
 801af36:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801af3a:	079a      	lsls	r2, r3, #30
 801af3c:	d504      	bpl.n	801af48 <mbedtls_ssl_handshake_client_step+0x5a0>
 801af3e:	6963      	ldr	r3, [r4, #20]
 801af40:	b113      	cbz	r3, 801af48 <mbedtls_ssl_handshake_client_step+0x5a0>
        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
 801af42:	2e00      	cmp	r6, #0
 801af44:	f000 80c7 	beq.w	801b0d6 <mbedtls_ssl_handshake_client_step+0x72e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching extended master secret extension" ) );
 801af48:	4b2c      	ldr	r3, [pc, #176]	; (801affc <mbedtls_ssl_handshake_client_step+0x654>)
 801af4a:	9300      	str	r3, [sp, #0]
 801af4c:	f240 4393 	movw	r3, #1171	; 0x493
 801af50:	e02b      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 801af52:	4b2b      	ldr	r3, [pc, #172]	; (801b000 <mbedtls_ssl_handshake_client_step+0x658>)
 801af54:	9300      	str	r3, [sp, #0]
 801af56:	463a      	mov	r2, r7
 801af58:	f240 63d9 	movw	r3, #1753	; 0x6d9
 801af5c:	2103      	movs	r1, #3
 801af5e:	4620      	mov	r0, r4
 801af60:	f7f5 fc94 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801af64:	68a3      	ldr	r3, [r4, #8]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d05f      	beq.n	801b02a <mbedtls_ssl_handshake_client_step+0x682>
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801af6a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801af6e:	0059      	lsls	r1, r3, #1
 801af70:	1c4a      	adds	r2, r1, #1
 801af72:	4296      	cmp	r6, r2
 801af74:	d115      	bne.n	801afa2 <mbedtls_ssl_handshake_client_step+0x5fa>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801af76:	f898 2004 	ldrb.w	r2, [r8, #4]
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801af7a:	4291      	cmp	r1, r2
 801af7c:	d111      	bne.n	801afa2 <mbedtls_ssl_handshake_client_step+0x5fa>
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 801af7e:	1d18      	adds	r0, r3, #4
 801af80:	f108 0c04 	add.w	ip, r8, #4
 801af84:	f104 09c3 	add.w	r9, r4, #195	; 0xc3
 801af88:	4440      	add	r0, r8
    unsigned char diff = 0;
 801af8a:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
 801af8c:	4584      	cmp	ip, r0
 801af8e:	d13b      	bne.n	801b008 <mbedtls_ssl_handshake_client_step+0x660>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801af90:	b93a      	cbnz	r2, 801afa2 <mbedtls_ssl_handshake_client_step+0x5fa>
 801af92:	4443      	add	r3, r8
 801af94:	f104 0ccf 	add.w	ip, r4, #207	; 0xcf
 801af98:	4441      	add	r1, r8
 801af9a:	428b      	cmp	r3, r1
 801af9c:	d13d      	bne.n	801b01a <mbedtls_ssl_handshake_client_step+0x672>
                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||
 801af9e:	2a00      	cmp	r2, #0
 801afa0:	d04f      	beq.n	801b042 <mbedtls_ssl_handshake_client_step+0x69a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching renegotiation info" ) );
 801afa2:	4b18      	ldr	r3, [pc, #96]	; (801b004 <mbedtls_ssl_handshake_client_step+0x65c>)
 801afa4:	9300      	str	r3, [sp, #0]
 801afa6:	f240 432f 	movw	r3, #1071	; 0x42f
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801afaa:	4a04      	ldr	r2, [pc, #16]	; (801afbc <mbedtls_ssl_handshake_client_step+0x614>)
 801afac:	2101      	movs	r1, #1
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801afae:	4620      	mov	r0, r4
 801afb0:	f7f5 fc6c 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801afb4:	2228      	movs	r2, #40	; 0x28
 801afb6:	e5a3      	b.n	801ab00 <mbedtls_ssl_handshake_client_step+0x158>
 801afb8:	0803124d 	.word	0x0803124d
 801afbc:	08030c38 	.word	0x08030c38
 801afc0:	ffff8f00 	.word	0xffff8f00
 801afc4:	08031271 	.word	0x08031271
 801afc8:	08031293 	.word	0x08031293
 801afcc:	080310dc 	.word	0x080310dc
 801afd0:	0803276a 	.word	0x0803276a
 801afd4:	080312c4 	.word	0x080312c4
 801afd8:	080312e0 	.word	0x080312e0
 801afdc:	08031307 	.word	0x08031307
 801afe0:	08031175 	.word	0x08031175
 801afe4:	080312ac 	.word	0x080312ac
 801afe8:	08031327 	.word	0x08031327
 801afec:	0803134c 	.word	0x0803134c
 801aff0:	080315dd 	.word	0x080315dd
 801aff4:	080315b6 	.word	0x080315b6
 801aff8:	0803146a 	.word	0x0803146a
 801affc:	08031491 	.word	0x08031491
 801b000:	08031375 	.word	0x08031375
 801b004:	08031393 	.word	0x08031393
        diff |= A[i] ^ B[i];
 801b008:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801b00c:	f819 af01 	ldrb.w	sl, [r9, #1]!
 801b010:	ea8e 0e0a 	eor.w	lr, lr, sl
 801b014:	ea42 020e 	orr.w	r2, r2, lr
    for( i = 0; i < n; i++ )
 801b018:	e7b8      	b.n	801af8c <mbedtls_ssl_handshake_client_step+0x5e4>
        diff |= A[i] ^ B[i];
 801b01a:	7958      	ldrb	r0, [r3, #5]
 801b01c:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801b020:	ea80 000e 	eor.w	r0, r0, lr
 801b024:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 801b026:	3301      	adds	r3, #1
 801b028:	e7b7      	b.n	801af9a <mbedtls_ssl_handshake_client_step+0x5f2>
        if( len != 1 || buf[0] != 0x00 )
 801b02a:	2e01      	cmp	r6, #1
 801b02c:	d102      	bne.n	801b034 <mbedtls_ssl_handshake_client_step+0x68c>
 801b02e:	f898 3004 	ldrb.w	r3, [r8, #4]
 801b032:	b123      	cbz	r3, 801b03e <mbedtls_ssl_handshake_client_step+0x696>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 801b034:	4bb0      	ldr	r3, [pc, #704]	; (801b2f8 <mbedtls_ssl_handshake_client_step+0x950>)
 801b036:	9300      	str	r3, [sp, #0]
 801b038:	f240 433a 	movw	r3, #1082	; 0x43a
 801b03c:	e7b5      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 801b03e:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
            renegotiation_info_seen = 1;
 801b042:	f04f 0901 	mov.w	r9, #1
 801b046:	e032      	b.n	801b0ae <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found max_fragment_length extension" ) );
 801b048:	4bac      	ldr	r3, [pc, #688]	; (801b2fc <mbedtls_ssl_handshake_client_step+0x954>)
 801b04a:	9300      	str	r3, [sp, #0]
 801b04c:	463a      	mov	r2, r7
 801b04e:	f240 63e6 	movw	r3, #1766	; 0x6e6
 801b052:	2103      	movs	r1, #3
 801b054:	4620      	mov	r0, r4
 801b056:	f7f5 fc19 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 801b05a:	6823      	ldr	r3, [r4, #0]
 801b05c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801b060:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 801b064:	b13a      	cbz	r2, 801b076 <mbedtls_ssl_handshake_client_step+0x6ce>
 801b066:	2e01      	cmp	r6, #1
 801b068:	d105      	bne.n	801b076 <mbedtls_ssl_handshake_client_step+0x6ce>
        len != 1 ||
 801b06a:	f898 2004 	ldrb.w	r2, [r8, #4]
 801b06e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801b072:	429a      	cmp	r2, r3
 801b074:	d01b      	beq.n	801b0ae <mbedtls_ssl_handshake_client_step+0x706>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching max fragment length extension" ) );
 801b076:	4ba2      	ldr	r3, [pc, #648]	; (801b300 <mbedtls_ssl_handshake_client_step+0x958>)
 801b078:	9300      	str	r3, [sp, #0]
 801b07a:	f240 4353 	movw	r3, #1107	; 0x453
 801b07e:	e794      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found truncated_hmac extension" ) );
 801b080:	4ba0      	ldr	r3, [pc, #640]	; (801b304 <mbedtls_ssl_handshake_client_step+0x95c>)
 801b082:	9300      	str	r3, [sp, #0]
 801b084:	2103      	movs	r1, #3
 801b086:	f240 63f3 	movw	r3, #1779	; 0x6f3
 801b08a:	463a      	mov	r2, r7
 801b08c:	4620      	mov	r0, r4
 801b08e:	f7f5 fbfd 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED ||
 801b092:	6823      	ldr	r3, [r4, #0]
 801b094:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b098:	0719      	lsls	r1, r3, #28
 801b09a:	d500      	bpl.n	801b09e <mbedtls_ssl_handshake_client_step+0x6f6>
 801b09c:	b126      	cbz	r6, 801b0a8 <mbedtls_ssl_handshake_client_step+0x700>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching truncated HMAC extension" ) );
 801b09e:	4b9a      	ldr	r3, [pc, #616]	; (801b308 <mbedtls_ssl_handshake_client_step+0x960>)
 801b0a0:	9300      	str	r3, [sp, #0]
 801b0a2:	f240 4365 	movw	r3, #1125	; 0x465
 801b0a6:	e780      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
    ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;
 801b0a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0aa:	2201      	movs	r2, #1
 801b0ac:	67da      	str	r2, [r3, #124]	; 0x7c
        ext_len -= 4 + ext_size;
 801b0ae:	ebab 0606 	sub.w	r6, fp, r6
        ext += 4 + ext_size;
 801b0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        ext_len -= 4 + ext_size;
 801b0b4:	f1a6 0b04 	sub.w	fp, r6, #4
        if( ext_len > 0 && ext_len < 4 )
 801b0b8:	3e05      	subs	r6, #5
 801b0ba:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 801b0bc:	4498      	add	r8, r3
        if( ext_len > 0 && ext_len < 4 )
 801b0be:	f63f aeec 	bhi.w	801ae9a <mbedtls_ssl_handshake_client_step+0x4f2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b0c2:	4b92      	ldr	r3, [pc, #584]	; (801b30c <mbedtls_ssl_handshake_client_step+0x964>)
 801b0c4:	9300      	str	r3, [sp, #0]
 801b0c6:	4a92      	ldr	r2, [pc, #584]	; (801b310 <mbedtls_ssl_handshake_client_step+0x968>)
 801b0c8:	f240 7355 	movw	r3, #1877	; 0x755
 801b0cc:	2101      	movs	r1, #1
 801b0ce:	4620      	mov	r0, r4
 801b0d0:	f7f5 fbdc 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801b0d4:	e518      	b.n	801ab08 <mbedtls_ssl_handshake_client_step+0x160>
    ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801b0d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b0d8:	2201      	movs	r2, #1
 801b0da:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    return( 0 );
 801b0de:	e7e6      	b.n	801b0ae <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found session_ticket extension" ) );
 801b0e0:	4b8c      	ldr	r3, [pc, #560]	; (801b314 <mbedtls_ssl_handshake_client_step+0x96c>)
 801b0e2:	9300      	str	r3, [sp, #0]
 801b0e4:	463a      	mov	r2, r7
 801b0e6:	f240 731a 	movw	r3, #1818	; 0x71a
 801b0ea:	2103      	movs	r1, #3
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	f7f5 fbcd 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 801b0f2:	6823      	ldr	r3, [r4, #0]
 801b0f4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b0f8:	06db      	lsls	r3, r3, #27
 801b0fa:	d500      	bpl.n	801b0fe <mbedtls_ssl_handshake_client_step+0x756>
 801b0fc:	b126      	cbz	r6, 801b108 <mbedtls_ssl_handshake_client_step+0x760>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching session ticket extension" ) );
 801b0fe:	4b86      	ldr	r3, [pc, #536]	; (801b318 <mbedtls_ssl_handshake_client_step+0x970>)
 801b100:	9300      	str	r3, [sp, #0]
 801b102:	f240 43a9 	movw	r3, #1193	; 0x4a9
 801b106:	e750      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
    ssl->handshake->new_session_ticket = 1;
 801b108:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b10a:	2201      	movs	r2, #1
 801b10c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return( 0 );
 801b110:	e7cd      	b.n	801b0ae <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported_point_formats extension" ) );
 801b112:	4b82      	ldr	r3, [pc, #520]	; (801b31c <mbedtls_ssl_handshake_client_step+0x974>)
 801b114:	9300      	str	r3, [sp, #0]
 801b116:	463a      	mov	r2, r7
 801b118:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 801b11c:	2103      	movs	r1, #3
 801b11e:	4620      	mov	r0, r4
 801b120:	f7f5 fbb4 	bl	801088c <mbedtls_debug_print_msg>
    list_size = buf[0];
 801b124:	f898 3004 	ldrb.w	r3, [r8, #4]
    if( list_size + 1 != len )
 801b128:	1c5a      	adds	r2, r3, #1
 801b12a:	4296      	cmp	r6, r2
 801b12c:	d004      	beq.n	801b138 <mbedtls_ssl_handshake_client_step+0x790>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b12e:	4b77      	ldr	r3, [pc, #476]	; (801b30c <mbedtls_ssl_handshake_client_step+0x964>)
 801b130:	9300      	str	r3, [sp, #0]
 801b132:	f240 43c3 	movw	r3, #1219	; 0x4c3
 801b136:	e4dd      	b.n	801aaf4 <mbedtls_ssl_handshake_client_step+0x14c>
    while( list_size > 0 )
 801b138:	f108 0205 	add.w	r2, r8, #5
 801b13c:	4610      	mov	r0, r2
 801b13e:	b923      	cbnz	r3, 801b14a <mbedtls_ssl_handshake_client_step+0x7a2>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
 801b140:	4b77      	ldr	r3, [pc, #476]	; (801b320 <mbedtls_ssl_handshake_client_step+0x978>)
 801b142:	9300      	str	r3, [sp, #0]
 801b144:	f240 43dd 	movw	r3, #1245	; 0x4dd
 801b148:	e72f      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 801b14a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b14e:	2901      	cmp	r1, #1
 801b150:	d80e      	bhi.n	801b170 <mbedtls_ssl_handshake_client_step+0x7c8>
            ssl->handshake->ecdh_ctx.point_format = p[0];
 801b152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b154:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
 801b158:	7803      	ldrb	r3, [r0, #0]
 801b15a:	9301      	str	r3, [sp, #4]
 801b15c:	4b71      	ldr	r3, [pc, #452]	; (801b324 <mbedtls_ssl_handshake_client_step+0x97c>)
 801b15e:	9300      	str	r3, [sp, #0]
 801b160:	463a      	mov	r2, r7
 801b162:	f240 43d5 	movw	r3, #1237	; 0x4d5
 801b166:	2104      	movs	r1, #4
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b168:	4620      	mov	r0, r4
 801b16a:	f7f5 fb8f 	bl	801088c <mbedtls_debug_print_msg>
 801b16e:	e79e      	b.n	801b0ae <mbedtls_ssl_handshake_client_step+0x706>
        list_size--;
 801b170:	3b01      	subs	r3, #1
        p++;
 801b172:	e7e3      	b.n	801b13c <mbedtls_ssl_handshake_client_step+0x794>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801b174:	4b6c      	ldr	r3, [pc, #432]	; (801b328 <mbedtls_ssl_handshake_client_step+0x980>)
 801b176:	9300      	str	r3, [sp, #0]
 801b178:	2103      	movs	r1, #3
 801b17a:	f240 7343 	movw	r3, #1859	; 0x743
 801b17e:	463a      	mov	r2, r7
 801b180:	4620      	mov	r0, r4
 801b182:	f7f5 fb83 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->conf->alpn_list == NULL )
 801b186:	6823      	ldr	r3, [r4, #0]
 801b188:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b18a:	b921      	cbnz	r1, 801b196 <mbedtls_ssl_handshake_client_step+0x7ee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching ALPN extension" ) );
 801b18c:	4b67      	ldr	r3, [pc, #412]	; (801b32c <mbedtls_ssl_handshake_client_step+0x984>)
 801b18e:	9300      	str	r3, [sp, #0]
 801b190:	f240 530f 	movw	r3, #1295	; 0x50f
 801b194:	e709      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
    if( len < 4 )
 801b196:	2e03      	cmp	r6, #3
 801b198:	f67f acb1 	bls.w	801aafe <mbedtls_ssl_handshake_client_step+0x156>
    list_len = ( buf[0] << 8 ) | buf[1];
 801b19c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b1a0:	ba5b      	rev16	r3, r3
 801b1a2:	b29b      	uxth	r3, r3
    if( list_len != len - 2 )
 801b1a4:	1eb2      	subs	r2, r6, #2
 801b1a6:	4293      	cmp	r3, r2
 801b1a8:	f47f aca9 	bne.w	801aafe <mbedtls_ssl_handshake_client_step+0x156>
    name_len = buf[2];
 801b1ac:	f898 a006 	ldrb.w	sl, [r8, #6]
    if( name_len != list_len - 1 )
 801b1b0:	1ef3      	subs	r3, r6, #3
 801b1b2:	459a      	cmp	sl, r3
 801b1b4:	f47f aca3 	bne.w	801aafe <mbedtls_ssl_handshake_client_step+0x156>
 801b1b8:	1f0b      	subs	r3, r1, #4
 801b1ba:	9309      	str	r3, [sp, #36]	; 0x24
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b1bc:	f108 0307 	add.w	r3, r8, #7
 801b1c0:	ee08 3a10 	vmov	s16, r3
    for( p = ssl->conf->alpn_list; *p != NULL; p++ )
 801b1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1c6:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801b1ca:	9309      	str	r3, [sp, #36]	; 0x24
 801b1cc:	b921      	cbnz	r1, 801b1d8 <mbedtls_ssl_handshake_client_step+0x830>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "ALPN extension: no matching protocol" ) );
 801b1ce:	4b58      	ldr	r3, [pc, #352]	; (801b330 <mbedtls_ssl_handshake_client_step+0x988>)
 801b1d0:	9300      	str	r3, [sp, #0]
 801b1d2:	f240 5342 	movw	r3, #1346	; 0x542
 801b1d6:	e6e8      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
        if( name_len == strlen( *p ) &&
 801b1d8:	4608      	mov	r0, r1
 801b1da:	910b      	str	r1, [sp, #44]	; 0x2c
 801b1dc:	f7e5 f802 	bl	80001e4 <strlen>
 801b1e0:	4582      	cmp	sl, r0
 801b1e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b1e4:	d1ee      	bne.n	801b1c4 <mbedtls_ssl_handshake_client_step+0x81c>
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b1e6:	ee18 0a10 	vmov	r0, s16
 801b1ea:	4652      	mov	r2, sl
 801b1ec:	f006 ffce 	bl	802218c <memcmp>
        if( name_len == strlen( *p ) &&
 801b1f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b1f2:	2800      	cmp	r0, #0
 801b1f4:	d1e6      	bne.n	801b1c4 <mbedtls_ssl_handshake_client_step+0x81c>
            ssl->alpn_chosen = *p;
 801b1f6:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
            return( 0 );
 801b1fa:	e758      	b.n	801b0ae <mbedtls_ssl_handshake_client_step+0x706>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b1fc:	68a0      	ldr	r0, [r4, #8]
 801b1fe:	2801      	cmp	r0, #1
 801b200:	d120      	bne.n	801b244 <mbedtls_ssl_handshake_client_step+0x89c>
 801b202:	2901      	cmp	r1, #1
 801b204:	d108      	bne.n	801b218 <mbedtls_ssl_handshake_client_step+0x870>
             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&
 801b206:	f1b9 0f00 	cmp.w	r9, #0
 801b20a:	d11b      	bne.n	801b244 <mbedtls_ssl_handshake_client_step+0x89c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension missing (secure)" ) );
 801b20c:	4b49      	ldr	r3, [pc, #292]	; (801b334 <mbedtls_ssl_handshake_client_step+0x98c>)
 801b20e:	9300      	str	r3, [sp, #0]
 801b210:	4a3f      	ldr	r2, [pc, #252]	; (801b310 <mbedtls_ssl_handshake_client_step+0x968>)
 801b212:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 801b216:	e6ca      	b.n	801afae <mbedtls_ssl_handshake_client_step+0x606>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b218:	b9a1      	cbnz	r1, 801b244 <mbedtls_ssl_handshake_client_step+0x89c>
             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )
 801b21a:	6823      	ldr	r3, [r4, #0]
 801b21c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b220:	f013 0f30 	tst.w	r3, #48	; 0x30
 801b224:	d104      	bne.n	801b230 <mbedtls_ssl_handshake_client_step+0x888>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation not allowed" ) );
 801b226:	4b44      	ldr	r3, [pc, #272]	; (801b338 <mbedtls_ssl_handshake_client_step+0x990>)
 801b228:	9300      	str	r3, [sp, #0]
 801b22a:	f240 736f 	movw	r3, #1903	; 0x76f
 801b22e:	e6bc      	b.n	801afaa <mbedtls_ssl_handshake_client_step+0x602>
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b230:	f1b9 0f00 	cmp.w	r9, #0
 801b234:	d006      	beq.n	801b244 <mbedtls_ssl_handshake_client_step+0x89c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b236:	4b41      	ldr	r3, [pc, #260]	; (801b33c <mbedtls_ssl_handshake_client_step+0x994>)
 801b238:	9300      	str	r3, [sp, #0]
 801b23a:	4a35      	ldr	r2, [pc, #212]	; (801b310 <mbedtls_ssl_handshake_client_step+0x968>)
 801b23c:	f240 7376 	movw	r3, #1910	; 0x776
 801b240:	4649      	mov	r1, r9
 801b242:	e6b4      	b.n	801afae <mbedtls_ssl_handshake_client_step+0x606>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 801b244:	4b3e      	ldr	r3, [pc, #248]	; (801b340 <mbedtls_ssl_handshake_client_step+0x998>)
 801b246:	9300      	str	r3, [sp, #0]
 801b248:	f240 7382 	movw	r3, #1922	; 0x782
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801b24c:	4a30      	ldr	r2, [pc, #192]	; (801b310 <mbedtls_ssl_handshake_client_step+0x968>)
 801b24e:	2102      	movs	r1, #2
 801b250:	4620      	mov	r0, r4
 801b252:	f7f5 fb1b 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801b256:	f7ff bbe7 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801b25a:	4620      	mov	r0, r4
 801b25c:	f003 fd32 	bl	801ecc4 <mbedtls_ssl_parse_certificate>
 801b260:	f7ff bbeb 	b.w	801aa3a <mbedtls_ssl_handshake_client_step+0x92>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b264:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b266:	4a2a      	ldr	r2, [pc, #168]	; (801b310 <mbedtls_ssl_handshake_client_step+0x968>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b268:	f8d3 b000 	ldr.w	fp, [r3]
    unsigned char *p = NULL, *end = NULL;
 801b26c:	2300      	movs	r3, #0
 801b26e:	930c      	str	r3, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b270:	4b34      	ldr	r3, [pc, #208]	; (801b344 <mbedtls_ssl_handshake_client_step+0x99c>)
 801b272:	9300      	str	r3, [sp, #0]
 801b274:	2102      	movs	r1, #2
 801b276:	f640 03d7 	movw	r3, #2263	; 0x8d7
 801b27a:	4620      	mov	r0, r4
 801b27c:	f7f5 fb06 	bl	801088c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801b280:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b284:	2b01      	cmp	r3, #1
 801b286:	d10d      	bne.n	801b2a4 <mbedtls_ssl_handshake_client_step+0x8fc>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 801b288:	4b2f      	ldr	r3, [pc, #188]	; (801b348 <mbedtls_ssl_handshake_client_step+0x9a0>)
 801b28a:	9300      	str	r3, [sp, #0]
 801b28c:	f640 03dc 	movw	r3, #2268	; 0x8dc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801b290:	4a1f      	ldr	r2, [pc, #124]	; (801b310 <mbedtls_ssl_handshake_client_step+0x968>)
 801b292:	2102      	movs	r1, #2
 801b294:	4620      	mov	r0, r4
 801b296:	f7f5 faf9 	bl	801088c <mbedtls_debug_print_msg>
        ssl->state++;
 801b29a:	6863      	ldr	r3, [r4, #4]
 801b29c:	3301      	adds	r3, #1
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801b29e:	6063      	str	r3, [r4, #4]
           break;
 801b2a0:	f7ff bbc2 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	f002 fb9d 	bl	801d9e4 <mbedtls_ssl_read_record>
 801b2aa:	4605      	mov	r5, r0
 801b2ac:	b130      	cbz	r0, 801b2bc <mbedtls_ssl_handshake_client_step+0x914>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b2ae:	4b27      	ldr	r3, [pc, #156]	; (801b34c <mbedtls_ssl_handshake_client_step+0x9a4>)
 801b2b0:	9300      	str	r3, [sp, #0]
 801b2b2:	9001      	str	r0, [sp, #4]
 801b2b4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801b2b8:	f7ff bbd5 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b2bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b2be:	2b16      	cmp	r3, #22
 801b2c0:	d005      	beq.n	801b2ce <mbedtls_ssl_handshake_client_step+0x926>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b2c2:	4b23      	ldr	r3, [pc, #140]	; (801b350 <mbedtls_ssl_handshake_client_step+0x9a8>)
 801b2c4:	9300      	str	r3, [sp, #0]
 801b2c6:	f640 1302 	movw	r3, #2306	; 0x902
 801b2ca:	f7ff bbfc 	b.w	801aac6 <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 801b2ce:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 801b2d0:	7833      	ldrb	r3, [r6, #0]
 801b2d2:	2b0c      	cmp	r3, #12
 801b2d4:	d046      	beq.n	801b364 <mbedtls_ssl_handshake_client_step+0x9bc>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801b2d6:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b2da:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b2de:	2b05      	cmp	r3, #5
 801b2e0:	d13a      	bne.n	801b358 <mbedtls_ssl_handshake_client_step+0x9b0>
            ssl->keep_current_message = 1;
 801b2e2:	2301      	movs	r3, #1
 801b2e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->state++;
 801b2e8:	6863      	ldr	r3, [r4, #4]
 801b2ea:	3301      	adds	r3, #1
 801b2ec:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 801b2ee:	4b19      	ldr	r3, [pc, #100]	; (801b354 <mbedtls_ssl_handshake_client_step+0x9ac>)
 801b2f0:	9300      	str	r3, [sp, #0]
 801b2f2:	f640 232f 	movw	r3, #2607	; 0xa2f
 801b2f6:	e7a9      	b.n	801b24c <mbedtls_ssl_handshake_client_step+0x8a4>
 801b2f8:	080313b3 	.word	0x080313b3
 801b2fc:	080313d6 	.word	0x080313d6
 801b300:	080313fa 	.word	0x080313fa
 801b304:	08031425 	.word	0x08031425
 801b308:	08031444 	.word	0x08031444
 801b30c:	08031175 	.word	0x08031175
 801b310:	08030c38 	.word	0x08030c38
 801b314:	080314bf 	.word	0x080314bf
 801b318:	080314de 	.word	0x080314de
 801b31c:	08031504 	.word	0x08031504
 801b320:	08031546 	.word	0x08031546
 801b324:	0803152c 	.word	0x0803152c
 801b328:	08031560 	.word	0x08031560
 801b32c:	08031575 	.word	0x08031575
 801b330:	08031591 	.word	0x08031591
 801b334:	0803160a 	.word	0x0803160a
 801b338:	08031638 	.word	0x08031638
 801b33c:	08031659 	.word	0x08031659
 801b340:	08031687 	.word	0x08031687
 801b344:	0803169d 	.word	0x0803169d
 801b348:	080316ba 	.word	0x080316ba
 801b34c:	08031106 	.word	0x08031106
 801b350:	080316dc 	.word	0x080316dc
 801b354:	080318b9 	.word	0x080318b9
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 801b358:	4b9e      	ldr	r3, [pc, #632]	; (801b5d4 <mbedtls_ssl_handshake_client_step+0xc2c>)
 801b35a:	9300      	str	r3, [sp, #0]
 801b35c:	f640 1317 	movw	r3, #2327	; 0x917
 801b360:	f7ff bbb1 	b.w	801aac6 <mbedtls_ssl_handshake_client_step+0x11e>
    end = ssl->in_msg + ssl->in_hslen;
 801b364:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b368:	1d32      	adds	r2, r6, #4
    end = ssl->in_msg + ssl->in_hslen;
 801b36a:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b36c:	3b04      	subs	r3, #4
 801b36e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801b372:	4b99      	ldr	r3, [pc, #612]	; (801b5d8 <mbedtls_ssl_handshake_client_step+0xc30>)
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b374:	920c      	str	r2, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b376:	9300      	str	r3, [sp, #0]
 801b378:	4a98      	ldr	r2, [pc, #608]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b37a:	f640 1321 	movw	r3, #2337	; 0x921
 801b37e:	2103      	movs	r1, #3
 801b380:	4620      	mov	r0, r4
 801b382:	f7f5 fae3 	bl	801094c <mbedtls_debug_print_buf>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801b386:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b38a:	1eda      	subs	r2, r3, #3
 801b38c:	2a01      	cmp	r2, #1
 801b38e:	d901      	bls.n	801b394 <mbedtls_ssl_handshake_client_step+0x9ec>
 801b390:	2b08      	cmp	r3, #8
 801b392:	d17f      	bne.n	801b494 <mbedtls_ssl_handshake_client_step+0xaec>
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
 801b394:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b396:	4632      	mov	r2, r6
 801b398:	a90c      	add	r1, sp, #48	; 0x30
 801b39a:	3004      	adds	r0, #4
 801b39c:	f7f5 fce9 	bl	8010d72 <mbedtls_ecdh_read_params>
 801b3a0:	b1d0      	cbz	r0, 801b3d8 <mbedtls_ssl_handshake_client_step+0xa30>
        MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ecdh_read_params" ), ret );
 801b3a2:	4b8f      	ldr	r3, [pc, #572]	; (801b5e0 <mbedtls_ssl_handshake_client_step+0xc38>)
 801b3a4:	9001      	str	r0, [sp, #4]
 801b3a6:	9300      	str	r3, [sp, #0]
 801b3a8:	4a8c      	ldr	r2, [pc, #560]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b3aa:	f240 73e6 	movw	r3, #2022	; 0x7e6
 801b3ae:	2101      	movs	r1, #1
 801b3b0:	4620      	mov	r0, r4
 801b3b2:	f7f5 fa9b 	bl	80108ec <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b3b6:	4b8b      	ldr	r3, [pc, #556]	; (801b5e4 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b3b8:	4a88      	ldr	r2, [pc, #544]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b3ba:	9300      	str	r3, [sp, #0]
 801b3bc:	2101      	movs	r1, #1
 801b3be:	f640 1354 	movw	r3, #2388	; 0x954
 801b3c2:	4620      	mov	r0, r4
 801b3c4:	f7f5 fa62 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b3c8:	222f      	movs	r2, #47	; 0x2f
 801b3ca:	2102      	movs	r1, #2
 801b3cc:	4620      	mov	r0, r4
 801b3ce:	f001 fef3 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b3d2:	4d85      	ldr	r5, [pc, #532]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b3d4:	f7ff bb28 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    curve_info = mbedtls_ecp_curve_info_from_grp_id( ssl->handshake->ecdh_ctx.grp.id );
 801b3d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b3da:	7918      	ldrb	r0, [r3, #4]
 801b3dc:	f7f6 fcec 	bl	8011db8 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
 801b3e0:	b990      	cbnz	r0, 801b408 <mbedtls_ssl_handshake_client_step+0xa60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b3e2:	4b82      	ldr	r3, [pc, #520]	; (801b5ec <mbedtls_ssl_handshake_client_step+0xc44>)
 801b3e4:	9300      	str	r3, [sp, #0]
 801b3e6:	4a7d      	ldr	r2, [pc, #500]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b3e8:	f240 73ba 	movw	r3, #1978	; 0x7ba
 801b3ec:	2101      	movs	r1, #1
 801b3ee:	4620      	mov	r0, r4
 801b3f0:	f7f5 fa4c 	bl	801088c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message (ECDHE curve)" ) );
 801b3f4:	4b7e      	ldr	r3, [pc, #504]	; (801b5f0 <mbedtls_ssl_handshake_client_step+0xc48>)
 801b3f6:	9300      	str	r3, [sp, #0]
 801b3f8:	4a78      	ldr	r2, [pc, #480]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b3fa:	f240 73ec 	movw	r3, #2028	; 0x7ec
 801b3fe:	2101      	movs	r1, #1
 801b400:	4620      	mov	r0, r4
 801b402:	f7f5 fa43 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b406:	e7d6      	b.n	801b3b6 <mbedtls_ssl_handshake_client_step+0xa0e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );
 801b408:	6883      	ldr	r3, [r0, #8]
 801b40a:	9301      	str	r3, [sp, #4]
 801b40c:	4b79      	ldr	r3, [pc, #484]	; (801b5f4 <mbedtls_ssl_handshake_client_step+0xc4c>)
 801b40e:	9300      	str	r3, [sp, #0]
 801b410:	2102      	movs	r1, #2
 801b412:	f240 73be 	movw	r3, #1982	; 0x7be
 801b416:	4620      	mov	r0, r4
 801b418:	4a70      	ldr	r2, [pc, #448]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b41a:	f7f5 fa37 	bl	801088c <mbedtls_debug_print_msg>
    if( mbedtls_ssl_check_curve( ssl, ssl->handshake->ecdh_ctx.grp.id ) != 0 )
 801b41e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b420:	4620      	mov	r0, r4
 801b422:	7919      	ldrb	r1, [r3, #4]
 801b424:	f003 fbf8 	bl	801ec18 <mbedtls_ssl_check_curve>
 801b428:	2800      	cmp	r0, #0
 801b42a:	d1e3      	bne.n	801b3f4 <mbedtls_ssl_handshake_client_step+0xa4c>
    MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Qp", &ssl->handshake->ecdh_ctx.Qp );
 801b42c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b42e:	4a6b      	ldr	r2, [pc, #428]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b430:	33b0      	adds	r3, #176	; 0xb0
 801b432:	9301      	str	r3, [sp, #4]
 801b434:	4b70      	ldr	r3, [pc, #448]	; (801b5f8 <mbedtls_ssl_handshake_client_step+0xc50>)
 801b436:	9300      	str	r3, [sp, #0]
 801b438:	2103      	movs	r1, #3
 801b43a:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 801b43e:	4620      	mov	r0, r4
 801b440:	f7f5 fb6e 	bl	8010b20 <mbedtls_debug_print_ecp>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801b444:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b448:	3b02      	subs	r3, #2
 801b44a:	2b02      	cmp	r3, #2
 801b44c:	f63f af4c 	bhi.w	801b2e8 <mbedtls_ssl_handshake_client_step+0x940>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801b450:	6963      	ldr	r3, [r4, #20]
 801b452:	2b03      	cmp	r3, #3
 801b454:	d16e      	bne.n	801b534 <mbedtls_ssl_handshake_client_step+0xb8c>
        size_t params_len = p - params;
 801b456:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    if( (*p) + 2 > end )
 801b45a:	f10a 0302 	add.w	r3, sl, #2
 801b45e:	429e      	cmp	r6, r3
 801b460:	d313      	bcc.n	801b48a <mbedtls_ssl_handshake_client_step+0xae2>
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b462:	f89a 0000 	ldrb.w	r0, [sl]
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b466:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b46a:	f003 fbc7 	bl	801ebfc <mbedtls_ssl_md_alg_from_hash>
 801b46e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b470:	4607      	mov	r7, r0
 801b472:	b9d8      	cbnz	r0, 801b4ac <mbedtls_ssl_handshake_client_step+0xb04>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Server used unsupported "
 801b474:	781b      	ldrb	r3, [r3, #0]
 801b476:	9301      	str	r3, [sp, #4]
 801b478:	4b60      	ldr	r3, [pc, #384]	; (801b5fc <mbedtls_ssl_handshake_client_step+0xc54>)
 801b47a:	9300      	str	r3, [sp, #0]
 801b47c:	f640 0384 	movw	r3, #2180	; 0x884
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b480:	4a56      	ldr	r2, [pc, #344]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b482:	2101      	movs	r1, #1
 801b484:	4620      	mov	r0, r4
 801b486:	f7f5 fa01 	bl	801088c <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b48a:	4b56      	ldr	r3, [pc, #344]	; (801b5e4 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b48c:	9300      	str	r3, [sp, #0]
 801b48e:	f640 1385 	movw	r3, #2437	; 0x985
 801b492:	e048      	b.n	801b526 <mbedtls_ssl_handshake_client_step+0xb7e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b494:	4b55      	ldr	r3, [pc, #340]	; (801b5ec <mbedtls_ssl_handshake_client_step+0xc44>)
 801b496:	9300      	str	r3, [sp, #0]
 801b498:	f640 136e 	movw	r3, #2414	; 0x96e
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b49c:	4a4f      	ldr	r2, [pc, #316]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b49e:	4d58      	ldr	r5, [pc, #352]	; (801b600 <mbedtls_ssl_handshake_client_step+0xc58>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b4a0:	2101      	movs	r1, #1
 801b4a2:	4620      	mov	r0, r4
 801b4a4:	f7f5 f9f2 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b4a8:	f7ff babe 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
 801b4ac:	7858      	ldrb	r0, [r3, #1]
 801b4ae:	f003 fb9e 	bl	801ebee <mbedtls_ssl_pk_alg_from_sig>
 801b4b2:	4680      	mov	r8, r0
 801b4b4:	b938      	cbnz	r0, 801b4c6 <mbedtls_ssl_handshake_client_step+0xb1e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used unsupported "
 801b4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4b8:	785b      	ldrb	r3, [r3, #1]
 801b4ba:	9301      	str	r3, [sp, #4]
 801b4bc:	4b51      	ldr	r3, [pc, #324]	; (801b604 <mbedtls_ssl_handshake_client_step+0xc5c>)
 801b4be:	9300      	str	r3, [sp, #0]
 801b4c0:	f640 038e 	movw	r3, #2190	; 0x88e
 801b4c4:	e7dc      	b.n	801b480 <mbedtls_ssl_handshake_client_step+0xad8>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
 801b4c6:	4639      	mov	r1, r7
 801b4c8:	4620      	mov	r0, r4
 801b4ca:	f003 fbb3 	bl	801ec34 <mbedtls_ssl_check_sig_hash>
 801b4ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4d0:	b130      	cbz	r0, 801b4e0 <mbedtls_ssl_handshake_client_step+0xb38>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	9301      	str	r3, [sp, #4]
 801b4d6:	4b4c      	ldr	r3, [pc, #304]	; (801b608 <mbedtls_ssl_handshake_client_step+0xc60>)
 801b4d8:	9300      	str	r3, [sp, #0]
 801b4da:	f640 0398 	movw	r3, #2200	; 0x898
 801b4de:	e7cf      	b.n	801b480 <mbedtls_ssl_handshake_client_step+0xad8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
 801b4e0:	785b      	ldrb	r3, [r3, #1]
 801b4e2:	9301      	str	r3, [sp, #4]
 801b4e4:	4b49      	ldr	r3, [pc, #292]	; (801b60c <mbedtls_ssl_handshake_client_step+0xc64>)
 801b4e6:	4a3d      	ldr	r2, [pc, #244]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b4e8:	9300      	str	r3, [sp, #0]
 801b4ea:	2102      	movs	r1, #2
 801b4ec:	f640 039d 	movw	r3, #2205	; 0x89d
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	f7f5 f9cb 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
 801b4f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4f8:	4a38      	ldr	r2, [pc, #224]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b4fa:	781b      	ldrb	r3, [r3, #0]
 801b4fc:	9301      	str	r3, [sp, #4]
 801b4fe:	4b44      	ldr	r3, [pc, #272]	; (801b610 <mbedtls_ssl_handshake_client_step+0xc68>)
 801b500:	9300      	str	r3, [sp, #0]
 801b502:	2102      	movs	r1, #2
 801b504:	f640 039e 	movw	r3, #2206	; 0x89e
 801b508:	4620      	mov	r0, r4
 801b50a:	f7f5 f9bf 	bl	801088c <mbedtls_debug_print_msg>
    *p += 2;
 801b50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b510:	4658      	mov	r0, fp
    *p += 2;
 801b512:	3302      	adds	r3, #2
 801b514:	930c      	str	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b516:	f7fe fd63 	bl	8019fe0 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 801b51a:	4540      	cmp	r0, r8
 801b51c:	d017      	beq.n	801b54e <mbedtls_ssl_handshake_client_step+0xba6>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b51e:	4b31      	ldr	r3, [pc, #196]	; (801b5e4 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b520:	9300      	str	r3, [sp, #0]
 801b522:	f640 138d 	movw	r3, #2445	; 0x98d
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b526:	4a2d      	ldr	r2, [pc, #180]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b528:	2101      	movs	r1, #1
 801b52a:	4620      	mov	r0, r4
 801b52c:	f7f5 f9ae 	bl	801088c <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b530:	222f      	movs	r2, #47	; 0x2f
 801b532:	e021      	b.n	801b578 <mbedtls_ssl_handshake_client_step+0xbd0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b534:	4b2d      	ldr	r3, [pc, #180]	; (801b5ec <mbedtls_ssl_handshake_client_step+0xc44>)
 801b536:	9300      	str	r3, [sp, #0]
 801b538:	4a28      	ldr	r2, [pc, #160]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b53a:	4e31      	ldr	r6, [pc, #196]	; (801b600 <mbedtls_ssl_handshake_client_step+0xc58>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b53c:	f640 13a2 	movw	r3, #2466	; 0x9a2
 801b540:	2101      	movs	r1, #1
 801b542:	4620      	mov	r0, r4
 801b544:	f7f5 f9a2 	bl	801088c <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b548:	4635      	mov	r5, r6
 801b54a:	f7ff ba6d 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
        sig_len = ( p[0] << 8 ) | p[1];
 801b54e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b550:	f832 3b02 	ldrh.w	r3, [r2], #2
        p += 2;
 801b554:	920c      	str	r2, [sp, #48]	; 0x30
        sig_len = ( p[0] << 8 ) | p[1];
 801b556:	ba5b      	rev16	r3, r3
 801b558:	fa1f fb83 	uxth.w	fp, r3
        if( end != p + sig_len )
 801b55c:	fa12 f383 	uxtah	r3, r2, r3
 801b560:	429e      	cmp	r6, r3
 801b562:	d00f      	beq.n	801b584 <mbedtls_ssl_handshake_client_step+0xbdc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b564:	4b1f      	ldr	r3, [pc, #124]	; (801b5e4 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b566:	4a1d      	ldr	r2, [pc, #116]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b568:	9300      	str	r3, [sp, #0]
 801b56a:	2101      	movs	r1, #1
 801b56c:	f640 13ae 	movw	r3, #2478	; 0x9ae
 801b570:	4620      	mov	r0, r4
 801b572:	f7f5 f98b 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b576:	2232      	movs	r2, #50	; 0x32
 801b578:	2102      	movs	r1, #2
 801b57a:	4620      	mov	r0, r4
 801b57c:	f001 fe1c 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b580:	4e19      	ldr	r6, [pc, #100]	; (801b5e8 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b582:	e7e1      	b.n	801b548 <mbedtls_ssl_handshake_client_step+0xba0>
        MBEDTLS_SSL_DEBUG_BUF( 3, "signature", p, sig_len );
 801b584:	4b23      	ldr	r3, [pc, #140]	; (801b614 <mbedtls_ssl_handshake_client_step+0xc6c>)
 801b586:	9300      	str	r3, [sp, #0]
 801b588:	2103      	movs	r1, #3
 801b58a:	f640 13b4 	movw	r3, #2484	; 0x9b4
 801b58e:	e9cd 2b01 	strd	r2, fp, [sp, #4]
 801b592:	4620      	mov	r0, r4
 801b594:	4a11      	ldr	r2, [pc, #68]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b596:	f7f5 f9d9 	bl	801094c <mbedtls_debug_print_buf>
            mbedtls_md_init( &ctx );
 801b59a:	a80d      	add	r0, sp, #52	; 0x34
 801b59c:	f7f9 f86e 	bl	801467c <mbedtls_md_init>
            if( ( ret = mbedtls_md_setup( &ctx,
 801b5a0:	4638      	mov	r0, r7
 801b5a2:	f7f9 f85f 	bl	8014664 <mbedtls_md_info_from_type>
 801b5a6:	2200      	movs	r2, #0
 801b5a8:	4601      	mov	r1, r0
 801b5aa:	a80d      	add	r0, sp, #52	; 0x34
 801b5ac:	f7f9 f890 	bl	80146d0 <mbedtls_md_setup>
 801b5b0:	4606      	mov	r6, r0
 801b5b2:	b398      	cbz	r0, 801b61c <mbedtls_ssl_handshake_client_step+0xc74>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801b5b4:	4b18      	ldr	r3, [pc, #96]	; (801b618 <mbedtls_ssl_handshake_client_step+0xc70>)
 801b5b6:	9001      	str	r0, [sp, #4]
 801b5b8:	9300      	str	r3, [sp, #0]
 801b5ba:	4620      	mov	r0, r4
 801b5bc:	4a07      	ldr	r2, [pc, #28]	; (801b5dc <mbedtls_ssl_handshake_client_step+0xc34>)
 801b5be:	f640 13f7 	movw	r3, #2551	; 0x9f7
 801b5c2:	2101      	movs	r1, #1
 801b5c4:	f7f5 f992 	bl	80108ec <mbedtls_debug_print_ret>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b5c8:	2250      	movs	r2, #80	; 0x50
 801b5ca:	2102      	movs	r1, #2
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	f001 fdf3 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
                return( ret );
 801b5d2:	e7b9      	b.n	801b548 <mbedtls_ssl_handshake_client_step+0xba0>
 801b5d4:	080316fc 	.word	0x080316fc
 801b5d8:	080318c2 	.word	0x080318c2
 801b5dc:	08030c38 	.word	0x08030c38
 801b5e0:	0803172c 	.word	0x0803172c
 801b5e4:	080316dc 	.word	0x080316dc
 801b5e8:	ffff8500 	.word	0xffff8500
 801b5ec:	08031745 	.word	0x08031745
 801b5f0:	08031771 	.word	0x08031771
 801b5f4:	08031759 	.word	0x08031759
 801b5f8:	08031768 	.word	0x08031768
 801b5fc:	0803179f 	.word	0x0803179f
 801b600:	ffff9400 	.word	0xffff9400
 801b604:	080317c8 	.word	0x080317c8
 801b608:	080317f6 	.word	0x080317f6
 801b60c:	08031828 	.word	0x08031828
 801b610:	0803184a 	.word	0x0803184a
 801b614:	08031867 	.word	0x08031867
 801b618:	08031871 	.word	0x08031871
            mbedtls_md_starts( &ctx );
 801b61c:	a80d      	add	r0, sp, #52	; 0x34
 801b61e:	f7f9 f879 	bl	8014714 <mbedtls_md_starts>
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b624:	f109 0904 	add.w	r9, r9, #4
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b628:	2240      	movs	r2, #64	; 0x40
 801b62a:	f501 712b 	add.w	r1, r1, #684	; 0x2ac
 801b62e:	a80d      	add	r0, sp, #52	; 0x34
 801b630:	f7f9 f87e 	bl	8014730 <mbedtls_md_update>
            mbedtls_md_update( &ctx, params, params_len );
 801b634:	ebaa 0209 	sub.w	r2, sl, r9
 801b638:	4649      	mov	r1, r9
 801b63a:	a80d      	add	r0, sp, #52	; 0x34
            mbedtls_md_finish( &ctx, hash );
 801b63c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
            mbedtls_md_update( &ctx, params, params_len );
 801b640:	f7f9 f876 	bl	8014730 <mbedtls_md_update>
            mbedtls_md_finish( &ctx, hash );
 801b644:	4649      	mov	r1, r9
 801b646:	a80d      	add	r0, sp, #52	; 0x34
 801b648:	f7f9 f880 	bl	801474c <mbedtls_md_finish>
            mbedtls_md_free( &ctx );
 801b64c:	a80d      	add	r0, sp, #52	; 0x34
 801b64e:	f7f9 f81b 	bl	8014688 <mbedtls_md_free>
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen != 0 ? hashlen :
 801b652:	4638      	mov	r0, r7
 801b654:	f7f9 f806 	bl	8014664 <mbedtls_md_info_from_type>
 801b658:	f7f9 f954 	bl	8014904 <mbedtls_md_get_size>
 801b65c:	4ba2      	ldr	r3, [pc, #648]	; (801b8e8 <mbedtls_ssl_handshake_client_step+0xf40>)
 801b65e:	9300      	str	r3, [sp, #0]
 801b660:	e9cd 9001 	strd	r9, r0, [sp, #4]
 801b664:	f640 230b 	movw	r3, #2571	; 0xa0b
 801b668:	4620      	mov	r0, r4
 801b66a:	4aa0      	ldr	r2, [pc, #640]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b66c:	2103      	movs	r1, #3
 801b66e:	f7f5 f96d 	bl	801094c <mbedtls_debug_print_buf>
        if( ssl->session_negotiate->peer_cert == NULL )
 801b672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b674:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b676:	b978      	cbnz	r0, 801b698 <mbedtls_ssl_handshake_client_step+0xcf0>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801b678:	4b9d      	ldr	r3, [pc, #628]	; (801b8f0 <mbedtls_ssl_handshake_client_step+0xf48>)
 801b67a:	4a9c      	ldr	r2, [pc, #624]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b67c:	9300      	str	r3, [sp, #0]
 801b67e:	2102      	movs	r1, #2
 801b680:	f44f 6321 	mov.w	r3, #2576	; 0xa10
 801b684:	4620      	mov	r0, r4
 801b686:	f7f5 f901 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b68a:	2228      	movs	r2, #40	; 0x28
 801b68c:	2102      	movs	r1, #2
 801b68e:	4620      	mov	r0, r4
 801b690:	f001 fd92 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801b694:	4e97      	ldr	r6, [pc, #604]	; (801b8f4 <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b696:	e757      	b.n	801b548 <mbedtls_ssl_handshake_client_step+0xba0>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 801b698:	4641      	mov	r1, r8
 801b69a:	30bc      	adds	r0, #188	; 0xbc
 801b69c:	f7fa f8fc 	bl	8015898 <mbedtls_pk_can_do>
 801b6a0:	b978      	cbnz	r0, 801b6c2 <mbedtls_ssl_handshake_client_step+0xd1a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b6a2:	4b95      	ldr	r3, [pc, #596]	; (801b8f8 <mbedtls_ssl_handshake_client_step+0xf50>)
 801b6a4:	4a91      	ldr	r2, [pc, #580]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b6a6:	9300      	str	r3, [sp, #0]
 801b6a8:	2101      	movs	r1, #1
 801b6aa:	f640 231b 	movw	r3, #2587	; 0xa1b
 801b6ae:	4620      	mov	r0, r4
 801b6b0:	f7f5 f8ec 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b6b4:	2228      	movs	r2, #40	; 0x28
 801b6b6:	2102      	movs	r1, #2
 801b6b8:	4620      	mov	r0, r4
 801b6ba:	f001 fd7d 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801b6be:	4e8f      	ldr	r6, [pc, #572]	; (801b8fc <mbedtls_ssl_handshake_client_step+0xf54>)
 801b6c0:	e742      	b.n	801b548 <mbedtls_ssl_handshake_client_step+0xba0>
        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
 801b6c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b6c4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b6c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b6c8:	9300      	str	r3, [sp, #0]
 801b6ca:	f8cd b004 	str.w	fp, [sp, #4]
 801b6ce:	4633      	mov	r3, r6
 801b6d0:	464a      	mov	r2, r9
 801b6d2:	4639      	mov	r1, r7
 801b6d4:	30bc      	adds	r0, #188	; 0xbc
 801b6d6:	f7fa f8e9 	bl	80158ac <mbedtls_pk_verify>
 801b6da:	4606      	mov	r6, r0
 801b6dc:	2800      	cmp	r0, #0
 801b6de:	f43f ae03 	beq.w	801b2e8 <mbedtls_ssl_handshake_client_step+0x940>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b6e2:	2233      	movs	r2, #51	; 0x33
 801b6e4:	2102      	movs	r1, #2
 801b6e6:	4620      	mov	r0, r4
 801b6e8:	f001 fd66 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
 801b6ec:	4b84      	ldr	r3, [pc, #528]	; (801b900 <mbedtls_ssl_handshake_client_step+0xf58>)
 801b6ee:	9300      	str	r3, [sp, #0]
 801b6f0:	4a7e      	ldr	r2, [pc, #504]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b6f2:	9601      	str	r6, [sp, #4]
 801b6f4:	f640 2326 	movw	r3, #2598	; 0xa26
 801b6f8:	2101      	movs	r1, #1
 801b6fa:	4620      	mov	r0, r4
 801b6fc:	f7f5 f8f6 	bl	80108ec <mbedtls_debug_print_ret>
            return( ret );
 801b700:	e722      	b.n	801b548 <mbedtls_ssl_handshake_client_step+0xba0>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b702:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b704:	4a79      	ldr	r2, [pc, #484]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b706:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b708:	4b7e      	ldr	r3, [pc, #504]	; (801b904 <mbedtls_ssl_handshake_client_step+0xf5c>)
 801b70a:	9300      	str	r3, [sp, #0]
 801b70c:	2102      	movs	r1, #2
 801b70e:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 801b712:	4620      	mov	r0, r4
 801b714:	f7f5 f8ba 	bl	801088c <mbedtls_debug_print_msg>
    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 801b718:	7ab3      	ldrb	r3, [r6, #10]
    switch( info->key_exchange )
 801b71a:	2b04      	cmp	r3, #4
 801b71c:	d80c      	bhi.n	801b738 <mbedtls_ssl_handshake_client_step+0xd90>
 801b71e:	b173      	cbz	r3, 801b73e <mbedtls_ssl_handshake_client_step+0xd96>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b720:	4620      	mov	r0, r4
 801b722:	f002 f95f 	bl	801d9e4 <mbedtls_ssl_read_record>
 801b726:	4605      	mov	r5, r0
 801b728:	b170      	cbz	r0, 801b748 <mbedtls_ssl_handshake_client_step+0xda0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b72a:	4b77      	ldr	r3, [pc, #476]	; (801b908 <mbedtls_ssl_handshake_client_step+0xf60>)
 801b72c:	9300      	str	r3, [sp, #0]
 801b72e:	9001      	str	r0, [sp, #4]
 801b730:	f640 235b 	movw	r3, #2651	; 0xa5b
 801b734:	f7ff b997 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
 801b738:	3b09      	subs	r3, #9
 801b73a:	2b01      	cmp	r3, #1
 801b73c:	d9f0      	bls.n	801b720 <mbedtls_ssl_handshake_client_step+0xd78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 801b73e:	4b73      	ldr	r3, [pc, #460]	; (801b90c <mbedtls_ssl_handshake_client_step+0xf64>)
 801b740:	9300      	str	r3, [sp, #0]
 801b742:	f640 2354 	movw	r3, #2644	; 0xa54
 801b746:	e5a3      	b.n	801b290 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b748:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b74a:	2b16      	cmp	r3, #22
 801b74c:	d005      	beq.n	801b75a <mbedtls_ssl_handshake_client_step+0xdb2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b74e:	4b70      	ldr	r3, [pc, #448]	; (801b910 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b750:	9300      	str	r3, [sp, #0]
 801b752:	f640 2361 	movw	r3, #2657	; 0xa61
 801b756:	f7ff b9b6 	b.w	801aac6 <mbedtls_ssl_handshake_client_step+0x11e>
    ssl->state++;
 801b75a:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801b75c:	4a6d      	ldr	r2, [pc, #436]	; (801b914 <mbedtls_ssl_handshake_client_step+0xf6c>)
    ssl->state++;
 801b75e:	3301      	adds	r3, #1
 801b760:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 801b762:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b764:	781b      	ldrb	r3, [r3, #0]
 801b766:	2b0d      	cmp	r3, #13
 801b768:	bf0c      	ite	eq
 801b76a:	2301      	moveq	r3, #1
 801b76c:	2300      	movne	r3, #0
 801b76e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801b772:	4b69      	ldr	r3, [pc, #420]	; (801b918 <mbedtls_ssl_handshake_client_step+0xf70>)
 801b774:	bf18      	it	ne
 801b776:	4613      	movne	r3, r2
 801b778:	9301      	str	r3, [sp, #4]
 801b77a:	4b68      	ldr	r3, [pc, #416]	; (801b91c <mbedtls_ssl_handshake_client_step+0xf74>)
 801b77c:	9300      	str	r3, [sp, #0]
 801b77e:	4a5b      	ldr	r2, [pc, #364]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b780:	f640 236a 	movw	r3, #2666	; 0xa6a
 801b784:	2103      	movs	r1, #3
 801b786:	4620      	mov	r0, r4
 801b788:	f7f5 f880 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 801b78c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801b790:	b93b      	cbnz	r3, 801b7a2 <mbedtls_ssl_handshake_client_step+0xdfa>
        ssl->keep_current_message = 1;
 801b792:	2301      	movs	r3, #1
 801b794:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 801b798:	4b61      	ldr	r3, [pc, #388]	; (801b920 <mbedtls_ssl_handshake_client_step+0xf78>)
 801b79a:	9300      	str	r3, [sp, #0]
 801b79c:	f640 23c5 	movw	r3, #2757	; 0xac5
 801b7a0:	e554      	b.n	801b24c <mbedtls_ssl_handshake_client_step+0x8a4>
    buf = ssl->in_msg;
 801b7a2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b7a6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 801b7aa:	f898 6004 	ldrb.w	r6, [r8, #4]
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b7ae:	1db3      	adds	r3, r6, #6
 801b7b0:	429a      	cmp	r2, r3
 801b7b2:	d210      	bcs.n	801b7d6 <mbedtls_ssl_handshake_client_step+0xe2e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b7b4:	4b56      	ldr	r3, [pc, #344]	; (801b910 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b7b6:	9300      	str	r3, [sp, #0]
 801b7b8:	f640 2394 	movw	r3, #2708	; 0xa94
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b7bc:	4a4b      	ldr	r2, [pc, #300]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801b7be:	4d59      	ldr	r5, [pc, #356]	; (801b924 <mbedtls_ssl_handshake_client_step+0xf7c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b7c0:	2101      	movs	r1, #1
 801b7c2:	4620      	mov	r0, r4
 801b7c4:	f7f5 f862 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b7c8:	2232      	movs	r2, #50	; 0x32
 801b7ca:	2102      	movs	r1, #2
 801b7cc:	4620      	mov	r0, r4
 801b7ce:	f001 fcf3 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801b7d2:	f7ff b929 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801b7d6:	6962      	ldr	r2, [r4, #20]
 801b7d8:	2a03      	cmp	r2, #3
 801b7da:	d12e      	bne.n	801b83a <mbedtls_ssl_handshake_client_step+0xe92>
 801b7dc:	eb08 0206 	add.w	r2, r8, r6
 801b7e0:	f818 7003 	ldrb.w	r7, [r8, r3]
 801b7e4:	7952      	ldrb	r2, [r2, #5]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801b7e6:	f8df b150 	ldr.w	fp, [pc, #336]	; 801b938 <mbedtls_ssl_handshake_client_step+0xf90>
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 801b7ea:	f106 0907 	add.w	r9, r6, #7
 801b7ee:	44c1      	add	r9, r8
 801b7f0:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
        for( i = 0; i < sig_alg_len; i += 2 )
 801b7f4:	464b      	mov	r3, r9
 801b7f6:	f103 0a02 	add.w	sl, r3, #2
 801b7fa:	eba3 0309 	sub.w	r3, r3, r9
 801b7fe:	429f      	cmp	r7, r3
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801b800:	4a3a      	ldr	r2, [pc, #232]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
        for( i = 0; i < sig_alg_len; i += 2 )
 801b802:	d80b      	bhi.n	801b81c <mbedtls_ssl_handshake_client_step+0xe74>
        n += 2 + sig_alg_len;
 801b804:	4437      	add	r7, r6
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b806:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        n += 2 + sig_alg_len;
 801b80a:	1cbe      	adds	r6, r7, #2
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b80c:	3708      	adds	r7, #8
 801b80e:	42bb      	cmp	r3, r7
 801b810:	d213      	bcs.n	801b83a <mbedtls_ssl_handshake_client_step+0xe92>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b812:	4b3f      	ldr	r3, [pc, #252]	; (801b910 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b814:	9300      	str	r3, [sp, #0]
 801b816:	f640 23af 	movw	r3, #2735	; 0xaaf
 801b81a:	e7cf      	b.n	801b7bc <mbedtls_ssl_handshake_client_step+0xe14>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801b81c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 801b820:	9302      	str	r3, [sp, #8]
 801b822:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 801b826:	2103      	movs	r1, #3
 801b828:	e9cd b300 	strd	fp, r3, [sp]
 801b82c:	4620      	mov	r0, r4
 801b82e:	f640 23a6 	movw	r3, #2726	; 0xaa6
 801b832:	f7f5 f82b 	bl	801088c <mbedtls_debug_print_msg>
 801b836:	4653      	mov	r3, sl
 801b838:	e7dd      	b.n	801b7f6 <mbedtls_ssl_handshake_client_step+0xe4e>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801b83a:	eb08 0306 	add.w	r3, r8, r6
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801b83e:	3607      	adds	r6, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801b840:	795a      	ldrb	r2, [r3, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 801b842:	799b      	ldrb	r3, [r3, #6]
 801b844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801b848:	441e      	add	r6, r3
 801b84a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801b84e:	42b3      	cmp	r3, r6
 801b850:	d0a2      	beq.n	801b798 <mbedtls_ssl_handshake_client_step+0xdf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b852:	4b2f      	ldr	r3, [pc, #188]	; (801b910 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b854:	9300      	str	r3, [sp, #0]
 801b856:	f640 23be 	movw	r3, #2750	; 0xabe
 801b85a:	e7af      	b.n	801b7bc <mbedtls_ssl_handshake_client_step+0xe14>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 801b85c:	4b32      	ldr	r3, [pc, #200]	; (801b928 <mbedtls_ssl_handshake_client_step+0xf80>)
 801b85e:	4a23      	ldr	r2, [pc, #140]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b860:	9300      	str	r3, [sp, #0]
 801b862:	2102      	movs	r1, #2
 801b864:	f640 23cf 	movw	r3, #2767	; 0xacf
 801b868:	4620      	mov	r0, r4
 801b86a:	f7f5 f80f 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b86e:	4620      	mov	r0, r4
 801b870:	f002 f8b8 	bl	801d9e4 <mbedtls_ssl_read_record>
 801b874:	4605      	mov	r5, r0
 801b876:	b130      	cbz	r0, 801b886 <mbedtls_ssl_handshake_client_step+0xede>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b878:	4b23      	ldr	r3, [pc, #140]	; (801b908 <mbedtls_ssl_handshake_client_step+0xf60>)
 801b87a:	9300      	str	r3, [sp, #0]
 801b87c:	9001      	str	r0, [sp, #4]
 801b87e:	f640 23d3 	movw	r3, #2771	; 0xad3
 801b882:	f7ff b8f0 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b886:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b888:	2b16      	cmp	r3, #22
 801b88a:	d007      	beq.n	801b89c <mbedtls_ssl_handshake_client_step+0xef4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801b88c:	4b27      	ldr	r3, [pc, #156]	; (801b92c <mbedtls_ssl_handshake_client_step+0xf84>)
 801b88e:	9300      	str	r3, [sp, #0]
 801b890:	4a16      	ldr	r2, [pc, #88]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b892:	f640 23d9 	movw	r3, #2777	; 0xad9
 801b896:	2101      	movs	r1, #1
 801b898:	f7ff b8ff 	b.w	801aa9a <mbedtls_ssl_handshake_client_step+0xf2>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801b89c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801b8a0:	2b04      	cmp	r3, #4
 801b8a2:	d103      	bne.n	801b8ac <mbedtls_ssl_handshake_client_step+0xf04>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 801b8a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801b8a6:	781b      	ldrb	r3, [r3, #0]
 801b8a8:	2b0e      	cmp	r3, #14
 801b8aa:	d010      	beq.n	801b8ce <mbedtls_ssl_handshake_client_step+0xf26>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801b8ac:	4b1f      	ldr	r3, [pc, #124]	; (801b92c <mbedtls_ssl_handshake_client_step+0xf84>)
 801b8ae:	4a0f      	ldr	r2, [pc, #60]	; (801b8ec <mbedtls_ssl_handshake_client_step+0xf44>)
 801b8b0:	9300      	str	r3, [sp, #0]
 801b8b2:	2101      	movs	r1, #1
 801b8b4:	f44f 632e 	mov.w	r3, #2784	; 0xae0
 801b8b8:	4620      	mov	r0, r4
 801b8ba:	f7f4 ffe7 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b8be:	2232      	movs	r2, #50	; 0x32
 801b8c0:	2102      	movs	r1, #2
 801b8c2:	4620      	mov	r0, r4
 801b8c4:	f001 fc78 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 801b8c8:	4d19      	ldr	r5, [pc, #100]	; (801b930 <mbedtls_ssl_handshake_client_step+0xf88>)
 801b8ca:	f7ff b8ad 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    ssl->state++;
 801b8ce:	6863      	ldr	r3, [r4, #4]
 801b8d0:	3301      	adds	r3, #1
 801b8d2:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 801b8d4:	4b17      	ldr	r3, [pc, #92]	; (801b934 <mbedtls_ssl_handshake_client_step+0xf8c>)
 801b8d6:	9300      	str	r3, [sp, #0]
 801b8d8:	f640 23ed 	movw	r3, #2797	; 0xaed
 801b8dc:	e4b6      	b.n	801b24c <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_write_certificate( ssl );
 801b8de:	4620      	mov	r0, r4
 801b8e0:	f002 f8d6 	bl	801da90 <mbedtls_ssl_write_certificate>
 801b8e4:	f7ff b8a9 	b.w	801aa3a <mbedtls_ssl_handshake_client_step+0x92>
 801b8e8:	08031882 	.word	0x08031882
 801b8ec:	08030c38 	.word	0x08030c38
 801b8f0:	08031892 	.word	0x08031892
 801b8f4:	ffff8900 	.word	0xffff8900
 801b8f8:	080316dc 	.word	0x080316dc
 801b8fc:	ffff9300 	.word	0xffff9300
 801b900:	080318a7 	.word	0x080318a7
 801b904:	080318d6 	.word	0x080318d6
 801b908:	08031106 	.word	0x08031106
 801b90c:	080318f3 	.word	0x080318f3
 801b910:	08031915 	.word	0x08031915
 801b914:	080310dc 	.word	0x080310dc
 801b918:	0803276a 	.word	0x0803276a
 801b91c:	08031935 	.word	0x08031935
 801b920:	0803197b 	.word	0x0803197b
 801b924:	ffff8580 	.word	0xffff8580
 801b928:	08031998 	.word	0x08031998
 801b92c:	080319b3 	.word	0x080319b3
 801b930:	ffff8480 	.word	0xffff8480
 801b934:	080319d1 	.word	0x080319d1
 801b938:	08031950 	.word	0x08031950
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b93c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801b93e:	4aa0      	ldr	r2, [pc, #640]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b940:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801b942:	4ba0      	ldr	r3, [pc, #640]	; (801bbc4 <mbedtls_ssl_handshake_client_step+0x121c>)
 801b944:	9300      	str	r3, [sp, #0]
 801b946:	2102      	movs	r1, #2
 801b948:	f640 23f9 	movw	r3, #2809	; 0xaf9
 801b94c:	4620      	mov	r0, r4
 801b94e:	f7f4 ff9d 	bl	801088c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801b952:	7aae      	ldrb	r6, [r5, #10]
 801b954:	1ef3      	subs	r3, r6, #3
 801b956:	2b01      	cmp	r3, #1
 801b958:	d903      	bls.n	801b962 <mbedtls_ssl_handshake_client_step+0xfba>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 801b95a:	f1a6 0309 	sub.w	r3, r6, #9
 801b95e:	2b01      	cmp	r3, #1
 801b960:	d863      	bhi.n	801ba2a <mbedtls_ssl_handshake_client_step+0x1082>
                                ssl->conf->f_rng, ssl->conf->p_rng );
 801b962:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
 801b964:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801b968:	69d9      	ldr	r1, [r3, #28]
 801b96a:	9101      	str	r1, [sp, #4]
 801b96c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b96e:	699b      	ldr	r3, [r3, #24]
 801b970:	9300      	str	r3, [sp, #0]
 801b972:	3204      	adds	r2, #4
 801b974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801b978:	a910      	add	r1, sp, #64	; 0x40
 801b97a:	3004      	adds	r0, #4
 801b97c:	f7f5 fa0e 	bl	8010d9c <mbedtls_ecdh_make_public>
        if( ret != 0 )
 801b980:	4605      	mov	r5, r0
 801b982:	b130      	cbz	r0, 801b992 <mbedtls_ssl_handshake_client_step+0xfea>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_public", ret );
 801b984:	4b90      	ldr	r3, [pc, #576]	; (801bbc8 <mbedtls_ssl_handshake_client_step+0x1220>)
 801b986:	9300      	str	r3, [sp, #0]
 801b988:	9001      	str	r0, [sp, #4]
 801b98a:	f640 3336 	movw	r3, #2870	; 0xb36
 801b98e:	f7ff b86a 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Q", &ssl->handshake->ecdh_ctx.Q );
 801b992:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b994:	4a8a      	ldr	r2, [pc, #552]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
 801b996:	338c      	adds	r3, #140	; 0x8c
 801b998:	9301      	str	r3, [sp, #4]
 801b99a:	4b8c      	ldr	r3, [pc, #560]	; (801bbcc <mbedtls_ssl_handshake_client_step+0x1224>)
 801b99c:	9300      	str	r3, [sp, #0]
 801b99e:	2103      	movs	r1, #3
 801b9a0:	f640 333a 	movw	r3, #2874	; 0xb3a
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	f7f5 f8bb 	bl	8010b20 <mbedtls_debug_print_ecp>
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801b9aa:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 801b9ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b9ae:	69da      	ldr	r2, [r3, #28]
 801b9b0:	9201      	str	r2, [sp, #4]
 801b9b2:	699b      	ldr	r3, [r3, #24]
 801b9b4:	9300      	str	r3, [sp, #0]
 801b9b6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 801b9ba:	f500 712a 	add.w	r1, r0, #680	; 0x2a8
 801b9be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b9c2:	3004      	adds	r0, #4
 801b9c4:	f7f5 fa10 	bl	8010de8 <mbedtls_ecdh_calc_secret>
 801b9c8:	4605      	mov	r5, r0
 801b9ca:	b130      	cbz	r0, 801b9da <mbedtls_ssl_handshake_client_step+0x1032>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
 801b9cc:	4b80      	ldr	r3, [pc, #512]	; (801bbd0 <mbedtls_ssl_handshake_client_step+0x1228>)
 801b9ce:	9300      	str	r3, [sp, #0]
 801b9d0:	9001      	str	r0, [sp, #4]
 801b9d2:	f640 3342 	movw	r3, #2882	; 0xb42
 801b9d6:	f7ff b846 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
 801b9da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b9dc:	4a78      	ldr	r2, [pc, #480]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
 801b9de:	33d4      	adds	r3, #212	; 0xd4
 801b9e0:	9301      	str	r3, [sp, #4]
 801b9e2:	4b7c      	ldr	r3, [pc, #496]	; (801bbd4 <mbedtls_ssl_handshake_client_step+0x122c>)
 801b9e4:	9300      	str	r3, [sp, #0]
 801b9e6:	2103      	movs	r1, #3
 801b9e8:	f640 3346 	movw	r3, #2886	; 0xb46
 801b9ec:	4620      	mov	r0, r4
 801b9ee:	f7f5 f84f 	bl	8010a90 <mbedtls_debug_print_mpi>
    ssl->out_msglen  = i + n;
 801b9f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b9f4:	3304      	adds	r3, #4
 801b9f6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801b9fa:	2316      	movs	r3, #22
 801b9fc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 801ba00:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801ba04:	2210      	movs	r2, #16
 801ba06:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801ba08:	6863      	ldr	r3, [r4, #4]
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801ba0e:	4620      	mov	r0, r4
 801ba10:	f001 f89a 	bl	801cb48 <mbedtls_ssl_write_record>
 801ba14:	4605      	mov	r5, r0
 801ba16:	2800      	cmp	r0, #0
 801ba18:	f000 8083 	beq.w	801bb22 <mbedtls_ssl_handshake_client_step+0x117a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801ba1c:	4b6e      	ldr	r3, [pc, #440]	; (801bbd8 <mbedtls_ssl_handshake_client_step+0x1230>)
 801ba1e:	9300      	str	r3, [sp, #0]
 801ba20:	9001      	str	r0, [sp, #4]
 801ba22:	f640 33e7 	movw	r3, #3047	; 0xbe7
 801ba26:	f7ff b81e 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801ba2a:	2e01      	cmp	r6, #1
 801ba2c:	d174      	bne.n	801bb18 <mbedtls_ssl_handshake_client_step+0x1170>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801ba2e:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801ba30:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801ba32:	6963      	ldr	r3, [r4, #20]
                       ssl->conf->transport, p );
 801ba34:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801ba38:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 801ba3c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801ba40:	f505 783b 	add.w	r8, r5, #748	; 0x2ec
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801ba44:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801ba46:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801ba4a:	4643      	mov	r3, r8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801ba4c:	bf0c      	ite	eq
 801ba4e:	2700      	moveq	r7, #0
 801ba50:	2702      	movne	r7, #2
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801ba52:	f003 fb5f 	bl	801f114 <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801ba56:	6823      	ldr	r3, [r4, #0]
 801ba58:	f205 21ee 	addw	r1, r5, #750	; 0x2ee
 801ba5c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801ba60:	69d8      	ldr	r0, [r3, #28]
 801ba62:	222e      	movs	r2, #46	; 0x2e
 801ba64:	47d0      	blx	sl
    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801ba66:	f107 0904 	add.w	r9, r7, #4
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801ba6a:	4605      	mov	r5, r0
 801ba6c:	b130      	cbz	r0, 801ba7c <mbedtls_ssl_handshake_client_step+0x10d4>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 801ba6e:	4b5b      	ldr	r3, [pc, #364]	; (801bbdc <mbedtls_ssl_handshake_client_step+0x1234>)
 801ba70:	9300      	str	r3, [sp, #0]
 801ba72:	9001      	str	r0, [sp, #4]
 801ba74:	f640 0339 	movw	r3, #2105	; 0x839
 801ba78:	f7fe bff5 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    ssl->handshake->pmslen = 48;
 801ba7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ba7e:	2230      	movs	r2, #48	; 0x30
 801ba80:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    if( ssl->session_negotiate->peer_cert == NULL )
 801ba84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba86:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801ba88:	b938      	cbnz	r0, 801ba9a <mbedtls_ssl_handshake_client_step+0x10f2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801ba8a:	4b55      	ldr	r3, [pc, #340]	; (801bbe0 <mbedtls_ssl_handshake_client_step+0x1238>)
 801ba8c:	9300      	str	r3, [sp, #0]
 801ba8e:	4a4c      	ldr	r2, [pc, #304]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
 801ba90:	f640 0341 	movw	r3, #2113	; 0x841
 801ba94:	2102      	movs	r1, #2
 801ba96:	f7ff b800 	b.w	801aa9a <mbedtls_ssl_handshake_client_step+0xf2>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 801ba9a:	4631      	mov	r1, r6
 801ba9c:	30bc      	adds	r0, #188	; 0xbc
 801ba9e:	f7f9 fefb 	bl	8015898 <mbedtls_pk_can_do>
 801baa2:	b958      	cbnz	r0, 801babc <mbedtls_ssl_handshake_client_step+0x1114>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801baa4:	4b4f      	ldr	r3, [pc, #316]	; (801bbe4 <mbedtls_ssl_handshake_client_step+0x123c>)
 801baa6:	9300      	str	r3, [sp, #0]
 801baa8:	4a45      	ldr	r2, [pc, #276]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801baaa:	4d4f      	ldr	r5, [pc, #316]	; (801bbe8 <mbedtls_ssl_handshake_client_step+0x1240>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801baac:	f640 034b 	movw	r3, #2123	; 0x84b
 801bab0:	4631      	mov	r1, r6
 801bab2:	4620      	mov	r0, r4
 801bab4:	f7f4 feea 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801bab8:	f7fe bfb6 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801babc:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bac0:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bac2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801bac4:	69d5      	ldr	r5, [r2, #28]
 801bac6:	9503      	str	r5, [sp, #12]
 801bac8:	6992      	ldr	r2, [r2, #24]
 801baca:	9202      	str	r2, [sp, #8]
 801bacc:	f5c9 529c 	rsb	r2, r9, #4992	; 0x1380
 801bad0:	3208      	adds	r2, #8
 801bad2:	9201      	str	r2, [sp, #4]
 801bad4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bad8:	aa10      	add	r2, sp, #64	; 0x40
 801bada:	9200      	str	r2, [sp, #0]
 801badc:	f8d1 22a8 	ldr.w	r2, [r1, #680]	; 0x2a8
 801bae0:	444b      	add	r3, r9
 801bae2:	4641      	mov	r1, r8
 801bae4:	30bc      	adds	r0, #188	; 0xbc
 801bae6:	f7f9 ff3b 	bl	8015960 <mbedtls_pk_encrypt>
 801baea:	4605      	mov	r5, r0
 801baec:	b130      	cbz	r0, 801bafc <mbedtls_ssl_handshake_client_step+0x1154>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 801baee:	4b3f      	ldr	r3, [pc, #252]	; (801bbec <mbedtls_ssl_handshake_client_step+0x1244>)
 801baf0:	9300      	str	r3, [sp, #0]
 801baf2:	9001      	str	r0, [sp, #4]
 801baf4:	f640 0355 	movw	r3, #2133	; 0x855
 801baf8:	f7fe bfb5 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    if( len_bytes == 2 )
 801bafc:	2f00      	cmp	r7, #0
 801bafe:	f43f af78 	beq.w	801b9f2 <mbedtls_ssl_handshake_client_step+0x104a>
 801bb02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb04:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 801bb08:	0a19      	lsrs	r1, r3, #8
 801bb0a:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 801bb0c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bb10:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 801bb12:	3302      	adds	r3, #2
 801bb14:	9310      	str	r3, [sp, #64]	; 0x40
 801bb16:	e76c      	b.n	801b9f2 <mbedtls_ssl_handshake_client_step+0x104a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bb18:	4b35      	ldr	r3, [pc, #212]	; (801bbf0 <mbedtls_ssl_handshake_client_step+0x1248>)
 801bb1a:	9300      	str	r3, [sp, #0]
 801bb1c:	f640 33db 	movw	r3, #3035	; 0xbdb
 801bb20:	e4bc      	b.n	801b49c <mbedtls_ssl_handshake_client_step+0xaf4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 801bb22:	4b34      	ldr	r3, [pc, #208]	; (801bbf4 <mbedtls_ssl_handshake_client_step+0x124c>)
 801bb24:	9300      	str	r3, [sp, #0]
 801bb26:	f640 33eb 	movw	r3, #3051	; 0xbeb
 801bb2a:	f7ff bb8f 	b.w	801b24c <mbedtls_ssl_handshake_client_step+0x8a4>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bb2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801bb30:	4a23      	ldr	r2, [pc, #140]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bb32:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 801bb34:	2300      	movs	r3, #0
 801bb36:	930d      	str	r3, [sp, #52]	; 0x34
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801bb38:	4b2f      	ldr	r3, [pc, #188]	; (801bbf8 <mbedtls_ssl_handshake_client_step+0x1250>)
 801bb3a:	9300      	str	r3, [sp, #0]
 801bb3c:	2102      	movs	r1, #2
 801bb3e:	f640 431e 	movw	r3, #3102	; 0xc1e
 801bb42:	4620      	mov	r0, r4
 801bb44:	f7f4 fea2 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801bb48:	4620      	mov	r0, r4
 801bb4a:	f000 fc25 	bl	801c398 <mbedtls_ssl_derive_keys>
 801bb4e:	4605      	mov	r5, r0
 801bb50:	b130      	cbz	r0, 801bb60 <mbedtls_ssl_handshake_client_step+0x11b8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801bb52:	4b2a      	ldr	r3, [pc, #168]	; (801bbfc <mbedtls_ssl_handshake_client_step+0x1254>)
 801bb54:	9300      	str	r3, [sp, #0]
 801bb56:	9001      	str	r0, [sp, #4]
 801bb58:	f640 4322 	movw	r3, #3106	; 0xc22
 801bb5c:	f7fe bf83 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801bb60:	7ab3      	ldrb	r3, [r6, #10]
 801bb62:	1f5a      	subs	r2, r3, #5
 801bb64:	2a03      	cmp	r2, #3
 801bb66:	d901      	bls.n	801bb6c <mbedtls_ssl_handshake_client_step+0x11c4>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 801bb68:	2b0b      	cmp	r3, #11
 801bb6a:	d105      	bne.n	801bb78 <mbedtls_ssl_handshake_client_step+0x11d0>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801bb6c:	4b24      	ldr	r3, [pc, #144]	; (801bc00 <mbedtls_ssl_handshake_client_step+0x1258>)
 801bb6e:	9300      	str	r3, [sp, #0]
 801bb70:	f640 432c 	movw	r3, #3116	; 0xc2c
 801bb74:	f7ff bb8c 	b.w	801b290 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 801bb78:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801bb7c:	b14b      	cbz	r3, 801bb92 <mbedtls_ssl_handshake_client_step+0x11ea>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801bb7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bb80:	b111      	cbz	r1, 801bb88 <mbedtls_ssl_handshake_client_step+0x11e0>
 801bb82:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
 801bb86:	b913      	cbnz	r3, 801bb8e <mbedtls_ssl_handshake_client_step+0x11e6>
        key_cert = ssl->conf->key_cert;
 801bb88:	6823      	ldr	r3, [r4, #0]
 801bb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801bb8c:	b10b      	cbz	r3, 801bb92 <mbedtls_ssl_handshake_client_step+0x11ea>
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	b92b      	cbnz	r3, 801bb9e <mbedtls_ssl_handshake_client_step+0x11f6>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801bb92:	4b1b      	ldr	r3, [pc, #108]	; (801bc00 <mbedtls_ssl_handshake_client_step+0x1258>)
 801bb94:	9300      	str	r3, [sp, #0]
 801bb96:	f640 4333 	movw	r3, #3123	; 0xc33
 801bb9a:	f7ff bb79 	b.w	801b290 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 801bb9e:	4620      	mov	r0, r4
 801bba0:	f7fe fa2f 	bl	801a002 <mbedtls_ssl_own_key>
 801bba4:	bb90      	cbnz	r0, 801bc0c <mbedtls_ssl_handshake_client_step+0x1264>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801bba6:	4b17      	ldr	r3, [pc, #92]	; (801bc04 <mbedtls_ssl_handshake_client_step+0x125c>)
 801bba8:	9300      	str	r3, [sp, #0]
 801bbaa:	4a05      	ldr	r2, [pc, #20]	; (801bbc0 <mbedtls_ssl_handshake_client_step+0x1218>)
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801bbac:	4d16      	ldr	r5, [pc, #88]	; (801bc08 <mbedtls_ssl_handshake_client_step+0x1260>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801bbae:	f640 433a 	movw	r3, #3130	; 0xc3a
 801bbb2:	2101      	movs	r1, #1
 801bbb4:	4620      	mov	r0, r4
 801bbb6:	f7f4 fe69 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801bbba:	f7fe bf35 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
 801bbbe:	bf00      	nop
 801bbc0:	08030c38 	.word	0x08030c38
 801bbc4:	080319ec 	.word	0x080319ec
 801bbc8:	08031a09 	.word	0x08031a09
 801bbcc:	08031a22 	.word	0x08031a22
 801bbd0:	08031a2a 	.word	0x08031a2a
 801bbd4:	08031a43 	.word	0x08031a43
 801bbd8:	080310ad 	.word	0x080310ad
 801bbdc:	08031a4b 	.word	0x08031a4b
 801bbe0:	08031892 	.word	0x08031892
 801bbe4:	08031a51 	.word	0x08031a51
 801bbe8:	ffff9300 	.word	0xffff9300
 801bbec:	08031a6f 	.word	0x08031a6f
 801bbf0:	08031745 	.word	0x08031745
 801bbf4:	08031a89 	.word	0x08031a89
 801bbf8:	08031aa6 	.word	0x08031aa6
 801bbfc:	080312ac 	.word	0x080312ac
 801bc00:	08031ac2 	.word	0x08031ac2
 801bc04:	08031ae3 	.word	0x08031ae3
 801bc08:	ffff8a00 	.word	0xffff8a00
    ssl->handshake->calc_verify( ssl, hash );
 801bc0c:	f8d1 329c 	ldr.w	r3, [r1, #668]	; 0x29c
 801bc10:	4620      	mov	r0, r4
 801bc12:	a910      	add	r1, sp, #64	; 0x40
 801bc14:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801bc16:	6963      	ldr	r3, [r4, #20]
 801bc18:	2b03      	cmp	r3, #3
 801bc1a:	d130      	bne.n	801bc7e <mbedtls_ssl_handshake_client_step+0x12d6>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801bc1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	7a5d      	ldrb	r5, [r3, #9]
 801bc22:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bc26:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801bc28:	bf0b      	itete	eq
 801bc2a:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801bc2c:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801bc2e:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801bc30:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801bc32:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
 801bc34:	bf18      	it	ne
 801bc36:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801bc38:	f7fe f9e3 	bl	801a002 <mbedtls_ssl_own_key>
 801bc3c:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 801bc40:	f002 ffc4 	bl	801ebcc <mbedtls_ssl_sig_from_pk>
 801bc44:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801bc46:	4620      	mov	r0, r4
 801bc48:	f7fe f9db 	bl	801a002 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bc4c:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801bc4e:	69da      	ldr	r2, [r3, #28]
 801bc50:	9203      	str	r2, [sp, #12]
 801bc52:	699b      	ldr	r3, [r3, #24]
 801bc54:	9302      	str	r3, [sp, #8]
 801bc56:	ab0d      	add	r3, sp, #52	; 0x34
 801bc58:	9301      	str	r3, [sp, #4]
 801bc5a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bc5e:	3308      	adds	r3, #8
 801bc60:	9300      	str	r3, [sp, #0]
 801bc62:	4629      	mov	r1, r5
 801bc64:	2300      	movs	r3, #0
 801bc66:	aa10      	add	r2, sp, #64	; 0x40
 801bc68:	f7f9 fe4a 	bl	8015900 <mbedtls_pk_sign>
 801bc6c:	4605      	mov	r5, r0
 801bc6e:	b158      	cbz	r0, 801bc88 <mbedtls_ssl_handshake_client_step+0x12e0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 801bc70:	4b83      	ldr	r3, [pc, #524]	; (801be80 <mbedtls_ssl_handshake_client_step+0x14d8>)
 801bc72:	9300      	str	r3, [sp, #0]
 801bc74:	9001      	str	r0, [sp, #4]
 801bc76:	f640 4391 	movw	r3, #3217	; 0xc91
 801bc7a:	f7fe bef4 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bc7e:	4b81      	ldr	r3, [pc, #516]	; (801be84 <mbedtls_ssl_handshake_client_step+0x14dc>)
 801bc80:	9300      	str	r3, [sp, #0]
 801bc82:	f640 4389 	movw	r3, #3209	; 0xc89
 801bc86:	e409      	b.n	801b49c <mbedtls_ssl_handshake_client_step+0xaf4>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 801bc88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc8a:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bc8e:	0a19      	lsrs	r1, r3, #8
 801bc90:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 801bc92:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bc96:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 801bc98:	3308      	adds	r3, #8
 801bc9a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bc9e:	2316      	movs	r3, #22
 801bca0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 801bca4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bca8:	220f      	movs	r2, #15
 801bcaa:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801bcac:	6863      	ldr	r3, [r4, #4]
 801bcae:	3301      	adds	r3, #1
 801bcb0:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bcb2:	4620      	mov	r0, r4
 801bcb4:	f000 ff48 	bl	801cb48 <mbedtls_ssl_write_record>
 801bcb8:	4605      	mov	r5, r0
 801bcba:	b130      	cbz	r0, 801bcca <mbedtls_ssl_handshake_client_step+0x1322>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801bcbc:	4b72      	ldr	r3, [pc, #456]	; (801be88 <mbedtls_ssl_handshake_client_step+0x14e0>)
 801bcbe:	9300      	str	r3, [sp, #0]
 801bcc0:	9001      	str	r0, [sp, #4]
 801bcc2:	f44f 634a 	mov.w	r3, #3232	; 0xca0
 801bcc6:	f7fe bece 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 801bcca:	4b70      	ldr	r3, [pc, #448]	; (801be8c <mbedtls_ssl_handshake_client_step+0x14e4>)
 801bccc:	9300      	str	r3, [sp, #0]
 801bcce:	f640 43a4 	movw	r3, #3236	; 0xca4
 801bcd2:	f7ff babb 	b.w	801b24c <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 801bcd6:	4620      	mov	r0, r4
 801bcd8:	f001 ffa4 	bl	801dc24 <mbedtls_ssl_write_change_cipher_spec>
 801bcdc:	f7fe bead 	b.w	801aa3a <mbedtls_ssl_handshake_client_step+0x92>
           ret = mbedtls_ssl_write_finished( ssl );
 801bce0:	4620      	mov	r0, r4
 801bce2:	f002 f863 	bl	801ddac <mbedtls_ssl_write_finished>
 801bce6:	f7fe bea8 	b.w	801aa3a <mbedtls_ssl_handshake_client_step+0x92>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );
 801bcea:	4b69      	ldr	r3, [pc, #420]	; (801be90 <mbedtls_ssl_handshake_client_step+0x14e8>)
 801bcec:	4a69      	ldr	r2, [pc, #420]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bcee:	9300      	str	r3, [sp, #0]
 801bcf0:	2102      	movs	r1, #2
 801bcf2:	f640 43b8 	movw	r3, #3256	; 0xcb8
 801bcf6:	4620      	mov	r0, r4
 801bcf8:	f7f4 fdc8 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	f001 fe71 	bl	801d9e4 <mbedtls_ssl_read_record>
 801bd02:	4605      	mov	r5, r0
 801bd04:	b130      	cbz	r0, 801bd14 <mbedtls_ssl_handshake_client_step+0x136c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801bd06:	4b64      	ldr	r3, [pc, #400]	; (801be98 <mbedtls_ssl_handshake_client_step+0x14f0>)
 801bd08:	9300      	str	r3, [sp, #0]
 801bd0a:	9001      	str	r0, [sp, #4]
 801bd0c:	f640 43bc 	movw	r3, #3260	; 0xcbc
 801bd10:	f7fe bea9 	b.w	801aa66 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801bd14:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bd16:	2b16      	cmp	r3, #22
 801bd18:	d005      	beq.n	801bd26 <mbedtls_ssl_handshake_client_step+0x137e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bd1a:	4b60      	ldr	r3, [pc, #384]	; (801be9c <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bd1c:	9300      	str	r3, [sp, #0]
 801bd1e:	f640 43c2 	movw	r3, #3266	; 0xcc2
 801bd22:	f7fe bed0 	b.w	801aac6 <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801bd26:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 801bd2a:	f898 3000 	ldrb.w	r3, [r8]
 801bd2e:	2b04      	cmp	r3, #4
 801bd30:	d103      	bne.n	801bd3a <mbedtls_ssl_handshake_client_step+0x1392>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801bd32:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801bd36:	2b09      	cmp	r3, #9
 801bd38:	d810      	bhi.n	801bd5c <mbedtls_ssl_handshake_client_step+0x13b4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bd3a:	4b58      	ldr	r3, [pc, #352]	; (801be9c <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bd3c:	9300      	str	r3, [sp, #0]
 801bd3e:	f640 43d5 	movw	r3, #3285	; 0xcd5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bd42:	4a54      	ldr	r2, [pc, #336]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801bd44:	4d56      	ldr	r5, [pc, #344]	; (801bea0 <mbedtls_ssl_handshake_client_step+0x14f8>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bd46:	2101      	movs	r1, #1
 801bd48:	4620      	mov	r0, r4
 801bd4a:	f7f4 fd9f 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801bd4e:	2232      	movs	r2, #50	; 0x32
 801bd50:	2102      	movs	r1, #2
 801bd52:	4620      	mov	r0, r4
 801bd54:	f001 fa30 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801bd58:	f7fe be66 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 801bd5c:	f8b8 6008 	ldrh.w	r6, [r8, #8]
 801bd60:	f8d8 9004 	ldr.w	r9, [r8, #4]
    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 801bd64:	ba76      	rev16	r6, r6
 801bd66:	b2b6      	uxth	r6, r6
    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 801bd68:	f106 020a 	add.w	r2, r6, #10
 801bd6c:	4293      	cmp	r3, r2
 801bd6e:	d004      	beq.n	801bd7a <mbedtls_ssl_handshake_client_step+0x13d2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bd70:	4b4a      	ldr	r3, [pc, #296]	; (801be9c <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bd72:	9300      	str	r3, [sp, #0]
 801bd74:	f640 43e4 	movw	r3, #3300	; 0xce4
 801bd78:	e7e3      	b.n	801bd42 <mbedtls_ssl_handshake_client_step+0x139a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );
 801bd7a:	4b4a      	ldr	r3, [pc, #296]	; (801bea4 <mbedtls_ssl_handshake_client_step+0x14fc>)
 801bd7c:	9300      	str	r3, [sp, #0]
 801bd7e:	4a45      	ldr	r2, [pc, #276]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bd80:	9601      	str	r6, [sp, #4]
 801bd82:	f640 43ea 	movw	r3, #3306	; 0xcea
 801bd86:	2103      	movs	r1, #3
 801bd88:	4620      	mov	r0, r4
 801bd8a:	f7f4 fd7f 	bl	801088c <mbedtls_debug_print_msg>
    ssl->handshake->new_session_ticket = 0;
 801bd8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bd90:	f8c3 5340 	str.w	r5, [r3, #832]	; 0x340
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801bd94:	230c      	movs	r3, #12
 801bd96:	6063      	str	r3, [r4, #4]
    if( ticket_len == 0 )
 801bd98:	2e00      	cmp	r6, #0
 801bd9a:	f43e ae45 	beq.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    mbedtls_zeroize( ssl->session_negotiate->ticket,
 801bd9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bda0:	e9d2 321b 	ldrd	r3, r2, [r2, #108]	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bda4:	4629      	mov	r1, r5
 801bda6:	441a      	add	r2, r3
 801bda8:	4293      	cmp	r3, r2
 801bdaa:	d121      	bne.n	801bdf0 <mbedtls_ssl_handshake_client_step+0x1448>
    mbedtls_free( ssl->session_negotiate->ticket );
 801bdac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bdae:	4b3e      	ldr	r3, [pc, #248]	; (801bea8 <mbedtls_ssl_handshake_client_step+0x1500>)
 801bdb0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	4798      	blx	r3
    ssl->session_negotiate->ticket = NULL;
 801bdb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bdb8:	f04f 0a00 	mov.w	sl, #0
    ssl->session_negotiate->ticket_len = 0;
 801bdbc:	e9c3 aa1b 	strd	sl, sl, [r3, #108]	; 0x6c
    if( ( ticket = mbedtls_calloc( 1, ticket_len ) ) == NULL )
 801bdc0:	4b3a      	ldr	r3, [pc, #232]	; (801beac <mbedtls_ssl_handshake_client_step+0x1504>)
 801bdc2:	4631      	mov	r1, r6
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	2001      	movs	r0, #1
 801bdc8:	4798      	blx	r3
 801bdca:	4607      	mov	r7, r0
 801bdcc:	b998      	cbnz	r0, 801bdf6 <mbedtls_ssl_handshake_client_step+0x144e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
 801bdce:	4b38      	ldr	r3, [pc, #224]	; (801beb0 <mbedtls_ssl_handshake_client_step+0x1508>)
 801bdd0:	4a30      	ldr	r2, [pc, #192]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bdd2:	9300      	str	r3, [sp, #0]
 801bdd4:	2101      	movs	r1, #1
 801bdd6:	f640 43ff 	movw	r3, #3327	; 0xcff
 801bdda:	4620      	mov	r0, r4
 801bddc:	f7f4 fd56 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801bde0:	2250      	movs	r2, #80	; 0x50
 801bde2:	2102      	movs	r1, #2
 801bde4:	4620      	mov	r0, r4
 801bde6:	f001 f9e7 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801bdea:	4d32      	ldr	r5, [pc, #200]	; (801beb4 <mbedtls_ssl_handshake_client_step+0x150c>)
 801bdec:	f7fe be1c 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bdf0:	f803 1b01 	strb.w	r1, [r3], #1
 801bdf4:	e7d8      	b.n	801bda8 <mbedtls_ssl_handshake_client_step+0x1400>
    memcpy( ticket, msg + 6, ticket_len );
 801bdf6:	4632      	mov	r2, r6
 801bdf8:	f108 010a 	add.w	r1, r8, #10
 801bdfc:	f006 f9d4 	bl	80221a8 <memcpy>
    ssl->session_negotiate->ticket = ticket;
 801be00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801be02:	fa99 f289 	rev.w	r2, r9
    ssl->session_negotiate->ticket_lifetime = lifetime;
 801be06:	675a      	str	r2, [r3, #116]	; 0x74
    ssl->session_negotiate->ticket_len = ticket_len;
 801be08:	e9c3 761b 	strd	r7, r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
 801be0c:	4b2a      	ldr	r3, [pc, #168]	; (801beb8 <mbedtls_ssl_handshake_client_step+0x1510>)
 801be0e:	9300      	str	r3, [sp, #0]
 801be10:	4a20      	ldr	r2, [pc, #128]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801be12:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 801be16:	2103      	movs	r1, #3
 801be18:	4620      	mov	r0, r4
 801be1a:	f7f4 fd37 	bl	801088c <mbedtls_debug_print_msg>
    ssl->session_negotiate->id_len = 0;
 801be1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801be20:	f8c3 a010 	str.w	sl, [r3, #16]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801be24:	4b25      	ldr	r3, [pc, #148]	; (801bebc <mbedtls_ssl_handshake_client_step+0x1514>)
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	f640 5313 	movw	r3, #3347	; 0xd13
 801be2c:	f7ff ba0e 	b.w	801b24c <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 801be30:	4620      	mov	r0, r4
 801be32:	f001 ff2f 	bl	801dc94 <mbedtls_ssl_parse_change_cipher_spec>
 801be36:	f7fe be00 	b.w	801aa3a <mbedtls_ssl_handshake_client_step+0x92>
           ret = mbedtls_ssl_parse_finished( ssl );
 801be3a:	4620      	mov	r0, r4
 801be3c:	f002 f834 	bl	801dea8 <mbedtls_ssl_parse_finished>
 801be40:	f7fe bdfb 	b.w	801aa3a <mbedtls_ssl_handshake_client_step+0x92>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 801be44:	4b1e      	ldr	r3, [pc, #120]	; (801bec0 <mbedtls_ssl_handshake_client_step+0x1518>)
 801be46:	9300      	str	r3, [sp, #0]
 801be48:	4a12      	ldr	r2, [pc, #72]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801be4a:	f640 5392 	movw	r3, #3474	; 0xd92
 801be4e:	2102      	movs	r1, #2
 801be50:	4620      	mov	r0, r4
 801be52:	f7f4 fd1b 	bl	801088c <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801be56:	230f      	movs	r3, #15
 801be58:	f7ff ba21 	b.w	801b29e <mbedtls_ssl_handshake_client_step+0x8f6>
           mbedtls_ssl_handshake_wrapup( ssl );
 801be5c:	4620      	mov	r0, r4
 801be5e:	f002 fa25 	bl	801e2ac <mbedtls_ssl_handshake_wrapup>
           break;
 801be62:	f7fe bde1 	b.w	801aa28 <mbedtls_ssl_handshake_client_step+0x80>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 801be66:	9301      	str	r3, [sp, #4]
 801be68:	4b16      	ldr	r3, [pc, #88]	; (801bec4 <mbedtls_ssl_handshake_client_step+0x151c>)
 801be6a:	9300      	str	r3, [sp, #0]
 801be6c:	4a09      	ldr	r2, [pc, #36]	; (801be94 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801be6e:	f640 539b 	movw	r3, #3483	; 0xd9b
 801be72:	2101      	movs	r1, #1
 801be74:	4620      	mov	r0, r4
 801be76:	f7f4 fd09 	bl	801088c <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801be7a:	f7fe bf3f 	b.w	801acfc <mbedtls_ssl_handshake_client_step+0x354>
 801be7e:	bf00      	nop
 801be80:	08031b06 	.word	0x08031b06
 801be84:	08031745 	.word	0x08031745
 801be88:	080310ad 	.word	0x080310ad
 801be8c:	08031b16 	.word	0x08031b16
 801be90:	08031b32 	.word	0x08031b32
 801be94:	08030c38 	.word	0x08030c38
 801be98:	08031106 	.word	0x08031106
 801be9c:	08031b4e 	.word	0x08031b4e
 801bea0:	ffff9200 	.word	0xffff9200
 801bea4:	08031b6d 	.word	0x08031b6d
 801bea8:	2000053c 	.word	0x2000053c
 801beac:	20000538 	.word	0x20000538
 801beb0:	08031b7f 	.word	0x08031b7f
 801beb4:	ffff8100 	.word	0xffff8100
 801beb8:	08031b93 	.word	0x08031b93
 801bebc:	08031bb8 	.word	0x08031bb8
 801bec0:	08031bd4 	.word	0x08031bd4
 801bec4:	08031be4 	.word	0x08031be4

0801bec8 <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bec8:	4401      	add	r1, r0
 801beca:	2300      	movs	r3, #0
 801becc:	4288      	cmp	r0, r1
 801bece:	d100      	bne.n	801bed2 <mbedtls_zeroize+0xa>
}
 801bed0:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bed2:	f800 3b01 	strb.w	r3, [r0], #1
 801bed6:	e7f9      	b.n	801becc <mbedtls_zeroize+0x4>

0801bed8 <ssl_append_key_cert>:
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
    mbedtls_ssl_key_cert *new;

    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bed8:	4b0d      	ldr	r3, [pc, #52]	; (801bf10 <ssl_append_key_cert+0x38>)
{
 801beda:	b570      	push	{r4, r5, r6, lr}
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bedc:	681b      	ldr	r3, [r3, #0]
{
 801bede:	4604      	mov	r4, r0
 801bee0:	460e      	mov	r6, r1
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bee2:	2001      	movs	r0, #1
 801bee4:	210c      	movs	r1, #12
{
 801bee6:	4615      	mov	r5, r2
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801bee8:	4798      	blx	r3
    if( new == NULL )
 801beea:	b170      	cbz	r0, 801bf0a <ssl_append_key_cert+0x32>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new->cert = cert;
    new->key  = key;
    new->next = NULL;
 801beec:	2300      	movs	r3, #0
 801beee:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 801bef0:	6823      	ldr	r3, [r4, #0]
    new->key  = key;
 801bef2:	e9c0 6500 	strd	r6, r5, [r0]
    if( *head == NULL )
 801bef6:	b913      	cbnz	r3, 801befe <ssl_append_key_cert+0x26>
    {
        *head = new;
 801bef8:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new;
    }

    return( 0 );
 801befa:	4618      	mov	r0, r3
}
 801befc:	bd70      	pop	{r4, r5, r6, pc}
        while( cur->next != NULL )
 801befe:	461a      	mov	r2, r3
 801bf00:	689b      	ldr	r3, [r3, #8]
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d1fb      	bne.n	801befe <ssl_append_key_cert+0x26>
        cur->next = new;
 801bf06:	6090      	str	r0, [r2, #8]
 801bf08:	e7f7      	b.n	801befa <ssl_append_key_cert+0x22>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801bf0a:	4802      	ldr	r0, [pc, #8]	; (801bf14 <ssl_append_key_cert+0x3c>)
 801bf0c:	e7f6      	b.n	801befc <ssl_append_key_cert+0x24>
 801bf0e:	bf00      	nop
 801bf10:	20000538 	.word	0x20000538
 801bf14:	ffff8100 	.word	0xffff8100

0801bf18 <ssl_calc_finished_tls_sha256>:
{
 801bf18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801bf1c:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 801bf1e:	b0ab      	sub	sp, #172	; 0xac
 801bf20:	4604      	mov	r4, r0
 801bf22:	460d      	mov	r5, r1
 801bf24:	4690      	mov	r8, r2
    if( !session )
 801bf26:	b907      	cbnz	r7, 801bf2a <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 801bf28:	6b07      	ldr	r7, [r0, #48]	; 0x30
    mbedtls_sha256_init( &sha256 );
 801bf2a:	a80f      	add	r0, sp, #60	; 0x3c
 801bf2c:	f7fc fbfb 	bl	8018726 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 801bf30:	4b29      	ldr	r3, [pc, #164]	; (801bfd8 <ssl_calc_finished_tls_sha256+0xc0>)
 801bf32:	4a2a      	ldr	r2, [pc, #168]	; (801bfdc <ssl_calc_finished_tls_sha256+0xc4>)
 801bf34:	9300      	str	r3, [sp, #0]
 801bf36:	4620      	mov	r0, r4
 801bf38:	f241 33c2 	movw	r3, #5058	; 0x13c2
 801bf3c:	2102      	movs	r1, #2
 801bf3e:	f7f4 fca5 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801bf42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bf44:	a80f      	add	r0, sp, #60	; 0x3c
 801bf46:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801bf4a:	f7fc fbfa 	bl	8018742 <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 801bf4e:	ab11      	add	r3, sp, #68	; 0x44
 801bf50:	2620      	movs	r6, #32
 801bf52:	9301      	str	r3, [sp, #4]
 801bf54:	4b22      	ldr	r3, [pc, #136]	; (801bfe0 <ssl_calc_finished_tls_sha256+0xc8>)
 801bf56:	9300      	str	r3, [sp, #0]
 801bf58:	4620      	mov	r0, r4
 801bf5a:	4a20      	ldr	r2, [pc, #128]	; (801bfdc <ssl_calc_finished_tls_sha256+0xc4>)
 801bf5c:	9602      	str	r6, [sp, #8]
 801bf5e:	f241 33cd 	movw	r3, #5069	; 0x13cd
 801bf62:	2104      	movs	r1, #4
 801bf64:	f7f4 fcf2 	bl	801094c <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801bf68:	4b1e      	ldr	r3, [pc, #120]	; (801bfe4 <ssl_calc_finished_tls_sha256+0xcc>)
 801bf6a:	4a1f      	ldr	r2, [pc, #124]	; (801bfe8 <ssl_calc_finished_tls_sha256+0xd0>)
    mbedtls_sha256_finish( &sha256, padbuf );
 801bf6c:	a907      	add	r1, sp, #28
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801bf6e:	f1b8 0f00 	cmp.w	r8, #0
 801bf72:	bf08      	it	eq
 801bf74:	461a      	moveq	r2, r3
    mbedtls_sha256_finish( &sha256, padbuf );
 801bf76:	a80f      	add	r0, sp, #60	; 0x3c
    ssl->handshake->tls_prf( session->master, 48, sender,
 801bf78:	f04f 080c 	mov.w	r8, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801bf7c:	9205      	str	r2, [sp, #20]
    mbedtls_sha256_finish( &sha256, padbuf );
 801bf7e:	f7fc ffdb 	bl	8018f38 <mbedtls_sha256_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801bf82:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801bf86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bf88:	9600      	str	r6, [sp, #0]
 801bf8a:	f8d3 92a4 	ldr.w	r9, [r3, #676]	; 0x2a4
 801bf8e:	9a05      	ldr	r2, [sp, #20]
 801bf90:	ab07      	add	r3, sp, #28
 801bf92:	2130      	movs	r1, #48	; 0x30
 801bf94:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801bf98:	47c8      	blx	r9
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801bf9a:	4b14      	ldr	r3, [pc, #80]	; (801bfec <ssl_calc_finished_tls_sha256+0xd4>)
 801bf9c:	4a0f      	ldr	r2, [pc, #60]	; (801bfdc <ssl_calc_finished_tls_sha256+0xc4>)
 801bf9e:	9300      	str	r3, [sp, #0]
 801bfa0:	2103      	movs	r1, #3
 801bfa2:	f241 33da 	movw	r3, #5082	; 0x13da
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801bfac:	f7f4 fcce 	bl	801094c <mbedtls_debug_print_buf>
    mbedtls_sha256_free( &sha256 );
 801bfb0:	a80f      	add	r0, sp, #60	; 0x3c
 801bfb2:	f7fc fbbc 	bl	801872e <mbedtls_sha256_free>
    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 801bfb6:	4631      	mov	r1, r6
 801bfb8:	a807      	add	r0, sp, #28
 801bfba:	f7ff ff85 	bl	801bec8 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801bfbe:	4b0c      	ldr	r3, [pc, #48]	; (801bff0 <ssl_calc_finished_tls_sha256+0xd8>)
 801bfc0:	9300      	str	r3, [sp, #0]
 801bfc2:	4a06      	ldr	r2, [pc, #24]	; (801bfdc <ssl_calc_finished_tls_sha256+0xc4>)
 801bfc4:	f44f 539f 	mov.w	r3, #5088	; 0x13e0
 801bfc8:	2102      	movs	r1, #2
 801bfca:	4620      	mov	r0, r4
 801bfcc:	f7f4 fc5e 	bl	801088c <mbedtls_debug_print_msg>
}
 801bfd0:	b02b      	add	sp, #172	; 0xac
 801bfd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfd6:	bf00      	nop
 801bfd8:	08031c71 	.word	0x08031c71
 801bfdc:	08031c15 	.word	0x08031c15
 801bfe0:	08031c8e 	.word	0x08031c8e
 801bfe4:	08031bf5 	.word	0x08031bf5
 801bfe8:	08031c05 	.word	0x08031c05
 801bfec:	08031ca2 	.word	0x08031ca2
 801bff0:	08031cb7 	.word	0x08031cb7

0801bff4 <ssl_calc_verify_tls_sha256>:
{
 801bff4:	b530      	push	{r4, r5, lr}
 801bff6:	b0a1      	sub	sp, #132	; 0x84
 801bff8:	4604      	mov	r4, r0
    mbedtls_sha256_init( &sha256 );
 801bffa:	a805      	add	r0, sp, #20
{
 801bffc:	460d      	mov	r5, r1
    mbedtls_sha256_init( &sha256 );
 801bffe:	f7fc fb92 	bl	8018726 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 801c002:	4b16      	ldr	r3, [pc, #88]	; (801c05c <ssl_calc_verify_tls_sha256+0x68>)
 801c004:	4a16      	ldr	r2, [pc, #88]	; (801c060 <ssl_calc_verify_tls_sha256+0x6c>)
 801c006:	9300      	str	r3, [sp, #0]
 801c008:	4620      	mov	r0, r4
 801c00a:	f240 4316 	movw	r3, #1046	; 0x416
 801c00e:	2102      	movs	r1, #2
 801c010:	f7f4 fc3c 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c014:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c016:	a805      	add	r0, sp, #20
 801c018:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c01c:	f7fc fb91 	bl	8018742 <mbedtls_sha256_clone>
    mbedtls_sha256_finish( &sha256, hash );
 801c020:	4629      	mov	r1, r5
 801c022:	a805      	add	r0, sp, #20
 801c024:	f7fc ff88 	bl	8018f38 <mbedtls_sha256_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 801c028:	2320      	movs	r3, #32
 801c02a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801c02e:	4b0d      	ldr	r3, [pc, #52]	; (801c064 <ssl_calc_verify_tls_sha256+0x70>)
 801c030:	9300      	str	r3, [sp, #0]
 801c032:	4620      	mov	r0, r4
 801c034:	4a0a      	ldr	r2, [pc, #40]	; (801c060 <ssl_calc_verify_tls_sha256+0x6c>)
 801c036:	f240 431b 	movw	r3, #1051	; 0x41b
 801c03a:	2103      	movs	r1, #3
 801c03c:	f7f4 fc86 	bl	801094c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c040:	4b09      	ldr	r3, [pc, #36]	; (801c068 <ssl_calc_verify_tls_sha256+0x74>)
 801c042:	4a07      	ldr	r2, [pc, #28]	; (801c060 <ssl_calc_verify_tls_sha256+0x6c>)
 801c044:	9300      	str	r3, [sp, #0]
 801c046:	2102      	movs	r1, #2
 801c048:	f240 431c 	movw	r3, #1052	; 0x41c
 801c04c:	4620      	mov	r0, r4
 801c04e:	f7f4 fc1d 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 801c052:	a805      	add	r0, sp, #20
 801c054:	f7fc fb6b 	bl	801872e <mbedtls_sha256_free>
}
 801c058:	b021      	add	sp, #132	; 0x84
 801c05a:	bd30      	pop	{r4, r5, pc}
 801c05c:	08031cc9 	.word	0x08031cc9
 801c060:	08031c15 	.word	0x08031c15
 801c064:	08031cdf 	.word	0x08031cdf
 801c068:	08031cf8 	.word	0x08031cf8

0801c06c <tls_prf_generic>:
{
 801c06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c070:	ed2d 8b02 	vpush	{d8}
 801c074:	b0b5      	sub	sp, #212	; 0xd4
 801c076:	4604      	mov	r4, r0
    mbedtls_md_init( &md_ctx );
 801c078:	a801      	add	r0, sp, #4
{
 801c07a:	ee08 1a10 	vmov	s16, r1
 801c07e:	4692      	mov	sl, r2
 801c080:	4699      	mov	r9, r3
 801c082:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
 801c084:	f7f8 fafa 	bl	801467c <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 801c088:	4620      	mov	r0, r4
 801c08a:	f7f8 faeb 	bl	8014664 <mbedtls_md_info_from_type>
 801c08e:	4607      	mov	r7, r0
 801c090:	2800      	cmp	r0, #0
 801c092:	d077      	beq.n	801c184 <tls_prf_generic+0x118>
    md_len = mbedtls_md_get_size( md_info );
 801c094:	f7f8 fc36 	bl	8014904 <mbedtls_md_get_size>
 801c098:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 801c09a:	4648      	mov	r0, r9
 801c09c:	f7e4 f8a2 	bl	80001e4 <strlen>
 801c0a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c0a2:	eb00 0804 	add.w	r8, r0, r4
 801c0a6:	eb08 0203 	add.w	r2, r8, r3
 801c0aa:	2a80      	cmp	r2, #128	; 0x80
 801c0ac:	4605      	mov	r5, r0
 801c0ae:	d86b      	bhi.n	801c188 <tls_prf_generic+0x11c>
    memcpy( tmp + md_len, label, nb );
 801c0b0:	ab14      	add	r3, sp, #80	; 0x50
 801c0b2:	eb03 0b04 	add.w	fp, r3, r4
 801c0b6:	4602      	mov	r2, r0
 801c0b8:	4649      	mov	r1, r9
 801c0ba:	4658      	mov	r0, fp
 801c0bc:	f006 f874 	bl	80221a8 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 801c0c0:	ab14      	add	r3, sp, #80	; 0x50
 801c0c2:	e9dd 1240 	ldrd	r1, r2, [sp, #256]	; 0x100
 801c0c6:	eb03 0008 	add.w	r0, r3, r8
 801c0ca:	f006 f86d 	bl	80221a8 <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 801c0ce:	4639      	mov	r1, r7
 801c0d0:	2201      	movs	r2, #1
 801c0d2:	a801      	add	r0, sp, #4
 801c0d4:	f7f8 fafc 	bl	80146d0 <mbedtls_md_setup>
 801c0d8:	4607      	mov	r7, r0
 801c0da:	b9f8      	cbnz	r0, 801c11c <tls_prf_generic+0xb0>
    nb += rlen;
 801c0dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c0de:	ee18 1a10 	vmov	r1, s16
    nb += rlen;
 801c0e2:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c0e4:	4652      	mov	r2, sl
 801c0e6:	a801      	add	r0, sp, #4
 801c0e8:	f7f8 fb4c 	bl	8014784 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 801c0ec:	462a      	mov	r2, r5
 801c0ee:	4659      	mov	r1, fp
 801c0f0:	a801      	add	r0, sp, #4
 801c0f2:	f7f8 fba7 	bl	8014844 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c0f6:	a914      	add	r1, sp, #80	; 0x50
 801c0f8:	a801      	add	r0, sp, #4
 801c0fa:	f7f8 fbb3 	bl	8014864 <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 801c0fe:	46b9      	mov	r9, r7
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c100:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 801c102:	454e      	cmp	r6, r9
        mbedtls_md_hmac_reset ( &md_ctx );
 801c104:	a801      	add	r0, sp, #4
    for( i = 0; i < dlen; i += md_len )
 801c106:	d80f      	bhi.n	801c128 <tls_prf_generic+0xbc>
    mbedtls_md_free( &md_ctx );
 801c108:	f7f8 fabe 	bl	8014688 <mbedtls_md_free>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c10c:	2180      	movs	r1, #128	; 0x80
 801c10e:	a814      	add	r0, sp, #80	; 0x50
 801c110:	f7ff feda 	bl	801bec8 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 801c114:	2140      	movs	r1, #64	; 0x40
 801c116:	a804      	add	r0, sp, #16
 801c118:	f7ff fed6 	bl	801bec8 <mbedtls_zeroize>
}
 801c11c:	4638      	mov	r0, r7
 801c11e:	b035      	add	sp, #212	; 0xd4
 801c120:	ecbd 8b02 	vpop	{d8}
 801c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 801c128:	f7f8 fbc8 	bl	80148bc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c12c:	462a      	mov	r2, r5
 801c12e:	a914      	add	r1, sp, #80	; 0x50
 801c130:	a801      	add	r0, sp, #4
 801c132:	f7f8 fb87 	bl	8014844 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 801c136:	a904      	add	r1, sp, #16
 801c138:	a801      	add	r0, sp, #4
 801c13a:	f7f8 fb93 	bl	8014864 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 801c13e:	a801      	add	r0, sp, #4
 801c140:	f7f8 fbbc 	bl	80148bc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 801c144:	4622      	mov	r2, r4
 801c146:	a914      	add	r1, sp, #80	; 0x50
 801c148:	a801      	add	r0, sp, #4
 801c14a:	f7f8 fb7b 	bl	8014844 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c14e:	a914      	add	r1, sp, #80	; 0x50
 801c150:	a801      	add	r0, sp, #4
 801c152:	f7f8 fb87 	bl	8014864 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 801c156:	eb04 0209 	add.w	r2, r4, r9
 801c15a:	9842      	ldr	r0, [sp, #264]	; 0x108
 801c15c:	4296      	cmp	r6, r2
 801c15e:	bf2c      	ite	cs
 801c160:	4623      	movcs	r3, r4
 801c162:	fbb6 f3f4 	udivcc	r3, r6, r4
 801c166:	4481      	add	r9, r0
 801c168:	bf38      	it	cc
 801c16a:	fb04 6313 	mlscc	r3, r4, r3, r6
        for( j = 0; j < k; j++ )
 801c16e:	a904      	add	r1, sp, #16
 801c170:	444b      	add	r3, r9
 801c172:	4599      	cmp	r9, r3
 801c174:	d101      	bne.n	801c17a <tls_prf_generic+0x10e>
 801c176:	4691      	mov	r9, r2
 801c178:	e7c3      	b.n	801c102 <tls_prf_generic+0x96>
            dstbuf[i + j]  = h_i[j];
 801c17a:	f811 0b01 	ldrb.w	r0, [r1], #1
 801c17e:	f809 0b01 	strb.w	r0, [r9], #1
        for( j = 0; j < k; j++ )
 801c182:	e7f6      	b.n	801c172 <tls_prf_generic+0x106>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c184:	4f01      	ldr	r7, [pc, #4]	; (801c18c <tls_prf_generic+0x120>)
 801c186:	e7c9      	b.n	801c11c <tls_prf_generic+0xb0>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c188:	4f01      	ldr	r7, [pc, #4]	; (801c190 <tls_prf_generic+0x124>)
 801c18a:	e7c7      	b.n	801c11c <tls_prf_generic+0xb0>
 801c18c:	ffff9400 	.word	0xffff9400
 801c190:	ffff8f00 	.word	0xffff8f00

0801c194 <tls_prf_sha256>:
{
 801c194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 801c196:	9c08      	ldr	r4, [sp, #32]
 801c198:	9403      	str	r4, [sp, #12]
 801c19a:	9c07      	ldr	r4, [sp, #28]
 801c19c:	9402      	str	r4, [sp, #8]
 801c19e:	9c06      	ldr	r4, [sp, #24]
 801c1a0:	e9cd 3400 	strd	r3, r4, [sp]
 801c1a4:	4613      	mov	r3, r2
 801c1a6:	460a      	mov	r2, r1
 801c1a8:	4601      	mov	r1, r0
 801c1aa:	2006      	movs	r0, #6
 801c1ac:	f7ff ff5e 	bl	801c06c <tls_prf_generic>
}
 801c1b0:	b004      	add	sp, #16
 801c1b2:	bd10      	pop	{r4, pc}

0801c1b4 <tls_prf_sha384>:
{
 801c1b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
 801c1b6:	9c08      	ldr	r4, [sp, #32]
 801c1b8:	9403      	str	r4, [sp, #12]
 801c1ba:	9c07      	ldr	r4, [sp, #28]
 801c1bc:	9402      	str	r4, [sp, #8]
 801c1be:	9c06      	ldr	r4, [sp, #24]
 801c1c0:	e9cd 3400 	strd	r3, r4, [sp]
 801c1c4:	4613      	mov	r3, r2
 801c1c6:	460a      	mov	r2, r1
 801c1c8:	4601      	mov	r1, r0
 801c1ca:	2007      	movs	r0, #7
 801c1cc:	f7ff ff4e 	bl	801c06c <tls_prf_generic>
}
 801c1d0:	b004      	add	sp, #16
 801c1d2:	bd10      	pop	{r4, pc}

0801c1d4 <ssl_calc_finished_tls_sha384>:
{
 801c1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c1d8:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 801c1da:	b0c9      	sub	sp, #292	; 0x124
 801c1dc:	4604      	mov	r4, r0
 801c1de:	460d      	mov	r5, r1
 801c1e0:	4616      	mov	r6, r2
    if( !session )
 801c1e2:	b907      	cbnz	r7, 801c1e6 <ssl_calc_finished_tls_sha384+0x12>
        session = ssl->session;
 801c1e4:	6b07      	ldr	r7, [r0, #48]	; 0x30
    mbedtls_sha512_init( &sha512 );
 801c1e6:	a812      	add	r0, sp, #72	; 0x48
 801c1e8:	f7fc ff2f 	bl	801904a <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
 801c1ec:	4b29      	ldr	r3, [pc, #164]	; (801c294 <ssl_calc_finished_tls_sha384+0xc0>)
 801c1ee:	4a2a      	ldr	r2, [pc, #168]	; (801c298 <ssl_calc_finished_tls_sha384+0xc4>)
 801c1f0:	9300      	str	r3, [sp, #0]
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	f241 33f3 	movw	r3, #5107	; 0x13f3
 801c1f8:	2102      	movs	r1, #2
 801c1fa:	f7f4 fb47 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c1fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c200:	a812      	add	r0, sp, #72	; 0x48
 801c202:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c206:	f7fc ff2e 	bl	8019066 <mbedtls_sha512_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
 801c20a:	2340      	movs	r3, #64	; 0x40
 801c20c:	9302      	str	r3, [sp, #8]
 801c20e:	ab16      	add	r3, sp, #88	; 0x58
 801c210:	9301      	str	r3, [sp, #4]
 801c212:	4b22      	ldr	r3, [pc, #136]	; (801c29c <ssl_calc_finished_tls_sha384+0xc8>)
 801c214:	9300      	str	r3, [sp, #0]
 801c216:	4620      	mov	r0, r4
 801c218:	4a1f      	ldr	r2, [pc, #124]	; (801c298 <ssl_calc_finished_tls_sha384+0xc4>)
 801c21a:	f241 33fe 	movw	r3, #5118	; 0x13fe
 801c21e:	2104      	movs	r1, #4
 801c220:	f7f4 fb94 	bl	801094c <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c224:	4b1e      	ldr	r3, [pc, #120]	; (801c2a0 <ssl_calc_finished_tls_sha384+0xcc>)
 801c226:	4a1f      	ldr	r2, [pc, #124]	; (801c2a4 <ssl_calc_finished_tls_sha384+0xd0>)
    mbedtls_sha512_finish( &sha512, padbuf );
 801c228:	a906      	add	r1, sp, #24
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c22a:	2e00      	cmp	r6, #0
 801c22c:	bf08      	it	eq
 801c22e:	461a      	moveq	r2, r3
    mbedtls_sha512_finish( &sha512, padbuf );
 801c230:	a812      	add	r0, sp, #72	; 0x48
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c232:	f04f 080c 	mov.w	r8, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c236:	9205      	str	r2, [sp, #20]
    mbedtls_sha512_finish( &sha512, padbuf );
 801c238:	f7fd fd78 	bl	8019d2c <mbedtls_sha512_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c23c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c242:	9a05      	ldr	r2, [sp, #20]
 801c244:	2630      	movs	r6, #48	; 0x30
 801c246:	9600      	str	r6, [sp, #0]
 801c248:	f8d3 92a4 	ldr.w	r9, [r3, #676]	; 0x2a4
 801c24c:	4631      	mov	r1, r6
 801c24e:	ab06      	add	r3, sp, #24
 801c250:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c254:	47c8      	blx	r9
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c256:	4b14      	ldr	r3, [pc, #80]	; (801c2a8 <ssl_calc_finished_tls_sha384+0xd4>)
 801c258:	4a0f      	ldr	r2, [pc, #60]	; (801c298 <ssl_calc_finished_tls_sha384+0xc4>)
 801c25a:	9300      	str	r3, [sp, #0]
 801c25c:	2103      	movs	r1, #3
 801c25e:	f241 430b 	movw	r3, #5131	; 0x140b
 801c262:	4620      	mov	r0, r4
 801c264:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c268:	f7f4 fb70 	bl	801094c <mbedtls_debug_print_buf>
    mbedtls_sha512_free( &sha512 );
 801c26c:	a812      	add	r0, sp, #72	; 0x48
 801c26e:	f7fc fef0 	bl	8019052 <mbedtls_sha512_free>
    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 801c272:	4631      	mov	r1, r6
 801c274:	a806      	add	r0, sp, #24
 801c276:	f7ff fe27 	bl	801bec8 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c27a:	4b0c      	ldr	r3, [pc, #48]	; (801c2ac <ssl_calc_finished_tls_sha384+0xd8>)
 801c27c:	9300      	str	r3, [sp, #0]
 801c27e:	4a06      	ldr	r2, [pc, #24]	; (801c298 <ssl_calc_finished_tls_sha384+0xc4>)
 801c280:	f241 4311 	movw	r3, #5137	; 0x1411
 801c284:	2102      	movs	r1, #2
 801c286:	4620      	mov	r0, r4
 801c288:	f7f4 fb00 	bl	801088c <mbedtls_debug_print_msg>
}
 801c28c:	b049      	add	sp, #292	; 0x124
 801c28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c292:	bf00      	nop
 801c294:	08031d07 	.word	0x08031d07
 801c298:	08031c15 	.word	0x08031c15
 801c29c:	08031d24 	.word	0x08031d24
 801c2a0:	08031bf5 	.word	0x08031bf5
 801c2a4:	08031c05 	.word	0x08031c05
 801c2a8:	08031ca2 	.word	0x08031ca2
 801c2ac:	08031cb7 	.word	0x08031cb7

0801c2b0 <ssl_calc_verify_tls_sha384>:
{
 801c2b0:	b530      	push	{r4, r5, lr}
 801c2b2:	b0bb      	sub	sp, #236	; 0xec
 801c2b4:	4604      	mov	r4, r0
    mbedtls_sha512_init( &sha512 );
 801c2b6:	a804      	add	r0, sp, #16
{
 801c2b8:	460d      	mov	r5, r1
    mbedtls_sha512_init( &sha512 );
 801c2ba:	f7fc fec6 	bl	801904a <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 801c2be:	4b16      	ldr	r3, [pc, #88]	; (801c318 <ssl_calc_verify_tls_sha384+0x68>)
 801c2c0:	4a16      	ldr	r2, [pc, #88]	; (801c31c <ssl_calc_verify_tls_sha384+0x6c>)
 801c2c2:	9300      	str	r3, [sp, #0]
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	f240 432b 	movw	r3, #1067	; 0x42b
 801c2ca:	2102      	movs	r1, #2
 801c2cc:	f7f4 fade 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c2d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c2d2:	a804      	add	r0, sp, #16
 801c2d4:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c2d8:	f7fc fec5 	bl	8019066 <mbedtls_sha512_clone>
    mbedtls_sha512_finish( &sha512, hash );
 801c2dc:	4629      	mov	r1, r5
 801c2de:	a804      	add	r0, sp, #16
 801c2e0:	f7fd fd24 	bl	8019d2c <mbedtls_sha512_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
 801c2e4:	2330      	movs	r3, #48	; 0x30
 801c2e6:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801c2ea:	4b0d      	ldr	r3, [pc, #52]	; (801c320 <ssl_calc_verify_tls_sha384+0x70>)
 801c2ec:	9300      	str	r3, [sp, #0]
 801c2ee:	4620      	mov	r0, r4
 801c2f0:	4a0a      	ldr	r2, [pc, #40]	; (801c31c <ssl_calc_verify_tls_sha384+0x6c>)
 801c2f2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 801c2f6:	2103      	movs	r1, #3
 801c2f8:	f7f4 fb28 	bl	801094c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c2fc:	4b09      	ldr	r3, [pc, #36]	; (801c324 <ssl_calc_verify_tls_sha384+0x74>)
 801c2fe:	4a07      	ldr	r2, [pc, #28]	; (801c31c <ssl_calc_verify_tls_sha384+0x6c>)
 801c300:	9300      	str	r3, [sp, #0]
 801c302:	2102      	movs	r1, #2
 801c304:	f240 4331 	movw	r3, #1073	; 0x431
 801c308:	4620      	mov	r0, r4
 801c30a:	f7f4 fabf 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_sha512_free( &sha512 );
 801c30e:	a804      	add	r0, sp, #16
 801c310:	f7fc fe9f 	bl	8019052 <mbedtls_sha512_free>
}
 801c314:	b03b      	add	sp, #236	; 0xec
 801c316:	bd30      	pop	{r4, r5, pc}
 801c318:	08031d3a 	.word	0x08031d3a
 801c31c:	08031c15 	.word	0x08031c15
 801c320:	08031cdf 	.word	0x08031cdf
 801c324:	08031cf8 	.word	0x08031cf8

0801c328 <ssl_update_checksum_sha256>:
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c328:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c32a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801c32e:	f7fc bdfe 	b.w	8018f2e <mbedtls_sha256_update>

0801c332 <ssl_update_checksum_sha384>:
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c332:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c334:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 801c338:	f7fd bcf3 	b.w	8019d22 <mbedtls_sha512_update>

0801c33c <ssl_update_checksum_start>:
{
 801c33c:	b570      	push	{r4, r5, r6, lr}
 801c33e:	4604      	mov	r4, r0
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c340:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c342:	f500 70a8 	add.w	r0, r0, #336	; 0x150
{
 801c346:	460d      	mov	r5, r1
 801c348:	4616      	mov	r6, r2
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c34a:	f7fc fdf0 	bl	8018f2e <mbedtls_sha256_update>
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c34e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c350:	4632      	mov	r2, r6
 801c352:	4629      	mov	r1, r5
 801c354:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
}
 801c358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c35c:	f7fd bce1 	b.w	8019d22 <mbedtls_sha512_update>

0801c360 <ssl_set_timer>:
    if( ssl->f_set_timer == NULL )
 801c360:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 801c362:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c364:	4604      	mov	r4, r0
 801c366:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 801c368:	b17b      	cbz	r3, 801c38a <ssl_set_timer+0x2a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 801c36a:	4b09      	ldr	r3, [pc, #36]	; (801c390 <ssl_set_timer+0x30>)
 801c36c:	9101      	str	r1, [sp, #4]
 801c36e:	9300      	str	r3, [sp, #0]
 801c370:	4a08      	ldr	r2, [pc, #32]	; (801c394 <ssl_set_timer+0x34>)
 801c372:	2352      	movs	r3, #82	; 0x52
 801c374:	2103      	movs	r1, #3
 801c376:	f7f4 fa89 	bl	801088c <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c37a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c37c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801c37e:	462a      	mov	r2, r5
 801c380:	08a9      	lsrs	r1, r5, #2
}
 801c382:	b003      	add	sp, #12
 801c384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c388:	4718      	bx	r3
}
 801c38a:	b003      	add	sp, #12
 801c38c:	bd30      	pop	{r4, r5, pc}
 801c38e:	bf00      	nop
 801c390:	08031d50 	.word	0x08031d50
 801c394:	08031c15 	.word	0x08031c15

0801c398 <mbedtls_ssl_derive_keys>:
{
 801c398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39c:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c39e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 801c3a0:	6c85      	ldr	r5, [r0, #72]	; 0x48
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c3a2:	9307      	str	r3, [sp, #28]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c3a4:	4b8d      	ldr	r3, [pc, #564]	; (801c5dc <mbedtls_ssl_derive_keys+0x244>)
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 801c3a6:	6b86      	ldr	r6, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c3a8:	4a8d      	ldr	r2, [pc, #564]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
 801c3aa:	9300      	str	r3, [sp, #0]
 801c3ac:	2102      	movs	r1, #2
 801c3ae:	f240 13f5 	movw	r3, #501	; 0x1f5
{
 801c3b2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c3b4:	f7f4 fa6a 	bl	801088c <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 801c3b8:	682b      	ldr	r3, [r5, #0]
 801c3ba:	7a18      	ldrb	r0, [r3, #8]
 801c3bc:	f7f3 fd2e 	bl	800fe1c <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 801c3c0:	682b      	ldr	r3, [r5, #0]
 801c3c2:	4680      	mov	r8, r0
 801c3c4:	b980      	cbnz	r0, 801c3e8 <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 801c3c6:	7a1b      	ldrb	r3, [r3, #8]
 801c3c8:	9301      	str	r3, [sp, #4]
 801c3ca:	4b86      	ldr	r3, [pc, #536]	; (801c5e4 <mbedtls_ssl_derive_keys+0x24c>)
 801c3cc:	9300      	str	r3, [sp, #0]
 801c3ce:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c3d2:	4a83      	ldr	r2, [pc, #524]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c3d4:	f8df b250 	ldr.w	fp, [pc, #592]	; 801c628 <mbedtls_ssl_derive_keys+0x290>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c3d8:	2101      	movs	r1, #1
 801c3da:	4620      	mov	r0, r4
 801c3dc:	f7f4 fa56 	bl	801088c <mbedtls_debug_print_msg>
}
 801c3e0:	4658      	mov	r0, fp
 801c3e2:	b059      	add	sp, #356	; 0x164
 801c3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 801c3e8:	7a58      	ldrb	r0, [r3, #9]
 801c3ea:	f7f8 f93b 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c3ee:	4681      	mov	r9, r0
 801c3f0:	b938      	cbnz	r0, 801c402 <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c3f2:	682b      	ldr	r3, [r5, #0]
 801c3f4:	7a5b      	ldrb	r3, [r3, #9]
 801c3f6:	9301      	str	r3, [sp, #4]
 801c3f8:	4b7b      	ldr	r3, [pc, #492]	; (801c5e8 <mbedtls_ssl_derive_keys+0x250>)
 801c3fa:	9300      	str	r3, [sp, #0]
 801c3fc:	f240 2302 	movw	r3, #514	; 0x202
 801c400:	e7e7      	b.n	801c3d2 <mbedtls_ssl_derive_keys+0x3a>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c402:	6963      	ldr	r3, [r4, #20]
 801c404:	2b03      	cmp	r3, #3
 801c406:	d171      	bne.n	801c4ec <mbedtls_ssl_derive_keys+0x154>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801c408:	682b      	ldr	r3, [r5, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c40a:	7a5b      	ldrb	r3, [r3, #9]
 801c40c:	2b07      	cmp	r3, #7
 801c40e:	d165      	bne.n	801c4dc <mbedtls_ssl_derive_keys+0x144>
        handshake->tls_prf = tls_prf_sha384;
 801c410:	4b76      	ldr	r3, [pc, #472]	; (801c5ec <mbedtls_ssl_derive_keys+0x254>)
 801c412:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 801c416:	4b76      	ldr	r3, [pc, #472]	; (801c5f0 <mbedtls_ssl_derive_keys+0x258>)
 801c418:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 801c41c:	4b75      	ldr	r3, [pc, #468]	; (801c5f4 <mbedtls_ssl_derive_keys+0x25c>)
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c41e:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
    if( handshake->resume == 0 )
 801c422:	9b07      	ldr	r3, [sp, #28]
 801c424:	3334      	adds	r3, #52	; 0x34
 801c426:	9306      	str	r3, [sp, #24]
 801c428:	f8d6 3330 	ldr.w	r3, [r6, #816]	; 0x330
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	f040 80ca 	bne.w	801c5c6 <mbedtls_ssl_derive_keys+0x22e>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 801c432:	f8d6 32a8 	ldr.w	r3, [r6, #680]	; 0x2a8
 801c436:	4a6a      	ldr	r2, [pc, #424]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
 801c438:	f506 7a3b 	add.w	sl, r6, #748	; 0x2ec
 801c43c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c440:	4b6d      	ldr	r3, [pc, #436]	; (801c5f8 <mbedtls_ssl_derive_keys+0x260>)
 801c442:	9300      	str	r3, [sp, #0]
 801c444:	2103      	movs	r1, #3
 801c446:	f240 2342 	movw	r3, #578	; 0x242
 801c44a:	4620      	mov	r0, r4
 801c44c:	f7f4 fa7e 	bl	801094c <mbedtls_debug_print_buf>
        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
 801c450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c452:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801c456:	2b01      	cmp	r3, #1
 801c458:	d156      	bne.n	801c508 <mbedtls_ssl_derive_keys+0x170>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
 801c45a:	4b68      	ldr	r3, [pc, #416]	; (801c5fc <mbedtls_ssl_derive_keys+0x264>)
 801c45c:	4a60      	ldr	r2, [pc, #384]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
 801c45e:	9300      	str	r3, [sp, #0]
 801c460:	2103      	movs	r1, #3
 801c462:	f240 234b 	movw	r3, #587	; 0x24b
 801c466:	4620      	mov	r0, r4
 801c468:	f7f4 fa10 	bl	801088c <mbedtls_debug_print_msg>
            ssl->handshake->calc_verify( ssl, session_hash );
 801c46c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c46e:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 801c472:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801c476:	4659      	mov	r1, fp
 801c478:	4620      	mov	r0, r4
 801c47a:	4798      	blx	r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801c47c:	6963      	ldr	r3, [r4, #20]
 801c47e:	2b03      	cmp	r3, #3
 801c480:	d140      	bne.n	801c504 <mbedtls_ssl_derive_keys+0x16c>
                if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801c482:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	7a5b      	ldrb	r3, [r3, #9]
                    hash_len = 32;
 801c488:	2b07      	cmp	r3, #7
 801c48a:	bf0c      	ite	eq
 801c48c:	2730      	moveq	r7, #48	; 0x30
 801c48e:	2720      	movne	r7, #32
            MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
 801c490:	4b5b      	ldr	r3, [pc, #364]	; (801c600 <mbedtls_ssl_derive_keys+0x268>)
 801c492:	4a53      	ldr	r2, [pc, #332]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
 801c494:	9300      	str	r3, [sp, #0]
 801c496:	e9cd b701 	strd	fp, r7, [sp, #4]
 801c49a:	f44f 7318 	mov.w	r3, #608	; 0x260
 801c49e:	2103      	movs	r1, #3
 801c4a0:	4620      	mov	r0, r4
 801c4a2:	f7f4 fa53 	bl	801094c <mbedtls_debug_print_buf>
            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c4a6:	2330      	movs	r3, #48	; 0x30
 801c4a8:	9302      	str	r3, [sp, #8]
 801c4aa:	9b06      	ldr	r3, [sp, #24]
 801c4ac:	4a55      	ldr	r2, [pc, #340]	; (801c604 <mbedtls_ssl_derive_keys+0x26c>)
 801c4ae:	e9cd 7300 	strd	r7, r3, [sp]
 801c4b2:	4650      	mov	r0, sl
 801c4b4:	465b      	mov	r3, fp
 801c4b6:	f8d6 72a4 	ldr.w	r7, [r6, #676]	; 0x2a4
 801c4ba:	f8d6 12a8 	ldr.w	r1, [r6, #680]	; 0x2a8
 801c4be:	47b8      	blx	r7
            if( ret != 0 )
 801c4c0:	4683      	mov	fp, r0
 801c4c2:	2800      	cmp	r0, #0
 801c4c4:	d037      	beq.n	801c536 <mbedtls_ssl_derive_keys+0x19e>
                MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c4c6:	4b50      	ldr	r3, [pc, #320]	; (801c608 <mbedtls_ssl_derive_keys+0x270>)
 801c4c8:	9300      	str	r3, [sp, #0]
 801c4ca:	9001      	str	r0, [sp, #4]
 801c4cc:	f44f 731a 	mov.w	r3, #616	; 0x268
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c4d0:	4a43      	ldr	r2, [pc, #268]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
 801c4d2:	2101      	movs	r1, #1
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f7f4 fa09 	bl	80108ec <mbedtls_debug_print_ret>
        return( ret );
 801c4da:	e781      	b.n	801c3e0 <mbedtls_ssl_derive_keys+0x48>
        handshake->tls_prf = tls_prf_sha256;
 801c4dc:	4b4b      	ldr	r3, [pc, #300]	; (801c60c <mbedtls_ssl_derive_keys+0x274>)
 801c4de:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 801c4e2:	4b4b      	ldr	r3, [pc, #300]	; (801c610 <mbedtls_ssl_derive_keys+0x278>)
 801c4e4:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c4e8:	4b4a      	ldr	r3, [pc, #296]	; (801c614 <mbedtls_ssl_derive_keys+0x27c>)
 801c4ea:	e798      	b.n	801c41e <mbedtls_ssl_derive_keys+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c4ec:	4b4a      	ldr	r3, [pc, #296]	; (801c618 <mbedtls_ssl_derive_keys+0x280>)
 801c4ee:	9300      	str	r3, [sp, #0]
 801c4f0:	f240 2332 	movw	r3, #562	; 0x232
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c4f4:	4a3a      	ldr	r2, [pc, #232]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c4f6:	f8df b134 	ldr.w	fp, [pc, #308]	; 801c62c <mbedtls_ssl_derive_keys+0x294>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c4fa:	2101      	movs	r1, #1
 801c4fc:	4620      	mov	r0, r4
 801c4fe:	f7f4 f9c5 	bl	801088c <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c502:	e76d      	b.n	801c3e0 <mbedtls_ssl_derive_keys+0x48>
                hash_len = 36;
 801c504:	2724      	movs	r7, #36	; 0x24
 801c506:	e7c3      	b.n	801c490 <mbedtls_ssl_derive_keys+0xf8>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c508:	2330      	movs	r3, #48	; 0x30
 801c50a:	9302      	str	r3, [sp, #8]
 801c50c:	9b06      	ldr	r3, [sp, #24]
 801c50e:	9301      	str	r3, [sp, #4]
 801c510:	2340      	movs	r3, #64	; 0x40
 801c512:	9300      	str	r3, [sp, #0]
 801c514:	f8d6 72a4 	ldr.w	r7, [r6, #676]	; 0x2a4
 801c518:	4a40      	ldr	r2, [pc, #256]	; (801c61c <mbedtls_ssl_derive_keys+0x284>)
 801c51a:	f8d6 12a8 	ldr.w	r1, [r6, #680]	; 0x2a8
 801c51e:	f506 732b 	add.w	r3, r6, #684	; 0x2ac
 801c522:	4650      	mov	r0, sl
 801c524:	47b8      	blx	r7
        if( ret != 0 )
 801c526:	4683      	mov	fp, r0
 801c528:	b128      	cbz	r0, 801c536 <mbedtls_ssl_derive_keys+0x19e>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c52a:	4b37      	ldr	r3, [pc, #220]	; (801c608 <mbedtls_ssl_derive_keys+0x270>)
 801c52c:	9300      	str	r3, [sp, #0]
 801c52e:	9001      	str	r0, [sp, #4]
 801c530:	f240 2375 	movw	r3, #629	; 0x275
 801c534:	e7cc      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 801c536:	2142      	movs	r1, #66	; 0x42
 801c538:	4650      	mov	r0, sl
 801c53a:	f7ff fcc5 	bl	801bec8 <mbedtls_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 801c53e:	f506 732b 	add.w	r3, r6, #684	; 0x2ac
 801c542:	af08      	add	r7, sp, #32
 801c544:	f506 7c3b 	add.w	ip, r6, #748	; 0x2ec
 801c548:	469a      	mov	sl, r3
 801c54a:	6818      	ldr	r0, [r3, #0]
 801c54c:	6859      	ldr	r1, [r3, #4]
 801c54e:	463a      	mov	r2, r7
 801c550:	c203      	stmia	r2!, {r0, r1}
 801c552:	3308      	adds	r3, #8
 801c554:	4563      	cmp	r3, ip
 801c556:	4617      	mov	r7, r2
 801c558:	d1f7      	bne.n	801c54a <mbedtls_ssl_derive_keys+0x1b2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 801c55a:	af10      	add	r7, sp, #64	; 0x40
 801c55c:	4652      	mov	r2, sl
 801c55e:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 801c562:	463b      	mov	r3, r7
 801c564:	cb03      	ldmia	r3!, {r0, r1}
 801c566:	4563      	cmp	r3, ip
 801c568:	6010      	str	r0, [r2, #0]
 801c56a:	6051      	str	r1, [r2, #4]
 801c56c:	461f      	mov	r7, r3
 801c56e:	f102 0208 	add.w	r2, r2, #8
 801c572:	d1f6      	bne.n	801c562 <mbedtls_ssl_derive_keys+0x1ca>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 801c574:	af08      	add	r7, sp, #32
 801c576:	f506 7233 	add.w	r2, r6, #716	; 0x2cc
 801c57a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801c57e:	463b      	mov	r3, r7
 801c580:	cb03      	ldmia	r3!, {r0, r1}
 801c582:	4563      	cmp	r3, ip
 801c584:	6010      	str	r0, [r2, #0]
 801c586:	6051      	str	r1, [r2, #4]
 801c588:	461f      	mov	r7, r3
 801c58a:	f102 0208 	add.w	r2, r2, #8
 801c58e:	d1f6      	bne.n	801c57e <mbedtls_ssl_derive_keys+0x1e6>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c590:	2140      	movs	r1, #64	; 0x40
 801c592:	a808      	add	r0, sp, #32
 801c594:	f7ff fc98 	bl	801bec8 <mbedtls_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 801c598:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c59c:	9302      	str	r3, [sp, #8]
 801c59e:	2740      	movs	r7, #64	; 0x40
 801c5a0:	ab18      	add	r3, sp, #96	; 0x60
 801c5a2:	9301      	str	r3, [sp, #4]
 801c5a4:	9700      	str	r7, [sp, #0]
 801c5a6:	f8d6 62a4 	ldr.w	r6, [r6, #676]	; 0x2a4
 801c5aa:	4a1d      	ldr	r2, [pc, #116]	; (801c620 <mbedtls_ssl_derive_keys+0x288>)
 801c5ac:	9806      	ldr	r0, [sp, #24]
 801c5ae:	4653      	mov	r3, sl
 801c5b0:	2130      	movs	r1, #48	; 0x30
 801c5b2:	47b0      	blx	r6
    if( ret != 0 )
 801c5b4:	4683      	mov	fp, r0
 801c5b6:	2800      	cmp	r0, #0
 801c5b8:	d03a      	beq.n	801c630 <mbedtls_ssl_derive_keys+0x298>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c5ba:	4b13      	ldr	r3, [pc, #76]	; (801c608 <mbedtls_ssl_derive_keys+0x270>)
 801c5bc:	9300      	str	r3, [sp, #0]
 801c5be:	9001      	str	r0, [sp, #4]
 801c5c0:	f240 2396 	movw	r3, #662	; 0x296
 801c5c4:	e784      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 801c5c6:	4b17      	ldr	r3, [pc, #92]	; (801c624 <mbedtls_ssl_derive_keys+0x28c>)
 801c5c8:	9300      	str	r3, [sp, #0]
 801c5ca:	4a05      	ldr	r2, [pc, #20]	; (801c5e0 <mbedtls_ssl_derive_keys+0x248>)
 801c5cc:	f44f 731f 	mov.w	r3, #636	; 0x27c
 801c5d0:	2103      	movs	r1, #3
 801c5d2:	4620      	mov	r0, r4
 801c5d4:	f7f4 f95a 	bl	801088c <mbedtls_debug_print_msg>
 801c5d8:	e7b1      	b.n	801c53e <mbedtls_ssl_derive_keys+0x1a6>
 801c5da:	bf00      	nop
 801c5dc:	08031d63 	.word	0x08031d63
 801c5e0:	08031c15 	.word	0x08031c15
 801c5e4:	08031d72 	.word	0x08031d72
 801c5e8:	08031d8f 	.word	0x08031d8f
 801c5ec:	0801c1b5 	.word	0x0801c1b5
 801c5f0:	0801c2b1 	.word	0x0801c2b1
 801c5f4:	0801c1d5 	.word	0x0801c1d5
 801c5f8:	08031db0 	.word	0x08031db0
 801c5fc:	08031dc1 	.word	0x08031dc1
 801c600:	08031dde 	.word	0x08031dde
 801c604:	08031dc7 	.word	0x08031dc7
 801c608:	08031deb 	.word	0x08031deb
 801c60c:	0801c195 	.word	0x0801c195
 801c610:	0801bff5 	.word	0x0801bff5
 801c614:	0801bf19 	.word	0x0801bf19
 801c618:	08031745 	.word	0x08031745
 801c61c:	08031dd0 	.word	0x08031dd0
 801c620:	08031e0e 	.word	0x08031e0e
 801c624:	08031def 	.word	0x08031def
 801c628:	ffff8f00 	.word	0xffff8f00
 801c62c:	ffff9400 	.word	0xffff9400
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 801c630:	9b07      	ldr	r3, [sp, #28]
 801c632:	6898      	ldr	r0, [r3, #8]
 801c634:	f7fd fcca 	bl	8019fcc <mbedtls_ssl_get_ciphersuite_name>
 801c638:	4ba1      	ldr	r3, [pc, #644]	; (801c8c0 <mbedtls_ssl_derive_keys+0x528>)
 801c63a:	4aa2      	ldr	r2, [pc, #648]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c63c:	9001      	str	r0, [sp, #4]
 801c63e:	9300      	str	r3, [sp, #0]
 801c640:	2103      	movs	r1, #3
 801c642:	f240 239a 	movw	r3, #666	; 0x29a
 801c646:	4620      	mov	r0, r4
 801c648:	f7f4 f920 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 801c64c:	2330      	movs	r3, #48	; 0x30
 801c64e:	9302      	str	r3, [sp, #8]
 801c650:	9b06      	ldr	r3, [sp, #24]
 801c652:	9301      	str	r3, [sp, #4]
 801c654:	4b9c      	ldr	r3, [pc, #624]	; (801c8c8 <mbedtls_ssl_derive_keys+0x530>)
 801c656:	4a9b      	ldr	r2, [pc, #620]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c658:	9300      	str	r3, [sp, #0]
 801c65a:	2103      	movs	r1, #3
 801c65c:	f44f 7327 	mov.w	r3, #668	; 0x29c
 801c660:	4620      	mov	r0, r4
 801c662:	f7f4 f973 	bl	801094c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 801c666:	4b99      	ldr	r3, [pc, #612]	; (801c8cc <mbedtls_ssl_derive_keys+0x534>)
 801c668:	4a96      	ldr	r2, [pc, #600]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c66a:	9300      	str	r3, [sp, #0]
 801c66c:	2104      	movs	r1, #4
 801c66e:	f240 239d 	movw	r3, #669	; 0x29d
 801c672:	4620      	mov	r0, r4
 801c674:	e9cd a701 	strd	sl, r7, [sp, #4]
 801c678:	f7f4 f968 	bl	801094c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 801c67c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c680:	9302      	str	r3, [sp, #8]
 801c682:	ab18      	add	r3, sp, #96	; 0x60
 801c684:	9301      	str	r3, [sp, #4]
 801c686:	4b92      	ldr	r3, [pc, #584]	; (801c8d0 <mbedtls_ssl_derive_keys+0x538>)
 801c688:	4a8e      	ldr	r2, [pc, #568]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c68a:	9300      	str	r3, [sp, #0]
 801c68c:	2104      	movs	r1, #4
 801c68e:	f240 239e 	movw	r3, #670	; 0x29e
 801c692:	4620      	mov	r0, r4
 801c694:	f7f4 f95a 	bl	801094c <mbedtls_debug_print_buf>
    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 801c698:	4639      	mov	r1, r7
 801c69a:	4650      	mov	r0, sl
 801c69c:	f7ff fc14 	bl	801bec8 <mbedtls_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 801c6a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c6a4:	08db      	lsrs	r3, r3, #3
 801c6a6:	606b      	str	r3, [r5, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 801c6a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c6ac:	2b06      	cmp	r3, #6
 801c6ae:	d001      	beq.n	801c6b4 <mbedtls_ssl_derive_keys+0x31c>
 801c6b0:	2b08      	cmp	r3, #8
 801c6b2:	d10e      	bne.n	801c6d2 <mbedtls_ssl_derive_keys+0x33a>
        transform->maclen = 0;
 801c6b4:	2300      	movs	r3, #0
 801c6b6:	616b      	str	r3, [r5, #20]
        transform->fixed_ivlen = 4;
 801c6b8:	210c      	movs	r1, #12
 801c6ba:	2304      	movs	r3, #4
 801c6bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
                            + ( transform->ciphersuite_info->flags &
 801c6c0:	682b      	ldr	r3, [r5, #0]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 801c6c2:	7f1b      	ldrb	r3, [r3, #28]
 801c6c4:	f013 0f02 	tst.w	r3, #2
                            + ( transform->ciphersuite_info->flags &
 801c6c8:	bf14      	ite	ne
 801c6ca:	2310      	movne	r3, #16
 801c6cc:	2318      	moveq	r3, #24
                transform->minlen += transform->ivlen;
 801c6ce:	60ab      	str	r3, [r5, #8]
 801c6d0:	e029      	b.n	801c726 <mbedtls_ssl_derive_keys+0x38e>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c6d2:	2201      	movs	r2, #1
 801c6d4:	4649      	mov	r1, r9
 801c6d6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801c6da:	f7f7 fff9 	bl	80146d0 <mbedtls_md_setup>
 801c6de:	4683      	mov	fp, r0
 801c6e0:	b938      	cbnz	r0, 801c6f2 <mbedtls_ssl_derive_keys+0x35a>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 801c6e2:	2201      	movs	r2, #1
 801c6e4:	4649      	mov	r1, r9
 801c6e6:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801c6ea:	f7f7 fff1 	bl	80146d0 <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c6ee:	4683      	mov	fp, r0
 801c6f0:	b130      	cbz	r0, 801c700 <mbedtls_ssl_derive_keys+0x368>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801c6f2:	4b78      	ldr	r3, [pc, #480]	; (801c8d4 <mbedtls_ssl_derive_keys+0x53c>)
 801c6f4:	9300      	str	r3, [sp, #0]
 801c6f6:	f8cd b004 	str.w	fp, [sp, #4]
 801c6fa:	f240 23bb 	movw	r3, #699	; 0x2bb
 801c6fe:	e6e7      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
        transform->maclen = mbedtls_md_get_size( md_info );
 801c700:	4648      	mov	r0, r9
 801c702:	f7f8 f8ff 	bl	8014904 <mbedtls_md_get_size>
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c706:	9b07      	ldr	r3, [sp, #28]
        transform->ivlen = cipher_info->iv_size;
 801c708:	f8d8 200c 	ldr.w	r2, [r8, #12]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
        transform->maclen = mbedtls_md_get_size( md_info );
 801c70e:	6168      	str	r0, [r5, #20]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c710:	2b01      	cmp	r3, #1
            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
 801c712:	bf04      	itt	eq
 801c714:	230a      	moveq	r3, #10
 801c716:	616b      	streq	r3, [r5, #20]
        transform->ivlen = cipher_info->iv_size;
 801c718:	60ea      	str	r2, [r5, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 801c71a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c71e:	6969      	ldr	r1, [r5, #20]
 801c720:	2b07      	cmp	r3, #7
 801c722:	d139      	bne.n	801c798 <mbedtls_ssl_derive_keys+0x400>
            transform->minlen = transform->maclen;
 801c724:	60a9      	str	r1, [r5, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 801c726:	696b      	ldr	r3, [r5, #20]
 801c728:	9304      	str	r3, [sp, #16]
 801c72a:	68eb      	ldr	r3, [r5, #12]
 801c72c:	9303      	str	r3, [sp, #12]
 801c72e:	68ab      	ldr	r3, [r5, #8]
 801c730:	9302      	str	r3, [sp, #8]
 801c732:	686b      	ldr	r3, [r5, #4]
 801c734:	9301      	str	r3, [sp, #4]
 801c736:	4b68      	ldr	r3, [pc, #416]	; (801c8d8 <mbedtls_ssl_derive_keys+0x540>)
 801c738:	9300      	str	r3, [sp, #0]
 801c73a:	4a62      	ldr	r2, [pc, #392]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c73c:	f240 23fd 	movw	r3, #765	; 0x2fd
 801c740:	2103      	movs	r1, #3
 801c742:	4620      	mov	r0, r4
 801c744:	f7f4 f8a2 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801c748:	6823      	ldr	r3, [r4, #0]
 801c74a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801c74e:	07db      	lsls	r3, r3, #31
 801c750:	d434      	bmi.n	801c7bc <mbedtls_ssl_derive_keys+0x424>
        key1 = keyblk + transform->maclen * 2;
 801c752:	f8d5 b014 	ldr.w	fp, [r5, #20]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c756:	686f      	ldr	r7, [r5, #4]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 801c758:	692a      	ldr	r2, [r5, #16]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c75a:	ab18      	add	r3, sp, #96	; 0x60
 801c75c:	eb07 064b 	add.w	r6, r7, fp, lsl #1
        key1 = keyblk + transform->maclen * 2;
 801c760:	ea4f 094b 	mov.w	r9, fp, lsl #1
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c764:	441e      	add	r6, r3
        mac_dec = keyblk + transform->maclen;
 801c766:	eb03 0a0b 	add.w	sl, r3, fp
                            transform->fixed_ivlen : transform->ivlen;
 801c76a:	b902      	cbnz	r2, 801c76e <mbedtls_ssl_derive_keys+0x3d6>
 801c76c:	68ea      	ldr	r2, [r5, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 801c76e:	9206      	str	r2, [sp, #24]
 801c770:	19f1      	adds	r1, r6, r7
 801c772:	f105 0018 	add.w	r0, r5, #24
 801c776:	f005 fd17 	bl	80221a8 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 801c77a:	9a06      	ldr	r2, [sp, #24]
 801c77c:	18b9      	adds	r1, r7, r2
 801c77e:	4431      	add	r1, r6
 801c780:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801c784:	f005 fd10 	bl	80221a8 <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801c788:	6963      	ldr	r3, [r4, #20]
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	dc1b      	bgt.n	801c7c6 <mbedtls_ssl_derive_keys+0x42e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c78e:	4b53      	ldr	r3, [pc, #332]	; (801c8dc <mbedtls_ssl_derive_keys+0x544>)
 801c790:	9300      	str	r3, [sp, #0]
 801c792:	f240 3349 	movw	r3, #841	; 0x349
 801c796:	e6ad      	b.n	801c4f4 <mbedtls_ssl_derive_keys+0x15c>
                                  + cipher_info->block_size
 801c798:	f8d8 3014 	ldr.w	r3, [r8, #20]
                                  - transform->maclen % cipher_info->block_size;
 801c79c:	fbb1 f1f3 	udiv	r1, r1, r3
 801c7a0:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801c7a4:	6961      	ldr	r1, [r4, #20]
                transform->minlen = transform->maclen
 801c7a6:	60ab      	str	r3, [r5, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801c7a8:	3902      	subs	r1, #2
 801c7aa:	2901      	cmp	r1, #1
 801c7ac:	d801      	bhi.n	801c7b2 <mbedtls_ssl_derive_keys+0x41a>
                transform->minlen += transform->ivlen;
 801c7ae:	4413      	add	r3, r2
 801c7b0:	e78d      	b.n	801c6ce <mbedtls_ssl_derive_keys+0x336>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c7b2:	4b4a      	ldr	r3, [pc, #296]	; (801c8dc <mbedtls_ssl_derive_keys+0x544>)
 801c7b4:	9300      	str	r3, [sp, #0]
 801c7b6:	f240 23f7 	movw	r3, #759	; 0x2f7
 801c7ba:	e69b      	b.n	801c4f4 <mbedtls_ssl_derive_keys+0x15c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c7bc:	4b47      	ldr	r3, [pc, #284]	; (801c8dc <mbedtls_ssl_derive_keys+0x544>)
 801c7be:	9300      	str	r3, [sp, #0]
 801c7c0:	f240 332d 	movw	r3, #813	; 0x32d
 801c7c4:	e696      	b.n	801c4f4 <mbedtls_ssl_derive_keys+0x15c>
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, transform->maclen );
 801c7c6:	465a      	mov	r2, fp
 801c7c8:	a918      	add	r1, sp, #96	; 0x60
 801c7ca:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801c7ce:	f7f7 ffd9 	bl	8014784 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801c7d2:	f105 0750 	add.w	r7, r5, #80	; 0x50
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, transform->maclen );
 801c7d6:	696a      	ldr	r2, [r5, #20]
 801c7d8:	4651      	mov	r1, sl
 801c7da:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801c7de:	f7f7 ffd1 	bl	8014784 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801c7e2:	4641      	mov	r1, r8
 801c7e4:	4638      	mov	r0, r7
 801c7e6:	f7f3 fd13 	bl	8010210 <mbedtls_cipher_setup>
 801c7ea:	4683      	mov	fp, r0
 801c7ec:	b128      	cbz	r0, 801c7fa <mbedtls_ssl_derive_keys+0x462>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801c7ee:	4b3c      	ldr	r3, [pc, #240]	; (801c8e0 <mbedtls_ssl_derive_keys+0x548>)
 801c7f0:	9300      	str	r3, [sp, #0]
 801c7f2:	9001      	str	r0, [sp, #4]
 801c7f4:	f240 336d 	movw	r3, #877	; 0x36d
 801c7f8:	e66a      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 801c7fa:	3590      	adds	r5, #144	; 0x90
 801c7fc:	4641      	mov	r1, r8
 801c7fe:	4628      	mov	r0, r5
 801c800:	f7f3 fd06 	bl	8010210 <mbedtls_cipher_setup>
 801c804:	4683      	mov	fp, r0
 801c806:	b128      	cbz	r0, 801c814 <mbedtls_ssl_derive_keys+0x47c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801c808:	4b35      	ldr	r3, [pc, #212]	; (801c8e0 <mbedtls_ssl_derive_keys+0x548>)
 801c80a:	9300      	str	r3, [sp, #0]
 801c80c:	9001      	str	r0, [sp, #4]
 801c80e:	f44f 735d 	mov.w	r3, #884	; 0x374
 801c812:	e65d      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 801c814:	a918      	add	r1, sp, #96	; 0x60
 801c816:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c81a:	2301      	movs	r3, #1
 801c81c:	4449      	add	r1, r9
 801c81e:	4638      	mov	r0, r7
 801c820:	f7f3 fb32 	bl	800fe88 <mbedtls_cipher_setkey>
 801c824:	4683      	mov	fp, r0
 801c826:	b128      	cbz	r0, 801c834 <mbedtls_ssl_derive_keys+0x49c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c828:	4b2e      	ldr	r3, [pc, #184]	; (801c8e4 <mbedtls_ssl_derive_keys+0x54c>)
 801c82a:	9300      	str	r3, [sp, #0]
 801c82c:	9001      	str	r0, [sp, #4]
 801c82e:	f44f 735f 	mov.w	r3, #892	; 0x37c
 801c832:	e64d      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 801c834:	4603      	mov	r3, r0
 801c836:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c83a:	4631      	mov	r1, r6
 801c83c:	4628      	mov	r0, r5
 801c83e:	f7f3 fb23 	bl	800fe88 <mbedtls_cipher_setkey>
 801c842:	4683      	mov	fp, r0
 801c844:	b128      	cbz	r0, 801c852 <mbedtls_ssl_derive_keys+0x4ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c846:	4b27      	ldr	r3, [pc, #156]	; (801c8e4 <mbedtls_ssl_derive_keys+0x54c>)
 801c848:	9300      	str	r3, [sp, #0]
 801c84a:	9001      	str	r0, [sp, #4]
 801c84c:	f44f 7361 	mov.w	r3, #900	; 0x384
 801c850:	e63e      	b.n	801c4d0 <mbedtls_ssl_derive_keys+0x138>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 801c852:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c856:	2b02      	cmp	r3, #2
 801c858:	d123      	bne.n	801c8a2 <mbedtls_ssl_derive_keys+0x50a>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 801c85a:	2104      	movs	r1, #4
 801c85c:	4638      	mov	r0, r7
 801c85e:	f7f3 fc99 	bl	8010194 <mbedtls_cipher_set_padding_mode>
 801c862:	4606      	mov	r6, r0
 801c864:	b158      	cbz	r0, 801c87e <mbedtls_ssl_derive_keys+0x4e6>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801c866:	4b20      	ldr	r3, [pc, #128]	; (801c8e8 <mbedtls_ssl_derive_keys+0x550>)
 801c868:	9001      	str	r0, [sp, #4]
 801c86a:	9300      	str	r3, [sp, #0]
 801c86c:	4a15      	ldr	r2, [pc, #84]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c86e:	f240 338e 	movw	r3, #910	; 0x38e
 801c872:	2101      	movs	r1, #1
 801c874:	4620      	mov	r0, r4
 801c876:	f7f4 f839 	bl	80108ec <mbedtls_debug_print_ret>
            return( ret );
 801c87a:	46b3      	mov	fp, r6
 801c87c:	e5b0      	b.n	801c3e0 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 801c87e:	4628      	mov	r0, r5
 801c880:	2104      	movs	r1, #4
 801c882:	f7f3 fc87 	bl	8010194 <mbedtls_cipher_set_padding_mode>
 801c886:	4605      	mov	r5, r0
 801c888:	b158      	cbz	r0, 801c8a2 <mbedtls_ssl_derive_keys+0x50a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801c88a:	4b17      	ldr	r3, [pc, #92]	; (801c8e8 <mbedtls_ssl_derive_keys+0x550>)
 801c88c:	9001      	str	r0, [sp, #4]
 801c88e:	9300      	str	r3, [sp, #0]
 801c890:	4a0c      	ldr	r2, [pc, #48]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c892:	f240 3395 	movw	r3, #917	; 0x395
 801c896:	2101      	movs	r1, #1
 801c898:	4620      	mov	r0, r4
 801c89a:	f7f4 f827 	bl	80108ec <mbedtls_debug_print_ret>
            return( ret );
 801c89e:	46ab      	mov	fp, r5
 801c8a0:	e59e      	b.n	801c3e0 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 801c8a2:	a818      	add	r0, sp, #96	; 0x60
 801c8a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c8a8:	f7ff fb0e 	bl	801bec8 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 801c8ac:	4b0f      	ldr	r3, [pc, #60]	; (801c8ec <mbedtls_ssl_derive_keys+0x554>)
 801c8ae:	9300      	str	r3, [sp, #0]
 801c8b0:	4a04      	ldr	r2, [pc, #16]	; (801c8c4 <mbedtls_ssl_derive_keys+0x52c>)
 801c8b2:	f240 33bd 	movw	r3, #957	; 0x3bd
 801c8b6:	2102      	movs	r1, #2
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	f7f3 ffe7 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801c8be:	e58f      	b.n	801c3e0 <mbedtls_ssl_derive_keys+0x48>
 801c8c0:	08031e1c 	.word	0x08031e1c
 801c8c4:	08031c15 	.word	0x08031c15
 801c8c8:	08031dd0 	.word	0x08031dd0
 801c8cc:	0803121e 	.word	0x0803121e
 801c8d0:	08031e2d 	.word	0x08031e2d
 801c8d4:	08031871 	.word	0x08031871
 801c8d8:	08031e37 	.word	0x08031e37
 801c8dc:	08031745 	.word	0x08031745
 801c8e0:	08031e65 	.word	0x08031e65
 801c8e4:	08031e7a 	.word	0x08031e7a
 801c8e8:	08031e90 	.word	0x08031e90
 801c8ec:	08031eb0 	.word	0x08031eb0

0801c8f0 <mbedtls_ssl_fetch_input>:
{
 801c8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8f4:	b086      	sub	sp, #24
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801c8f6:	4b43      	ldr	r3, [pc, #268]	; (801ca04 <mbedtls_ssl_fetch_input+0x114>)
 801c8f8:	9300      	str	r3, [sp, #0]
{
 801c8fa:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801c8fc:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 801c900:	4a41      	ldr	r2, [pc, #260]	; (801ca08 <mbedtls_ssl_fetch_input+0x118>)
{
 801c902:	460e      	mov	r6, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801c904:	2102      	movs	r1, #2
 801c906:	f7f3 ffc1 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 801c90a:	69e3      	ldr	r3, [r4, #28]
 801c90c:	b97b      	cbnz	r3, 801c92e <mbedtls_ssl_fetch_input+0x3e>
 801c90e:	6a23      	ldr	r3, [r4, #32]
 801c910:	b96b      	cbnz	r3, 801c92e <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801c912:	4b3e      	ldr	r3, [pc, #248]	; (801ca0c <mbedtls_ssl_fetch_input+0x11c>)
 801c914:	9300      	str	r3, [sp, #0]
 801c916:	f640 03a4 	movw	r3, #2212	; 0x8a4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801c91a:	4a3b      	ldr	r2, [pc, #236]	; (801ca08 <mbedtls_ssl_fetch_input+0x118>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c91c:	4d3c      	ldr	r5, [pc, #240]	; (801ca10 <mbedtls_ssl_fetch_input+0x120>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801c91e:	2101      	movs	r1, #1
 801c920:	4620      	mov	r0, r4
 801c922:	f7f3 ffb3 	bl	801088c <mbedtls_debug_print_msg>
}
 801c926:	4628      	mov	r0, r5
 801c928:	b006      	add	sp, #24
 801c92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 801c92e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801c930:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801c932:	1a9b      	subs	r3, r3, r2
 801c934:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801c938:	3315      	adds	r3, #21
 801c93a:	42b3      	cmp	r3, r6
 801c93c:	d204      	bcs.n	801c948 <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801c93e:	4b35      	ldr	r3, [pc, #212]	; (801ca14 <mbedtls_ssl_fetch_input+0x124>)
 801c940:	9300      	str	r3, [sp, #0]
 801c942:	f640 03ab 	movw	r3, #2219	; 0x8ab
 801c946:	e7e8      	b.n	801c91a <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801c948:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801c94a:	4f33      	ldr	r7, [pc, #204]	; (801ca18 <mbedtls_ssl_fetch_input+0x128>)
 801c94c:	9301      	str	r3, [sp, #4]
 801c94e:	4a2e      	ldr	r2, [pc, #184]	; (801ca08 <mbedtls_ssl_fetch_input+0x118>)
 801c950:	9602      	str	r6, [sp, #8]
 801c952:	9700      	str	r7, [sp, #0]
 801c954:	f640 133d 	movw	r3, #2365	; 0x93d
 801c958:	2102      	movs	r1, #2
 801c95a:	4620      	mov	r0, r4
 801c95c:	f7f3 ff96 	bl	801088c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801c960:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801ca28 <mbedtls_ssl_fetch_input+0x138>
 801c964:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801ca08 <mbedtls_ssl_fetch_input+0x118>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801c968:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801ca2c <mbedtls_ssl_fetch_input+0x13c>
        while( ssl->in_left < nb_want )
 801c96c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801c96e:	42b2      	cmp	r2, r6
 801c970:	d30a      	bcc.n	801c988 <mbedtls_ssl_fetch_input+0x98>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 801c972:	4b2a      	ldr	r3, [pc, #168]	; (801ca1c <mbedtls_ssl_fetch_input+0x12c>)
 801c974:	9300      	str	r3, [sp, #0]
 801c976:	4a24      	ldr	r2, [pc, #144]	; (801ca08 <mbedtls_ssl_fetch_input+0x118>)
 801c978:	f640 1363 	movw	r3, #2403	; 0x963
 801c97c:	2102      	movs	r1, #2
 801c97e:	4620      	mov	r0, r4
 801c980:	f7f3 ff84 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801c984:	2500      	movs	r5, #0
 801c986:	e7ce      	b.n	801c926 <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 801c988:	6d63      	ldr	r3, [r4, #84]	; 0x54
            len = nb_want - ssl->in_left;
 801c98a:	1ab2      	subs	r2, r6, r2
    if( ssl->f_get_timer == NULL )
 801c98c:	b353      	cbz	r3, 801c9e4 <mbedtls_ssl_fetch_input+0xf4>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 801c98e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801c990:	9205      	str	r2, [sp, #20]
 801c992:	4798      	blx	r3
 801c994:	2802      	cmp	r0, #2
 801c996:	9a05      	ldr	r2, [sp, #20]
 801c998:	d124      	bne.n	801c9e4 <mbedtls_ssl_fetch_input+0xf4>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801c99a:	f8cd 9000 	str.w	r9, [sp]
 801c99e:	2360      	movs	r3, #96	; 0x60
 801c9a0:	4642      	mov	r2, r8
 801c9a2:	2103      	movs	r1, #3
 801c9a4:	4620      	mov	r0, r4
 801c9a6:	f7f3 ff71 	bl	801088c <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801c9aa:	4655      	mov	r5, sl
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801c9ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801c9ae:	9602      	str	r6, [sp, #8]
 801c9b0:	e9cd 7300 	strd	r7, r3, [sp]
 801c9b4:	4642      	mov	r2, r8
 801c9b6:	f640 1355 	movw	r3, #2389	; 0x955
 801c9ba:	2102      	movs	r1, #2
 801c9bc:	4620      	mov	r0, r4
 801c9be:	f7f3 ff65 	bl	801088c <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 801c9c2:	4b17      	ldr	r3, [pc, #92]	; (801ca20 <mbedtls_ssl_fetch_input+0x130>)
 801c9c4:	9300      	str	r3, [sp, #0]
 801c9c6:	9501      	str	r5, [sp, #4]
 801c9c8:	f640 1357 	movw	r3, #2391	; 0x957
 801c9cc:	4642      	mov	r2, r8
 801c9ce:	2102      	movs	r1, #2
 801c9d0:	4620      	mov	r0, r4
 801c9d2:	f7f3 ff8b 	bl	80108ec <mbedtls_debug_print_ret>
            if( ret == 0 )
 801c9d6:	2d00      	cmp	r5, #0
 801c9d8:	d012      	beq.n	801ca00 <mbedtls_ssl_fetch_input+0x110>
            if( ret < 0 )
 801c9da:	dba4      	blt.n	801c926 <mbedtls_ssl_fetch_input+0x36>
            ssl->in_left += ret;
 801c9dc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801c9de:	4428      	add	r0, r5
 801c9e0:	67e0      	str	r0, [r4, #124]	; 0x7c
 801c9e2:	e7c3      	b.n	801c96c <mbedtls_ssl_fetch_input+0x7c>
                if( ssl->f_recv_timeout != NULL )
 801c9e4:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 801c9e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801c9ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801c9ec:	4419      	add	r1, r3
 801c9ee:	b125      	cbz	r5, 801c9fa <mbedtls_ssl_fetch_input+0x10a>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 801c9f0:	6823      	ldr	r3, [r4, #0]
 801c9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9f4:	47a8      	blx	r5
                    ret = ssl->f_recv( ssl->p_bio,
 801c9f6:	4605      	mov	r5, r0
 801c9f8:	e7d8      	b.n	801c9ac <mbedtls_ssl_fetch_input+0xbc>
 801c9fa:	69e3      	ldr	r3, [r4, #28]
 801c9fc:	4798      	blx	r3
 801c9fe:	e7fa      	b.n	801c9f6 <mbedtls_ssl_fetch_input+0x106>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 801ca00:	4d08      	ldr	r5, [pc, #32]	; (801ca24 <mbedtls_ssl_fetch_input+0x134>)
 801ca02:	e790      	b.n	801c926 <mbedtls_ssl_fetch_input+0x36>
 801ca04:	08031ebf 	.word	0x08031ebf
 801ca08:	08031c15 	.word	0x08031c15
 801ca0c:	08031ece 	.word	0x08031ece
 801ca10:	ffff8f00 	.word	0xffff8f00
 801ca14:	08031f0a 	.word	0x08031f0a
 801ca18:	08031f29 	.word	0x08031f29
 801ca1c:	08031f66 	.word	0x08031f66
 801ca20:	08031f50 	.word	0x08031f50
 801ca24:	ffff8d80 	.word	0xffff8d80
 801ca28:	08031f42 	.word	0x08031f42
 801ca2c:	ffff9800 	.word	0xffff9800

0801ca30 <mbedtls_ssl_flush_output>:
{
 801ca30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801ca34:	4b3b      	ldr	r3, [pc, #236]	; (801cb24 <mbedtls_ssl_flush_output+0xf4>)
 801ca36:	9300      	str	r3, [sp, #0]
{
 801ca38:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801ca3a:	f44f 6317 	mov.w	r3, #2416	; 0x970
 801ca3e:	4a3a      	ldr	r2, [pc, #232]	; (801cb28 <mbedtls_ssl_flush_output+0xf8>)
 801ca40:	2102      	movs	r1, #2
 801ca42:	f7f3 ff23 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 801ca46:	69a3      	ldr	r3, [r4, #24]
 801ca48:	b96b      	cbnz	r3, 801ca66 <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801ca4a:	4b38      	ldr	r3, [pc, #224]	; (801cb2c <mbedtls_ssl_flush_output+0xfc>)
 801ca4c:	9300      	str	r3, [sp, #0]
 801ca4e:	4a36      	ldr	r2, [pc, #216]	; (801cb28 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ca50:	4d37      	ldr	r5, [pc, #220]	; (801cb30 <mbedtls_ssl_flush_output+0x100>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801ca52:	f640 1374 	movw	r3, #2420	; 0x974
 801ca56:	2101      	movs	r1, #1
 801ca58:	4620      	mov	r0, r4
 801ca5a:	f7f3 ff17 	bl	801088c <mbedtls_debug_print_msg>
}
 801ca5e:	4628      	mov	r0, r5
 801ca60:	b004      	add	sp, #16
 801ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 801ca66:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 801ca6a:	b1ed      	cbz	r5, 801caa8 <mbedtls_ssl_flush_output+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801ca6c:	4f31      	ldr	r7, [pc, #196]	; (801cb34 <mbedtls_ssl_flush_output+0x104>)
 801ca6e:	4e2e      	ldr	r6, [pc, #184]	; (801cb28 <mbedtls_ssl_flush_output+0xf8>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801ca70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cb44 <mbedtls_ssl_flush_output+0x114>
    while( ssl->out_left > 0 )
 801ca74:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801ca78:	bb03      	cbnz	r3, 801cabc <mbedtls_ssl_flush_output+0x8c>
 801ca7a:	2207      	movs	r2, #7
        if( ++ssl->out_ctr[i - 1] != 0 )
 801ca7c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801ca80:	5c8b      	ldrb	r3, [r1, r2]
 801ca82:	3301      	adds	r3, #1
 801ca84:	b2db      	uxtb	r3, r3
 801ca86:	548b      	strb	r3, [r1, r2]
 801ca88:	3a01      	subs	r2, #1
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d13f      	bne.n	801cb0e <mbedtls_ssl_flush_output+0xde>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801ca8e:	1c53      	adds	r3, r2, #1
 801ca90:	d1f4      	bne.n	801ca7c <mbedtls_ssl_flush_output+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801ca92:	4b29      	ldr	r3, [pc, #164]	; (801cb38 <mbedtls_ssl_flush_output+0x108>)
 801ca94:	9300      	str	r3, [sp, #0]
 801ca96:	4a24      	ldr	r2, [pc, #144]	; (801cb28 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801ca98:	4d28      	ldr	r5, [pc, #160]	; (801cb3c <mbedtls_ssl_flush_output+0x10c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801ca9a:	f640 1398 	movw	r3, #2456	; 0x998
 801ca9e:	2101      	movs	r1, #1
 801caa0:	4620      	mov	r0, r4
 801caa2:	f7f3 fef3 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801caa6:	e7da      	b.n	801ca5e <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801caa8:	4b25      	ldr	r3, [pc, #148]	; (801cb40 <mbedtls_ssl_flush_output+0x110>)
 801caaa:	9300      	str	r3, [sp, #0]
 801caac:	4a1e      	ldr	r2, [pc, #120]	; (801cb28 <mbedtls_ssl_flush_output+0xf8>)
 801caae:	f640 137c 	movw	r3, #2428	; 0x97c
 801cab2:	2102      	movs	r1, #2
 801cab4:	4620      	mov	r0, r4
 801cab6:	f7f3 fee9 	bl	801088c <mbedtls_debug_print_msg>
        return( 0 );
 801caba:	e7d0      	b.n	801ca5e <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801cabc:	9302      	str	r3, [sp, #8]
 801cabe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cac2:	3305      	adds	r3, #5
 801cac4:	e9cd 7300 	strd	r7, r3, [sp]
 801cac8:	4632      	mov	r2, r6
 801caca:	f640 1382 	movw	r3, #2434	; 0x982
 801cace:	2102      	movs	r1, #2
 801cad0:	4620      	mov	r0, r4
 801cad2:	f7f3 fedb 	bl	801088c <mbedtls_debug_print_msg>
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cad6:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801cada:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cade:	69a3      	ldr	r3, [r4, #24]
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cae0:	3105      	adds	r1, #5
              ssl->out_msglen - ssl->out_left;
 801cae2:	1a89      	subs	r1, r1, r2
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cae4:	4401      	add	r1, r0
 801cae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cae8:	4798      	blx	r3
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801caea:	f640 1389 	movw	r3, #2441	; 0x989
 801caee:	e9cd 8000 	strd	r8, r0, [sp]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801caf2:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801caf4:	4632      	mov	r2, r6
 801caf6:	2102      	movs	r1, #2
 801caf8:	4620      	mov	r0, r4
 801cafa:	f7f3 fef7 	bl	80108ec <mbedtls_debug_print_ret>
        if( ret <= 0 )
 801cafe:	2d00      	cmp	r5, #0
 801cb00:	ddad      	ble.n	801ca5e <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 801cb02:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801cb06:	1b40      	subs	r0, r0, r5
 801cb08:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 801cb0c:	e7b2      	b.n	801ca74 <mbedtls_ssl_flush_output+0x44>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cb0e:	4b0c      	ldr	r3, [pc, #48]	; (801cb40 <mbedtls_ssl_flush_output+0x110>)
 801cb10:	9300      	str	r3, [sp, #0]
 801cb12:	4a05      	ldr	r2, [pc, #20]	; (801cb28 <mbedtls_ssl_flush_output+0xf8>)
 801cb14:	f640 139c 	movw	r3, #2460	; 0x99c
 801cb18:	2102      	movs	r1, #2
 801cb1a:	4620      	mov	r0, r4
 801cb1c:	f7f3 feb6 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801cb20:	2500      	movs	r5, #0
 801cb22:	e79c      	b.n	801ca5e <mbedtls_ssl_flush_output+0x2e>
 801cb24:	08031f75 	.word	0x08031f75
 801cb28:	08031c15 	.word	0x08031c15
 801cb2c:	08031ece 	.word	0x08031ece
 801cb30:	ffff8f00 	.word	0xffff8f00
 801cb34:	08031f95 	.word	0x08031f95
 801cb38:	08031fc2 	.word	0x08031fc2
 801cb3c:	ffff9480 	.word	0xffff9480
 801cb40:	08031f85 	.word	0x08031f85
 801cb44:	08031fb6 	.word	0x08031fb6

0801cb48 <mbedtls_ssl_write_record>:
{
 801cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb4c:	b08f      	sub	sp, #60	; 0x3c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cb4e:	4bba      	ldr	r3, [pc, #744]	; (801ce38 <mbedtls_ssl_write_record+0x2f0>)
    size_t len = ssl->out_msglen;
 801cb50:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cb54:	4ab9      	ldr	r2, [pc, #740]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801cb56:	9300      	str	r3, [sp, #0]
{
 801cb58:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cb5a:	f640 238d 	movw	r3, #2701	; 0xa8d
 801cb5e:	2102      	movs	r1, #2
 801cb60:	f7f3 fe94 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801cb64:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801cb68:	2b16      	cmp	r3, #22
 801cb6a:	d126      	bne.n	801cbba <mbedtls_ssl_write_record+0x72>
        out_msg_type = ssl->out_msg[0];
 801cb6c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cb70:	780a      	ldrb	r2, [r1, #0]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 801cb72:	b17a      	cbz	r2, 801cb94 <mbedtls_ssl_write_record+0x4c>
 801cb74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cb76:	b96b      	cbnz	r3, 801cb94 <mbedtls_ssl_write_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cb78:	4bb1      	ldr	r3, [pc, #708]	; (801ce40 <mbedtls_ssl_write_record+0x2f8>)
 801cb7a:	9300      	str	r3, [sp, #0]
 801cb7c:	4aaf      	ldr	r2, [pc, #700]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cb7e:	4db1      	ldr	r5, [pc, #708]	; (801ce44 <mbedtls_ssl_write_record+0x2fc>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cb80:	f640 239f 	movw	r3, #2719	; 0xa9f
 801cb84:	2101      	movs	r1, #1
 801cb86:	4620      	mov	r0, r4
 801cb88:	f7f3 fe80 	bl	801088c <mbedtls_debug_print_msg>
}
 801cb8c:	4628      	mov	r0, r5
 801cb8e:	b00f      	add	sp, #60	; 0x3c
 801cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 801cb94:	1f2b      	subs	r3, r5, #4
 801cb96:	0c18      	lsrs	r0, r3, #16
 801cb98:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 801cb9a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cb9e:	0a18      	lsrs	r0, r3, #8
 801cba0:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 801cba2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cba6:	70cb      	strb	r3, [r1, #3]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 801cba8:	b13a      	cbz	r2, 801cbba <mbedtls_ssl_write_record+0x72>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801cbaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cbac:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cbb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801cbb4:	462a      	mov	r2, r5
 801cbb6:	4620      	mov	r0, r4
 801cbb8:	4798      	blx	r3
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 801cbba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801cbbe:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 801cbc2:	701a      	strb	r2, [r3, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 801cbc4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801cbc8:	6962      	ldr	r2, [r4, #20]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 801cbca:	6921      	ldr	r1, [r4, #16]
 801cbcc:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 801cbce:	709a      	strb	r2, [r3, #2]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 801cbd0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801cbd4:	0a2a      	lsrs	r2, r5, #8
 801cbd6:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 801cbd8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801cbdc:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 801cbde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cbe0:	2b00      	cmp	r3, #0
 801cbe2:	f000 81e0 	beq.w	801cfa6 <mbedtls_ssl_write_record+0x45e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 801cbe6:	4b98      	ldr	r3, [pc, #608]	; (801ce48 <mbedtls_ssl_write_record+0x300>)
 801cbe8:	9300      	str	r3, [sp, #0]
 801cbea:	4a94      	ldr	r2, [pc, #592]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801cbec:	f240 43ea 	movw	r3, #1258	; 0x4ea
 801cbf0:	2102      	movs	r1, #2
 801cbf2:	4620      	mov	r0, r4
 801cbf4:	f7f3 fe4a 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 801cbf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cbfa:	b10b      	cbz	r3, 801cc00 <mbedtls_ssl_write_record+0xb8>
 801cbfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cbfe:	b953      	cbnz	r3, 801cc16 <mbedtls_ssl_write_record+0xce>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cc00:	4b8f      	ldr	r3, [pc, #572]	; (801ce40 <mbedtls_ssl_write_record+0x2f8>)
 801cc02:	9300      	str	r3, [sp, #0]
 801cc04:	f240 43ee 	movw	r3, #1262	; 0x4ee
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cc08:	4a8c      	ldr	r2, [pc, #560]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cc0a:	4d8e      	ldr	r5, [pc, #568]	; (801ce44 <mbedtls_ssl_write_record+0x2fc>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cc0c:	2101      	movs	r1, #1
 801cc0e:	4620      	mov	r0, r4
 801cc10:	f7f3 fe3c 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cc14:	e0fd      	b.n	801ce12 <mbedtls_ssl_write_record+0x2ca>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801cc16:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cc18:	b105      	cbz	r5, 801cc1c <mbedtls_ssl_write_record+0xd4>
    return ctx->cipher_info->mode;
 801cc1a:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 801cc1c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cc20:	9302      	str	r3, [sp, #8]
 801cc22:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801cc26:	9301      	str	r3, [sp, #4]
 801cc28:	4b88      	ldr	r3, [pc, #544]	; (801ce4c <mbedtls_ssl_write_record+0x304>)
 801cc2a:	9300      	str	r3, [sp, #0]
 801cc2c:	4a83      	ldr	r2, [pc, #524]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801cc2e:	f240 43f4 	movw	r3, #1268	; 0x4f4
 801cc32:	2104      	movs	r1, #4
 801cc34:	4620      	mov	r0, r4
 801cc36:	f7f3 fe89 	bl	801094c <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_STREAM ||
 801cc3a:	2d07      	cmp	r5, #7
 801cc3c:	d002      	beq.n	801cc44 <mbedtls_ssl_write_record+0xfc>
 801cc3e:	2d02      	cmp	r5, #2
 801cc40:	f040 808d 	bne.w	801cd5e <mbedtls_ssl_write_record+0x216>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801cc44:	6963      	ldr	r3, [r4, #20]
 801cc46:	2b00      	cmp	r3, #0
 801cc48:	f340 8084 	ble.w	801cd54 <mbedtls_ssl_write_record+0x20c>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 801cc4c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cc4e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cc52:	2208      	movs	r2, #8
 801cc54:	3038      	adds	r0, #56	; 0x38
 801cc56:	f7f7 fdf5 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 801cc5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cc5c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801cc60:	2203      	movs	r2, #3
 801cc62:	3038      	adds	r0, #56	; 0x38
 801cc64:	f7f7 fdee 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 801cc68:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cc6a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801cc6e:	2202      	movs	r2, #2
 801cc70:	3038      	adds	r0, #56	; 0x38
 801cc72:	f7f7 fde7 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 801cc76:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cc78:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cc7c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cc80:	3038      	adds	r0, #56	; 0x38
 801cc82:	f7f7 fddf 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
 801cc86:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cc8a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cc8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cc90:	4419      	add	r1, r3
 801cc92:	3038      	adds	r0, #56	; 0x38
 801cc94:	f7f7 fde6 	bl	8014864 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 801cc98:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cc9a:	3038      	adds	r0, #56	; 0x38
 801cc9c:	f7f7 fe0e 	bl	80148bc <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 801cca0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cca2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cca6:	695b      	ldr	r3, [r3, #20]
 801cca8:	9302      	str	r3, [sp, #8]
 801ccaa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801ccae:	4413      	add	r3, r2
 801ccb0:	9301      	str	r3, [sp, #4]
 801ccb2:	4b67      	ldr	r3, [pc, #412]	; (801ce50 <mbedtls_ssl_write_record+0x308>)
 801ccb4:	4a61      	ldr	r2, [pc, #388]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801ccb6:	9300      	str	r3, [sp, #0]
 801ccb8:	2104      	movs	r1, #4
 801ccba:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 801ccbe:	4620      	mov	r0, r4
 801ccc0:	f7f3 fe44 	bl	801094c <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 801ccc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801ccc6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801ccca:	6952      	ldr	r2, [r2, #20]
 801cccc:	4413      	add	r3, r2
 801ccce:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        auth_done++;
 801ccd2:	f04f 0801 	mov.w	r8, #1
    if( mode == MBEDTLS_MODE_GCM ||
 801ccd6:	2d06      	cmp	r5, #6
 801ccd8:	d002      	beq.n	801cce0 <mbedtls_ssl_write_record+0x198>
 801ccda:	2d08      	cmp	r5, #8
 801ccdc:	f040 80de 	bne.w	801ce9c <mbedtls_ssl_write_record+0x354>
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        memcpy( add_data, ssl->out_ctr, 8 );
 801cce2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cce6:	681b      	ldr	r3, [r3, #0]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cce8:	6810      	ldr	r0, [r2, #0]
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801ccea:	7f1b      	ldrb	r3, [r3, #28]
        memcpy( add_data, ssl->out_ctr, 8 );
 801ccec:	6851      	ldr	r1, [r2, #4]
 801ccee:	ad0a      	add	r5, sp, #40	; 0x28
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801ccf0:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
 801ccf4:	462b      	mov	r3, r5
 801ccf6:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 801ccf8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801ccfc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801cd00:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801cd04:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cd08:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        ver[0] = (unsigned char) major;
 801cd0c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        add_data[12] = ssl->out_msglen & 0xFF;
 801cd10:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cd14:	ea4f 2213 	mov.w	r2, r3, lsr #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cd18:	f04f 0b0d 	mov.w	fp, #13
 801cd1c:	4b4d      	ldr	r3, [pc, #308]	; (801ce54 <mbedtls_ssl_write_record+0x30c>)
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cd1e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cd22:	9300      	str	r3, [sp, #0]
 801cd24:	4a45      	ldr	r2, [pc, #276]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801cd26:	f240 535a 	movw	r3, #1370	; 0x55a
 801cd2a:	f04f 0104 	mov.w	r1, #4
 801cd2e:	e9cd 5b01 	strd	r5, fp, [sp, #4]
 801cd32:	4620      	mov	r0, r4
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cd34:	bf14      	ite	ne
 801cd36:	2708      	movne	r7, #8
 801cd38:	2710      	moveq	r7, #16
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cd3a:	f7f3 fe07 	bl	801094c <mbedtls_debug_print_buf>
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 801cd3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cd40:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 801cd44:	1a52      	subs	r2, r2, r1
 801cd46:	2a08      	cmp	r2, #8
 801cd48:	d00c      	beq.n	801cd64 <mbedtls_ssl_write_record+0x21c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cd4a:	4b3d      	ldr	r3, [pc, #244]	; (801ce40 <mbedtls_ssl_write_record+0x2f8>)
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	f240 5363 	movw	r3, #1379	; 0x563
 801cd52:	e759      	b.n	801cc08 <mbedtls_ssl_write_record+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cd54:	4b3a      	ldr	r3, [pc, #232]	; (801ce40 <mbedtls_ssl_write_record+0x2f8>)
 801cd56:	9300      	str	r3, [sp, #0]
 801cd58:	f240 531c 	movw	r3, #1308	; 0x51c
 801cd5c:	e754      	b.n	801cc08 <mbedtls_ssl_write_record+0xc0>
    int auth_done = 0;
 801cd5e:	f04f 0800 	mov.w	r8, #0
 801cd62:	e7b8      	b.n	801ccd6 <mbedtls_ssl_write_record+0x18e>
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801cd64:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801cd68:	3318      	adds	r3, #24
 801cd6a:	6802      	ldr	r2, [r0, #0]
 801cd6c:	505a      	str	r2, [r3, r1]
 801cd6e:	185e      	adds	r6, r3, r1
 801cd70:	6842      	ldr	r2, [r0, #4]
 801cd72:	6072      	str	r2, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 801cd74:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cd78:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 801cd7c:	680b      	ldr	r3, [r1, #0]
 801cd7e:	6013      	str	r3, [r2, #0]
 801cd80:	684b      	ldr	r3, [r1, #4]
 801cd82:	6053      	str	r3, [r2, #4]
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 801cd84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cd86:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801cd8a:	1a9b      	subs	r3, r3, r2
 801cd8c:	9302      	str	r3, [sp, #8]
 801cd8e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801cd92:	9301      	str	r3, [sp, #4]
 801cd94:	4b30      	ldr	r3, [pc, #192]	; (801ce58 <mbedtls_ssl_write_record+0x310>)
 801cd96:	4a29      	ldr	r2, [pc, #164]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801cd98:	9300      	str	r3, [sp, #0]
 801cd9a:	2104      	movs	r1, #4
 801cd9c:	f240 536b 	movw	r3, #1387	; 0x56b
 801cda0:	4620      	mov	r0, r4
 801cda2:	f7f3 fdd3 	bl	801094c <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cda6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        enc_msglen = ssl->out_msglen;
 801cda8:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cdac:	68d3      	ldr	r3, [r2, #12]
 801cdae:	6912      	ldr	r2, [r2, #16]
        enc_msg = ssl->out_msg;
 801cdb0:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cdb4:	4433      	add	r3, r6
 801cdb6:	1a9b      	subs	r3, r3, r2
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801cdb8:	2200      	movs	r2, #0
 801cdba:	e9cd 3201 	strd	r3, r2, [sp, #4]
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cdbe:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801cdc2:	4b26      	ldr	r3, [pc, #152]	; (801ce5c <mbedtls_ssl_write_record+0x314>)
 801cdc4:	4a1d      	ldr	r2, [pc, #116]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801cdc6:	9300      	str	r3, [sp, #0]
 801cdc8:	2103      	movs	r1, #3
 801cdca:	f240 5376 	movw	r3, #1398	; 0x576
 801cdce:	4620      	mov	r0, r4
 801cdd0:	f7f3 fd5c 	bl	801088c <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 801cdd4:	eb09 0a06 	add.w	sl, r9, r6
 801cdd8:	ab09      	add	r3, sp, #36	; 0x24
 801cdda:	e9cd 9303 	strd	r9, r3, [sp, #12]
 801cdde:	e9cd a705 	strd	sl, r7, [sp, #20]
 801cde2:	e9cd 9601 	strd	r9, r6, [sp, #4]
 801cde6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cde8:	f8cd b000 	str.w	fp, [sp]
 801cdec:	68c2      	ldr	r2, [r0, #12]
 801cdee:	462b      	mov	r3, r5
 801cdf0:	f100 0118 	add.w	r1, r0, #24
 801cdf4:	3050      	adds	r0, #80	; 0x50
 801cdf6:	f7f3 fa4b 	bl	8010290 <mbedtls_cipher_auth_encrypt>
 801cdfa:	4605      	mov	r5, r0
 801cdfc:	b1a0      	cbz	r0, 801ce28 <mbedtls_ssl_write_record+0x2e0>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 801cdfe:	4b18      	ldr	r3, [pc, #96]	; (801ce60 <mbedtls_ssl_write_record+0x318>)
 801ce00:	9300      	str	r3, [sp, #0]
 801ce02:	9001      	str	r0, [sp, #4]
 801ce04:	f240 5385 	movw	r3, #1413	; 0x585
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801ce08:	4a0c      	ldr	r2, [pc, #48]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801ce0a:	2101      	movs	r1, #1
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	f7f3 fd6d 	bl	80108ec <mbedtls_debug_print_ret>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 801ce12:	4b14      	ldr	r3, [pc, #80]	; (801ce64 <mbedtls_ssl_write_record+0x31c>)
 801ce14:	9300      	str	r3, [sp, #0]
 801ce16:	9501      	str	r5, [sp, #4]
 801ce18:	f640 3308 	movw	r3, #2824	; 0xb08
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801ce1c:	4a07      	ldr	r2, [pc, #28]	; (801ce3c <mbedtls_ssl_write_record+0x2f4>)
 801ce1e:	2101      	movs	r1, #1
 801ce20:	4620      	mov	r0, r4
 801ce22:	f7f3 fd63 	bl	80108ec <mbedtls_debug_print_ret>
        return( ret );
 801ce26:	e6b1      	b.n	801cb8c <mbedtls_ssl_write_record+0x44>
        if( olen != enc_msglen )
 801ce28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce2a:	429e      	cmp	r6, r3
 801ce2c:	d01c      	beq.n	801ce68 <mbedtls_ssl_write_record+0x320>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce2e:	4b04      	ldr	r3, [pc, #16]	; (801ce40 <mbedtls_ssl_write_record+0x2f8>)
 801ce30:	9300      	str	r3, [sp, #0]
 801ce32:	f240 538b 	movw	r3, #1419	; 0x58b
 801ce36:	e6e7      	b.n	801cc08 <mbedtls_ssl_write_record+0xc0>
 801ce38:	08031fe6 	.word	0x08031fe6
 801ce3c:	08031c15 	.word	0x08031c15
 801ce40:	08031745 	.word	0x08031745
 801ce44:	ffff9400 	.word	0xffff9400
 801ce48:	08031ff6 	.word	0x08031ff6
 801ce4c:	08032005 	.word	0x08032005
 801ce50:	08032024 	.word	0x08032024
 801ce54:	08032031 	.word	0x08032031
 801ce58:	0803204f 	.word	0x0803204f
 801ce5c:	08032057 	.word	0x08032057
 801ce60:	08032092 	.word	0x08032092
 801ce64:	08032133 	.word	0x08032133
        ssl->out_msglen += taglen;
 801ce68:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801ce6c:	4a6d      	ldr	r2, [pc, #436]	; (801d024 <mbedtls_ssl_write_record+0x4dc>)
        ssl->out_msglen += taglen;
 801ce6e:	443b      	add	r3, r7
 801ce70:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801ce74:	4b6c      	ldr	r3, [pc, #432]	; (801d028 <mbedtls_ssl_write_record+0x4e0>)
 801ce76:	9300      	str	r3, [sp, #0]
 801ce78:	e9cd a701 	strd	sl, r7, [sp, #4]
 801ce7c:	f240 5392 	movw	r3, #1426	; 0x592
 801ce80:	2104      	movs	r1, #4
 801ce82:	4620      	mov	r0, r4
        auth_done++;
 801ce84:	f108 0801 	add.w	r8, r8, #1
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801ce88:	f7f3 fd60 	bl	801094c <mbedtls_debug_print_buf>
    if( auth_done != 1 )
 801ce8c:	f1b8 0f01 	cmp.w	r8, #1
 801ce90:	d077      	beq.n	801cf82 <mbedtls_ssl_write_record+0x43a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce92:	4b66      	ldr	r3, [pc, #408]	; (801d02c <mbedtls_ssl_write_record+0x4e4>)
 801ce94:	9300      	str	r3, [sp, #0]
 801ce96:	f240 6314 	movw	r3, #1556	; 0x614
 801ce9a:	e6b5      	b.n	801cc08 <mbedtls_ssl_write_record+0xc0>
    if( mode == MBEDTLS_MODE_CBC )
 801ce9c:	2d02      	cmp	r5, #2
 801ce9e:	d16b      	bne.n	801cf78 <mbedtls_ssl_write_record+0x430>
        size_t enc_msglen, padlen, olen = 0, i;
 801cea0:	2300      	movs	r3, #0
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801cea2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cea4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
        size_t enc_msglen, padlen, olen = 0, i;
 801cea8:	930a      	str	r3, [sp, #40]	; 0x28
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801ceaa:	68d2      	ldr	r2, [r2, #12]
 801ceac:	3101      	adds	r1, #1
 801ceae:	fbb1 f6f2 	udiv	r6, r1, r2
 801ceb2:	fb02 1616 	mls	r6, r2, r6, r1
 801ceb6:	1b96      	subs	r6, r2, r6
            padlen = 0;
 801ceb8:	42b2      	cmp	r2, r6
 801ceba:	bf08      	it	eq
 801cebc:	461e      	moveq	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801cebe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801cec2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 801cec6:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 801cec8:	3301      	adds	r3, #1
 801ceca:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801cecc:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 801cece:	d2f6      	bcs.n	801cebe <mbedtls_ssl_write_record+0x376>
        ssl->out_msglen += padlen + 1;
 801ced0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801ced4:	6963      	ldr	r3, [r4, #20]
        ssl->out_msglen += padlen + 1;
 801ced6:	3701      	adds	r7, #1
 801ced8:	4437      	add	r7, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801ceda:	2b01      	cmp	r3, #1
        ssl->out_msglen += padlen + 1;
 801cedc:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801cee0:	dc26      	bgt.n	801cf30 <mbedtls_ssl_write_record+0x3e8>
        enc_msg = ssl->out_msg;
 801cee2:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801cee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cee8:	4a4e      	ldr	r2, [pc, #312]	; (801d024 <mbedtls_ssl_write_record+0x4dc>)
 801ceea:	3601      	adds	r6, #1
 801ceec:	9603      	str	r6, [sp, #12]
 801ceee:	68db      	ldr	r3, [r3, #12]
 801cef0:	9302      	str	r3, [sp, #8]
 801cef2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cef6:	9301      	str	r3, [sp, #4]
 801cef8:	4b4d      	ldr	r3, [pc, #308]	; (801d030 <mbedtls_ssl_write_record+0x4e8>)
 801cefa:	9300      	str	r3, [sp, #0]
 801cefc:	2103      	movs	r1, #3
 801cefe:	f240 53c6 	movw	r3, #1478	; 0x5c6
 801cf02:	4620      	mov	r0, r4
 801cf04:	f7f3 fcc2 	bl	801088c <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 801cf08:	ab0a      	add	r3, sp, #40	; 0x28
 801cf0a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801cf0e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801cf10:	9700      	str	r7, [sp, #0]
 801cf12:	68c2      	ldr	r2, [r0, #12]
 801cf14:	462b      	mov	r3, r5
 801cf16:	f100 0118 	add.w	r1, r0, #24
 801cf1a:	3050      	adds	r0, #80	; 0x50
 801cf1c:	f7f3 f996 	bl	801024c <mbedtls_cipher_crypt>
 801cf20:	4605      	mov	r5, r0
 801cf22:	b308      	cbz	r0, 801cf68 <mbedtls_ssl_write_record+0x420>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801cf24:	4b43      	ldr	r3, [pc, #268]	; (801d034 <mbedtls_ssl_write_record+0x4ec>)
 801cf26:	9300      	str	r3, [sp, #0]
 801cf28:	9001      	str	r0, [sp, #4]
 801cf2a:	f240 53d1 	movw	r3, #1489	; 0x5d1
 801cf2e:	e76b      	b.n	801ce08 <mbedtls_ssl_write_record+0x2c0>
 801cf30:	6c21      	ldr	r1, [r4, #64]	; 0x40
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 801cf32:	6823      	ldr	r3, [r4, #0]
 801cf34:	68ca      	ldr	r2, [r1, #12]
 801cf36:	699d      	ldr	r5, [r3, #24]
 801cf38:	69d8      	ldr	r0, [r3, #28]
 801cf3a:	3118      	adds	r1, #24
 801cf3c:	47a8      	blx	r5
            if( ret != 0 )
 801cf3e:	4605      	mov	r5, r0
 801cf40:	2800      	cmp	r0, #0
 801cf42:	f47f af66 	bne.w	801ce12 <mbedtls_ssl_write_record+0x2ca>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 801cf46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cf48:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 801cf4c:	68ca      	ldr	r2, [r1, #12]
 801cf4e:	3118      	adds	r1, #24
 801cf50:	f005 f92a 	bl	80221a8 <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 801cf54:	6c23      	ldr	r3, [r4, #64]	; 0x40
            enc_msglen = ssl->out_msglen;
 801cf56:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
            ssl->out_msglen += ssl->transform_out->ivlen;
 801cf5a:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 801cf5c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 801cf60:	443b      	add	r3, r7
 801cf62:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801cf66:	e7be      	b.n	801cee6 <mbedtls_ssl_write_record+0x39e>
        if( enc_msglen != olen )
 801cf68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf6a:	429f      	cmp	r7, r3
 801cf6c:	d08e      	beq.n	801ce8c <mbedtls_ssl_write_record+0x344>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cf6e:	4b2f      	ldr	r3, [pc, #188]	; (801d02c <mbedtls_ssl_write_record+0x4e4>)
 801cf70:	9300      	str	r3, [sp, #0]
 801cf72:	f240 53d7 	movw	r3, #1495	; 0x5d7
 801cf76:	e647      	b.n	801cc08 <mbedtls_ssl_write_record+0xc0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cf78:	4b2c      	ldr	r3, [pc, #176]	; (801d02c <mbedtls_ssl_write_record+0x4e4>)
 801cf7a:	9300      	str	r3, [sp, #0]
 801cf7c:	f240 630d 	movw	r3, #1549	; 0x60d
 801cf80:	e642      	b.n	801cc08 <mbedtls_ssl_write_record+0xc0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 801cf82:	4b2d      	ldr	r3, [pc, #180]	; (801d038 <mbedtls_ssl_write_record+0x4f0>)
 801cf84:	4a27      	ldr	r2, [pc, #156]	; (801d024 <mbedtls_ssl_write_record+0x4dc>)
 801cf86:	9300      	str	r3, [sp, #0]
 801cf88:	2102      	movs	r1, #2
 801cf8a:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801cf8e:	4620      	mov	r0, r4
 801cf90:	f7f3 fc7c 	bl	801088c <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 801cf94:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 801cf98:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801cf9c:	0a19      	lsrs	r1, r3, #8
 801cf9e:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 801cfa0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801cfa4:	7053      	strb	r3, [r2, #1]
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 801cfa6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cfaa:	3305      	adds	r3, #5
 801cfac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 801cfb0:	e9d4 2325 	ldrd	r2, r3, [r4, #148]	; 0x94
 801cfb4:	881b      	ldrh	r3, [r3, #0]
 801cfb6:	ba5b      	rev16	r3, r3
 801cfb8:	b29b      	uxth	r3, r3
 801cfba:	9304      	str	r3, [sp, #16]
 801cfbc:	7893      	ldrb	r3, [r2, #2]
 801cfbe:	9303      	str	r3, [sp, #12]
 801cfc0:	7853      	ldrb	r3, [r2, #1]
 801cfc2:	9302      	str	r3, [sp, #8]
 801cfc4:	7813      	ldrb	r3, [r2, #0]
 801cfc6:	9301      	str	r3, [sp, #4]
 801cfc8:	4b1c      	ldr	r3, [pc, #112]	; (801d03c <mbedtls_ssl_write_record+0x4f4>)
 801cfca:	4a16      	ldr	r2, [pc, #88]	; (801d024 <mbedtls_ssl_write_record+0x4dc>)
 801cfcc:	9300      	str	r3, [sp, #0]
 801cfce:	2103      	movs	r1, #3
 801cfd0:	f640 3313 	movw	r3, #2835	; 0xb13
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	f7f3 fc59 	bl	801088c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 801cfda:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cfde:	4a11      	ldr	r2, [pc, #68]	; (801d024 <mbedtls_ssl_write_record+0x4dc>)
 801cfe0:	3305      	adds	r3, #5
 801cfe2:	9302      	str	r3, [sp, #8]
 801cfe4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801cfe8:	9301      	str	r3, [sp, #4]
 801cfea:	4b15      	ldr	r3, [pc, #84]	; (801d040 <mbedtls_ssl_write_record+0x4f8>)
 801cfec:	9300      	str	r3, [sp, #0]
 801cfee:	2104      	movs	r1, #4
 801cff0:	f640 3318 	movw	r3, #2840	; 0xb18
 801cff4:	4620      	mov	r0, r4
 801cff6:	f7f3 fca9 	bl	801094c <mbedtls_debug_print_buf>
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801cffa:	4620      	mov	r0, r4
 801cffc:	f7ff fd18 	bl	801ca30 <mbedtls_ssl_flush_output>
 801d000:	4605      	mov	r5, r0
 801d002:	b128      	cbz	r0, 801d010 <mbedtls_ssl_write_record+0x4c8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801d004:	4b0f      	ldr	r3, [pc, #60]	; (801d044 <mbedtls_ssl_write_record+0x4fc>)
 801d006:	9300      	str	r3, [sp, #0]
 801d008:	9001      	str	r0, [sp, #4]
 801d00a:	f640 331e 	movw	r3, #2846	; 0xb1e
 801d00e:	e705      	b.n	801ce1c <mbedtls_ssl_write_record+0x2d4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 801d010:	4b0d      	ldr	r3, [pc, #52]	; (801d048 <mbedtls_ssl_write_record+0x500>)
 801d012:	9300      	str	r3, [sp, #0]
 801d014:	4a03      	ldr	r2, [pc, #12]	; (801d024 <mbedtls_ssl_write_record+0x4dc>)
 801d016:	f640 3322 	movw	r3, #2850	; 0xb22
 801d01a:	2102      	movs	r1, #2
 801d01c:	4620      	mov	r0, r4
 801d01e:	f7f3 fc35 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801d022:	e5b3      	b.n	801cb8c <mbedtls_ssl_write_record+0x44>
 801d024:	08031c15 	.word	0x08031c15
 801d028:	080320ae 	.word	0x080320ae
 801d02c:	08031745 	.word	0x08031745
 801d030:	080320c1 	.word	0x080320c1
 801d034:	0803210f 	.word	0x0803210f
 801d038:	08032124 	.word	0x08032124
 801d03c:	08032143 	.word	0x08032143
 801d040:	0803217f 	.word	0x0803217f
 801d044:	0803219d 	.word	0x0803219d
 801d048:	080321b6 	.word	0x080321b6

0801d04c <mbedtls_ssl_prepare_handshake_record>:
{
 801d04c:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d04e:	6f81      	ldr	r1, [r0, #120]	; 0x78
 801d050:	2903      	cmp	r1, #3
{
 801d052:	b085      	sub	sp, #20
 801d054:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d056:	d80b      	bhi.n	801d070 <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 801d058:	4b1a      	ldr	r3, [pc, #104]	; (801d0c4 <mbedtls_ssl_prepare_handshake_record+0x78>)
 801d05a:	9101      	str	r1, [sp, #4]
 801d05c:	9300      	str	r3, [sp, #0]
 801d05e:	4a1a      	ldr	r2, [pc, #104]	; (801d0c8 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d060:	f640 4305 	movw	r3, #3077	; 0xc05
 801d064:	2101      	movs	r1, #1
 801d066:	f7f3 fc11 	bl	801088c <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d06a:	4818      	ldr	r0, [pc, #96]	; (801d0cc <mbedtls_ssl_prepare_handshake_record+0x80>)
}
 801d06c:	b005      	add	sp, #20
 801d06e:	bd30      	pop	{r4, r5, pc}
                    ( ssl->in_msg[1] << 16 ) |
 801d070:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    ( ssl->in_msg[2] << 8  ) |
 801d072:	7893      	ldrb	r3, [r2, #2]
                    ( ssl->in_msg[1] << 16 ) |
 801d074:	7855      	ldrb	r5, [r2, #1]
                    ( ssl->in_msg[2] << 8  ) |
 801d076:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 801d078:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                      ssl->in_msg[3] );
 801d07c:	78d5      	ldrb	r5, [r2, #3]
                    ( ssl->in_msg[2] << 8  ) |
 801d07e:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 801d080:	3304      	adds	r3, #4
 801d082:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 801d086:	9303      	str	r3, [sp, #12]
 801d088:	7813      	ldrb	r3, [r2, #0]
 801d08a:	4a0f      	ldr	r2, [pc, #60]	; (801d0c8 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d08c:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d090:	4b0f      	ldr	r3, [pc, #60]	; (801d0d0 <mbedtls_ssl_prepare_handshake_record+0x84>)
 801d092:	9300      	str	r3, [sp, #0]
 801d094:	2103      	movs	r1, #3
 801d096:	f640 430f 	movw	r3, #3087	; 0xc0f
 801d09a:	f7f3 fbf7 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 801d09e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d0a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d20a      	bcs.n	801d0be <mbedtls_ssl_prepare_handshake_record+0x72>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 801d0a8:	4b0a      	ldr	r3, [pc, #40]	; (801d0d4 <mbedtls_ssl_prepare_handshake_record+0x88>)
 801d0aa:	9300      	str	r3, [sp, #0]
 801d0ac:	4620      	mov	r0, r4
 801d0ae:	4a06      	ldr	r2, [pc, #24]	; (801d0c8 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d0b0:	f640 434f 	movw	r3, #3151	; 0xc4f
 801d0b4:	2101      	movs	r1, #1
 801d0b6:	f7f3 fbe9 	bl	801088c <mbedtls_debug_print_msg>
 801d0ba:	4807      	ldr	r0, [pc, #28]	; (801d0d8 <mbedtls_ssl_prepare_handshake_record+0x8c>)
 801d0bc:	e7d6      	b.n	801d06c <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 801d0be:	2000      	movs	r0, #0
 801d0c0:	e7d4      	b.n	801d06c <mbedtls_ssl_prepare_handshake_record+0x20>
 801d0c2:	bf00      	nop
 801d0c4:	080321c6 	.word	0x080321c6
 801d0c8:	08031c15 	.word	0x08031c15
 801d0cc:	ffff8e00 	.word	0xffff8e00
 801d0d0:	080321e6 	.word	0x080321e6
 801d0d4:	0803221c 	.word	0x0803221c
 801d0d8:	ffff8f80 	.word	0xffff8f80

0801d0dc <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d0dc:	6842      	ldr	r2, [r0, #4]
 801d0de:	2a10      	cmp	r2, #16
{
 801d0e0:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d0e2:	d00a      	beq.n	801d0fa <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake != NULL )
 801d0e4:	6b82      	ldr	r2, [r0, #56]	; 0x38
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d0e6:	b142      	cbz	r2, 801d0fa <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d0e8:	f8d2 4298 	ldr.w	r4, [r2, #664]	; 0x298
 801d0ec:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801d0ee:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 801d0f2:	4623      	mov	r3, r4
}
 801d0f4:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d0f8:	4718      	bx	r3
}
 801d0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0fe:	4770      	bx	lr

0801d100 <mbedtls_ssl_handle_message_type>:
{
 801d100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d102:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801d104:	2b16      	cmp	r3, #22
{
 801d106:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d108:	d004      	beq.n	801d114 <mbedtls_ssl_handle_message_type+0x14>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801d10a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d10c:	2b15      	cmp	r3, #21
 801d10e:	d007      	beq.n	801d120 <mbedtls_ssl_handle_message_type+0x20>
            return( 0 );
 801d110:	2000      	movs	r0, #0
 801d112:	e003      	b.n	801d11c <mbedtls_ssl_handle_message_type+0x1c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 801d114:	f7ff ff9a 	bl	801d04c <mbedtls_ssl_prepare_handshake_record>
 801d118:	2800      	cmp	r0, #0
 801d11a:	d0f6      	beq.n	801d10a <mbedtls_ssl_handle_message_type+0xa>
}
 801d11c:	b004      	add	sp, #16
 801d11e:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 801d120:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d122:	785a      	ldrb	r2, [r3, #1]
 801d124:	9202      	str	r2, [sp, #8]
 801d126:	781b      	ldrb	r3, [r3, #0]
 801d128:	9301      	str	r3, [sp, #4]
 801d12a:	4b1b      	ldr	r3, [pc, #108]	; (801d198 <mbedtls_ssl_handle_message_type+0x98>)
 801d12c:	4a1b      	ldr	r2, [pc, #108]	; (801d19c <mbedtls_ssl_handle_message_type+0x9c>)
 801d12e:	9300      	str	r3, [sp, #0]
 801d130:	2102      	movs	r1, #2
 801d132:	f640 73d4 	movw	r3, #4052	; 0xfd4
 801d136:	4620      	mov	r0, r4
 801d138:	f7f3 fba8 	bl	801088c <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 801d13c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d13e:	781a      	ldrb	r2, [r3, #0]
 801d140:	2a02      	cmp	r2, #2
 801d142:	d10c      	bne.n	801d15e <mbedtls_ssl_handle_message_type+0x5e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 801d144:	785b      	ldrb	r3, [r3, #1]
 801d146:	9301      	str	r3, [sp, #4]
 801d148:	4b15      	ldr	r3, [pc, #84]	; (801d1a0 <mbedtls_ssl_handle_message_type+0xa0>)
 801d14a:	9300      	str	r3, [sp, #0]
 801d14c:	4620      	mov	r0, r4
 801d14e:	4a13      	ldr	r2, [pc, #76]	; (801d19c <mbedtls_ssl_handle_message_type+0x9c>)
 801d150:	f640 73dc 	movw	r3, #4060	; 0xfdc
 801d154:	2101      	movs	r1, #1
 801d156:	f7f3 fb99 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 801d15a:	4812      	ldr	r0, [pc, #72]	; (801d1a4 <mbedtls_ssl_handle_message_type+0xa4>)
 801d15c:	e7de      	b.n	801d11c <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d15e:	2a01      	cmp	r2, #1
 801d160:	d118      	bne.n	801d194 <mbedtls_ssl_handle_message_type+0x94>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 801d162:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d164:	b953      	cbnz	r3, 801d17c <mbedtls_ssl_handle_message_type+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 801d166:	4b10      	ldr	r3, [pc, #64]	; (801d1a8 <mbedtls_ssl_handle_message_type+0xa8>)
 801d168:	9300      	str	r3, [sp, #0]
 801d16a:	4620      	mov	r0, r4
 801d16c:	4a0b      	ldr	r2, [pc, #44]	; (801d19c <mbedtls_ssl_handle_message_type+0x9c>)
 801d16e:	f640 73e4 	movw	r3, #4068	; 0xfe4
 801d172:	2102      	movs	r1, #2
 801d174:	f7f3 fb8a 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 801d178:	480c      	ldr	r0, [pc, #48]	; (801d1ac <mbedtls_ssl_handle_message_type+0xac>)
 801d17a:	e7cf      	b.n	801d11c <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d17c:	2b64      	cmp	r3, #100	; 0x64
 801d17e:	d109      	bne.n	801d194 <mbedtls_ssl_handle_message_type+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 801d180:	4b0b      	ldr	r3, [pc, #44]	; (801d1b0 <mbedtls_ssl_handle_message_type+0xb0>)
 801d182:	9300      	str	r3, [sp, #0]
 801d184:	4a05      	ldr	r2, [pc, #20]	; (801d19c <mbedtls_ssl_handle_message_type+0x9c>)
 801d186:	f640 73ec 	movw	r3, #4076	; 0xfec
 801d18a:	2102      	movs	r1, #2
 801d18c:	4620      	mov	r0, r4
 801d18e:	f7f3 fb7d 	bl	801088c <mbedtls_debug_print_msg>
 801d192:	e7bd      	b.n	801d110 <mbedtls_ssl_handle_message_type+0x10>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 801d194:	4807      	ldr	r0, [pc, #28]	; (801d1b4 <mbedtls_ssl_handle_message_type+0xb4>)
 801d196:	e7c1      	b.n	801d11c <mbedtls_ssl_handle_message_type+0x1c>
 801d198:	08032246 	.word	0x08032246
 801d19c:	08031c15 	.word	0x08031c15
 801d1a0:	0803226a 	.word	0x0803226a
 801d1a4:	ffff8880 	.word	0xffff8880
 801d1a8:	0803228c 	.word	0x0803228c
 801d1ac:	ffff8780 	.word	0xffff8780
 801d1b0:	080322a6 	.word	0x080322a6
 801d1b4:	ffff9980 	.word	0xffff9980

0801d1b8 <mbedtls_ssl_send_alert_message>:
{
 801d1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ba:	460e      	mov	r6, r1
 801d1bc:	b085      	sub	sp, #20
 801d1be:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 801d1c0:	4604      	mov	r4, r0
 801d1c2:	2800      	cmp	r0, #0
 801d1c4:	d03b      	beq.n	801d23e <mbedtls_ssl_send_alert_message+0x86>
 801d1c6:	6803      	ldr	r3, [r0, #0]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d038      	beq.n	801d23e <mbedtls_ssl_send_alert_message+0x86>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 801d1cc:	4b1d      	ldr	r3, [pc, #116]	; (801d244 <mbedtls_ssl_send_alert_message+0x8c>)
 801d1ce:	4a1e      	ldr	r2, [pc, #120]	; (801d248 <mbedtls_ssl_send_alert_message+0x90>)
 801d1d0:	9300      	str	r3, [sp, #0]
 801d1d2:	2102      	movs	r1, #2
 801d1d4:	f241 031c 	movw	r3, #4124	; 0x101c
 801d1d8:	f7f3 fb58 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 801d1dc:	4b1b      	ldr	r3, [pc, #108]	; (801d24c <mbedtls_ssl_send_alert_message+0x94>)
 801d1de:	4a1a      	ldr	r2, [pc, #104]	; (801d248 <mbedtls_ssl_send_alert_message+0x90>)
 801d1e0:	9300      	str	r3, [sp, #0]
 801d1e2:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801d1e6:	f241 031d 	movw	r3, #4125	; 0x101d
 801d1ea:	2103      	movs	r1, #3
 801d1ec:	4620      	mov	r0, r4
 801d1ee:	f7f3 fb4d 	bl	801088c <mbedtls_debug_print_msg>
    ssl->out_msglen = 2;
 801d1f2:	2702      	movs	r7, #2
 801d1f4:	2315      	movs	r3, #21
 801d1f6:	e9c4 3729 	strd	r3, r7, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 801d1fa:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801d1fe:	701e      	strb	r6, [r3, #0]
    ssl->out_msg[1] = message;
 801d200:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d204:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 801d206:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d208:	f7ff fc9e 	bl	801cb48 <mbedtls_ssl_write_record>
 801d20c:	4605      	mov	r5, r0
 801d20e:	b160      	cbz	r0, 801d22a <mbedtls_ssl_send_alert_message+0x72>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801d210:	4b0f      	ldr	r3, [pc, #60]	; (801d250 <mbedtls_ssl_send_alert_message+0x98>)
 801d212:	9001      	str	r0, [sp, #4]
 801d214:	9300      	str	r3, [sp, #0]
 801d216:	4a0c      	ldr	r2, [pc, #48]	; (801d248 <mbedtls_ssl_send_alert_message+0x90>)
 801d218:	f241 0326 	movw	r3, #4134	; 0x1026
 801d21c:	2101      	movs	r1, #1
 801d21e:	4620      	mov	r0, r4
 801d220:	f7f3 fb64 	bl	80108ec <mbedtls_debug_print_ret>
}
 801d224:	4628      	mov	r0, r5
 801d226:	b005      	add	sp, #20
 801d228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 801d22a:	4b0a      	ldr	r3, [pc, #40]	; (801d254 <mbedtls_ssl_send_alert_message+0x9c>)
 801d22c:	9300      	str	r3, [sp, #0]
 801d22e:	4a06      	ldr	r2, [pc, #24]	; (801d248 <mbedtls_ssl_send_alert_message+0x90>)
 801d230:	f241 0329 	movw	r3, #4137	; 0x1029
 801d234:	4639      	mov	r1, r7
 801d236:	4620      	mov	r0, r4
 801d238:	f7f3 fb28 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801d23c:	e7f2      	b.n	801d224 <mbedtls_ssl_send_alert_message+0x6c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801d23e:	4d06      	ldr	r5, [pc, #24]	; (801d258 <mbedtls_ssl_send_alert_message+0xa0>)
 801d240:	e7f0      	b.n	801d224 <mbedtls_ssl_send_alert_message+0x6c>
 801d242:	bf00      	nop
 801d244:	080322b9 	.word	0x080322b9
 801d248:	08031c15 	.word	0x08031c15
 801d24c:	080322cf 	.word	0x080322cf
 801d250:	080310ad 	.word	0x080310ad
 801d254:	080322ee 	.word	0x080322ee
 801d258:	ffff8f00 	.word	0xffff8f00

0801d25c <mbedtls_ssl_read_record_layer>:
{
 801d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( ssl->in_hslen != 0 )
 801d260:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801d264:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 801d266:	b096      	sub	sp, #88	; 0x58
 801d268:	4604      	mov	r4, r0
    if( ssl->in_hslen != 0 )
 801d26a:	b361      	cbz	r1, 801d2c6 <mbedtls_ssl_read_record_layer+0x6a>
        if( ssl->in_offt != NULL )
 801d26c:	b163      	cbz	r3, 801d288 <mbedtls_ssl_read_record_layer+0x2c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d26e:	4b94      	ldr	r3, [pc, #592]	; (801d4c0 <mbedtls_ssl_read_record_layer+0x264>)
 801d270:	9300      	str	r3, [sp, #0]
 801d272:	4a94      	ldr	r2, [pc, #592]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d274:	4d94      	ldr	r5, [pc, #592]	; (801d4c8 <mbedtls_ssl_read_record_layer+0x26c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d276:	f640 63d8 	movw	r3, #3800	; 0xed8
 801d27a:	2101      	movs	r1, #1
 801d27c:	f7f3 fb06 	bl	801088c <mbedtls_debug_print_msg>
}
 801d280:	4628      	mov	r0, r5
 801d282:	b016      	add	sp, #88	; 0x58
 801d284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 801d288:	6f82      	ldr	r2, [r0, #120]	; 0x78
 801d28a:	4291      	cmp	r1, r2
 801d28c:	d219      	bcs.n	801d2c2 <mbedtls_ssl_read_record_layer+0x66>
            ssl->in_msglen -= ssl->in_hslen;
 801d28e:	1a52      	subs	r2, r2, r1
 801d290:	6782      	str	r2, [r0, #120]	; 0x78
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 801d292:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d294:	4401      	add	r1, r0
 801d296:	f004 ff95 	bl	80221c4 <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 801d29a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d29c:	9302      	str	r3, [sp, #8]
 801d29e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d2a0:	9301      	str	r3, [sp, #4]
 801d2a2:	4b8a      	ldr	r3, [pc, #552]	; (801d4cc <mbedtls_ssl_read_record_layer+0x270>)
 801d2a4:	9300      	str	r3, [sp, #0]
 801d2a6:	4a87      	ldr	r2, [pc, #540]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d2a8:	f640 63f7 	movw	r3, #3831	; 0xef7
 801d2ac:	2104      	movs	r1, #4
 801d2ae:	4620      	mov	r0, r4
 801d2b0:	f7f3 fb4c 	bl	801094c <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 801d2b4:	2300      	movs	r3, #0
 801d2b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msglen > 0 )
 801d2ba:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d2bc:	b133      	cbz	r3, 801d2cc <mbedtls_ssl_read_record_layer+0x70>
        return( 0 );
 801d2be:	2500      	movs	r5, #0
 801d2c0:	e7de      	b.n	801d280 <mbedtls_ssl_read_record_layer+0x24>
            ssl->in_msglen = 0;
 801d2c2:	6783      	str	r3, [r0, #120]	; 0x78
 801d2c4:	e7f6      	b.n	801d2b4 <mbedtls_ssl_read_record_layer+0x58>
    else if( ssl->in_offt != NULL )
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d1f9      	bne.n	801d2be <mbedtls_ssl_read_record_layer+0x62>
        ssl->in_msglen = 0;
 801d2ca:	6783      	str	r3, [r0, #120]	; 0x78
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 801d2cc:	2105      	movs	r1, #5
 801d2ce:	4620      	mov	r0, r4
 801d2d0:	f7ff fb0e 	bl	801c8f0 <mbedtls_ssl_fetch_input>
 801d2d4:	4605      	mov	r5, r0
 801d2d6:	b150      	cbz	r0, 801d2ee <mbedtls_ssl_read_record_layer+0x92>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d2d8:	4b7d      	ldr	r3, [pc, #500]	; (801d4d0 <mbedtls_ssl_read_record_layer+0x274>)
 801d2da:	9300      	str	r3, [sp, #0]
 801d2dc:	9001      	str	r0, [sp, #4]
 801d2de:	f640 7323 	movw	r3, #3875	; 0xf23
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d2e2:	4a78      	ldr	r2, [pc, #480]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d2e4:	2101      	movs	r1, #1
 801d2e6:	4620      	mov	r0, r4
 801d2e8:	f7f3 fb00 	bl	80108ec <mbedtls_debug_print_ret>
        return( ret );
 801d2ec:	e7c8      	b.n	801d280 <mbedtls_ssl_read_record_layer+0x24>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 801d2ee:	2305      	movs	r3, #5
 801d2f0:	9302      	str	r3, [sp, #8]
 801d2f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d2f4:	9301      	str	r3, [sp, #4]
 801d2f6:	4b77      	ldr	r3, [pc, #476]	; (801d4d4 <mbedtls_ssl_read_record_layer+0x278>)
 801d2f8:	4a72      	ldr	r2, [pc, #456]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d2fa:	9300      	str	r3, [sp, #0]
 801d2fc:	2104      	movs	r1, #4
 801d2fe:	f640 5396 	movw	r3, #3478	; 0xd96
 801d302:	4620      	mov	r0, r4
 801d304:	f7f3 fb22 	bl	801094c <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d308:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d30c:	7811      	ldrb	r1, [r2, #0]
 801d30e:	6761      	str	r1, [r4, #116]	; 0x74
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d310:	881b      	ldrh	r3, [r3, #0]
 801d312:	ba5b      	rev16	r3, r3
 801d314:	b29b      	uxth	r3, r3
 801d316:	67a3      	str	r3, [r4, #120]	; 0x78
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 801d318:	7895      	ldrb	r5, [r2, #2]
        *major = ver[0];
 801d31a:	7856      	ldrb	r6, [r2, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d31c:	4a69      	ldr	r2, [pc, #420]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
        *minor = ver[1];
 801d31e:	e9cd 5303 	strd	r5, r3, [sp, #12]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d322:	4b6d      	ldr	r3, [pc, #436]	; (801d4d8 <mbedtls_ssl_read_record_layer+0x27c>)
 801d324:	9300      	str	r3, [sp, #0]
 801d326:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801d32a:	f640 539c 	movw	r3, #3484	; 0xd9c
 801d32e:	2103      	movs	r1, #3
 801d330:	4620      	mov	r0, r4
 801d332:	f7f3 faab 	bl	801088c <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 801d336:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d338:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 801d33a:	2b03      	cmp	r3, #3
 801d33c:	d90f      	bls.n	801d35e <mbedtls_ssl_read_record_layer+0x102>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 801d33e:	4b67      	ldr	r3, [pc, #412]	; (801d4dc <mbedtls_ssl_read_record_layer+0x280>)
 801d340:	4a60      	ldr	r2, [pc, #384]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d342:	9300      	str	r3, [sp, #0]
 801d344:	2101      	movs	r1, #1
 801d346:	4620      	mov	r0, r4
 801d348:	f640 53a7 	movw	r3, #3495	; 0xda7
 801d34c:	f7f3 fa9e 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801d350:	220a      	movs	r2, #10
 801d352:	2102      	movs	r1, #2
 801d354:	4620      	mov	r0, r4
 801d356:	f7ff ff2f 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d35a:	4d61      	ldr	r5, [pc, #388]	; (801d4e0 <mbedtls_ssl_read_record_layer+0x284>)
 801d35c:	e790      	b.n	801d280 <mbedtls_ssl_read_record_layer+0x24>
    if( major_ver != ssl->major_ver )
 801d35e:	6923      	ldr	r3, [r4, #16]
 801d360:	429e      	cmp	r6, r3
 801d362:	d009      	beq.n	801d378 <mbedtls_ssl_read_record_layer+0x11c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 801d364:	4b5f      	ldr	r3, [pc, #380]	; (801d4e4 <mbedtls_ssl_read_record_layer+0x288>)
 801d366:	9300      	str	r3, [sp, #0]
 801d368:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d36c:	4a55      	ldr	r2, [pc, #340]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d36e:	2101      	movs	r1, #1
 801d370:	4620      	mov	r0, r4
 801d372:	f7f3 fa8b 	bl	801088c <mbedtls_debug_print_msg>
 801d376:	e7f0      	b.n	801d35a <mbedtls_ssl_read_record_layer+0xfe>
    if( minor_ver > ssl->conf->max_minor_ver )
 801d378:	6823      	ldr	r3, [r4, #0]
 801d37a:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801d37e:	42ab      	cmp	r3, r5
 801d380:	d204      	bcs.n	801d38c <mbedtls_ssl_read_record_layer+0x130>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 801d382:	4b59      	ldr	r3, [pc, #356]	; (801d4e8 <mbedtls_ssl_read_record_layer+0x28c>)
 801d384:	9300      	str	r3, [sp, #0]
 801d386:	f640 53b6 	movw	r3, #3510	; 0xdb6
 801d38a:	e7ef      	b.n	801d36c <mbedtls_ssl_read_record_layer+0x110>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d38c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d38e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d390:	6fa1      	ldr	r1, [r4, #120]	; 0x78
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d392:	1a9b      	subs	r3, r3, r2
 801d394:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801d398:	3315      	adds	r3, #21
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d39a:	4299      	cmp	r1, r3
 801d39c:	d904      	bls.n	801d3a8 <mbedtls_ssl_read_record_layer+0x14c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d39e:	4b53      	ldr	r3, [pc, #332]	; (801d4ec <mbedtls_ssl_read_record_layer+0x290>)
 801d3a0:	9300      	str	r3, [sp, #0]
 801d3a2:	f640 53be 	movw	r3, #3518	; 0xdbe
 801d3a6:	e7e1      	b.n	801d36c <mbedtls_ssl_read_record_layer+0x110>
    if( ssl->transform_in == NULL )
 801d3a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d3aa:	b94b      	cbnz	r3, 801d3c0 <mbedtls_ssl_read_record_layer+0x164>
        if( ssl->in_msglen < 1 ||
 801d3ac:	1e4a      	subs	r2, r1, #1
 801d3ae:	f241 3387 	movw	r3, #4999	; 0x1387
 801d3b2:	429a      	cmp	r2, r3
 801d3b4:	d919      	bls.n	801d3ea <mbedtls_ssl_read_record_layer+0x18e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d3b6:	4b4d      	ldr	r3, [pc, #308]	; (801d4ec <mbedtls_ssl_read_record_layer+0x290>)
 801d3b8:	9300      	str	r3, [sp, #0]
 801d3ba:	f640 53c8 	movw	r3, #3528	; 0xdc8
 801d3be:	e7d5      	b.n	801d36c <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 801d3c0:	689b      	ldr	r3, [r3, #8]
 801d3c2:	4299      	cmp	r1, r3
 801d3c4:	d204      	bcs.n	801d3d0 <mbedtls_ssl_read_record_layer+0x174>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d3c6:	4b49      	ldr	r3, [pc, #292]	; (801d4ec <mbedtls_ssl_read_record_layer+0x290>)
 801d3c8:	9300      	str	r3, [sp, #0]
 801d3ca:	f44f 635d 	mov.w	r3, #3536	; 0xdd0
 801d3ce:	e7cd      	b.n	801d36c <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d3d0:	6962      	ldr	r2, [r4, #20]
 801d3d2:	2a00      	cmp	r2, #0
 801d3d4:	dd09      	ble.n	801d3ea <mbedtls_ssl_read_record_layer+0x18e>
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 801d3d6:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 801d3da:	3308      	adds	r3, #8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d3dc:	4299      	cmp	r1, r3
 801d3de:	d904      	bls.n	801d3ea <mbedtls_ssl_read_record_layer+0x18e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d3e0:	4b42      	ldr	r3, [pc, #264]	; (801d4ec <mbedtls_ssl_read_record_layer+0x290>)
 801d3e2:	9300      	str	r3, [sp, #0]
 801d3e4:	f640 53e5 	movw	r3, #3557	; 0xde5
 801d3e8:	e7c0      	b.n	801d36c <mbedtls_ssl_read_record_layer+0x110>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 801d3ea:	3105      	adds	r1, #5
 801d3ec:	4620      	mov	r0, r4
 801d3ee:	f7ff fa7f 	bl	801c8f0 <mbedtls_ssl_fetch_input>
 801d3f2:	4605      	mov	r5, r0
 801d3f4:	b128      	cbz	r0, 801d402 <mbedtls_ssl_read_record_layer+0x1a6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d3f6:	4b36      	ldr	r3, [pc, #216]	; (801d4d0 <mbedtls_ssl_read_record_layer+0x274>)
 801d3f8:	9300      	str	r3, [sp, #0]
 801d3fa:	9001      	str	r0, [sp, #4]
 801d3fc:	f640 734d 	movw	r3, #3917	; 0xf4d
 801d400:	e76f      	b.n	801d2e2 <mbedtls_ssl_read_record_layer+0x86>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d402:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        ssl->in_left = 0;
 801d404:	67e0      	str	r0, [r4, #124]	; 0x7c
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d406:	3305      	adds	r3, #5
 801d408:	9302      	str	r3, [sp, #8]
 801d40a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d40c:	9301      	str	r3, [sp, #4]
 801d40e:	4b38      	ldr	r3, [pc, #224]	; (801d4f0 <mbedtls_ssl_read_record_layer+0x294>)
 801d410:	9300      	str	r3, [sp, #0]
 801d412:	4a2c      	ldr	r2, [pc, #176]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d414:	f640 6341 	movw	r3, #3649	; 0xe41
 801d418:	2104      	movs	r1, #4
 801d41a:	4620      	mov	r0, r4
 801d41c:	f7f3 fa96 	bl	801094c <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 801d420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d422:	2b00      	cmp	r3, #0
 801d424:	f43f af4b 	beq.w	801d2be <mbedtls_ssl_read_record_layer+0x62>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 801d428:	4b32      	ldr	r3, [pc, #200]	; (801d4f4 <mbedtls_ssl_read_record_layer+0x298>)
 801d42a:	9300      	str	r3, [sp, #0]
 801d42c:	4a25      	ldr	r2, [pc, #148]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d42e:	f44f 63c5 	mov.w	r3, #1576	; 0x628
 801d432:	2102      	movs	r1, #2
 801d434:	4620      	mov	r0, r4
 801d436:	f7f3 fa29 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 801d43a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d43c:	b10b      	cbz	r3, 801d442 <mbedtls_ssl_read_record_layer+0x1e6>
 801d43e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d440:	b950      	cbnz	r0, 801d458 <mbedtls_ssl_read_record_layer+0x1fc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d442:	4b1f      	ldr	r3, [pc, #124]	; (801d4c0 <mbedtls_ssl_read_record_layer+0x264>)
 801d444:	9300      	str	r3, [sp, #0]
 801d446:	f240 632c 	movw	r3, #1580	; 0x62c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d44a:	4a1e      	ldr	r2, [pc, #120]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d44c:	4d1e      	ldr	r5, [pc, #120]	; (801d4c8 <mbedtls_ssl_read_record_layer+0x26c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d44e:	2101      	movs	r1, #1
 801d450:	4620      	mov	r0, r4
 801d452:	f7f3 fa1b 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d456:	e1a8      	b.n	801d7aa <mbedtls_ssl_read_record_layer+0x54e>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801d458:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 801d45c:	b103      	cbz	r3, 801d460 <mbedtls_ssl_read_record_layer+0x204>
    return ctx->cipher_info->mode;
 801d45e:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 801d460:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d462:	6882      	ldr	r2, [r0, #8]
 801d464:	4297      	cmp	r7, r2
 801d466:	d20b      	bcs.n	801d480 <mbedtls_ssl_read_record_layer+0x224>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 801d468:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d46c:	4b22      	ldr	r3, [pc, #136]	; (801d4f8 <mbedtls_ssl_read_record_layer+0x29c>)
 801d46e:	9300      	str	r3, [sp, #0]
 801d470:	f240 6334 	movw	r3, #1588	; 0x634
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d474:	4a13      	ldr	r2, [pc, #76]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d476:	2101      	movs	r1, #1
 801d478:	4620      	mov	r0, r4
 801d47a:	f7f3 fa07 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d47e:	e0ac      	b.n	801d5da <mbedtls_ssl_read_record_layer+0x37e>
    if( mode == MBEDTLS_MODE_GCM ||
 801d480:	2b06      	cmp	r3, #6
 801d482:	d002      	beq.n	801d48a <mbedtls_ssl_read_record_layer+0x22e>
 801d484:	2b08      	cmp	r3, #8
 801d486:	f040 8149 	bne.w	801d71c <mbedtls_ssl_read_record_layer+0x4c0>
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d48a:	6803      	ldr	r3, [r0, #0]
 801d48c:	7f1b      	ldrb	r3, [r3, #28]
 801d48e:	f013 0f02 	tst.w	r3, #2
                                 ssl->transform_in->fixed_ivlen;
 801d492:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d496:	bf14      	ite	ne
 801d498:	2508      	movne	r5, #8
 801d49a:	2510      	moveq	r5, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 801d49c:	1ad1      	subs	r1, r2, r3
        if( ssl->in_msglen < explicit_iv_len + taglen )
 801d49e:	1948      	adds	r0, r1, r5
 801d4a0:	4287      	cmp	r7, r0
 801d4a2:	d22d      	bcs.n	801d500 <mbedtls_ssl_read_record_layer+0x2a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 801d4a4:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801d4a8:	4b14      	ldr	r3, [pc, #80]	; (801d4fc <mbedtls_ssl_read_record_layer+0x2a0>)
 801d4aa:	9300      	str	r3, [sp, #0]
 801d4ac:	9701      	str	r7, [sp, #4]
 801d4ae:	f240 6363 	movw	r3, #1635	; 0x663
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d4b2:	4a04      	ldr	r2, [pc, #16]	; (801d4c4 <mbedtls_ssl_read_record_layer+0x268>)
 801d4b4:	2101      	movs	r1, #1
 801d4b6:	4620      	mov	r0, r4
 801d4b8:	f7f3 f9e8 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d4bc:	e08d      	b.n	801d5da <mbedtls_ssl_read_record_layer+0x37e>
 801d4be:	bf00      	nop
 801d4c0:	08031745 	.word	0x08031745
 801d4c4:	08031c15 	.word	0x08031c15
 801d4c8:	ffff9400 	.word	0xffff9400
 801d4cc:	08032304 	.word	0x08032304
 801d4d0:	08032320 	.word	0x08032320
 801d4d4:	08032338 	.word	0x08032338
 801d4d8:	0803234c 	.word	0x0803234c
 801d4dc:	08032387 	.word	0x08032387
 801d4e0:	ffff8e00 	.word	0xffff8e00
 801d4e4:	0803239b 	.word	0x0803239b
 801d4e8:	080323b2 	.word	0x080323b2
 801d4ec:	080323c9 	.word	0x080323c9
 801d4f0:	080323dc 	.word	0x080323dc
 801d4f4:	080323f6 	.word	0x080323f6
 801d4f8:	08032405 	.word	0x08032405
 801d4fc:	08032422 	.word	0x08032422
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 801d500:	441f      	add	r7, r3
 801d502:	1abf      	subs	r7, r7, r2
 801d504:	1b7f      	subs	r7, r7, r5
        memcpy( add_data, ssl->in_ctr, 8 );
 801d506:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        ssl->in_msglen = dec_msglen;
 801d508:	67a7      	str	r7, [r4, #120]	; 0x78
        memcpy( add_data, ssl->in_ctr, 8 );
 801d50a:	6810      	ldr	r0, [r2, #0]
 801d50c:	6851      	ldr	r1, [r2, #4]
        dec_msg = ssl->in_msg;
 801d50e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        memcpy( add_data, ssl->in_ctr, 8 );
 801d512:	ae0a      	add	r6, sp, #40	; 0x28
 801d514:	4633      	mov	r3, r6
 801d516:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 801d518:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d51a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801d51e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801d522:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 801d526:	0a3b      	lsrs	r3, r7, #8
 801d528:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d52c:	f04f 090d 	mov.w	r9, #13
 801d530:	4baf      	ldr	r3, [pc, #700]	; (801d7f0 <mbedtls_ssl_read_record_layer+0x594>)
        ver[0] = (unsigned char) major;
 801d532:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d536:	9300      	str	r3, [sp, #0]
 801d538:	4aae      	ldr	r2, [pc, #696]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
        add_data[12] = ssl->in_msglen & 0xFF;
 801d53a:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d53e:	f240 6375 	movw	r3, #1653	; 0x675
 801d542:	2104      	movs	r1, #4
 801d544:	4620      	mov	r0, r4
 801d546:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801d54a:	f7f3 f9ff 	bl	801094c <mbedtls_debug_print_buf>
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 801d54e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d550:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 801d552:	6918      	ldr	r0, [r3, #16]
 801d554:	68da      	ldr	r2, [r3, #12]
 801d556:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 801d55a:	1a12      	subs	r2, r2, r0
 801d55c:	4460      	add	r0, ip
 801d55e:	f004 fe23 	bl	80221a8 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 801d562:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d564:	68da      	ldr	r2, [r3, #12]
 801d566:	9202      	str	r2, [sp, #8]
 801d568:	3328      	adds	r3, #40	; 0x28
 801d56a:	9301      	str	r3, [sp, #4]
 801d56c:	4ba2      	ldr	r3, [pc, #648]	; (801d7f8 <mbedtls_ssl_read_record_layer+0x59c>)
 801d56e:	4aa1      	ldr	r2, [pc, #644]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d570:	9300      	str	r3, [sp, #0]
 801d572:	2104      	movs	r1, #4
 801d574:	f240 637c 	movw	r3, #1660	; 0x67c
 801d578:	4620      	mov	r0, r4
 801d57a:	f7f3 f9e7 	bl	801094c <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 801d57e:	eb08 0a07 	add.w	sl, r8, r7
 801d582:	4b9e      	ldr	r3, [pc, #632]	; (801d7fc <mbedtls_ssl_read_record_layer+0x5a0>)
 801d584:	4a9b      	ldr	r2, [pc, #620]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d586:	9300      	str	r3, [sp, #0]
 801d588:	e9cd a501 	strd	sl, r5, [sp, #4]
 801d58c:	f240 637e 	movw	r3, #1662	; 0x67e
 801d590:	2104      	movs	r1, #4
 801d592:	4620      	mov	r0, r4
 801d594:	f7f3 f9da 	bl	801094c <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 801d598:	ab09      	add	r3, sp, #36	; 0x24
 801d59a:	e9cd a505 	strd	sl, r5, [sp, #20]
 801d59e:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801d5a2:	e9cd 8701 	strd	r8, r7, [sp, #4]
 801d5a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d5a8:	f8cd 9000 	str.w	r9, [sp]
 801d5ac:	68c2      	ldr	r2, [r0, #12]
 801d5ae:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d5b2:	4633      	mov	r3, r6
 801d5b4:	3090      	adds	r0, #144	; 0x90
 801d5b6:	f7f2 fe8f 	bl	80102d8 <mbedtls_cipher_auth_decrypt>
 801d5ba:	4605      	mov	r5, r0
 801d5bc:	b178      	cbz	r0, 801d5de <mbedtls_ssl_read_record_layer+0x382>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 801d5be:	4b90      	ldr	r3, [pc, #576]	; (801d800 <mbedtls_ssl_read_record_layer+0x5a4>)
 801d5c0:	9001      	str	r0, [sp, #4]
 801d5c2:	9300      	str	r3, [sp, #0]
 801d5c4:	4a8b      	ldr	r2, [pc, #556]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d5c6:	f240 638b 	movw	r3, #1675	; 0x68b
 801d5ca:	2101      	movs	r1, #1
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	f7f3 f98d 	bl	80108ec <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 801d5d2:	f515 4fc6 	cmn.w	r5, #25344	; 0x6300
 801d5d6:	f040 80e8 	bne.w	801d7aa <mbedtls_ssl_read_record_layer+0x54e>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d5da:	4d8a      	ldr	r5, [pc, #552]	; (801d804 <mbedtls_ssl_read_record_layer+0x5a8>)
 801d5dc:	e0e5      	b.n	801d7aa <mbedtls_ssl_read_record_layer+0x54e>
        if( olen != dec_msglen )
 801d5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d5e0:	429f      	cmp	r7, r3
 801d5e2:	d004      	beq.n	801d5ee <mbedtls_ssl_read_record_layer+0x392>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d5e4:	4b88      	ldr	r3, [pc, #544]	; (801d808 <mbedtls_ssl_read_record_layer+0x5ac>)
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	f240 6396 	movw	r3, #1686	; 0x696
 801d5ec:	e72d      	b.n	801d44a <mbedtls_ssl_read_record_layer+0x1ee>
    size_t padlen = 0, correct = 1;
 801d5ee:	2601      	movs	r6, #1
 801d5f0:	4682      	mov	sl, r0
        auth_done++;
 801d5f2:	4635      	mov	r5, r6
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 801d5f4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d5f6:	9302      	str	r3, [sp, #8]
 801d5f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d5fa:	9301      	str	r3, [sp, #4]
 801d5fc:	4b83      	ldr	r3, [pc, #524]	; (801d80c <mbedtls_ssl_read_record_layer+0x5b0>)
 801d5fe:	9300      	str	r3, [sp, #0]
 801d600:	4a7c      	ldr	r2, [pc, #496]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d602:	f240 7377 	movw	r3, #1911	; 0x777
 801d606:	2104      	movs	r1, #4
 801d608:	4620      	mov	r0, r4
 801d60a:	f7f3 f99f 	bl	801094c <mbedtls_debug_print_buf>
    if( auth_done == 0 )
 801d60e:	2d00      	cmp	r5, #0
 801d610:	f040 818d 	bne.w	801d92e <mbedtls_ssl_read_record_layer+0x6d2>
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d614:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d616:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d618:	6952      	ldr	r2, [r2, #20]
 801d61a:	1a9b      	subs	r3, r3, r2
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d61c:	6e62      	ldr	r2, [r4, #100]	; 0x64
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d61e:	67a3      	str	r3, [r4, #120]	; 0x78
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d620:	0a1b      	lsrs	r3, r3, #8
 801d622:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 801d624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d626:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d628:	705a      	strb	r2, [r3, #1]
        memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );
 801d62a:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d62c:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
 801d630:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d632:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801d636:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801d63a:	4439      	add	r1, r7
 801d63c:	4640      	mov	r0, r8
 801d63e:	f004 fdb3 	bl	80221a8 <memcpy>
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801d642:	6963      	ldr	r3, [r4, #20]
 801d644:	2b00      	cmp	r3, #0
 801d646:	f340 816a 	ble.w	801d91e <mbedtls_ssl_read_record_layer+0x6c2>
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d64a:	3715      	adds	r7, #21
 801d64c:	44ba      	add	sl, r7
            extra_run &= correct * 0xFF;
 801d64e:	0233      	lsls	r3, r6, #8
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 801d650:	09bf      	lsrs	r7, r7, #6
            extra_run &= correct * 0xFF;
 801d652:	1b9b      	subs	r3, r3, r6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d654:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d656:	2208      	movs	r2, #8
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d658:	ebc7 179a 	rsb	r7, r7, sl, lsr #6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d65c:	f109 0044 	add.w	r0, r9, #68	; 0x44
            extra_run &= correct * 0xFF;
 801d660:	401f      	ands	r7, r3
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d662:	f7f7 f8ef 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 801d666:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d668:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801d66a:	2203      	movs	r2, #3
 801d66c:	3044      	adds	r0, #68	; 0x44
 801d66e:	f7f7 f8e9 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 801d672:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d674:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801d676:	2202      	movs	r2, #2
 801d678:	3044      	adds	r0, #68	; 0x44
 801d67a:	f7f7 f8e3 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 801d67e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d680:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d682:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d684:	3044      	adds	r0, #68	; 0x44
 801d686:	f7f7 f8dd 	bl	8014844 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d68a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d68c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d68e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d690:	4419      	add	r1, r3
 801d692:	3044      	adds	r0, #68	; 0x44
 801d694:	f7f7 f8e6 	bl	8014864 <mbedtls_md_hmac_finish>
            for( j = 0; j < extra_run + 1; j++ )
 801d698:	3701      	adds	r7, #1
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801d69a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d69c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d69e:	3044      	adds	r0, #68	; 0x44
            for( j = 0; j < extra_run + 1; j++ )
 801d6a0:	3501      	adds	r5, #1
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801d6a2:	f7f7 f921 	bl	80148e8 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 801d6a6:	42bd      	cmp	r5, r7
 801d6a8:	d3f7      	bcc.n	801d69a <mbedtls_ssl_read_record_layer+0x43e>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 801d6aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d6ac:	3044      	adds	r0, #68	; 0x44
 801d6ae:	f7f7 f905 	bl	80148bc <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", tmp, ssl->transform_in->maclen );
 801d6b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d6b4:	4a4f      	ldr	r2, [pc, #316]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d6b6:	695b      	ldr	r3, [r3, #20]
 801d6b8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801d6bc:	4b54      	ldr	r3, [pc, #336]	; (801d810 <mbedtls_ssl_read_record_layer+0x5b4>)
 801d6be:	9300      	str	r3, [sp, #0]
 801d6c0:	2104      	movs	r1, #4
 801d6c2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801d6c6:	4620      	mov	r0, r4
 801d6c8:	f7f3 f940 	bl	801094c <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac", ssl->in_msg + ssl->in_msglen,
 801d6cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d6ce:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d6d0:	695b      	ldr	r3, [r3, #20]
 801d6d2:	9302      	str	r3, [sp, #8]
 801d6d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d6d6:	4413      	add	r3, r2
 801d6d8:	9301      	str	r3, [sp, #4]
 801d6da:	4b4e      	ldr	r3, [pc, #312]	; (801d814 <mbedtls_ssl_read_record_layer+0x5b8>)
 801d6dc:	4a45      	ldr	r2, [pc, #276]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d6de:	9300      	str	r3, [sp, #0]
 801d6e0:	2104      	movs	r1, #4
 801d6e2:	f240 73c1 	movw	r3, #1985	; 0x7c1
 801d6e6:	4620      	mov	r0, r4
 801d6e8:	f7f3 f930 	bl	801094c <mbedtls_debug_print_buf>
        if( mbedtls_ssl_safer_memcmp( tmp, ssl->in_msg + ssl->in_msglen,
 801d6ec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d6ee:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d6f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    for( i = 0; i < n; i++ )
 801d6f2:	6940      	ldr	r0, [r0, #20]
 801d6f4:	1899      	adds	r1, r3, r2
 801d6f6:	4403      	add	r3, r0
 801d6f8:	4413      	add	r3, r2
    unsigned char diff = 0;
 801d6fa:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
 801d6fc:	428b      	cmp	r3, r1
 801d6fe:	f040 8107 	bne.w	801d910 <mbedtls_ssl_read_record_layer+0x6b4>
 801d702:	2a00      	cmp	r2, #0
 801d704:	f000 8110 	beq.w	801d928 <mbedtls_ssl_read_record_layer+0x6cc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
 801d708:	4b43      	ldr	r3, [pc, #268]	; (801d818 <mbedtls_ssl_read_record_layer+0x5bc>)
 801d70a:	9300      	str	r3, [sp, #0]
 801d70c:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801d710:	4a38      	ldr	r2, [pc, #224]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d712:	2101      	movs	r1, #1
 801d714:	4620      	mov	r0, r4
 801d716:	f7f3 f8b9 	bl	801088c <mbedtls_debug_print_msg>
 801d71a:	e75e      	b.n	801d5da <mbedtls_ssl_read_record_layer+0x37e>
    if( mode == MBEDTLS_MODE_CBC )
 801d71c:	2b02      	cmp	r3, #2
 801d71e:	f040 80f2 	bne.w	801d906 <mbedtls_ssl_read_record_layer+0x6aa>
        size_t olen = 0;
 801d722:	2300      	movs	r3, #0
 801d724:	930a      	str	r3, [sp, #40]	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d726:	6961      	ldr	r1, [r4, #20]
 801d728:	68c2      	ldr	r2, [r0, #12]
 801d72a:	6945      	ldr	r5, [r0, #20]
        size_t minlen = 0;
 801d72c:	2901      	cmp	r1, #1
 801d72e:	bfcc      	ite	gt
 801d730:	4616      	movgt	r6, r2
 801d732:	461e      	movle	r6, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801d734:	1993      	adds	r3, r2, r6
 801d736:	429f      	cmp	r7, r3
 801d738:	d303      	bcc.n	801d742 <mbedtls_ssl_read_record_layer+0x4e6>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 801d73a:	1c6b      	adds	r3, r5, #1
 801d73c:	4433      	add	r3, r6
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801d73e:	429f      	cmp	r7, r3
 801d740:	d207      	bcs.n	801d752 <mbedtls_ssl_read_record_layer+0x4f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d742:	4b36      	ldr	r3, [pc, #216]	; (801d81c <mbedtls_ssl_read_record_layer+0x5c0>)
 801d744:	9300      	str	r3, [sp, #0]
 801d746:	e9cd 2502 	strd	r2, r5, [sp, #8]
 801d74a:	9701      	str	r7, [sp, #4]
 801d74c:	f240 63b5 	movw	r3, #1717	; 0x6b5
 801d750:	e6af      	b.n	801d4b2 <mbedtls_ssl_read_record_layer+0x256>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 801d752:	fbb7 f6f2 	udiv	r6, r7, r2
 801d756:	fb02 7816 	mls	r8, r2, r6, r7
 801d75a:	f1b8 0f00 	cmp.w	r8, #0
 801d75e:	d006      	beq.n	801d76e <mbedtls_ssl_read_record_layer+0x512>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d760:	4b2f      	ldr	r3, [pc, #188]	; (801d820 <mbedtls_ssl_read_record_layer+0x5c4>)
 801d762:	9300      	str	r3, [sp, #0]
 801d764:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d768:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 801d76c:	e682      	b.n	801d474 <mbedtls_ssl_read_record_layer+0x218>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d76e:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 801d770:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d772:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d776:	dd05      	ble.n	801d784 <mbedtls_ssl_read_record_layer+0x528>
            dec_msglen -= ssl->transform_in->ivlen;
 801d778:	1abf      	subs	r7, r7, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 801d77a:	67a7      	str	r7, [r4, #120]	; 0x78
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801d77c:	468c      	mov	ip, r1
 801d77e:	4645      	mov	r5, r8
 801d780:	42aa      	cmp	r2, r5
 801d782:	d126      	bne.n	801d7d2 <mbedtls_ssl_read_record_layer+0x576>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 801d784:	ad0a      	add	r5, sp, #40	; 0x28
 801d786:	e9cd 3501 	strd	r3, r5, [sp, #4]
 801d78a:	9700      	str	r7, [sp, #0]
 801d78c:	3090      	adds	r0, #144	; 0x90
 801d78e:	f7f2 fd5d 	bl	801024c <mbedtls_cipher_crypt>
 801d792:	4605      	mov	r5, r0
 801d794:	b318      	cbz	r0, 801d7de <mbedtls_ssl_read_record_layer+0x582>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d796:	4b23      	ldr	r3, [pc, #140]	; (801d824 <mbedtls_ssl_read_record_layer+0x5c8>)
 801d798:	9001      	str	r0, [sp, #4]
 801d79a:	9300      	str	r3, [sp, #0]
 801d79c:	4a15      	ldr	r2, [pc, #84]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d79e:	f240 7309 	movw	r3, #1801	; 0x709
 801d7a2:	2101      	movs	r1, #1
 801d7a4:	4620      	mov	r0, r4
 801d7a6:	f7f3 f8a1 	bl	80108ec <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 801d7aa:	4b1f      	ldr	r3, [pc, #124]	; (801d828 <mbedtls_ssl_read_record_layer+0x5cc>)
 801d7ac:	9300      	str	r3, [sp, #0]
 801d7ae:	4a11      	ldr	r2, [pc, #68]	; (801d7f4 <mbedtls_ssl_read_record_layer+0x598>)
 801d7b0:	9501      	str	r5, [sp, #4]
 801d7b2:	f640 6358 	movw	r3, #3672	; 0xe58
 801d7b6:	2101      	movs	r1, #1
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	f7f3 f897 	bl	80108ec <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
 801d7be:	f515 4fe3 	cmn.w	r5, #29056	; 0x7180
 801d7c2:	f47f ad5d 	bne.w	801d280 <mbedtls_ssl_read_record_layer+0x24>
                mbedtls_ssl_send_alert_message( ssl,
 801d7c6:	2214      	movs	r2, #20
 801d7c8:	2102      	movs	r1, #2
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	f7ff fcf4 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
 801d7d0:	e556      	b.n	801d280 <mbedtls_ssl_read_record_layer+0x24>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 801d7d2:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801d7d4:	5d76      	ldrb	r6, [r6, r5]
 801d7d6:	f80c 6b01 	strb.w	r6, [ip], #1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801d7da:	3501      	adds	r5, #1
 801d7dc:	e7d0      	b.n	801d780 <mbedtls_ssl_read_record_layer+0x524>
        if( dec_msglen != olen )
 801d7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d7e0:	429f      	cmp	r7, r3
 801d7e2:	d023      	beq.n	801d82c <mbedtls_ssl_read_record_layer+0x5d0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d7e4:	4b08      	ldr	r3, [pc, #32]	; (801d808 <mbedtls_ssl_read_record_layer+0x5ac>)
 801d7e6:	9300      	str	r3, [sp, #0]
 801d7e8:	f240 730f 	movw	r3, #1807	; 0x70f
 801d7ec:	e62d      	b.n	801d44a <mbedtls_ssl_read_record_layer+0x1ee>
 801d7ee:	bf00      	nop
 801d7f0:	08032031 	.word	0x08032031
 801d7f4:	08031c15 	.word	0x08031c15
 801d7f8:	0803204f 	.word	0x0803204f
 801d7fc:	08032453 	.word	0x08032453
 801d800:	0803245c 	.word	0x0803245c
 801d804:	ffff8e80 	.word	0xffff8e80
 801d808:	08031745 	.word	0x08031745
 801d80c:	08032517 	.word	0x08032517
 801d810:	08032533 	.word	0x08032533
 801d814:	08032024 	.word	0x08032024
 801d818:	08032540 	.word	0x08032540
 801d81c:	08032478 	.word	0x08032478
 801d820:	080324b6 	.word	0x080324b6
 801d824:	0803210f 	.word	0x0803210f
 801d828:	08032599 	.word	0x08032599
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801d82c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d82e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801d830:	441a      	add	r2, r3
 801d832:	f812 7c01 	ldrb.w	r7, [r2, #-1]
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801d836:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d838:	6952      	ldr	r2, [r2, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801d83a:	3701      	adds	r7, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801d83c:	18b9      	adds	r1, r7, r2
 801d83e:	428b      	cmp	r3, r1
 801d840:	d25a      	bcs.n	801d8f8 <mbedtls_ssl_read_record_layer+0x69c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
 801d842:	9301      	str	r3, [sp, #4]
 801d844:	4b5d      	ldr	r3, [pc, #372]	; (801d9bc <mbedtls_ssl_read_record_layer+0x760>)
 801d846:	9300      	str	r3, [sp, #0]
 801d848:	e9cd 2702 	strd	r2, r7, [sp, #8]
 801d84c:	f240 7325 	movw	r3, #1829	; 0x725
 801d850:	4a5b      	ldr	r2, [pc, #364]	; (801d9c0 <mbedtls_ssl_read_record_layer+0x764>)
 801d852:	2101      	movs	r1, #1
 801d854:	4620      	mov	r0, r4
 801d856:	f7f3 f819 	bl	801088c <mbedtls_debug_print_msg>
            correct = 0;
 801d85a:	462f      	mov	r7, r5
            padlen = 0;
 801d85c:	462e      	mov	r6, r5
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801d85e:	6963      	ldr	r3, [r4, #20]
 801d860:	2b00      	cmp	r3, #0
 801d862:	dd4b      	ble.n	801d8fc <mbedtls_ssl_read_record_layer+0x6a0>
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801d864:	6fa2      	ldr	r2, [r4, #120]	; 0x78
            correct &= ( ssl->in_msglen >= padlen + 1 );
 801d866:	1c79      	adds	r1, r7, #1
 801d868:	428a      	cmp	r2, r1
 801d86a:	bf34      	ite	cc
 801d86c:	2600      	movcc	r6, #0
 801d86e:	f006 0601 	andcs.w	r6, r6, #1
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801d872:	1e53      	subs	r3, r2, #1
                                       ssl->transform_in->maclen );
 801d874:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801d876:	6952      	ldr	r2, [r2, #20]
 801d878:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801d87c:	1bdb      	subs	r3, r3, r7
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801d87e:	3208      	adds	r2, #8
 801d880:	4293      	cmp	r3, r2
 801d882:	bf2c      	ite	cs
 801d884:	2600      	movcs	r6, #0
 801d886:	f006 0601 	andcc.w	r6, r6, #1
            for( i = 1; i <= 256; i++ )
 801d88a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
            size_t pad_count = 0, real_count = 1;
 801d88c:	2101      	movs	r1, #1
 801d88e:	fb06 2303 	mla	r3, r6, r3, r2
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d892:	f107 3eff 	add.w	lr, r7, #4294967295
            for( i = 1; i <= 256; i++ )
 801d896:	460a      	mov	r2, r1
 801d898:	f240 1c01 	movw	ip, #257	; 0x101
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d89c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801d8a0:	eba0 090e 	sub.w	r9, r0, lr
                real_count &= ( i <= padlen );
 801d8a4:	4297      	cmp	r7, r2
 801d8a6:	bf34      	ite	cc
 801d8a8:	2100      	movcc	r1, #0
 801d8aa:	f001 0101 	andcs.w	r1, r1, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d8ae:	f1d9 0000 	rsbs	r0, r9, #0
            for( i = 1; i <= 256; i++ )
 801d8b2:	f102 0201 	add.w	r2, r2, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801d8b6:	eb40 0009 	adc.w	r0, r0, r9
            for( i = 1; i <= 256; i++ )
 801d8ba:	4562      	cmp	r2, ip
                pad_count += real_count *
 801d8bc:	fb01 8800 	mla	r8, r1, r0, r8
            for( i = 1; i <= 256; i++ )
 801d8c0:	d1ec      	bne.n	801d89c <mbedtls_ssl_read_record_layer+0x640>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 801d8c2:	4547      	cmp	r7, r8
 801d8c4:	bf14      	ite	ne
 801d8c6:	2600      	movne	r6, #0
 801d8c8:	f006 0601 	andeq.w	r6, r6, #1
            if( padlen > 0 && correct == 0 )
 801d8cc:	b14f      	cbz	r7, 801d8e2 <mbedtls_ssl_read_record_layer+0x686>
 801d8ce:	b946      	cbnz	r6, 801d8e2 <mbedtls_ssl_read_record_layer+0x686>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
 801d8d0:	4b3c      	ldr	r3, [pc, #240]	; (801d9c4 <mbedtls_ssl_read_record_layer+0x768>)
 801d8d2:	9300      	str	r3, [sp, #0]
 801d8d4:	4a3a      	ldr	r2, [pc, #232]	; (801d9c0 <mbedtls_ssl_read_record_layer+0x764>)
 801d8d6:	f240 7361 	movw	r3, #1889	; 0x761
 801d8da:	2101      	movs	r1, #1
 801d8dc:	4620      	mov	r0, r4
 801d8de:	f7f2 ffd5 	bl	801088c <mbedtls_debug_print_msg>
            padlen &= correct * 0x1FF;
 801d8e2:	ea4f 2a46 	mov.w	sl, r6, lsl #9
        ssl->in_msglen -= padlen;
 801d8e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            padlen &= correct * 0x1FF;
 801d8e8:	ebaa 0a06 	sub.w	sl, sl, r6
 801d8ec:	ea0a 0a07 	and.w	sl, sl, r7
        ssl->in_msglen -= padlen;
 801d8f0:	eba3 030a 	sub.w	r3, r3, sl
 801d8f4:	67a3      	str	r3, [r4, #120]	; 0x78
 801d8f6:	e67d      	b.n	801d5f4 <mbedtls_ssl_read_record_layer+0x398>
    size_t padlen = 0, correct = 1;
 801d8f8:	2601      	movs	r6, #1
 801d8fa:	e7b0      	b.n	801d85e <mbedtls_ssl_read_record_layer+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d8fc:	4b32      	ldr	r3, [pc, #200]	; (801d9c8 <mbedtls_ssl_read_record_layer+0x76c>)
 801d8fe:	9300      	str	r3, [sp, #0]
 801d900:	f240 7369 	movw	r3, #1897	; 0x769
 801d904:	e5a1      	b.n	801d44a <mbedtls_ssl_read_record_layer+0x1ee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d906:	4b30      	ldr	r3, [pc, #192]	; (801d9c8 <mbedtls_ssl_read_record_layer+0x76c>)
 801d908:	9300      	str	r3, [sp, #0]
 801d90a:	f240 7373 	movw	r3, #1907	; 0x773
 801d90e:	e59c      	b.n	801d44a <mbedtls_ssl_read_record_layer+0x1ee>
        diff |= A[i] ^ B[i];
 801d910:	f818 0b01 	ldrb.w	r0, [r8], #1
 801d914:	f811 5b01 	ldrb.w	r5, [r1], #1
 801d918:	4068      	eors	r0, r5
 801d91a:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 801d91c:	e6ee      	b.n	801d6fc <mbedtls_ssl_read_record_layer+0x4a0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d91e:	4b2a      	ldr	r3, [pc, #168]	; (801d9c8 <mbedtls_ssl_read_record_layer+0x76c>)
 801d920:	9300      	str	r3, [sp, #0]
 801d922:	f240 73bc 	movw	r3, #1980	; 0x7bc
 801d926:	e590      	b.n	801d44a <mbedtls_ssl_read_record_layer+0x1ee>
        if( correct == 0 )
 801d928:	2e00      	cmp	r6, #0
 801d92a:	f43f ae56 	beq.w	801d5da <mbedtls_ssl_read_record_layer+0x37e>
    if( ssl->in_msglen == 0 )
 801d92e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d930:	b95b      	cbnz	r3, 801d94a <mbedtls_ssl_read_record_layer+0x6ee>
        ssl->nb_zero++;
 801d932:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801d936:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 801d938:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 801d93a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if( ssl->nb_zero > 3 )
 801d93e:	dd07      	ble.n	801d950 <mbedtls_ssl_read_record_layer+0x6f4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801d940:	4b22      	ldr	r3, [pc, #136]	; (801d9cc <mbedtls_ssl_read_record_layer+0x770>)
 801d942:	9300      	str	r3, [sp, #0]
 801d944:	f240 73e7 	movw	r3, #2023	; 0x7e7
 801d948:	e6e2      	b.n	801d710 <mbedtls_ssl_read_record_layer+0x4b4>
        ssl->nb_zero = 0;
 801d94a:	2300      	movs	r3, #0
 801d94c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    unsigned char diff = 0;
 801d950:	2208      	movs	r2, #8
            if( ++ssl->in_ctr[i - 1] != 0 )
 801d952:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d954:	3a01      	subs	r2, #1
 801d956:	5c8b      	ldrb	r3, [r1, r2]
 801d958:	3301      	adds	r3, #1
 801d95a:	b2db      	uxtb	r3, r3
 801d95c:	548b      	strb	r3, [r1, r2]
 801d95e:	b963      	cbnz	r3, 801d97a <mbedtls_ssl_read_record_layer+0x71e>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801d960:	2a00      	cmp	r2, #0
 801d962:	d1f6      	bne.n	801d952 <mbedtls_ssl_read_record_layer+0x6f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801d964:	4b1a      	ldr	r3, [pc, #104]	; (801d9d0 <mbedtls_ssl_read_record_layer+0x774>)
 801d966:	9300      	str	r3, [sp, #0]
 801d968:	4a15      	ldr	r2, [pc, #84]	; (801d9c0 <mbedtls_ssl_read_record_layer+0x764>)
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801d96a:	4d1a      	ldr	r5, [pc, #104]	; (801d9d4 <mbedtls_ssl_read_record_layer+0x778>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801d96c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801d970:	2101      	movs	r1, #1
 801d972:	4620      	mov	r0, r4
 801d974:	f7f2 ff8a 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801d978:	e717      	b.n	801d7aa <mbedtls_ssl_read_record_layer+0x54e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 801d97a:	4b17      	ldr	r3, [pc, #92]	; (801d9d8 <mbedtls_ssl_read_record_layer+0x77c>)
 801d97c:	4a10      	ldr	r2, [pc, #64]	; (801d9c0 <mbedtls_ssl_read_record_layer+0x764>)
 801d97e:	9300      	str	r3, [sp, #0]
 801d980:	2102      	movs	r1, #2
 801d982:	f640 0303 	movw	r3, #2051	; 0x803
 801d986:	4620      	mov	r0, r4
 801d988:	f7f2 ff80 	bl	801088c <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 801d98c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d98e:	9302      	str	r3, [sp, #8]
 801d990:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d992:	9301      	str	r3, [sp, #4]
 801d994:	4b11      	ldr	r3, [pc, #68]	; (801d9dc <mbedtls_ssl_read_record_layer+0x780>)
 801d996:	4a0a      	ldr	r2, [pc, #40]	; (801d9c0 <mbedtls_ssl_read_record_layer+0x764>)
 801d998:	9300      	str	r3, [sp, #0]
 801d99a:	2104      	movs	r1, #4
 801d99c:	f640 635c 	movw	r3, #3676	; 0xe5c
 801d9a0:	4620      	mov	r0, r4
 801d9a2:	f7f2 ffd3 	bl	801094c <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801d9a6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d9a8:	f241 3388 	movw	r3, #5000	; 0x1388
 801d9ac:	429a      	cmp	r2, r3
 801d9ae:	f67f ac86 	bls.w	801d2be <mbedtls_ssl_read_record_layer+0x62>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d9b2:	4b0b      	ldr	r3, [pc, #44]	; (801d9e0 <mbedtls_ssl_read_record_layer+0x784>)
 801d9b4:	9300      	str	r3, [sp, #0]
 801d9b6:	f640 6361 	movw	r3, #3681	; 0xe61
 801d9ba:	e4d7      	b.n	801d36c <mbedtls_ssl_read_record_layer+0x110>
 801d9bc:	080324d5 	.word	0x080324d5
 801d9c0:	08031c15 	.word	0x08031c15
 801d9c4:	080324fd 	.word	0x080324fd
 801d9c8:	08031745 	.word	0x08031745
 801d9cc:	0803255b 	.word	0x0803255b
 801d9d0:	080325a9 	.word	0x080325a9
 801d9d4:	ffff9480 	.word	0xffff9480
 801d9d8:	080325cd 	.word	0x080325cd
 801d9dc:	080325dc 	.word	0x080325dc
 801d9e0:	080323c9 	.word	0x080323c9

0801d9e4 <mbedtls_ssl_read_record>:
{
 801d9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801d9e6:	4b25      	ldr	r3, [pc, #148]	; (801da7c <mbedtls_ssl_read_record+0x98>)
 801d9e8:	9300      	str	r3, [sp, #0]
{
 801d9ea:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801d9ec:	f640 6389 	movw	r3, #3721	; 0xe89
 801d9f0:	4a23      	ldr	r2, [pc, #140]	; (801da80 <mbedtls_ssl_read_record+0x9c>)
 801d9f2:	2102      	movs	r1, #2
 801d9f4:	f7f2 ff4a 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 801d9f8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801d9fc:	bb83      	cbnz	r3, 801da60 <mbedtls_ssl_read_record+0x7c>
            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 801d9fe:	4628      	mov	r0, r5
 801da00:	f7ff fc2c 	bl	801d25c <mbedtls_ssl_read_record_layer>
 801da04:	4604      	mov	r4, r0
 801da06:	b160      	cbz	r0, 801da22 <mbedtls_ssl_read_record+0x3e>
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801da08:	4b1e      	ldr	r3, [pc, #120]	; (801da84 <mbedtls_ssl_read_record+0xa0>)
 801da0a:	9300      	str	r3, [sp, #0]
 801da0c:	9001      	str	r0, [sp, #4]
 801da0e:	f640 6391 	movw	r3, #3729	; 0xe91
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801da12:	4a1b      	ldr	r2, [pc, #108]	; (801da80 <mbedtls_ssl_read_record+0x9c>)
 801da14:	2101      	movs	r1, #1
 801da16:	4628      	mov	r0, r5
 801da18:	f7f2 ff68 	bl	80108ec <mbedtls_debug_print_ret>
}
 801da1c:	4620      	mov	r0, r4
 801da1e:	b003      	add	sp, #12
 801da20:	bd30      	pop	{r4, r5, pc}
            ret = mbedtls_ssl_handle_message_type( ssl );
 801da22:	4628      	mov	r0, r5
 801da24:	f7ff fb6c 	bl	801d100 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801da28:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 801da2c:	4604      	mov	r4, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801da2e:	d0e6      	beq.n	801d9fe <mbedtls_ssl_read_record+0x1a>
        if( 0 != ret )
 801da30:	b128      	cbz	r0, 801da3e <mbedtls_ssl_read_record+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801da32:	4b14      	ldr	r3, [pc, #80]	; (801da84 <mbedtls_ssl_read_record+0xa0>)
 801da34:	9300      	str	r3, [sp, #0]
 801da36:	9001      	str	r0, [sp, #4]
 801da38:	f640 639b 	movw	r3, #3739	; 0xe9b
 801da3c:	e7e9      	b.n	801da12 <mbedtls_ssl_read_record+0x2e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801da3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801da40:	2b16      	cmp	r3, #22
 801da42:	d102      	bne.n	801da4a <mbedtls_ssl_read_record+0x66>
            mbedtls_ssl_update_handshake_status( ssl );
 801da44:	4628      	mov	r0, r5
 801da46:	f7ff fb49 	bl	801d0dc <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 801da4a:	4b0f      	ldr	r3, [pc, #60]	; (801da88 <mbedtls_ssl_read_record+0xa4>)
 801da4c:	9300      	str	r3, [sp, #0]
 801da4e:	4a0c      	ldr	r2, [pc, #48]	; (801da80 <mbedtls_ssl_read_record+0x9c>)
 801da50:	f640 63aa 	movw	r3, #3754	; 0xeaa
 801da54:	2102      	movs	r1, #2
 801da56:	4628      	mov	r0, r5
 801da58:	f7f2 ff18 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801da5c:	2400      	movs	r4, #0
 801da5e:	e7dd      	b.n	801da1c <mbedtls_ssl_read_record+0x38>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 801da60:	4b0a      	ldr	r3, [pc, #40]	; (801da8c <mbedtls_ssl_read_record+0xa8>)
 801da62:	9300      	str	r3, [sp, #0]
 801da64:	4a06      	ldr	r2, [pc, #24]	; (801da80 <mbedtls_ssl_read_record+0x9c>)
 801da66:	f640 63a6 	movw	r3, #3750	; 0xea6
 801da6a:	2102      	movs	r1, #2
 801da6c:	4628      	mov	r0, r5
 801da6e:	f7f2 ff0d 	bl	801088c <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 801da72:	2300      	movs	r3, #0
 801da74:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
 801da78:	e7e7      	b.n	801da4a <mbedtls_ssl_read_record+0x66>
 801da7a:	bf00      	nop
 801da7c:	080325f8 	.word	0x080325f8
 801da80:	08031c15 	.word	0x08031c15
 801da84:	08032607 	.word	0x08032607
 801da88:	08032646 	.word	0x08032646
 801da8c:	08032625 	.word	0x08032625

0801da90 <mbedtls_ssl_write_certificate>:
{
 801da90:	b5f0      	push	{r4, r5, r6, r7, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801da92:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801da94:	4a5b      	ldr	r2, [pc, #364]	; (801dc04 <mbedtls_ssl_write_certificate+0x174>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801da96:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801da98:	4b5b      	ldr	r3, [pc, #364]	; (801dc08 <mbedtls_ssl_write_certificate+0x178>)
{
 801da9a:	b085      	sub	sp, #20
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801da9c:	2102      	movs	r1, #2
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	f241 036b 	movw	r3, #4203	; 0x106b
{
 801daa4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801daa6:	f7f2 fef1 	bl	801088c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801daaa:	7aab      	ldrb	r3, [r5, #10]
 801daac:	2b0b      	cmp	r3, #11
 801daae:	d815      	bhi.n	801dadc <mbedtls_ssl_write_certificate+0x4c>
 801dab0:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801dab4:	40dd      	lsrs	r5, r3
 801dab6:	43ed      	mvns	r5, r5
 801dab8:	f015 0501 	ands.w	r5, r5, #1
 801dabc:	d10e      	bne.n	801dadc <mbedtls_ssl_write_certificate+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dabe:	4b53      	ldr	r3, [pc, #332]	; (801dc0c <mbedtls_ssl_write_certificate+0x17c>)
 801dac0:	9300      	str	r3, [sp, #0]
 801dac2:	f241 0372 	movw	r3, #4210	; 0x1072
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dac6:	4a4f      	ldr	r2, [pc, #316]	; (801dc04 <mbedtls_ssl_write_certificate+0x174>)
 801dac8:	2102      	movs	r1, #2
 801daca:	4620      	mov	r0, r4
 801dacc:	f7f2 fede 	bl	801088c <mbedtls_debug_print_msg>
            ssl->state++;
 801dad0:	6863      	ldr	r3, [r4, #4]
 801dad2:	3301      	adds	r3, #1
 801dad4:	6063      	str	r3, [r4, #4]
}
 801dad6:	4628      	mov	r0, r5
 801dad8:	b005      	add	sp, #20
 801dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801dadc:	6822      	ldr	r2, [r4, #0]
 801dade:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801dae2:	07db      	lsls	r3, r3, #31
 801dae4:	d407      	bmi.n	801daf6 <mbedtls_ssl_write_certificate+0x66>
        if( ssl->client_auth == 0 )
 801dae6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 801daea:	b925      	cbnz	r5, 801daf6 <mbedtls_ssl_write_certificate+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801daec:	4b47      	ldr	r3, [pc, #284]	; (801dc0c <mbedtls_ssl_write_certificate+0x17c>)
 801daee:	9300      	str	r3, [sp, #0]
 801daf0:	f241 037c 	movw	r3, #4220	; 0x107c
 801daf4:	e7e7      	b.n	801dac6 <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801daf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801daf8:	b113      	cbz	r3, 801db00 <mbedtls_ssl_write_certificate+0x70>
 801dafa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801dafe:	b90b      	cbnz	r3, 801db04 <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 801db00:	6c13      	ldr	r3, [r2, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801db02:	b103      	cbz	r3, 801db06 <mbedtls_ssl_write_certificate+0x76>
 801db04:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 801db06:	9301      	str	r3, [sp, #4]
 801db08:	4b41      	ldr	r3, [pc, #260]	; (801dc10 <mbedtls_ssl_write_certificate+0x180>)
 801db0a:	9300      	str	r3, [sp, #0]
 801db0c:	4a3d      	ldr	r2, [pc, #244]	; (801dc04 <mbedtls_ssl_write_certificate+0x174>)
 801db0e:	f241 039f 	movw	r3, #4255	; 0x109f
 801db12:	2103      	movs	r1, #3
 801db14:	4620      	mov	r0, r4
 801db16:	f7f3 f813 	bl	8010b40 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801db1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801db1c:	b113      	cbz	r3, 801db24 <mbedtls_ssl_write_certificate+0x94>
 801db1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801db22:	b91b      	cbnz	r3, 801db2c <mbedtls_ssl_write_certificate+0x9c>
        key_cert = ssl->conf->key_cert;
 801db24:	6823      	ldr	r3, [r4, #0]
 801db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801db28:	2b00      	cmp	r3, #0
 801db2a:	d05e      	beq.n	801dbea <mbedtls_ssl_write_certificate+0x15a>
 801db2c:	681d      	ldr	r5, [r3, #0]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801db2e:	f241 3785 	movw	r7, #4997	; 0x1385
 801db32:	2307      	movs	r3, #7
    while( crt != NULL )
 801db34:	bb45      	cbnz	r5, 801db88 <mbedtls_ssl_write_certificate+0xf8>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 801db36:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801db3a:	1fda      	subs	r2, r3, #7
 801db3c:	0c10      	lsrs	r0, r2, #16
 801db3e:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 801db40:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801db44:	0a10      	lsrs	r0, r2, #8
 801db46:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 801db48:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801db4c:	718a      	strb	r2, [r1, #6]
    ssl->out_msglen  = i;
 801db4e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801db52:	2316      	movs	r3, #22
 801db54:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 801db58:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801db5c:	220b      	movs	r2, #11
 801db5e:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801db60:	6863      	ldr	r3, [r4, #4]
 801db62:	3301      	adds	r3, #1
 801db64:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801db66:	4620      	mov	r0, r4
 801db68:	f7fe ffee 	bl	801cb48 <mbedtls_ssl_write_record>
 801db6c:	4605      	mov	r5, r0
 801db6e:	2800      	cmp	r0, #0
 801db70:	d03d      	beq.n	801dbee <mbedtls_ssl_write_certificate+0x15e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801db72:	4b28      	ldr	r3, [pc, #160]	; (801dc14 <mbedtls_ssl_write_certificate+0x184>)
 801db74:	9001      	str	r0, [sp, #4]
 801db76:	9300      	str	r3, [sp, #0]
 801db78:	4a22      	ldr	r2, [pc, #136]	; (801dc04 <mbedtls_ssl_write_certificate+0x174>)
 801db7a:	f241 03cf 	movw	r3, #4303	; 0x10cf
 801db7e:	2101      	movs	r1, #1
 801db80:	4620      	mov	r0, r4
 801db82:	f7f2 feb3 	bl	80108ec <mbedtls_debug_print_ret>
        return( ret );
 801db86:	e7a6      	b.n	801dad6 <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 801db88:	686a      	ldr	r2, [r5, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801db8a:	1af9      	subs	r1, r7, r3
 801db8c:	1cd8      	adds	r0, r3, #3
 801db8e:	4291      	cmp	r1, r2
 801db90:	eb00 0602 	add.w	r6, r0, r2
 801db94:	d20e      	bcs.n	801dbb4 <mbedtls_ssl_write_certificate+0x124>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801db96:	f241 3388 	movw	r3, #5000	; 0x1388
 801db9a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801db9e:	4b1e      	ldr	r3, [pc, #120]	; (801dc18 <mbedtls_ssl_write_certificate+0x188>)
 801dba0:	9300      	str	r3, [sp, #0]
 801dba2:	4a18      	ldr	r2, [pc, #96]	; (801dc04 <mbedtls_ssl_write_certificate+0x174>)
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801dba4:	4d1d      	ldr	r5, [pc, #116]	; (801dc1c <mbedtls_ssl_write_certificate+0x18c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801dba6:	f241 03b2 	movw	r3, #4274	; 0x10b2
 801dbaa:	2101      	movs	r1, #1
 801dbac:	4620      	mov	r0, r4
 801dbae:	f7f2 fe6d 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801dbb2:	e790      	b.n	801dad6 <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 801dbb4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dbb8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801dbbc:	f801 c003 	strb.w	ip, [r1, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 801dbc0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dbc4:	4419      	add	r1, r3
 801dbc6:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801dbca:	f881 c001 	strb.w	ip, [r1, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 801dbce:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dbd2:	440b      	add	r3, r1
 801dbd4:	709a      	strb	r2, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 801dbd6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801dbda:	68a9      	ldr	r1, [r5, #8]
 801dbdc:	4418      	add	r0, r3
 801dbde:	f004 fae3 	bl	80221a8 <memcpy>
        i += n; crt = crt->next;
 801dbe2:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 801dbe6:	4633      	mov	r3, r6
 801dbe8:	e7a4      	b.n	801db34 <mbedtls_ssl_write_certificate+0xa4>
 801dbea:	2307      	movs	r3, #7
 801dbec:	e7a3      	b.n	801db36 <mbedtls_ssl_write_certificate+0xa6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 801dbee:	4b0c      	ldr	r3, [pc, #48]	; (801dc20 <mbedtls_ssl_write_certificate+0x190>)
 801dbf0:	9300      	str	r3, [sp, #0]
 801dbf2:	4a04      	ldr	r2, [pc, #16]	; (801dc04 <mbedtls_ssl_write_certificate+0x174>)
 801dbf4:	f241 03d3 	movw	r3, #4307	; 0x10d3
 801dbf8:	2102      	movs	r1, #2
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	f7f2 fe46 	bl	801088c <mbedtls_debug_print_msg>
    return( ret );
 801dc00:	e769      	b.n	801dad6 <mbedtls_ssl_write_certificate+0x46>
 801dc02:	bf00      	nop
 801dc04:	08031c15 	.word	0x08031c15
 801dc08:	08032655 	.word	0x08032655
 801dc0c:	0803266a 	.word	0x0803266a
 801dc10:	08032684 	.word	0x08032684
 801dc14:	080310ad 	.word	0x080310ad
 801dc18:	08032694 	.word	0x08032694
 801dc1c:	ffff8b00 	.word	0xffff8b00
 801dc20:	080326b3 	.word	0x080326b3

0801dc24 <mbedtls_ssl_write_change_cipher_spec>:
{
 801dc24:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801dc26:	4b17      	ldr	r3, [pc, #92]	; (801dc84 <mbedtls_ssl_write_change_cipher_spec+0x60>)
 801dc28:	4a17      	ldr	r2, [pc, #92]	; (801dc88 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801dc2a:	9300      	str	r3, [sp, #0]
{
 801dc2c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801dc2e:	f241 235c 	movw	r3, #4700	; 0x125c
 801dc32:	2102      	movs	r1, #2
 801dc34:	f7f2 fe2a 	bl	801088c <mbedtls_debug_print_msg>
    ssl->out_msglen  = 1;
 801dc38:	2601      	movs	r6, #1
 801dc3a:	2314      	movs	r3, #20
 801dc3c:	e9c4 3629 	strd	r3, r6, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = 1;
 801dc40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801dc44:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801dc46:	6863      	ldr	r3, [r4, #4]
 801dc48:	4433      	add	r3, r6
 801dc4a:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801dc4c:	4620      	mov	r0, r4
 801dc4e:	f7fe ff7b 	bl	801cb48 <mbedtls_ssl_write_record>
 801dc52:	4605      	mov	r5, r0
 801dc54:	b160      	cbz	r0, 801dc70 <mbedtls_ssl_write_change_cipher_spec+0x4c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801dc56:	4b0d      	ldr	r3, [pc, #52]	; (801dc8c <mbedtls_ssl_write_change_cipher_spec+0x68>)
 801dc58:	9001      	str	r0, [sp, #4]
 801dc5a:	9300      	str	r3, [sp, #0]
 801dc5c:	4a0a      	ldr	r2, [pc, #40]	; (801dc88 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801dc5e:	f241 2366 	movw	r3, #4710	; 0x1266
 801dc62:	4631      	mov	r1, r6
 801dc64:	4620      	mov	r0, r4
 801dc66:	f7f2 fe41 	bl	80108ec <mbedtls_debug_print_ret>
}
 801dc6a:	4628      	mov	r0, r5
 801dc6c:	b002      	add	sp, #8
 801dc6e:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 801dc70:	4b07      	ldr	r3, [pc, #28]	; (801dc90 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 801dc72:	9300      	str	r3, [sp, #0]
 801dc74:	4a04      	ldr	r2, [pc, #16]	; (801dc88 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801dc76:	f241 236a 	movw	r3, #4714	; 0x126a
 801dc7a:	2102      	movs	r1, #2
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	f7f2 fe05 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801dc82:	e7f2      	b.n	801dc6a <mbedtls_ssl_write_change_cipher_spec+0x46>
 801dc84:	080326c8 	.word	0x080326c8
 801dc88:	08031c15 	.word	0x08031c15
 801dc8c:	080310ad 	.word	0x080310ad
 801dc90:	080326e4 	.word	0x080326e4

0801dc94 <mbedtls_ssl_parse_change_cipher_spec>:
{
 801dc94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801dc96:	4b36      	ldr	r3, [pc, #216]	; (801dd70 <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 801dc98:	4a36      	ldr	r2, [pc, #216]	; (801dd74 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dc9a:	9300      	str	r3, [sp, #0]
{
 801dc9c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801dc9e:	f241 2373 	movw	r3, #4723	; 0x1273
 801dca2:	2102      	movs	r1, #2
 801dca4:	f7f2 fdf2 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801dca8:	4620      	mov	r0, r4
 801dcaa:	f7ff fe9b 	bl	801d9e4 <mbedtls_ssl_read_record>
 801dcae:	4605      	mov	r5, r0
 801dcb0:	b160      	cbz	r0, 801dccc <mbedtls_ssl_parse_change_cipher_spec+0x38>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801dcb2:	4b31      	ldr	r3, [pc, #196]	; (801dd78 <mbedtls_ssl_parse_change_cipher_spec+0xe4>)
 801dcb4:	9001      	str	r0, [sp, #4]
 801dcb6:	9300      	str	r3, [sp, #0]
 801dcb8:	4a2e      	ldr	r2, [pc, #184]	; (801dd74 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dcba:	f241 2377 	movw	r3, #4727	; 0x1277
 801dcbe:	2101      	movs	r1, #1
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f7f2 fe13 	bl	80108ec <mbedtls_debug_print_ret>
}
 801dcc6:	4628      	mov	r0, r5
 801dcc8:	b003      	add	sp, #12
 801dcca:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 801dccc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801dcce:	2b14      	cmp	r3, #20
 801dcd0:	d00f      	beq.n	801dcf2 <mbedtls_ssl_parse_change_cipher_spec+0x5e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801dcd2:	4b2a      	ldr	r3, [pc, #168]	; (801dd7c <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801dcd4:	4a27      	ldr	r2, [pc, #156]	; (801dd74 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dcd6:	9300      	str	r3, [sp, #0]
 801dcd8:	2101      	movs	r1, #1
 801dcda:	f241 237d 	movw	r3, #4733	; 0x127d
 801dcde:	4620      	mov	r0, r4
 801dce0:	f7f2 fdd4 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801dce4:	220a      	movs	r2, #10
 801dce6:	2102      	movs	r1, #2
 801dce8:	4620      	mov	r0, r4
 801dcea:	f7ff fa65 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801dcee:	4d24      	ldr	r5, [pc, #144]	; (801dd80 <mbedtls_ssl_parse_change_cipher_spec+0xec>)
 801dcf0:	e7e9      	b.n	801dcc6 <mbedtls_ssl_parse_change_cipher_spec+0x32>
    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 801dcf2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801dcf4:	2b01      	cmp	r3, #1
 801dcf6:	d103      	bne.n	801dd00 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
 801dcf8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801dcfa:	781b      	ldrb	r3, [r3, #0]
 801dcfc:	2b01      	cmp	r3, #1
 801dcfe:	d00f      	beq.n	801dd20 <mbedtls_ssl_parse_change_cipher_spec+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801dd00:	4b1e      	ldr	r3, [pc, #120]	; (801dd7c <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801dd02:	4a1c      	ldr	r2, [pc, #112]	; (801dd74 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dd04:	9300      	str	r3, [sp, #0]
 801dd06:	2101      	movs	r1, #1
 801dd08:	f241 2385 	movw	r3, #4741	; 0x1285
 801dd0c:	4620      	mov	r0, r4
 801dd0e:	f7f2 fdbd 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801dd12:	2232      	movs	r2, #50	; 0x32
 801dd14:	2102      	movs	r1, #2
 801dd16:	4620      	mov	r0, r4
 801dd18:	f7ff fa4e 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 801dd1c:	4d19      	ldr	r5, [pc, #100]	; (801dd84 <mbedtls_ssl_parse_change_cipher_spec+0xf0>)
 801dd1e:	e7d2      	b.n	801dcc6 <mbedtls_ssl_parse_change_cipher_spec+0x32>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 801dd20:	4b19      	ldr	r3, [pc, #100]	; (801dd88 <mbedtls_ssl_parse_change_cipher_spec+0xf4>)
 801dd22:	4a14      	ldr	r2, [pc, #80]	; (801dd74 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801dd24:	9300      	str	r3, [sp, #0]
 801dd26:	2103      	movs	r1, #3
 801dd28:	4620      	mov	r0, r4
 801dd2a:	f241 238f 	movw	r3, #4751	; 0x128f
 801dd2e:	f7f2 fdad 	bl	801088c <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 801dd32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801dd34:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->session_in = ssl->session_negotiate;
 801dd36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dd38:	62a3      	str	r3, [r4, #40]	; 0x28
    memset( ssl->in_ctr, 0, 8 );
 801dd3a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801dd3c:	601d      	str	r5, [r3, #0]
 801dd3e:	605d      	str	r5, [r3, #4]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801dd40:	6963      	ldr	r3, [r4, #20]
 801dd42:	2b01      	cmp	r3, #1
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 801dd44:	bfc8      	it	gt
 801dd46:	6ca1      	ldrgt	r1, [r4, #72]	; 0x48
 801dd48:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801dd4a:	bfc2      	ittt	gt
 801dd4c:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
 801dd50:	1a52      	subgt	r2, r2, r1
 801dd52:	189b      	addgt	r3, r3, r2
 801dd54:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->state++;
 801dd56:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801dd58:	4a06      	ldr	r2, [pc, #24]	; (801dd74 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
    ssl->state++;
 801dd5a:	3301      	adds	r3, #1
 801dd5c:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801dd5e:	4b0b      	ldr	r3, [pc, #44]	; (801dd8c <mbedtls_ssl_parse_change_cipher_spec+0xf8>)
 801dd60:	9300      	str	r3, [sp, #0]
 801dd62:	2102      	movs	r1, #2
 801dd64:	f241 23c1 	movw	r3, #4801	; 0x12c1
 801dd68:	4620      	mov	r0, r4
 801dd6a:	f7f2 fd8f 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801dd6e:	e7aa      	b.n	801dcc6 <mbedtls_ssl_parse_change_cipher_spec+0x32>
 801dd70:	08032700 	.word	0x08032700
 801dd74:	08031c15 	.word	0x08031c15
 801dd78:	08031106 	.word	0x08031106
 801dd7c:	0803271c 	.word	0x0803271c
 801dd80:	ffff8900 	.word	0xffff8900
 801dd84:	ffff8200 	.word	0xffff8200
 801dd88:	0803273b 	.word	0x0803273b
 801dd8c:	0803276c 	.word	0x0803276c

0801dd90 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801dd90:	7a4a      	ldrb	r2, [r1, #9]
 801dd92:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801dd94:	2a07      	cmp	r2, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 801dd96:	bf0c      	ite	eq
 801dd98:	4a02      	ldreq	r2, [pc, #8]	; (801dda4 <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 801dd9a:	4a03      	ldrne	r2, [pc, #12]	; (801dda8 <mbedtls_ssl_optimize_checksum+0x18>)
 801dd9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
}
 801dda0:	4770      	bx	lr
 801dda2:	bf00      	nop
 801dda4:	0801c333 	.word	0x0801c333
 801dda8:	0801c329 	.word	0x0801c329

0801ddac <mbedtls_ssl_write_finished>:
{
 801ddac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801ddae:	4b39      	ldr	r3, [pc, #228]	; (801de94 <mbedtls_ssl_write_finished+0xe8>)
 801ddb0:	4a39      	ldr	r2, [pc, #228]	; (801de98 <mbedtls_ssl_write_finished+0xec>)
 801ddb2:	9300      	str	r3, [sp, #0]
{
 801ddb4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801ddb6:	f241 4371 	movw	r3, #5233	; 0x1471
 801ddba:	2102      	movs	r1, #2
 801ddbc:	f7f2 fd66 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801ddc0:	6963      	ldr	r3, [r4, #20]
 801ddc2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801ddc6:	2b01      	cmp	r3, #1
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 801ddc8:	bfc1      	itttt	gt
 801ddca:	6ca2      	ldrgt	r2, [r4, #72]	; 0x48
 801ddcc:	e9d2 3203 	ldrdgt	r3, r2, [r2, #12]
 801ddd0:	1a9b      	subgt	r3, r3, r2
 801ddd2:	18c9      	addgt	r1, r1, r3
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 801ddd4:	6823      	ldr	r3, [r4, #0]
 801ddd6:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 801ddda:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801ddde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dde0:	f002 0201 	and.w	r2, r2, #1
 801dde4:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801dde8:	3104      	adds	r1, #4
 801ddea:	4620      	mov	r0, r4
 801ddec:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801ddee:	6963      	ldr	r3, [r4, #20]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801ddf0:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	bf0c      	ite	eq
 801ddf8:	2524      	moveq	r5, #36	; 0x24
 801ddfa:	250c      	movne	r5, #12
    ssl->verify_data_len = hash_len;
 801ddfc:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801de00:	462a      	mov	r2, r5
 801de02:	1d31      	adds	r1, r6, #4
 801de04:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 801de08:	f004 f9ce 	bl	80221a8 <memcpy>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801de0c:	2316      	movs	r3, #22
 801de0e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msglen  = 4 + hash_len;
 801de12:	3504      	adds	r5, #4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801de14:	2314      	movs	r3, #20
    ssl->out_msglen  = 4 + hash_len;
 801de16:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801de1a:	7033      	strb	r3, [r6, #0]
    if( ssl->handshake->resume != 0 )
 801de1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801de1e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801de22:	b353      	cbz	r3, 801de7a <mbedtls_ssl_write_finished+0xce>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801de24:	6823      	ldr	r3, [r4, #0]
 801de26:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801de2a:	07db      	lsls	r3, r3, #31
 801de2c:	d401      	bmi.n	801de32 <mbedtls_ssl_write_finished+0x86>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801de2e:	230f      	movs	r3, #15
        ssl->state++;
 801de30:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 801de32:	4b1a      	ldr	r3, [pc, #104]	; (801de9c <mbedtls_ssl_write_finished+0xf0>)
 801de34:	4a18      	ldr	r2, [pc, #96]	; (801de98 <mbedtls_ssl_write_finished+0xec>)
 801de36:	9300      	str	r3, [sp, #0]
 801de38:	2103      	movs	r1, #3
 801de3a:	f241 43a7 	movw	r3, #5287	; 0x14a7
 801de3e:	4620      	mov	r0, r4
 801de40:	f7f2 fd24 	bl	801088c <mbedtls_debug_print_msg>
    memset( ssl->out_ctr, 0, 8 );
 801de44:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801de48:	2200      	movs	r2, #0
 801de4a:	601a      	str	r2, [r3, #0]
 801de4c:	605a      	str	r2, [r3, #4]
    ssl->transform_out = ssl->transform_negotiate;
 801de4e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801de50:	6423      	str	r3, [r4, #64]	; 0x40
    ssl->session_out = ssl->session_negotiate;
 801de52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801de54:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801de56:	4620      	mov	r0, r4
 801de58:	f7fe fe76 	bl	801cb48 <mbedtls_ssl_write_record>
 801de5c:	4605      	mov	r5, r0
 801de5e:	b178      	cbz	r0, 801de80 <mbedtls_ssl_write_finished+0xd4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801de60:	4b0f      	ldr	r3, [pc, #60]	; (801dea0 <mbedtls_ssl_write_finished+0xf4>)
 801de62:	9001      	str	r0, [sp, #4]
 801de64:	9300      	str	r3, [sp, #0]
 801de66:	4a0c      	ldr	r2, [pc, #48]	; (801de98 <mbedtls_ssl_write_finished+0xec>)
 801de68:	f241 43da 	movw	r3, #5338	; 0x14da
 801de6c:	2101      	movs	r1, #1
 801de6e:	4620      	mov	r0, r4
 801de70:	f7f2 fd3c 	bl	80108ec <mbedtls_debug_print_ret>
}
 801de74:	4628      	mov	r0, r5
 801de76:	b002      	add	sp, #8
 801de78:	bd70      	pop	{r4, r5, r6, pc}
        ssl->state++;
 801de7a:	6863      	ldr	r3, [r4, #4]
 801de7c:	3301      	adds	r3, #1
 801de7e:	e7d7      	b.n	801de30 <mbedtls_ssl_write_finished+0x84>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 801de80:	4b08      	ldr	r3, [pc, #32]	; (801dea4 <mbedtls_ssl_write_finished+0xf8>)
 801de82:	9300      	str	r3, [sp, #0]
 801de84:	4a04      	ldr	r2, [pc, #16]	; (801de98 <mbedtls_ssl_write_finished+0xec>)
 801de86:	f241 43de 	movw	r3, #5342	; 0x14de
 801de8a:	2102      	movs	r1, #2
 801de8c:	4620      	mov	r0, r4
 801de8e:	f7f2 fcfd 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801de92:	e7ef      	b.n	801de74 <mbedtls_ssl_write_finished+0xc8>
 801de94:	08032788 	.word	0x08032788
 801de98:	08031c15 	.word	0x08031c15
 801de9c:	0803279a 	.word	0x0803279a
 801dea0:	080310ad 	.word	0x080310ad
 801dea4:	080327cc 	.word	0x080327cc

0801dea8 <mbedtls_ssl_parse_finished>:
{
 801dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801deaa:	b087      	sub	sp, #28
 801deac:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 801deae:	4b44      	ldr	r3, [pc, #272]	; (801dfc0 <mbedtls_ssl_parse_finished+0x118>)
 801deb0:	4a44      	ldr	r2, [pc, #272]	; (801dfc4 <mbedtls_ssl_parse_finished+0x11c>)
 801deb2:	9300      	str	r3, [sp, #0]
 801deb4:	2102      	movs	r1, #2
 801deb6:	f241 43ef 	movw	r3, #5359	; 0x14ef
 801deba:	f7f2 fce7 	bl	801088c <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 801debe:	6823      	ldr	r3, [r4, #0]
 801dec0:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801dec4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dec6:	43d2      	mvns	r2, r2
 801dec8:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801decc:	f002 0201 	and.w	r2, r2, #1
 801ded0:	a903      	add	r1, sp, #12
 801ded2:	4620      	mov	r0, r4
 801ded4:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ded6:	4620      	mov	r0, r4
 801ded8:	f7ff fd84 	bl	801d9e4 <mbedtls_ssl_read_record>
 801dedc:	4605      	mov	r5, r0
 801dede:	b160      	cbz	r0, 801defa <mbedtls_ssl_parse_finished+0x52>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801dee0:	4b39      	ldr	r3, [pc, #228]	; (801dfc8 <mbedtls_ssl_parse_finished+0x120>)
 801dee2:	9001      	str	r0, [sp, #4]
 801dee4:	9300      	str	r3, [sp, #0]
 801dee6:	4a37      	ldr	r2, [pc, #220]	; (801dfc4 <mbedtls_ssl_parse_finished+0x11c>)
 801dee8:	f241 43f5 	movw	r3, #5365	; 0x14f5
 801deec:	2101      	movs	r1, #1
 801deee:	4620      	mov	r0, r4
 801def0:	f7f2 fcfc 	bl	80108ec <mbedtls_debug_print_ret>
}
 801def4:	4628      	mov	r0, r5
 801def6:	b007      	add	sp, #28
 801def8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801defa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801defc:	2b16      	cmp	r3, #22
 801defe:	d00f      	beq.n	801df20 <mbedtls_ssl_parse_finished+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801df00:	4b32      	ldr	r3, [pc, #200]	; (801dfcc <mbedtls_ssl_parse_finished+0x124>)
 801df02:	4a30      	ldr	r2, [pc, #192]	; (801dfc4 <mbedtls_ssl_parse_finished+0x11c>)
 801df04:	9300      	str	r3, [sp, #0]
 801df06:	2101      	movs	r1, #1
 801df08:	f241 43fb 	movw	r3, #5371	; 0x14fb
 801df0c:	4620      	mov	r0, r4
 801df0e:	f7f2 fcbd 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801df12:	220a      	movs	r2, #10
 801df14:	2102      	movs	r1, #2
 801df16:	4620      	mov	r0, r4
 801df18:	f7ff f94e 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801df1c:	4d2c      	ldr	r5, [pc, #176]	; (801dfd0 <mbedtls_ssl_parse_finished+0x128>)
 801df1e:	e7e9      	b.n	801def4 <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 801df20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801df22:	781a      	ldrb	r2, [r3, #0]
 801df24:	2a14      	cmp	r2, #20
 801df26:	d103      	bne.n	801df30 <mbedtls_ssl_parse_finished+0x88>
 801df28:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801df2c:	2a10      	cmp	r2, #16
 801df2e:	d00f      	beq.n	801df50 <mbedtls_ssl_parse_finished+0xa8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801df30:	4b26      	ldr	r3, [pc, #152]	; (801dfcc <mbedtls_ssl_parse_finished+0x124>)
 801df32:	9300      	str	r3, [sp, #0]
 801df34:	f241 530c 	movw	r3, #5388	; 0x150c
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801df38:	4a22      	ldr	r2, [pc, #136]	; (801dfc4 <mbedtls_ssl_parse_finished+0x11c>)
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801df3a:	4d26      	ldr	r5, [pc, #152]	; (801dfd4 <mbedtls_ssl_parse_finished+0x12c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801df3c:	2101      	movs	r1, #1
 801df3e:	4620      	mov	r0, r4
 801df40:	f7f2 fca4 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801df44:	2232      	movs	r2, #50	; 0x32
 801df46:	2102      	movs	r1, #2
 801df48:	4620      	mov	r0, r4
 801df4a:	f7ff f935 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801df4e:	e7d1      	b.n	801def4 <mbedtls_ssl_parse_finished+0x4c>
 801df50:	1cd9      	adds	r1, r3, #3
 801df52:	ae03      	add	r6, sp, #12
 801df54:	330f      	adds	r3, #15
    unsigned char diff = 0;
 801df56:	4602      	mov	r2, r0
        diff |= A[i] ^ B[i];
 801df58:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 801df5c:	f816 0b01 	ldrb.w	r0, [r6], #1
    for( i = 0; i < n; i++ )
 801df60:	4299      	cmp	r1, r3
        diff |= A[i] ^ B[i];
 801df62:	ea80 0007 	eor.w	r0, r0, r7
 801df66:	ea42 0200 	orr.w	r2, r2, r0
    for( i = 0; i < n; i++ )
 801df6a:	d1f5      	bne.n	801df58 <mbedtls_ssl_parse_finished+0xb0>
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 801df6c:	b122      	cbz	r2, 801df78 <mbedtls_ssl_parse_finished+0xd0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801df6e:	4b17      	ldr	r3, [pc, #92]	; (801dfcc <mbedtls_ssl_parse_finished+0x124>)
 801df70:	9300      	str	r3, [sp, #0]
 801df72:	f241 5315 	movw	r3, #5397	; 0x1515
 801df76:	e7df      	b.n	801df38 <mbedtls_ssl_parse_finished+0x90>
    ssl->verify_data_len = hash_len;
 801df78:	230c      	movs	r3, #12
 801df7a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801df7e:	446b      	add	r3, sp
 801df80:	cb03      	ldmia	r3!, {r0, r1}
 801df82:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 801df86:	6818      	ldr	r0, [r3, #0]
    if( ssl->handshake->resume != 0 )
 801df88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801df8a:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 801df8e:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    if( ssl->handshake->resume != 0 )
 801df92:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801df96:	b183      	cbz	r3, 801dfba <mbedtls_ssl_parse_finished+0x112>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801df98:	6823      	ldr	r3, [r4, #0]
 801df9a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801df9e:	07db      	lsls	r3, r3, #31
 801dfa0:	d401      	bmi.n	801dfa6 <mbedtls_ssl_parse_finished+0xfe>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 801dfa2:	230a      	movs	r3, #10
        ssl->state++;
 801dfa4:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 801dfa6:	4b0c      	ldr	r3, [pc, #48]	; (801dfd8 <mbedtls_ssl_parse_finished+0x130>)
 801dfa8:	9300      	str	r3, [sp, #0]
 801dfaa:	4a06      	ldr	r2, [pc, #24]	; (801dfc4 <mbedtls_ssl_parse_finished+0x11c>)
 801dfac:	f241 5333 	movw	r3, #5427	; 0x1533
 801dfb0:	2102      	movs	r1, #2
 801dfb2:	4620      	mov	r0, r4
 801dfb4:	f7f2 fc6a 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801dfb8:	e79c      	b.n	801def4 <mbedtls_ssl_parse_finished+0x4c>
        ssl->state++;
 801dfba:	6863      	ldr	r3, [r4, #4]
 801dfbc:	3301      	adds	r3, #1
 801dfbe:	e7f1      	b.n	801dfa4 <mbedtls_ssl_parse_finished+0xfc>
 801dfc0:	080327de 	.word	0x080327de
 801dfc4:	08031c15 	.word	0x08031c15
 801dfc8:	08031106 	.word	0x08031106
 801dfcc:	080327f0 	.word	0x080327f0
 801dfd0:	ffff8900 	.word	0xffff8900
 801dfd4:	ffff8180 	.word	0xffff8180
 801dfd8:	08032805 	.word	0x08032805

0801dfdc <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 801dfdc:	2280      	movs	r2, #128	; 0x80
 801dfde:	2100      	movs	r1, #0
 801dfe0:	f004 b90a 	b.w	80221f8 <memset>

0801dfe4 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 801dfe4:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 801dfe8:	f361 0383 	bfi	r3, r1, #2, #2
 801dfec:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
}
 801dff0:	4770      	bx	lr

0801dff2 <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
 801dff2:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801dff6:	4770      	bx	lr

0801dff8 <mbedtls_ssl_conf_dbg>:
    conf->p_dbg      = p_dbg;
 801dff8:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 801dffc:	4770      	bx	lr

0801dffe <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 801dffe:	e9c0 2306 	strd	r2, r3, [r0, #24]
    ssl->f_recv_timeout = f_recv_timeout;
 801e002:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 801e004:	6241      	str	r1, [r0, #36]	; 0x24
    ssl->f_recv_timeout = f_recv_timeout;
 801e006:	6203      	str	r3, [r0, #32]
}
 801e008:	4770      	bx	lr

0801e00a <mbedtls_ssl_conf_read_timeout>:
    conf->read_timeout   = timeout;
 801e00a:	6581      	str	r1, [r0, #88]	; 0x58
}
 801e00c:	4770      	bx	lr

0801e00e <mbedtls_ssl_conf_own_cert>:
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 801e00e:	3040      	adds	r0, #64	; 0x40
 801e010:	f7fd bf62 	b.w	801bed8 <ssl_append_key_cert>

0801e014 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
 801e014:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 801e018:	4770      	bx	lr
	...

0801e01c <mbedtls_ssl_set_hostname>:
{
 801e01c:	b570      	push	{r4, r5, r6, lr}
 801e01e:	4606      	mov	r6, r0
    if( hostname == NULL )
 801e020:	460d      	mov	r5, r1
 801e022:	b1b9      	cbz	r1, 801e054 <mbedtls_ssl_set_hostname+0x38>
    hostname_len = strlen( hostname );
 801e024:	4608      	mov	r0, r1
 801e026:	f7e2 f8dd 	bl	80001e4 <strlen>
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e02a:	28ff      	cmp	r0, #255	; 0xff
    hostname_len = strlen( hostname );
 801e02c:	4604      	mov	r4, r0
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e02e:	d811      	bhi.n	801e054 <mbedtls_ssl_set_hostname+0x38>
    ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 801e030:	4b0a      	ldr	r3, [pc, #40]	; (801e05c <mbedtls_ssl_set_hostname+0x40>)
 801e032:	1c41      	adds	r1, r0, #1
 801e034:	681b      	ldr	r3, [r3, #0]
 801e036:	2001      	movs	r0, #1
 801e038:	4798      	blx	r3
 801e03a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    if( ssl->hostname == NULL )
 801e03e:	b158      	cbz	r0, 801e058 <mbedtls_ssl_set_hostname+0x3c>
    memcpy( ssl->hostname, hostname, hostname_len );
 801e040:	4622      	mov	r2, r4
 801e042:	4629      	mov	r1, r5
 801e044:	f004 f8b0 	bl	80221a8 <memcpy>
    ssl->hostname[hostname_len] = '\0';
 801e048:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
 801e04c:	2300      	movs	r3, #0
 801e04e:	5513      	strb	r3, [r2, r4]
    return( 0 );
 801e050:	4618      	mov	r0, r3
}
 801e052:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e054:	4802      	ldr	r0, [pc, #8]	; (801e060 <mbedtls_ssl_set_hostname+0x44>)
 801e056:	e7fc      	b.n	801e052 <mbedtls_ssl_set_hostname+0x36>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e058:	4802      	ldr	r0, [pc, #8]	; (801e064 <mbedtls_ssl_set_hostname+0x48>)
 801e05a:	e7fa      	b.n	801e052 <mbedtls_ssl_set_hostname+0x36>
 801e05c:	20000538 	.word	0x20000538
 801e060:	ffff8f00 	.word	0xffff8f00
 801e064:	ffff8100 	.word	0xffff8100

0801e068 <mbedtls_ssl_get_verify_result>:
    if( ssl->session != NULL )
 801e068:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e06a:	b10b      	cbz	r3, 801e070 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session_negotiate->verify_result );
 801e06c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801e06e:	4770      	bx	lr
    if( ssl->session_negotiate != NULL )
 801e070:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e072:	2b00      	cmp	r3, #0
 801e074:	d1fa      	bne.n	801e06c <mbedtls_ssl_get_verify_result+0x4>
    return( 0xFFFFFFFF );
 801e076:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e07a:	4770      	bx	lr

0801e07c <mbedtls_ssl_get_record_expansion>:
    const mbedtls_ssl_transform *transform = ssl->transform_out;
 801e07c:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 801e07e:	b507      	push	{r0, r1, r2, lr}
    if( transform == NULL )
 801e080:	b1d3      	cbz	r3, 801e0b8 <mbedtls_ssl_get_record_expansion+0x3c>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801e082:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e084:	b161      	cbz	r1, 801e0a0 <mbedtls_ssl_get_record_expansion+0x24>
    return ctx->cipher_info->mode;
 801e086:	784a      	ldrb	r2, [r1, #1]
    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
 801e088:	2a02      	cmp	r2, #2
 801e08a:	d005      	beq.n	801e098 <mbedtls_ssl_get_record_expansion+0x1c>
 801e08c:	3a06      	subs	r2, #6
 801e08e:	2a02      	cmp	r2, #2
 801e090:	d806      	bhi.n	801e0a0 <mbedtls_ssl_get_record_expansion+0x24>
            transform_expansion = transform->minlen;
 801e092:	6898      	ldr	r0, [r3, #8]
    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
 801e094:	3005      	adds	r0, #5
 801e096:	e00c      	b.n	801e0b2 <mbedtls_ssl_get_record_expansion+0x36>
            transform_expansion = transform->maclen
 801e098:	6958      	ldr	r0, [r3, #20]
 801e09a:	694b      	ldr	r3, [r1, #20]
 801e09c:	4418      	add	r0, r3
            break;
 801e09e:	e7f9      	b.n	801e094 <mbedtls_ssl_get_record_expansion+0x18>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801e0a0:	4b06      	ldr	r3, [pc, #24]	; (801e0bc <mbedtls_ssl_get_record_expansion+0x40>)
 801e0a2:	9300      	str	r3, [sp, #0]
 801e0a4:	4a06      	ldr	r2, [pc, #24]	; (801e0c0 <mbedtls_ssl_get_record_expansion+0x44>)
 801e0a6:	f641 1346 	movw	r3, #6470	; 0x1946
 801e0aa:	2101      	movs	r1, #1
 801e0ac:	f7f2 fbee 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801e0b0:	4804      	ldr	r0, [pc, #16]	; (801e0c4 <mbedtls_ssl_get_record_expansion+0x48>)
}
 801e0b2:	b003      	add	sp, #12
 801e0b4:	f85d fb04 	ldr.w	pc, [sp], #4
        return( (int) mbedtls_ssl_hdr_len( ssl ) );
 801e0b8:	2005      	movs	r0, #5
 801e0ba:	e7fa      	b.n	801e0b2 <mbedtls_ssl_get_record_expansion+0x36>
 801e0bc:	08031745 	.word	0x08031745
 801e0c0:	08031c15 	.word	0x08031c15
 801e0c4:	ffff9400 	.word	0xffff9400

0801e0c8 <mbedtls_ssl_get_max_frag_len>:
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e0c8:	6803      	ldr	r3, [r0, #0]
 801e0ca:	4a09      	ldr	r2, [pc, #36]	; (801e0f0 <mbedtls_ssl_get_max_frag_len+0x28>)
 801e0cc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    if( ssl->session_out != NULL &&
 801e0d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e0d2:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801e0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if( ssl->session_out != NULL &&
 801e0da:	b131      	cbz	r1, 801e0ea <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 801e0dc:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 801e0e0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801e0e4:	4293      	cmp	r3, r2
 801e0e6:	bf28      	it	cs
 801e0e8:	4613      	movcs	r3, r2
}
 801e0ea:	4618      	mov	r0, r3
 801e0ec:	4770      	bx	lr
 801e0ee:	bf00      	nop
 801e0f0:	0802d2e4 	.word	0x0802d2e4

0801e0f4 <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
 801e0f4:	b138      	cbz	r0, 801e106 <mbedtls_ssl_handshake_step+0x12>
 801e0f6:	6803      	ldr	r3, [r0, #0]
 801e0f8:	b12b      	cbz	r3, 801e106 <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e0fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e0fe:	07db      	lsls	r3, r3, #31
 801e100:	d403      	bmi.n	801e10a <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 801e102:	f7fc bc51 	b.w	801a9a8 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e106:	4802      	ldr	r0, [pc, #8]	; (801e110 <mbedtls_ssl_handshake_step+0x1c>)
 801e108:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 801e10a:	4802      	ldr	r0, [pc, #8]	; (801e114 <mbedtls_ssl_handshake_step+0x20>)
}
 801e10c:	4770      	bx	lr
 801e10e:	bf00      	nop
 801e110:	ffff8f00 	.word	0xffff8f00
 801e114:	ffff8f80 	.word	0xffff8f80

0801e118 <mbedtls_ssl_handshake>:
{
 801e118:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e11a:	4605      	mov	r5, r0
 801e11c:	b300      	cbz	r0, 801e160 <mbedtls_ssl_handshake+0x48>
 801e11e:	6803      	ldr	r3, [r0, #0]
 801e120:	b1f3      	cbz	r3, 801e160 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 801e122:	4b10      	ldr	r3, [pc, #64]	; (801e164 <mbedtls_ssl_handshake+0x4c>)
 801e124:	9300      	str	r3, [sp, #0]
 801e126:	4a10      	ldr	r2, [pc, #64]	; (801e168 <mbedtls_ssl_handshake+0x50>)
 801e128:	f641 139d 	movw	r3, #6557	; 0x199d
 801e12c:	2102      	movs	r1, #2
 801e12e:	f7f2 fbad 	bl	801088c <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e132:	686b      	ldr	r3, [r5, #4]
 801e134:	2b10      	cmp	r3, #16
 801e136:	d101      	bne.n	801e13c <mbedtls_ssl_handshake+0x24>
 801e138:	2400      	movs	r4, #0
 801e13a:	e005      	b.n	801e148 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 801e13c:	4628      	mov	r0, r5
 801e13e:	f7ff ffd9 	bl	801e0f4 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 801e142:	4604      	mov	r4, r0
 801e144:	2800      	cmp	r0, #0
 801e146:	d0f4      	beq.n	801e132 <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 801e148:	4b08      	ldr	r3, [pc, #32]	; (801e16c <mbedtls_ssl_handshake+0x54>)
 801e14a:	9300      	str	r3, [sp, #0]
 801e14c:	4a06      	ldr	r2, [pc, #24]	; (801e168 <mbedtls_ssl_handshake+0x50>)
 801e14e:	f641 13a7 	movw	r3, #6567	; 0x19a7
 801e152:	2102      	movs	r1, #2
 801e154:	4628      	mov	r0, r5
 801e156:	f7f2 fb99 	bl	801088c <mbedtls_debug_print_msg>
}
 801e15a:	4620      	mov	r0, r4
 801e15c:	b003      	add	sp, #12
 801e15e:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e160:	4c03      	ldr	r4, [pc, #12]	; (801e170 <mbedtls_ssl_handshake+0x58>)
 801e162:	e7fa      	b.n	801e15a <mbedtls_ssl_handshake+0x42>
 801e164:	08032817 	.word	0x08032817
 801e168:	08031c15 	.word	0x08031c15
 801e16c:	08032824 	.word	0x08032824
 801e170:	ffff8f00 	.word	0xffff8f00

0801e174 <mbedtls_ssl_close_notify>:
{
 801e174:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e176:	4604      	mov	r4, r0
 801e178:	2800      	cmp	r0, #0
 801e17a:	d033      	beq.n	801e1e4 <mbedtls_ssl_close_notify+0x70>
 801e17c:	6803      	ldr	r3, [r0, #0]
 801e17e:	b38b      	cbz	r3, 801e1e4 <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 801e180:	4b19      	ldr	r3, [pc, #100]	; (801e1e8 <mbedtls_ssl_close_notify+0x74>)
 801e182:	4a1a      	ldr	r2, [pc, #104]	; (801e1ec <mbedtls_ssl_close_notify+0x78>)
 801e184:	9300      	str	r3, [sp, #0]
 801e186:	2102      	movs	r1, #2
 801e188:	f641 4312 	movw	r3, #7186	; 0x1c12
 801e18c:	f7f2 fb7e 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 801e190:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 801e194:	b12a      	cbz	r2, 801e1a2 <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 801e196:	4620      	mov	r0, r4
}
 801e198:	b003      	add	sp, #12
 801e19a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 801e19e:	f7fe bc47 	b.w	801ca30 <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801e1a2:	6863      	ldr	r3, [r4, #4]
 801e1a4:	2b10      	cmp	r3, #16
 801e1a6:	d112      	bne.n	801e1ce <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801e1a8:	2101      	movs	r1, #1
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	f7ff f804 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
 801e1b0:	4605      	mov	r5, r0
 801e1b2:	b160      	cbz	r0, 801e1ce <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 801e1b4:	4b0e      	ldr	r3, [pc, #56]	; (801e1f0 <mbedtls_ssl_close_notify+0x7c>)
 801e1b6:	9001      	str	r0, [sp, #4]
 801e1b8:	9300      	str	r3, [sp, #0]
 801e1ba:	4a0c      	ldr	r2, [pc, #48]	; (801e1ec <mbedtls_ssl_close_notify+0x78>)
 801e1bc:	f641 431d 	movw	r3, #7197	; 0x1c1d
 801e1c0:	2101      	movs	r1, #1
 801e1c2:	4620      	mov	r0, r4
 801e1c4:	f7f2 fb92 	bl	80108ec <mbedtls_debug_print_ret>
}
 801e1c8:	4628      	mov	r0, r5
 801e1ca:	b003      	add	sp, #12
 801e1cc:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 801e1ce:	4b09      	ldr	r3, [pc, #36]	; (801e1f4 <mbedtls_ssl_close_notify+0x80>)
 801e1d0:	9300      	str	r3, [sp, #0]
 801e1d2:	4a06      	ldr	r2, [pc, #24]	; (801e1ec <mbedtls_ssl_close_notify+0x78>)
 801e1d4:	f641 4322 	movw	r3, #7202	; 0x1c22
 801e1d8:	2102      	movs	r1, #2
 801e1da:	4620      	mov	r0, r4
 801e1dc:	f7f2 fb56 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801e1e0:	2500      	movs	r5, #0
 801e1e2:	e7f1      	b.n	801e1c8 <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e1e4:	4d04      	ldr	r5, [pc, #16]	; (801e1f8 <mbedtls_ssl_close_notify+0x84>)
 801e1e6:	e7ef      	b.n	801e1c8 <mbedtls_ssl_close_notify+0x54>
 801e1e8:	08032831 	.word	0x08032831
 801e1ec:	08031c15 	.word	0x08031c15
 801e1f0:	08032847 	.word	0x08032847
 801e1f4:	08032866 	.word	0x08032866
 801e1f8:	ffff8f00 	.word	0xffff8f00

0801e1fc <mbedtls_ssl_transform_free>:
{
 801e1fc:	b510      	push	{r4, lr}
    if( transform == NULL )
 801e1fe:	4604      	mov	r4, r0
 801e200:	b1a0      	cbz	r0, 801e22c <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 801e202:	3050      	adds	r0, #80	; 0x50
 801e204:	f7f1 fe2e 	bl	800fe64 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 801e208:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801e20c:	f7f1 fe2a 	bl	800fe64 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 801e210:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801e214:	f7f6 fa38 	bl	8014688 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 801e218:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801e21c:	f7f6 fa34 	bl	8014688 <mbedtls_md_free>
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e220:	4620      	mov	r0, r4
 801e222:	21d0      	movs	r1, #208	; 0xd0
}
 801e224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e228:	f7fd be4e 	b.w	801bec8 <mbedtls_zeroize>
}
 801e22c:	bd10      	pop	{r4, pc}
	...

0801e230 <mbedtls_ssl_handshake_free>:
{
 801e230:	b570      	push	{r4, r5, r6, lr}
    if( handshake == NULL )
 801e232:	4604      	mov	r4, r0
 801e234:	b1f0      	cbz	r0, 801e274 <mbedtls_ssl_handshake_free+0x44>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 801e236:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801e23a:	f7fa fa78 	bl	801872e <mbedtls_sha256_free>
    mbedtls_free( (void *) handshake->curves );
 801e23e:	4e0e      	ldr	r6, [pc, #56]	; (801e278 <mbedtls_ssl_handshake_free+0x48>)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 801e240:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e244:	f7fa ff05 	bl	8019052 <mbedtls_sha512_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
 801e248:	1d20      	adds	r0, r4, #4
 801e24a:	f7f2 fd6e 	bl	8010d2a <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
 801e24e:	6833      	ldr	r3, [r6, #0]
 801e250:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 801e254:	4798      	blx	r3
    if( handshake->sni_key_cert != NULL )
 801e256:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
 801e25a:	b125      	cbz	r5, 801e266 <mbedtls_ssl_handshake_free+0x36>
            next = cur->next;
 801e25c:	4628      	mov	r0, r5
            mbedtls_free( cur );
 801e25e:	6833      	ldr	r3, [r6, #0]
            next = cur->next;
 801e260:	68ad      	ldr	r5, [r5, #8]
            mbedtls_free( cur );
 801e262:	4798      	blx	r3
        while( cur != NULL )
 801e264:	e7f9      	b.n	801e25a <mbedtls_ssl_handshake_free+0x2a>
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e266:	4620      	mov	r0, r4
 801e268:	f44f 7152 	mov.w	r1, #840	; 0x348
}
 801e26c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e270:	f7fd be2a 	b.w	801bec8 <mbedtls_zeroize>
}
 801e274:	bd70      	pop	{r4, r5, r6, pc}
 801e276:	bf00      	nop
 801e278:	2000053c 	.word	0x2000053c

0801e27c <mbedtls_ssl_session_free>:
{
 801e27c:	b538      	push	{r3, r4, r5, lr}
    if( session == NULL )
 801e27e:	4604      	mov	r4, r0
 801e280:	b180      	cbz	r0, 801e2a4 <mbedtls_ssl_session_free+0x28>
    if( session->peer_cert != NULL )
 801e282:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e284:	4d08      	ldr	r5, [pc, #32]	; (801e2a8 <mbedtls_ssl_session_free+0x2c>)
 801e286:	b120      	cbz	r0, 801e292 <mbedtls_ssl_session_free+0x16>
        mbedtls_x509_crt_free( session->peer_cert );
 801e288:	f002 fe94 	bl	8020fb4 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 801e28c:	682b      	ldr	r3, [r5, #0]
 801e28e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801e290:	4798      	blx	r3
    mbedtls_free( session->ticket );
 801e292:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801e294:	682b      	ldr	r3, [r5, #0]
 801e296:	4798      	blx	r3
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e298:	4620      	mov	r0, r4
 801e29a:	2180      	movs	r1, #128	; 0x80
}
 801e29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e2a0:	f7fd be12 	b.w	801bec8 <mbedtls_zeroize>
}
 801e2a4:	bd38      	pop	{r3, r4, r5, pc}
 801e2a6:	bf00      	nop
 801e2a8:	2000053c 	.word	0x2000053c

0801e2ac <mbedtls_ssl_handshake_wrapup>:
{
 801e2ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int resume = ssl->handshake->resume;
 801e2ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e2b0:	4a31      	ldr	r2, [pc, #196]	; (801e378 <mbedtls_ssl_handshake_wrapup+0xcc>)
    int resume = ssl->handshake->resume;
 801e2b2:	f8d3 6330 	ldr.w	r6, [r3, #816]	; 0x330
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e2b6:	4b31      	ldr	r3, [pc, #196]	; (801e37c <mbedtls_ssl_handshake_wrapup+0xd0>)
 801e2b8:	9300      	str	r3, [sp, #0]
{
 801e2ba:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e2bc:	f241 4333 	movw	r3, #5171	; 0x1433
 801e2c0:	2103      	movs	r1, #3
 801e2c2:	f7f2 fae3 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e2c6:	68a3      	ldr	r3, [r4, #8]
    if( ssl->session )
 801e2c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e2ca:	4d2d      	ldr	r5, [pc, #180]	; (801e380 <mbedtls_ssl_handshake_wrapup+0xd4>)
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e2cc:	2b01      	cmp	r3, #1
        ssl->renego_records_seen = 0;
 801e2ce:	bf02      	ittt	eq
 801e2d0:	2202      	moveq	r2, #2
 801e2d2:	2300      	moveq	r3, #0
 801e2d4:	e9c4 2302 	strdeq	r2, r3, [r4, #8]
    if( ssl->session )
 801e2d8:	b120      	cbz	r0, 801e2e4 <mbedtls_ssl_handshake_wrapup+0x38>
        mbedtls_ssl_session_free( ssl->session );
 801e2da:	f7ff ffcf 	bl	801e27c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801e2de:	682b      	ldr	r3, [r5, #0]
 801e2e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e2e2:	4798      	blx	r3
    if( ssl->conf->f_set_cache != NULL &&
 801e2e4:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 801e2e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2e8:	6321      	str	r1, [r4, #48]	; 0x30
    ssl->session_negotiate = NULL;
 801e2ea:	2300      	movs	r3, #0
 801e2ec:	6363      	str	r3, [r4, #52]	; 0x34
    if( ssl->conf->f_set_cache != NULL &&
 801e2ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e2f0:	b173      	cbz	r3, 801e310 <mbedtls_ssl_handshake_wrapup+0x64>
 801e2f2:	6908      	ldr	r0, [r1, #16]
 801e2f4:	b160      	cbz	r0, 801e310 <mbedtls_ssl_handshake_wrapup+0x64>
        ssl->session->id_len != 0 &&
 801e2f6:	b95e      	cbnz	r6, 801e310 <mbedtls_ssl_handshake_wrapup+0x64>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 801e2f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801e2fa:	4798      	blx	r3
 801e2fc:	b140      	cbz	r0, 801e310 <mbedtls_ssl_handshake_wrapup+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 801e2fe:	4b21      	ldr	r3, [pc, #132]	; (801e384 <mbedtls_ssl_handshake_wrapup+0xd8>)
 801e300:	9300      	str	r3, [sp, #0]
 801e302:	4a1d      	ldr	r2, [pc, #116]	; (801e378 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e304:	f241 4356 	movw	r3, #5206	; 0x1456
 801e308:	2101      	movs	r1, #1
 801e30a:	4620      	mov	r0, r4
 801e30c:	f7f2 fabe 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 801e310:	4b1d      	ldr	r3, [pc, #116]	; (801e388 <mbedtls_ssl_handshake_wrapup+0xdc>)
 801e312:	4a19      	ldr	r2, [pc, #100]	; (801e378 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e314:	9300      	str	r3, [sp, #0]
 801e316:	2103      	movs	r1, #3
 801e318:	f241 4318 	movw	r3, #5144	; 0x1418
 801e31c:	4620      	mov	r0, r4
 801e31e:	f7f2 fab5 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl->handshake );
 801e322:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e324:	f7ff ff84 	bl	801e230 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 801e328:	682b      	ldr	r3, [r5, #0]
 801e32a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e32c:	4798      	blx	r3
    if( ssl->transform )
 801e32e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ssl->handshake = NULL;
 801e330:	2300      	movs	r3, #0
 801e332:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ssl->transform )
 801e334:	b120      	cbz	r0, 801e340 <mbedtls_ssl_handshake_wrapup+0x94>
        mbedtls_ssl_transform_free( ssl->transform );
 801e336:	f7ff ff61 	bl	801e1fc <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801e33a:	682b      	ldr	r3, [r5, #0]
 801e33c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801e33e:	4798      	blx	r3
    ssl->transform = ssl->transform_negotiate;
 801e340:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e342:	6463      	str	r3, [r4, #68]	; 0x44
    ssl->transform_negotiate = NULL;
 801e344:	2300      	movs	r3, #0
 801e346:	64a3      	str	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 801e348:	4b10      	ldr	r3, [pc, #64]	; (801e38c <mbedtls_ssl_handshake_wrapup+0xe0>)
 801e34a:	9300      	str	r3, [sp, #0]
 801e34c:	4620      	mov	r0, r4
 801e34e:	4a0a      	ldr	r2, [pc, #40]	; (801e378 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e350:	f241 432c 	movw	r3, #5164	; 0x142c
 801e354:	2103      	movs	r1, #3
 801e356:	f7f2 fa99 	bl	801088c <mbedtls_debug_print_msg>
    ssl->state++;
 801e35a:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e35c:	4a06      	ldr	r2, [pc, #24]	; (801e378 <mbedtls_ssl_handshake_wrapup+0xcc>)
    ssl->state++;
 801e35e:	3301      	adds	r3, #1
 801e360:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e362:	4b0b      	ldr	r3, [pc, #44]	; (801e390 <mbedtls_ssl_handshake_wrapup+0xe4>)
 801e364:	9300      	str	r3, [sp, #0]
 801e366:	2103      	movs	r1, #3
 801e368:	f241 436a 	movw	r3, #5226	; 0x146a
 801e36c:	4620      	mov	r0, r4
 801e36e:	f7f2 fa8d 	bl	801088c <mbedtls_debug_print_msg>
}
 801e372:	b002      	add	sp, #8
 801e374:	bd70      	pop	{r4, r5, r6, pc}
 801e376:	bf00      	nop
 801e378:	08031c15 	.word	0x08031c15
 801e37c:	0803287c 	.word	0x0803287c
 801e380:	2000053c 	.word	0x2000053c
 801e384:	08032890 	.word	0x08032890
 801e388:	080328ac 	.word	0x080328ac
 801e38c:	080328cc 	.word	0x080328cc
 801e390:	080328ec 	.word	0x080328ec

0801e394 <ssl_handshake_init>:
{
 801e394:	b530      	push	{r4, r5, lr}
 801e396:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 801e398:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
 801e39a:	b085      	sub	sp, #20
    if( ssl->transform_negotiate )
 801e39c:	b108      	cbz	r0, 801e3a2 <ssl_handshake_init+0xe>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801e39e:	f7ff ff2d 	bl	801e1fc <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 801e3a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e3a4:	b108      	cbz	r0, 801e3aa <ssl_handshake_init+0x16>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801e3a6:	f7ff ff69 	bl	801e27c <mbedtls_ssl_session_free>
    if( ssl->handshake )
 801e3aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e3ac:	b108      	cbz	r0, 801e3b2 <ssl_handshake_init+0x1e>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801e3ae:	f7ff ff3f 	bl	801e230 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 801e3b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e3b4:	b92b      	cbnz	r3, 801e3c2 <ssl_handshake_init+0x2e>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 801e3b6:	4b3c      	ldr	r3, [pc, #240]	; (801e4a8 <ssl_handshake_init+0x114>)
 801e3b8:	21d0      	movs	r1, #208	; 0xd0
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	2001      	movs	r0, #1
 801e3be:	4798      	blx	r3
 801e3c0:	64a0      	str	r0, [r4, #72]	; 0x48
    if( ssl->session_negotiate == NULL )
 801e3c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e3c4:	b92b      	cbnz	r3, 801e3d2 <ssl_handshake_init+0x3e>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 801e3c6:	4b38      	ldr	r3, [pc, #224]	; (801e4a8 <ssl_handshake_init+0x114>)
 801e3c8:	2180      	movs	r1, #128	; 0x80
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	2001      	movs	r0, #1
 801e3ce:	4798      	blx	r3
 801e3d0:	6360      	str	r0, [r4, #52]	; 0x34
    if( ssl->handshake == NULL )
 801e3d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e3d4:	b1db      	cbz	r3, 801e40e <ssl_handshake_init+0x7a>
    if( ssl->handshake == NULL ||
 801e3d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e3d8:	bb1b      	cbnz	r3, 801e422 <ssl_handshake_init+0x8e>
        mbedtls_free( ssl->handshake );
 801e3da:	4d34      	ldr	r5, [pc, #208]	; (801e4ac <ssl_handshake_init+0x118>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 801e3dc:	4b34      	ldr	r3, [pc, #208]	; (801e4b0 <ssl_handshake_init+0x11c>)
 801e3de:	4a35      	ldr	r2, [pc, #212]	; (801e4b4 <ssl_handshake_init+0x120>)
 801e3e0:	9300      	str	r3, [sp, #0]
 801e3e2:	2101      	movs	r1, #1
 801e3e4:	f241 539a 	movw	r3, #5530	; 0x159a
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f7f2 fa4f 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 801e3ee:	682b      	ldr	r3, [r5, #0]
 801e3f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e3f2:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801e3f4:	682b      	ldr	r3, [r5, #0]
 801e3f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801e3f8:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801e3fa:	682b      	ldr	r3, [r5, #0]
 801e3fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e3fe:	4798      	blx	r3
        ssl->handshake = NULL;
 801e400:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e402:	482d      	ldr	r0, [pc, #180]	; (801e4b8 <ssl_handshake_init+0x124>)
        ssl->handshake = NULL;
 801e404:	63a3      	str	r3, [r4, #56]	; 0x38
        ssl->transform_negotiate = NULL;
 801e406:	64a3      	str	r3, [r4, #72]	; 0x48
        ssl->session_negotiate = NULL;
 801e408:	6363      	str	r3, [r4, #52]	; 0x34
}
 801e40a:	b005      	add	sp, #20
 801e40c:	bd30      	pop	{r4, r5, pc}
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 801e40e:	4b26      	ldr	r3, [pc, #152]	; (801e4a8 <ssl_handshake_init+0x114>)
 801e410:	f44f 7152 	mov.w	r1, #840	; 0x348
 801e414:	681b      	ldr	r3, [r3, #0]
 801e416:	2001      	movs	r0, #1
 801e418:	4798      	blx	r3
 801e41a:	63a0      	str	r0, [r4, #56]	; 0x38
    if( ssl->handshake == NULL ||
 801e41c:	2800      	cmp	r0, #0
 801e41e:	d1da      	bne.n	801e3d6 <ssl_handshake_init+0x42>
 801e420:	e7db      	b.n	801e3da <ssl_handshake_init+0x46>
        ssl->session_negotiate == NULL )
 801e422:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->transform_negotiate == NULL ||
 801e424:	2800      	cmp	r0, #0
 801e426:	d0d8      	beq.n	801e3da <ssl_handshake_init+0x46>
    mbedtls_ssl_session_init( ssl->session_negotiate );
 801e428:	f7ff fdd8 	bl	801dfdc <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 801e42c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 801e42e:	22d0      	movs	r2, #208	; 0xd0
 801e430:	2100      	movs	r1, #0
 801e432:	4628      	mov	r0, r5
 801e434:	f003 fee0 	bl	80221f8 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 801e438:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801e43c:	f7f1 fd0e 	bl	800fe5c <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 801e440:	f105 0090 	add.w	r0, r5, #144	; 0x90
 801e444:	f7f1 fd0a 	bl	800fe5c <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 801e448:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801e44c:	f7f6 f916 	bl	801467c <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 801e450:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801e454:	f7f6 f912 	bl	801467c <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 801e458:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801e45a:	f44f 7252 	mov.w	r2, #840	; 0x348
 801e45e:	2100      	movs	r1, #0
 801e460:	4620      	mov	r0, r4
 801e462:	f003 fec9 	bl	80221f8 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 801e466:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 801e46a:	9003      	str	r0, [sp, #12]
 801e46c:	f7fa f95b 	bl	8018726 <mbedtls_sha256_init>
    mbedtls_sha256_starts( &handshake->fin_sha256, 0 );
 801e470:	2100      	movs	r1, #0
 801e472:	9803      	ldr	r0, [sp, #12]
 801e474:	f7fa f96a 	bl	801874c <mbedtls_sha256_starts>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 801e478:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e47c:	9003      	str	r0, [sp, #12]
 801e47e:	f7fa fde4 	bl	801904a <mbedtls_sha512_init>
    mbedtls_sha512_starts( &handshake->fin_sha512, 1 );
 801e482:	9803      	ldr	r0, [sp, #12]
 801e484:	2101      	movs	r1, #1
 801e486:	f7fa fdf3 	bl	8019070 <mbedtls_sha512_starts>
    set->rsa   = md_alg;
 801e48a:	2500      	movs	r5, #0
    handshake->update_checksum = ssl_update_checksum_start;
 801e48c:	4b0b      	ldr	r3, [pc, #44]	; (801e4bc <ssl_handshake_init+0x128>)
 801e48e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e492:	1d20      	adds	r0, r4, #4
    set->rsa   = md_alg;
 801e494:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 801e496:	7065      	strb	r5, [r4, #1]
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e498:	f7f2 fc42 	bl	8010d20 <mbedtls_ecdh_init>
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 801e49c:	2303      	movs	r3, #3
 801e49e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    return( 0 );
 801e4a2:	4628      	mov	r0, r5
}
 801e4a4:	e7b1      	b.n	801e40a <ssl_handshake_init+0x76>
 801e4a6:	bf00      	nop
 801e4a8:	20000538 	.word	0x20000538
 801e4ac:	2000053c 	.word	0x2000053c
 801e4b0:	08032900 	.word	0x08032900
 801e4b4:	08031c15 	.word	0x08031c15
 801e4b8:	ffff8100 	.word	0xffff8100
 801e4bc:	0801c33d 	.word	0x0801c33d

0801e4c0 <mbedtls_ssl_setup>:
{
 801e4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e4c2:	4d22      	ldr	r5, [pc, #136]	; (801e54c <mbedtls_ssl_setup+0x8c>)
    ssl->conf = conf;
 801e4c4:	6001      	str	r1, [r0, #0]
{
 801e4c6:	4604      	mov	r4, r0
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e4c8:	682b      	ldr	r3, [r5, #0]
 801e4ca:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e4ce:	2001      	movs	r0, #1
 801e4d0:	4798      	blx	r3
 801e4d2:	65a0      	str	r0, [r4, #88]	; 0x58
 801e4d4:	b328      	cbz	r0, 801e522 <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 801e4d6:	682b      	ldr	r3, [r5, #0]
 801e4d8:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e4dc:	2001      	movs	r0, #1
 801e4de:	4798      	blx	r3
 801e4e0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e4e4:	b1e8      	cbz	r0, 801e522 <mbedtls_ssl_setup+0x62>
        ssl->out_hdr = ssl->out_buf +  8;
 801e4e6:	f100 0308 	add.w	r3, r0, #8
 801e4ea:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_len = ssl->out_buf + 11;
 801e4ee:	f100 030b 	add.w	r3, r0, #11
 801e4f2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        ssl->in_ctr = ssl->in_buf;
 801e4f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
        ssl->out_ctr = ssl->out_buf;
 801e4f8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
        ssl->in_hdr = ssl->in_buf +  8;
 801e4fc:	f103 0208 	add.w	r2, r3, #8
        ssl->out_iv  = ssl->out_buf + 13;
 801e500:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;
 801e502:	e9c4 0027 	strd	r0, r0, [r4, #156]	; 0x9c
        ssl->in_ctr = ssl->in_buf;
 801e506:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_hdr = ssl->in_buf +  8;
 801e508:	6622      	str	r2, [r4, #96]	; 0x60
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e50a:	4620      	mov	r0, r4
        ssl->in_len = ssl->in_buf + 11;
 801e50c:	f103 020b 	add.w	r2, r3, #11
        ssl->in_iv  = ssl->in_buf + 13;
 801e510:	330d      	adds	r3, #13
        ssl->in_msg = ssl->in_buf + 13;
 801e512:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
        ssl->in_len = ssl->in_buf + 11;
 801e516:	6662      	str	r2, [r4, #100]	; 0x64
}
 801e518:	b003      	add	sp, #12
 801e51a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e51e:	f7ff bf39 	b.w	801e394 <ssl_handshake_init>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 801e522:	f241 43d5 	movw	r3, #5333	; 0x14d5
 801e526:	9301      	str	r3, [sp, #4]
 801e528:	4b09      	ldr	r3, [pc, #36]	; (801e550 <mbedtls_ssl_setup+0x90>)
 801e52a:	4a0a      	ldr	r2, [pc, #40]	; (801e554 <mbedtls_ssl_setup+0x94>)
 801e52c:	9300      	str	r3, [sp, #0]
 801e52e:	2101      	movs	r1, #1
 801e530:	4620      	mov	r0, r4
 801e532:	f241 53f3 	movw	r3, #5619	; 0x15f3
 801e536:	f7f2 f9a9 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 801e53a:	4b07      	ldr	r3, [pc, #28]	; (801e558 <mbedtls_ssl_setup+0x98>)
 801e53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	4798      	blx	r3
}
 801e542:	4806      	ldr	r0, [pc, #24]	; (801e55c <mbedtls_ssl_setup+0x9c>)
        ssl->in_buf = NULL;
 801e544:	2300      	movs	r3, #0
 801e546:	65a3      	str	r3, [r4, #88]	; 0x58
}
 801e548:	b003      	add	sp, #12
 801e54a:	bd30      	pop	{r4, r5, pc}
 801e54c:	20000538 	.word	0x20000538
 801e550:	08032923 	.word	0x08032923
 801e554:	08031c15 	.word	0x08031c15
 801e558:	2000053c 	.word	0x2000053c
 801e55c:	ffff8100 	.word	0xffff8100

0801e560 <ssl_start_renegotiation>:
{
 801e560:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e562:	4b16      	ldr	r3, [pc, #88]	; (801e5bc <ssl_start_renegotiation+0x5c>)
 801e564:	4a16      	ldr	r2, [pc, #88]	; (801e5c0 <ssl_start_renegotiation+0x60>)
 801e566:	9300      	str	r3, [sp, #0]
{
 801e568:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e56a:	f641 13d4 	movw	r3, #6612	; 0x19d4
 801e56e:	2102      	movs	r1, #2
 801e570:	f7f2 f98c 	bl	801088c <mbedtls_debug_print_msg>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e574:	4628      	mov	r0, r5
 801e576:	f7ff ff0d 	bl	801e394 <ssl_handshake_init>
 801e57a:	4604      	mov	r4, r0
 801e57c:	b988      	cbnz	r0, 801e5a2 <ssl_start_renegotiation+0x42>
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e57e:	2601      	movs	r6, #1
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 801e580:	6068      	str	r0, [r5, #4]
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e582:	60ae      	str	r6, [r5, #8]
    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e584:	4628      	mov	r0, r5
 801e586:	f7ff fdc7 	bl	801e118 <mbedtls_ssl_handshake>
 801e58a:	4604      	mov	r4, r0
 801e58c:	b160      	cbz	r0, 801e5a8 <ssl_start_renegotiation+0x48>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e58e:	4b0d      	ldr	r3, [pc, #52]	; (801e5c4 <ssl_start_renegotiation+0x64>)
 801e590:	9001      	str	r0, [sp, #4]
 801e592:	9300      	str	r3, [sp, #0]
 801e594:	4a0a      	ldr	r2, [pc, #40]	; (801e5c0 <ssl_start_renegotiation+0x60>)
 801e596:	f641 13eb 	movw	r3, #6635	; 0x19eb
 801e59a:	4631      	mov	r1, r6
 801e59c:	4628      	mov	r0, r5
 801e59e:	f7f2 f9a5 	bl	80108ec <mbedtls_debug_print_ret>
}
 801e5a2:	4620      	mov	r0, r4
 801e5a4:	b002      	add	sp, #8
 801e5a6:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
 801e5a8:	4b07      	ldr	r3, [pc, #28]	; (801e5c8 <ssl_start_renegotiation+0x68>)
 801e5aa:	9300      	str	r3, [sp, #0]
 801e5ac:	4a04      	ldr	r2, [pc, #16]	; (801e5c0 <ssl_start_renegotiation+0x60>)
 801e5ae:	f641 13ef 	movw	r3, #6639	; 0x19ef
 801e5b2:	2102      	movs	r1, #2
 801e5b4:	4628      	mov	r0, r5
 801e5b6:	f7f2 f969 	bl	801088c <mbedtls_debug_print_msg>
    return( 0 );
 801e5ba:	e7f2      	b.n	801e5a2 <ssl_start_renegotiation+0x42>
 801e5bc:	0803293a 	.word	0x0803293a
 801e5c0:	08031c15 	.word	0x08031c15
 801e5c4:	08032949 	.word	0x08032949
 801e5c8:	0803295f 	.word	0x0803295f

0801e5cc <mbedtls_ssl_renegotiate>:
{
 801e5cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e5ce:	4605      	mov	r5, r0
 801e5d0:	b318      	cbz	r0, 801e61a <mbedtls_ssl_renegotiate+0x4e>
 801e5d2:	6803      	ldr	r3, [r0, #0]
 801e5d4:	b30b      	cbz	r3, 801e61a <mbedtls_ssl_renegotiate+0x4e>
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e5d6:	6886      	ldr	r6, [r0, #8]
 801e5d8:	2e01      	cmp	r6, #1
 801e5da:	d013      	beq.n	801e604 <mbedtls_ssl_renegotiate+0x38>
        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e5dc:	6843      	ldr	r3, [r0, #4]
 801e5de:	2b10      	cmp	r3, #16
 801e5e0:	d11b      	bne.n	801e61a <mbedtls_ssl_renegotiate+0x4e>
        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
 801e5e2:	f7ff ffbd 	bl	801e560 <ssl_start_renegotiation>
 801e5e6:	4604      	mov	r4, r0
 801e5e8:	b148      	cbz	r0, 801e5fe <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801e5ea:	4b0d      	ldr	r3, [pc, #52]	; (801e620 <mbedtls_ssl_renegotiate+0x54>)
 801e5ec:	9300      	str	r3, [sp, #0]
 801e5ee:	9001      	str	r0, [sp, #4]
 801e5f0:	f641 231c 	movw	r3, #6684	; 0x1a1c
 801e5f4:	4a0b      	ldr	r2, [pc, #44]	; (801e624 <mbedtls_ssl_renegotiate+0x58>)
 801e5f6:	2101      	movs	r1, #1
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	f7f2 f977 	bl	80108ec <mbedtls_debug_print_ret>
}
 801e5fe:	4620      	mov	r0, r4
 801e600:	b002      	add	sp, #8
 801e602:	bd70      	pop	{r4, r5, r6, pc}
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e604:	f7ff fd88 	bl	801e118 <mbedtls_ssl_handshake>
 801e608:	4604      	mov	r4, r0
 801e60a:	2800      	cmp	r0, #0
 801e60c:	d0f7      	beq.n	801e5fe <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e60e:	4b06      	ldr	r3, [pc, #24]	; (801e628 <mbedtls_ssl_renegotiate+0x5c>)
 801e610:	9300      	str	r3, [sp, #0]
 801e612:	9001      	str	r0, [sp, #4]
 801e614:	f641 2324 	movw	r3, #6692	; 0x1a24
 801e618:	e7ec      	b.n	801e5f4 <mbedtls_ssl_renegotiate+0x28>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e61a:	4c04      	ldr	r4, [pc, #16]	; (801e62c <mbedtls_ssl_renegotiate+0x60>)
 801e61c:	e7ef      	b.n	801e5fe <mbedtls_ssl_renegotiate+0x32>
 801e61e:	bf00      	nop
 801e620:	0803296e 	.word	0x0803296e
 801e624:	08031c15 	.word	0x08031c15
 801e628:	08032949 	.word	0x08032949
 801e62c:	ffff8f00 	.word	0xffff8f00

0801e630 <ssl_check_ctr_renegotiate>:
{
 801e630:	b530      	push	{r4, r5, lr}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e632:	6843      	ldr	r3, [r0, #4]
 801e634:	2b10      	cmp	r3, #16
{
 801e636:	b085      	sub	sp, #20
 801e638:	4604      	mov	r4, r0
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e63a:	d127      	bne.n	801e68c <ssl_check_ctr_renegotiate+0x5c>
 801e63c:	6883      	ldr	r3, [r0, #8]
 801e63e:	2b03      	cmp	r3, #3
 801e640:	d024      	beq.n	801e68c <ssl_check_ctr_renegotiate+0x5c>
        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
 801e642:	6801      	ldr	r1, [r0, #0]
 801e644:	f891 306d 	ldrb.w	r3, [r1, #109]	; 0x6d
        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
 801e648:	075b      	lsls	r3, r3, #29
 801e64a:	d51f      	bpl.n	801e68c <ssl_check_ctr_renegotiate+0x5c>
                        ssl->conf->renego_period + ep_len, 8 - ep_len );
 801e64c:	3160      	adds	r1, #96	; 0x60
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e64e:	2208      	movs	r2, #8
 801e650:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e652:	9103      	str	r1, [sp, #12]
 801e654:	f003 fd9a 	bl	802218c <memcmp>
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e658:	9903      	ldr	r1, [sp, #12]
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e65a:	4605      	mov	r5, r0
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e65c:	2208      	movs	r2, #8
 801e65e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801e662:	f003 fd93 	bl	802218c <memcmp>
    if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )
 801e666:	2d00      	cmp	r5, #0
 801e668:	dc01      	bgt.n	801e66e <ssl_check_ctr_renegotiate+0x3e>
 801e66a:	2800      	cmp	r0, #0
 801e66c:	dd0e      	ble.n	801e68c <ssl_check_ctr_renegotiate+0x5c>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
 801e66e:	4b09      	ldr	r3, [pc, #36]	; (801e694 <ssl_check_ctr_renegotiate+0x64>)
 801e670:	9300      	str	r3, [sp, #0]
 801e672:	4620      	mov	r0, r4
 801e674:	4a08      	ldr	r2, [pc, #32]	; (801e698 <ssl_check_ctr_renegotiate+0x68>)
 801e676:	f641 2347 	movw	r3, #6727	; 0x1a47
 801e67a:	2101      	movs	r1, #1
 801e67c:	f7f2 f906 	bl	801088c <mbedtls_debug_print_msg>
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e680:	4620      	mov	r0, r4
}
 801e682:	b005      	add	sp, #20
 801e684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e688:	f7ff bfa0 	b.w	801e5cc <mbedtls_ssl_renegotiate>
}
 801e68c:	2000      	movs	r0, #0
 801e68e:	b005      	add	sp, #20
 801e690:	bd30      	pop	{r4, r5, pc}
 801e692:	bf00      	nop
 801e694:	08032986 	.word	0x08032986
 801e698:	08031c15 	.word	0x08031c15

0801e69c <mbedtls_ssl_write>:
{
 801e69c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e69e:	4b36      	ldr	r3, [pc, #216]	; (801e778 <mbedtls_ssl_write+0xdc>)
 801e6a0:	9300      	str	r3, [sp, #0]
{
 801e6a2:	4606      	mov	r6, r0
 801e6a4:	460f      	mov	r7, r1
 801e6a6:	4615      	mov	r5, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e6a8:	f641 33e7 	movw	r3, #7143	; 0x1be7
 801e6ac:	4a33      	ldr	r2, [pc, #204]	; (801e77c <mbedtls_ssl_write+0xe0>)
 801e6ae:	2102      	movs	r1, #2
 801e6b0:	f7f2 f8ec 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 801e6b4:	2e00      	cmp	r6, #0
 801e6b6:	d05c      	beq.n	801e772 <mbedtls_ssl_write+0xd6>
 801e6b8:	6833      	ldr	r3, [r6, #0]
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d059      	beq.n	801e772 <mbedtls_ssl_write+0xd6>
    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
 801e6be:	4630      	mov	r0, r6
 801e6c0:	f7ff ffb6 	bl	801e630 <ssl_check_ctr_renegotiate>
 801e6c4:	4604      	mov	r4, r0
 801e6c6:	b160      	cbz	r0, 801e6e2 <mbedtls_ssl_write+0x46>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801e6c8:	4b2d      	ldr	r3, [pc, #180]	; (801e780 <mbedtls_ssl_write+0xe4>)
 801e6ca:	9300      	str	r3, [sp, #0]
 801e6cc:	9001      	str	r0, [sp, #4]
 801e6ce:	f641 33ef 	movw	r3, #7151	; 0x1bef
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e6d2:	4a2a      	ldr	r2, [pc, #168]	; (801e77c <mbedtls_ssl_write+0xe0>)
 801e6d4:	2101      	movs	r1, #1
 801e6d6:	4630      	mov	r0, r6
 801e6d8:	f7f2 f908 	bl	80108ec <mbedtls_debug_print_ret>
}
 801e6dc:	4620      	mov	r0, r4
 801e6de:	b003      	add	sp, #12
 801e6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e6e2:	6873      	ldr	r3, [r6, #4]
 801e6e4:	2b10      	cmp	r3, #16
 801e6e6:	d00a      	beq.n	801e6fe <mbedtls_ssl_write+0x62>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e6e8:	4630      	mov	r0, r6
 801e6ea:	f7ff fd15 	bl	801e118 <mbedtls_ssl_handshake>
 801e6ee:	4604      	mov	r4, r0
 801e6f0:	b128      	cbz	r0, 801e6fe <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e6f2:	4b24      	ldr	r3, [pc, #144]	; (801e784 <mbedtls_ssl_write+0xe8>)
 801e6f4:	9300      	str	r3, [sp, #0]
 801e6f6:	9001      	str	r0, [sp, #4]
 801e6f8:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 801e6fc:	e7e9      	b.n	801e6d2 <mbedtls_ssl_write+0x36>
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 801e6fe:	4630      	mov	r0, r6
 801e700:	f7ff fce2 	bl	801e0c8 <mbedtls_ssl_get_max_frag_len>
    if( ssl->out_left != 0 )
 801e704:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801e708:	4285      	cmp	r5, r0
 801e70a:	bf28      	it	cs
 801e70c:	4605      	movcs	r5, r0
 801e70e:	b1c3      	cbz	r3, 801e742 <mbedtls_ssl_write+0xa6>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801e710:	4630      	mov	r0, r6
 801e712:	f7fe f98d 	bl	801ca30 <mbedtls_ssl_flush_output>
 801e716:	4604      	mov	r4, r0
 801e718:	b348      	cbz	r0, 801e76e <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801e71a:	4b1b      	ldr	r3, [pc, #108]	; (801e788 <mbedtls_ssl_write+0xec>)
 801e71c:	9300      	str	r3, [sp, #0]
 801e71e:	9001      	str	r0, [sp, #4]
 801e720:	f641 33a6 	movw	r3, #7078	; 0x1ba6
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e724:	4a15      	ldr	r2, [pc, #84]	; (801e77c <mbedtls_ssl_write+0xe0>)
 801e726:	2101      	movs	r1, #1
 801e728:	4630      	mov	r0, r6
 801e72a:	f7f2 f8df 	bl	80108ec <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 801e72e:	4b17      	ldr	r3, [pc, #92]	; (801e78c <mbedtls_ssl_write+0xf0>)
 801e730:	9300      	str	r3, [sp, #0]
 801e732:	4a12      	ldr	r2, [pc, #72]	; (801e77c <mbedtls_ssl_write+0xe0>)
 801e734:	f641 4303 	movw	r3, #7171	; 0x1c03
 801e738:	2102      	movs	r1, #2
 801e73a:	4630      	mov	r0, r6
 801e73c:	f7f2 f8a6 	bl	801088c <mbedtls_debug_print_msg>
    return( ret );
 801e740:	e7cc      	b.n	801e6dc <mbedtls_ssl_write+0x40>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 801e742:	2317      	movs	r3, #23
 801e744:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
        memcpy( ssl->out_msg, buf, len );
 801e748:	462a      	mov	r2, r5
 801e74a:	4639      	mov	r1, r7
 801e74c:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
        ssl->out_msglen  = len;
 801e750:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
        memcpy( ssl->out_msg, buf, len );
 801e754:	f003 fd28 	bl	80221a8 <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801e758:	4630      	mov	r0, r6
 801e75a:	f7fe f9f5 	bl	801cb48 <mbedtls_ssl_write_record>
 801e75e:	4604      	mov	r4, r0
 801e760:	b128      	cbz	r0, 801e76e <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e762:	4b0b      	ldr	r3, [pc, #44]	; (801e790 <mbedtls_ssl_write+0xf4>)
 801e764:	9300      	str	r3, [sp, #0]
 801e766:	9001      	str	r0, [sp, #4]
 801e768:	f641 33b2 	movw	r3, #7090	; 0x1bb2
 801e76c:	e7da      	b.n	801e724 <mbedtls_ssl_write+0x88>
    return( (int) len );
 801e76e:	462c      	mov	r4, r5
 801e770:	e7dd      	b.n	801e72e <mbedtls_ssl_write+0x92>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e772:	4c08      	ldr	r4, [pc, #32]	; (801e794 <mbedtls_ssl_write+0xf8>)
 801e774:	e7b2      	b.n	801e6dc <mbedtls_ssl_write+0x40>
 801e776:	bf00      	nop
 801e778:	080329b0 	.word	0x080329b0
 801e77c:	08031c15 	.word	0x08031c15
 801e780:	080329b9 	.word	0x080329b9
 801e784:	08032949 	.word	0x08032949
 801e788:	0803219d 	.word	0x0803219d
 801e78c:	080329d3 	.word	0x080329d3
 801e790:	080310ad 	.word	0x080310ad
 801e794:	ffff8f00 	.word	0xffff8f00

0801e798 <mbedtls_ssl_read>:
{
 801e798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e79a:	460f      	mov	r7, r1
 801e79c:	4616      	mov	r6, r2
    if( ssl == NULL || ssl->conf == NULL )
 801e79e:	4604      	mov	r4, r0
 801e7a0:	2800      	cmp	r0, #0
 801e7a2:	f000 810d 	beq.w	801e9c0 <mbedtls_ssl_read+0x228>
 801e7a6:	6803      	ldr	r3, [r0, #0]
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	f000 8109 	beq.w	801e9c0 <mbedtls_ssl_read+0x228>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 801e7ae:	4b85      	ldr	r3, [pc, #532]	; (801e9c4 <mbedtls_ssl_read+0x22c>)
 801e7b0:	4a85      	ldr	r2, [pc, #532]	; (801e9c8 <mbedtls_ssl_read+0x230>)
 801e7b2:	9300      	str	r3, [sp, #0]
 801e7b4:	2102      	movs	r1, #2
 801e7b6:	f641 2357 	movw	r3, #6743	; 0x1a57
 801e7ba:	f7f2 f867 	bl	801088c <mbedtls_debug_print_msg>
    ret = ssl_check_ctr_renegotiate( ssl );
 801e7be:	4620      	mov	r0, r4
 801e7c0:	f7ff ff36 	bl	801e630 <ssl_check_ctr_renegotiate>
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e7c4:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
    ret = ssl_check_ctr_renegotiate( ssl );
 801e7c8:	4605      	mov	r5, r0
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e7ca:	d00d      	beq.n	801e7e8 <mbedtls_ssl_read+0x50>
 801e7cc:	b160      	cbz	r0, 801e7e8 <mbedtls_ssl_read+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801e7ce:	4b7f      	ldr	r3, [pc, #508]	; (801e9cc <mbedtls_ssl_read+0x234>)
 801e7d0:	9300      	str	r3, [sp, #0]
 801e7d2:	9001      	str	r0, [sp, #4]
 801e7d4:	f641 2379 	movw	r3, #6777	; 0x1a79
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e7d8:	4a7b      	ldr	r2, [pc, #492]	; (801e9c8 <mbedtls_ssl_read+0x230>)
 801e7da:	2101      	movs	r1, #1
 801e7dc:	4620      	mov	r0, r4
 801e7de:	f7f2 f885 	bl	80108ec <mbedtls_debug_print_ret>
}
 801e7e2:	4628      	mov	r0, r5
 801e7e4:	b003      	add	sp, #12
 801e7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e7e8:	6863      	ldr	r3, [r4, #4]
 801e7ea:	2b10      	cmp	r3, #16
 801e7ec:	d00d      	beq.n	801e80a <mbedtls_ssl_read+0x72>
        ret = mbedtls_ssl_handshake( ssl );
 801e7ee:	4620      	mov	r0, r4
 801e7f0:	f7ff fc92 	bl	801e118 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e7f4:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 801e7f8:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e7fa:	d006      	beq.n	801e80a <mbedtls_ssl_read+0x72>
 801e7fc:	b128      	cbz	r0, 801e80a <mbedtls_ssl_read+0x72>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e7fe:	4b74      	ldr	r3, [pc, #464]	; (801e9d0 <mbedtls_ssl_read+0x238>)
 801e800:	9300      	str	r3, [sp, #0]
 801e802:	9001      	str	r0, [sp, #4]
 801e804:	f641 2384 	movw	r3, #6788	; 0x1a84
 801e808:	e7e6      	b.n	801e7d8 <mbedtls_ssl_read+0x40>
    if( ssl->in_offt == NULL )
 801e80a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	f040 80b9 	bne.w	801e984 <mbedtls_ssl_read+0x1ec>
        if( ssl->f_get_timer != NULL &&
 801e812:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e814:	b143      	cbz	r3, 801e828 <mbedtls_ssl_read+0x90>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 801e816:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801e818:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 801e81a:	3001      	adds	r0, #1
 801e81c:	d104      	bne.n	801e828 <mbedtls_ssl_read+0x90>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 801e81e:	6823      	ldr	r3, [r4, #0]
 801e820:	4620      	mov	r0, r4
 801e822:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801e824:	f7fd fd9c 	bl	801c360 <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801e828:	4620      	mov	r0, r4
 801e82a:	f7ff f8db 	bl	801d9e4 <mbedtls_ssl_read_record>
 801e82e:	4605      	mov	r5, r0
 801e830:	b150      	cbz	r0, 801e848 <mbedtls_ssl_read+0xb0>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801e832:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801e836:	d101      	bne.n	801e83c <mbedtls_ssl_read+0xa4>
                return( 0 );
 801e838:	2500      	movs	r5, #0
 801e83a:	e7d2      	b.n	801e7e2 <mbedtls_ssl_read+0x4a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e83c:	4b65      	ldr	r3, [pc, #404]	; (801e9d4 <mbedtls_ssl_read+0x23c>)
 801e83e:	9300      	str	r3, [sp, #0]
 801e840:	9001      	str	r0, [sp, #4]
 801e842:	f641 23ba 	movw	r3, #6842	; 0x1aba
 801e846:	e7c7      	b.n	801e7d8 <mbedtls_ssl_read+0x40>
        if( ssl->in_msglen  == 0 &&
 801e848:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801e84a:	b983      	cbnz	r3, 801e86e <mbedtls_ssl_read+0xd6>
 801e84c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e84e:	2b17      	cmp	r3, #23
 801e850:	d10d      	bne.n	801e86e <mbedtls_ssl_read+0xd6>
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801e852:	4620      	mov	r0, r4
 801e854:	f7ff f8c6 	bl	801d9e4 <mbedtls_ssl_read_record>
 801e858:	4605      	mov	r5, r0
 801e85a:	b140      	cbz	r0, 801e86e <mbedtls_ssl_read+0xd6>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801e85c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801e860:	d0ea      	beq.n	801e838 <mbedtls_ssl_read+0xa0>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e862:	4b5c      	ldr	r3, [pc, #368]	; (801e9d4 <mbedtls_ssl_read+0x23c>)
 801e864:	9300      	str	r3, [sp, #0]
 801e866:	9001      	str	r0, [sp, #4]
 801e868:	f641 23c9 	movw	r3, #6857	; 0x1ac9
 801e86c:	e7b4      	b.n	801e7d8 <mbedtls_ssl_read+0x40>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801e86e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 801e870:	2a16      	cmp	r2, #22
 801e872:	d15a      	bne.n	801e92a <mbedtls_ssl_read+0x192>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 801e874:	4b58      	ldr	r3, [pc, #352]	; (801e9d8 <mbedtls_ssl_read+0x240>)
 801e876:	4a54      	ldr	r2, [pc, #336]	; (801e9c8 <mbedtls_ssl_read+0x230>)
 801e878:	9300      	str	r3, [sp, #0]
 801e87a:	2101      	movs	r1, #1
 801e87c:	f641 23d1 	movw	r3, #6865	; 0x1ad1
 801e880:	4620      	mov	r0, r4
 801e882:	f7f2 f803 	bl	801088c <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801e886:	6822      	ldr	r2, [r4, #0]
 801e888:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801e88c:	07d9      	lsls	r1, r3, #31
 801e88e:	d411      	bmi.n	801e8b4 <mbedtls_ssl_read+0x11c>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801e890:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801e892:	7809      	ldrb	r1, [r1, #0]
 801e894:	b919      	cbnz	r1, 801e89e <mbedtls_ssl_read+0x106>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801e896:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801e89a:	2904      	cmp	r1, #4
 801e89c:	d00a      	beq.n	801e8b4 <mbedtls_ssl_read+0x11c>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 801e89e:	4b4f      	ldr	r3, [pc, #316]	; (801e9dc <mbedtls_ssl_read+0x244>)
 801e8a0:	9300      	str	r3, [sp, #0]
 801e8a2:	f641 23de 	movw	r3, #6878	; 0x1ade
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801e8a6:	4a48      	ldr	r2, [pc, #288]	; (801e9c8 <mbedtls_ssl_read+0x230>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e8a8:	4d4d      	ldr	r5, [pc, #308]	; (801e9e0 <mbedtls_ssl_read+0x248>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801e8aa:	2101      	movs	r1, #1
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f7f1 ffed 	bl	801088c <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e8b2:	e796      	b.n	801e7e2 <mbedtls_ssl_read+0x4a>
            if( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
 801e8b4:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 801e8b8:	0752      	lsls	r2, r2, #29
 801e8ba:	d505      	bpl.n	801e8c8 <mbedtls_ssl_read+0x130>
 801e8bc:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801e8c0:	bb22      	cbnz	r2, 801e90c <mbedtls_ssl_read+0x174>
                ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801e8c2:	f013 0f30 	tst.w	r3, #48	; 0x30
 801e8c6:	d121      	bne.n	801e90c <mbedtls_ssl_read+0x174>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 801e8c8:	4b46      	ldr	r3, [pc, #280]	; (801e9e4 <mbedtls_ssl_read+0x24c>)
 801e8ca:	9300      	str	r3, [sp, #0]
 801e8cc:	4a3e      	ldr	r2, [pc, #248]	; (801e9c8 <mbedtls_ssl_read+0x230>)
 801e8ce:	f641 3303 	movw	r3, #6915	; 0x1b03
 801e8d2:	2103      	movs	r1, #3
 801e8d4:	4620      	mov	r0, r4
 801e8d6:	f7f1 ffd9 	bl	801088c <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801e8da:	6963      	ldr	r3, [r4, #20]
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	dd0a      	ble.n	801e8f6 <mbedtls_ssl_read+0x15e>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801e8e0:	2264      	movs	r2, #100	; 0x64
 801e8e2:	2101      	movs	r1, #1
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	f7fe fc67 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
 801e8ea:	4605      	mov	r5, r0
 801e8ec:	2800      	cmp	r0, #0
 801e8ee:	f47f af78 	bne.w	801e7e2 <mbedtls_ssl_read+0x4a>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 801e8f2:	4d3d      	ldr	r5, [pc, #244]	; (801e9e8 <mbedtls_ssl_read+0x250>)
 801e8f4:	e775      	b.n	801e7e2 <mbedtls_ssl_read+0x4a>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801e8f6:	4b3d      	ldr	r3, [pc, #244]	; (801e9ec <mbedtls_ssl_read+0x254>)
 801e8f8:	9300      	str	r3, [sp, #0]
 801e8fa:	4a33      	ldr	r2, [pc, #204]	; (801e9c8 <mbedtls_ssl_read+0x230>)
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801e8fc:	4d3c      	ldr	r5, [pc, #240]	; (801e9f0 <mbedtls_ssl_read+0x258>)
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801e8fe:	f641 331f 	movw	r3, #6943	; 0x1b1f
 801e902:	2101      	movs	r1, #1
 801e904:	4620      	mov	r0, r4
 801e906:	f7f1 ffc1 	bl	801088c <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801e90a:	e76a      	b.n	801e7e2 <mbedtls_ssl_read+0x4a>
                ret = ssl_start_renegotiation( ssl );
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7ff fe27 	bl	801e560 <ssl_start_renegotiation>
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e912:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
                ret = ssl_start_renegotiation( ssl );
 801e916:	4605      	mov	r5, r0
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801e918:	d0eb      	beq.n	801e8f2 <mbedtls_ssl_read+0x15a>
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d0e9      	beq.n	801e8f2 <mbedtls_ssl_read+0x15a>
                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801e91e:	4b35      	ldr	r3, [pc, #212]	; (801e9f4 <mbedtls_ssl_read+0x25c>)
 801e920:	9300      	str	r3, [sp, #0]
 801e922:	9001      	str	r0, [sp, #4]
 801e924:	f641 3335 	movw	r3, #6965	; 0x1b35
 801e928:	e756      	b.n	801e7d8 <mbedtls_ssl_read+0x40>
        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
 801e92a:	68a3      	ldr	r3, [r4, #8]
 801e92c:	2b03      	cmp	r3, #3
 801e92e:	d10d      	bne.n	801e94c <mbedtls_ssl_read+0x1b4>
            if( ssl->conf->renego_max_records >= 0 )
 801e930:	6823      	ldr	r3, [r4, #0]
 801e932:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e934:	2900      	cmp	r1, #0
 801e936:	db09      	blt.n	801e94c <mbedtls_ssl_read+0x1b4>
                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
 801e938:	68e3      	ldr	r3, [r4, #12]
 801e93a:	3301      	adds	r3, #1
 801e93c:	4299      	cmp	r1, r3
 801e93e:	60e3      	str	r3, [r4, #12]
 801e940:	da04      	bge.n	801e94c <mbedtls_ssl_read+0x1b4>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801e942:	4b2d      	ldr	r3, [pc, #180]	; (801e9f8 <mbedtls_ssl_read+0x260>)
 801e944:	9300      	str	r3, [sp, #0]
 801e946:	f641 3342 	movw	r3, #6978	; 0x1b42
 801e94a:	e7ac      	b.n	801e8a6 <mbedtls_ssl_read+0x10e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801e94c:	2a15      	cmp	r2, #21
 801e94e:	d109      	bne.n	801e964 <mbedtls_ssl_read+0x1cc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 801e950:	4b2a      	ldr	r3, [pc, #168]	; (801e9fc <mbedtls_ssl_read+0x264>)
 801e952:	9300      	str	r3, [sp, #0]
 801e954:	4a1c      	ldr	r2, [pc, #112]	; (801e9c8 <mbedtls_ssl_read+0x230>)
 801e956:	f641 334d 	movw	r3, #6989	; 0x1b4d
 801e95a:	2102      	movs	r1, #2
 801e95c:	4620      	mov	r0, r4
 801e95e:	f7f1 ff95 	bl	801088c <mbedtls_debug_print_msg>
 801e962:	e7c6      	b.n	801e8f2 <mbedtls_ssl_read+0x15a>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 801e964:	2a17      	cmp	r2, #23
 801e966:	d004      	beq.n	801e972 <mbedtls_ssl_read+0x1da>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801e968:	4b25      	ldr	r3, [pc, #148]	; (801ea00 <mbedtls_ssl_read+0x268>)
 801e96a:	9300      	str	r3, [sp, #0]
 801e96c:	f641 3353 	movw	r3, #6995	; 0x1b53
 801e970:	e799      	b.n	801e8a6 <mbedtls_ssl_read+0x10e>
        ssl->in_offt = ssl->in_msg;
 801e972:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e974:	6723      	str	r3, [r4, #112]	; 0x70
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801e976:	6863      	ldr	r3, [r4, #4]
 801e978:	2b10      	cmp	r3, #16
 801e97a:	d103      	bne.n	801e984 <mbedtls_ssl_read+0x1ec>
            ssl_set_timer( ssl, 0 );
 801e97c:	2100      	movs	r1, #0
 801e97e:	4620      	mov	r0, r4
 801e980:	f7fd fcee 	bl	801c360 <ssl_set_timer>
    n = ( len < ssl->in_msglen )
 801e984:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    memcpy( buf, ssl->in_offt, n );
 801e986:	6f21      	ldr	r1, [r4, #112]	; 0x70
    n = ( len < ssl->in_msglen )
 801e988:	42b5      	cmp	r5, r6
 801e98a:	bf28      	it	cs
 801e98c:	4635      	movcs	r5, r6
    memcpy( buf, ssl->in_offt, n );
 801e98e:	462a      	mov	r2, r5
 801e990:	4638      	mov	r0, r7
 801e992:	f003 fc09 	bl	80221a8 <memcpy>
    ssl->in_msglen -= n;
 801e996:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801e998:	1b5b      	subs	r3, r3, r5
 801e99a:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen == 0 )
 801e99c:	b963      	cbnz	r3, 801e9b8 <mbedtls_ssl_read+0x220>
        ssl->in_offt = NULL;
 801e99e:	6723      	str	r3, [r4, #112]	; 0x70
        ssl->keep_current_message = 0;
 801e9a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 801e9a4:	4b17      	ldr	r3, [pc, #92]	; (801ea04 <mbedtls_ssl_read+0x26c>)
 801e9a6:	9300      	str	r3, [sp, #0]
 801e9a8:	4a07      	ldr	r2, [pc, #28]	; (801e9c8 <mbedtls_ssl_read+0x230>)
 801e9aa:	f641 3382 	movw	r3, #7042	; 0x1b82
 801e9ae:	2102      	movs	r1, #2
 801e9b0:	4620      	mov	r0, r4
 801e9b2:	f7f1 ff6b 	bl	801088c <mbedtls_debug_print_msg>
    return( (int) n );
 801e9b6:	e714      	b.n	801e7e2 <mbedtls_ssl_read+0x4a>
        ssl->in_offt += n;
 801e9b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801e9ba:	442b      	add	r3, r5
 801e9bc:	6723      	str	r3, [r4, #112]	; 0x70
 801e9be:	e7f1      	b.n	801e9a4 <mbedtls_ssl_read+0x20c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e9c0:	4d11      	ldr	r5, [pc, #68]	; (801ea08 <mbedtls_ssl_read+0x270>)
 801e9c2:	e70e      	b.n	801e7e2 <mbedtls_ssl_read+0x4a>
 801e9c4:	080329dc 	.word	0x080329dc
 801e9c8:	08031c15 	.word	0x08031c15
 801e9cc:	080329b9 	.word	0x080329b9
 801e9d0:	08032949 	.word	0x08032949
 801e9d4:	08031106 	.word	0x08031106
 801e9d8:	080329e4 	.word	0x080329e4
 801e9dc:	080329ff 	.word	0x080329ff
 801e9e0:	ffff8900 	.word	0xffff8900
 801e9e4:	08032a25 	.word	0x08032a25
 801e9e8:	ffff9700 	.word	0xffff9700
 801e9ec:	08031745 	.word	0x08031745
 801e9f0:	ffff9400 	.word	0xffff9400
 801e9f4:	0803296e 	.word	0x0803296e
 801e9f8:	08032a4b 	.word	0x08032a4b
 801e9fc:	08032a7e 	.word	0x08032a7e
 801ea00:	08032aa3 	.word	0x08032aa3
 801ea04:	08032ac0 	.word	0x08032ac0
 801ea08:	ffff8f00 	.word	0xffff8f00

0801ea0c <mbedtls_ssl_free>:
{
 801ea0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 801ea0e:	4604      	mov	r4, r0
 801ea10:	2800      	cmp	r0, #0
 801ea12:	d060      	beq.n	801ead6 <mbedtls_ssl_free+0xca>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 801ea14:	4b31      	ldr	r3, [pc, #196]	; (801eadc <mbedtls_ssl_free+0xd0>)
 801ea16:	9300      	str	r3, [sp, #0]
 801ea18:	4a31      	ldr	r2, [pc, #196]	; (801eae0 <mbedtls_ssl_free+0xd4>)
 801ea1a:	f641 43b0 	movw	r3, #7344	; 0x1cb0
 801ea1e:	2102      	movs	r1, #2
 801ea20:	f7f1 ff34 	bl	801088c <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 801ea24:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801ea28:	b140      	cbz	r0, 801ea3c <mbedtls_ssl_free+0x30>
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 801ea2a:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801ea2e:	f7fd fa4b 	bl	801bec8 <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 801ea32:	4b2c      	ldr	r3, [pc, #176]	; (801eae4 <mbedtls_ssl_free+0xd8>)
 801ea34:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	4798      	blx	r3
    if( ssl->in_buf != NULL )
 801ea3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea3e:	b138      	cbz	r0, 801ea50 <mbedtls_ssl_free+0x44>
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 801ea40:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801ea44:	f7fd fa40 	bl	801bec8 <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 801ea48:	4b26      	ldr	r3, [pc, #152]	; (801eae4 <mbedtls_ssl_free+0xd8>)
 801ea4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	4798      	blx	r3
    if( ssl->transform )
 801ea50:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ea52:	b128      	cbz	r0, 801ea60 <mbedtls_ssl_free+0x54>
        mbedtls_ssl_transform_free( ssl->transform );
 801ea54:	f7ff fbd2 	bl	801e1fc <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801ea58:	4b22      	ldr	r3, [pc, #136]	; (801eae4 <mbedtls_ssl_free+0xd8>)
 801ea5a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	4798      	blx	r3
    if( ssl->handshake )
 801ea60:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ea62:	b188      	cbz	r0, 801ea88 <mbedtls_ssl_free+0x7c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801ea64:	f7ff fbe4 	bl	801e230 <mbedtls_ssl_handshake_free>
        mbedtls_free( ssl->handshake );
 801ea68:	4d1e      	ldr	r5, [pc, #120]	; (801eae4 <mbedtls_ssl_free+0xd8>)
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801ea6a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ea6c:	f7ff fbc6 	bl	801e1fc <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801ea70:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ea72:	f7ff fc03 	bl	801e27c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 801ea76:	682b      	ldr	r3, [r5, #0]
 801ea78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ea7a:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801ea7c:	682b      	ldr	r3, [r5, #0]
 801ea7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ea80:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801ea82:	682b      	ldr	r3, [r5, #0]
 801ea84:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ea86:	4798      	blx	r3
    if( ssl->session )
 801ea88:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ea8a:	b128      	cbz	r0, 801ea98 <mbedtls_ssl_free+0x8c>
        mbedtls_ssl_session_free( ssl->session );
 801ea8c:	f7ff fbf6 	bl	801e27c <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801ea90:	4b14      	ldr	r3, [pc, #80]	; (801eae4 <mbedtls_ssl_free+0xd8>)
 801ea92:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ea94:	681b      	ldr	r3, [r3, #0]
 801ea96:	4798      	blx	r3
    if( ssl->hostname != NULL )
 801ea98:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801ea9c:	b15d      	cbz	r5, 801eab6 <mbedtls_ssl_free+0xaa>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 801ea9e:	4628      	mov	r0, r5
 801eaa0:	f7e1 fba0 	bl	80001e4 <strlen>
 801eaa4:	4601      	mov	r1, r0
 801eaa6:	4628      	mov	r0, r5
 801eaa8:	f7fd fa0e 	bl	801bec8 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 801eaac:	4b0d      	ldr	r3, [pc, #52]	; (801eae4 <mbedtls_ssl_free+0xd8>)
 801eaae:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801eab2:	681b      	ldr	r3, [r3, #0]
 801eab4:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 801eab6:	4b0c      	ldr	r3, [pc, #48]	; (801eae8 <mbedtls_ssl_free+0xdc>)
 801eab8:	9300      	str	r3, [sp, #0]
 801eaba:	4620      	mov	r0, r4
 801eabc:	4a08      	ldr	r2, [pc, #32]	; (801eae0 <mbedtls_ssl_free+0xd4>)
 801eabe:	f641 43f1 	movw	r3, #7409	; 0x1cf1
 801eac2:	2102      	movs	r1, #2
 801eac4:	f7f1 fee2 	bl	801088c <mbedtls_debug_print_msg>
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801eac8:	21dc      	movs	r1, #220	; 0xdc
 801eaca:	4620      	mov	r0, r4
}
 801eacc:	b003      	add	sp, #12
 801eace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801ead2:	f7fd b9f9 	b.w	801bec8 <mbedtls_zeroize>
}
 801ead6:	b003      	add	sp, #12
 801ead8:	bd30      	pop	{r4, r5, pc}
 801eada:	bf00      	nop
 801eadc:	08032ac8 	.word	0x08032ac8
 801eae0:	08031c15 	.word	0x08031c15
 801eae4:	2000053c 	.word	0x2000053c
 801eae8:	08032ad0 	.word	0x08032ad0

0801eaec <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 801eaec:	2270      	movs	r2, #112	; 0x70
 801eaee:	2100      	movs	r1, #0
 801eaf0:	f003 bb82 	b.w	80221f8 <memset>

0801eaf4 <mbedtls_ssl_config_defaults>:
{
 801eaf4:	b510      	push	{r4, lr}
 801eaf6:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 801eaf8:	f002 0201 	and.w	r2, r2, #1
 801eafc:	f001 0001 	and.w	r0, r1, #1
 801eb00:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 801eb04:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801eb08:	f020 0003 	bic.w	r0, r0, #3
 801eb0c:	4302      	orrs	r2, r0
 801eb0e:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 801eb12:	b959      	cbnz	r1, 801eb2c <mbedtls_ssl_config_defaults+0x38>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 801eb14:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 801eb18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801eb1c:	f022 020c 	bic.w	r2, r2, #12
 801eb20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801eb24:	f042 0208 	orr.w	r2, r2, #8
 801eb28:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801eb2c:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 801eb30:	f042 0202 	orr.w	r2, r2, #2
 801eb34:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
 801eb38:	2210      	movs	r2, #16
 801eb3a:	65e2      	str	r2, [r4, #92]	; 0x5c
    memset( conf->renego_period,     0x00, 2 );
 801eb3c:	2200      	movs	r2, #0
 801eb3e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    switch( preset )
 801eb42:	2b02      	cmp	r3, #2
    memset( conf->renego_period + 2, 0xFF, 6 );
 801eb44:	f04f 32ff 	mov.w	r2, #4294967295
 801eb48:	f8c4 2062 	str.w	r2, [r4, #98]	; 0x62
 801eb4c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    switch( preset )
 801eb50:	d110      	bne.n	801eb74 <mbedtls_ssl_config_defaults+0x80>
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801eb52:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 801eb56:	66a3      	str	r3, [r4, #104]	; 0x68
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 801eb58:	4b0e      	ldr	r3, [pc, #56]	; (801eb94 <mbedtls_ssl_config_defaults+0xa0>)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 801eb5a:	4a0f      	ldr	r2, [pc, #60]	; (801eb98 <mbedtls_ssl_config_defaults+0xa4>)
 801eb5c:	63e2      	str	r2, [r4, #60]	; 0x3c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801eb5e:	e9c4 3302 	strd	r3, r3, [r4, #8]
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801eb62:	f103 020c 	add.w	r2, r3, #12
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801eb66:	e9c4 3300 	strd	r3, r3, [r4]
            conf->curve_list = ssl_preset_suiteb_curves;
 801eb6a:	3318      	adds	r3, #24
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801eb6c:	64e2      	str	r2, [r4, #76]	; 0x4c
            conf->curve_list = ssl_preset_suiteb_curves;
 801eb6e:	6523      	str	r3, [r4, #80]	; 0x50
}
 801eb70:	2000      	movs	r0, #0
 801eb72:	bd10      	pop	{r4, pc}
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801eb74:	4b09      	ldr	r3, [pc, #36]	; (801eb9c <mbedtls_ssl_config_defaults+0xa8>)
 801eb76:	66a3      	str	r3, [r4, #104]	; 0x68
                                   mbedtls_ssl_list_ciphersuites();
 801eb78:	f7fb fa06 	bl	8019f88 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 801eb7c:	4b08      	ldr	r3, [pc, #32]	; (801eba0 <mbedtls_ssl_config_defaults+0xac>)
 801eb7e:	63e3      	str	r3, [r4, #60]	; 0x3c
            conf->sig_hashes = ssl_preset_default_hashes;
 801eb80:	4b08      	ldr	r3, [pc, #32]	; (801eba4 <mbedtls_ssl_config_defaults+0xb0>)
 801eb82:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801eb84:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801eb88:	e9c4 0000 	strd	r0, r0, [r4]
            conf->curve_list = mbedtls_ecp_grp_id_list();
 801eb8c:	f7f3 f8f8 	bl	8011d80 <mbedtls_ecp_grp_id_list>
 801eb90:	6520      	str	r0, [r4, #80]	; 0x50
 801eb92:	e7ed      	b.n	801eb70 <mbedtls_ssl_config_defaults+0x7c>
 801eb94:	20000540 	.word	0x20000540
 801eb98:	0802d3c8 	.word	0x0802d3c8
 801eb9c:	01030303 	.word	0x01030303
 801eba0:	0802d3b8 	.word	0x0802d3b8
 801eba4:	2000055c 	.word	0x2000055c

0801eba8 <mbedtls_ssl_config_free>:
{
 801eba8:	b570      	push	{r4, r5, r6, lr}
 801ebaa:	4604      	mov	r4, r0
        mbedtls_free( cur );
 801ebac:	4d06      	ldr	r5, [pc, #24]	; (801ebc8 <mbedtls_ssl_config_free+0x20>)
    ssl_key_cert_free( conf->key_cert );
 801ebae:	6c00      	ldr	r0, [r0, #64]	; 0x40
    while( cur != NULL )
 801ebb0:	b928      	cbnz	r0, 801ebbe <mbedtls_ssl_config_free+0x16>
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801ebb2:	4620      	mov	r0, r4
 801ebb4:	2170      	movs	r1, #112	; 0x70
}
 801ebb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801ebba:	f7fd b985 	b.w	801bec8 <mbedtls_zeroize>
        next = cur->next;
 801ebbe:	6886      	ldr	r6, [r0, #8]
        mbedtls_free( cur );
 801ebc0:	682b      	ldr	r3, [r5, #0]
 801ebc2:	4798      	blx	r3
        cur = next;
 801ebc4:	4630      	mov	r0, r6
 801ebc6:	e7f3      	b.n	801ebb0 <mbedtls_ssl_config_free+0x8>
 801ebc8:	2000053c 	.word	0x2000053c

0801ebcc <mbedtls_ssl_sig_from_pk>:
{
 801ebcc:	b510      	push	{r4, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801ebce:	2101      	movs	r1, #1
{
 801ebd0:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801ebd2:	f7f6 fe61 	bl	8015898 <mbedtls_pk_can_do>
 801ebd6:	b940      	cbnz	r0, 801ebea <mbedtls_ssl_sig_from_pk+0x1e>
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
 801ebd8:	2104      	movs	r1, #4
 801ebda:	4620      	mov	r0, r4
 801ebdc:	f7f6 fe5c 	bl	8015898 <mbedtls_pk_can_do>
 801ebe0:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
 801ebe2:	bf0c      	ite	eq
 801ebe4:	2000      	moveq	r0, #0
 801ebe6:	2003      	movne	r0, #3
}
 801ebe8:	bd10      	pop	{r4, pc}
        return( MBEDTLS_SSL_SIG_RSA );
 801ebea:	2001      	movs	r0, #1
 801ebec:	e7fc      	b.n	801ebe8 <mbedtls_ssl_sig_from_pk+0x1c>

0801ebee <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
 801ebee:	2801      	cmp	r0, #1
 801ebf0:	d003      	beq.n	801ebfa <mbedtls_ssl_pk_alg_from_sig+0xc>
 801ebf2:	2803      	cmp	r0, #3
 801ebf4:	bf14      	ite	ne
 801ebf6:	2000      	movne	r0, #0
 801ebf8:	2004      	moveq	r0, #4
}
 801ebfa:	4770      	bx	lr

0801ebfc <mbedtls_ssl_md_alg_from_hash>:
    switch( hash )
 801ebfc:	1e43      	subs	r3, r0, #1
 801ebfe:	2b05      	cmp	r3, #5
 801ec00:	bf9a      	itte	ls
 801ec02:	3002      	addls	r0, #2
 801ec04:	b2c0      	uxtbls	r0, r0
{
 801ec06:	2000      	movhi	r0, #0
}
 801ec08:	4770      	bx	lr

0801ec0a <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
 801ec0a:	1ec3      	subs	r3, r0, #3
 801ec0c:	2b05      	cmp	r3, #5
 801ec0e:	bf9a      	itte	ls
 801ec10:	3802      	subls	r0, #2
 801ec12:	b2c0      	uxtbls	r0, r0
 801ec14:	2000      	movhi	r0, #0
}
 801ec16:	4770      	bx	lr

0801ec18 <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
 801ec18:	6803      	ldr	r3, [r0, #0]
 801ec1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec1c:	b11b      	cbz	r3, 801ec26 <mbedtls_ssl_check_curve+0xe>
 801ec1e:	3b01      	subs	r3, #1
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 801ec20:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801ec24:	b912      	cbnz	r2, 801ec2c <mbedtls_ssl_check_curve+0x14>
        return( -1 );
 801ec26:	f04f 30ff 	mov.w	r0, #4294967295
 801ec2a:	4770      	bx	lr
        if( *gid == grp_id )
 801ec2c:	428a      	cmp	r2, r1
 801ec2e:	d1f7      	bne.n	801ec20 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
 801ec30:	2000      	movs	r0, #0
}
 801ec32:	4770      	bx	lr

0801ec34 <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
 801ec34:	6803      	ldr	r3, [r0, #0]
 801ec36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ec38:	b11b      	cbz	r3, 801ec42 <mbedtls_ssl_check_sig_hash+0xe>
 801ec3a:	3b04      	subs	r3, #4
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 801ec3c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801ec40:	b912      	cbnz	r2, 801ec48 <mbedtls_ssl_check_sig_hash+0x14>
        return( -1 );
 801ec42:	f04f 30ff 	mov.w	r0, #4294967295
 801ec46:	4770      	bx	lr
        if( *cur == (int) md )
 801ec48:	4291      	cmp	r1, r2
 801ec4a:	d1f7      	bne.n	801ec3c <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
 801ec4c:	2000      	movs	r0, #0
}
 801ec4e:	4770      	bx	lr

0801ec50 <mbedtls_ssl_check_cert_usage>:
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ec50:	2a01      	cmp	r2, #1
{
 801ec52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec54:	4606      	mov	r6, r0
 801ec56:	4617      	mov	r7, r2
 801ec58:	461d      	mov	r5, r3
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ec5a:	d12a      	bne.n	801ecb2 <mbedtls_ssl_check_cert_usage+0x62>
        switch( ciphersuite->key_exchange )
 801ec5c:	7a8b      	ldrb	r3, [r1, #10]
 801ec5e:	3b01      	subs	r3, #1
 801ec60:	2b09      	cmp	r3, #9
 801ec62:	d828      	bhi.n	801ecb6 <mbedtls_ssl_check_cert_usage+0x66>
 801ec64:	e8df f003 	tbb	[pc, r3]
 801ec68:	25252505 	.word	0x25252505
 801ec6c:	27052727 	.word	0x27052727
 801ec70:	2323      	.short	0x2323
 801ec72:	2120      	movs	r1, #32
    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 801ec74:	4630      	mov	r0, r6
 801ec76:	f001 fd9f 	bl	80207b8 <mbedtls_x509_crt_check_key_usage>
 801ec7a:	4604      	mov	r4, r0
 801ec7c:	b128      	cbz	r0, 801ec8a <mbedtls_ssl_check_cert_usage+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 801ec7e:	682b      	ldr	r3, [r5, #0]
 801ec80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ec84:	602b      	str	r3, [r5, #0]
        ret = -1;
 801ec86:	f04f 34ff 	mov.w	r4, #4294967295
    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
 801ec8a:	490c      	ldr	r1, [pc, #48]	; (801ecbc <mbedtls_ssl_check_cert_usage+0x6c>)
 801ec8c:	4b0c      	ldr	r3, [pc, #48]	; (801ecc0 <mbedtls_ssl_check_cert_usage+0x70>)
 801ec8e:	2208      	movs	r2, #8
 801ec90:	2f01      	cmp	r7, #1
 801ec92:	bf18      	it	ne
 801ec94:	4619      	movne	r1, r3
 801ec96:	4630      	mov	r0, r6
 801ec98:	f001 fdd6 	bl	8020848 <mbedtls_x509_crt_check_extended_key_usage>
 801ec9c:	b128      	cbz	r0, 801ecaa <mbedtls_ssl_check_cert_usage+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
 801ec9e:	682b      	ldr	r3, [r5, #0]
 801eca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801eca4:	602b      	str	r3, [r5, #0]
        ret = -1;
 801eca6:	f04f 34ff 	mov.w	r4, #4294967295
}
 801ecaa:	4620      	mov	r0, r4
 801ecac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 801ecae:	2108      	movs	r1, #8
                break;
 801ecb0:	e7e0      	b.n	801ec74 <mbedtls_ssl_check_cert_usage+0x24>
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 801ecb2:	2180      	movs	r1, #128	; 0x80
 801ecb4:	e7de      	b.n	801ec74 <mbedtls_ssl_check_cert_usage+0x24>
    int usage = 0;
 801ecb6:	2100      	movs	r1, #0
 801ecb8:	e7dc      	b.n	801ec74 <mbedtls_ssl_check_cert_usage+0x24>
 801ecba:	bf00      	nop
 801ecbc:	0803039e 	.word	0x0803039e
 801ecc0:	080303d6 	.word	0x080303d6

0801ecc4 <mbedtls_ssl_parse_certificate>:
{
 801ecc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801ecc8:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ecca:	4a8f      	ldr	r2, [pc, #572]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801eccc:	681f      	ldr	r7, [r3, #0]
    int authmode = ssl->conf->authmode;
 801ecce:	6803      	ldr	r3, [r0, #0]
 801ecd0:	f893 606c 	ldrb.w	r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ecd4:	4b8d      	ldr	r3, [pc, #564]	; (801ef0c <mbedtls_ssl_parse_certificate+0x248>)
 801ecd6:	9300      	str	r3, [sp, #0]
 801ecd8:	2102      	movs	r1, #2
 801ecda:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
{
 801ecde:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ece0:	f7f1 fdd4 	bl	801088c <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801ece4:	7abb      	ldrb	r3, [r7, #10]
 801ece6:	2b0b      	cmp	r3, #11
    int authmode = ssl->conf->authmode;
 801ece8:	f3c6 0681 	ubfx	r6, r6, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801ecec:	d816      	bhi.n	801ed1c <mbedtls_ssl_parse_certificate+0x58>
 801ecee:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801ecf2:	40dd      	lsrs	r5, r3
 801ecf4:	43ed      	mvns	r5, r5
 801ecf6:	f015 0501 	ands.w	r5, r5, #1
 801ecfa:	d10f      	bne.n	801ed1c <mbedtls_ssl_parse_certificate+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 801ecfc:	4b84      	ldr	r3, [pc, #528]	; (801ef10 <mbedtls_ssl_parse_certificate+0x24c>)
 801ecfe:	9300      	str	r3, [sp, #0]
 801ed00:	4a81      	ldr	r2, [pc, #516]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ed02:	f241 03e7 	movw	r3, #4327	; 0x10e7
 801ed06:	2102      	movs	r1, #2
 801ed08:	4620      	mov	r0, r4
 801ed0a:	f7f1 fdbf 	bl	801088c <mbedtls_debug_print_msg>
        ssl->state++;
 801ed0e:	6863      	ldr	r3, [r4, #4]
 801ed10:	3301      	adds	r3, #1
 801ed12:	6063      	str	r3, [r4, #4]
}
 801ed14:	4628      	mov	r0, r5
 801ed16:	b004      	add	sp, #16
 801ed18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ed1c:	4620      	mov	r0, r4
 801ed1e:	f7fe fe61 	bl	801d9e4 <mbedtls_ssl_read_record>
 801ed22:	4605      	mov	r5, r0
 801ed24:	b150      	cbz	r0, 801ed3c <mbedtls_ssl_parse_certificate+0x78>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ed26:	4b7b      	ldr	r3, [pc, #492]	; (801ef14 <mbedtls_ssl_parse_certificate+0x250>)
 801ed28:	9300      	str	r3, [sp, #0]
 801ed2a:	9001      	str	r0, [sp, #4]
 801ed2c:	f241 1308 	movw	r3, #4360	; 0x1108
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801ed30:	4a75      	ldr	r2, [pc, #468]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ed32:	2101      	movs	r1, #1
 801ed34:	4620      	mov	r0, r4
 801ed36:	f7f1 fdd9 	bl	80108ec <mbedtls_debug_print_ret>
            return( ret );
 801ed3a:	e7eb      	b.n	801ed14 <mbedtls_ssl_parse_certificate+0x50>
    ssl->state++;
 801ed3c:	6863      	ldr	r3, [r4, #4]
 801ed3e:	3301      	adds	r3, #1
 801ed40:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801ed42:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ed44:	2b16      	cmp	r3, #22
 801ed46:	d00f      	beq.n	801ed68 <mbedtls_ssl_parse_certificate+0xa4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ed48:	4b73      	ldr	r3, [pc, #460]	; (801ef18 <mbedtls_ssl_parse_certificate+0x254>)
 801ed4a:	4a6f      	ldr	r2, [pc, #444]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ed4c:	9300      	str	r3, [sp, #0]
 801ed4e:	2101      	movs	r1, #1
 801ed50:	f241 1345 	movw	r3, #4421	; 0x1145
 801ed54:	4620      	mov	r0, r4
 801ed56:	f7f1 fd99 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ed5a:	220a      	movs	r2, #10
 801ed5c:	2102      	movs	r1, #2
 801ed5e:	4620      	mov	r0, r4
 801ed60:	f7fe fa2a 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ed64:	4d6d      	ldr	r5, [pc, #436]	; (801ef1c <mbedtls_ssl_parse_certificate+0x258>)
 801ed66:	e7d5      	b.n	801ed14 <mbedtls_ssl_parse_certificate+0x50>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801ed68:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801ed6a:	7813      	ldrb	r3, [r2, #0]
 801ed6c:	2b0b      	cmp	r3, #11
 801ed6e:	d103      	bne.n	801ed78 <mbedtls_ssl_parse_certificate+0xb4>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 801ed70:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801ed74:	2909      	cmp	r1, #9
 801ed76:	d80f      	bhi.n	801ed98 <mbedtls_ssl_parse_certificate+0xd4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ed78:	4b67      	ldr	r3, [pc, #412]	; (801ef18 <mbedtls_ssl_parse_certificate+0x254>)
 801ed7a:	9300      	str	r3, [sp, #0]
 801ed7c:	f241 134e 	movw	r3, #4430	; 0x114e
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ed80:	4a61      	ldr	r2, [pc, #388]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ed82:	2101      	movs	r1, #1
 801ed84:	4620      	mov	r0, r4
 801ed86:	f7f1 fd81 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ed8a:	2232      	movs	r2, #50	; 0x32
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ed8c:	2102      	movs	r1, #2
 801ed8e:	4620      	mov	r0, r4
 801ed90:	f7fe fa12 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 801ed94:	4d62      	ldr	r5, [pc, #392]	; (801ef20 <mbedtls_ssl_parse_certificate+0x25c>)
 801ed96:	e7bd      	b.n	801ed14 <mbedtls_ssl_parse_certificate+0x50>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801ed98:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
 801ed9c:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801ed9e:	ba5b      	rev16	r3, r3
 801eda0:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
 801eda2:	b912      	cbnz	r2, 801edaa <mbedtls_ssl_parse_certificate+0xe6>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801eda4:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 801eda6:	4299      	cmp	r1, r3
 801eda8:	d004      	beq.n	801edb4 <mbedtls_ssl_parse_certificate+0xf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801edaa:	4b5b      	ldr	r3, [pc, #364]	; (801ef18 <mbedtls_ssl_parse_certificate+0x254>)
 801edac:	9300      	str	r3, [sp, #0]
 801edae:	f241 135e 	movw	r3, #4446	; 0x115e
 801edb2:	e7e5      	b.n	801ed80 <mbedtls_ssl_parse_certificate+0xbc>
    if( ssl->session_negotiate->peer_cert != NULL )
 801edb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801edb6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801edb8:	b130      	cbz	r0, 801edc8 <mbedtls_ssl_parse_certificate+0x104>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 801edba:	f002 f8fb 	bl	8020fb4 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 801edbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801edc0:	4b58      	ldr	r3, [pc, #352]	; (801ef24 <mbedtls_ssl_parse_certificate+0x260>)
 801edc2:	6e50      	ldr	r0, [r2, #100]	; 0x64
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	4798      	blx	r3
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 801edc8:	4b57      	ldr	r3, [pc, #348]	; (801ef28 <mbedtls_ssl_parse_certificate+0x264>)
 801edca:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801edcc:	681b      	ldr	r3, [r3, #0]
 801edce:	f44f 719a 	mov.w	r1, #308	; 0x134
 801edd2:	2001      	movs	r0, #1
 801edd4:	4798      	blx	r3
 801edd6:	6668      	str	r0, [r5, #100]	; 0x64
 801edd8:	b990      	cbnz	r0, 801ee00 <mbedtls_ssl_parse_certificate+0x13c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 801edda:	f44f 739a 	mov.w	r3, #308	; 0x134
 801edde:	9301      	str	r3, [sp, #4]
 801ede0:	4b52      	ldr	r3, [pc, #328]	; (801ef2c <mbedtls_ssl_parse_certificate+0x268>)
 801ede2:	4a49      	ldr	r2, [pc, #292]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ede4:	9300      	str	r3, [sp, #0]
 801ede6:	2101      	movs	r1, #1
 801ede8:	f241 136e 	movw	r3, #4462	; 0x116e
 801edec:	4620      	mov	r0, r4
 801edee:	f7f1 fd4d 	bl	801088c <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801edf2:	2250      	movs	r2, #80	; 0x50
 801edf4:	2102      	movs	r1, #2
 801edf6:	4620      	mov	r0, r4
 801edf8:	f7fe f9de 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801edfc:	4d4c      	ldr	r5, [pc, #304]	; (801ef30 <mbedtls_ssl_parse_certificate+0x26c>)
 801edfe:	e789      	b.n	801ed14 <mbedtls_ssl_parse_certificate+0x50>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801ee00:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch( ret )
 801ee02:	f8df 9140 	ldr.w	r9, [pc, #320]	; 801ef44 <mbedtls_ssl_parse_certificate+0x280>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801ee06:	6e58      	ldr	r0, [r3, #100]	; 0x64
        switch( ret )
 801ee08:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801ef48 <mbedtls_ssl_parse_certificate+0x284>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801ee0c:	f002 f8cc 	bl	8020fa8 <mbedtls_x509_crt_init>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ee10:	2500      	movs	r5, #0
    i += 3;
 801ee12:	f04f 0807 	mov.w	r8, #7
    while( i < ssl->in_hslen )
 801ee16:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801ee1a:	4543      	cmp	r3, r8
 801ee1c:	d824      	bhi.n	801ee68 <mbedtls_ssl_parse_certificate+0x1a4>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 801ee1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ee20:	4a39      	ldr	r2, [pc, #228]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ee22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ee24:	9301      	str	r3, [sp, #4]
 801ee26:	4b43      	ldr	r3, [pc, #268]	; (801ef34 <mbedtls_ssl_parse_certificate+0x270>)
 801ee28:	9300      	str	r3, [sp, #0]
 801ee2a:	2103      	movs	r1, #3
 801ee2c:	f241 13ac 	movw	r3, #4524	; 0x11ac
 801ee30:	4620      	mov	r0, r4
 801ee32:	f7f1 fe85 	bl	8010b40 <mbedtls_debug_print_crt>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801ee36:	f8d4 8000 	ldr.w	r8, [r4]
 801ee3a:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
 801ee3e:	07db      	lsls	r3, r3, #31
 801ee40:	f100 8084 	bmi.w	801ef4c <mbedtls_ssl_parse_certificate+0x288>
 801ee44:	68a1      	ldr	r1, [r4, #8]
 801ee46:	2901      	cmp	r1, #1
 801ee48:	f040 8080 	bne.w	801ef4c <mbedtls_ssl_parse_certificate+0x288>
        if( ssl->session->peer_cert == NULL )
 801ee4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ee4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d147      	bne.n	801eee4 <mbedtls_ssl_parse_certificate+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
 801ee54:	4b38      	ldr	r3, [pc, #224]	; (801ef38 <mbedtls_ssl_parse_certificate+0x274>)
 801ee56:	4a2c      	ldr	r2, [pc, #176]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ee58:	9300      	str	r3, [sp, #0]
 801ee5a:	f241 13b8 	movw	r3, #4536	; 0x11b8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801ee5e:	4620      	mov	r0, r4
 801ee60:	f7f1 fd14 	bl	801088c <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ee64:	2231      	movs	r2, #49	; 0x31
 801ee66:	e791      	b.n	801ed8c <mbedtls_ssl_parse_certificate+0xc8>
        if( ssl->in_msg[i] != 0 )
 801ee68:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801ee6a:	f811 2008 	ldrb.w	r2, [r1, r8]
 801ee6e:	b122      	cbz	r2, 801ee7a <mbedtls_ssl_parse_certificate+0x1b6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ee70:	4b29      	ldr	r3, [pc, #164]	; (801ef18 <mbedtls_ssl_parse_certificate+0x254>)
 801ee72:	9300      	str	r3, [sp, #0]
 801ee74:	f241 137d 	movw	r3, #4477	; 0x117d
 801ee78:	e782      	b.n	801ed80 <mbedtls_ssl_parse_certificate+0xbc>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801ee7a:	eb01 0008 	add.w	r0, r1, r8
 801ee7e:	7845      	ldrb	r5, [r0, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 801ee80:	7882      	ldrb	r2, [r0, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801ee82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 801ee86:	2a7f      	cmp	r2, #127	; 0x7f
        i += 3;
 801ee88:	f108 0003 	add.w	r0, r8, #3
        if( n < 128 || i + n > ssl->in_hslen )
 801ee8c:	d903      	bls.n	801ee96 <mbedtls_ssl_parse_certificate+0x1d2>
 801ee8e:	eb02 0800 	add.w	r8, r2, r0
 801ee92:	4598      	cmp	r8, r3
 801ee94:	d904      	bls.n	801eea0 <mbedtls_ssl_parse_certificate+0x1dc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ee96:	4b20      	ldr	r3, [pc, #128]	; (801ef18 <mbedtls_ssl_parse_certificate+0x254>)
 801ee98:	9300      	str	r3, [sp, #0]
 801ee9a:	f241 1389 	movw	r3, #4489	; 0x1189
 801ee9e:	e76f      	b.n	801ed80 <mbedtls_ssl_parse_certificate+0xbc>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801eea0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eea2:	4401      	add	r1, r0
 801eea4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801eea6:	f002 f8f1 	bl	802108c <mbedtls_x509_crt_parse_der>
        switch( ret )
 801eeaa:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801eeae:	4605      	mov	r5, r0
        switch( ret )
 801eeb0:	d014      	beq.n	801eedc <mbedtls_ssl_parse_certificate+0x218>
 801eeb2:	4548      	cmp	r0, r9
 801eeb4:	da0f      	bge.n	801eed6 <mbedtls_ssl_parse_certificate+0x212>
 801eeb6:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 801eeba:	d011      	beq.n	801eee0 <mbedtls_ssl_parse_certificate+0x21c>
 801eebc:	4550      	cmp	r0, sl
 801eebe:	d0aa      	beq.n	801ee16 <mbedtls_ssl_parse_certificate+0x152>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801eec0:	222a      	movs	r2, #42	; 0x2a
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 801eec2:	2102      	movs	r1, #2
 801eec4:	4620      	mov	r0, r4
 801eec6:	f7fe f977 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801eeca:	4b1c      	ldr	r3, [pc, #112]	; (801ef3c <mbedtls_ssl_parse_certificate+0x278>)
 801eecc:	9300      	str	r3, [sp, #0]
 801eece:	9501      	str	r5, [sp, #4]
 801eed0:	f241 13a5 	movw	r3, #4517	; 0x11a5
 801eed4:	e72c      	b.n	801ed30 <mbedtls_ssl_parse_certificate+0x6c>
        switch( ret )
 801eed6:	2800      	cmp	r0, #0
 801eed8:	d09d      	beq.n	801ee16 <mbedtls_ssl_parse_certificate+0x152>
 801eeda:	e7f1      	b.n	801eec0 <mbedtls_ssl_parse_certificate+0x1fc>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801eedc:	222b      	movs	r2, #43	; 0x2b
 801eede:	e7f0      	b.n	801eec2 <mbedtls_ssl_parse_certificate+0x1fe>
        switch( ret )
 801eee0:	2250      	movs	r2, #80	; 0x50
 801eee2:	e7ee      	b.n	801eec2 <mbedtls_ssl_parse_certificate+0x1fe>
            ssl->session_negotiate->peer_cert->raw.len ||
 801eee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if( ssl->session->peer_cert->raw.len !=
 801eee6:	685a      	ldr	r2, [r3, #4]
            ssl->session_negotiate->peer_cert->raw.len ||
 801eee8:	6e49      	ldr	r1, [r1, #100]	; 0x64
        if( ssl->session->peer_cert->raw.len !=
 801eeea:	6848      	ldr	r0, [r1, #4]
 801eeec:	4282      	cmp	r2, r0
 801eeee:	d104      	bne.n	801eefa <mbedtls_ssl_parse_certificate+0x236>
            memcmp( ssl->session->peer_cert->raw.p,
 801eef0:	6889      	ldr	r1, [r1, #8]
 801eef2:	6898      	ldr	r0, [r3, #8]
 801eef4:	f003 f94a 	bl	802218c <memcmp>
            ssl->session_negotiate->peer_cert->raw.len ||
 801eef8:	b340      	cbz	r0, 801ef4c <mbedtls_ssl_parse_certificate+0x288>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801eefa:	4b11      	ldr	r3, [pc, #68]	; (801ef40 <mbedtls_ssl_parse_certificate+0x27c>)
 801eefc:	9300      	str	r3, [sp, #0]
 801eefe:	4a02      	ldr	r2, [pc, #8]	; (801ef08 <mbedtls_ssl_parse_certificate+0x244>)
 801ef00:	f241 13c4 	movw	r3, #4548	; 0x11c4
 801ef04:	2101      	movs	r1, #1
 801ef06:	e7aa      	b.n	801ee5e <mbedtls_ssl_parse_certificate+0x19a>
 801ef08:	08031c15 	.word	0x08031c15
 801ef0c:	08032ad8 	.word	0x08032ad8
 801ef10:	08032aed 	.word	0x08032aed
 801ef14:	08031106 	.word	0x08031106
 801ef18:	08032b07 	.word	0x08032b07
 801ef1c:	ffff8900 	.word	0xffff8900
 801ef20:	ffff8600 	.word	0xffff8600
 801ef24:	2000053c 	.word	0x2000053c
 801ef28:	20000538 	.word	0x20000538
 801ef2c:	08032923 	.word	0x08032923
 801ef30:	ffff8100 	.word	0xffff8100
 801ef34:	08032b3b 	.word	0x08032b3b
 801ef38:	08032b4c 	.word	0x08032b4c
 801ef3c:	08032b1f 	.word	0x08032b1f
 801ef40:	08032b71 	.word	0x08032b71
 801ef44:	ffffda81 	.word	0xffffda81
 801ef48:	ffffd9d2 	.word	0xffffd9d2
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 801ef4c:	2e00      	cmp	r6, #0
 801ef4e:	d06d      	beq.n	801f02c <mbedtls_ssl_parse_certificate+0x368>
        if( ssl->handshake->sni_ca_chain != NULL )
 801ef50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ef52:	f8d3 9148 	ldr.w	r9, [r3, #328]	; 0x148
 801ef56:	f1b9 0f00 	cmp.w	r9, #0
 801ef5a:	d071      	beq.n	801f040 <mbedtls_ssl_parse_certificate+0x37c>
            ca_crl   = ssl->handshake->sni_ca_crl;
 801ef5c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
        ret = mbedtls_x509_crt_verify_with_profile(
 801ef60:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801ef64:	9303      	str	r3, [sp, #12]
                                ssl->session_negotiate->peer_cert,
 801ef66:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ret = mbedtls_x509_crt_verify_with_profile(
 801ef68:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 801ef6c:	9302      	str	r3, [sp, #8]
 801ef6e:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801ef72:	9301      	str	r3, [sp, #4]
 801ef74:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801ef78:	9300      	str	r3, [sp, #0]
 801ef7a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 801ef7e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801ef80:	4649      	mov	r1, r9
 801ef82:	f001 ff35 	bl	8020df0 <mbedtls_x509_crt_verify_with_profile>
        if( ret != 0 )
 801ef86:	4605      	mov	r5, r0
 801ef88:	b148      	cbz	r0, 801ef9e <mbedtls_ssl_parse_certificate+0x2da>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 801ef8a:	4b58      	ldr	r3, [pc, #352]	; (801f0ec <mbedtls_ssl_parse_certificate+0x428>)
 801ef8c:	9001      	str	r0, [sp, #4]
 801ef8e:	9300      	str	r3, [sp, #0]
 801ef90:	4a57      	ldr	r2, [pc, #348]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
 801ef92:	f241 13eb 	movw	r3, #4587	; 0x11eb
 801ef96:	2101      	movs	r1, #1
 801ef98:	4620      	mov	r0, r4
 801ef9a:	f7f1 fca7 	bl	80108ec <mbedtls_debug_print_ret>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 801ef9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801efa0:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801efa4:	2102      	movs	r1, #2
 801efa6:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
 801efaa:	f7f6 fc75 	bl	8015898 <mbedtls_pk_can_do>
 801efae:	b1c0      	cbz	r0, 801efe2 <mbedtls_ssl_parse_certificate+0x31e>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
 801efb0:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
 801efb4:	4620      	mov	r0, r4
 801efb6:	7819      	ldrb	r1, [r3, #0]
 801efb8:	f7ff fe2e 	bl	801ec18 <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801efbc:	b188      	cbz	r0, 801efe2 <mbedtls_ssl_parse_certificate+0x31e>
 801efbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801efc0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 801efc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801efc6:	6693      	str	r3, [r2, #104]	; 0x68
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
 801efc8:	4b4a      	ldr	r3, [pc, #296]	; (801f0f4 <mbedtls_ssl_parse_certificate+0x430>)
 801efca:	9300      	str	r3, [sp, #0]
 801efcc:	4a48      	ldr	r2, [pc, #288]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
 801efce:	f241 13fc 	movw	r3, #4604	; 0x11fc
 801efd2:	2101      	movs	r1, #1
 801efd4:	4620      	mov	r0, r4
 801efd6:	f7f1 fc59 	bl	801088c <mbedtls_debug_print_msg>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801efda:	4b47      	ldr	r3, [pc, #284]	; (801f0f8 <mbedtls_ssl_parse_certificate+0x434>)
 801efdc:	2d00      	cmp	r5, #0
 801efde:	bf08      	it	eq
 801efe0:	461d      	moveq	r5, r3
                                 ! ssl->conf->endpoint,
 801efe2:	6823      	ldr	r3, [r4, #0]
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 801efe4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801efe6:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801efea:	43d2      	mvns	r2, r2
 801efec:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801eff0:	f002 0201 	and.w	r2, r2, #1
 801eff4:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801eff6:	4639      	mov	r1, r7
 801eff8:	f7ff fe2a 	bl	801ec50 <mbedtls_ssl_check_cert_usage>
 801effc:	bb18      	cbnz	r0, 801f046 <mbedtls_ssl_parse_certificate+0x382>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801effe:	2e01      	cmp	r6, #1
 801f000:	d133      	bne.n	801f06a <mbedtls_ssl_parse_certificate+0x3a6>
 801f002:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 801f006:	d002      	beq.n	801f00e <mbedtls_ssl_parse_certificate+0x34a>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 801f008:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 801f00c:	d12d      	bne.n	801f06a <mbedtls_ssl_parse_certificate+0x3a6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 801f00e:	2500      	movs	r5, #0
        if( ssl->session_negotiate->verify_result != 0 )
 801f010:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f014:	2b00      	cmp	r3, #0
 801f016:	d05b      	beq.n	801f0d0 <mbedtls_ssl_parse_certificate+0x40c>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 801f018:	9301      	str	r3, [sp, #4]
 801f01a:	4b38      	ldr	r3, [pc, #224]	; (801f0fc <mbedtls_ssl_parse_certificate+0x438>)
 801f01c:	9300      	str	r3, [sp, #0]
 801f01e:	4a34      	ldr	r2, [pc, #208]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
 801f020:	f241 2342 	movw	r3, #4674	; 0x1242
 801f024:	2103      	movs	r1, #3
 801f026:	4620      	mov	r0, r4
 801f028:	f7f1 fc30 	bl	801088c <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 801f02c:	4b34      	ldr	r3, [pc, #208]	; (801f100 <mbedtls_ssl_parse_certificate+0x43c>)
 801f02e:	9300      	str	r3, [sp, #0]
 801f030:	4a2f      	ldr	r2, [pc, #188]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
 801f032:	f241 234c 	movw	r3, #4684	; 0x124c
 801f036:	2102      	movs	r1, #2
 801f038:	4620      	mov	r0, r4
 801f03a:	f7f1 fc27 	bl	801088c <mbedtls_debug_print_msg>
    return( ret );
 801f03e:	e669      	b.n	801ed14 <mbedtls_ssl_parse_certificate+0x50>
            ca_crl   = ssl->conf->ca_crl;
 801f040:	e9d8 9211 	ldrd	r9, r2, [r8, #68]	; 0x44
 801f044:	e78c      	b.n	801ef60 <mbedtls_ssl_parse_certificate+0x29c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 801f046:	4b2f      	ldr	r3, [pc, #188]	; (801f104 <mbedtls_ssl_parse_certificate+0x440>)
 801f048:	9300      	str	r3, [sp, #0]
 801f04a:	4a29      	ldr	r2, [pc, #164]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
 801f04c:	f241 2308 	movw	r3, #4616	; 0x1208
 801f050:	2101      	movs	r1, #1
 801f052:	4620      	mov	r0, r4
 801f054:	f7f1 fc1a 	bl	801088c <mbedtls_debug_print_msg>
            if( ret == 0 )
 801f058:	2d00      	cmp	r5, #0
 801f05a:	d1d0      	bne.n	801effe <mbedtls_ssl_parse_certificate+0x33a>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f05c:	2e01      	cmp	r6, #1
 801f05e:	d0d6      	beq.n	801f00e <mbedtls_ssl_parse_certificate+0x34a>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f060:	f1b9 0f00 	cmp.w	r9, #0
 801f064:	d03e      	beq.n	801f0e4 <mbedtls_ssl_parse_certificate+0x420>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f066:	4d24      	ldr	r5, [pc, #144]	; (801f0f8 <mbedtls_ssl_parse_certificate+0x434>)
 801f068:	e00e      	b.n	801f088 <mbedtls_ssl_parse_certificate+0x3c4>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f06a:	f1b9 0f00 	cmp.w	r9, #0
 801f06e:	d122      	bne.n	801f0b6 <mbedtls_ssl_parse_certificate+0x3f2>
 801f070:	2e02      	cmp	r6, #2
 801f072:	d120      	bne.n	801f0b6 <mbedtls_ssl_parse_certificate+0x3f2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f074:	4b24      	ldr	r3, [pc, #144]	; (801f108 <mbedtls_ssl_parse_certificate+0x444>)
 801f076:	9300      	str	r3, [sp, #0]
 801f078:	4a1d      	ldr	r2, [pc, #116]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 801f07a:	4d24      	ldr	r5, [pc, #144]	; (801f10c <mbedtls_ssl_parse_certificate+0x448>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f07c:	f241 231c 	movw	r3, #4636	; 0x121c
 801f080:	2101      	movs	r1, #1
 801f082:	4620      	mov	r0, r4
 801f084:	f7f1 fc02 	bl	801088c <mbedtls_debug_print_msg>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801f088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f08a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f08c:	05df      	lsls	r7, r3, #23
 801f08e:	d415      	bmi.n	801f0bc <mbedtls_ssl_parse_certificate+0x3f8>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 801f090:	075e      	lsls	r6, r3, #29
 801f092:	d415      	bmi.n	801f0c0 <mbedtls_ssl_parse_certificate+0x3fc>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 801f094:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 801f098:	d114      	bne.n	801f0c4 <mbedtls_ssl_parse_certificate+0x400>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 801f09a:	07d8      	lsls	r0, r3, #31
 801f09c:	d414      	bmi.n	801f0c8 <mbedtls_ssl_parse_certificate+0x404>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 801f09e:	0799      	lsls	r1, r3, #30
 801f0a0:	d414      	bmi.n	801f0cc <mbedtls_ssl_parse_certificate+0x408>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 801f0a2:	f013 0f08 	tst.w	r3, #8
 801f0a6:	bf14      	ite	ne
 801f0a8:	2230      	movne	r2, #48	; 0x30
 801f0aa:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f0ac:	2102      	movs	r1, #2
 801f0ae:	4620      	mov	r0, r4
 801f0b0:	f7fe f882 	bl	801d1b8 <mbedtls_ssl_send_alert_message>
 801f0b4:	e7ac      	b.n	801f010 <mbedtls_ssl_parse_certificate+0x34c>
        if( ret != 0 )
 801f0b6:	2d00      	cmp	r5, #0
 801f0b8:	d1e6      	bne.n	801f088 <mbedtls_ssl_parse_certificate+0x3c4>
 801f0ba:	e7a8      	b.n	801f00e <mbedtls_ssl_parse_certificate+0x34a>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 801f0bc:	2231      	movs	r2, #49	; 0x31
 801f0be:	e7f5      	b.n	801f0ac <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801f0c0:	222a      	movs	r2, #42	; 0x2a
 801f0c2:	e7f3      	b.n	801f0ac <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f0c4:	222b      	movs	r2, #43	; 0x2b
 801f0c6:	e7f1      	b.n	801f0ac <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 801f0c8:	222d      	movs	r2, #45	; 0x2d
 801f0ca:	e7ef      	b.n	801f0ac <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 801f0cc:	222c      	movs	r2, #44	; 0x2c
 801f0ce:	e7ed      	b.n	801f0ac <mbedtls_ssl_parse_certificate+0x3e8>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 801f0d0:	4b0f      	ldr	r3, [pc, #60]	; (801f110 <mbedtls_ssl_parse_certificate+0x44c>)
 801f0d2:	9300      	str	r3, [sp, #0]
 801f0d4:	4a06      	ldr	r2, [pc, #24]	; (801f0f0 <mbedtls_ssl_parse_certificate+0x42c>)
 801f0d6:	f241 2347 	movw	r3, #4679	; 0x1247
 801f0da:	2103      	movs	r1, #3
 801f0dc:	4620      	mov	r0, r4
 801f0de:	f7f1 fbd5 	bl	801088c <mbedtls_debug_print_msg>
 801f0e2:	e7a3      	b.n	801f02c <mbedtls_ssl_parse_certificate+0x368>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f0e4:	2e02      	cmp	r6, #2
 801f0e6:	d1be      	bne.n	801f066 <mbedtls_ssl_parse_certificate+0x3a2>
 801f0e8:	e7c4      	b.n	801f074 <mbedtls_ssl_parse_certificate+0x3b0>
 801f0ea:	bf00      	nop
 801f0ec:	08032b9a 	.word	0x08032b9a
 801f0f0:	08031c15 	.word	0x08031c15
 801f0f4:	08032bab 	.word	0x08032bab
 801f0f8:	ffff8600 	.word	0xffff8600
 801f0fc:	08032bfd 	.word	0x08032bfd
 801f100:	08032c46 	.word	0x08032c46
 801f104:	08032bca 	.word	0x08032bca
 801f108:	08032bed 	.word	0x08032bed
 801f10c:	ffff8980 	.word	0xffff8980
 801f110:	08032c21 	.word	0x08032c21

0801f114 <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 801f114:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 801f116:	7059      	strb	r1, [r3, #1]
}
 801f118:	4770      	bx	lr

0801f11a <mbedtls_ssl_read_version>:
        *major = ver[0];
 801f11a:	781a      	ldrb	r2, [r3, #0]
 801f11c:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 801f11e:	785b      	ldrb	r3, [r3, #1]
 801f120:	600b      	str	r3, [r1, #0]
    }
}
 801f122:	4770      	bx	lr

0801f124 <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 801f124:	2300      	movs	r3, #0
{
 801f126:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 801f128:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 801f12a:	260a      	movs	r6, #10
        if( ( **p < '0') || ( **p > '9' ) )
 801f12c:	6805      	ldr	r5, [r0, #0]
 801f12e:	782b      	ldrb	r3, [r5, #0]
 801f130:	3b30      	subs	r3, #48	; 0x30
 801f132:	2b09      	cmp	r3, #9
 801f134:	d80d      	bhi.n	801f152 <x509_parse_int+0x2e>
        *res *= 10;
 801f136:	6813      	ldr	r3, [r2, #0]
 801f138:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 801f13c:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 801f13e:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 801f140:	6003      	str	r3, [r0, #0]
 801f142:	782b      	ldrb	r3, [r5, #0]
 801f144:	3b30      	subs	r3, #48	; 0x30
 801f146:	4423      	add	r3, r4
    for( ; n > 0; --n )
 801f148:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
 801f14a:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 801f14c:	d1ee      	bne.n	801f12c <x509_parse_int+0x8>
    }

    return( 0 );
 801f14e:	4608      	mov	r0, r1
}
 801f150:	bd70      	pop	{r4, r5, r6, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801f152:	4801      	ldr	r0, [pc, #4]	; (801f158 <x509_parse_int+0x34>)
 801f154:	e7fc      	b.n	801f150 <x509_parse_int+0x2c>
 801f156:	bf00      	nop
 801f158:	ffffdc00 	.word	0xffffdc00

0801f15c <x509_check_time>:
/*
 * Return 0 if before <= after, 1 otherwise
 */
static int x509_check_time( const mbedtls_x509_time *before, const mbedtls_x509_time *after )
{
    if( before->year  > after->year )
 801f15c:	6802      	ldr	r2, [r0, #0]
 801f15e:	680b      	ldr	r3, [r1, #0]
 801f160:	429a      	cmp	r2, r3
{
 801f162:	b530      	push	{r4, r5, lr}
    if( before->year  > after->year )
 801f164:	dc29      	bgt.n	801f1ba <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f166:	d12a      	bne.n	801f1be <x509_check_time+0x62>
        before->mon   > after->mon )
 801f168:	6842      	ldr	r2, [r0, #4]
 801f16a:	684b      	ldr	r3, [r1, #4]
    if( before->year == after->year &&
 801f16c:	429a      	cmp	r2, r3
 801f16e:	dc24      	bgt.n	801f1ba <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f170:	d125      	bne.n	801f1be <x509_check_time+0x62>
        before->mon  == after->mon  &&
 801f172:	6882      	ldr	r2, [r0, #8]
 801f174:	688b      	ldr	r3, [r1, #8]
 801f176:	429a      	cmp	r2, r3
 801f178:	dc1f      	bgt.n	801f1ba <x509_check_time+0x5e>
        before->day   > after->day )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f17a:	d103      	bne.n	801f184 <x509_check_time+0x28>
        before->day  == after->day  &&
 801f17c:	68c5      	ldr	r5, [r0, #12]
 801f17e:	68cc      	ldr	r4, [r1, #12]
 801f180:	42a5      	cmp	r5, r4
 801f182:	dc1a      	bgt.n	801f1ba <x509_check_time+0x5e>
        before->hour  > after->hour )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f184:	429a      	cmp	r2, r3
 801f186:	d11a      	bne.n	801f1be <x509_check_time+0x62>
        before->day  == after->day  &&
 801f188:	68c5      	ldr	r5, [r0, #12]
 801f18a:	68cc      	ldr	r4, [r1, #12]
 801f18c:	42a5      	cmp	r5, r4
 801f18e:	d103      	bne.n	801f198 <x509_check_time+0x3c>
        before->hour == after->hour &&
 801f190:	6905      	ldr	r5, [r0, #16]
 801f192:	690c      	ldr	r4, [r1, #16]
 801f194:	42a5      	cmp	r5, r4
 801f196:	dc10      	bgt.n	801f1ba <x509_check_time+0x5e>
        before->min   > after->min  )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f198:	429a      	cmp	r2, r3
 801f19a:	d110      	bne.n	801f1be <x509_check_time+0x62>
        before->day  == after->day  &&
 801f19c:	68c2      	ldr	r2, [r0, #12]
 801f19e:	68cb      	ldr	r3, [r1, #12]
 801f1a0:	429a      	cmp	r2, r3
 801f1a2:	d10c      	bne.n	801f1be <x509_check_time+0x62>
        before->hour == after->hour &&
 801f1a4:	6902      	ldr	r2, [r0, #16]
 801f1a6:	690b      	ldr	r3, [r1, #16]
 801f1a8:	429a      	cmp	r2, r3
 801f1aa:	d108      	bne.n	801f1be <x509_check_time+0x62>
        before->min  == after->min  &&
 801f1ac:	6940      	ldr	r0, [r0, #20]
 801f1ae:	694b      	ldr	r3, [r1, #20]
 801f1b0:	4298      	cmp	r0, r3
 801f1b2:	bfd4      	ite	le
 801f1b4:	2000      	movle	r0, #0
 801f1b6:	2001      	movgt	r0, #1
        before->sec   > after->sec  )
        return( 1 );

    return( 0 );
}
 801f1b8:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 801f1ba:	2001      	movs	r0, #1
 801f1bc:	e7fc      	b.n	801f1b8 <x509_check_time+0x5c>
    return( 0 );
 801f1be:	2000      	movs	r0, #0
 801f1c0:	e7fa      	b.n	801f1b8 <x509_check_time+0x5c>

0801f1c2 <x509_get_current_time>:
{
 801f1c2:	b513      	push	{r0, r1, r4, lr}
 801f1c4:	4604      	mov	r4, r0
    tt = mbedtls_time( NULL );
 801f1c6:	2000      	movs	r0, #0
 801f1c8:	f7e4 f834 	bl	8003234 <time>
 801f1cc:	e9cd 0100 	strd	r0, r1, [sp]
    lt = gmtime( &tt );
 801f1d0:	4668      	mov	r0, sp
 801f1d2:	f002 fed1 	bl	8021f78 <gmtime>
    if( lt == NULL )
 801f1d6:	b188      	cbz	r0, 801f1fc <x509_get_current_time+0x3a>
        now->year = lt->tm_year + 1900;
 801f1d8:	6943      	ldr	r3, [r0, #20]
 801f1da:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f1de:	6023      	str	r3, [r4, #0]
        now->mon  = lt->tm_mon  + 1;
 801f1e0:	6903      	ldr	r3, [r0, #16]
 801f1e2:	3301      	adds	r3, #1
 801f1e4:	6063      	str	r3, [r4, #4]
        now->day  = lt->tm_mday;
 801f1e6:	68c3      	ldr	r3, [r0, #12]
 801f1e8:	60a3      	str	r3, [r4, #8]
        now->hour = lt->tm_hour;
 801f1ea:	6883      	ldr	r3, [r0, #8]
 801f1ec:	60e3      	str	r3, [r4, #12]
        now->min  = lt->tm_min;
 801f1ee:	6843      	ldr	r3, [r0, #4]
 801f1f0:	6123      	str	r3, [r4, #16]
        now->sec  = lt->tm_sec;
 801f1f2:	6803      	ldr	r3, [r0, #0]
 801f1f4:	6163      	str	r3, [r4, #20]
    int ret = 0;
 801f1f6:	2000      	movs	r0, #0
}
 801f1f8:	b002      	add	sp, #8
 801f1fa:	bd10      	pop	{r4, pc}
        ret = -1;
 801f1fc:	f04f 30ff 	mov.w	r0, #4294967295
    return( ret );
 801f200:	e7fa      	b.n	801f1f8 <x509_get_current_time+0x36>
	...

0801f204 <mbedtls_x509_get_serial>:
{
 801f204:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 801f206:	6803      	ldr	r3, [r0, #0]
{
 801f208:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f20a:	1aca      	subs	r2, r1, r3
 801f20c:	2a00      	cmp	r2, #0
{
 801f20e:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f210:	dd16      	ble.n	801f240 <mbedtls_x509_get_serial+0x3c>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 801f212:	781a      	ldrb	r2, [r3, #0]
 801f214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801f218:	2a02      	cmp	r2, #2
 801f21a:	d113      	bne.n	801f244 <mbedtls_x509_get_serial+0x40>
    serial->tag = *(*p)++;
 801f21c:	1c5a      	adds	r2, r3, #1
 801f21e:	6002      	str	r2, [r0, #0]
 801f220:	462a      	mov	r2, r5
 801f222:	781b      	ldrb	r3, [r3, #0]
 801f224:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 801f228:	f7ee fdfe 	bl	800de28 <mbedtls_asn1_get_len>
 801f22c:	b110      	cbz	r0, 801f234 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 801f22e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
 801f232:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 801f234:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
 801f236:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
 801f238:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 801f23a:	4413      	add	r3, r2
 801f23c:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f23e:	e7f8      	b.n	801f232 <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f240:	4801      	ldr	r0, [pc, #4]	; (801f248 <mbedtls_x509_get_serial+0x44>)
 801f242:	e7f6      	b.n	801f232 <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f244:	4801      	ldr	r0, [pc, #4]	; (801f24c <mbedtls_x509_get_serial+0x48>)
 801f246:	e7f4      	b.n	801f232 <mbedtls_x509_get_serial+0x2e>
 801f248:	ffffdd20 	.word	0xffffdd20
 801f24c:	ffffdd1e 	.word	0xffffdd1e

0801f250 <mbedtls_x509_get_alg_null>:
{
 801f250:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
 801f252:	f7ee ff57 	bl	800e104 <mbedtls_asn1_get_alg_null>
 801f256:	b108      	cbz	r0, 801f25c <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f258:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f25c:	bd08      	pop	{r3, pc}

0801f25e <mbedtls_x509_get_alg>:
{
 801f25e:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 801f260:	f7ee ff02 	bl	800e068 <mbedtls_asn1_get_alg>
 801f264:	b108      	cbz	r0, 801f26a <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f266:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f26a:	bd08      	pop	{r3, pc}

0801f26c <mbedtls_x509_get_rsassa_pss_params>:
{
 801f26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f270:	461d      	mov	r5, r3
    *md_alg = MBEDTLS_MD_SHA1;
 801f272:	2304      	movs	r3, #4
 801f274:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
 801f276:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
 801f278:	2314      	movs	r3, #20
 801f27a:	602b      	str	r3, [r5, #0]
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f27c:	6803      	ldr	r3, [r0, #0]
 801f27e:	2b30      	cmp	r3, #48	; 0x30
{
 801f280:	b08e      	sub	sp, #56	; 0x38
 801f282:	4688      	mov	r8, r1
 801f284:	4616      	mov	r6, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f286:	d14e      	bne.n	801f326 <mbedtls_x509_get_rsassa_pss_params+0xba>
    p = (unsigned char *) params->p;
 801f288:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
 801f28a:	6844      	ldr	r4, [r0, #4]
    p = (unsigned char *) params->p;
 801f28c:	9301      	str	r3, [sp, #4]
    end = p + params->len;
 801f28e:	441c      	add	r4, r3
    if( p == end )
 801f290:	42a3      	cmp	r3, r4
 801f292:	d103      	bne.n	801f29c <mbedtls_x509_get_rsassa_pss_params+0x30>
        return( 0 );
 801f294:	2000      	movs	r0, #0
}
 801f296:	b00e      	add	sp, #56	; 0x38
 801f298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f29c:	23a0      	movs	r3, #160	; 0xa0
 801f29e:	aa02      	add	r2, sp, #8
 801f2a0:	4621      	mov	r1, r4
 801f2a2:	a801      	add	r0, sp, #4
 801f2a4:	f7ee fe08 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f2a8:	b9b0      	cbnz	r0, 801f2d8 <mbedtls_x509_get_rsassa_pss_params+0x6c>
        end2 = p + len;
 801f2aa:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f2ae:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
 801f2b0:	aa05      	add	r2, sp, #20
 801f2b2:	4639      	mov	r1, r7
 801f2b4:	a801      	add	r0, sp, #4
 801f2b6:	f7ff ffcb 	bl	801f250 <mbedtls_x509_get_alg_null>
 801f2ba:	2800      	cmp	r0, #0
 801f2bc:	d1eb      	bne.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
 801f2be:	4641      	mov	r1, r8
 801f2c0:	a805      	add	r0, sp, #20
 801f2c2:	f7f6 f897 	bl	80153f4 <mbedtls_oid_get_md_alg>
 801f2c6:	b110      	cbz	r0, 801f2ce <mbedtls_x509_get_rsassa_pss_params+0x62>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f2c8:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
 801f2cc:	e7e3      	b.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
 801f2ce:	9b01      	ldr	r3, [sp, #4]
 801f2d0:	42bb      	cmp	r3, r7
 801f2d2:	d004      	beq.n	801f2de <mbedtls_x509_get_rsassa_pss_params+0x72>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f2d4:	4853      	ldr	r0, [pc, #332]	; (801f424 <mbedtls_x509_get_rsassa_pss_params+0x1b8>)
 801f2d6:	e7de      	b.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f2d8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f2dc:	d1f4      	bne.n	801f2c8 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    if( p == end )
 801f2de:	9b01      	ldr	r3, [sp, #4]
 801f2e0:	42a3      	cmp	r3, r4
 801f2e2:	d0d7      	beq.n	801f294 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f2e4:	23a1      	movs	r3, #161	; 0xa1
 801f2e6:	aa02      	add	r2, sp, #8
 801f2e8:	4621      	mov	r1, r4
 801f2ea:	a801      	add	r0, sp, #4
 801f2ec:	f7ee fde4 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f2f0:	2800      	cmp	r0, #0
 801f2f2:	f040 8087 	bne.w	801f404 <mbedtls_x509_get_rsassa_pss_params+0x198>
        end2 = p + len;
 801f2f6:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f2fa:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
 801f2fc:	aa05      	add	r2, sp, #20
 801f2fe:	ab08      	add	r3, sp, #32
 801f300:	4639      	mov	r1, r7
 801f302:	a801      	add	r0, sp, #4
 801f304:	f7ff ffab 	bl	801f25e <mbedtls_x509_get_alg>
 801f308:	2800      	cmp	r0, #0
 801f30a:	d1c4      	bne.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
 801f30c:	9a06      	ldr	r2, [sp, #24]
 801f30e:	2a09      	cmp	r2, #9
 801f310:	f040 8086 	bne.w	801f420 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
 801f314:	9907      	ldr	r1, [sp, #28]
 801f316:	4844      	ldr	r0, [pc, #272]	; (801f428 <mbedtls_x509_get_rsassa_pss_params+0x1bc>)
 801f318:	f002 ff38 	bl	802218c <memcmp>
 801f31c:	2800      	cmp	r0, #0
 801f31e:	d17f      	bne.n	801f420 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f320:	9b08      	ldr	r3, [sp, #32]
 801f322:	2b30      	cmp	r3, #48	; 0x30
 801f324:	d001      	beq.n	801f32a <mbedtls_x509_get_rsassa_pss_params+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f326:	4841      	ldr	r0, [pc, #260]	; (801f42c <mbedtls_x509_get_rsassa_pss_params+0x1c0>)
 801f328:	e7b5      	b.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    p = (unsigned char *) alg->p;
 801f32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
 801f32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    p = (unsigned char *) alg->p;
 801f32e:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
 801f330:	eb03 0802 	add.w	r8, r3, r2
    if( p >= end )
 801f334:	4543      	cmp	r3, r8
 801f336:	d263      	bcs.n	801f400 <mbedtls_x509_get_rsassa_pss_params+0x194>
    md_oid.tag = *p;
 801f338:	781b      	ldrb	r3, [r3, #0]
 801f33a:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f33c:	aa0c      	add	r2, sp, #48	; 0x30
 801f33e:	2306      	movs	r3, #6
 801f340:	4641      	mov	r1, r8
 801f342:	a803      	add	r0, sp, #12
 801f344:	f7ee fdb8 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f348:	2800      	cmp	r0, #0
 801f34a:	d03e      	beq.n	801f3ca <mbedtls_x509_get_rsassa_pss_params+0x15e>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f34c:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
 801f350:	2800      	cmp	r0, #0
 801f352:	d1a0      	bne.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
 801f354:	9b01      	ldr	r3, [sp, #4]
 801f356:	42bb      	cmp	r3, r7
 801f358:	d1bc      	bne.n	801f2d4 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
 801f35a:	9b01      	ldr	r3, [sp, #4]
 801f35c:	42a3      	cmp	r3, r4
 801f35e:	d099      	beq.n	801f294 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f360:	23a2      	movs	r3, #162	; 0xa2
 801f362:	aa02      	add	r2, sp, #8
 801f364:	4621      	mov	r1, r4
 801f366:	a801      	add	r0, sp, #4
 801f368:	f7ee fda6 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f36c:	2800      	cmp	r0, #0
 801f36e:	d14d      	bne.n	801f40c <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        end2 = p + len;
 801f370:	e9dd 6101 	ldrd	r6, r1, [sp, #4]
 801f374:	440e      	add	r6, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
 801f376:	462a      	mov	r2, r5
 801f378:	4631      	mov	r1, r6
 801f37a:	a801      	add	r0, sp, #4
 801f37c:	f7ee fdc8 	bl	800df10 <mbedtls_asn1_get_int>
 801f380:	2800      	cmp	r0, #0
 801f382:	d1a1      	bne.n	801f2c8 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
 801f384:	9b01      	ldr	r3, [sp, #4]
 801f386:	42b3      	cmp	r3, r6
 801f388:	d1a4      	bne.n	801f2d4 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
 801f38a:	9b01      	ldr	r3, [sp, #4]
 801f38c:	42a3      	cmp	r3, r4
 801f38e:	d081      	beq.n	801f294 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f390:	23a3      	movs	r3, #163	; 0xa3
 801f392:	aa02      	add	r2, sp, #8
 801f394:	4621      	mov	r1, r4
 801f396:	a801      	add	r0, sp, #4
 801f398:	f7ee fd8e 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f39c:	2800      	cmp	r0, #0
 801f39e:	d13b      	bne.n	801f418 <mbedtls_x509_get_rsassa_pss_params+0x1ac>
        end2 = p + len;
 801f3a0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
 801f3a4:	440d      	add	r5, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
 801f3a6:	aa0b      	add	r2, sp, #44	; 0x2c
 801f3a8:	4629      	mov	r1, r5
 801f3aa:	a801      	add	r0, sp, #4
 801f3ac:	f7ee fdb0 	bl	800df10 <mbedtls_asn1_get_int>
 801f3b0:	2800      	cmp	r0, #0
 801f3b2:	d189      	bne.n	801f2c8 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
 801f3b4:	9b01      	ldr	r3, [sp, #4]
 801f3b6:	42ab      	cmp	r3, r5
 801f3b8:	d18c      	bne.n	801f2d4 <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( trailer_field != 1 )
 801f3ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f3bc:	2b01      	cmp	r3, #1
 801f3be:	d129      	bne.n	801f414 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
    if( p != end )
 801f3c0:	9b01      	ldr	r3, [sp, #4]
 801f3c2:	42a3      	cmp	r3, r4
 801f3c4:	f43f af66 	beq.w	801f294 <mbedtls_x509_get_rsassa_pss_params+0x28>
 801f3c8:	e784      	b.n	801f2d4 <mbedtls_x509_get_rsassa_pss_params+0x68>
    md_oid.p = p;
 801f3ca:	9b03      	ldr	r3, [sp, #12]
    p += md_oid.len;
 801f3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    md_oid.p = p;
 801f3ce:	930d      	str	r3, [sp, #52]	; 0x34
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f3d0:	4631      	mov	r1, r6
    p += md_oid.len;
 801f3d2:	4413      	add	r3, r2
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f3d4:	a80b      	add	r0, sp, #44	; 0x2c
    p += md_oid.len;
 801f3d6:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f3d8:	f7f6 f80c 	bl	80153f4 <mbedtls_oid_get_md_alg>
 801f3dc:	2800      	cmp	r0, #0
 801f3de:	d1b5      	bne.n	801f34c <mbedtls_x509_get_rsassa_pss_params+0xe0>
    if( p == end )
 801f3e0:	9b03      	ldr	r3, [sp, #12]
 801f3e2:	4598      	cmp	r8, r3
 801f3e4:	d0b6      	beq.n	801f354 <mbedtls_x509_get_rsassa_pss_params+0xe8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
 801f3e6:	2305      	movs	r3, #5
 801f3e8:	aa04      	add	r2, sp, #16
 801f3ea:	4641      	mov	r1, r8
 801f3ec:	a803      	add	r0, sp, #12
 801f3ee:	f7ee fd63 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f3f2:	9b04      	ldr	r3, [sp, #16]
 801f3f4:	4303      	orrs	r3, r0
 801f3f6:	d1a9      	bne.n	801f34c <mbedtls_x509_get_rsassa_pss_params+0xe0>
    if( p != end )
 801f3f8:	9b03      	ldr	r3, [sp, #12]
 801f3fa:	4598      	cmp	r8, r3
 801f3fc:	d0aa      	beq.n	801f354 <mbedtls_x509_get_rsassa_pss_params+0xe8>
 801f3fe:	e769      	b.n	801f2d4 <mbedtls_x509_get_rsassa_pss_params+0x68>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f400:	480b      	ldr	r0, [pc, #44]	; (801f430 <mbedtls_x509_get_rsassa_pss_params+0x1c4>)
 801f402:	e748      	b.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f404:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f408:	d0a7      	beq.n	801f35a <mbedtls_x509_get_rsassa_pss_params+0xee>
 801f40a:	e75d      	b.n	801f2c8 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f40c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f410:	d0bb      	beq.n	801f38a <mbedtls_x509_get_rsassa_pss_params+0x11e>
 801f412:	e759      	b.n	801f2c8 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f414:	4807      	ldr	r0, [pc, #28]	; (801f434 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
 801f416:	e73e      	b.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f418:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f41c:	d0d0      	beq.n	801f3c0 <mbedtls_x509_get_rsassa_pss_params+0x154>
 801f41e:	e753      	b.n	801f2c8 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
 801f420:	4805      	ldr	r0, [pc, #20]	; (801f438 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
 801f422:	e738      	b.n	801f296 <mbedtls_x509_get_rsassa_pss_params+0x2a>
 801f424:	ffffdc9a 	.word	0xffffdc9a
 801f428:	08032c7b 	.word	0x08032c7b
 801f42c:	ffffdc9e 	.word	0xffffdc9e
 801f430:	ffffdca0 	.word	0xffffdca0
 801f434:	ffffdd00 	.word	0xffffdd00
 801f438:	ffffdf52 	.word	0xffffdf52

0801f43c <mbedtls_x509_get_name>:
{
 801f43c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f440:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801f534 <mbedtls_x509_get_name+0xf8>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f444:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 801f538 <mbedtls_x509_get_name+0xfc>
{
 801f448:	4604      	mov	r4, r0
 801f44a:	460f      	mov	r7, r1
 801f44c:	4692      	mov	sl, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 801f44e:	2331      	movs	r3, #49	; 0x31
 801f450:	466a      	mov	r2, sp
 801f452:	4639      	mov	r1, r7
 801f454:	4620      	mov	r0, r4
 801f456:	f7ee fd2f 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f45a:	b120      	cbz	r0, 801f466 <mbedtls_x509_get_name+0x2a>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f45c:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 801f460:	b002      	add	sp, #8
 801f462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        end_set  = *p + set_len;
 801f466:	6826      	ldr	r6, [r4, #0]
 801f468:	9b00      	ldr	r3, [sp, #0]
 801f46a:	4655      	mov	r5, sl
 801f46c:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f46e:	2330      	movs	r3, #48	; 0x30
 801f470:	aa01      	add	r2, sp, #4
 801f472:	4631      	mov	r1, r6
 801f474:	4620      	mov	r0, r4
 801f476:	f7ee fd1f 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f47a:	b190      	cbz	r0, 801f4a2 <mbedtls_x509_get_name+0x66>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f47c:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 801f480:	2800      	cmp	r0, #0
 801f482:	d1ed      	bne.n	801f460 <mbedtls_x509_get_name+0x24>
            if( *p == end_set )
 801f484:	6823      	ldr	r3, [r4, #0]
 801f486:	42b3      	cmp	r3, r6
 801f488:	d040      	beq.n	801f50c <mbedtls_x509_get_name+0xd0>
            cur->next_merged = 1;
 801f48a:	2001      	movs	r0, #1
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f48c:	f8d8 3000 	ldr.w	r3, [r8]
            cur->next_merged = 1;
 801f490:	7728      	strb	r0, [r5, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f492:	2120      	movs	r1, #32
 801f494:	4798      	blx	r3
 801f496:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
 801f498:	b908      	cbnz	r0, 801f49e <mbedtls_x509_get_name+0x62>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f49a:	4823      	ldr	r0, [pc, #140]	; (801f528 <mbedtls_x509_get_name+0xec>)
 801f49c:	e7e0      	b.n	801f460 <mbedtls_x509_get_name+0x24>
 801f49e:	4605      	mov	r5, r0
 801f4a0:	e7e5      	b.n	801f46e <mbedtls_x509_get_name+0x32>
    if( ( end - *p ) < 1 )
 801f4a2:	6823      	ldr	r3, [r4, #0]
 801f4a4:	1af2      	subs	r2, r6, r3
 801f4a6:	2a00      	cmp	r2, #0
 801f4a8:	dc01      	bgt.n	801f4ae <mbedtls_x509_get_name+0x72>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f4aa:	4820      	ldr	r0, [pc, #128]	; (801f52c <mbedtls_x509_get_name+0xf0>)
 801f4ac:	e7d8      	b.n	801f460 <mbedtls_x509_get_name+0x24>
    oid->tag = **p;
 801f4ae:	462a      	mov	r2, r5
 801f4b0:	781b      	ldrb	r3, [r3, #0]
 801f4b2:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f4b6:	4631      	mov	r1, r6
 801f4b8:	2306      	movs	r3, #6
 801f4ba:	4620      	mov	r0, r4
 801f4bc:	f7ee fcfc 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f4c0:	2800      	cmp	r0, #0
 801f4c2:	d1db      	bne.n	801f47c <mbedtls_x509_get_name+0x40>
    oid->p = *p;
 801f4c4:	6822      	ldr	r2, [r4, #0]
    *p += oid->len;
 801f4c6:	6868      	ldr	r0, [r5, #4]
    oid->p = *p;
 801f4c8:	60aa      	str	r2, [r5, #8]
    *p += oid->len;
 801f4ca:	1813      	adds	r3, r2, r0
    if( ( end - *p ) < 1 )
 801f4cc:	1af1      	subs	r1, r6, r3
 801f4ce:	2900      	cmp	r1, #0
    *p += oid->len;
 801f4d0:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 801f4d2:	ddea      	ble.n	801f4aa <mbedtls_x509_get_name+0x6e>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 801f4d4:	5c11      	ldrb	r1, [r2, r0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f4d6:	291e      	cmp	r1, #30
 801f4d8:	d816      	bhi.n	801f508 <mbedtls_x509_get_name+0xcc>
 801f4da:	fa29 f101 	lsr.w	r1, r9, r1
 801f4de:	07c9      	lsls	r1, r1, #31
 801f4e0:	d512      	bpl.n	801f508 <mbedtls_x509_get_name+0xcc>
    val->tag = *(*p)++;
 801f4e2:	3301      	adds	r3, #1
 801f4e4:	6023      	str	r3, [r4, #0]
 801f4e6:	5c13      	ldrb	r3, [r2, r0]
 801f4e8:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 801f4ea:	f105 0210 	add.w	r2, r5, #16
 801f4ee:	4631      	mov	r1, r6
 801f4f0:	4620      	mov	r0, r4
 801f4f2:	f7ee fc99 	bl	800de28 <mbedtls_asn1_get_len>
 801f4f6:	2800      	cmp	r0, #0
 801f4f8:	d1c0      	bne.n	801f47c <mbedtls_x509_get_name+0x40>
    val->p = *p;
 801f4fa:	6823      	ldr	r3, [r4, #0]
    *p += val->len;
 801f4fc:	692a      	ldr	r2, [r5, #16]
    val->p = *p;
 801f4fe:	616b      	str	r3, [r5, #20]
    *p += val->len;
 801f500:	4413      	add	r3, r2
 801f502:	6023      	str	r3, [r4, #0]
    cur->next = NULL;
 801f504:	61a8      	str	r0, [r5, #24]
    return( 0 );
 801f506:	e7bd      	b.n	801f484 <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f508:	4809      	ldr	r0, [pc, #36]	; (801f530 <mbedtls_x509_get_name+0xf4>)
 801f50a:	e7a9      	b.n	801f460 <mbedtls_x509_get_name+0x24>
        if( *p == end )
 801f50c:	42b7      	cmp	r7, r6
 801f50e:	d009      	beq.n	801f524 <mbedtls_x509_get_name+0xe8>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f510:	f8d8 3000 	ldr.w	r3, [r8]
 801f514:	2120      	movs	r1, #32
 801f516:	2001      	movs	r0, #1
 801f518:	4798      	blx	r3
 801f51a:	4682      	mov	sl, r0
 801f51c:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
 801f51e:	2800      	cmp	r0, #0
 801f520:	d195      	bne.n	801f44e <mbedtls_x509_get_name+0x12>
 801f522:	e7ba      	b.n	801f49a <mbedtls_x509_get_name+0x5e>
            return( 0 );
 801f524:	2000      	movs	r0, #0
 801f526:	e79b      	b.n	801f460 <mbedtls_x509_get_name+0x24>
 801f528:	ffffd780 	.word	0xffffd780
 801f52c:	ffffdc20 	.word	0xffffdc20
 801f530:	ffffdc1e 	.word	0xffffdc1e
 801f534:	50581008 	.word	0x50581008
 801f538:	20000538 	.word	0x20000538

0801f53c <mbedtls_x509_get_time>:
    if( ( end - *p ) < 1 )
 801f53c:	6803      	ldr	r3, [r0, #0]
{
 801f53e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f540:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 801f542:	1aca      	subs	r2, r1, r3
 801f544:	2a00      	cmp	r2, #0
{
 801f546:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 801f548:	f340 809b 	ble.w	801f682 <mbedtls_x509_get_time+0x146>
    tag = **p;
 801f54c:	781a      	ldrb	r2, [r3, #0]
    if( tag == MBEDTLS_ASN1_UTC_TIME )
 801f54e:	2a17      	cmp	r2, #23
 801f550:	d00e      	beq.n	801f570 <mbedtls_x509_get_time+0x34>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 801f552:	2a18      	cmp	r2, #24
 801f554:	f040 8097 	bne.w	801f686 <mbedtls_x509_get_time+0x14a>
        year_len = 4;
 801f558:	2604      	movs	r6, #4
    (*p)++;
 801f55a:	3301      	adds	r3, #1
 801f55c:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801f55e:	aa01      	add	r2, sp, #4
 801f560:	4628      	mov	r0, r5
 801f562:	f7ee fc61 	bl	800de28 <mbedtls_asn1_get_len>
    if( ret != 0 )
 801f566:	b128      	cbz	r0, 801f574 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801f568:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
}
 801f56c:	b003      	add	sp, #12
 801f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 801f570:	2602      	movs	r6, #2
 801f572:	e7f2      	b.n	801f55a <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 801f574:	9f01      	ldr	r7, [sp, #4]
    if ( len < yearlen + 8 )
 801f576:	f106 0308 	add.w	r3, r6, #8
 801f57a:	429f      	cmp	r7, r3
 801f57c:	d201      	bcs.n	801f582 <mbedtls_x509_get_time+0x46>
 801f57e:	4843      	ldr	r0, [pc, #268]	; (801f68c <mbedtls_x509_get_time+0x150>)
 801f580:	e7f4      	b.n	801f56c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 801f582:	4622      	mov	r2, r4
 801f584:	4631      	mov	r1, r6
 801f586:	4628      	mov	r0, r5
 801f588:	f7ff fdcc 	bl	801f124 <x509_parse_int>
 801f58c:	2800      	cmp	r0, #0
 801f58e:	d1ed      	bne.n	801f56c <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 801f590:	2e02      	cmp	r6, #2
 801f592:	d108      	bne.n	801f5a6 <mbedtls_x509_get_time+0x6a>
        if ( tm->year < 50 )
 801f594:	6823      	ldr	r3, [r4, #0]
 801f596:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 801f598:	bfdc      	itt	le
 801f59a:	3364      	addle	r3, #100	; 0x64
 801f59c:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 801f59e:	6823      	ldr	r3, [r4, #0]
 801f5a0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f5a4:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 801f5a6:	1d22      	adds	r2, r4, #4
 801f5a8:	2102      	movs	r1, #2
 801f5aa:	4628      	mov	r0, r5
 801f5ac:	f7ff fdba 	bl	801f124 <x509_parse_int>
 801f5b0:	2800      	cmp	r0, #0
 801f5b2:	d1db      	bne.n	801f56c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 801f5b4:	f104 0208 	add.w	r2, r4, #8
 801f5b8:	2102      	movs	r1, #2
 801f5ba:	4628      	mov	r0, r5
 801f5bc:	f7ff fdb2 	bl	801f124 <x509_parse_int>
 801f5c0:	2800      	cmp	r0, #0
 801f5c2:	d1d3      	bne.n	801f56c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 801f5c4:	f104 020c 	add.w	r2, r4, #12
 801f5c8:	2102      	movs	r1, #2
 801f5ca:	4628      	mov	r0, r5
 801f5cc:	f7ff fdaa 	bl	801f124 <x509_parse_int>
 801f5d0:	2800      	cmp	r0, #0
 801f5d2:	d1cb      	bne.n	801f56c <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 801f5d4:	f104 0210 	add.w	r2, r4, #16
 801f5d8:	2102      	movs	r1, #2
 801f5da:	4628      	mov	r0, r5
 801f5dc:	f7ff fda2 	bl	801f124 <x509_parse_int>
 801f5e0:	2800      	cmp	r0, #0
 801f5e2:	d1c3      	bne.n	801f56c <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 801f5e4:	1bbe      	subs	r6, r7, r6
 801f5e6:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 801f5ea:	2b01      	cmp	r3, #1
 801f5ec:	d9c7      	bls.n	801f57e <mbedtls_x509_get_time+0x42>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801f5ee:	f104 0214 	add.w	r2, r4, #20
 801f5f2:	2102      	movs	r1, #2
 801f5f4:	4628      	mov	r0, r5
 801f5f6:	f7ff fd95 	bl	801f124 <x509_parse_int>
 801f5fa:	2800      	cmp	r0, #0
 801f5fc:	d1b6      	bne.n	801f56c <mbedtls_x509_get_time+0x30>
    if ( 1 == len && 'Z' == **p )
 801f5fe:	2e0b      	cmp	r6, #11
        len -= 2;
 801f600:	f1a6 030a 	sub.w	r3, r6, #10
    if ( 1 == len && 'Z' == **p )
 801f604:	d11f      	bne.n	801f646 <mbedtls_x509_get_time+0x10a>
 801f606:	682b      	ldr	r3, [r5, #0]
 801f608:	781a      	ldrb	r2, [r3, #0]
 801f60a:	2a5a      	cmp	r2, #90	; 0x5a
 801f60c:	d1b7      	bne.n	801f57e <mbedtls_x509_get_time+0x42>
        (*p)++;
 801f60e:	3301      	adds	r3, #1
 801f610:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 801f612:	6822      	ldr	r2, [r4, #0]
 801f614:	f242 730f 	movw	r3, #9999	; 0x270f
 801f618:	429a      	cmp	r2, r3
 801f61a:	d8b0      	bhi.n	801f57e <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 23,   t->hour );
 801f61c:	68e3      	ldr	r3, [r4, #12]
 801f61e:	2b17      	cmp	r3, #23
 801f620:	d8ad      	bhi.n	801f57e <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->min  );
 801f622:	6923      	ldr	r3, [r4, #16]
 801f624:	2b3b      	cmp	r3, #59	; 0x3b
 801f626:	d8aa      	bhi.n	801f57e <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->sec  );
 801f628:	6963      	ldr	r3, [r4, #20]
 801f62a:	2b3b      	cmp	r3, #59	; 0x3b
 801f62c:	d8a7      	bhi.n	801f57e <mbedtls_x509_get_time+0x42>
    switch( t->mon )
 801f62e:	6863      	ldr	r3, [r4, #4]
 801f630:	3b01      	subs	r3, #1
 801f632:	2b0b      	cmp	r3, #11
 801f634:	d8a3      	bhi.n	801f57e <mbedtls_x509_get_time+0x42>
 801f636:	e8df f003 	tbb	[pc, r3]
 801f63a:	1709      	.short	0x1709
 801f63c:	10091009 	.word	0x10091009
 801f640:	09100909 	.word	0x09100909
 801f644:	0910      	.short	0x0910
    if ( 0 != len )
 801f646:	2b00      	cmp	r3, #0
 801f648:	d0e3      	beq.n	801f612 <mbedtls_x509_get_time+0xd6>
 801f64a:	e798      	b.n	801f57e <mbedtls_x509_get_time+0x42>
            CHECK_RANGE( 1, 31, t->day );
 801f64c:	68a3      	ldr	r3, [r4, #8]
 801f64e:	4a0f      	ldr	r2, [pc, #60]	; (801f68c <mbedtls_x509_get_time+0x150>)
 801f650:	3b01      	subs	r3, #1
 801f652:	2b1e      	cmp	r3, #30
 801f654:	bf88      	it	hi
 801f656:	4610      	movhi	r0, r2
 801f658:	e788      	b.n	801f56c <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 30, t->day );
 801f65a:	68a3      	ldr	r3, [r4, #8]
 801f65c:	4a0b      	ldr	r2, [pc, #44]	; (801f68c <mbedtls_x509_get_time+0x150>)
 801f65e:	3b01      	subs	r3, #1
 801f660:	2b1d      	cmp	r3, #29
 801f662:	bf88      	it	hi
 801f664:	4610      	movhi	r0, r2
 801f666:	e781      	b.n	801f56c <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 28 + (t->year % 4 == 0), t->day );
 801f668:	68a3      	ldr	r3, [r4, #8]
 801f66a:	2b00      	cmp	r3, #0
 801f66c:	dd87      	ble.n	801f57e <mbedtls_x509_get_time+0x42>
 801f66e:	f012 0f03 	tst.w	r2, #3
 801f672:	4a06      	ldr	r2, [pc, #24]	; (801f68c <mbedtls_x509_get_time+0x150>)
 801f674:	bf0c      	ite	eq
 801f676:	211d      	moveq	r1, #29
 801f678:	211c      	movne	r1, #28
 801f67a:	428b      	cmp	r3, r1
 801f67c:	bfc8      	it	gt
 801f67e:	4610      	movgt	r0, r2
 801f680:	e774      	b.n	801f56c <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f682:	4803      	ldr	r0, [pc, #12]	; (801f690 <mbedtls_x509_get_time+0x154>)
 801f684:	e772      	b.n	801f56c <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f686:	4803      	ldr	r0, [pc, #12]	; (801f694 <mbedtls_x509_get_time+0x158>)
 801f688:	e770      	b.n	801f56c <mbedtls_x509_get_time+0x30>
 801f68a:	bf00      	nop
 801f68c:	ffffdc00 	.word	0xffffdc00
 801f690:	ffffdba0 	.word	0xffffdba0
 801f694:	ffffdb9e 	.word	0xffffdb9e

0801f698 <mbedtls_x509_get_sig>:
{
 801f698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f69a:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f69c:	6802      	ldr	r2, [r0, #0]
 801f69e:	1a8b      	subs	r3, r1, r2
 801f6a0:	2b00      	cmp	r3, #0
{
 801f6a2:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f6a4:	dd11      	ble.n	801f6ca <mbedtls_x509_get_sig+0x32>
    tag_type = **p;
 801f6a6:	7816      	ldrb	r6, [r2, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801f6a8:	aa01      	add	r2, sp, #4
 801f6aa:	f7ee fc89 	bl	800dfc0 <mbedtls_asn1_get_bitstring_null>
 801f6ae:	b118      	cbz	r0, 801f6b8 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 801f6b0:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
}
 801f6b4:	b002      	add	sp, #8
 801f6b6:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 801f6b8:	6823      	ldr	r3, [r4, #0]
 801f6ba:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 801f6bc:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 801f6be:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 801f6c0:	602e      	str	r6, [r5, #0]
    *p += len;
 801f6c2:	4413      	add	r3, r2
    sig->len = len;
 801f6c4:	606a      	str	r2, [r5, #4]
    *p += len;
 801f6c6:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f6c8:	e7f4      	b.n	801f6b4 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 801f6ca:	4801      	ldr	r0, [pc, #4]	; (801f6d0 <mbedtls_x509_get_sig+0x38>)
 801f6cc:	e7f2      	b.n	801f6b4 <mbedtls_x509_get_sig+0x1c>
 801f6ce:	bf00      	nop
 801f6d0:	ffffdb20 	.word	0xffffdb20

0801f6d4 <mbedtls_x509_get_sig_alg>:
{
 801f6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f6dc:	461d      	mov	r5, r3
    if( *sig_opts != NULL )
 801f6de:	f8d8 3000 	ldr.w	r3, [r8]
{
 801f6e2:	460e      	mov	r6, r1
 801f6e4:	4617      	mov	r7, r2
    if( *sig_opts != NULL )
 801f6e6:	bb73      	cbnz	r3, 801f746 <mbedtls_x509_get_sig_alg+0x72>
    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 801f6e8:	462a      	mov	r2, r5
 801f6ea:	4639      	mov	r1, r7
 801f6ec:	f7f5 fe3d 	bl	801536a <mbedtls_oid_get_sig_alg>
 801f6f0:	4604      	mov	r4, r0
 801f6f2:	b120      	cbz	r0, 801f6fe <mbedtls_x509_get_sig_alg+0x2a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 801f6f4:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
}
 801f6f8:	4620      	mov	r0, r4
 801f6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801f6fe:	782b      	ldrb	r3, [r5, #0]
 801f700:	2b06      	cmp	r3, #6
 801f702:	d116      	bne.n	801f732 <mbedtls_x509_get_sig_alg+0x5e>
        pss_opts = mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
 801f704:	4b13      	ldr	r3, [pc, #76]	; (801f754 <mbedtls_x509_get_sig_alg+0x80>)
 801f706:	2108      	movs	r1, #8
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	2001      	movs	r0, #1
 801f70c:	4798      	blx	r3
        if( pss_opts == NULL )
 801f70e:	4605      	mov	r5, r0
 801f710:	b1d8      	cbz	r0, 801f74a <mbedtls_x509_get_sig_alg+0x76>
        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
 801f712:	1d03      	adds	r3, r0, #4
 801f714:	4602      	mov	r2, r0
 801f716:	4639      	mov	r1, r7
 801f718:	4630      	mov	r0, r6
 801f71a:	f7ff fda7 	bl	801f26c <mbedtls_x509_get_rsassa_pss_params>
        if( ret != 0 )
 801f71e:	4604      	mov	r4, r0
 801f720:	b120      	cbz	r0, 801f72c <mbedtls_x509_get_sig_alg+0x58>
            mbedtls_free( pss_opts );
 801f722:	4b0d      	ldr	r3, [pc, #52]	; (801f758 <mbedtls_x509_get_sig_alg+0x84>)
 801f724:	4628      	mov	r0, r5
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	4798      	blx	r3
            return( ret );
 801f72a:	e7e5      	b.n	801f6f8 <mbedtls_x509_get_sig_alg+0x24>
        *sig_opts = (void *) pss_opts;
 801f72c:	f8c8 5000 	str.w	r5, [r8]
 801f730:	e7e2      	b.n	801f6f8 <mbedtls_x509_get_sig_alg+0x24>
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801f732:	6833      	ldr	r3, [r6, #0]
 801f734:	2b05      	cmp	r3, #5
 801f736:	d000      	beq.n	801f73a <mbedtls_x509_get_sig_alg+0x66>
 801f738:	b94b      	cbnz	r3, 801f74e <mbedtls_x509_get_sig_alg+0x7a>
 801f73a:	6872      	ldr	r2, [r6, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f73c:	4b07      	ldr	r3, [pc, #28]	; (801f75c <mbedtls_x509_get_sig_alg+0x88>)
 801f73e:	2a00      	cmp	r2, #0
 801f740:	bf18      	it	ne
 801f742:	461c      	movne	r4, r3
 801f744:	e7d8      	b.n	801f6f8 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801f746:	4c06      	ldr	r4, [pc, #24]	; (801f760 <mbedtls_x509_get_sig_alg+0x8c>)
 801f748:	e7d6      	b.n	801f6f8 <mbedtls_x509_get_sig_alg+0x24>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f74a:	4c06      	ldr	r4, [pc, #24]	; (801f764 <mbedtls_x509_get_sig_alg+0x90>)
 801f74c:	e7d4      	b.n	801f6f8 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f74e:	4c03      	ldr	r4, [pc, #12]	; (801f75c <mbedtls_x509_get_sig_alg+0x88>)
 801f750:	e7d2      	b.n	801f6f8 <mbedtls_x509_get_sig_alg+0x24>
 801f752:	bf00      	nop
 801f754:	20000538 	.word	0x20000538
 801f758:	2000053c 	.word	0x2000053c
 801f75c:	ffffdd00 	.word	0xffffdd00
 801f760:	ffffd800 	.word	0xffffd800
 801f764:	ffffd780 	.word	0xffffd780

0801f768 <mbedtls_x509_get_ext>:
{
 801f768:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f76a:	4616      	mov	r6, r2
    if( *p == end )
 801f76c:	6802      	ldr	r2, [r0, #0]
 801f76e:	428a      	cmp	r2, r1
{
 801f770:	4604      	mov	r4, r0
    if( *p == end )
 801f772:	d102      	bne.n	801f77a <mbedtls_x509_get_ext+0x12>
        return( 0 );
 801f774:	2000      	movs	r0, #0
}
 801f776:	b002      	add	sp, #8
 801f778:	bd70      	pop	{r4, r5, r6, pc}
    ext->tag = **p;
 801f77a:	7815      	ldrb	r5, [r2, #0]
 801f77c:	4632      	mov	r2, r6
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801f77e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 801f782:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801f786:	f7ee fb97 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f78a:	2800      	cmp	r0, #0
 801f78c:	d1f3      	bne.n	801f776 <mbedtls_x509_get_ext+0xe>
    ext->p = *p;
 801f78e:	6825      	ldr	r5, [r4, #0]
    end = *p + ext->len;
 801f790:	6871      	ldr	r1, [r6, #4]
    ext->p = *p;
 801f792:	60b5      	str	r5, [r6, #8]
    end = *p + ext->len;
 801f794:	440d      	add	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f796:	2330      	movs	r3, #48	; 0x30
 801f798:	aa01      	add	r2, sp, #4
 801f79a:	4629      	mov	r1, r5
 801f79c:	4620      	mov	r0, r4
 801f79e:	f7ee fb8b 	bl	800deb8 <mbedtls_asn1_get_tag>
 801f7a2:	b110      	cbz	r0, 801f7aa <mbedtls_x509_get_ext+0x42>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801f7a4:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 801f7a8:	e7e5      	b.n	801f776 <mbedtls_x509_get_ext+0xe>
    if( end != *p + len )
 801f7aa:	6823      	ldr	r3, [r4, #0]
 801f7ac:	9a01      	ldr	r2, [sp, #4]
 801f7ae:	4413      	add	r3, r2
 801f7b0:	429d      	cmp	r5, r3
 801f7b2:	d0df      	beq.n	801f774 <mbedtls_x509_get_ext+0xc>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801f7b4:	4800      	ldr	r0, [pc, #0]	; (801f7b8 <mbedtls_x509_get_ext+0x50>)
 801f7b6:	e7de      	b.n	801f776 <mbedtls_x509_get_ext+0xe>
 801f7b8:	ffffda9a 	.word	0xffffda9a

0801f7bc <mbedtls_x509_dn_gets>:
{
 801f7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7c0:	b0c3      	sub	sp, #268	; 0x10c
    const char *short_name = NULL;
 801f7c2:	f04f 0a00 	mov.w	sl, #0
    memset( s, 0, sizeof( s ) );
 801f7c6:	f10d 0908 	add.w	r9, sp, #8
{
 801f7ca:	460f      	mov	r7, r1
 801f7cc:	4690      	mov	r8, r2
    memset( s, 0, sizeof( s ) );
 801f7ce:	4651      	mov	r1, sl
{
 801f7d0:	4604      	mov	r4, r0
    memset( s, 0, sizeof( s ) );
 801f7d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f7d6:	4648      	mov	r0, r9
    const char *short_name = NULL;
 801f7d8:	f8cd a004 	str.w	sl, [sp, #4]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801f7dc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801f8b8 <mbedtls_x509_dn_gets+0xfc>
    memset( s, 0, sizeof( s ) );
 801f7e0:	f002 fd0a 	bl	80221f8 <memset>
    unsigned char c, merge = 0;
 801f7e4:	4651      	mov	r1, sl
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801f7e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f8bc <mbedtls_x509_dn_gets+0x100>
    name = dn;
 801f7ea:	4646      	mov	r6, r8
    n = size;
 801f7ec:	463d      	mov	r5, r7
    while( name != NULL )
 801f7ee:	b90e      	cbnz	r6, 801f7f4 <mbedtls_x509_dn_gets+0x38>
    return( (int) ( size - n ) );
 801f7f0:	1b78      	subs	r0, r7, r5
 801f7f2:	e011      	b.n	801f818 <mbedtls_x509_dn_gets+0x5c>
        if( !name->oid.p )
 801f7f4:	68b3      	ldr	r3, [r6, #8]
 801f7f6:	b90b      	cbnz	r3, 801f7fc <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 801f7f8:	69b6      	ldr	r6, [r6, #24]
 801f7fa:	e7f8      	b.n	801f7ee <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 801f7fc:	4546      	cmp	r6, r8
 801f7fe:	d012      	beq.n	801f826 <mbedtls_x509_dn_gets+0x6a>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 801f800:	4b29      	ldr	r3, [pc, #164]	; (801f8a8 <mbedtls_x509_dn_gets+0xec>)
 801f802:	4a2a      	ldr	r2, [pc, #168]	; (801f8ac <mbedtls_x509_dn_gets+0xf0>)
 801f804:	4620      	mov	r0, r4
 801f806:	2900      	cmp	r1, #0
 801f808:	bf08      	it	eq
 801f80a:	461a      	moveq	r2, r3
 801f80c:	4629      	mov	r1, r5
 801f80e:	f003 fee1 	bl	80235d4 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 801f812:	2800      	cmp	r0, #0
 801f814:	da03      	bge.n	801f81e <mbedtls_x509_dn_gets+0x62>
 801f816:	4826      	ldr	r0, [pc, #152]	; (801f8b0 <mbedtls_x509_dn_gets+0xf4>)
}
 801f818:	b043      	add	sp, #268	; 0x10c
 801f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 801f81e:	42a8      	cmp	r0, r5
 801f820:	d2f9      	bcs.n	801f816 <mbedtls_x509_dn_gets+0x5a>
 801f822:	1a2d      	subs	r5, r5, r0
 801f824:	4404      	add	r4, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801f826:	a901      	add	r1, sp, #4
 801f828:	4630      	mov	r0, r6
 801f82a:	f7f5 fd43 	bl	80152b4 <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 801f82e:	bb08      	cbnz	r0, 801f874 <mbedtls_x509_dn_gets+0xb8>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801f830:	9b01      	ldr	r3, [sp, #4]
 801f832:	465a      	mov	r2, fp
 801f834:	4629      	mov	r1, r5
 801f836:	4620      	mov	r0, r4
 801f838:	f003 fecc 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f83c:	2800      	cmp	r0, #0
 801f83e:	dbea      	blt.n	801f816 <mbedtls_x509_dn_gets+0x5a>
 801f840:	42a8      	cmp	r0, r5
 801f842:	d2e8      	bcs.n	801f816 <mbedtls_x509_dn_gets+0x5a>
 801f844:	1a2d      	subs	r5, r5, r0
 801f846:	4404      	add	r4, r0
        for( i = 0; i < name->val.len; i++ )
 801f848:	2200      	movs	r2, #0
 801f84a:	4648      	mov	r0, r9
 801f84c:	6933      	ldr	r3, [r6, #16]
 801f84e:	4293      	cmp	r3, r2
 801f850:	d816      	bhi.n	801f880 <mbedtls_x509_dn_gets+0xc4>
        s[i] = '\0';
 801f852:	2300      	movs	r3, #0
 801f854:	f809 3002 	strb.w	r3, [r9, r2]
        ret = mbedtls_snprintf( p, n, "%s", s );
 801f858:	4629      	mov	r1, r5
 801f85a:	4a16      	ldr	r2, [pc, #88]	; (801f8b4 <mbedtls_x509_dn_gets+0xf8>)
 801f85c:	464b      	mov	r3, r9
 801f85e:	4620      	mov	r0, r4
 801f860:	f003 feb8 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f864:	2800      	cmp	r0, #0
 801f866:	dbd6      	blt.n	801f816 <mbedtls_x509_dn_gets+0x5a>
 801f868:	42a8      	cmp	r0, r5
 801f86a:	d2d4      	bcs.n	801f816 <mbedtls_x509_dn_gets+0x5a>
        merge = name->next_merged;
 801f86c:	7f31      	ldrb	r1, [r6, #28]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f86e:	1a2d      	subs	r5, r5, r0
 801f870:	4404      	add	r4, r0
        merge = name->next_merged;
 801f872:	e7c1      	b.n	801f7f8 <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801f874:	4652      	mov	r2, sl
 801f876:	4629      	mov	r1, r5
 801f878:	4620      	mov	r0, r4
 801f87a:	f003 feab 	bl	80235d4 <sniprintf>
 801f87e:	e7dd      	b.n	801f83c <mbedtls_x509_dn_gets+0x80>
            if( i >= sizeof( s ) - 1 )
 801f880:	2aff      	cmp	r2, #255	; 0xff
 801f882:	d0e6      	beq.n	801f852 <mbedtls_x509_dn_gets+0x96>
            c = name->val.p[i];
 801f884:	6973      	ldr	r3, [r6, #20]
 801f886:	5c9b      	ldrb	r3, [r3, r2]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 801f888:	2b1f      	cmp	r3, #31
 801f88a:	d90b      	bls.n	801f8a4 <mbedtls_x509_dn_gets+0xe8>
 801f88c:	2b7f      	cmp	r3, #127	; 0x7f
 801f88e:	d009      	beq.n	801f8a4 <mbedtls_x509_dn_gets+0xe8>
 801f890:	f103 017f 	add.w	r1, r3, #127	; 0x7f
 801f894:	b2c9      	uxtb	r1, r1
                 s[i] = '?';
 801f896:	291e      	cmp	r1, #30
 801f898:	bf98      	it	ls
 801f89a:	233f      	movls	r3, #63	; 0x3f
 801f89c:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < name->val.len; i++ )
 801f8a0:	3201      	adds	r2, #1
 801f8a2:	e7d3      	b.n	801f84c <mbedtls_x509_dn_gets+0x90>
                 s[i] = '?';
 801f8a4:	233f      	movs	r3, #63	; 0x3f
 801f8a6:	e7f9      	b.n	801f89c <mbedtls_x509_dn_gets+0xe0>
 801f8a8:	08032c89 	.word	0x08032c89
 801f8ac:	08032c85 	.word	0x08032c85
 801f8b0:	ffffd680 	.word	0xffffd680
 801f8b4:	08031349 	.word	0x08031349
 801f8b8:	08032c8c 	.word	0x08032c8c
 801f8bc:	08032c90 	.word	0x08032c90

0801f8c0 <mbedtls_x509_serial_gets>:
{
 801f8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    nr = ( serial->len <= 32 )
 801f8c4:	f8d2 8004 	ldr.w	r8, [r2, #4]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801f8c8:	f8df a088 	ldr.w	sl, [pc, #136]	; 801f954 <mbedtls_x509_serial_gets+0x94>
 801f8cc:	f8df b088 	ldr.w	fp, [pc, #136]	; 801f958 <mbedtls_x509_serial_gets+0x98>
{
 801f8d0:	4691      	mov	r9, r2
        ? serial->len  : 28;
 801f8d2:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801f8d6:	4a1c      	ldr	r2, [pc, #112]	; (801f948 <mbedtls_x509_serial_gets+0x88>)
{
 801f8d8:	4607      	mov	r7, r0
 801f8da:	460d      	mov	r5, r1
        ? serial->len  : 28;
 801f8dc:	bf28      	it	cs
 801f8de:	f04f 081c 	movcs.w	r8, #28
    n = size;
 801f8e2:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
 801f8e4:	2600      	movs	r6, #0
 801f8e6:	4546      	cmp	r6, r8
 801f8e8:	d10d      	bne.n	801f906 <mbedtls_x509_serial_gets+0x46>
    if( nr != serial->len )
 801f8ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f8ee:	42b3      	cmp	r3, r6
 801f8f0:	d007      	beq.n	801f902 <mbedtls_x509_serial_gets+0x42>
        ret = mbedtls_snprintf( p, n, "...." );
 801f8f2:	4a16      	ldr	r2, [pc, #88]	; (801f94c <mbedtls_x509_serial_gets+0x8c>)
 801f8f4:	4621      	mov	r1, r4
 801f8f6:	4638      	mov	r0, r7
 801f8f8:	f003 fe6c 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f8fc:	2c04      	cmp	r4, #4
 801f8fe:	d919      	bls.n	801f934 <mbedtls_x509_serial_gets+0x74>
 801f900:	3c04      	subs	r4, #4
    return( (int) ( size - n ) );
 801f902:	1b28      	subs	r0, r5, r4
 801f904:	e017      	b.n	801f936 <mbedtls_x509_serial_gets+0x76>
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801f906:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801f90a:	b926      	cbnz	r6, 801f916 <mbedtls_x509_serial_gets+0x56>
 801f90c:	f1b8 0f01 	cmp.w	r8, #1
 801f910:	d001      	beq.n	801f916 <mbedtls_x509_serial_gets+0x56>
 801f912:	7819      	ldrb	r1, [r3, #0]
 801f914:	b1b1      	cbz	r1, 801f944 <mbedtls_x509_serial_gets+0x84>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801f916:	f108 31ff 	add.w	r1, r8, #4294967295
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801f91a:	42b1      	cmp	r1, r6
 801f91c:	bf8c      	ite	hi
 801f91e:	4651      	movhi	r1, sl
 801f920:	4659      	movls	r1, fp
 801f922:	5d9b      	ldrb	r3, [r3, r6]
 801f924:	9100      	str	r1, [sp, #0]
 801f926:	4638      	mov	r0, r7
 801f928:	4621      	mov	r1, r4
 801f92a:	f003 fe53 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f92e:	2800      	cmp	r0, #0
 801f930:	4a05      	ldr	r2, [pc, #20]	; (801f948 <mbedtls_x509_serial_gets+0x88>)
 801f932:	da03      	bge.n	801f93c <mbedtls_x509_serial_gets+0x7c>
 801f934:	4806      	ldr	r0, [pc, #24]	; (801f950 <mbedtls_x509_serial_gets+0x90>)
}
 801f936:	b003      	add	sp, #12
 801f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f93c:	42a0      	cmp	r0, r4
 801f93e:	d2f9      	bcs.n	801f934 <mbedtls_x509_serial_gets+0x74>
 801f940:	1a24      	subs	r4, r4, r0
 801f942:	4407      	add	r7, r0
    for( i = 0; i < nr; i++ )
 801f944:	3601      	adds	r6, #1
 801f946:	e7ce      	b.n	801f8e6 <mbedtls_x509_serial_gets+0x26>
 801f948:	08032c94 	.word	0x08032c94
 801f94c:	0802db7a 	.word	0x0802db7a
 801f950:	ffffd680 	.word	0xffffd680
 801f954:	0802facd 	.word	0x0802facd
 801f958:	08030129 	.word	0x08030129

0801f95c <mbedtls_x509_sig_alg_gets>:
{
 801f95c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f960:	4607      	mov	r7, r0
 801f962:	460c      	mov	r4, r1
 801f964:	4698      	mov	r8, r3
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801f966:	a903      	add	r1, sp, #12
    const char *desc = NULL;
 801f968:	2300      	movs	r3, #0
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801f96a:	4610      	mov	r0, r2
{
 801f96c:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    const char *desc = NULL;
 801f970:	9303      	str	r3, [sp, #12]
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801f972:	f7f5 fced 	bl	8015350 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 801f976:	b158      	cbz	r0, 801f990 <mbedtls_x509_sig_alg_gets+0x34>
        ret = mbedtls_snprintf( p, n, "???"  );
 801f978:	4a23      	ldr	r2, [pc, #140]	; (801fa08 <mbedtls_x509_sig_alg_gets+0xac>)
 801f97a:	4621      	mov	r1, r4
 801f97c:	4638      	mov	r0, r7
 801f97e:	f003 fe29 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801f982:	2800      	cmp	r0, #0
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801f984:	4605      	mov	r5, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
 801f986:	da0a      	bge.n	801f99e <mbedtls_x509_sig_alg_gets+0x42>
 801f988:	4820      	ldr	r0, [pc, #128]	; (801fa0c <mbedtls_x509_sig_alg_gets+0xb0>)
}
 801f98a:	b004      	add	sp, #16
 801f98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801f990:	9b03      	ldr	r3, [sp, #12]
 801f992:	4a1f      	ldr	r2, [pc, #124]	; (801fa10 <mbedtls_x509_sig_alg_gets+0xb4>)
 801f994:	4621      	mov	r1, r4
 801f996:	4638      	mov	r0, r7
 801f998:	f003 fe1c 	bl	80235d4 <sniprintf>
 801f99c:	e7f1      	b.n	801f982 <mbedtls_x509_sig_alg_gets+0x26>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801f99e:	42a0      	cmp	r0, r4
 801f9a0:	d2f2      	bcs.n	801f988 <mbedtls_x509_sig_alg_gets+0x2c>
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801f9a2:	f1b8 0f06 	cmp.w	r8, #6
    MBEDTLS_X509_SAFE_SNPRINTF;
 801f9a6:	eba4 0600 	sub.w	r6, r4, r0
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801f9aa:	d125      	bne.n	801f9f8 <mbedtls_x509_sig_alg_gets+0x9c>
        md_info = mbedtls_md_info_from_type( md_alg );
 801f9ac:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801f9b0:	f7f4 fe58 	bl	8014664 <mbedtls_md_info_from_type>
 801f9b4:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
 801f9b6:	f899 0000 	ldrb.w	r0, [r9]
 801f9ba:	f7f4 fe53 	bl	8014664 <mbedtls_md_info_from_type>
 801f9be:	4682      	mov	sl, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801f9c0:	f1b8 0f00 	cmp.w	r8, #0
 801f9c4:	d01a      	beq.n	801f9fc <mbedtls_x509_sig_alg_gets+0xa0>
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
 801f9c6:	4640      	mov	r0, r8
 801f9c8:	f7f4 ff9f 	bl	801490a <mbedtls_md_get_name>
 801f9cc:	4680      	mov	r8, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801f9ce:	f1ba 0f00 	cmp.w	sl, #0
 801f9d2:	d016      	beq.n	801fa02 <mbedtls_x509_sig_alg_gets+0xa6>
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
 801f9d4:	4650      	mov	r0, sl
 801f9d6:	f7f4 ff98 	bl	801490a <mbedtls_md_get_name>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801f9da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f9de:	4a0d      	ldr	r2, [pc, #52]	; (801fa14 <mbedtls_x509_sig_alg_gets+0xb8>)
 801f9e0:	e9cd 0300 	strd	r0, r3, [sp]
 801f9e4:	4631      	mov	r1, r6
 801f9e6:	4643      	mov	r3, r8
 801f9e8:	1978      	adds	r0, r7, r5
 801f9ea:	f003 fdf3 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801f9ee:	2800      	cmp	r0, #0
 801f9f0:	dbca      	blt.n	801f988 <mbedtls_x509_sig_alg_gets+0x2c>
 801f9f2:	42b0      	cmp	r0, r6
 801f9f4:	d2c8      	bcs.n	801f988 <mbedtls_x509_sig_alg_gets+0x2c>
 801f9f6:	1a36      	subs	r6, r6, r0
    return( (int)( size - n ) );
 801f9f8:	1ba0      	subs	r0, r4, r6
 801f9fa:	e7c6      	b.n	801f98a <mbedtls_x509_sig_alg_gets+0x2e>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801f9fc:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801fa08 <mbedtls_x509_sig_alg_gets+0xac>
 801fa00:	e7e5      	b.n	801f9ce <mbedtls_x509_sig_alg_gets+0x72>
 801fa02:	4801      	ldr	r0, [pc, #4]	; (801fa08 <mbedtls_x509_sig_alg_gets+0xac>)
 801fa04:	e7e9      	b.n	801f9da <mbedtls_x509_sig_alg_gets+0x7e>
 801fa06:	bf00      	nop
 801fa08:	08032c9b 	.word	0x08032c9b
 801fa0c:	ffffd680 	.word	0xffffd680
 801fa10:	08031349 	.word	0x08031349
 801fa14:	08032c9f 	.word	0x08032c9f

0801fa18 <mbedtls_x509_key_size_helper>:
{
 801fa18:	b510      	push	{r4, lr}
 801fa1a:	4613      	mov	r3, r2
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fa1c:	4a06      	ldr	r2, [pc, #24]	; (801fa38 <mbedtls_x509_key_size_helper+0x20>)
{
 801fa1e:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fa20:	f003 fdd8 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fa24:	2800      	cmp	r0, #0
 801fa26:	db05      	blt.n	801fa34 <mbedtls_x509_key_size_helper+0x1c>
    return( 0 );
 801fa28:	4b04      	ldr	r3, [pc, #16]	; (801fa3c <mbedtls_x509_key_size_helper+0x24>)
 801fa2a:	42a0      	cmp	r0, r4
 801fa2c:	bf2c      	ite	cs
 801fa2e:	4618      	movcs	r0, r3
 801fa30:	2000      	movcc	r0, #0
}
 801fa32:	bd10      	pop	{r4, pc}
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fa34:	4801      	ldr	r0, [pc, #4]	; (801fa3c <mbedtls_x509_key_size_helper+0x24>)
 801fa36:	e7fc      	b.n	801fa32 <mbedtls_x509_key_size_helper+0x1a>
 801fa38:	08032cb6 	.word	0x08032cb6
 801fa3c:	ffffd680 	.word	0xffffd680

0801fa40 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 801fa40:	b500      	push	{lr}
 801fa42:	b089      	sub	sp, #36	; 0x24
 801fa44:	9001      	str	r0, [sp, #4]
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fa46:	a802      	add	r0, sp, #8
 801fa48:	f7ff fbbb 	bl	801f1c2 <x509_get_current_time>
 801fa4c:	b930      	cbnz	r0, 801fa5c <mbedtls_x509_time_is_past+0x1c>
        return( 1 );

    return( x509_check_time( &now, to ) );
 801fa4e:	9901      	ldr	r1, [sp, #4]
 801fa50:	a802      	add	r0, sp, #8
 801fa52:	f7ff fb83 	bl	801f15c <x509_check_time>
}
 801fa56:	b009      	add	sp, #36	; 0x24
 801fa58:	f85d fb04 	ldr.w	pc, [sp], #4
        return( 1 );
 801fa5c:	2001      	movs	r0, #1
 801fa5e:	e7fa      	b.n	801fa56 <mbedtls_x509_time_is_past+0x16>

0801fa60 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 801fa60:	b510      	push	{r4, lr}
 801fa62:	b086      	sub	sp, #24
 801fa64:	4604      	mov	r4, r0
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fa66:	4668      	mov	r0, sp
 801fa68:	f7ff fbab 	bl	801f1c2 <x509_get_current_time>
 801fa6c:	b928      	cbnz	r0, 801fa7a <mbedtls_x509_time_is_future+0x1a>
        return( 1 );

    return( x509_check_time( from, &now ) );
 801fa6e:	4669      	mov	r1, sp
 801fa70:	4620      	mov	r0, r4
 801fa72:	f7ff fb73 	bl	801f15c <x509_check_time>
}
 801fa76:	b006      	add	sp, #24
 801fa78:	bd10      	pop	{r4, pc}
        return( 1 );
 801fa7a:	2001      	movs	r0, #1
 801fa7c:	e7fb      	b.n	801fa76 <mbedtls_x509_time_is_future+0x16>

0801fa7e <mbedtls_x509_crl_init>:
/*
 * Initialize a CRL chain
 */
void mbedtls_x509_crl_init( mbedtls_x509_crl *crl )
{
    memset( crl, 0, sizeof(mbedtls_x509_crl) );
 801fa7e:	22f4      	movs	r2, #244	; 0xf4
 801fa80:	2100      	movs	r1, #0
 801fa82:	f002 bbb9 	b.w	80221f8 <memset>
	...

0801fa88 <mbedtls_x509_crl_free>:

/*
 * Unallocate all CRL data
 */
void mbedtls_x509_crl_free( mbedtls_x509_crl *crl )
{
 801fa88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_crl_entry *entry_cur;
    mbedtls_x509_crl_entry *entry_prv;

    if( crl == NULL )
 801fa8c:	4605      	mov	r5, r0
 801fa8e:	b350      	cbz	r0, 801fae6 <mbedtls_x509_crl_free+0x5e>
        return;

    do
    {
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( crl_cur->sig_opts );
 801fa90:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801fb30 <mbedtls_x509_crl_free+0xa8>
 801fa94:	4604      	mov	r4, r0
 801fa96:	4646      	mov	r6, r8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fa98:	2700      	movs	r7, #0
        mbedtls_free( crl_cur->sig_opts );
 801fa9a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801fa9e:	f8d8 3000 	ldr.w	r3, [r8]
 801faa2:	4798      	blx	r3
#endif

        name_cur = crl_cur->issuer.next;
 801faa4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        while( name_cur != NULL )
 801faa6:	bb00      	cbnz	r0, 801faea <mbedtls_x509_crl_free+0x62>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        entry_cur = crl_cur->entry.next;
 801faa8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
        while( entry_cur != NULL )
 801faac:	bb58      	cbnz	r0, 801fb06 <mbedtls_x509_crl_free+0x7e>
            entry_cur = entry_cur->next;
            mbedtls_zeroize( entry_prv, sizeof( mbedtls_x509_crl_entry ) );
            mbedtls_free( entry_prv );
        }

        if( crl_cur->raw.p != NULL )
 801faae:	68a3      	ldr	r3, [r4, #8]
 801fab0:	b133      	cbz	r3, 801fac0 <mbedtls_x509_crl_free+0x38>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fab2:	6862      	ldr	r2, [r4, #4]
 801fab4:	441a      	add	r2, r3
 801fab6:	4293      	cmp	r3, r2
 801fab8:	d133      	bne.n	801fb22 <mbedtls_x509_crl_free+0x9a>
        {
            mbedtls_zeroize( crl_cur->raw.p, crl_cur->raw.len );
            mbedtls_free( crl_cur->raw.p );
 801faba:	6833      	ldr	r3, [r6, #0]
 801fabc:	68a0      	ldr	r0, [r4, #8]
 801fabe:	4798      	blx	r3
        }

        crl_cur = crl_cur->next;
 801fac0:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
    }
    while( crl_cur != NULL );
 801fac4:	2c00      	cmp	r4, #0
 801fac6:	d1e8      	bne.n	801fa9a <mbedtls_x509_crl_free+0x12>
 801fac8:	462f      	mov	r7, r5

    crl_cur = crl;
    do
    {
        crl_prv = crl_cur;
        crl_cur = crl_cur->next;
 801faca:	4638      	mov	r0, r7
 801facc:	f8d7 70f0 	ldr.w	r7, [r7, #240]	; 0xf0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fad0:	f100 02f4 	add.w	r2, r0, #244	; 0xf4
 801fad4:	4603      	mov	r3, r0
 801fad6:	4293      	cmp	r3, r2
 801fad8:	d126      	bne.n	801fb28 <mbedtls_x509_crl_free+0xa0>

        mbedtls_zeroize( crl_prv, sizeof( mbedtls_x509_crl ) );
        if( crl_prv != crl )
 801fada:	4285      	cmp	r5, r0
 801fadc:	d001      	beq.n	801fae2 <mbedtls_x509_crl_free+0x5a>
            mbedtls_free( crl_prv );
 801fade:	6833      	ldr	r3, [r6, #0]
 801fae0:	4798      	blx	r3
    }
    while( crl_cur != NULL );
 801fae2:	2f00      	cmp	r7, #0
 801fae4:	d1f1      	bne.n	801faca <mbedtls_x509_crl_free+0x42>
}
 801fae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            name_cur = name_cur->next;
 801faea:	f8d0 9018 	ldr.w	r9, [r0, #24]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801faee:	f100 0220 	add.w	r2, r0, #32
 801faf2:	4603      	mov	r3, r0
 801faf4:	4293      	cmp	r3, r2
 801faf6:	d103      	bne.n	801fb00 <mbedtls_x509_crl_free+0x78>
            mbedtls_free( name_prv );
 801faf8:	6833      	ldr	r3, [r6, #0]
 801fafa:	4798      	blx	r3
            name_cur = name_cur->next;
 801fafc:	4648      	mov	r0, r9
 801fafe:	e7d2      	b.n	801faa6 <mbedtls_x509_crl_free+0x1e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fb00:	f803 7b01 	strb.w	r7, [r3], #1
 801fb04:	e7f6      	b.n	801faf4 <mbedtls_x509_crl_free+0x6c>
            entry_cur = entry_cur->next;
 801fb06:	f8d0 903c 	ldr.w	r9, [r0, #60]	; 0x3c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fb0a:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801fb0e:	4603      	mov	r3, r0
 801fb10:	4293      	cmp	r3, r2
 801fb12:	d103      	bne.n	801fb1c <mbedtls_x509_crl_free+0x94>
            mbedtls_free( entry_prv );
 801fb14:	6833      	ldr	r3, [r6, #0]
 801fb16:	4798      	blx	r3
            entry_cur = entry_cur->next;
 801fb18:	4648      	mov	r0, r9
 801fb1a:	e7c7      	b.n	801faac <mbedtls_x509_crl_free+0x24>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fb1c:	f803 7b01 	strb.w	r7, [r3], #1
 801fb20:	e7f6      	b.n	801fb10 <mbedtls_x509_crl_free+0x88>
 801fb22:	f803 7b01 	strb.w	r7, [r3], #1
 801fb26:	e7c6      	b.n	801fab6 <mbedtls_x509_crl_free+0x2e>
 801fb28:	f803 4b01 	strb.w	r4, [r3], #1
 801fb2c:	e7d3      	b.n	801fad6 <mbedtls_x509_crl_free+0x4e>
 801fb2e:	bf00      	nop
 801fb30:	2000053c 	.word	0x2000053c

0801fb34 <mbedtls_x509_crl_parse_der>:
{
 801fb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fb38:	460f      	mov	r7, r1
 801fb3a:	b092      	sub	sp, #72	; 0x48
 801fb3c:	4614      	mov	r4, r2
    if( crl == NULL || buf == NULL )
 801fb3e:	4605      	mov	r5, r0
 801fb40:	2800      	cmp	r0, #0
 801fb42:	f000 81bb 	beq.w	801febc <mbedtls_x509_crl_parse_der+0x388>
 801fb46:	2900      	cmp	r1, #0
 801fb48:	f000 81b8 	beq.w	801febc <mbedtls_x509_crl_parse_der+0x388>
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801fb4c:	2300      	movs	r3, #0
 801fb4e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801fb52:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801fb56:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801fb5a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801fb5e:	9311      	str	r3, [sp, #68]	; 0x44
    while( crl->version != 0 && crl->next != NULL )
 801fb60:	69ab      	ldr	r3, [r5, #24]
 801fb62:	b1ab      	cbz	r3, 801fb90 <mbedtls_x509_crl_parse_der+0x5c>
 801fb64:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 801fb68:	b963      	cbnz	r3, 801fb84 <mbedtls_x509_crl_parse_der+0x50>
        crl->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl ) );
 801fb6a:	4ba8      	ldr	r3, [pc, #672]	; (801fe0c <mbedtls_x509_crl_parse_der+0x2d8>)
 801fb6c:	21f4      	movs	r1, #244	; 0xf4
 801fb6e:	681b      	ldr	r3, [r3, #0]
 801fb70:	2001      	movs	r0, #1
 801fb72:	4798      	blx	r3
 801fb74:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
        if( crl->next == NULL )
 801fb78:	b930      	cbnz	r0, 801fb88 <mbedtls_x509_crl_parse_der+0x54>
            mbedtls_x509_crl_free( crl );
 801fb7a:	4628      	mov	r0, r5
 801fb7c:	f7ff ff84 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801fb80:	4ca3      	ldr	r4, [pc, #652]	; (801fe10 <mbedtls_x509_crl_parse_der+0x2dc>)
 801fb82:	e021      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
 801fb84:	461d      	mov	r5, r3
 801fb86:	e7eb      	b.n	801fb60 <mbedtls_x509_crl_parse_der+0x2c>
        mbedtls_x509_crl_init( crl->next );
 801fb88:	f7ff ff79 	bl	801fa7e <mbedtls_x509_crl_init>
        crl = crl->next;
 801fb8c:	f8d5 50f0 	ldr.w	r5, [r5, #240]	; 0xf0
    if( ( p = mbedtls_calloc( 1, buflen ) ) == NULL )
 801fb90:	4e9e      	ldr	r6, [pc, #632]	; (801fe0c <mbedtls_x509_crl_parse_der+0x2d8>)
 801fb92:	4621      	mov	r1, r4
 801fb94:	6833      	ldr	r3, [r6, #0]
 801fb96:	2001      	movs	r0, #1
 801fb98:	4798      	blx	r3
 801fb9a:	9005      	str	r0, [sp, #20]
 801fb9c:	2800      	cmp	r0, #0
 801fb9e:	d0ef      	beq.n	801fb80 <mbedtls_x509_crl_parse_der+0x4c>
    memcpy( p, buf, buflen );
 801fba0:	4622      	mov	r2, r4
 801fba2:	4639      	mov	r1, r7
 801fba4:	f002 fb00 	bl	80221a8 <memcpy>
    crl->raw.p = p;
 801fba8:	9905      	ldr	r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fbaa:	2330      	movs	r3, #48	; 0x30
    crl->raw.len = buflen;
 801fbac:	e9c5 4101 	strd	r4, r1, [r5, #4]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fbb0:	aa04      	add	r2, sp, #16
    end = p + buflen;
 801fbb2:	4421      	add	r1, r4
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fbb4:	a805      	add	r0, sp, #20
 801fbb6:	9103      	str	r1, [sp, #12]
 801fbb8:	f7ee f97e 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fbbc:	9903      	ldr	r1, [sp, #12]
 801fbbe:	b138      	cbz	r0, 801fbd0 <mbedtls_x509_crl_parse_der+0x9c>
        mbedtls_x509_crl_free( crl );
 801fbc0:	4628      	mov	r0, r5
 801fbc2:	f7ff ff61 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801fbc6:	4c93      	ldr	r4, [pc, #588]	; (801fe14 <mbedtls_x509_crl_parse_der+0x2e0>)
}
 801fbc8:	4620      	mov	r0, r4
 801fbca:	b012      	add	sp, #72	; 0x48
 801fbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( len != (size_t) ( end - p ) )
 801fbd0:	9b05      	ldr	r3, [sp, #20]
 801fbd2:	9a04      	ldr	r2, [sp, #16]
 801fbd4:	1ac8      	subs	r0, r1, r3
 801fbd6:	4290      	cmp	r0, r2
 801fbd8:	d004      	beq.n	801fbe4 <mbedtls_x509_crl_parse_der+0xb0>
        mbedtls_x509_crl_free( crl );
 801fbda:	4628      	mov	r0, r5
 801fbdc:	f7ff ff54 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801fbe0:	4c8d      	ldr	r4, [pc, #564]	; (801fe18 <mbedtls_x509_crl_parse_der+0x2e4>)
 801fbe2:	e7f1      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
    crl->tbs.p = p;
 801fbe4:	616b      	str	r3, [r5, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fbe6:	aa04      	add	r2, sp, #16
 801fbe8:	2330      	movs	r3, #48	; 0x30
 801fbea:	a805      	add	r0, sp, #20
 801fbec:	f7ee f964 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fbf0:	4604      	mov	r4, r0
 801fbf2:	b128      	cbz	r0, 801fc00 <mbedtls_x509_crl_parse_der+0xcc>
        mbedtls_x509_crl_free( crl );
 801fbf4:	4628      	mov	r0, r5
 801fbf6:	f7ff ff47 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801fbfa:	f5a4 5406 	sub.w	r4, r4, #8576	; 0x2180
 801fbfe:	e7e3      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
    end = p + len;
 801fc00:	e9dd 3704 	ldrd	r3, r7, [sp, #16]
 801fc04:	441f      	add	r7, r3
    crl->tbs.len = end - crl->tbs.p;
 801fc06:	696b      	ldr	r3, [r5, #20]
 801fc08:	1afb      	subs	r3, r7, r3
 801fc0a:	612b      	str	r3, [r5, #16]
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801fc0c:	f105 0218 	add.w	r2, r5, #24
 801fc10:	4639      	mov	r1, r7
 801fc12:	a805      	add	r0, sp, #20
 801fc14:	f7ee f97c 	bl	800df10 <mbedtls_asn1_get_int>
 801fc18:	b118      	cbz	r0, 801fc22 <mbedtls_x509_crl_parse_der+0xee>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fc1a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fc1e:	d112      	bne.n	801fc46 <mbedtls_x509_crl_parse_der+0x112>
            *ver = 0;
 801fc20:	61ac      	str	r4, [r5, #24]
        ( ret = mbedtls_x509_get_alg( &p, end, &crl->sig_oid, &sig_params1 ) ) != 0 )
 801fc22:	f105 081c 	add.w	r8, r5, #28
 801fc26:	ab09      	add	r3, sp, #36	; 0x24
 801fc28:	4642      	mov	r2, r8
 801fc2a:	4639      	mov	r1, r7
 801fc2c:	a805      	add	r0, sp, #20
 801fc2e:	f7ff fb16 	bl	801f25e <mbedtls_x509_get_alg>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801fc32:	4604      	mov	r4, r0
 801fc34:	b950      	cbnz	r0, 801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( crl->version < 0 || crl->version > 1 )
 801fc36:	69ab      	ldr	r3, [r5, #24]
 801fc38:	2b01      	cmp	r3, #1
 801fc3a:	d90b      	bls.n	801fc54 <mbedtls_x509_crl_parse_der+0x120>
        mbedtls_x509_crl_free( crl );
 801fc3c:	4628      	mov	r0, r5
 801fc3e:	f7ff ff23 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801fc42:	4c76      	ldr	r4, [pc, #472]	; (801fe1c <mbedtls_x509_crl_parse_der+0x2e8>)
 801fc44:	e7c0      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801fc46:	f5b0 5408 	subs.w	r4, r0, #8704	; 0x2200
 801fc4a:	d0ea      	beq.n	801fc22 <mbedtls_x509_crl_parse_der+0xee>
        mbedtls_x509_crl_free( crl );
 801fc4c:	4628      	mov	r0, r5
 801fc4e:	f7ff ff1b 	bl	801fa88 <mbedtls_x509_crl_free>
        return( ret );
 801fc52:	e7b9      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
    crl->version++;
 801fc54:	3301      	adds	r3, #1
 801fc56:	61ab      	str	r3, [r5, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crl->sig_oid, &sig_params1,
 801fc58:	f105 03ec 	add.w	r3, r5, #236	; 0xec
 801fc5c:	9300      	str	r3, [sp, #0]
 801fc5e:	f105 02e8 	add.w	r2, r5, #232	; 0xe8
 801fc62:	f105 03e9 	add.w	r3, r5, #233	; 0xe9
 801fc66:	a909      	add	r1, sp, #36	; 0x24
 801fc68:	4640      	mov	r0, r8
 801fc6a:	f7ff fd33 	bl	801f6d4 <mbedtls_x509_get_sig_alg>
 801fc6e:	b120      	cbz	r0, 801fc7a <mbedtls_x509_crl_parse_der+0x146>
        mbedtls_x509_crl_free( crl );
 801fc70:	4628      	mov	r0, r5
 801fc72:	f7ff ff09 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
 801fc76:	4c6a      	ldr	r4, [pc, #424]	; (801fe20 <mbedtls_x509_crl_parse_der+0x2ec>)
 801fc78:	e7a6      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
    crl->issuer_raw.p = p;
 801fc7a:	9b05      	ldr	r3, [sp, #20]
 801fc7c:	632b      	str	r3, [r5, #48]	; 0x30
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fc7e:	aa04      	add	r2, sp, #16
 801fc80:	2330      	movs	r3, #48	; 0x30
 801fc82:	4639      	mov	r1, r7
 801fc84:	a805      	add	r0, sp, #20
 801fc86:	f7ee f917 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fc8a:	4604      	mov	r4, r0
 801fc8c:	2800      	cmp	r0, #0
 801fc8e:	d1b1      	bne.n	801fbf4 <mbedtls_x509_crl_parse_der+0xc0>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crl->issuer ) ) != 0 )
 801fc90:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801fc94:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801fc98:	4419      	add	r1, r3
 801fc9a:	a805      	add	r0, sp, #20
 801fc9c:	f7ff fbce 	bl	801f43c <mbedtls_x509_get_name>
 801fca0:	4604      	mov	r4, r0
 801fca2:	2800      	cmp	r0, #0
 801fca4:	d1d2      	bne.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    crl->issuer_raw.len = p - crl->issuer_raw.p;
 801fca6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801fca8:	9b05      	ldr	r3, [sp, #20]
 801fcaa:	1a9b      	subs	r3, r3, r2
 801fcac:	62eb      	str	r3, [r5, #44]	; 0x2c
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->this_update ) ) != 0 )
 801fcae:	f105 0254 	add.w	r2, r5, #84	; 0x54
 801fcb2:	4639      	mov	r1, r7
 801fcb4:	a805      	add	r0, sp, #20
 801fcb6:	f7ff fc41 	bl	801f53c <mbedtls_x509_get_time>
 801fcba:	4604      	mov	r4, r0
 801fcbc:	2800      	cmp	r0, #0
 801fcbe:	d1c5      	bne.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->next_update ) ) != 0 )
 801fcc0:	f105 026c 	add.w	r2, r5, #108	; 0x6c
 801fcc4:	4639      	mov	r1, r7
 801fcc6:	a805      	add	r0, sp, #20
 801fcc8:	f7ff fc38 	bl	801f53c <mbedtls_x509_get_time>
 801fccc:	4604      	mov	r4, r0
 801fcce:	b128      	cbz	r0, 801fcdc <mbedtls_x509_crl_parse_der+0x1a8>
        if( ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
 801fcd0:	4b54      	ldr	r3, [pc, #336]	; (801fe24 <mbedtls_x509_crl_parse_der+0x2f0>)
 801fcd2:	4298      	cmp	r0, r3
 801fcd4:	d002      	beq.n	801fcdc <mbedtls_x509_crl_parse_der+0x1a8>
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) &&
 801fcd6:	3302      	adds	r3, #2
 801fcd8:	4298      	cmp	r0, r3
 801fcda:	d1b7      	bne.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( *p == end )
 801fcdc:	9b05      	ldr	r3, [sp, #20]
 801fcde:	429f      	cmp	r7, r3
 801fce0:	d116      	bne.n	801fd10 <mbedtls_x509_crl_parse_der+0x1dc>
    if( crl->version == 2 )
 801fce2:	69ab      	ldr	r3, [r5, #24]
 801fce4:	2b02      	cmp	r3, #2
 801fce6:	d10e      	bne.n	801fd06 <mbedtls_x509_crl_parse_der+0x1d2>
    size_t len = 0;
 801fce8:	2300      	movs	r3, #0
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801fcea:	f105 02c4 	add.w	r2, r5, #196	; 0xc4
 801fcee:	4639      	mov	r1, r7
 801fcf0:	a805      	add	r0, sp, #20
    size_t len = 0;
 801fcf2:	9308      	str	r3, [sp, #32]
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801fcf4:	f7ff fd38 	bl	801f768 <mbedtls_x509_get_ext>
 801fcf8:	4604      	mov	r4, r0
 801fcfa:	2800      	cmp	r0, #0
 801fcfc:	f000 80a6 	beq.w	801fe4c <mbedtls_x509_crl_parse_der+0x318>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fd00:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fd04:	d1a2      	bne.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( p != end )
 801fd06:	9b05      	ldr	r3, [sp, #20]
 801fd08:	42bb      	cmp	r3, r7
 801fd0a:	f000 80a3 	beq.w	801fe54 <mbedtls_x509_crl_parse_der+0x320>
 801fd0e:	e764      	b.n	801fbda <mbedtls_x509_crl_parse_der+0xa6>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &entry_len,
 801fd10:	2330      	movs	r3, #48	; 0x30
 801fd12:	aa06      	add	r2, sp, #24
 801fd14:	4639      	mov	r1, r7
 801fd16:	a805      	add	r0, sp, #20
 801fd18:	f7ee f8ce 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fd1c:	4604      	mov	r4, r0
 801fd1e:	b118      	cbz	r0, 801fd28 <mbedtls_x509_crl_parse_der+0x1f4>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fd20:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fd24:	d192      	bne.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
 801fd26:	e7dc      	b.n	801fce2 <mbedtls_x509_crl_parse_der+0x1ae>
    end = *p + entry_len;
 801fd28:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    if( ( ret = x509_get_entries( &p, end, &crl->entry ) ) != 0 )
 801fd2c:	f105 0884 	add.w	r8, r5, #132	; 0x84
    end = *p + entry_len;
 801fd30:	eb02 0903 	add.w	r9, r2, r3
    while( *p < end )
 801fd34:	9b05      	ldr	r3, [sp, #20]
 801fd36:	4599      	cmp	r9, r3
 801fd38:	d9d3      	bls.n	801fce2 <mbedtls_x509_crl_parse_der+0x1ae>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len2,
 801fd3a:	2330      	movs	r3, #48	; 0x30
 801fd3c:	aa07      	add	r2, sp, #28
 801fd3e:	4649      	mov	r1, r9
 801fd40:	a805      	add	r0, sp, #20
 801fd42:	f7ee f8b9 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fd46:	4604      	mov	r4, r0
 801fd48:	2800      	cmp	r0, #0
 801fd4a:	f47f af7f 	bne.w	801fc4c <mbedtls_x509_crl_parse_der+0x118>
        cur_entry->raw.tag = **p;
 801fd4e:	9905      	ldr	r1, [sp, #20]
 801fd50:	780b      	ldrb	r3, [r1, #0]
 801fd52:	f8c8 3000 	str.w	r3, [r8]
        cur_entry->raw.len = len2;
 801fd56:	9b07      	ldr	r3, [sp, #28]
        cur_entry->raw.p = *p;
 801fd58:	f8c8 1008 	str.w	r1, [r8, #8]
        cur_entry->raw.len = len2;
 801fd5c:	f8c8 3004 	str.w	r3, [r8, #4]
        end2 = *p + len2;
 801fd60:	4419      	add	r1, r3
        if( ( ret = mbedtls_x509_get_serial( p, end2, &cur_entry->serial ) ) != 0 )
 801fd62:	f108 020c 	add.w	r2, r8, #12
 801fd66:	a805      	add	r0, sp, #20
 801fd68:	9103      	str	r1, [sp, #12]
 801fd6a:	f7ff fa4b 	bl	801f204 <mbedtls_x509_get_serial>
 801fd6e:	4604      	mov	r4, r0
 801fd70:	2800      	cmp	r0, #0
 801fd72:	f47f af6b 	bne.w	801fc4c <mbedtls_x509_crl_parse_der+0x118>
        if( ( ret = mbedtls_x509_get_time( p, end2,
 801fd76:	9903      	ldr	r1, [sp, #12]
 801fd78:	f108 0218 	add.w	r2, r8, #24
 801fd7c:	a805      	add	r0, sp, #20
 801fd7e:	f7ff fbdd 	bl	801f53c <mbedtls_x509_get_time>
 801fd82:	4604      	mov	r4, r0
 801fd84:	2800      	cmp	r0, #0
 801fd86:	f47f af61 	bne.w	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( end <= *p )
 801fd8a:	9b05      	ldr	r3, [sp, #20]
 801fd8c:	9903      	ldr	r1, [sp, #12]
    size_t len = 0;
 801fd8e:	9008      	str	r0, [sp, #32]
    if( end <= *p )
 801fd90:	4299      	cmp	r1, r3
 801fd92:	d910      	bls.n	801fdb6 <mbedtls_x509_crl_parse_der+0x282>
    ext->tag = **p;
 801fd94:	781a      	ldrb	r2, [r3, #0]
 801fd96:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
    ext->p = *p;
 801fd9a:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801fd9e:	f108 0234 	add.w	r2, r8, #52	; 0x34
 801fda2:	2330      	movs	r3, #48	; 0x30
 801fda4:	a805      	add	r0, sp, #20
 801fda6:	f7ee f887 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fdaa:	b180      	cbz	r0, 801fdce <mbedtls_x509_crl_parse_der+0x29a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fdac:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fdb0:	d11f      	bne.n	801fdf2 <mbedtls_x509_crl_parse_der+0x2be>
            ext->p = NULL;
 801fdb2:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
        if( *p < end )
 801fdb6:	9b05      	ldr	r3, [sp, #20]
 801fdb8:	4599      	cmp	r9, r3
 801fdba:	d9bb      	bls.n	801fd34 <mbedtls_x509_crl_parse_der+0x200>
            cur_entry->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl_entry ) );
 801fdbc:	6833      	ldr	r3, [r6, #0]
 801fdbe:	2140      	movs	r1, #64	; 0x40
 801fdc0:	2001      	movs	r0, #1
 801fdc2:	4798      	blx	r3
 801fdc4:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            if( cur_entry->next == NULL )
 801fdc8:	b1e8      	cbz	r0, 801fe06 <mbedtls_x509_crl_parse_der+0x2d2>
 801fdca:	4680      	mov	r8, r0
 801fdcc:	e7b2      	b.n	801fd34 <mbedtls_x509_crl_parse_der+0x200>
    end = *p + ext->len;
 801fdce:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 801fdd2:	9b05      	ldr	r3, [sp, #20]
 801fdd4:	eb03 0a01 	add.w	sl, r3, r1
    while( *p < end )
 801fdd8:	9b05      	ldr	r3, [sp, #20]
 801fdda:	459a      	cmp	sl, r3
 801fddc:	d802      	bhi.n	801fde4 <mbedtls_x509_crl_parse_der+0x2b0>
    if( *p != end )
 801fdde:	d0ea      	beq.n	801fdb6 <mbedtls_x509_crl_parse_der+0x282>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801fde0:	4c11      	ldr	r4, [pc, #68]	; (801fe28 <mbedtls_x509_crl_parse_der+0x2f4>)
            mbedtls_x509_crl_free( crl );
 801fde2:	e733      	b.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801fde4:	2330      	movs	r3, #48	; 0x30
 801fde6:	aa08      	add	r2, sp, #32
 801fde8:	4651      	mov	r1, sl
 801fdea:	a805      	add	r0, sp, #20
 801fdec:	f7ee f864 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fdf0:	b120      	cbz	r0, 801fdfc <mbedtls_x509_crl_parse_der+0x2c8>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801fdf2:	f5a0 5414 	sub.w	r4, r0, #9472	; 0x2500
        if( ( ret = x509_get_crl_entry_ext( p, end2,
 801fdf6:	2c00      	cmp	r4, #0
 801fdf8:	d0dd      	beq.n	801fdb6 <mbedtls_x509_crl_parse_der+0x282>
 801fdfa:	e727      	b.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
        *p += len;
 801fdfc:	9b05      	ldr	r3, [sp, #20]
 801fdfe:	9a08      	ldr	r2, [sp, #32]
 801fe00:	4413      	add	r3, r2
 801fe02:	9305      	str	r3, [sp, #20]
 801fe04:	e7e8      	b.n	801fdd8 <mbedtls_x509_crl_parse_der+0x2a4>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801fe06:	4c02      	ldr	r4, [pc, #8]	; (801fe10 <mbedtls_x509_crl_parse_der+0x2dc>)
 801fe08:	e720      	b.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
 801fe0a:	bf00      	nop
 801fe0c:	20000538 	.word	0x20000538
 801fe10:	ffffd780 	.word	0xffffd780
 801fe14:	ffffde80 	.word	0xffffde80
 801fe18:	ffffde1a 	.word	0xffffde1a
 801fe1c:	ffffda80 	.word	0xffffda80
 801fe20:	ffffda00 	.word	0xffffda00
 801fe24:	ffffdb9e 	.word	0xffffdb9e
 801fe28:	ffffda9a 	.word	0xffffda9a
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801fe2c:	2330      	movs	r3, #48	; 0x30
 801fe2e:	aa08      	add	r2, sp, #32
 801fe30:	4639      	mov	r1, r7
 801fe32:	a805      	add	r0, sp, #20
 801fe34:	f7ee f840 	bl	800deb8 <mbedtls_asn1_get_tag>
 801fe38:	b120      	cbz	r0, 801fe44 <mbedtls_x509_crl_parse_der+0x310>
        if( ret != 0 )
 801fe3a:	f5b0 5414 	subs.w	r4, r0, #9472	; 0x2500
 801fe3e:	f43f af62 	beq.w	801fd06 <mbedtls_x509_crl_parse_der+0x1d2>
 801fe42:	e703      	b.n	801fc4c <mbedtls_x509_crl_parse_der+0x118>
        *p += len;
 801fe44:	9b05      	ldr	r3, [sp, #20]
 801fe46:	9a08      	ldr	r2, [sp, #32]
 801fe48:	4413      	add	r3, r2
 801fe4a:	9305      	str	r3, [sp, #20]
    while( *p < end )
 801fe4c:	9b05      	ldr	r3, [sp, #20]
 801fe4e:	429f      	cmp	r7, r3
 801fe50:	d8ec      	bhi.n	801fe2c <mbedtls_x509_crl_parse_der+0x2f8>
    if( *p != end )
 801fe52:	d1c5      	bne.n	801fde0 <mbedtls_x509_crl_parse_der+0x2ac>
    end = crl->raw.p + crl->raw.len;
 801fe54:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 801fe58:	441e      	add	r6, r3
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 801fe5a:	aa0f      	add	r2, sp, #60	; 0x3c
 801fe5c:	ab0c      	add	r3, sp, #48	; 0x30
 801fe5e:	4631      	mov	r1, r6
 801fe60:	a805      	add	r0, sp, #20
 801fe62:	f7ff f9fc 	bl	801f25e <mbedtls_x509_get_alg>
 801fe66:	4604      	mov	r4, r0
 801fe68:	2800      	cmp	r0, #0
 801fe6a:	f47f aeef 	bne.w	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( crl->sig_oid.len != sig_oid2.len ||
 801fe6e:	6a2a      	ldr	r2, [r5, #32]
 801fe70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe72:	429a      	cmp	r2, r3
 801fe74:	d10e      	bne.n	801fe94 <mbedtls_x509_crl_parse_der+0x360>
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 801fe76:	9911      	ldr	r1, [sp, #68]	; 0x44
 801fe78:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801fe7a:	f002 f987 	bl	802218c <memcmp>
    if( crl->sig_oid.len != sig_oid2.len ||
 801fe7e:	b948      	cbnz	r0, 801fe94 <mbedtls_x509_crl_parse_der+0x360>
        sig_params1.len != sig_params2.len ||
 801fe80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 801fe82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fe84:	429a      	cmp	r2, r3
 801fe86:	d105      	bne.n	801fe94 <mbedtls_x509_crl_parse_der+0x360>
        sig_params1.len != sig_params2.len ||
 801fe88:	b14a      	cbz	r2, 801fe9e <mbedtls_x509_crl_parse_der+0x36a>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 801fe8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fe8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fe8e:	f002 f97d 	bl	802218c <memcmp>
        ( sig_params1.len != 0 &&
 801fe92:	b120      	cbz	r0, 801fe9e <mbedtls_x509_crl_parse_der+0x36a>
        mbedtls_x509_crl_free( crl );
 801fe94:	4628      	mov	r0, r5
 801fe96:	f7ff fdf7 	bl	801fa88 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 801fe9a:	4c09      	ldr	r4, [pc, #36]	; (801fec0 <mbedtls_x509_crl_parse_der+0x38c>)
 801fe9c:	e694      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crl->sig ) ) != 0 )
 801fe9e:	f105 02dc 	add.w	r2, r5, #220	; 0xdc
 801fea2:	4631      	mov	r1, r6
 801fea4:	a805      	add	r0, sp, #20
 801fea6:	f7ff fbf7 	bl	801f698 <mbedtls_x509_get_sig>
 801feaa:	4604      	mov	r4, r0
 801feac:	2800      	cmp	r0, #0
 801feae:	f47f aecd 	bne.w	801fc4c <mbedtls_x509_crl_parse_der+0x118>
    if( p != end )
 801feb2:	9b05      	ldr	r3, [sp, #20]
 801feb4:	42b3      	cmp	r3, r6
 801feb6:	f43f ae87 	beq.w	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
 801feba:	e68e      	b.n	801fbda <mbedtls_x509_crl_parse_der+0xa6>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801febc:	4c01      	ldr	r4, [pc, #4]	; (801fec4 <mbedtls_x509_crl_parse_der+0x390>)
 801febe:	e683      	b.n	801fbc8 <mbedtls_x509_crl_parse_der+0x94>
 801fec0:	ffffd980 	.word	0xffffd980
 801fec4:	ffffd800 	.word	0xffffd800

0801fec8 <mbedtls_x509_crl_parse>:
{
 801fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fecc:	460d      	mov	r5, r1
 801fece:	b089      	sub	sp, #36	; 0x24
 801fed0:	4616      	mov	r6, r2
    if( chain == NULL || buf == NULL )
 801fed2:	4607      	mov	r7, r0
 801fed4:	2800      	cmp	r0, #0
 801fed6:	d03f      	beq.n	801ff58 <mbedtls_x509_crl_parse+0x90>
 801fed8:	2900      	cmp	r1, #0
 801feda:	d03d      	beq.n	801ff58 <mbedtls_x509_crl_parse+0x90>
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 801fedc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801ff70 <mbedtls_x509_crl_parse+0xa8>
            ret = mbedtls_pem_read_buffer( &pem,
 801fee0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801ff74 <mbedtls_x509_crl_parse+0xac>
 801fee4:	f8df a090 	ldr.w	sl, [pc, #144]	; 801ff78 <mbedtls_x509_crl_parse+0xb0>
    int is_pem = 0;
 801fee8:	f04f 0b00 	mov.w	fp, #0
        mbedtls_pem_init( &pem );
 801feec:	a805      	add	r0, sp, #20
 801feee:	f7f5 fb26 	bl	801553e <mbedtls_pem_init>
        if( buflen == 0 || buf[buflen - 1] != '\0' )
 801fef2:	b306      	cbz	r6, 801ff36 <mbedtls_x509_crl_parse+0x6e>
 801fef4:	19ab      	adds	r3, r5, r6
 801fef6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801fefa:	b9e3      	cbnz	r3, 801ff36 <mbedtls_x509_crl_parse+0x6e>
            ret = mbedtls_pem_read_buffer( &pem,
 801fefc:	aa04      	add	r2, sp, #16
 801fefe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801ff02:	9300      	str	r3, [sp, #0]
 801ff04:	464a      	mov	r2, r9
 801ff06:	462b      	mov	r3, r5
 801ff08:	4651      	mov	r1, sl
 801ff0a:	a805      	add	r0, sp, #20
 801ff0c:	f7f5 fb1c 	bl	8015548 <mbedtls_pem_read_buffer>
        if( ret == 0 )
 801ff10:	4604      	mov	r4, r0
 801ff12:	b988      	cbnz	r0, 801ff38 <mbedtls_x509_crl_parse+0x70>
            buflen -= use_len;
 801ff14:	9b04      	ldr	r3, [sp, #16]
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 801ff16:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801ff1a:	4638      	mov	r0, r7
            buflen -= use_len;
 801ff1c:	1af6      	subs	r6, r6, r3
            buf += use_len;
 801ff1e:	441d      	add	r5, r3
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 801ff20:	f7ff fe08 	bl	801fb34 <mbedtls_x509_crl_parse_der>
 801ff24:	4604      	mov	r4, r0
 801ff26:	b1a0      	cbz	r0, 801ff52 <mbedtls_x509_crl_parse+0x8a>
            mbedtls_pem_free( &pem );
 801ff28:	a805      	add	r0, sp, #20
 801ff2a:	f7f5 fc69 	bl	8015800 <mbedtls_pem_free>
}
 801ff2e:	4620      	mov	r0, r4
 801ff30:	b009      	add	sp, #36	; 0x24
 801ff32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 801ff36:	4644      	mov	r4, r8
        else if( is_pem )
 801ff38:	f1bb 0f00 	cmp.w	fp, #0
 801ff3c:	d1f4      	bne.n	801ff28 <mbedtls_x509_crl_parse+0x60>
        mbedtls_pem_free( &pem );
 801ff3e:	a805      	add	r0, sp, #20
 801ff40:	f7f5 fc5e 	bl	8015800 <mbedtls_pem_free>
    while( is_pem && buflen > 1 );
 801ff44:	f1bb 0f00 	cmp.w	fp, #0
 801ff48:	d008      	beq.n	801ff5c <mbedtls_x509_crl_parse+0x94>
 801ff4a:	2e01      	cmp	r6, #1
 801ff4c:	d8ce      	bhi.n	801feec <mbedtls_x509_crl_parse+0x24>
        return( 0 );
 801ff4e:	2400      	movs	r4, #0
 801ff50:	e7ed      	b.n	801ff2e <mbedtls_x509_crl_parse+0x66>
            is_pem = 1;
 801ff52:	f04f 0b01 	mov.w	fp, #1
 801ff56:	e7f2      	b.n	801ff3e <mbedtls_x509_crl_parse+0x76>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801ff58:	4c04      	ldr	r4, [pc, #16]	; (801ff6c <mbedtls_x509_crl_parse+0xa4>)
 801ff5a:	e7e8      	b.n	801ff2e <mbedtls_x509_crl_parse+0x66>
        return( mbedtls_x509_crl_parse_der( chain, buf, buflen ) );
 801ff5c:	4632      	mov	r2, r6
 801ff5e:	4629      	mov	r1, r5
 801ff60:	4638      	mov	r0, r7
 801ff62:	f7ff fde7 	bl	801fb34 <mbedtls_x509_crl_parse_der>
 801ff66:	4604      	mov	r4, r0
 801ff68:	e7e1      	b.n	801ff2e <mbedtls_x509_crl_parse+0x66>
 801ff6a:	bf00      	nop
 801ff6c:	ffffd800 	.word	0xffffd800
 801ff70:	ffffef80 	.word	0xffffef80
 801ff74:	08032dbd 	.word	0x08032dbd
 801ff78:	08032dd4 	.word	0x08032dd4

0801ff7c <mbedtls_zeroize>:
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801ff7c:	4401      	add	r1, r0
 801ff7e:	2300      	movs	r3, #0
 801ff80:	4288      	cmp	r0, r1
 801ff82:	d100      	bne.n	801ff86 <mbedtls_zeroize+0xa>
}
 801ff84:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801ff86:	f800 3b01 	strb.w	r3, [r0], #1
 801ff8a:	e7f9      	b.n	801ff80 <mbedtls_zeroize+0x4>

0801ff8c <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 801ff8c:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 801ff8e:	2400      	movs	r4, #0
 801ff90:	4294      	cmp	r4, r2
 801ff92:	d101      	bne.n	801ff98 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 801ff94:	2000      	movs	r0, #0
}
 801ff96:	bd70      	pop	{r4, r5, r6, pc}
        diff = n1[i] ^ n2[i];
 801ff98:	5d03      	ldrb	r3, [r0, r4]
 801ff9a:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 801ff9c:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
 801ff9e:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
 801ffa2:	d006      	beq.n	801ffb2 <x509_memcasecmp+0x26>
        if( diff == 32 &&
 801ffa4:	2e20      	cmp	r6, #32
 801ffa6:	d106      	bne.n	801ffb6 <x509_memcasecmp+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 801ffa8:	f023 0320 	bic.w	r3, r3, #32
 801ffac:	3b41      	subs	r3, #65	; 0x41
 801ffae:	2b19      	cmp	r3, #25
 801ffb0:	d801      	bhi.n	801ffb6 <x509_memcasecmp+0x2a>
    for( i = 0; i < len; i++ )
 801ffb2:	3401      	adds	r4, #1
 801ffb4:	e7ec      	b.n	801ff90 <x509_memcasecmp+0x4>
        return( -1 );
 801ffb6:	f04f 30ff 	mov.w	r0, #4294967295
 801ffba:	e7ec      	b.n	801ff96 <x509_memcasecmp+0xa>

0801ffbc <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 801ffbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffbe:	4605      	mov	r5, r0
 801ffc0:	460c      	mov	r4, r1
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 801ffc2:	682a      	ldr	r2, [r5, #0]
 801ffc4:	6823      	ldr	r3, [r4, #0]
 801ffc6:	429a      	cmp	r2, r3
 801ffc8:	d134      	bne.n	8020034 <x509_name_cmp+0x78>
            a->oid.len != b->oid.len ||
 801ffca:	6863      	ldr	r3, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
 801ffcc:	686a      	ldr	r2, [r5, #4]
 801ffce:	429a      	cmp	r2, r3
 801ffd0:	d130      	bne.n	8020034 <x509_name_cmp+0x78>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 801ffd2:	68a1      	ldr	r1, [r4, #8]
 801ffd4:	68a8      	ldr	r0, [r5, #8]
 801ffd6:	f002 f8d9 	bl	802218c <memcmp>
            a->oid.len != b->oid.len ||
 801ffda:	bb58      	cbnz	r0, 8020034 <x509_name_cmp+0x78>
    if( a->tag == b->tag &&
 801ffdc:	68ef      	ldr	r7, [r5, #12]
 801ffde:	68e6      	ldr	r6, [r4, #12]
 801ffe0:	42b7      	cmp	r7, r6
 801ffe2:	d108      	bne.n	801fff6 <x509_name_cmp+0x3a>
        a->len == b->len &&
 801ffe4:	6923      	ldr	r3, [r4, #16]
    if( a->tag == b->tag &&
 801ffe6:	692a      	ldr	r2, [r5, #16]
 801ffe8:	429a      	cmp	r2, r3
 801ffea:	d104      	bne.n	801fff6 <x509_name_cmp+0x3a>
        memcmp( a->p, b->p, b->len ) == 0 )
 801ffec:	6961      	ldr	r1, [r4, #20]
 801ffee:	6968      	ldr	r0, [r5, #20]
 801fff0:	f002 f8cc 	bl	802218c <memcmp>
        a->len == b->len &&
 801fff4:	b180      	cbz	r0, 8020018 <x509_name_cmp+0x5c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 801fff6:	2f0c      	cmp	r7, #12
 801fff8:	d001      	beq.n	801fffe <x509_name_cmp+0x42>
 801fffa:	2f13      	cmp	r7, #19
 801fffc:	d11a      	bne.n	8020034 <x509_name_cmp+0x78>
 801fffe:	2e0c      	cmp	r6, #12
 8020000:	d001      	beq.n	8020006 <x509_name_cmp+0x4a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020002:	2e13      	cmp	r6, #19
 8020004:	d116      	bne.n	8020034 <x509_name_cmp+0x78>
        a->len == b->len &&
 8020006:	6923      	ldr	r3, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020008:	692a      	ldr	r2, [r5, #16]
 802000a:	429a      	cmp	r2, r3
 802000c:	d112      	bne.n	8020034 <x509_name_cmp+0x78>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 802000e:	6961      	ldr	r1, [r4, #20]
 8020010:	6968      	ldr	r0, [r5, #20]
 8020012:	f7ff ffbb 	bl	801ff8c <x509_memcasecmp>
        a->len == b->len &&
 8020016:	b968      	cbnz	r0, 8020034 <x509_name_cmp+0x78>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 8020018:	7f2a      	ldrb	r2, [r5, #28]
 802001a:	7f23      	ldrb	r3, [r4, #28]
 802001c:	429a      	cmp	r2, r3
 802001e:	d109      	bne.n	8020034 <x509_name_cmp+0x78>
            return( -1 );

        a = a->next;
 8020020:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8020022:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
 8020024:	b925      	cbnz	r5, 8020030 <x509_name_cmp+0x74>
 8020026:	1e20      	subs	r0, r4, #0
 8020028:	bf18      	it	ne
 802002a:	2001      	movne	r0, #1
 802002c:	4240      	negs	r0, r0
    }

    /* a == NULL == b */
    return( 0 );
}
 802002e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( a == NULL || b == NULL )
 8020030:	2c00      	cmp	r4, #0
 8020032:	d1c6      	bne.n	801ffc2 <x509_name_cmp+0x6>
            return( -1 );
 8020034:	f04f 30ff 	mov.w	r0, #4294967295
 8020038:	e7f9      	b.n	802002e <x509_name_cmp+0x72>

0802003a <x509_check_wildcard>:
{
 802003a:	b570      	push	{r4, r5, r6, lr}
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 802003c:	684d      	ldr	r5, [r1, #4]
 802003e:	2d02      	cmp	r5, #2
{
 8020040:	4604      	mov	r4, r0
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8020042:	d924      	bls.n	802008e <x509_check_wildcard+0x54>
 8020044:	688e      	ldr	r6, [r1, #8]
 8020046:	7833      	ldrb	r3, [r6, #0]
 8020048:	2b2a      	cmp	r3, #42	; 0x2a
 802004a:	d120      	bne.n	802008e <x509_check_wildcard+0x54>
 802004c:	7873      	ldrb	r3, [r6, #1]
 802004e:	2b2e      	cmp	r3, #46	; 0x2e
 8020050:	d11d      	bne.n	802008e <x509_check_wildcard+0x54>
    size_t cn_idx = 0, cn_len = strlen( cn );
 8020052:	f7e0 f8c7 	bl	80001e4 <strlen>
 8020056:	4623      	mov	r3, r4
    for( i = 0; i < cn_len; ++i )
 8020058:	2200      	movs	r2, #0
 802005a:	4282      	cmp	r2, r0
 802005c:	d102      	bne.n	8020064 <x509_check_wildcard+0x2a>
        return( -1 );
 802005e:	f04f 30ff 	mov.w	r0, #4294967295
 8020062:	e013      	b.n	802008c <x509_check_wildcard+0x52>
        if( cn[i] == '.' )
 8020064:	4619      	mov	r1, r3
 8020066:	3301      	adds	r3, #1
 8020068:	780c      	ldrb	r4, [r1, #0]
 802006a:	2c2e      	cmp	r4, #46	; 0x2e
 802006c:	d001      	beq.n	8020072 <x509_check_wildcard+0x38>
    for( i = 0; i < cn_len; ++i )
 802006e:	3201      	adds	r2, #1
 8020070:	e7f3      	b.n	802005a <x509_check_wildcard+0x20>
    if( cn_idx == 0 )
 8020072:	2a00      	cmp	r2, #0
 8020074:	d0f3      	beq.n	802005e <x509_check_wildcard+0x24>
    if( cn_len - cn_idx == name->len - 1 &&
 8020076:	3d01      	subs	r5, #1
 8020078:	1a82      	subs	r2, r0, r2
 802007a:	42aa      	cmp	r2, r5
 802007c:	d1ef      	bne.n	802005e <x509_check_wildcard+0x24>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 802007e:	1c70      	adds	r0, r6, #1
 8020080:	f7ff ff84 	bl	801ff8c <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 8020084:	3800      	subs	r0, #0
 8020086:	bf18      	it	ne
 8020088:	2001      	movne	r0, #1
 802008a:	4240      	negs	r0, r0
}
 802008c:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 802008e:	2000      	movs	r0, #0
 8020090:	e7fc      	b.n	802008c <x509_check_wildcard+0x52>

08020092 <x509_profile_check_key>:
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 8020092:	2901      	cmp	r1, #1
{
 8020094:	b510      	push	{r4, lr}
 8020096:	4604      	mov	r4, r0
 8020098:	4610      	mov	r0, r2
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 802009a:	d001      	beq.n	80200a0 <x509_profile_check_key+0xe>
 802009c:	2906      	cmp	r1, #6
 802009e:	d108      	bne.n	80200b2 <x509_profile_check_key+0x20>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80200a0:	f7f5 fc74 	bl	801598c <mbedtls_pk_get_bitlen>
 80200a4:	68e3      	ldr	r3, [r4, #12]
 80200a6:	4298      	cmp	r0, r3
 80200a8:	f04f 30ff 	mov.w	r0, #4294967295
 80200ac:	bf28      	it	cs
 80200ae:	2000      	movcs	r0, #0
}
 80200b0:	bd10      	pop	{r4, pc}
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 80200b2:	3902      	subs	r1, #2
 80200b4:	2902      	cmp	r1, #2
 80200b6:	d80b      	bhi.n	80200d0 <x509_profile_check_key+0x3e>
        mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 80200b8:	6853      	ldr	r3, [r2, #4]
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 80200ba:	781b      	ldrb	r3, [r3, #0]
 80200bc:	1e5a      	subs	r2, r3, #1
 80200be:	2301      	movs	r3, #1
 80200c0:	4093      	lsls	r3, r2
 80200c2:	68a2      	ldr	r2, [r4, #8]
 80200c4:	4213      	tst	r3, r2
 80200c6:	bf0c      	ite	eq
 80200c8:	f04f 30ff 	moveq.w	r0, #4294967295
 80200cc:	2000      	movne	r0, #0
 80200ce:	e7ef      	b.n	80200b0 <x509_profile_check_key+0x1e>
    return( -1 );
 80200d0:	f04f 30ff 	mov.w	r0, #4294967295
 80200d4:	e7ec      	b.n	80200b0 <x509_profile_check_key+0x1e>
	...

080200d8 <mbedtls_x509_crt_info>:
{
 80200d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200dc:	4680      	mov	r8, r0
 80200de:	b08d      	sub	sp, #52	; 0x34
 80200e0:	468a      	mov	sl, r1
 80200e2:	4691      	mov	r9, r2
    if( NULL == crt )
 80200e4:	461f      	mov	r7, r3
 80200e6:	b95b      	cbnz	r3, 8020100 <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 80200e8:	4a9a      	ldr	r2, [pc, #616]	; (8020354 <mbedtls_x509_crt_info+0x27c>)
 80200ea:	f003 fa73 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80200ee:	2800      	cmp	r0, #0
 80200f0:	da01      	bge.n	80200f6 <mbedtls_x509_crt_info+0x1e>
 80200f2:	4899      	ldr	r0, [pc, #612]	; (8020358 <mbedtls_x509_crt_info+0x280>)
 80200f4:	e001      	b.n	80200fa <mbedtls_x509_crt_info+0x22>
 80200f6:	4550      	cmp	r0, sl
 80200f8:	d2fb      	bcs.n	80200f2 <mbedtls_x509_crt_info+0x1a>
}
 80200fa:	b00d      	add	sp, #52	; 0x34
 80200fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 8020100:	699b      	ldr	r3, [r3, #24]
 8020102:	9300      	str	r3, [sp, #0]
 8020104:	4613      	mov	r3, r2
 8020106:	4a95      	ldr	r2, [pc, #596]	; (802035c <mbedtls_x509_crt_info+0x284>)
 8020108:	f003 fa64 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802010c:	2800      	cmp	r0, #0
 802010e:	dbf0      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020110:	4550      	cmp	r0, sl
 8020112:	d2ee      	bcs.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020114:	ebaa 0500 	sub.w	r5, sl, r0
 8020118:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 802011a:	4a91      	ldr	r2, [pc, #580]	; (8020360 <mbedtls_x509_crt_info+0x288>)
 802011c:	464b      	mov	r3, r9
 802011e:	4629      	mov	r1, r5
 8020120:	4640      	mov	r0, r8
 8020122:	f003 fa57 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020126:	2800      	cmp	r0, #0
 8020128:	dbe3      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 802012a:	4285      	cmp	r5, r0
 802012c:	d9e1      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 802012e:	1a2d      	subs	r5, r5, r0
 8020130:	4480      	add	r8, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8020132:	f107 021c 	add.w	r2, r7, #28
 8020136:	4629      	mov	r1, r5
 8020138:	4640      	mov	r0, r8
 802013a:	f7ff fbc1 	bl	801f8c0 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802013e:	2800      	cmp	r0, #0
 8020140:	dbd7      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020142:	4285      	cmp	r5, r0
 8020144:	d9d5      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020146:	1a2d      	subs	r5, r5, r0
 8020148:	eb08 0600 	add.w	r6, r8, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 802014c:	4a85      	ldr	r2, [pc, #532]	; (8020364 <mbedtls_x509_crt_info+0x28c>)
 802014e:	464b      	mov	r3, r9
 8020150:	4629      	mov	r1, r5
 8020152:	4630      	mov	r0, r6
 8020154:	f003 fa3e 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020158:	2800      	cmp	r0, #0
 802015a:	dbca      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 802015c:	4285      	cmp	r5, r0
 802015e:	d9c8      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020160:	1a2d      	subs	r5, r5, r0
 8020162:	4406      	add	r6, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 8020164:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8020168:	4629      	mov	r1, r5
 802016a:	4630      	mov	r0, r6
 802016c:	f7ff fb26 	bl	801f7bc <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020170:	2800      	cmp	r0, #0
 8020172:	dbbe      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020174:	4285      	cmp	r5, r0
 8020176:	d9bc      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020178:	1a2d      	subs	r5, r5, r0
 802017a:	1834      	adds	r4, r6, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 802017c:	4a7a      	ldr	r2, [pc, #488]	; (8020368 <mbedtls_x509_crt_info+0x290>)
 802017e:	464b      	mov	r3, r9
 8020180:	4629      	mov	r1, r5
 8020182:	4620      	mov	r0, r4
 8020184:	f003 fa26 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020188:	2800      	cmp	r0, #0
 802018a:	dbb2      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 802018c:	4285      	cmp	r5, r0
 802018e:	d9b0      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020190:	1a2d      	subs	r5, r5, r0
 8020192:	4404      	add	r4, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 8020194:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8020198:	4629      	mov	r1, r5
 802019a:	4620      	mov	r0, r4
 802019c:	f7ff fb0e 	bl	801f7bc <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80201a0:	2800      	cmp	r0, #0
 80201a2:	dba6      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 80201a4:	4285      	cmp	r5, r0
 80201a6:	d9a4      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80201a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80201ac:	9305      	str	r3, [sp, #20]
 80201ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80201b2:	9304      	str	r3, [sp, #16]
 80201b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80201b8:	9303      	str	r3, [sp, #12]
 80201ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80201be:	9302      	str	r3, [sp, #8]
 80201c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80201c4:	9301      	str	r3, [sp, #4]
 80201c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80201ca:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 80201cc:	1a2d      	subs	r5, r5, r0
 80201ce:	4404      	add	r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80201d0:	4a66      	ldr	r2, [pc, #408]	; (802036c <mbedtls_x509_crt_info+0x294>)
 80201d2:	464b      	mov	r3, r9
 80201d4:	4629      	mov	r1, r5
 80201d6:	4620      	mov	r0, r4
 80201d8:	f003 f9fc 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80201dc:	2800      	cmp	r0, #0
 80201de:	db88      	blt.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 80201e0:	4285      	cmp	r5, r0
 80201e2:	d986      	bls.n	80200f2 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 80201e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80201e8:	9305      	str	r3, [sp, #20]
 80201ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80201ee:	9304      	str	r3, [sp, #16]
 80201f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80201f4:	9303      	str	r3, [sp, #12]
 80201f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80201fa:	9302      	str	r3, [sp, #8]
 80201fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8020200:	9301      	str	r3, [sp, #4]
 8020202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020206:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020208:	1a2d      	subs	r5, r5, r0
 802020a:	eb04 0800 	add.w	r8, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 802020e:	4a58      	ldr	r2, [pc, #352]	; (8020370 <mbedtls_x509_crt_info+0x298>)
 8020210:	464b      	mov	r3, r9
 8020212:	4629      	mov	r1, r5
 8020214:	4640      	mov	r0, r8
 8020216:	f003 f9dd 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802021a:	2800      	cmp	r0, #0
 802021c:	f6ff af69 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020220:	4285      	cmp	r5, r0
 8020222:	f67f af66 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020226:	1a2d      	subs	r5, r5, r0
 8020228:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 802022a:	4a52      	ldr	r2, [pc, #328]	; (8020374 <mbedtls_x509_crt_info+0x29c>)
 802022c:	464b      	mov	r3, r9
 802022e:	4629      	mov	r1, r5
 8020230:	4640      	mov	r0, r8
 8020232:	f003 f9cf 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020236:	2800      	cmp	r0, #0
 8020238:	f6ff af5b 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802023c:	4285      	cmp	r5, r0
 802023e:	f67f af58 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 8020242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020246:	9301      	str	r3, [sp, #4]
 8020248:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 802024c:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 802024e:	1a2d      	subs	r5, r5, r0
 8020250:	4480      	add	r8, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 8020252:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8020256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802025a:	4629      	mov	r1, r5
 802025c:	4640      	mov	r0, r8
 802025e:	f7ff fb7d 	bl	801f95c <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020262:	1e06      	subs	r6, r0, #0
 8020264:	f6ff af45 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020268:	42b5      	cmp	r5, r6
 802026a:	f67f af42 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 802026e:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 8020272:	4620      	mov	r0, r4
 8020274:	f7f5 fbfe 	bl	8015a74 <mbedtls_pk_get_name>
 8020278:	f10d 0b1c 	add.w	fp, sp, #28
 802027c:	4602      	mov	r2, r0
 802027e:	2112      	movs	r1, #18
 8020280:	4658      	mov	r0, fp
 8020282:	f7ff fbc9 	bl	801fa18 <mbedtls_x509_key_size_helper>
 8020286:	2800      	cmp	r0, #0
 8020288:	f47f af37 	bne.w	80200fa <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 802028c:	4620      	mov	r0, r4
 802028e:	f7f5 fb7d 	bl	801598c <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020292:	1bad      	subs	r5, r5, r6
 8020294:	44b0      	add	r8, r6
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 8020296:	e9cd b000 	strd	fp, r0, [sp]
 802029a:	4a37      	ldr	r2, [pc, #220]	; (8020378 <mbedtls_x509_crt_info+0x2a0>)
 802029c:	464b      	mov	r3, r9
 802029e:	4629      	mov	r1, r5
 80202a0:	4640      	mov	r0, r8
 80202a2:	f003 f997 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80202a6:	2800      	cmp	r0, #0
 80202a8:	f6ff af23 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80202ac:	4285      	cmp	r5, r0
 80202ae:	f67f af20 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80202b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80202b6:	05de      	lsls	r6, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 80202b8:	eba5 0400 	sub.w	r4, r5, r0
 80202bc:	eb08 0500 	add.w	r5, r8, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80202c0:	d528      	bpl.n	8020314 <mbedtls_x509_crt_info+0x23c>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 80202c2:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80202c6:	4a2d      	ldr	r2, [pc, #180]	; (802037c <mbedtls_x509_crt_info+0x2a4>)
 80202c8:	4b2d      	ldr	r3, [pc, #180]	; (8020380 <mbedtls_x509_crt_info+0x2a8>)
 80202ca:	2900      	cmp	r1, #0
 80202cc:	bf08      	it	eq
 80202ce:	4613      	moveq	r3, r2
 80202d0:	9300      	str	r3, [sp, #0]
 80202d2:	4a2c      	ldr	r2, [pc, #176]	; (8020384 <mbedtls_x509_crt_info+0x2ac>)
 80202d4:	464b      	mov	r3, r9
 80202d6:	4621      	mov	r1, r4
 80202d8:	4628      	mov	r0, r5
 80202da:	f003 f97b 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80202de:	2800      	cmp	r0, #0
 80202e0:	f6ff af07 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80202e4:	4284      	cmp	r4, r0
 80202e6:	f67f af04 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
 80202ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80202ee:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 80202f0:	eba4 0400 	sub.w	r4, r4, r0
 80202f4:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 80202f6:	dd0d      	ble.n	8020314 <mbedtls_x509_crt_info+0x23c>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 80202f8:	4a23      	ldr	r2, [pc, #140]	; (8020388 <mbedtls_x509_crt_info+0x2b0>)
 80202fa:	3b01      	subs	r3, #1
 80202fc:	4621      	mov	r1, r4
 80202fe:	4628      	mov	r0, r5
 8020300:	f003 f968 	bl	80235d4 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8020304:	2800      	cmp	r0, #0
 8020306:	f6ff aef4 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802030a:	4284      	cmp	r4, r0
 802030c:	f67f aef1 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020310:	1a24      	subs	r4, r4, r0
 8020312:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8020314:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020318:	0698      	lsls	r0, r3, #26
 802031a:	d54e      	bpl.n	80203ba <mbedtls_x509_crt_info+0x2e2>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 802031c:	4a1b      	ldr	r2, [pc, #108]	; (802038c <mbedtls_x509_crt_info+0x2b4>)
 802031e:	464b      	mov	r3, r9
 8020320:	4621      	mov	r1, r4
 8020322:	4628      	mov	r0, r5
 8020324:	f003 f956 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020328:	2800      	cmp	r0, #0
 802032a:	f6ff aee2 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802032e:	42a0      	cmp	r0, r4
 8020330:	f4bf aedf 	bcs.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020334:	1a24      	subs	r4, r4, r0
 8020336:	4405      	add	r5, r0
    size_t sep_len = 0;
 8020338:	2100      	movs	r1, #0
    const char *sep = "";
 802033a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8020394 <mbedtls_x509_crt_info+0x2bc>
        sep = ", ";
 802033e:	4814      	ldr	r0, [pc, #80]	; (8020390 <mbedtls_x509_crt_info+0x2b8>)
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8020340:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    while( cur != NULL )
 8020344:	460e      	mov	r6, r1
        if( cur->buf.len + sep_len >= n )
 8020346:	6853      	ldr	r3, [r2, #4]
 8020348:	440b      	add	r3, r1
 802034a:	42a3      	cmp	r3, r4
 802034c:	d324      	bcc.n	8020398 <mbedtls_x509_crt_info+0x2c0>
            *p = '\0';
 802034e:	702e      	strb	r6, [r5, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8020350:	e6cf      	b.n	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020352:	bf00      	nop
 8020354:	08032ded 	.word	0x08032ded
 8020358:	ffffd680 	.word	0xffffd680
 802035c:	08032e0d 	.word	0x08032e0d
 8020360:	08032e27 	.word	0x08032e27
 8020364:	08032e3e 	.word	0x08032e3e
 8020368:	08032e56 	.word	0x08032e56
 802036c:	08032e6e 	.word	0x08032e6e
 8020370:	08032ea3 	.word	0x08032ea3
 8020374:	08032ed8 	.word	0x08032ed8
 8020378:	08032ef0 	.word	0x08032ef0
 802037c:	0802ee5b 	.word	0x0802ee5b
 8020380:	0802ee56 	.word	0x0802ee56
 8020384:	08032f02 	.word	0x08032f02
 8020388:	08032f1f 	.word	0x08032f1f
 802038c:	08032f30 	.word	0x08032f30
 8020390:	08032c89 	.word	0x08032c89
 8020394:	08030129 	.word	0x08030129
        n -= cur->buf.len + sep_len;
 8020398:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 802039a:	2300      	movs	r3, #0
 802039c:	428b      	cmp	r3, r1
 802039e:	f040 818d 	bne.w	80206bc <mbedtls_x509_crt_info+0x5e4>
 80203a2:	441d      	add	r5, r3
        for( i = 0; i < cur->buf.len; i++ )
 80203a4:	2300      	movs	r3, #0
 80203a6:	6851      	ldr	r1, [r2, #4]
 80203a8:	428b      	cmp	r3, r1
 80203aa:	f0c0 818d 	bcc.w	80206c8 <mbedtls_x509_crt_info+0x5f0>
        cur = cur->next;
 80203ae:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 80203b0:	2102      	movs	r1, #2
        sep = ", ";
 80203b2:	4684      	mov	ip, r0
    while( cur != NULL )
 80203b4:	2a00      	cmp	r2, #0
 80203b6:	d1c6      	bne.n	8020346 <mbedtls_x509_crt_info+0x26e>
    *p = '\0';
 80203b8:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 80203ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80203be:	03d9      	lsls	r1, r3, #15
 80203c0:	f140 8093 	bpl.w	80204ea <mbedtls_x509_crt_info+0x412>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 80203c4:	4ac3      	ldr	r2, [pc, #780]	; (80206d4 <mbedtls_x509_crt_info+0x5fc>)
 80203c6:	464b      	mov	r3, r9
 80203c8:	4621      	mov	r1, r4
 80203ca:	4628      	mov	r0, r5
 80203cc:	f003 f902 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80203d0:	2800      	cmp	r0, #0
 80203d2:	f6ff ae8e 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80203d6:	42a0      	cmp	r0, r4
 80203d8:	f4bf ae8b 	bcs.w	80200f2 <mbedtls_x509_crt_info+0x1a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80203dc:	f997 3118 	ldrsb.w	r3, [r7, #280]	; 0x118
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 80203e0:	f897 6118 	ldrb.w	r6, [r7, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80203e4:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 80203e6:	eba4 0400 	sub.w	r4, r4, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80203ea:	4bbb      	ldr	r3, [pc, #748]	; (80206d8 <mbedtls_x509_crt_info+0x600>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 80203ec:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 80203ee:	da0d      	bge.n	802040c <mbedtls_x509_crt_info+0x334>
 80203f0:	4aba      	ldr	r2, [pc, #744]	; (80206dc <mbedtls_x509_crt_info+0x604>)
 80203f2:	4621      	mov	r1, r4
 80203f4:	4628      	mov	r0, r5
 80203f6:	f003 f8ed 	bl	80235d4 <sniprintf>
 80203fa:	2800      	cmp	r0, #0
 80203fc:	f6ff ae79 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020400:	4284      	cmp	r4, r0
 8020402:	f67f ae76 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020406:	4bb6      	ldr	r3, [pc, #728]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020408:	1a24      	subs	r4, r4, r0
 802040a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 802040c:	0672      	lsls	r2, r6, #25
 802040e:	d50d      	bpl.n	802042c <mbedtls_x509_crt_info+0x354>
 8020410:	4ab4      	ldr	r2, [pc, #720]	; (80206e4 <mbedtls_x509_crt_info+0x60c>)
 8020412:	4621      	mov	r1, r4
 8020414:	4628      	mov	r0, r5
 8020416:	f003 f8dd 	bl	80235d4 <sniprintf>
 802041a:	2800      	cmp	r0, #0
 802041c:	f6ff ae69 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020420:	4284      	cmp	r4, r0
 8020422:	f67f ae66 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020426:	4bae      	ldr	r3, [pc, #696]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020428:	1a24      	subs	r4, r4, r0
 802042a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 802042c:	06b0      	lsls	r0, r6, #26
 802042e:	d50d      	bpl.n	802044c <mbedtls_x509_crt_info+0x374>
 8020430:	4aad      	ldr	r2, [pc, #692]	; (80206e8 <mbedtls_x509_crt_info+0x610>)
 8020432:	4621      	mov	r1, r4
 8020434:	4628      	mov	r0, r5
 8020436:	f003 f8cd 	bl	80235d4 <sniprintf>
 802043a:	2800      	cmp	r0, #0
 802043c:	f6ff ae59 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020440:	4284      	cmp	r4, r0
 8020442:	f67f ae56 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020446:	4ba6      	ldr	r3, [pc, #664]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020448:	1a24      	subs	r4, r4, r0
 802044a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 802044c:	06f1      	lsls	r1, r6, #27
 802044e:	d50d      	bpl.n	802046c <mbedtls_x509_crt_info+0x394>
 8020450:	4aa6      	ldr	r2, [pc, #664]	; (80206ec <mbedtls_x509_crt_info+0x614>)
 8020452:	4621      	mov	r1, r4
 8020454:	4628      	mov	r0, r5
 8020456:	f003 f8bd 	bl	80235d4 <sniprintf>
 802045a:	2800      	cmp	r0, #0
 802045c:	f6ff ae49 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020460:	4284      	cmp	r4, r0
 8020462:	f67f ae46 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020466:	4b9e      	ldr	r3, [pc, #632]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020468:	1a24      	subs	r4, r4, r0
 802046a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 802046c:	0732      	lsls	r2, r6, #28
 802046e:	d50d      	bpl.n	802048c <mbedtls_x509_crt_info+0x3b4>
 8020470:	4a9f      	ldr	r2, [pc, #636]	; (80206f0 <mbedtls_x509_crt_info+0x618>)
 8020472:	4621      	mov	r1, r4
 8020474:	4628      	mov	r0, r5
 8020476:	f003 f8ad 	bl	80235d4 <sniprintf>
 802047a:	2800      	cmp	r0, #0
 802047c:	f6ff ae39 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020480:	4284      	cmp	r4, r0
 8020482:	f67f ae36 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020486:	4b96      	ldr	r3, [pc, #600]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020488:	1a24      	subs	r4, r4, r0
 802048a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 802048c:	0770      	lsls	r0, r6, #29
 802048e:	d50d      	bpl.n	80204ac <mbedtls_x509_crt_info+0x3d4>
 8020490:	4a98      	ldr	r2, [pc, #608]	; (80206f4 <mbedtls_x509_crt_info+0x61c>)
 8020492:	4621      	mov	r1, r4
 8020494:	4628      	mov	r0, r5
 8020496:	f003 f89d 	bl	80235d4 <sniprintf>
 802049a:	2800      	cmp	r0, #0
 802049c:	f6ff ae29 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80204a0:	4284      	cmp	r4, r0
 80204a2:	f67f ae26 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80204a6:	4b8e      	ldr	r3, [pc, #568]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 80204a8:	1a24      	subs	r4, r4, r0
 80204aa:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80204ac:	07b1      	lsls	r1, r6, #30
 80204ae:	d50d      	bpl.n	80204cc <mbedtls_x509_crt_info+0x3f4>
 80204b0:	4a91      	ldr	r2, [pc, #580]	; (80206f8 <mbedtls_x509_crt_info+0x620>)
 80204b2:	4621      	mov	r1, r4
 80204b4:	4628      	mov	r0, r5
 80204b6:	f003 f88d 	bl	80235d4 <sniprintf>
 80204ba:	2800      	cmp	r0, #0
 80204bc:	f6ff ae19 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80204c0:	4284      	cmp	r4, r0
 80204c2:	f67f ae16 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80204c6:	4b86      	ldr	r3, [pc, #536]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 80204c8:	1a24      	subs	r4, r4, r0
 80204ca:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 80204cc:	07f2      	lsls	r2, r6, #31
 80204ce:	d50c      	bpl.n	80204ea <mbedtls_x509_crt_info+0x412>
 80204d0:	4a8a      	ldr	r2, [pc, #552]	; (80206fc <mbedtls_x509_crt_info+0x624>)
 80204d2:	4621      	mov	r1, r4
 80204d4:	4628      	mov	r0, r5
 80204d6:	f003 f87d 	bl	80235d4 <sniprintf>
 80204da:	2800      	cmp	r0, #0
 80204dc:	f6ff ae09 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80204e0:	4284      	cmp	r4, r0
 80204e2:	f67f ae06 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80204e6:	1a24      	subs	r4, r4, r0
 80204e8:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 80204ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80204ee:	075e      	lsls	r6, r3, #29
 80204f0:	f140 80a0 	bpl.w	8020634 <mbedtls_x509_crt_info+0x55c>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 80204f4:	4a82      	ldr	r2, [pc, #520]	; (8020700 <mbedtls_x509_crt_info+0x628>)
 80204f6:	464b      	mov	r3, r9
 80204f8:	4621      	mov	r1, r4
 80204fa:	4628      	mov	r0, r5
 80204fc:	f003 f86a 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020500:	2800      	cmp	r0, #0
 8020502:	f6ff adf6 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020506:	42a0      	cmp	r0, r4
 8020508:	f4bf adf3 	bcs.w	80200f2 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 802050c:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8020510:	4b71      	ldr	r3, [pc, #452]	; (80206d8 <mbedtls_x509_crt_info+0x600>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020512:	1a24      	subs	r4, r4, r0
 8020514:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8020516:	0630      	lsls	r0, r6, #24
 8020518:	d50d      	bpl.n	8020536 <mbedtls_x509_crt_info+0x45e>
 802051a:	4a7a      	ldr	r2, [pc, #488]	; (8020704 <mbedtls_x509_crt_info+0x62c>)
 802051c:	4621      	mov	r1, r4
 802051e:	4628      	mov	r0, r5
 8020520:	f003 f858 	bl	80235d4 <sniprintf>
 8020524:	2800      	cmp	r0, #0
 8020526:	f6ff ade4 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802052a:	4284      	cmp	r4, r0
 802052c:	f67f ade1 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020530:	4b6b      	ldr	r3, [pc, #428]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020532:	1a24      	subs	r4, r4, r0
 8020534:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8020536:	0671      	lsls	r1, r6, #25
 8020538:	d50d      	bpl.n	8020556 <mbedtls_x509_crt_info+0x47e>
 802053a:	4a73      	ldr	r2, [pc, #460]	; (8020708 <mbedtls_x509_crt_info+0x630>)
 802053c:	4621      	mov	r1, r4
 802053e:	4628      	mov	r0, r5
 8020540:	f003 f848 	bl	80235d4 <sniprintf>
 8020544:	2800      	cmp	r0, #0
 8020546:	f6ff add4 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802054a:	4284      	cmp	r4, r0
 802054c:	f67f add1 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020550:	4b63      	ldr	r3, [pc, #396]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020552:	1a24      	subs	r4, r4, r0
 8020554:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8020556:	06b2      	lsls	r2, r6, #26
 8020558:	d50d      	bpl.n	8020576 <mbedtls_x509_crt_info+0x49e>
 802055a:	4a6c      	ldr	r2, [pc, #432]	; (802070c <mbedtls_x509_crt_info+0x634>)
 802055c:	4621      	mov	r1, r4
 802055e:	4628      	mov	r0, r5
 8020560:	f003 f838 	bl	80235d4 <sniprintf>
 8020564:	2800      	cmp	r0, #0
 8020566:	f6ff adc4 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802056a:	4284      	cmp	r4, r0
 802056c:	f67f adc1 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020570:	4b5b      	ldr	r3, [pc, #364]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020572:	1a24      	subs	r4, r4, r0
 8020574:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 8020576:	06f0      	lsls	r0, r6, #27
 8020578:	d50d      	bpl.n	8020596 <mbedtls_x509_crt_info+0x4be>
 802057a:	4a65      	ldr	r2, [pc, #404]	; (8020710 <mbedtls_x509_crt_info+0x638>)
 802057c:	4621      	mov	r1, r4
 802057e:	4628      	mov	r0, r5
 8020580:	f003 f828 	bl	80235d4 <sniprintf>
 8020584:	2800      	cmp	r0, #0
 8020586:	f6ff adb4 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802058a:	4284      	cmp	r4, r0
 802058c:	f67f adb1 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020590:	4b53      	ldr	r3, [pc, #332]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020592:	1a24      	subs	r4, r4, r0
 8020594:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 8020596:	0731      	lsls	r1, r6, #28
 8020598:	d50d      	bpl.n	80205b6 <mbedtls_x509_crt_info+0x4de>
 802059a:	4a5e      	ldr	r2, [pc, #376]	; (8020714 <mbedtls_x509_crt_info+0x63c>)
 802059c:	4621      	mov	r1, r4
 802059e:	4628      	mov	r0, r5
 80205a0:	f003 f818 	bl	80235d4 <sniprintf>
 80205a4:	2800      	cmp	r0, #0
 80205a6:	f6ff ada4 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80205aa:	4284      	cmp	r4, r0
 80205ac:	f67f ada1 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80205b0:	4b4b      	ldr	r3, [pc, #300]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 80205b2:	1a24      	subs	r4, r4, r0
 80205b4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 80205b6:	0772      	lsls	r2, r6, #29
 80205b8:	d50d      	bpl.n	80205d6 <mbedtls_x509_crt_info+0x4fe>
 80205ba:	4a57      	ldr	r2, [pc, #348]	; (8020718 <mbedtls_x509_crt_info+0x640>)
 80205bc:	4621      	mov	r1, r4
 80205be:	4628      	mov	r0, r5
 80205c0:	f003 f808 	bl	80235d4 <sniprintf>
 80205c4:	2800      	cmp	r0, #0
 80205c6:	f6ff ad94 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80205ca:	4284      	cmp	r4, r0
 80205cc:	f67f ad91 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80205d0:	4b43      	ldr	r3, [pc, #268]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 80205d2:	1a24      	subs	r4, r4, r0
 80205d4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 80205d6:	07b0      	lsls	r0, r6, #30
 80205d8:	d50d      	bpl.n	80205f6 <mbedtls_x509_crt_info+0x51e>
 80205da:	4a50      	ldr	r2, [pc, #320]	; (802071c <mbedtls_x509_crt_info+0x644>)
 80205dc:	4621      	mov	r1, r4
 80205de:	4628      	mov	r0, r5
 80205e0:	f002 fff8 	bl	80235d4 <sniprintf>
 80205e4:	2800      	cmp	r0, #0
 80205e6:	f6ff ad84 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80205ea:	4284      	cmp	r4, r0
 80205ec:	f67f ad81 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80205f0:	4b3b      	ldr	r3, [pc, #236]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 80205f2:	1a24      	subs	r4, r4, r0
 80205f4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 80205f6:	07f1      	lsls	r1, r6, #31
 80205f8:	d50d      	bpl.n	8020616 <mbedtls_x509_crt_info+0x53e>
 80205fa:	4a49      	ldr	r2, [pc, #292]	; (8020720 <mbedtls_x509_crt_info+0x648>)
 80205fc:	4621      	mov	r1, r4
 80205fe:	4628      	mov	r0, r5
 8020600:	f002 ffe8 	bl	80235d4 <sniprintf>
 8020604:	2800      	cmp	r0, #0
 8020606:	f6ff ad74 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802060a:	4284      	cmp	r4, r0
 802060c:	f67f ad71 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020610:	4b33      	ldr	r3, [pc, #204]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
 8020612:	1a24      	subs	r4, r4, r0
 8020614:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8020616:	0432      	lsls	r2, r6, #16
 8020618:	d50c      	bpl.n	8020634 <mbedtls_x509_crt_info+0x55c>
 802061a:	4a42      	ldr	r2, [pc, #264]	; (8020724 <mbedtls_x509_crt_info+0x64c>)
 802061c:	4621      	mov	r1, r4
 802061e:	4628      	mov	r0, r5
 8020620:	f002 ffd8 	bl	80235d4 <sniprintf>
 8020624:	2800      	cmp	r0, #0
 8020626:	f6ff ad64 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802062a:	4284      	cmp	r4, r0
 802062c:	f67f ad61 	bls.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 8020630:	1a24      	subs	r4, r4, r0
 8020632:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8020634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020638:	051b      	lsls	r3, r3, #20
 802063a:	d531      	bpl.n	80206a0 <mbedtls_x509_crt_info+0x5c8>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 802063c:	4a3a      	ldr	r2, [pc, #232]	; (8020728 <mbedtls_x509_crt_info+0x650>)
 802063e:	464b      	mov	r3, r9
 8020640:	4621      	mov	r1, r4
 8020642:	4628      	mov	r0, r5
 8020644:	f002 ffc6 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020648:	2800      	cmp	r0, #0
 802064a:	f6ff ad52 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802064e:	42a0      	cmp	r0, r4
 8020650:	f4bf ad4f 	bcs.w	80200f2 <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
 8020654:	f8df b080 	ldr.w	fp, [pc, #128]	; 80206d8 <mbedtls_x509_crt_info+0x600>
            desc = "???";
 8020658:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8020730 <mbedtls_x509_crt_info+0x658>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 802065c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020734 <mbedtls_x509_crt_info+0x65c>
        sep = ", ";
 8020660:	4e1f      	ldr	r6, [pc, #124]	; (80206e0 <mbedtls_x509_crt_info+0x608>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020662:	1a24      	subs	r4, r4, r0
 8020664:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 8020666:	f507 7784 	add.w	r7, r7, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 802066a:	a906      	add	r1, sp, #24
 802066c:	4638      	mov	r0, r7
 802066e:	f7f4 fe55 	bl	801531c <mbedtls_oid_get_extended_key_usage>
 8020672:	b108      	cbz	r0, 8020678 <mbedtls_x509_crt_info+0x5a0>
            desc = "???";
 8020674:	f8cd 8018 	str.w	r8, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 8020678:	9b06      	ldr	r3, [sp, #24]
 802067a:	9300      	str	r3, [sp, #0]
 802067c:	464a      	mov	r2, r9
 802067e:	465b      	mov	r3, fp
 8020680:	4621      	mov	r1, r4
 8020682:	4628      	mov	r0, r5
 8020684:	f002 ffa6 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020688:	2800      	cmp	r0, #0
 802068a:	f6ff ad32 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 802068e:	42a0      	cmp	r0, r4
 8020690:	f4bf ad2f 	bcs.w	80200f2 <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
 8020694:	68ff      	ldr	r7, [r7, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020696:	1a24      	subs	r4, r4, r0
 8020698:	4405      	add	r5, r0
        sep = ", ";
 802069a:	46b3      	mov	fp, r6
    while( cur != NULL )
 802069c:	2f00      	cmp	r7, #0
 802069e:	d1e4      	bne.n	802066a <mbedtls_x509_crt_info+0x592>
    ret = mbedtls_snprintf( p, n, "\n" );
 80206a0:	4a22      	ldr	r2, [pc, #136]	; (802072c <mbedtls_x509_crt_info+0x654>)
 80206a2:	4621      	mov	r1, r4
 80206a4:	4628      	mov	r0, r5
 80206a6:	f002 ff95 	bl	80235d4 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80206aa:	2800      	cmp	r0, #0
 80206ac:	f6ff ad21 	blt.w	80200f2 <mbedtls_x509_crt_info+0x1a>
 80206b0:	42a0      	cmp	r0, r4
 80206b2:	f4bf ad1e 	bcs.w	80200f2 <mbedtls_x509_crt_info+0x1a>
    return( (int) ( size - n ) );
 80206b6:	1b00      	subs	r0, r0, r4
 80206b8:	4450      	add	r0, sl
 80206ba:	e51e      	b.n	80200fa <mbedtls_x509_crt_info+0x22>
            *p++ = sep[i];
 80206bc:	f81c e003 	ldrb.w	lr, [ip, r3]
 80206c0:	f805 e003 	strb.w	lr, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 80206c4:	3301      	adds	r3, #1
 80206c6:	e669      	b.n	802039c <mbedtls_x509_crt_info+0x2c4>
            *p++ = cur->buf.p[i];
 80206c8:	6891      	ldr	r1, [r2, #8]
 80206ca:	5cc9      	ldrb	r1, [r1, r3]
 80206cc:	f805 1b01 	strb.w	r1, [r5], #1
        for( i = 0; i < cur->buf.len; i++ )
 80206d0:	3301      	adds	r3, #1
 80206d2:	e668      	b.n	80203a6 <mbedtls_x509_crt_info+0x2ce>
 80206d4:	08032f48 	.word	0x08032f48
 80206d8:	08030129 	.word	0x08030129
 80206dc:	08032f60 	.word	0x08032f60
 80206e0:	08032c89 	.word	0x08032c89
 80206e4:	08032f6d 	.word	0x08032f6d
 80206e8:	08032f7a 	.word	0x08032f7a
 80206ec:	08032f82 	.word	0x08032f82
 80206f0:	08032f93 	.word	0x08032f93
 80206f4:	08032f9e 	.word	0x08032f9e
 80206f8:	08032fa7 	.word	0x08032fa7
 80206fc:	08032fb2 	.word	0x08032fb2
 8020700:	08032fc6 	.word	0x08032fc6
 8020704:	08032fde 	.word	0x08032fde
 8020708:	08032ff2 	.word	0x08032ff2
 802070c:	08033004 	.word	0x08033004
 8020710:	08033017 	.word	0x08033017
 8020714:	0803302b 	.word	0x0803302b
 8020718:	0803303b 	.word	0x0803303b
 802071c:	0803304b 	.word	0x0803304b
 8020720:	08033056 	.word	0x08033056
 8020724:	08033066 	.word	0x08033066
 8020728:	08033076 	.word	0x08033076
 802072c:	08030391 	.word	0x08030391
 8020730:	08032c9b 	.word	0x08032c9b
 8020734:	0802fe1a 	.word	0x0802fe1a

08020738 <mbedtls_x509_crt_verify_info>:
{
 8020738:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802073c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80207b0 <mbedtls_x509_crt_verify_info+0x78>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8020740:	f8df a070 	ldr.w	sl, [pc, #112]	; 80207b4 <mbedtls_x509_crt_verify_info+0x7c>
{
 8020744:	4606      	mov	r6, r0
 8020746:	460d      	mov	r5, r1
 8020748:	4691      	mov	r9, r2
 802074a:	461f      	mov	r7, r3
    size_t n = size;
 802074c:	460c      	mov	r4, r1
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 802074e:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8020752:	b96b      	cbnz	r3, 8020770 <mbedtls_x509_crt_verify_info+0x38>
    if( flags != 0 )
 8020754:	b157      	cbz	r7, 802076c <mbedtls_x509_crt_verify_info+0x34>
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
 8020756:	4a14      	ldr	r2, [pc, #80]	; (80207a8 <mbedtls_x509_crt_verify_info+0x70>)
 8020758:	464b      	mov	r3, r9
 802075a:	4621      	mov	r1, r4
 802075c:	4630      	mov	r0, r6
 802075e:	f002 ff39 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020762:	2800      	cmp	r0, #0
 8020764:	db11      	blt.n	802078a <mbedtls_x509_crt_verify_info+0x52>
 8020766:	42a0      	cmp	r0, r4
 8020768:	d20f      	bcs.n	802078a <mbedtls_x509_crt_verify_info+0x52>
 802076a:	1a24      	subs	r4, r4, r0
    return( (int) ( size - n ) );
 802076c:	1b28      	subs	r0, r5, r4
 802076e:	e00d      	b.n	802078c <mbedtls_x509_crt_verify_info+0x54>
        if( ( flags & cur->code ) == 0 )
 8020770:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8020774:	4217      	tst	r7, r2
 8020776:	d013      	beq.n	80207a0 <mbedtls_x509_crt_verify_info+0x68>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8020778:	9300      	str	r3, [sp, #0]
 802077a:	4652      	mov	r2, sl
 802077c:	464b      	mov	r3, r9
 802077e:	4621      	mov	r1, r4
 8020780:	4630      	mov	r0, r6
 8020782:	f002 ff27 	bl	80235d4 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020786:	2800      	cmp	r0, #0
 8020788:	da03      	bge.n	8020792 <mbedtls_x509_crt_verify_info+0x5a>
 802078a:	4808      	ldr	r0, [pc, #32]	; (80207ac <mbedtls_x509_crt_verify_info+0x74>)
}
 802078c:	b002      	add	sp, #8
 802078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020792:	42a0      	cmp	r0, r4
 8020794:	d2f9      	bcs.n	802078a <mbedtls_x509_crt_verify_info+0x52>
        flags ^= cur->code;
 8020796:	f858 3c08 	ldr.w	r3, [r8, #-8]
        MBEDTLS_X509_SAFE_SNPRINTF;
 802079a:	1a24      	subs	r4, r4, r0
 802079c:	4406      	add	r6, r0
        flags ^= cur->code;
 802079e:	405f      	eors	r7, r3
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80207a0:	f108 0808 	add.w	r8, r8, #8
 80207a4:	e7d3      	b.n	802074e <mbedtls_x509_crt_verify_info+0x16>
 80207a6:	bf00      	nop
 80207a8:	0803308e 	.word	0x0803308e
 80207ac:	ffffd680 	.word	0xffffd680
 80207b0:	0802d310 	.word	0x0802d310
 80207b4:	0803386b 	.word	0x0803386b

080207b8 <mbedtls_x509_crt_check_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80207b8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 80207bc:	4602      	mov	r2, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80207be:	f013 0004 	ands.w	r0, r3, #4
{
 80207c2:	b510      	push	{r4, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80207c4:	d011      	beq.n	80207ea <mbedtls_x509_crt_check_key_usage+0x32>
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80207c6:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    usage_must = usage & ~may_mask;
 80207ca:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
 80207ce:	f023 0301 	bic.w	r3, r3, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 80207d2:	4393      	bics	r3, r2
 80207d4:	d10a      	bne.n	80207ec <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
 80207d6:	f248 0301 	movw	r3, #32769	; 0x8001
 80207da:	ea01 0403 	and.w	r4, r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80207de:	4804      	ldr	r0, [pc, #16]	; (80207f0 <mbedtls_x509_crt_check_key_usage+0x38>)
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 80207e0:	4311      	orrs	r1, r2
 80207e2:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80207e4:	428c      	cmp	r4, r1
 80207e6:	bf08      	it	eq
 80207e8:	2000      	moveq	r0, #0
}
 80207ea:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80207ec:	4800      	ldr	r0, [pc, #0]	; (80207f0 <mbedtls_x509_crt_check_key_usage+0x38>)
 80207ee:	e7fc      	b.n	80207ea <mbedtls_x509_crt_check_key_usage+0x32>
 80207f0:	ffffd800 	.word	0xffffd800

080207f4 <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 80207f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207f6:	4605      	mov	r5, r0
 80207f8:	460c      	mov	r4, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 80207fa:	304c      	adds	r0, #76	; 0x4c
 80207fc:	316c      	adds	r1, #108	; 0x6c
{
 80207fe:	4617      	mov	r7, r2
 8020800:	461e      	mov	r6, r3
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020802:	f7ff fbdb 	bl	801ffbc <x509_name_cmp>
 8020806:	b9d8      	cbnz	r0, 8020840 <x509_crt_check_parent+0x4c>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8020808:	b167      	cbz	r7, 8020824 <x509_crt_check_parent+0x30>
 802080a:	69a7      	ldr	r7, [r4, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 802080c:	b146      	cbz	r6, 8020820 <x509_crt_check_parent+0x2c>
        child->raw.len == parent->raw.len &&
 802080e:	686a      	ldr	r2, [r5, #4]
    if( top && bottom &&
 8020810:	6863      	ldr	r3, [r4, #4]
 8020812:	429a      	cmp	r2, r3
 8020814:	d104      	bne.n	8020820 <x509_crt_check_parent+0x2c>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 8020816:	68a1      	ldr	r1, [r4, #8]
 8020818:	68a8      	ldr	r0, [r5, #8]
 802081a:	f001 fcb7 	bl	802218c <memcmp>
        child->raw.len == parent->raw.len &&
 802081e:	b160      	cbz	r0, 802083a <x509_crt_check_parent+0x46>
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8020820:	2f02      	cmp	r7, #2
 8020822:	dd0b      	ble.n	802083c <x509_crt_check_parent+0x48>
 8020824:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8020828:	b153      	cbz	r3, 8020840 <x509_crt_check_parent+0x4c>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 802082a:	2104      	movs	r1, #4
 802082c:	4620      	mov	r0, r4
 802082e:	f7ff ffc3 	bl	80207b8 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
 8020832:	3800      	subs	r0, #0
 8020834:	bf18      	it	ne
 8020836:	2001      	movne	r0, #1
 8020838:	4240      	negs	r0, r0
        return( -1 );
    }
#endif

    return( 0 );
}
 802083a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
 802083c:	2000      	movs	r0, #0
 802083e:	e7fc      	b.n	802083a <x509_crt_check_parent+0x46>
        return( -1 );
 8020840:	f04f 30ff 	mov.w	r0, #4294967295
 8020844:	e7f9      	b.n	802083a <x509_crt_check_parent+0x46>
	...

08020848 <mbedtls_x509_crt_check_extended_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020848:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 802084c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020850:	4604      	mov	r4, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020852:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
{
 8020856:	460e      	mov	r6, r1
 8020858:	4615      	mov	r5, r2
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 802085a:	d018      	beq.n	802088e <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 802085c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8020898 <mbedtls_x509_crt_check_extended_key_usage+0x50>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020860:	f504 7484 	add.w	r4, r4, #264	; 0x108
        if( cur_oid->len == usage_len &&
 8020864:	6867      	ldr	r7, [r4, #4]
 8020866:	42af      	cmp	r7, r5
 8020868:	d105      	bne.n	8020876 <mbedtls_x509_crt_check_extended_key_usage+0x2e>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
 802086a:	68a0      	ldr	r0, [r4, #8]
 802086c:	462a      	mov	r2, r5
 802086e:	4631      	mov	r1, r6
 8020870:	f001 fc8c 	bl	802218c <memcmp>
        if( cur_oid->len == usage_len &&
 8020874:	b158      	cbz	r0, 802088e <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 8020876:	2f04      	cmp	r7, #4
 8020878:	d105      	bne.n	8020886 <mbedtls_x509_crt_check_extended_key_usage+0x3e>
 802087a:	68a1      	ldr	r1, [r4, #8]
 802087c:	463a      	mov	r2, r7
 802087e:	4640      	mov	r0, r8
 8020880:	f001 fc84 	bl	802218c <memcmp>
 8020884:	b118      	cbz	r0, 802088e <mbedtls_x509_crt_check_extended_key_usage+0x46>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020886:	68e4      	ldr	r4, [r4, #12]
 8020888:	2c00      	cmp	r4, #0
 802088a:	d1eb      	bne.n	8020864 <mbedtls_x509_crt_check_extended_key_usage+0x1c>
    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802088c:	4801      	ldr	r0, [pc, #4]	; (8020894 <mbedtls_x509_crt_check_extended_key_usage+0x4c>)
}
 802088e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020892:	bf00      	nop
 8020894:	ffffd800 	.word	0xffffd800
 8020898:	0802d3b0 	.word	0x0802d3b0

0802089c <mbedtls_x509_crt_is_revoked>:
{
 802089c:	b538      	push	{r3, r4, r5, lr}
 802089e:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 80208a0:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
 80208a4:	6923      	ldr	r3, [r4, #16]
 80208a6:	b12b      	cbz	r3, 80208b4 <mbedtls_x509_crt_is_revoked+0x18>
        if( crt->serial.len == cur->serial.len &&
 80208a8:	6a2a      	ldr	r2, [r5, #32]
 80208aa:	429a      	cmp	r2, r3
 80208ac:	d004      	beq.n	80208b8 <mbedtls_x509_crt_is_revoked+0x1c>
        cur = cur->next;
 80208ae:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    while( cur != NULL && cur->serial.len != 0 )
 80208b0:	2c00      	cmp	r4, #0
 80208b2:	d1f7      	bne.n	80208a4 <mbedtls_x509_crt_is_revoked+0x8>
    return( 0 );
 80208b4:	2000      	movs	r0, #0
}
 80208b6:	bd38      	pop	{r3, r4, r5, pc}
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 80208b8:	6961      	ldr	r1, [r4, #20]
 80208ba:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80208bc:	f001 fc66 	bl	802218c <memcmp>
        if( crt->serial.len == cur->serial.len &&
 80208c0:	2800      	cmp	r0, #0
 80208c2:	d1f4      	bne.n	80208ae <mbedtls_x509_crt_is_revoked+0x12>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 80208c4:	f104 0018 	add.w	r0, r4, #24
 80208c8:	f7ff f8ba 	bl	801fa40 <mbedtls_x509_time_is_past>
 80208cc:	2800      	cmp	r0, #0
 80208ce:	d0ee      	beq.n	80208ae <mbedtls_x509_crt_is_revoked+0x12>
                return( 1 );
 80208d0:	2001      	movs	r0, #1
 80208d2:	e7f0      	b.n	80208b6 <mbedtls_x509_crt_is_revoked+0x1a>

080208d4 <x509_crt_verifycrl.part.0>:
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
 80208d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208d8:	ed2d 8b02 	vpush	{d8}
 80208dc:	ee08 0a10 	vmov	s16, r0
 80208e0:	b099      	sub	sp, #100	; 0x64
 80208e2:	460e      	mov	r6, r1
 80208e4:	4614      	mov	r4, r2
 80208e6:	461f      	mov	r7, r3
    int flags = 0;
 80208e8:	2500      	movs	r5, #0
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 80208ea:	f04f 0901 	mov.w	r9, #1
    while( crl_list != NULL )
 80208ee:	b1a4      	cbz	r4, 802091a <x509_crt_verifycrl.part.0+0x46>
        if( crl_list->version == 0 ||
 80208f0:	69a3      	ldr	r3, [r4, #24]
 80208f2:	b143      	cbz	r3, 8020906 <x509_crt_verifycrl.part.0+0x32>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 80208f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( crl_list->version == 0 ||
 80208f6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80208f8:	429a      	cmp	r2, r3
 80208fa:	d104      	bne.n	8020906 <x509_crt_verifycrl.part.0+0x32>
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 80208fc:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 80208fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020900:	f001 fc44 	bl	802218c <memcmp>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020904:	b110      	cbz	r0, 802090c <x509_crt_verifycrl.part.0+0x38>
        crl_list = crl_list->next;
 8020906:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 802090a:	e7f0      	b.n	80208ee <x509_crt_verifycrl.part.0+0x1a>
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 802090c:	2102      	movs	r1, #2
 802090e:	4630      	mov	r0, r6
 8020910:	f7ff ff52 	bl	80207b8 <mbedtls_x509_crt_check_key_usage>
 8020914:	b138      	cbz	r0, 8020926 <x509_crt_verifycrl.part.0+0x52>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8020916:	f045 0510 	orr.w	r5, r5, #16
}
 802091a:	4628      	mov	r0, r5
 802091c:	b019      	add	sp, #100	; 0x64
 802091e:	ecbd 8b02 	vpop	{d8}
 8020922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8020926:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 802092a:	683a      	ldr	r2, [r7, #0]
 802092c:	1e43      	subs	r3, r0, #1
 802092e:	fa09 f303 	lsl.w	r3, r9, r3
 8020932:	4213      	tst	r3, r2
 8020934:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8020938:	f04f 0201 	mov.w	r2, #1
 802093c:	f103 33ff 	add.w	r3, r3, #4294967295
 8020940:	fa02 f303 	lsl.w	r3, r2, r3
 8020944:	687a      	ldr	r2, [r7, #4]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8020946:	bf08      	it	eq
 8020948:	f445 3500 	orreq.w	r5, r5, #131072	; 0x20000
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 802094c:	4213      	tst	r3, r2
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 802094e:	bf08      	it	eq
 8020950:	f445 2580 	orreq.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8020954:	f7f3 fe86 	bl	8014664 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8020958:	4680      	mov	r8, r0
 802095a:	2800      	cmp	r0, #0
 802095c:	d0db      	beq.n	8020916 <x509_crt_verifycrl.part.0+0x42>
        mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash );
 802095e:	f10d 0b20 	add.w	fp, sp, #32
 8020962:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020966:	465b      	mov	r3, fp
 8020968:	f7f3 fefe 	bl	8014768 <mbedtls_md>
        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 802096c:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020970:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8020974:	9205      	str	r2, [sp, #20]
 8020976:	4638      	mov	r0, r7
 8020978:	f7ff fb8b 	bl	8020092 <x509_profile_check_key>
 802097c:	9a05      	ldr	r2, [sp, #20]
 802097e:	b108      	cbz	r0, 8020984 <x509_crt_verifycrl.part.0+0xb0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020980:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020984:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8020988:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 802098c:	f894 a0e9 	ldrb.w	sl, [r4, #233]	; 0xe9
 8020990:	9207      	str	r2, [sp, #28]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020992:	4640      	mov	r0, r8
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020994:	9106      	str	r1, [sp, #24]
 8020996:	9305      	str	r3, [sp, #20]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020998:	f7f3 ffb4 	bl	8014904 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 802099c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80209a0:	9303      	str	r3, [sp, #12]
 80209a2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80209a6:	f8cd b000 	str.w	fp, [sp]
 80209aa:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80209ae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80209b2:	9b05      	ldr	r3, [sp, #20]
 80209b4:	4650      	mov	r0, sl
 80209b6:	f7f4 fff1 	bl	801599c <mbedtls_pk_verify_ext>
 80209ba:	2800      	cmp	r0, #0
 80209bc:	d1ab      	bne.n	8020916 <x509_crt_verifycrl.part.0+0x42>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 80209be:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80209c2:	f7ff f83d 	bl	801fa40 <mbedtls_x509_time_is_past>
 80209c6:	b108      	cbz	r0, 80209cc <x509_crt_verifycrl.part.0+0xf8>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 80209c8:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 80209cc:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80209d0:	f7ff f846 	bl	801fa60 <mbedtls_x509_time_is_future>
 80209d4:	b108      	cbz	r0, 80209da <x509_crt_verifycrl.part.0+0x106>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 80209d6:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 80209da:	ee18 0a10 	vmov	r0, s16
 80209de:	4621      	mov	r1, r4
 80209e0:	f7ff ff5c 	bl	802089c <mbedtls_x509_crt_is_revoked>
 80209e4:	2800      	cmp	r0, #0
 80209e6:	d08e      	beq.n	8020906 <x509_crt_verifycrl.part.0+0x32>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 80209e8:	f045 0502 	orr.w	r5, r5, #2
            break;
 80209ec:	e795      	b.n	802091a <x509_crt_verifycrl.part.0+0x46>

080209ee <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 80209ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209f2:	ed2d 8b02 	vpush	{d8}
 80209f6:	b09b      	sub	sp, #108	; 0x6c
 80209f8:	4604      	mov	r4, r0
 80209fa:	4698      	mov	r8, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 80209fc:	30a4      	adds	r0, #164	; 0xa4
    uint32_t ca_flags = 0;
 80209fe:	2300      	movs	r3, #0
{
 8020a00:	ee08 2a10 	vmov	s16, r2
 8020a04:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8020a08:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    uint32_t ca_flags = 0;
 8020a0a:	9309      	str	r3, [sp, #36]	; 0x24
{
 8020a0c:	460e      	mov	r6, r1
    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020a0e:	f7ff f817 	bl	801fa40 <mbedtls_x509_time_is_past>
 8020a12:	b118      	cbz	r0, 8020a1c <x509_crt_verify_top+0x2e>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020a14:	682b      	ldr	r3, [r5, #0]
 8020a16:	f043 0301 	orr.w	r3, r3, #1
 8020a1a:	602b      	str	r3, [r5, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020a1c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8020a20:	f7ff f81e 	bl	801fa60 <mbedtls_x509_time_is_future>
 8020a24:	b118      	cbz	r0, 8020a2e <x509_crt_verify_top+0x40>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020a26:	682b      	ldr	r3, [r5, #0]
 8020a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020a2c:	602b      	str	r3, [r5, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020a2e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020a32:	2301      	movs	r3, #1
 8020a34:	1e42      	subs	r2, r0, #1
 8020a36:	4093      	lsls	r3, r2
 8020a38:	f8d8 2000 	ldr.w	r2, [r8]
 8020a3c:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020a3e:	bf02      	ittt	eq
 8020a40:	682b      	ldreq	r3, [r5, #0]
 8020a42:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020a46:	602b      	streq	r3, [r5, #0]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020a48:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8020a4c:	1e5a      	subs	r2, r3, #1
 8020a4e:	2301      	movs	r3, #1
 8020a50:	4093      	lsls	r3, r2
 8020a52:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020a56:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020a58:	bf02      	ittt	eq
 8020a5a:	682b      	ldreq	r3, [r5, #0]
 8020a5c:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020a60:	602b      	streq	r3, [r5, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020a62:	682b      	ldr	r3, [r5, #0]
 8020a64:	f043 0308 	orr.w	r3, r3, #8
 8020a68:	602b      	str	r3, [r5, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020a6a:	f7f3 fdfb 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020a6e:	4682      	mov	sl, r0
 8020a70:	b160      	cbz	r0, 8020a8c <x509_crt_verify_top+0x9e>
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020a72:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8020a76:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020a7a:	465b      	mov	r3, fp
 8020a7c:	f7f3 fe74 	bl	8014768 <mbedtls_md>
 8020a80:	2700      	movs	r7, #0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020a82:	f8cd b014 	str.w	fp, [sp, #20]
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020a86:	b936      	cbnz	r6, 8020a96 <x509_crt_verify_top+0xa8>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 8020a88:	2f00      	cmp	r7, #0
 8020a8a:	d153      	bne.n	8020b34 <x509_crt_verify_top+0x146>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8020a8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	f040 809c 	bne.w	8020bcc <x509_crt_verify_top+0x1de>
 8020a94:	e087      	b.n	8020ba6 <x509_crt_verify_top+0x1b8>
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8020a96:	fab9 f389 	clz	r3, r9
 8020a9a:	095b      	lsrs	r3, r3, #5
 8020a9c:	2201      	movs	r2, #1
 8020a9e:	4631      	mov	r1, r6
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	f7ff fea7 	bl	80207f4 <x509_crt_check_parent>
 8020aa6:	2800      	cmp	r0, #0
 8020aa8:	d13a      	bne.n	8020b20 <x509_crt_verify_top+0x132>
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020aaa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020aac:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020aae:	429a      	cmp	r2, r3
        check_path_cnt = path_cnt + 1;
 8020ab0:	f109 0b01 	add.w	fp, r9, #1
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020ab4:	d107      	bne.n	8020ac6 <x509_crt_verify_top+0xd8>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020ab6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020ab8:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020aba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020abc:	f001 fb66 	bl	802218c <memcmp>
            check_path_cnt--;
 8020ac0:	2800      	cmp	r0, #0
 8020ac2:	bf08      	it	eq
 8020ac4:	46cb      	moveq	fp, r9
        if( trust_ca->max_pathlen > 0 &&
 8020ac6:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 8020aca:	2b00      	cmp	r3, #0
 8020acc:	dd04      	ble.n	8020ad8 <x509_crt_verify_top+0xea>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 8020ace:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020ad0:	ebab 0b02 	sub.w	fp, fp, r2
        if( trust_ca->max_pathlen > 0 &&
 8020ad4:	455b      	cmp	r3, fp
 8020ad6:	db23      	blt.n	8020b20 <x509_crt_verify_top+0x132>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020ad8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8020adc:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8020ae0:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 8020ae4:	9107      	str	r1, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020ae6:	4650      	mov	r0, sl
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020ae8:	9306      	str	r3, [sp, #24]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020aea:	f7f3 ff0b 	bl	8014904 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020aee:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8020af2:	9203      	str	r2, [sp, #12]
 8020af4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8020af8:	9b05      	ldr	r3, [sp, #20]
 8020afa:	9300      	str	r3, [sp, #0]
 8020afc:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8020b00:	9b06      	ldr	r3, [sp, #24]
 8020b02:	9907      	ldr	r1, [sp, #28]
 8020b04:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020b08:	4658      	mov	r0, fp
 8020b0a:	f7f4 ff47 	bl	801599c <mbedtls_pk_verify_ext>
 8020b0e:	b938      	cbnz	r0, 8020b20 <x509_crt_verify_top+0x132>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020b10:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 8020b14:	f7fe ff94 	bl	801fa40 <mbedtls_x509_time_is_past>
 8020b18:	b128      	cbz	r0, 8020b26 <x509_crt_verify_top+0x138>
            if ( future_past_ca == NULL )
 8020b1a:	2f00      	cmp	r7, #0
 8020b1c:	bf08      	it	eq
 8020b1e:	4637      	moveq	r7, r6
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020b20:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8020b24:	e7af      	b.n	8020a86 <x509_crt_verify_top+0x98>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020b26:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 8020b2a:	f7fe ff99 	bl	801fa60 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020b2e:	2800      	cmp	r0, #0
 8020b30:	d1f3      	bne.n	8020b1a <x509_crt_verify_top+0x12c>
 8020b32:	4637      	mov	r7, r6
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020b34:	682b      	ldr	r3, [r5, #0]
 8020b36:	f023 0308 	bic.w	r3, r3, #8
 8020b3a:	602b      	str	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8020b3c:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8020b40:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8020b44:	4640      	mov	r0, r8
 8020b46:	f7ff faa4 	bl	8020092 <x509_profile_check_key>
 8020b4a:	b118      	cbz	r0, 8020b54 <x509_crt_verify_top+0x166>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020b4c:	682b      	ldr	r3, [r5, #0]
 8020b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020b52:	602b      	str	r3, [r5, #0]
    if( trust_ca != NULL &&
 8020b54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020b58:	429a      	cmp	r2, r3
 8020b5a:	d106      	bne.n	8020b6a <x509_crt_verify_top+0x17c>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020b5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020b5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8020b60:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020b62:	f001 fb13 	bl	802218c <memcmp>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8020b66:	2800      	cmp	r0, #0
 8020b68:	d090      	beq.n	8020a8c <x509_crt_verify_top+0x9e>
    if( ca == NULL )
 8020b6a:	4643      	mov	r3, r8
 8020b6c:	ee18 2a10 	vmov	r2, s16
 8020b70:	4639      	mov	r1, r7
 8020b72:	4620      	mov	r0, r4
 8020b74:	f7ff feae 	bl	80208d4 <x509_crt_verifycrl.part.0>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8020b78:	682b      	ldr	r3, [r5, #0]
 8020b7a:	4318      	orrs	r0, r3
 8020b7c:	6028      	str	r0, [r5, #0]
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8020b7e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8020b82:	f7fe ff5d 	bl	801fa40 <mbedtls_x509_time_is_past>
 8020b86:	b118      	cbz	r0, 8020b90 <x509_crt_verify_top+0x1a2>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b8a:	f043 0301 	orr.w	r3, r3, #1
 8020b8e:	9309      	str	r3, [sp, #36]	; 0x24
        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020b90:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8020b94:	f7fe ff64 	bl	801fa60 <mbedtls_x509_time_is_future>
 8020b98:	b118      	cbz	r0, 8020ba2 <x509_crt_verify_top+0x1b4>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020b9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020ba0:	9309      	str	r3, [sp, #36]	; 0x24
        if( NULL != f_vrfy )
 8020ba2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020ba4:	b94b      	cbnz	r3, 8020bba <x509_crt_verify_top+0x1cc>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8020ba6:	682b      	ldr	r3, [r5, #0]
 8020ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020baa:	4313      	orrs	r3, r2
 8020bac:	602b      	str	r3, [r5, #0]

    return( 0 );
 8020bae:	2000      	movs	r0, #0
}
 8020bb0:	b01b      	add	sp, #108	; 0x6c
 8020bb2:	ecbd 8b02 	vpop	{d8}
 8020bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 8020bba:	e9dd 6029 	ldrd	r6, r0, [sp, #164]	; 0xa4
 8020bbe:	ab09      	add	r3, sp, #36	; 0x24
 8020bc0:	f109 0201 	add.w	r2, r9, #1
 8020bc4:	4639      	mov	r1, r7
 8020bc6:	47b0      	blx	r6
 8020bc8:	2800      	cmp	r0, #0
 8020bca:	d1f1      	bne.n	8020bb0 <x509_crt_verify_top+0x1c2>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020bcc:	4621      	mov	r1, r4
 8020bce:	462b      	mov	r3, r5
 8020bd0:	e9dd 4029 	ldrd	r4, r0, [sp, #164]	; 0xa4
 8020bd4:	464a      	mov	r2, r9
 8020bd6:	47a0      	blx	r4
 8020bd8:	2800      	cmp	r0, #0
 8020bda:	d0e4      	beq.n	8020ba6 <x509_crt_verify_top+0x1b8>
 8020bdc:	e7e8      	b.n	8020bb0 <x509_crt_verify_top+0x1c2>
	...

08020be0 <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020be4:	ed2d 8b02 	vpush	{d8}
 8020be8:	b09d      	sub	sp, #116	; 0x74
 8020bea:	e9dd 8728 	ldrd	r8, r7, [sp, #160]	; 0xa0
 8020bee:	4699      	mov	r9, r3
    int ret;
    uint32_t parent_flags = 0;
 8020bf0:	2300      	movs	r3, #0
{
 8020bf2:	ee08 2a10 	vmov	s16, r2
 8020bf6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    uint32_t parent_flags = 0;
 8020bf8:	930b      	str	r3, [sp, #44]	; 0x2c
{
 8020bfa:	4605      	mov	r5, r0
 8020bfc:	460e      	mov	r6, r1
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8020bfe:	b15f      	cbz	r7, 8020c18 <x509_crt_verify_child+0x38>
 8020c00:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8020c04:	304c      	adds	r0, #76	; 0x4c
 8020c06:	f7ff f9d9 	bl	801ffbc <x509_name_cmp>
 8020c0a:	b910      	cbnz	r0, 8020c12 <x509_crt_verify_child+0x32>
        self_cnt++;
 8020c0c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020c0e:	3301      	adds	r3, #1
 8020c10:	932a      	str	r3, [sp, #168]	; 0xa8

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8020c12:	2f08      	cmp	r7, #8
 8020c14:	f000 80b9 	beq.w	8020d8a <x509_crt_verify_child+0x1aa>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020c18:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8020c1c:	f7fe ff10 	bl	801fa40 <mbedtls_x509_time_is_past>
 8020c20:	b118      	cbz	r0, 8020c2a <x509_crt_verify_child+0x4a>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020c22:	6823      	ldr	r3, [r4, #0]
 8020c24:	f043 0301 	orr.w	r3, r3, #1
 8020c28:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020c2a:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8020c2e:	f7fe ff17 	bl	801fa60 <mbedtls_x509_time_is_future>
 8020c32:	b118      	cbz	r0, 8020c3c <x509_crt_verify_child+0x5c>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020c34:	6823      	ldr	r3, [r4, #0]
 8020c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020c3a:	6023      	str	r3, [r4, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020c3c:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020c40:	2301      	movs	r3, #1
 8020c42:	1e42      	subs	r2, r0, #1
 8020c44:	4093      	lsls	r3, r2
 8020c46:	f8d8 2000 	ldr.w	r2, [r8]
 8020c4a:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020c4c:	bf02      	ittt	eq
 8020c4e:	6823      	ldreq	r3, [r4, #0]
 8020c50:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020c54:	6023      	streq	r3, [r4, #0]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020c56:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8020c5a:	1e5a      	subs	r2, r3, #1
 8020c5c:	2301      	movs	r3, #1
 8020c5e:	4093      	lsls	r3, r2
 8020c60:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020c64:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020c66:	bf02      	ittt	eq
 8020c68:	6823      	ldreq	r3, [r4, #0]
 8020c6a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020c6e:	6023      	streq	r3, [r4, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020c70:	f7f3 fcf8 	bl	8014664 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020c74:	4682      	mov	sl, r0
 8020c76:	b920      	cbnz	r0, 8020c82 <x509_crt_verify_child+0xa2>

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020c78:	6823      	ldr	r3, [r4, #0]
 8020c7a:	f043 0308 	orr.w	r3, r3, #8
 8020c7e:	6023      	str	r3, [r4, #0]
 8020c80:	e02f      	b.n	8020ce2 <x509_crt_verify_child+0x102>
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020c82:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8020c86:	ab0c      	add	r3, sp, #48	; 0x30
 8020c88:	f7f3 fd6e 	bl	8014768 <mbedtls_md>
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8020c8c:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020c90:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 8020c94:	9207      	str	r2, [sp, #28]
 8020c96:	4640      	mov	r0, r8
 8020c98:	f7ff f9fb 	bl	8020092 <x509_profile_check_key>
 8020c9c:	9a07      	ldr	r2, [sp, #28]
 8020c9e:	b118      	cbz	r0, 8020ca8 <x509_crt_verify_child+0xc8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020ca0:	6823      	ldr	r3, [r4, #0]
 8020ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020ca6:	6023      	str	r3, [r4, #0]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020ca8:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8020cac:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 8020cb0:	f895 b129 	ldrb.w	fp, [r5, #297]	; 0x129
 8020cb4:	9209      	str	r2, [sp, #36]	; 0x24
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020cb6:	4650      	mov	r0, sl
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020cb8:	9108      	str	r1, [sp, #32]
 8020cba:	9307      	str	r3, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020cbc:	f7f3 fe22 	bl	8014904 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020cc0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8020cc4:	9303      	str	r3, [sp, #12]
 8020cc6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8020cca:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8020cce:	a80c      	add	r0, sp, #48	; 0x30
 8020cd0:	9000      	str	r0, [sp, #0]
 8020cd2:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8020cd6:	9b07      	ldr	r3, [sp, #28]
 8020cd8:	4658      	mov	r0, fp
 8020cda:	f7f4 fe5f 	bl	801599c <mbedtls_pk_verify_ext>
 8020cde:	2800      	cmp	r0, #0
 8020ce0:	d1ca      	bne.n	8020c78 <x509_crt_verify_child+0x98>
    if( ca == NULL )
 8020ce2:	b1ae      	cbz	r6, 8020d10 <x509_crt_verify_child+0x130>
 8020ce4:	4643      	mov	r3, r8
 8020ce6:	464a      	mov	r2, r9
 8020ce8:	4631      	mov	r1, r6
 8020cea:	4628      	mov	r0, r5
 8020cec:	f7ff fdf2 	bl	80208d4 <x509_crt_verifycrl.part.0>
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020cf0:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8020cf2:	ee18 aa10 	vmov	sl, s16
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020cf6:	4318      	orrs	r0, r3
 8020cf8:	6020      	str	r0, [r4, #0]
    for( grandparent = trust_ca;
 8020cfa:	f1ba 0f00 	cmp.w	sl, #0
 8020cfe:	d109      	bne.n	8020d14 <x509_crt_verify_child+0x134>
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020d00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for( grandparent = parent->next;
 8020d02:	f8d6 b130 	ldr.w	fp, [r6, #304]	; 0x130
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020d06:	f107 0a02 	add.w	sl, r7, #2
 8020d0a:	ebaa 0a03 	sub.w	sl, sl, r3
        for( grandparent = parent->next;
 8020d0e:	e01f      	b.n	8020d50 <x509_crt_verify_child+0x170>
        return( flags );
 8020d10:	4630      	mov	r0, r6
 8020d12:	e7ed      	b.n	8020cf0 <x509_crt_verify_child+0x110>
        if( x509_crt_check_parent( parent, grandparent,
 8020d14:	fab7 f387 	clz	r3, r7
 8020d18:	095b      	lsrs	r3, r3, #5
 8020d1a:	2200      	movs	r2, #0
 8020d1c:	4651      	mov	r1, sl
 8020d1e:	4630      	mov	r0, r6
 8020d20:	f7ff fd68 	bl	80207f4 <x509_crt_check_parent>
 8020d24:	2800      	cmp	r0, #0
 8020d26:	d052      	beq.n	8020dce <x509_crt_verify_child+0x1ee>
         grandparent = grandparent->next )
 8020d28:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
 8020d2c:	e7e5      	b.n	8020cfa <x509_crt_verify_child+0x11a>
            if( grandparent->max_pathlen > 0 &&
 8020d2e:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	dd01      	ble.n	8020d3a <x509_crt_verify_child+0x15a>
 8020d36:	4553      	cmp	r3, sl
 8020d38:	db08      	blt.n	8020d4c <x509_crt_verify_child+0x16c>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8020d3a:	fab7 f387 	clz	r3, r7
 8020d3e:	095b      	lsrs	r3, r3, #5
 8020d40:	2200      	movs	r2, #0
 8020d42:	4659      	mov	r1, fp
 8020d44:	4630      	mov	r0, r6
 8020d46:	f7ff fd55 	bl	80207f4 <x509_crt_check_parent>
 8020d4a:	b300      	cbz	r0, 8020d8e <x509_crt_verify_child+0x1ae>
             grandparent = grandparent->next )
 8020d4c:	f8db b130 	ldr.w	fp, [fp, #304]	; 0x130
        for( grandparent = parent->next;
 8020d50:	f1bb 0f00 	cmp.w	fp, #0
 8020d54:	d1eb      	bne.n	8020d2e <x509_crt_verify_child+0x14e>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 8020d56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020d58:	9304      	str	r3, [sp, #16]
 8020d5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d5c:	9303      	str	r3, [sp, #12]
 8020d5e:	ab0b      	add	r3, sp, #44	; 0x2c
 8020d60:	9302      	str	r3, [sp, #8]
 8020d62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d64:	9301      	str	r3, [sp, #4]
 8020d66:	ee18 1a10 	vmov	r1, s16
 8020d6a:	1c7b      	adds	r3, r7, #1
 8020d6c:	9300      	str	r3, [sp, #0]
 8020d6e:	464a      	mov	r2, r9
 8020d70:	4643      	mov	r3, r8
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 8020d72:	4630      	mov	r0, r6
 8020d74:	f7ff fe3b 	bl	80209ee <x509_crt_verify_top>
 8020d78:	e01b      	b.n	8020db2 <x509_crt_verify_child+0x1d2>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020d7a:	4629      	mov	r1, r5
 8020d7c:	4623      	mov	r3, r4
 8020d7e:	e9dd 502c 	ldrd	r5, r0, [sp, #176]	; 0xb0
 8020d82:	463a      	mov	r2, r7
 8020d84:	47a8      	blx	r5
 8020d86:	b1c0      	cbz	r0, 8020dba <x509_crt_verify_child+0x1da>
 8020d88:	e01c      	b.n	8020dc4 <x509_crt_verify_child+0x1e4>
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8020d8a:	4818      	ldr	r0, [pc, #96]	; (8020dec <x509_crt_verify_child+0x20c>)
 8020d8c:	e01a      	b.n	8020dc4 <x509_crt_verify_child+0x1e4>
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 8020d8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020d90:	9305      	str	r3, [sp, #20]
 8020d92:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020d94:	9304      	str	r3, [sp, #16]
 8020d96:	ab0b      	add	r3, sp, #44	; 0x2c
 8020d98:	9303      	str	r3, [sp, #12]
 8020d9a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020d9c:	9302      	str	r3, [sp, #8]
 8020d9e:	1c7b      	adds	r3, r7, #1
 8020da0:	e9cd 8300 	strd	r8, r3, [sp]
 8020da4:	ee18 2a10 	vmov	r2, s16
 8020da8:	464b      	mov	r3, r9
 8020daa:	4659      	mov	r1, fp
 8020dac:	4630      	mov	r0, r6
 8020dae:	f7ff ff17 	bl	8020be0 <x509_crt_verify_child>
        if( ret != 0 )
 8020db2:	b938      	cbnz	r0, 8020dc4 <x509_crt_verify_child+0x1e4>
    if( NULL != f_vrfy )
 8020db4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d1df      	bne.n	8020d7a <x509_crt_verify_child+0x19a>
            return( ret );

    *flags |= parent_flags;
 8020dba:	6823      	ldr	r3, [r4, #0]
 8020dbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020dbe:	4313      	orrs	r3, r2
 8020dc0:	6023      	str	r3, [r4, #0]

    return( 0 );
 8020dc2:	2000      	movs	r0, #0
}
 8020dc4:	b01d      	add	sp, #116	; 0x74
 8020dc6:	ecbd 8b02 	vpop	{d8}
 8020dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 8020dce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020dd0:	9304      	str	r3, [sp, #16]
 8020dd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020dd4:	9303      	str	r3, [sp, #12]
 8020dd6:	ab0b      	add	r3, sp, #44	; 0x2c
 8020dd8:	9302      	str	r3, [sp, #8]
 8020dda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020ddc:	9301      	str	r3, [sp, #4]
 8020dde:	1c7b      	adds	r3, r7, #1
 8020de0:	9300      	str	r3, [sp, #0]
 8020de2:	464a      	mov	r2, r9
 8020de4:	4643      	mov	r3, r8
 8020de6:	4651      	mov	r1, sl
 8020de8:	e7c3      	b.n	8020d72 <x509_crt_verify_child+0x192>
 8020dea:	bf00      	nop
 8020dec:	ffffd000 	.word	0xffffd000

08020df0 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8020df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020df4:	b089      	sub	sp, #36	; 0x24
 8020df6:	e9dd 8512 	ldrd	r8, r5, [sp, #72]	; 0x48
 8020dfa:	4692      	mov	sl, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 8020dfc:	2200      	movs	r2, #0
{
 8020dfe:	4604      	mov	r4, r0
 8020e00:	4689      	mov	r9, r1
    *flags = 0;
 8020e02:	602a      	str	r2, [r5, #0]

    if( profile == NULL )
 8020e04:	461e      	mov	r6, r3
 8020e06:	2b00      	cmp	r3, #0
 8020e08:	f000 8096 	beq.w	8020f38 <mbedtls_x509_crt_verify_with_profile+0x148>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 8020e0c:	f1b8 0f00 	cmp.w	r8, #0
 8020e10:	d026      	beq.n	8020e60 <mbedtls_x509_crt_verify_with_profile+0x70>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8020e12:	4640      	mov	r0, r8
 8020e14:	f7df f9e6 	bl	80001e4 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8020e18:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 8020e1c:	069b      	lsls	r3, r3, #26
        cn_len = strlen( cn );
 8020e1e:	4683      	mov	fp, r0
        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8020e20:	d53d      	bpl.n	8020e9e <mbedtls_x509_crt_verify_with_profile+0xae>
        {
            cur = &crt->subject_alt_names;
 8020e22:	f104 07e8 	add.w	r7, r4, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	455b      	cmp	r3, fp
 8020e2a:	d107      	bne.n	8020e3c <mbedtls_x509_crt_verify_with_profile+0x4c>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 8020e2c:	68b9      	ldr	r1, [r7, #8]
 8020e2e:	9307      	str	r3, [sp, #28]
 8020e30:	465a      	mov	r2, fp
 8020e32:	4640      	mov	r0, r8
 8020e34:	f7ff f8aa 	bl	801ff8c <x509_memcasecmp>
                if( cur->buf.len == cn_len &&
 8020e38:	9b07      	ldr	r3, [sp, #28]
 8020e3a:	b188      	cbz	r0, 8020e60 <mbedtls_x509_crt_verify_with_profile+0x70>
                    break;

                if( cur->buf.len > 2 &&
 8020e3c:	2b02      	cmp	r3, #2
 8020e3e:	d90a      	bls.n	8020e56 <mbedtls_x509_crt_verify_with_profile+0x66>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8020e40:	4954      	ldr	r1, [pc, #336]	; (8020f94 <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 8020e42:	68b8      	ldr	r0, [r7, #8]
 8020e44:	2202      	movs	r2, #2
 8020e46:	f001 f9a1 	bl	802218c <memcmp>
                if( cur->buf.len > 2 &&
 8020e4a:	b920      	cbnz	r0, 8020e56 <mbedtls_x509_crt_verify_with_profile+0x66>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 8020e4c:	4639      	mov	r1, r7
 8020e4e:	4640      	mov	r0, r8
 8020e50:	f7ff f8f3 	bl	802003a <x509_check_wildcard>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8020e54:	b120      	cbz	r0, 8020e60 <mbedtls_x509_crt_verify_with_profile+0x70>
                {
                    break;
                }

                cur = cur->next;
 8020e56:	68ff      	ldr	r7, [r7, #12]
            while( cur != NULL )
 8020e58:	2f00      	cmp	r7, #0
 8020e5a:	d1e4      	bne.n	8020e26 <mbedtls_x509_crt_verify_with_profile+0x36>
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 8020e5c:	2304      	movs	r3, #4
 8020e5e:	602b      	str	r3, [r5, #0]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 8020e60:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8020e64:	4610      	mov	r0, r2
 8020e66:	9207      	str	r2, [sp, #28]
 8020e68:	f7f4 fe0e 	bl	8015a88 <mbedtls_pk_get_type>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020e6c:	2301      	movs	r3, #1
 8020e6e:	1e41      	subs	r1, r0, #1
 8020e70:	408b      	lsls	r3, r1
 8020e72:	6871      	ldr	r1, [r6, #4]
 8020e74:	9a07      	ldr	r2, [sp, #28]
 8020e76:	420b      	tst	r3, r1

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020e78:	bf02      	ittt	eq
 8020e7a:	682b      	ldreq	r3, [r5, #0]
 8020e7c:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020e80:	602b      	streq	r3, [r5, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 8020e82:	4601      	mov	r1, r0
 8020e84:	4630      	mov	r0, r6
 8020e86:	f7ff f904 	bl	8020092 <x509_profile_check_key>
 8020e8a:	b118      	cbz	r0, 8020e94 <mbedtls_x509_crt_verify_with_profile+0xa4>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020e8c:	682b      	ldr	r3, [r5, #0]
 8020e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020e92:	602b      	str	r3, [r5, #0]
{
 8020e94:	464f      	mov	r7, r9

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8020e96:	bb5f      	cbnz	r7, 8020ef0 <mbedtls_x509_crt_verify_with_profile+0x100>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8020e98:	f8d4 7130 	ldr.w	r7, [r4, #304]	; 0x130
 8020e9c:	e03c      	b.n	8020f18 <mbedtls_x509_crt_verify_with_profile+0x128>
        name = &crt->subject;
 8020e9e:	f104 076c 	add.w	r7, r4, #108	; 0x6c
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 8020ea2:	687a      	ldr	r2, [r7, #4]
 8020ea4:	2a03      	cmp	r2, #3
 8020ea6:	d11f      	bne.n	8020ee8 <mbedtls_x509_crt_verify_with_profile+0xf8>
 8020ea8:	68b9      	ldr	r1, [r7, #8]
 8020eaa:	483b      	ldr	r0, [pc, #236]	; (8020f98 <mbedtls_x509_crt_verify_with_profile+0x1a8>)
 8020eac:	f001 f96e 	bl	802218c <memcmp>
 8020eb0:	b9d0      	cbnz	r0, 8020ee8 <mbedtls_x509_crt_verify_with_profile+0xf8>
                    if( name->val.len == cn_len &&
 8020eb2:	693b      	ldr	r3, [r7, #16]
 8020eb4:	455b      	cmp	r3, fp
 8020eb6:	d108      	bne.n	8020eca <mbedtls_x509_crt_verify_with_profile+0xda>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 8020eb8:	6978      	ldr	r0, [r7, #20]
 8020eba:	9307      	str	r3, [sp, #28]
 8020ebc:	465a      	mov	r2, fp
 8020ebe:	4641      	mov	r1, r8
 8020ec0:	f7ff f864 	bl	801ff8c <x509_memcasecmp>
                    if( name->val.len == cn_len &&
 8020ec4:	9b07      	ldr	r3, [sp, #28]
 8020ec6:	2800      	cmp	r0, #0
 8020ec8:	d0ca      	beq.n	8020e60 <mbedtls_x509_crt_verify_with_profile+0x70>
                    if( name->val.len > 2 &&
 8020eca:	2b02      	cmp	r3, #2
 8020ecc:	d90c      	bls.n	8020ee8 <mbedtls_x509_crt_verify_with_profile+0xf8>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8020ece:	4931      	ldr	r1, [pc, #196]	; (8020f94 <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 8020ed0:	6978      	ldr	r0, [r7, #20]
 8020ed2:	2202      	movs	r2, #2
 8020ed4:	f001 f95a 	bl	802218c <memcmp>
                    if( name->val.len > 2 &&
 8020ed8:	b930      	cbnz	r0, 8020ee8 <mbedtls_x509_crt_verify_with_profile+0xf8>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 8020eda:	f107 010c 	add.w	r1, r7, #12
 8020ede:	4640      	mov	r0, r8
 8020ee0:	f7ff f8ab 	bl	802003a <x509_check_wildcard>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8020ee4:	2800      	cmp	r0, #0
 8020ee6:	d0bb      	beq.n	8020e60 <mbedtls_x509_crt_verify_with_profile+0x70>
                name = name->next;
 8020ee8:	69bf      	ldr	r7, [r7, #24]
            while( name != NULL )
 8020eea:	2f00      	cmp	r7, #0
 8020eec:	d1d9      	bne.n	8020ea2 <mbedtls_x509_crt_verify_with_profile+0xb2>
 8020eee:	e7b5      	b.n	8020e5c <mbedtls_x509_crt_verify_with_profile+0x6c>
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8020ef0:	2301      	movs	r3, #1
 8020ef2:	2200      	movs	r2, #0
 8020ef4:	4639      	mov	r1, r7
 8020ef6:	4620      	mov	r0, r4
 8020ef8:	f7ff fc7c 	bl	80207f4 <x509_crt_check_parent>
 8020efc:	2800      	cmp	r0, #0
 8020efe:	d03e      	beq.n	8020f7e <mbedtls_x509_crt_verify_with_profile+0x18e>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8020f00:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8020f04:	e7c7      	b.n	8020e96 <mbedtls_x509_crt_verify_with_profile+0xa6>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8020f06:	2301      	movs	r3, #1
 8020f08:	2200      	movs	r2, #0
 8020f0a:	4639      	mov	r1, r7
 8020f0c:	4620      	mov	r0, r4
 8020f0e:	f7ff fc71 	bl	80207f4 <x509_crt_check_parent>
 8020f12:	b1d8      	cbz	r0, 8020f4c <mbedtls_x509_crt_verify_with_profile+0x15c>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8020f14:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8020f18:	2f00      	cmp	r7, #0
 8020f1a:	d1f4      	bne.n	8020f06 <mbedtls_x509_crt_verify_with_profile+0x116>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 8020f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020f1e:	9304      	str	r3, [sp, #16]
 8020f20:	e9cd 7700 	strd	r7, r7, [sp]
 8020f24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020f26:	4652      	mov	r2, sl
 8020f28:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8020f2c:	4649      	mov	r1, r9
 8020f2e:	4633      	mov	r3, r6
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 8020f30:	4620      	mov	r0, r4
 8020f32:	f7ff fd5c 	bl	80209ee <x509_crt_verify_top>
        if( ret != 0 )
 8020f36:	e017      	b.n	8020f68 <mbedtls_x509_crt_verify_with_profile+0x178>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 8020f38:	4818      	ldr	r0, [pc, #96]	; (8020f9c <mbedtls_x509_crt_verify_with_profile+0x1ac>)
 8020f3a:	e01a      	b.n	8020f72 <mbedtls_x509_crt_verify_with_profile+0x182>
exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 8020f3c:	4818      	ldr	r0, [pc, #96]	; (8020fa0 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 8020f3e:	e018      	b.n	8020f72 <mbedtls_x509_crt_verify_with_profile+0x182>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 8020f40:	682a      	ldr	r2, [r5, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 8020f42:	4b18      	ldr	r3, [pc, #96]	; (8020fa4 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8020f44:	2a00      	cmp	r2, #0
 8020f46:	bf18      	it	ne
 8020f48:	4618      	movne	r0, r3
 8020f4a:	e015      	b.n	8020f78 <mbedtls_x509_crt_verify_with_profile+0x188>
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 8020f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020f4e:	9305      	str	r3, [sp, #20]
 8020f50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020f52:	9600      	str	r6, [sp, #0]
 8020f54:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8020f58:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8020f5c:	4653      	mov	r3, sl
 8020f5e:	464a      	mov	r2, r9
 8020f60:	4639      	mov	r1, r7
 8020f62:	4620      	mov	r0, r4
 8020f64:	f7ff fe3c 	bl	8020be0 <x509_crt_verify_child>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 8020f68:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 8020f6c:	d0e6      	beq.n	8020f3c <mbedtls_x509_crt_verify_with_profile+0x14c>
    if( ret != 0 )
 8020f6e:	2800      	cmp	r0, #0
 8020f70:	d0e6      	beq.n	8020f40 <mbedtls_x509_crt_verify_with_profile+0x150>
        *flags = (uint32_t) -1;
 8020f72:	f04f 33ff 	mov.w	r3, #4294967295
 8020f76:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 8020f78:	b009      	add	sp, #36	; 0x24
 8020f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 8020f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020f80:	9304      	str	r3, [sp, #16]
 8020f82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020f84:	e9cd 0000 	strd	r0, r0, [sp]
 8020f88:	e9cd 5302 	strd	r5, r3, [sp, #8]
 8020f8c:	4652      	mov	r2, sl
 8020f8e:	4633      	mov	r3, r6
 8020f90:	4639      	mov	r1, r7
 8020f92:	e7cd      	b.n	8020f30 <mbedtls_x509_crt_verify_with_profile+0x140>
 8020f94:	080330b9 	.word	0x080330b9
 8020f98:	08030585 	.word	0x08030585
 8020f9c:	ffffd800 	.word	0xffffd800
 8020fa0:	ffffd000 	.word	0xffffd000
 8020fa4:	ffffd900 	.word	0xffffd900

08020fa8 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 8020fa8:	f44f 729a 	mov.w	r2, #308	; 0x134
 8020fac:	2100      	movs	r1, #0
 8020fae:	f001 b923 	b.w	80221f8 <memset>
	...

08020fb4 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 8020fb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 8020fb8:	4605      	mov	r5, r0
 8020fba:	2800      	cmp	r0, #0
 8020fbc:	d034      	beq.n	8021028 <mbedtls_x509_crt_free+0x74>
    do
    {
        mbedtls_pk_free( &cert_cur->pk );

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
 8020fbe:	4f32      	ldr	r7, [pc, #200]	; (8021088 <mbedtls_x509_crt_free+0xd4>)
 8020fc0:	4604      	mov	r4, r0
 8020fc2:	463e      	mov	r6, r7
        mbedtls_pk_free( &cert_cur->pk );
 8020fc4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8020fc8:	f7f4 fc33 	bl	8015832 <mbedtls_pk_free>
        mbedtls_free( cert_cur->sig_opts );
 8020fcc:	683b      	ldr	r3, [r7, #0]
 8020fce:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8020fd2:	4798      	blx	r3
#endif

        name_cur = cert_cur->issuer.next;
 8020fd4:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 8020fd6:	bb52      	cbnz	r2, 802102e <mbedtls_x509_crt_free+0x7a>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 8020fd8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 8020fdc:	2a00      	cmp	r2, #0
 8020fde:	d131      	bne.n	8021044 <mbedtls_x509_crt_free+0x90>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 8020fe0:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 8020fe4:	2a00      	cmp	r2, #0
 8020fe6:	d138      	bne.n	802105a <mbedtls_x509_crt_free+0xa6>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8020fe8:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 8020fec:	2a00      	cmp	r2, #0
 8020fee:	d13f      	bne.n	8021070 <mbedtls_x509_crt_free+0xbc>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8020ff0:	68a0      	ldr	r0, [r4, #8]
 8020ff2:	b128      	cbz	r0, 8021000 <mbedtls_x509_crt_free+0x4c>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8020ff4:	6861      	ldr	r1, [r4, #4]
 8020ff6:	f7fe ffc1 	bl	801ff7c <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 8020ffa:	6833      	ldr	r3, [r6, #0]
 8020ffc:	68a0      	ldr	r0, [r4, #8]
 8020ffe:	4798      	blx	r3
        }

        cert_cur = cert_cur->next;
 8021000:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8021004:	2c00      	cmp	r4, #0
 8021006:	d1dd      	bne.n	8020fc4 <mbedtls_x509_crt_free+0x10>
 8021008:	462c      	mov	r4, r5

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 802100a:	4620      	mov	r0, r4

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802100c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021010:	9001      	str	r0, [sp, #4]
        cert_cur = cert_cur->next;
 8021012:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8021016:	f7fe ffb1 	bl	801ff7c <mbedtls_zeroize>
        if( cert_prv != crt )
 802101a:	9801      	ldr	r0, [sp, #4]
 802101c:	4285      	cmp	r5, r0
 802101e:	d001      	beq.n	8021024 <mbedtls_x509_crt_free+0x70>
            mbedtls_free( cert_prv );
 8021020:	6833      	ldr	r3, [r6, #0]
 8021022:	4798      	blx	r3
    }
    while( cert_cur != NULL );
 8021024:	2c00      	cmp	r4, #0
 8021026:	d1f0      	bne.n	802100a <mbedtls_x509_crt_free+0x56>
}
 8021028:	b002      	add	sp, #8
 802102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802102e:	4610      	mov	r0, r2
 8021030:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 8021032:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021036:	f7fe ffa1 	bl	801ff7c <mbedtls_zeroize>
            mbedtls_free( name_prv );
 802103a:	6833      	ldr	r3, [r6, #0]
 802103c:	4610      	mov	r0, r2
 802103e:	4798      	blx	r3
            name_cur = name_cur->next;
 8021040:	4642      	mov	r2, r8
 8021042:	e7c8      	b.n	8020fd6 <mbedtls_x509_crt_free+0x22>
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021044:	4610      	mov	r0, r2
 8021046:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 8021048:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802104c:	f7fe ff96 	bl	801ff7c <mbedtls_zeroize>
            mbedtls_free( name_prv );
 8021050:	6833      	ldr	r3, [r6, #0]
 8021052:	4610      	mov	r0, r2
 8021054:	4798      	blx	r3
            name_cur = name_cur->next;
 8021056:	4642      	mov	r2, r8
 8021058:	e7c0      	b.n	8020fdc <mbedtls_x509_crt_free+0x28>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 802105a:	4610      	mov	r0, r2
 802105c:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802105e:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021062:	f7fe ff8b 	bl	801ff7c <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 8021066:	6833      	ldr	r3, [r6, #0]
 8021068:	4610      	mov	r0, r2
 802106a:	4798      	blx	r3
            seq_cur = seq_cur->next;
 802106c:	4642      	mov	r2, r8
 802106e:	e7b9      	b.n	8020fe4 <mbedtls_x509_crt_free+0x30>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021070:	4610      	mov	r0, r2
 8021072:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 8021074:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 8021078:	f7fe ff80 	bl	801ff7c <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 802107c:	6833      	ldr	r3, [r6, #0]
 802107e:	4610      	mov	r0, r2
 8021080:	4798      	blx	r3
            seq_cur = seq_cur->next;
 8021082:	4642      	mov	r2, r8
 8021084:	e7b2      	b.n	8020fec <mbedtls_x509_crt_free+0x38>
 8021086:	bf00      	nop
 8021088:	2000053c 	.word	0x2000053c

0802108c <mbedtls_x509_crt_parse_der>:
{
 802108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021090:	460d      	mov	r5, r1
 8021092:	b09b      	sub	sp, #108	; 0x6c
 8021094:	4616      	mov	r6, r2
    if( crt == NULL || buf == NULL )
 8021096:	4683      	mov	fp, r0
 8021098:	2800      	cmp	r0, #0
 802109a:	f000 8323 	beq.w	80216e4 <mbedtls_x509_crt_parse_der+0x658>
 802109e:	2900      	cmp	r1, #0
 80210a0:	f000 8320 	beq.w	80216e4 <mbedtls_x509_crt_parse_der+0x658>
 80210a4:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 80210a6:	f04f 0a00 	mov.w	sl, #0
    while( crt->version != 0 && crt->next != NULL )
 80210aa:	69a3      	ldr	r3, [r4, #24]
 80210ac:	b1ab      	cbz	r3, 80210da <mbedtls_x509_crt_parse_der+0x4e>
 80210ae:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80210b2:	46a2      	mov	sl, r4
 80210b4:	b953      	cbnz	r3, 80210cc <mbedtls_x509_crt_parse_der+0x40>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80210b6:	4ba7      	ldr	r3, [pc, #668]	; (8021354 <mbedtls_x509_crt_parse_der+0x2c8>)
 80210b8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	2001      	movs	r0, #1
 80210c0:	4798      	blx	r3
 80210c2:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 80210c6:	b918      	cbnz	r0, 80210d0 <mbedtls_x509_crt_parse_der+0x44>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 80210c8:	4ea3      	ldr	r6, [pc, #652]	; (8021358 <mbedtls_x509_crt_parse_der+0x2cc>)
 80210ca:	e2fa      	b.n	80216c2 <mbedtls_x509_crt_parse_der+0x636>
 80210cc:	461c      	mov	r4, r3
 80210ce:	e7ec      	b.n	80210aa <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 80210d0:	f7ff ff6a 	bl	8020fa8 <mbedtls_x509_crt_init>
        crt = crt->next;
 80210d4:	46a2      	mov	sl, r4
 80210d6:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 80210da:	2300      	movs	r3, #0
 80210dc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 80210e0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 80210e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 80210e8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 80210ec:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 80210ee:	2c00      	cmp	r4, #0
 80210f0:	f000 82eb 	beq.w	80216ca <mbedtls_x509_crt_parse_der+0x63e>
    len = buflen;
 80210f4:	e9cd 6505 	strd	r6, r5, [sp, #20]
    end = p + len;
 80210f8:	442e      	add	r6, r5
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80210fa:	2330      	movs	r3, #48	; 0x30
 80210fc:	aa05      	add	r2, sp, #20
 80210fe:	4631      	mov	r1, r6
 8021100:	a806      	add	r0, sp, #24
 8021102:	f7ec fed9 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021106:	b158      	cbz	r0, 8021120 <mbedtls_x509_crt_parse_der+0x94>
        mbedtls_x509_crt_free( crt );
 8021108:	4620      	mov	r0, r4
 802110a:	f7ff ff53 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 802110e:	4e93      	ldr	r6, [pc, #588]	; (802135c <mbedtls_x509_crt_parse_der+0x2d0>)
        if( prev )
 8021110:	f1ba 0f00 	cmp.w	sl, #0
 8021114:	f040 82e2 	bne.w	80216dc <mbedtls_x509_crt_parse_der+0x650>
        if( crt != chain )
 8021118:	45a3      	cmp	fp, r4
 802111a:	f040 82da 	bne.w	80216d2 <mbedtls_x509_crt_parse_der+0x646>
 802111e:	e2d0      	b.n	80216c2 <mbedtls_x509_crt_parse_der+0x636>
    if( len > (size_t) ( end - p ) )
 8021120:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8021124:	1af6      	subs	r6, r6, r3
 8021126:	428e      	cmp	r6, r1
 8021128:	d204      	bcs.n	8021134 <mbedtls_x509_crt_parse_der+0xa8>
        mbedtls_x509_crt_free( crt );
 802112a:	4620      	mov	r0, r4
 802112c:	f7ff ff42 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 8021130:	4e8b      	ldr	r6, [pc, #556]	; (8021360 <mbedtls_x509_crt_parse_der+0x2d4>)
 8021132:	e7ed      	b.n	8021110 <mbedtls_x509_crt_parse_der+0x84>
    crt_end = p + len;
 8021134:	440b      	add	r3, r1
    crt->raw.len = crt_end - buf;
 8021136:	1b59      	subs	r1, r3, r5
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8021138:	4b86      	ldr	r3, [pc, #536]	; (8021354 <mbedtls_x509_crt_parse_der+0x2c8>)
    crt->raw.len = crt_end - buf;
 802113a:	6061      	str	r1, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 802113c:	681b      	ldr	r3, [r3, #0]
 802113e:	2001      	movs	r0, #1
 8021140:	4798      	blx	r3
 8021142:	9006      	str	r0, [sp, #24]
 8021144:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8021146:	b908      	cbnz	r0, 802114c <mbedtls_x509_crt_parse_der+0xc0>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8021148:	4e83      	ldr	r6, [pc, #524]	; (8021358 <mbedtls_x509_crt_parse_der+0x2cc>)
 802114a:	e7e1      	b.n	8021110 <mbedtls_x509_crt_parse_der+0x84>
    memcpy( p, buf, crt->raw.len );
 802114c:	6862      	ldr	r2, [r4, #4]
 802114e:	4629      	mov	r1, r5
 8021150:	f001 f82a 	bl	80221a8 <memcpy>
    p += crt->raw.len - len;
 8021154:	6862      	ldr	r2, [r4, #4]
 8021156:	9b05      	ldr	r3, [sp, #20]
 8021158:	9906      	ldr	r1, [sp, #24]
 802115a:	1ad3      	subs	r3, r2, r3
 802115c:	440b      	add	r3, r1
    end = crt_end = p + len;
 802115e:	eb01 0802 	add.w	r8, r1, r2
    p += crt->raw.len - len;
 8021162:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 8021164:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021166:	aa05      	add	r2, sp, #20
 8021168:	2330      	movs	r3, #48	; 0x30
 802116a:	4641      	mov	r1, r8
 802116c:	a806      	add	r0, sp, #24
 802116e:	f7ec fea3 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021172:	4607      	mov	r7, r0
 8021174:	b140      	cbz	r0, 8021188 <mbedtls_x509_crt_parse_der+0xfc>
        mbedtls_x509_crt_free( crt );
 8021176:	4620      	mov	r0, r4
 8021178:	f7ff ff1c 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 802117c:	f5a7 5606 	sub.w	r6, r7, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 8021180:	2e00      	cmp	r6, #0
 8021182:	f000 829e 	beq.w	80216c2 <mbedtls_x509_crt_parse_der+0x636>
 8021186:	e7c3      	b.n	8021110 <mbedtls_x509_crt_parse_der+0x84>
    end = p + len;
 8021188:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 802118c:	441d      	add	r5, r3
    crt->tbs.len = end - crt->tbs.p;
 802118e:	6963      	ldr	r3, [r4, #20]
 8021190:	1aeb      	subs	r3, r5, r3
 8021192:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021194:	aa17      	add	r2, sp, #92	; 0x5c
 8021196:	23a0      	movs	r3, #160	; 0xa0
 8021198:	4629      	mov	r1, r5
 802119a:	a806      	add	r0, sp, #24
 802119c:	f7ec fe8c 	bl	800deb8 <mbedtls_asn1_get_tag>
 80211a0:	4606      	mov	r6, r0
 80211a2:	b1e8      	cbz	r0, 80211e0 <mbedtls_x509_crt_parse_der+0x154>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80211a4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80211a8:	d127      	bne.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
            *ver = 0;
 80211aa:	61a7      	str	r7, [r4, #24]
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80211ac:	f104 021c 	add.w	r2, r4, #28
 80211b0:	4629      	mov	r1, r5
 80211b2:	a806      	add	r0, sp, #24
 80211b4:	f7fe f826 	bl	801f204 <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80211b8:	4606      	mov	r6, r0
 80211ba:	b9f0      	cbnz	r0, 80211fa <mbedtls_x509_crt_parse_der+0x16e>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80211bc:	f104 0728 	add.w	r7, r4, #40	; 0x28
 80211c0:	ab0b      	add	r3, sp, #44	; 0x2c
 80211c2:	463a      	mov	r2, r7
 80211c4:	4629      	mov	r1, r5
 80211c6:	a806      	add	r0, sp, #24
 80211c8:	f7fe f849 	bl	801f25e <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80211cc:	4606      	mov	r6, r0
 80211ce:	b9a0      	cbnz	r0, 80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version < 0 || crt->version > 2 )
 80211d0:	69a3      	ldr	r3, [r4, #24]
 80211d2:	2b02      	cmp	r3, #2
 80211d4:	d91a      	bls.n	802120c <mbedtls_x509_crt_parse_der+0x180>
        mbedtls_x509_crt_free( crt );
 80211d6:	4620      	mov	r0, r4
 80211d8:	f7ff feec 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 80211dc:	4e61      	ldr	r6, [pc, #388]	; (8021364 <mbedtls_x509_crt_parse_der+0x2d8>)
 80211de:	e797      	b.n	8021110 <mbedtls_x509_crt_parse_der+0x84>
    end = *p + len;
 80211e0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80211e2:	9e06      	ldr	r6, [sp, #24]
 80211e4:	440e      	add	r6, r1
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 80211e6:	f104 0218 	add.w	r2, r4, #24
 80211ea:	4631      	mov	r1, r6
 80211ec:	a806      	add	r0, sp, #24
 80211ee:	f7ec fe8f 	bl	800df10 <mbedtls_asn1_get_int>
 80211f2:	b130      	cbz	r0, 8021202 <mbedtls_x509_crt_parse_der+0x176>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80211f4:	f5b0 5608 	subs.w	r6, r0, #8704	; 0x2200
 80211f8:	d0d8      	beq.n	80211ac <mbedtls_x509_crt_parse_der+0x120>
        mbedtls_x509_crt_free( crt );
 80211fa:	4620      	mov	r0, r4
 80211fc:	f7ff feda 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( ret );
 8021200:	e786      	b.n	8021110 <mbedtls_x509_crt_parse_der+0x84>
    if( *p != end )
 8021202:	9b06      	ldr	r3, [sp, #24]
 8021204:	429e      	cmp	r6, r3
 8021206:	d0d1      	beq.n	80211ac <mbedtls_x509_crt_parse_der+0x120>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 8021208:	4e57      	ldr	r6, [pc, #348]	; (8021368 <mbedtls_x509_crt_parse_der+0x2dc>)
 802120a:	e7f6      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    crt->version++;
 802120c:	3301      	adds	r3, #1
 802120e:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8021210:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8021214:	9300      	str	r3, [sp, #0]
 8021216:	f504 7294 	add.w	r2, r4, #296	; 0x128
 802121a:	f204 1329 	addw	r3, r4, #297	; 0x129
 802121e:	a90b      	add	r1, sp, #44	; 0x2c
 8021220:	4638      	mov	r0, r7
 8021222:	f7fe fa57 	bl	801f6d4 <mbedtls_x509_get_sig_alg>
 8021226:	4606      	mov	r6, r0
 8021228:	2800      	cmp	r0, #0
 802122a:	d1e6      	bne.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    crt->issuer_raw.p = p;
 802122c:	9b06      	ldr	r3, [sp, #24]
 802122e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021230:	aa05      	add	r2, sp, #20
 8021232:	2330      	movs	r3, #48	; 0x30
 8021234:	4629      	mov	r1, r5
 8021236:	a806      	add	r0, sp, #24
 8021238:	f7ec fe3e 	bl	800deb8 <mbedtls_asn1_get_tag>
 802123c:	4606      	mov	r6, r0
 802123e:	b128      	cbz	r0, 802124c <mbedtls_x509_crt_parse_der+0x1c0>
        mbedtls_x509_crt_free( crt );
 8021240:	4620      	mov	r0, r4
 8021242:	f7ff feb7 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8021246:	f5a6 5606 	sub.w	r6, r6, #8576	; 0x2180
 802124a:	e799      	b.n	8021180 <mbedtls_x509_crt_parse_der+0xf4>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 802124c:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8021250:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8021254:	4419      	add	r1, r3
 8021256:	a806      	add	r0, sp, #24
 8021258:	f7fe f8f0 	bl	801f43c <mbedtls_x509_get_name>
 802125c:	4606      	mov	r6, r0
 802125e:	2800      	cmp	r0, #0
 8021260:	d1cb      	bne.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 8021262:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8021264:	9b06      	ldr	r3, [sp, #24]
 8021266:	1a9b      	subs	r3, r3, r2
 8021268:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802126a:	aa17      	add	r2, sp, #92	; 0x5c
 802126c:	2330      	movs	r3, #48	; 0x30
 802126e:	4629      	mov	r1, r5
 8021270:	a806      	add	r0, sp, #24
 8021272:	f7ec fe21 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021276:	2800      	cmp	r0, #0
 8021278:	d07a      	beq.n	8021370 <mbedtls_x509_crt_parse_der+0x2e4>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 802127a:	f5b0 5610 	subs.w	r6, r0, #9216	; 0x2400
 802127e:	d1bc      	bne.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    crt->subject_raw.p = p;
 8021280:	9b06      	ldr	r3, [sp, #24]
 8021282:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021284:	aa05      	add	r2, sp, #20
 8021286:	2330      	movs	r3, #48	; 0x30
 8021288:	4629      	mov	r1, r5
 802128a:	a806      	add	r0, sp, #24
 802128c:	f7ec fe14 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021290:	4606      	mov	r6, r0
 8021292:	2800      	cmp	r0, #0
 8021294:	d1d4      	bne.n	8021240 <mbedtls_x509_crt_parse_der+0x1b4>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 8021296:	9b05      	ldr	r3, [sp, #20]
 8021298:	b14b      	cbz	r3, 80212ae <mbedtls_x509_crt_parse_der+0x222>
 802129a:	9906      	ldr	r1, [sp, #24]
 802129c:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80212a0:	4419      	add	r1, r3
 80212a2:	a806      	add	r0, sp, #24
 80212a4:	f7fe f8ca 	bl	801f43c <mbedtls_x509_get_name>
 80212a8:	4606      	mov	r6, r0
 80212aa:	2800      	cmp	r0, #0
 80212ac:	d1a5      	bne.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    crt->subject_raw.len = p - crt->subject_raw.p;
 80212ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80212b0:	9b06      	ldr	r3, [sp, #24]
 80212b2:	1a9b      	subs	r3, r3, r2
 80212b4:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80212b6:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80212ba:	4629      	mov	r1, r5
 80212bc:	a806      	add	r0, sp, #24
 80212be:	f7f4 ff19 	bl	80160f4 <mbedtls_pk_parse_subpubkey>
 80212c2:	4606      	mov	r6, r0
 80212c4:	2800      	cmp	r0, #0
 80212c6:	d198      	bne.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version == 2 || crt->version == 3 )
 80212c8:	69a3      	ldr	r3, [r4, #24]
 80212ca:	3b02      	subs	r3, #2
 80212cc:	2b01      	cmp	r3, #1
 80212ce:	d806      	bhi.n	80212de <mbedtls_x509_crt_parse_der+0x252>
    if( *p == end )
 80212d0:	9b06      	ldr	r3, [sp, #24]
 80212d2:	429d      	cmp	r5, r3
 80212d4:	d169      	bne.n	80213aa <mbedtls_x509_crt_parse_der+0x31e>
 80212d6:	9b06      	ldr	r3, [sp, #24]
 80212d8:	429d      	cmp	r5, r3
 80212da:	f040 8083 	bne.w	80213e4 <mbedtls_x509_crt_parse_der+0x358>
    if( crt->version == 3 )
 80212de:	69a3      	ldr	r3, [r4, #24]
 80212e0:	2b03      	cmp	r3, #3
 80212e2:	f040 809c 	bne.w	802141e <mbedtls_x509_crt_parse_der+0x392>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 80212e6:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 80212ea:	4629      	mov	r1, r5
 80212ec:	a806      	add	r0, sp, #24
 80212ee:	f7fe fa3b 	bl	801f768 <mbedtls_x509_get_ext>
 80212f2:	4606      	mov	r6, r0
 80212f4:	2800      	cmp	r0, #0
 80212f6:	f040 808e 	bne.w	8021416 <mbedtls_x509_crt_parse_der+0x38a>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 80212fa:	4681      	mov	r9, r0
    while( *p < end )
 80212fc:	9b06      	ldr	r3, [sp, #24]
 80212fe:	429d      	cmp	r5, r3
 8021300:	f200 8092 	bhi.w	8021428 <mbedtls_x509_crt_parse_der+0x39c>
    if( *p != end )
 8021304:	f040 8194 	bne.w	8021630 <mbedtls_x509_crt_parse_der+0x5a4>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8021308:	ab0e      	add	r3, sp, #56	; 0x38
 802130a:	aa11      	add	r2, sp, #68	; 0x44
 802130c:	4641      	mov	r1, r8
 802130e:	a806      	add	r0, sp, #24
 8021310:	f7fd ffa5 	bl	801f25e <mbedtls_x509_get_alg>
 8021314:	4606      	mov	r6, r0
 8021316:	2800      	cmp	r0, #0
 8021318:	f47f af6f 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->sig_oid.len != sig_oid2.len ||
 802131c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802131e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021320:	429a      	cmp	r2, r3
 8021322:	d112      	bne.n	802134a <mbedtls_x509_crt_parse_der+0x2be>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8021324:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021326:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8021328:	f000 ff30 	bl	802218c <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 802132c:	b968      	cbnz	r0, 802134a <mbedtls_x509_crt_parse_der+0x2be>
        sig_params1.len != sig_params2.len ||
 802132e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8021330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021332:	429a      	cmp	r2, r3
 8021334:	d109      	bne.n	802134a <mbedtls_x509_crt_parse_der+0x2be>
        sig_params1.len != sig_params2.len ||
 8021336:	2a00      	cmp	r2, #0
 8021338:	f000 81b5 	beq.w	80216a6 <mbedtls_x509_crt_parse_der+0x61a>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 802133c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802133e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021340:	f000 ff24 	bl	802218c <memcmp>
        ( sig_params1.len != 0 &&
 8021344:	2800      	cmp	r0, #0
 8021346:	f000 81ae 	beq.w	80216a6 <mbedtls_x509_crt_parse_der+0x61a>
        mbedtls_x509_crt_free( crt );
 802134a:	4620      	mov	r0, r4
 802134c:	f7ff fe32 	bl	8020fb4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8021350:	4e06      	ldr	r6, [pc, #24]	; (802136c <mbedtls_x509_crt_parse_der+0x2e0>)
 8021352:	e6dd      	b.n	8021110 <mbedtls_x509_crt_parse_der+0x84>
 8021354:	20000538 	.word	0x20000538
 8021358:	ffffd780 	.word	0xffffd780
 802135c:	ffffde80 	.word	0xffffde80
 8021360:	ffffde1a 	.word	0xffffde1a
 8021364:	ffffda80 	.word	0xffffda80
 8021368:	ffffdd9a 	.word	0xffffdd9a
 802136c:	ffffd980 	.word	0xffffd980
    end = *p + len;
 8021370:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021372:	9f06      	ldr	r7, [sp, #24]
 8021374:	440f      	add	r7, r1
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 8021376:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 802137a:	4639      	mov	r1, r7
 802137c:	a806      	add	r0, sp, #24
 802137e:	f7fe f8dd 	bl	801f53c <mbedtls_x509_get_time>
 8021382:	4606      	mov	r6, r0
 8021384:	2800      	cmp	r0, #0
 8021386:	f47f af38 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 802138a:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 802138e:	4639      	mov	r1, r7
 8021390:	a806      	add	r0, sp, #24
 8021392:	f7fe f8d3 	bl	801f53c <mbedtls_x509_get_time>
 8021396:	4606      	mov	r6, r0
 8021398:	2800      	cmp	r0, #0
 802139a:	f47f af2e 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( *p != end )
 802139e:	9b06      	ldr	r3, [sp, #24]
 80213a0:	429f      	cmp	r7, r3
 80213a2:	f43f af6d 	beq.w	8021280 <mbedtls_x509_crt_parse_der+0x1f4>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80213a6:	4ea3      	ldr	r6, [pc, #652]	; (8021634 <mbedtls_x509_crt_parse_der+0x5a8>)
        mbedtls_x509_crt_free( crt );
 80213a8:	e727      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    uid->tag = **p;
 80213aa:	781b      	ldrb	r3, [r3, #0]
 80213ac:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80213b0:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
 80213b4:	23a1      	movs	r3, #161	; 0xa1
 80213b6:	4629      	mov	r1, r5
 80213b8:	a806      	add	r0, sp, #24
 80213ba:	f7ec fd7d 	bl	800deb8 <mbedtls_asn1_get_tag>
 80213be:	4606      	mov	r6, r0
 80213c0:	b140      	cbz	r0, 80213d4 <mbedtls_x509_crt_parse_der+0x348>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80213c2:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80213c6:	f47f af18 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version == 2 || crt->version == 3 )
 80213ca:	69a3      	ldr	r3, [r4, #24]
 80213cc:	3b02      	subs	r3, #2
 80213ce:	2b01      	cmp	r3, #1
 80213d0:	d981      	bls.n	80212d6 <mbedtls_x509_crt_parse_der+0x24a>
 80213d2:	e784      	b.n	80212de <mbedtls_x509_crt_parse_der+0x252>
    uid->p = *p;
 80213d4:	9b06      	ldr	r3, [sp, #24]
    *p += uid->len;
 80213d6:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    uid->p = *p;
 80213da:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    *p += uid->len;
 80213de:	4413      	add	r3, r2
 80213e0:	9306      	str	r3, [sp, #24]
        if( ret != 0 )
 80213e2:	e7f2      	b.n	80213ca <mbedtls_x509_crt_parse_der+0x33e>
    uid->tag = **p;
 80213e4:	781b      	ldrb	r3, [r3, #0]
 80213e6:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80213ea:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 80213ee:	23a2      	movs	r3, #162	; 0xa2
 80213f0:	4629      	mov	r1, r5
 80213f2:	a806      	add	r0, sp, #24
 80213f4:	f7ec fd60 	bl	800deb8 <mbedtls_asn1_get_tag>
 80213f8:	4606      	mov	r6, r0
 80213fa:	b120      	cbz	r0, 8021406 <mbedtls_x509_crt_parse_der+0x37a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80213fc:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021400:	f47f aefb 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
 8021404:	e76b      	b.n	80212de <mbedtls_x509_crt_parse_der+0x252>
    uid->p = *p;
 8021406:	9b06      	ldr	r3, [sp, #24]
    *p += uid->len;
 8021408:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
    uid->p = *p;
 802140c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    *p += uid->len;
 8021410:	4413      	add	r3, r2
 8021412:	9306      	str	r3, [sp, #24]
        if( ret != 0 )
 8021414:	e763      	b.n	80212de <mbedtls_x509_crt_parse_der+0x252>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021416:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802141a:	f47f aeee 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( p != end )
 802141e:	9b06      	ldr	r3, [sp, #24]
 8021420:	429d      	cmp	r5, r3
 8021422:	f43f af71 	beq.w	8021308 <mbedtls_x509_crt_parse_der+0x27c>
 8021426:	e680      	b.n	802112a <mbedtls_x509_crt_parse_der+0x9e>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021428:	2330      	movs	r3, #48	; 0x30
 802142a:	aa07      	add	r2, sp, #28
 802142c:	4629      	mov	r1, r5
 802142e:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8021430:	e9cd 9914 	strd	r9, r9, [sp, #80]	; 0x50
        int ext_type = 0;
 8021434:	e9cd 9908 	strd	r9, r9, [sp, #32]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8021438:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802143c:	f7ec fd3c 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021440:	b120      	cbz	r0, 802144c <mbedtls_x509_crt_parse_der+0x3c0>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8021442:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
        if( ret != 0 )
 8021446:	2e00      	cmp	r6, #0
 8021448:	d0e9      	beq.n	802141e <mbedtls_x509_crt_parse_der+0x392>
 802144a:	e6d6      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
        end_ext_data = *p + len;
 802144c:	e9dd 3706 	ldrd	r3, r7, [sp, #24]
 8021450:	441f      	add	r7, r3
        extn_oid.tag = **p;
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	9314      	str	r3, [sp, #80]	; 0x50
        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8021456:	aa15      	add	r2, sp, #84	; 0x54
 8021458:	2306      	movs	r3, #6
 802145a:	4629      	mov	r1, r5
 802145c:	a806      	add	r0, sp, #24
 802145e:	f7ec fd2b 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021462:	2800      	cmp	r0, #0
 8021464:	d1ed      	bne.n	8021442 <mbedtls_x509_crt_parse_der+0x3b6>
        extn_oid.p = *p;
 8021466:	9b06      	ldr	r3, [sp, #24]
        *p += extn_oid.len;
 8021468:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.p = *p;
 802146a:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 802146c:	4413      	add	r3, r2
 802146e:	9306      	str	r3, [sp, #24]
        if( ( end - *p ) < 1 )
 8021470:	1aeb      	subs	r3, r5, r3
 8021472:	2b00      	cmp	r3, #0
 8021474:	f340 813a 	ble.w	80216ec <mbedtls_x509_crt_parse_der+0x660>
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 8021478:	aa08      	add	r2, sp, #32
 802147a:	4639      	mov	r1, r7
 802147c:	a806      	add	r0, sp, #24
 802147e:	f7ec fd2f 	bl	800dee0 <mbedtls_asn1_get_bool>
 8021482:	b110      	cbz	r0, 802148a <mbedtls_x509_crt_parse_der+0x3fe>
 8021484:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021488:	d1db      	bne.n	8021442 <mbedtls_x509_crt_parse_der+0x3b6>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 802148a:	2304      	movs	r3, #4
 802148c:	aa07      	add	r2, sp, #28
 802148e:	4639      	mov	r1, r7
 8021490:	a806      	add	r0, sp, #24
 8021492:	f7ec fd11 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021496:	2800      	cmp	r0, #0
 8021498:	d1d3      	bne.n	8021442 <mbedtls_x509_crt_parse_der+0x3b6>
        end_ext_octet = *p + len;
 802149a:	e9dd 6306 	ldrd	r6, r3, [sp, #24]
 802149e:	441e      	add	r6, r3
        if( end_ext_octet != end_ext_data )
 80214a0:	42b7      	cmp	r7, r6
 80214a2:	f040 80c5 	bne.w	8021630 <mbedtls_x509_crt_parse_der+0x5a4>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80214a6:	a909      	add	r1, sp, #36	; 0x24
 80214a8:	a814      	add	r0, sp, #80	; 0x50
 80214aa:	f7f3 ff1d 	bl	80152e8 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 80214ae:	b130      	cbz	r0, 80214be <mbedtls_x509_crt_parse_der+0x432>
            if( is_critical )
 80214b0:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 80214b2:	9706      	str	r7, [sp, #24]
            if( is_critical )
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	f43f af21 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80214ba:	4e5f      	ldr	r6, [pc, #380]	; (8021638 <mbedtls_x509_crt_parse_der+0x5ac>)
 80214bc:	e69d      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
        if( ( crt->ext_types & ext_type ) != 0 )
 80214be:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 80214c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80214c4:	ea11 0302 	ands.w	r3, r1, r2
 80214c8:	f040 8112 	bne.w	80216f0 <mbedtls_x509_crt_parse_der+0x664>
        crt->ext_types |= ext_type;
 80214cc:	4311      	orrs	r1, r2
        switch( ext_type )
 80214ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 80214d2:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 80214d6:	d020      	beq.n	802151a <mbedtls_x509_crt_parse_der+0x48e>
 80214d8:	dc06      	bgt.n	80214e8 <mbedtls_x509_crt_parse_der+0x45c>
 80214da:	2a04      	cmp	r2, #4
 80214dc:	d05d      	beq.n	802159a <mbedtls_x509_crt_parse_der+0x50e>
 80214de:	2a20      	cmp	r2, #32
 80214e0:	f000 8090 	beq.w	8021604 <mbedtls_x509_crt_parse_der+0x578>
        if( ret != 0 )
 80214e4:	4e55      	ldr	r6, [pc, #340]	; (802163c <mbedtls_x509_crt_parse_der+0x5b0>)
 80214e6:	e688      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
        switch( ext_type )
 80214e8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80214ec:	d07b      	beq.n	80215e6 <mbedtls_x509_crt_parse_der+0x55a>
 80214ee:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80214f2:	d1f7      	bne.n	80214e4 <mbedtls_x509_crt_parse_der+0x458>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80214f4:	aa17      	add	r2, sp, #92	; 0x5c
 80214f6:	4639      	mov	r1, r7
 80214f8:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80214fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80214fc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8021500:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021502:	f7ec fd3c 	bl	800df7e <mbedtls_asn1_get_bitstring>
 8021506:	2800      	cmp	r0, #0
 8021508:	d151      	bne.n	80215ae <mbedtls_x509_crt_parse_der+0x522>
    if( bs.len != 1 )
 802150a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802150c:	2b01      	cmp	r3, #1
 802150e:	d155      	bne.n	80215bc <mbedtls_x509_crt_parse_der+0x530>
    *ns_cert_type = *bs.p;
 8021510:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021512:	781b      	ldrb	r3, [r3, #0]
 8021514:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            continue;
 8021518:	e6f0      	b.n	80212fc <mbedtls_x509_crt_parse_der+0x270>
    *max_pathlen = 0; /* endless */
 802151a:	e9c4 333f 	strd	r3, r3, [r4, #252]	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802151e:	aa17      	add	r2, sp, #92	; 0x5c
 8021520:	2330      	movs	r3, #48	; 0x30
 8021522:	4639      	mov	r1, r7
 8021524:	a806      	add	r0, sp, #24
 8021526:	f7ec fcc7 	bl	800deb8 <mbedtls_asn1_get_tag>
 802152a:	b128      	cbz	r0, 8021538 <mbedtls_x509_crt_parse_der+0x4ac>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802152c:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8021530:	2e00      	cmp	r6, #0
 8021532:	f43f aee3 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
 8021536:	e660      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( *p == end )
 8021538:	9b06      	ldr	r3, [sp, #24]
 802153a:	429e      	cmp	r6, r3
 802153c:	f43f aede 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8021540:	f104 02fc 	add.w	r2, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8021544:	4631      	mov	r1, r6
 8021546:	a806      	add	r0, sp, #24
 8021548:	9203      	str	r2, [sp, #12]
 802154a:	f7ec fcc9 	bl	800dee0 <mbedtls_asn1_get_bool>
 802154e:	b178      	cbz	r0, 8021570 <mbedtls_x509_crt_parse_der+0x4e4>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021550:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021554:	9a03      	ldr	r2, [sp, #12]
 8021556:	d1e9      	bne.n	802152c <mbedtls_x509_crt_parse_der+0x4a0>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8021558:	4631      	mov	r1, r6
 802155a:	a806      	add	r0, sp, #24
 802155c:	f7ec fcd8 	bl	800df10 <mbedtls_asn1_get_int>
        if( ret != 0 )
 8021560:	2800      	cmp	r0, #0
 8021562:	d1e3      	bne.n	802152c <mbedtls_x509_crt_parse_der+0x4a0>
        if( *ca_istrue != 0 )
 8021564:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8021568:	b113      	cbz	r3, 8021570 <mbedtls_x509_crt_parse_der+0x4e4>
            *ca_istrue = 1;
 802156a:	2301      	movs	r3, #1
 802156c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 8021570:	9b06      	ldr	r3, [sp, #24]
 8021572:	429e      	cmp	r6, r3
 8021574:	f43f aec2 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 8021578:	f504 7280 	add.w	r2, r4, #256	; 0x100
 802157c:	4631      	mov	r1, r6
 802157e:	a806      	add	r0, sp, #24
 8021580:	f7ec fcc6 	bl	800df10 <mbedtls_asn1_get_int>
 8021584:	2800      	cmp	r0, #0
 8021586:	d1d1      	bne.n	802152c <mbedtls_x509_crt_parse_der+0x4a0>
    if( *p != end )
 8021588:	9b06      	ldr	r3, [sp, #24]
 802158a:	429e      	cmp	r6, r3
 802158c:	d150      	bne.n	8021630 <mbedtls_x509_crt_parse_der+0x5a4>
    (*max_pathlen)++;
 802158e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8021592:	3301      	adds	r3, #1
 8021594:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    return( 0 );
 8021598:	e6b0      	b.n	80212fc <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 802159a:	aa17      	add	r2, sp, #92	; 0x5c
 802159c:	4639      	mov	r1, r7
 802159e:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80215a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80215a2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80215a6:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80215a8:	f7ec fce9 	bl	800df7e <mbedtls_asn1_get_bitstring>
 80215ac:	b120      	cbz	r0, 80215b8 <mbedtls_x509_crt_parse_der+0x52c>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80215ae:	f5b0 5614 	subs.w	r6, r0, #9472	; 0x2500
 80215b2:	f43f aea3 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
 80215b6:	e620      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( bs.len < 1 )
 80215b8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80215ba:	b909      	cbnz	r1, 80215c0 <mbedtls_x509_crt_parse_der+0x534>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80215bc:	4e20      	ldr	r6, [pc, #128]	; (8021640 <mbedtls_x509_crt_parse_der+0x5b4>)
        if( ret != 0 )
 80215be:	e61c      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80215c0:	9e19      	ldr	r6, [sp, #100]	; 0x64
    *key_usage = 0;
 80215c2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80215c6:	5c33      	ldrb	r3, [r6, r0]
 80215c8:	00c2      	lsls	r2, r0, #3
 80215ca:	fa03 f202 	lsl.w	r2, r3, r2
 80215ce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80215d2:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80215d4:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80215d6:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 80215d8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 80215dc:	f43f ae8e 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
 80215e0:	2804      	cmp	r0, #4
 80215e2:	d1f0      	bne.n	80215c6 <mbedtls_x509_crt_parse_der+0x53a>
 80215e4:	e68a      	b.n	80212fc <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 80215e6:	2306      	movs	r3, #6
 80215e8:	f504 7284 	add.w	r2, r4, #264	; 0x108
 80215ec:	4639      	mov	r1, r7
 80215ee:	a806      	add	r0, sp, #24
 80215f0:	f7ec fcfa 	bl	800dfe8 <mbedtls_asn1_get_sequence_of>
 80215f4:	2800      	cmp	r0, #0
 80215f6:	d1da      	bne.n	80215ae <mbedtls_x509_crt_parse_der+0x522>
    if( ext_key_usage->buf.p == NULL )
 80215f8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	f47f ae7d 	bne.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
 8021602:	e7db      	b.n	80215bc <mbedtls_x509_crt_parse_der+0x530>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021604:	2330      	movs	r3, #48	; 0x30
 8021606:	aa0a      	add	r2, sp, #40	; 0x28
 8021608:	4639      	mov	r1, r7
 802160a:	a806      	add	r0, sp, #24
 802160c:	f7ec fc54 	bl	800deb8 <mbedtls_asn1_get_tag>
 8021610:	2800      	cmp	r0, #0
 8021612:	d18b      	bne.n	802152c <mbedtls_x509_crt_parse_der+0x4a0>
    if( *p + len != end )
 8021614:	9b06      	ldr	r3, [sp, #24]
 8021616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021618:	4413      	add	r3, r2
 802161a:	429e      	cmp	r6, r3
 802161c:	d108      	bne.n	8021630 <mbedtls_x509_crt_parse_der+0x5a4>
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802161e:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
    while( *p < end )
 8021622:	9b06      	ldr	r3, [sp, #24]
 8021624:	429e      	cmp	r6, r3
 8021626:	d80f      	bhi.n	8021648 <mbedtls_x509_crt_parse_der+0x5bc>
    cur->next = NULL;
 8021628:	f8c7 900c 	str.w	r9, [r7, #12]
    if( *p != end )
 802162c:	f43f ae66 	beq.w	80212fc <mbedtls_x509_crt_parse_der+0x270>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021630:	4e04      	ldr	r6, [pc, #16]	; (8021644 <mbedtls_x509_crt_parse_der+0x5b8>)
            mbedtls_x509_crt_free( crt );
 8021632:	e5e2      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
 8021634:	ffffdb9a 	.word	0xffffdb9a
 8021638:	ffffda9e 	.word	0xffffda9e
 802163c:	ffffdf80 	.word	0xffffdf80
 8021640:	ffffda9c 	.word	0xffffda9c
 8021644:	ffffda9a 	.word	0xffffda9a
        if( ( end - *p ) < 1 )
 8021648:	1af2      	subs	r2, r6, r3
 802164a:	2a00      	cmp	r2, #0
 802164c:	dd4e      	ble.n	80216ec <mbedtls_x509_crt_parse_der+0x660>
        tag = **p;
 802164e:	461a      	mov	r2, r3
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021650:	4631      	mov	r1, r6
        tag = **p;
 8021652:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
 8021656:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021658:	a806      	add	r0, sp, #24
 802165a:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 802165c:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 802165e:	f7ec fbe3 	bl	800de28 <mbedtls_asn1_get_len>
 8021662:	9b03      	ldr	r3, [sp, #12]
 8021664:	2800      	cmp	r0, #0
 8021666:	f47f af61 	bne.w	802152c <mbedtls_x509_crt_parse_der+0x4a0>
        if( ( tag & MBEDTLS_ASN1_CONTEXT_SPECIFIC ) != MBEDTLS_ASN1_CONTEXT_SPECIFIC )
 802166a:	061a      	lsls	r2, r3, #24
 802166c:	f57f af25 	bpl.w	80214ba <mbedtls_x509_crt_parse_der+0x42e>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 8021670:	2b82      	cmp	r3, #130	; 0x82
 8021672:	d004      	beq.n	802167e <mbedtls_x509_crt_parse_der+0x5f2>
            *p += tag_len;
 8021674:	9b06      	ldr	r3, [sp, #24]
 8021676:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
 8021678:	4413      	add	r3, r2
 802167a:	9306      	str	r3, [sp, #24]
 802167c:	e7d1      	b.n	8021622 <mbedtls_x509_crt_parse_der+0x596>
        if( cur->buf.p != NULL )
 802167e:	68bb      	ldr	r3, [r7, #8]
 8021680:	b153      	cbz	r3, 8021698 <mbedtls_x509_crt_parse_der+0x60c>
            if( cur->next != NULL )
 8021682:	68fb      	ldr	r3, [r7, #12]
 8021684:	2b00      	cmp	r3, #0
 8021686:	d133      	bne.n	80216f0 <mbedtls_x509_crt_parse_der+0x664>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 8021688:	4b1a      	ldr	r3, [pc, #104]	; (80216f4 <mbedtls_x509_crt_parse_der+0x668>)
 802168a:	2110      	movs	r1, #16
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	2001      	movs	r0, #1
 8021690:	4798      	blx	r3
 8021692:	60f8      	str	r0, [r7, #12]
            if( cur->next == NULL )
 8021694:	b340      	cbz	r0, 80216e8 <mbedtls_x509_crt_parse_der+0x65c>
 8021696:	4607      	mov	r7, r0
        buf->tag = tag;
 8021698:	2382      	movs	r3, #130	; 0x82
 802169a:	603b      	str	r3, [r7, #0]
        buf->len = tag_len;
 802169c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 802169e:	9b06      	ldr	r3, [sp, #24]
 80216a0:	60bb      	str	r3, [r7, #8]
        buf->len = tag_len;
 80216a2:	607a      	str	r2, [r7, #4]
 80216a4:	e7e8      	b.n	8021678 <mbedtls_x509_crt_parse_der+0x5ec>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80216a6:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80216aa:	4641      	mov	r1, r8
 80216ac:	a806      	add	r0, sp, #24
 80216ae:	f7fd fff3 	bl	801f698 <mbedtls_x509_get_sig>
 80216b2:	4606      	mov	r6, r0
 80216b4:	2800      	cmp	r0, #0
 80216b6:	f47f ada0 	bne.w	80211fa <mbedtls_x509_crt_parse_der+0x16e>
    if( p != end )
 80216ba:	9b06      	ldr	r3, [sp, #24]
 80216bc:	4598      	cmp	r8, r3
 80216be:	f47f ad34 	bne.w	802112a <mbedtls_x509_crt_parse_der+0x9e>
}
 80216c2:	4630      	mov	r0, r6
 80216c4:	b01b      	add	sp, #108	; 0x6c
 80216c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80216ca:	4e0b      	ldr	r6, [pc, #44]	; (80216f8 <mbedtls_x509_crt_parse_der+0x66c>)
        if( prev )
 80216cc:	f1ba 0f00 	cmp.w	sl, #0
 80216d0:	d104      	bne.n	80216dc <mbedtls_x509_crt_parse_der+0x650>
            mbedtls_free( crt );
 80216d2:	4b0a      	ldr	r3, [pc, #40]	; (80216fc <mbedtls_x509_crt_parse_der+0x670>)
 80216d4:	4620      	mov	r0, r4
 80216d6:	681b      	ldr	r3, [r3, #0]
 80216d8:	4798      	blx	r3
 80216da:	e7f2      	b.n	80216c2 <mbedtls_x509_crt_parse_der+0x636>
            prev->next = NULL;
 80216dc:	2300      	movs	r3, #0
 80216de:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 80216e2:	e519      	b.n	8021118 <mbedtls_x509_crt_parse_der+0x8c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80216e4:	4e04      	ldr	r6, [pc, #16]	; (80216f8 <mbedtls_x509_crt_parse_der+0x66c>)
 80216e6:	e7ec      	b.n	80216c2 <mbedtls_x509_crt_parse_der+0x636>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80216e8:	4e05      	ldr	r6, [pc, #20]	; (8021700 <mbedtls_x509_crt_parse_der+0x674>)
 80216ea:	e586      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80216ec:	4e05      	ldr	r6, [pc, #20]	; (8021704 <mbedtls_x509_crt_parse_der+0x678>)
 80216ee:	e584      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 80216f0:	4e05      	ldr	r6, [pc, #20]	; (8021708 <mbedtls_x509_crt_parse_der+0x67c>)
 80216f2:	e582      	b.n	80211fa <mbedtls_x509_crt_parse_der+0x16e>
 80216f4:	20000538 	.word	0x20000538
 80216f8:	ffffd800 	.word	0xffffd800
 80216fc:	2000053c 	.word	0x2000053c
 8021700:	ffffda96 	.word	0xffffda96
 8021704:	ffffdaa0 	.word	0xffffdaa0
 8021708:	ffffdb00 	.word	0xffffdb00

0802170c <mbedtls_x509_crt_parse>:
{
 802170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021710:	468a      	mov	sl, r1
 8021712:	b089      	sub	sp, #36	; 0x24
 8021714:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
 8021716:	4680      	mov	r8, r0
 8021718:	2800      	cmp	r0, #0
 802171a:	d05a      	beq.n	80217d2 <mbedtls_x509_crt_parse+0xc6>
 802171c:	2900      	cmp	r1, #0
 802171e:	d058      	beq.n	80217d2 <mbedtls_x509_crt_parse+0xc6>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8021720:	b14a      	cbz	r2, 8021736 <mbedtls_x509_crt_parse+0x2a>
 8021722:	188a      	adds	r2, r1, r2
 8021724:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8021728:	b92e      	cbnz	r6, 8021736 <mbedtls_x509_crt_parse+0x2a>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 802172a:	492c      	ldr	r1, [pc, #176]	; (80217dc <mbedtls_x509_crt_parse+0xd0>)
 802172c:	4650      	mov	r0, sl
 802172e:	f002 f850 	bl	80237d2 <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8021732:	2800      	cmp	r0, #0
 8021734:	d148      	bne.n	80217c8 <mbedtls_x509_crt_parse+0xbc>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8021736:	463a      	mov	r2, r7
 8021738:	4651      	mov	r1, sl
 802173a:	4640      	mov	r0, r8
 802173c:	f7ff fca6 	bl	802108c <mbedtls_x509_crt_parse_der>
 8021740:	4604      	mov	r4, r0
}
 8021742:	4620      	mov	r0, r4
 8021744:	b009      	add	sp, #36	; 0x24
 8021746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mbedtls_pem_init( &pem );
 802174a:	a805      	add	r0, sp, #20
 802174c:	f7f3 fef7 	bl	801553e <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 8021750:	aa04      	add	r2, sp, #16
 8021752:	9202      	str	r2, [sp, #8]
 8021754:	2200      	movs	r2, #0
 8021756:	e9cd 2200 	strd	r2, r2, [sp]
 802175a:	4653      	mov	r3, sl
 802175c:	4a20      	ldr	r2, [pc, #128]	; (80217e0 <mbedtls_x509_crt_parse+0xd4>)
 802175e:	4659      	mov	r1, fp
 8021760:	a805      	add	r0, sp, #20
 8021762:	f7f3 fef1 	bl	8015548 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 8021766:	4605      	mov	r5, r0
 8021768:	b978      	cbnz	r0, 802178a <mbedtls_x509_crt_parse+0x7e>
                buflen -= use_len;
 802176a:	9a04      	ldr	r2, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 802176c:	4640      	mov	r0, r8
                buflen -= use_len;
 802176e:	1abf      	subs	r7, r7, r2
                buf += use_len;
 8021770:	4492      	add	sl, r2
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 8021772:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8021776:	f7ff fc89 	bl	802108c <mbedtls_x509_crt_parse_der>
 802177a:	4605      	mov	r5, r0
            mbedtls_pem_free( &pem );
 802177c:	a805      	add	r0, sp, #20
 802177e:	f7f4 f83f 	bl	8015800 <mbedtls_pem_free>
            if( ret != 0 )
 8021782:	b9e5      	cbnz	r5, 80217be <mbedtls_x509_crt_parse+0xb2>
            success = 1;
 8021784:	f04f 0901 	mov.w	r9, #1
 8021788:	e00f      	b.n	80217aa <mbedtls_x509_crt_parse+0x9e>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 802178a:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 802178e:	d019      	beq.n	80217c4 <mbedtls_x509_crt_parse+0xb8>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8021790:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8021794:	d00b      	beq.n	80217ae <mbedtls_x509_crt_parse+0xa2>
                mbedtls_pem_free( &pem );
 8021796:	a805      	add	r0, sp, #20
 8021798:	f7f4 f832 	bl	8015800 <mbedtls_pem_free>
                buflen -= use_len;
 802179c:	9a04      	ldr	r2, [sp, #16]
 802179e:	1abf      	subs	r7, r7, r2
                buf += use_len;
 80217a0:	4492      	add	sl, r2
                if( first_error == 0 )
 80217a2:	2c00      	cmp	r4, #0
 80217a4:	bf08      	it	eq
 80217a6:	462c      	moveq	r4, r5
                total_failed++;
 80217a8:	3601      	adds	r6, #1
        while( buflen > 1 )
 80217aa:	2f01      	cmp	r7, #1
 80217ac:	d8cd      	bhi.n	802174a <mbedtls_x509_crt_parse+0x3e>
    if( success )
 80217ae:	f1b9 0f00 	cmp.w	r9, #0
 80217b2:	d110      	bne.n	80217d6 <mbedtls_x509_crt_parse+0xca>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 80217b4:	4b0b      	ldr	r3, [pc, #44]	; (80217e4 <mbedtls_x509_crt_parse+0xd8>)
 80217b6:	2c00      	cmp	r4, #0
 80217b8:	bf08      	it	eq
 80217ba:	461c      	moveq	r4, r3
 80217bc:	e7c1      	b.n	8021742 <mbedtls_x509_crt_parse+0x36>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 80217be:	f515 5f22 	cmn.w	r5, #10368	; 0x2880
 80217c2:	d1ee      	bne.n	80217a2 <mbedtls_x509_crt_parse+0x96>
 80217c4:	462c      	mov	r4, r5
 80217c6:	e7bc      	b.n	8021742 <mbedtls_x509_crt_parse+0x36>
            ret = mbedtls_pem_read_buffer( &pem,
 80217c8:	f8df b010 	ldr.w	fp, [pc, #16]	; 80217dc <mbedtls_x509_crt_parse+0xd0>
    int success = 0, first_error = 0, total_failed = 0;
 80217cc:	4634      	mov	r4, r6
 80217ce:	46b1      	mov	r9, r6
 80217d0:	e7eb      	b.n	80217aa <mbedtls_x509_crt_parse+0x9e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80217d2:	4c05      	ldr	r4, [pc, #20]	; (80217e8 <mbedtls_x509_crt_parse+0xdc>)
 80217d4:	e7b5      	b.n	8021742 <mbedtls_x509_crt_parse+0x36>
 80217d6:	4634      	mov	r4, r6
 80217d8:	e7b3      	b.n	8021742 <mbedtls_x509_crt_parse+0x36>
 80217da:	bf00      	nop
 80217dc:	0802dabe 	.word	0x0802dabe
 80217e0:	0802db5c 	.word	0x0802db5c
 80217e4:	ffffd880 	.word	0xffffd880
 80217e8:	ffffd800 	.word	0xffffd800

080217ec <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
 80217ec:	2200      	movs	r2, #0
{
 80217ee:	b510      	push	{r4, lr}
 80217f0:	4604      	mov	r4, r0
    unsigned int h = 0;
 80217f2:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 80217f4:	5ca1      	ldrb	r1, [r4, r2]
 80217f6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80217fa:	2b09      	cmp	r3, #9
 80217fc:	d80b      	bhi.n	8021816 <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
 80217fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 8021802:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
 8021804:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
 8021808:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 802180c:	bf18      	it	ne
 802180e:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
 8021810:	2a04      	cmp	r2, #4
 8021812:	d1ef      	bne.n	80217f4 <parse_hex4+0x8>
        }
    }

    return h;
}
 8021814:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8021816:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 802181a:	2b05      	cmp	r3, #5
 802181c:	d802      	bhi.n	8021824 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
 802181e:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
 8021822:	e7ee      	b.n	8021802 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8021824:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8021828:	2b05      	cmp	r3, #5
 802182a:	d802      	bhi.n	8021832 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
 802182c:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
 8021830:	e7e7      	b.n	8021802 <parse_hex4+0x16>
            return 0;
 8021832:	2000      	movs	r0, #0
 8021834:	e7ee      	b.n	8021814 <parse_hex4+0x28>
	...

08021838 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8021838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 802183c:	680a      	ldr	r2, [r1, #0]
 802183e:	688b      	ldr	r3, [r1, #8]
{
 8021840:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021842:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021844:	18d0      	adds	r0, r2, r3
 8021846:	5cd3      	ldrb	r3, [r2, r3]
 8021848:	2b22      	cmp	r3, #34	; 0x22
{
 802184a:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 802184c:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
 802184e:	d10a      	bne.n	8021866 <parse_string+0x2e>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021850:	462f      	mov	r7, r5
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
 8021852:	2300      	movs	r3, #0
        while ((*input_end != '\"') && ((size_t)(input_end - input_buffer->content) < input_buffer->length))
 8021854:	783c      	ldrb	r4, [r7, #0]
 8021856:	2c22      	cmp	r4, #34	; 0x22
 8021858:	f000 80ca 	beq.w	80219f0 <parse_string+0x1b8>
 802185c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8021860:	1abe      	subs	r6, r7, r2
 8021862:	428e      	cmp	r6, r1
 8021864:	d302      	bcc.n	802186c <parse_string+0x34>
    if (output != NULL)
    {
        input_buffer->hooks.deallocate(output);
    }

    if (input_pointer != NULL)
 8021866:	bbad      	cbnz	r5, 80218d4 <parse_string+0x9c>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
 8021868:	2000      	movs	r0, #0
 802186a:	e01c      	b.n	80218a6 <parse_string+0x6e>
            if (input_end[0] == '\\')
 802186c:	2c5c      	cmp	r4, #92	; 0x5c
 802186e:	d104      	bne.n	802187a <parse_string+0x42>
 8021870:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8021872:	1abc      	subs	r4, r7, r2
 8021874:	428c      	cmp	r4, r1
 8021876:	d2f6      	bcs.n	8021866 <parse_string+0x2e>
                skipped_bytes++;
 8021878:	3301      	adds	r3, #1
            input_end++;
 802187a:	3701      	adds	r7, #1
 802187c:	e7ea      	b.n	8021854 <parse_string+0x1c>
        if (*input_pointer != '\\')
 802187e:	782b      	ldrb	r3, [r5, #0]
 8021880:	2b5c      	cmp	r3, #92	; 0x5c
 8021882:	d012      	beq.n	80218aa <parse_string+0x72>
            *output_pointer++ = *input_pointer++;
 8021884:	f804 3b01 	strb.w	r3, [r4], #1
 8021888:	3501      	adds	r5, #1
    while (input_pointer < input_end)
 802188a:	42bd      	cmp	r5, r7
 802188c:	d3f7      	bcc.n	802187e <parse_string+0x46>
    *output_pointer = '\0';
 802188e:	2300      	movs	r3, #0
 8021890:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
 8021892:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
 8021894:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8021898:	f8da 3000 	ldr.w	r3, [sl]
 802189c:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
 802189e:	3701      	adds	r7, #1
 80218a0:	f8ca 7008 	str.w	r7, [sl, #8]
    return true;
 80218a4:	2001      	movs	r0, #1
}
 80218a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
 80218aa:	1b7a      	subs	r2, r7, r5
 80218ac:	2a00      	cmp	r2, #0
 80218ae:	dd0d      	ble.n	80218cc <parse_string+0x94>
            switch (input_pointer[1])
 80218b0:	786b      	ldrb	r3, [r5, #1]
 80218b2:	2b75      	cmp	r3, #117	; 0x75
 80218b4:	d80a      	bhi.n	80218cc <parse_string+0x94>
 80218b6:	2b6d      	cmp	r3, #109	; 0x6d
 80218b8:	d812      	bhi.n	80218e0 <parse_string+0xa8>
 80218ba:	2b62      	cmp	r3, #98	; 0x62
 80218bc:	d02a      	beq.n	8021914 <parse_string+0xdc>
 80218be:	d825      	bhi.n	802190c <parse_string+0xd4>
 80218c0:	2b2f      	cmp	r3, #47	; 0x2f
 80218c2:	d028      	beq.n	8021916 <parse_string+0xde>
 80218c4:	2b5c      	cmp	r3, #92	; 0x5c
 80218c6:	d026      	beq.n	8021916 <parse_string+0xde>
 80218c8:	2b22      	cmp	r3, #34	; 0x22
 80218ca:	d024      	beq.n	8021916 <parse_string+0xde>
        input_buffer->hooks.deallocate(output);
 80218cc:	f8da 3014 	ldr.w	r3, [sl, #20]
 80218d0:	4658      	mov	r0, fp
 80218d2:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80218d4:	f8da 0000 	ldr.w	r0, [sl]
 80218d8:	1a28      	subs	r0, r5, r0
 80218da:	f8ca 0008 	str.w	r0, [sl, #8]
 80218de:	e7c3      	b.n	8021868 <parse_string+0x30>
 80218e0:	3b6e      	subs	r3, #110	; 0x6e
 80218e2:	2b07      	cmp	r3, #7
 80218e4:	d8f2      	bhi.n	80218cc <parse_string+0x94>
 80218e6:	a101      	add	r1, pc, #4	; (adr r1, 80218ec <parse_string+0xb4>)
 80218e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80218ec:	08021921 	.word	0x08021921
 80218f0:	080218cd 	.word	0x080218cd
 80218f4:	080218cd 	.word	0x080218cd
 80218f8:	080218cd 	.word	0x080218cd
 80218fc:	08021925 	.word	0x08021925
 8021900:	080218cd 	.word	0x080218cd
 8021904:	08021929 	.word	0x08021929
 8021908:	0802192d 	.word	0x0802192d
            switch (input_pointer[1])
 802190c:	2b66      	cmp	r3, #102	; 0x66
 802190e:	d1dd      	bne.n	80218cc <parse_string+0x94>
                    *output_pointer++ = '\f';
 8021910:	230c      	movs	r3, #12
 8021912:	e000      	b.n	8021916 <parse_string+0xde>
                    *output_pointer++ = '\b';
 8021914:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
 8021916:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
 802191a:	2302      	movs	r3, #2
            input_pointer += sequence_length;
 802191c:	441d      	add	r5, r3
 802191e:	e7b4      	b.n	802188a <parse_string+0x52>
                    *output_pointer++ = '\n';
 8021920:	230a      	movs	r3, #10
 8021922:	e7f8      	b.n	8021916 <parse_string+0xde>
                    *output_pointer++ = '\r';
 8021924:	230d      	movs	r3, #13
 8021926:	e7f6      	b.n	8021916 <parse_string+0xde>
                    *output_pointer++ = '\t';
 8021928:	2309      	movs	r3, #9
 802192a:	e7f4      	b.n	8021916 <parse_string+0xde>
    if ((input_end - first_sequence) < 6)
 802192c:	2a05      	cmp	r2, #5
 802192e:	ddcd      	ble.n	80218cc <parse_string+0x94>
    first_code = parse_hex4(first_sequence + 2);
 8021930:	1ca8      	adds	r0, r5, #2
 8021932:	f7ff ff5b 	bl	80217ec <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8021936:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 802193a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
 802193e:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8021940:	d3c4      	bcc.n	80218cc <parse_string+0x94>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8021942:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 8021946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802194a:	d22d      	bcs.n	80219a8 <parse_string+0x170>
        const unsigned char *second_sequence = first_sequence + 6;
 802194c:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
 802194e:	1afb      	subs	r3, r7, r3
 8021950:	2b05      	cmp	r3, #5
 8021952:	ddbb      	ble.n	80218cc <parse_string+0x94>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8021954:	79ab      	ldrb	r3, [r5, #6]
 8021956:	2b5c      	cmp	r3, #92	; 0x5c
 8021958:	d1b8      	bne.n	80218cc <parse_string+0x94>
 802195a:	79eb      	ldrb	r3, [r5, #7]
 802195c:	2b75      	cmp	r3, #117	; 0x75
 802195e:	d1b5      	bne.n	80218cc <parse_string+0x94>
        second_code = parse_hex4(second_sequence + 2);
 8021960:	f105 0008 	add.w	r0, r5, #8
 8021964:	f7ff ff42 	bl	80217ec <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8021968:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 802196c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021970:	d2ac      	bcs.n	80218cc <parse_string+0x94>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021972:	ea09 2686 	and.w	r6, r9, r6, lsl #10
 8021976:	f3c0 0009 	ubfx	r0, r0, #0, #10
 802197a:	4330      	orrs	r0, r6
 802197c:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
 8021980:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
 8021982:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
 8021986:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8021988:	f100 3eff 	add.w	lr, r0, #4294967295
 802198c:	fa54 fe8e 	uxtab	lr, r4, lr
 8021990:	45a6      	cmp	lr, r4
 8021992:	b2f2      	uxtb	r2, r6
 8021994:	d124      	bne.n	80219e0 <parse_string+0x1a8>
    if (utf8_length > 1)
 8021996:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8021998:	bf14      	ite	ne
 802199a:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 802199e:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
 80219a2:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
 80219a4:	4404      	add	r4, r0
                    if (sequence_length == 0)
 80219a6:	e7b9      	b.n	802191c <parse_string+0xe4>
    if (codepoint < 0x80)
 80219a8:	287f      	cmp	r0, #127	; 0x7f
 80219aa:	d90a      	bls.n	80219c2 <parse_string+0x18a>
    else if (codepoint < 0x800)
 80219ac:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80219b0:	d30c      	bcc.n	80219cc <parse_string+0x194>
    else if (codepoint < 0x10000)
 80219b2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80219b6:	d30e      	bcc.n	80219d6 <parse_string+0x19e>
    else if (codepoint <= 0x10FFFF)
 80219b8:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80219bc:	d286      	bcs.n	80218cc <parse_string+0x94>
        sequence_length = 6; /* \uXXXX */
 80219be:	2306      	movs	r3, #6
 80219c0:	e7df      	b.n	8021982 <parse_string+0x14a>
 80219c2:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
 80219c4:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
 80219c8:	2001      	movs	r0, #1
 80219ca:	e7dd      	b.n	8021988 <parse_string+0x150>
        sequence_length = 6; /* \uXXXX */
 80219cc:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
 80219ce:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
 80219d2:	2002      	movs	r0, #2
 80219d4:	e7d8      	b.n	8021988 <parse_string+0x150>
        sequence_length = 6; /* \uXXXX */
 80219d6:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
 80219d8:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
 80219dc:	2003      	movs	r0, #3
 80219de:	e7d3      	b.n	8021988 <parse_string+0x150>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80219e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80219e4:	f062 017f 	orn	r1, r2, #127	; 0x7f
 80219e8:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
 80219ec:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80219ee:	e7cf      	b.n	8021990 <parse_string+0x158>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80219f0:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80219f4:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80219f6:	f8da 2010 	ldr.w	r2, [sl, #16]
 80219fa:	4418      	add	r0, r3
 80219fc:	4790      	blx	r2
        if (output == NULL)
 80219fe:	4683      	mov	fp, r0
 8021a00:	2800      	cmp	r0, #0
 8021a02:	f43f af30 	beq.w	8021866 <parse_string+0x2e>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021a06:	f8df 9008 	ldr.w	r9, [pc, #8]	; 8021a10 <parse_string+0x1d8>
 8021a0a:	4604      	mov	r4, r0
 8021a0c:	e73d      	b.n	802188a <parse_string+0x52>
 8021a0e:	bf00      	nop
 8021a10:	000ffc00 	.word	0x000ffc00

08021a14 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8021a14:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
 8021a16:	b140      	cbz	r0, 8021a2a <buffer_skip_whitespace+0x16>
 8021a18:	6801      	ldr	r1, [r0, #0]
 8021a1a:	b171      	cbz	r1, 8021a3a <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8021a1c:	6842      	ldr	r2, [r0, #4]
 8021a1e:	6883      	ldr	r3, [r0, #8]
 8021a20:	4293      	cmp	r3, r2
 8021a22:	d206      	bcs.n	8021a32 <buffer_skip_whitespace+0x1e>
 8021a24:	5ccc      	ldrb	r4, [r1, r3]
 8021a26:	2c20      	cmp	r4, #32
 8021a28:	d900      	bls.n	8021a2c <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
 8021a2a:	bd10      	pop	{r4, pc}
       buffer->offset++;
 8021a2c:	3301      	adds	r3, #1
 8021a2e:	6083      	str	r3, [r0, #8]
 8021a30:	e7f5      	b.n	8021a1e <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
 8021a32:	d1fa      	bne.n	8021a2a <buffer_skip_whitespace+0x16>
        buffer->offset--;
 8021a34:	3a01      	subs	r2, #1
 8021a36:	6082      	str	r2, [r0, #8]
 8021a38:	e7f7      	b.n	8021a2a <buffer_skip_whitespace+0x16>
        return NULL;
 8021a3a:	4608      	mov	r0, r1
 8021a3c:	e7f5      	b.n	8021a2a <buffer_skip_whitespace+0x16>
	...

08021a40 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8021a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a42:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8021a44:	4604      	mov	r4, r0
 8021a46:	b348      	cbz	r0, 8021a9c <get_object_item+0x5c>
 8021a48:	b369      	cbz	r1, 8021aa6 <get_object_item+0x66>
    {
        return NULL;
    }

    current_element = object->child;
 8021a4a:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8021a4c:	b9fa      	cbnz	r2, 8021a8e <get_object_item+0x4e>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021a4e:	4e17      	ldr	r6, [pc, #92]	; (8021aac <get_object_item+0x6c>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8021a50:	b324      	cbz	r4, 8021a9c <get_object_item+0x5c>
 8021a52:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8021a54:	b1c3      	cbz	r3, 8021a88 <get_object_item+0x48>
    if (string1 == string2)
 8021a56:	42ab      	cmp	r3, r5
 8021a58:	d020      	beq.n	8021a9c <get_object_item+0x5c>
 8021a5a:	f105 3cff 	add.w	ip, r5, #4294967295
 8021a5e:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021a60:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8021a64:	5d8a      	ldrb	r2, [r1, r6]
 8021a66:	f002 0203 	and.w	r2, r2, #3
 8021a6a:	2a01      	cmp	r2, #1
 8021a6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8021a70:	5cb0      	ldrb	r0, [r6, r2]
 8021a72:	f000 0003 	and.w	r0, r0, #3
 8021a76:	460f      	mov	r7, r1
 8021a78:	bf08      	it	eq
 8021a7a:	f101 0720 	addeq.w	r7, r1, #32
 8021a7e:	2801      	cmp	r0, #1
 8021a80:	bf08      	it	eq
 8021a82:	3220      	addeq	r2, #32
 8021a84:	4297      	cmp	r7, r2
 8021a86:	d00b      	beq.n	8021aa0 <get_object_item+0x60>
        {
            current_element = current_element->next;
 8021a88:	6824      	ldr	r4, [r4, #0]
 8021a8a:	e7e1      	b.n	8021a50 <get_object_item+0x10>
            current_element = current_element->next;
 8021a8c:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8021a8e:	b12c      	cbz	r4, 8021a9c <get_object_item+0x5c>
 8021a90:	6a21      	ldr	r1, [r4, #32]
 8021a92:	4628      	mov	r0, r5
 8021a94:	f7de fb9c 	bl	80001d0 <strcmp>
 8021a98:	2800      	cmp	r0, #0
 8021a9a:	d1f7      	bne.n	8021a8c <get_object_item+0x4c>
        }
    }

    return current_element;
}
 8021a9c:	4620      	mov	r0, r4
 8021a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
 8021aa0:	2900      	cmp	r1, #0
 8021aa2:	d1dd      	bne.n	8021a60 <get_object_item+0x20>
 8021aa4:	e7fa      	b.n	8021a9c <get_object_item+0x5c>
        return NULL;
 8021aa6:	460c      	mov	r4, r1
 8021aa8:	e7f8      	b.n	8021a9c <get_object_item+0x5c>
 8021aaa:	bf00      	nop
 8021aac:	080334c8 	.word	0x080334c8

08021ab0 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
 8021ab0:	b510      	push	{r4, lr}
 8021ab2:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8021ab4:	2028      	movs	r0, #40	; 0x28
 8021ab6:	4798      	blx	r3
    if (node)
 8021ab8:	4604      	mov	r4, r0
 8021aba:	b118      	cbz	r0, 8021ac4 <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
 8021abc:	2228      	movs	r2, #40	; 0x28
 8021abe:	2100      	movs	r1, #0
 8021ac0:	f000 fb9a 	bl	80221f8 <memset>
}
 8021ac4:	4620      	mov	r0, r4
 8021ac6:	bd10      	pop	{r4, pc}

08021ac8 <cJSON_Delete>:
{
 8021ac8:	b570      	push	{r4, r5, r6, lr}
 8021aca:	4d10      	ldr	r5, [pc, #64]	; (8021b0c <cJSON_Delete+0x44>)
 8021acc:	4604      	mov	r4, r0
    while (item != NULL)
 8021ace:	b904      	cbnz	r4, 8021ad2 <cJSON_Delete+0xa>
}
 8021ad0:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021ad2:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
 8021ad4:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021ad6:	05d9      	lsls	r1, r3, #23
 8021ad8:	d403      	bmi.n	8021ae2 <cJSON_Delete+0x1a>
 8021ada:	68a0      	ldr	r0, [r4, #8]
 8021adc:	b968      	cbnz	r0, 8021afa <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021ade:	6920      	ldr	r0, [r4, #16]
 8021ae0:	b988      	cbnz	r0, 8021b06 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8021ae2:	68e3      	ldr	r3, [r4, #12]
 8021ae4:	059b      	lsls	r3, r3, #22
 8021ae6:	d403      	bmi.n	8021af0 <cJSON_Delete+0x28>
 8021ae8:	6a20      	ldr	r0, [r4, #32]
 8021aea:	b108      	cbz	r0, 8021af0 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
 8021aec:	686b      	ldr	r3, [r5, #4]
 8021aee:	4798      	blx	r3
        global_hooks.deallocate(item);
 8021af0:	4620      	mov	r0, r4
 8021af2:	686b      	ldr	r3, [r5, #4]
 8021af4:	4798      	blx	r3
        item = next;
 8021af6:	4634      	mov	r4, r6
 8021af8:	e7e9      	b.n	8021ace <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
 8021afa:	f7ff ffe5 	bl	8021ac8 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021afe:	68e3      	ldr	r3, [r4, #12]
 8021b00:	05da      	lsls	r2, r3, #23
 8021b02:	d5ec      	bpl.n	8021ade <cJSON_Delete+0x16>
 8021b04:	e7ed      	b.n	8021ae2 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
 8021b06:	686b      	ldr	r3, [r5, #4]
 8021b08:	4798      	blx	r3
 8021b0a:	e7ea      	b.n	8021ae2 <cJSON_Delete+0x1a>
 8021b0c:	20000570 	.word	0x20000570

08021b10 <parse_value>:
{
 8021b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b14:	4605      	mov	r5, r0
 8021b16:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021b18:	460c      	mov	r4, r1
 8021b1a:	b909      	cbnz	r1, 8021b20 <parse_value+0x10>
    return false;
 8021b1c:	2000      	movs	r0, #0
 8021b1e:	e023      	b.n	8021b68 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021b20:	680f      	ldr	r7, [r1, #0]
 8021b22:	2f00      	cmp	r7, #0
 8021b24:	d0fa      	beq.n	8021b1c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8021b26:	688e      	ldr	r6, [r1, #8]
 8021b28:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8021b2c:	f106 0904 	add.w	r9, r6, #4
 8021b30:	45c1      	cmp	r9, r8
 8021b32:	d80b      	bhi.n	8021b4c <parse_value+0x3c>
 8021b34:	4990      	ldr	r1, [pc, #576]	; (8021d78 <parse_value+0x268>)
 8021b36:	2204      	movs	r2, #4
 8021b38:	19b8      	adds	r0, r7, r6
 8021b3a:	f001 fe25 	bl	8023788 <strncmp>
 8021b3e:	b928      	cbnz	r0, 8021b4c <parse_value+0x3c>
        item->type = cJSON_NULL;
 8021b40:	2304      	movs	r3, #4
 8021b42:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 8021b44:	f8c4 9008 	str.w	r9, [r4, #8]
    return true;
 8021b48:	2001      	movs	r0, #1
 8021b4a:	e00d      	b.n	8021b68 <parse_value+0x58>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8021b4c:	f106 0a05 	add.w	sl, r6, #5
 8021b50:	45d0      	cmp	r8, sl
 8021b52:	d30c      	bcc.n	8021b6e <parse_value+0x5e>
 8021b54:	4989      	ldr	r1, [pc, #548]	; (8021d7c <parse_value+0x26c>)
 8021b56:	2205      	movs	r2, #5
 8021b58:	19b8      	adds	r0, r7, r6
 8021b5a:	f001 fe15 	bl	8023788 <strncmp>
 8021b5e:	b930      	cbnz	r0, 8021b6e <parse_value+0x5e>
        item->type = cJSON_False;
 8021b60:	2001      	movs	r0, #1
 8021b62:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
 8021b64:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8021b68:	b012      	add	sp, #72	; 0x48
 8021b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8021b6e:	45c1      	cmp	r9, r8
 8021b70:	d80c      	bhi.n	8021b8c <parse_value+0x7c>
 8021b72:	4983      	ldr	r1, [pc, #524]	; (8021d80 <parse_value+0x270>)
 8021b74:	2204      	movs	r2, #4
 8021b76:	19b8      	adds	r0, r7, r6
 8021b78:	f001 fe06 	bl	8023788 <strncmp>
 8021b7c:	b930      	cbnz	r0, 8021b8c <parse_value+0x7c>
        item->type = cJSON_True;
 8021b7e:	2302      	movs	r3, #2
        item->valueint = 1;
 8021b80:	2001      	movs	r0, #1
        item->type = cJSON_True;
 8021b82:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
 8021b84:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
 8021b86:	f8c4 9008 	str.w	r9, [r4, #8]
        return true;
 8021b8a:	e7ed      	b.n	8021b68 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8021b8c:	4546      	cmp	r6, r8
 8021b8e:	d2c5      	bcs.n	8021b1c <parse_value+0xc>
 8021b90:	5dbb      	ldrb	r3, [r7, r6]
 8021b92:	2b22      	cmp	r3, #34	; 0x22
 8021b94:	d104      	bne.n	8021ba0 <parse_value+0x90>
        return parse_string(item, input_buffer);
 8021b96:	4621      	mov	r1, r4
 8021b98:	4628      	mov	r0, r5
 8021b9a:	f7ff fe4d 	bl	8021838 <parse_string>
 8021b9e:	e7e3      	b.n	8021b68 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8021ba0:	2b2d      	cmp	r3, #45	; 0x2d
 8021ba2:	d003      	beq.n	8021bac <parse_value+0x9c>
 8021ba4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021ba8:	2a09      	cmp	r2, #9
 8021baa:	d868      	bhi.n	8021c7e <parse_value+0x16e>
    unsigned char *after_end = NULL;
 8021bac:	2600      	movs	r6, #0
 8021bae:	9601      	str	r6, [sp, #4]
    struct lconv *lconv = localeconv();
 8021bb0:	f000 fad8 	bl	8022164 <localeconv>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021bb4:	6822      	ldr	r2, [r4, #0]
 8021bb6:	2a00      	cmp	r2, #0
 8021bb8:	d0b0      	beq.n	8021b1c <parse_value+0xc>
    return (unsigned char) lconv->decimal_point[0];
 8021bba:	6803      	ldr	r3, [r0, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021bbc:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
    return (unsigned char) lconv->decimal_point[0];
 8021bc0:	f893 c000 	ldrb.w	ip, [r3]
 8021bc4:	4402      	add	r2, r0
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021bc6:	4633      	mov	r3, r6
 8021bc8:	f10d 0808 	add.w	r8, sp, #8
 8021bcc:	18c1      	adds	r1, r0, r3
 8021bce:	428f      	cmp	r7, r1
 8021bd0:	d91c      	bls.n	8021c0c <parse_value+0xfc>
        switch (buffer_at_offset(input_buffer)[i])
 8021bd2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021bd6:	2939      	cmp	r1, #57	; 0x39
 8021bd8:	d80f      	bhi.n	8021bfa <parse_value+0xea>
 8021bda:	292a      	cmp	r1, #42	; 0x2a
 8021bdc:	d916      	bls.n	8021c0c <parse_value+0xfc>
 8021bde:	f1a1 062b 	sub.w	r6, r1, #43	; 0x2b
 8021be2:	2e0e      	cmp	r6, #14
 8021be4:	d812      	bhi.n	8021c0c <parse_value+0xfc>
 8021be6:	e8df f006 	tbb	[pc, r6]
 8021bea:	110c      	.short	0x110c
 8021bec:	0c11370c 	.word	0x0c11370c
 8021bf0:	0c0c0c0c 	.word	0x0c0c0c0c
 8021bf4:	0c0c0c0c 	.word	0x0c0c0c0c
 8021bf8:	0c          	.byte	0x0c
 8021bf9:	00          	.byte	0x00
 8021bfa:	f001 06df 	and.w	r6, r1, #223	; 0xdf
 8021bfe:	2e45      	cmp	r6, #69	; 0x45
 8021c00:	d104      	bne.n	8021c0c <parse_value+0xfc>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8021c02:	f808 1003 	strb.w	r1, [r8, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021c06:	3301      	adds	r3, #1
 8021c08:	2b3f      	cmp	r3, #63	; 0x3f
 8021c0a:	d1df      	bne.n	8021bcc <parse_value+0xbc>
    number_c_string[i] = '\0';
 8021c0c:	aa12      	add	r2, sp, #72	; 0x48
 8021c0e:	4413      	add	r3, r2
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021c10:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
 8021c12:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021c14:	4640      	mov	r0, r8
    number_c_string[i] = '\0';
 8021c16:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021c1a:	f002 fc17 	bl	802444c <strtod>
    if (number_c_string == after_end)
 8021c1e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021c22:	45c1      	cmp	r9, r8
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021c24:	ec57 6b10 	vmov	r6, r7, d0
    if (number_c_string == after_end)
 8021c28:	f43f af78 	beq.w	8021b1c <parse_value+0xc>
    item->valuedouble = number;
 8021c2c:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
 8021c30:	a34f      	add	r3, pc, #316	; (adr r3, 8021d70 <parse_value+0x260>)
 8021c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c36:	ee10 0a10 	vmov	r0, s0
 8021c3a:	4639      	mov	r1, r7
 8021c3c:	f7de ff72 	bl	8000b24 <__aeabi_dcmpge>
 8021c40:	b168      	cbz	r0, 8021c5e <parse_value+0x14e>
        item->valueint = INT_MAX;
 8021c42:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
 8021c46:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
 8021c48:	2308      	movs	r3, #8
 8021c4a:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8021c4c:	68a3      	ldr	r3, [r4, #8]
 8021c4e:	eba9 0808 	sub.w	r8, r9, r8
 8021c52:	4443      	add	r3, r8
    input_buffer->offset++;
 8021c54:	60a3      	str	r3, [r4, #8]
 8021c56:	e777      	b.n	8021b48 <parse_value+0x38>
                number_c_string[i] = decimal_point;
 8021c58:	f808 c003 	strb.w	ip, [r8, r3]
                break;
 8021c5c:	e7d3      	b.n	8021c06 <parse_value+0xf6>
    else if (number <= INT_MIN)
 8021c5e:	4b49      	ldr	r3, [pc, #292]	; (8021d84 <parse_value+0x274>)
 8021c60:	2200      	movs	r2, #0
 8021c62:	4630      	mov	r0, r6
 8021c64:	4639      	mov	r1, r7
 8021c66:	f7de ff53 	bl	8000b10 <__aeabi_dcmple>
 8021c6a:	b110      	cbz	r0, 8021c72 <parse_value+0x162>
        item->valueint = INT_MIN;
 8021c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021c70:	e7e9      	b.n	8021c46 <parse_value+0x136>
        item->valueint = (int)number;
 8021c72:	4630      	mov	r0, r6
 8021c74:	4639      	mov	r1, r7
 8021c76:	f7de ff7f 	bl	8000b78 <__aeabi_d2iz>
 8021c7a:	6168      	str	r0, [r5, #20]
 8021c7c:	e7e4      	b.n	8021c48 <parse_value+0x138>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8021c7e:	2b5b      	cmp	r3, #91	; 0x5b
 8021c80:	d150      	bne.n	8021d24 <parse_value+0x214>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021c82:	68e3      	ldr	r3, [r4, #12]
 8021c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021c88:	f4bf af48 	bcs.w	8021b1c <parse_value+0xc>
    input_buffer->depth++;
 8021c8c:	3301      	adds	r3, #1
 8021c8e:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 8021c90:	5dbb      	ldrb	r3, [r7, r6]
 8021c92:	2b5b      	cmp	r3, #91	; 0x5b
 8021c94:	f47f af42 	bne.w	8021b1c <parse_value+0xc>
    input_buffer->offset++;
 8021c98:	3601      	adds	r6, #1
 8021c9a:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021c9c:	4620      	mov	r0, r4
 8021c9e:	f7ff feb9 	bl	8021a14 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8021ca2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021ca6:	4293      	cmp	r3, r2
 8021ca8:	d25d      	bcs.n	8021d66 <parse_value+0x256>
 8021caa:	6822      	ldr	r2, [r4, #0]
 8021cac:	5cd2      	ldrb	r2, [r2, r3]
 8021cae:	2a5d      	cmp	r2, #93	; 0x5d
 8021cb0:	d109      	bne.n	8021cc6 <parse_value+0x1b6>
    cJSON *head = NULL; /* head of the linked list */
 8021cb2:	2700      	movs	r7, #0
    input_buffer->depth--;
 8021cb4:	68e3      	ldr	r3, [r4, #12]
 8021cb6:	3b01      	subs	r3, #1
 8021cb8:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
 8021cba:	2320      	movs	r3, #32
    item->child = head;
 8021cbc:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
 8021cc0:	68a3      	ldr	r3, [r4, #8]
 8021cc2:	3301      	adds	r3, #1
 8021cc4:	e7c6      	b.n	8021c54 <parse_value+0x144>
    input_buffer->offset--;
 8021cc6:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
 8021cc8:	2600      	movs	r6, #0
    input_buffer->offset--;
 8021cca:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
 8021ccc:	4637      	mov	r7, r6
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021cce:	6920      	ldr	r0, [r4, #16]
 8021cd0:	f7ff feee 	bl	8021ab0 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021cd4:	46b0      	mov	r8, r6
 8021cd6:	4606      	mov	r6, r0
 8021cd8:	2800      	cmp	r0, #0
 8021cda:	f000 809a 	beq.w	8021e12 <parse_value+0x302>
        if (head == NULL)
 8021cde:	b1ff      	cbz	r7, 8021d20 <parse_value+0x210>
            current_item->next = new_item;
 8021ce0:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 8021ce4:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 8021ce8:	68a3      	ldr	r3, [r4, #8]
 8021cea:	3301      	adds	r3, #1
 8021cec:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021cee:	4620      	mov	r0, r4
 8021cf0:	f7ff fe90 	bl	8021a14 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8021cf4:	4621      	mov	r1, r4
 8021cf6:	4630      	mov	r0, r6
 8021cf8:	f7ff ff0a 	bl	8021b10 <parse_value>
 8021cfc:	2800      	cmp	r0, #0
 8021cfe:	f000 808b 	beq.w	8021e18 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8021d02:	4620      	mov	r0, r4
 8021d04:	f7ff fe86 	bl	8021a14 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8021d08:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021d0c:	4293      	cmp	r3, r2
 8021d0e:	f080 8083 	bcs.w	8021e18 <parse_value+0x308>
 8021d12:	6822      	ldr	r2, [r4, #0]
 8021d14:	5cd3      	ldrb	r3, [r2, r3]
 8021d16:	2b2c      	cmp	r3, #44	; 0x2c
 8021d18:	d0d9      	beq.n	8021cce <parse_value+0x1be>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8021d1a:	2b5d      	cmp	r3, #93	; 0x5d
 8021d1c:	d17c      	bne.n	8021e18 <parse_value+0x308>
 8021d1e:	e7c9      	b.n	8021cb4 <parse_value+0x1a4>
 8021d20:	4607      	mov	r7, r0
 8021d22:	e7e1      	b.n	8021ce8 <parse_value+0x1d8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8021d24:	2b7b      	cmp	r3, #123	; 0x7b
 8021d26:	f47f aef9 	bne.w	8021b1c <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021d2a:	68e3      	ldr	r3, [r4, #12]
 8021d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021d30:	f4bf aef4 	bcs.w	8021b1c <parse_value+0xc>
    input_buffer->depth++;
 8021d34:	3301      	adds	r3, #1
 8021d36:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8021d38:	5dbb      	ldrb	r3, [r7, r6]
 8021d3a:	2b7b      	cmp	r3, #123	; 0x7b
 8021d3c:	f47f aeee 	bne.w	8021b1c <parse_value+0xc>
    input_buffer->offset++;
 8021d40:	3601      	adds	r6, #1
 8021d42:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021d44:	4620      	mov	r0, r4
 8021d46:	f7ff fe65 	bl	8021a14 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8021d4a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021d4e:	4293      	cmp	r3, r2
 8021d50:	d209      	bcs.n	8021d66 <parse_value+0x256>
 8021d52:	6822      	ldr	r2, [r4, #0]
 8021d54:	5cd2      	ldrb	r2, [r2, r3]
 8021d56:	2a7d      	cmp	r2, #125	; 0x7d
 8021d58:	d116      	bne.n	8021d88 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
 8021d5a:	2700      	movs	r7, #0
    input_buffer->depth--;
 8021d5c:	68e3      	ldr	r3, [r4, #12]
 8021d5e:	3b01      	subs	r3, #1
 8021d60:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
 8021d62:	2340      	movs	r3, #64	; 0x40
 8021d64:	e7aa      	b.n	8021cbc <parse_value+0x1ac>
        input_buffer->offset--;
 8021d66:	3b01      	subs	r3, #1
 8021d68:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
 8021d6a:	e6d7      	b.n	8021b1c <parse_value+0xc>
 8021d6c:	f3af 8000 	nop.w
 8021d70:	ffc00000 	.word	0xffc00000
 8021d74:	41dfffff 	.word	0x41dfffff
 8021d78:	080334a7 	.word	0x080334a7
 8021d7c:	0802ee5b 	.word	0x0802ee5b
 8021d80:	0802ee56 	.word	0x0802ee56
 8021d84:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
 8021d88:	2600      	movs	r6, #0
    input_buffer->offset--;
 8021d8a:	3b01      	subs	r3, #1
 8021d8c:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
 8021d8e:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
 8021d90:	46b0      	mov	r8, r6
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021d92:	6920      	ldr	r0, [r4, #16]
 8021d94:	f7ff fe8c 	bl	8021ab0 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021d98:	46b1      	mov	r9, r6
 8021d9a:	4606      	mov	r6, r0
 8021d9c:	2800      	cmp	r0, #0
 8021d9e:	d038      	beq.n	8021e12 <parse_value+0x302>
        if (head == NULL)
 8021da0:	b3af      	cbz	r7, 8021e0e <parse_value+0x2fe>
            current_item->next = new_item;
 8021da2:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
 8021da6:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
 8021daa:	68a3      	ldr	r3, [r4, #8]
 8021dac:	3301      	adds	r3, #1
 8021dae:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021db0:	4620      	mov	r0, r4
 8021db2:	f7ff fe2f 	bl	8021a14 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8021db6:	4621      	mov	r1, r4
 8021db8:	4630      	mov	r0, r6
 8021dba:	f7ff fd3d 	bl	8021838 <parse_string>
 8021dbe:	b358      	cbz	r0, 8021e18 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	f7ff fe27 	bl	8021a14 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 8021dc6:	6933      	ldr	r3, [r6, #16]
 8021dc8:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8021dca:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021dce:	4293      	cmp	r3, r2
        current_item->valuestring = NULL;
 8021dd0:	f8c6 8010 	str.w	r8, [r6, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8021dd4:	d220      	bcs.n	8021e18 <parse_value+0x308>
 8021dd6:	6822      	ldr	r2, [r4, #0]
 8021dd8:	5cd2      	ldrb	r2, [r2, r3]
 8021dda:	2a3a      	cmp	r2, #58	; 0x3a
 8021ddc:	d11c      	bne.n	8021e18 <parse_value+0x308>
        input_buffer->offset++;
 8021dde:	3301      	adds	r3, #1
 8021de0:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021de2:	4620      	mov	r0, r4
 8021de4:	f7ff fe16 	bl	8021a14 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8021de8:	4621      	mov	r1, r4
 8021dea:	4630      	mov	r0, r6
 8021dec:	f7ff fe90 	bl	8021b10 <parse_value>
 8021df0:	b190      	cbz	r0, 8021e18 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8021df2:	4620      	mov	r0, r4
 8021df4:	f7ff fe0e 	bl	8021a14 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8021df8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021dfc:	4293      	cmp	r3, r2
 8021dfe:	d20b      	bcs.n	8021e18 <parse_value+0x308>
 8021e00:	6822      	ldr	r2, [r4, #0]
 8021e02:	5cd3      	ldrb	r3, [r2, r3]
 8021e04:	2b2c      	cmp	r3, #44	; 0x2c
 8021e06:	d0c4      	beq.n	8021d92 <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8021e08:	2b7d      	cmp	r3, #125	; 0x7d
 8021e0a:	d105      	bne.n	8021e18 <parse_value+0x308>
 8021e0c:	e7a6      	b.n	8021d5c <parse_value+0x24c>
 8021e0e:	4607      	mov	r7, r0
 8021e10:	e7cb      	b.n	8021daa <parse_value+0x29a>
    if (head != NULL)
 8021e12:	2f00      	cmp	r7, #0
 8021e14:	f43f ae82 	beq.w	8021b1c <parse_value+0xc>
        cJSON_Delete(head);
 8021e18:	4638      	mov	r0, r7
 8021e1a:	f7ff fe55 	bl	8021ac8 <cJSON_Delete>
 8021e1e:	e67d      	b.n	8021b1c <parse_value+0xc>

08021e20 <cJSON_ParseWithOpts>:
{
 8021e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    global_error.json = NULL;
 8021e24:	4f29      	ldr	r7, [pc, #164]	; (8021ecc <cJSON_ParseWithOpts+0xac>)
{
 8021e26:	b088      	sub	sp, #32
 8021e28:	4605      	mov	r5, r0
 8021e2a:	460e      	mov	r6, r1
 8021e2c:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8021e2e:	2100      	movs	r1, #0
 8021e30:	221c      	movs	r2, #28
 8021e32:	a801      	add	r0, sp, #4
    global_error.json = NULL;
 8021e34:	2400      	movs	r4, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8021e36:	f000 f9df 	bl	80221f8 <memset>
    global_error.position = 0;
 8021e3a:	e9c7 4400 	strd	r4, r4, [r7]
    if (value == NULL)
 8021e3e:	2d00      	cmp	r5, #0
 8021e40:	d037      	beq.n	8021eb2 <cJSON_ParseWithOpts+0x92>
    buffer.length = strlen((const char*)value) + sizeof("");
 8021e42:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
 8021e44:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
 8021e46:	f7de f9cd 	bl	80001e4 <strlen>
    buffer.hooks = global_hooks;
 8021e4a:	4b21      	ldr	r3, [pc, #132]	; (8021ed0 <cJSON_ParseWithOpts+0xb0>)
    buffer.length = strlen((const char*)value) + sizeof("");
 8021e4c:	3001      	adds	r0, #1
    buffer.offset = 0;
 8021e4e:	e9cd 0402 	strd	r0, r4, [sp, #8]
    buffer.hooks = global_hooks;
 8021e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021e56:	ab08      	add	r3, sp, #32
 8021e58:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
 8021e5c:	f7ff fe28 	bl	8021ab0 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
 8021e60:	4604      	mov	r4, r0
 8021e62:	b1e8      	cbz	r0, 8021ea0 <cJSON_ParseWithOpts+0x80>
    if (!parse_value(item, buffer_skip_whitespace(&buffer)))
 8021e64:	a801      	add	r0, sp, #4
 8021e66:	f7ff fdd5 	bl	8021a14 <buffer_skip_whitespace>
 8021e6a:	4601      	mov	r1, r0
 8021e6c:	4620      	mov	r0, r4
 8021e6e:	f7ff fe4f 	bl	8021b10 <parse_value>
 8021e72:	b190      	cbz	r0, 8021e9a <cJSON_ParseWithOpts+0x7a>
    if (require_null_terminated)
 8021e74:	f1b8 0f00 	cmp.w	r8, #0
 8021e78:	d104      	bne.n	8021e84 <cJSON_ParseWithOpts+0x64>
    if (return_parse_end)
 8021e7a:	b9e6      	cbnz	r6, 8021eb6 <cJSON_ParseWithOpts+0x96>
}
 8021e7c:	4620      	mov	r0, r4
 8021e7e:	b008      	add	sp, #32
 8021e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buffer_skip_whitespace(&buffer);
 8021e84:	a801      	add	r0, sp, #4
 8021e86:	f7ff fdc5 	bl	8021a14 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8021e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8021e8e:	4293      	cmp	r3, r2
 8021e90:	d203      	bcs.n	8021e9a <cJSON_ParseWithOpts+0x7a>
 8021e92:	9a01      	ldr	r2, [sp, #4]
 8021e94:	5cd3      	ldrb	r3, [r2, r3]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d0ef      	beq.n	8021e7a <cJSON_ParseWithOpts+0x5a>
        cJSON_Delete(item);
 8021e9a:	4620      	mov	r0, r4
 8021e9c:	f7ff fe14 	bl	8021ac8 <cJSON_Delete>
        if (buffer.offset < buffer.length)
 8021ea0:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 8021ea4:	4282      	cmp	r2, r0
 8021ea6:	d30b      	bcc.n	8021ec0 <cJSON_ParseWithOpts+0xa0>
        else if (buffer.length > 0)
 8021ea8:	b100      	cbz	r0, 8021eac <cJSON_ParseWithOpts+0x8c>
            local_error.position = buffer.length - 1;
 8021eaa:	3801      	subs	r0, #1
        if (return_parse_end != NULL)
 8021eac:	b156      	cbz	r6, 8021ec4 <cJSON_ParseWithOpts+0xa4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8021eae:	4428      	add	r0, r5
 8021eb0:	6030      	str	r0, [r6, #0]
    return NULL;
 8021eb2:	2400      	movs	r4, #0
 8021eb4:	e7e2      	b.n	8021e7c <cJSON_ParseWithOpts+0x5c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8021eb6:	9b01      	ldr	r3, [sp, #4]
 8021eb8:	9a03      	ldr	r2, [sp, #12]
 8021eba:	4413      	add	r3, r2
 8021ebc:	6033      	str	r3, [r6, #0]
 8021ebe:	e7dd      	b.n	8021e7c <cJSON_ParseWithOpts+0x5c>
 8021ec0:	4610      	mov	r0, r2
 8021ec2:	e7f3      	b.n	8021eac <cJSON_ParseWithOpts+0x8c>
            global_error = local_error;
 8021ec4:	e9c7 5000 	strd	r5, r0, [r7]
 8021ec8:	e7f3      	b.n	8021eb2 <cJSON_ParseWithOpts+0x92>
 8021eca:	bf00      	nop
 8021ecc:	200010c0 	.word	0x200010c0
 8021ed0:	20000570 	.word	0x20000570

08021ed4 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
 8021ed4:	2200      	movs	r2, #0
 8021ed6:	4611      	mov	r1, r2
 8021ed8:	f7ff bfa2 	b.w	8021e20 <cJSON_ParseWithOpts>

08021edc <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, true);
 8021edc:	2201      	movs	r2, #1
 8021ede:	f7ff bdaf 	b.w	8021a40 <get_object_item>

08021ee2 <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
 8021ee2:	b118      	cbz	r0, 8021eec <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
 8021ee4:	7b00      	ldrb	r0, [r0, #12]
 8021ee6:	1e83      	subs	r3, r0, #2
 8021ee8:	4258      	negs	r0, r3
 8021eea:	4158      	adcs	r0, r3
}
 8021eec:	4770      	bx	lr

08021eee <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
 8021eee:	b120      	cbz	r0, 8021efa <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 8021ef0:	68c0      	ldr	r0, [r0, #12]
 8021ef2:	f010 0003 	ands.w	r0, r0, #3
 8021ef6:	bf18      	it	ne
 8021ef8:	2001      	movne	r0, #1
}
 8021efa:	4770      	bx	lr

08021efc <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
 8021efc:	b120      	cbz	r0, 8021f08 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
 8021efe:	7b00      	ldrb	r0, [r0, #12]
 8021f00:	f1a0 0308 	sub.w	r3, r0, #8
 8021f04:	4258      	negs	r0, r3
 8021f06:	4158      	adcs	r0, r3
}
 8021f08:	4770      	bx	lr

08021f0a <atoi>:
 8021f0a:	220a      	movs	r2, #10
 8021f0c:	2100      	movs	r1, #0
 8021f0e:	f002 bb8b 	b.w	8024628 <strtol>
	...

08021f14 <calloc>:
 8021f14:	4b02      	ldr	r3, [pc, #8]	; (8021f20 <calloc+0xc>)
 8021f16:	460a      	mov	r2, r1
 8021f18:	4601      	mov	r1, r0
 8021f1a:	6818      	ldr	r0, [r3, #0]
 8021f1c:	f000 bbf2 	b.w	8022704 <_calloc_r>
 8021f20:	2000057c 	.word	0x2000057c

08021f24 <__errno>:
 8021f24:	4b01      	ldr	r3, [pc, #4]	; (8021f2c <__errno+0x8>)
 8021f26:	6818      	ldr	r0, [r3, #0]
 8021f28:	4770      	bx	lr
 8021f2a:	bf00      	nop
 8021f2c:	2000057c 	.word	0x2000057c

08021f30 <fiprintf>:
 8021f30:	b40e      	push	{r1, r2, r3}
 8021f32:	b503      	push	{r0, r1, lr}
 8021f34:	4601      	mov	r1, r0
 8021f36:	ab03      	add	r3, sp, #12
 8021f38:	4805      	ldr	r0, [pc, #20]	; (8021f50 <fiprintf+0x20>)
 8021f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8021f3e:	6800      	ldr	r0, [r0, #0]
 8021f40:	9301      	str	r3, [sp, #4]
 8021f42:	f000 fcc3 	bl	80228cc <_vfiprintf_r>
 8021f46:	b002      	add	sp, #8
 8021f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8021f4c:	b003      	add	sp, #12
 8021f4e:	4770      	bx	lr
 8021f50:	2000057c 	.word	0x2000057c

08021f54 <getchar>:
 8021f54:	4b07      	ldr	r3, [pc, #28]	; (8021f74 <getchar+0x20>)
 8021f56:	b510      	push	{r4, lr}
 8021f58:	681c      	ldr	r4, [r3, #0]
 8021f5a:	b124      	cbz	r4, 8021f66 <getchar+0x12>
 8021f5c:	69a3      	ldr	r3, [r4, #24]
 8021f5e:	b913      	cbnz	r3, 8021f66 <getchar+0x12>
 8021f60:	4620      	mov	r0, r4
 8021f62:	f003 fe95 	bl	8025c90 <__sinit>
 8021f66:	6861      	ldr	r1, [r4, #4]
 8021f68:	4620      	mov	r0, r4
 8021f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f6e:	f004 bab9 	b.w	80264e4 <_getc_r>
 8021f72:	bf00      	nop
 8021f74:	2000057c 	.word	0x2000057c

08021f78 <gmtime>:
 8021f78:	b538      	push	{r3, r4, r5, lr}
 8021f7a:	4b0b      	ldr	r3, [pc, #44]	; (8021fa8 <gmtime+0x30>)
 8021f7c:	681d      	ldr	r5, [r3, #0]
 8021f7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021f80:	4604      	mov	r4, r0
 8021f82:	b953      	cbnz	r3, 8021f9a <gmtime+0x22>
 8021f84:	2024      	movs	r0, #36	; 0x24
 8021f86:	f000 f8f1 	bl	802216c <malloc>
 8021f8a:	4602      	mov	r2, r0
 8021f8c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8021f8e:	b920      	cbnz	r0, 8021f9a <gmtime+0x22>
 8021f90:	4b06      	ldr	r3, [pc, #24]	; (8021fac <gmtime+0x34>)
 8021f92:	4807      	ldr	r0, [pc, #28]	; (8021fb0 <gmtime+0x38>)
 8021f94:	2139      	movs	r1, #57	; 0x39
 8021f96:	f002 fe93 	bl	8024cc0 <__assert_func>
 8021f9a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8021f9c:	4620      	mov	r0, r4
 8021f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021fa2:	f000 b807 	b.w	8021fb4 <gmtime_r>
 8021fa6:	bf00      	nop
 8021fa8:	2000057c 	.word	0x2000057c
 8021fac:	080335c8 	.word	0x080335c8
 8021fb0:	080335df 	.word	0x080335df

08021fb4 <gmtime_r>:
 8021fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021fb8:	e9d0 6700 	ldrd	r6, r7, [r0]
 8021fbc:	460c      	mov	r4, r1
 8021fbe:	4a51      	ldr	r2, [pc, #324]	; (8022104 <gmtime_r+0x150>)
 8021fc0:	2300      	movs	r3, #0
 8021fc2:	4630      	mov	r0, r6
 8021fc4:	4639      	mov	r1, r7
 8021fc6:	f7de fe1f 	bl	8000c08 <__aeabi_ldivmod>
 8021fca:	4639      	mov	r1, r7
 8021fcc:	4605      	mov	r5, r0
 8021fce:	4a4d      	ldr	r2, [pc, #308]	; (8022104 <gmtime_r+0x150>)
 8021fd0:	4630      	mov	r0, r6
 8021fd2:	2300      	movs	r3, #0
 8021fd4:	f7de fe18 	bl	8000c08 <__aeabi_ldivmod>
 8021fd8:	2a00      	cmp	r2, #0
 8021fda:	bfbc      	itt	lt
 8021fdc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8021fe0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8021fe4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8021fe8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8021fec:	fbb2 f3f1 	udiv	r3, r2, r1
 8021ff0:	fb01 2213 	mls	r2, r1, r3, r2
 8021ff4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8021ff8:	bfac      	ite	ge
 8021ffa:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8021ffe:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8022002:	60a3      	str	r3, [r4, #8]
 8022004:	fbb2 f3f1 	udiv	r3, r2, r1
 8022008:	fb01 2213 	mls	r2, r1, r3, r2
 802200c:	6063      	str	r3, [r4, #4]
 802200e:	6022      	str	r2, [r4, #0]
 8022010:	1cc3      	adds	r3, r0, #3
 8022012:	2207      	movs	r2, #7
 8022014:	fb93 f2f2 	sdiv	r2, r3, r2
 8022018:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802201c:	1a9b      	subs	r3, r3, r2
 802201e:	bf48      	it	mi
 8022020:	3307      	addmi	r3, #7
 8022022:	2800      	cmp	r0, #0
 8022024:	61a3      	str	r3, [r4, #24]
 8022026:	bfb8      	it	lt
 8022028:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 802202c:	4936      	ldr	r1, [pc, #216]	; (8022108 <gmtime_r+0x154>)
 802202e:	bfae      	itee	ge
 8022030:	fb90 f1f1 	sdivge	r1, r0, r1
 8022034:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022038:	fb93 f1f1 	sdivlt	r1, r3, r1
 802203c:	4b33      	ldr	r3, [pc, #204]	; (802210c <gmtime_r+0x158>)
 802203e:	fb03 0001 	mla	r0, r3, r1, r0
 8022042:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022046:	fbb0 f2f2 	udiv	r2, r0, r2
 802204a:	4402      	add	r2, r0
 802204c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8022050:	fbb0 f3fc 	udiv	r3, r0, ip
 8022054:	1ad2      	subs	r2, r2, r3
 8022056:	f240 176d 	movw	r7, #365	; 0x16d
 802205a:	4b2d      	ldr	r3, [pc, #180]	; (8022110 <gmtime_r+0x15c>)
 802205c:	fbb0 f3f3 	udiv	r3, r0, r3
 8022060:	2664      	movs	r6, #100	; 0x64
 8022062:	1ad3      	subs	r3, r2, r3
 8022064:	fbb3 f5f7 	udiv	r5, r3, r7
 8022068:	fbb3 f3fc 	udiv	r3, r3, ip
 802206c:	fbb5 f2f6 	udiv	r2, r5, r6
 8022070:	1ad3      	subs	r3, r2, r3
 8022072:	4403      	add	r3, r0
 8022074:	fb07 3315 	mls	r3, r7, r5, r3
 8022078:	2099      	movs	r0, #153	; 0x99
 802207a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 802207e:	f10c 0c02 	add.w	ip, ip, #2
 8022082:	f103 0e01 	add.w	lr, r3, #1
 8022086:	fbbc f7f0 	udiv	r7, ip, r0
 802208a:	4378      	muls	r0, r7
 802208c:	3002      	adds	r0, #2
 802208e:	f04f 0805 	mov.w	r8, #5
 8022092:	fbb0 f0f8 	udiv	r0, r0, r8
 8022096:	ebae 0000 	sub.w	r0, lr, r0
 802209a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 802209e:	45f4      	cmp	ip, lr
 80220a0:	bf94      	ite	ls
 80220a2:	f04f 0c02 	movls.w	ip, #2
 80220a6:	f06f 0c09 	mvnhi.w	ip, #9
 80220aa:	4467      	add	r7, ip
 80220ac:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80220b0:	fb0c 5101 	mla	r1, ip, r1, r5
 80220b4:	2f01      	cmp	r7, #1
 80220b6:	bf98      	it	ls
 80220b8:	3101      	addls	r1, #1
 80220ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80220be:	d30c      	bcc.n	80220da <gmtime_r+0x126>
 80220c0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80220c4:	61e3      	str	r3, [r4, #28]
 80220c6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80220ca:	2300      	movs	r3, #0
 80220cc:	60e0      	str	r0, [r4, #12]
 80220ce:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80220d2:	6223      	str	r3, [r4, #32]
 80220d4:	4620      	mov	r0, r4
 80220d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220da:	f015 0f03 	tst.w	r5, #3
 80220de:	d102      	bne.n	80220e6 <gmtime_r+0x132>
 80220e0:	fb06 5212 	mls	r2, r6, r2, r5
 80220e4:	b95a      	cbnz	r2, 80220fe <gmtime_r+0x14a>
 80220e6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80220ea:	fbb5 f2f6 	udiv	r2, r5, r6
 80220ee:	fb06 5212 	mls	r2, r6, r2, r5
 80220f2:	fab2 f282 	clz	r2, r2
 80220f6:	0952      	lsrs	r2, r2, #5
 80220f8:	333b      	adds	r3, #59	; 0x3b
 80220fa:	4413      	add	r3, r2
 80220fc:	e7e2      	b.n	80220c4 <gmtime_r+0x110>
 80220fe:	2201      	movs	r2, #1
 8022100:	e7fa      	b.n	80220f8 <gmtime_r+0x144>
 8022102:	bf00      	nop
 8022104:	00015180 	.word	0x00015180
 8022108:	00023ab1 	.word	0x00023ab1
 802210c:	fffdc54f 	.word	0xfffdc54f
 8022110:	00023ab0 	.word	0x00023ab0

08022114 <__libc_init_array>:
 8022114:	b570      	push	{r4, r5, r6, lr}
 8022116:	4d0d      	ldr	r5, [pc, #52]	; (802214c <__libc_init_array+0x38>)
 8022118:	4c0d      	ldr	r4, [pc, #52]	; (8022150 <__libc_init_array+0x3c>)
 802211a:	1b64      	subs	r4, r4, r5
 802211c:	10a4      	asrs	r4, r4, #2
 802211e:	2600      	movs	r6, #0
 8022120:	42a6      	cmp	r6, r4
 8022122:	d109      	bne.n	8022138 <__libc_init_array+0x24>
 8022124:	4d0b      	ldr	r5, [pc, #44]	; (8022154 <__libc_init_array+0x40>)
 8022126:	4c0c      	ldr	r4, [pc, #48]	; (8022158 <__libc_init_array+0x44>)
 8022128:	f005 ff04 	bl	8027f34 <_init>
 802212c:	1b64      	subs	r4, r4, r5
 802212e:	10a4      	asrs	r4, r4, #2
 8022130:	2600      	movs	r6, #0
 8022132:	42a6      	cmp	r6, r4
 8022134:	d105      	bne.n	8022142 <__libc_init_array+0x2e>
 8022136:	bd70      	pop	{r4, r5, r6, pc}
 8022138:	f855 3b04 	ldr.w	r3, [r5], #4
 802213c:	4798      	blx	r3
 802213e:	3601      	adds	r6, #1
 8022140:	e7ee      	b.n	8022120 <__libc_init_array+0xc>
 8022142:	f855 3b04 	ldr.w	r3, [r5], #4
 8022146:	4798      	blx	r3
 8022148:	3601      	adds	r6, #1
 802214a:	e7f2      	b.n	8022132 <__libc_init_array+0x1e>
 802214c:	08033bb0 	.word	0x08033bb0
 8022150:	08033bb0 	.word	0x08033bb0
 8022154:	08033bb0 	.word	0x08033bb0
 8022158:	08033bb4 	.word	0x08033bb4

0802215c <_localeconv_r>:
 802215c:	4800      	ldr	r0, [pc, #0]	; (8022160 <_localeconv_r+0x4>)
 802215e:	4770      	bx	lr
 8022160:	20000734 	.word	0x20000734

08022164 <localeconv>:
 8022164:	4800      	ldr	r0, [pc, #0]	; (8022168 <localeconv+0x4>)
 8022166:	4770      	bx	lr
 8022168:	20000734 	.word	0x20000734

0802216c <malloc>:
 802216c:	4b02      	ldr	r3, [pc, #8]	; (8022178 <malloc+0xc>)
 802216e:	4601      	mov	r1, r0
 8022170:	6818      	ldr	r0, [r3, #0]
 8022172:	f000 bb27 	b.w	80227c4 <_malloc_r>
 8022176:	bf00      	nop
 8022178:	2000057c 	.word	0x2000057c

0802217c <free>:
 802217c:	4b02      	ldr	r3, [pc, #8]	; (8022188 <free+0xc>)
 802217e:	4601      	mov	r1, r0
 8022180:	6818      	ldr	r0, [r3, #0]
 8022182:	f000 bacf 	b.w	8022724 <_free_r>
 8022186:	bf00      	nop
 8022188:	2000057c 	.word	0x2000057c

0802218c <memcmp>:
 802218c:	b530      	push	{r4, r5, lr}
 802218e:	3901      	subs	r1, #1
 8022190:	2400      	movs	r4, #0
 8022192:	42a2      	cmp	r2, r4
 8022194:	d101      	bne.n	802219a <memcmp+0xe>
 8022196:	2000      	movs	r0, #0
 8022198:	e005      	b.n	80221a6 <memcmp+0x1a>
 802219a:	5d03      	ldrb	r3, [r0, r4]
 802219c:	3401      	adds	r4, #1
 802219e:	5d0d      	ldrb	r5, [r1, r4]
 80221a0:	42ab      	cmp	r3, r5
 80221a2:	d0f6      	beq.n	8022192 <memcmp+0x6>
 80221a4:	1b58      	subs	r0, r3, r5
 80221a6:	bd30      	pop	{r4, r5, pc}

080221a8 <memcpy>:
 80221a8:	440a      	add	r2, r1
 80221aa:	4291      	cmp	r1, r2
 80221ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80221b0:	d100      	bne.n	80221b4 <memcpy+0xc>
 80221b2:	4770      	bx	lr
 80221b4:	b510      	push	{r4, lr}
 80221b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80221ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80221be:	4291      	cmp	r1, r2
 80221c0:	d1f9      	bne.n	80221b6 <memcpy+0xe>
 80221c2:	bd10      	pop	{r4, pc}

080221c4 <memmove>:
 80221c4:	4288      	cmp	r0, r1
 80221c6:	b510      	push	{r4, lr}
 80221c8:	eb01 0402 	add.w	r4, r1, r2
 80221cc:	d902      	bls.n	80221d4 <memmove+0x10>
 80221ce:	4284      	cmp	r4, r0
 80221d0:	4623      	mov	r3, r4
 80221d2:	d807      	bhi.n	80221e4 <memmove+0x20>
 80221d4:	1e43      	subs	r3, r0, #1
 80221d6:	42a1      	cmp	r1, r4
 80221d8:	d008      	beq.n	80221ec <memmove+0x28>
 80221da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80221de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80221e2:	e7f8      	b.n	80221d6 <memmove+0x12>
 80221e4:	4402      	add	r2, r0
 80221e6:	4601      	mov	r1, r0
 80221e8:	428a      	cmp	r2, r1
 80221ea:	d100      	bne.n	80221ee <memmove+0x2a>
 80221ec:	bd10      	pop	{r4, pc}
 80221ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80221f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80221f6:	e7f7      	b.n	80221e8 <memmove+0x24>

080221f8 <memset>:
 80221f8:	4402      	add	r2, r0
 80221fa:	4603      	mov	r3, r0
 80221fc:	4293      	cmp	r3, r2
 80221fe:	d100      	bne.n	8022202 <memset+0xa>
 8022200:	4770      	bx	lr
 8022202:	f803 1b01 	strb.w	r1, [r3], #1
 8022206:	e7f9      	b.n	80221fc <memset+0x4>

08022208 <validate_structure>:
 8022208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802220a:	6801      	ldr	r1, [r0, #0]
 802220c:	293b      	cmp	r1, #59	; 0x3b
 802220e:	4604      	mov	r4, r0
 8022210:	d911      	bls.n	8022236 <validate_structure+0x2e>
 8022212:	223c      	movs	r2, #60	; 0x3c
 8022214:	4668      	mov	r0, sp
 8022216:	f002 fd81 	bl	8024d1c <div>
 802221a:	9a01      	ldr	r2, [sp, #4]
 802221c:	6863      	ldr	r3, [r4, #4]
 802221e:	9900      	ldr	r1, [sp, #0]
 8022220:	2a00      	cmp	r2, #0
 8022222:	440b      	add	r3, r1
 8022224:	6063      	str	r3, [r4, #4]
 8022226:	bfbb      	ittet	lt
 8022228:	323c      	addlt	r2, #60	; 0x3c
 802222a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802222e:	6022      	strge	r2, [r4, #0]
 8022230:	6022      	strlt	r2, [r4, #0]
 8022232:	bfb8      	it	lt
 8022234:	6063      	strlt	r3, [r4, #4]
 8022236:	6861      	ldr	r1, [r4, #4]
 8022238:	293b      	cmp	r1, #59	; 0x3b
 802223a:	d911      	bls.n	8022260 <validate_structure+0x58>
 802223c:	223c      	movs	r2, #60	; 0x3c
 802223e:	4668      	mov	r0, sp
 8022240:	f002 fd6c 	bl	8024d1c <div>
 8022244:	9a01      	ldr	r2, [sp, #4]
 8022246:	68a3      	ldr	r3, [r4, #8]
 8022248:	9900      	ldr	r1, [sp, #0]
 802224a:	2a00      	cmp	r2, #0
 802224c:	440b      	add	r3, r1
 802224e:	60a3      	str	r3, [r4, #8]
 8022250:	bfbb      	ittet	lt
 8022252:	323c      	addlt	r2, #60	; 0x3c
 8022254:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022258:	6062      	strge	r2, [r4, #4]
 802225a:	6062      	strlt	r2, [r4, #4]
 802225c:	bfb8      	it	lt
 802225e:	60a3      	strlt	r3, [r4, #8]
 8022260:	68a1      	ldr	r1, [r4, #8]
 8022262:	2917      	cmp	r1, #23
 8022264:	d911      	bls.n	802228a <validate_structure+0x82>
 8022266:	2218      	movs	r2, #24
 8022268:	4668      	mov	r0, sp
 802226a:	f002 fd57 	bl	8024d1c <div>
 802226e:	9a01      	ldr	r2, [sp, #4]
 8022270:	68e3      	ldr	r3, [r4, #12]
 8022272:	9900      	ldr	r1, [sp, #0]
 8022274:	2a00      	cmp	r2, #0
 8022276:	440b      	add	r3, r1
 8022278:	60e3      	str	r3, [r4, #12]
 802227a:	bfbb      	ittet	lt
 802227c:	3218      	addlt	r2, #24
 802227e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022282:	60a2      	strge	r2, [r4, #8]
 8022284:	60a2      	strlt	r2, [r4, #8]
 8022286:	bfb8      	it	lt
 8022288:	60e3      	strlt	r3, [r4, #12]
 802228a:	6921      	ldr	r1, [r4, #16]
 802228c:	290b      	cmp	r1, #11
 802228e:	d911      	bls.n	80222b4 <validate_structure+0xac>
 8022290:	220c      	movs	r2, #12
 8022292:	4668      	mov	r0, sp
 8022294:	f002 fd42 	bl	8024d1c <div>
 8022298:	9a01      	ldr	r2, [sp, #4]
 802229a:	6963      	ldr	r3, [r4, #20]
 802229c:	9900      	ldr	r1, [sp, #0]
 802229e:	2a00      	cmp	r2, #0
 80222a0:	440b      	add	r3, r1
 80222a2:	6163      	str	r3, [r4, #20]
 80222a4:	bfbb      	ittet	lt
 80222a6:	320c      	addlt	r2, #12
 80222a8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80222ac:	6122      	strge	r2, [r4, #16]
 80222ae:	6122      	strlt	r2, [r4, #16]
 80222b0:	bfb8      	it	lt
 80222b2:	6163      	strlt	r3, [r4, #20]
 80222b4:	6963      	ldr	r3, [r4, #20]
 80222b6:	0799      	lsls	r1, r3, #30
 80222b8:	d120      	bne.n	80222fc <validate_structure+0xf4>
 80222ba:	2164      	movs	r1, #100	; 0x64
 80222bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80222c0:	fb01 3212 	mls	r2, r1, r2, r3
 80222c4:	b9e2      	cbnz	r2, 8022300 <validate_structure+0xf8>
 80222c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80222ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80222ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80222d2:	fb01 3312 	mls	r3, r1, r2, r3
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	bf14      	ite	ne
 80222da:	231c      	movne	r3, #28
 80222dc:	231d      	moveq	r3, #29
 80222de:	68e2      	ldr	r2, [r4, #12]
 80222e0:	2a00      	cmp	r2, #0
 80222e2:	dc0f      	bgt.n	8022304 <validate_structure+0xfc>
 80222e4:	4f33      	ldr	r7, [pc, #204]	; (80223b4 <validate_structure+0x1ac>)
 80222e6:	260b      	movs	r6, #11
 80222e8:	2064      	movs	r0, #100	; 0x64
 80222ea:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80222ee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80222f2:	f1bc 0f00 	cmp.w	ip, #0
 80222f6:	dd31      	ble.n	802235c <validate_structure+0x154>
 80222f8:	b003      	add	sp, #12
 80222fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222fc:	231c      	movs	r3, #28
 80222fe:	e7ee      	b.n	80222de <validate_structure+0xd6>
 8022300:	231d      	movs	r3, #29
 8022302:	e7ec      	b.n	80222de <validate_structure+0xd6>
 8022304:	4f2b      	ldr	r7, [pc, #172]	; (80223b4 <validate_structure+0x1ac>)
 8022306:	f04f 0c00 	mov.w	ip, #0
 802230a:	2564      	movs	r5, #100	; 0x64
 802230c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022310:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8022314:	2a01      	cmp	r2, #1
 8022316:	bf14      	ite	ne
 8022318:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 802231c:	4618      	moveq	r0, r3
 802231e:	4281      	cmp	r1, r0
 8022320:	ddea      	ble.n	80222f8 <validate_structure+0xf0>
 8022322:	3201      	adds	r2, #1
 8022324:	1a09      	subs	r1, r1, r0
 8022326:	2a0c      	cmp	r2, #12
 8022328:	60e1      	str	r1, [r4, #12]
 802232a:	6122      	str	r2, [r4, #16]
 802232c:	d1f0      	bne.n	8022310 <validate_structure+0x108>
 802232e:	6963      	ldr	r3, [r4, #20]
 8022330:	1c5a      	adds	r2, r3, #1
 8022332:	0791      	lsls	r1, r2, #30
 8022334:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8022338:	d137      	bne.n	80223aa <validate_structure+0x1a2>
 802233a:	fb92 f1f5 	sdiv	r1, r2, r5
 802233e:	fb05 2211 	mls	r2, r5, r1, r2
 8022342:	2a00      	cmp	r2, #0
 8022344:	d133      	bne.n	80223ae <validate_structure+0x1a6>
 8022346:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802234a:	fb93 f2f6 	sdiv	r2, r3, r6
 802234e:	fb06 3312 	mls	r3, r6, r2, r3
 8022352:	2b00      	cmp	r3, #0
 8022354:	bf14      	ite	ne
 8022356:	231c      	movne	r3, #28
 8022358:	231d      	moveq	r3, #29
 802235a:	e7d9      	b.n	8022310 <validate_structure+0x108>
 802235c:	6921      	ldr	r1, [r4, #16]
 802235e:	3901      	subs	r1, #1
 8022360:	6121      	str	r1, [r4, #16]
 8022362:	3101      	adds	r1, #1
 8022364:	d114      	bne.n	8022390 <validate_structure+0x188>
 8022366:	6963      	ldr	r3, [r4, #20]
 8022368:	1e59      	subs	r1, r3, #1
 802236a:	078a      	lsls	r2, r1, #30
 802236c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8022370:	d117      	bne.n	80223a2 <validate_structure+0x19a>
 8022372:	fb91 f2f0 	sdiv	r2, r1, r0
 8022376:	fb00 1112 	mls	r1, r0, r2, r1
 802237a:	b9a1      	cbnz	r1, 80223a6 <validate_structure+0x19e>
 802237c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8022380:	fb93 f2f5 	sdiv	r2, r3, r5
 8022384:	fb05 3312 	mls	r3, r5, r2, r3
 8022388:	2b00      	cmp	r3, #0
 802238a:	bf14      	ite	ne
 802238c:	231c      	movne	r3, #28
 802238e:	231d      	moveq	r3, #29
 8022390:	6922      	ldr	r2, [r4, #16]
 8022392:	2a01      	cmp	r2, #1
 8022394:	bf14      	ite	ne
 8022396:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 802239a:	461a      	moveq	r2, r3
 802239c:	4462      	add	r2, ip
 802239e:	60e2      	str	r2, [r4, #12]
 80223a0:	e7a5      	b.n	80222ee <validate_structure+0xe6>
 80223a2:	231c      	movs	r3, #28
 80223a4:	e7f4      	b.n	8022390 <validate_structure+0x188>
 80223a6:	231d      	movs	r3, #29
 80223a8:	e7f2      	b.n	8022390 <validate_structure+0x188>
 80223aa:	231c      	movs	r3, #28
 80223ac:	e7b0      	b.n	8022310 <validate_structure+0x108>
 80223ae:	231d      	movs	r3, #29
 80223b0:	e7ae      	b.n	8022310 <validate_structure+0x108>
 80223b2:	bf00      	nop
 80223b4:	08033644 	.word	0x08033644

080223b8 <mktime>:
 80223b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223bc:	b08b      	sub	sp, #44	; 0x2c
 80223be:	4605      	mov	r5, r0
 80223c0:	f004 f912 	bl	80265e8 <__gettzinfo>
 80223c4:	4607      	mov	r7, r0
 80223c6:	4628      	mov	r0, r5
 80223c8:	f7ff ff1e 	bl	8022208 <validate_structure>
 80223cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80223d0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80223d4:	68a8      	ldr	r0, [r5, #8]
 80223d6:	696e      	ldr	r6, [r5, #20]
 80223d8:	fb0a 2303 	mla	r3, sl, r3, r2
 80223dc:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80223e0:	fb0a 3a00 	mla	sl, sl, r0, r3
 80223e4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80223e8:	4ac3      	ldr	r2, [pc, #780]	; (80226f8 <mktime+0x340>)
 80223ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80223ee:	3c01      	subs	r4, #1
 80223f0:	2b01      	cmp	r3, #1
 80223f2:	4414      	add	r4, r2
 80223f4:	dd11      	ble.n	802241a <mktime+0x62>
 80223f6:	07b1      	lsls	r1, r6, #30
 80223f8:	d10f      	bne.n	802241a <mktime+0x62>
 80223fa:	2264      	movs	r2, #100	; 0x64
 80223fc:	fb96 f3f2 	sdiv	r3, r6, r2
 8022400:	fb02 6313 	mls	r3, r2, r3, r6
 8022404:	b943      	cbnz	r3, 8022418 <mktime+0x60>
 8022406:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 802240a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802240e:	fb91 f3f2 	sdiv	r3, r1, r2
 8022412:	fb02 1313 	mls	r3, r2, r3, r1
 8022416:	b903      	cbnz	r3, 802241a <mktime+0x62>
 8022418:	3401      	adds	r4, #1
 802241a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802241e:	3310      	adds	r3, #16
 8022420:	f644 6220 	movw	r2, #20000	; 0x4e20
 8022424:	4293      	cmp	r3, r2
 8022426:	61ec      	str	r4, [r5, #28]
 8022428:	f200 8161 	bhi.w	80226ee <mktime+0x336>
 802242c:	2e46      	cmp	r6, #70	; 0x46
 802242e:	dd77      	ble.n	8022520 <mktime+0x168>
 8022430:	2346      	movs	r3, #70	; 0x46
 8022432:	f240 1e6d 	movw	lr, #365	; 0x16d
 8022436:	2164      	movs	r1, #100	; 0x64
 8022438:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802243c:	079a      	lsls	r2, r3, #30
 802243e:	d169      	bne.n	8022514 <mktime+0x15c>
 8022440:	fb93 f2f1 	sdiv	r2, r3, r1
 8022444:	fb01 3212 	mls	r2, r1, r2, r3
 8022448:	2a00      	cmp	r2, #0
 802244a:	d166      	bne.n	802251a <mktime+0x162>
 802244c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022450:	fb9c f2f0 	sdiv	r2, ip, r0
 8022454:	fb00 c212 	mls	r2, r0, r2, ip
 8022458:	2a00      	cmp	r2, #0
 802245a:	bf14      	ite	ne
 802245c:	4672      	movne	r2, lr
 802245e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8022462:	3301      	adds	r3, #1
 8022464:	429e      	cmp	r6, r3
 8022466:	4414      	add	r4, r2
 8022468:	d1e8      	bne.n	802243c <mktime+0x84>
 802246a:	4ba4      	ldr	r3, [pc, #656]	; (80226fc <mktime+0x344>)
 802246c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8022470:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8022474:	f002 f98a 	bl	802478c <__tz_lock>
 8022478:	f002 f994 	bl	80247a4 <_tzset_unlocked>
 802247c:	4ba0      	ldr	r3, [pc, #640]	; (8022700 <mktime+0x348>)
 802247e:	f8d3 9000 	ldr.w	r9, [r3]
 8022482:	f1b9 0f00 	cmp.w	r9, #0
 8022486:	d03f      	beq.n	8022508 <mktime+0x150>
 8022488:	f8d5 9020 	ldr.w	r9, [r5, #32]
 802248c:	6968      	ldr	r0, [r5, #20]
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	f1b9 0f01 	cmp.w	r9, #1
 8022494:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022498:	46c8      	mov	r8, r9
 802249a:	bfa8      	it	ge
 802249c:	f04f 0801 	movge.w	r8, #1
 80224a0:	4283      	cmp	r3, r0
 80224a2:	d17f      	bne.n	80225a4 <mktime+0x1ec>
 80224a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80224a6:	4619      	mov	r1, r3
 80224a8:	17da      	asrs	r2, r3, #31
 80224aa:	e9cd 1200 	strd	r1, r2, [sp]
 80224ae:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80224b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80224b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80224ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80224bc:	1a80      	subs	r0, r0, r2
 80224be:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80224c2:	4582      	cmp	sl, r0
 80224c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80224c8:	eb7b 0101 	sbcs.w	r1, fp, r1
 80224cc:	da71      	bge.n	80225b2 <mktime+0x1fa>
 80224ce:	9800      	ldr	r0, [sp, #0]
 80224d0:	6a39      	ldr	r1, [r7, #32]
 80224d2:	1a09      	subs	r1, r1, r0
 80224d4:	9104      	str	r1, [sp, #16]
 80224d6:	9801      	ldr	r0, [sp, #4]
 80224d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80224da:	eb61 0100 	sbc.w	r1, r1, r0
 80224de:	9105      	str	r1, [sp, #20]
 80224e0:	6839      	ldr	r1, [r7, #0]
 80224e2:	2900      	cmp	r1, #0
 80224e4:	d075      	beq.n	80225d2 <mktime+0x21a>
 80224e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80224ea:	4582      	cmp	sl, r0
 80224ec:	eb7b 0101 	sbcs.w	r1, fp, r1
 80224f0:	db05      	blt.n	80224fe <mktime+0x146>
 80224f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80224f6:	4582      	cmp	sl, r0
 80224f8:	eb7b 0101 	sbcs.w	r1, fp, r1
 80224fc:	db6f      	blt.n	80225de <mktime+0x226>
 80224fe:	f1b9 0f00 	cmp.w	r9, #0
 8022502:	f04f 0900 	mov.w	r9, #0
 8022506:	da6f      	bge.n	80225e8 <mktime+0x230>
 8022508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802250a:	eb1a 0a03 	adds.w	sl, sl, r3
 802250e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8022512:	e0ae      	b.n	8022672 <mktime+0x2ba>
 8022514:	f240 126d 	movw	r2, #365	; 0x16d
 8022518:	e7a3      	b.n	8022462 <mktime+0xaa>
 802251a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802251e:	e7a0      	b.n	8022462 <mktime+0xaa>
 8022520:	d0a3      	beq.n	802246a <mktime+0xb2>
 8022522:	2345      	movs	r3, #69	; 0x45
 8022524:	f240 1e6d 	movw	lr, #365	; 0x16d
 8022528:	2164      	movs	r1, #100	; 0x64
 802252a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802252e:	e012      	b.n	8022556 <mktime+0x19e>
 8022530:	bb62      	cbnz	r2, 802258c <mktime+0x1d4>
 8022532:	fb93 f2f1 	sdiv	r2, r3, r1
 8022536:	fb01 3212 	mls	r2, r1, r2, r3
 802253a:	bb52      	cbnz	r2, 8022592 <mktime+0x1da>
 802253c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022540:	fb9c f2f0 	sdiv	r2, ip, r0
 8022544:	fb00 c212 	mls	r2, r0, r2, ip
 8022548:	2a00      	cmp	r2, #0
 802254a:	bf14      	ite	ne
 802254c:	4672      	movne	r2, lr
 802254e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8022552:	1aa4      	subs	r4, r4, r2
 8022554:	3b01      	subs	r3, #1
 8022556:	429e      	cmp	r6, r3
 8022558:	f003 0203 	and.w	r2, r3, #3
 802255c:	dbe8      	blt.n	8022530 <mktime+0x178>
 802255e:	b9da      	cbnz	r2, 8022598 <mktime+0x1e0>
 8022560:	2264      	movs	r2, #100	; 0x64
 8022562:	fb96 f3f2 	sdiv	r3, r6, r2
 8022566:	fb02 6313 	mls	r3, r2, r3, r6
 802256a:	b9c3      	cbnz	r3, 802259e <mktime+0x1e6>
 802256c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8022570:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022574:	fb91 f3f2 	sdiv	r3, r1, r2
 8022578:	fb02 1313 	mls	r3, r2, r3, r1
 802257c:	2b00      	cmp	r3, #0
 802257e:	f240 136d 	movw	r3, #365	; 0x16d
 8022582:	bf08      	it	eq
 8022584:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8022588:	1ae4      	subs	r4, r4, r3
 802258a:	e76e      	b.n	802246a <mktime+0xb2>
 802258c:	f240 126d 	movw	r2, #365	; 0x16d
 8022590:	e7df      	b.n	8022552 <mktime+0x19a>
 8022592:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8022596:	e7dc      	b.n	8022552 <mktime+0x19a>
 8022598:	f240 136d 	movw	r3, #365	; 0x16d
 802259c:	e7f4      	b.n	8022588 <mktime+0x1d0>
 802259e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80225a2:	e7f1      	b.n	8022588 <mktime+0x1d0>
 80225a4:	f002 f84a 	bl	802463c <__tzcalc_limits>
 80225a8:	2800      	cmp	r0, #0
 80225aa:	f47f af7b 	bne.w	80224a4 <mktime+0xec>
 80225ae:	46c1      	mov	r9, r8
 80225b0:	e054      	b.n	802265c <mktime+0x2a4>
 80225b2:	9800      	ldr	r0, [sp, #0]
 80225b4:	9902      	ldr	r1, [sp, #8]
 80225b6:	1a09      	subs	r1, r1, r0
 80225b8:	9108      	str	r1, [sp, #32]
 80225ba:	9801      	ldr	r0, [sp, #4]
 80225bc:	9903      	ldr	r1, [sp, #12]
 80225be:	eb61 0100 	sbc.w	r1, r1, r0
 80225c2:	9109      	str	r1, [sp, #36]	; 0x24
 80225c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80225c8:	4582      	cmp	sl, r0
 80225ca:	eb7b 0101 	sbcs.w	r1, fp, r1
 80225ce:	dbee      	blt.n	80225ae <mktime+0x1f6>
 80225d0:	e77d      	b.n	80224ce <mktime+0x116>
 80225d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80225d6:	4582      	cmp	sl, r0
 80225d8:	eb7b 0101 	sbcs.w	r1, fp, r1
 80225dc:	db89      	blt.n	80224f2 <mktime+0x13a>
 80225de:	f1b9 0f00 	cmp.w	r9, #0
 80225e2:	db3f      	blt.n	8022664 <mktime+0x2ac>
 80225e4:	f04f 0901 	mov.w	r9, #1
 80225e8:	ea88 0809 	eor.w	r8, r8, r9
 80225ec:	f1b8 0f01 	cmp.w	r8, #1
 80225f0:	d134      	bne.n	802265c <mktime+0x2a4>
 80225f2:	f1b9 0f00 	cmp.w	r9, #0
 80225f6:	d04f      	beq.n	8022698 <mktime+0x2e0>
 80225f8:	1ad3      	subs	r3, r2, r3
 80225fa:	682a      	ldr	r2, [r5, #0]
 80225fc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8022600:	441a      	add	r2, r3
 8022602:	eb1a 0a03 	adds.w	sl, sl, r3
 8022606:	602a      	str	r2, [r5, #0]
 8022608:	4628      	mov	r0, r5
 802260a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 802260e:	f7ff fdfb 	bl	8022208 <validate_structure>
 8022612:	68ea      	ldr	r2, [r5, #12]
 8022614:	ebb2 0208 	subs.w	r2, r2, r8
 8022618:	d020      	beq.n	802265c <mktime+0x2a4>
 802261a:	2a01      	cmp	r2, #1
 802261c:	dc3e      	bgt.n	802269c <mktime+0x2e4>
 802261e:	1c90      	adds	r0, r2, #2
 8022620:	bfd8      	it	le
 8022622:	2201      	movle	r2, #1
 8022624:	69eb      	ldr	r3, [r5, #28]
 8022626:	18d3      	adds	r3, r2, r3
 8022628:	4414      	add	r4, r2
 802262a:	d540      	bpl.n	80226ae <mktime+0x2f6>
 802262c:	1e72      	subs	r2, r6, #1
 802262e:	0791      	lsls	r1, r2, #30
 8022630:	d137      	bne.n	80226a2 <mktime+0x2ea>
 8022632:	2164      	movs	r1, #100	; 0x64
 8022634:	fb92 f3f1 	sdiv	r3, r2, r1
 8022638:	fb01 2313 	mls	r3, r1, r3, r2
 802263c:	bba3      	cbnz	r3, 80226a8 <mktime+0x2f0>
 802263e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8022642:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022646:	fb96 f3f2 	sdiv	r3, r6, r2
 802264a:	fb02 6613 	mls	r6, r2, r3, r6
 802264e:	2e00      	cmp	r6, #0
 8022650:	f240 136d 	movw	r3, #365	; 0x16d
 8022654:	bf18      	it	ne
 8022656:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 802265a:	61eb      	str	r3, [r5, #28]
 802265c:	f1b9 0f01 	cmp.w	r9, #1
 8022660:	f47f af52 	bne.w	8022508 <mktime+0x150>
 8022664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022666:	eb1a 0a03 	adds.w	sl, sl, r3
 802266a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 802266e:	f04f 0901 	mov.w	r9, #1
 8022672:	f002 f891 	bl	8024798 <__tz_unlock>
 8022676:	3404      	adds	r4, #4
 8022678:	2307      	movs	r3, #7
 802267a:	fb94 f3f3 	sdiv	r3, r4, r3
 802267e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8022682:	1ae4      	subs	r4, r4, r3
 8022684:	bf48      	it	mi
 8022686:	3407      	addmi	r4, #7
 8022688:	f8c5 9020 	str.w	r9, [r5, #32]
 802268c:	61ac      	str	r4, [r5, #24]
 802268e:	4650      	mov	r0, sl
 8022690:	4659      	mov	r1, fp
 8022692:	b00b      	add	sp, #44	; 0x2c
 8022694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022698:	1a9b      	subs	r3, r3, r2
 802269a:	e7ae      	b.n	80225fa <mktime+0x242>
 802269c:	f04f 32ff 	mov.w	r2, #4294967295
 80226a0:	e7c0      	b.n	8022624 <mktime+0x26c>
 80226a2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80226a6:	e7d8      	b.n	802265a <mktime+0x2a2>
 80226a8:	f240 136d 	movw	r3, #365	; 0x16d
 80226ac:	e7d5      	b.n	802265a <mktime+0x2a2>
 80226ae:	07b2      	lsls	r2, r6, #30
 80226b0:	d117      	bne.n	80226e2 <mktime+0x32a>
 80226b2:	2164      	movs	r1, #100	; 0x64
 80226b4:	fb96 f2f1 	sdiv	r2, r6, r1
 80226b8:	fb01 6212 	mls	r2, r1, r2, r6
 80226bc:	b9a2      	cbnz	r2, 80226e8 <mktime+0x330>
 80226be:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80226c2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80226c6:	fb96 f2f1 	sdiv	r2, r6, r1
 80226ca:	fb01 6612 	mls	r6, r1, r2, r6
 80226ce:	2e00      	cmp	r6, #0
 80226d0:	f240 126d 	movw	r2, #365	; 0x16d
 80226d4:	bf08      	it	eq
 80226d6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80226da:	4293      	cmp	r3, r2
 80226dc:	bfa8      	it	ge
 80226de:	1a9b      	subge	r3, r3, r2
 80226e0:	e7bb      	b.n	802265a <mktime+0x2a2>
 80226e2:	f240 126d 	movw	r2, #365	; 0x16d
 80226e6:	e7f8      	b.n	80226da <mktime+0x322>
 80226e8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80226ec:	e7f5      	b.n	80226da <mktime+0x322>
 80226ee:	f04f 3aff 	mov.w	sl, #4294967295
 80226f2:	f04f 3bff 	mov.w	fp, #4294967295
 80226f6:	e7ca      	b.n	802268e <mktime+0x2d6>
 80226f8:	08033674 	.word	0x08033674
 80226fc:	00015180 	.word	0x00015180
 8022700:	200010fc 	.word	0x200010fc

08022704 <_calloc_r>:
 8022704:	b513      	push	{r0, r1, r4, lr}
 8022706:	434a      	muls	r2, r1
 8022708:	4611      	mov	r1, r2
 802270a:	9201      	str	r2, [sp, #4]
 802270c:	f000 f85a 	bl	80227c4 <_malloc_r>
 8022710:	4604      	mov	r4, r0
 8022712:	b118      	cbz	r0, 802271c <_calloc_r+0x18>
 8022714:	9a01      	ldr	r2, [sp, #4]
 8022716:	2100      	movs	r1, #0
 8022718:	f7ff fd6e 	bl	80221f8 <memset>
 802271c:	4620      	mov	r0, r4
 802271e:	b002      	add	sp, #8
 8022720:	bd10      	pop	{r4, pc}
	...

08022724 <_free_r>:
 8022724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022726:	2900      	cmp	r1, #0
 8022728:	d048      	beq.n	80227bc <_free_r+0x98>
 802272a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802272e:	9001      	str	r0, [sp, #4]
 8022730:	2b00      	cmp	r3, #0
 8022732:	f1a1 0404 	sub.w	r4, r1, #4
 8022736:	bfb8      	it	lt
 8022738:	18e4      	addlt	r4, r4, r3
 802273a:	f003 ffe7 	bl	802670c <__malloc_lock>
 802273e:	4a20      	ldr	r2, [pc, #128]	; (80227c0 <_free_r+0x9c>)
 8022740:	9801      	ldr	r0, [sp, #4]
 8022742:	6813      	ldr	r3, [r2, #0]
 8022744:	4615      	mov	r5, r2
 8022746:	b933      	cbnz	r3, 8022756 <_free_r+0x32>
 8022748:	6063      	str	r3, [r4, #4]
 802274a:	6014      	str	r4, [r2, #0]
 802274c:	b003      	add	sp, #12
 802274e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022752:	f003 bfe1 	b.w	8026718 <__malloc_unlock>
 8022756:	42a3      	cmp	r3, r4
 8022758:	d90b      	bls.n	8022772 <_free_r+0x4e>
 802275a:	6821      	ldr	r1, [r4, #0]
 802275c:	1862      	adds	r2, r4, r1
 802275e:	4293      	cmp	r3, r2
 8022760:	bf04      	itt	eq
 8022762:	681a      	ldreq	r2, [r3, #0]
 8022764:	685b      	ldreq	r3, [r3, #4]
 8022766:	6063      	str	r3, [r4, #4]
 8022768:	bf04      	itt	eq
 802276a:	1852      	addeq	r2, r2, r1
 802276c:	6022      	streq	r2, [r4, #0]
 802276e:	602c      	str	r4, [r5, #0]
 8022770:	e7ec      	b.n	802274c <_free_r+0x28>
 8022772:	461a      	mov	r2, r3
 8022774:	685b      	ldr	r3, [r3, #4]
 8022776:	b10b      	cbz	r3, 802277c <_free_r+0x58>
 8022778:	42a3      	cmp	r3, r4
 802277a:	d9fa      	bls.n	8022772 <_free_r+0x4e>
 802277c:	6811      	ldr	r1, [r2, #0]
 802277e:	1855      	adds	r5, r2, r1
 8022780:	42a5      	cmp	r5, r4
 8022782:	d10b      	bne.n	802279c <_free_r+0x78>
 8022784:	6824      	ldr	r4, [r4, #0]
 8022786:	4421      	add	r1, r4
 8022788:	1854      	adds	r4, r2, r1
 802278a:	42a3      	cmp	r3, r4
 802278c:	6011      	str	r1, [r2, #0]
 802278e:	d1dd      	bne.n	802274c <_free_r+0x28>
 8022790:	681c      	ldr	r4, [r3, #0]
 8022792:	685b      	ldr	r3, [r3, #4]
 8022794:	6053      	str	r3, [r2, #4]
 8022796:	4421      	add	r1, r4
 8022798:	6011      	str	r1, [r2, #0]
 802279a:	e7d7      	b.n	802274c <_free_r+0x28>
 802279c:	d902      	bls.n	80227a4 <_free_r+0x80>
 802279e:	230c      	movs	r3, #12
 80227a0:	6003      	str	r3, [r0, #0]
 80227a2:	e7d3      	b.n	802274c <_free_r+0x28>
 80227a4:	6825      	ldr	r5, [r4, #0]
 80227a6:	1961      	adds	r1, r4, r5
 80227a8:	428b      	cmp	r3, r1
 80227aa:	bf04      	itt	eq
 80227ac:	6819      	ldreq	r1, [r3, #0]
 80227ae:	685b      	ldreq	r3, [r3, #4]
 80227b0:	6063      	str	r3, [r4, #4]
 80227b2:	bf04      	itt	eq
 80227b4:	1949      	addeq	r1, r1, r5
 80227b6:	6021      	streq	r1, [r4, #0]
 80227b8:	6054      	str	r4, [r2, #4]
 80227ba:	e7c7      	b.n	802274c <_free_r+0x28>
 80227bc:	b003      	add	sp, #12
 80227be:	bd30      	pop	{r4, r5, pc}
 80227c0:	200010d8 	.word	0x200010d8

080227c4 <_malloc_r>:
 80227c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227c6:	1ccd      	adds	r5, r1, #3
 80227c8:	f025 0503 	bic.w	r5, r5, #3
 80227cc:	3508      	adds	r5, #8
 80227ce:	2d0c      	cmp	r5, #12
 80227d0:	bf38      	it	cc
 80227d2:	250c      	movcc	r5, #12
 80227d4:	2d00      	cmp	r5, #0
 80227d6:	4606      	mov	r6, r0
 80227d8:	db01      	blt.n	80227de <_malloc_r+0x1a>
 80227da:	42a9      	cmp	r1, r5
 80227dc:	d903      	bls.n	80227e6 <_malloc_r+0x22>
 80227de:	230c      	movs	r3, #12
 80227e0:	6033      	str	r3, [r6, #0]
 80227e2:	2000      	movs	r0, #0
 80227e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80227e6:	f003 ff91 	bl	802670c <__malloc_lock>
 80227ea:	4921      	ldr	r1, [pc, #132]	; (8022870 <_malloc_r+0xac>)
 80227ec:	680a      	ldr	r2, [r1, #0]
 80227ee:	4614      	mov	r4, r2
 80227f0:	b99c      	cbnz	r4, 802281a <_malloc_r+0x56>
 80227f2:	4f20      	ldr	r7, [pc, #128]	; (8022874 <_malloc_r+0xb0>)
 80227f4:	683b      	ldr	r3, [r7, #0]
 80227f6:	b923      	cbnz	r3, 8022802 <_malloc_r+0x3e>
 80227f8:	4621      	mov	r1, r4
 80227fa:	4630      	mov	r0, r6
 80227fc:	f000 feda 	bl	80235b4 <_sbrk_r>
 8022800:	6038      	str	r0, [r7, #0]
 8022802:	4629      	mov	r1, r5
 8022804:	4630      	mov	r0, r6
 8022806:	f000 fed5 	bl	80235b4 <_sbrk_r>
 802280a:	1c43      	adds	r3, r0, #1
 802280c:	d123      	bne.n	8022856 <_malloc_r+0x92>
 802280e:	230c      	movs	r3, #12
 8022810:	6033      	str	r3, [r6, #0]
 8022812:	4630      	mov	r0, r6
 8022814:	f003 ff80 	bl	8026718 <__malloc_unlock>
 8022818:	e7e3      	b.n	80227e2 <_malloc_r+0x1e>
 802281a:	6823      	ldr	r3, [r4, #0]
 802281c:	1b5b      	subs	r3, r3, r5
 802281e:	d417      	bmi.n	8022850 <_malloc_r+0x8c>
 8022820:	2b0b      	cmp	r3, #11
 8022822:	d903      	bls.n	802282c <_malloc_r+0x68>
 8022824:	6023      	str	r3, [r4, #0]
 8022826:	441c      	add	r4, r3
 8022828:	6025      	str	r5, [r4, #0]
 802282a:	e004      	b.n	8022836 <_malloc_r+0x72>
 802282c:	6863      	ldr	r3, [r4, #4]
 802282e:	42a2      	cmp	r2, r4
 8022830:	bf0c      	ite	eq
 8022832:	600b      	streq	r3, [r1, #0]
 8022834:	6053      	strne	r3, [r2, #4]
 8022836:	4630      	mov	r0, r6
 8022838:	f003 ff6e 	bl	8026718 <__malloc_unlock>
 802283c:	f104 000b 	add.w	r0, r4, #11
 8022840:	1d23      	adds	r3, r4, #4
 8022842:	f020 0007 	bic.w	r0, r0, #7
 8022846:	1ac2      	subs	r2, r0, r3
 8022848:	d0cc      	beq.n	80227e4 <_malloc_r+0x20>
 802284a:	1a1b      	subs	r3, r3, r0
 802284c:	50a3      	str	r3, [r4, r2]
 802284e:	e7c9      	b.n	80227e4 <_malloc_r+0x20>
 8022850:	4622      	mov	r2, r4
 8022852:	6864      	ldr	r4, [r4, #4]
 8022854:	e7cc      	b.n	80227f0 <_malloc_r+0x2c>
 8022856:	1cc4      	adds	r4, r0, #3
 8022858:	f024 0403 	bic.w	r4, r4, #3
 802285c:	42a0      	cmp	r0, r4
 802285e:	d0e3      	beq.n	8022828 <_malloc_r+0x64>
 8022860:	1a21      	subs	r1, r4, r0
 8022862:	4630      	mov	r0, r6
 8022864:	f000 fea6 	bl	80235b4 <_sbrk_r>
 8022868:	3001      	adds	r0, #1
 802286a:	d1dd      	bne.n	8022828 <_malloc_r+0x64>
 802286c:	e7cf      	b.n	802280e <_malloc_r+0x4a>
 802286e:	bf00      	nop
 8022870:	200010d8 	.word	0x200010d8
 8022874:	200010dc 	.word	0x200010dc

08022878 <__sfputc_r>:
 8022878:	6893      	ldr	r3, [r2, #8]
 802287a:	3b01      	subs	r3, #1
 802287c:	2b00      	cmp	r3, #0
 802287e:	b410      	push	{r4}
 8022880:	6093      	str	r3, [r2, #8]
 8022882:	da08      	bge.n	8022896 <__sfputc_r+0x1e>
 8022884:	6994      	ldr	r4, [r2, #24]
 8022886:	42a3      	cmp	r3, r4
 8022888:	db01      	blt.n	802288e <__sfputc_r+0x16>
 802288a:	290a      	cmp	r1, #10
 802288c:	d103      	bne.n	8022896 <__sfputc_r+0x1e>
 802288e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022892:	f002 b943 	b.w	8024b1c <__swbuf_r>
 8022896:	6813      	ldr	r3, [r2, #0]
 8022898:	1c58      	adds	r0, r3, #1
 802289a:	6010      	str	r0, [r2, #0]
 802289c:	7019      	strb	r1, [r3, #0]
 802289e:	4608      	mov	r0, r1
 80228a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80228a4:	4770      	bx	lr

080228a6 <__sfputs_r>:
 80228a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228a8:	4606      	mov	r6, r0
 80228aa:	460f      	mov	r7, r1
 80228ac:	4614      	mov	r4, r2
 80228ae:	18d5      	adds	r5, r2, r3
 80228b0:	42ac      	cmp	r4, r5
 80228b2:	d101      	bne.n	80228b8 <__sfputs_r+0x12>
 80228b4:	2000      	movs	r0, #0
 80228b6:	e007      	b.n	80228c8 <__sfputs_r+0x22>
 80228b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228bc:	463a      	mov	r2, r7
 80228be:	4630      	mov	r0, r6
 80228c0:	f7ff ffda 	bl	8022878 <__sfputc_r>
 80228c4:	1c43      	adds	r3, r0, #1
 80228c6:	d1f3      	bne.n	80228b0 <__sfputs_r+0xa>
 80228c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080228cc <_vfiprintf_r>:
 80228cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228d0:	460d      	mov	r5, r1
 80228d2:	b09d      	sub	sp, #116	; 0x74
 80228d4:	4614      	mov	r4, r2
 80228d6:	4698      	mov	r8, r3
 80228d8:	4606      	mov	r6, r0
 80228da:	b118      	cbz	r0, 80228e4 <_vfiprintf_r+0x18>
 80228dc:	6983      	ldr	r3, [r0, #24]
 80228de:	b90b      	cbnz	r3, 80228e4 <_vfiprintf_r+0x18>
 80228e0:	f003 f9d6 	bl	8025c90 <__sinit>
 80228e4:	4b89      	ldr	r3, [pc, #548]	; (8022b0c <_vfiprintf_r+0x240>)
 80228e6:	429d      	cmp	r5, r3
 80228e8:	d11b      	bne.n	8022922 <_vfiprintf_r+0x56>
 80228ea:	6875      	ldr	r5, [r6, #4]
 80228ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80228ee:	07d9      	lsls	r1, r3, #31
 80228f0:	d405      	bmi.n	80228fe <_vfiprintf_r+0x32>
 80228f2:	89ab      	ldrh	r3, [r5, #12]
 80228f4:	059a      	lsls	r2, r3, #22
 80228f6:	d402      	bmi.n	80228fe <_vfiprintf_r+0x32>
 80228f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80228fa:	f003 fe7b 	bl	80265f4 <__retarget_lock_acquire_recursive>
 80228fe:	89ab      	ldrh	r3, [r5, #12]
 8022900:	071b      	lsls	r3, r3, #28
 8022902:	d501      	bpl.n	8022908 <_vfiprintf_r+0x3c>
 8022904:	692b      	ldr	r3, [r5, #16]
 8022906:	b9eb      	cbnz	r3, 8022944 <_vfiprintf_r+0x78>
 8022908:	4629      	mov	r1, r5
 802290a:	4630      	mov	r0, r6
 802290c:	f002 f96a 	bl	8024be4 <__swsetup_r>
 8022910:	b1c0      	cbz	r0, 8022944 <_vfiprintf_r+0x78>
 8022912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022914:	07dc      	lsls	r4, r3, #31
 8022916:	d50e      	bpl.n	8022936 <_vfiprintf_r+0x6a>
 8022918:	f04f 30ff 	mov.w	r0, #4294967295
 802291c:	b01d      	add	sp, #116	; 0x74
 802291e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022922:	4b7b      	ldr	r3, [pc, #492]	; (8022b10 <_vfiprintf_r+0x244>)
 8022924:	429d      	cmp	r5, r3
 8022926:	d101      	bne.n	802292c <_vfiprintf_r+0x60>
 8022928:	68b5      	ldr	r5, [r6, #8]
 802292a:	e7df      	b.n	80228ec <_vfiprintf_r+0x20>
 802292c:	4b79      	ldr	r3, [pc, #484]	; (8022b14 <_vfiprintf_r+0x248>)
 802292e:	429d      	cmp	r5, r3
 8022930:	bf08      	it	eq
 8022932:	68f5      	ldreq	r5, [r6, #12]
 8022934:	e7da      	b.n	80228ec <_vfiprintf_r+0x20>
 8022936:	89ab      	ldrh	r3, [r5, #12]
 8022938:	0598      	lsls	r0, r3, #22
 802293a:	d4ed      	bmi.n	8022918 <_vfiprintf_r+0x4c>
 802293c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802293e:	f003 fe5b 	bl	80265f8 <__retarget_lock_release_recursive>
 8022942:	e7e9      	b.n	8022918 <_vfiprintf_r+0x4c>
 8022944:	2300      	movs	r3, #0
 8022946:	9309      	str	r3, [sp, #36]	; 0x24
 8022948:	2320      	movs	r3, #32
 802294a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802294e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022952:	2330      	movs	r3, #48	; 0x30
 8022954:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022b18 <_vfiprintf_r+0x24c>
 8022958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802295c:	f04f 0901 	mov.w	r9, #1
 8022960:	4623      	mov	r3, r4
 8022962:	469a      	mov	sl, r3
 8022964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022968:	b10a      	cbz	r2, 802296e <_vfiprintf_r+0xa2>
 802296a:	2a25      	cmp	r2, #37	; 0x25
 802296c:	d1f9      	bne.n	8022962 <_vfiprintf_r+0x96>
 802296e:	ebba 0b04 	subs.w	fp, sl, r4
 8022972:	d00b      	beq.n	802298c <_vfiprintf_r+0xc0>
 8022974:	465b      	mov	r3, fp
 8022976:	4622      	mov	r2, r4
 8022978:	4629      	mov	r1, r5
 802297a:	4630      	mov	r0, r6
 802297c:	f7ff ff93 	bl	80228a6 <__sfputs_r>
 8022980:	3001      	adds	r0, #1
 8022982:	f000 80aa 	beq.w	8022ada <_vfiprintf_r+0x20e>
 8022986:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022988:	445a      	add	r2, fp
 802298a:	9209      	str	r2, [sp, #36]	; 0x24
 802298c:	f89a 3000 	ldrb.w	r3, [sl]
 8022990:	2b00      	cmp	r3, #0
 8022992:	f000 80a2 	beq.w	8022ada <_vfiprintf_r+0x20e>
 8022996:	2300      	movs	r3, #0
 8022998:	f04f 32ff 	mov.w	r2, #4294967295
 802299c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80229a0:	f10a 0a01 	add.w	sl, sl, #1
 80229a4:	9304      	str	r3, [sp, #16]
 80229a6:	9307      	str	r3, [sp, #28]
 80229a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80229ac:	931a      	str	r3, [sp, #104]	; 0x68
 80229ae:	4654      	mov	r4, sl
 80229b0:	2205      	movs	r2, #5
 80229b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80229b6:	4858      	ldr	r0, [pc, #352]	; (8022b18 <_vfiprintf_r+0x24c>)
 80229b8:	f7dd fc22 	bl	8000200 <memchr>
 80229bc:	9a04      	ldr	r2, [sp, #16]
 80229be:	b9d8      	cbnz	r0, 80229f8 <_vfiprintf_r+0x12c>
 80229c0:	06d1      	lsls	r1, r2, #27
 80229c2:	bf44      	itt	mi
 80229c4:	2320      	movmi	r3, #32
 80229c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229ca:	0713      	lsls	r3, r2, #28
 80229cc:	bf44      	itt	mi
 80229ce:	232b      	movmi	r3, #43	; 0x2b
 80229d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229d4:	f89a 3000 	ldrb.w	r3, [sl]
 80229d8:	2b2a      	cmp	r3, #42	; 0x2a
 80229da:	d015      	beq.n	8022a08 <_vfiprintf_r+0x13c>
 80229dc:	9a07      	ldr	r2, [sp, #28]
 80229de:	4654      	mov	r4, sl
 80229e0:	2000      	movs	r0, #0
 80229e2:	f04f 0c0a 	mov.w	ip, #10
 80229e6:	4621      	mov	r1, r4
 80229e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80229ec:	3b30      	subs	r3, #48	; 0x30
 80229ee:	2b09      	cmp	r3, #9
 80229f0:	d94e      	bls.n	8022a90 <_vfiprintf_r+0x1c4>
 80229f2:	b1b0      	cbz	r0, 8022a22 <_vfiprintf_r+0x156>
 80229f4:	9207      	str	r2, [sp, #28]
 80229f6:	e014      	b.n	8022a22 <_vfiprintf_r+0x156>
 80229f8:	eba0 0308 	sub.w	r3, r0, r8
 80229fc:	fa09 f303 	lsl.w	r3, r9, r3
 8022a00:	4313      	orrs	r3, r2
 8022a02:	9304      	str	r3, [sp, #16]
 8022a04:	46a2      	mov	sl, r4
 8022a06:	e7d2      	b.n	80229ae <_vfiprintf_r+0xe2>
 8022a08:	9b03      	ldr	r3, [sp, #12]
 8022a0a:	1d19      	adds	r1, r3, #4
 8022a0c:	681b      	ldr	r3, [r3, #0]
 8022a0e:	9103      	str	r1, [sp, #12]
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	bfbb      	ittet	lt
 8022a14:	425b      	neglt	r3, r3
 8022a16:	f042 0202 	orrlt.w	r2, r2, #2
 8022a1a:	9307      	strge	r3, [sp, #28]
 8022a1c:	9307      	strlt	r3, [sp, #28]
 8022a1e:	bfb8      	it	lt
 8022a20:	9204      	strlt	r2, [sp, #16]
 8022a22:	7823      	ldrb	r3, [r4, #0]
 8022a24:	2b2e      	cmp	r3, #46	; 0x2e
 8022a26:	d10c      	bne.n	8022a42 <_vfiprintf_r+0x176>
 8022a28:	7863      	ldrb	r3, [r4, #1]
 8022a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8022a2c:	d135      	bne.n	8022a9a <_vfiprintf_r+0x1ce>
 8022a2e:	9b03      	ldr	r3, [sp, #12]
 8022a30:	1d1a      	adds	r2, r3, #4
 8022a32:	681b      	ldr	r3, [r3, #0]
 8022a34:	9203      	str	r2, [sp, #12]
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	bfb8      	it	lt
 8022a3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8022a3e:	3402      	adds	r4, #2
 8022a40:	9305      	str	r3, [sp, #20]
 8022a42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022b28 <_vfiprintf_r+0x25c>
 8022a46:	7821      	ldrb	r1, [r4, #0]
 8022a48:	2203      	movs	r2, #3
 8022a4a:	4650      	mov	r0, sl
 8022a4c:	f7dd fbd8 	bl	8000200 <memchr>
 8022a50:	b140      	cbz	r0, 8022a64 <_vfiprintf_r+0x198>
 8022a52:	2340      	movs	r3, #64	; 0x40
 8022a54:	eba0 000a 	sub.w	r0, r0, sl
 8022a58:	fa03 f000 	lsl.w	r0, r3, r0
 8022a5c:	9b04      	ldr	r3, [sp, #16]
 8022a5e:	4303      	orrs	r3, r0
 8022a60:	3401      	adds	r4, #1
 8022a62:	9304      	str	r3, [sp, #16]
 8022a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a68:	482c      	ldr	r0, [pc, #176]	; (8022b1c <_vfiprintf_r+0x250>)
 8022a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022a6e:	2206      	movs	r2, #6
 8022a70:	f7dd fbc6 	bl	8000200 <memchr>
 8022a74:	2800      	cmp	r0, #0
 8022a76:	d03f      	beq.n	8022af8 <_vfiprintf_r+0x22c>
 8022a78:	4b29      	ldr	r3, [pc, #164]	; (8022b20 <_vfiprintf_r+0x254>)
 8022a7a:	bb1b      	cbnz	r3, 8022ac4 <_vfiprintf_r+0x1f8>
 8022a7c:	9b03      	ldr	r3, [sp, #12]
 8022a7e:	3307      	adds	r3, #7
 8022a80:	f023 0307 	bic.w	r3, r3, #7
 8022a84:	3308      	adds	r3, #8
 8022a86:	9303      	str	r3, [sp, #12]
 8022a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a8a:	443b      	add	r3, r7
 8022a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8022a8e:	e767      	b.n	8022960 <_vfiprintf_r+0x94>
 8022a90:	fb0c 3202 	mla	r2, ip, r2, r3
 8022a94:	460c      	mov	r4, r1
 8022a96:	2001      	movs	r0, #1
 8022a98:	e7a5      	b.n	80229e6 <_vfiprintf_r+0x11a>
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	3401      	adds	r4, #1
 8022a9e:	9305      	str	r3, [sp, #20]
 8022aa0:	4619      	mov	r1, r3
 8022aa2:	f04f 0c0a 	mov.w	ip, #10
 8022aa6:	4620      	mov	r0, r4
 8022aa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022aac:	3a30      	subs	r2, #48	; 0x30
 8022aae:	2a09      	cmp	r2, #9
 8022ab0:	d903      	bls.n	8022aba <_vfiprintf_r+0x1ee>
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d0c5      	beq.n	8022a42 <_vfiprintf_r+0x176>
 8022ab6:	9105      	str	r1, [sp, #20]
 8022ab8:	e7c3      	b.n	8022a42 <_vfiprintf_r+0x176>
 8022aba:	fb0c 2101 	mla	r1, ip, r1, r2
 8022abe:	4604      	mov	r4, r0
 8022ac0:	2301      	movs	r3, #1
 8022ac2:	e7f0      	b.n	8022aa6 <_vfiprintf_r+0x1da>
 8022ac4:	ab03      	add	r3, sp, #12
 8022ac6:	9300      	str	r3, [sp, #0]
 8022ac8:	462a      	mov	r2, r5
 8022aca:	4b16      	ldr	r3, [pc, #88]	; (8022b24 <_vfiprintf_r+0x258>)
 8022acc:	a904      	add	r1, sp, #16
 8022ace:	4630      	mov	r0, r6
 8022ad0:	f000 f8cc 	bl	8022c6c <_printf_float>
 8022ad4:	4607      	mov	r7, r0
 8022ad6:	1c78      	adds	r0, r7, #1
 8022ad8:	d1d6      	bne.n	8022a88 <_vfiprintf_r+0x1bc>
 8022ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022adc:	07d9      	lsls	r1, r3, #31
 8022ade:	d405      	bmi.n	8022aec <_vfiprintf_r+0x220>
 8022ae0:	89ab      	ldrh	r3, [r5, #12]
 8022ae2:	059a      	lsls	r2, r3, #22
 8022ae4:	d402      	bmi.n	8022aec <_vfiprintf_r+0x220>
 8022ae6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022ae8:	f003 fd86 	bl	80265f8 <__retarget_lock_release_recursive>
 8022aec:	89ab      	ldrh	r3, [r5, #12]
 8022aee:	065b      	lsls	r3, r3, #25
 8022af0:	f53f af12 	bmi.w	8022918 <_vfiprintf_r+0x4c>
 8022af4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022af6:	e711      	b.n	802291c <_vfiprintf_r+0x50>
 8022af8:	ab03      	add	r3, sp, #12
 8022afa:	9300      	str	r3, [sp, #0]
 8022afc:	462a      	mov	r2, r5
 8022afe:	4b09      	ldr	r3, [pc, #36]	; (8022b24 <_vfiprintf_r+0x258>)
 8022b00:	a904      	add	r1, sp, #16
 8022b02:	4630      	mov	r0, r6
 8022b04:	f000 fb56 	bl	80231b4 <_printf_i>
 8022b08:	e7e4      	b.n	8022ad4 <_vfiprintf_r+0x208>
 8022b0a:	bf00      	nop
 8022b0c:	08033910 	.word	0x08033910
 8022b10:	08033930 	.word	0x08033930
 8022b14:	080338f0 	.word	0x080338f0
 8022b18:	080336a4 	.word	0x080336a4
 8022b1c:	080336ae 	.word	0x080336ae
 8022b20:	08022c6d 	.word	0x08022c6d
 8022b24:	080228a7 	.word	0x080228a7
 8022b28:	080336aa 	.word	0x080336aa

08022b2c <__cvt>:
 8022b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022b30:	ec55 4b10 	vmov	r4, r5, d0
 8022b34:	2d00      	cmp	r5, #0
 8022b36:	460e      	mov	r6, r1
 8022b38:	4619      	mov	r1, r3
 8022b3a:	462b      	mov	r3, r5
 8022b3c:	bfbb      	ittet	lt
 8022b3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022b42:	461d      	movlt	r5, r3
 8022b44:	2300      	movge	r3, #0
 8022b46:	232d      	movlt	r3, #45	; 0x2d
 8022b48:	700b      	strb	r3, [r1, #0]
 8022b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022b50:	4691      	mov	r9, r2
 8022b52:	f023 0820 	bic.w	r8, r3, #32
 8022b56:	bfbc      	itt	lt
 8022b58:	4622      	movlt	r2, r4
 8022b5a:	4614      	movlt	r4, r2
 8022b5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022b60:	d005      	beq.n	8022b6e <__cvt+0x42>
 8022b62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022b66:	d100      	bne.n	8022b6a <__cvt+0x3e>
 8022b68:	3601      	adds	r6, #1
 8022b6a:	2102      	movs	r1, #2
 8022b6c:	e000      	b.n	8022b70 <__cvt+0x44>
 8022b6e:	2103      	movs	r1, #3
 8022b70:	ab03      	add	r3, sp, #12
 8022b72:	9301      	str	r3, [sp, #4]
 8022b74:	ab02      	add	r3, sp, #8
 8022b76:	9300      	str	r3, [sp, #0]
 8022b78:	ec45 4b10 	vmov	d0, r4, r5
 8022b7c:	4653      	mov	r3, sl
 8022b7e:	4632      	mov	r2, r6
 8022b80:	f002 f96e 	bl	8024e60 <_dtoa_r>
 8022b84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022b88:	4607      	mov	r7, r0
 8022b8a:	d102      	bne.n	8022b92 <__cvt+0x66>
 8022b8c:	f019 0f01 	tst.w	r9, #1
 8022b90:	d022      	beq.n	8022bd8 <__cvt+0xac>
 8022b92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022b96:	eb07 0906 	add.w	r9, r7, r6
 8022b9a:	d110      	bne.n	8022bbe <__cvt+0x92>
 8022b9c:	783b      	ldrb	r3, [r7, #0]
 8022b9e:	2b30      	cmp	r3, #48	; 0x30
 8022ba0:	d10a      	bne.n	8022bb8 <__cvt+0x8c>
 8022ba2:	2200      	movs	r2, #0
 8022ba4:	2300      	movs	r3, #0
 8022ba6:	4620      	mov	r0, r4
 8022ba8:	4629      	mov	r1, r5
 8022baa:	f7dd ff9d 	bl	8000ae8 <__aeabi_dcmpeq>
 8022bae:	b918      	cbnz	r0, 8022bb8 <__cvt+0x8c>
 8022bb0:	f1c6 0601 	rsb	r6, r6, #1
 8022bb4:	f8ca 6000 	str.w	r6, [sl]
 8022bb8:	f8da 3000 	ldr.w	r3, [sl]
 8022bbc:	4499      	add	r9, r3
 8022bbe:	2200      	movs	r2, #0
 8022bc0:	2300      	movs	r3, #0
 8022bc2:	4620      	mov	r0, r4
 8022bc4:	4629      	mov	r1, r5
 8022bc6:	f7dd ff8f 	bl	8000ae8 <__aeabi_dcmpeq>
 8022bca:	b108      	cbz	r0, 8022bd0 <__cvt+0xa4>
 8022bcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8022bd0:	2230      	movs	r2, #48	; 0x30
 8022bd2:	9b03      	ldr	r3, [sp, #12]
 8022bd4:	454b      	cmp	r3, r9
 8022bd6:	d307      	bcc.n	8022be8 <__cvt+0xbc>
 8022bd8:	9b03      	ldr	r3, [sp, #12]
 8022bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022bdc:	1bdb      	subs	r3, r3, r7
 8022bde:	4638      	mov	r0, r7
 8022be0:	6013      	str	r3, [r2, #0]
 8022be2:	b004      	add	sp, #16
 8022be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022be8:	1c59      	adds	r1, r3, #1
 8022bea:	9103      	str	r1, [sp, #12]
 8022bec:	701a      	strb	r2, [r3, #0]
 8022bee:	e7f0      	b.n	8022bd2 <__cvt+0xa6>

08022bf0 <__exponent>:
 8022bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022bf2:	4603      	mov	r3, r0
 8022bf4:	2900      	cmp	r1, #0
 8022bf6:	bfb8      	it	lt
 8022bf8:	4249      	neglt	r1, r1
 8022bfa:	f803 2b02 	strb.w	r2, [r3], #2
 8022bfe:	bfb4      	ite	lt
 8022c00:	222d      	movlt	r2, #45	; 0x2d
 8022c02:	222b      	movge	r2, #43	; 0x2b
 8022c04:	2909      	cmp	r1, #9
 8022c06:	7042      	strb	r2, [r0, #1]
 8022c08:	dd2a      	ble.n	8022c60 <__exponent+0x70>
 8022c0a:	f10d 0407 	add.w	r4, sp, #7
 8022c0e:	46a4      	mov	ip, r4
 8022c10:	270a      	movs	r7, #10
 8022c12:	46a6      	mov	lr, r4
 8022c14:	460a      	mov	r2, r1
 8022c16:	fb91 f6f7 	sdiv	r6, r1, r7
 8022c1a:	fb07 1516 	mls	r5, r7, r6, r1
 8022c1e:	3530      	adds	r5, #48	; 0x30
 8022c20:	2a63      	cmp	r2, #99	; 0x63
 8022c22:	f104 34ff 	add.w	r4, r4, #4294967295
 8022c26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022c2a:	4631      	mov	r1, r6
 8022c2c:	dcf1      	bgt.n	8022c12 <__exponent+0x22>
 8022c2e:	3130      	adds	r1, #48	; 0x30
 8022c30:	f1ae 0502 	sub.w	r5, lr, #2
 8022c34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022c38:	1c44      	adds	r4, r0, #1
 8022c3a:	4629      	mov	r1, r5
 8022c3c:	4561      	cmp	r1, ip
 8022c3e:	d30a      	bcc.n	8022c56 <__exponent+0x66>
 8022c40:	f10d 0209 	add.w	r2, sp, #9
 8022c44:	eba2 020e 	sub.w	r2, r2, lr
 8022c48:	4565      	cmp	r5, ip
 8022c4a:	bf88      	it	hi
 8022c4c:	2200      	movhi	r2, #0
 8022c4e:	4413      	add	r3, r2
 8022c50:	1a18      	subs	r0, r3, r0
 8022c52:	b003      	add	sp, #12
 8022c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022c5e:	e7ed      	b.n	8022c3c <__exponent+0x4c>
 8022c60:	2330      	movs	r3, #48	; 0x30
 8022c62:	3130      	adds	r1, #48	; 0x30
 8022c64:	7083      	strb	r3, [r0, #2]
 8022c66:	70c1      	strb	r1, [r0, #3]
 8022c68:	1d03      	adds	r3, r0, #4
 8022c6a:	e7f1      	b.n	8022c50 <__exponent+0x60>

08022c6c <_printf_float>:
 8022c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c70:	ed2d 8b02 	vpush	{d8}
 8022c74:	b08d      	sub	sp, #52	; 0x34
 8022c76:	460c      	mov	r4, r1
 8022c78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022c7c:	4616      	mov	r6, r2
 8022c7e:	461f      	mov	r7, r3
 8022c80:	4605      	mov	r5, r0
 8022c82:	f7ff fa6b 	bl	802215c <_localeconv_r>
 8022c86:	f8d0 a000 	ldr.w	sl, [r0]
 8022c8a:	4650      	mov	r0, sl
 8022c8c:	f7dd faaa 	bl	80001e4 <strlen>
 8022c90:	2300      	movs	r3, #0
 8022c92:	930a      	str	r3, [sp, #40]	; 0x28
 8022c94:	6823      	ldr	r3, [r4, #0]
 8022c96:	9305      	str	r3, [sp, #20]
 8022c98:	f8d8 3000 	ldr.w	r3, [r8]
 8022c9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022ca0:	3307      	adds	r3, #7
 8022ca2:	f023 0307 	bic.w	r3, r3, #7
 8022ca6:	f103 0208 	add.w	r2, r3, #8
 8022caa:	f8c8 2000 	str.w	r2, [r8]
 8022cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8022cb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022cba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022cbe:	9307      	str	r3, [sp, #28]
 8022cc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8022cc4:	ee08 0a10 	vmov	s16, r0
 8022cc8:	4b9f      	ldr	r3, [pc, #636]	; (8022f48 <_printf_float+0x2dc>)
 8022cca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022cce:	f04f 32ff 	mov.w	r2, #4294967295
 8022cd2:	f7dd ff3b 	bl	8000b4c <__aeabi_dcmpun>
 8022cd6:	bb88      	cbnz	r0, 8022d3c <_printf_float+0xd0>
 8022cd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022cdc:	4b9a      	ldr	r3, [pc, #616]	; (8022f48 <_printf_float+0x2dc>)
 8022cde:	f04f 32ff 	mov.w	r2, #4294967295
 8022ce2:	f7dd ff15 	bl	8000b10 <__aeabi_dcmple>
 8022ce6:	bb48      	cbnz	r0, 8022d3c <_printf_float+0xd0>
 8022ce8:	2200      	movs	r2, #0
 8022cea:	2300      	movs	r3, #0
 8022cec:	4640      	mov	r0, r8
 8022cee:	4649      	mov	r1, r9
 8022cf0:	f7dd ff04 	bl	8000afc <__aeabi_dcmplt>
 8022cf4:	b110      	cbz	r0, 8022cfc <_printf_float+0x90>
 8022cf6:	232d      	movs	r3, #45	; 0x2d
 8022cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022cfc:	4b93      	ldr	r3, [pc, #588]	; (8022f4c <_printf_float+0x2e0>)
 8022cfe:	4894      	ldr	r0, [pc, #592]	; (8022f50 <_printf_float+0x2e4>)
 8022d00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022d04:	bf94      	ite	ls
 8022d06:	4698      	movls	r8, r3
 8022d08:	4680      	movhi	r8, r0
 8022d0a:	2303      	movs	r3, #3
 8022d0c:	6123      	str	r3, [r4, #16]
 8022d0e:	9b05      	ldr	r3, [sp, #20]
 8022d10:	f023 0204 	bic.w	r2, r3, #4
 8022d14:	6022      	str	r2, [r4, #0]
 8022d16:	f04f 0900 	mov.w	r9, #0
 8022d1a:	9700      	str	r7, [sp, #0]
 8022d1c:	4633      	mov	r3, r6
 8022d1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8022d20:	4621      	mov	r1, r4
 8022d22:	4628      	mov	r0, r5
 8022d24:	f000 f9d8 	bl	80230d8 <_printf_common>
 8022d28:	3001      	adds	r0, #1
 8022d2a:	f040 8090 	bne.w	8022e4e <_printf_float+0x1e2>
 8022d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8022d32:	b00d      	add	sp, #52	; 0x34
 8022d34:	ecbd 8b02 	vpop	{d8}
 8022d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d3c:	4642      	mov	r2, r8
 8022d3e:	464b      	mov	r3, r9
 8022d40:	4640      	mov	r0, r8
 8022d42:	4649      	mov	r1, r9
 8022d44:	f7dd ff02 	bl	8000b4c <__aeabi_dcmpun>
 8022d48:	b140      	cbz	r0, 8022d5c <_printf_float+0xf0>
 8022d4a:	464b      	mov	r3, r9
 8022d4c:	2b00      	cmp	r3, #0
 8022d4e:	bfbc      	itt	lt
 8022d50:	232d      	movlt	r3, #45	; 0x2d
 8022d52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8022d56:	487f      	ldr	r0, [pc, #508]	; (8022f54 <_printf_float+0x2e8>)
 8022d58:	4b7f      	ldr	r3, [pc, #508]	; (8022f58 <_printf_float+0x2ec>)
 8022d5a:	e7d1      	b.n	8022d00 <_printf_float+0x94>
 8022d5c:	6863      	ldr	r3, [r4, #4]
 8022d5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8022d62:	9206      	str	r2, [sp, #24]
 8022d64:	1c5a      	adds	r2, r3, #1
 8022d66:	d13f      	bne.n	8022de8 <_printf_float+0x17c>
 8022d68:	2306      	movs	r3, #6
 8022d6a:	6063      	str	r3, [r4, #4]
 8022d6c:	9b05      	ldr	r3, [sp, #20]
 8022d6e:	6861      	ldr	r1, [r4, #4]
 8022d70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8022d74:	2300      	movs	r3, #0
 8022d76:	9303      	str	r3, [sp, #12]
 8022d78:	ab0a      	add	r3, sp, #40	; 0x28
 8022d7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8022d7e:	ab09      	add	r3, sp, #36	; 0x24
 8022d80:	ec49 8b10 	vmov	d0, r8, r9
 8022d84:	9300      	str	r3, [sp, #0]
 8022d86:	6022      	str	r2, [r4, #0]
 8022d88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022d8c:	4628      	mov	r0, r5
 8022d8e:	f7ff fecd 	bl	8022b2c <__cvt>
 8022d92:	9b06      	ldr	r3, [sp, #24]
 8022d94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022d96:	2b47      	cmp	r3, #71	; 0x47
 8022d98:	4680      	mov	r8, r0
 8022d9a:	d108      	bne.n	8022dae <_printf_float+0x142>
 8022d9c:	1cc8      	adds	r0, r1, #3
 8022d9e:	db02      	blt.n	8022da6 <_printf_float+0x13a>
 8022da0:	6863      	ldr	r3, [r4, #4]
 8022da2:	4299      	cmp	r1, r3
 8022da4:	dd41      	ble.n	8022e2a <_printf_float+0x1be>
 8022da6:	f1ab 0b02 	sub.w	fp, fp, #2
 8022daa:	fa5f fb8b 	uxtb.w	fp, fp
 8022dae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022db2:	d820      	bhi.n	8022df6 <_printf_float+0x18a>
 8022db4:	3901      	subs	r1, #1
 8022db6:	465a      	mov	r2, fp
 8022db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022dbc:	9109      	str	r1, [sp, #36]	; 0x24
 8022dbe:	f7ff ff17 	bl	8022bf0 <__exponent>
 8022dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022dc4:	1813      	adds	r3, r2, r0
 8022dc6:	2a01      	cmp	r2, #1
 8022dc8:	4681      	mov	r9, r0
 8022dca:	6123      	str	r3, [r4, #16]
 8022dcc:	dc02      	bgt.n	8022dd4 <_printf_float+0x168>
 8022dce:	6822      	ldr	r2, [r4, #0]
 8022dd0:	07d2      	lsls	r2, r2, #31
 8022dd2:	d501      	bpl.n	8022dd8 <_printf_float+0x16c>
 8022dd4:	3301      	adds	r3, #1
 8022dd6:	6123      	str	r3, [r4, #16]
 8022dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8022ddc:	2b00      	cmp	r3, #0
 8022dde:	d09c      	beq.n	8022d1a <_printf_float+0xae>
 8022de0:	232d      	movs	r3, #45	; 0x2d
 8022de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022de6:	e798      	b.n	8022d1a <_printf_float+0xae>
 8022de8:	9a06      	ldr	r2, [sp, #24]
 8022dea:	2a47      	cmp	r2, #71	; 0x47
 8022dec:	d1be      	bne.n	8022d6c <_printf_float+0x100>
 8022dee:	2b00      	cmp	r3, #0
 8022df0:	d1bc      	bne.n	8022d6c <_printf_float+0x100>
 8022df2:	2301      	movs	r3, #1
 8022df4:	e7b9      	b.n	8022d6a <_printf_float+0xfe>
 8022df6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8022dfa:	d118      	bne.n	8022e2e <_printf_float+0x1c2>
 8022dfc:	2900      	cmp	r1, #0
 8022dfe:	6863      	ldr	r3, [r4, #4]
 8022e00:	dd0b      	ble.n	8022e1a <_printf_float+0x1ae>
 8022e02:	6121      	str	r1, [r4, #16]
 8022e04:	b913      	cbnz	r3, 8022e0c <_printf_float+0x1a0>
 8022e06:	6822      	ldr	r2, [r4, #0]
 8022e08:	07d0      	lsls	r0, r2, #31
 8022e0a:	d502      	bpl.n	8022e12 <_printf_float+0x1a6>
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	440b      	add	r3, r1
 8022e10:	6123      	str	r3, [r4, #16]
 8022e12:	65a1      	str	r1, [r4, #88]	; 0x58
 8022e14:	f04f 0900 	mov.w	r9, #0
 8022e18:	e7de      	b.n	8022dd8 <_printf_float+0x16c>
 8022e1a:	b913      	cbnz	r3, 8022e22 <_printf_float+0x1b6>
 8022e1c:	6822      	ldr	r2, [r4, #0]
 8022e1e:	07d2      	lsls	r2, r2, #31
 8022e20:	d501      	bpl.n	8022e26 <_printf_float+0x1ba>
 8022e22:	3302      	adds	r3, #2
 8022e24:	e7f4      	b.n	8022e10 <_printf_float+0x1a4>
 8022e26:	2301      	movs	r3, #1
 8022e28:	e7f2      	b.n	8022e10 <_printf_float+0x1a4>
 8022e2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8022e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e30:	4299      	cmp	r1, r3
 8022e32:	db05      	blt.n	8022e40 <_printf_float+0x1d4>
 8022e34:	6823      	ldr	r3, [r4, #0]
 8022e36:	6121      	str	r1, [r4, #16]
 8022e38:	07d8      	lsls	r0, r3, #31
 8022e3a:	d5ea      	bpl.n	8022e12 <_printf_float+0x1a6>
 8022e3c:	1c4b      	adds	r3, r1, #1
 8022e3e:	e7e7      	b.n	8022e10 <_printf_float+0x1a4>
 8022e40:	2900      	cmp	r1, #0
 8022e42:	bfd4      	ite	le
 8022e44:	f1c1 0202 	rsble	r2, r1, #2
 8022e48:	2201      	movgt	r2, #1
 8022e4a:	4413      	add	r3, r2
 8022e4c:	e7e0      	b.n	8022e10 <_printf_float+0x1a4>
 8022e4e:	6823      	ldr	r3, [r4, #0]
 8022e50:	055a      	lsls	r2, r3, #21
 8022e52:	d407      	bmi.n	8022e64 <_printf_float+0x1f8>
 8022e54:	6923      	ldr	r3, [r4, #16]
 8022e56:	4642      	mov	r2, r8
 8022e58:	4631      	mov	r1, r6
 8022e5a:	4628      	mov	r0, r5
 8022e5c:	47b8      	blx	r7
 8022e5e:	3001      	adds	r0, #1
 8022e60:	d12c      	bne.n	8022ebc <_printf_float+0x250>
 8022e62:	e764      	b.n	8022d2e <_printf_float+0xc2>
 8022e64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022e68:	f240 80e0 	bls.w	802302c <_printf_float+0x3c0>
 8022e6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8022e70:	2200      	movs	r2, #0
 8022e72:	2300      	movs	r3, #0
 8022e74:	f7dd fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 8022e78:	2800      	cmp	r0, #0
 8022e7a:	d034      	beq.n	8022ee6 <_printf_float+0x27a>
 8022e7c:	4a37      	ldr	r2, [pc, #220]	; (8022f5c <_printf_float+0x2f0>)
 8022e7e:	2301      	movs	r3, #1
 8022e80:	4631      	mov	r1, r6
 8022e82:	4628      	mov	r0, r5
 8022e84:	47b8      	blx	r7
 8022e86:	3001      	adds	r0, #1
 8022e88:	f43f af51 	beq.w	8022d2e <_printf_float+0xc2>
 8022e8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022e90:	429a      	cmp	r2, r3
 8022e92:	db02      	blt.n	8022e9a <_printf_float+0x22e>
 8022e94:	6823      	ldr	r3, [r4, #0]
 8022e96:	07d8      	lsls	r0, r3, #31
 8022e98:	d510      	bpl.n	8022ebc <_printf_float+0x250>
 8022e9a:	ee18 3a10 	vmov	r3, s16
 8022e9e:	4652      	mov	r2, sl
 8022ea0:	4631      	mov	r1, r6
 8022ea2:	4628      	mov	r0, r5
 8022ea4:	47b8      	blx	r7
 8022ea6:	3001      	adds	r0, #1
 8022ea8:	f43f af41 	beq.w	8022d2e <_printf_float+0xc2>
 8022eac:	f04f 0800 	mov.w	r8, #0
 8022eb0:	f104 091a 	add.w	r9, r4, #26
 8022eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022eb6:	3b01      	subs	r3, #1
 8022eb8:	4543      	cmp	r3, r8
 8022eba:	dc09      	bgt.n	8022ed0 <_printf_float+0x264>
 8022ebc:	6823      	ldr	r3, [r4, #0]
 8022ebe:	079b      	lsls	r3, r3, #30
 8022ec0:	f100 8105 	bmi.w	80230ce <_printf_float+0x462>
 8022ec4:	68e0      	ldr	r0, [r4, #12]
 8022ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022ec8:	4298      	cmp	r0, r3
 8022eca:	bfb8      	it	lt
 8022ecc:	4618      	movlt	r0, r3
 8022ece:	e730      	b.n	8022d32 <_printf_float+0xc6>
 8022ed0:	2301      	movs	r3, #1
 8022ed2:	464a      	mov	r2, r9
 8022ed4:	4631      	mov	r1, r6
 8022ed6:	4628      	mov	r0, r5
 8022ed8:	47b8      	blx	r7
 8022eda:	3001      	adds	r0, #1
 8022edc:	f43f af27 	beq.w	8022d2e <_printf_float+0xc2>
 8022ee0:	f108 0801 	add.w	r8, r8, #1
 8022ee4:	e7e6      	b.n	8022eb4 <_printf_float+0x248>
 8022ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	dc39      	bgt.n	8022f60 <_printf_float+0x2f4>
 8022eec:	4a1b      	ldr	r2, [pc, #108]	; (8022f5c <_printf_float+0x2f0>)
 8022eee:	2301      	movs	r3, #1
 8022ef0:	4631      	mov	r1, r6
 8022ef2:	4628      	mov	r0, r5
 8022ef4:	47b8      	blx	r7
 8022ef6:	3001      	adds	r0, #1
 8022ef8:	f43f af19 	beq.w	8022d2e <_printf_float+0xc2>
 8022efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022f00:	4313      	orrs	r3, r2
 8022f02:	d102      	bne.n	8022f0a <_printf_float+0x29e>
 8022f04:	6823      	ldr	r3, [r4, #0]
 8022f06:	07d9      	lsls	r1, r3, #31
 8022f08:	d5d8      	bpl.n	8022ebc <_printf_float+0x250>
 8022f0a:	ee18 3a10 	vmov	r3, s16
 8022f0e:	4652      	mov	r2, sl
 8022f10:	4631      	mov	r1, r6
 8022f12:	4628      	mov	r0, r5
 8022f14:	47b8      	blx	r7
 8022f16:	3001      	adds	r0, #1
 8022f18:	f43f af09 	beq.w	8022d2e <_printf_float+0xc2>
 8022f1c:	f04f 0900 	mov.w	r9, #0
 8022f20:	f104 0a1a 	add.w	sl, r4, #26
 8022f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f26:	425b      	negs	r3, r3
 8022f28:	454b      	cmp	r3, r9
 8022f2a:	dc01      	bgt.n	8022f30 <_printf_float+0x2c4>
 8022f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022f2e:	e792      	b.n	8022e56 <_printf_float+0x1ea>
 8022f30:	2301      	movs	r3, #1
 8022f32:	4652      	mov	r2, sl
 8022f34:	4631      	mov	r1, r6
 8022f36:	4628      	mov	r0, r5
 8022f38:	47b8      	blx	r7
 8022f3a:	3001      	adds	r0, #1
 8022f3c:	f43f aef7 	beq.w	8022d2e <_printf_float+0xc2>
 8022f40:	f109 0901 	add.w	r9, r9, #1
 8022f44:	e7ee      	b.n	8022f24 <_printf_float+0x2b8>
 8022f46:	bf00      	nop
 8022f48:	7fefffff 	.word	0x7fefffff
 8022f4c:	080336b5 	.word	0x080336b5
 8022f50:	080336b9 	.word	0x080336b9
 8022f54:	080336c1 	.word	0x080336c1
 8022f58:	080336bd 	.word	0x080336bd
 8022f5c:	080324d3 	.word	0x080324d3
 8022f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022f64:	429a      	cmp	r2, r3
 8022f66:	bfa8      	it	ge
 8022f68:	461a      	movge	r2, r3
 8022f6a:	2a00      	cmp	r2, #0
 8022f6c:	4691      	mov	r9, r2
 8022f6e:	dc37      	bgt.n	8022fe0 <_printf_float+0x374>
 8022f70:	f04f 0b00 	mov.w	fp, #0
 8022f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022f78:	f104 021a 	add.w	r2, r4, #26
 8022f7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022f7e:	9305      	str	r3, [sp, #20]
 8022f80:	eba3 0309 	sub.w	r3, r3, r9
 8022f84:	455b      	cmp	r3, fp
 8022f86:	dc33      	bgt.n	8022ff0 <_printf_float+0x384>
 8022f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022f8c:	429a      	cmp	r2, r3
 8022f8e:	db3b      	blt.n	8023008 <_printf_float+0x39c>
 8022f90:	6823      	ldr	r3, [r4, #0]
 8022f92:	07da      	lsls	r2, r3, #31
 8022f94:	d438      	bmi.n	8023008 <_printf_float+0x39c>
 8022f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022f98:	9b05      	ldr	r3, [sp, #20]
 8022f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022f9c:	1ad3      	subs	r3, r2, r3
 8022f9e:	eba2 0901 	sub.w	r9, r2, r1
 8022fa2:	4599      	cmp	r9, r3
 8022fa4:	bfa8      	it	ge
 8022fa6:	4699      	movge	r9, r3
 8022fa8:	f1b9 0f00 	cmp.w	r9, #0
 8022fac:	dc35      	bgt.n	802301a <_printf_float+0x3ae>
 8022fae:	f04f 0800 	mov.w	r8, #0
 8022fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022fb6:	f104 0a1a 	add.w	sl, r4, #26
 8022fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8022fbe:	1a9b      	subs	r3, r3, r2
 8022fc0:	eba3 0309 	sub.w	r3, r3, r9
 8022fc4:	4543      	cmp	r3, r8
 8022fc6:	f77f af79 	ble.w	8022ebc <_printf_float+0x250>
 8022fca:	2301      	movs	r3, #1
 8022fcc:	4652      	mov	r2, sl
 8022fce:	4631      	mov	r1, r6
 8022fd0:	4628      	mov	r0, r5
 8022fd2:	47b8      	blx	r7
 8022fd4:	3001      	adds	r0, #1
 8022fd6:	f43f aeaa 	beq.w	8022d2e <_printf_float+0xc2>
 8022fda:	f108 0801 	add.w	r8, r8, #1
 8022fde:	e7ec      	b.n	8022fba <_printf_float+0x34e>
 8022fe0:	4613      	mov	r3, r2
 8022fe2:	4631      	mov	r1, r6
 8022fe4:	4642      	mov	r2, r8
 8022fe6:	4628      	mov	r0, r5
 8022fe8:	47b8      	blx	r7
 8022fea:	3001      	adds	r0, #1
 8022fec:	d1c0      	bne.n	8022f70 <_printf_float+0x304>
 8022fee:	e69e      	b.n	8022d2e <_printf_float+0xc2>
 8022ff0:	2301      	movs	r3, #1
 8022ff2:	4631      	mov	r1, r6
 8022ff4:	4628      	mov	r0, r5
 8022ff6:	9205      	str	r2, [sp, #20]
 8022ff8:	47b8      	blx	r7
 8022ffa:	3001      	adds	r0, #1
 8022ffc:	f43f ae97 	beq.w	8022d2e <_printf_float+0xc2>
 8023000:	9a05      	ldr	r2, [sp, #20]
 8023002:	f10b 0b01 	add.w	fp, fp, #1
 8023006:	e7b9      	b.n	8022f7c <_printf_float+0x310>
 8023008:	ee18 3a10 	vmov	r3, s16
 802300c:	4652      	mov	r2, sl
 802300e:	4631      	mov	r1, r6
 8023010:	4628      	mov	r0, r5
 8023012:	47b8      	blx	r7
 8023014:	3001      	adds	r0, #1
 8023016:	d1be      	bne.n	8022f96 <_printf_float+0x32a>
 8023018:	e689      	b.n	8022d2e <_printf_float+0xc2>
 802301a:	9a05      	ldr	r2, [sp, #20]
 802301c:	464b      	mov	r3, r9
 802301e:	4442      	add	r2, r8
 8023020:	4631      	mov	r1, r6
 8023022:	4628      	mov	r0, r5
 8023024:	47b8      	blx	r7
 8023026:	3001      	adds	r0, #1
 8023028:	d1c1      	bne.n	8022fae <_printf_float+0x342>
 802302a:	e680      	b.n	8022d2e <_printf_float+0xc2>
 802302c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802302e:	2a01      	cmp	r2, #1
 8023030:	dc01      	bgt.n	8023036 <_printf_float+0x3ca>
 8023032:	07db      	lsls	r3, r3, #31
 8023034:	d538      	bpl.n	80230a8 <_printf_float+0x43c>
 8023036:	2301      	movs	r3, #1
 8023038:	4642      	mov	r2, r8
 802303a:	4631      	mov	r1, r6
 802303c:	4628      	mov	r0, r5
 802303e:	47b8      	blx	r7
 8023040:	3001      	adds	r0, #1
 8023042:	f43f ae74 	beq.w	8022d2e <_printf_float+0xc2>
 8023046:	ee18 3a10 	vmov	r3, s16
 802304a:	4652      	mov	r2, sl
 802304c:	4631      	mov	r1, r6
 802304e:	4628      	mov	r0, r5
 8023050:	47b8      	blx	r7
 8023052:	3001      	adds	r0, #1
 8023054:	f43f ae6b 	beq.w	8022d2e <_printf_float+0xc2>
 8023058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802305c:	2200      	movs	r2, #0
 802305e:	2300      	movs	r3, #0
 8023060:	f7dd fd42 	bl	8000ae8 <__aeabi_dcmpeq>
 8023064:	b9d8      	cbnz	r0, 802309e <_printf_float+0x432>
 8023066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023068:	f108 0201 	add.w	r2, r8, #1
 802306c:	3b01      	subs	r3, #1
 802306e:	4631      	mov	r1, r6
 8023070:	4628      	mov	r0, r5
 8023072:	47b8      	blx	r7
 8023074:	3001      	adds	r0, #1
 8023076:	d10e      	bne.n	8023096 <_printf_float+0x42a>
 8023078:	e659      	b.n	8022d2e <_printf_float+0xc2>
 802307a:	2301      	movs	r3, #1
 802307c:	4652      	mov	r2, sl
 802307e:	4631      	mov	r1, r6
 8023080:	4628      	mov	r0, r5
 8023082:	47b8      	blx	r7
 8023084:	3001      	adds	r0, #1
 8023086:	f43f ae52 	beq.w	8022d2e <_printf_float+0xc2>
 802308a:	f108 0801 	add.w	r8, r8, #1
 802308e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023090:	3b01      	subs	r3, #1
 8023092:	4543      	cmp	r3, r8
 8023094:	dcf1      	bgt.n	802307a <_printf_float+0x40e>
 8023096:	464b      	mov	r3, r9
 8023098:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802309c:	e6dc      	b.n	8022e58 <_printf_float+0x1ec>
 802309e:	f04f 0800 	mov.w	r8, #0
 80230a2:	f104 0a1a 	add.w	sl, r4, #26
 80230a6:	e7f2      	b.n	802308e <_printf_float+0x422>
 80230a8:	2301      	movs	r3, #1
 80230aa:	4642      	mov	r2, r8
 80230ac:	e7df      	b.n	802306e <_printf_float+0x402>
 80230ae:	2301      	movs	r3, #1
 80230b0:	464a      	mov	r2, r9
 80230b2:	4631      	mov	r1, r6
 80230b4:	4628      	mov	r0, r5
 80230b6:	47b8      	blx	r7
 80230b8:	3001      	adds	r0, #1
 80230ba:	f43f ae38 	beq.w	8022d2e <_printf_float+0xc2>
 80230be:	f108 0801 	add.w	r8, r8, #1
 80230c2:	68e3      	ldr	r3, [r4, #12]
 80230c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80230c6:	1a5b      	subs	r3, r3, r1
 80230c8:	4543      	cmp	r3, r8
 80230ca:	dcf0      	bgt.n	80230ae <_printf_float+0x442>
 80230cc:	e6fa      	b.n	8022ec4 <_printf_float+0x258>
 80230ce:	f04f 0800 	mov.w	r8, #0
 80230d2:	f104 0919 	add.w	r9, r4, #25
 80230d6:	e7f4      	b.n	80230c2 <_printf_float+0x456>

080230d8 <_printf_common>:
 80230d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230dc:	4616      	mov	r6, r2
 80230de:	4699      	mov	r9, r3
 80230e0:	688a      	ldr	r2, [r1, #8]
 80230e2:	690b      	ldr	r3, [r1, #16]
 80230e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80230e8:	4293      	cmp	r3, r2
 80230ea:	bfb8      	it	lt
 80230ec:	4613      	movlt	r3, r2
 80230ee:	6033      	str	r3, [r6, #0]
 80230f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80230f4:	4607      	mov	r7, r0
 80230f6:	460c      	mov	r4, r1
 80230f8:	b10a      	cbz	r2, 80230fe <_printf_common+0x26>
 80230fa:	3301      	adds	r3, #1
 80230fc:	6033      	str	r3, [r6, #0]
 80230fe:	6823      	ldr	r3, [r4, #0]
 8023100:	0699      	lsls	r1, r3, #26
 8023102:	bf42      	ittt	mi
 8023104:	6833      	ldrmi	r3, [r6, #0]
 8023106:	3302      	addmi	r3, #2
 8023108:	6033      	strmi	r3, [r6, #0]
 802310a:	6825      	ldr	r5, [r4, #0]
 802310c:	f015 0506 	ands.w	r5, r5, #6
 8023110:	d106      	bne.n	8023120 <_printf_common+0x48>
 8023112:	f104 0a19 	add.w	sl, r4, #25
 8023116:	68e3      	ldr	r3, [r4, #12]
 8023118:	6832      	ldr	r2, [r6, #0]
 802311a:	1a9b      	subs	r3, r3, r2
 802311c:	42ab      	cmp	r3, r5
 802311e:	dc26      	bgt.n	802316e <_printf_common+0x96>
 8023120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023124:	1e13      	subs	r3, r2, #0
 8023126:	6822      	ldr	r2, [r4, #0]
 8023128:	bf18      	it	ne
 802312a:	2301      	movne	r3, #1
 802312c:	0692      	lsls	r2, r2, #26
 802312e:	d42b      	bmi.n	8023188 <_printf_common+0xb0>
 8023130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023134:	4649      	mov	r1, r9
 8023136:	4638      	mov	r0, r7
 8023138:	47c0      	blx	r8
 802313a:	3001      	adds	r0, #1
 802313c:	d01e      	beq.n	802317c <_printf_common+0xa4>
 802313e:	6823      	ldr	r3, [r4, #0]
 8023140:	68e5      	ldr	r5, [r4, #12]
 8023142:	6832      	ldr	r2, [r6, #0]
 8023144:	f003 0306 	and.w	r3, r3, #6
 8023148:	2b04      	cmp	r3, #4
 802314a:	bf08      	it	eq
 802314c:	1aad      	subeq	r5, r5, r2
 802314e:	68a3      	ldr	r3, [r4, #8]
 8023150:	6922      	ldr	r2, [r4, #16]
 8023152:	bf0c      	ite	eq
 8023154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023158:	2500      	movne	r5, #0
 802315a:	4293      	cmp	r3, r2
 802315c:	bfc4      	itt	gt
 802315e:	1a9b      	subgt	r3, r3, r2
 8023160:	18ed      	addgt	r5, r5, r3
 8023162:	2600      	movs	r6, #0
 8023164:	341a      	adds	r4, #26
 8023166:	42b5      	cmp	r5, r6
 8023168:	d11a      	bne.n	80231a0 <_printf_common+0xc8>
 802316a:	2000      	movs	r0, #0
 802316c:	e008      	b.n	8023180 <_printf_common+0xa8>
 802316e:	2301      	movs	r3, #1
 8023170:	4652      	mov	r2, sl
 8023172:	4649      	mov	r1, r9
 8023174:	4638      	mov	r0, r7
 8023176:	47c0      	blx	r8
 8023178:	3001      	adds	r0, #1
 802317a:	d103      	bne.n	8023184 <_printf_common+0xac>
 802317c:	f04f 30ff 	mov.w	r0, #4294967295
 8023180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023184:	3501      	adds	r5, #1
 8023186:	e7c6      	b.n	8023116 <_printf_common+0x3e>
 8023188:	18e1      	adds	r1, r4, r3
 802318a:	1c5a      	adds	r2, r3, #1
 802318c:	2030      	movs	r0, #48	; 0x30
 802318e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023192:	4422      	add	r2, r4
 8023194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802319c:	3302      	adds	r3, #2
 802319e:	e7c7      	b.n	8023130 <_printf_common+0x58>
 80231a0:	2301      	movs	r3, #1
 80231a2:	4622      	mov	r2, r4
 80231a4:	4649      	mov	r1, r9
 80231a6:	4638      	mov	r0, r7
 80231a8:	47c0      	blx	r8
 80231aa:	3001      	adds	r0, #1
 80231ac:	d0e6      	beq.n	802317c <_printf_common+0xa4>
 80231ae:	3601      	adds	r6, #1
 80231b0:	e7d9      	b.n	8023166 <_printf_common+0x8e>
	...

080231b4 <_printf_i>:
 80231b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80231b8:	460c      	mov	r4, r1
 80231ba:	4691      	mov	r9, r2
 80231bc:	7e27      	ldrb	r7, [r4, #24]
 80231be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80231c0:	2f78      	cmp	r7, #120	; 0x78
 80231c2:	4680      	mov	r8, r0
 80231c4:	469a      	mov	sl, r3
 80231c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80231ca:	d807      	bhi.n	80231dc <_printf_i+0x28>
 80231cc:	2f62      	cmp	r7, #98	; 0x62
 80231ce:	d80a      	bhi.n	80231e6 <_printf_i+0x32>
 80231d0:	2f00      	cmp	r7, #0
 80231d2:	f000 80d8 	beq.w	8023386 <_printf_i+0x1d2>
 80231d6:	2f58      	cmp	r7, #88	; 0x58
 80231d8:	f000 80a3 	beq.w	8023322 <_printf_i+0x16e>
 80231dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80231e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80231e4:	e03a      	b.n	802325c <_printf_i+0xa8>
 80231e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80231ea:	2b15      	cmp	r3, #21
 80231ec:	d8f6      	bhi.n	80231dc <_printf_i+0x28>
 80231ee:	a001      	add	r0, pc, #4	; (adr r0, 80231f4 <_printf_i+0x40>)
 80231f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80231f4:	0802324d 	.word	0x0802324d
 80231f8:	08023261 	.word	0x08023261
 80231fc:	080231dd 	.word	0x080231dd
 8023200:	080231dd 	.word	0x080231dd
 8023204:	080231dd 	.word	0x080231dd
 8023208:	080231dd 	.word	0x080231dd
 802320c:	08023261 	.word	0x08023261
 8023210:	080231dd 	.word	0x080231dd
 8023214:	080231dd 	.word	0x080231dd
 8023218:	080231dd 	.word	0x080231dd
 802321c:	080231dd 	.word	0x080231dd
 8023220:	0802336d 	.word	0x0802336d
 8023224:	08023291 	.word	0x08023291
 8023228:	0802334f 	.word	0x0802334f
 802322c:	080231dd 	.word	0x080231dd
 8023230:	080231dd 	.word	0x080231dd
 8023234:	0802338f 	.word	0x0802338f
 8023238:	080231dd 	.word	0x080231dd
 802323c:	08023291 	.word	0x08023291
 8023240:	080231dd 	.word	0x080231dd
 8023244:	080231dd 	.word	0x080231dd
 8023248:	08023357 	.word	0x08023357
 802324c:	680b      	ldr	r3, [r1, #0]
 802324e:	1d1a      	adds	r2, r3, #4
 8023250:	681b      	ldr	r3, [r3, #0]
 8023252:	600a      	str	r2, [r1, #0]
 8023254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802325c:	2301      	movs	r3, #1
 802325e:	e0a3      	b.n	80233a8 <_printf_i+0x1f4>
 8023260:	6825      	ldr	r5, [r4, #0]
 8023262:	6808      	ldr	r0, [r1, #0]
 8023264:	062e      	lsls	r6, r5, #24
 8023266:	f100 0304 	add.w	r3, r0, #4
 802326a:	d50a      	bpl.n	8023282 <_printf_i+0xce>
 802326c:	6805      	ldr	r5, [r0, #0]
 802326e:	600b      	str	r3, [r1, #0]
 8023270:	2d00      	cmp	r5, #0
 8023272:	da03      	bge.n	802327c <_printf_i+0xc8>
 8023274:	232d      	movs	r3, #45	; 0x2d
 8023276:	426d      	negs	r5, r5
 8023278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802327c:	485e      	ldr	r0, [pc, #376]	; (80233f8 <_printf_i+0x244>)
 802327e:	230a      	movs	r3, #10
 8023280:	e019      	b.n	80232b6 <_printf_i+0x102>
 8023282:	f015 0f40 	tst.w	r5, #64	; 0x40
 8023286:	6805      	ldr	r5, [r0, #0]
 8023288:	600b      	str	r3, [r1, #0]
 802328a:	bf18      	it	ne
 802328c:	b22d      	sxthne	r5, r5
 802328e:	e7ef      	b.n	8023270 <_printf_i+0xbc>
 8023290:	680b      	ldr	r3, [r1, #0]
 8023292:	6825      	ldr	r5, [r4, #0]
 8023294:	1d18      	adds	r0, r3, #4
 8023296:	6008      	str	r0, [r1, #0]
 8023298:	0628      	lsls	r0, r5, #24
 802329a:	d501      	bpl.n	80232a0 <_printf_i+0xec>
 802329c:	681d      	ldr	r5, [r3, #0]
 802329e:	e002      	b.n	80232a6 <_printf_i+0xf2>
 80232a0:	0669      	lsls	r1, r5, #25
 80232a2:	d5fb      	bpl.n	802329c <_printf_i+0xe8>
 80232a4:	881d      	ldrh	r5, [r3, #0]
 80232a6:	4854      	ldr	r0, [pc, #336]	; (80233f8 <_printf_i+0x244>)
 80232a8:	2f6f      	cmp	r7, #111	; 0x6f
 80232aa:	bf0c      	ite	eq
 80232ac:	2308      	moveq	r3, #8
 80232ae:	230a      	movne	r3, #10
 80232b0:	2100      	movs	r1, #0
 80232b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80232b6:	6866      	ldr	r6, [r4, #4]
 80232b8:	60a6      	str	r6, [r4, #8]
 80232ba:	2e00      	cmp	r6, #0
 80232bc:	bfa2      	ittt	ge
 80232be:	6821      	ldrge	r1, [r4, #0]
 80232c0:	f021 0104 	bicge.w	r1, r1, #4
 80232c4:	6021      	strge	r1, [r4, #0]
 80232c6:	b90d      	cbnz	r5, 80232cc <_printf_i+0x118>
 80232c8:	2e00      	cmp	r6, #0
 80232ca:	d04d      	beq.n	8023368 <_printf_i+0x1b4>
 80232cc:	4616      	mov	r6, r2
 80232ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80232d2:	fb03 5711 	mls	r7, r3, r1, r5
 80232d6:	5dc7      	ldrb	r7, [r0, r7]
 80232d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80232dc:	462f      	mov	r7, r5
 80232de:	42bb      	cmp	r3, r7
 80232e0:	460d      	mov	r5, r1
 80232e2:	d9f4      	bls.n	80232ce <_printf_i+0x11a>
 80232e4:	2b08      	cmp	r3, #8
 80232e6:	d10b      	bne.n	8023300 <_printf_i+0x14c>
 80232e8:	6823      	ldr	r3, [r4, #0]
 80232ea:	07df      	lsls	r7, r3, #31
 80232ec:	d508      	bpl.n	8023300 <_printf_i+0x14c>
 80232ee:	6923      	ldr	r3, [r4, #16]
 80232f0:	6861      	ldr	r1, [r4, #4]
 80232f2:	4299      	cmp	r1, r3
 80232f4:	bfde      	ittt	le
 80232f6:	2330      	movle	r3, #48	; 0x30
 80232f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80232fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023300:	1b92      	subs	r2, r2, r6
 8023302:	6122      	str	r2, [r4, #16]
 8023304:	f8cd a000 	str.w	sl, [sp]
 8023308:	464b      	mov	r3, r9
 802330a:	aa03      	add	r2, sp, #12
 802330c:	4621      	mov	r1, r4
 802330e:	4640      	mov	r0, r8
 8023310:	f7ff fee2 	bl	80230d8 <_printf_common>
 8023314:	3001      	adds	r0, #1
 8023316:	d14c      	bne.n	80233b2 <_printf_i+0x1fe>
 8023318:	f04f 30ff 	mov.w	r0, #4294967295
 802331c:	b004      	add	sp, #16
 802331e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023322:	4835      	ldr	r0, [pc, #212]	; (80233f8 <_printf_i+0x244>)
 8023324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023328:	6823      	ldr	r3, [r4, #0]
 802332a:	680e      	ldr	r6, [r1, #0]
 802332c:	061f      	lsls	r7, r3, #24
 802332e:	f856 5b04 	ldr.w	r5, [r6], #4
 8023332:	600e      	str	r6, [r1, #0]
 8023334:	d514      	bpl.n	8023360 <_printf_i+0x1ac>
 8023336:	07d9      	lsls	r1, r3, #31
 8023338:	bf44      	itt	mi
 802333a:	f043 0320 	orrmi.w	r3, r3, #32
 802333e:	6023      	strmi	r3, [r4, #0]
 8023340:	b91d      	cbnz	r5, 802334a <_printf_i+0x196>
 8023342:	6823      	ldr	r3, [r4, #0]
 8023344:	f023 0320 	bic.w	r3, r3, #32
 8023348:	6023      	str	r3, [r4, #0]
 802334a:	2310      	movs	r3, #16
 802334c:	e7b0      	b.n	80232b0 <_printf_i+0xfc>
 802334e:	6823      	ldr	r3, [r4, #0]
 8023350:	f043 0320 	orr.w	r3, r3, #32
 8023354:	6023      	str	r3, [r4, #0]
 8023356:	2378      	movs	r3, #120	; 0x78
 8023358:	4828      	ldr	r0, [pc, #160]	; (80233fc <_printf_i+0x248>)
 802335a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802335e:	e7e3      	b.n	8023328 <_printf_i+0x174>
 8023360:	065e      	lsls	r6, r3, #25
 8023362:	bf48      	it	mi
 8023364:	b2ad      	uxthmi	r5, r5
 8023366:	e7e6      	b.n	8023336 <_printf_i+0x182>
 8023368:	4616      	mov	r6, r2
 802336a:	e7bb      	b.n	80232e4 <_printf_i+0x130>
 802336c:	680b      	ldr	r3, [r1, #0]
 802336e:	6826      	ldr	r6, [r4, #0]
 8023370:	6960      	ldr	r0, [r4, #20]
 8023372:	1d1d      	adds	r5, r3, #4
 8023374:	600d      	str	r5, [r1, #0]
 8023376:	0635      	lsls	r5, r6, #24
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	d501      	bpl.n	8023380 <_printf_i+0x1cc>
 802337c:	6018      	str	r0, [r3, #0]
 802337e:	e002      	b.n	8023386 <_printf_i+0x1d2>
 8023380:	0671      	lsls	r1, r6, #25
 8023382:	d5fb      	bpl.n	802337c <_printf_i+0x1c8>
 8023384:	8018      	strh	r0, [r3, #0]
 8023386:	2300      	movs	r3, #0
 8023388:	6123      	str	r3, [r4, #16]
 802338a:	4616      	mov	r6, r2
 802338c:	e7ba      	b.n	8023304 <_printf_i+0x150>
 802338e:	680b      	ldr	r3, [r1, #0]
 8023390:	1d1a      	adds	r2, r3, #4
 8023392:	600a      	str	r2, [r1, #0]
 8023394:	681e      	ldr	r6, [r3, #0]
 8023396:	6862      	ldr	r2, [r4, #4]
 8023398:	2100      	movs	r1, #0
 802339a:	4630      	mov	r0, r6
 802339c:	f7dc ff30 	bl	8000200 <memchr>
 80233a0:	b108      	cbz	r0, 80233a6 <_printf_i+0x1f2>
 80233a2:	1b80      	subs	r0, r0, r6
 80233a4:	6060      	str	r0, [r4, #4]
 80233a6:	6863      	ldr	r3, [r4, #4]
 80233a8:	6123      	str	r3, [r4, #16]
 80233aa:	2300      	movs	r3, #0
 80233ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80233b0:	e7a8      	b.n	8023304 <_printf_i+0x150>
 80233b2:	6923      	ldr	r3, [r4, #16]
 80233b4:	4632      	mov	r2, r6
 80233b6:	4649      	mov	r1, r9
 80233b8:	4640      	mov	r0, r8
 80233ba:	47d0      	blx	sl
 80233bc:	3001      	adds	r0, #1
 80233be:	d0ab      	beq.n	8023318 <_printf_i+0x164>
 80233c0:	6823      	ldr	r3, [r4, #0]
 80233c2:	079b      	lsls	r3, r3, #30
 80233c4:	d413      	bmi.n	80233ee <_printf_i+0x23a>
 80233c6:	68e0      	ldr	r0, [r4, #12]
 80233c8:	9b03      	ldr	r3, [sp, #12]
 80233ca:	4298      	cmp	r0, r3
 80233cc:	bfb8      	it	lt
 80233ce:	4618      	movlt	r0, r3
 80233d0:	e7a4      	b.n	802331c <_printf_i+0x168>
 80233d2:	2301      	movs	r3, #1
 80233d4:	4632      	mov	r2, r6
 80233d6:	4649      	mov	r1, r9
 80233d8:	4640      	mov	r0, r8
 80233da:	47d0      	blx	sl
 80233dc:	3001      	adds	r0, #1
 80233de:	d09b      	beq.n	8023318 <_printf_i+0x164>
 80233e0:	3501      	adds	r5, #1
 80233e2:	68e3      	ldr	r3, [r4, #12]
 80233e4:	9903      	ldr	r1, [sp, #12]
 80233e6:	1a5b      	subs	r3, r3, r1
 80233e8:	42ab      	cmp	r3, r5
 80233ea:	dcf2      	bgt.n	80233d2 <_printf_i+0x21e>
 80233ec:	e7eb      	b.n	80233c6 <_printf_i+0x212>
 80233ee:	2500      	movs	r5, #0
 80233f0:	f104 0619 	add.w	r6, r4, #25
 80233f4:	e7f5      	b.n	80233e2 <_printf_i+0x22e>
 80233f6:	bf00      	nop
 80233f8:	080336c5 	.word	0x080336c5
 80233fc:	080336d6 	.word	0x080336d6

08023400 <iprintf>:
 8023400:	b40f      	push	{r0, r1, r2, r3}
 8023402:	4b0a      	ldr	r3, [pc, #40]	; (802342c <iprintf+0x2c>)
 8023404:	b513      	push	{r0, r1, r4, lr}
 8023406:	681c      	ldr	r4, [r3, #0]
 8023408:	b124      	cbz	r4, 8023414 <iprintf+0x14>
 802340a:	69a3      	ldr	r3, [r4, #24]
 802340c:	b913      	cbnz	r3, 8023414 <iprintf+0x14>
 802340e:	4620      	mov	r0, r4
 8023410:	f002 fc3e 	bl	8025c90 <__sinit>
 8023414:	ab05      	add	r3, sp, #20
 8023416:	9a04      	ldr	r2, [sp, #16]
 8023418:	68a1      	ldr	r1, [r4, #8]
 802341a:	9301      	str	r3, [sp, #4]
 802341c:	4620      	mov	r0, r4
 802341e:	f7ff fa55 	bl	80228cc <_vfiprintf_r>
 8023422:	b002      	add	sp, #8
 8023424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023428:	b004      	add	sp, #16
 802342a:	4770      	bx	lr
 802342c:	2000057c 	.word	0x2000057c

08023430 <putchar>:
 8023430:	4b09      	ldr	r3, [pc, #36]	; (8023458 <putchar+0x28>)
 8023432:	b513      	push	{r0, r1, r4, lr}
 8023434:	681c      	ldr	r4, [r3, #0]
 8023436:	4601      	mov	r1, r0
 8023438:	b134      	cbz	r4, 8023448 <putchar+0x18>
 802343a:	69a3      	ldr	r3, [r4, #24]
 802343c:	b923      	cbnz	r3, 8023448 <putchar+0x18>
 802343e:	9001      	str	r0, [sp, #4]
 8023440:	4620      	mov	r0, r4
 8023442:	f002 fc25 	bl	8025c90 <__sinit>
 8023446:	9901      	ldr	r1, [sp, #4]
 8023448:	68a2      	ldr	r2, [r4, #8]
 802344a:	4620      	mov	r0, r4
 802344c:	b002      	add	sp, #8
 802344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023452:	f004 bac1 	b.w	80279d8 <_putc_r>
 8023456:	bf00      	nop
 8023458:	2000057c 	.word	0x2000057c

0802345c <_puts_r>:
 802345c:	b570      	push	{r4, r5, r6, lr}
 802345e:	460e      	mov	r6, r1
 8023460:	4605      	mov	r5, r0
 8023462:	b118      	cbz	r0, 802346c <_puts_r+0x10>
 8023464:	6983      	ldr	r3, [r0, #24]
 8023466:	b90b      	cbnz	r3, 802346c <_puts_r+0x10>
 8023468:	f002 fc12 	bl	8025c90 <__sinit>
 802346c:	69ab      	ldr	r3, [r5, #24]
 802346e:	68ac      	ldr	r4, [r5, #8]
 8023470:	b913      	cbnz	r3, 8023478 <_puts_r+0x1c>
 8023472:	4628      	mov	r0, r5
 8023474:	f002 fc0c 	bl	8025c90 <__sinit>
 8023478:	4b2c      	ldr	r3, [pc, #176]	; (802352c <_puts_r+0xd0>)
 802347a:	429c      	cmp	r4, r3
 802347c:	d120      	bne.n	80234c0 <_puts_r+0x64>
 802347e:	686c      	ldr	r4, [r5, #4]
 8023480:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023482:	07db      	lsls	r3, r3, #31
 8023484:	d405      	bmi.n	8023492 <_puts_r+0x36>
 8023486:	89a3      	ldrh	r3, [r4, #12]
 8023488:	0598      	lsls	r0, r3, #22
 802348a:	d402      	bmi.n	8023492 <_puts_r+0x36>
 802348c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802348e:	f003 f8b1 	bl	80265f4 <__retarget_lock_acquire_recursive>
 8023492:	89a3      	ldrh	r3, [r4, #12]
 8023494:	0719      	lsls	r1, r3, #28
 8023496:	d51d      	bpl.n	80234d4 <_puts_r+0x78>
 8023498:	6923      	ldr	r3, [r4, #16]
 802349a:	b1db      	cbz	r3, 80234d4 <_puts_r+0x78>
 802349c:	3e01      	subs	r6, #1
 802349e:	68a3      	ldr	r3, [r4, #8]
 80234a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80234a4:	3b01      	subs	r3, #1
 80234a6:	60a3      	str	r3, [r4, #8]
 80234a8:	bb39      	cbnz	r1, 80234fa <_puts_r+0x9e>
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	da38      	bge.n	8023520 <_puts_r+0xc4>
 80234ae:	4622      	mov	r2, r4
 80234b0:	210a      	movs	r1, #10
 80234b2:	4628      	mov	r0, r5
 80234b4:	f001 fb32 	bl	8024b1c <__swbuf_r>
 80234b8:	3001      	adds	r0, #1
 80234ba:	d011      	beq.n	80234e0 <_puts_r+0x84>
 80234bc:	250a      	movs	r5, #10
 80234be:	e011      	b.n	80234e4 <_puts_r+0x88>
 80234c0:	4b1b      	ldr	r3, [pc, #108]	; (8023530 <_puts_r+0xd4>)
 80234c2:	429c      	cmp	r4, r3
 80234c4:	d101      	bne.n	80234ca <_puts_r+0x6e>
 80234c6:	68ac      	ldr	r4, [r5, #8]
 80234c8:	e7da      	b.n	8023480 <_puts_r+0x24>
 80234ca:	4b1a      	ldr	r3, [pc, #104]	; (8023534 <_puts_r+0xd8>)
 80234cc:	429c      	cmp	r4, r3
 80234ce:	bf08      	it	eq
 80234d0:	68ec      	ldreq	r4, [r5, #12]
 80234d2:	e7d5      	b.n	8023480 <_puts_r+0x24>
 80234d4:	4621      	mov	r1, r4
 80234d6:	4628      	mov	r0, r5
 80234d8:	f001 fb84 	bl	8024be4 <__swsetup_r>
 80234dc:	2800      	cmp	r0, #0
 80234de:	d0dd      	beq.n	802349c <_puts_r+0x40>
 80234e0:	f04f 35ff 	mov.w	r5, #4294967295
 80234e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80234e6:	07da      	lsls	r2, r3, #31
 80234e8:	d405      	bmi.n	80234f6 <_puts_r+0x9a>
 80234ea:	89a3      	ldrh	r3, [r4, #12]
 80234ec:	059b      	lsls	r3, r3, #22
 80234ee:	d402      	bmi.n	80234f6 <_puts_r+0x9a>
 80234f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80234f2:	f003 f881 	bl	80265f8 <__retarget_lock_release_recursive>
 80234f6:	4628      	mov	r0, r5
 80234f8:	bd70      	pop	{r4, r5, r6, pc}
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	da04      	bge.n	8023508 <_puts_r+0xac>
 80234fe:	69a2      	ldr	r2, [r4, #24]
 8023500:	429a      	cmp	r2, r3
 8023502:	dc06      	bgt.n	8023512 <_puts_r+0xb6>
 8023504:	290a      	cmp	r1, #10
 8023506:	d004      	beq.n	8023512 <_puts_r+0xb6>
 8023508:	6823      	ldr	r3, [r4, #0]
 802350a:	1c5a      	adds	r2, r3, #1
 802350c:	6022      	str	r2, [r4, #0]
 802350e:	7019      	strb	r1, [r3, #0]
 8023510:	e7c5      	b.n	802349e <_puts_r+0x42>
 8023512:	4622      	mov	r2, r4
 8023514:	4628      	mov	r0, r5
 8023516:	f001 fb01 	bl	8024b1c <__swbuf_r>
 802351a:	3001      	adds	r0, #1
 802351c:	d1bf      	bne.n	802349e <_puts_r+0x42>
 802351e:	e7df      	b.n	80234e0 <_puts_r+0x84>
 8023520:	6823      	ldr	r3, [r4, #0]
 8023522:	250a      	movs	r5, #10
 8023524:	1c5a      	adds	r2, r3, #1
 8023526:	6022      	str	r2, [r4, #0]
 8023528:	701d      	strb	r5, [r3, #0]
 802352a:	e7db      	b.n	80234e4 <_puts_r+0x88>
 802352c:	08033910 	.word	0x08033910
 8023530:	08033930 	.word	0x08033930
 8023534:	080338f0 	.word	0x080338f0

08023538 <puts>:
 8023538:	4b02      	ldr	r3, [pc, #8]	; (8023544 <puts+0xc>)
 802353a:	4601      	mov	r1, r0
 802353c:	6818      	ldr	r0, [r3, #0]
 802353e:	f7ff bf8d 	b.w	802345c <_puts_r>
 8023542:	bf00      	nop
 8023544:	2000057c 	.word	0x2000057c

08023548 <srand>:
 8023548:	b538      	push	{r3, r4, r5, lr}
 802354a:	4b10      	ldr	r3, [pc, #64]	; (802358c <srand+0x44>)
 802354c:	681d      	ldr	r5, [r3, #0]
 802354e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8023550:	4604      	mov	r4, r0
 8023552:	b9b3      	cbnz	r3, 8023582 <srand+0x3a>
 8023554:	2018      	movs	r0, #24
 8023556:	f7fe fe09 	bl	802216c <malloc>
 802355a:	4602      	mov	r2, r0
 802355c:	63a8      	str	r0, [r5, #56]	; 0x38
 802355e:	b920      	cbnz	r0, 802356a <srand+0x22>
 8023560:	4b0b      	ldr	r3, [pc, #44]	; (8023590 <srand+0x48>)
 8023562:	480c      	ldr	r0, [pc, #48]	; (8023594 <srand+0x4c>)
 8023564:	2142      	movs	r1, #66	; 0x42
 8023566:	f001 fbab 	bl	8024cc0 <__assert_func>
 802356a:	490b      	ldr	r1, [pc, #44]	; (8023598 <srand+0x50>)
 802356c:	4b0b      	ldr	r3, [pc, #44]	; (802359c <srand+0x54>)
 802356e:	e9c0 1300 	strd	r1, r3, [r0]
 8023572:	4b0b      	ldr	r3, [pc, #44]	; (80235a0 <srand+0x58>)
 8023574:	6083      	str	r3, [r0, #8]
 8023576:	230b      	movs	r3, #11
 8023578:	8183      	strh	r3, [r0, #12]
 802357a:	2100      	movs	r1, #0
 802357c:	2001      	movs	r0, #1
 802357e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023582:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8023584:	2200      	movs	r2, #0
 8023586:	611c      	str	r4, [r3, #16]
 8023588:	615a      	str	r2, [r3, #20]
 802358a:	bd38      	pop	{r3, r4, r5, pc}
 802358c:	2000057c 	.word	0x2000057c
 8023590:	080335c8 	.word	0x080335c8
 8023594:	080336e7 	.word	0x080336e7
 8023598:	abcd330e 	.word	0xabcd330e
 802359c:	e66d1234 	.word	0xe66d1234
 80235a0:	0005deec 	.word	0x0005deec

080235a4 <realloc>:
 80235a4:	4b02      	ldr	r3, [pc, #8]	; (80235b0 <realloc+0xc>)
 80235a6:	460a      	mov	r2, r1
 80235a8:	4601      	mov	r1, r0
 80235aa:	6818      	ldr	r0, [r3, #0]
 80235ac:	f003 bd75 	b.w	802709a <_realloc_r>
 80235b0:	2000057c 	.word	0x2000057c

080235b4 <_sbrk_r>:
 80235b4:	b538      	push	{r3, r4, r5, lr}
 80235b6:	4d06      	ldr	r5, [pc, #24]	; (80235d0 <_sbrk_r+0x1c>)
 80235b8:	2300      	movs	r3, #0
 80235ba:	4604      	mov	r4, r0
 80235bc:	4608      	mov	r0, r1
 80235be:	602b      	str	r3, [r5, #0]
 80235c0:	f7e0 fd96 	bl	80040f0 <_sbrk>
 80235c4:	1c43      	adds	r3, r0, #1
 80235c6:	d102      	bne.n	80235ce <_sbrk_r+0x1a>
 80235c8:	682b      	ldr	r3, [r5, #0]
 80235ca:	b103      	cbz	r3, 80235ce <_sbrk_r+0x1a>
 80235cc:	6023      	str	r3, [r4, #0]
 80235ce:	bd38      	pop	{r3, r4, r5, pc}
 80235d0:	200019b8 	.word	0x200019b8

080235d4 <sniprintf>:
 80235d4:	b40c      	push	{r2, r3}
 80235d6:	b530      	push	{r4, r5, lr}
 80235d8:	4b17      	ldr	r3, [pc, #92]	; (8023638 <sniprintf+0x64>)
 80235da:	1e0c      	subs	r4, r1, #0
 80235dc:	681d      	ldr	r5, [r3, #0]
 80235de:	b09d      	sub	sp, #116	; 0x74
 80235e0:	da08      	bge.n	80235f4 <sniprintf+0x20>
 80235e2:	238b      	movs	r3, #139	; 0x8b
 80235e4:	602b      	str	r3, [r5, #0]
 80235e6:	f04f 30ff 	mov.w	r0, #4294967295
 80235ea:	b01d      	add	sp, #116	; 0x74
 80235ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80235f0:	b002      	add	sp, #8
 80235f2:	4770      	bx	lr
 80235f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80235f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80235fc:	bf14      	ite	ne
 80235fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8023602:	4623      	moveq	r3, r4
 8023604:	9304      	str	r3, [sp, #16]
 8023606:	9307      	str	r3, [sp, #28]
 8023608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802360c:	9002      	str	r0, [sp, #8]
 802360e:	9006      	str	r0, [sp, #24]
 8023610:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023614:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023616:	ab21      	add	r3, sp, #132	; 0x84
 8023618:	a902      	add	r1, sp, #8
 802361a:	4628      	mov	r0, r5
 802361c:	9301      	str	r3, [sp, #4]
 802361e:	f003 fdbd 	bl	802719c <_svfiprintf_r>
 8023622:	1c43      	adds	r3, r0, #1
 8023624:	bfbc      	itt	lt
 8023626:	238b      	movlt	r3, #139	; 0x8b
 8023628:	602b      	strlt	r3, [r5, #0]
 802362a:	2c00      	cmp	r4, #0
 802362c:	d0dd      	beq.n	80235ea <sniprintf+0x16>
 802362e:	9b02      	ldr	r3, [sp, #8]
 8023630:	2200      	movs	r2, #0
 8023632:	701a      	strb	r2, [r3, #0]
 8023634:	e7d9      	b.n	80235ea <sniprintf+0x16>
 8023636:	bf00      	nop
 8023638:	2000057c 	.word	0x2000057c

0802363c <siprintf>:
 802363c:	b40e      	push	{r1, r2, r3}
 802363e:	b500      	push	{lr}
 8023640:	b09c      	sub	sp, #112	; 0x70
 8023642:	ab1d      	add	r3, sp, #116	; 0x74
 8023644:	9002      	str	r0, [sp, #8]
 8023646:	9006      	str	r0, [sp, #24]
 8023648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802364c:	4809      	ldr	r0, [pc, #36]	; (8023674 <siprintf+0x38>)
 802364e:	9107      	str	r1, [sp, #28]
 8023650:	9104      	str	r1, [sp, #16]
 8023652:	4909      	ldr	r1, [pc, #36]	; (8023678 <siprintf+0x3c>)
 8023654:	f853 2b04 	ldr.w	r2, [r3], #4
 8023658:	9105      	str	r1, [sp, #20]
 802365a:	6800      	ldr	r0, [r0, #0]
 802365c:	9301      	str	r3, [sp, #4]
 802365e:	a902      	add	r1, sp, #8
 8023660:	f003 fd9c 	bl	802719c <_svfiprintf_r>
 8023664:	9b02      	ldr	r3, [sp, #8]
 8023666:	2200      	movs	r2, #0
 8023668:	701a      	strb	r2, [r3, #0]
 802366a:	b01c      	add	sp, #112	; 0x70
 802366c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023670:	b003      	add	sp, #12
 8023672:	4770      	bx	lr
 8023674:	2000057c 	.word	0x2000057c
 8023678:	ffff0208 	.word	0xffff0208

0802367c <siscanf>:
 802367c:	b40e      	push	{r1, r2, r3}
 802367e:	b510      	push	{r4, lr}
 8023680:	b09f      	sub	sp, #124	; 0x7c
 8023682:	ac21      	add	r4, sp, #132	; 0x84
 8023684:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023688:	f854 2b04 	ldr.w	r2, [r4], #4
 802368c:	9201      	str	r2, [sp, #4]
 802368e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023692:	9004      	str	r0, [sp, #16]
 8023694:	9008      	str	r0, [sp, #32]
 8023696:	f7dc fda5 	bl	80001e4 <strlen>
 802369a:	4b0c      	ldr	r3, [pc, #48]	; (80236cc <siscanf+0x50>)
 802369c:	9005      	str	r0, [sp, #20]
 802369e:	9009      	str	r0, [sp, #36]	; 0x24
 80236a0:	930d      	str	r3, [sp, #52]	; 0x34
 80236a2:	480b      	ldr	r0, [pc, #44]	; (80236d0 <siscanf+0x54>)
 80236a4:	9a01      	ldr	r2, [sp, #4]
 80236a6:	6800      	ldr	r0, [r0, #0]
 80236a8:	9403      	str	r4, [sp, #12]
 80236aa:	2300      	movs	r3, #0
 80236ac:	9311      	str	r3, [sp, #68]	; 0x44
 80236ae:	9316      	str	r3, [sp, #88]	; 0x58
 80236b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80236b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80236b8:	a904      	add	r1, sp, #16
 80236ba:	4623      	mov	r3, r4
 80236bc:	f003 fec8 	bl	8027450 <__ssvfiscanf_r>
 80236c0:	b01f      	add	sp, #124	; 0x7c
 80236c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80236c6:	b003      	add	sp, #12
 80236c8:	4770      	bx	lr
 80236ca:	bf00      	nop
 80236cc:	080236f7 	.word	0x080236f7
 80236d0:	2000057c 	.word	0x2000057c

080236d4 <__sread>:
 80236d4:	b510      	push	{r4, lr}
 80236d6:	460c      	mov	r4, r1
 80236d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236dc:	f004 f9c4 	bl	8027a68 <_read_r>
 80236e0:	2800      	cmp	r0, #0
 80236e2:	bfab      	itete	ge
 80236e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80236e6:	89a3      	ldrhlt	r3, [r4, #12]
 80236e8:	181b      	addge	r3, r3, r0
 80236ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80236ee:	bfac      	ite	ge
 80236f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80236f2:	81a3      	strhlt	r3, [r4, #12]
 80236f4:	bd10      	pop	{r4, pc}

080236f6 <__seofread>:
 80236f6:	2000      	movs	r0, #0
 80236f8:	4770      	bx	lr

080236fa <__swrite>:
 80236fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236fe:	461f      	mov	r7, r3
 8023700:	898b      	ldrh	r3, [r1, #12]
 8023702:	05db      	lsls	r3, r3, #23
 8023704:	4605      	mov	r5, r0
 8023706:	460c      	mov	r4, r1
 8023708:	4616      	mov	r6, r2
 802370a:	d505      	bpl.n	8023718 <__swrite+0x1e>
 802370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023710:	2302      	movs	r3, #2
 8023712:	2200      	movs	r2, #0
 8023714:	f002 ff72 	bl	80265fc <_lseek_r>
 8023718:	89a3      	ldrh	r3, [r4, #12]
 802371a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802371e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023722:	81a3      	strh	r3, [r4, #12]
 8023724:	4632      	mov	r2, r6
 8023726:	463b      	mov	r3, r7
 8023728:	4628      	mov	r0, r5
 802372a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802372e:	f001 ba47 	b.w	8024bc0 <_write_r>

08023732 <__sseek>:
 8023732:	b510      	push	{r4, lr}
 8023734:	460c      	mov	r4, r1
 8023736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802373a:	f002 ff5f 	bl	80265fc <_lseek_r>
 802373e:	1c43      	adds	r3, r0, #1
 8023740:	89a3      	ldrh	r3, [r4, #12]
 8023742:	bf15      	itete	ne
 8023744:	6560      	strne	r0, [r4, #84]	; 0x54
 8023746:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802374a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802374e:	81a3      	strheq	r3, [r4, #12]
 8023750:	bf18      	it	ne
 8023752:	81a3      	strhne	r3, [r4, #12]
 8023754:	bd10      	pop	{r4, pc}

08023756 <__sclose>:
 8023756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802375a:	f001 bacf 	b.w	8024cfc <_close_r>

0802375e <strchr>:
 802375e:	b2c9      	uxtb	r1, r1
 8023760:	4603      	mov	r3, r0
 8023762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023766:	b11a      	cbz	r2, 8023770 <strchr+0x12>
 8023768:	428a      	cmp	r2, r1
 802376a:	d1f9      	bne.n	8023760 <strchr+0x2>
 802376c:	4618      	mov	r0, r3
 802376e:	4770      	bx	lr
 8023770:	2900      	cmp	r1, #0
 8023772:	bf18      	it	ne
 8023774:	2300      	movne	r3, #0
 8023776:	e7f9      	b.n	802376c <strchr+0xe>

08023778 <strcpy>:
 8023778:	4603      	mov	r3, r0
 802377a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802377e:	f803 2b01 	strb.w	r2, [r3], #1
 8023782:	2a00      	cmp	r2, #0
 8023784:	d1f9      	bne.n	802377a <strcpy+0x2>
 8023786:	4770      	bx	lr

08023788 <strncmp>:
 8023788:	b510      	push	{r4, lr}
 802378a:	b16a      	cbz	r2, 80237a8 <strncmp+0x20>
 802378c:	3901      	subs	r1, #1
 802378e:	1884      	adds	r4, r0, r2
 8023790:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023794:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023798:	4293      	cmp	r3, r2
 802379a:	d103      	bne.n	80237a4 <strncmp+0x1c>
 802379c:	42a0      	cmp	r0, r4
 802379e:	d001      	beq.n	80237a4 <strncmp+0x1c>
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	d1f5      	bne.n	8023790 <strncmp+0x8>
 80237a4:	1a98      	subs	r0, r3, r2
 80237a6:	bd10      	pop	{r4, pc}
 80237a8:	4610      	mov	r0, r2
 80237aa:	e7fc      	b.n	80237a6 <strncmp+0x1e>

080237ac <strncpy>:
 80237ac:	b510      	push	{r4, lr}
 80237ae:	3901      	subs	r1, #1
 80237b0:	4603      	mov	r3, r0
 80237b2:	b132      	cbz	r2, 80237c2 <strncpy+0x16>
 80237b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80237b8:	f803 4b01 	strb.w	r4, [r3], #1
 80237bc:	3a01      	subs	r2, #1
 80237be:	2c00      	cmp	r4, #0
 80237c0:	d1f7      	bne.n	80237b2 <strncpy+0x6>
 80237c2:	441a      	add	r2, r3
 80237c4:	2100      	movs	r1, #0
 80237c6:	4293      	cmp	r3, r2
 80237c8:	d100      	bne.n	80237cc <strncpy+0x20>
 80237ca:	bd10      	pop	{r4, pc}
 80237cc:	f803 1b01 	strb.w	r1, [r3], #1
 80237d0:	e7f9      	b.n	80237c6 <strncpy+0x1a>

080237d2 <strstr>:
 80237d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237d4:	780c      	ldrb	r4, [r1, #0]
 80237d6:	b164      	cbz	r4, 80237f2 <strstr+0x20>
 80237d8:	4603      	mov	r3, r0
 80237da:	781a      	ldrb	r2, [r3, #0]
 80237dc:	4618      	mov	r0, r3
 80237de:	1c5e      	adds	r6, r3, #1
 80237e0:	b90a      	cbnz	r2, 80237e6 <strstr+0x14>
 80237e2:	4610      	mov	r0, r2
 80237e4:	e005      	b.n	80237f2 <strstr+0x20>
 80237e6:	4294      	cmp	r4, r2
 80237e8:	d108      	bne.n	80237fc <strstr+0x2a>
 80237ea:	460d      	mov	r5, r1
 80237ec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80237f0:	b902      	cbnz	r2, 80237f4 <strstr+0x22>
 80237f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80237f4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80237f8:	4297      	cmp	r7, r2
 80237fa:	d0f7      	beq.n	80237ec <strstr+0x1a>
 80237fc:	4633      	mov	r3, r6
 80237fe:	e7ec      	b.n	80237da <strstr+0x8>

08023800 <sulp>:
 8023800:	b570      	push	{r4, r5, r6, lr}
 8023802:	4604      	mov	r4, r0
 8023804:	460d      	mov	r5, r1
 8023806:	ec45 4b10 	vmov	d0, r4, r5
 802380a:	4616      	mov	r6, r2
 802380c:	f003 faf6 	bl	8026dfc <__ulp>
 8023810:	ec51 0b10 	vmov	r0, r1, d0
 8023814:	b17e      	cbz	r6, 8023836 <sulp+0x36>
 8023816:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802381a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802381e:	2b00      	cmp	r3, #0
 8023820:	dd09      	ble.n	8023836 <sulp+0x36>
 8023822:	051b      	lsls	r3, r3, #20
 8023824:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8023828:	2400      	movs	r4, #0
 802382a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802382e:	4622      	mov	r2, r4
 8023830:	462b      	mov	r3, r5
 8023832:	f7dc fef1 	bl	8000618 <__aeabi_dmul>
 8023836:	bd70      	pop	{r4, r5, r6, pc}

08023838 <_strtod_l>:
 8023838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802383c:	b0a3      	sub	sp, #140	; 0x8c
 802383e:	461f      	mov	r7, r3
 8023840:	2300      	movs	r3, #0
 8023842:	931e      	str	r3, [sp, #120]	; 0x78
 8023844:	4ba4      	ldr	r3, [pc, #656]	; (8023ad8 <_strtod_l+0x2a0>)
 8023846:	9219      	str	r2, [sp, #100]	; 0x64
 8023848:	681b      	ldr	r3, [r3, #0]
 802384a:	9307      	str	r3, [sp, #28]
 802384c:	4604      	mov	r4, r0
 802384e:	4618      	mov	r0, r3
 8023850:	4688      	mov	r8, r1
 8023852:	f7dc fcc7 	bl	80001e4 <strlen>
 8023856:	f04f 0a00 	mov.w	sl, #0
 802385a:	4605      	mov	r5, r0
 802385c:	f04f 0b00 	mov.w	fp, #0
 8023860:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023866:	781a      	ldrb	r2, [r3, #0]
 8023868:	2a2b      	cmp	r2, #43	; 0x2b
 802386a:	d04c      	beq.n	8023906 <_strtod_l+0xce>
 802386c:	d839      	bhi.n	80238e2 <_strtod_l+0xaa>
 802386e:	2a0d      	cmp	r2, #13
 8023870:	d832      	bhi.n	80238d8 <_strtod_l+0xa0>
 8023872:	2a08      	cmp	r2, #8
 8023874:	d832      	bhi.n	80238dc <_strtod_l+0xa4>
 8023876:	2a00      	cmp	r2, #0
 8023878:	d03c      	beq.n	80238f4 <_strtod_l+0xbc>
 802387a:	2300      	movs	r3, #0
 802387c:	930e      	str	r3, [sp, #56]	; 0x38
 802387e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023880:	7833      	ldrb	r3, [r6, #0]
 8023882:	2b30      	cmp	r3, #48	; 0x30
 8023884:	f040 80b4 	bne.w	80239f0 <_strtod_l+0x1b8>
 8023888:	7873      	ldrb	r3, [r6, #1]
 802388a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802388e:	2b58      	cmp	r3, #88	; 0x58
 8023890:	d16c      	bne.n	802396c <_strtod_l+0x134>
 8023892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023894:	9301      	str	r3, [sp, #4]
 8023896:	ab1e      	add	r3, sp, #120	; 0x78
 8023898:	9702      	str	r7, [sp, #8]
 802389a:	9300      	str	r3, [sp, #0]
 802389c:	4a8f      	ldr	r2, [pc, #572]	; (8023adc <_strtod_l+0x2a4>)
 802389e:	ab1f      	add	r3, sp, #124	; 0x7c
 80238a0:	a91d      	add	r1, sp, #116	; 0x74
 80238a2:	4620      	mov	r0, r4
 80238a4:	f002 fb16 	bl	8025ed4 <__gethex>
 80238a8:	f010 0707 	ands.w	r7, r0, #7
 80238ac:	4605      	mov	r5, r0
 80238ae:	d005      	beq.n	80238bc <_strtod_l+0x84>
 80238b0:	2f06      	cmp	r7, #6
 80238b2:	d12a      	bne.n	802390a <_strtod_l+0xd2>
 80238b4:	3601      	adds	r6, #1
 80238b6:	2300      	movs	r3, #0
 80238b8:	961d      	str	r6, [sp, #116]	; 0x74
 80238ba:	930e      	str	r3, [sp, #56]	; 0x38
 80238bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238be:	2b00      	cmp	r3, #0
 80238c0:	f040 8596 	bne.w	80243f0 <_strtod_l+0xbb8>
 80238c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80238c6:	b1db      	cbz	r3, 8023900 <_strtod_l+0xc8>
 80238c8:	4652      	mov	r2, sl
 80238ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80238ce:	ec43 2b10 	vmov	d0, r2, r3
 80238d2:	b023      	add	sp, #140	; 0x8c
 80238d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238d8:	2a20      	cmp	r2, #32
 80238da:	d1ce      	bne.n	802387a <_strtod_l+0x42>
 80238dc:	3301      	adds	r3, #1
 80238de:	931d      	str	r3, [sp, #116]	; 0x74
 80238e0:	e7c0      	b.n	8023864 <_strtod_l+0x2c>
 80238e2:	2a2d      	cmp	r2, #45	; 0x2d
 80238e4:	d1c9      	bne.n	802387a <_strtod_l+0x42>
 80238e6:	2201      	movs	r2, #1
 80238e8:	920e      	str	r2, [sp, #56]	; 0x38
 80238ea:	1c5a      	adds	r2, r3, #1
 80238ec:	921d      	str	r2, [sp, #116]	; 0x74
 80238ee:	785b      	ldrb	r3, [r3, #1]
 80238f0:	2b00      	cmp	r3, #0
 80238f2:	d1c4      	bne.n	802387e <_strtod_l+0x46>
 80238f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80238fa:	2b00      	cmp	r3, #0
 80238fc:	f040 8576 	bne.w	80243ec <_strtod_l+0xbb4>
 8023900:	4652      	mov	r2, sl
 8023902:	465b      	mov	r3, fp
 8023904:	e7e3      	b.n	80238ce <_strtod_l+0x96>
 8023906:	2200      	movs	r2, #0
 8023908:	e7ee      	b.n	80238e8 <_strtod_l+0xb0>
 802390a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802390c:	b13a      	cbz	r2, 802391e <_strtod_l+0xe6>
 802390e:	2135      	movs	r1, #53	; 0x35
 8023910:	a820      	add	r0, sp, #128	; 0x80
 8023912:	f003 fb7e 	bl	8027012 <__copybits>
 8023916:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023918:	4620      	mov	r0, r4
 802391a:	f002 ff43 	bl	80267a4 <_Bfree>
 802391e:	3f01      	subs	r7, #1
 8023920:	2f05      	cmp	r7, #5
 8023922:	d807      	bhi.n	8023934 <_strtod_l+0xfc>
 8023924:	e8df f007 	tbb	[pc, r7]
 8023928:	1d180b0e 	.word	0x1d180b0e
 802392c:	030e      	.short	0x030e
 802392e:	f04f 0b00 	mov.w	fp, #0
 8023932:	46da      	mov	sl, fp
 8023934:	0728      	lsls	r0, r5, #28
 8023936:	d5c1      	bpl.n	80238bc <_strtod_l+0x84>
 8023938:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 802393c:	e7be      	b.n	80238bc <_strtod_l+0x84>
 802393e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8023942:	e7f7      	b.n	8023934 <_strtod_l+0xfc>
 8023944:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8023948:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802394a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802394e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023952:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8023956:	e7ed      	b.n	8023934 <_strtod_l+0xfc>
 8023958:	f8df b184 	ldr.w	fp, [pc, #388]	; 8023ae0 <_strtod_l+0x2a8>
 802395c:	f04f 0a00 	mov.w	sl, #0
 8023960:	e7e8      	b.n	8023934 <_strtod_l+0xfc>
 8023962:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8023966:	f04f 3aff 	mov.w	sl, #4294967295
 802396a:	e7e3      	b.n	8023934 <_strtod_l+0xfc>
 802396c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802396e:	1c5a      	adds	r2, r3, #1
 8023970:	921d      	str	r2, [sp, #116]	; 0x74
 8023972:	785b      	ldrb	r3, [r3, #1]
 8023974:	2b30      	cmp	r3, #48	; 0x30
 8023976:	d0f9      	beq.n	802396c <_strtod_l+0x134>
 8023978:	2b00      	cmp	r3, #0
 802397a:	d09f      	beq.n	80238bc <_strtod_l+0x84>
 802397c:	2301      	movs	r3, #1
 802397e:	f04f 0900 	mov.w	r9, #0
 8023982:	9304      	str	r3, [sp, #16]
 8023984:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023986:	930a      	str	r3, [sp, #40]	; 0x28
 8023988:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802398c:	464f      	mov	r7, r9
 802398e:	220a      	movs	r2, #10
 8023990:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023992:	7806      	ldrb	r6, [r0, #0]
 8023994:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8023998:	b2d9      	uxtb	r1, r3
 802399a:	2909      	cmp	r1, #9
 802399c:	d92a      	bls.n	80239f4 <_strtod_l+0x1bc>
 802399e:	9907      	ldr	r1, [sp, #28]
 80239a0:	462a      	mov	r2, r5
 80239a2:	f7ff fef1 	bl	8023788 <strncmp>
 80239a6:	b398      	cbz	r0, 8023a10 <_strtod_l+0x1d8>
 80239a8:	2000      	movs	r0, #0
 80239aa:	4633      	mov	r3, r6
 80239ac:	463d      	mov	r5, r7
 80239ae:	9007      	str	r0, [sp, #28]
 80239b0:	4602      	mov	r2, r0
 80239b2:	2b65      	cmp	r3, #101	; 0x65
 80239b4:	d001      	beq.n	80239ba <_strtod_l+0x182>
 80239b6:	2b45      	cmp	r3, #69	; 0x45
 80239b8:	d118      	bne.n	80239ec <_strtod_l+0x1b4>
 80239ba:	b91d      	cbnz	r5, 80239c4 <_strtod_l+0x18c>
 80239bc:	9b04      	ldr	r3, [sp, #16]
 80239be:	4303      	orrs	r3, r0
 80239c0:	d098      	beq.n	80238f4 <_strtod_l+0xbc>
 80239c2:	2500      	movs	r5, #0
 80239c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80239c8:	f108 0301 	add.w	r3, r8, #1
 80239cc:	931d      	str	r3, [sp, #116]	; 0x74
 80239ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80239d2:	2b2b      	cmp	r3, #43	; 0x2b
 80239d4:	d075      	beq.n	8023ac2 <_strtod_l+0x28a>
 80239d6:	2b2d      	cmp	r3, #45	; 0x2d
 80239d8:	d07b      	beq.n	8023ad2 <_strtod_l+0x29a>
 80239da:	f04f 0c00 	mov.w	ip, #0
 80239de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80239e2:	2909      	cmp	r1, #9
 80239e4:	f240 8082 	bls.w	8023aec <_strtod_l+0x2b4>
 80239e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80239ec:	2600      	movs	r6, #0
 80239ee:	e09d      	b.n	8023b2c <_strtod_l+0x2f4>
 80239f0:	2300      	movs	r3, #0
 80239f2:	e7c4      	b.n	802397e <_strtod_l+0x146>
 80239f4:	2f08      	cmp	r7, #8
 80239f6:	bfd8      	it	le
 80239f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80239fa:	f100 0001 	add.w	r0, r0, #1
 80239fe:	bfda      	itte	le
 8023a00:	fb02 3301 	mlale	r3, r2, r1, r3
 8023a04:	9309      	strle	r3, [sp, #36]	; 0x24
 8023a06:	fb02 3909 	mlagt	r9, r2, r9, r3
 8023a0a:	3701      	adds	r7, #1
 8023a0c:	901d      	str	r0, [sp, #116]	; 0x74
 8023a0e:	e7bf      	b.n	8023990 <_strtod_l+0x158>
 8023a10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023a12:	195a      	adds	r2, r3, r5
 8023a14:	921d      	str	r2, [sp, #116]	; 0x74
 8023a16:	5d5b      	ldrb	r3, [r3, r5]
 8023a18:	2f00      	cmp	r7, #0
 8023a1a:	d037      	beq.n	8023a8c <_strtod_l+0x254>
 8023a1c:	9007      	str	r0, [sp, #28]
 8023a1e:	463d      	mov	r5, r7
 8023a20:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023a24:	2a09      	cmp	r2, #9
 8023a26:	d912      	bls.n	8023a4e <_strtod_l+0x216>
 8023a28:	2201      	movs	r2, #1
 8023a2a:	e7c2      	b.n	80239b2 <_strtod_l+0x17a>
 8023a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023a2e:	1c5a      	adds	r2, r3, #1
 8023a30:	921d      	str	r2, [sp, #116]	; 0x74
 8023a32:	785b      	ldrb	r3, [r3, #1]
 8023a34:	3001      	adds	r0, #1
 8023a36:	2b30      	cmp	r3, #48	; 0x30
 8023a38:	d0f8      	beq.n	8023a2c <_strtod_l+0x1f4>
 8023a3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8023a3e:	2a08      	cmp	r2, #8
 8023a40:	f200 84db 	bhi.w	80243fa <_strtod_l+0xbc2>
 8023a44:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023a46:	9007      	str	r0, [sp, #28]
 8023a48:	2000      	movs	r0, #0
 8023a4a:	920a      	str	r2, [sp, #40]	; 0x28
 8023a4c:	4605      	mov	r5, r0
 8023a4e:	3b30      	subs	r3, #48	; 0x30
 8023a50:	f100 0201 	add.w	r2, r0, #1
 8023a54:	d014      	beq.n	8023a80 <_strtod_l+0x248>
 8023a56:	9907      	ldr	r1, [sp, #28]
 8023a58:	4411      	add	r1, r2
 8023a5a:	9107      	str	r1, [sp, #28]
 8023a5c:	462a      	mov	r2, r5
 8023a5e:	eb00 0e05 	add.w	lr, r0, r5
 8023a62:	210a      	movs	r1, #10
 8023a64:	4572      	cmp	r2, lr
 8023a66:	d113      	bne.n	8023a90 <_strtod_l+0x258>
 8023a68:	182a      	adds	r2, r5, r0
 8023a6a:	2a08      	cmp	r2, #8
 8023a6c:	f105 0501 	add.w	r5, r5, #1
 8023a70:	4405      	add	r5, r0
 8023a72:	dc1c      	bgt.n	8023aae <_strtod_l+0x276>
 8023a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023a76:	220a      	movs	r2, #10
 8023a78:	fb02 3301 	mla	r3, r2, r1, r3
 8023a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8023a7e:	2200      	movs	r2, #0
 8023a80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023a82:	1c59      	adds	r1, r3, #1
 8023a84:	911d      	str	r1, [sp, #116]	; 0x74
 8023a86:	785b      	ldrb	r3, [r3, #1]
 8023a88:	4610      	mov	r0, r2
 8023a8a:	e7c9      	b.n	8023a20 <_strtod_l+0x1e8>
 8023a8c:	4638      	mov	r0, r7
 8023a8e:	e7d2      	b.n	8023a36 <_strtod_l+0x1fe>
 8023a90:	2a08      	cmp	r2, #8
 8023a92:	dc04      	bgt.n	8023a9e <_strtod_l+0x266>
 8023a94:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023a96:	434e      	muls	r6, r1
 8023a98:	9609      	str	r6, [sp, #36]	; 0x24
 8023a9a:	3201      	adds	r2, #1
 8023a9c:	e7e2      	b.n	8023a64 <_strtod_l+0x22c>
 8023a9e:	f102 0c01 	add.w	ip, r2, #1
 8023aa2:	f1bc 0f10 	cmp.w	ip, #16
 8023aa6:	bfd8      	it	le
 8023aa8:	fb01 f909 	mulle.w	r9, r1, r9
 8023aac:	e7f5      	b.n	8023a9a <_strtod_l+0x262>
 8023aae:	2d10      	cmp	r5, #16
 8023ab0:	bfdc      	itt	le
 8023ab2:	220a      	movle	r2, #10
 8023ab4:	fb02 3909 	mlale	r9, r2, r9, r3
 8023ab8:	e7e1      	b.n	8023a7e <_strtod_l+0x246>
 8023aba:	2300      	movs	r3, #0
 8023abc:	9307      	str	r3, [sp, #28]
 8023abe:	2201      	movs	r2, #1
 8023ac0:	e77c      	b.n	80239bc <_strtod_l+0x184>
 8023ac2:	f04f 0c00 	mov.w	ip, #0
 8023ac6:	f108 0302 	add.w	r3, r8, #2
 8023aca:	931d      	str	r3, [sp, #116]	; 0x74
 8023acc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8023ad0:	e785      	b.n	80239de <_strtod_l+0x1a6>
 8023ad2:	f04f 0c01 	mov.w	ip, #1
 8023ad6:	e7f6      	b.n	8023ac6 <_strtod_l+0x28e>
 8023ad8:	080339b8 	.word	0x080339b8
 8023adc:	08033748 	.word	0x08033748
 8023ae0:	7ff00000 	.word	0x7ff00000
 8023ae4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ae6:	1c59      	adds	r1, r3, #1
 8023ae8:	911d      	str	r1, [sp, #116]	; 0x74
 8023aea:	785b      	ldrb	r3, [r3, #1]
 8023aec:	2b30      	cmp	r3, #48	; 0x30
 8023aee:	d0f9      	beq.n	8023ae4 <_strtod_l+0x2ac>
 8023af0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8023af4:	2908      	cmp	r1, #8
 8023af6:	f63f af79 	bhi.w	80239ec <_strtod_l+0x1b4>
 8023afa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8023afe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023b00:	9308      	str	r3, [sp, #32]
 8023b02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023b04:	1c59      	adds	r1, r3, #1
 8023b06:	911d      	str	r1, [sp, #116]	; 0x74
 8023b08:	785b      	ldrb	r3, [r3, #1]
 8023b0a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8023b0e:	2e09      	cmp	r6, #9
 8023b10:	d937      	bls.n	8023b82 <_strtod_l+0x34a>
 8023b12:	9e08      	ldr	r6, [sp, #32]
 8023b14:	1b89      	subs	r1, r1, r6
 8023b16:	2908      	cmp	r1, #8
 8023b18:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8023b1c:	dc02      	bgt.n	8023b24 <_strtod_l+0x2ec>
 8023b1e:	4576      	cmp	r6, lr
 8023b20:	bfa8      	it	ge
 8023b22:	4676      	movge	r6, lr
 8023b24:	f1bc 0f00 	cmp.w	ip, #0
 8023b28:	d000      	beq.n	8023b2c <_strtod_l+0x2f4>
 8023b2a:	4276      	negs	r6, r6
 8023b2c:	2d00      	cmp	r5, #0
 8023b2e:	d14f      	bne.n	8023bd0 <_strtod_l+0x398>
 8023b30:	9904      	ldr	r1, [sp, #16]
 8023b32:	4301      	orrs	r1, r0
 8023b34:	f47f aec2 	bne.w	80238bc <_strtod_l+0x84>
 8023b38:	2a00      	cmp	r2, #0
 8023b3a:	f47f aedb 	bne.w	80238f4 <_strtod_l+0xbc>
 8023b3e:	2b69      	cmp	r3, #105	; 0x69
 8023b40:	d027      	beq.n	8023b92 <_strtod_l+0x35a>
 8023b42:	dc24      	bgt.n	8023b8e <_strtod_l+0x356>
 8023b44:	2b49      	cmp	r3, #73	; 0x49
 8023b46:	d024      	beq.n	8023b92 <_strtod_l+0x35a>
 8023b48:	2b4e      	cmp	r3, #78	; 0x4e
 8023b4a:	f47f aed3 	bne.w	80238f4 <_strtod_l+0xbc>
 8023b4e:	499e      	ldr	r1, [pc, #632]	; (8023dc8 <_strtod_l+0x590>)
 8023b50:	a81d      	add	r0, sp, #116	; 0x74
 8023b52:	f002 fc17 	bl	8026384 <__match>
 8023b56:	2800      	cmp	r0, #0
 8023b58:	f43f aecc 	beq.w	80238f4 <_strtod_l+0xbc>
 8023b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023b5e:	781b      	ldrb	r3, [r3, #0]
 8023b60:	2b28      	cmp	r3, #40	; 0x28
 8023b62:	d12d      	bne.n	8023bc0 <_strtod_l+0x388>
 8023b64:	4999      	ldr	r1, [pc, #612]	; (8023dcc <_strtod_l+0x594>)
 8023b66:	aa20      	add	r2, sp, #128	; 0x80
 8023b68:	a81d      	add	r0, sp, #116	; 0x74
 8023b6a:	f002 fc1f 	bl	80263ac <__hexnan>
 8023b6e:	2805      	cmp	r0, #5
 8023b70:	d126      	bne.n	8023bc0 <_strtod_l+0x388>
 8023b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023b74:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8023b78:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023b7c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8023b80:	e69c      	b.n	80238bc <_strtod_l+0x84>
 8023b82:	210a      	movs	r1, #10
 8023b84:	fb01 3e0e 	mla	lr, r1, lr, r3
 8023b88:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023b8c:	e7b9      	b.n	8023b02 <_strtod_l+0x2ca>
 8023b8e:	2b6e      	cmp	r3, #110	; 0x6e
 8023b90:	e7db      	b.n	8023b4a <_strtod_l+0x312>
 8023b92:	498f      	ldr	r1, [pc, #572]	; (8023dd0 <_strtod_l+0x598>)
 8023b94:	a81d      	add	r0, sp, #116	; 0x74
 8023b96:	f002 fbf5 	bl	8026384 <__match>
 8023b9a:	2800      	cmp	r0, #0
 8023b9c:	f43f aeaa 	beq.w	80238f4 <_strtod_l+0xbc>
 8023ba0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ba2:	498c      	ldr	r1, [pc, #560]	; (8023dd4 <_strtod_l+0x59c>)
 8023ba4:	3b01      	subs	r3, #1
 8023ba6:	a81d      	add	r0, sp, #116	; 0x74
 8023ba8:	931d      	str	r3, [sp, #116]	; 0x74
 8023baa:	f002 fbeb 	bl	8026384 <__match>
 8023bae:	b910      	cbnz	r0, 8023bb6 <_strtod_l+0x37e>
 8023bb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023bb2:	3301      	adds	r3, #1
 8023bb4:	931d      	str	r3, [sp, #116]	; 0x74
 8023bb6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8023de4 <_strtod_l+0x5ac>
 8023bba:	f04f 0a00 	mov.w	sl, #0
 8023bbe:	e67d      	b.n	80238bc <_strtod_l+0x84>
 8023bc0:	4885      	ldr	r0, [pc, #532]	; (8023dd8 <_strtod_l+0x5a0>)
 8023bc2:	f003 ff91 	bl	8027ae8 <nan>
 8023bc6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8023bca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8023bce:	e675      	b.n	80238bc <_strtod_l+0x84>
 8023bd0:	9b07      	ldr	r3, [sp, #28]
 8023bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023bd4:	1af3      	subs	r3, r6, r3
 8023bd6:	2f00      	cmp	r7, #0
 8023bd8:	bf08      	it	eq
 8023bda:	462f      	moveq	r7, r5
 8023bdc:	2d10      	cmp	r5, #16
 8023bde:	9308      	str	r3, [sp, #32]
 8023be0:	46a8      	mov	r8, r5
 8023be2:	bfa8      	it	ge
 8023be4:	f04f 0810 	movge.w	r8, #16
 8023be8:	f7dc fc9c 	bl	8000524 <__aeabi_ui2d>
 8023bec:	2d09      	cmp	r5, #9
 8023bee:	4682      	mov	sl, r0
 8023bf0:	468b      	mov	fp, r1
 8023bf2:	dd13      	ble.n	8023c1c <_strtod_l+0x3e4>
 8023bf4:	4b79      	ldr	r3, [pc, #484]	; (8023ddc <_strtod_l+0x5a4>)
 8023bf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023bfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8023bfe:	f7dc fd0b 	bl	8000618 <__aeabi_dmul>
 8023c02:	4682      	mov	sl, r0
 8023c04:	4648      	mov	r0, r9
 8023c06:	468b      	mov	fp, r1
 8023c08:	f7dc fc8c 	bl	8000524 <__aeabi_ui2d>
 8023c0c:	4602      	mov	r2, r0
 8023c0e:	460b      	mov	r3, r1
 8023c10:	4650      	mov	r0, sl
 8023c12:	4659      	mov	r1, fp
 8023c14:	f7dc fb4a 	bl	80002ac <__adddf3>
 8023c18:	4682      	mov	sl, r0
 8023c1a:	468b      	mov	fp, r1
 8023c1c:	2d0f      	cmp	r5, #15
 8023c1e:	dc38      	bgt.n	8023c92 <_strtod_l+0x45a>
 8023c20:	9b08      	ldr	r3, [sp, #32]
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	f43f ae4a 	beq.w	80238bc <_strtod_l+0x84>
 8023c28:	dd24      	ble.n	8023c74 <_strtod_l+0x43c>
 8023c2a:	2b16      	cmp	r3, #22
 8023c2c:	dc0b      	bgt.n	8023c46 <_strtod_l+0x40e>
 8023c2e:	4d6b      	ldr	r5, [pc, #428]	; (8023ddc <_strtod_l+0x5a4>)
 8023c30:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8023c34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8023c38:	4652      	mov	r2, sl
 8023c3a:	465b      	mov	r3, fp
 8023c3c:	f7dc fcec 	bl	8000618 <__aeabi_dmul>
 8023c40:	4682      	mov	sl, r0
 8023c42:	468b      	mov	fp, r1
 8023c44:	e63a      	b.n	80238bc <_strtod_l+0x84>
 8023c46:	9a08      	ldr	r2, [sp, #32]
 8023c48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8023c4c:	4293      	cmp	r3, r2
 8023c4e:	db20      	blt.n	8023c92 <_strtod_l+0x45a>
 8023c50:	4c62      	ldr	r4, [pc, #392]	; (8023ddc <_strtod_l+0x5a4>)
 8023c52:	f1c5 050f 	rsb	r5, r5, #15
 8023c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023c5a:	4652      	mov	r2, sl
 8023c5c:	465b      	mov	r3, fp
 8023c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023c62:	f7dc fcd9 	bl	8000618 <__aeabi_dmul>
 8023c66:	9b08      	ldr	r3, [sp, #32]
 8023c68:	1b5d      	subs	r5, r3, r5
 8023c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8023c72:	e7e3      	b.n	8023c3c <_strtod_l+0x404>
 8023c74:	9b08      	ldr	r3, [sp, #32]
 8023c76:	3316      	adds	r3, #22
 8023c78:	db0b      	blt.n	8023c92 <_strtod_l+0x45a>
 8023c7a:	9b07      	ldr	r3, [sp, #28]
 8023c7c:	4a57      	ldr	r2, [pc, #348]	; (8023ddc <_strtod_l+0x5a4>)
 8023c7e:	1b9e      	subs	r6, r3, r6
 8023c80:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8023c84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023c88:	4650      	mov	r0, sl
 8023c8a:	4659      	mov	r1, fp
 8023c8c:	f7dc fdee 	bl	800086c <__aeabi_ddiv>
 8023c90:	e7d6      	b.n	8023c40 <_strtod_l+0x408>
 8023c92:	9b08      	ldr	r3, [sp, #32]
 8023c94:	eba5 0808 	sub.w	r8, r5, r8
 8023c98:	4498      	add	r8, r3
 8023c9a:	f1b8 0f00 	cmp.w	r8, #0
 8023c9e:	dd71      	ble.n	8023d84 <_strtod_l+0x54c>
 8023ca0:	f018 030f 	ands.w	r3, r8, #15
 8023ca4:	d00a      	beq.n	8023cbc <_strtod_l+0x484>
 8023ca6:	494d      	ldr	r1, [pc, #308]	; (8023ddc <_strtod_l+0x5a4>)
 8023ca8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023cac:	4652      	mov	r2, sl
 8023cae:	465b      	mov	r3, fp
 8023cb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023cb4:	f7dc fcb0 	bl	8000618 <__aeabi_dmul>
 8023cb8:	4682      	mov	sl, r0
 8023cba:	468b      	mov	fp, r1
 8023cbc:	f038 080f 	bics.w	r8, r8, #15
 8023cc0:	d04d      	beq.n	8023d5e <_strtod_l+0x526>
 8023cc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8023cc6:	dd22      	ble.n	8023d0e <_strtod_l+0x4d6>
 8023cc8:	2500      	movs	r5, #0
 8023cca:	462e      	mov	r6, r5
 8023ccc:	9509      	str	r5, [sp, #36]	; 0x24
 8023cce:	9507      	str	r5, [sp, #28]
 8023cd0:	2322      	movs	r3, #34	; 0x22
 8023cd2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8023de4 <_strtod_l+0x5ac>
 8023cd6:	6023      	str	r3, [r4, #0]
 8023cd8:	f04f 0a00 	mov.w	sl, #0
 8023cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cde:	2b00      	cmp	r3, #0
 8023ce0:	f43f adec 	beq.w	80238bc <_strtod_l+0x84>
 8023ce4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023ce6:	4620      	mov	r0, r4
 8023ce8:	f002 fd5c 	bl	80267a4 <_Bfree>
 8023cec:	9907      	ldr	r1, [sp, #28]
 8023cee:	4620      	mov	r0, r4
 8023cf0:	f002 fd58 	bl	80267a4 <_Bfree>
 8023cf4:	4631      	mov	r1, r6
 8023cf6:	4620      	mov	r0, r4
 8023cf8:	f002 fd54 	bl	80267a4 <_Bfree>
 8023cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023cfe:	4620      	mov	r0, r4
 8023d00:	f002 fd50 	bl	80267a4 <_Bfree>
 8023d04:	4629      	mov	r1, r5
 8023d06:	4620      	mov	r0, r4
 8023d08:	f002 fd4c 	bl	80267a4 <_Bfree>
 8023d0c:	e5d6      	b.n	80238bc <_strtod_l+0x84>
 8023d0e:	2300      	movs	r3, #0
 8023d10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8023d14:	4650      	mov	r0, sl
 8023d16:	4659      	mov	r1, fp
 8023d18:	4699      	mov	r9, r3
 8023d1a:	f1b8 0f01 	cmp.w	r8, #1
 8023d1e:	dc21      	bgt.n	8023d64 <_strtod_l+0x52c>
 8023d20:	b10b      	cbz	r3, 8023d26 <_strtod_l+0x4ee>
 8023d22:	4682      	mov	sl, r0
 8023d24:	468b      	mov	fp, r1
 8023d26:	4b2e      	ldr	r3, [pc, #184]	; (8023de0 <_strtod_l+0x5a8>)
 8023d28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8023d2c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8023d30:	4652      	mov	r2, sl
 8023d32:	465b      	mov	r3, fp
 8023d34:	e9d9 0100 	ldrd	r0, r1, [r9]
 8023d38:	f7dc fc6e 	bl	8000618 <__aeabi_dmul>
 8023d3c:	4b29      	ldr	r3, [pc, #164]	; (8023de4 <_strtod_l+0x5ac>)
 8023d3e:	460a      	mov	r2, r1
 8023d40:	400b      	ands	r3, r1
 8023d42:	4929      	ldr	r1, [pc, #164]	; (8023de8 <_strtod_l+0x5b0>)
 8023d44:	428b      	cmp	r3, r1
 8023d46:	4682      	mov	sl, r0
 8023d48:	d8be      	bhi.n	8023cc8 <_strtod_l+0x490>
 8023d4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8023d4e:	428b      	cmp	r3, r1
 8023d50:	bf86      	itte	hi
 8023d52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8023dec <_strtod_l+0x5b4>
 8023d56:	f04f 3aff 	movhi.w	sl, #4294967295
 8023d5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8023d5e:	2300      	movs	r3, #0
 8023d60:	9304      	str	r3, [sp, #16]
 8023d62:	e081      	b.n	8023e68 <_strtod_l+0x630>
 8023d64:	f018 0f01 	tst.w	r8, #1
 8023d68:	d007      	beq.n	8023d7a <_strtod_l+0x542>
 8023d6a:	4b1d      	ldr	r3, [pc, #116]	; (8023de0 <_strtod_l+0x5a8>)
 8023d6c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8023d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d74:	f7dc fc50 	bl	8000618 <__aeabi_dmul>
 8023d78:	2301      	movs	r3, #1
 8023d7a:	f109 0901 	add.w	r9, r9, #1
 8023d7e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8023d82:	e7ca      	b.n	8023d1a <_strtod_l+0x4e2>
 8023d84:	d0eb      	beq.n	8023d5e <_strtod_l+0x526>
 8023d86:	f1c8 0800 	rsb	r8, r8, #0
 8023d8a:	f018 020f 	ands.w	r2, r8, #15
 8023d8e:	d00a      	beq.n	8023da6 <_strtod_l+0x56e>
 8023d90:	4b12      	ldr	r3, [pc, #72]	; (8023ddc <_strtod_l+0x5a4>)
 8023d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023d96:	4650      	mov	r0, sl
 8023d98:	4659      	mov	r1, fp
 8023d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d9e:	f7dc fd65 	bl	800086c <__aeabi_ddiv>
 8023da2:	4682      	mov	sl, r0
 8023da4:	468b      	mov	fp, r1
 8023da6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8023daa:	d0d8      	beq.n	8023d5e <_strtod_l+0x526>
 8023dac:	f1b8 0f1f 	cmp.w	r8, #31
 8023db0:	dd1e      	ble.n	8023df0 <_strtod_l+0x5b8>
 8023db2:	2500      	movs	r5, #0
 8023db4:	462e      	mov	r6, r5
 8023db6:	9509      	str	r5, [sp, #36]	; 0x24
 8023db8:	9507      	str	r5, [sp, #28]
 8023dba:	2322      	movs	r3, #34	; 0x22
 8023dbc:	f04f 0a00 	mov.w	sl, #0
 8023dc0:	f04f 0b00 	mov.w	fp, #0
 8023dc4:	6023      	str	r3, [r4, #0]
 8023dc6:	e789      	b.n	8023cdc <_strtod_l+0x4a4>
 8023dc8:	0802e811 	.word	0x0802e811
 8023dcc:	0803375c 	.word	0x0803375c
 8023dd0:	080336ba 	.word	0x080336ba
 8023dd4:	08033874 	.word	0x08033874
 8023dd8:	08030129 	.word	0x08030129
 8023ddc:	08033ab8 	.word	0x08033ab8
 8023de0:	08033a90 	.word	0x08033a90
 8023de4:	7ff00000 	.word	0x7ff00000
 8023de8:	7ca00000 	.word	0x7ca00000
 8023dec:	7fefffff 	.word	0x7fefffff
 8023df0:	f018 0310 	ands.w	r3, r8, #16
 8023df4:	bf18      	it	ne
 8023df6:	236a      	movne	r3, #106	; 0x6a
 8023df8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80241b0 <_strtod_l+0x978>
 8023dfc:	9304      	str	r3, [sp, #16]
 8023dfe:	4650      	mov	r0, sl
 8023e00:	4659      	mov	r1, fp
 8023e02:	2300      	movs	r3, #0
 8023e04:	f018 0f01 	tst.w	r8, #1
 8023e08:	d004      	beq.n	8023e14 <_strtod_l+0x5dc>
 8023e0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8023e0e:	f7dc fc03 	bl	8000618 <__aeabi_dmul>
 8023e12:	2301      	movs	r3, #1
 8023e14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8023e18:	f109 0908 	add.w	r9, r9, #8
 8023e1c:	d1f2      	bne.n	8023e04 <_strtod_l+0x5cc>
 8023e1e:	b10b      	cbz	r3, 8023e24 <_strtod_l+0x5ec>
 8023e20:	4682      	mov	sl, r0
 8023e22:	468b      	mov	fp, r1
 8023e24:	9b04      	ldr	r3, [sp, #16]
 8023e26:	b1bb      	cbz	r3, 8023e58 <_strtod_l+0x620>
 8023e28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8023e2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	4659      	mov	r1, fp
 8023e34:	dd10      	ble.n	8023e58 <_strtod_l+0x620>
 8023e36:	2b1f      	cmp	r3, #31
 8023e38:	f340 8128 	ble.w	802408c <_strtod_l+0x854>
 8023e3c:	2b34      	cmp	r3, #52	; 0x34
 8023e3e:	bfde      	ittt	le
 8023e40:	3b20      	suble	r3, #32
 8023e42:	f04f 32ff 	movle.w	r2, #4294967295
 8023e46:	fa02 f303 	lslle.w	r3, r2, r3
 8023e4a:	f04f 0a00 	mov.w	sl, #0
 8023e4e:	bfcc      	ite	gt
 8023e50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8023e54:	ea03 0b01 	andle.w	fp, r3, r1
 8023e58:	2200      	movs	r2, #0
 8023e5a:	2300      	movs	r3, #0
 8023e5c:	4650      	mov	r0, sl
 8023e5e:	4659      	mov	r1, fp
 8023e60:	f7dc fe42 	bl	8000ae8 <__aeabi_dcmpeq>
 8023e64:	2800      	cmp	r0, #0
 8023e66:	d1a4      	bne.n	8023db2 <_strtod_l+0x57a>
 8023e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e6a:	9300      	str	r3, [sp, #0]
 8023e6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8023e6e:	462b      	mov	r3, r5
 8023e70:	463a      	mov	r2, r7
 8023e72:	4620      	mov	r0, r4
 8023e74:	f002 fd02 	bl	802687c <__s2b>
 8023e78:	9009      	str	r0, [sp, #36]	; 0x24
 8023e7a:	2800      	cmp	r0, #0
 8023e7c:	f43f af24 	beq.w	8023cc8 <_strtod_l+0x490>
 8023e80:	9b07      	ldr	r3, [sp, #28]
 8023e82:	1b9e      	subs	r6, r3, r6
 8023e84:	9b08      	ldr	r3, [sp, #32]
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	bfb4      	ite	lt
 8023e8a:	4633      	movlt	r3, r6
 8023e8c:	2300      	movge	r3, #0
 8023e8e:	9310      	str	r3, [sp, #64]	; 0x40
 8023e90:	9b08      	ldr	r3, [sp, #32]
 8023e92:	2500      	movs	r5, #0
 8023e94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023e98:	9318      	str	r3, [sp, #96]	; 0x60
 8023e9a:	462e      	mov	r6, r5
 8023e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e9e:	4620      	mov	r0, r4
 8023ea0:	6859      	ldr	r1, [r3, #4]
 8023ea2:	f002 fc3f 	bl	8026724 <_Balloc>
 8023ea6:	9007      	str	r0, [sp, #28]
 8023ea8:	2800      	cmp	r0, #0
 8023eaa:	f43f af11 	beq.w	8023cd0 <_strtod_l+0x498>
 8023eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023eb0:	691a      	ldr	r2, [r3, #16]
 8023eb2:	3202      	adds	r2, #2
 8023eb4:	f103 010c 	add.w	r1, r3, #12
 8023eb8:	0092      	lsls	r2, r2, #2
 8023eba:	300c      	adds	r0, #12
 8023ebc:	f7fe f974 	bl	80221a8 <memcpy>
 8023ec0:	ec4b ab10 	vmov	d0, sl, fp
 8023ec4:	aa20      	add	r2, sp, #128	; 0x80
 8023ec6:	a91f      	add	r1, sp, #124	; 0x7c
 8023ec8:	4620      	mov	r0, r4
 8023eca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8023ece:	f003 f811 	bl	8026ef4 <__d2b>
 8023ed2:	901e      	str	r0, [sp, #120]	; 0x78
 8023ed4:	2800      	cmp	r0, #0
 8023ed6:	f43f aefb 	beq.w	8023cd0 <_strtod_l+0x498>
 8023eda:	2101      	movs	r1, #1
 8023edc:	4620      	mov	r0, r4
 8023ede:	f002 fd67 	bl	80269b0 <__i2b>
 8023ee2:	4606      	mov	r6, r0
 8023ee4:	2800      	cmp	r0, #0
 8023ee6:	f43f aef3 	beq.w	8023cd0 <_strtod_l+0x498>
 8023eea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023eec:	9904      	ldr	r1, [sp, #16]
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	bfab      	itete	ge
 8023ef2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8023ef4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8023ef6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8023ef8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8023efc:	bfac      	ite	ge
 8023efe:	eb03 0902 	addge.w	r9, r3, r2
 8023f02:	1ad7      	sublt	r7, r2, r3
 8023f04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023f06:	eba3 0801 	sub.w	r8, r3, r1
 8023f0a:	4490      	add	r8, r2
 8023f0c:	4ba3      	ldr	r3, [pc, #652]	; (802419c <_strtod_l+0x964>)
 8023f0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8023f12:	4598      	cmp	r8, r3
 8023f14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8023f18:	f280 80cc 	bge.w	80240b4 <_strtod_l+0x87c>
 8023f1c:	eba3 0308 	sub.w	r3, r3, r8
 8023f20:	2b1f      	cmp	r3, #31
 8023f22:	eba2 0203 	sub.w	r2, r2, r3
 8023f26:	f04f 0101 	mov.w	r1, #1
 8023f2a:	f300 80b6 	bgt.w	802409a <_strtod_l+0x862>
 8023f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8023f32:	9311      	str	r3, [sp, #68]	; 0x44
 8023f34:	2300      	movs	r3, #0
 8023f36:	930c      	str	r3, [sp, #48]	; 0x30
 8023f38:	eb09 0802 	add.w	r8, r9, r2
 8023f3c:	9b04      	ldr	r3, [sp, #16]
 8023f3e:	45c1      	cmp	r9, r8
 8023f40:	4417      	add	r7, r2
 8023f42:	441f      	add	r7, r3
 8023f44:	464b      	mov	r3, r9
 8023f46:	bfa8      	it	ge
 8023f48:	4643      	movge	r3, r8
 8023f4a:	42bb      	cmp	r3, r7
 8023f4c:	bfa8      	it	ge
 8023f4e:	463b      	movge	r3, r7
 8023f50:	2b00      	cmp	r3, #0
 8023f52:	bfc2      	ittt	gt
 8023f54:	eba8 0803 	subgt.w	r8, r8, r3
 8023f58:	1aff      	subgt	r7, r7, r3
 8023f5a:	eba9 0903 	subgt.w	r9, r9, r3
 8023f5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023f60:	2b00      	cmp	r3, #0
 8023f62:	dd17      	ble.n	8023f94 <_strtod_l+0x75c>
 8023f64:	4631      	mov	r1, r6
 8023f66:	461a      	mov	r2, r3
 8023f68:	4620      	mov	r0, r4
 8023f6a:	f002 fddd 	bl	8026b28 <__pow5mult>
 8023f6e:	4606      	mov	r6, r0
 8023f70:	2800      	cmp	r0, #0
 8023f72:	f43f aead 	beq.w	8023cd0 <_strtod_l+0x498>
 8023f76:	4601      	mov	r1, r0
 8023f78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023f7a:	4620      	mov	r0, r4
 8023f7c:	f002 fd2e 	bl	80269dc <__multiply>
 8023f80:	900f      	str	r0, [sp, #60]	; 0x3c
 8023f82:	2800      	cmp	r0, #0
 8023f84:	f43f aea4 	beq.w	8023cd0 <_strtod_l+0x498>
 8023f88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023f8a:	4620      	mov	r0, r4
 8023f8c:	f002 fc0a 	bl	80267a4 <_Bfree>
 8023f90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f92:	931e      	str	r3, [sp, #120]	; 0x78
 8023f94:	f1b8 0f00 	cmp.w	r8, #0
 8023f98:	f300 8091 	bgt.w	80240be <_strtod_l+0x886>
 8023f9c:	9b08      	ldr	r3, [sp, #32]
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	dd08      	ble.n	8023fb4 <_strtod_l+0x77c>
 8023fa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8023fa4:	9907      	ldr	r1, [sp, #28]
 8023fa6:	4620      	mov	r0, r4
 8023fa8:	f002 fdbe 	bl	8026b28 <__pow5mult>
 8023fac:	9007      	str	r0, [sp, #28]
 8023fae:	2800      	cmp	r0, #0
 8023fb0:	f43f ae8e 	beq.w	8023cd0 <_strtod_l+0x498>
 8023fb4:	2f00      	cmp	r7, #0
 8023fb6:	dd08      	ble.n	8023fca <_strtod_l+0x792>
 8023fb8:	9907      	ldr	r1, [sp, #28]
 8023fba:	463a      	mov	r2, r7
 8023fbc:	4620      	mov	r0, r4
 8023fbe:	f002 fe0d 	bl	8026bdc <__lshift>
 8023fc2:	9007      	str	r0, [sp, #28]
 8023fc4:	2800      	cmp	r0, #0
 8023fc6:	f43f ae83 	beq.w	8023cd0 <_strtod_l+0x498>
 8023fca:	f1b9 0f00 	cmp.w	r9, #0
 8023fce:	dd08      	ble.n	8023fe2 <_strtod_l+0x7aa>
 8023fd0:	4631      	mov	r1, r6
 8023fd2:	464a      	mov	r2, r9
 8023fd4:	4620      	mov	r0, r4
 8023fd6:	f002 fe01 	bl	8026bdc <__lshift>
 8023fda:	4606      	mov	r6, r0
 8023fdc:	2800      	cmp	r0, #0
 8023fde:	f43f ae77 	beq.w	8023cd0 <_strtod_l+0x498>
 8023fe2:	9a07      	ldr	r2, [sp, #28]
 8023fe4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023fe6:	4620      	mov	r0, r4
 8023fe8:	f002 fe80 	bl	8026cec <__mdiff>
 8023fec:	4605      	mov	r5, r0
 8023fee:	2800      	cmp	r0, #0
 8023ff0:	f43f ae6e 	beq.w	8023cd0 <_strtod_l+0x498>
 8023ff4:	68c3      	ldr	r3, [r0, #12]
 8023ff6:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ff8:	2300      	movs	r3, #0
 8023ffa:	60c3      	str	r3, [r0, #12]
 8023ffc:	4631      	mov	r1, r6
 8023ffe:	f002 fe59 	bl	8026cb4 <__mcmp>
 8024002:	2800      	cmp	r0, #0
 8024004:	da65      	bge.n	80240d2 <_strtod_l+0x89a>
 8024006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024008:	ea53 030a 	orrs.w	r3, r3, sl
 802400c:	f040 8087 	bne.w	802411e <_strtod_l+0x8e6>
 8024010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024014:	2b00      	cmp	r3, #0
 8024016:	f040 8082 	bne.w	802411e <_strtod_l+0x8e6>
 802401a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802401e:	0d1b      	lsrs	r3, r3, #20
 8024020:	051b      	lsls	r3, r3, #20
 8024022:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8024026:	d97a      	bls.n	802411e <_strtod_l+0x8e6>
 8024028:	696b      	ldr	r3, [r5, #20]
 802402a:	b913      	cbnz	r3, 8024032 <_strtod_l+0x7fa>
 802402c:	692b      	ldr	r3, [r5, #16]
 802402e:	2b01      	cmp	r3, #1
 8024030:	dd75      	ble.n	802411e <_strtod_l+0x8e6>
 8024032:	4629      	mov	r1, r5
 8024034:	2201      	movs	r2, #1
 8024036:	4620      	mov	r0, r4
 8024038:	f002 fdd0 	bl	8026bdc <__lshift>
 802403c:	4631      	mov	r1, r6
 802403e:	4605      	mov	r5, r0
 8024040:	f002 fe38 	bl	8026cb4 <__mcmp>
 8024044:	2800      	cmp	r0, #0
 8024046:	dd6a      	ble.n	802411e <_strtod_l+0x8e6>
 8024048:	9904      	ldr	r1, [sp, #16]
 802404a:	4a55      	ldr	r2, [pc, #340]	; (80241a0 <_strtod_l+0x968>)
 802404c:	465b      	mov	r3, fp
 802404e:	2900      	cmp	r1, #0
 8024050:	f000 8085 	beq.w	802415e <_strtod_l+0x926>
 8024054:	ea02 010b 	and.w	r1, r2, fp
 8024058:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802405c:	dc7f      	bgt.n	802415e <_strtod_l+0x926>
 802405e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8024062:	f77f aeaa 	ble.w	8023dba <_strtod_l+0x582>
 8024066:	4a4f      	ldr	r2, [pc, #316]	; (80241a4 <_strtod_l+0x96c>)
 8024068:	2300      	movs	r3, #0
 802406a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 802406e:	4650      	mov	r0, sl
 8024070:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8024074:	4659      	mov	r1, fp
 8024076:	f7dc facf 	bl	8000618 <__aeabi_dmul>
 802407a:	460b      	mov	r3, r1
 802407c:	4303      	orrs	r3, r0
 802407e:	bf08      	it	eq
 8024080:	2322      	moveq	r3, #34	; 0x22
 8024082:	4682      	mov	sl, r0
 8024084:	468b      	mov	fp, r1
 8024086:	bf08      	it	eq
 8024088:	6023      	streq	r3, [r4, #0]
 802408a:	e62b      	b.n	8023ce4 <_strtod_l+0x4ac>
 802408c:	f04f 32ff 	mov.w	r2, #4294967295
 8024090:	fa02 f303 	lsl.w	r3, r2, r3
 8024094:	ea03 0a0a 	and.w	sl, r3, sl
 8024098:	e6de      	b.n	8023e58 <_strtod_l+0x620>
 802409a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 802409e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80240a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80240a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80240aa:	fa01 f308 	lsl.w	r3, r1, r8
 80240ae:	930c      	str	r3, [sp, #48]	; 0x30
 80240b0:	9111      	str	r1, [sp, #68]	; 0x44
 80240b2:	e741      	b.n	8023f38 <_strtod_l+0x700>
 80240b4:	2300      	movs	r3, #0
 80240b6:	930c      	str	r3, [sp, #48]	; 0x30
 80240b8:	2301      	movs	r3, #1
 80240ba:	9311      	str	r3, [sp, #68]	; 0x44
 80240bc:	e73c      	b.n	8023f38 <_strtod_l+0x700>
 80240be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80240c0:	4642      	mov	r2, r8
 80240c2:	4620      	mov	r0, r4
 80240c4:	f002 fd8a 	bl	8026bdc <__lshift>
 80240c8:	901e      	str	r0, [sp, #120]	; 0x78
 80240ca:	2800      	cmp	r0, #0
 80240cc:	f47f af66 	bne.w	8023f9c <_strtod_l+0x764>
 80240d0:	e5fe      	b.n	8023cd0 <_strtod_l+0x498>
 80240d2:	465f      	mov	r7, fp
 80240d4:	d16e      	bne.n	80241b4 <_strtod_l+0x97c>
 80240d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80240d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80240dc:	b342      	cbz	r2, 8024130 <_strtod_l+0x8f8>
 80240de:	4a32      	ldr	r2, [pc, #200]	; (80241a8 <_strtod_l+0x970>)
 80240e0:	4293      	cmp	r3, r2
 80240e2:	d128      	bne.n	8024136 <_strtod_l+0x8fe>
 80240e4:	9b04      	ldr	r3, [sp, #16]
 80240e6:	4650      	mov	r0, sl
 80240e8:	b1eb      	cbz	r3, 8024126 <_strtod_l+0x8ee>
 80240ea:	4a2d      	ldr	r2, [pc, #180]	; (80241a0 <_strtod_l+0x968>)
 80240ec:	403a      	ands	r2, r7
 80240ee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80240f2:	f04f 31ff 	mov.w	r1, #4294967295
 80240f6:	d819      	bhi.n	802412c <_strtod_l+0x8f4>
 80240f8:	0d12      	lsrs	r2, r2, #20
 80240fa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80240fe:	fa01 f303 	lsl.w	r3, r1, r3
 8024102:	4298      	cmp	r0, r3
 8024104:	d117      	bne.n	8024136 <_strtod_l+0x8fe>
 8024106:	4b29      	ldr	r3, [pc, #164]	; (80241ac <_strtod_l+0x974>)
 8024108:	429f      	cmp	r7, r3
 802410a:	d102      	bne.n	8024112 <_strtod_l+0x8da>
 802410c:	3001      	adds	r0, #1
 802410e:	f43f addf 	beq.w	8023cd0 <_strtod_l+0x498>
 8024112:	4b23      	ldr	r3, [pc, #140]	; (80241a0 <_strtod_l+0x968>)
 8024114:	403b      	ands	r3, r7
 8024116:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 802411a:	f04f 0a00 	mov.w	sl, #0
 802411e:	9b04      	ldr	r3, [sp, #16]
 8024120:	2b00      	cmp	r3, #0
 8024122:	d1a0      	bne.n	8024066 <_strtod_l+0x82e>
 8024124:	e5de      	b.n	8023ce4 <_strtod_l+0x4ac>
 8024126:	f04f 33ff 	mov.w	r3, #4294967295
 802412a:	e7ea      	b.n	8024102 <_strtod_l+0x8ca>
 802412c:	460b      	mov	r3, r1
 802412e:	e7e8      	b.n	8024102 <_strtod_l+0x8ca>
 8024130:	ea53 030a 	orrs.w	r3, r3, sl
 8024134:	d088      	beq.n	8024048 <_strtod_l+0x810>
 8024136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024138:	b1db      	cbz	r3, 8024172 <_strtod_l+0x93a>
 802413a:	423b      	tst	r3, r7
 802413c:	d0ef      	beq.n	802411e <_strtod_l+0x8e6>
 802413e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024140:	9a04      	ldr	r2, [sp, #16]
 8024142:	4650      	mov	r0, sl
 8024144:	4659      	mov	r1, fp
 8024146:	b1c3      	cbz	r3, 802417a <_strtod_l+0x942>
 8024148:	f7ff fb5a 	bl	8023800 <sulp>
 802414c:	4602      	mov	r2, r0
 802414e:	460b      	mov	r3, r1
 8024150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8024154:	f7dc f8aa 	bl	80002ac <__adddf3>
 8024158:	4682      	mov	sl, r0
 802415a:	468b      	mov	fp, r1
 802415c:	e7df      	b.n	802411e <_strtod_l+0x8e6>
 802415e:	4013      	ands	r3, r2
 8024160:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8024164:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8024168:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802416c:	f04f 3aff 	mov.w	sl, #4294967295
 8024170:	e7d5      	b.n	802411e <_strtod_l+0x8e6>
 8024172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024174:	ea13 0f0a 	tst.w	r3, sl
 8024178:	e7e0      	b.n	802413c <_strtod_l+0x904>
 802417a:	f7ff fb41 	bl	8023800 <sulp>
 802417e:	4602      	mov	r2, r0
 8024180:	460b      	mov	r3, r1
 8024182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8024186:	f7dc f88f 	bl	80002a8 <__aeabi_dsub>
 802418a:	2200      	movs	r2, #0
 802418c:	2300      	movs	r3, #0
 802418e:	4682      	mov	sl, r0
 8024190:	468b      	mov	fp, r1
 8024192:	f7dc fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 8024196:	2800      	cmp	r0, #0
 8024198:	d0c1      	beq.n	802411e <_strtod_l+0x8e6>
 802419a:	e60e      	b.n	8023dba <_strtod_l+0x582>
 802419c:	fffffc02 	.word	0xfffffc02
 80241a0:	7ff00000 	.word	0x7ff00000
 80241a4:	39500000 	.word	0x39500000
 80241a8:	000fffff 	.word	0x000fffff
 80241ac:	7fefffff 	.word	0x7fefffff
 80241b0:	08033770 	.word	0x08033770
 80241b4:	4631      	mov	r1, r6
 80241b6:	4628      	mov	r0, r5
 80241b8:	f002 fef8 	bl	8026fac <__ratio>
 80241bc:	ec59 8b10 	vmov	r8, r9, d0
 80241c0:	ee10 0a10 	vmov	r0, s0
 80241c4:	2200      	movs	r2, #0
 80241c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80241ca:	4649      	mov	r1, r9
 80241cc:	f7dc fca0 	bl	8000b10 <__aeabi_dcmple>
 80241d0:	2800      	cmp	r0, #0
 80241d2:	d07c      	beq.n	80242ce <_strtod_l+0xa96>
 80241d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	d04c      	beq.n	8024274 <_strtod_l+0xa3c>
 80241da:	4b95      	ldr	r3, [pc, #596]	; (8024430 <_strtod_l+0xbf8>)
 80241dc:	2200      	movs	r2, #0
 80241de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80241e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8024430 <_strtod_l+0xbf8>
 80241e6:	f04f 0800 	mov.w	r8, #0
 80241ea:	4b92      	ldr	r3, [pc, #584]	; (8024434 <_strtod_l+0xbfc>)
 80241ec:	403b      	ands	r3, r7
 80241ee:	9311      	str	r3, [sp, #68]	; 0x44
 80241f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80241f2:	4b91      	ldr	r3, [pc, #580]	; (8024438 <_strtod_l+0xc00>)
 80241f4:	429a      	cmp	r2, r3
 80241f6:	f040 80b2 	bne.w	802435e <_strtod_l+0xb26>
 80241fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80241fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024202:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8024206:	ec4b ab10 	vmov	d0, sl, fp
 802420a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 802420e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8024212:	f002 fdf3 	bl	8026dfc <__ulp>
 8024216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802421a:	ec53 2b10 	vmov	r2, r3, d0
 802421e:	f7dc f9fb 	bl	8000618 <__aeabi_dmul>
 8024222:	4652      	mov	r2, sl
 8024224:	465b      	mov	r3, fp
 8024226:	f7dc f841 	bl	80002ac <__adddf3>
 802422a:	460b      	mov	r3, r1
 802422c:	4981      	ldr	r1, [pc, #516]	; (8024434 <_strtod_l+0xbfc>)
 802422e:	4a83      	ldr	r2, [pc, #524]	; (802443c <_strtod_l+0xc04>)
 8024230:	4019      	ands	r1, r3
 8024232:	4291      	cmp	r1, r2
 8024234:	4682      	mov	sl, r0
 8024236:	d95e      	bls.n	80242f6 <_strtod_l+0xabe>
 8024238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802423a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 802423e:	4293      	cmp	r3, r2
 8024240:	d103      	bne.n	802424a <_strtod_l+0xa12>
 8024242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024244:	3301      	adds	r3, #1
 8024246:	f43f ad43 	beq.w	8023cd0 <_strtod_l+0x498>
 802424a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8024448 <_strtod_l+0xc10>
 802424e:	f04f 3aff 	mov.w	sl, #4294967295
 8024252:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024254:	4620      	mov	r0, r4
 8024256:	f002 faa5 	bl	80267a4 <_Bfree>
 802425a:	9907      	ldr	r1, [sp, #28]
 802425c:	4620      	mov	r0, r4
 802425e:	f002 faa1 	bl	80267a4 <_Bfree>
 8024262:	4631      	mov	r1, r6
 8024264:	4620      	mov	r0, r4
 8024266:	f002 fa9d 	bl	80267a4 <_Bfree>
 802426a:	4629      	mov	r1, r5
 802426c:	4620      	mov	r0, r4
 802426e:	f002 fa99 	bl	80267a4 <_Bfree>
 8024272:	e613      	b.n	8023e9c <_strtod_l+0x664>
 8024274:	f1ba 0f00 	cmp.w	sl, #0
 8024278:	d11b      	bne.n	80242b2 <_strtod_l+0xa7a>
 802427a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802427e:	b9f3      	cbnz	r3, 80242be <_strtod_l+0xa86>
 8024280:	4b6b      	ldr	r3, [pc, #428]	; (8024430 <_strtod_l+0xbf8>)
 8024282:	2200      	movs	r2, #0
 8024284:	4640      	mov	r0, r8
 8024286:	4649      	mov	r1, r9
 8024288:	f7dc fc38 	bl	8000afc <__aeabi_dcmplt>
 802428c:	b9d0      	cbnz	r0, 80242c4 <_strtod_l+0xa8c>
 802428e:	4640      	mov	r0, r8
 8024290:	4649      	mov	r1, r9
 8024292:	4b6b      	ldr	r3, [pc, #428]	; (8024440 <_strtod_l+0xc08>)
 8024294:	2200      	movs	r2, #0
 8024296:	f7dc f9bf 	bl	8000618 <__aeabi_dmul>
 802429a:	4680      	mov	r8, r0
 802429c:	4689      	mov	r9, r1
 802429e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80242a2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80242a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80242a8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80242ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80242b0:	e79b      	b.n	80241ea <_strtod_l+0x9b2>
 80242b2:	f1ba 0f01 	cmp.w	sl, #1
 80242b6:	d102      	bne.n	80242be <_strtod_l+0xa86>
 80242b8:	2f00      	cmp	r7, #0
 80242ba:	f43f ad7e 	beq.w	8023dba <_strtod_l+0x582>
 80242be:	4b61      	ldr	r3, [pc, #388]	; (8024444 <_strtod_l+0xc0c>)
 80242c0:	2200      	movs	r2, #0
 80242c2:	e78c      	b.n	80241de <_strtod_l+0x9a6>
 80242c4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8024440 <_strtod_l+0xc08>
 80242c8:	f04f 0800 	mov.w	r8, #0
 80242cc:	e7e7      	b.n	802429e <_strtod_l+0xa66>
 80242ce:	4b5c      	ldr	r3, [pc, #368]	; (8024440 <_strtod_l+0xc08>)
 80242d0:	4640      	mov	r0, r8
 80242d2:	4649      	mov	r1, r9
 80242d4:	2200      	movs	r2, #0
 80242d6:	f7dc f99f 	bl	8000618 <__aeabi_dmul>
 80242da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80242dc:	4680      	mov	r8, r0
 80242de:	4689      	mov	r9, r1
 80242e0:	b933      	cbnz	r3, 80242f0 <_strtod_l+0xab8>
 80242e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80242e6:	9012      	str	r0, [sp, #72]	; 0x48
 80242e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80242ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80242ee:	e7dd      	b.n	80242ac <_strtod_l+0xa74>
 80242f0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80242f4:	e7f9      	b.n	80242ea <_strtod_l+0xab2>
 80242f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80242fa:	9b04      	ldr	r3, [sp, #16]
 80242fc:	2b00      	cmp	r3, #0
 80242fe:	d1a8      	bne.n	8024252 <_strtod_l+0xa1a>
 8024300:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024304:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024306:	0d1b      	lsrs	r3, r3, #20
 8024308:	051b      	lsls	r3, r3, #20
 802430a:	429a      	cmp	r2, r3
 802430c:	d1a1      	bne.n	8024252 <_strtod_l+0xa1a>
 802430e:	4640      	mov	r0, r8
 8024310:	4649      	mov	r1, r9
 8024312:	f7dc fce1 	bl	8000cd8 <__aeabi_d2lz>
 8024316:	f7dc f951 	bl	80005bc <__aeabi_l2d>
 802431a:	4602      	mov	r2, r0
 802431c:	460b      	mov	r3, r1
 802431e:	4640      	mov	r0, r8
 8024320:	4649      	mov	r1, r9
 8024322:	f7db ffc1 	bl	80002a8 <__aeabi_dsub>
 8024326:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802432c:	ea43 030a 	orr.w	r3, r3, sl
 8024330:	4313      	orrs	r3, r2
 8024332:	4680      	mov	r8, r0
 8024334:	4689      	mov	r9, r1
 8024336:	d053      	beq.n	80243e0 <_strtod_l+0xba8>
 8024338:	a335      	add	r3, pc, #212	; (adr r3, 8024410 <_strtod_l+0xbd8>)
 802433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802433e:	f7dc fbdd 	bl	8000afc <__aeabi_dcmplt>
 8024342:	2800      	cmp	r0, #0
 8024344:	f47f acce 	bne.w	8023ce4 <_strtod_l+0x4ac>
 8024348:	a333      	add	r3, pc, #204	; (adr r3, 8024418 <_strtod_l+0xbe0>)
 802434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802434e:	4640      	mov	r0, r8
 8024350:	4649      	mov	r1, r9
 8024352:	f7dc fbf1 	bl	8000b38 <__aeabi_dcmpgt>
 8024356:	2800      	cmp	r0, #0
 8024358:	f43f af7b 	beq.w	8024252 <_strtod_l+0xa1a>
 802435c:	e4c2      	b.n	8023ce4 <_strtod_l+0x4ac>
 802435e:	9b04      	ldr	r3, [sp, #16]
 8024360:	b333      	cbz	r3, 80243b0 <_strtod_l+0xb78>
 8024362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024364:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8024368:	d822      	bhi.n	80243b0 <_strtod_l+0xb78>
 802436a:	a32d      	add	r3, pc, #180	; (adr r3, 8024420 <_strtod_l+0xbe8>)
 802436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024370:	4640      	mov	r0, r8
 8024372:	4649      	mov	r1, r9
 8024374:	f7dc fbcc 	bl	8000b10 <__aeabi_dcmple>
 8024378:	b1a0      	cbz	r0, 80243a4 <_strtod_l+0xb6c>
 802437a:	4649      	mov	r1, r9
 802437c:	4640      	mov	r0, r8
 802437e:	f7dc fc23 	bl	8000bc8 <__aeabi_d2uiz>
 8024382:	2801      	cmp	r0, #1
 8024384:	bf38      	it	cc
 8024386:	2001      	movcc	r0, #1
 8024388:	f7dc f8cc 	bl	8000524 <__aeabi_ui2d>
 802438c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802438e:	4680      	mov	r8, r0
 8024390:	4689      	mov	r9, r1
 8024392:	bb13      	cbnz	r3, 80243da <_strtod_l+0xba2>
 8024394:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024398:	9014      	str	r0, [sp, #80]	; 0x50
 802439a:	9315      	str	r3, [sp, #84]	; 0x54
 802439c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80243a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80243a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80243a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80243a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80243ac:	1a9b      	subs	r3, r3, r2
 80243ae:	930d      	str	r3, [sp, #52]	; 0x34
 80243b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80243b4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80243b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80243bc:	f002 fd1e 	bl	8026dfc <__ulp>
 80243c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80243c4:	ec53 2b10 	vmov	r2, r3, d0
 80243c8:	f7dc f926 	bl	8000618 <__aeabi_dmul>
 80243cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80243d0:	f7db ff6c 	bl	80002ac <__adddf3>
 80243d4:	4682      	mov	sl, r0
 80243d6:	468b      	mov	fp, r1
 80243d8:	e78f      	b.n	80242fa <_strtod_l+0xac2>
 80243da:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80243de:	e7dd      	b.n	802439c <_strtod_l+0xb64>
 80243e0:	a311      	add	r3, pc, #68	; (adr r3, 8024428 <_strtod_l+0xbf0>)
 80243e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80243e6:	f7dc fb89 	bl	8000afc <__aeabi_dcmplt>
 80243ea:	e7b4      	b.n	8024356 <_strtod_l+0xb1e>
 80243ec:	2300      	movs	r3, #0
 80243ee:	930e      	str	r3, [sp, #56]	; 0x38
 80243f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80243f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80243f4:	6013      	str	r3, [r2, #0]
 80243f6:	f7ff ba65 	b.w	80238c4 <_strtod_l+0x8c>
 80243fa:	2b65      	cmp	r3, #101	; 0x65
 80243fc:	f43f ab5d 	beq.w	8023aba <_strtod_l+0x282>
 8024400:	2b45      	cmp	r3, #69	; 0x45
 8024402:	f43f ab5a 	beq.w	8023aba <_strtod_l+0x282>
 8024406:	2201      	movs	r2, #1
 8024408:	f7ff bb92 	b.w	8023b30 <_strtod_l+0x2f8>
 802440c:	f3af 8000 	nop.w
 8024410:	94a03595 	.word	0x94a03595
 8024414:	3fdfffff 	.word	0x3fdfffff
 8024418:	35afe535 	.word	0x35afe535
 802441c:	3fe00000 	.word	0x3fe00000
 8024420:	ffc00000 	.word	0xffc00000
 8024424:	41dfffff 	.word	0x41dfffff
 8024428:	94a03595 	.word	0x94a03595
 802442c:	3fcfffff 	.word	0x3fcfffff
 8024430:	3ff00000 	.word	0x3ff00000
 8024434:	7ff00000 	.word	0x7ff00000
 8024438:	7fe00000 	.word	0x7fe00000
 802443c:	7c9fffff 	.word	0x7c9fffff
 8024440:	3fe00000 	.word	0x3fe00000
 8024444:	bff00000 	.word	0xbff00000
 8024448:	7fefffff 	.word	0x7fefffff

0802444c <strtod>:
 802444c:	460a      	mov	r2, r1
 802444e:	4601      	mov	r1, r0
 8024450:	4802      	ldr	r0, [pc, #8]	; (802445c <strtod+0x10>)
 8024452:	4b03      	ldr	r3, [pc, #12]	; (8024460 <strtod+0x14>)
 8024454:	6800      	ldr	r0, [r0, #0]
 8024456:	f7ff b9ef 	b.w	8023838 <_strtod_l>
 802445a:	bf00      	nop
 802445c:	2000057c 	.word	0x2000057c
 8024460:	20000644 	.word	0x20000644

08024464 <strtok>:
 8024464:	4b16      	ldr	r3, [pc, #88]	; (80244c0 <strtok+0x5c>)
 8024466:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024468:	681e      	ldr	r6, [r3, #0]
 802446a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 802446c:	4605      	mov	r5, r0
 802446e:	b9fc      	cbnz	r4, 80244b0 <strtok+0x4c>
 8024470:	2050      	movs	r0, #80	; 0x50
 8024472:	9101      	str	r1, [sp, #4]
 8024474:	f7fd fe7a 	bl	802216c <malloc>
 8024478:	9901      	ldr	r1, [sp, #4]
 802447a:	65b0      	str	r0, [r6, #88]	; 0x58
 802447c:	4602      	mov	r2, r0
 802447e:	b920      	cbnz	r0, 802448a <strtok+0x26>
 8024480:	4b10      	ldr	r3, [pc, #64]	; (80244c4 <strtok+0x60>)
 8024482:	4811      	ldr	r0, [pc, #68]	; (80244c8 <strtok+0x64>)
 8024484:	2157      	movs	r1, #87	; 0x57
 8024486:	f000 fc1b 	bl	8024cc0 <__assert_func>
 802448a:	e9c0 4400 	strd	r4, r4, [r0]
 802448e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8024492:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8024496:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802449a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802449e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80244a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80244a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80244aa:	6184      	str	r4, [r0, #24]
 80244ac:	7704      	strb	r4, [r0, #28]
 80244ae:	6244      	str	r4, [r0, #36]	; 0x24
 80244b0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80244b2:	2301      	movs	r3, #1
 80244b4:	4628      	mov	r0, r5
 80244b6:	b002      	add	sp, #8
 80244b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80244bc:	f000 b806 	b.w	80244cc <__strtok_r>
 80244c0:	2000057c 	.word	0x2000057c
 80244c4:	080335c8 	.word	0x080335c8
 80244c8:	08033798 	.word	0x08033798

080244cc <__strtok_r>:
 80244cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244ce:	b908      	cbnz	r0, 80244d4 <__strtok_r+0x8>
 80244d0:	6810      	ldr	r0, [r2, #0]
 80244d2:	b188      	cbz	r0, 80244f8 <__strtok_r+0x2c>
 80244d4:	4604      	mov	r4, r0
 80244d6:	4620      	mov	r0, r4
 80244d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80244dc:	460f      	mov	r7, r1
 80244de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80244e2:	b91e      	cbnz	r6, 80244ec <__strtok_r+0x20>
 80244e4:	b965      	cbnz	r5, 8024500 <__strtok_r+0x34>
 80244e6:	6015      	str	r5, [r2, #0]
 80244e8:	4628      	mov	r0, r5
 80244ea:	e005      	b.n	80244f8 <__strtok_r+0x2c>
 80244ec:	42b5      	cmp	r5, r6
 80244ee:	d1f6      	bne.n	80244de <__strtok_r+0x12>
 80244f0:	2b00      	cmp	r3, #0
 80244f2:	d1f0      	bne.n	80244d6 <__strtok_r+0xa>
 80244f4:	6014      	str	r4, [r2, #0]
 80244f6:	7003      	strb	r3, [r0, #0]
 80244f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80244fa:	461c      	mov	r4, r3
 80244fc:	e00c      	b.n	8024518 <__strtok_r+0x4c>
 80244fe:	b915      	cbnz	r5, 8024506 <__strtok_r+0x3a>
 8024500:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024504:	460e      	mov	r6, r1
 8024506:	f816 5b01 	ldrb.w	r5, [r6], #1
 802450a:	42ab      	cmp	r3, r5
 802450c:	d1f7      	bne.n	80244fe <__strtok_r+0x32>
 802450e:	2b00      	cmp	r3, #0
 8024510:	d0f3      	beq.n	80244fa <__strtok_r+0x2e>
 8024512:	2300      	movs	r3, #0
 8024514:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024518:	6014      	str	r4, [r2, #0]
 802451a:	e7ed      	b.n	80244f8 <__strtok_r+0x2c>

0802451c <_strtol_l.isra.0>:
 802451c:	2b01      	cmp	r3, #1
 802451e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024522:	d001      	beq.n	8024528 <_strtol_l.isra.0+0xc>
 8024524:	2b24      	cmp	r3, #36	; 0x24
 8024526:	d906      	bls.n	8024536 <_strtol_l.isra.0+0x1a>
 8024528:	f7fd fcfc 	bl	8021f24 <__errno>
 802452c:	2316      	movs	r3, #22
 802452e:	6003      	str	r3, [r0, #0]
 8024530:	2000      	movs	r0, #0
 8024532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024536:	4f3a      	ldr	r7, [pc, #232]	; (8024620 <_strtol_l.isra.0+0x104>)
 8024538:	468e      	mov	lr, r1
 802453a:	4676      	mov	r6, lr
 802453c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8024540:	5de5      	ldrb	r5, [r4, r7]
 8024542:	f015 0508 	ands.w	r5, r5, #8
 8024546:	d1f8      	bne.n	802453a <_strtol_l.isra.0+0x1e>
 8024548:	2c2d      	cmp	r4, #45	; 0x2d
 802454a:	d134      	bne.n	80245b6 <_strtol_l.isra.0+0x9a>
 802454c:	f89e 4000 	ldrb.w	r4, [lr]
 8024550:	f04f 0801 	mov.w	r8, #1
 8024554:	f106 0e02 	add.w	lr, r6, #2
 8024558:	2b00      	cmp	r3, #0
 802455a:	d05c      	beq.n	8024616 <_strtol_l.isra.0+0xfa>
 802455c:	2b10      	cmp	r3, #16
 802455e:	d10c      	bne.n	802457a <_strtol_l.isra.0+0x5e>
 8024560:	2c30      	cmp	r4, #48	; 0x30
 8024562:	d10a      	bne.n	802457a <_strtol_l.isra.0+0x5e>
 8024564:	f89e 4000 	ldrb.w	r4, [lr]
 8024568:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802456c:	2c58      	cmp	r4, #88	; 0x58
 802456e:	d14d      	bne.n	802460c <_strtol_l.isra.0+0xf0>
 8024570:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8024574:	2310      	movs	r3, #16
 8024576:	f10e 0e02 	add.w	lr, lr, #2
 802457a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802457e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8024582:	2600      	movs	r6, #0
 8024584:	fbbc f9f3 	udiv	r9, ip, r3
 8024588:	4635      	mov	r5, r6
 802458a:	fb03 ca19 	mls	sl, r3, r9, ip
 802458e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8024592:	2f09      	cmp	r7, #9
 8024594:	d818      	bhi.n	80245c8 <_strtol_l.isra.0+0xac>
 8024596:	463c      	mov	r4, r7
 8024598:	42a3      	cmp	r3, r4
 802459a:	dd24      	ble.n	80245e6 <_strtol_l.isra.0+0xca>
 802459c:	2e00      	cmp	r6, #0
 802459e:	db1f      	blt.n	80245e0 <_strtol_l.isra.0+0xc4>
 80245a0:	45a9      	cmp	r9, r5
 80245a2:	d31d      	bcc.n	80245e0 <_strtol_l.isra.0+0xc4>
 80245a4:	d101      	bne.n	80245aa <_strtol_l.isra.0+0x8e>
 80245a6:	45a2      	cmp	sl, r4
 80245a8:	db1a      	blt.n	80245e0 <_strtol_l.isra.0+0xc4>
 80245aa:	fb05 4503 	mla	r5, r5, r3, r4
 80245ae:	2601      	movs	r6, #1
 80245b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80245b4:	e7eb      	b.n	802458e <_strtol_l.isra.0+0x72>
 80245b6:	2c2b      	cmp	r4, #43	; 0x2b
 80245b8:	bf08      	it	eq
 80245ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 80245be:	46a8      	mov	r8, r5
 80245c0:	bf08      	it	eq
 80245c2:	f106 0e02 	addeq.w	lr, r6, #2
 80245c6:	e7c7      	b.n	8024558 <_strtol_l.isra.0+0x3c>
 80245c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80245cc:	2f19      	cmp	r7, #25
 80245ce:	d801      	bhi.n	80245d4 <_strtol_l.isra.0+0xb8>
 80245d0:	3c37      	subs	r4, #55	; 0x37
 80245d2:	e7e1      	b.n	8024598 <_strtol_l.isra.0+0x7c>
 80245d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80245d8:	2f19      	cmp	r7, #25
 80245da:	d804      	bhi.n	80245e6 <_strtol_l.isra.0+0xca>
 80245dc:	3c57      	subs	r4, #87	; 0x57
 80245de:	e7db      	b.n	8024598 <_strtol_l.isra.0+0x7c>
 80245e0:	f04f 36ff 	mov.w	r6, #4294967295
 80245e4:	e7e4      	b.n	80245b0 <_strtol_l.isra.0+0x94>
 80245e6:	2e00      	cmp	r6, #0
 80245e8:	da05      	bge.n	80245f6 <_strtol_l.isra.0+0xda>
 80245ea:	2322      	movs	r3, #34	; 0x22
 80245ec:	6003      	str	r3, [r0, #0]
 80245ee:	4665      	mov	r5, ip
 80245f0:	b942      	cbnz	r2, 8024604 <_strtol_l.isra.0+0xe8>
 80245f2:	4628      	mov	r0, r5
 80245f4:	e79d      	b.n	8024532 <_strtol_l.isra.0+0x16>
 80245f6:	f1b8 0f00 	cmp.w	r8, #0
 80245fa:	d000      	beq.n	80245fe <_strtol_l.isra.0+0xe2>
 80245fc:	426d      	negs	r5, r5
 80245fe:	2a00      	cmp	r2, #0
 8024600:	d0f7      	beq.n	80245f2 <_strtol_l.isra.0+0xd6>
 8024602:	b10e      	cbz	r6, 8024608 <_strtol_l.isra.0+0xec>
 8024604:	f10e 31ff 	add.w	r1, lr, #4294967295
 8024608:	6011      	str	r1, [r2, #0]
 802460a:	e7f2      	b.n	80245f2 <_strtol_l.isra.0+0xd6>
 802460c:	2430      	movs	r4, #48	; 0x30
 802460e:	2b00      	cmp	r3, #0
 8024610:	d1b3      	bne.n	802457a <_strtol_l.isra.0+0x5e>
 8024612:	2308      	movs	r3, #8
 8024614:	e7b1      	b.n	802457a <_strtol_l.isra.0+0x5e>
 8024616:	2c30      	cmp	r4, #48	; 0x30
 8024618:	d0a4      	beq.n	8024564 <_strtol_l.isra.0+0x48>
 802461a:	230a      	movs	r3, #10
 802461c:	e7ad      	b.n	802457a <_strtol_l.isra.0+0x5e>
 802461e:	bf00      	nop
 8024620:	080334c8 	.word	0x080334c8

08024624 <_strtol_r>:
 8024624:	f7ff bf7a 	b.w	802451c <_strtol_l.isra.0>

08024628 <strtol>:
 8024628:	4613      	mov	r3, r2
 802462a:	460a      	mov	r2, r1
 802462c:	4601      	mov	r1, r0
 802462e:	4802      	ldr	r0, [pc, #8]	; (8024638 <strtol+0x10>)
 8024630:	6800      	ldr	r0, [r0, #0]
 8024632:	f7ff bf73 	b.w	802451c <_strtol_l.isra.0>
 8024636:	bf00      	nop
 8024638:	2000057c 	.word	0x2000057c

0802463c <__tzcalc_limits>:
 802463c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024640:	4680      	mov	r8, r0
 8024642:	f001 ffd1 	bl	80265e8 <__gettzinfo>
 8024646:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802464a:	4598      	cmp	r8, r3
 802464c:	f340 8098 	ble.w	8024780 <__tzcalc_limits+0x144>
 8024650:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8024654:	4443      	add	r3, r8
 8024656:	109b      	asrs	r3, r3, #2
 8024658:	f240 126d 	movw	r2, #365	; 0x16d
 802465c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8024660:	fb02 3505 	mla	r5, r2, r5, r3
 8024664:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8024668:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 802466c:	fb93 f3f2 	sdiv	r3, r3, r2
 8024670:	441d      	add	r5, r3
 8024672:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8024676:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 802467a:	fb98 f7f3 	sdiv	r7, r8, r3
 802467e:	fb03 8717 	mls	r7, r3, r7, r8
 8024682:	4442      	add	r2, r8
 8024684:	fab7 fc87 	clz	ip, r7
 8024688:	fbb2 f2f3 	udiv	r2, r2, r3
 802468c:	f008 0303 	and.w	r3, r8, #3
 8024690:	4415      	add	r5, r2
 8024692:	2264      	movs	r2, #100	; 0x64
 8024694:	f8c0 8004 	str.w	r8, [r0, #4]
 8024698:	fb98 f6f2 	sdiv	r6, r8, r2
 802469c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80246a0:	fb02 8616 	mls	r6, r2, r6, r8
 80246a4:	4604      	mov	r4, r0
 80246a6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80246aa:	9300      	str	r3, [sp, #0]
 80246ac:	f04f 0e07 	mov.w	lr, #7
 80246b0:	7a22      	ldrb	r2, [r4, #8]
 80246b2:	6963      	ldr	r3, [r4, #20]
 80246b4:	2a4a      	cmp	r2, #74	; 0x4a
 80246b6:	d128      	bne.n	802470a <__tzcalc_limits+0xce>
 80246b8:	9900      	ldr	r1, [sp, #0]
 80246ba:	18ea      	adds	r2, r5, r3
 80246bc:	b901      	cbnz	r1, 80246c0 <__tzcalc_limits+0x84>
 80246be:	b906      	cbnz	r6, 80246c2 <__tzcalc_limits+0x86>
 80246c0:	bb0f      	cbnz	r7, 8024706 <__tzcalc_limits+0xca>
 80246c2:	2b3b      	cmp	r3, #59	; 0x3b
 80246c4:	bfd4      	ite	le
 80246c6:	2300      	movle	r3, #0
 80246c8:	2301      	movgt	r3, #1
 80246ca:	4413      	add	r3, r2
 80246cc:	1e5a      	subs	r2, r3, #1
 80246ce:	69a3      	ldr	r3, [r4, #24]
 80246d0:	492c      	ldr	r1, [pc, #176]	; (8024784 <__tzcalc_limits+0x148>)
 80246d2:	fb01 3202 	mla	r2, r1, r2, r3
 80246d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80246d8:	4413      	add	r3, r2
 80246da:	461a      	mov	r2, r3
 80246dc:	17db      	asrs	r3, r3, #31
 80246de:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80246e2:	3428      	adds	r4, #40	; 0x28
 80246e4:	45a3      	cmp	fp, r4
 80246e6:	d1e3      	bne.n	80246b0 <__tzcalc_limits+0x74>
 80246e8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80246ec:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80246f0:	4294      	cmp	r4, r2
 80246f2:	eb75 0303 	sbcs.w	r3, r5, r3
 80246f6:	bfb4      	ite	lt
 80246f8:	2301      	movlt	r3, #1
 80246fa:	2300      	movge	r3, #0
 80246fc:	6003      	str	r3, [r0, #0]
 80246fe:	2001      	movs	r0, #1
 8024700:	b003      	add	sp, #12
 8024702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024706:	2300      	movs	r3, #0
 8024708:	e7df      	b.n	80246ca <__tzcalc_limits+0x8e>
 802470a:	2a44      	cmp	r2, #68	; 0x44
 802470c:	d101      	bne.n	8024712 <__tzcalc_limits+0xd6>
 802470e:	18ea      	adds	r2, r5, r3
 8024710:	e7dd      	b.n	80246ce <__tzcalc_limits+0x92>
 8024712:	9a00      	ldr	r2, [sp, #0]
 8024714:	bb72      	cbnz	r2, 8024774 <__tzcalc_limits+0x138>
 8024716:	2e00      	cmp	r6, #0
 8024718:	bf0c      	ite	eq
 802471a:	46e0      	moveq	r8, ip
 802471c:	f04f 0801 	movne.w	r8, #1
 8024720:	4919      	ldr	r1, [pc, #100]	; (8024788 <__tzcalc_limits+0x14c>)
 8024722:	68e2      	ldr	r2, [r4, #12]
 8024724:	9201      	str	r2, [sp, #4]
 8024726:	f04f 0a30 	mov.w	sl, #48	; 0x30
 802472a:	fb0a 1808 	mla	r8, sl, r8, r1
 802472e:	462a      	mov	r2, r5
 8024730:	f04f 0900 	mov.w	r9, #0
 8024734:	f1a8 0804 	sub.w	r8, r8, #4
 8024738:	9901      	ldr	r1, [sp, #4]
 802473a:	f109 0901 	add.w	r9, r9, #1
 802473e:	4549      	cmp	r1, r9
 8024740:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8024744:	dc18      	bgt.n	8024778 <__tzcalc_limits+0x13c>
 8024746:	f102 0804 	add.w	r8, r2, #4
 802474a:	fb98 f9fe 	sdiv	r9, r8, lr
 802474e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8024752:	eba8 0909 	sub.w	r9, r8, r9
 8024756:	ebb3 0909 	subs.w	r9, r3, r9
 802475a:	6923      	ldr	r3, [r4, #16]
 802475c:	f103 33ff 	add.w	r3, r3, #4294967295
 8024760:	bf48      	it	mi
 8024762:	f109 0907 	addmi.w	r9, r9, #7
 8024766:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802476a:	444b      	add	r3, r9
 802476c:	4553      	cmp	r3, sl
 802476e:	da05      	bge.n	802477c <__tzcalc_limits+0x140>
 8024770:	441a      	add	r2, r3
 8024772:	e7ac      	b.n	80246ce <__tzcalc_limits+0x92>
 8024774:	46e0      	mov	r8, ip
 8024776:	e7d3      	b.n	8024720 <__tzcalc_limits+0xe4>
 8024778:	4452      	add	r2, sl
 802477a:	e7dd      	b.n	8024738 <__tzcalc_limits+0xfc>
 802477c:	3b07      	subs	r3, #7
 802477e:	e7f5      	b.n	802476c <__tzcalc_limits+0x130>
 8024780:	2000      	movs	r0, #0
 8024782:	e7bd      	b.n	8024700 <__tzcalc_limits+0xc4>
 8024784:	00015180 	.word	0x00015180
 8024788:	080339cc 	.word	0x080339cc

0802478c <__tz_lock>:
 802478c:	4801      	ldr	r0, [pc, #4]	; (8024794 <__tz_lock+0x8>)
 802478e:	f001 bf30 	b.w	80265f2 <__retarget_lock_acquire>
 8024792:	bf00      	nop
 8024794:	200019b3 	.word	0x200019b3

08024798 <__tz_unlock>:
 8024798:	4801      	ldr	r0, [pc, #4]	; (80247a0 <__tz_unlock+0x8>)
 802479a:	f001 bf2c 	b.w	80265f6 <__retarget_lock_release>
 802479e:	bf00      	nop
 80247a0:	200019b3 	.word	0x200019b3

080247a4 <_tzset_unlocked>:
 80247a4:	4b01      	ldr	r3, [pc, #4]	; (80247ac <_tzset_unlocked+0x8>)
 80247a6:	6818      	ldr	r0, [r3, #0]
 80247a8:	f000 b802 	b.w	80247b0 <_tzset_unlocked_r>
 80247ac:	2000057c 	.word	0x2000057c

080247b0 <_tzset_unlocked_r>:
 80247b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247b4:	b08d      	sub	sp, #52	; 0x34
 80247b6:	4607      	mov	r7, r0
 80247b8:	f001 ff16 	bl	80265e8 <__gettzinfo>
 80247bc:	49ae      	ldr	r1, [pc, #696]	; (8024a78 <_tzset_unlocked_r+0x2c8>)
 80247be:	4eaf      	ldr	r6, [pc, #700]	; (8024a7c <_tzset_unlocked_r+0x2cc>)
 80247c0:	4605      	mov	r5, r0
 80247c2:	4638      	mov	r0, r7
 80247c4:	f001 ff08 	bl	80265d8 <_getenv_r>
 80247c8:	4604      	mov	r4, r0
 80247ca:	b970      	cbnz	r0, 80247ea <_tzset_unlocked_r+0x3a>
 80247cc:	4bac      	ldr	r3, [pc, #688]	; (8024a80 <_tzset_unlocked_r+0x2d0>)
 80247ce:	4aad      	ldr	r2, [pc, #692]	; (8024a84 <_tzset_unlocked_r+0x2d4>)
 80247d0:	6018      	str	r0, [r3, #0]
 80247d2:	4bad      	ldr	r3, [pc, #692]	; (8024a88 <_tzset_unlocked_r+0x2d8>)
 80247d4:	6018      	str	r0, [r3, #0]
 80247d6:	4bad      	ldr	r3, [pc, #692]	; (8024a8c <_tzset_unlocked_r+0x2dc>)
 80247d8:	6830      	ldr	r0, [r6, #0]
 80247da:	e9c3 2200 	strd	r2, r2, [r3]
 80247de:	f7fd fccd 	bl	802217c <free>
 80247e2:	6034      	str	r4, [r6, #0]
 80247e4:	b00d      	add	sp, #52	; 0x34
 80247e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247ea:	6831      	ldr	r1, [r6, #0]
 80247ec:	2900      	cmp	r1, #0
 80247ee:	d15f      	bne.n	80248b0 <_tzset_unlocked_r+0x100>
 80247f0:	6830      	ldr	r0, [r6, #0]
 80247f2:	f7fd fcc3 	bl	802217c <free>
 80247f6:	4620      	mov	r0, r4
 80247f8:	f7db fcf4 	bl	80001e4 <strlen>
 80247fc:	1c41      	adds	r1, r0, #1
 80247fe:	4638      	mov	r0, r7
 8024800:	f7fd ffe0 	bl	80227c4 <_malloc_r>
 8024804:	6030      	str	r0, [r6, #0]
 8024806:	2800      	cmp	r0, #0
 8024808:	d157      	bne.n	80248ba <_tzset_unlocked_r+0x10a>
 802480a:	7823      	ldrb	r3, [r4, #0]
 802480c:	4aa0      	ldr	r2, [pc, #640]	; (8024a90 <_tzset_unlocked_r+0x2e0>)
 802480e:	49a1      	ldr	r1, [pc, #644]	; (8024a94 <_tzset_unlocked_r+0x2e4>)
 8024810:	2b3a      	cmp	r3, #58	; 0x3a
 8024812:	bf08      	it	eq
 8024814:	3401      	addeq	r4, #1
 8024816:	ae0a      	add	r6, sp, #40	; 0x28
 8024818:	4633      	mov	r3, r6
 802481a:	4620      	mov	r0, r4
 802481c:	f7fe ff2e 	bl	802367c <siscanf>
 8024820:	2800      	cmp	r0, #0
 8024822:	dddf      	ble.n	80247e4 <_tzset_unlocked_r+0x34>
 8024824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024826:	18e7      	adds	r7, r4, r3
 8024828:	5ce3      	ldrb	r3, [r4, r3]
 802482a:	2b2d      	cmp	r3, #45	; 0x2d
 802482c:	d149      	bne.n	80248c2 <_tzset_unlocked_r+0x112>
 802482e:	3701      	adds	r7, #1
 8024830:	f04f 34ff 	mov.w	r4, #4294967295
 8024834:	f10d 0a20 	add.w	sl, sp, #32
 8024838:	f10d 0b1e 	add.w	fp, sp, #30
 802483c:	f04f 0800 	mov.w	r8, #0
 8024840:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8024844:	4994      	ldr	r1, [pc, #592]	; (8024a98 <_tzset_unlocked_r+0x2e8>)
 8024846:	9603      	str	r6, [sp, #12]
 8024848:	f8cd b000 	str.w	fp, [sp]
 802484c:	4633      	mov	r3, r6
 802484e:	aa07      	add	r2, sp, #28
 8024850:	4638      	mov	r0, r7
 8024852:	f8ad 801e 	strh.w	r8, [sp, #30]
 8024856:	f8ad 8020 	strh.w	r8, [sp, #32]
 802485a:	f7fe ff0f 	bl	802367c <siscanf>
 802485e:	4540      	cmp	r0, r8
 8024860:	ddc0      	ble.n	80247e4 <_tzset_unlocked_r+0x34>
 8024862:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024866:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802486a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8024aa4 <_tzset_unlocked_r+0x2f4>
 802486e:	213c      	movs	r1, #60	; 0x3c
 8024870:	fb01 2203 	mla	r2, r1, r3, r2
 8024874:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024878:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802487c:	fb01 2303 	mla	r3, r1, r3, r2
 8024880:	435c      	muls	r4, r3
 8024882:	62ac      	str	r4, [r5, #40]	; 0x28
 8024884:	4c81      	ldr	r4, [pc, #516]	; (8024a8c <_tzset_unlocked_r+0x2dc>)
 8024886:	4b82      	ldr	r3, [pc, #520]	; (8024a90 <_tzset_unlocked_r+0x2e0>)
 8024888:	6023      	str	r3, [r4, #0]
 802488a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802488c:	4981      	ldr	r1, [pc, #516]	; (8024a94 <_tzset_unlocked_r+0x2e4>)
 802488e:	441f      	add	r7, r3
 8024890:	464a      	mov	r2, r9
 8024892:	4633      	mov	r3, r6
 8024894:	4638      	mov	r0, r7
 8024896:	f7fe fef1 	bl	802367c <siscanf>
 802489a:	4540      	cmp	r0, r8
 802489c:	dc16      	bgt.n	80248cc <_tzset_unlocked_r+0x11c>
 802489e:	6823      	ldr	r3, [r4, #0]
 80248a0:	6063      	str	r3, [r4, #4]
 80248a2:	4b77      	ldr	r3, [pc, #476]	; (8024a80 <_tzset_unlocked_r+0x2d0>)
 80248a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80248a6:	601a      	str	r2, [r3, #0]
 80248a8:	4b77      	ldr	r3, [pc, #476]	; (8024a88 <_tzset_unlocked_r+0x2d8>)
 80248aa:	f8c3 8000 	str.w	r8, [r3]
 80248ae:	e799      	b.n	80247e4 <_tzset_unlocked_r+0x34>
 80248b0:	f7db fc8e 	bl	80001d0 <strcmp>
 80248b4:	2800      	cmp	r0, #0
 80248b6:	d19b      	bne.n	80247f0 <_tzset_unlocked_r+0x40>
 80248b8:	e794      	b.n	80247e4 <_tzset_unlocked_r+0x34>
 80248ba:	4621      	mov	r1, r4
 80248bc:	f7fe ff5c 	bl	8023778 <strcpy>
 80248c0:	e7a3      	b.n	802480a <_tzset_unlocked_r+0x5a>
 80248c2:	2b2b      	cmp	r3, #43	; 0x2b
 80248c4:	bf08      	it	eq
 80248c6:	3701      	addeq	r7, #1
 80248c8:	2401      	movs	r4, #1
 80248ca:	e7b3      	b.n	8024834 <_tzset_unlocked_r+0x84>
 80248cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248ce:	f8c4 9004 	str.w	r9, [r4, #4]
 80248d2:	18fc      	adds	r4, r7, r3
 80248d4:	5cfb      	ldrb	r3, [r7, r3]
 80248d6:	2b2d      	cmp	r3, #45	; 0x2d
 80248d8:	f040 808b 	bne.w	80249f2 <_tzset_unlocked_r+0x242>
 80248dc:	3401      	adds	r4, #1
 80248de:	f04f 37ff 	mov.w	r7, #4294967295
 80248e2:	2300      	movs	r3, #0
 80248e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80248e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80248ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 80248f0:	930a      	str	r3, [sp, #40]	; 0x28
 80248f2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80248f6:	e9cd b600 	strd	fp, r6, [sp]
 80248fa:	4967      	ldr	r1, [pc, #412]	; (8024a98 <_tzset_unlocked_r+0x2e8>)
 80248fc:	4633      	mov	r3, r6
 80248fe:	aa07      	add	r2, sp, #28
 8024900:	4620      	mov	r0, r4
 8024902:	f7fe febb 	bl	802367c <siscanf>
 8024906:	2800      	cmp	r0, #0
 8024908:	dc78      	bgt.n	80249fc <_tzset_unlocked_r+0x24c>
 802490a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 802490c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8024910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024912:	652f      	str	r7, [r5, #80]	; 0x50
 8024914:	441c      	add	r4, r3
 8024916:	462f      	mov	r7, r5
 8024918:	f04f 0900 	mov.w	r9, #0
 802491c:	7823      	ldrb	r3, [r4, #0]
 802491e:	2b2c      	cmp	r3, #44	; 0x2c
 8024920:	bf08      	it	eq
 8024922:	3401      	addeq	r4, #1
 8024924:	f894 8000 	ldrb.w	r8, [r4]
 8024928:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 802492c:	d178      	bne.n	8024a20 <_tzset_unlocked_r+0x270>
 802492e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8024932:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8024936:	ab09      	add	r3, sp, #36	; 0x24
 8024938:	9300      	str	r3, [sp, #0]
 802493a:	4958      	ldr	r1, [pc, #352]	; (8024a9c <_tzset_unlocked_r+0x2ec>)
 802493c:	9603      	str	r6, [sp, #12]
 802493e:	4633      	mov	r3, r6
 8024940:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8024944:	4620      	mov	r0, r4
 8024946:	f7fe fe99 	bl	802367c <siscanf>
 802494a:	2803      	cmp	r0, #3
 802494c:	f47f af4a 	bne.w	80247e4 <_tzset_unlocked_r+0x34>
 8024950:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8024954:	1e4b      	subs	r3, r1, #1
 8024956:	2b0b      	cmp	r3, #11
 8024958:	f63f af44 	bhi.w	80247e4 <_tzset_unlocked_r+0x34>
 802495c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8024960:	1e53      	subs	r3, r2, #1
 8024962:	2b04      	cmp	r3, #4
 8024964:	f63f af3e 	bhi.w	80247e4 <_tzset_unlocked_r+0x34>
 8024968:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 802496c:	2b06      	cmp	r3, #6
 802496e:	f63f af39 	bhi.w	80247e4 <_tzset_unlocked_r+0x34>
 8024972:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8024976:	f887 8008 	strb.w	r8, [r7, #8]
 802497a:	617b      	str	r3, [r7, #20]
 802497c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802497e:	eb04 0803 	add.w	r8, r4, r3
 8024982:	2302      	movs	r3, #2
 8024984:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024988:	2300      	movs	r3, #0
 802498a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802498e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024992:	930a      	str	r3, [sp, #40]	; 0x28
 8024994:	f898 3000 	ldrb.w	r3, [r8]
 8024998:	2b2f      	cmp	r3, #47	; 0x2f
 802499a:	d109      	bne.n	80249b0 <_tzset_unlocked_r+0x200>
 802499c:	e9cd a602 	strd	sl, r6, [sp, #8]
 80249a0:	e9cd b600 	strd	fp, r6, [sp]
 80249a4:	493e      	ldr	r1, [pc, #248]	; (8024aa0 <_tzset_unlocked_r+0x2f0>)
 80249a6:	4633      	mov	r3, r6
 80249a8:	aa07      	add	r2, sp, #28
 80249aa:	4640      	mov	r0, r8
 80249ac:	f7fe fe66 	bl	802367c <siscanf>
 80249b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80249b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80249b8:	213c      	movs	r1, #60	; 0x3c
 80249ba:	fb01 2203 	mla	r2, r1, r3, r2
 80249be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80249c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80249c6:	fb01 2303 	mla	r3, r1, r3, r2
 80249ca:	61bb      	str	r3, [r7, #24]
 80249cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80249ce:	3728      	adds	r7, #40	; 0x28
 80249d0:	4444      	add	r4, r8
 80249d2:	f1b9 0f00 	cmp.w	r9, #0
 80249d6:	d020      	beq.n	8024a1a <_tzset_unlocked_r+0x26a>
 80249d8:	6868      	ldr	r0, [r5, #4]
 80249da:	f7ff fe2f 	bl	802463c <__tzcalc_limits>
 80249de:	4b28      	ldr	r3, [pc, #160]	; (8024a80 <_tzset_unlocked_r+0x2d0>)
 80249e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80249e2:	601a      	str	r2, [r3, #0]
 80249e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80249e6:	1a9b      	subs	r3, r3, r2
 80249e8:	4a27      	ldr	r2, [pc, #156]	; (8024a88 <_tzset_unlocked_r+0x2d8>)
 80249ea:	bf18      	it	ne
 80249ec:	2301      	movne	r3, #1
 80249ee:	6013      	str	r3, [r2, #0]
 80249f0:	e6f8      	b.n	80247e4 <_tzset_unlocked_r+0x34>
 80249f2:	2b2b      	cmp	r3, #43	; 0x2b
 80249f4:	bf08      	it	eq
 80249f6:	3401      	addeq	r4, #1
 80249f8:	2701      	movs	r7, #1
 80249fa:	e772      	b.n	80248e2 <_tzset_unlocked_r+0x132>
 80249fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024a00:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024a04:	213c      	movs	r1, #60	; 0x3c
 8024a06:	fb01 2203 	mla	r2, r1, r3, r2
 8024a0a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024a0e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024a12:	fb01 2303 	mla	r3, r1, r3, r2
 8024a16:	435f      	muls	r7, r3
 8024a18:	e77a      	b.n	8024910 <_tzset_unlocked_r+0x160>
 8024a1a:	f04f 0901 	mov.w	r9, #1
 8024a1e:	e77d      	b.n	802491c <_tzset_unlocked_r+0x16c>
 8024a20:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8024a24:	bf06      	itte	eq
 8024a26:	3401      	addeq	r4, #1
 8024a28:	4643      	moveq	r3, r8
 8024a2a:	2344      	movne	r3, #68	; 0x44
 8024a2c:	220a      	movs	r2, #10
 8024a2e:	a90b      	add	r1, sp, #44	; 0x2c
 8024a30:	4620      	mov	r0, r4
 8024a32:	9305      	str	r3, [sp, #20]
 8024a34:	f003 f918 	bl	8027c68 <strtoul>
 8024a38:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8024a3c:	9b05      	ldr	r3, [sp, #20]
 8024a3e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8024a42:	45a0      	cmp	r8, r4
 8024a44:	d114      	bne.n	8024a70 <_tzset_unlocked_r+0x2c0>
 8024a46:	234d      	movs	r3, #77	; 0x4d
 8024a48:	f1b9 0f00 	cmp.w	r9, #0
 8024a4c:	d107      	bne.n	8024a5e <_tzset_unlocked_r+0x2ae>
 8024a4e:	722b      	strb	r3, [r5, #8]
 8024a50:	2103      	movs	r1, #3
 8024a52:	2302      	movs	r3, #2
 8024a54:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8024a58:	f8c5 9014 	str.w	r9, [r5, #20]
 8024a5c:	e791      	b.n	8024982 <_tzset_unlocked_r+0x1d2>
 8024a5e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8024a62:	220b      	movs	r2, #11
 8024a64:	2301      	movs	r3, #1
 8024a66:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8024a6a:	2300      	movs	r3, #0
 8024a6c:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024a6e:	e788      	b.n	8024982 <_tzset_unlocked_r+0x1d2>
 8024a70:	b280      	uxth	r0, r0
 8024a72:	723b      	strb	r3, [r7, #8]
 8024a74:	6178      	str	r0, [r7, #20]
 8024a76:	e784      	b.n	8024982 <_tzset_unlocked_r+0x1d2>
 8024a78:	080337f9 	.word	0x080337f9
 8024a7c:	200010f8 	.word	0x200010f8
 8024a80:	20001100 	.word	0x20001100
 8024a84:	080337fc 	.word	0x080337fc
 8024a88:	200010fc 	.word	0x200010fc
 8024a8c:	200005e0 	.word	0x200005e0
 8024a90:	200010eb 	.word	0x200010eb
 8024a94:	08033800 	.word	0x08033800
 8024a98:	08033823 	.word	0x08033823
 8024a9c:	0803380f 	.word	0x0803380f
 8024aa0:	08033822 	.word	0x08033822
 8024aa4:	200010e0 	.word	0x200010e0

08024aa8 <_vsniprintf_r>:
 8024aa8:	b530      	push	{r4, r5, lr}
 8024aaa:	1e14      	subs	r4, r2, #0
 8024aac:	4605      	mov	r5, r0
 8024aae:	b09b      	sub	sp, #108	; 0x6c
 8024ab0:	4618      	mov	r0, r3
 8024ab2:	da05      	bge.n	8024ac0 <_vsniprintf_r+0x18>
 8024ab4:	238b      	movs	r3, #139	; 0x8b
 8024ab6:	602b      	str	r3, [r5, #0]
 8024ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8024abc:	b01b      	add	sp, #108	; 0x6c
 8024abe:	bd30      	pop	{r4, r5, pc}
 8024ac0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024ac4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024ac8:	bf14      	ite	ne
 8024aca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024ace:	4623      	moveq	r3, r4
 8024ad0:	9302      	str	r3, [sp, #8]
 8024ad2:	9305      	str	r3, [sp, #20]
 8024ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024ad8:	9100      	str	r1, [sp, #0]
 8024ada:	9104      	str	r1, [sp, #16]
 8024adc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024ae0:	4602      	mov	r2, r0
 8024ae2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024ae4:	4669      	mov	r1, sp
 8024ae6:	4628      	mov	r0, r5
 8024ae8:	f002 fb58 	bl	802719c <_svfiprintf_r>
 8024aec:	1c43      	adds	r3, r0, #1
 8024aee:	bfbc      	itt	lt
 8024af0:	238b      	movlt	r3, #139	; 0x8b
 8024af2:	602b      	strlt	r3, [r5, #0]
 8024af4:	2c00      	cmp	r4, #0
 8024af6:	d0e1      	beq.n	8024abc <_vsniprintf_r+0x14>
 8024af8:	9b00      	ldr	r3, [sp, #0]
 8024afa:	2200      	movs	r2, #0
 8024afc:	701a      	strb	r2, [r3, #0]
 8024afe:	e7dd      	b.n	8024abc <_vsniprintf_r+0x14>

08024b00 <vsniprintf>:
 8024b00:	b507      	push	{r0, r1, r2, lr}
 8024b02:	9300      	str	r3, [sp, #0]
 8024b04:	4613      	mov	r3, r2
 8024b06:	460a      	mov	r2, r1
 8024b08:	4601      	mov	r1, r0
 8024b0a:	4803      	ldr	r0, [pc, #12]	; (8024b18 <vsniprintf+0x18>)
 8024b0c:	6800      	ldr	r0, [r0, #0]
 8024b0e:	f7ff ffcb 	bl	8024aa8 <_vsniprintf_r>
 8024b12:	b003      	add	sp, #12
 8024b14:	f85d fb04 	ldr.w	pc, [sp], #4
 8024b18:	2000057c 	.word	0x2000057c

08024b1c <__swbuf_r>:
 8024b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b1e:	460e      	mov	r6, r1
 8024b20:	4614      	mov	r4, r2
 8024b22:	4605      	mov	r5, r0
 8024b24:	b118      	cbz	r0, 8024b2e <__swbuf_r+0x12>
 8024b26:	6983      	ldr	r3, [r0, #24]
 8024b28:	b90b      	cbnz	r3, 8024b2e <__swbuf_r+0x12>
 8024b2a:	f001 f8b1 	bl	8025c90 <__sinit>
 8024b2e:	4b21      	ldr	r3, [pc, #132]	; (8024bb4 <__swbuf_r+0x98>)
 8024b30:	429c      	cmp	r4, r3
 8024b32:	d12b      	bne.n	8024b8c <__swbuf_r+0x70>
 8024b34:	686c      	ldr	r4, [r5, #4]
 8024b36:	69a3      	ldr	r3, [r4, #24]
 8024b38:	60a3      	str	r3, [r4, #8]
 8024b3a:	89a3      	ldrh	r3, [r4, #12]
 8024b3c:	071a      	lsls	r2, r3, #28
 8024b3e:	d52f      	bpl.n	8024ba0 <__swbuf_r+0x84>
 8024b40:	6923      	ldr	r3, [r4, #16]
 8024b42:	b36b      	cbz	r3, 8024ba0 <__swbuf_r+0x84>
 8024b44:	6923      	ldr	r3, [r4, #16]
 8024b46:	6820      	ldr	r0, [r4, #0]
 8024b48:	1ac0      	subs	r0, r0, r3
 8024b4a:	6963      	ldr	r3, [r4, #20]
 8024b4c:	b2f6      	uxtb	r6, r6
 8024b4e:	4283      	cmp	r3, r0
 8024b50:	4637      	mov	r7, r6
 8024b52:	dc04      	bgt.n	8024b5e <__swbuf_r+0x42>
 8024b54:	4621      	mov	r1, r4
 8024b56:	4628      	mov	r0, r5
 8024b58:	f000 fff4 	bl	8025b44 <_fflush_r>
 8024b5c:	bb30      	cbnz	r0, 8024bac <__swbuf_r+0x90>
 8024b5e:	68a3      	ldr	r3, [r4, #8]
 8024b60:	3b01      	subs	r3, #1
 8024b62:	60a3      	str	r3, [r4, #8]
 8024b64:	6823      	ldr	r3, [r4, #0]
 8024b66:	1c5a      	adds	r2, r3, #1
 8024b68:	6022      	str	r2, [r4, #0]
 8024b6a:	701e      	strb	r6, [r3, #0]
 8024b6c:	6963      	ldr	r3, [r4, #20]
 8024b6e:	3001      	adds	r0, #1
 8024b70:	4283      	cmp	r3, r0
 8024b72:	d004      	beq.n	8024b7e <__swbuf_r+0x62>
 8024b74:	89a3      	ldrh	r3, [r4, #12]
 8024b76:	07db      	lsls	r3, r3, #31
 8024b78:	d506      	bpl.n	8024b88 <__swbuf_r+0x6c>
 8024b7a:	2e0a      	cmp	r6, #10
 8024b7c:	d104      	bne.n	8024b88 <__swbuf_r+0x6c>
 8024b7e:	4621      	mov	r1, r4
 8024b80:	4628      	mov	r0, r5
 8024b82:	f000 ffdf 	bl	8025b44 <_fflush_r>
 8024b86:	b988      	cbnz	r0, 8024bac <__swbuf_r+0x90>
 8024b88:	4638      	mov	r0, r7
 8024b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024b8c:	4b0a      	ldr	r3, [pc, #40]	; (8024bb8 <__swbuf_r+0x9c>)
 8024b8e:	429c      	cmp	r4, r3
 8024b90:	d101      	bne.n	8024b96 <__swbuf_r+0x7a>
 8024b92:	68ac      	ldr	r4, [r5, #8]
 8024b94:	e7cf      	b.n	8024b36 <__swbuf_r+0x1a>
 8024b96:	4b09      	ldr	r3, [pc, #36]	; (8024bbc <__swbuf_r+0xa0>)
 8024b98:	429c      	cmp	r4, r3
 8024b9a:	bf08      	it	eq
 8024b9c:	68ec      	ldreq	r4, [r5, #12]
 8024b9e:	e7ca      	b.n	8024b36 <__swbuf_r+0x1a>
 8024ba0:	4621      	mov	r1, r4
 8024ba2:	4628      	mov	r0, r5
 8024ba4:	f000 f81e 	bl	8024be4 <__swsetup_r>
 8024ba8:	2800      	cmp	r0, #0
 8024baa:	d0cb      	beq.n	8024b44 <__swbuf_r+0x28>
 8024bac:	f04f 37ff 	mov.w	r7, #4294967295
 8024bb0:	e7ea      	b.n	8024b88 <__swbuf_r+0x6c>
 8024bb2:	bf00      	nop
 8024bb4:	08033910 	.word	0x08033910
 8024bb8:	08033930 	.word	0x08033930
 8024bbc:	080338f0 	.word	0x080338f0

08024bc0 <_write_r>:
 8024bc0:	b538      	push	{r3, r4, r5, lr}
 8024bc2:	4d07      	ldr	r5, [pc, #28]	; (8024be0 <_write_r+0x20>)
 8024bc4:	4604      	mov	r4, r0
 8024bc6:	4608      	mov	r0, r1
 8024bc8:	4611      	mov	r1, r2
 8024bca:	2200      	movs	r2, #0
 8024bcc:	602a      	str	r2, [r5, #0]
 8024bce:	461a      	mov	r2, r3
 8024bd0:	f7df fa80 	bl	80040d4 <_write>
 8024bd4:	1c43      	adds	r3, r0, #1
 8024bd6:	d102      	bne.n	8024bde <_write_r+0x1e>
 8024bd8:	682b      	ldr	r3, [r5, #0]
 8024bda:	b103      	cbz	r3, 8024bde <_write_r+0x1e>
 8024bdc:	6023      	str	r3, [r4, #0]
 8024bde:	bd38      	pop	{r3, r4, r5, pc}
 8024be0:	200019b8 	.word	0x200019b8

08024be4 <__swsetup_r>:
 8024be4:	4b32      	ldr	r3, [pc, #200]	; (8024cb0 <__swsetup_r+0xcc>)
 8024be6:	b570      	push	{r4, r5, r6, lr}
 8024be8:	681d      	ldr	r5, [r3, #0]
 8024bea:	4606      	mov	r6, r0
 8024bec:	460c      	mov	r4, r1
 8024bee:	b125      	cbz	r5, 8024bfa <__swsetup_r+0x16>
 8024bf0:	69ab      	ldr	r3, [r5, #24]
 8024bf2:	b913      	cbnz	r3, 8024bfa <__swsetup_r+0x16>
 8024bf4:	4628      	mov	r0, r5
 8024bf6:	f001 f84b 	bl	8025c90 <__sinit>
 8024bfa:	4b2e      	ldr	r3, [pc, #184]	; (8024cb4 <__swsetup_r+0xd0>)
 8024bfc:	429c      	cmp	r4, r3
 8024bfe:	d10f      	bne.n	8024c20 <__swsetup_r+0x3c>
 8024c00:	686c      	ldr	r4, [r5, #4]
 8024c02:	89a3      	ldrh	r3, [r4, #12]
 8024c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024c08:	0719      	lsls	r1, r3, #28
 8024c0a:	d42c      	bmi.n	8024c66 <__swsetup_r+0x82>
 8024c0c:	06dd      	lsls	r5, r3, #27
 8024c0e:	d411      	bmi.n	8024c34 <__swsetup_r+0x50>
 8024c10:	2309      	movs	r3, #9
 8024c12:	6033      	str	r3, [r6, #0]
 8024c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024c18:	81a3      	strh	r3, [r4, #12]
 8024c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8024c1e:	e03e      	b.n	8024c9e <__swsetup_r+0xba>
 8024c20:	4b25      	ldr	r3, [pc, #148]	; (8024cb8 <__swsetup_r+0xd4>)
 8024c22:	429c      	cmp	r4, r3
 8024c24:	d101      	bne.n	8024c2a <__swsetup_r+0x46>
 8024c26:	68ac      	ldr	r4, [r5, #8]
 8024c28:	e7eb      	b.n	8024c02 <__swsetup_r+0x1e>
 8024c2a:	4b24      	ldr	r3, [pc, #144]	; (8024cbc <__swsetup_r+0xd8>)
 8024c2c:	429c      	cmp	r4, r3
 8024c2e:	bf08      	it	eq
 8024c30:	68ec      	ldreq	r4, [r5, #12]
 8024c32:	e7e6      	b.n	8024c02 <__swsetup_r+0x1e>
 8024c34:	0758      	lsls	r0, r3, #29
 8024c36:	d512      	bpl.n	8024c5e <__swsetup_r+0x7a>
 8024c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024c3a:	b141      	cbz	r1, 8024c4e <__swsetup_r+0x6a>
 8024c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024c40:	4299      	cmp	r1, r3
 8024c42:	d002      	beq.n	8024c4a <__swsetup_r+0x66>
 8024c44:	4630      	mov	r0, r6
 8024c46:	f7fd fd6d 	bl	8022724 <_free_r>
 8024c4a:	2300      	movs	r3, #0
 8024c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8024c4e:	89a3      	ldrh	r3, [r4, #12]
 8024c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024c54:	81a3      	strh	r3, [r4, #12]
 8024c56:	2300      	movs	r3, #0
 8024c58:	6063      	str	r3, [r4, #4]
 8024c5a:	6923      	ldr	r3, [r4, #16]
 8024c5c:	6023      	str	r3, [r4, #0]
 8024c5e:	89a3      	ldrh	r3, [r4, #12]
 8024c60:	f043 0308 	orr.w	r3, r3, #8
 8024c64:	81a3      	strh	r3, [r4, #12]
 8024c66:	6923      	ldr	r3, [r4, #16]
 8024c68:	b94b      	cbnz	r3, 8024c7e <__swsetup_r+0x9a>
 8024c6a:	89a3      	ldrh	r3, [r4, #12]
 8024c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024c74:	d003      	beq.n	8024c7e <__swsetup_r+0x9a>
 8024c76:	4621      	mov	r1, r4
 8024c78:	4630      	mov	r0, r6
 8024c7a:	f001 fcf5 	bl	8026668 <__smakebuf_r>
 8024c7e:	89a0      	ldrh	r0, [r4, #12]
 8024c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024c84:	f010 0301 	ands.w	r3, r0, #1
 8024c88:	d00a      	beq.n	8024ca0 <__swsetup_r+0xbc>
 8024c8a:	2300      	movs	r3, #0
 8024c8c:	60a3      	str	r3, [r4, #8]
 8024c8e:	6963      	ldr	r3, [r4, #20]
 8024c90:	425b      	negs	r3, r3
 8024c92:	61a3      	str	r3, [r4, #24]
 8024c94:	6923      	ldr	r3, [r4, #16]
 8024c96:	b943      	cbnz	r3, 8024caa <__swsetup_r+0xc6>
 8024c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024c9c:	d1ba      	bne.n	8024c14 <__swsetup_r+0x30>
 8024c9e:	bd70      	pop	{r4, r5, r6, pc}
 8024ca0:	0781      	lsls	r1, r0, #30
 8024ca2:	bf58      	it	pl
 8024ca4:	6963      	ldrpl	r3, [r4, #20]
 8024ca6:	60a3      	str	r3, [r4, #8]
 8024ca8:	e7f4      	b.n	8024c94 <__swsetup_r+0xb0>
 8024caa:	2000      	movs	r0, #0
 8024cac:	e7f7      	b.n	8024c9e <__swsetup_r+0xba>
 8024cae:	bf00      	nop
 8024cb0:	2000057c 	.word	0x2000057c
 8024cb4:	08033910 	.word	0x08033910
 8024cb8:	08033930 	.word	0x08033930
 8024cbc:	080338f0 	.word	0x080338f0

08024cc0 <__assert_func>:
 8024cc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024cc2:	4614      	mov	r4, r2
 8024cc4:	461a      	mov	r2, r3
 8024cc6:	4b09      	ldr	r3, [pc, #36]	; (8024cec <__assert_func+0x2c>)
 8024cc8:	681b      	ldr	r3, [r3, #0]
 8024cca:	4605      	mov	r5, r0
 8024ccc:	68d8      	ldr	r0, [r3, #12]
 8024cce:	b14c      	cbz	r4, 8024ce4 <__assert_func+0x24>
 8024cd0:	4b07      	ldr	r3, [pc, #28]	; (8024cf0 <__assert_func+0x30>)
 8024cd2:	9100      	str	r1, [sp, #0]
 8024cd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024cd8:	4906      	ldr	r1, [pc, #24]	; (8024cf4 <__assert_func+0x34>)
 8024cda:	462b      	mov	r3, r5
 8024cdc:	f7fd f928 	bl	8021f30 <fiprintf>
 8024ce0:	f003 f813 	bl	8027d0a <abort>
 8024ce4:	4b04      	ldr	r3, [pc, #16]	; (8024cf8 <__assert_func+0x38>)
 8024ce6:	461c      	mov	r4, r3
 8024ce8:	e7f3      	b.n	8024cd2 <__assert_func+0x12>
 8024cea:	bf00      	nop
 8024cec:	2000057c 	.word	0x2000057c
 8024cf0:	08033835 	.word	0x08033835
 8024cf4:	08033842 	.word	0x08033842
 8024cf8:	08030129 	.word	0x08030129

08024cfc <_close_r>:
 8024cfc:	b538      	push	{r3, r4, r5, lr}
 8024cfe:	4d06      	ldr	r5, [pc, #24]	; (8024d18 <_close_r+0x1c>)
 8024d00:	2300      	movs	r3, #0
 8024d02:	4604      	mov	r4, r0
 8024d04:	4608      	mov	r0, r1
 8024d06:	602b      	str	r3, [r5, #0]
 8024d08:	f7df fa0c 	bl	8004124 <_close>
 8024d0c:	1c43      	adds	r3, r0, #1
 8024d0e:	d102      	bne.n	8024d16 <_close_r+0x1a>
 8024d10:	682b      	ldr	r3, [r5, #0]
 8024d12:	b103      	cbz	r3, 8024d16 <_close_r+0x1a>
 8024d14:	6023      	str	r3, [r4, #0]
 8024d16:	bd38      	pop	{r3, r4, r5, pc}
 8024d18:	200019b8 	.word	0x200019b8

08024d1c <div>:
 8024d1c:	2900      	cmp	r1, #0
 8024d1e:	b510      	push	{r4, lr}
 8024d20:	fb91 f4f2 	sdiv	r4, r1, r2
 8024d24:	fb02 1314 	mls	r3, r2, r4, r1
 8024d28:	db06      	blt.n	8024d38 <div+0x1c>
 8024d2a:	2b00      	cmp	r3, #0
 8024d2c:	da01      	bge.n	8024d32 <div+0x16>
 8024d2e:	3401      	adds	r4, #1
 8024d30:	1a9b      	subs	r3, r3, r2
 8024d32:	e9c0 4300 	strd	r4, r3, [r0]
 8024d36:	bd10      	pop	{r4, pc}
 8024d38:	2b00      	cmp	r3, #0
 8024d3a:	bfc4      	itt	gt
 8024d3c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8024d40:	189b      	addgt	r3, r3, r2
 8024d42:	e7f6      	b.n	8024d32 <div+0x16>

08024d44 <quorem>:
 8024d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d48:	6903      	ldr	r3, [r0, #16]
 8024d4a:	690c      	ldr	r4, [r1, #16]
 8024d4c:	42a3      	cmp	r3, r4
 8024d4e:	4607      	mov	r7, r0
 8024d50:	f2c0 8081 	blt.w	8024e56 <quorem+0x112>
 8024d54:	3c01      	subs	r4, #1
 8024d56:	f101 0814 	add.w	r8, r1, #20
 8024d5a:	f100 0514 	add.w	r5, r0, #20
 8024d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024d62:	9301      	str	r3, [sp, #4]
 8024d64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024d6c:	3301      	adds	r3, #1
 8024d6e:	429a      	cmp	r2, r3
 8024d70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024d74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024d78:	fbb2 f6f3 	udiv	r6, r2, r3
 8024d7c:	d331      	bcc.n	8024de2 <quorem+0x9e>
 8024d7e:	f04f 0e00 	mov.w	lr, #0
 8024d82:	4640      	mov	r0, r8
 8024d84:	46ac      	mov	ip, r5
 8024d86:	46f2      	mov	sl, lr
 8024d88:	f850 2b04 	ldr.w	r2, [r0], #4
 8024d8c:	b293      	uxth	r3, r2
 8024d8e:	fb06 e303 	mla	r3, r6, r3, lr
 8024d92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8024d96:	b29b      	uxth	r3, r3
 8024d98:	ebaa 0303 	sub.w	r3, sl, r3
 8024d9c:	0c12      	lsrs	r2, r2, #16
 8024d9e:	f8dc a000 	ldr.w	sl, [ip]
 8024da2:	fb06 e202 	mla	r2, r6, r2, lr
 8024da6:	fa13 f38a 	uxtah	r3, r3, sl
 8024daa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024dae:	fa1f fa82 	uxth.w	sl, r2
 8024db2:	f8dc 2000 	ldr.w	r2, [ip]
 8024db6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8024dba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024dbe:	b29b      	uxth	r3, r3
 8024dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024dc4:	4581      	cmp	r9, r0
 8024dc6:	f84c 3b04 	str.w	r3, [ip], #4
 8024dca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8024dce:	d2db      	bcs.n	8024d88 <quorem+0x44>
 8024dd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8024dd4:	b92b      	cbnz	r3, 8024de2 <quorem+0x9e>
 8024dd6:	9b01      	ldr	r3, [sp, #4]
 8024dd8:	3b04      	subs	r3, #4
 8024dda:	429d      	cmp	r5, r3
 8024ddc:	461a      	mov	r2, r3
 8024dde:	d32e      	bcc.n	8024e3e <quorem+0xfa>
 8024de0:	613c      	str	r4, [r7, #16]
 8024de2:	4638      	mov	r0, r7
 8024de4:	f001 ff66 	bl	8026cb4 <__mcmp>
 8024de8:	2800      	cmp	r0, #0
 8024dea:	db24      	blt.n	8024e36 <quorem+0xf2>
 8024dec:	3601      	adds	r6, #1
 8024dee:	4628      	mov	r0, r5
 8024df0:	f04f 0c00 	mov.w	ip, #0
 8024df4:	f858 2b04 	ldr.w	r2, [r8], #4
 8024df8:	f8d0 e000 	ldr.w	lr, [r0]
 8024dfc:	b293      	uxth	r3, r2
 8024dfe:	ebac 0303 	sub.w	r3, ip, r3
 8024e02:	0c12      	lsrs	r2, r2, #16
 8024e04:	fa13 f38e 	uxtah	r3, r3, lr
 8024e08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024e0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024e10:	b29b      	uxth	r3, r3
 8024e12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024e16:	45c1      	cmp	r9, r8
 8024e18:	f840 3b04 	str.w	r3, [r0], #4
 8024e1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024e20:	d2e8      	bcs.n	8024df4 <quorem+0xb0>
 8024e22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024e26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024e2a:	b922      	cbnz	r2, 8024e36 <quorem+0xf2>
 8024e2c:	3b04      	subs	r3, #4
 8024e2e:	429d      	cmp	r5, r3
 8024e30:	461a      	mov	r2, r3
 8024e32:	d30a      	bcc.n	8024e4a <quorem+0x106>
 8024e34:	613c      	str	r4, [r7, #16]
 8024e36:	4630      	mov	r0, r6
 8024e38:	b003      	add	sp, #12
 8024e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e3e:	6812      	ldr	r2, [r2, #0]
 8024e40:	3b04      	subs	r3, #4
 8024e42:	2a00      	cmp	r2, #0
 8024e44:	d1cc      	bne.n	8024de0 <quorem+0x9c>
 8024e46:	3c01      	subs	r4, #1
 8024e48:	e7c7      	b.n	8024dda <quorem+0x96>
 8024e4a:	6812      	ldr	r2, [r2, #0]
 8024e4c:	3b04      	subs	r3, #4
 8024e4e:	2a00      	cmp	r2, #0
 8024e50:	d1f0      	bne.n	8024e34 <quorem+0xf0>
 8024e52:	3c01      	subs	r4, #1
 8024e54:	e7eb      	b.n	8024e2e <quorem+0xea>
 8024e56:	2000      	movs	r0, #0
 8024e58:	e7ee      	b.n	8024e38 <quorem+0xf4>
 8024e5a:	0000      	movs	r0, r0
 8024e5c:	0000      	movs	r0, r0
	...

08024e60 <_dtoa_r>:
 8024e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e64:	ed2d 8b02 	vpush	{d8}
 8024e68:	ec57 6b10 	vmov	r6, r7, d0
 8024e6c:	b095      	sub	sp, #84	; 0x54
 8024e6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024e70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8024e74:	9105      	str	r1, [sp, #20]
 8024e76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8024e7a:	4604      	mov	r4, r0
 8024e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8024e7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e80:	b975      	cbnz	r5, 8024ea0 <_dtoa_r+0x40>
 8024e82:	2010      	movs	r0, #16
 8024e84:	f7fd f972 	bl	802216c <malloc>
 8024e88:	4602      	mov	r2, r0
 8024e8a:	6260      	str	r0, [r4, #36]	; 0x24
 8024e8c:	b920      	cbnz	r0, 8024e98 <_dtoa_r+0x38>
 8024e8e:	4bb2      	ldr	r3, [pc, #712]	; (8025158 <_dtoa_r+0x2f8>)
 8024e90:	21ea      	movs	r1, #234	; 0xea
 8024e92:	48b2      	ldr	r0, [pc, #712]	; (802515c <_dtoa_r+0x2fc>)
 8024e94:	f7ff ff14 	bl	8024cc0 <__assert_func>
 8024e98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024e9c:	6005      	str	r5, [r0, #0]
 8024e9e:	60c5      	str	r5, [r0, #12]
 8024ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024ea2:	6819      	ldr	r1, [r3, #0]
 8024ea4:	b151      	cbz	r1, 8024ebc <_dtoa_r+0x5c>
 8024ea6:	685a      	ldr	r2, [r3, #4]
 8024ea8:	604a      	str	r2, [r1, #4]
 8024eaa:	2301      	movs	r3, #1
 8024eac:	4093      	lsls	r3, r2
 8024eae:	608b      	str	r3, [r1, #8]
 8024eb0:	4620      	mov	r0, r4
 8024eb2:	f001 fc77 	bl	80267a4 <_Bfree>
 8024eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024eb8:	2200      	movs	r2, #0
 8024eba:	601a      	str	r2, [r3, #0]
 8024ebc:	1e3b      	subs	r3, r7, #0
 8024ebe:	bfb9      	ittee	lt
 8024ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8024ec4:	9303      	strlt	r3, [sp, #12]
 8024ec6:	2300      	movge	r3, #0
 8024ec8:	f8c8 3000 	strge.w	r3, [r8]
 8024ecc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8024ed0:	4ba3      	ldr	r3, [pc, #652]	; (8025160 <_dtoa_r+0x300>)
 8024ed2:	bfbc      	itt	lt
 8024ed4:	2201      	movlt	r2, #1
 8024ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8024eda:	ea33 0309 	bics.w	r3, r3, r9
 8024ede:	d11b      	bne.n	8024f18 <_dtoa_r+0xb8>
 8024ee0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024ee2:	f242 730f 	movw	r3, #9999	; 0x270f
 8024ee6:	6013      	str	r3, [r2, #0]
 8024ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024eec:	4333      	orrs	r3, r6
 8024eee:	f000 857a 	beq.w	80259e6 <_dtoa_r+0xb86>
 8024ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024ef4:	b963      	cbnz	r3, 8024f10 <_dtoa_r+0xb0>
 8024ef6:	4b9b      	ldr	r3, [pc, #620]	; (8025164 <_dtoa_r+0x304>)
 8024ef8:	e024      	b.n	8024f44 <_dtoa_r+0xe4>
 8024efa:	4b9b      	ldr	r3, [pc, #620]	; (8025168 <_dtoa_r+0x308>)
 8024efc:	9300      	str	r3, [sp, #0]
 8024efe:	3308      	adds	r3, #8
 8024f00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024f02:	6013      	str	r3, [r2, #0]
 8024f04:	9800      	ldr	r0, [sp, #0]
 8024f06:	b015      	add	sp, #84	; 0x54
 8024f08:	ecbd 8b02 	vpop	{d8}
 8024f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f10:	4b94      	ldr	r3, [pc, #592]	; (8025164 <_dtoa_r+0x304>)
 8024f12:	9300      	str	r3, [sp, #0]
 8024f14:	3303      	adds	r3, #3
 8024f16:	e7f3      	b.n	8024f00 <_dtoa_r+0xa0>
 8024f18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024f1c:	2200      	movs	r2, #0
 8024f1e:	ec51 0b17 	vmov	r0, r1, d7
 8024f22:	2300      	movs	r3, #0
 8024f24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8024f28:	f7db fdde 	bl	8000ae8 <__aeabi_dcmpeq>
 8024f2c:	4680      	mov	r8, r0
 8024f2e:	b158      	cbz	r0, 8024f48 <_dtoa_r+0xe8>
 8024f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024f32:	2301      	movs	r3, #1
 8024f34:	6013      	str	r3, [r2, #0]
 8024f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024f38:	2b00      	cmp	r3, #0
 8024f3a:	f000 8551 	beq.w	80259e0 <_dtoa_r+0xb80>
 8024f3e:	488b      	ldr	r0, [pc, #556]	; (802516c <_dtoa_r+0x30c>)
 8024f40:	6018      	str	r0, [r3, #0]
 8024f42:	1e43      	subs	r3, r0, #1
 8024f44:	9300      	str	r3, [sp, #0]
 8024f46:	e7dd      	b.n	8024f04 <_dtoa_r+0xa4>
 8024f48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8024f4c:	aa12      	add	r2, sp, #72	; 0x48
 8024f4e:	a913      	add	r1, sp, #76	; 0x4c
 8024f50:	4620      	mov	r0, r4
 8024f52:	f001 ffcf 	bl	8026ef4 <__d2b>
 8024f56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024f5a:	4683      	mov	fp, r0
 8024f5c:	2d00      	cmp	r5, #0
 8024f5e:	d07c      	beq.n	802505a <_dtoa_r+0x1fa>
 8024f60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8024f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8024f6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8024f6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8024f72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8024f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8024f7a:	4b7d      	ldr	r3, [pc, #500]	; (8025170 <_dtoa_r+0x310>)
 8024f7c:	2200      	movs	r2, #0
 8024f7e:	4630      	mov	r0, r6
 8024f80:	4639      	mov	r1, r7
 8024f82:	f7db f991 	bl	80002a8 <__aeabi_dsub>
 8024f86:	a36e      	add	r3, pc, #440	; (adr r3, 8025140 <_dtoa_r+0x2e0>)
 8024f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f8c:	f7db fb44 	bl	8000618 <__aeabi_dmul>
 8024f90:	a36d      	add	r3, pc, #436	; (adr r3, 8025148 <_dtoa_r+0x2e8>)
 8024f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f96:	f7db f989 	bl	80002ac <__adddf3>
 8024f9a:	4606      	mov	r6, r0
 8024f9c:	4628      	mov	r0, r5
 8024f9e:	460f      	mov	r7, r1
 8024fa0:	f7db fad0 	bl	8000544 <__aeabi_i2d>
 8024fa4:	a36a      	add	r3, pc, #424	; (adr r3, 8025150 <_dtoa_r+0x2f0>)
 8024fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024faa:	f7db fb35 	bl	8000618 <__aeabi_dmul>
 8024fae:	4602      	mov	r2, r0
 8024fb0:	460b      	mov	r3, r1
 8024fb2:	4630      	mov	r0, r6
 8024fb4:	4639      	mov	r1, r7
 8024fb6:	f7db f979 	bl	80002ac <__adddf3>
 8024fba:	4606      	mov	r6, r0
 8024fbc:	460f      	mov	r7, r1
 8024fbe:	f7db fddb 	bl	8000b78 <__aeabi_d2iz>
 8024fc2:	2200      	movs	r2, #0
 8024fc4:	4682      	mov	sl, r0
 8024fc6:	2300      	movs	r3, #0
 8024fc8:	4630      	mov	r0, r6
 8024fca:	4639      	mov	r1, r7
 8024fcc:	f7db fd96 	bl	8000afc <__aeabi_dcmplt>
 8024fd0:	b148      	cbz	r0, 8024fe6 <_dtoa_r+0x186>
 8024fd2:	4650      	mov	r0, sl
 8024fd4:	f7db fab6 	bl	8000544 <__aeabi_i2d>
 8024fd8:	4632      	mov	r2, r6
 8024fda:	463b      	mov	r3, r7
 8024fdc:	f7db fd84 	bl	8000ae8 <__aeabi_dcmpeq>
 8024fe0:	b908      	cbnz	r0, 8024fe6 <_dtoa_r+0x186>
 8024fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024fe6:	f1ba 0f16 	cmp.w	sl, #22
 8024fea:	d854      	bhi.n	8025096 <_dtoa_r+0x236>
 8024fec:	4b61      	ldr	r3, [pc, #388]	; (8025174 <_dtoa_r+0x314>)
 8024fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8024ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ff6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8024ffa:	f7db fd7f 	bl	8000afc <__aeabi_dcmplt>
 8024ffe:	2800      	cmp	r0, #0
 8025000:	d04b      	beq.n	802509a <_dtoa_r+0x23a>
 8025002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025006:	2300      	movs	r3, #0
 8025008:	930e      	str	r3, [sp, #56]	; 0x38
 802500a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802500c:	1b5d      	subs	r5, r3, r5
 802500e:	1e6b      	subs	r3, r5, #1
 8025010:	9304      	str	r3, [sp, #16]
 8025012:	bf43      	ittte	mi
 8025014:	2300      	movmi	r3, #0
 8025016:	f1c5 0801 	rsbmi	r8, r5, #1
 802501a:	9304      	strmi	r3, [sp, #16]
 802501c:	f04f 0800 	movpl.w	r8, #0
 8025020:	f1ba 0f00 	cmp.w	sl, #0
 8025024:	db3b      	blt.n	802509e <_dtoa_r+0x23e>
 8025026:	9b04      	ldr	r3, [sp, #16]
 8025028:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802502c:	4453      	add	r3, sl
 802502e:	9304      	str	r3, [sp, #16]
 8025030:	2300      	movs	r3, #0
 8025032:	9306      	str	r3, [sp, #24]
 8025034:	9b05      	ldr	r3, [sp, #20]
 8025036:	2b09      	cmp	r3, #9
 8025038:	d869      	bhi.n	802510e <_dtoa_r+0x2ae>
 802503a:	2b05      	cmp	r3, #5
 802503c:	bfc4      	itt	gt
 802503e:	3b04      	subgt	r3, #4
 8025040:	9305      	strgt	r3, [sp, #20]
 8025042:	9b05      	ldr	r3, [sp, #20]
 8025044:	f1a3 0302 	sub.w	r3, r3, #2
 8025048:	bfcc      	ite	gt
 802504a:	2500      	movgt	r5, #0
 802504c:	2501      	movle	r5, #1
 802504e:	2b03      	cmp	r3, #3
 8025050:	d869      	bhi.n	8025126 <_dtoa_r+0x2c6>
 8025052:	e8df f003 	tbb	[pc, r3]
 8025056:	4e2c      	.short	0x4e2c
 8025058:	5a4c      	.short	0x5a4c
 802505a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 802505e:	441d      	add	r5, r3
 8025060:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8025064:	2b20      	cmp	r3, #32
 8025066:	bfc1      	itttt	gt
 8025068:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802506c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8025070:	fa09 f303 	lslgt.w	r3, r9, r3
 8025074:	fa26 f000 	lsrgt.w	r0, r6, r0
 8025078:	bfda      	itte	le
 802507a:	f1c3 0320 	rsble	r3, r3, #32
 802507e:	fa06 f003 	lslle.w	r0, r6, r3
 8025082:	4318      	orrgt	r0, r3
 8025084:	f7db fa4e 	bl	8000524 <__aeabi_ui2d>
 8025088:	2301      	movs	r3, #1
 802508a:	4606      	mov	r6, r0
 802508c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8025090:	3d01      	subs	r5, #1
 8025092:	9310      	str	r3, [sp, #64]	; 0x40
 8025094:	e771      	b.n	8024f7a <_dtoa_r+0x11a>
 8025096:	2301      	movs	r3, #1
 8025098:	e7b6      	b.n	8025008 <_dtoa_r+0x1a8>
 802509a:	900e      	str	r0, [sp, #56]	; 0x38
 802509c:	e7b5      	b.n	802500a <_dtoa_r+0x1aa>
 802509e:	f1ca 0300 	rsb	r3, sl, #0
 80250a2:	9306      	str	r3, [sp, #24]
 80250a4:	2300      	movs	r3, #0
 80250a6:	eba8 080a 	sub.w	r8, r8, sl
 80250aa:	930d      	str	r3, [sp, #52]	; 0x34
 80250ac:	e7c2      	b.n	8025034 <_dtoa_r+0x1d4>
 80250ae:	2300      	movs	r3, #0
 80250b0:	9308      	str	r3, [sp, #32]
 80250b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250b4:	2b00      	cmp	r3, #0
 80250b6:	dc39      	bgt.n	802512c <_dtoa_r+0x2cc>
 80250b8:	f04f 0901 	mov.w	r9, #1
 80250bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80250c0:	464b      	mov	r3, r9
 80250c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80250c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80250c8:	2200      	movs	r2, #0
 80250ca:	6042      	str	r2, [r0, #4]
 80250cc:	2204      	movs	r2, #4
 80250ce:	f102 0614 	add.w	r6, r2, #20
 80250d2:	429e      	cmp	r6, r3
 80250d4:	6841      	ldr	r1, [r0, #4]
 80250d6:	d92f      	bls.n	8025138 <_dtoa_r+0x2d8>
 80250d8:	4620      	mov	r0, r4
 80250da:	f001 fb23 	bl	8026724 <_Balloc>
 80250de:	9000      	str	r0, [sp, #0]
 80250e0:	2800      	cmp	r0, #0
 80250e2:	d14b      	bne.n	802517c <_dtoa_r+0x31c>
 80250e4:	4b24      	ldr	r3, [pc, #144]	; (8025178 <_dtoa_r+0x318>)
 80250e6:	4602      	mov	r2, r0
 80250e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80250ec:	e6d1      	b.n	8024e92 <_dtoa_r+0x32>
 80250ee:	2301      	movs	r3, #1
 80250f0:	e7de      	b.n	80250b0 <_dtoa_r+0x250>
 80250f2:	2300      	movs	r3, #0
 80250f4:	9308      	str	r3, [sp, #32]
 80250f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80250f8:	eb0a 0903 	add.w	r9, sl, r3
 80250fc:	f109 0301 	add.w	r3, r9, #1
 8025100:	2b01      	cmp	r3, #1
 8025102:	9301      	str	r3, [sp, #4]
 8025104:	bfb8      	it	lt
 8025106:	2301      	movlt	r3, #1
 8025108:	e7dd      	b.n	80250c6 <_dtoa_r+0x266>
 802510a:	2301      	movs	r3, #1
 802510c:	e7f2      	b.n	80250f4 <_dtoa_r+0x294>
 802510e:	2501      	movs	r5, #1
 8025110:	2300      	movs	r3, #0
 8025112:	9305      	str	r3, [sp, #20]
 8025114:	9508      	str	r5, [sp, #32]
 8025116:	f04f 39ff 	mov.w	r9, #4294967295
 802511a:	2200      	movs	r2, #0
 802511c:	f8cd 9004 	str.w	r9, [sp, #4]
 8025120:	2312      	movs	r3, #18
 8025122:	9209      	str	r2, [sp, #36]	; 0x24
 8025124:	e7cf      	b.n	80250c6 <_dtoa_r+0x266>
 8025126:	2301      	movs	r3, #1
 8025128:	9308      	str	r3, [sp, #32]
 802512a:	e7f4      	b.n	8025116 <_dtoa_r+0x2b6>
 802512c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8025130:	f8cd 9004 	str.w	r9, [sp, #4]
 8025134:	464b      	mov	r3, r9
 8025136:	e7c6      	b.n	80250c6 <_dtoa_r+0x266>
 8025138:	3101      	adds	r1, #1
 802513a:	6041      	str	r1, [r0, #4]
 802513c:	0052      	lsls	r2, r2, #1
 802513e:	e7c6      	b.n	80250ce <_dtoa_r+0x26e>
 8025140:	636f4361 	.word	0x636f4361
 8025144:	3fd287a7 	.word	0x3fd287a7
 8025148:	8b60c8b3 	.word	0x8b60c8b3
 802514c:	3fc68a28 	.word	0x3fc68a28
 8025150:	509f79fb 	.word	0x509f79fb
 8025154:	3fd34413 	.word	0x3fd34413
 8025158:	080335c8 	.word	0x080335c8
 802515c:	0803387e 	.word	0x0803387e
 8025160:	7ff00000 	.word	0x7ff00000
 8025164:	0803387a 	.word	0x0803387a
 8025168:	08033871 	.word	0x08033871
 802516c:	080324d4 	.word	0x080324d4
 8025170:	3ff80000 	.word	0x3ff80000
 8025174:	08033ab8 	.word	0x08033ab8
 8025178:	080338dd 	.word	0x080338dd
 802517c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802517e:	9a00      	ldr	r2, [sp, #0]
 8025180:	601a      	str	r2, [r3, #0]
 8025182:	9b01      	ldr	r3, [sp, #4]
 8025184:	2b0e      	cmp	r3, #14
 8025186:	f200 80ad 	bhi.w	80252e4 <_dtoa_r+0x484>
 802518a:	2d00      	cmp	r5, #0
 802518c:	f000 80aa 	beq.w	80252e4 <_dtoa_r+0x484>
 8025190:	f1ba 0f00 	cmp.w	sl, #0
 8025194:	dd36      	ble.n	8025204 <_dtoa_r+0x3a4>
 8025196:	4ac3      	ldr	r2, [pc, #780]	; (80254a4 <_dtoa_r+0x644>)
 8025198:	f00a 030f 	and.w	r3, sl, #15
 802519c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80251a0:	ed93 7b00 	vldr	d7, [r3]
 80251a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80251a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80251ac:	eeb0 8a47 	vmov.f32	s16, s14
 80251b0:	eef0 8a67 	vmov.f32	s17, s15
 80251b4:	d016      	beq.n	80251e4 <_dtoa_r+0x384>
 80251b6:	4bbc      	ldr	r3, [pc, #752]	; (80254a8 <_dtoa_r+0x648>)
 80251b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80251bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80251c0:	f7db fb54 	bl	800086c <__aeabi_ddiv>
 80251c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80251c8:	f007 070f 	and.w	r7, r7, #15
 80251cc:	2503      	movs	r5, #3
 80251ce:	4eb6      	ldr	r6, [pc, #728]	; (80254a8 <_dtoa_r+0x648>)
 80251d0:	b957      	cbnz	r7, 80251e8 <_dtoa_r+0x388>
 80251d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80251d6:	ec53 2b18 	vmov	r2, r3, d8
 80251da:	f7db fb47 	bl	800086c <__aeabi_ddiv>
 80251de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80251e2:	e029      	b.n	8025238 <_dtoa_r+0x3d8>
 80251e4:	2502      	movs	r5, #2
 80251e6:	e7f2      	b.n	80251ce <_dtoa_r+0x36e>
 80251e8:	07f9      	lsls	r1, r7, #31
 80251ea:	d508      	bpl.n	80251fe <_dtoa_r+0x39e>
 80251ec:	ec51 0b18 	vmov	r0, r1, d8
 80251f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80251f4:	f7db fa10 	bl	8000618 <__aeabi_dmul>
 80251f8:	ec41 0b18 	vmov	d8, r0, r1
 80251fc:	3501      	adds	r5, #1
 80251fe:	107f      	asrs	r7, r7, #1
 8025200:	3608      	adds	r6, #8
 8025202:	e7e5      	b.n	80251d0 <_dtoa_r+0x370>
 8025204:	f000 80a6 	beq.w	8025354 <_dtoa_r+0x4f4>
 8025208:	f1ca 0600 	rsb	r6, sl, #0
 802520c:	4ba5      	ldr	r3, [pc, #660]	; (80254a4 <_dtoa_r+0x644>)
 802520e:	4fa6      	ldr	r7, [pc, #664]	; (80254a8 <_dtoa_r+0x648>)
 8025210:	f006 020f 	and.w	r2, r6, #15
 8025214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802521c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8025220:	f7db f9fa 	bl	8000618 <__aeabi_dmul>
 8025224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025228:	1136      	asrs	r6, r6, #4
 802522a:	2300      	movs	r3, #0
 802522c:	2502      	movs	r5, #2
 802522e:	2e00      	cmp	r6, #0
 8025230:	f040 8085 	bne.w	802533e <_dtoa_r+0x4de>
 8025234:	2b00      	cmp	r3, #0
 8025236:	d1d2      	bne.n	80251de <_dtoa_r+0x37e>
 8025238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802523a:	2b00      	cmp	r3, #0
 802523c:	f000 808c 	beq.w	8025358 <_dtoa_r+0x4f8>
 8025240:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025244:	4b99      	ldr	r3, [pc, #612]	; (80254ac <_dtoa_r+0x64c>)
 8025246:	2200      	movs	r2, #0
 8025248:	4630      	mov	r0, r6
 802524a:	4639      	mov	r1, r7
 802524c:	f7db fc56 	bl	8000afc <__aeabi_dcmplt>
 8025250:	2800      	cmp	r0, #0
 8025252:	f000 8081 	beq.w	8025358 <_dtoa_r+0x4f8>
 8025256:	9b01      	ldr	r3, [sp, #4]
 8025258:	2b00      	cmp	r3, #0
 802525a:	d07d      	beq.n	8025358 <_dtoa_r+0x4f8>
 802525c:	f1b9 0f00 	cmp.w	r9, #0
 8025260:	dd3c      	ble.n	80252dc <_dtoa_r+0x47c>
 8025262:	f10a 33ff 	add.w	r3, sl, #4294967295
 8025266:	9307      	str	r3, [sp, #28]
 8025268:	2200      	movs	r2, #0
 802526a:	4b91      	ldr	r3, [pc, #580]	; (80254b0 <_dtoa_r+0x650>)
 802526c:	4630      	mov	r0, r6
 802526e:	4639      	mov	r1, r7
 8025270:	f7db f9d2 	bl	8000618 <__aeabi_dmul>
 8025274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025278:	3501      	adds	r5, #1
 802527a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 802527e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025282:	4628      	mov	r0, r5
 8025284:	f7db f95e 	bl	8000544 <__aeabi_i2d>
 8025288:	4632      	mov	r2, r6
 802528a:	463b      	mov	r3, r7
 802528c:	f7db f9c4 	bl	8000618 <__aeabi_dmul>
 8025290:	4b88      	ldr	r3, [pc, #544]	; (80254b4 <_dtoa_r+0x654>)
 8025292:	2200      	movs	r2, #0
 8025294:	f7db f80a 	bl	80002ac <__adddf3>
 8025298:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802529c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80252a0:	9303      	str	r3, [sp, #12]
 80252a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80252a4:	2b00      	cmp	r3, #0
 80252a6:	d15c      	bne.n	8025362 <_dtoa_r+0x502>
 80252a8:	4b83      	ldr	r3, [pc, #524]	; (80254b8 <_dtoa_r+0x658>)
 80252aa:	2200      	movs	r2, #0
 80252ac:	4630      	mov	r0, r6
 80252ae:	4639      	mov	r1, r7
 80252b0:	f7da fffa 	bl	80002a8 <__aeabi_dsub>
 80252b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80252b8:	4606      	mov	r6, r0
 80252ba:	460f      	mov	r7, r1
 80252bc:	f7db fc3c 	bl	8000b38 <__aeabi_dcmpgt>
 80252c0:	2800      	cmp	r0, #0
 80252c2:	f040 8296 	bne.w	80257f2 <_dtoa_r+0x992>
 80252c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80252ca:	4630      	mov	r0, r6
 80252cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80252d0:	4639      	mov	r1, r7
 80252d2:	f7db fc13 	bl	8000afc <__aeabi_dcmplt>
 80252d6:	2800      	cmp	r0, #0
 80252d8:	f040 8288 	bne.w	80257ec <_dtoa_r+0x98c>
 80252dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80252e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80252e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	f2c0 8158 	blt.w	802559c <_dtoa_r+0x73c>
 80252ec:	f1ba 0f0e 	cmp.w	sl, #14
 80252f0:	f300 8154 	bgt.w	802559c <_dtoa_r+0x73c>
 80252f4:	4b6b      	ldr	r3, [pc, #428]	; (80254a4 <_dtoa_r+0x644>)
 80252f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80252fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80252fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025300:	2b00      	cmp	r3, #0
 8025302:	f280 80e3 	bge.w	80254cc <_dtoa_r+0x66c>
 8025306:	9b01      	ldr	r3, [sp, #4]
 8025308:	2b00      	cmp	r3, #0
 802530a:	f300 80df 	bgt.w	80254cc <_dtoa_r+0x66c>
 802530e:	f040 826d 	bne.w	80257ec <_dtoa_r+0x98c>
 8025312:	4b69      	ldr	r3, [pc, #420]	; (80254b8 <_dtoa_r+0x658>)
 8025314:	2200      	movs	r2, #0
 8025316:	4640      	mov	r0, r8
 8025318:	4649      	mov	r1, r9
 802531a:	f7db f97d 	bl	8000618 <__aeabi_dmul>
 802531e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025322:	f7db fbff 	bl	8000b24 <__aeabi_dcmpge>
 8025326:	9e01      	ldr	r6, [sp, #4]
 8025328:	4637      	mov	r7, r6
 802532a:	2800      	cmp	r0, #0
 802532c:	f040 8243 	bne.w	80257b6 <_dtoa_r+0x956>
 8025330:	9d00      	ldr	r5, [sp, #0]
 8025332:	2331      	movs	r3, #49	; 0x31
 8025334:	f805 3b01 	strb.w	r3, [r5], #1
 8025338:	f10a 0a01 	add.w	sl, sl, #1
 802533c:	e23f      	b.n	80257be <_dtoa_r+0x95e>
 802533e:	07f2      	lsls	r2, r6, #31
 8025340:	d505      	bpl.n	802534e <_dtoa_r+0x4ee>
 8025342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025346:	f7db f967 	bl	8000618 <__aeabi_dmul>
 802534a:	3501      	adds	r5, #1
 802534c:	2301      	movs	r3, #1
 802534e:	1076      	asrs	r6, r6, #1
 8025350:	3708      	adds	r7, #8
 8025352:	e76c      	b.n	802522e <_dtoa_r+0x3ce>
 8025354:	2502      	movs	r5, #2
 8025356:	e76f      	b.n	8025238 <_dtoa_r+0x3d8>
 8025358:	9b01      	ldr	r3, [sp, #4]
 802535a:	f8cd a01c 	str.w	sl, [sp, #28]
 802535e:	930c      	str	r3, [sp, #48]	; 0x30
 8025360:	e78d      	b.n	802527e <_dtoa_r+0x41e>
 8025362:	9900      	ldr	r1, [sp, #0]
 8025364:	980c      	ldr	r0, [sp, #48]	; 0x30
 8025366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025368:	4b4e      	ldr	r3, [pc, #312]	; (80254a4 <_dtoa_r+0x644>)
 802536a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802536e:	4401      	add	r1, r0
 8025370:	9102      	str	r1, [sp, #8]
 8025372:	9908      	ldr	r1, [sp, #32]
 8025374:	eeb0 8a47 	vmov.f32	s16, s14
 8025378:	eef0 8a67 	vmov.f32	s17, s15
 802537c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025380:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025384:	2900      	cmp	r1, #0
 8025386:	d045      	beq.n	8025414 <_dtoa_r+0x5b4>
 8025388:	494c      	ldr	r1, [pc, #304]	; (80254bc <_dtoa_r+0x65c>)
 802538a:	2000      	movs	r0, #0
 802538c:	f7db fa6e 	bl	800086c <__aeabi_ddiv>
 8025390:	ec53 2b18 	vmov	r2, r3, d8
 8025394:	f7da ff88 	bl	80002a8 <__aeabi_dsub>
 8025398:	9d00      	ldr	r5, [sp, #0]
 802539a:	ec41 0b18 	vmov	d8, r0, r1
 802539e:	4639      	mov	r1, r7
 80253a0:	4630      	mov	r0, r6
 80253a2:	f7db fbe9 	bl	8000b78 <__aeabi_d2iz>
 80253a6:	900c      	str	r0, [sp, #48]	; 0x30
 80253a8:	f7db f8cc 	bl	8000544 <__aeabi_i2d>
 80253ac:	4602      	mov	r2, r0
 80253ae:	460b      	mov	r3, r1
 80253b0:	4630      	mov	r0, r6
 80253b2:	4639      	mov	r1, r7
 80253b4:	f7da ff78 	bl	80002a8 <__aeabi_dsub>
 80253b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80253ba:	3330      	adds	r3, #48	; 0x30
 80253bc:	f805 3b01 	strb.w	r3, [r5], #1
 80253c0:	ec53 2b18 	vmov	r2, r3, d8
 80253c4:	4606      	mov	r6, r0
 80253c6:	460f      	mov	r7, r1
 80253c8:	f7db fb98 	bl	8000afc <__aeabi_dcmplt>
 80253cc:	2800      	cmp	r0, #0
 80253ce:	d165      	bne.n	802549c <_dtoa_r+0x63c>
 80253d0:	4632      	mov	r2, r6
 80253d2:	463b      	mov	r3, r7
 80253d4:	4935      	ldr	r1, [pc, #212]	; (80254ac <_dtoa_r+0x64c>)
 80253d6:	2000      	movs	r0, #0
 80253d8:	f7da ff66 	bl	80002a8 <__aeabi_dsub>
 80253dc:	ec53 2b18 	vmov	r2, r3, d8
 80253e0:	f7db fb8c 	bl	8000afc <__aeabi_dcmplt>
 80253e4:	2800      	cmp	r0, #0
 80253e6:	f040 80b9 	bne.w	802555c <_dtoa_r+0x6fc>
 80253ea:	9b02      	ldr	r3, [sp, #8]
 80253ec:	429d      	cmp	r5, r3
 80253ee:	f43f af75 	beq.w	80252dc <_dtoa_r+0x47c>
 80253f2:	4b2f      	ldr	r3, [pc, #188]	; (80254b0 <_dtoa_r+0x650>)
 80253f4:	ec51 0b18 	vmov	r0, r1, d8
 80253f8:	2200      	movs	r2, #0
 80253fa:	f7db f90d 	bl	8000618 <__aeabi_dmul>
 80253fe:	4b2c      	ldr	r3, [pc, #176]	; (80254b0 <_dtoa_r+0x650>)
 8025400:	ec41 0b18 	vmov	d8, r0, r1
 8025404:	2200      	movs	r2, #0
 8025406:	4630      	mov	r0, r6
 8025408:	4639      	mov	r1, r7
 802540a:	f7db f905 	bl	8000618 <__aeabi_dmul>
 802540e:	4606      	mov	r6, r0
 8025410:	460f      	mov	r7, r1
 8025412:	e7c4      	b.n	802539e <_dtoa_r+0x53e>
 8025414:	ec51 0b17 	vmov	r0, r1, d7
 8025418:	f7db f8fe 	bl	8000618 <__aeabi_dmul>
 802541c:	9b02      	ldr	r3, [sp, #8]
 802541e:	9d00      	ldr	r5, [sp, #0]
 8025420:	930c      	str	r3, [sp, #48]	; 0x30
 8025422:	ec41 0b18 	vmov	d8, r0, r1
 8025426:	4639      	mov	r1, r7
 8025428:	4630      	mov	r0, r6
 802542a:	f7db fba5 	bl	8000b78 <__aeabi_d2iz>
 802542e:	9011      	str	r0, [sp, #68]	; 0x44
 8025430:	f7db f888 	bl	8000544 <__aeabi_i2d>
 8025434:	4602      	mov	r2, r0
 8025436:	460b      	mov	r3, r1
 8025438:	4630      	mov	r0, r6
 802543a:	4639      	mov	r1, r7
 802543c:	f7da ff34 	bl	80002a8 <__aeabi_dsub>
 8025440:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025442:	3330      	adds	r3, #48	; 0x30
 8025444:	f805 3b01 	strb.w	r3, [r5], #1
 8025448:	9b02      	ldr	r3, [sp, #8]
 802544a:	429d      	cmp	r5, r3
 802544c:	4606      	mov	r6, r0
 802544e:	460f      	mov	r7, r1
 8025450:	f04f 0200 	mov.w	r2, #0
 8025454:	d134      	bne.n	80254c0 <_dtoa_r+0x660>
 8025456:	4b19      	ldr	r3, [pc, #100]	; (80254bc <_dtoa_r+0x65c>)
 8025458:	ec51 0b18 	vmov	r0, r1, d8
 802545c:	f7da ff26 	bl	80002ac <__adddf3>
 8025460:	4602      	mov	r2, r0
 8025462:	460b      	mov	r3, r1
 8025464:	4630      	mov	r0, r6
 8025466:	4639      	mov	r1, r7
 8025468:	f7db fb66 	bl	8000b38 <__aeabi_dcmpgt>
 802546c:	2800      	cmp	r0, #0
 802546e:	d175      	bne.n	802555c <_dtoa_r+0x6fc>
 8025470:	ec53 2b18 	vmov	r2, r3, d8
 8025474:	4911      	ldr	r1, [pc, #68]	; (80254bc <_dtoa_r+0x65c>)
 8025476:	2000      	movs	r0, #0
 8025478:	f7da ff16 	bl	80002a8 <__aeabi_dsub>
 802547c:	4602      	mov	r2, r0
 802547e:	460b      	mov	r3, r1
 8025480:	4630      	mov	r0, r6
 8025482:	4639      	mov	r1, r7
 8025484:	f7db fb3a 	bl	8000afc <__aeabi_dcmplt>
 8025488:	2800      	cmp	r0, #0
 802548a:	f43f af27 	beq.w	80252dc <_dtoa_r+0x47c>
 802548e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025490:	1e6b      	subs	r3, r5, #1
 8025492:	930c      	str	r3, [sp, #48]	; 0x30
 8025494:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025498:	2b30      	cmp	r3, #48	; 0x30
 802549a:	d0f8      	beq.n	802548e <_dtoa_r+0x62e>
 802549c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80254a0:	e04a      	b.n	8025538 <_dtoa_r+0x6d8>
 80254a2:	bf00      	nop
 80254a4:	08033ab8 	.word	0x08033ab8
 80254a8:	08033a90 	.word	0x08033a90
 80254ac:	3ff00000 	.word	0x3ff00000
 80254b0:	40240000 	.word	0x40240000
 80254b4:	401c0000 	.word	0x401c0000
 80254b8:	40140000 	.word	0x40140000
 80254bc:	3fe00000 	.word	0x3fe00000
 80254c0:	4baf      	ldr	r3, [pc, #700]	; (8025780 <_dtoa_r+0x920>)
 80254c2:	f7db f8a9 	bl	8000618 <__aeabi_dmul>
 80254c6:	4606      	mov	r6, r0
 80254c8:	460f      	mov	r7, r1
 80254ca:	e7ac      	b.n	8025426 <_dtoa_r+0x5c6>
 80254cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80254d0:	9d00      	ldr	r5, [sp, #0]
 80254d2:	4642      	mov	r2, r8
 80254d4:	464b      	mov	r3, r9
 80254d6:	4630      	mov	r0, r6
 80254d8:	4639      	mov	r1, r7
 80254da:	f7db f9c7 	bl	800086c <__aeabi_ddiv>
 80254de:	f7db fb4b 	bl	8000b78 <__aeabi_d2iz>
 80254e2:	9002      	str	r0, [sp, #8]
 80254e4:	f7db f82e 	bl	8000544 <__aeabi_i2d>
 80254e8:	4642      	mov	r2, r8
 80254ea:	464b      	mov	r3, r9
 80254ec:	f7db f894 	bl	8000618 <__aeabi_dmul>
 80254f0:	4602      	mov	r2, r0
 80254f2:	460b      	mov	r3, r1
 80254f4:	4630      	mov	r0, r6
 80254f6:	4639      	mov	r1, r7
 80254f8:	f7da fed6 	bl	80002a8 <__aeabi_dsub>
 80254fc:	9e02      	ldr	r6, [sp, #8]
 80254fe:	9f01      	ldr	r7, [sp, #4]
 8025500:	3630      	adds	r6, #48	; 0x30
 8025502:	f805 6b01 	strb.w	r6, [r5], #1
 8025506:	9e00      	ldr	r6, [sp, #0]
 8025508:	1bae      	subs	r6, r5, r6
 802550a:	42b7      	cmp	r7, r6
 802550c:	4602      	mov	r2, r0
 802550e:	460b      	mov	r3, r1
 8025510:	d137      	bne.n	8025582 <_dtoa_r+0x722>
 8025512:	f7da fecb 	bl	80002ac <__adddf3>
 8025516:	4642      	mov	r2, r8
 8025518:	464b      	mov	r3, r9
 802551a:	4606      	mov	r6, r0
 802551c:	460f      	mov	r7, r1
 802551e:	f7db fb0b 	bl	8000b38 <__aeabi_dcmpgt>
 8025522:	b9c8      	cbnz	r0, 8025558 <_dtoa_r+0x6f8>
 8025524:	4642      	mov	r2, r8
 8025526:	464b      	mov	r3, r9
 8025528:	4630      	mov	r0, r6
 802552a:	4639      	mov	r1, r7
 802552c:	f7db fadc 	bl	8000ae8 <__aeabi_dcmpeq>
 8025530:	b110      	cbz	r0, 8025538 <_dtoa_r+0x6d8>
 8025532:	9b02      	ldr	r3, [sp, #8]
 8025534:	07d9      	lsls	r1, r3, #31
 8025536:	d40f      	bmi.n	8025558 <_dtoa_r+0x6f8>
 8025538:	4620      	mov	r0, r4
 802553a:	4659      	mov	r1, fp
 802553c:	f001 f932 	bl	80267a4 <_Bfree>
 8025540:	2300      	movs	r3, #0
 8025542:	702b      	strb	r3, [r5, #0]
 8025544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025546:	f10a 0001 	add.w	r0, sl, #1
 802554a:	6018      	str	r0, [r3, #0]
 802554c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802554e:	2b00      	cmp	r3, #0
 8025550:	f43f acd8 	beq.w	8024f04 <_dtoa_r+0xa4>
 8025554:	601d      	str	r5, [r3, #0]
 8025556:	e4d5      	b.n	8024f04 <_dtoa_r+0xa4>
 8025558:	f8cd a01c 	str.w	sl, [sp, #28]
 802555c:	462b      	mov	r3, r5
 802555e:	461d      	mov	r5, r3
 8025560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025564:	2a39      	cmp	r2, #57	; 0x39
 8025566:	d108      	bne.n	802557a <_dtoa_r+0x71a>
 8025568:	9a00      	ldr	r2, [sp, #0]
 802556a:	429a      	cmp	r2, r3
 802556c:	d1f7      	bne.n	802555e <_dtoa_r+0x6fe>
 802556e:	9a07      	ldr	r2, [sp, #28]
 8025570:	9900      	ldr	r1, [sp, #0]
 8025572:	3201      	adds	r2, #1
 8025574:	9207      	str	r2, [sp, #28]
 8025576:	2230      	movs	r2, #48	; 0x30
 8025578:	700a      	strb	r2, [r1, #0]
 802557a:	781a      	ldrb	r2, [r3, #0]
 802557c:	3201      	adds	r2, #1
 802557e:	701a      	strb	r2, [r3, #0]
 8025580:	e78c      	b.n	802549c <_dtoa_r+0x63c>
 8025582:	4b7f      	ldr	r3, [pc, #508]	; (8025780 <_dtoa_r+0x920>)
 8025584:	2200      	movs	r2, #0
 8025586:	f7db f847 	bl	8000618 <__aeabi_dmul>
 802558a:	2200      	movs	r2, #0
 802558c:	2300      	movs	r3, #0
 802558e:	4606      	mov	r6, r0
 8025590:	460f      	mov	r7, r1
 8025592:	f7db faa9 	bl	8000ae8 <__aeabi_dcmpeq>
 8025596:	2800      	cmp	r0, #0
 8025598:	d09b      	beq.n	80254d2 <_dtoa_r+0x672>
 802559a:	e7cd      	b.n	8025538 <_dtoa_r+0x6d8>
 802559c:	9a08      	ldr	r2, [sp, #32]
 802559e:	2a00      	cmp	r2, #0
 80255a0:	f000 80c4 	beq.w	802572c <_dtoa_r+0x8cc>
 80255a4:	9a05      	ldr	r2, [sp, #20]
 80255a6:	2a01      	cmp	r2, #1
 80255a8:	f300 80a8 	bgt.w	80256fc <_dtoa_r+0x89c>
 80255ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80255ae:	2a00      	cmp	r2, #0
 80255b0:	f000 80a0 	beq.w	80256f4 <_dtoa_r+0x894>
 80255b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80255b8:	9e06      	ldr	r6, [sp, #24]
 80255ba:	4645      	mov	r5, r8
 80255bc:	9a04      	ldr	r2, [sp, #16]
 80255be:	2101      	movs	r1, #1
 80255c0:	441a      	add	r2, r3
 80255c2:	4620      	mov	r0, r4
 80255c4:	4498      	add	r8, r3
 80255c6:	9204      	str	r2, [sp, #16]
 80255c8:	f001 f9f2 	bl	80269b0 <__i2b>
 80255cc:	4607      	mov	r7, r0
 80255ce:	2d00      	cmp	r5, #0
 80255d0:	dd0b      	ble.n	80255ea <_dtoa_r+0x78a>
 80255d2:	9b04      	ldr	r3, [sp, #16]
 80255d4:	2b00      	cmp	r3, #0
 80255d6:	dd08      	ble.n	80255ea <_dtoa_r+0x78a>
 80255d8:	42ab      	cmp	r3, r5
 80255da:	9a04      	ldr	r2, [sp, #16]
 80255dc:	bfa8      	it	ge
 80255de:	462b      	movge	r3, r5
 80255e0:	eba8 0803 	sub.w	r8, r8, r3
 80255e4:	1aed      	subs	r5, r5, r3
 80255e6:	1ad3      	subs	r3, r2, r3
 80255e8:	9304      	str	r3, [sp, #16]
 80255ea:	9b06      	ldr	r3, [sp, #24]
 80255ec:	b1fb      	cbz	r3, 802562e <_dtoa_r+0x7ce>
 80255ee:	9b08      	ldr	r3, [sp, #32]
 80255f0:	2b00      	cmp	r3, #0
 80255f2:	f000 809f 	beq.w	8025734 <_dtoa_r+0x8d4>
 80255f6:	2e00      	cmp	r6, #0
 80255f8:	dd11      	ble.n	802561e <_dtoa_r+0x7be>
 80255fa:	4639      	mov	r1, r7
 80255fc:	4632      	mov	r2, r6
 80255fe:	4620      	mov	r0, r4
 8025600:	f001 fa92 	bl	8026b28 <__pow5mult>
 8025604:	465a      	mov	r2, fp
 8025606:	4601      	mov	r1, r0
 8025608:	4607      	mov	r7, r0
 802560a:	4620      	mov	r0, r4
 802560c:	f001 f9e6 	bl	80269dc <__multiply>
 8025610:	4659      	mov	r1, fp
 8025612:	9007      	str	r0, [sp, #28]
 8025614:	4620      	mov	r0, r4
 8025616:	f001 f8c5 	bl	80267a4 <_Bfree>
 802561a:	9b07      	ldr	r3, [sp, #28]
 802561c:	469b      	mov	fp, r3
 802561e:	9b06      	ldr	r3, [sp, #24]
 8025620:	1b9a      	subs	r2, r3, r6
 8025622:	d004      	beq.n	802562e <_dtoa_r+0x7ce>
 8025624:	4659      	mov	r1, fp
 8025626:	4620      	mov	r0, r4
 8025628:	f001 fa7e 	bl	8026b28 <__pow5mult>
 802562c:	4683      	mov	fp, r0
 802562e:	2101      	movs	r1, #1
 8025630:	4620      	mov	r0, r4
 8025632:	f001 f9bd 	bl	80269b0 <__i2b>
 8025636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025638:	2b00      	cmp	r3, #0
 802563a:	4606      	mov	r6, r0
 802563c:	dd7c      	ble.n	8025738 <_dtoa_r+0x8d8>
 802563e:	461a      	mov	r2, r3
 8025640:	4601      	mov	r1, r0
 8025642:	4620      	mov	r0, r4
 8025644:	f001 fa70 	bl	8026b28 <__pow5mult>
 8025648:	9b05      	ldr	r3, [sp, #20]
 802564a:	2b01      	cmp	r3, #1
 802564c:	4606      	mov	r6, r0
 802564e:	dd76      	ble.n	802573e <_dtoa_r+0x8de>
 8025650:	2300      	movs	r3, #0
 8025652:	9306      	str	r3, [sp, #24]
 8025654:	6933      	ldr	r3, [r6, #16]
 8025656:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802565a:	6918      	ldr	r0, [r3, #16]
 802565c:	f001 f958 	bl	8026910 <__hi0bits>
 8025660:	f1c0 0020 	rsb	r0, r0, #32
 8025664:	9b04      	ldr	r3, [sp, #16]
 8025666:	4418      	add	r0, r3
 8025668:	f010 001f 	ands.w	r0, r0, #31
 802566c:	f000 8086 	beq.w	802577c <_dtoa_r+0x91c>
 8025670:	f1c0 0320 	rsb	r3, r0, #32
 8025674:	2b04      	cmp	r3, #4
 8025676:	dd7f      	ble.n	8025778 <_dtoa_r+0x918>
 8025678:	f1c0 001c 	rsb	r0, r0, #28
 802567c:	9b04      	ldr	r3, [sp, #16]
 802567e:	4403      	add	r3, r0
 8025680:	4480      	add	r8, r0
 8025682:	4405      	add	r5, r0
 8025684:	9304      	str	r3, [sp, #16]
 8025686:	f1b8 0f00 	cmp.w	r8, #0
 802568a:	dd05      	ble.n	8025698 <_dtoa_r+0x838>
 802568c:	4659      	mov	r1, fp
 802568e:	4642      	mov	r2, r8
 8025690:	4620      	mov	r0, r4
 8025692:	f001 faa3 	bl	8026bdc <__lshift>
 8025696:	4683      	mov	fp, r0
 8025698:	9b04      	ldr	r3, [sp, #16]
 802569a:	2b00      	cmp	r3, #0
 802569c:	dd05      	ble.n	80256aa <_dtoa_r+0x84a>
 802569e:	4631      	mov	r1, r6
 80256a0:	461a      	mov	r2, r3
 80256a2:	4620      	mov	r0, r4
 80256a4:	f001 fa9a 	bl	8026bdc <__lshift>
 80256a8:	4606      	mov	r6, r0
 80256aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	d069      	beq.n	8025784 <_dtoa_r+0x924>
 80256b0:	4631      	mov	r1, r6
 80256b2:	4658      	mov	r0, fp
 80256b4:	f001 fafe 	bl	8026cb4 <__mcmp>
 80256b8:	2800      	cmp	r0, #0
 80256ba:	da63      	bge.n	8025784 <_dtoa_r+0x924>
 80256bc:	2300      	movs	r3, #0
 80256be:	4659      	mov	r1, fp
 80256c0:	220a      	movs	r2, #10
 80256c2:	4620      	mov	r0, r4
 80256c4:	f001 f890 	bl	80267e8 <__multadd>
 80256c8:	9b08      	ldr	r3, [sp, #32]
 80256ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80256ce:	4683      	mov	fp, r0
 80256d0:	2b00      	cmp	r3, #0
 80256d2:	f000 818f 	beq.w	80259f4 <_dtoa_r+0xb94>
 80256d6:	4639      	mov	r1, r7
 80256d8:	2300      	movs	r3, #0
 80256da:	220a      	movs	r2, #10
 80256dc:	4620      	mov	r0, r4
 80256de:	f001 f883 	bl	80267e8 <__multadd>
 80256e2:	f1b9 0f00 	cmp.w	r9, #0
 80256e6:	4607      	mov	r7, r0
 80256e8:	f300 808e 	bgt.w	8025808 <_dtoa_r+0x9a8>
 80256ec:	9b05      	ldr	r3, [sp, #20]
 80256ee:	2b02      	cmp	r3, #2
 80256f0:	dc50      	bgt.n	8025794 <_dtoa_r+0x934>
 80256f2:	e089      	b.n	8025808 <_dtoa_r+0x9a8>
 80256f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80256f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80256fa:	e75d      	b.n	80255b8 <_dtoa_r+0x758>
 80256fc:	9b01      	ldr	r3, [sp, #4]
 80256fe:	1e5e      	subs	r6, r3, #1
 8025700:	9b06      	ldr	r3, [sp, #24]
 8025702:	42b3      	cmp	r3, r6
 8025704:	bfbf      	itttt	lt
 8025706:	9b06      	ldrlt	r3, [sp, #24]
 8025708:	9606      	strlt	r6, [sp, #24]
 802570a:	1af2      	sublt	r2, r6, r3
 802570c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 802570e:	bfb6      	itet	lt
 8025710:	189b      	addlt	r3, r3, r2
 8025712:	1b9e      	subge	r6, r3, r6
 8025714:	930d      	strlt	r3, [sp, #52]	; 0x34
 8025716:	9b01      	ldr	r3, [sp, #4]
 8025718:	bfb8      	it	lt
 802571a:	2600      	movlt	r6, #0
 802571c:	2b00      	cmp	r3, #0
 802571e:	bfb5      	itete	lt
 8025720:	eba8 0503 	sublt.w	r5, r8, r3
 8025724:	9b01      	ldrge	r3, [sp, #4]
 8025726:	2300      	movlt	r3, #0
 8025728:	4645      	movge	r5, r8
 802572a:	e747      	b.n	80255bc <_dtoa_r+0x75c>
 802572c:	9e06      	ldr	r6, [sp, #24]
 802572e:	9f08      	ldr	r7, [sp, #32]
 8025730:	4645      	mov	r5, r8
 8025732:	e74c      	b.n	80255ce <_dtoa_r+0x76e>
 8025734:	9a06      	ldr	r2, [sp, #24]
 8025736:	e775      	b.n	8025624 <_dtoa_r+0x7c4>
 8025738:	9b05      	ldr	r3, [sp, #20]
 802573a:	2b01      	cmp	r3, #1
 802573c:	dc18      	bgt.n	8025770 <_dtoa_r+0x910>
 802573e:	9b02      	ldr	r3, [sp, #8]
 8025740:	b9b3      	cbnz	r3, 8025770 <_dtoa_r+0x910>
 8025742:	9b03      	ldr	r3, [sp, #12]
 8025744:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025748:	b9a3      	cbnz	r3, 8025774 <_dtoa_r+0x914>
 802574a:	9b03      	ldr	r3, [sp, #12]
 802574c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025750:	0d1b      	lsrs	r3, r3, #20
 8025752:	051b      	lsls	r3, r3, #20
 8025754:	b12b      	cbz	r3, 8025762 <_dtoa_r+0x902>
 8025756:	9b04      	ldr	r3, [sp, #16]
 8025758:	3301      	adds	r3, #1
 802575a:	9304      	str	r3, [sp, #16]
 802575c:	f108 0801 	add.w	r8, r8, #1
 8025760:	2301      	movs	r3, #1
 8025762:	9306      	str	r3, [sp, #24]
 8025764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025766:	2b00      	cmp	r3, #0
 8025768:	f47f af74 	bne.w	8025654 <_dtoa_r+0x7f4>
 802576c:	2001      	movs	r0, #1
 802576e:	e779      	b.n	8025664 <_dtoa_r+0x804>
 8025770:	2300      	movs	r3, #0
 8025772:	e7f6      	b.n	8025762 <_dtoa_r+0x902>
 8025774:	9b02      	ldr	r3, [sp, #8]
 8025776:	e7f4      	b.n	8025762 <_dtoa_r+0x902>
 8025778:	d085      	beq.n	8025686 <_dtoa_r+0x826>
 802577a:	4618      	mov	r0, r3
 802577c:	301c      	adds	r0, #28
 802577e:	e77d      	b.n	802567c <_dtoa_r+0x81c>
 8025780:	40240000 	.word	0x40240000
 8025784:	9b01      	ldr	r3, [sp, #4]
 8025786:	2b00      	cmp	r3, #0
 8025788:	dc38      	bgt.n	80257fc <_dtoa_r+0x99c>
 802578a:	9b05      	ldr	r3, [sp, #20]
 802578c:	2b02      	cmp	r3, #2
 802578e:	dd35      	ble.n	80257fc <_dtoa_r+0x99c>
 8025790:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8025794:	f1b9 0f00 	cmp.w	r9, #0
 8025798:	d10d      	bne.n	80257b6 <_dtoa_r+0x956>
 802579a:	4631      	mov	r1, r6
 802579c:	464b      	mov	r3, r9
 802579e:	2205      	movs	r2, #5
 80257a0:	4620      	mov	r0, r4
 80257a2:	f001 f821 	bl	80267e8 <__multadd>
 80257a6:	4601      	mov	r1, r0
 80257a8:	4606      	mov	r6, r0
 80257aa:	4658      	mov	r0, fp
 80257ac:	f001 fa82 	bl	8026cb4 <__mcmp>
 80257b0:	2800      	cmp	r0, #0
 80257b2:	f73f adbd 	bgt.w	8025330 <_dtoa_r+0x4d0>
 80257b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257b8:	9d00      	ldr	r5, [sp, #0]
 80257ba:	ea6f 0a03 	mvn.w	sl, r3
 80257be:	f04f 0800 	mov.w	r8, #0
 80257c2:	4631      	mov	r1, r6
 80257c4:	4620      	mov	r0, r4
 80257c6:	f000 ffed 	bl	80267a4 <_Bfree>
 80257ca:	2f00      	cmp	r7, #0
 80257cc:	f43f aeb4 	beq.w	8025538 <_dtoa_r+0x6d8>
 80257d0:	f1b8 0f00 	cmp.w	r8, #0
 80257d4:	d005      	beq.n	80257e2 <_dtoa_r+0x982>
 80257d6:	45b8      	cmp	r8, r7
 80257d8:	d003      	beq.n	80257e2 <_dtoa_r+0x982>
 80257da:	4641      	mov	r1, r8
 80257dc:	4620      	mov	r0, r4
 80257de:	f000 ffe1 	bl	80267a4 <_Bfree>
 80257e2:	4639      	mov	r1, r7
 80257e4:	4620      	mov	r0, r4
 80257e6:	f000 ffdd 	bl	80267a4 <_Bfree>
 80257ea:	e6a5      	b.n	8025538 <_dtoa_r+0x6d8>
 80257ec:	2600      	movs	r6, #0
 80257ee:	4637      	mov	r7, r6
 80257f0:	e7e1      	b.n	80257b6 <_dtoa_r+0x956>
 80257f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80257f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80257f8:	4637      	mov	r7, r6
 80257fa:	e599      	b.n	8025330 <_dtoa_r+0x4d0>
 80257fc:	9b08      	ldr	r3, [sp, #32]
 80257fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8025802:	2b00      	cmp	r3, #0
 8025804:	f000 80fd 	beq.w	8025a02 <_dtoa_r+0xba2>
 8025808:	2d00      	cmp	r5, #0
 802580a:	dd05      	ble.n	8025818 <_dtoa_r+0x9b8>
 802580c:	4639      	mov	r1, r7
 802580e:	462a      	mov	r2, r5
 8025810:	4620      	mov	r0, r4
 8025812:	f001 f9e3 	bl	8026bdc <__lshift>
 8025816:	4607      	mov	r7, r0
 8025818:	9b06      	ldr	r3, [sp, #24]
 802581a:	2b00      	cmp	r3, #0
 802581c:	d05c      	beq.n	80258d8 <_dtoa_r+0xa78>
 802581e:	6879      	ldr	r1, [r7, #4]
 8025820:	4620      	mov	r0, r4
 8025822:	f000 ff7f 	bl	8026724 <_Balloc>
 8025826:	4605      	mov	r5, r0
 8025828:	b928      	cbnz	r0, 8025836 <_dtoa_r+0x9d6>
 802582a:	4b80      	ldr	r3, [pc, #512]	; (8025a2c <_dtoa_r+0xbcc>)
 802582c:	4602      	mov	r2, r0
 802582e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8025832:	f7ff bb2e 	b.w	8024e92 <_dtoa_r+0x32>
 8025836:	693a      	ldr	r2, [r7, #16]
 8025838:	3202      	adds	r2, #2
 802583a:	0092      	lsls	r2, r2, #2
 802583c:	f107 010c 	add.w	r1, r7, #12
 8025840:	300c      	adds	r0, #12
 8025842:	f7fc fcb1 	bl	80221a8 <memcpy>
 8025846:	2201      	movs	r2, #1
 8025848:	4629      	mov	r1, r5
 802584a:	4620      	mov	r0, r4
 802584c:	f001 f9c6 	bl	8026bdc <__lshift>
 8025850:	9b00      	ldr	r3, [sp, #0]
 8025852:	3301      	adds	r3, #1
 8025854:	9301      	str	r3, [sp, #4]
 8025856:	9b00      	ldr	r3, [sp, #0]
 8025858:	444b      	add	r3, r9
 802585a:	9307      	str	r3, [sp, #28]
 802585c:	9b02      	ldr	r3, [sp, #8]
 802585e:	f003 0301 	and.w	r3, r3, #1
 8025862:	46b8      	mov	r8, r7
 8025864:	9306      	str	r3, [sp, #24]
 8025866:	4607      	mov	r7, r0
 8025868:	9b01      	ldr	r3, [sp, #4]
 802586a:	4631      	mov	r1, r6
 802586c:	3b01      	subs	r3, #1
 802586e:	4658      	mov	r0, fp
 8025870:	9302      	str	r3, [sp, #8]
 8025872:	f7ff fa67 	bl	8024d44 <quorem>
 8025876:	4603      	mov	r3, r0
 8025878:	3330      	adds	r3, #48	; 0x30
 802587a:	9004      	str	r0, [sp, #16]
 802587c:	4641      	mov	r1, r8
 802587e:	4658      	mov	r0, fp
 8025880:	9308      	str	r3, [sp, #32]
 8025882:	f001 fa17 	bl	8026cb4 <__mcmp>
 8025886:	463a      	mov	r2, r7
 8025888:	4681      	mov	r9, r0
 802588a:	4631      	mov	r1, r6
 802588c:	4620      	mov	r0, r4
 802588e:	f001 fa2d 	bl	8026cec <__mdiff>
 8025892:	68c2      	ldr	r2, [r0, #12]
 8025894:	9b08      	ldr	r3, [sp, #32]
 8025896:	4605      	mov	r5, r0
 8025898:	bb02      	cbnz	r2, 80258dc <_dtoa_r+0xa7c>
 802589a:	4601      	mov	r1, r0
 802589c:	4658      	mov	r0, fp
 802589e:	f001 fa09 	bl	8026cb4 <__mcmp>
 80258a2:	9b08      	ldr	r3, [sp, #32]
 80258a4:	4602      	mov	r2, r0
 80258a6:	4629      	mov	r1, r5
 80258a8:	4620      	mov	r0, r4
 80258aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80258ae:	f000 ff79 	bl	80267a4 <_Bfree>
 80258b2:	9b05      	ldr	r3, [sp, #20]
 80258b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80258b6:	9d01      	ldr	r5, [sp, #4]
 80258b8:	ea43 0102 	orr.w	r1, r3, r2
 80258bc:	9b06      	ldr	r3, [sp, #24]
 80258be:	430b      	orrs	r3, r1
 80258c0:	9b08      	ldr	r3, [sp, #32]
 80258c2:	d10d      	bne.n	80258e0 <_dtoa_r+0xa80>
 80258c4:	2b39      	cmp	r3, #57	; 0x39
 80258c6:	d029      	beq.n	802591c <_dtoa_r+0xabc>
 80258c8:	f1b9 0f00 	cmp.w	r9, #0
 80258cc:	dd01      	ble.n	80258d2 <_dtoa_r+0xa72>
 80258ce:	9b04      	ldr	r3, [sp, #16]
 80258d0:	3331      	adds	r3, #49	; 0x31
 80258d2:	9a02      	ldr	r2, [sp, #8]
 80258d4:	7013      	strb	r3, [r2, #0]
 80258d6:	e774      	b.n	80257c2 <_dtoa_r+0x962>
 80258d8:	4638      	mov	r0, r7
 80258da:	e7b9      	b.n	8025850 <_dtoa_r+0x9f0>
 80258dc:	2201      	movs	r2, #1
 80258de:	e7e2      	b.n	80258a6 <_dtoa_r+0xa46>
 80258e0:	f1b9 0f00 	cmp.w	r9, #0
 80258e4:	db06      	blt.n	80258f4 <_dtoa_r+0xa94>
 80258e6:	9905      	ldr	r1, [sp, #20]
 80258e8:	ea41 0909 	orr.w	r9, r1, r9
 80258ec:	9906      	ldr	r1, [sp, #24]
 80258ee:	ea59 0101 	orrs.w	r1, r9, r1
 80258f2:	d120      	bne.n	8025936 <_dtoa_r+0xad6>
 80258f4:	2a00      	cmp	r2, #0
 80258f6:	ddec      	ble.n	80258d2 <_dtoa_r+0xa72>
 80258f8:	4659      	mov	r1, fp
 80258fa:	2201      	movs	r2, #1
 80258fc:	4620      	mov	r0, r4
 80258fe:	9301      	str	r3, [sp, #4]
 8025900:	f001 f96c 	bl	8026bdc <__lshift>
 8025904:	4631      	mov	r1, r6
 8025906:	4683      	mov	fp, r0
 8025908:	f001 f9d4 	bl	8026cb4 <__mcmp>
 802590c:	2800      	cmp	r0, #0
 802590e:	9b01      	ldr	r3, [sp, #4]
 8025910:	dc02      	bgt.n	8025918 <_dtoa_r+0xab8>
 8025912:	d1de      	bne.n	80258d2 <_dtoa_r+0xa72>
 8025914:	07da      	lsls	r2, r3, #31
 8025916:	d5dc      	bpl.n	80258d2 <_dtoa_r+0xa72>
 8025918:	2b39      	cmp	r3, #57	; 0x39
 802591a:	d1d8      	bne.n	80258ce <_dtoa_r+0xa6e>
 802591c:	9a02      	ldr	r2, [sp, #8]
 802591e:	2339      	movs	r3, #57	; 0x39
 8025920:	7013      	strb	r3, [r2, #0]
 8025922:	462b      	mov	r3, r5
 8025924:	461d      	mov	r5, r3
 8025926:	3b01      	subs	r3, #1
 8025928:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802592c:	2a39      	cmp	r2, #57	; 0x39
 802592e:	d050      	beq.n	80259d2 <_dtoa_r+0xb72>
 8025930:	3201      	adds	r2, #1
 8025932:	701a      	strb	r2, [r3, #0]
 8025934:	e745      	b.n	80257c2 <_dtoa_r+0x962>
 8025936:	2a00      	cmp	r2, #0
 8025938:	dd03      	ble.n	8025942 <_dtoa_r+0xae2>
 802593a:	2b39      	cmp	r3, #57	; 0x39
 802593c:	d0ee      	beq.n	802591c <_dtoa_r+0xabc>
 802593e:	3301      	adds	r3, #1
 8025940:	e7c7      	b.n	80258d2 <_dtoa_r+0xa72>
 8025942:	9a01      	ldr	r2, [sp, #4]
 8025944:	9907      	ldr	r1, [sp, #28]
 8025946:	f802 3c01 	strb.w	r3, [r2, #-1]
 802594a:	428a      	cmp	r2, r1
 802594c:	d02a      	beq.n	80259a4 <_dtoa_r+0xb44>
 802594e:	4659      	mov	r1, fp
 8025950:	2300      	movs	r3, #0
 8025952:	220a      	movs	r2, #10
 8025954:	4620      	mov	r0, r4
 8025956:	f000 ff47 	bl	80267e8 <__multadd>
 802595a:	45b8      	cmp	r8, r7
 802595c:	4683      	mov	fp, r0
 802595e:	f04f 0300 	mov.w	r3, #0
 8025962:	f04f 020a 	mov.w	r2, #10
 8025966:	4641      	mov	r1, r8
 8025968:	4620      	mov	r0, r4
 802596a:	d107      	bne.n	802597c <_dtoa_r+0xb1c>
 802596c:	f000 ff3c 	bl	80267e8 <__multadd>
 8025970:	4680      	mov	r8, r0
 8025972:	4607      	mov	r7, r0
 8025974:	9b01      	ldr	r3, [sp, #4]
 8025976:	3301      	adds	r3, #1
 8025978:	9301      	str	r3, [sp, #4]
 802597a:	e775      	b.n	8025868 <_dtoa_r+0xa08>
 802597c:	f000 ff34 	bl	80267e8 <__multadd>
 8025980:	4639      	mov	r1, r7
 8025982:	4680      	mov	r8, r0
 8025984:	2300      	movs	r3, #0
 8025986:	220a      	movs	r2, #10
 8025988:	4620      	mov	r0, r4
 802598a:	f000 ff2d 	bl	80267e8 <__multadd>
 802598e:	4607      	mov	r7, r0
 8025990:	e7f0      	b.n	8025974 <_dtoa_r+0xb14>
 8025992:	f1b9 0f00 	cmp.w	r9, #0
 8025996:	9a00      	ldr	r2, [sp, #0]
 8025998:	bfcc      	ite	gt
 802599a:	464d      	movgt	r5, r9
 802599c:	2501      	movle	r5, #1
 802599e:	4415      	add	r5, r2
 80259a0:	f04f 0800 	mov.w	r8, #0
 80259a4:	4659      	mov	r1, fp
 80259a6:	2201      	movs	r2, #1
 80259a8:	4620      	mov	r0, r4
 80259aa:	9301      	str	r3, [sp, #4]
 80259ac:	f001 f916 	bl	8026bdc <__lshift>
 80259b0:	4631      	mov	r1, r6
 80259b2:	4683      	mov	fp, r0
 80259b4:	f001 f97e 	bl	8026cb4 <__mcmp>
 80259b8:	2800      	cmp	r0, #0
 80259ba:	dcb2      	bgt.n	8025922 <_dtoa_r+0xac2>
 80259bc:	d102      	bne.n	80259c4 <_dtoa_r+0xb64>
 80259be:	9b01      	ldr	r3, [sp, #4]
 80259c0:	07db      	lsls	r3, r3, #31
 80259c2:	d4ae      	bmi.n	8025922 <_dtoa_r+0xac2>
 80259c4:	462b      	mov	r3, r5
 80259c6:	461d      	mov	r5, r3
 80259c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80259cc:	2a30      	cmp	r2, #48	; 0x30
 80259ce:	d0fa      	beq.n	80259c6 <_dtoa_r+0xb66>
 80259d0:	e6f7      	b.n	80257c2 <_dtoa_r+0x962>
 80259d2:	9a00      	ldr	r2, [sp, #0]
 80259d4:	429a      	cmp	r2, r3
 80259d6:	d1a5      	bne.n	8025924 <_dtoa_r+0xac4>
 80259d8:	f10a 0a01 	add.w	sl, sl, #1
 80259dc:	2331      	movs	r3, #49	; 0x31
 80259de:	e779      	b.n	80258d4 <_dtoa_r+0xa74>
 80259e0:	4b13      	ldr	r3, [pc, #76]	; (8025a30 <_dtoa_r+0xbd0>)
 80259e2:	f7ff baaf 	b.w	8024f44 <_dtoa_r+0xe4>
 80259e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80259e8:	2b00      	cmp	r3, #0
 80259ea:	f47f aa86 	bne.w	8024efa <_dtoa_r+0x9a>
 80259ee:	4b11      	ldr	r3, [pc, #68]	; (8025a34 <_dtoa_r+0xbd4>)
 80259f0:	f7ff baa8 	b.w	8024f44 <_dtoa_r+0xe4>
 80259f4:	f1b9 0f00 	cmp.w	r9, #0
 80259f8:	dc03      	bgt.n	8025a02 <_dtoa_r+0xba2>
 80259fa:	9b05      	ldr	r3, [sp, #20]
 80259fc:	2b02      	cmp	r3, #2
 80259fe:	f73f aec9 	bgt.w	8025794 <_dtoa_r+0x934>
 8025a02:	9d00      	ldr	r5, [sp, #0]
 8025a04:	4631      	mov	r1, r6
 8025a06:	4658      	mov	r0, fp
 8025a08:	f7ff f99c 	bl	8024d44 <quorem>
 8025a0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8025a10:	f805 3b01 	strb.w	r3, [r5], #1
 8025a14:	9a00      	ldr	r2, [sp, #0]
 8025a16:	1aaa      	subs	r2, r5, r2
 8025a18:	4591      	cmp	r9, r2
 8025a1a:	ddba      	ble.n	8025992 <_dtoa_r+0xb32>
 8025a1c:	4659      	mov	r1, fp
 8025a1e:	2300      	movs	r3, #0
 8025a20:	220a      	movs	r2, #10
 8025a22:	4620      	mov	r0, r4
 8025a24:	f000 fee0 	bl	80267e8 <__multadd>
 8025a28:	4683      	mov	fp, r0
 8025a2a:	e7eb      	b.n	8025a04 <_dtoa_r+0xba4>
 8025a2c:	080338dd 	.word	0x080338dd
 8025a30:	080324d3 	.word	0x080324d3
 8025a34:	08033871 	.word	0x08033871

08025a38 <__sflush_r>:
 8025a38:	898a      	ldrh	r2, [r1, #12]
 8025a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025a3e:	4605      	mov	r5, r0
 8025a40:	0710      	lsls	r0, r2, #28
 8025a42:	460c      	mov	r4, r1
 8025a44:	d458      	bmi.n	8025af8 <__sflush_r+0xc0>
 8025a46:	684b      	ldr	r3, [r1, #4]
 8025a48:	2b00      	cmp	r3, #0
 8025a4a:	dc05      	bgt.n	8025a58 <__sflush_r+0x20>
 8025a4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	dc02      	bgt.n	8025a58 <__sflush_r+0x20>
 8025a52:	2000      	movs	r0, #0
 8025a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a5a:	2e00      	cmp	r6, #0
 8025a5c:	d0f9      	beq.n	8025a52 <__sflush_r+0x1a>
 8025a5e:	2300      	movs	r3, #0
 8025a60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025a64:	682f      	ldr	r7, [r5, #0]
 8025a66:	602b      	str	r3, [r5, #0]
 8025a68:	d032      	beq.n	8025ad0 <__sflush_r+0x98>
 8025a6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025a6c:	89a3      	ldrh	r3, [r4, #12]
 8025a6e:	075a      	lsls	r2, r3, #29
 8025a70:	d505      	bpl.n	8025a7e <__sflush_r+0x46>
 8025a72:	6863      	ldr	r3, [r4, #4]
 8025a74:	1ac0      	subs	r0, r0, r3
 8025a76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025a78:	b10b      	cbz	r3, 8025a7e <__sflush_r+0x46>
 8025a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025a7c:	1ac0      	subs	r0, r0, r3
 8025a7e:	2300      	movs	r3, #0
 8025a80:	4602      	mov	r2, r0
 8025a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025a84:	6a21      	ldr	r1, [r4, #32]
 8025a86:	4628      	mov	r0, r5
 8025a88:	47b0      	blx	r6
 8025a8a:	1c43      	adds	r3, r0, #1
 8025a8c:	89a3      	ldrh	r3, [r4, #12]
 8025a8e:	d106      	bne.n	8025a9e <__sflush_r+0x66>
 8025a90:	6829      	ldr	r1, [r5, #0]
 8025a92:	291d      	cmp	r1, #29
 8025a94:	d82c      	bhi.n	8025af0 <__sflush_r+0xb8>
 8025a96:	4a2a      	ldr	r2, [pc, #168]	; (8025b40 <__sflush_r+0x108>)
 8025a98:	40ca      	lsrs	r2, r1
 8025a9a:	07d6      	lsls	r6, r2, #31
 8025a9c:	d528      	bpl.n	8025af0 <__sflush_r+0xb8>
 8025a9e:	2200      	movs	r2, #0
 8025aa0:	6062      	str	r2, [r4, #4]
 8025aa2:	04d9      	lsls	r1, r3, #19
 8025aa4:	6922      	ldr	r2, [r4, #16]
 8025aa6:	6022      	str	r2, [r4, #0]
 8025aa8:	d504      	bpl.n	8025ab4 <__sflush_r+0x7c>
 8025aaa:	1c42      	adds	r2, r0, #1
 8025aac:	d101      	bne.n	8025ab2 <__sflush_r+0x7a>
 8025aae:	682b      	ldr	r3, [r5, #0]
 8025ab0:	b903      	cbnz	r3, 8025ab4 <__sflush_r+0x7c>
 8025ab2:	6560      	str	r0, [r4, #84]	; 0x54
 8025ab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025ab6:	602f      	str	r7, [r5, #0]
 8025ab8:	2900      	cmp	r1, #0
 8025aba:	d0ca      	beq.n	8025a52 <__sflush_r+0x1a>
 8025abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025ac0:	4299      	cmp	r1, r3
 8025ac2:	d002      	beq.n	8025aca <__sflush_r+0x92>
 8025ac4:	4628      	mov	r0, r5
 8025ac6:	f7fc fe2d 	bl	8022724 <_free_r>
 8025aca:	2000      	movs	r0, #0
 8025acc:	6360      	str	r0, [r4, #52]	; 0x34
 8025ace:	e7c1      	b.n	8025a54 <__sflush_r+0x1c>
 8025ad0:	6a21      	ldr	r1, [r4, #32]
 8025ad2:	2301      	movs	r3, #1
 8025ad4:	4628      	mov	r0, r5
 8025ad6:	47b0      	blx	r6
 8025ad8:	1c41      	adds	r1, r0, #1
 8025ada:	d1c7      	bne.n	8025a6c <__sflush_r+0x34>
 8025adc:	682b      	ldr	r3, [r5, #0]
 8025ade:	2b00      	cmp	r3, #0
 8025ae0:	d0c4      	beq.n	8025a6c <__sflush_r+0x34>
 8025ae2:	2b1d      	cmp	r3, #29
 8025ae4:	d001      	beq.n	8025aea <__sflush_r+0xb2>
 8025ae6:	2b16      	cmp	r3, #22
 8025ae8:	d101      	bne.n	8025aee <__sflush_r+0xb6>
 8025aea:	602f      	str	r7, [r5, #0]
 8025aec:	e7b1      	b.n	8025a52 <__sflush_r+0x1a>
 8025aee:	89a3      	ldrh	r3, [r4, #12]
 8025af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025af4:	81a3      	strh	r3, [r4, #12]
 8025af6:	e7ad      	b.n	8025a54 <__sflush_r+0x1c>
 8025af8:	690f      	ldr	r7, [r1, #16]
 8025afa:	2f00      	cmp	r7, #0
 8025afc:	d0a9      	beq.n	8025a52 <__sflush_r+0x1a>
 8025afe:	0793      	lsls	r3, r2, #30
 8025b00:	680e      	ldr	r6, [r1, #0]
 8025b02:	bf08      	it	eq
 8025b04:	694b      	ldreq	r3, [r1, #20]
 8025b06:	600f      	str	r7, [r1, #0]
 8025b08:	bf18      	it	ne
 8025b0a:	2300      	movne	r3, #0
 8025b0c:	eba6 0807 	sub.w	r8, r6, r7
 8025b10:	608b      	str	r3, [r1, #8]
 8025b12:	f1b8 0f00 	cmp.w	r8, #0
 8025b16:	dd9c      	ble.n	8025a52 <__sflush_r+0x1a>
 8025b18:	6a21      	ldr	r1, [r4, #32]
 8025b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025b1c:	4643      	mov	r3, r8
 8025b1e:	463a      	mov	r2, r7
 8025b20:	4628      	mov	r0, r5
 8025b22:	47b0      	blx	r6
 8025b24:	2800      	cmp	r0, #0
 8025b26:	dc06      	bgt.n	8025b36 <__sflush_r+0xfe>
 8025b28:	89a3      	ldrh	r3, [r4, #12]
 8025b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b2e:	81a3      	strh	r3, [r4, #12]
 8025b30:	f04f 30ff 	mov.w	r0, #4294967295
 8025b34:	e78e      	b.n	8025a54 <__sflush_r+0x1c>
 8025b36:	4407      	add	r7, r0
 8025b38:	eba8 0800 	sub.w	r8, r8, r0
 8025b3c:	e7e9      	b.n	8025b12 <__sflush_r+0xda>
 8025b3e:	bf00      	nop
 8025b40:	20400001 	.word	0x20400001

08025b44 <_fflush_r>:
 8025b44:	b538      	push	{r3, r4, r5, lr}
 8025b46:	690b      	ldr	r3, [r1, #16]
 8025b48:	4605      	mov	r5, r0
 8025b4a:	460c      	mov	r4, r1
 8025b4c:	b913      	cbnz	r3, 8025b54 <_fflush_r+0x10>
 8025b4e:	2500      	movs	r5, #0
 8025b50:	4628      	mov	r0, r5
 8025b52:	bd38      	pop	{r3, r4, r5, pc}
 8025b54:	b118      	cbz	r0, 8025b5e <_fflush_r+0x1a>
 8025b56:	6983      	ldr	r3, [r0, #24]
 8025b58:	b90b      	cbnz	r3, 8025b5e <_fflush_r+0x1a>
 8025b5a:	f000 f899 	bl	8025c90 <__sinit>
 8025b5e:	4b14      	ldr	r3, [pc, #80]	; (8025bb0 <_fflush_r+0x6c>)
 8025b60:	429c      	cmp	r4, r3
 8025b62:	d11b      	bne.n	8025b9c <_fflush_r+0x58>
 8025b64:	686c      	ldr	r4, [r5, #4]
 8025b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025b6a:	2b00      	cmp	r3, #0
 8025b6c:	d0ef      	beq.n	8025b4e <_fflush_r+0xa>
 8025b6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025b70:	07d0      	lsls	r0, r2, #31
 8025b72:	d404      	bmi.n	8025b7e <_fflush_r+0x3a>
 8025b74:	0599      	lsls	r1, r3, #22
 8025b76:	d402      	bmi.n	8025b7e <_fflush_r+0x3a>
 8025b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b7a:	f000 fd3b 	bl	80265f4 <__retarget_lock_acquire_recursive>
 8025b7e:	4628      	mov	r0, r5
 8025b80:	4621      	mov	r1, r4
 8025b82:	f7ff ff59 	bl	8025a38 <__sflush_r>
 8025b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025b88:	07da      	lsls	r2, r3, #31
 8025b8a:	4605      	mov	r5, r0
 8025b8c:	d4e0      	bmi.n	8025b50 <_fflush_r+0xc>
 8025b8e:	89a3      	ldrh	r3, [r4, #12]
 8025b90:	059b      	lsls	r3, r3, #22
 8025b92:	d4dd      	bmi.n	8025b50 <_fflush_r+0xc>
 8025b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b96:	f000 fd2f 	bl	80265f8 <__retarget_lock_release_recursive>
 8025b9a:	e7d9      	b.n	8025b50 <_fflush_r+0xc>
 8025b9c:	4b05      	ldr	r3, [pc, #20]	; (8025bb4 <_fflush_r+0x70>)
 8025b9e:	429c      	cmp	r4, r3
 8025ba0:	d101      	bne.n	8025ba6 <_fflush_r+0x62>
 8025ba2:	68ac      	ldr	r4, [r5, #8]
 8025ba4:	e7df      	b.n	8025b66 <_fflush_r+0x22>
 8025ba6:	4b04      	ldr	r3, [pc, #16]	; (8025bb8 <_fflush_r+0x74>)
 8025ba8:	429c      	cmp	r4, r3
 8025baa:	bf08      	it	eq
 8025bac:	68ec      	ldreq	r4, [r5, #12]
 8025bae:	e7da      	b.n	8025b66 <_fflush_r+0x22>
 8025bb0:	08033910 	.word	0x08033910
 8025bb4:	08033930 	.word	0x08033930
 8025bb8:	080338f0 	.word	0x080338f0

08025bbc <fflush>:
 8025bbc:	4601      	mov	r1, r0
 8025bbe:	b920      	cbnz	r0, 8025bca <fflush+0xe>
 8025bc0:	4b04      	ldr	r3, [pc, #16]	; (8025bd4 <fflush+0x18>)
 8025bc2:	4905      	ldr	r1, [pc, #20]	; (8025bd8 <fflush+0x1c>)
 8025bc4:	6818      	ldr	r0, [r3, #0]
 8025bc6:	f000 b8fe 	b.w	8025dc6 <_fwalk_reent>
 8025bca:	4b04      	ldr	r3, [pc, #16]	; (8025bdc <fflush+0x20>)
 8025bcc:	6818      	ldr	r0, [r3, #0]
 8025bce:	f7ff bfb9 	b.w	8025b44 <_fflush_r>
 8025bd2:	bf00      	nop
 8025bd4:	08033640 	.word	0x08033640
 8025bd8:	08025b45 	.word	0x08025b45
 8025bdc:	2000057c 	.word	0x2000057c

08025be0 <std>:
 8025be0:	2300      	movs	r3, #0
 8025be2:	b510      	push	{r4, lr}
 8025be4:	4604      	mov	r4, r0
 8025be6:	e9c0 3300 	strd	r3, r3, [r0]
 8025bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025bee:	6083      	str	r3, [r0, #8]
 8025bf0:	8181      	strh	r1, [r0, #12]
 8025bf2:	6643      	str	r3, [r0, #100]	; 0x64
 8025bf4:	81c2      	strh	r2, [r0, #14]
 8025bf6:	6183      	str	r3, [r0, #24]
 8025bf8:	4619      	mov	r1, r3
 8025bfa:	2208      	movs	r2, #8
 8025bfc:	305c      	adds	r0, #92	; 0x5c
 8025bfe:	f7fc fafb 	bl	80221f8 <memset>
 8025c02:	4b05      	ldr	r3, [pc, #20]	; (8025c18 <std+0x38>)
 8025c04:	6263      	str	r3, [r4, #36]	; 0x24
 8025c06:	4b05      	ldr	r3, [pc, #20]	; (8025c1c <std+0x3c>)
 8025c08:	62a3      	str	r3, [r4, #40]	; 0x28
 8025c0a:	4b05      	ldr	r3, [pc, #20]	; (8025c20 <std+0x40>)
 8025c0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025c0e:	4b05      	ldr	r3, [pc, #20]	; (8025c24 <std+0x44>)
 8025c10:	6224      	str	r4, [r4, #32]
 8025c12:	6323      	str	r3, [r4, #48]	; 0x30
 8025c14:	bd10      	pop	{r4, pc}
 8025c16:	bf00      	nop
 8025c18:	080236d5 	.word	0x080236d5
 8025c1c:	080236fb 	.word	0x080236fb
 8025c20:	08023733 	.word	0x08023733
 8025c24:	08023757 	.word	0x08023757

08025c28 <_cleanup_r>:
 8025c28:	4901      	ldr	r1, [pc, #4]	; (8025c30 <_cleanup_r+0x8>)
 8025c2a:	f000 b8cc 	b.w	8025dc6 <_fwalk_reent>
 8025c2e:	bf00      	nop
 8025c30:	08025b45 	.word	0x08025b45

08025c34 <__sfmoreglue>:
 8025c34:	b570      	push	{r4, r5, r6, lr}
 8025c36:	1e4a      	subs	r2, r1, #1
 8025c38:	2568      	movs	r5, #104	; 0x68
 8025c3a:	4355      	muls	r5, r2
 8025c3c:	460e      	mov	r6, r1
 8025c3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025c42:	f7fc fdbf 	bl	80227c4 <_malloc_r>
 8025c46:	4604      	mov	r4, r0
 8025c48:	b140      	cbz	r0, 8025c5c <__sfmoreglue+0x28>
 8025c4a:	2100      	movs	r1, #0
 8025c4c:	e9c0 1600 	strd	r1, r6, [r0]
 8025c50:	300c      	adds	r0, #12
 8025c52:	60a0      	str	r0, [r4, #8]
 8025c54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025c58:	f7fc face 	bl	80221f8 <memset>
 8025c5c:	4620      	mov	r0, r4
 8025c5e:	bd70      	pop	{r4, r5, r6, pc}

08025c60 <__sfp_lock_acquire>:
 8025c60:	4801      	ldr	r0, [pc, #4]	; (8025c68 <__sfp_lock_acquire+0x8>)
 8025c62:	f000 bcc7 	b.w	80265f4 <__retarget_lock_acquire_recursive>
 8025c66:	bf00      	nop
 8025c68:	200019b4 	.word	0x200019b4

08025c6c <__sfp_lock_release>:
 8025c6c:	4801      	ldr	r0, [pc, #4]	; (8025c74 <__sfp_lock_release+0x8>)
 8025c6e:	f000 bcc3 	b.w	80265f8 <__retarget_lock_release_recursive>
 8025c72:	bf00      	nop
 8025c74:	200019b4 	.word	0x200019b4

08025c78 <__sinit_lock_acquire>:
 8025c78:	4801      	ldr	r0, [pc, #4]	; (8025c80 <__sinit_lock_acquire+0x8>)
 8025c7a:	f000 bcbb 	b.w	80265f4 <__retarget_lock_acquire_recursive>
 8025c7e:	bf00      	nop
 8025c80:	200019af 	.word	0x200019af

08025c84 <__sinit_lock_release>:
 8025c84:	4801      	ldr	r0, [pc, #4]	; (8025c8c <__sinit_lock_release+0x8>)
 8025c86:	f000 bcb7 	b.w	80265f8 <__retarget_lock_release_recursive>
 8025c8a:	bf00      	nop
 8025c8c:	200019af 	.word	0x200019af

08025c90 <__sinit>:
 8025c90:	b510      	push	{r4, lr}
 8025c92:	4604      	mov	r4, r0
 8025c94:	f7ff fff0 	bl	8025c78 <__sinit_lock_acquire>
 8025c98:	69a3      	ldr	r3, [r4, #24]
 8025c9a:	b11b      	cbz	r3, 8025ca4 <__sinit+0x14>
 8025c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ca0:	f7ff bff0 	b.w	8025c84 <__sinit_lock_release>
 8025ca4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025ca8:	6523      	str	r3, [r4, #80]	; 0x50
 8025caa:	4b13      	ldr	r3, [pc, #76]	; (8025cf8 <__sinit+0x68>)
 8025cac:	4a13      	ldr	r2, [pc, #76]	; (8025cfc <__sinit+0x6c>)
 8025cae:	681b      	ldr	r3, [r3, #0]
 8025cb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8025cb2:	42a3      	cmp	r3, r4
 8025cb4:	bf04      	itt	eq
 8025cb6:	2301      	moveq	r3, #1
 8025cb8:	61a3      	streq	r3, [r4, #24]
 8025cba:	4620      	mov	r0, r4
 8025cbc:	f000 f820 	bl	8025d00 <__sfp>
 8025cc0:	6060      	str	r0, [r4, #4]
 8025cc2:	4620      	mov	r0, r4
 8025cc4:	f000 f81c 	bl	8025d00 <__sfp>
 8025cc8:	60a0      	str	r0, [r4, #8]
 8025cca:	4620      	mov	r0, r4
 8025ccc:	f000 f818 	bl	8025d00 <__sfp>
 8025cd0:	2200      	movs	r2, #0
 8025cd2:	60e0      	str	r0, [r4, #12]
 8025cd4:	2104      	movs	r1, #4
 8025cd6:	6860      	ldr	r0, [r4, #4]
 8025cd8:	f7ff ff82 	bl	8025be0 <std>
 8025cdc:	68a0      	ldr	r0, [r4, #8]
 8025cde:	2201      	movs	r2, #1
 8025ce0:	2109      	movs	r1, #9
 8025ce2:	f7ff ff7d 	bl	8025be0 <std>
 8025ce6:	68e0      	ldr	r0, [r4, #12]
 8025ce8:	2202      	movs	r2, #2
 8025cea:	2112      	movs	r1, #18
 8025cec:	f7ff ff78 	bl	8025be0 <std>
 8025cf0:	2301      	movs	r3, #1
 8025cf2:	61a3      	str	r3, [r4, #24]
 8025cf4:	e7d2      	b.n	8025c9c <__sinit+0xc>
 8025cf6:	bf00      	nop
 8025cf8:	08033640 	.word	0x08033640
 8025cfc:	08025c29 	.word	0x08025c29

08025d00 <__sfp>:
 8025d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025d02:	4607      	mov	r7, r0
 8025d04:	f7ff ffac 	bl	8025c60 <__sfp_lock_acquire>
 8025d08:	4b1e      	ldr	r3, [pc, #120]	; (8025d84 <__sfp+0x84>)
 8025d0a:	681e      	ldr	r6, [r3, #0]
 8025d0c:	69b3      	ldr	r3, [r6, #24]
 8025d0e:	b913      	cbnz	r3, 8025d16 <__sfp+0x16>
 8025d10:	4630      	mov	r0, r6
 8025d12:	f7ff ffbd 	bl	8025c90 <__sinit>
 8025d16:	3648      	adds	r6, #72	; 0x48
 8025d18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025d1c:	3b01      	subs	r3, #1
 8025d1e:	d503      	bpl.n	8025d28 <__sfp+0x28>
 8025d20:	6833      	ldr	r3, [r6, #0]
 8025d22:	b30b      	cbz	r3, 8025d68 <__sfp+0x68>
 8025d24:	6836      	ldr	r6, [r6, #0]
 8025d26:	e7f7      	b.n	8025d18 <__sfp+0x18>
 8025d28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025d2c:	b9d5      	cbnz	r5, 8025d64 <__sfp+0x64>
 8025d2e:	4b16      	ldr	r3, [pc, #88]	; (8025d88 <__sfp+0x88>)
 8025d30:	60e3      	str	r3, [r4, #12]
 8025d32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025d36:	6665      	str	r5, [r4, #100]	; 0x64
 8025d38:	f000 fc5a 	bl	80265f0 <__retarget_lock_init_recursive>
 8025d3c:	f7ff ff96 	bl	8025c6c <__sfp_lock_release>
 8025d40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025d44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025d48:	6025      	str	r5, [r4, #0]
 8025d4a:	61a5      	str	r5, [r4, #24]
 8025d4c:	2208      	movs	r2, #8
 8025d4e:	4629      	mov	r1, r5
 8025d50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025d54:	f7fc fa50 	bl	80221f8 <memset>
 8025d58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025d5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025d60:	4620      	mov	r0, r4
 8025d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025d64:	3468      	adds	r4, #104	; 0x68
 8025d66:	e7d9      	b.n	8025d1c <__sfp+0x1c>
 8025d68:	2104      	movs	r1, #4
 8025d6a:	4638      	mov	r0, r7
 8025d6c:	f7ff ff62 	bl	8025c34 <__sfmoreglue>
 8025d70:	4604      	mov	r4, r0
 8025d72:	6030      	str	r0, [r6, #0]
 8025d74:	2800      	cmp	r0, #0
 8025d76:	d1d5      	bne.n	8025d24 <__sfp+0x24>
 8025d78:	f7ff ff78 	bl	8025c6c <__sfp_lock_release>
 8025d7c:	230c      	movs	r3, #12
 8025d7e:	603b      	str	r3, [r7, #0]
 8025d80:	e7ee      	b.n	8025d60 <__sfp+0x60>
 8025d82:	bf00      	nop
 8025d84:	08033640 	.word	0x08033640
 8025d88:	ffff0001 	.word	0xffff0001

08025d8c <_fwalk>:
 8025d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d90:	460f      	mov	r7, r1
 8025d92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025d96:	2600      	movs	r6, #0
 8025d98:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8025d9c:	f1b8 0801 	subs.w	r8, r8, #1
 8025da0:	d505      	bpl.n	8025dae <_fwalk+0x22>
 8025da2:	6824      	ldr	r4, [r4, #0]
 8025da4:	2c00      	cmp	r4, #0
 8025da6:	d1f7      	bne.n	8025d98 <_fwalk+0xc>
 8025da8:	4630      	mov	r0, r6
 8025daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025dae:	89ab      	ldrh	r3, [r5, #12]
 8025db0:	2b01      	cmp	r3, #1
 8025db2:	d906      	bls.n	8025dc2 <_fwalk+0x36>
 8025db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025db8:	3301      	adds	r3, #1
 8025dba:	d002      	beq.n	8025dc2 <_fwalk+0x36>
 8025dbc:	4628      	mov	r0, r5
 8025dbe:	47b8      	blx	r7
 8025dc0:	4306      	orrs	r6, r0
 8025dc2:	3568      	adds	r5, #104	; 0x68
 8025dc4:	e7ea      	b.n	8025d9c <_fwalk+0x10>

08025dc6 <_fwalk_reent>:
 8025dc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025dca:	4606      	mov	r6, r0
 8025dcc:	4688      	mov	r8, r1
 8025dce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025dd2:	2700      	movs	r7, #0
 8025dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8025ddc:	d505      	bpl.n	8025dea <_fwalk_reent+0x24>
 8025dde:	6824      	ldr	r4, [r4, #0]
 8025de0:	2c00      	cmp	r4, #0
 8025de2:	d1f7      	bne.n	8025dd4 <_fwalk_reent+0xe>
 8025de4:	4638      	mov	r0, r7
 8025de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025dea:	89ab      	ldrh	r3, [r5, #12]
 8025dec:	2b01      	cmp	r3, #1
 8025dee:	d907      	bls.n	8025e00 <_fwalk_reent+0x3a>
 8025df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025df4:	3301      	adds	r3, #1
 8025df6:	d003      	beq.n	8025e00 <_fwalk_reent+0x3a>
 8025df8:	4629      	mov	r1, r5
 8025dfa:	4630      	mov	r0, r6
 8025dfc:	47c0      	blx	r8
 8025dfe:	4307      	orrs	r7, r0
 8025e00:	3568      	adds	r5, #104	; 0x68
 8025e02:	e7e9      	b.n	8025dd8 <_fwalk_reent+0x12>

08025e04 <rshift>:
 8025e04:	6903      	ldr	r3, [r0, #16]
 8025e06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8025e0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025e0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8025e12:	f100 0414 	add.w	r4, r0, #20
 8025e16:	dd45      	ble.n	8025ea4 <rshift+0xa0>
 8025e18:	f011 011f 	ands.w	r1, r1, #31
 8025e1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8025e20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8025e24:	d10c      	bne.n	8025e40 <rshift+0x3c>
 8025e26:	f100 0710 	add.w	r7, r0, #16
 8025e2a:	4629      	mov	r1, r5
 8025e2c:	42b1      	cmp	r1, r6
 8025e2e:	d334      	bcc.n	8025e9a <rshift+0x96>
 8025e30:	1a9b      	subs	r3, r3, r2
 8025e32:	009b      	lsls	r3, r3, #2
 8025e34:	1eea      	subs	r2, r5, #3
 8025e36:	4296      	cmp	r6, r2
 8025e38:	bf38      	it	cc
 8025e3a:	2300      	movcc	r3, #0
 8025e3c:	4423      	add	r3, r4
 8025e3e:	e015      	b.n	8025e6c <rshift+0x68>
 8025e40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8025e44:	f1c1 0820 	rsb	r8, r1, #32
 8025e48:	40cf      	lsrs	r7, r1
 8025e4a:	f105 0e04 	add.w	lr, r5, #4
 8025e4e:	46a1      	mov	r9, r4
 8025e50:	4576      	cmp	r6, lr
 8025e52:	46f4      	mov	ip, lr
 8025e54:	d815      	bhi.n	8025e82 <rshift+0x7e>
 8025e56:	1a9b      	subs	r3, r3, r2
 8025e58:	009a      	lsls	r2, r3, #2
 8025e5a:	3a04      	subs	r2, #4
 8025e5c:	3501      	adds	r5, #1
 8025e5e:	42ae      	cmp	r6, r5
 8025e60:	bf38      	it	cc
 8025e62:	2200      	movcc	r2, #0
 8025e64:	18a3      	adds	r3, r4, r2
 8025e66:	50a7      	str	r7, [r4, r2]
 8025e68:	b107      	cbz	r7, 8025e6c <rshift+0x68>
 8025e6a:	3304      	adds	r3, #4
 8025e6c:	1b1a      	subs	r2, r3, r4
 8025e6e:	42a3      	cmp	r3, r4
 8025e70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8025e74:	bf08      	it	eq
 8025e76:	2300      	moveq	r3, #0
 8025e78:	6102      	str	r2, [r0, #16]
 8025e7a:	bf08      	it	eq
 8025e7c:	6143      	streq	r3, [r0, #20]
 8025e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025e82:	f8dc c000 	ldr.w	ip, [ip]
 8025e86:	fa0c fc08 	lsl.w	ip, ip, r8
 8025e8a:	ea4c 0707 	orr.w	r7, ip, r7
 8025e8e:	f849 7b04 	str.w	r7, [r9], #4
 8025e92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8025e96:	40cf      	lsrs	r7, r1
 8025e98:	e7da      	b.n	8025e50 <rshift+0x4c>
 8025e9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8025e9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8025ea2:	e7c3      	b.n	8025e2c <rshift+0x28>
 8025ea4:	4623      	mov	r3, r4
 8025ea6:	e7e1      	b.n	8025e6c <rshift+0x68>

08025ea8 <__hexdig_fun>:
 8025ea8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8025eac:	2b09      	cmp	r3, #9
 8025eae:	d802      	bhi.n	8025eb6 <__hexdig_fun+0xe>
 8025eb0:	3820      	subs	r0, #32
 8025eb2:	b2c0      	uxtb	r0, r0
 8025eb4:	4770      	bx	lr
 8025eb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8025eba:	2b05      	cmp	r3, #5
 8025ebc:	d801      	bhi.n	8025ec2 <__hexdig_fun+0x1a>
 8025ebe:	3847      	subs	r0, #71	; 0x47
 8025ec0:	e7f7      	b.n	8025eb2 <__hexdig_fun+0xa>
 8025ec2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8025ec6:	2b05      	cmp	r3, #5
 8025ec8:	d801      	bhi.n	8025ece <__hexdig_fun+0x26>
 8025eca:	3827      	subs	r0, #39	; 0x27
 8025ecc:	e7f1      	b.n	8025eb2 <__hexdig_fun+0xa>
 8025ece:	2000      	movs	r0, #0
 8025ed0:	4770      	bx	lr
	...

08025ed4 <__gethex>:
 8025ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ed8:	ed2d 8b02 	vpush	{d8}
 8025edc:	b089      	sub	sp, #36	; 0x24
 8025ede:	ee08 0a10 	vmov	s16, r0
 8025ee2:	9304      	str	r3, [sp, #16]
 8025ee4:	4bbc      	ldr	r3, [pc, #752]	; (80261d8 <__gethex+0x304>)
 8025ee6:	681b      	ldr	r3, [r3, #0]
 8025ee8:	9301      	str	r3, [sp, #4]
 8025eea:	4618      	mov	r0, r3
 8025eec:	468b      	mov	fp, r1
 8025eee:	4690      	mov	r8, r2
 8025ef0:	f7da f978 	bl	80001e4 <strlen>
 8025ef4:	9b01      	ldr	r3, [sp, #4]
 8025ef6:	f8db 2000 	ldr.w	r2, [fp]
 8025efa:	4403      	add	r3, r0
 8025efc:	4682      	mov	sl, r0
 8025efe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8025f02:	9305      	str	r3, [sp, #20]
 8025f04:	1c93      	adds	r3, r2, #2
 8025f06:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8025f0a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8025f0e:	32fe      	adds	r2, #254	; 0xfe
 8025f10:	18d1      	adds	r1, r2, r3
 8025f12:	461f      	mov	r7, r3
 8025f14:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025f18:	9100      	str	r1, [sp, #0]
 8025f1a:	2830      	cmp	r0, #48	; 0x30
 8025f1c:	d0f8      	beq.n	8025f10 <__gethex+0x3c>
 8025f1e:	f7ff ffc3 	bl	8025ea8 <__hexdig_fun>
 8025f22:	4604      	mov	r4, r0
 8025f24:	2800      	cmp	r0, #0
 8025f26:	d13a      	bne.n	8025f9e <__gethex+0xca>
 8025f28:	9901      	ldr	r1, [sp, #4]
 8025f2a:	4652      	mov	r2, sl
 8025f2c:	4638      	mov	r0, r7
 8025f2e:	f7fd fc2b 	bl	8023788 <strncmp>
 8025f32:	4605      	mov	r5, r0
 8025f34:	2800      	cmp	r0, #0
 8025f36:	d168      	bne.n	802600a <__gethex+0x136>
 8025f38:	f817 000a 	ldrb.w	r0, [r7, sl]
 8025f3c:	eb07 060a 	add.w	r6, r7, sl
 8025f40:	f7ff ffb2 	bl	8025ea8 <__hexdig_fun>
 8025f44:	2800      	cmp	r0, #0
 8025f46:	d062      	beq.n	802600e <__gethex+0x13a>
 8025f48:	4633      	mov	r3, r6
 8025f4a:	7818      	ldrb	r0, [r3, #0]
 8025f4c:	2830      	cmp	r0, #48	; 0x30
 8025f4e:	461f      	mov	r7, r3
 8025f50:	f103 0301 	add.w	r3, r3, #1
 8025f54:	d0f9      	beq.n	8025f4a <__gethex+0x76>
 8025f56:	f7ff ffa7 	bl	8025ea8 <__hexdig_fun>
 8025f5a:	2301      	movs	r3, #1
 8025f5c:	fab0 f480 	clz	r4, r0
 8025f60:	0964      	lsrs	r4, r4, #5
 8025f62:	4635      	mov	r5, r6
 8025f64:	9300      	str	r3, [sp, #0]
 8025f66:	463a      	mov	r2, r7
 8025f68:	4616      	mov	r6, r2
 8025f6a:	3201      	adds	r2, #1
 8025f6c:	7830      	ldrb	r0, [r6, #0]
 8025f6e:	f7ff ff9b 	bl	8025ea8 <__hexdig_fun>
 8025f72:	2800      	cmp	r0, #0
 8025f74:	d1f8      	bne.n	8025f68 <__gethex+0x94>
 8025f76:	9901      	ldr	r1, [sp, #4]
 8025f78:	4652      	mov	r2, sl
 8025f7a:	4630      	mov	r0, r6
 8025f7c:	f7fd fc04 	bl	8023788 <strncmp>
 8025f80:	b980      	cbnz	r0, 8025fa4 <__gethex+0xd0>
 8025f82:	b94d      	cbnz	r5, 8025f98 <__gethex+0xc4>
 8025f84:	eb06 050a 	add.w	r5, r6, sl
 8025f88:	462a      	mov	r2, r5
 8025f8a:	4616      	mov	r6, r2
 8025f8c:	3201      	adds	r2, #1
 8025f8e:	7830      	ldrb	r0, [r6, #0]
 8025f90:	f7ff ff8a 	bl	8025ea8 <__hexdig_fun>
 8025f94:	2800      	cmp	r0, #0
 8025f96:	d1f8      	bne.n	8025f8a <__gethex+0xb6>
 8025f98:	1bad      	subs	r5, r5, r6
 8025f9a:	00ad      	lsls	r5, r5, #2
 8025f9c:	e004      	b.n	8025fa8 <__gethex+0xd4>
 8025f9e:	2400      	movs	r4, #0
 8025fa0:	4625      	mov	r5, r4
 8025fa2:	e7e0      	b.n	8025f66 <__gethex+0x92>
 8025fa4:	2d00      	cmp	r5, #0
 8025fa6:	d1f7      	bne.n	8025f98 <__gethex+0xc4>
 8025fa8:	7833      	ldrb	r3, [r6, #0]
 8025faa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8025fae:	2b50      	cmp	r3, #80	; 0x50
 8025fb0:	d13b      	bne.n	802602a <__gethex+0x156>
 8025fb2:	7873      	ldrb	r3, [r6, #1]
 8025fb4:	2b2b      	cmp	r3, #43	; 0x2b
 8025fb6:	d02c      	beq.n	8026012 <__gethex+0x13e>
 8025fb8:	2b2d      	cmp	r3, #45	; 0x2d
 8025fba:	d02e      	beq.n	802601a <__gethex+0x146>
 8025fbc:	1c71      	adds	r1, r6, #1
 8025fbe:	f04f 0900 	mov.w	r9, #0
 8025fc2:	7808      	ldrb	r0, [r1, #0]
 8025fc4:	f7ff ff70 	bl	8025ea8 <__hexdig_fun>
 8025fc8:	1e43      	subs	r3, r0, #1
 8025fca:	b2db      	uxtb	r3, r3
 8025fcc:	2b18      	cmp	r3, #24
 8025fce:	d82c      	bhi.n	802602a <__gethex+0x156>
 8025fd0:	f1a0 0210 	sub.w	r2, r0, #16
 8025fd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8025fd8:	f7ff ff66 	bl	8025ea8 <__hexdig_fun>
 8025fdc:	1e43      	subs	r3, r0, #1
 8025fde:	b2db      	uxtb	r3, r3
 8025fe0:	2b18      	cmp	r3, #24
 8025fe2:	d91d      	bls.n	8026020 <__gethex+0x14c>
 8025fe4:	f1b9 0f00 	cmp.w	r9, #0
 8025fe8:	d000      	beq.n	8025fec <__gethex+0x118>
 8025fea:	4252      	negs	r2, r2
 8025fec:	4415      	add	r5, r2
 8025fee:	f8cb 1000 	str.w	r1, [fp]
 8025ff2:	b1e4      	cbz	r4, 802602e <__gethex+0x15a>
 8025ff4:	9b00      	ldr	r3, [sp, #0]
 8025ff6:	2b00      	cmp	r3, #0
 8025ff8:	bf14      	ite	ne
 8025ffa:	2700      	movne	r7, #0
 8025ffc:	2706      	moveq	r7, #6
 8025ffe:	4638      	mov	r0, r7
 8026000:	b009      	add	sp, #36	; 0x24
 8026002:	ecbd 8b02 	vpop	{d8}
 8026006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802600a:	463e      	mov	r6, r7
 802600c:	4625      	mov	r5, r4
 802600e:	2401      	movs	r4, #1
 8026010:	e7ca      	b.n	8025fa8 <__gethex+0xd4>
 8026012:	f04f 0900 	mov.w	r9, #0
 8026016:	1cb1      	adds	r1, r6, #2
 8026018:	e7d3      	b.n	8025fc2 <__gethex+0xee>
 802601a:	f04f 0901 	mov.w	r9, #1
 802601e:	e7fa      	b.n	8026016 <__gethex+0x142>
 8026020:	230a      	movs	r3, #10
 8026022:	fb03 0202 	mla	r2, r3, r2, r0
 8026026:	3a10      	subs	r2, #16
 8026028:	e7d4      	b.n	8025fd4 <__gethex+0x100>
 802602a:	4631      	mov	r1, r6
 802602c:	e7df      	b.n	8025fee <__gethex+0x11a>
 802602e:	1bf3      	subs	r3, r6, r7
 8026030:	3b01      	subs	r3, #1
 8026032:	4621      	mov	r1, r4
 8026034:	2b07      	cmp	r3, #7
 8026036:	dc0b      	bgt.n	8026050 <__gethex+0x17c>
 8026038:	ee18 0a10 	vmov	r0, s16
 802603c:	f000 fb72 	bl	8026724 <_Balloc>
 8026040:	4604      	mov	r4, r0
 8026042:	b940      	cbnz	r0, 8026056 <__gethex+0x182>
 8026044:	4b65      	ldr	r3, [pc, #404]	; (80261dc <__gethex+0x308>)
 8026046:	4602      	mov	r2, r0
 8026048:	21de      	movs	r1, #222	; 0xde
 802604a:	4865      	ldr	r0, [pc, #404]	; (80261e0 <__gethex+0x30c>)
 802604c:	f7fe fe38 	bl	8024cc0 <__assert_func>
 8026050:	3101      	adds	r1, #1
 8026052:	105b      	asrs	r3, r3, #1
 8026054:	e7ee      	b.n	8026034 <__gethex+0x160>
 8026056:	f100 0914 	add.w	r9, r0, #20
 802605a:	f04f 0b00 	mov.w	fp, #0
 802605e:	f1ca 0301 	rsb	r3, sl, #1
 8026062:	f8cd 9008 	str.w	r9, [sp, #8]
 8026066:	f8cd b000 	str.w	fp, [sp]
 802606a:	9306      	str	r3, [sp, #24]
 802606c:	42b7      	cmp	r7, r6
 802606e:	d340      	bcc.n	80260f2 <__gethex+0x21e>
 8026070:	9802      	ldr	r0, [sp, #8]
 8026072:	9b00      	ldr	r3, [sp, #0]
 8026074:	f840 3b04 	str.w	r3, [r0], #4
 8026078:	eba0 0009 	sub.w	r0, r0, r9
 802607c:	1080      	asrs	r0, r0, #2
 802607e:	0146      	lsls	r6, r0, #5
 8026080:	6120      	str	r0, [r4, #16]
 8026082:	4618      	mov	r0, r3
 8026084:	f000 fc44 	bl	8026910 <__hi0bits>
 8026088:	1a30      	subs	r0, r6, r0
 802608a:	f8d8 6000 	ldr.w	r6, [r8]
 802608e:	42b0      	cmp	r0, r6
 8026090:	dd63      	ble.n	802615a <__gethex+0x286>
 8026092:	1b87      	subs	r7, r0, r6
 8026094:	4639      	mov	r1, r7
 8026096:	4620      	mov	r0, r4
 8026098:	f000 ffde 	bl	8027058 <__any_on>
 802609c:	4682      	mov	sl, r0
 802609e:	b1a8      	cbz	r0, 80260cc <__gethex+0x1f8>
 80260a0:	1e7b      	subs	r3, r7, #1
 80260a2:	1159      	asrs	r1, r3, #5
 80260a4:	f003 021f 	and.w	r2, r3, #31
 80260a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80260ac:	f04f 0a01 	mov.w	sl, #1
 80260b0:	fa0a f202 	lsl.w	r2, sl, r2
 80260b4:	420a      	tst	r2, r1
 80260b6:	d009      	beq.n	80260cc <__gethex+0x1f8>
 80260b8:	4553      	cmp	r3, sl
 80260ba:	dd05      	ble.n	80260c8 <__gethex+0x1f4>
 80260bc:	1eb9      	subs	r1, r7, #2
 80260be:	4620      	mov	r0, r4
 80260c0:	f000 ffca 	bl	8027058 <__any_on>
 80260c4:	2800      	cmp	r0, #0
 80260c6:	d145      	bne.n	8026154 <__gethex+0x280>
 80260c8:	f04f 0a02 	mov.w	sl, #2
 80260cc:	4639      	mov	r1, r7
 80260ce:	4620      	mov	r0, r4
 80260d0:	f7ff fe98 	bl	8025e04 <rshift>
 80260d4:	443d      	add	r5, r7
 80260d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80260da:	42ab      	cmp	r3, r5
 80260dc:	da4c      	bge.n	8026178 <__gethex+0x2a4>
 80260de:	ee18 0a10 	vmov	r0, s16
 80260e2:	4621      	mov	r1, r4
 80260e4:	f000 fb5e 	bl	80267a4 <_Bfree>
 80260e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80260ea:	2300      	movs	r3, #0
 80260ec:	6013      	str	r3, [r2, #0]
 80260ee:	27a3      	movs	r7, #163	; 0xa3
 80260f0:	e785      	b.n	8025ffe <__gethex+0x12a>
 80260f2:	1e73      	subs	r3, r6, #1
 80260f4:	9a05      	ldr	r2, [sp, #20]
 80260f6:	9303      	str	r3, [sp, #12]
 80260f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80260fc:	4293      	cmp	r3, r2
 80260fe:	d019      	beq.n	8026134 <__gethex+0x260>
 8026100:	f1bb 0f20 	cmp.w	fp, #32
 8026104:	d107      	bne.n	8026116 <__gethex+0x242>
 8026106:	9b02      	ldr	r3, [sp, #8]
 8026108:	9a00      	ldr	r2, [sp, #0]
 802610a:	f843 2b04 	str.w	r2, [r3], #4
 802610e:	9302      	str	r3, [sp, #8]
 8026110:	2300      	movs	r3, #0
 8026112:	9300      	str	r3, [sp, #0]
 8026114:	469b      	mov	fp, r3
 8026116:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802611a:	f7ff fec5 	bl	8025ea8 <__hexdig_fun>
 802611e:	9b00      	ldr	r3, [sp, #0]
 8026120:	f000 000f 	and.w	r0, r0, #15
 8026124:	fa00 f00b 	lsl.w	r0, r0, fp
 8026128:	4303      	orrs	r3, r0
 802612a:	9300      	str	r3, [sp, #0]
 802612c:	f10b 0b04 	add.w	fp, fp, #4
 8026130:	9b03      	ldr	r3, [sp, #12]
 8026132:	e00d      	b.n	8026150 <__gethex+0x27c>
 8026134:	9b03      	ldr	r3, [sp, #12]
 8026136:	9a06      	ldr	r2, [sp, #24]
 8026138:	4413      	add	r3, r2
 802613a:	42bb      	cmp	r3, r7
 802613c:	d3e0      	bcc.n	8026100 <__gethex+0x22c>
 802613e:	4618      	mov	r0, r3
 8026140:	9901      	ldr	r1, [sp, #4]
 8026142:	9307      	str	r3, [sp, #28]
 8026144:	4652      	mov	r2, sl
 8026146:	f7fd fb1f 	bl	8023788 <strncmp>
 802614a:	9b07      	ldr	r3, [sp, #28]
 802614c:	2800      	cmp	r0, #0
 802614e:	d1d7      	bne.n	8026100 <__gethex+0x22c>
 8026150:	461e      	mov	r6, r3
 8026152:	e78b      	b.n	802606c <__gethex+0x198>
 8026154:	f04f 0a03 	mov.w	sl, #3
 8026158:	e7b8      	b.n	80260cc <__gethex+0x1f8>
 802615a:	da0a      	bge.n	8026172 <__gethex+0x29e>
 802615c:	1a37      	subs	r7, r6, r0
 802615e:	4621      	mov	r1, r4
 8026160:	ee18 0a10 	vmov	r0, s16
 8026164:	463a      	mov	r2, r7
 8026166:	f000 fd39 	bl	8026bdc <__lshift>
 802616a:	1bed      	subs	r5, r5, r7
 802616c:	4604      	mov	r4, r0
 802616e:	f100 0914 	add.w	r9, r0, #20
 8026172:	f04f 0a00 	mov.w	sl, #0
 8026176:	e7ae      	b.n	80260d6 <__gethex+0x202>
 8026178:	f8d8 0004 	ldr.w	r0, [r8, #4]
 802617c:	42a8      	cmp	r0, r5
 802617e:	dd72      	ble.n	8026266 <__gethex+0x392>
 8026180:	1b45      	subs	r5, r0, r5
 8026182:	42ae      	cmp	r6, r5
 8026184:	dc36      	bgt.n	80261f4 <__gethex+0x320>
 8026186:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802618a:	2b02      	cmp	r3, #2
 802618c:	d02a      	beq.n	80261e4 <__gethex+0x310>
 802618e:	2b03      	cmp	r3, #3
 8026190:	d02c      	beq.n	80261ec <__gethex+0x318>
 8026192:	2b01      	cmp	r3, #1
 8026194:	d115      	bne.n	80261c2 <__gethex+0x2ee>
 8026196:	42ae      	cmp	r6, r5
 8026198:	d113      	bne.n	80261c2 <__gethex+0x2ee>
 802619a:	2e01      	cmp	r6, #1
 802619c:	d10b      	bne.n	80261b6 <__gethex+0x2e2>
 802619e:	9a04      	ldr	r2, [sp, #16]
 80261a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80261a4:	6013      	str	r3, [r2, #0]
 80261a6:	2301      	movs	r3, #1
 80261a8:	6123      	str	r3, [r4, #16]
 80261aa:	f8c9 3000 	str.w	r3, [r9]
 80261ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80261b0:	2762      	movs	r7, #98	; 0x62
 80261b2:	601c      	str	r4, [r3, #0]
 80261b4:	e723      	b.n	8025ffe <__gethex+0x12a>
 80261b6:	1e71      	subs	r1, r6, #1
 80261b8:	4620      	mov	r0, r4
 80261ba:	f000 ff4d 	bl	8027058 <__any_on>
 80261be:	2800      	cmp	r0, #0
 80261c0:	d1ed      	bne.n	802619e <__gethex+0x2ca>
 80261c2:	ee18 0a10 	vmov	r0, s16
 80261c6:	4621      	mov	r1, r4
 80261c8:	f000 faec 	bl	80267a4 <_Bfree>
 80261cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80261ce:	2300      	movs	r3, #0
 80261d0:	6013      	str	r3, [r2, #0]
 80261d2:	2750      	movs	r7, #80	; 0x50
 80261d4:	e713      	b.n	8025ffe <__gethex+0x12a>
 80261d6:	bf00      	nop
 80261d8:	080339b8 	.word	0x080339b8
 80261dc:	080338dd 	.word	0x080338dd
 80261e0:	08033950 	.word	0x08033950
 80261e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80261e6:	2b00      	cmp	r3, #0
 80261e8:	d1eb      	bne.n	80261c2 <__gethex+0x2ee>
 80261ea:	e7d8      	b.n	802619e <__gethex+0x2ca>
 80261ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	d1d5      	bne.n	802619e <__gethex+0x2ca>
 80261f2:	e7e6      	b.n	80261c2 <__gethex+0x2ee>
 80261f4:	1e6f      	subs	r7, r5, #1
 80261f6:	f1ba 0f00 	cmp.w	sl, #0
 80261fa:	d131      	bne.n	8026260 <__gethex+0x38c>
 80261fc:	b127      	cbz	r7, 8026208 <__gethex+0x334>
 80261fe:	4639      	mov	r1, r7
 8026200:	4620      	mov	r0, r4
 8026202:	f000 ff29 	bl	8027058 <__any_on>
 8026206:	4682      	mov	sl, r0
 8026208:	117b      	asrs	r3, r7, #5
 802620a:	2101      	movs	r1, #1
 802620c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026210:	f007 071f 	and.w	r7, r7, #31
 8026214:	fa01 f707 	lsl.w	r7, r1, r7
 8026218:	421f      	tst	r7, r3
 802621a:	4629      	mov	r1, r5
 802621c:	4620      	mov	r0, r4
 802621e:	bf18      	it	ne
 8026220:	f04a 0a02 	orrne.w	sl, sl, #2
 8026224:	1b76      	subs	r6, r6, r5
 8026226:	f7ff fded 	bl	8025e04 <rshift>
 802622a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802622e:	2702      	movs	r7, #2
 8026230:	f1ba 0f00 	cmp.w	sl, #0
 8026234:	d048      	beq.n	80262c8 <__gethex+0x3f4>
 8026236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802623a:	2b02      	cmp	r3, #2
 802623c:	d015      	beq.n	802626a <__gethex+0x396>
 802623e:	2b03      	cmp	r3, #3
 8026240:	d017      	beq.n	8026272 <__gethex+0x39e>
 8026242:	2b01      	cmp	r3, #1
 8026244:	d109      	bne.n	802625a <__gethex+0x386>
 8026246:	f01a 0f02 	tst.w	sl, #2
 802624a:	d006      	beq.n	802625a <__gethex+0x386>
 802624c:	f8d9 0000 	ldr.w	r0, [r9]
 8026250:	ea4a 0a00 	orr.w	sl, sl, r0
 8026254:	f01a 0f01 	tst.w	sl, #1
 8026258:	d10e      	bne.n	8026278 <__gethex+0x3a4>
 802625a:	f047 0710 	orr.w	r7, r7, #16
 802625e:	e033      	b.n	80262c8 <__gethex+0x3f4>
 8026260:	f04f 0a01 	mov.w	sl, #1
 8026264:	e7d0      	b.n	8026208 <__gethex+0x334>
 8026266:	2701      	movs	r7, #1
 8026268:	e7e2      	b.n	8026230 <__gethex+0x35c>
 802626a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802626c:	f1c3 0301 	rsb	r3, r3, #1
 8026270:	9315      	str	r3, [sp, #84]	; 0x54
 8026272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026274:	2b00      	cmp	r3, #0
 8026276:	d0f0      	beq.n	802625a <__gethex+0x386>
 8026278:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802627c:	f104 0314 	add.w	r3, r4, #20
 8026280:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8026284:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8026288:	f04f 0c00 	mov.w	ip, #0
 802628c:	4618      	mov	r0, r3
 802628e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026292:	f1b2 3fff 	cmp.w	r2, #4294967295
 8026296:	d01c      	beq.n	80262d2 <__gethex+0x3fe>
 8026298:	3201      	adds	r2, #1
 802629a:	6002      	str	r2, [r0, #0]
 802629c:	2f02      	cmp	r7, #2
 802629e:	f104 0314 	add.w	r3, r4, #20
 80262a2:	d13f      	bne.n	8026324 <__gethex+0x450>
 80262a4:	f8d8 2000 	ldr.w	r2, [r8]
 80262a8:	3a01      	subs	r2, #1
 80262aa:	42b2      	cmp	r2, r6
 80262ac:	d10a      	bne.n	80262c4 <__gethex+0x3f0>
 80262ae:	1171      	asrs	r1, r6, #5
 80262b0:	2201      	movs	r2, #1
 80262b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80262b6:	f006 061f 	and.w	r6, r6, #31
 80262ba:	fa02 f606 	lsl.w	r6, r2, r6
 80262be:	421e      	tst	r6, r3
 80262c0:	bf18      	it	ne
 80262c2:	4617      	movne	r7, r2
 80262c4:	f047 0720 	orr.w	r7, r7, #32
 80262c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80262ca:	601c      	str	r4, [r3, #0]
 80262cc:	9b04      	ldr	r3, [sp, #16]
 80262ce:	601d      	str	r5, [r3, #0]
 80262d0:	e695      	b.n	8025ffe <__gethex+0x12a>
 80262d2:	4299      	cmp	r1, r3
 80262d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80262d8:	d8d8      	bhi.n	802628c <__gethex+0x3b8>
 80262da:	68a3      	ldr	r3, [r4, #8]
 80262dc:	459b      	cmp	fp, r3
 80262de:	db19      	blt.n	8026314 <__gethex+0x440>
 80262e0:	6861      	ldr	r1, [r4, #4]
 80262e2:	ee18 0a10 	vmov	r0, s16
 80262e6:	3101      	adds	r1, #1
 80262e8:	f000 fa1c 	bl	8026724 <_Balloc>
 80262ec:	4681      	mov	r9, r0
 80262ee:	b918      	cbnz	r0, 80262f8 <__gethex+0x424>
 80262f0:	4b1a      	ldr	r3, [pc, #104]	; (802635c <__gethex+0x488>)
 80262f2:	4602      	mov	r2, r0
 80262f4:	2184      	movs	r1, #132	; 0x84
 80262f6:	e6a8      	b.n	802604a <__gethex+0x176>
 80262f8:	6922      	ldr	r2, [r4, #16]
 80262fa:	3202      	adds	r2, #2
 80262fc:	f104 010c 	add.w	r1, r4, #12
 8026300:	0092      	lsls	r2, r2, #2
 8026302:	300c      	adds	r0, #12
 8026304:	f7fb ff50 	bl	80221a8 <memcpy>
 8026308:	4621      	mov	r1, r4
 802630a:	ee18 0a10 	vmov	r0, s16
 802630e:	f000 fa49 	bl	80267a4 <_Bfree>
 8026312:	464c      	mov	r4, r9
 8026314:	6923      	ldr	r3, [r4, #16]
 8026316:	1c5a      	adds	r2, r3, #1
 8026318:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802631c:	6122      	str	r2, [r4, #16]
 802631e:	2201      	movs	r2, #1
 8026320:	615a      	str	r2, [r3, #20]
 8026322:	e7bb      	b.n	802629c <__gethex+0x3c8>
 8026324:	6922      	ldr	r2, [r4, #16]
 8026326:	455a      	cmp	r2, fp
 8026328:	dd0b      	ble.n	8026342 <__gethex+0x46e>
 802632a:	2101      	movs	r1, #1
 802632c:	4620      	mov	r0, r4
 802632e:	f7ff fd69 	bl	8025e04 <rshift>
 8026332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026336:	3501      	adds	r5, #1
 8026338:	42ab      	cmp	r3, r5
 802633a:	f6ff aed0 	blt.w	80260de <__gethex+0x20a>
 802633e:	2701      	movs	r7, #1
 8026340:	e7c0      	b.n	80262c4 <__gethex+0x3f0>
 8026342:	f016 061f 	ands.w	r6, r6, #31
 8026346:	d0fa      	beq.n	802633e <__gethex+0x46a>
 8026348:	449a      	add	sl, r3
 802634a:	f1c6 0620 	rsb	r6, r6, #32
 802634e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8026352:	f000 fadd 	bl	8026910 <__hi0bits>
 8026356:	42b0      	cmp	r0, r6
 8026358:	dbe7      	blt.n	802632a <__gethex+0x456>
 802635a:	e7f0      	b.n	802633e <__gethex+0x46a>
 802635c:	080338dd 	.word	0x080338dd

08026360 <L_shift>:
 8026360:	f1c2 0208 	rsb	r2, r2, #8
 8026364:	0092      	lsls	r2, r2, #2
 8026366:	b570      	push	{r4, r5, r6, lr}
 8026368:	f1c2 0620 	rsb	r6, r2, #32
 802636c:	6843      	ldr	r3, [r0, #4]
 802636e:	6804      	ldr	r4, [r0, #0]
 8026370:	fa03 f506 	lsl.w	r5, r3, r6
 8026374:	432c      	orrs	r4, r5
 8026376:	40d3      	lsrs	r3, r2
 8026378:	6004      	str	r4, [r0, #0]
 802637a:	f840 3f04 	str.w	r3, [r0, #4]!
 802637e:	4288      	cmp	r0, r1
 8026380:	d3f4      	bcc.n	802636c <L_shift+0xc>
 8026382:	bd70      	pop	{r4, r5, r6, pc}

08026384 <__match>:
 8026384:	b530      	push	{r4, r5, lr}
 8026386:	6803      	ldr	r3, [r0, #0]
 8026388:	3301      	adds	r3, #1
 802638a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802638e:	b914      	cbnz	r4, 8026396 <__match+0x12>
 8026390:	6003      	str	r3, [r0, #0]
 8026392:	2001      	movs	r0, #1
 8026394:	bd30      	pop	{r4, r5, pc}
 8026396:	f813 2b01 	ldrb.w	r2, [r3], #1
 802639a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802639e:	2d19      	cmp	r5, #25
 80263a0:	bf98      	it	ls
 80263a2:	3220      	addls	r2, #32
 80263a4:	42a2      	cmp	r2, r4
 80263a6:	d0f0      	beq.n	802638a <__match+0x6>
 80263a8:	2000      	movs	r0, #0
 80263aa:	e7f3      	b.n	8026394 <__match+0x10>

080263ac <__hexnan>:
 80263ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80263b0:	680b      	ldr	r3, [r1, #0]
 80263b2:	6801      	ldr	r1, [r0, #0]
 80263b4:	115e      	asrs	r6, r3, #5
 80263b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80263ba:	f013 031f 	ands.w	r3, r3, #31
 80263be:	b087      	sub	sp, #28
 80263c0:	bf18      	it	ne
 80263c2:	3604      	addne	r6, #4
 80263c4:	2500      	movs	r5, #0
 80263c6:	1f37      	subs	r7, r6, #4
 80263c8:	4682      	mov	sl, r0
 80263ca:	4690      	mov	r8, r2
 80263cc:	9301      	str	r3, [sp, #4]
 80263ce:	f846 5c04 	str.w	r5, [r6, #-4]
 80263d2:	46b9      	mov	r9, r7
 80263d4:	463c      	mov	r4, r7
 80263d6:	9502      	str	r5, [sp, #8]
 80263d8:	46ab      	mov	fp, r5
 80263da:	784a      	ldrb	r2, [r1, #1]
 80263dc:	1c4b      	adds	r3, r1, #1
 80263de:	9303      	str	r3, [sp, #12]
 80263e0:	b342      	cbz	r2, 8026434 <__hexnan+0x88>
 80263e2:	4610      	mov	r0, r2
 80263e4:	9105      	str	r1, [sp, #20]
 80263e6:	9204      	str	r2, [sp, #16]
 80263e8:	f7ff fd5e 	bl	8025ea8 <__hexdig_fun>
 80263ec:	2800      	cmp	r0, #0
 80263ee:	d14f      	bne.n	8026490 <__hexnan+0xe4>
 80263f0:	9a04      	ldr	r2, [sp, #16]
 80263f2:	9905      	ldr	r1, [sp, #20]
 80263f4:	2a20      	cmp	r2, #32
 80263f6:	d818      	bhi.n	802642a <__hexnan+0x7e>
 80263f8:	9b02      	ldr	r3, [sp, #8]
 80263fa:	459b      	cmp	fp, r3
 80263fc:	dd13      	ble.n	8026426 <__hexnan+0x7a>
 80263fe:	454c      	cmp	r4, r9
 8026400:	d206      	bcs.n	8026410 <__hexnan+0x64>
 8026402:	2d07      	cmp	r5, #7
 8026404:	dc04      	bgt.n	8026410 <__hexnan+0x64>
 8026406:	462a      	mov	r2, r5
 8026408:	4649      	mov	r1, r9
 802640a:	4620      	mov	r0, r4
 802640c:	f7ff ffa8 	bl	8026360 <L_shift>
 8026410:	4544      	cmp	r4, r8
 8026412:	d950      	bls.n	80264b6 <__hexnan+0x10a>
 8026414:	2300      	movs	r3, #0
 8026416:	f1a4 0904 	sub.w	r9, r4, #4
 802641a:	f844 3c04 	str.w	r3, [r4, #-4]
 802641e:	f8cd b008 	str.w	fp, [sp, #8]
 8026422:	464c      	mov	r4, r9
 8026424:	461d      	mov	r5, r3
 8026426:	9903      	ldr	r1, [sp, #12]
 8026428:	e7d7      	b.n	80263da <__hexnan+0x2e>
 802642a:	2a29      	cmp	r2, #41	; 0x29
 802642c:	d156      	bne.n	80264dc <__hexnan+0x130>
 802642e:	3102      	adds	r1, #2
 8026430:	f8ca 1000 	str.w	r1, [sl]
 8026434:	f1bb 0f00 	cmp.w	fp, #0
 8026438:	d050      	beq.n	80264dc <__hexnan+0x130>
 802643a:	454c      	cmp	r4, r9
 802643c:	d206      	bcs.n	802644c <__hexnan+0xa0>
 802643e:	2d07      	cmp	r5, #7
 8026440:	dc04      	bgt.n	802644c <__hexnan+0xa0>
 8026442:	462a      	mov	r2, r5
 8026444:	4649      	mov	r1, r9
 8026446:	4620      	mov	r0, r4
 8026448:	f7ff ff8a 	bl	8026360 <L_shift>
 802644c:	4544      	cmp	r4, r8
 802644e:	d934      	bls.n	80264ba <__hexnan+0x10e>
 8026450:	f1a8 0204 	sub.w	r2, r8, #4
 8026454:	4623      	mov	r3, r4
 8026456:	f853 1b04 	ldr.w	r1, [r3], #4
 802645a:	f842 1f04 	str.w	r1, [r2, #4]!
 802645e:	429f      	cmp	r7, r3
 8026460:	d2f9      	bcs.n	8026456 <__hexnan+0xaa>
 8026462:	1b3b      	subs	r3, r7, r4
 8026464:	f023 0303 	bic.w	r3, r3, #3
 8026468:	3304      	adds	r3, #4
 802646a:	3401      	adds	r4, #1
 802646c:	3e03      	subs	r6, #3
 802646e:	42b4      	cmp	r4, r6
 8026470:	bf88      	it	hi
 8026472:	2304      	movhi	r3, #4
 8026474:	4443      	add	r3, r8
 8026476:	2200      	movs	r2, #0
 8026478:	f843 2b04 	str.w	r2, [r3], #4
 802647c:	429f      	cmp	r7, r3
 802647e:	d2fb      	bcs.n	8026478 <__hexnan+0xcc>
 8026480:	683b      	ldr	r3, [r7, #0]
 8026482:	b91b      	cbnz	r3, 802648c <__hexnan+0xe0>
 8026484:	4547      	cmp	r7, r8
 8026486:	d127      	bne.n	80264d8 <__hexnan+0x12c>
 8026488:	2301      	movs	r3, #1
 802648a:	603b      	str	r3, [r7, #0]
 802648c:	2005      	movs	r0, #5
 802648e:	e026      	b.n	80264de <__hexnan+0x132>
 8026490:	3501      	adds	r5, #1
 8026492:	2d08      	cmp	r5, #8
 8026494:	f10b 0b01 	add.w	fp, fp, #1
 8026498:	dd06      	ble.n	80264a8 <__hexnan+0xfc>
 802649a:	4544      	cmp	r4, r8
 802649c:	d9c3      	bls.n	8026426 <__hexnan+0x7a>
 802649e:	2300      	movs	r3, #0
 80264a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80264a4:	2501      	movs	r5, #1
 80264a6:	3c04      	subs	r4, #4
 80264a8:	6822      	ldr	r2, [r4, #0]
 80264aa:	f000 000f 	and.w	r0, r0, #15
 80264ae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80264b2:	6022      	str	r2, [r4, #0]
 80264b4:	e7b7      	b.n	8026426 <__hexnan+0x7a>
 80264b6:	2508      	movs	r5, #8
 80264b8:	e7b5      	b.n	8026426 <__hexnan+0x7a>
 80264ba:	9b01      	ldr	r3, [sp, #4]
 80264bc:	2b00      	cmp	r3, #0
 80264be:	d0df      	beq.n	8026480 <__hexnan+0xd4>
 80264c0:	f04f 32ff 	mov.w	r2, #4294967295
 80264c4:	f1c3 0320 	rsb	r3, r3, #32
 80264c8:	fa22 f303 	lsr.w	r3, r2, r3
 80264cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80264d0:	401a      	ands	r2, r3
 80264d2:	f846 2c04 	str.w	r2, [r6, #-4]
 80264d6:	e7d3      	b.n	8026480 <__hexnan+0xd4>
 80264d8:	3f04      	subs	r7, #4
 80264da:	e7d1      	b.n	8026480 <__hexnan+0xd4>
 80264dc:	2004      	movs	r0, #4
 80264de:	b007      	add	sp, #28
 80264e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080264e4 <_getc_r>:
 80264e4:	b538      	push	{r3, r4, r5, lr}
 80264e6:	460c      	mov	r4, r1
 80264e8:	4605      	mov	r5, r0
 80264ea:	b118      	cbz	r0, 80264f4 <_getc_r+0x10>
 80264ec:	6983      	ldr	r3, [r0, #24]
 80264ee:	b90b      	cbnz	r3, 80264f4 <_getc_r+0x10>
 80264f0:	f7ff fbce 	bl	8025c90 <__sinit>
 80264f4:	4b18      	ldr	r3, [pc, #96]	; (8026558 <_getc_r+0x74>)
 80264f6:	429c      	cmp	r4, r3
 80264f8:	d11e      	bne.n	8026538 <_getc_r+0x54>
 80264fa:	686c      	ldr	r4, [r5, #4]
 80264fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80264fe:	07d8      	lsls	r0, r3, #31
 8026500:	d405      	bmi.n	802650e <_getc_r+0x2a>
 8026502:	89a3      	ldrh	r3, [r4, #12]
 8026504:	0599      	lsls	r1, r3, #22
 8026506:	d402      	bmi.n	802650e <_getc_r+0x2a>
 8026508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802650a:	f000 f873 	bl	80265f4 <__retarget_lock_acquire_recursive>
 802650e:	6863      	ldr	r3, [r4, #4]
 8026510:	3b01      	subs	r3, #1
 8026512:	2b00      	cmp	r3, #0
 8026514:	6063      	str	r3, [r4, #4]
 8026516:	da19      	bge.n	802654c <_getc_r+0x68>
 8026518:	4628      	mov	r0, r5
 802651a:	4621      	mov	r1, r4
 802651c:	f001 fab6 	bl	8027a8c <__srget_r>
 8026520:	4605      	mov	r5, r0
 8026522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026524:	07da      	lsls	r2, r3, #31
 8026526:	d405      	bmi.n	8026534 <_getc_r+0x50>
 8026528:	89a3      	ldrh	r3, [r4, #12]
 802652a:	059b      	lsls	r3, r3, #22
 802652c:	d402      	bmi.n	8026534 <_getc_r+0x50>
 802652e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026530:	f000 f862 	bl	80265f8 <__retarget_lock_release_recursive>
 8026534:	4628      	mov	r0, r5
 8026536:	bd38      	pop	{r3, r4, r5, pc}
 8026538:	4b08      	ldr	r3, [pc, #32]	; (802655c <_getc_r+0x78>)
 802653a:	429c      	cmp	r4, r3
 802653c:	d101      	bne.n	8026542 <_getc_r+0x5e>
 802653e:	68ac      	ldr	r4, [r5, #8]
 8026540:	e7dc      	b.n	80264fc <_getc_r+0x18>
 8026542:	4b07      	ldr	r3, [pc, #28]	; (8026560 <_getc_r+0x7c>)
 8026544:	429c      	cmp	r4, r3
 8026546:	bf08      	it	eq
 8026548:	68ec      	ldreq	r4, [r5, #12]
 802654a:	e7d7      	b.n	80264fc <_getc_r+0x18>
 802654c:	6823      	ldr	r3, [r4, #0]
 802654e:	1c5a      	adds	r2, r3, #1
 8026550:	6022      	str	r2, [r4, #0]
 8026552:	781d      	ldrb	r5, [r3, #0]
 8026554:	e7e5      	b.n	8026522 <_getc_r+0x3e>
 8026556:	bf00      	nop
 8026558:	08033910 	.word	0x08033910
 802655c:	08033930 	.word	0x08033930
 8026560:	080338f0 	.word	0x080338f0

08026564 <_findenv_r>:
 8026564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026568:	4607      	mov	r7, r0
 802656a:	4689      	mov	r9, r1
 802656c:	4616      	mov	r6, r2
 802656e:	f001 fbd3 	bl	8027d18 <__env_lock>
 8026572:	4b18      	ldr	r3, [pc, #96]	; (80265d4 <_findenv_r+0x70>)
 8026574:	681c      	ldr	r4, [r3, #0]
 8026576:	469a      	mov	sl, r3
 8026578:	b134      	cbz	r4, 8026588 <_findenv_r+0x24>
 802657a:	464b      	mov	r3, r9
 802657c:	4698      	mov	r8, r3
 802657e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8026582:	b139      	cbz	r1, 8026594 <_findenv_r+0x30>
 8026584:	293d      	cmp	r1, #61	; 0x3d
 8026586:	d1f9      	bne.n	802657c <_findenv_r+0x18>
 8026588:	4638      	mov	r0, r7
 802658a:	f001 fbcb 	bl	8027d24 <__env_unlock>
 802658e:	2000      	movs	r0, #0
 8026590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026594:	eba8 0809 	sub.w	r8, r8, r9
 8026598:	46a3      	mov	fp, r4
 802659a:	f854 0b04 	ldr.w	r0, [r4], #4
 802659e:	2800      	cmp	r0, #0
 80265a0:	d0f2      	beq.n	8026588 <_findenv_r+0x24>
 80265a2:	4642      	mov	r2, r8
 80265a4:	4649      	mov	r1, r9
 80265a6:	f7fd f8ef 	bl	8023788 <strncmp>
 80265aa:	2800      	cmp	r0, #0
 80265ac:	d1f4      	bne.n	8026598 <_findenv_r+0x34>
 80265ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80265b2:	eb03 0508 	add.w	r5, r3, r8
 80265b6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80265ba:	2b3d      	cmp	r3, #61	; 0x3d
 80265bc:	d1ec      	bne.n	8026598 <_findenv_r+0x34>
 80265be:	f8da 3000 	ldr.w	r3, [sl]
 80265c2:	ebab 0303 	sub.w	r3, fp, r3
 80265c6:	109b      	asrs	r3, r3, #2
 80265c8:	4638      	mov	r0, r7
 80265ca:	6033      	str	r3, [r6, #0]
 80265cc:	f001 fbaa 	bl	8027d24 <__env_unlock>
 80265d0:	1c68      	adds	r0, r5, #1
 80265d2:	e7dd      	b.n	8026590 <_findenv_r+0x2c>
 80265d4:	20000020 	.word	0x20000020

080265d8 <_getenv_r>:
 80265d8:	b507      	push	{r0, r1, r2, lr}
 80265da:	aa01      	add	r2, sp, #4
 80265dc:	f7ff ffc2 	bl	8026564 <_findenv_r>
 80265e0:	b003      	add	sp, #12
 80265e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080265e8 <__gettzinfo>:
 80265e8:	4800      	ldr	r0, [pc, #0]	; (80265ec <__gettzinfo+0x4>)
 80265ea:	4770      	bx	lr
 80265ec:	200005e8 	.word	0x200005e8

080265f0 <__retarget_lock_init_recursive>:
 80265f0:	4770      	bx	lr

080265f2 <__retarget_lock_acquire>:
 80265f2:	4770      	bx	lr

080265f4 <__retarget_lock_acquire_recursive>:
 80265f4:	4770      	bx	lr

080265f6 <__retarget_lock_release>:
 80265f6:	4770      	bx	lr

080265f8 <__retarget_lock_release_recursive>:
 80265f8:	4770      	bx	lr
	...

080265fc <_lseek_r>:
 80265fc:	b538      	push	{r3, r4, r5, lr}
 80265fe:	4d07      	ldr	r5, [pc, #28]	; (802661c <_lseek_r+0x20>)
 8026600:	4604      	mov	r4, r0
 8026602:	4608      	mov	r0, r1
 8026604:	4611      	mov	r1, r2
 8026606:	2200      	movs	r2, #0
 8026608:	602a      	str	r2, [r5, #0]
 802660a:	461a      	mov	r2, r3
 802660c:	f7dd fd94 	bl	8004138 <_lseek>
 8026610:	1c43      	adds	r3, r0, #1
 8026612:	d102      	bne.n	802661a <_lseek_r+0x1e>
 8026614:	682b      	ldr	r3, [r5, #0]
 8026616:	b103      	cbz	r3, 802661a <_lseek_r+0x1e>
 8026618:	6023      	str	r3, [r4, #0]
 802661a:	bd38      	pop	{r3, r4, r5, pc}
 802661c:	200019b8 	.word	0x200019b8

08026620 <__swhatbuf_r>:
 8026620:	b570      	push	{r4, r5, r6, lr}
 8026622:	460e      	mov	r6, r1
 8026624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026628:	2900      	cmp	r1, #0
 802662a:	b096      	sub	sp, #88	; 0x58
 802662c:	4614      	mov	r4, r2
 802662e:	461d      	mov	r5, r3
 8026630:	da07      	bge.n	8026642 <__swhatbuf_r+0x22>
 8026632:	2300      	movs	r3, #0
 8026634:	602b      	str	r3, [r5, #0]
 8026636:	89b3      	ldrh	r3, [r6, #12]
 8026638:	061a      	lsls	r2, r3, #24
 802663a:	d410      	bmi.n	802665e <__swhatbuf_r+0x3e>
 802663c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026640:	e00e      	b.n	8026660 <__swhatbuf_r+0x40>
 8026642:	466a      	mov	r2, sp
 8026644:	f001 fb74 	bl	8027d30 <_fstat_r>
 8026648:	2800      	cmp	r0, #0
 802664a:	dbf2      	blt.n	8026632 <__swhatbuf_r+0x12>
 802664c:	9a01      	ldr	r2, [sp, #4]
 802664e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026656:	425a      	negs	r2, r3
 8026658:	415a      	adcs	r2, r3
 802665a:	602a      	str	r2, [r5, #0]
 802665c:	e7ee      	b.n	802663c <__swhatbuf_r+0x1c>
 802665e:	2340      	movs	r3, #64	; 0x40
 8026660:	2000      	movs	r0, #0
 8026662:	6023      	str	r3, [r4, #0]
 8026664:	b016      	add	sp, #88	; 0x58
 8026666:	bd70      	pop	{r4, r5, r6, pc}

08026668 <__smakebuf_r>:
 8026668:	898b      	ldrh	r3, [r1, #12]
 802666a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802666c:	079d      	lsls	r5, r3, #30
 802666e:	4606      	mov	r6, r0
 8026670:	460c      	mov	r4, r1
 8026672:	d507      	bpl.n	8026684 <__smakebuf_r+0x1c>
 8026674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026678:	6023      	str	r3, [r4, #0]
 802667a:	6123      	str	r3, [r4, #16]
 802667c:	2301      	movs	r3, #1
 802667e:	6163      	str	r3, [r4, #20]
 8026680:	b002      	add	sp, #8
 8026682:	bd70      	pop	{r4, r5, r6, pc}
 8026684:	ab01      	add	r3, sp, #4
 8026686:	466a      	mov	r2, sp
 8026688:	f7ff ffca 	bl	8026620 <__swhatbuf_r>
 802668c:	9900      	ldr	r1, [sp, #0]
 802668e:	4605      	mov	r5, r0
 8026690:	4630      	mov	r0, r6
 8026692:	f7fc f897 	bl	80227c4 <_malloc_r>
 8026696:	b948      	cbnz	r0, 80266ac <__smakebuf_r+0x44>
 8026698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802669c:	059a      	lsls	r2, r3, #22
 802669e:	d4ef      	bmi.n	8026680 <__smakebuf_r+0x18>
 80266a0:	f023 0303 	bic.w	r3, r3, #3
 80266a4:	f043 0302 	orr.w	r3, r3, #2
 80266a8:	81a3      	strh	r3, [r4, #12]
 80266aa:	e7e3      	b.n	8026674 <__smakebuf_r+0xc>
 80266ac:	4b0d      	ldr	r3, [pc, #52]	; (80266e4 <__smakebuf_r+0x7c>)
 80266ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80266b0:	89a3      	ldrh	r3, [r4, #12]
 80266b2:	6020      	str	r0, [r4, #0]
 80266b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80266b8:	81a3      	strh	r3, [r4, #12]
 80266ba:	9b00      	ldr	r3, [sp, #0]
 80266bc:	6163      	str	r3, [r4, #20]
 80266be:	9b01      	ldr	r3, [sp, #4]
 80266c0:	6120      	str	r0, [r4, #16]
 80266c2:	b15b      	cbz	r3, 80266dc <__smakebuf_r+0x74>
 80266c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80266c8:	4630      	mov	r0, r6
 80266ca:	f001 fb43 	bl	8027d54 <_isatty_r>
 80266ce:	b128      	cbz	r0, 80266dc <__smakebuf_r+0x74>
 80266d0:	89a3      	ldrh	r3, [r4, #12]
 80266d2:	f023 0303 	bic.w	r3, r3, #3
 80266d6:	f043 0301 	orr.w	r3, r3, #1
 80266da:	81a3      	strh	r3, [r4, #12]
 80266dc:	89a0      	ldrh	r0, [r4, #12]
 80266de:	4305      	orrs	r5, r0
 80266e0:	81a5      	strh	r5, [r4, #12]
 80266e2:	e7cd      	b.n	8026680 <__smakebuf_r+0x18>
 80266e4:	08025c29 	.word	0x08025c29

080266e8 <__ascii_mbtowc>:
 80266e8:	b082      	sub	sp, #8
 80266ea:	b901      	cbnz	r1, 80266ee <__ascii_mbtowc+0x6>
 80266ec:	a901      	add	r1, sp, #4
 80266ee:	b142      	cbz	r2, 8026702 <__ascii_mbtowc+0x1a>
 80266f0:	b14b      	cbz	r3, 8026706 <__ascii_mbtowc+0x1e>
 80266f2:	7813      	ldrb	r3, [r2, #0]
 80266f4:	600b      	str	r3, [r1, #0]
 80266f6:	7812      	ldrb	r2, [r2, #0]
 80266f8:	1e10      	subs	r0, r2, #0
 80266fa:	bf18      	it	ne
 80266fc:	2001      	movne	r0, #1
 80266fe:	b002      	add	sp, #8
 8026700:	4770      	bx	lr
 8026702:	4610      	mov	r0, r2
 8026704:	e7fb      	b.n	80266fe <__ascii_mbtowc+0x16>
 8026706:	f06f 0001 	mvn.w	r0, #1
 802670a:	e7f8      	b.n	80266fe <__ascii_mbtowc+0x16>

0802670c <__malloc_lock>:
 802670c:	4801      	ldr	r0, [pc, #4]	; (8026714 <__malloc_lock+0x8>)
 802670e:	f7ff bf71 	b.w	80265f4 <__retarget_lock_acquire_recursive>
 8026712:	bf00      	nop
 8026714:	200019b0 	.word	0x200019b0

08026718 <__malloc_unlock>:
 8026718:	4801      	ldr	r0, [pc, #4]	; (8026720 <__malloc_unlock+0x8>)
 802671a:	f7ff bf6d 	b.w	80265f8 <__retarget_lock_release_recursive>
 802671e:	bf00      	nop
 8026720:	200019b0 	.word	0x200019b0

08026724 <_Balloc>:
 8026724:	b570      	push	{r4, r5, r6, lr}
 8026726:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026728:	4604      	mov	r4, r0
 802672a:	460d      	mov	r5, r1
 802672c:	b976      	cbnz	r6, 802674c <_Balloc+0x28>
 802672e:	2010      	movs	r0, #16
 8026730:	f7fb fd1c 	bl	802216c <malloc>
 8026734:	4602      	mov	r2, r0
 8026736:	6260      	str	r0, [r4, #36]	; 0x24
 8026738:	b920      	cbnz	r0, 8026744 <_Balloc+0x20>
 802673a:	4b18      	ldr	r3, [pc, #96]	; (802679c <_Balloc+0x78>)
 802673c:	4818      	ldr	r0, [pc, #96]	; (80267a0 <_Balloc+0x7c>)
 802673e:	2166      	movs	r1, #102	; 0x66
 8026740:	f7fe fabe 	bl	8024cc0 <__assert_func>
 8026744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026748:	6006      	str	r6, [r0, #0]
 802674a:	60c6      	str	r6, [r0, #12]
 802674c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802674e:	68f3      	ldr	r3, [r6, #12]
 8026750:	b183      	cbz	r3, 8026774 <_Balloc+0x50>
 8026752:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026754:	68db      	ldr	r3, [r3, #12]
 8026756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802675a:	b9b8      	cbnz	r0, 802678c <_Balloc+0x68>
 802675c:	2101      	movs	r1, #1
 802675e:	fa01 f605 	lsl.w	r6, r1, r5
 8026762:	1d72      	adds	r2, r6, #5
 8026764:	0092      	lsls	r2, r2, #2
 8026766:	4620      	mov	r0, r4
 8026768:	f7fb ffcc 	bl	8022704 <_calloc_r>
 802676c:	b160      	cbz	r0, 8026788 <_Balloc+0x64>
 802676e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026772:	e00e      	b.n	8026792 <_Balloc+0x6e>
 8026774:	2221      	movs	r2, #33	; 0x21
 8026776:	2104      	movs	r1, #4
 8026778:	4620      	mov	r0, r4
 802677a:	f7fb ffc3 	bl	8022704 <_calloc_r>
 802677e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026780:	60f0      	str	r0, [r6, #12]
 8026782:	68db      	ldr	r3, [r3, #12]
 8026784:	2b00      	cmp	r3, #0
 8026786:	d1e4      	bne.n	8026752 <_Balloc+0x2e>
 8026788:	2000      	movs	r0, #0
 802678a:	bd70      	pop	{r4, r5, r6, pc}
 802678c:	6802      	ldr	r2, [r0, #0]
 802678e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026792:	2300      	movs	r3, #0
 8026794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026798:	e7f7      	b.n	802678a <_Balloc+0x66>
 802679a:	bf00      	nop
 802679c:	080335c8 	.word	0x080335c8
 80267a0:	08033a2c 	.word	0x08033a2c

080267a4 <_Bfree>:
 80267a4:	b570      	push	{r4, r5, r6, lr}
 80267a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80267a8:	4605      	mov	r5, r0
 80267aa:	460c      	mov	r4, r1
 80267ac:	b976      	cbnz	r6, 80267cc <_Bfree+0x28>
 80267ae:	2010      	movs	r0, #16
 80267b0:	f7fb fcdc 	bl	802216c <malloc>
 80267b4:	4602      	mov	r2, r0
 80267b6:	6268      	str	r0, [r5, #36]	; 0x24
 80267b8:	b920      	cbnz	r0, 80267c4 <_Bfree+0x20>
 80267ba:	4b09      	ldr	r3, [pc, #36]	; (80267e0 <_Bfree+0x3c>)
 80267bc:	4809      	ldr	r0, [pc, #36]	; (80267e4 <_Bfree+0x40>)
 80267be:	218a      	movs	r1, #138	; 0x8a
 80267c0:	f7fe fa7e 	bl	8024cc0 <__assert_func>
 80267c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80267c8:	6006      	str	r6, [r0, #0]
 80267ca:	60c6      	str	r6, [r0, #12]
 80267cc:	b13c      	cbz	r4, 80267de <_Bfree+0x3a>
 80267ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80267d0:	6862      	ldr	r2, [r4, #4]
 80267d2:	68db      	ldr	r3, [r3, #12]
 80267d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80267d8:	6021      	str	r1, [r4, #0]
 80267da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80267de:	bd70      	pop	{r4, r5, r6, pc}
 80267e0:	080335c8 	.word	0x080335c8
 80267e4:	08033a2c 	.word	0x08033a2c

080267e8 <__multadd>:
 80267e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80267ec:	690e      	ldr	r6, [r1, #16]
 80267ee:	4607      	mov	r7, r0
 80267f0:	4698      	mov	r8, r3
 80267f2:	460c      	mov	r4, r1
 80267f4:	f101 0014 	add.w	r0, r1, #20
 80267f8:	2300      	movs	r3, #0
 80267fa:	6805      	ldr	r5, [r0, #0]
 80267fc:	b2a9      	uxth	r1, r5
 80267fe:	fb02 8101 	mla	r1, r2, r1, r8
 8026802:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8026806:	0c2d      	lsrs	r5, r5, #16
 8026808:	fb02 c505 	mla	r5, r2, r5, ip
 802680c:	b289      	uxth	r1, r1
 802680e:	3301      	adds	r3, #1
 8026810:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8026814:	429e      	cmp	r6, r3
 8026816:	f840 1b04 	str.w	r1, [r0], #4
 802681a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802681e:	dcec      	bgt.n	80267fa <__multadd+0x12>
 8026820:	f1b8 0f00 	cmp.w	r8, #0
 8026824:	d022      	beq.n	802686c <__multadd+0x84>
 8026826:	68a3      	ldr	r3, [r4, #8]
 8026828:	42b3      	cmp	r3, r6
 802682a:	dc19      	bgt.n	8026860 <__multadd+0x78>
 802682c:	6861      	ldr	r1, [r4, #4]
 802682e:	4638      	mov	r0, r7
 8026830:	3101      	adds	r1, #1
 8026832:	f7ff ff77 	bl	8026724 <_Balloc>
 8026836:	4605      	mov	r5, r0
 8026838:	b928      	cbnz	r0, 8026846 <__multadd+0x5e>
 802683a:	4602      	mov	r2, r0
 802683c:	4b0d      	ldr	r3, [pc, #52]	; (8026874 <__multadd+0x8c>)
 802683e:	480e      	ldr	r0, [pc, #56]	; (8026878 <__multadd+0x90>)
 8026840:	21b5      	movs	r1, #181	; 0xb5
 8026842:	f7fe fa3d 	bl	8024cc0 <__assert_func>
 8026846:	6922      	ldr	r2, [r4, #16]
 8026848:	3202      	adds	r2, #2
 802684a:	f104 010c 	add.w	r1, r4, #12
 802684e:	0092      	lsls	r2, r2, #2
 8026850:	300c      	adds	r0, #12
 8026852:	f7fb fca9 	bl	80221a8 <memcpy>
 8026856:	4621      	mov	r1, r4
 8026858:	4638      	mov	r0, r7
 802685a:	f7ff ffa3 	bl	80267a4 <_Bfree>
 802685e:	462c      	mov	r4, r5
 8026860:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8026864:	3601      	adds	r6, #1
 8026866:	f8c3 8014 	str.w	r8, [r3, #20]
 802686a:	6126      	str	r6, [r4, #16]
 802686c:	4620      	mov	r0, r4
 802686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026872:	bf00      	nop
 8026874:	080338dd 	.word	0x080338dd
 8026878:	08033a2c 	.word	0x08033a2c

0802687c <__s2b>:
 802687c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026880:	460c      	mov	r4, r1
 8026882:	4615      	mov	r5, r2
 8026884:	461f      	mov	r7, r3
 8026886:	2209      	movs	r2, #9
 8026888:	3308      	adds	r3, #8
 802688a:	4606      	mov	r6, r0
 802688c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026890:	2100      	movs	r1, #0
 8026892:	2201      	movs	r2, #1
 8026894:	429a      	cmp	r2, r3
 8026896:	db09      	blt.n	80268ac <__s2b+0x30>
 8026898:	4630      	mov	r0, r6
 802689a:	f7ff ff43 	bl	8026724 <_Balloc>
 802689e:	b940      	cbnz	r0, 80268b2 <__s2b+0x36>
 80268a0:	4602      	mov	r2, r0
 80268a2:	4b19      	ldr	r3, [pc, #100]	; (8026908 <__s2b+0x8c>)
 80268a4:	4819      	ldr	r0, [pc, #100]	; (802690c <__s2b+0x90>)
 80268a6:	21ce      	movs	r1, #206	; 0xce
 80268a8:	f7fe fa0a 	bl	8024cc0 <__assert_func>
 80268ac:	0052      	lsls	r2, r2, #1
 80268ae:	3101      	adds	r1, #1
 80268b0:	e7f0      	b.n	8026894 <__s2b+0x18>
 80268b2:	9b08      	ldr	r3, [sp, #32]
 80268b4:	6143      	str	r3, [r0, #20]
 80268b6:	2d09      	cmp	r5, #9
 80268b8:	f04f 0301 	mov.w	r3, #1
 80268bc:	6103      	str	r3, [r0, #16]
 80268be:	dd16      	ble.n	80268ee <__s2b+0x72>
 80268c0:	f104 0909 	add.w	r9, r4, #9
 80268c4:	46c8      	mov	r8, r9
 80268c6:	442c      	add	r4, r5
 80268c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80268cc:	4601      	mov	r1, r0
 80268ce:	3b30      	subs	r3, #48	; 0x30
 80268d0:	220a      	movs	r2, #10
 80268d2:	4630      	mov	r0, r6
 80268d4:	f7ff ff88 	bl	80267e8 <__multadd>
 80268d8:	45a0      	cmp	r8, r4
 80268da:	d1f5      	bne.n	80268c8 <__s2b+0x4c>
 80268dc:	f1a5 0408 	sub.w	r4, r5, #8
 80268e0:	444c      	add	r4, r9
 80268e2:	1b2d      	subs	r5, r5, r4
 80268e4:	1963      	adds	r3, r4, r5
 80268e6:	42bb      	cmp	r3, r7
 80268e8:	db04      	blt.n	80268f4 <__s2b+0x78>
 80268ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80268ee:	340a      	adds	r4, #10
 80268f0:	2509      	movs	r5, #9
 80268f2:	e7f6      	b.n	80268e2 <__s2b+0x66>
 80268f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80268f8:	4601      	mov	r1, r0
 80268fa:	3b30      	subs	r3, #48	; 0x30
 80268fc:	220a      	movs	r2, #10
 80268fe:	4630      	mov	r0, r6
 8026900:	f7ff ff72 	bl	80267e8 <__multadd>
 8026904:	e7ee      	b.n	80268e4 <__s2b+0x68>
 8026906:	bf00      	nop
 8026908:	080338dd 	.word	0x080338dd
 802690c:	08033a2c 	.word	0x08033a2c

08026910 <__hi0bits>:
 8026910:	0c03      	lsrs	r3, r0, #16
 8026912:	041b      	lsls	r3, r3, #16
 8026914:	b9d3      	cbnz	r3, 802694c <__hi0bits+0x3c>
 8026916:	0400      	lsls	r0, r0, #16
 8026918:	2310      	movs	r3, #16
 802691a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802691e:	bf04      	itt	eq
 8026920:	0200      	lsleq	r0, r0, #8
 8026922:	3308      	addeq	r3, #8
 8026924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026928:	bf04      	itt	eq
 802692a:	0100      	lsleq	r0, r0, #4
 802692c:	3304      	addeq	r3, #4
 802692e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026932:	bf04      	itt	eq
 8026934:	0080      	lsleq	r0, r0, #2
 8026936:	3302      	addeq	r3, #2
 8026938:	2800      	cmp	r0, #0
 802693a:	db05      	blt.n	8026948 <__hi0bits+0x38>
 802693c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026940:	f103 0301 	add.w	r3, r3, #1
 8026944:	bf08      	it	eq
 8026946:	2320      	moveq	r3, #32
 8026948:	4618      	mov	r0, r3
 802694a:	4770      	bx	lr
 802694c:	2300      	movs	r3, #0
 802694e:	e7e4      	b.n	802691a <__hi0bits+0xa>

08026950 <__lo0bits>:
 8026950:	6803      	ldr	r3, [r0, #0]
 8026952:	f013 0207 	ands.w	r2, r3, #7
 8026956:	4601      	mov	r1, r0
 8026958:	d00b      	beq.n	8026972 <__lo0bits+0x22>
 802695a:	07da      	lsls	r2, r3, #31
 802695c:	d424      	bmi.n	80269a8 <__lo0bits+0x58>
 802695e:	0798      	lsls	r0, r3, #30
 8026960:	bf49      	itett	mi
 8026962:	085b      	lsrmi	r3, r3, #1
 8026964:	089b      	lsrpl	r3, r3, #2
 8026966:	2001      	movmi	r0, #1
 8026968:	600b      	strmi	r3, [r1, #0]
 802696a:	bf5c      	itt	pl
 802696c:	600b      	strpl	r3, [r1, #0]
 802696e:	2002      	movpl	r0, #2
 8026970:	4770      	bx	lr
 8026972:	b298      	uxth	r0, r3
 8026974:	b9b0      	cbnz	r0, 80269a4 <__lo0bits+0x54>
 8026976:	0c1b      	lsrs	r3, r3, #16
 8026978:	2010      	movs	r0, #16
 802697a:	f013 0fff 	tst.w	r3, #255	; 0xff
 802697e:	bf04      	itt	eq
 8026980:	0a1b      	lsreq	r3, r3, #8
 8026982:	3008      	addeq	r0, #8
 8026984:	071a      	lsls	r2, r3, #28
 8026986:	bf04      	itt	eq
 8026988:	091b      	lsreq	r3, r3, #4
 802698a:	3004      	addeq	r0, #4
 802698c:	079a      	lsls	r2, r3, #30
 802698e:	bf04      	itt	eq
 8026990:	089b      	lsreq	r3, r3, #2
 8026992:	3002      	addeq	r0, #2
 8026994:	07da      	lsls	r2, r3, #31
 8026996:	d403      	bmi.n	80269a0 <__lo0bits+0x50>
 8026998:	085b      	lsrs	r3, r3, #1
 802699a:	f100 0001 	add.w	r0, r0, #1
 802699e:	d005      	beq.n	80269ac <__lo0bits+0x5c>
 80269a0:	600b      	str	r3, [r1, #0]
 80269a2:	4770      	bx	lr
 80269a4:	4610      	mov	r0, r2
 80269a6:	e7e8      	b.n	802697a <__lo0bits+0x2a>
 80269a8:	2000      	movs	r0, #0
 80269aa:	4770      	bx	lr
 80269ac:	2020      	movs	r0, #32
 80269ae:	4770      	bx	lr

080269b0 <__i2b>:
 80269b0:	b510      	push	{r4, lr}
 80269b2:	460c      	mov	r4, r1
 80269b4:	2101      	movs	r1, #1
 80269b6:	f7ff feb5 	bl	8026724 <_Balloc>
 80269ba:	4602      	mov	r2, r0
 80269bc:	b928      	cbnz	r0, 80269ca <__i2b+0x1a>
 80269be:	4b05      	ldr	r3, [pc, #20]	; (80269d4 <__i2b+0x24>)
 80269c0:	4805      	ldr	r0, [pc, #20]	; (80269d8 <__i2b+0x28>)
 80269c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80269c6:	f7fe f97b 	bl	8024cc0 <__assert_func>
 80269ca:	2301      	movs	r3, #1
 80269cc:	6144      	str	r4, [r0, #20]
 80269ce:	6103      	str	r3, [r0, #16]
 80269d0:	bd10      	pop	{r4, pc}
 80269d2:	bf00      	nop
 80269d4:	080338dd 	.word	0x080338dd
 80269d8:	08033a2c 	.word	0x08033a2c

080269dc <__multiply>:
 80269dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80269e0:	4614      	mov	r4, r2
 80269e2:	690a      	ldr	r2, [r1, #16]
 80269e4:	6923      	ldr	r3, [r4, #16]
 80269e6:	429a      	cmp	r2, r3
 80269e8:	bfb8      	it	lt
 80269ea:	460b      	movlt	r3, r1
 80269ec:	460d      	mov	r5, r1
 80269ee:	bfbc      	itt	lt
 80269f0:	4625      	movlt	r5, r4
 80269f2:	461c      	movlt	r4, r3
 80269f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80269f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80269fc:	68ab      	ldr	r3, [r5, #8]
 80269fe:	6869      	ldr	r1, [r5, #4]
 8026a00:	eb0a 0709 	add.w	r7, sl, r9
 8026a04:	42bb      	cmp	r3, r7
 8026a06:	b085      	sub	sp, #20
 8026a08:	bfb8      	it	lt
 8026a0a:	3101      	addlt	r1, #1
 8026a0c:	f7ff fe8a 	bl	8026724 <_Balloc>
 8026a10:	b930      	cbnz	r0, 8026a20 <__multiply+0x44>
 8026a12:	4602      	mov	r2, r0
 8026a14:	4b42      	ldr	r3, [pc, #264]	; (8026b20 <__multiply+0x144>)
 8026a16:	4843      	ldr	r0, [pc, #268]	; (8026b24 <__multiply+0x148>)
 8026a18:	f240 115d 	movw	r1, #349	; 0x15d
 8026a1c:	f7fe f950 	bl	8024cc0 <__assert_func>
 8026a20:	f100 0614 	add.w	r6, r0, #20
 8026a24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8026a28:	4633      	mov	r3, r6
 8026a2a:	2200      	movs	r2, #0
 8026a2c:	4543      	cmp	r3, r8
 8026a2e:	d31e      	bcc.n	8026a6e <__multiply+0x92>
 8026a30:	f105 0c14 	add.w	ip, r5, #20
 8026a34:	f104 0314 	add.w	r3, r4, #20
 8026a38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8026a3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8026a40:	9202      	str	r2, [sp, #8]
 8026a42:	ebac 0205 	sub.w	r2, ip, r5
 8026a46:	3a15      	subs	r2, #21
 8026a48:	f022 0203 	bic.w	r2, r2, #3
 8026a4c:	3204      	adds	r2, #4
 8026a4e:	f105 0115 	add.w	r1, r5, #21
 8026a52:	458c      	cmp	ip, r1
 8026a54:	bf38      	it	cc
 8026a56:	2204      	movcc	r2, #4
 8026a58:	9201      	str	r2, [sp, #4]
 8026a5a:	9a02      	ldr	r2, [sp, #8]
 8026a5c:	9303      	str	r3, [sp, #12]
 8026a5e:	429a      	cmp	r2, r3
 8026a60:	d808      	bhi.n	8026a74 <__multiply+0x98>
 8026a62:	2f00      	cmp	r7, #0
 8026a64:	dc55      	bgt.n	8026b12 <__multiply+0x136>
 8026a66:	6107      	str	r7, [r0, #16]
 8026a68:	b005      	add	sp, #20
 8026a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a6e:	f843 2b04 	str.w	r2, [r3], #4
 8026a72:	e7db      	b.n	8026a2c <__multiply+0x50>
 8026a74:	f8b3 a000 	ldrh.w	sl, [r3]
 8026a78:	f1ba 0f00 	cmp.w	sl, #0
 8026a7c:	d020      	beq.n	8026ac0 <__multiply+0xe4>
 8026a7e:	f105 0e14 	add.w	lr, r5, #20
 8026a82:	46b1      	mov	r9, r6
 8026a84:	2200      	movs	r2, #0
 8026a86:	f85e 4b04 	ldr.w	r4, [lr], #4
 8026a8a:	f8d9 b000 	ldr.w	fp, [r9]
 8026a8e:	b2a1      	uxth	r1, r4
 8026a90:	fa1f fb8b 	uxth.w	fp, fp
 8026a94:	fb0a b101 	mla	r1, sl, r1, fp
 8026a98:	4411      	add	r1, r2
 8026a9a:	f8d9 2000 	ldr.w	r2, [r9]
 8026a9e:	0c24      	lsrs	r4, r4, #16
 8026aa0:	0c12      	lsrs	r2, r2, #16
 8026aa2:	fb0a 2404 	mla	r4, sl, r4, r2
 8026aa6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8026aaa:	b289      	uxth	r1, r1
 8026aac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8026ab0:	45f4      	cmp	ip, lr
 8026ab2:	f849 1b04 	str.w	r1, [r9], #4
 8026ab6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8026aba:	d8e4      	bhi.n	8026a86 <__multiply+0xaa>
 8026abc:	9901      	ldr	r1, [sp, #4]
 8026abe:	5072      	str	r2, [r6, r1]
 8026ac0:	9a03      	ldr	r2, [sp, #12]
 8026ac2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026ac6:	3304      	adds	r3, #4
 8026ac8:	f1b9 0f00 	cmp.w	r9, #0
 8026acc:	d01f      	beq.n	8026b0e <__multiply+0x132>
 8026ace:	6834      	ldr	r4, [r6, #0]
 8026ad0:	f105 0114 	add.w	r1, r5, #20
 8026ad4:	46b6      	mov	lr, r6
 8026ad6:	f04f 0a00 	mov.w	sl, #0
 8026ada:	880a      	ldrh	r2, [r1, #0]
 8026adc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8026ae0:	fb09 b202 	mla	r2, r9, r2, fp
 8026ae4:	4492      	add	sl, r2
 8026ae6:	b2a4      	uxth	r4, r4
 8026ae8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8026aec:	f84e 4b04 	str.w	r4, [lr], #4
 8026af0:	f851 4b04 	ldr.w	r4, [r1], #4
 8026af4:	f8be 2000 	ldrh.w	r2, [lr]
 8026af8:	0c24      	lsrs	r4, r4, #16
 8026afa:	fb09 2404 	mla	r4, r9, r4, r2
 8026afe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8026b02:	458c      	cmp	ip, r1
 8026b04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8026b08:	d8e7      	bhi.n	8026ada <__multiply+0xfe>
 8026b0a:	9a01      	ldr	r2, [sp, #4]
 8026b0c:	50b4      	str	r4, [r6, r2]
 8026b0e:	3604      	adds	r6, #4
 8026b10:	e7a3      	b.n	8026a5a <__multiply+0x7e>
 8026b12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026b16:	2b00      	cmp	r3, #0
 8026b18:	d1a5      	bne.n	8026a66 <__multiply+0x8a>
 8026b1a:	3f01      	subs	r7, #1
 8026b1c:	e7a1      	b.n	8026a62 <__multiply+0x86>
 8026b1e:	bf00      	nop
 8026b20:	080338dd 	.word	0x080338dd
 8026b24:	08033a2c 	.word	0x08033a2c

08026b28 <__pow5mult>:
 8026b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026b2c:	4615      	mov	r5, r2
 8026b2e:	f012 0203 	ands.w	r2, r2, #3
 8026b32:	4606      	mov	r6, r0
 8026b34:	460f      	mov	r7, r1
 8026b36:	d007      	beq.n	8026b48 <__pow5mult+0x20>
 8026b38:	4c25      	ldr	r4, [pc, #148]	; (8026bd0 <__pow5mult+0xa8>)
 8026b3a:	3a01      	subs	r2, #1
 8026b3c:	2300      	movs	r3, #0
 8026b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026b42:	f7ff fe51 	bl	80267e8 <__multadd>
 8026b46:	4607      	mov	r7, r0
 8026b48:	10ad      	asrs	r5, r5, #2
 8026b4a:	d03d      	beq.n	8026bc8 <__pow5mult+0xa0>
 8026b4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8026b4e:	b97c      	cbnz	r4, 8026b70 <__pow5mult+0x48>
 8026b50:	2010      	movs	r0, #16
 8026b52:	f7fb fb0b 	bl	802216c <malloc>
 8026b56:	4602      	mov	r2, r0
 8026b58:	6270      	str	r0, [r6, #36]	; 0x24
 8026b5a:	b928      	cbnz	r0, 8026b68 <__pow5mult+0x40>
 8026b5c:	4b1d      	ldr	r3, [pc, #116]	; (8026bd4 <__pow5mult+0xac>)
 8026b5e:	481e      	ldr	r0, [pc, #120]	; (8026bd8 <__pow5mult+0xb0>)
 8026b60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8026b64:	f7fe f8ac 	bl	8024cc0 <__assert_func>
 8026b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026b6c:	6004      	str	r4, [r0, #0]
 8026b6e:	60c4      	str	r4, [r0, #12]
 8026b70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026b78:	b94c      	cbnz	r4, 8026b8e <__pow5mult+0x66>
 8026b7a:	f240 2171 	movw	r1, #625	; 0x271
 8026b7e:	4630      	mov	r0, r6
 8026b80:	f7ff ff16 	bl	80269b0 <__i2b>
 8026b84:	2300      	movs	r3, #0
 8026b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8026b8a:	4604      	mov	r4, r0
 8026b8c:	6003      	str	r3, [r0, #0]
 8026b8e:	f04f 0900 	mov.w	r9, #0
 8026b92:	07eb      	lsls	r3, r5, #31
 8026b94:	d50a      	bpl.n	8026bac <__pow5mult+0x84>
 8026b96:	4639      	mov	r1, r7
 8026b98:	4622      	mov	r2, r4
 8026b9a:	4630      	mov	r0, r6
 8026b9c:	f7ff ff1e 	bl	80269dc <__multiply>
 8026ba0:	4639      	mov	r1, r7
 8026ba2:	4680      	mov	r8, r0
 8026ba4:	4630      	mov	r0, r6
 8026ba6:	f7ff fdfd 	bl	80267a4 <_Bfree>
 8026baa:	4647      	mov	r7, r8
 8026bac:	106d      	asrs	r5, r5, #1
 8026bae:	d00b      	beq.n	8026bc8 <__pow5mult+0xa0>
 8026bb0:	6820      	ldr	r0, [r4, #0]
 8026bb2:	b938      	cbnz	r0, 8026bc4 <__pow5mult+0x9c>
 8026bb4:	4622      	mov	r2, r4
 8026bb6:	4621      	mov	r1, r4
 8026bb8:	4630      	mov	r0, r6
 8026bba:	f7ff ff0f 	bl	80269dc <__multiply>
 8026bbe:	6020      	str	r0, [r4, #0]
 8026bc0:	f8c0 9000 	str.w	r9, [r0]
 8026bc4:	4604      	mov	r4, r0
 8026bc6:	e7e4      	b.n	8026b92 <__pow5mult+0x6a>
 8026bc8:	4638      	mov	r0, r7
 8026bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026bce:	bf00      	nop
 8026bd0:	08033b80 	.word	0x08033b80
 8026bd4:	080335c8 	.word	0x080335c8
 8026bd8:	08033a2c 	.word	0x08033a2c

08026bdc <__lshift>:
 8026bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026be0:	460c      	mov	r4, r1
 8026be2:	6849      	ldr	r1, [r1, #4]
 8026be4:	6923      	ldr	r3, [r4, #16]
 8026be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026bea:	68a3      	ldr	r3, [r4, #8]
 8026bec:	4607      	mov	r7, r0
 8026bee:	4691      	mov	r9, r2
 8026bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026bf4:	f108 0601 	add.w	r6, r8, #1
 8026bf8:	42b3      	cmp	r3, r6
 8026bfa:	db0b      	blt.n	8026c14 <__lshift+0x38>
 8026bfc:	4638      	mov	r0, r7
 8026bfe:	f7ff fd91 	bl	8026724 <_Balloc>
 8026c02:	4605      	mov	r5, r0
 8026c04:	b948      	cbnz	r0, 8026c1a <__lshift+0x3e>
 8026c06:	4602      	mov	r2, r0
 8026c08:	4b28      	ldr	r3, [pc, #160]	; (8026cac <__lshift+0xd0>)
 8026c0a:	4829      	ldr	r0, [pc, #164]	; (8026cb0 <__lshift+0xd4>)
 8026c0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8026c10:	f7fe f856 	bl	8024cc0 <__assert_func>
 8026c14:	3101      	adds	r1, #1
 8026c16:	005b      	lsls	r3, r3, #1
 8026c18:	e7ee      	b.n	8026bf8 <__lshift+0x1c>
 8026c1a:	2300      	movs	r3, #0
 8026c1c:	f100 0114 	add.w	r1, r0, #20
 8026c20:	f100 0210 	add.w	r2, r0, #16
 8026c24:	4618      	mov	r0, r3
 8026c26:	4553      	cmp	r3, sl
 8026c28:	db33      	blt.n	8026c92 <__lshift+0xb6>
 8026c2a:	6920      	ldr	r0, [r4, #16]
 8026c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026c30:	f104 0314 	add.w	r3, r4, #20
 8026c34:	f019 091f 	ands.w	r9, r9, #31
 8026c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026c40:	d02b      	beq.n	8026c9a <__lshift+0xbe>
 8026c42:	f1c9 0e20 	rsb	lr, r9, #32
 8026c46:	468a      	mov	sl, r1
 8026c48:	2200      	movs	r2, #0
 8026c4a:	6818      	ldr	r0, [r3, #0]
 8026c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8026c50:	4302      	orrs	r2, r0
 8026c52:	f84a 2b04 	str.w	r2, [sl], #4
 8026c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8026c5a:	459c      	cmp	ip, r3
 8026c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8026c60:	d8f3      	bhi.n	8026c4a <__lshift+0x6e>
 8026c62:	ebac 0304 	sub.w	r3, ip, r4
 8026c66:	3b15      	subs	r3, #21
 8026c68:	f023 0303 	bic.w	r3, r3, #3
 8026c6c:	3304      	adds	r3, #4
 8026c6e:	f104 0015 	add.w	r0, r4, #21
 8026c72:	4584      	cmp	ip, r0
 8026c74:	bf38      	it	cc
 8026c76:	2304      	movcc	r3, #4
 8026c78:	50ca      	str	r2, [r1, r3]
 8026c7a:	b10a      	cbz	r2, 8026c80 <__lshift+0xa4>
 8026c7c:	f108 0602 	add.w	r6, r8, #2
 8026c80:	3e01      	subs	r6, #1
 8026c82:	4638      	mov	r0, r7
 8026c84:	612e      	str	r6, [r5, #16]
 8026c86:	4621      	mov	r1, r4
 8026c88:	f7ff fd8c 	bl	80267a4 <_Bfree>
 8026c8c:	4628      	mov	r0, r5
 8026c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8026c96:	3301      	adds	r3, #1
 8026c98:	e7c5      	b.n	8026c26 <__lshift+0x4a>
 8026c9a:	3904      	subs	r1, #4
 8026c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8026ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8026ca4:	459c      	cmp	ip, r3
 8026ca6:	d8f9      	bhi.n	8026c9c <__lshift+0xc0>
 8026ca8:	e7ea      	b.n	8026c80 <__lshift+0xa4>
 8026caa:	bf00      	nop
 8026cac:	080338dd 	.word	0x080338dd
 8026cb0:	08033a2c 	.word	0x08033a2c

08026cb4 <__mcmp>:
 8026cb4:	b530      	push	{r4, r5, lr}
 8026cb6:	6902      	ldr	r2, [r0, #16]
 8026cb8:	690c      	ldr	r4, [r1, #16]
 8026cba:	1b12      	subs	r2, r2, r4
 8026cbc:	d10e      	bne.n	8026cdc <__mcmp+0x28>
 8026cbe:	f100 0314 	add.w	r3, r0, #20
 8026cc2:	3114      	adds	r1, #20
 8026cc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026cc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026ccc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026cd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026cd4:	42a5      	cmp	r5, r4
 8026cd6:	d003      	beq.n	8026ce0 <__mcmp+0x2c>
 8026cd8:	d305      	bcc.n	8026ce6 <__mcmp+0x32>
 8026cda:	2201      	movs	r2, #1
 8026cdc:	4610      	mov	r0, r2
 8026cde:	bd30      	pop	{r4, r5, pc}
 8026ce0:	4283      	cmp	r3, r0
 8026ce2:	d3f3      	bcc.n	8026ccc <__mcmp+0x18>
 8026ce4:	e7fa      	b.n	8026cdc <__mcmp+0x28>
 8026ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8026cea:	e7f7      	b.n	8026cdc <__mcmp+0x28>

08026cec <__mdiff>:
 8026cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cf0:	460c      	mov	r4, r1
 8026cf2:	4606      	mov	r6, r0
 8026cf4:	4611      	mov	r1, r2
 8026cf6:	4620      	mov	r0, r4
 8026cf8:	4617      	mov	r7, r2
 8026cfa:	f7ff ffdb 	bl	8026cb4 <__mcmp>
 8026cfe:	1e05      	subs	r5, r0, #0
 8026d00:	d110      	bne.n	8026d24 <__mdiff+0x38>
 8026d02:	4629      	mov	r1, r5
 8026d04:	4630      	mov	r0, r6
 8026d06:	f7ff fd0d 	bl	8026724 <_Balloc>
 8026d0a:	b930      	cbnz	r0, 8026d1a <__mdiff+0x2e>
 8026d0c:	4b39      	ldr	r3, [pc, #228]	; (8026df4 <__mdiff+0x108>)
 8026d0e:	4602      	mov	r2, r0
 8026d10:	f240 2132 	movw	r1, #562	; 0x232
 8026d14:	4838      	ldr	r0, [pc, #224]	; (8026df8 <__mdiff+0x10c>)
 8026d16:	f7fd ffd3 	bl	8024cc0 <__assert_func>
 8026d1a:	2301      	movs	r3, #1
 8026d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d24:	bfa4      	itt	ge
 8026d26:	463b      	movge	r3, r7
 8026d28:	4627      	movge	r7, r4
 8026d2a:	4630      	mov	r0, r6
 8026d2c:	6879      	ldr	r1, [r7, #4]
 8026d2e:	bfa6      	itte	ge
 8026d30:	461c      	movge	r4, r3
 8026d32:	2500      	movge	r5, #0
 8026d34:	2501      	movlt	r5, #1
 8026d36:	f7ff fcf5 	bl	8026724 <_Balloc>
 8026d3a:	b920      	cbnz	r0, 8026d46 <__mdiff+0x5a>
 8026d3c:	4b2d      	ldr	r3, [pc, #180]	; (8026df4 <__mdiff+0x108>)
 8026d3e:	4602      	mov	r2, r0
 8026d40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8026d44:	e7e6      	b.n	8026d14 <__mdiff+0x28>
 8026d46:	693e      	ldr	r6, [r7, #16]
 8026d48:	60c5      	str	r5, [r0, #12]
 8026d4a:	6925      	ldr	r5, [r4, #16]
 8026d4c:	f107 0114 	add.w	r1, r7, #20
 8026d50:	f104 0914 	add.w	r9, r4, #20
 8026d54:	f100 0e14 	add.w	lr, r0, #20
 8026d58:	f107 0210 	add.w	r2, r7, #16
 8026d5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8026d60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8026d64:	46f2      	mov	sl, lr
 8026d66:	2700      	movs	r7, #0
 8026d68:	f859 3b04 	ldr.w	r3, [r9], #4
 8026d6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026d70:	fa1f f883 	uxth.w	r8, r3
 8026d74:	fa17 f78b 	uxtah	r7, r7, fp
 8026d78:	0c1b      	lsrs	r3, r3, #16
 8026d7a:	eba7 0808 	sub.w	r8, r7, r8
 8026d7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8026d82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026d86:	fa1f f888 	uxth.w	r8, r8
 8026d8a:	141f      	asrs	r7, r3, #16
 8026d8c:	454d      	cmp	r5, r9
 8026d8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8026d92:	f84a 3b04 	str.w	r3, [sl], #4
 8026d96:	d8e7      	bhi.n	8026d68 <__mdiff+0x7c>
 8026d98:	1b2b      	subs	r3, r5, r4
 8026d9a:	3b15      	subs	r3, #21
 8026d9c:	f023 0303 	bic.w	r3, r3, #3
 8026da0:	3304      	adds	r3, #4
 8026da2:	3415      	adds	r4, #21
 8026da4:	42a5      	cmp	r5, r4
 8026da6:	bf38      	it	cc
 8026da8:	2304      	movcc	r3, #4
 8026daa:	4419      	add	r1, r3
 8026dac:	4473      	add	r3, lr
 8026dae:	469e      	mov	lr, r3
 8026db0:	460d      	mov	r5, r1
 8026db2:	4565      	cmp	r5, ip
 8026db4:	d30e      	bcc.n	8026dd4 <__mdiff+0xe8>
 8026db6:	f10c 0203 	add.w	r2, ip, #3
 8026dba:	1a52      	subs	r2, r2, r1
 8026dbc:	f022 0203 	bic.w	r2, r2, #3
 8026dc0:	3903      	subs	r1, #3
 8026dc2:	458c      	cmp	ip, r1
 8026dc4:	bf38      	it	cc
 8026dc6:	2200      	movcc	r2, #0
 8026dc8:	441a      	add	r2, r3
 8026dca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8026dce:	b17b      	cbz	r3, 8026df0 <__mdiff+0x104>
 8026dd0:	6106      	str	r6, [r0, #16]
 8026dd2:	e7a5      	b.n	8026d20 <__mdiff+0x34>
 8026dd4:	f855 8b04 	ldr.w	r8, [r5], #4
 8026dd8:	fa17 f488 	uxtah	r4, r7, r8
 8026ddc:	1422      	asrs	r2, r4, #16
 8026dde:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8026de2:	b2a4      	uxth	r4, r4
 8026de4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8026de8:	f84e 4b04 	str.w	r4, [lr], #4
 8026dec:	1417      	asrs	r7, r2, #16
 8026dee:	e7e0      	b.n	8026db2 <__mdiff+0xc6>
 8026df0:	3e01      	subs	r6, #1
 8026df2:	e7ea      	b.n	8026dca <__mdiff+0xde>
 8026df4:	080338dd 	.word	0x080338dd
 8026df8:	08033a2c 	.word	0x08033a2c

08026dfc <__ulp>:
 8026dfc:	b082      	sub	sp, #8
 8026dfe:	ed8d 0b00 	vstr	d0, [sp]
 8026e02:	9b01      	ldr	r3, [sp, #4]
 8026e04:	4912      	ldr	r1, [pc, #72]	; (8026e50 <__ulp+0x54>)
 8026e06:	4019      	ands	r1, r3
 8026e08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8026e0c:	2900      	cmp	r1, #0
 8026e0e:	dd05      	ble.n	8026e1c <__ulp+0x20>
 8026e10:	2200      	movs	r2, #0
 8026e12:	460b      	mov	r3, r1
 8026e14:	ec43 2b10 	vmov	d0, r2, r3
 8026e18:	b002      	add	sp, #8
 8026e1a:	4770      	bx	lr
 8026e1c:	4249      	negs	r1, r1
 8026e1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8026e22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8026e26:	f04f 0200 	mov.w	r2, #0
 8026e2a:	f04f 0300 	mov.w	r3, #0
 8026e2e:	da04      	bge.n	8026e3a <__ulp+0x3e>
 8026e30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8026e34:	fa41 f300 	asr.w	r3, r1, r0
 8026e38:	e7ec      	b.n	8026e14 <__ulp+0x18>
 8026e3a:	f1a0 0114 	sub.w	r1, r0, #20
 8026e3e:	291e      	cmp	r1, #30
 8026e40:	bfda      	itte	le
 8026e42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8026e46:	fa20 f101 	lsrle.w	r1, r0, r1
 8026e4a:	2101      	movgt	r1, #1
 8026e4c:	460a      	mov	r2, r1
 8026e4e:	e7e1      	b.n	8026e14 <__ulp+0x18>
 8026e50:	7ff00000 	.word	0x7ff00000

08026e54 <__b2d>:
 8026e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e56:	6905      	ldr	r5, [r0, #16]
 8026e58:	f100 0714 	add.w	r7, r0, #20
 8026e5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8026e60:	1f2e      	subs	r6, r5, #4
 8026e62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8026e66:	4620      	mov	r0, r4
 8026e68:	f7ff fd52 	bl	8026910 <__hi0bits>
 8026e6c:	f1c0 0320 	rsb	r3, r0, #32
 8026e70:	280a      	cmp	r0, #10
 8026e72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8026ef0 <__b2d+0x9c>
 8026e76:	600b      	str	r3, [r1, #0]
 8026e78:	dc14      	bgt.n	8026ea4 <__b2d+0x50>
 8026e7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8026e7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8026e82:	42b7      	cmp	r7, r6
 8026e84:	ea41 030c 	orr.w	r3, r1, ip
 8026e88:	bf34      	ite	cc
 8026e8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8026e8e:	2100      	movcs	r1, #0
 8026e90:	3015      	adds	r0, #21
 8026e92:	fa04 f000 	lsl.w	r0, r4, r0
 8026e96:	fa21 f10e 	lsr.w	r1, r1, lr
 8026e9a:	ea40 0201 	orr.w	r2, r0, r1
 8026e9e:	ec43 2b10 	vmov	d0, r2, r3
 8026ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026ea4:	42b7      	cmp	r7, r6
 8026ea6:	bf3a      	itte	cc
 8026ea8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8026eac:	f1a5 0608 	subcc.w	r6, r5, #8
 8026eb0:	2100      	movcs	r1, #0
 8026eb2:	380b      	subs	r0, #11
 8026eb4:	d017      	beq.n	8026ee6 <__b2d+0x92>
 8026eb6:	f1c0 0c20 	rsb	ip, r0, #32
 8026eba:	fa04 f500 	lsl.w	r5, r4, r0
 8026ebe:	42be      	cmp	r6, r7
 8026ec0:	fa21 f40c 	lsr.w	r4, r1, ip
 8026ec4:	ea45 0504 	orr.w	r5, r5, r4
 8026ec8:	bf8c      	ite	hi
 8026eca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8026ece:	2400      	movls	r4, #0
 8026ed0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8026ed4:	fa01 f000 	lsl.w	r0, r1, r0
 8026ed8:	fa24 f40c 	lsr.w	r4, r4, ip
 8026edc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026ee0:	ea40 0204 	orr.w	r2, r0, r4
 8026ee4:	e7db      	b.n	8026e9e <__b2d+0x4a>
 8026ee6:	ea44 030c 	orr.w	r3, r4, ip
 8026eea:	460a      	mov	r2, r1
 8026eec:	e7d7      	b.n	8026e9e <__b2d+0x4a>
 8026eee:	bf00      	nop
 8026ef0:	3ff00000 	.word	0x3ff00000

08026ef4 <__d2b>:
 8026ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026ef8:	4689      	mov	r9, r1
 8026efa:	2101      	movs	r1, #1
 8026efc:	ec57 6b10 	vmov	r6, r7, d0
 8026f00:	4690      	mov	r8, r2
 8026f02:	f7ff fc0f 	bl	8026724 <_Balloc>
 8026f06:	4604      	mov	r4, r0
 8026f08:	b930      	cbnz	r0, 8026f18 <__d2b+0x24>
 8026f0a:	4602      	mov	r2, r0
 8026f0c:	4b25      	ldr	r3, [pc, #148]	; (8026fa4 <__d2b+0xb0>)
 8026f0e:	4826      	ldr	r0, [pc, #152]	; (8026fa8 <__d2b+0xb4>)
 8026f10:	f240 310a 	movw	r1, #778	; 0x30a
 8026f14:	f7fd fed4 	bl	8024cc0 <__assert_func>
 8026f18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8026f1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8026f20:	bb35      	cbnz	r5, 8026f70 <__d2b+0x7c>
 8026f22:	2e00      	cmp	r6, #0
 8026f24:	9301      	str	r3, [sp, #4]
 8026f26:	d028      	beq.n	8026f7a <__d2b+0x86>
 8026f28:	4668      	mov	r0, sp
 8026f2a:	9600      	str	r6, [sp, #0]
 8026f2c:	f7ff fd10 	bl	8026950 <__lo0bits>
 8026f30:	9900      	ldr	r1, [sp, #0]
 8026f32:	b300      	cbz	r0, 8026f76 <__d2b+0x82>
 8026f34:	9a01      	ldr	r2, [sp, #4]
 8026f36:	f1c0 0320 	rsb	r3, r0, #32
 8026f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8026f3e:	430b      	orrs	r3, r1
 8026f40:	40c2      	lsrs	r2, r0
 8026f42:	6163      	str	r3, [r4, #20]
 8026f44:	9201      	str	r2, [sp, #4]
 8026f46:	9b01      	ldr	r3, [sp, #4]
 8026f48:	61a3      	str	r3, [r4, #24]
 8026f4a:	2b00      	cmp	r3, #0
 8026f4c:	bf14      	ite	ne
 8026f4e:	2202      	movne	r2, #2
 8026f50:	2201      	moveq	r2, #1
 8026f52:	6122      	str	r2, [r4, #16]
 8026f54:	b1d5      	cbz	r5, 8026f8c <__d2b+0x98>
 8026f56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8026f5a:	4405      	add	r5, r0
 8026f5c:	f8c9 5000 	str.w	r5, [r9]
 8026f60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026f64:	f8c8 0000 	str.w	r0, [r8]
 8026f68:	4620      	mov	r0, r4
 8026f6a:	b003      	add	sp, #12
 8026f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026f74:	e7d5      	b.n	8026f22 <__d2b+0x2e>
 8026f76:	6161      	str	r1, [r4, #20]
 8026f78:	e7e5      	b.n	8026f46 <__d2b+0x52>
 8026f7a:	a801      	add	r0, sp, #4
 8026f7c:	f7ff fce8 	bl	8026950 <__lo0bits>
 8026f80:	9b01      	ldr	r3, [sp, #4]
 8026f82:	6163      	str	r3, [r4, #20]
 8026f84:	2201      	movs	r2, #1
 8026f86:	6122      	str	r2, [r4, #16]
 8026f88:	3020      	adds	r0, #32
 8026f8a:	e7e3      	b.n	8026f54 <__d2b+0x60>
 8026f8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026f90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026f94:	f8c9 0000 	str.w	r0, [r9]
 8026f98:	6918      	ldr	r0, [r3, #16]
 8026f9a:	f7ff fcb9 	bl	8026910 <__hi0bits>
 8026f9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026fa2:	e7df      	b.n	8026f64 <__d2b+0x70>
 8026fa4:	080338dd 	.word	0x080338dd
 8026fa8:	08033a2c 	.word	0x08033a2c

08026fac <__ratio>:
 8026fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fb0:	4688      	mov	r8, r1
 8026fb2:	4669      	mov	r1, sp
 8026fb4:	4681      	mov	r9, r0
 8026fb6:	f7ff ff4d 	bl	8026e54 <__b2d>
 8026fba:	a901      	add	r1, sp, #4
 8026fbc:	4640      	mov	r0, r8
 8026fbe:	ec55 4b10 	vmov	r4, r5, d0
 8026fc2:	f7ff ff47 	bl	8026e54 <__b2d>
 8026fc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8026fca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8026fce:	eba3 0c02 	sub.w	ip, r3, r2
 8026fd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8026fd6:	1a9b      	subs	r3, r3, r2
 8026fd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8026fdc:	ec51 0b10 	vmov	r0, r1, d0
 8026fe0:	2b00      	cmp	r3, #0
 8026fe2:	bfd6      	itet	le
 8026fe4:	460a      	movle	r2, r1
 8026fe6:	462a      	movgt	r2, r5
 8026fe8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8026fec:	468b      	mov	fp, r1
 8026fee:	462f      	mov	r7, r5
 8026ff0:	bfd4      	ite	le
 8026ff2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8026ff6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8026ffa:	4620      	mov	r0, r4
 8026ffc:	ee10 2a10 	vmov	r2, s0
 8027000:	465b      	mov	r3, fp
 8027002:	4639      	mov	r1, r7
 8027004:	f7d9 fc32 	bl	800086c <__aeabi_ddiv>
 8027008:	ec41 0b10 	vmov	d0, r0, r1
 802700c:	b003      	add	sp, #12
 802700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027012 <__copybits>:
 8027012:	3901      	subs	r1, #1
 8027014:	b570      	push	{r4, r5, r6, lr}
 8027016:	1149      	asrs	r1, r1, #5
 8027018:	6914      	ldr	r4, [r2, #16]
 802701a:	3101      	adds	r1, #1
 802701c:	f102 0314 	add.w	r3, r2, #20
 8027020:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027024:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027028:	1f05      	subs	r5, r0, #4
 802702a:	42a3      	cmp	r3, r4
 802702c:	d30c      	bcc.n	8027048 <__copybits+0x36>
 802702e:	1aa3      	subs	r3, r4, r2
 8027030:	3b11      	subs	r3, #17
 8027032:	f023 0303 	bic.w	r3, r3, #3
 8027036:	3211      	adds	r2, #17
 8027038:	42a2      	cmp	r2, r4
 802703a:	bf88      	it	hi
 802703c:	2300      	movhi	r3, #0
 802703e:	4418      	add	r0, r3
 8027040:	2300      	movs	r3, #0
 8027042:	4288      	cmp	r0, r1
 8027044:	d305      	bcc.n	8027052 <__copybits+0x40>
 8027046:	bd70      	pop	{r4, r5, r6, pc}
 8027048:	f853 6b04 	ldr.w	r6, [r3], #4
 802704c:	f845 6f04 	str.w	r6, [r5, #4]!
 8027050:	e7eb      	b.n	802702a <__copybits+0x18>
 8027052:	f840 3b04 	str.w	r3, [r0], #4
 8027056:	e7f4      	b.n	8027042 <__copybits+0x30>

08027058 <__any_on>:
 8027058:	f100 0214 	add.w	r2, r0, #20
 802705c:	6900      	ldr	r0, [r0, #16]
 802705e:	114b      	asrs	r3, r1, #5
 8027060:	4298      	cmp	r0, r3
 8027062:	b510      	push	{r4, lr}
 8027064:	db11      	blt.n	802708a <__any_on+0x32>
 8027066:	dd0a      	ble.n	802707e <__any_on+0x26>
 8027068:	f011 011f 	ands.w	r1, r1, #31
 802706c:	d007      	beq.n	802707e <__any_on+0x26>
 802706e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8027072:	fa24 f001 	lsr.w	r0, r4, r1
 8027076:	fa00 f101 	lsl.w	r1, r0, r1
 802707a:	428c      	cmp	r4, r1
 802707c:	d10b      	bne.n	8027096 <__any_on+0x3e>
 802707e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027082:	4293      	cmp	r3, r2
 8027084:	d803      	bhi.n	802708e <__any_on+0x36>
 8027086:	2000      	movs	r0, #0
 8027088:	bd10      	pop	{r4, pc}
 802708a:	4603      	mov	r3, r0
 802708c:	e7f7      	b.n	802707e <__any_on+0x26>
 802708e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8027092:	2900      	cmp	r1, #0
 8027094:	d0f5      	beq.n	8027082 <__any_on+0x2a>
 8027096:	2001      	movs	r0, #1
 8027098:	e7f6      	b.n	8027088 <__any_on+0x30>

0802709a <_realloc_r>:
 802709a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802709c:	4607      	mov	r7, r0
 802709e:	4614      	mov	r4, r2
 80270a0:	460e      	mov	r6, r1
 80270a2:	b921      	cbnz	r1, 80270ae <_realloc_r+0x14>
 80270a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80270a8:	4611      	mov	r1, r2
 80270aa:	f7fb bb8b 	b.w	80227c4 <_malloc_r>
 80270ae:	b922      	cbnz	r2, 80270ba <_realloc_r+0x20>
 80270b0:	f7fb fb38 	bl	8022724 <_free_r>
 80270b4:	4625      	mov	r5, r4
 80270b6:	4628      	mov	r0, r5
 80270b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80270ba:	f000 fe5b 	bl	8027d74 <_malloc_usable_size_r>
 80270be:	42a0      	cmp	r0, r4
 80270c0:	d20f      	bcs.n	80270e2 <_realloc_r+0x48>
 80270c2:	4621      	mov	r1, r4
 80270c4:	4638      	mov	r0, r7
 80270c6:	f7fb fb7d 	bl	80227c4 <_malloc_r>
 80270ca:	4605      	mov	r5, r0
 80270cc:	2800      	cmp	r0, #0
 80270ce:	d0f2      	beq.n	80270b6 <_realloc_r+0x1c>
 80270d0:	4631      	mov	r1, r6
 80270d2:	4622      	mov	r2, r4
 80270d4:	f7fb f868 	bl	80221a8 <memcpy>
 80270d8:	4631      	mov	r1, r6
 80270da:	4638      	mov	r0, r7
 80270dc:	f7fb fb22 	bl	8022724 <_free_r>
 80270e0:	e7e9      	b.n	80270b6 <_realloc_r+0x1c>
 80270e2:	4635      	mov	r5, r6
 80270e4:	e7e7      	b.n	80270b6 <_realloc_r+0x1c>

080270e6 <__ssputs_r>:
 80270e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80270ea:	688e      	ldr	r6, [r1, #8]
 80270ec:	429e      	cmp	r6, r3
 80270ee:	4682      	mov	sl, r0
 80270f0:	460c      	mov	r4, r1
 80270f2:	4690      	mov	r8, r2
 80270f4:	461f      	mov	r7, r3
 80270f6:	d838      	bhi.n	802716a <__ssputs_r+0x84>
 80270f8:	898a      	ldrh	r2, [r1, #12]
 80270fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80270fe:	d032      	beq.n	8027166 <__ssputs_r+0x80>
 8027100:	6825      	ldr	r5, [r4, #0]
 8027102:	6909      	ldr	r1, [r1, #16]
 8027104:	eba5 0901 	sub.w	r9, r5, r1
 8027108:	6965      	ldr	r5, [r4, #20]
 802710a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802710e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027112:	3301      	adds	r3, #1
 8027114:	444b      	add	r3, r9
 8027116:	106d      	asrs	r5, r5, #1
 8027118:	429d      	cmp	r5, r3
 802711a:	bf38      	it	cc
 802711c:	461d      	movcc	r5, r3
 802711e:	0553      	lsls	r3, r2, #21
 8027120:	d531      	bpl.n	8027186 <__ssputs_r+0xa0>
 8027122:	4629      	mov	r1, r5
 8027124:	f7fb fb4e 	bl	80227c4 <_malloc_r>
 8027128:	4606      	mov	r6, r0
 802712a:	b950      	cbnz	r0, 8027142 <__ssputs_r+0x5c>
 802712c:	230c      	movs	r3, #12
 802712e:	f8ca 3000 	str.w	r3, [sl]
 8027132:	89a3      	ldrh	r3, [r4, #12]
 8027134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027138:	81a3      	strh	r3, [r4, #12]
 802713a:	f04f 30ff 	mov.w	r0, #4294967295
 802713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027142:	6921      	ldr	r1, [r4, #16]
 8027144:	464a      	mov	r2, r9
 8027146:	f7fb f82f 	bl	80221a8 <memcpy>
 802714a:	89a3      	ldrh	r3, [r4, #12]
 802714c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027154:	81a3      	strh	r3, [r4, #12]
 8027156:	6126      	str	r6, [r4, #16]
 8027158:	6165      	str	r5, [r4, #20]
 802715a:	444e      	add	r6, r9
 802715c:	eba5 0509 	sub.w	r5, r5, r9
 8027160:	6026      	str	r6, [r4, #0]
 8027162:	60a5      	str	r5, [r4, #8]
 8027164:	463e      	mov	r6, r7
 8027166:	42be      	cmp	r6, r7
 8027168:	d900      	bls.n	802716c <__ssputs_r+0x86>
 802716a:	463e      	mov	r6, r7
 802716c:	4632      	mov	r2, r6
 802716e:	6820      	ldr	r0, [r4, #0]
 8027170:	4641      	mov	r1, r8
 8027172:	f7fb f827 	bl	80221c4 <memmove>
 8027176:	68a3      	ldr	r3, [r4, #8]
 8027178:	6822      	ldr	r2, [r4, #0]
 802717a:	1b9b      	subs	r3, r3, r6
 802717c:	4432      	add	r2, r6
 802717e:	60a3      	str	r3, [r4, #8]
 8027180:	6022      	str	r2, [r4, #0]
 8027182:	2000      	movs	r0, #0
 8027184:	e7db      	b.n	802713e <__ssputs_r+0x58>
 8027186:	462a      	mov	r2, r5
 8027188:	f7ff ff87 	bl	802709a <_realloc_r>
 802718c:	4606      	mov	r6, r0
 802718e:	2800      	cmp	r0, #0
 8027190:	d1e1      	bne.n	8027156 <__ssputs_r+0x70>
 8027192:	6921      	ldr	r1, [r4, #16]
 8027194:	4650      	mov	r0, sl
 8027196:	f7fb fac5 	bl	8022724 <_free_r>
 802719a:	e7c7      	b.n	802712c <__ssputs_r+0x46>

0802719c <_svfiprintf_r>:
 802719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271a0:	4698      	mov	r8, r3
 80271a2:	898b      	ldrh	r3, [r1, #12]
 80271a4:	061b      	lsls	r3, r3, #24
 80271a6:	b09d      	sub	sp, #116	; 0x74
 80271a8:	4607      	mov	r7, r0
 80271aa:	460d      	mov	r5, r1
 80271ac:	4614      	mov	r4, r2
 80271ae:	d50e      	bpl.n	80271ce <_svfiprintf_r+0x32>
 80271b0:	690b      	ldr	r3, [r1, #16]
 80271b2:	b963      	cbnz	r3, 80271ce <_svfiprintf_r+0x32>
 80271b4:	2140      	movs	r1, #64	; 0x40
 80271b6:	f7fb fb05 	bl	80227c4 <_malloc_r>
 80271ba:	6028      	str	r0, [r5, #0]
 80271bc:	6128      	str	r0, [r5, #16]
 80271be:	b920      	cbnz	r0, 80271ca <_svfiprintf_r+0x2e>
 80271c0:	230c      	movs	r3, #12
 80271c2:	603b      	str	r3, [r7, #0]
 80271c4:	f04f 30ff 	mov.w	r0, #4294967295
 80271c8:	e0d1      	b.n	802736e <_svfiprintf_r+0x1d2>
 80271ca:	2340      	movs	r3, #64	; 0x40
 80271cc:	616b      	str	r3, [r5, #20]
 80271ce:	2300      	movs	r3, #0
 80271d0:	9309      	str	r3, [sp, #36]	; 0x24
 80271d2:	2320      	movs	r3, #32
 80271d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80271d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80271dc:	2330      	movs	r3, #48	; 0x30
 80271de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8027388 <_svfiprintf_r+0x1ec>
 80271e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80271e6:	f04f 0901 	mov.w	r9, #1
 80271ea:	4623      	mov	r3, r4
 80271ec:	469a      	mov	sl, r3
 80271ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80271f2:	b10a      	cbz	r2, 80271f8 <_svfiprintf_r+0x5c>
 80271f4:	2a25      	cmp	r2, #37	; 0x25
 80271f6:	d1f9      	bne.n	80271ec <_svfiprintf_r+0x50>
 80271f8:	ebba 0b04 	subs.w	fp, sl, r4
 80271fc:	d00b      	beq.n	8027216 <_svfiprintf_r+0x7a>
 80271fe:	465b      	mov	r3, fp
 8027200:	4622      	mov	r2, r4
 8027202:	4629      	mov	r1, r5
 8027204:	4638      	mov	r0, r7
 8027206:	f7ff ff6e 	bl	80270e6 <__ssputs_r>
 802720a:	3001      	adds	r0, #1
 802720c:	f000 80aa 	beq.w	8027364 <_svfiprintf_r+0x1c8>
 8027210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027212:	445a      	add	r2, fp
 8027214:	9209      	str	r2, [sp, #36]	; 0x24
 8027216:	f89a 3000 	ldrb.w	r3, [sl]
 802721a:	2b00      	cmp	r3, #0
 802721c:	f000 80a2 	beq.w	8027364 <_svfiprintf_r+0x1c8>
 8027220:	2300      	movs	r3, #0
 8027222:	f04f 32ff 	mov.w	r2, #4294967295
 8027226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802722a:	f10a 0a01 	add.w	sl, sl, #1
 802722e:	9304      	str	r3, [sp, #16]
 8027230:	9307      	str	r3, [sp, #28]
 8027232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027236:	931a      	str	r3, [sp, #104]	; 0x68
 8027238:	4654      	mov	r4, sl
 802723a:	2205      	movs	r2, #5
 802723c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027240:	4851      	ldr	r0, [pc, #324]	; (8027388 <_svfiprintf_r+0x1ec>)
 8027242:	f7d8 ffdd 	bl	8000200 <memchr>
 8027246:	9a04      	ldr	r2, [sp, #16]
 8027248:	b9d8      	cbnz	r0, 8027282 <_svfiprintf_r+0xe6>
 802724a:	06d0      	lsls	r0, r2, #27
 802724c:	bf44      	itt	mi
 802724e:	2320      	movmi	r3, #32
 8027250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027254:	0711      	lsls	r1, r2, #28
 8027256:	bf44      	itt	mi
 8027258:	232b      	movmi	r3, #43	; 0x2b
 802725a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802725e:	f89a 3000 	ldrb.w	r3, [sl]
 8027262:	2b2a      	cmp	r3, #42	; 0x2a
 8027264:	d015      	beq.n	8027292 <_svfiprintf_r+0xf6>
 8027266:	9a07      	ldr	r2, [sp, #28]
 8027268:	4654      	mov	r4, sl
 802726a:	2000      	movs	r0, #0
 802726c:	f04f 0c0a 	mov.w	ip, #10
 8027270:	4621      	mov	r1, r4
 8027272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027276:	3b30      	subs	r3, #48	; 0x30
 8027278:	2b09      	cmp	r3, #9
 802727a:	d94e      	bls.n	802731a <_svfiprintf_r+0x17e>
 802727c:	b1b0      	cbz	r0, 80272ac <_svfiprintf_r+0x110>
 802727e:	9207      	str	r2, [sp, #28]
 8027280:	e014      	b.n	80272ac <_svfiprintf_r+0x110>
 8027282:	eba0 0308 	sub.w	r3, r0, r8
 8027286:	fa09 f303 	lsl.w	r3, r9, r3
 802728a:	4313      	orrs	r3, r2
 802728c:	9304      	str	r3, [sp, #16]
 802728e:	46a2      	mov	sl, r4
 8027290:	e7d2      	b.n	8027238 <_svfiprintf_r+0x9c>
 8027292:	9b03      	ldr	r3, [sp, #12]
 8027294:	1d19      	adds	r1, r3, #4
 8027296:	681b      	ldr	r3, [r3, #0]
 8027298:	9103      	str	r1, [sp, #12]
 802729a:	2b00      	cmp	r3, #0
 802729c:	bfbb      	ittet	lt
 802729e:	425b      	neglt	r3, r3
 80272a0:	f042 0202 	orrlt.w	r2, r2, #2
 80272a4:	9307      	strge	r3, [sp, #28]
 80272a6:	9307      	strlt	r3, [sp, #28]
 80272a8:	bfb8      	it	lt
 80272aa:	9204      	strlt	r2, [sp, #16]
 80272ac:	7823      	ldrb	r3, [r4, #0]
 80272ae:	2b2e      	cmp	r3, #46	; 0x2e
 80272b0:	d10c      	bne.n	80272cc <_svfiprintf_r+0x130>
 80272b2:	7863      	ldrb	r3, [r4, #1]
 80272b4:	2b2a      	cmp	r3, #42	; 0x2a
 80272b6:	d135      	bne.n	8027324 <_svfiprintf_r+0x188>
 80272b8:	9b03      	ldr	r3, [sp, #12]
 80272ba:	1d1a      	adds	r2, r3, #4
 80272bc:	681b      	ldr	r3, [r3, #0]
 80272be:	9203      	str	r2, [sp, #12]
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	bfb8      	it	lt
 80272c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80272c8:	3402      	adds	r4, #2
 80272ca:	9305      	str	r3, [sp, #20]
 80272cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8027398 <_svfiprintf_r+0x1fc>
 80272d0:	7821      	ldrb	r1, [r4, #0]
 80272d2:	2203      	movs	r2, #3
 80272d4:	4650      	mov	r0, sl
 80272d6:	f7d8 ff93 	bl	8000200 <memchr>
 80272da:	b140      	cbz	r0, 80272ee <_svfiprintf_r+0x152>
 80272dc:	2340      	movs	r3, #64	; 0x40
 80272de:	eba0 000a 	sub.w	r0, r0, sl
 80272e2:	fa03 f000 	lsl.w	r0, r3, r0
 80272e6:	9b04      	ldr	r3, [sp, #16]
 80272e8:	4303      	orrs	r3, r0
 80272ea:	3401      	adds	r4, #1
 80272ec:	9304      	str	r3, [sp, #16]
 80272ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80272f2:	4826      	ldr	r0, [pc, #152]	; (802738c <_svfiprintf_r+0x1f0>)
 80272f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80272f8:	2206      	movs	r2, #6
 80272fa:	f7d8 ff81 	bl	8000200 <memchr>
 80272fe:	2800      	cmp	r0, #0
 8027300:	d038      	beq.n	8027374 <_svfiprintf_r+0x1d8>
 8027302:	4b23      	ldr	r3, [pc, #140]	; (8027390 <_svfiprintf_r+0x1f4>)
 8027304:	bb1b      	cbnz	r3, 802734e <_svfiprintf_r+0x1b2>
 8027306:	9b03      	ldr	r3, [sp, #12]
 8027308:	3307      	adds	r3, #7
 802730a:	f023 0307 	bic.w	r3, r3, #7
 802730e:	3308      	adds	r3, #8
 8027310:	9303      	str	r3, [sp, #12]
 8027312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027314:	4433      	add	r3, r6
 8027316:	9309      	str	r3, [sp, #36]	; 0x24
 8027318:	e767      	b.n	80271ea <_svfiprintf_r+0x4e>
 802731a:	fb0c 3202 	mla	r2, ip, r2, r3
 802731e:	460c      	mov	r4, r1
 8027320:	2001      	movs	r0, #1
 8027322:	e7a5      	b.n	8027270 <_svfiprintf_r+0xd4>
 8027324:	2300      	movs	r3, #0
 8027326:	3401      	adds	r4, #1
 8027328:	9305      	str	r3, [sp, #20]
 802732a:	4619      	mov	r1, r3
 802732c:	f04f 0c0a 	mov.w	ip, #10
 8027330:	4620      	mov	r0, r4
 8027332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027336:	3a30      	subs	r2, #48	; 0x30
 8027338:	2a09      	cmp	r2, #9
 802733a:	d903      	bls.n	8027344 <_svfiprintf_r+0x1a8>
 802733c:	2b00      	cmp	r3, #0
 802733e:	d0c5      	beq.n	80272cc <_svfiprintf_r+0x130>
 8027340:	9105      	str	r1, [sp, #20]
 8027342:	e7c3      	b.n	80272cc <_svfiprintf_r+0x130>
 8027344:	fb0c 2101 	mla	r1, ip, r1, r2
 8027348:	4604      	mov	r4, r0
 802734a:	2301      	movs	r3, #1
 802734c:	e7f0      	b.n	8027330 <_svfiprintf_r+0x194>
 802734e:	ab03      	add	r3, sp, #12
 8027350:	9300      	str	r3, [sp, #0]
 8027352:	462a      	mov	r2, r5
 8027354:	4b0f      	ldr	r3, [pc, #60]	; (8027394 <_svfiprintf_r+0x1f8>)
 8027356:	a904      	add	r1, sp, #16
 8027358:	4638      	mov	r0, r7
 802735a:	f7fb fc87 	bl	8022c6c <_printf_float>
 802735e:	1c42      	adds	r2, r0, #1
 8027360:	4606      	mov	r6, r0
 8027362:	d1d6      	bne.n	8027312 <_svfiprintf_r+0x176>
 8027364:	89ab      	ldrh	r3, [r5, #12]
 8027366:	065b      	lsls	r3, r3, #25
 8027368:	f53f af2c 	bmi.w	80271c4 <_svfiprintf_r+0x28>
 802736c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802736e:	b01d      	add	sp, #116	; 0x74
 8027370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027374:	ab03      	add	r3, sp, #12
 8027376:	9300      	str	r3, [sp, #0]
 8027378:	462a      	mov	r2, r5
 802737a:	4b06      	ldr	r3, [pc, #24]	; (8027394 <_svfiprintf_r+0x1f8>)
 802737c:	a904      	add	r1, sp, #16
 802737e:	4638      	mov	r0, r7
 8027380:	f7fb ff18 	bl	80231b4 <_printf_i>
 8027384:	e7eb      	b.n	802735e <_svfiprintf_r+0x1c2>
 8027386:	bf00      	nop
 8027388:	080336a4 	.word	0x080336a4
 802738c:	080336ae 	.word	0x080336ae
 8027390:	08022c6d 	.word	0x08022c6d
 8027394:	080270e7 	.word	0x080270e7
 8027398:	080336aa 	.word	0x080336aa

0802739c <_sungetc_r>:
 802739c:	b538      	push	{r3, r4, r5, lr}
 802739e:	1c4b      	adds	r3, r1, #1
 80273a0:	4614      	mov	r4, r2
 80273a2:	d103      	bne.n	80273ac <_sungetc_r+0x10>
 80273a4:	f04f 35ff 	mov.w	r5, #4294967295
 80273a8:	4628      	mov	r0, r5
 80273aa:	bd38      	pop	{r3, r4, r5, pc}
 80273ac:	8993      	ldrh	r3, [r2, #12]
 80273ae:	f023 0320 	bic.w	r3, r3, #32
 80273b2:	8193      	strh	r3, [r2, #12]
 80273b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80273b6:	6852      	ldr	r2, [r2, #4]
 80273b8:	b2cd      	uxtb	r5, r1
 80273ba:	b18b      	cbz	r3, 80273e0 <_sungetc_r+0x44>
 80273bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80273be:	4293      	cmp	r3, r2
 80273c0:	dd08      	ble.n	80273d4 <_sungetc_r+0x38>
 80273c2:	6823      	ldr	r3, [r4, #0]
 80273c4:	1e5a      	subs	r2, r3, #1
 80273c6:	6022      	str	r2, [r4, #0]
 80273c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80273cc:	6863      	ldr	r3, [r4, #4]
 80273ce:	3301      	adds	r3, #1
 80273d0:	6063      	str	r3, [r4, #4]
 80273d2:	e7e9      	b.n	80273a8 <_sungetc_r+0xc>
 80273d4:	4621      	mov	r1, r4
 80273d6:	f000 fc51 	bl	8027c7c <__submore>
 80273da:	2800      	cmp	r0, #0
 80273dc:	d0f1      	beq.n	80273c2 <_sungetc_r+0x26>
 80273de:	e7e1      	b.n	80273a4 <_sungetc_r+0x8>
 80273e0:	6921      	ldr	r1, [r4, #16]
 80273e2:	6823      	ldr	r3, [r4, #0]
 80273e4:	b151      	cbz	r1, 80273fc <_sungetc_r+0x60>
 80273e6:	4299      	cmp	r1, r3
 80273e8:	d208      	bcs.n	80273fc <_sungetc_r+0x60>
 80273ea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80273ee:	42a9      	cmp	r1, r5
 80273f0:	d104      	bne.n	80273fc <_sungetc_r+0x60>
 80273f2:	3b01      	subs	r3, #1
 80273f4:	3201      	adds	r2, #1
 80273f6:	6023      	str	r3, [r4, #0]
 80273f8:	6062      	str	r2, [r4, #4]
 80273fa:	e7d5      	b.n	80273a8 <_sungetc_r+0xc>
 80273fc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8027400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027404:	6363      	str	r3, [r4, #52]	; 0x34
 8027406:	2303      	movs	r3, #3
 8027408:	63a3      	str	r3, [r4, #56]	; 0x38
 802740a:	4623      	mov	r3, r4
 802740c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027410:	6023      	str	r3, [r4, #0]
 8027412:	2301      	movs	r3, #1
 8027414:	e7dc      	b.n	80273d0 <_sungetc_r+0x34>

08027416 <__ssrefill_r>:
 8027416:	b510      	push	{r4, lr}
 8027418:	460c      	mov	r4, r1
 802741a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802741c:	b169      	cbz	r1, 802743a <__ssrefill_r+0x24>
 802741e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027422:	4299      	cmp	r1, r3
 8027424:	d001      	beq.n	802742a <__ssrefill_r+0x14>
 8027426:	f7fb f97d 	bl	8022724 <_free_r>
 802742a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802742c:	6063      	str	r3, [r4, #4]
 802742e:	2000      	movs	r0, #0
 8027430:	6360      	str	r0, [r4, #52]	; 0x34
 8027432:	b113      	cbz	r3, 802743a <__ssrefill_r+0x24>
 8027434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027436:	6023      	str	r3, [r4, #0]
 8027438:	bd10      	pop	{r4, pc}
 802743a:	6923      	ldr	r3, [r4, #16]
 802743c:	6023      	str	r3, [r4, #0]
 802743e:	2300      	movs	r3, #0
 8027440:	6063      	str	r3, [r4, #4]
 8027442:	89a3      	ldrh	r3, [r4, #12]
 8027444:	f043 0320 	orr.w	r3, r3, #32
 8027448:	81a3      	strh	r3, [r4, #12]
 802744a:	f04f 30ff 	mov.w	r0, #4294967295
 802744e:	e7f3      	b.n	8027438 <__ssrefill_r+0x22>

08027450 <__ssvfiscanf_r>:
 8027450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027454:	460c      	mov	r4, r1
 8027456:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802745a:	2100      	movs	r1, #0
 802745c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8027460:	49b2      	ldr	r1, [pc, #712]	; (802772c <__ssvfiscanf_r+0x2dc>)
 8027462:	91a0      	str	r1, [sp, #640]	; 0x280
 8027464:	f10d 0804 	add.w	r8, sp, #4
 8027468:	49b1      	ldr	r1, [pc, #708]	; (8027730 <__ssvfiscanf_r+0x2e0>)
 802746a:	4fb2      	ldr	r7, [pc, #712]	; (8027734 <__ssvfiscanf_r+0x2e4>)
 802746c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8027738 <__ssvfiscanf_r+0x2e8>
 8027470:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8027474:	4606      	mov	r6, r0
 8027476:	91a1      	str	r1, [sp, #644]	; 0x284
 8027478:	9300      	str	r3, [sp, #0]
 802747a:	f892 a000 	ldrb.w	sl, [r2]
 802747e:	f1ba 0f00 	cmp.w	sl, #0
 8027482:	f000 8151 	beq.w	8027728 <__ssvfiscanf_r+0x2d8>
 8027486:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802748a:	f013 0308 	ands.w	r3, r3, #8
 802748e:	f102 0501 	add.w	r5, r2, #1
 8027492:	d019      	beq.n	80274c8 <__ssvfiscanf_r+0x78>
 8027494:	6863      	ldr	r3, [r4, #4]
 8027496:	2b00      	cmp	r3, #0
 8027498:	dd0f      	ble.n	80274ba <__ssvfiscanf_r+0x6a>
 802749a:	6823      	ldr	r3, [r4, #0]
 802749c:	781a      	ldrb	r2, [r3, #0]
 802749e:	5cba      	ldrb	r2, [r7, r2]
 80274a0:	0712      	lsls	r2, r2, #28
 80274a2:	d401      	bmi.n	80274a8 <__ssvfiscanf_r+0x58>
 80274a4:	462a      	mov	r2, r5
 80274a6:	e7e8      	b.n	802747a <__ssvfiscanf_r+0x2a>
 80274a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80274aa:	3201      	adds	r2, #1
 80274ac:	9245      	str	r2, [sp, #276]	; 0x114
 80274ae:	6862      	ldr	r2, [r4, #4]
 80274b0:	3301      	adds	r3, #1
 80274b2:	3a01      	subs	r2, #1
 80274b4:	6062      	str	r2, [r4, #4]
 80274b6:	6023      	str	r3, [r4, #0]
 80274b8:	e7ec      	b.n	8027494 <__ssvfiscanf_r+0x44>
 80274ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80274bc:	4621      	mov	r1, r4
 80274be:	4630      	mov	r0, r6
 80274c0:	4798      	blx	r3
 80274c2:	2800      	cmp	r0, #0
 80274c4:	d0e9      	beq.n	802749a <__ssvfiscanf_r+0x4a>
 80274c6:	e7ed      	b.n	80274a4 <__ssvfiscanf_r+0x54>
 80274c8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80274cc:	f040 8083 	bne.w	80275d6 <__ssvfiscanf_r+0x186>
 80274d0:	9341      	str	r3, [sp, #260]	; 0x104
 80274d2:	9343      	str	r3, [sp, #268]	; 0x10c
 80274d4:	7853      	ldrb	r3, [r2, #1]
 80274d6:	2b2a      	cmp	r3, #42	; 0x2a
 80274d8:	bf02      	ittt	eq
 80274da:	2310      	moveq	r3, #16
 80274dc:	1c95      	addeq	r5, r2, #2
 80274de:	9341      	streq	r3, [sp, #260]	; 0x104
 80274e0:	220a      	movs	r2, #10
 80274e2:	46ab      	mov	fp, r5
 80274e4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80274e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80274ec:	2b09      	cmp	r3, #9
 80274ee:	d91d      	bls.n	802752c <__ssvfiscanf_r+0xdc>
 80274f0:	4891      	ldr	r0, [pc, #580]	; (8027738 <__ssvfiscanf_r+0x2e8>)
 80274f2:	2203      	movs	r2, #3
 80274f4:	f7d8 fe84 	bl	8000200 <memchr>
 80274f8:	b140      	cbz	r0, 802750c <__ssvfiscanf_r+0xbc>
 80274fa:	2301      	movs	r3, #1
 80274fc:	eba0 0009 	sub.w	r0, r0, r9
 8027500:	fa03 f000 	lsl.w	r0, r3, r0
 8027504:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027506:	4318      	orrs	r0, r3
 8027508:	9041      	str	r0, [sp, #260]	; 0x104
 802750a:	465d      	mov	r5, fp
 802750c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027510:	2b78      	cmp	r3, #120	; 0x78
 8027512:	d806      	bhi.n	8027522 <__ssvfiscanf_r+0xd2>
 8027514:	2b57      	cmp	r3, #87	; 0x57
 8027516:	d810      	bhi.n	802753a <__ssvfiscanf_r+0xea>
 8027518:	2b25      	cmp	r3, #37	; 0x25
 802751a:	d05c      	beq.n	80275d6 <__ssvfiscanf_r+0x186>
 802751c:	d856      	bhi.n	80275cc <__ssvfiscanf_r+0x17c>
 802751e:	2b00      	cmp	r3, #0
 8027520:	d074      	beq.n	802760c <__ssvfiscanf_r+0x1bc>
 8027522:	2303      	movs	r3, #3
 8027524:	9347      	str	r3, [sp, #284]	; 0x11c
 8027526:	230a      	movs	r3, #10
 8027528:	9342      	str	r3, [sp, #264]	; 0x108
 802752a:	e081      	b.n	8027630 <__ssvfiscanf_r+0x1e0>
 802752c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802752e:	fb02 1303 	mla	r3, r2, r3, r1
 8027532:	3b30      	subs	r3, #48	; 0x30
 8027534:	9343      	str	r3, [sp, #268]	; 0x10c
 8027536:	465d      	mov	r5, fp
 8027538:	e7d3      	b.n	80274e2 <__ssvfiscanf_r+0x92>
 802753a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802753e:	2a20      	cmp	r2, #32
 8027540:	d8ef      	bhi.n	8027522 <__ssvfiscanf_r+0xd2>
 8027542:	a101      	add	r1, pc, #4	; (adr r1, 8027548 <__ssvfiscanf_r+0xf8>)
 8027544:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027548:	0802761b 	.word	0x0802761b
 802754c:	08027523 	.word	0x08027523
 8027550:	08027523 	.word	0x08027523
 8027554:	08027679 	.word	0x08027679
 8027558:	08027523 	.word	0x08027523
 802755c:	08027523 	.word	0x08027523
 8027560:	08027523 	.word	0x08027523
 8027564:	08027523 	.word	0x08027523
 8027568:	08027523 	.word	0x08027523
 802756c:	08027523 	.word	0x08027523
 8027570:	08027523 	.word	0x08027523
 8027574:	0802768f 	.word	0x0802768f
 8027578:	08027665 	.word	0x08027665
 802757c:	080275d3 	.word	0x080275d3
 8027580:	080275d3 	.word	0x080275d3
 8027584:	080275d3 	.word	0x080275d3
 8027588:	08027523 	.word	0x08027523
 802758c:	08027669 	.word	0x08027669
 8027590:	08027523 	.word	0x08027523
 8027594:	08027523 	.word	0x08027523
 8027598:	08027523 	.word	0x08027523
 802759c:	08027523 	.word	0x08027523
 80275a0:	0802769f 	.word	0x0802769f
 80275a4:	08027671 	.word	0x08027671
 80275a8:	08027613 	.word	0x08027613
 80275ac:	08027523 	.word	0x08027523
 80275b0:	08027523 	.word	0x08027523
 80275b4:	0802769b 	.word	0x0802769b
 80275b8:	08027523 	.word	0x08027523
 80275bc:	08027665 	.word	0x08027665
 80275c0:	08027523 	.word	0x08027523
 80275c4:	08027523 	.word	0x08027523
 80275c8:	0802761b 	.word	0x0802761b
 80275cc:	3b45      	subs	r3, #69	; 0x45
 80275ce:	2b02      	cmp	r3, #2
 80275d0:	d8a7      	bhi.n	8027522 <__ssvfiscanf_r+0xd2>
 80275d2:	2305      	movs	r3, #5
 80275d4:	e02b      	b.n	802762e <__ssvfiscanf_r+0x1de>
 80275d6:	6863      	ldr	r3, [r4, #4]
 80275d8:	2b00      	cmp	r3, #0
 80275da:	dd0d      	ble.n	80275f8 <__ssvfiscanf_r+0x1a8>
 80275dc:	6823      	ldr	r3, [r4, #0]
 80275de:	781a      	ldrb	r2, [r3, #0]
 80275e0:	4552      	cmp	r2, sl
 80275e2:	f040 80a1 	bne.w	8027728 <__ssvfiscanf_r+0x2d8>
 80275e6:	3301      	adds	r3, #1
 80275e8:	6862      	ldr	r2, [r4, #4]
 80275ea:	6023      	str	r3, [r4, #0]
 80275ec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80275ee:	3a01      	subs	r2, #1
 80275f0:	3301      	adds	r3, #1
 80275f2:	6062      	str	r2, [r4, #4]
 80275f4:	9345      	str	r3, [sp, #276]	; 0x114
 80275f6:	e755      	b.n	80274a4 <__ssvfiscanf_r+0x54>
 80275f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80275fa:	4621      	mov	r1, r4
 80275fc:	4630      	mov	r0, r6
 80275fe:	4798      	blx	r3
 8027600:	2800      	cmp	r0, #0
 8027602:	d0eb      	beq.n	80275dc <__ssvfiscanf_r+0x18c>
 8027604:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027606:	2800      	cmp	r0, #0
 8027608:	f040 8084 	bne.w	8027714 <__ssvfiscanf_r+0x2c4>
 802760c:	f04f 30ff 	mov.w	r0, #4294967295
 8027610:	e086      	b.n	8027720 <__ssvfiscanf_r+0x2d0>
 8027612:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027614:	f042 0220 	orr.w	r2, r2, #32
 8027618:	9241      	str	r2, [sp, #260]	; 0x104
 802761a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802761c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027620:	9241      	str	r2, [sp, #260]	; 0x104
 8027622:	2210      	movs	r2, #16
 8027624:	2b6f      	cmp	r3, #111	; 0x6f
 8027626:	9242      	str	r2, [sp, #264]	; 0x108
 8027628:	bf34      	ite	cc
 802762a:	2303      	movcc	r3, #3
 802762c:	2304      	movcs	r3, #4
 802762e:	9347      	str	r3, [sp, #284]	; 0x11c
 8027630:	6863      	ldr	r3, [r4, #4]
 8027632:	2b00      	cmp	r3, #0
 8027634:	dd41      	ble.n	80276ba <__ssvfiscanf_r+0x26a>
 8027636:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027638:	0659      	lsls	r1, r3, #25
 802763a:	d404      	bmi.n	8027646 <__ssvfiscanf_r+0x1f6>
 802763c:	6823      	ldr	r3, [r4, #0]
 802763e:	781a      	ldrb	r2, [r3, #0]
 8027640:	5cba      	ldrb	r2, [r7, r2]
 8027642:	0712      	lsls	r2, r2, #28
 8027644:	d440      	bmi.n	80276c8 <__ssvfiscanf_r+0x278>
 8027646:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027648:	2b02      	cmp	r3, #2
 802764a:	dc4f      	bgt.n	80276ec <__ssvfiscanf_r+0x29c>
 802764c:	466b      	mov	r3, sp
 802764e:	4622      	mov	r2, r4
 8027650:	a941      	add	r1, sp, #260	; 0x104
 8027652:	4630      	mov	r0, r6
 8027654:	f000 f874 	bl	8027740 <_scanf_chars>
 8027658:	2801      	cmp	r0, #1
 802765a:	d065      	beq.n	8027728 <__ssvfiscanf_r+0x2d8>
 802765c:	2802      	cmp	r0, #2
 802765e:	f47f af21 	bne.w	80274a4 <__ssvfiscanf_r+0x54>
 8027662:	e7cf      	b.n	8027604 <__ssvfiscanf_r+0x1b4>
 8027664:	220a      	movs	r2, #10
 8027666:	e7dd      	b.n	8027624 <__ssvfiscanf_r+0x1d4>
 8027668:	2300      	movs	r3, #0
 802766a:	9342      	str	r3, [sp, #264]	; 0x108
 802766c:	2303      	movs	r3, #3
 802766e:	e7de      	b.n	802762e <__ssvfiscanf_r+0x1de>
 8027670:	2308      	movs	r3, #8
 8027672:	9342      	str	r3, [sp, #264]	; 0x108
 8027674:	2304      	movs	r3, #4
 8027676:	e7da      	b.n	802762e <__ssvfiscanf_r+0x1de>
 8027678:	4629      	mov	r1, r5
 802767a:	4640      	mov	r0, r8
 802767c:	f000 fa3c 	bl	8027af8 <__sccl>
 8027680:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027686:	9341      	str	r3, [sp, #260]	; 0x104
 8027688:	4605      	mov	r5, r0
 802768a:	2301      	movs	r3, #1
 802768c:	e7cf      	b.n	802762e <__ssvfiscanf_r+0x1de>
 802768e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027694:	9341      	str	r3, [sp, #260]	; 0x104
 8027696:	2300      	movs	r3, #0
 8027698:	e7c9      	b.n	802762e <__ssvfiscanf_r+0x1de>
 802769a:	2302      	movs	r3, #2
 802769c:	e7c7      	b.n	802762e <__ssvfiscanf_r+0x1de>
 802769e:	9841      	ldr	r0, [sp, #260]	; 0x104
 80276a0:	06c3      	lsls	r3, r0, #27
 80276a2:	f53f aeff 	bmi.w	80274a4 <__ssvfiscanf_r+0x54>
 80276a6:	9b00      	ldr	r3, [sp, #0]
 80276a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80276aa:	1d19      	adds	r1, r3, #4
 80276ac:	9100      	str	r1, [sp, #0]
 80276ae:	681b      	ldr	r3, [r3, #0]
 80276b0:	07c0      	lsls	r0, r0, #31
 80276b2:	bf4c      	ite	mi
 80276b4:	801a      	strhmi	r2, [r3, #0]
 80276b6:	601a      	strpl	r2, [r3, #0]
 80276b8:	e6f4      	b.n	80274a4 <__ssvfiscanf_r+0x54>
 80276ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80276bc:	4621      	mov	r1, r4
 80276be:	4630      	mov	r0, r6
 80276c0:	4798      	blx	r3
 80276c2:	2800      	cmp	r0, #0
 80276c4:	d0b7      	beq.n	8027636 <__ssvfiscanf_r+0x1e6>
 80276c6:	e79d      	b.n	8027604 <__ssvfiscanf_r+0x1b4>
 80276c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80276ca:	3201      	adds	r2, #1
 80276cc:	9245      	str	r2, [sp, #276]	; 0x114
 80276ce:	6862      	ldr	r2, [r4, #4]
 80276d0:	3a01      	subs	r2, #1
 80276d2:	2a00      	cmp	r2, #0
 80276d4:	6062      	str	r2, [r4, #4]
 80276d6:	dd02      	ble.n	80276de <__ssvfiscanf_r+0x28e>
 80276d8:	3301      	adds	r3, #1
 80276da:	6023      	str	r3, [r4, #0]
 80276dc:	e7ae      	b.n	802763c <__ssvfiscanf_r+0x1ec>
 80276de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80276e0:	4621      	mov	r1, r4
 80276e2:	4630      	mov	r0, r6
 80276e4:	4798      	blx	r3
 80276e6:	2800      	cmp	r0, #0
 80276e8:	d0a8      	beq.n	802763c <__ssvfiscanf_r+0x1ec>
 80276ea:	e78b      	b.n	8027604 <__ssvfiscanf_r+0x1b4>
 80276ec:	2b04      	cmp	r3, #4
 80276ee:	dc06      	bgt.n	80276fe <__ssvfiscanf_r+0x2ae>
 80276f0:	466b      	mov	r3, sp
 80276f2:	4622      	mov	r2, r4
 80276f4:	a941      	add	r1, sp, #260	; 0x104
 80276f6:	4630      	mov	r0, r6
 80276f8:	f000 f87a 	bl	80277f0 <_scanf_i>
 80276fc:	e7ac      	b.n	8027658 <__ssvfiscanf_r+0x208>
 80276fe:	4b0f      	ldr	r3, [pc, #60]	; (802773c <__ssvfiscanf_r+0x2ec>)
 8027700:	2b00      	cmp	r3, #0
 8027702:	f43f aecf 	beq.w	80274a4 <__ssvfiscanf_r+0x54>
 8027706:	466b      	mov	r3, sp
 8027708:	4622      	mov	r2, r4
 802770a:	a941      	add	r1, sp, #260	; 0x104
 802770c:	4630      	mov	r0, r6
 802770e:	f3af 8000 	nop.w
 8027712:	e7a1      	b.n	8027658 <__ssvfiscanf_r+0x208>
 8027714:	89a3      	ldrh	r3, [r4, #12]
 8027716:	f013 0f40 	tst.w	r3, #64	; 0x40
 802771a:	bf18      	it	ne
 802771c:	f04f 30ff 	movne.w	r0, #4294967295
 8027720:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8027724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027728:	9844      	ldr	r0, [sp, #272]	; 0x110
 802772a:	e7f9      	b.n	8027720 <__ssvfiscanf_r+0x2d0>
 802772c:	0802739d 	.word	0x0802739d
 8027730:	08027417 	.word	0x08027417
 8027734:	080334c8 	.word	0x080334c8
 8027738:	080336aa 	.word	0x080336aa
 802773c:	00000000 	.word	0x00000000

08027740 <_scanf_chars>:
 8027740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027744:	4615      	mov	r5, r2
 8027746:	688a      	ldr	r2, [r1, #8]
 8027748:	4680      	mov	r8, r0
 802774a:	460c      	mov	r4, r1
 802774c:	b932      	cbnz	r2, 802775c <_scanf_chars+0x1c>
 802774e:	698a      	ldr	r2, [r1, #24]
 8027750:	2a00      	cmp	r2, #0
 8027752:	bf0c      	ite	eq
 8027754:	2201      	moveq	r2, #1
 8027756:	f04f 32ff 	movne.w	r2, #4294967295
 802775a:	608a      	str	r2, [r1, #8]
 802775c:	6822      	ldr	r2, [r4, #0]
 802775e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80277ec <_scanf_chars+0xac>
 8027762:	06d1      	lsls	r1, r2, #27
 8027764:	bf5f      	itttt	pl
 8027766:	681a      	ldrpl	r2, [r3, #0]
 8027768:	1d11      	addpl	r1, r2, #4
 802776a:	6019      	strpl	r1, [r3, #0]
 802776c:	6816      	ldrpl	r6, [r2, #0]
 802776e:	2700      	movs	r7, #0
 8027770:	69a0      	ldr	r0, [r4, #24]
 8027772:	b188      	cbz	r0, 8027798 <_scanf_chars+0x58>
 8027774:	2801      	cmp	r0, #1
 8027776:	d107      	bne.n	8027788 <_scanf_chars+0x48>
 8027778:	682b      	ldr	r3, [r5, #0]
 802777a:	781a      	ldrb	r2, [r3, #0]
 802777c:	6963      	ldr	r3, [r4, #20]
 802777e:	5c9b      	ldrb	r3, [r3, r2]
 8027780:	b953      	cbnz	r3, 8027798 <_scanf_chars+0x58>
 8027782:	bb27      	cbnz	r7, 80277ce <_scanf_chars+0x8e>
 8027784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027788:	2802      	cmp	r0, #2
 802778a:	d120      	bne.n	80277ce <_scanf_chars+0x8e>
 802778c:	682b      	ldr	r3, [r5, #0]
 802778e:	781b      	ldrb	r3, [r3, #0]
 8027790:	f813 3009 	ldrb.w	r3, [r3, r9]
 8027794:	071b      	lsls	r3, r3, #28
 8027796:	d41a      	bmi.n	80277ce <_scanf_chars+0x8e>
 8027798:	6823      	ldr	r3, [r4, #0]
 802779a:	06da      	lsls	r2, r3, #27
 802779c:	bf5e      	ittt	pl
 802779e:	682b      	ldrpl	r3, [r5, #0]
 80277a0:	781b      	ldrbpl	r3, [r3, #0]
 80277a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80277a6:	682a      	ldr	r2, [r5, #0]
 80277a8:	686b      	ldr	r3, [r5, #4]
 80277aa:	3201      	adds	r2, #1
 80277ac:	602a      	str	r2, [r5, #0]
 80277ae:	68a2      	ldr	r2, [r4, #8]
 80277b0:	3b01      	subs	r3, #1
 80277b2:	3a01      	subs	r2, #1
 80277b4:	606b      	str	r3, [r5, #4]
 80277b6:	3701      	adds	r7, #1
 80277b8:	60a2      	str	r2, [r4, #8]
 80277ba:	b142      	cbz	r2, 80277ce <_scanf_chars+0x8e>
 80277bc:	2b00      	cmp	r3, #0
 80277be:	dcd7      	bgt.n	8027770 <_scanf_chars+0x30>
 80277c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80277c4:	4629      	mov	r1, r5
 80277c6:	4640      	mov	r0, r8
 80277c8:	4798      	blx	r3
 80277ca:	2800      	cmp	r0, #0
 80277cc:	d0d0      	beq.n	8027770 <_scanf_chars+0x30>
 80277ce:	6823      	ldr	r3, [r4, #0]
 80277d0:	f013 0310 	ands.w	r3, r3, #16
 80277d4:	d105      	bne.n	80277e2 <_scanf_chars+0xa2>
 80277d6:	68e2      	ldr	r2, [r4, #12]
 80277d8:	3201      	adds	r2, #1
 80277da:	60e2      	str	r2, [r4, #12]
 80277dc:	69a2      	ldr	r2, [r4, #24]
 80277de:	b102      	cbz	r2, 80277e2 <_scanf_chars+0xa2>
 80277e0:	7033      	strb	r3, [r6, #0]
 80277e2:	6923      	ldr	r3, [r4, #16]
 80277e4:	441f      	add	r7, r3
 80277e6:	6127      	str	r7, [r4, #16]
 80277e8:	2000      	movs	r0, #0
 80277ea:	e7cb      	b.n	8027784 <_scanf_chars+0x44>
 80277ec:	080334c8 	.word	0x080334c8

080277f0 <_scanf_i>:
 80277f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277f4:	4698      	mov	r8, r3
 80277f6:	4b74      	ldr	r3, [pc, #464]	; (80279c8 <_scanf_i+0x1d8>)
 80277f8:	460c      	mov	r4, r1
 80277fa:	4682      	mov	sl, r0
 80277fc:	4616      	mov	r6, r2
 80277fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027802:	b087      	sub	sp, #28
 8027804:	ab03      	add	r3, sp, #12
 8027806:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802780a:	4b70      	ldr	r3, [pc, #448]	; (80279cc <_scanf_i+0x1dc>)
 802780c:	69a1      	ldr	r1, [r4, #24]
 802780e:	4a70      	ldr	r2, [pc, #448]	; (80279d0 <_scanf_i+0x1e0>)
 8027810:	2903      	cmp	r1, #3
 8027812:	bf18      	it	ne
 8027814:	461a      	movne	r2, r3
 8027816:	68a3      	ldr	r3, [r4, #8]
 8027818:	9201      	str	r2, [sp, #4]
 802781a:	1e5a      	subs	r2, r3, #1
 802781c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8027820:	bf88      	it	hi
 8027822:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8027826:	4627      	mov	r7, r4
 8027828:	bf82      	ittt	hi
 802782a:	eb03 0905 	addhi.w	r9, r3, r5
 802782e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027832:	60a3      	strhi	r3, [r4, #8]
 8027834:	f857 3b1c 	ldr.w	r3, [r7], #28
 8027838:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802783c:	bf98      	it	ls
 802783e:	f04f 0900 	movls.w	r9, #0
 8027842:	6023      	str	r3, [r4, #0]
 8027844:	463d      	mov	r5, r7
 8027846:	f04f 0b00 	mov.w	fp, #0
 802784a:	6831      	ldr	r1, [r6, #0]
 802784c:	ab03      	add	r3, sp, #12
 802784e:	7809      	ldrb	r1, [r1, #0]
 8027850:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8027854:	2202      	movs	r2, #2
 8027856:	f7d8 fcd3 	bl	8000200 <memchr>
 802785a:	b328      	cbz	r0, 80278a8 <_scanf_i+0xb8>
 802785c:	f1bb 0f01 	cmp.w	fp, #1
 8027860:	d159      	bne.n	8027916 <_scanf_i+0x126>
 8027862:	6862      	ldr	r2, [r4, #4]
 8027864:	b92a      	cbnz	r2, 8027872 <_scanf_i+0x82>
 8027866:	6822      	ldr	r2, [r4, #0]
 8027868:	2308      	movs	r3, #8
 802786a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802786e:	6063      	str	r3, [r4, #4]
 8027870:	6022      	str	r2, [r4, #0]
 8027872:	6822      	ldr	r2, [r4, #0]
 8027874:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027878:	6022      	str	r2, [r4, #0]
 802787a:	68a2      	ldr	r2, [r4, #8]
 802787c:	1e51      	subs	r1, r2, #1
 802787e:	60a1      	str	r1, [r4, #8]
 8027880:	b192      	cbz	r2, 80278a8 <_scanf_i+0xb8>
 8027882:	6832      	ldr	r2, [r6, #0]
 8027884:	1c51      	adds	r1, r2, #1
 8027886:	6031      	str	r1, [r6, #0]
 8027888:	7812      	ldrb	r2, [r2, #0]
 802788a:	f805 2b01 	strb.w	r2, [r5], #1
 802788e:	6872      	ldr	r2, [r6, #4]
 8027890:	3a01      	subs	r2, #1
 8027892:	2a00      	cmp	r2, #0
 8027894:	6072      	str	r2, [r6, #4]
 8027896:	dc07      	bgt.n	80278a8 <_scanf_i+0xb8>
 8027898:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802789c:	4631      	mov	r1, r6
 802789e:	4650      	mov	r0, sl
 80278a0:	4790      	blx	r2
 80278a2:	2800      	cmp	r0, #0
 80278a4:	f040 8085 	bne.w	80279b2 <_scanf_i+0x1c2>
 80278a8:	f10b 0b01 	add.w	fp, fp, #1
 80278ac:	f1bb 0f03 	cmp.w	fp, #3
 80278b0:	d1cb      	bne.n	802784a <_scanf_i+0x5a>
 80278b2:	6863      	ldr	r3, [r4, #4]
 80278b4:	b90b      	cbnz	r3, 80278ba <_scanf_i+0xca>
 80278b6:	230a      	movs	r3, #10
 80278b8:	6063      	str	r3, [r4, #4]
 80278ba:	6863      	ldr	r3, [r4, #4]
 80278bc:	4945      	ldr	r1, [pc, #276]	; (80279d4 <_scanf_i+0x1e4>)
 80278be:	6960      	ldr	r0, [r4, #20]
 80278c0:	1ac9      	subs	r1, r1, r3
 80278c2:	f000 f919 	bl	8027af8 <__sccl>
 80278c6:	f04f 0b00 	mov.w	fp, #0
 80278ca:	68a3      	ldr	r3, [r4, #8]
 80278cc:	6822      	ldr	r2, [r4, #0]
 80278ce:	2b00      	cmp	r3, #0
 80278d0:	d03d      	beq.n	802794e <_scanf_i+0x15e>
 80278d2:	6831      	ldr	r1, [r6, #0]
 80278d4:	6960      	ldr	r0, [r4, #20]
 80278d6:	f891 c000 	ldrb.w	ip, [r1]
 80278da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80278de:	2800      	cmp	r0, #0
 80278e0:	d035      	beq.n	802794e <_scanf_i+0x15e>
 80278e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80278e6:	d124      	bne.n	8027932 <_scanf_i+0x142>
 80278e8:	0510      	lsls	r0, r2, #20
 80278ea:	d522      	bpl.n	8027932 <_scanf_i+0x142>
 80278ec:	f10b 0b01 	add.w	fp, fp, #1
 80278f0:	f1b9 0f00 	cmp.w	r9, #0
 80278f4:	d003      	beq.n	80278fe <_scanf_i+0x10e>
 80278f6:	3301      	adds	r3, #1
 80278f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80278fc:	60a3      	str	r3, [r4, #8]
 80278fe:	6873      	ldr	r3, [r6, #4]
 8027900:	3b01      	subs	r3, #1
 8027902:	2b00      	cmp	r3, #0
 8027904:	6073      	str	r3, [r6, #4]
 8027906:	dd1b      	ble.n	8027940 <_scanf_i+0x150>
 8027908:	6833      	ldr	r3, [r6, #0]
 802790a:	3301      	adds	r3, #1
 802790c:	6033      	str	r3, [r6, #0]
 802790e:	68a3      	ldr	r3, [r4, #8]
 8027910:	3b01      	subs	r3, #1
 8027912:	60a3      	str	r3, [r4, #8]
 8027914:	e7d9      	b.n	80278ca <_scanf_i+0xda>
 8027916:	f1bb 0f02 	cmp.w	fp, #2
 802791a:	d1ae      	bne.n	802787a <_scanf_i+0x8a>
 802791c:	6822      	ldr	r2, [r4, #0]
 802791e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8027922:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8027926:	d1bf      	bne.n	80278a8 <_scanf_i+0xb8>
 8027928:	2310      	movs	r3, #16
 802792a:	6063      	str	r3, [r4, #4]
 802792c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027930:	e7a2      	b.n	8027878 <_scanf_i+0x88>
 8027932:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8027936:	6022      	str	r2, [r4, #0]
 8027938:	780b      	ldrb	r3, [r1, #0]
 802793a:	f805 3b01 	strb.w	r3, [r5], #1
 802793e:	e7de      	b.n	80278fe <_scanf_i+0x10e>
 8027940:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027944:	4631      	mov	r1, r6
 8027946:	4650      	mov	r0, sl
 8027948:	4798      	blx	r3
 802794a:	2800      	cmp	r0, #0
 802794c:	d0df      	beq.n	802790e <_scanf_i+0x11e>
 802794e:	6823      	ldr	r3, [r4, #0]
 8027950:	05d9      	lsls	r1, r3, #23
 8027952:	d50d      	bpl.n	8027970 <_scanf_i+0x180>
 8027954:	42bd      	cmp	r5, r7
 8027956:	d909      	bls.n	802796c <_scanf_i+0x17c>
 8027958:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802795c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027960:	4632      	mov	r2, r6
 8027962:	4650      	mov	r0, sl
 8027964:	4798      	blx	r3
 8027966:	f105 39ff 	add.w	r9, r5, #4294967295
 802796a:	464d      	mov	r5, r9
 802796c:	42bd      	cmp	r5, r7
 802796e:	d028      	beq.n	80279c2 <_scanf_i+0x1d2>
 8027970:	6822      	ldr	r2, [r4, #0]
 8027972:	f012 0210 	ands.w	r2, r2, #16
 8027976:	d113      	bne.n	80279a0 <_scanf_i+0x1b0>
 8027978:	702a      	strb	r2, [r5, #0]
 802797a:	6863      	ldr	r3, [r4, #4]
 802797c:	9e01      	ldr	r6, [sp, #4]
 802797e:	4639      	mov	r1, r7
 8027980:	4650      	mov	r0, sl
 8027982:	47b0      	blx	r6
 8027984:	f8d8 3000 	ldr.w	r3, [r8]
 8027988:	6821      	ldr	r1, [r4, #0]
 802798a:	1d1a      	adds	r2, r3, #4
 802798c:	f8c8 2000 	str.w	r2, [r8]
 8027990:	f011 0f20 	tst.w	r1, #32
 8027994:	681b      	ldr	r3, [r3, #0]
 8027996:	d00f      	beq.n	80279b8 <_scanf_i+0x1c8>
 8027998:	6018      	str	r0, [r3, #0]
 802799a:	68e3      	ldr	r3, [r4, #12]
 802799c:	3301      	adds	r3, #1
 802799e:	60e3      	str	r3, [r4, #12]
 80279a0:	1bed      	subs	r5, r5, r7
 80279a2:	44ab      	add	fp, r5
 80279a4:	6925      	ldr	r5, [r4, #16]
 80279a6:	445d      	add	r5, fp
 80279a8:	6125      	str	r5, [r4, #16]
 80279aa:	2000      	movs	r0, #0
 80279ac:	b007      	add	sp, #28
 80279ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279b2:	f04f 0b00 	mov.w	fp, #0
 80279b6:	e7ca      	b.n	802794e <_scanf_i+0x15e>
 80279b8:	07ca      	lsls	r2, r1, #31
 80279ba:	bf4c      	ite	mi
 80279bc:	8018      	strhmi	r0, [r3, #0]
 80279be:	6018      	strpl	r0, [r3, #0]
 80279c0:	e7eb      	b.n	802799a <_scanf_i+0x1aa>
 80279c2:	2001      	movs	r0, #1
 80279c4:	e7f2      	b.n	80279ac <_scanf_i+0x1bc>
 80279c6:	bf00      	nop
 80279c8:	0802d3e8 	.word	0x0802d3e8
 80279cc:	08027c65 	.word	0x08027c65
 80279d0:	08024625 	.word	0x08024625
 80279d4:	08033ba2 	.word	0x08033ba2

080279d8 <_putc_r>:
 80279d8:	b570      	push	{r4, r5, r6, lr}
 80279da:	460d      	mov	r5, r1
 80279dc:	4614      	mov	r4, r2
 80279de:	4606      	mov	r6, r0
 80279e0:	b118      	cbz	r0, 80279ea <_putc_r+0x12>
 80279e2:	6983      	ldr	r3, [r0, #24]
 80279e4:	b90b      	cbnz	r3, 80279ea <_putc_r+0x12>
 80279e6:	f7fe f953 	bl	8025c90 <__sinit>
 80279ea:	4b1c      	ldr	r3, [pc, #112]	; (8027a5c <_putc_r+0x84>)
 80279ec:	429c      	cmp	r4, r3
 80279ee:	d124      	bne.n	8027a3a <_putc_r+0x62>
 80279f0:	6874      	ldr	r4, [r6, #4]
 80279f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80279f4:	07d8      	lsls	r0, r3, #31
 80279f6:	d405      	bmi.n	8027a04 <_putc_r+0x2c>
 80279f8:	89a3      	ldrh	r3, [r4, #12]
 80279fa:	0599      	lsls	r1, r3, #22
 80279fc:	d402      	bmi.n	8027a04 <_putc_r+0x2c>
 80279fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027a00:	f7fe fdf8 	bl	80265f4 <__retarget_lock_acquire_recursive>
 8027a04:	68a3      	ldr	r3, [r4, #8]
 8027a06:	3b01      	subs	r3, #1
 8027a08:	2b00      	cmp	r3, #0
 8027a0a:	60a3      	str	r3, [r4, #8]
 8027a0c:	da05      	bge.n	8027a1a <_putc_r+0x42>
 8027a0e:	69a2      	ldr	r2, [r4, #24]
 8027a10:	4293      	cmp	r3, r2
 8027a12:	db1c      	blt.n	8027a4e <_putc_r+0x76>
 8027a14:	b2eb      	uxtb	r3, r5
 8027a16:	2b0a      	cmp	r3, #10
 8027a18:	d019      	beq.n	8027a4e <_putc_r+0x76>
 8027a1a:	6823      	ldr	r3, [r4, #0]
 8027a1c:	1c5a      	adds	r2, r3, #1
 8027a1e:	6022      	str	r2, [r4, #0]
 8027a20:	701d      	strb	r5, [r3, #0]
 8027a22:	b2ed      	uxtb	r5, r5
 8027a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027a26:	07da      	lsls	r2, r3, #31
 8027a28:	d405      	bmi.n	8027a36 <_putc_r+0x5e>
 8027a2a:	89a3      	ldrh	r3, [r4, #12]
 8027a2c:	059b      	lsls	r3, r3, #22
 8027a2e:	d402      	bmi.n	8027a36 <_putc_r+0x5e>
 8027a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027a32:	f7fe fde1 	bl	80265f8 <__retarget_lock_release_recursive>
 8027a36:	4628      	mov	r0, r5
 8027a38:	bd70      	pop	{r4, r5, r6, pc}
 8027a3a:	4b09      	ldr	r3, [pc, #36]	; (8027a60 <_putc_r+0x88>)
 8027a3c:	429c      	cmp	r4, r3
 8027a3e:	d101      	bne.n	8027a44 <_putc_r+0x6c>
 8027a40:	68b4      	ldr	r4, [r6, #8]
 8027a42:	e7d6      	b.n	80279f2 <_putc_r+0x1a>
 8027a44:	4b07      	ldr	r3, [pc, #28]	; (8027a64 <_putc_r+0x8c>)
 8027a46:	429c      	cmp	r4, r3
 8027a48:	bf08      	it	eq
 8027a4a:	68f4      	ldreq	r4, [r6, #12]
 8027a4c:	e7d1      	b.n	80279f2 <_putc_r+0x1a>
 8027a4e:	4629      	mov	r1, r5
 8027a50:	4622      	mov	r2, r4
 8027a52:	4630      	mov	r0, r6
 8027a54:	f7fd f862 	bl	8024b1c <__swbuf_r>
 8027a58:	4605      	mov	r5, r0
 8027a5a:	e7e3      	b.n	8027a24 <_putc_r+0x4c>
 8027a5c:	08033910 	.word	0x08033910
 8027a60:	08033930 	.word	0x08033930
 8027a64:	080338f0 	.word	0x080338f0

08027a68 <_read_r>:
 8027a68:	b538      	push	{r3, r4, r5, lr}
 8027a6a:	4d07      	ldr	r5, [pc, #28]	; (8027a88 <_read_r+0x20>)
 8027a6c:	4604      	mov	r4, r0
 8027a6e:	4608      	mov	r0, r1
 8027a70:	4611      	mov	r1, r2
 8027a72:	2200      	movs	r2, #0
 8027a74:	602a      	str	r2, [r5, #0]
 8027a76:	461a      	mov	r2, r3
 8027a78:	f7dc fb25 	bl	80040c6 <_read>
 8027a7c:	1c43      	adds	r3, r0, #1
 8027a7e:	d102      	bne.n	8027a86 <_read_r+0x1e>
 8027a80:	682b      	ldr	r3, [r5, #0]
 8027a82:	b103      	cbz	r3, 8027a86 <_read_r+0x1e>
 8027a84:	6023      	str	r3, [r4, #0]
 8027a86:	bd38      	pop	{r3, r4, r5, pc}
 8027a88:	200019b8 	.word	0x200019b8

08027a8c <__srget_r>:
 8027a8c:	b538      	push	{r3, r4, r5, lr}
 8027a8e:	460c      	mov	r4, r1
 8027a90:	4605      	mov	r5, r0
 8027a92:	b118      	cbz	r0, 8027a9c <__srget_r+0x10>
 8027a94:	6983      	ldr	r3, [r0, #24]
 8027a96:	b90b      	cbnz	r3, 8027a9c <__srget_r+0x10>
 8027a98:	f7fe f8fa 	bl	8025c90 <__sinit>
 8027a9c:	4b0e      	ldr	r3, [pc, #56]	; (8027ad8 <__srget_r+0x4c>)
 8027a9e:	429c      	cmp	r4, r3
 8027aa0:	d10d      	bne.n	8027abe <__srget_r+0x32>
 8027aa2:	686c      	ldr	r4, [r5, #4]
 8027aa4:	4621      	mov	r1, r4
 8027aa6:	4628      	mov	r0, r5
 8027aa8:	f000 f976 	bl	8027d98 <__srefill_r>
 8027aac:	b988      	cbnz	r0, 8027ad2 <__srget_r+0x46>
 8027aae:	6863      	ldr	r3, [r4, #4]
 8027ab0:	3b01      	subs	r3, #1
 8027ab2:	6063      	str	r3, [r4, #4]
 8027ab4:	6823      	ldr	r3, [r4, #0]
 8027ab6:	1c5a      	adds	r2, r3, #1
 8027ab8:	6022      	str	r2, [r4, #0]
 8027aba:	7818      	ldrb	r0, [r3, #0]
 8027abc:	bd38      	pop	{r3, r4, r5, pc}
 8027abe:	4b07      	ldr	r3, [pc, #28]	; (8027adc <__srget_r+0x50>)
 8027ac0:	429c      	cmp	r4, r3
 8027ac2:	d101      	bne.n	8027ac8 <__srget_r+0x3c>
 8027ac4:	68ac      	ldr	r4, [r5, #8]
 8027ac6:	e7ed      	b.n	8027aa4 <__srget_r+0x18>
 8027ac8:	4b05      	ldr	r3, [pc, #20]	; (8027ae0 <__srget_r+0x54>)
 8027aca:	429c      	cmp	r4, r3
 8027acc:	bf08      	it	eq
 8027ace:	68ec      	ldreq	r4, [r5, #12]
 8027ad0:	e7e8      	b.n	8027aa4 <__srget_r+0x18>
 8027ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8027ad6:	e7f1      	b.n	8027abc <__srget_r+0x30>
 8027ad8:	08033910 	.word	0x08033910
 8027adc:	08033930 	.word	0x08033930
 8027ae0:	080338f0 	.word	0x080338f0
 8027ae4:	00000000 	.word	0x00000000

08027ae8 <nan>:
 8027ae8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027af0 <nan+0x8>
 8027aec:	4770      	bx	lr
 8027aee:	bf00      	nop
 8027af0:	00000000 	.word	0x00000000
 8027af4:	7ff80000 	.word	0x7ff80000

08027af8 <__sccl>:
 8027af8:	b570      	push	{r4, r5, r6, lr}
 8027afa:	780b      	ldrb	r3, [r1, #0]
 8027afc:	4604      	mov	r4, r0
 8027afe:	2b5e      	cmp	r3, #94	; 0x5e
 8027b00:	bf0b      	itete	eq
 8027b02:	784b      	ldrbeq	r3, [r1, #1]
 8027b04:	1c48      	addne	r0, r1, #1
 8027b06:	1c88      	addeq	r0, r1, #2
 8027b08:	2200      	movne	r2, #0
 8027b0a:	bf08      	it	eq
 8027b0c:	2201      	moveq	r2, #1
 8027b0e:	1e61      	subs	r1, r4, #1
 8027b10:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8027b14:	f801 2f01 	strb.w	r2, [r1, #1]!
 8027b18:	42a9      	cmp	r1, r5
 8027b1a:	d1fb      	bne.n	8027b14 <__sccl+0x1c>
 8027b1c:	b90b      	cbnz	r3, 8027b22 <__sccl+0x2a>
 8027b1e:	3801      	subs	r0, #1
 8027b20:	bd70      	pop	{r4, r5, r6, pc}
 8027b22:	f082 0101 	eor.w	r1, r2, #1
 8027b26:	54e1      	strb	r1, [r4, r3]
 8027b28:	1c42      	adds	r2, r0, #1
 8027b2a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8027b2e:	2d2d      	cmp	r5, #45	; 0x2d
 8027b30:	f102 36ff 	add.w	r6, r2, #4294967295
 8027b34:	4610      	mov	r0, r2
 8027b36:	d006      	beq.n	8027b46 <__sccl+0x4e>
 8027b38:	2d5d      	cmp	r5, #93	; 0x5d
 8027b3a:	d0f1      	beq.n	8027b20 <__sccl+0x28>
 8027b3c:	b90d      	cbnz	r5, 8027b42 <__sccl+0x4a>
 8027b3e:	4630      	mov	r0, r6
 8027b40:	e7ee      	b.n	8027b20 <__sccl+0x28>
 8027b42:	462b      	mov	r3, r5
 8027b44:	e7ef      	b.n	8027b26 <__sccl+0x2e>
 8027b46:	7816      	ldrb	r6, [r2, #0]
 8027b48:	2e5d      	cmp	r6, #93	; 0x5d
 8027b4a:	d0fa      	beq.n	8027b42 <__sccl+0x4a>
 8027b4c:	42b3      	cmp	r3, r6
 8027b4e:	dcf8      	bgt.n	8027b42 <__sccl+0x4a>
 8027b50:	4618      	mov	r0, r3
 8027b52:	3001      	adds	r0, #1
 8027b54:	4286      	cmp	r6, r0
 8027b56:	5421      	strb	r1, [r4, r0]
 8027b58:	dcfb      	bgt.n	8027b52 <__sccl+0x5a>
 8027b5a:	43d8      	mvns	r0, r3
 8027b5c:	4430      	add	r0, r6
 8027b5e:	1c5d      	adds	r5, r3, #1
 8027b60:	42b3      	cmp	r3, r6
 8027b62:	bfa8      	it	ge
 8027b64:	2000      	movge	r0, #0
 8027b66:	182b      	adds	r3, r5, r0
 8027b68:	3202      	adds	r2, #2
 8027b6a:	e7de      	b.n	8027b2a <__sccl+0x32>

08027b6c <_strtoul_l.isra.0>:
 8027b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027b70:	4e3b      	ldr	r6, [pc, #236]	; (8027c60 <_strtoul_l.isra.0+0xf4>)
 8027b72:	4686      	mov	lr, r0
 8027b74:	468c      	mov	ip, r1
 8027b76:	4660      	mov	r0, ip
 8027b78:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8027b7c:	5da5      	ldrb	r5, [r4, r6]
 8027b7e:	f015 0508 	ands.w	r5, r5, #8
 8027b82:	d1f8      	bne.n	8027b76 <_strtoul_l.isra.0+0xa>
 8027b84:	2c2d      	cmp	r4, #45	; 0x2d
 8027b86:	d134      	bne.n	8027bf2 <_strtoul_l.isra.0+0x86>
 8027b88:	f89c 4000 	ldrb.w	r4, [ip]
 8027b8c:	f04f 0801 	mov.w	r8, #1
 8027b90:	f100 0c02 	add.w	ip, r0, #2
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	d05e      	beq.n	8027c56 <_strtoul_l.isra.0+0xea>
 8027b98:	2b10      	cmp	r3, #16
 8027b9a:	d10c      	bne.n	8027bb6 <_strtoul_l.isra.0+0x4a>
 8027b9c:	2c30      	cmp	r4, #48	; 0x30
 8027b9e:	d10a      	bne.n	8027bb6 <_strtoul_l.isra.0+0x4a>
 8027ba0:	f89c 0000 	ldrb.w	r0, [ip]
 8027ba4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027ba8:	2858      	cmp	r0, #88	; 0x58
 8027baa:	d14f      	bne.n	8027c4c <_strtoul_l.isra.0+0xe0>
 8027bac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8027bb0:	2310      	movs	r3, #16
 8027bb2:	f10c 0c02 	add.w	ip, ip, #2
 8027bb6:	f04f 37ff 	mov.w	r7, #4294967295
 8027bba:	2500      	movs	r5, #0
 8027bbc:	fbb7 f7f3 	udiv	r7, r7, r3
 8027bc0:	fb03 f907 	mul.w	r9, r3, r7
 8027bc4:	ea6f 0909 	mvn.w	r9, r9
 8027bc8:	4628      	mov	r0, r5
 8027bca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8027bce:	2e09      	cmp	r6, #9
 8027bd0:	d818      	bhi.n	8027c04 <_strtoul_l.isra.0+0x98>
 8027bd2:	4634      	mov	r4, r6
 8027bd4:	42a3      	cmp	r3, r4
 8027bd6:	dd24      	ble.n	8027c22 <_strtoul_l.isra.0+0xb6>
 8027bd8:	2d00      	cmp	r5, #0
 8027bda:	db1f      	blt.n	8027c1c <_strtoul_l.isra.0+0xb0>
 8027bdc:	4287      	cmp	r7, r0
 8027bde:	d31d      	bcc.n	8027c1c <_strtoul_l.isra.0+0xb0>
 8027be0:	d101      	bne.n	8027be6 <_strtoul_l.isra.0+0x7a>
 8027be2:	45a1      	cmp	r9, r4
 8027be4:	db1a      	blt.n	8027c1c <_strtoul_l.isra.0+0xb0>
 8027be6:	fb00 4003 	mla	r0, r0, r3, r4
 8027bea:	2501      	movs	r5, #1
 8027bec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8027bf0:	e7eb      	b.n	8027bca <_strtoul_l.isra.0+0x5e>
 8027bf2:	2c2b      	cmp	r4, #43	; 0x2b
 8027bf4:	bf08      	it	eq
 8027bf6:	f89c 4000 	ldrbeq.w	r4, [ip]
 8027bfa:	46a8      	mov	r8, r5
 8027bfc:	bf08      	it	eq
 8027bfe:	f100 0c02 	addeq.w	ip, r0, #2
 8027c02:	e7c7      	b.n	8027b94 <_strtoul_l.isra.0+0x28>
 8027c04:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8027c08:	2e19      	cmp	r6, #25
 8027c0a:	d801      	bhi.n	8027c10 <_strtoul_l.isra.0+0xa4>
 8027c0c:	3c37      	subs	r4, #55	; 0x37
 8027c0e:	e7e1      	b.n	8027bd4 <_strtoul_l.isra.0+0x68>
 8027c10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8027c14:	2e19      	cmp	r6, #25
 8027c16:	d804      	bhi.n	8027c22 <_strtoul_l.isra.0+0xb6>
 8027c18:	3c57      	subs	r4, #87	; 0x57
 8027c1a:	e7db      	b.n	8027bd4 <_strtoul_l.isra.0+0x68>
 8027c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8027c20:	e7e4      	b.n	8027bec <_strtoul_l.isra.0+0x80>
 8027c22:	2d00      	cmp	r5, #0
 8027c24:	da07      	bge.n	8027c36 <_strtoul_l.isra.0+0xca>
 8027c26:	2322      	movs	r3, #34	; 0x22
 8027c28:	f8ce 3000 	str.w	r3, [lr]
 8027c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8027c30:	b942      	cbnz	r2, 8027c44 <_strtoul_l.isra.0+0xd8>
 8027c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027c36:	f1b8 0f00 	cmp.w	r8, #0
 8027c3a:	d000      	beq.n	8027c3e <_strtoul_l.isra.0+0xd2>
 8027c3c:	4240      	negs	r0, r0
 8027c3e:	2a00      	cmp	r2, #0
 8027c40:	d0f7      	beq.n	8027c32 <_strtoul_l.isra.0+0xc6>
 8027c42:	b10d      	cbz	r5, 8027c48 <_strtoul_l.isra.0+0xdc>
 8027c44:	f10c 31ff 	add.w	r1, ip, #4294967295
 8027c48:	6011      	str	r1, [r2, #0]
 8027c4a:	e7f2      	b.n	8027c32 <_strtoul_l.isra.0+0xc6>
 8027c4c:	2430      	movs	r4, #48	; 0x30
 8027c4e:	2b00      	cmp	r3, #0
 8027c50:	d1b1      	bne.n	8027bb6 <_strtoul_l.isra.0+0x4a>
 8027c52:	2308      	movs	r3, #8
 8027c54:	e7af      	b.n	8027bb6 <_strtoul_l.isra.0+0x4a>
 8027c56:	2c30      	cmp	r4, #48	; 0x30
 8027c58:	d0a2      	beq.n	8027ba0 <_strtoul_l.isra.0+0x34>
 8027c5a:	230a      	movs	r3, #10
 8027c5c:	e7ab      	b.n	8027bb6 <_strtoul_l.isra.0+0x4a>
 8027c5e:	bf00      	nop
 8027c60:	080334c8 	.word	0x080334c8

08027c64 <_strtoul_r>:
 8027c64:	f7ff bf82 	b.w	8027b6c <_strtoul_l.isra.0>

08027c68 <strtoul>:
 8027c68:	4613      	mov	r3, r2
 8027c6a:	460a      	mov	r2, r1
 8027c6c:	4601      	mov	r1, r0
 8027c6e:	4802      	ldr	r0, [pc, #8]	; (8027c78 <strtoul+0x10>)
 8027c70:	6800      	ldr	r0, [r0, #0]
 8027c72:	f7ff bf7b 	b.w	8027b6c <_strtoul_l.isra.0>
 8027c76:	bf00      	nop
 8027c78:	2000057c 	.word	0x2000057c

08027c7c <__submore>:
 8027c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027c80:	460c      	mov	r4, r1
 8027c82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027c88:	4299      	cmp	r1, r3
 8027c8a:	d11d      	bne.n	8027cc8 <__submore+0x4c>
 8027c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8027c90:	f7fa fd98 	bl	80227c4 <_malloc_r>
 8027c94:	b918      	cbnz	r0, 8027c9e <__submore+0x22>
 8027c96:	f04f 30ff 	mov.w	r0, #4294967295
 8027c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027ca2:	63a3      	str	r3, [r4, #56]	; 0x38
 8027ca4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8027caa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8027cae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8027cb2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8027cb6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8027cba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8027cbe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8027cc2:	6020      	str	r0, [r4, #0]
 8027cc4:	2000      	movs	r0, #0
 8027cc6:	e7e8      	b.n	8027c9a <__submore+0x1e>
 8027cc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8027cca:	0077      	lsls	r7, r6, #1
 8027ccc:	463a      	mov	r2, r7
 8027cce:	f7ff f9e4 	bl	802709a <_realloc_r>
 8027cd2:	4605      	mov	r5, r0
 8027cd4:	2800      	cmp	r0, #0
 8027cd6:	d0de      	beq.n	8027c96 <__submore+0x1a>
 8027cd8:	eb00 0806 	add.w	r8, r0, r6
 8027cdc:	4601      	mov	r1, r0
 8027cde:	4632      	mov	r2, r6
 8027ce0:	4640      	mov	r0, r8
 8027ce2:	f7fa fa61 	bl	80221a8 <memcpy>
 8027ce6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8027cea:	f8c4 8000 	str.w	r8, [r4]
 8027cee:	e7e9      	b.n	8027cc4 <__submore+0x48>

08027cf0 <__ascii_wctomb>:
 8027cf0:	b149      	cbz	r1, 8027d06 <__ascii_wctomb+0x16>
 8027cf2:	2aff      	cmp	r2, #255	; 0xff
 8027cf4:	bf85      	ittet	hi
 8027cf6:	238a      	movhi	r3, #138	; 0x8a
 8027cf8:	6003      	strhi	r3, [r0, #0]
 8027cfa:	700a      	strbls	r2, [r1, #0]
 8027cfc:	f04f 30ff 	movhi.w	r0, #4294967295
 8027d00:	bf98      	it	ls
 8027d02:	2001      	movls	r0, #1
 8027d04:	4770      	bx	lr
 8027d06:	4608      	mov	r0, r1
 8027d08:	4770      	bx	lr

08027d0a <abort>:
 8027d0a:	b508      	push	{r3, lr}
 8027d0c:	2006      	movs	r0, #6
 8027d0e:	f000 f8f5 	bl	8027efc <raise>
 8027d12:	2001      	movs	r0, #1
 8027d14:	f7dc f9d1 	bl	80040ba <_exit>

08027d18 <__env_lock>:
 8027d18:	4801      	ldr	r0, [pc, #4]	; (8027d20 <__env_lock+0x8>)
 8027d1a:	f7fe bc6b 	b.w	80265f4 <__retarget_lock_acquire_recursive>
 8027d1e:	bf00      	nop
 8027d20:	200019ae 	.word	0x200019ae

08027d24 <__env_unlock>:
 8027d24:	4801      	ldr	r0, [pc, #4]	; (8027d2c <__env_unlock+0x8>)
 8027d26:	f7fe bc67 	b.w	80265f8 <__retarget_lock_release_recursive>
 8027d2a:	bf00      	nop
 8027d2c:	200019ae 	.word	0x200019ae

08027d30 <_fstat_r>:
 8027d30:	b538      	push	{r3, r4, r5, lr}
 8027d32:	4d07      	ldr	r5, [pc, #28]	; (8027d50 <_fstat_r+0x20>)
 8027d34:	2300      	movs	r3, #0
 8027d36:	4604      	mov	r4, r0
 8027d38:	4608      	mov	r0, r1
 8027d3a:	4611      	mov	r1, r2
 8027d3c:	602b      	str	r3, [r5, #0]
 8027d3e:	f7dc f9f4 	bl	800412a <_fstat>
 8027d42:	1c43      	adds	r3, r0, #1
 8027d44:	d102      	bne.n	8027d4c <_fstat_r+0x1c>
 8027d46:	682b      	ldr	r3, [r5, #0]
 8027d48:	b103      	cbz	r3, 8027d4c <_fstat_r+0x1c>
 8027d4a:	6023      	str	r3, [r4, #0]
 8027d4c:	bd38      	pop	{r3, r4, r5, pc}
 8027d4e:	bf00      	nop
 8027d50:	200019b8 	.word	0x200019b8

08027d54 <_isatty_r>:
 8027d54:	b538      	push	{r3, r4, r5, lr}
 8027d56:	4d06      	ldr	r5, [pc, #24]	; (8027d70 <_isatty_r+0x1c>)
 8027d58:	2300      	movs	r3, #0
 8027d5a:	4604      	mov	r4, r0
 8027d5c:	4608      	mov	r0, r1
 8027d5e:	602b      	str	r3, [r5, #0]
 8027d60:	f7dc f9e8 	bl	8004134 <_isatty>
 8027d64:	1c43      	adds	r3, r0, #1
 8027d66:	d102      	bne.n	8027d6e <_isatty_r+0x1a>
 8027d68:	682b      	ldr	r3, [r5, #0]
 8027d6a:	b103      	cbz	r3, 8027d6e <_isatty_r+0x1a>
 8027d6c:	6023      	str	r3, [r4, #0]
 8027d6e:	bd38      	pop	{r3, r4, r5, pc}
 8027d70:	200019b8 	.word	0x200019b8

08027d74 <_malloc_usable_size_r>:
 8027d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027d78:	1f18      	subs	r0, r3, #4
 8027d7a:	2b00      	cmp	r3, #0
 8027d7c:	bfbc      	itt	lt
 8027d7e:	580b      	ldrlt	r3, [r1, r0]
 8027d80:	18c0      	addlt	r0, r0, r3
 8027d82:	4770      	bx	lr

08027d84 <lflush>:
 8027d84:	8983      	ldrh	r3, [r0, #12]
 8027d86:	f003 0309 	and.w	r3, r3, #9
 8027d8a:	2b09      	cmp	r3, #9
 8027d8c:	d101      	bne.n	8027d92 <lflush+0xe>
 8027d8e:	f7fd bf15 	b.w	8025bbc <fflush>
 8027d92:	2000      	movs	r0, #0
 8027d94:	4770      	bx	lr
	...

08027d98 <__srefill_r>:
 8027d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d9a:	460c      	mov	r4, r1
 8027d9c:	4605      	mov	r5, r0
 8027d9e:	b118      	cbz	r0, 8027da8 <__srefill_r+0x10>
 8027da0:	6983      	ldr	r3, [r0, #24]
 8027da2:	b90b      	cbnz	r3, 8027da8 <__srefill_r+0x10>
 8027da4:	f7fd ff74 	bl	8025c90 <__sinit>
 8027da8:	4b3b      	ldr	r3, [pc, #236]	; (8027e98 <__srefill_r+0x100>)
 8027daa:	429c      	cmp	r4, r3
 8027dac:	d10a      	bne.n	8027dc4 <__srefill_r+0x2c>
 8027dae:	686c      	ldr	r4, [r5, #4]
 8027db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027db4:	2300      	movs	r3, #0
 8027db6:	6063      	str	r3, [r4, #4]
 8027db8:	89a3      	ldrh	r3, [r4, #12]
 8027dba:	069e      	lsls	r6, r3, #26
 8027dbc:	d50c      	bpl.n	8027dd8 <__srefill_r+0x40>
 8027dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8027dc2:	e066      	b.n	8027e92 <__srefill_r+0xfa>
 8027dc4:	4b35      	ldr	r3, [pc, #212]	; (8027e9c <__srefill_r+0x104>)
 8027dc6:	429c      	cmp	r4, r3
 8027dc8:	d101      	bne.n	8027dce <__srefill_r+0x36>
 8027dca:	68ac      	ldr	r4, [r5, #8]
 8027dcc:	e7f0      	b.n	8027db0 <__srefill_r+0x18>
 8027dce:	4b34      	ldr	r3, [pc, #208]	; (8027ea0 <__srefill_r+0x108>)
 8027dd0:	429c      	cmp	r4, r3
 8027dd2:	bf08      	it	eq
 8027dd4:	68ec      	ldreq	r4, [r5, #12]
 8027dd6:	e7eb      	b.n	8027db0 <__srefill_r+0x18>
 8027dd8:	0758      	lsls	r0, r3, #29
 8027dda:	d448      	bmi.n	8027e6e <__srefill_r+0xd6>
 8027ddc:	06d9      	lsls	r1, r3, #27
 8027dde:	d405      	bmi.n	8027dec <__srefill_r+0x54>
 8027de0:	2309      	movs	r3, #9
 8027de2:	602b      	str	r3, [r5, #0]
 8027de4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8027de8:	81a3      	strh	r3, [r4, #12]
 8027dea:	e7e8      	b.n	8027dbe <__srefill_r+0x26>
 8027dec:	071a      	lsls	r2, r3, #28
 8027dee:	d50b      	bpl.n	8027e08 <__srefill_r+0x70>
 8027df0:	4621      	mov	r1, r4
 8027df2:	4628      	mov	r0, r5
 8027df4:	f7fd fea6 	bl	8025b44 <_fflush_r>
 8027df8:	2800      	cmp	r0, #0
 8027dfa:	d1e0      	bne.n	8027dbe <__srefill_r+0x26>
 8027dfc:	89a3      	ldrh	r3, [r4, #12]
 8027dfe:	60a0      	str	r0, [r4, #8]
 8027e00:	f023 0308 	bic.w	r3, r3, #8
 8027e04:	81a3      	strh	r3, [r4, #12]
 8027e06:	61a0      	str	r0, [r4, #24]
 8027e08:	89a3      	ldrh	r3, [r4, #12]
 8027e0a:	f043 0304 	orr.w	r3, r3, #4
 8027e0e:	81a3      	strh	r3, [r4, #12]
 8027e10:	6923      	ldr	r3, [r4, #16]
 8027e12:	b91b      	cbnz	r3, 8027e1c <__srefill_r+0x84>
 8027e14:	4621      	mov	r1, r4
 8027e16:	4628      	mov	r0, r5
 8027e18:	f7fe fc26 	bl	8026668 <__smakebuf_r>
 8027e1c:	89a6      	ldrh	r6, [r4, #12]
 8027e1e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8027e22:	07b3      	lsls	r3, r6, #30
 8027e24:	d00f      	beq.n	8027e46 <__srefill_r+0xae>
 8027e26:	2301      	movs	r3, #1
 8027e28:	81a3      	strh	r3, [r4, #12]
 8027e2a:	4b1e      	ldr	r3, [pc, #120]	; (8027ea4 <__srefill_r+0x10c>)
 8027e2c:	491e      	ldr	r1, [pc, #120]	; (8027ea8 <__srefill_r+0x110>)
 8027e2e:	6818      	ldr	r0, [r3, #0]
 8027e30:	f006 0609 	and.w	r6, r6, #9
 8027e34:	f7fd ffaa 	bl	8025d8c <_fwalk>
 8027e38:	2e09      	cmp	r6, #9
 8027e3a:	81a7      	strh	r7, [r4, #12]
 8027e3c:	d103      	bne.n	8027e46 <__srefill_r+0xae>
 8027e3e:	4621      	mov	r1, r4
 8027e40:	4628      	mov	r0, r5
 8027e42:	f7fd fdf9 	bl	8025a38 <__sflush_r>
 8027e46:	6922      	ldr	r2, [r4, #16]
 8027e48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027e4a:	6963      	ldr	r3, [r4, #20]
 8027e4c:	6a21      	ldr	r1, [r4, #32]
 8027e4e:	6022      	str	r2, [r4, #0]
 8027e50:	4628      	mov	r0, r5
 8027e52:	47b0      	blx	r6
 8027e54:	2800      	cmp	r0, #0
 8027e56:	6060      	str	r0, [r4, #4]
 8027e58:	dc1c      	bgt.n	8027e94 <__srefill_r+0xfc>
 8027e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027e5e:	bf17      	itett	ne
 8027e60:	2200      	movne	r2, #0
 8027e62:	f043 0320 	orreq.w	r3, r3, #32
 8027e66:	6062      	strne	r2, [r4, #4]
 8027e68:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8027e6c:	e7bc      	b.n	8027de8 <__srefill_r+0x50>
 8027e6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027e70:	2900      	cmp	r1, #0
 8027e72:	d0cd      	beq.n	8027e10 <__srefill_r+0x78>
 8027e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027e78:	4299      	cmp	r1, r3
 8027e7a:	d002      	beq.n	8027e82 <__srefill_r+0xea>
 8027e7c:	4628      	mov	r0, r5
 8027e7e:	f7fa fc51 	bl	8022724 <_free_r>
 8027e82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8027e84:	6063      	str	r3, [r4, #4]
 8027e86:	2000      	movs	r0, #0
 8027e88:	6360      	str	r0, [r4, #52]	; 0x34
 8027e8a:	2b00      	cmp	r3, #0
 8027e8c:	d0c0      	beq.n	8027e10 <__srefill_r+0x78>
 8027e8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027e90:	6023      	str	r3, [r4, #0]
 8027e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027e94:	2000      	movs	r0, #0
 8027e96:	e7fc      	b.n	8027e92 <__srefill_r+0xfa>
 8027e98:	08033910 	.word	0x08033910
 8027e9c:	08033930 	.word	0x08033930
 8027ea0:	080338f0 	.word	0x080338f0
 8027ea4:	08033640 	.word	0x08033640
 8027ea8:	08027d85 	.word	0x08027d85

08027eac <_raise_r>:
 8027eac:	291f      	cmp	r1, #31
 8027eae:	b538      	push	{r3, r4, r5, lr}
 8027eb0:	4604      	mov	r4, r0
 8027eb2:	460d      	mov	r5, r1
 8027eb4:	d904      	bls.n	8027ec0 <_raise_r+0x14>
 8027eb6:	2316      	movs	r3, #22
 8027eb8:	6003      	str	r3, [r0, #0]
 8027eba:	f04f 30ff 	mov.w	r0, #4294967295
 8027ebe:	bd38      	pop	{r3, r4, r5, pc}
 8027ec0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027ec2:	b112      	cbz	r2, 8027eca <_raise_r+0x1e>
 8027ec4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027ec8:	b94b      	cbnz	r3, 8027ede <_raise_r+0x32>
 8027eca:	4620      	mov	r0, r4
 8027ecc:	f000 f830 	bl	8027f30 <_getpid_r>
 8027ed0:	462a      	mov	r2, r5
 8027ed2:	4601      	mov	r1, r0
 8027ed4:	4620      	mov	r0, r4
 8027ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027eda:	f000 b817 	b.w	8027f0c <_kill_r>
 8027ede:	2b01      	cmp	r3, #1
 8027ee0:	d00a      	beq.n	8027ef8 <_raise_r+0x4c>
 8027ee2:	1c59      	adds	r1, r3, #1
 8027ee4:	d103      	bne.n	8027eee <_raise_r+0x42>
 8027ee6:	2316      	movs	r3, #22
 8027ee8:	6003      	str	r3, [r0, #0]
 8027eea:	2001      	movs	r0, #1
 8027eec:	e7e7      	b.n	8027ebe <_raise_r+0x12>
 8027eee:	2400      	movs	r4, #0
 8027ef0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027ef4:	4628      	mov	r0, r5
 8027ef6:	4798      	blx	r3
 8027ef8:	2000      	movs	r0, #0
 8027efa:	e7e0      	b.n	8027ebe <_raise_r+0x12>

08027efc <raise>:
 8027efc:	4b02      	ldr	r3, [pc, #8]	; (8027f08 <raise+0xc>)
 8027efe:	4601      	mov	r1, r0
 8027f00:	6818      	ldr	r0, [r3, #0]
 8027f02:	f7ff bfd3 	b.w	8027eac <_raise_r>
 8027f06:	bf00      	nop
 8027f08:	2000057c 	.word	0x2000057c

08027f0c <_kill_r>:
 8027f0c:	b538      	push	{r3, r4, r5, lr}
 8027f0e:	4d07      	ldr	r5, [pc, #28]	; (8027f2c <_kill_r+0x20>)
 8027f10:	2300      	movs	r3, #0
 8027f12:	4604      	mov	r4, r0
 8027f14:	4608      	mov	r0, r1
 8027f16:	4611      	mov	r1, r2
 8027f18:	602b      	str	r3, [r5, #0]
 8027f1a:	f7dc f8c6 	bl	80040aa <_kill>
 8027f1e:	1c43      	adds	r3, r0, #1
 8027f20:	d102      	bne.n	8027f28 <_kill_r+0x1c>
 8027f22:	682b      	ldr	r3, [r5, #0]
 8027f24:	b103      	cbz	r3, 8027f28 <_kill_r+0x1c>
 8027f26:	6023      	str	r3, [r4, #0]
 8027f28:	bd38      	pop	{r3, r4, r5, pc}
 8027f2a:	bf00      	nop
 8027f2c:	200019b8 	.word	0x200019b8

08027f30 <_getpid_r>:
 8027f30:	f7dc b8b9 	b.w	80040a6 <_getpid>

08027f34 <_init>:
 8027f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f36:	bf00      	nop
 8027f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027f3a:	bc08      	pop	{r3}
 8027f3c:	469e      	mov	lr, r3
 8027f3e:	4770      	bx	lr

08027f40 <_fini>:
 8027f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f42:	bf00      	nop
 8027f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027f46:	bc08      	pop	{r3}
 8027f48:	469e      	mov	lr, r3
 8027f4a:	4770      	bx	lr
 8027f4c:	0000      	movs	r0, r0
	...
