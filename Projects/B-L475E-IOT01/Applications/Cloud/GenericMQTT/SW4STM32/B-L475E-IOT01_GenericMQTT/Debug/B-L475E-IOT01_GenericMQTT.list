
B-L475E-IOT01_GenericMQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 UNINIT_FIXED_LOC 00002a38  08064000  08064000  00054000  2**11
                  ALLOC
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00028000  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000bd00  08028190  08028190  00038190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08033e90  08033e90  00050818  2**0
                  CONTENTS
  5 .ARM          00000008  08033e90  08033e90  00043e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08033e98  08033e98  00050818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  08033e98  08033e98  00043e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08033ea0  08033ea0  00043ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000818  20000000  08033ea8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001210  20000818  080346c0  00050818  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20001a28  080346c0  00051a28  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050818  2**0
                  CONTENTS, READONLY
 13 .debug_info   000c97c1  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00016a55  00000000  00000000  0011a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00064222  00000000  00000000  00130a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003d18  00000000  00000000  00194c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000064c8  00000000  00000000  00198998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e942  00000000  00000000  0019ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0007866d  00000000  00000000  001dd7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123fdf  00000000  00000000  00255e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00379dee  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000dcf8  00000000  00000000  00379e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000818 	.word	0x20000818
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08028174 	.word	0x08028174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000081c 	.word	0x2000081c
 80001cc:	08028174 	.word	0x08028174

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9ef 	b.w	8001008 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f883 	bl	8000d44 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f876 	bl	8000d44 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f865 	bl	8000d44 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f857 	bl	8000d44 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <TimingSystemGetSystemTime>:
 * @brief  Get RTC time
* @param  void
* @retval time_t : time retrieved from RTC
 */
time_t 	TimingSystemGetSystemTime(void)
{
 800100c:	b530      	push	{r4, r5, lr}
  struct tm*    pCalendar;
  
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;
  returnTime = 0;  
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 800100e:	4d1d      	ldr	r5, [pc, #116]	; (8001084 <TimingSystemGetSystemTime+0x78>)
{
 8001010:	b087      	sub	sp, #28
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 8001012:	4628      	mov	r0, r5
 8001014:	f021 f8d0 	bl	80221b8 <gmtime>

  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 8001018:	2200      	movs	r2, #0
  pCalendar             = gmtime((const time_t*)&timeSyncSystem);
 800101a:	4604      	mov	r4, r0
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 800101c:	a901      	add	r1, sp, #4
 800101e:	481a      	ldr	r0, [pc, #104]	; (8001088 <TimingSystemGetSystemTime+0x7c>)
 8001020:	f009 fedd 	bl	800adde <HAL_RTC_GetTime>
 8001024:	4602      	mov	r2, r0
 8001026:	b128      	cbz	r0, 8001034 <TimingSystemGetSystemTime+0x28>
  returnTime = 0;  
 8001028:	2200      	movs	r2, #0
 800102a:	2300      	movs	r3, #0
#endif
    returnTime        = mktime(pCalendar);
    timeSyncSystem    = returnTime;
  }
  return returnTime;
}
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	b007      	add	sp, #28
 8001032:	bd30      	pop	{r4, r5, pc}
     (HAL_RTC_GetDate(&hrtc,&sdatestructure,FORMAT_BIN)==HAL_OK)) {
 8001034:	4814      	ldr	r0, [pc, #80]	; (8001088 <TimingSystemGetSystemTime+0x7c>)
 8001036:	4669      	mov	r1, sp
 8001038:	f009 fef6 	bl	800ae28 <HAL_RTC_GetDate>
  if((HAL_RTC_GetTime(&hrtc,&stimestructure,FORMAT_BIN)==HAL_OK) &&
 800103c:	2800      	cmp	r0, #0
 800103e:	d1f3      	bne.n	8001028 <TimingSystemGetSystemTime+0x1c>
    pCalendar->tm_year           = sdatestructure.Year +100;
 8001040:	f89d 3003 	ldrb.w	r3, [sp, #3]
    pCalendar->tm_isdst          = 0;
 8001044:	6220      	str	r0, [r4, #32]
    pCalendar->tm_year           = sdatestructure.Year +100;
 8001046:	3364      	adds	r3, #100	; 0x64
 8001048:	6163      	str	r3, [r4, #20]
    pCalendar->tm_mon            = sdatestructure.Month-1;
 800104a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800104e:	3b01      	subs	r3, #1
 8001050:	6123      	str	r3, [r4, #16]
    pCalendar->tm_mday           = sdatestructure.Date;
 8001052:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001056:	60e3      	str	r3, [r4, #12]
    pCalendar->tm_wday           = sdatestructure.WeekDay - 1;
 8001058:	f89d 3000 	ldrb.w	r3, [sp]
 800105c:	3b01      	subs	r3, #1
 800105e:	61a3      	str	r3, [r4, #24]
    pCalendar->tm_hour           = stimestructure.Hours;
 8001060:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001064:	60a3      	str	r3, [r4, #8]
    pCalendar->tm_min            = stimestructure.Minutes;
 8001066:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800106a:	6063      	str	r3, [r4, #4]
    pCalendar->tm_sec            = stimestructure.Seconds;
 800106c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001070:	6023      	str	r3, [r4, #0]
    returnTime        = mktime(pCalendar);
 8001072:	4620      	mov	r0, r4
 8001074:	f021 fac0 	bl	80225f8 <mktime>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
    timeSyncSystem    = returnTime;
 800107c:	e9c5 2300 	strd	r2, r3, [r5]
  return returnTime;
 8001080:	e7d4      	b.n	800102c <TimingSystemGetSystemTime+0x20>
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000
 8001088:	20001170 	.word	0x20001170

0800108c <dialog_ask>:
  * @brief  Ask yes/no question.
  * @param  None
  * @retval None
  */
bool dialog_ask(char *s)
{
 800108c:	b570      	push	{r4, r5, r6, lr}
  char console_yn;
  do
  {
    printf("%s",s);
 800108e:	4e0b      	ldr	r6, [pc, #44]	; (80010bc <dialog_ask+0x30>)
{
 8001090:	4605      	mov	r5, r0
    printf("%s",s);
 8001092:	4629      	mov	r1, r5
 8001094:	4630      	mov	r0, r6
 8001096:	f022 fad3 	bl	8023640 <iprintf>
    console_yn= getchar();
 800109a:	f021 f87b 	bl	8022194 <getchar>
 800109e:	b2c4      	uxtb	r4, r0
    printf("\b");
 80010a0:	2008      	movs	r0, #8
 80010a2:	f022 fae5 	bl	8023670 <putchar>
  }
  while((console_yn != 'y') && (console_yn != 'n') && (console_yn != '\n'));
 80010a6:	2c79      	cmp	r4, #121	; 0x79
 80010a8:	d005      	beq.n	80010b6 <dialog_ask+0x2a>
 80010aa:	2c6e      	cmp	r4, #110	; 0x6e
 80010ac:	d001      	beq.n	80010b2 <dialog_ask+0x26>
 80010ae:	2c0a      	cmp	r4, #10
 80010b0:	d1ef      	bne.n	8001092 <dialog_ask+0x6>
  if (console_yn == 'y') return true;
  return false;
 80010b2:	2000      	movs	r0, #0
 80010b4:	e000      	b.n	80010b8 <dialog_ask+0x2c>
  if (console_yn == 'y') return true;
 80010b6:	2001      	movs	r0, #1
}
 80010b8:	bd70      	pop	{r4, r5, r6, pc}
 80010ba:	bf00      	nop
 80010bc:	08031619 	.word	0x08031619

080010c0 <CLOUD_Error_Handler>:
  * @param  None
  * @retval None
  */
void CLOUD_Error_Handler(int errorCode)
{
  switch (errorCode)
 80010c0:	3008      	adds	r0, #8
{
 80010c2:	b508      	push	{r3, lr}
 80010c4:	2806      	cmp	r0, #6
 80010c6:	d808      	bhi.n	80010da <CLOUD_Error_Handler+0x1a>
 80010c8:	e8df f000 	tbb	[pc, r0]
 80010cc:	12141604 	.word	0x12141604
 80010d0:	0e10      	.short	0x0e10
 80010d2:	04          	.byte	0x04
 80010d3:	00          	.byte	0x00
  {
    case (CLOUD_DEMO_C2C_INITIALIZATION_ERROR):
    case (CLOUD_DEMO_WIFI_INITIALIZATION_ERROR):
    {
      printf("Error initializing the module!\n");
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <CLOUD_Error_Handler+0x3c>)
      
      break;
    }
    case (CLOUD_DEMO_TIMEDATE_ERROR):
    {
      printf("Error initializing the RTC from the network time!\n");
 80010d6:	f022 fb4f 	bl	8023778 <puts>
    }
  }
  
  while (1)
  {
    BSP_LED_Toggle(LED_GREEN);
 80010da:	2000      	movs	r0, #0
 80010dc:	f004 f824 	bl	8005128 <BSP_LED_Toggle>
    HAL_Delay(200);
 80010e0:	20c8      	movs	r0, #200	; 0xc8
 80010e2:	f007 fd67 	bl	8008bb4 <HAL_Delay>
  while (1)
 80010e6:	e7f8      	b.n	80010da <CLOUD_Error_Handler+0x1a>
      printf("Error detecting module!\n");
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <CLOUD_Error_Handler+0x40>)
 80010ea:	e7f4      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error connecting to AP!\n");
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <CLOUD_Error_Handler+0x44>)
 80010ee:	e7f2      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error retrieving IP address!\n");
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <CLOUD_Error_Handler+0x48>)
 80010f2:	e7f0      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error connecting to Cloud!\n");
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <CLOUD_Error_Handler+0x4c>)
 80010f6:	e7ee      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
      printf("Error initializing the RTC from the network time!\n");
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <CLOUD_Error_Handler+0x50>)
 80010fa:	e7ec      	b.n	80010d6 <CLOUD_Error_Handler+0x16>
 80010fc:	0802d69c 	.word	0x0802d69c
 8001100:	0802d6bb 	.word	0x0802d6bb
 8001104:	0802d6d3 	.word	0x0802d6d3
 8001108:	0802d6eb 	.word	0x0802d6eb
 800110c:	0802d708 	.word	0x0802d708
 8001110:	0802d723 	.word	0x0802d723

08001114 <platform_init>:


const firmware_version_t version = { FW_VERSION_NAME, FW_VERSION_MAJOR, FW_VERSION_MINOR, FW_VERSION_PATCH, FW_VERSION_DATE};

int platform_init(void)
{
 8001114:	b510      	push	{r4, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
  net_ipaddr_t ipAddr;
  net_macaddr_t macAddr;
  const firmware_version_t  *fw_version=&version;;
  unsigned int random_number = 0;
 8001118:	2300      	movs	r3, #0
#ifdef HEAP_DEBUG
  stack_measure_prologue();
#endif
  
  /* Initialize the seed of the stdlib rand() SW implementation from the RNG. */
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 800111a:	4852      	ldr	r0, [pc, #328]	; (8001264 <platform_init+0x150>)
  unsigned int random_number = 0;
 800111c:	9304      	str	r3, [sp, #16]
  if (HAL_RNG_GenerateRandomNumber(&hrng, (uint32_t *) &random_number) == HAL_OK)
 800111e:	a904      	add	r1, sp, #16
 8001120:	f009 fcb5 	bl	800aa8e <HAL_RNG_GenerateRandomNumber>
 8001124:	b910      	cbnz	r0, 800112c <platform_init+0x18>
  {
    srand(random_number);
 8001126:	9804      	ldr	r0, [sp, #16]
 8001128:	f022 fb2e 	bl	8023788 <srand>
  }

  printf("\n");
 800112c:	200a      	movs	r0, #10
 800112e:	f022 fa9f 	bl	8023670 <putchar>
  printf("*************************************************************\n");
 8001132:	484d      	ldr	r0, [pc, #308]	; (8001268 <platform_init+0x154>)
  printf("*************************************************************\n");

  
  printf("\n*** Board personalization ***\n\n");
  /* Network initialization */
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 8001134:	4c4d      	ldr	r4, [pc, #308]	; (800126c <platform_init+0x158>)
  printf("*************************************************************\n");
 8001136:	f022 fb1f 	bl	8023778 <puts>
  printf("***   STM32 IoT Discovery kit for                         \n");
 800113a:	484d      	ldr	r0, [pc, #308]	; (8001270 <platform_init+0x15c>)
 800113c:	f022 fb1c 	bl	8023778 <puts>
  printf("***      STM32F413/STM32F769/STM32L475/STM32L496 MCU      \n");
 8001140:	484c      	ldr	r0, [pc, #304]	; (8001274 <platform_init+0x160>)
 8001142:	f022 fb19 	bl	8023778 <puts>
  printf("***   %s Cloud Connectivity Demonstration                 \n",fw_version->name);
 8001146:	494c      	ldr	r1, [pc, #304]	; (8001278 <platform_init+0x164>)
 8001148:	484c      	ldr	r0, [pc, #304]	; (800127c <platform_init+0x168>)
 800114a:	f022 fa79 	bl	8023640 <iprintf>
  printf("***   FW version %d.%d.%d - %s      \n",
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <platform_init+0x16c>)
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	461a      	mov	r2, r3
 8001156:	2101      	movs	r1, #1
 8001158:	484a      	ldr	r0, [pc, #296]	; (8001284 <platform_init+0x170>)
 800115a:	f022 fa71 	bl	8023640 <iprintf>
  printf("*************************************************************\n");
 800115e:	4842      	ldr	r0, [pc, #264]	; (8001268 <platform_init+0x154>)
 8001160:	f022 fb0a 	bl	8023778 <puts>
  printf("\n*** Board personalization ***\n\n");
 8001164:	4848      	ldr	r0, [pc, #288]	; (8001288 <platform_init+0x174>)
 8001166:	f022 fb07 	bl	8023778 <puts>
  if (net_init(&hnet, NET_IF, (net_if_init)) != NET_OK)
 800116a:	4a48      	ldr	r2, [pc, #288]	; (800128c <platform_init+0x178>)
 800116c:	2101      	movs	r1, #1
 800116e:	4620      	mov	r0, r4
 8001170:	f000 fd5c 	bl	8001c2c <net_init>
 8001174:	b110      	cbz	r0, 800117c <platform_init+0x68>
      case NET_IP_V4:
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
        break;
      case NET_IP_V6:
      default:
        CLOUD_Error_Handler(CLOUD_DEMO_IP_ADDRESS_ERROR);
 8001176:	f06f 0004 	mvn.w	r0, #4
 800117a:	e043      	b.n	8001204 <platform_init+0xf0>
  if (net_get_mac_address(hnet, &macAddr) == NET_OK)
 800117c:	6820      	ldr	r0, [r4, #0]
 800117e:	a905      	add	r1, sp, #20
 8001180:	f000 fe02 	bl	8001d88 <net_get_mac_address>
 8001184:	2800      	cmp	r0, #0
 8001186:	d13b      	bne.n	8001200 <platform_init+0xec>
    msg_info("Mac address: %02x:%02x:%02x:%02x:%02x:%02x\n",
 8001188:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001198:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800119c:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	483b      	ldr	r0, [pc, #236]	; (8001290 <platform_init+0x17c>)
 80011a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80011a8:	f022 fa4a 	bl	8023640 <iprintf>
  HAL_Delay(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b0:	f007 fd00 	bl	8008bb4 <HAL_Delay>
  msg_info("Retrieving the IP address.\n");
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <platform_init+0x180>)
 80011b6:	f022 fadf 	bl	8023778 <puts>
  if (net_get_ip_address(hnet, &ipAddr) != NET_OK)
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	a907      	add	r1, sp, #28
 80011be:	f000 fdb3 	bl	8001d28 <net_get_ip_address>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1d7      	bne.n	8001176 <platform_init+0x62>
    switch(ipAddr.ipv)
 80011c6:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1d3      	bne.n	8001176 <platform_init+0x62>
        msg_info("IP address: %d.%d.%d.%d\n", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
 80011ce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80011d2:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 80011d6:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	482e      	ldr	r0, [pc, #184]	; (8001298 <platform_init+0x184>)
 80011de:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80011e2:	f022 fa2d 	bl	8023640 <iprintf>
  /* Security and cloud parameters definition */
  /* Define, or allow to update if the user button is pushed. */
  
  
  
  skip_reconf = (checkTLSRootCA() == 0)
 80011e6:	f000 faf7 	bl	80017d8 <checkTLSRootCA>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
    && (checkIoTDeviceConfig() == 0);
 80011ea:	b168      	cbz	r0, 8001208 <platform_init+0xf4>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    if ((checkIoTDeviceConfig() != 0) || dialog_ask("Do you want to update your IoT device connection parameters? (y/n)\n"))
 80011ec:	f000 fc30 	bl	8001a50 <checkIoTDeviceConfig>
 80011f0:	bb40      	cbnz	r0, 8001244 <platform_init+0x130>
 80011f2:	482a      	ldr	r0, [pc, #168]	; (800129c <platform_init+0x188>)
 80011f4:	f7ff ff4a 	bl	800108c <dialog_ask>
 80011f8:	bb20      	cbnz	r0, 8001244 <platform_init+0x130>
      {
        msg_error("Failed configuring the IoT device.\n");
      }
    }
#if defined(USE_MBED_TLS) || (!defined(USE_CLEAR_TIMEDATE))
    updateTLSCredentials();
 80011fa:	f000 fb1d 	bl	8001838 <updateTLSCredentials>
 80011fe:	e017      	b.n	8001230 <platform_init+0x11c>
    CLOUD_Error_Handler(CLOUD_DEMO_MAC_ADDRESS_ERROR);
 8001200:	f06f 0002 	mvn.w	r0, #2
 8001204:	f7ff ff5c 	bl	80010c0 <CLOUD_Error_Handler>
    && ( (checkTLSDeviceConfig() == 0) || !app_needs_device_keypair() )
 8001208:	f000 fafe 	bl	8001808 <checkTLSDeviceConfig>
 800120c:	b118      	cbz	r0, 8001216 <platform_init+0x102>
 800120e:	f002 fae1 	bl	80037d4 <app_needs_device_keypair>
 8001212:	2800      	cmp	r0, #0
 8001214:	d1ea      	bne.n	80011ec <platform_init+0xd8>
    && (checkIoTDeviceConfig() == 0);
 8001216:	f000 fc1b 	bl	8001a50 <checkIoTDeviceConfig>
  if (skip_reconf == true)
 800121a:	2800      	cmp	r0, #0
 800121c:	d1e6      	bne.n	80011ec <platform_init+0xd8>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update "
 800121e:	4820      	ldr	r0, [pc, #128]	; (80012a0 <platform_init+0x18c>)
 8001220:	f022 faaa 	bl	8023778 <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 8001224:	f241 3088 	movw	r0, #5000	; 0x1388
 8001228:	f002 ffb8 	bl	800419c <Button_WaitForPush>
  if (skip_reconf == false)
 800122c:	2800      	cmp	r0, #0
 800122e:	d1dd      	bne.n	80011ec <platform_init+0xd8>
#endif
  }
  /* End of security and cloud parameters definition */
  
  msg_info("Setting the RTC from the network time.\n");
 8001230:	481c      	ldr	r0, [pc, #112]	; (80012a4 <platform_init+0x190>)
 8001232:	f022 faa1 	bl	8023778 <puts>
#ifdef CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE
  if (setRTCTimeDateFromNetwork(true) != TD_OK)
 8001236:	2001      	movs	r0, #1
 8001238:	f001 fdfa 	bl	8002e30 <setRTCTimeDateFromNetwork>
 800123c:	b180      	cbz	r0, 8001260 <platform_init+0x14c>
#else   /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
    if ( (setRTCTimeDateFromNetwork(false) != TD_OK) && (setRTCTimeDateFromNetwork(true) != TD_OK) )
#endif  /* CLOUD_TIMEDATE_TLS_VERIFICATION_IGNORE */
  
  {
    CLOUD_Error_Handler(CLOUD_DEMO_TIMEDATE_ERROR);
 800123e:	f06f 0006 	mvn.w	r0, #6
 8001242:	e7df      	b.n	8001204 <platform_init+0xf0>
      if (cloud_device_enter_credentials() != 0)
 8001244:	f002 f99c 	bl	8003580 <cloud_device_enter_credentials>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0d6      	beq.n	80011fa <platform_init+0xe6>
        msg_error("Failed configuring the IoT device.\n");
 800124c:	4916      	ldr	r1, [pc, #88]	; (80012a8 <platform_init+0x194>)
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <platform_init+0x198>)
 8001250:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001254:	f022 f9f4 	bl	8023640 <iprintf>
 8001258:	4815      	ldr	r0, [pc, #84]	; (80012b0 <platform_init+0x19c>)
 800125a:	f022 fa8d 	bl	8023778 <puts>
 800125e:	e7cc      	b.n	80011fa <platform_init+0xe6>
    msg_error("init_sensors returned error : %d\n", res);
  }
#endif /* SENSOR */
   
 return 0;
}
 8001260:	b00c      	add	sp, #48	; 0x30
 8001262:	bd10      	pop	{r4, pc}
 8001264:	200011d4 	.word	0x200011d4
 8001268:	0802d755 	.word	0x0802d755
 800126c:	200011e0 	.word	0x200011e0
 8001270:	0802d793 	.word	0x0802d793
 8001274:	0802d7ce 	.word	0x0802d7ce
 8001278:	08028190 	.word	0x08028190
 800127c:	0802d809 	.word	0x0802d809
 8001280:	0802d86b 	.word	0x0802d86b
 8001284:	0802d845 	.word	0x0802d845
 8001288:	0802d885 	.word	0x0802d885
 800128c:	08003239 	.word	0x08003239
 8001290:	0802d8a5 	.word	0x0802d8a5
 8001294:	0802d8d1 	.word	0x0802d8d1
 8001298:	0802d8ec 	.word	0x0802d8ec
 800129c:	0802d981 	.word	0x0802d981
 80012a0:	0802d905 	.word	0x0802d905
 80012a4:	0802d9f8 	.word	0x0802d9f8
 80012a8:	080281ac 	.word	0x080281ac
 80012ac:	0802d9c5 	.word	0x0802d9c5
 80012b0:	0802d9d5 	.word	0x0802d9d5

080012b4 <platform_deinit>:


void    platform_deinit()
{
 80012b4:	b508      	push	{r3, lr}
   /* Close Cloud connectivity demonstration */
  printf("\n*** Cloud connectivity demonstration ***\n\n");
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <platform_deinit+0x1c>)
 80012b8:	f022 fa5e 	bl	8023778 <puts>
  printf("Cloud connectivity demonstration completed\n");
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <platform_deinit+0x20>)
 80012be:	f022 fa5b 	bl	8023778 <puts>


  (void)net_deinit(hnet, (net_if_deinit));
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <platform_deinit+0x24>)
 80012c4:	4905      	ldr	r1, [pc, #20]	; (80012dc <platform_deinit+0x28>)
 80012c6:	6818      	ldr	r0, [r3, #0]
#endif

  heap_stat(&heap_max,&heap_current,&stack_size);
  msg_info("Heap Max allocation 0x%x (%d), current allocation 0x%x (%d), Stack max size 0x%x (%d)\n",heap_max,heap_max,heap_current,heap_current,stack_size,stack_size);
#endif
}
 80012c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  (void)net_deinit(hnet, (net_if_deinit));
 80012cc:	f000 bcec 	b.w	8001ca8 <net_deinit>
 80012d0:	0802da1f 	.word	0x0802da1f
 80012d4:	0802da4a 	.word	0x0802da4a
 80012d8:	200011e0 	.word	0x200011e0
 80012dc:	08003379 	.word	0x08003379

080012e0 <mbedtls_hardware_poll>:
                    unsigned char *output, size_t len, size_t *olen );


int mbedtls_hardware_poll( void *data,
                    unsigned char *output, size_t len, size_t *olen )
{
 80012e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012e2:	4616      	mov	r6, r2
 80012e4:	461c      	mov	r4, r3
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t random_number = 0;
 80012e6:	2700      	movs	r7, #0
  
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <mbedtls_hardware_poll+0x2c>)
  uint32_t random_number = 0;
 80012ea:	9701      	str	r7, [sp, #4]
{
 80012ec:	460d      	mov	r5, r1
  status = HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 80012ee:	a901      	add	r1, sp, #4
 80012f0:	f009 fbcd 	bl	800aa8e <HAL_RNG_GenerateRandomNumber>
  ((void) data);
  *olen = 0;
  
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 80012f4:	2e03      	cmp	r6, #3
  *olen = 0;
 80012f6:	6027      	str	r7, [r4, #0]
  if ((len < sizeof(uint32_t)) || (HAL_OK != status))
 80012f8:	d904      	bls.n	8001304 <mbedtls_hardware_poll+0x24>
 80012fa:	b918      	cbnz	r0, 8001304 <mbedtls_hardware_poll+0x24>
  {
    return 0;
  }
  
  memcpy(output, &random_number, sizeof(uint32_t));
 80012fc:	9b01      	ldr	r3, [sp, #4]
 80012fe:	602b      	str	r3, [r5, #0]
  *olen = sizeof(uint32_t);
 8001300:	2304      	movs	r3, #4
 8001302:	6023      	str	r3, [r4, #0]
  
  return 0;
}
 8001304:	2000      	movs	r0, #0
 8001306:	b003      	add	sp, #12
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop
 800130c:	200011d4 	.word	0x200011d4

08001310 <FLASH_get_pageInBank>:
  */
static int FLASH_get_pageInBank(uint32_t addr)
{
  int page = -1;

  if ( ((FLASH_BASE + FLASH_SIZE) > addr) && (addr >= FLASH_BASE) )
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <FLASH_get_pageInBank+0x58>)
 8001312:	8819      	ldrh	r1, [r3, #0]
 8001314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001318:	4299      	cmp	r1, r3
 800131a:	bf1d      	ittte	ne
 800131c:	4a13      	ldrne	r2, [pc, #76]	; (800136c <FLASH_get_pageInBank+0x5c>)
 800131e:	ea02 2281 	andne.w	r2, r2, r1, lsl #10
 8001322:	f102 6200 	addne.w	r2, r2, #134217728	; 0x8000000
 8001326:	f04f 6201 	moveq.w	r2, #135266304	; 0x8100000
 800132a:	4282      	cmp	r2, r0
 800132c:	d911      	bls.n	8001352 <FLASH_get_pageInBank+0x42>
 800132e:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001332:	d30e      	bcc.n	8001352 <FLASH_get_pageInBank+0x42>
  {
    /* The address is in internal FLASH range. */
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	4299      	cmp	r1, r3
 800133a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800133e:	d00b      	beq.n	8001358 <FLASH_get_pageInBank+0x48>
 8001340:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <FLASH_get_pageInBank+0x60>)
 8001342:	ea02 2241 	and.w	r2, r2, r1, lsl #9
 8001346:	f102 6100 	add.w	r1, r2, #134217728	; 0x8000000
 800134a:	4288      	cmp	r0, r1
 800134c:	d209      	bcs.n	8001362 <FLASH_get_pageInBank+0x52>
    { 
      /* Addr in the first bank */
      page = (addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 800134e:	0ad8      	lsrs	r0, r3, #11
 8001350:	4770      	bx	lr
  int page = -1;
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
    }
  }
  
  return page;
}
 8001356:	4770      	bx	lr
    if ( addr < (FLASH_BASE + FLASH_BANK_SIZE) )
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <FLASH_get_pageInBank+0x64>)
 800135a:	4290      	cmp	r0, r2
 800135c:	d9f7      	bls.n	800134e <FLASH_get_pageInBank+0x3e>
      page = (addr - FLASH_BASE - FLASH_BANK_SIZE) / FLASH_PAGE_SIZE;
 800135e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001362:	1a98      	subs	r0, r3, r2
 8001364:	0ac0      	lsrs	r0, r0, #11
 8001366:	4770      	bx	lr
 8001368:	1fff75e0 	.word	0x1fff75e0
 800136c:	003ffc00 	.word	0x003ffc00
 8001370:	001ffe00 	.word	0x001ffe00
 8001374:	0807ffff 	.word	0x0807ffff

08001378 <FLASH_get_bank>:
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <FLASH_get_bank+0x48>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <FLASH_get_bank+0x4c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001388:	d10c      	bne.n	80013a4 <FLASH_get_bank+0x2c>
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_1 : FLASH_BANK_2;
 800138a:	429a      	cmp	r2, r3
 800138c:	bf17      	itett	ne
 800138e:	4b0e      	ldrne	r3, [pc, #56]	; (80013c8 <FLASH_get_bank+0x50>)
 8001390:	4b0e      	ldreq	r3, [pc, #56]	; (80013cc <FLASH_get_bank+0x54>)
 8001392:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 8001396:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 800139a:	4298      	cmp	r0, r3
 800139c:	bf2c      	ite	cs
 800139e:	2002      	movcs	r0, #2
 80013a0:	2001      	movcc	r0, #1
 80013a2:	4770      	bx	lr
    bank = (addr < (FLASH_BASE + FLASH_BANK_SIZE)) ? FLASH_BANK_2 : FLASH_BANK_1;
 80013a4:	429a      	cmp	r2, r3
 80013a6:	bf17      	itett	ne
 80013a8:	4b07      	ldrne	r3, [pc, #28]	; (80013c8 <FLASH_get_bank+0x50>)
 80013aa:	4b08      	ldreq	r3, [pc, #32]	; (80013cc <FLASH_get_bank+0x54>)
 80013ac:	ea03 2342 	andne.w	r3, r3, r2, lsl #9
 80013b0:	f103 6300 	addne.w	r3, r3, #134217728	; 0x8000000
 80013b4:	4283      	cmp	r3, r0
 80013b6:	bf94      	ite	ls
 80013b8:	2001      	movls	r0, #1
 80013ba:	2002      	movhi	r0, #2
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40010000 	.word	0x40010000
 80013c4:	1fff75e0 	.word	0x1fff75e0
 80013c8:	001ffe00 	.word	0x001ffe00
 80013cc:	08080000 	.word	0x08080000

080013d0 <FLASH_update>:
  int ret = 0;
  int remaining = size;
  uint8_t * src_addr = (uint8_t *) data;
  uint64_t page_cache[FLASH_PAGE_SIZE/sizeof(uint64_t)];
 
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013d0:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <FLASH_update+0x140>)
{
 80013d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d6:	4691      	mov	r9, r2
  int remaining = size;
 80013d8:	4692      	mov	sl, r2
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013da:	699a      	ldr	r2, [r3, #24]
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 80013dc:	f8df b140 	ldr.w	fp, [pc, #320]	; 8001520 <FLASH_update+0x150>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013e4:	619a      	str	r2, [r3, #24]
 80013e6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
{
 80013ea:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 80013ee:	4607      	mov	r7, r0
 80013f0:	4688      	mov	r8, r1
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013f2:	611a      	str	r2, [r3, #16]

  do {
    uint32_t fl_addr = ROUND_DOWN(dst_addr, FLASH_PAGE_SIZE);
 80013f4:	f427 64ff 	bic.w	r4, r7, #2040	; 0x7f8
 80013f8:	f024 0407 	bic.w	r4, r4, #7
    int fl_offset = dst_addr - fl_addr;
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 80013fc:	1be6      	subs	r6, r4, r7
 80013fe:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001402:	454e      	cmp	r6, r9
    
    /* Load from the flash into the cache */
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 8001404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001408:	4621      	mov	r1, r4
 800140a:	a806      	add	r0, sp, #24
    int len = MIN(FLASH_PAGE_SIZE - fl_offset, size);
 800140c:	bf28      	it	cs
 800140e:	464e      	movcs	r6, r9
    memcpy(page_cache, (void *) fl_addr, FLASH_PAGE_SIZE);  
 8001410:	f020 ffea 	bl	80223e8 <memcpy>
    /* Update the cache from the source */
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 8001414:	ab06      	add	r3, sp, #24
    int fl_offset = dst_addr - fl_addr;
 8001416:	1b38      	subs	r0, r7, r4
    memcpy((uint8_t *)page_cache + fl_offset, src_addr, len);
 8001418:	4632      	mov	r2, r6
 800141a:	4641      	mov	r1, r8
 800141c:	4418      	add	r0, r3
 800141e:	f020 ffe3 	bl	80223e8 <memcpy>
  uint32_t PageError = 0;
 8001422:	2300      	movs	r3, #0
  EraseInit.Banks = FLASH_get_bank(address); 
 8001424:	4620      	mov	r0, r4
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001426:	e9cd 3301 	strd	r3, r3, [sp, #4]
  EraseInit.Banks = FLASH_get_bank(address); 
 800142a:	f7ff ffa5 	bl	8001378 <FLASH_get_bank>
 800142e:	4601      	mov	r1, r0
 8001430:	9003      	str	r0, [sp, #12]
  if (EraseInit.Banks != FLASH_get_bank(address + len_bytes))
 8001432:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8001436:	f7ff ff9f 	bl	8001378 <FLASH_get_bank>
 800143a:	4281      	cmp	r1, r0
 800143c:	d00d      	beq.n	800145a <FLASH_update+0x8a>
    printf("Error: Cannot erase across FLASH banks.\n");
 800143e:	4835      	ldr	r0, [pc, #212]	; (8001514 <FLASH_update+0x144>)
 8001440:	f022 f99a 	bl	8023778 <puts>
    /* Erase the page, and write the cache */
    ret = FLASH_unlock_erase(fl_addr, FLASH_PAGE_SIZE);
    if (ret != 0)
    {
#ifndef CODE_UNDER_FIREWALL
      printf("Error erasing at 0x%08lx\n", fl_addr);
 8001444:	4834      	ldr	r0, [pc, #208]	; (8001518 <FLASH_update+0x148>)
 8001446:	4621      	mov	r1, r4
 8001448:	f022 f8fa 	bl	8023640 <iprintf>
 800144c:	f04f 35ff 	mov.w	r5, #4294967295
      }
    }
  } while ((ret == 0) && (remaining > 0));
  
  return ret;
}
 8001450:	4628      	mov	r0, r5
 8001452:	f60d 0d1c 	addw	sp, sp, #2076	; 0x81c
 8001456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EraseInit.Page = FLASH_get_pageInBank(address);
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff ff58 	bl	8001310 <FLASH_get_pageInBank>
 8001460:	4605      	mov	r5, r0
 8001462:	9004      	str	r0, [sp, #16]
    EraseInit.NbPages = FLASH_get_pageInBank(address + len_bytes - 1) - EraseInit.Page + 1;
 8001464:	f204 70ff 	addw	r0, r4, #2047	; 0x7ff
 8001468:	f7ff ff52 	bl	8001310 <FLASH_get_pageInBank>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	1b5b      	subs	r3, r3, r5
 8001470:	9305      	str	r3, [sp, #20]
    HAL_FLASH_Unlock();
 8001472:	f007 fccb 	bl	8008e0c <HAL_FLASH_Unlock>
    if (HAL_FLASHEx_Erase(&EraseInit, &PageError) == HAL_OK)
 8001476:	a901      	add	r1, sp, #4
 8001478:	a802      	add	r0, sp, #8
 800147a:	f007 fdd3 	bl	8009024 <HAL_FLASHEx_Erase>
 800147e:	b120      	cbz	r0, 800148a <FLASH_update+0xba>
      printf("Error erasing at 0x%08lx\n", address);
 8001480:	4621      	mov	r1, r4
 8001482:	4825      	ldr	r0, [pc, #148]	; (8001518 <FLASH_update+0x148>)
 8001484:	f022 f8dc 	bl	8023640 <iprintf>
    if (ret != 0)
 8001488:	e7dc      	b.n	8001444 <FLASH_update+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148a:	b672      	cpsid	i
  for (i = 0; i < len_bytes; i += 8)
 800148c:	4605      	mov	r5, r0
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800148e:	f60d 0218 	addw	r2, sp, #2072	; 0x818
 8001492:	f025 0307 	bic.w	r3, r5, #7
 8001496:	4413      	add	r3, r2
 8001498:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	1929      	adds	r1, r5, r4
 80014a2:	2000      	movs	r0, #0
 80014a4:	f007 fd08 	bl	8008eb8 <HAL_FLASH_Program>
 80014a8:	b9f0      	cbnz	r0, 80014e8 <FLASH_update+0x118>
  for (i = 0; i < len_bytes; i += 8)
 80014aa:	3508      	adds	r5, #8
 80014ac:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80014b0:	d1ed      	bne.n	800148e <FLASH_update+0xbe>
  int ret = -1;
 80014b2:	f04f 35ff 	mov.w	r5, #4294967295
    if ( *dst != *src )
 80014b6:	f020 0303 	bic.w	r3, r0, #3
 80014ba:	f60d 0c18 	addw	ip, sp, #2072	; 0x818
 80014be:	4463      	add	r3, ip
 80014c0:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80014c4:	5902      	ldr	r2, [r0, r4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	eb00 0104 	add.w	r1, r0, r4
 80014ce:	d00f      	beq.n	80014f0 <FLASH_update+0x120>
      printf("Write failed @0x%08lx, read value=0x%08lx, expected=0x%08lx\n", (uint32_t) dst, *dst, *src);
 80014d0:	4658      	mov	r0, fp
 80014d2:	f022 f8b5 	bl	8023640 <iprintf>
  __ASM volatile ("cpsie i" : : : "memory");
 80014d6:	b662      	cpsie	i
      if(ret != 0)
 80014d8:	b18d      	cbz	r5, 80014fe <FLASH_update+0x12e>
        printf("Error writing %lu bytes at 0x%08lx\n", FLASH_PAGE_SIZE, fl_addr);
 80014da:	4622      	mov	r2, r4
 80014dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <FLASH_update+0x14c>)
 80014e2:	f022 f8ad 	bl	8023640 <iprintf>
 80014e6:	e7b1      	b.n	800144c <FLASH_update+0x7c>
  int ret = -1;
 80014e8:	f04f 35ff 	mov.w	r5, #4294967295
  for (i = 0; i < len_bytes; i += 4)
 80014ec:	2000      	movs	r0, #0
 80014ee:	e7e2      	b.n	80014b6 <FLASH_update+0xe6>
 80014f0:	3004      	adds	r0, #4
 80014f2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    ret = 0;
 80014f6:	f04f 0500 	mov.w	r5, #0
  for (i = 0; i < len_bytes; i += 4)
 80014fa:	d1dc      	bne.n	80014b6 <FLASH_update+0xe6>
 80014fc:	e7eb      	b.n	80014d6 <FLASH_update+0x106>
        remaining -= len;
 80014fe:	ebaa 0a06 	sub.w	sl, sl, r6
  } while ((ret == 0) && (remaining > 0));
 8001502:	f1ba 0f00 	cmp.w	sl, #0
        dst_addr += len;
 8001506:	4437      	add	r7, r6
        src_addr += len;
 8001508:	44b0      	add	r8, r6
  } while ((ret == 0) && (remaining > 0));
 800150a:	f73f af73 	bgt.w	80013f4 <FLASH_update+0x24>
 800150e:	e79f      	b.n	8001450 <FLASH_update+0x80>
 8001510:	40022000 	.word	0x40022000
 8001514:	0802dab5 	.word	0x0802dab5
 8001518:	0802dadd 	.word	0x0802dadd
 800151c:	0802db34 	.word	0x0802db34
 8001520:	0802daf7 	.word	0x0802daf7

08001524 <getInputString>:
  * @param  Out:  inputString   Pointer to buffer for input line.
  * @param  In:   len           Max length for line.
  * @retval Number of bytes read from the terminal.
  */
int getInputString(char *inputString, size_t len)
{
 8001524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001528:	460e      	mov	r6, r1
 800152a:	4605      	mov	r5, r0
  size_t currLen = 0;
  int c = 0;

  c = getchar();
 800152c:	f020 fe32 	bl	8022194 <getchar>
  size_t currLen = 0;
 8001530:	2400      	movs	r4, #0
    {
      if (currLen != 0)
      {
        --currLen;
        inputString[currLen] = 0;
        printf(" \b");
 8001532:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8001594 <getInputString+0x70>
      }
    }
    else
    {
      if (currLen < (len-1))
 8001536:	1e77      	subs	r7, r6, #1
 8001538:	46a0      	mov	r8, r4
  while ((c != EOF) && ((currLen + 1) < len) && (c != '\r') && (c != '\n') )
 800153a:	1c43      	adds	r3, r0, #1
 800153c:	d007      	beq.n	800154e <getInputString+0x2a>
 800153e:	f104 0a01 	add.w	sl, r4, #1
 8001542:	45b2      	cmp	sl, r6
 8001544:	d219      	bcs.n	800157a <getInputString+0x56>
 8001546:	280d      	cmp	r0, #13
 8001548:	d021      	beq.n	800158e <getInputString+0x6a>
 800154a:	280a      	cmp	r0, #10
 800154c:	d101      	bne.n	8001552 <getInputString+0x2e>

      ++currLen;
    }
    c = getchar();
  }
  if (currLen != 0)
 800154e:	b1dc      	cbz	r4, 8001588 <getInputString+0x64>
 8001550:	e014      	b.n	800157c <getInputString+0x58>
    if (c == '\b')
 8001552:	2808      	cmp	r0, #8
 8001554:	d10b      	bne.n	800156e <getInputString+0x4a>
      if (currLen != 0)
 8001556:	b174      	cbz	r4, 8001576 <getInputString+0x52>
        --currLen;
 8001558:	f104 3aff 	add.w	sl, r4, #4294967295
        printf(" \b");
 800155c:	4648      	mov	r0, r9
        inputString[currLen] = 0;
 800155e:	f805 800a 	strb.w	r8, [r5, sl]
        printf(" \b");
 8001562:	f022 f86d 	bl	8023640 <iprintf>
    c = getchar();
 8001566:	f020 fe15 	bl	8022194 <getchar>
 800156a:	4654      	mov	r4, sl
 800156c:	e7e5      	b.n	800153a <getInputString+0x16>
      if (currLen < (len-1))
 800156e:	42a7      	cmp	r7, r4
 8001570:	d9f9      	bls.n	8001566 <getInputString+0x42>
        inputString[currLen] = c;
 8001572:	5528      	strb	r0, [r5, r4]
 8001574:	e7f7      	b.n	8001566 <getInputString+0x42>
 8001576:	46a2      	mov	sl, r4
 8001578:	e7f5      	b.n	8001566 <getInputString+0x42>
  if (currLen != 0)
 800157a:	b10c      	cbz	r4, 8001580 <getInputString+0x5c>
  { /* Close the string in the input buffer... only if a string was written to it. */
    inputString[currLen] = '\0';
 800157c:	2300      	movs	r3, #0
 800157e:	552b      	strb	r3, [r5, r4]
  }
  if (c == '\r')
 8001580:	280d      	cmp	r0, #13
 8001582:	d101      	bne.n	8001588 <getInputString+0x64>
  {
    c = getchar(); /* assume there is '\n' after '\r'. Just discard it. */
 8001584:	f020 fe06 	bl	8022194 <getchar>
  }

  return currLen;
}
 8001588:	4620      	mov	r0, r4
 800158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (currLen != 0)
 800158e:	2c00      	cmp	r4, #0
 8001590:	d1f4      	bne.n	800157c <getInputString+0x58>
 8001592:	e7f7      	b.n	8001584 <getInputString+0x60>
 8001594:	0802dbf6 	.word	0x0802dbf6

08001598 <checkWiFiCredentials>:
  */
int checkWiFiCredentials(const char ** const ssid, const char ** const psk, uint8_t * const security_mode)
{
  bool is_ssid_present = 0;

  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <checkWiFiCredentials+0x58>)
 800159a:	681b      	ldr	r3, [r3, #0]
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (lUserConfigPtr->wifi_config.magic == USER_CONF_MAGIC)
 800159e:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 80015a2:	e9d4 6700 	ldrd	r6, r7, [r4]
 80015a6:	a510      	add	r5, pc, #64	; (adr r5, 80015e8 <checkWiFiCredentials+0x50>)
 80015a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80015ac:	42af      	cmp	r7, r5
 80015ae:	bf08      	it	eq
 80015b0:	42a6      	cmpeq	r6, r4
 80015b2:	d110      	bne.n	80015d6 <checkWiFiCredentials+0x3e>
  {
    is_ssid_present = true;
    if ((ssid == NULL) ||(psk == NULL) || (security_mode == NULL))
 80015b4:	b190      	cbz	r0, 80015dc <checkWiFiCredentials+0x44>
 80015b6:	b189      	cbz	r1, 80015dc <checkWiFiCredentials+0x44>
 80015b8:	b182      	cbz	r2, 80015dc <checkWiFiCredentials+0x44>
    {
      return -2;
    }
    *ssid = lUserConfigPtr->wifi_config.ssid;
 80015ba:	f503 5420 	add.w	r4, r3, #10240	; 0x2800
 80015be:	3408      	adds	r4, #8
 80015c0:	6004      	str	r4, [r0, #0]
    *psk = lUserConfigPtr->wifi_config.psk;
 80015c2:	f503 5020 	add.w	r0, r3, #10240	; 0x2800
 80015c6:	3028      	adds	r0, #40	; 0x28
 80015c8:	6008      	str	r0, [r1, #0]
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 80015ca:	f642 0168 	movw	r1, #10344	; 0x2868
  }

  return (is_ssid_present) ? 0 : -1;
 80015ce:	2000      	movs	r0, #0
    *security_mode = lUserConfigPtr->wifi_config.security_mode;
 80015d0:	5c5b      	ldrb	r3, [r3, r1]
 80015d2:	7013      	strb	r3, [r2, #0]
}
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return (is_ssid_present) ? 0 : -1;
 80015d6:	f04f 30ff 	mov.w	r0, #4294967295
 80015da:	e7fb      	b.n	80015d4 <checkWiFiCredentials+0x3c>
      return -2;
 80015dc:	f06f 0001 	mvn.w	r0, #1
 80015e0:	e7f8      	b.n	80015d4 <checkWiFiCredentials+0x3c>
 80015e2:	bf00      	nop
 80015e4:	f3af 8000 	nop.w
 80015e8:	89abcdef 	.word	0x89abcdef
 80015ec:	01234567 	.word	0x01234567
 80015f0:	20000008 	.word	0x20000008
 80015f4:	00000000 	.word	0x00000000

080015f8 <updateWiFiCredentials>:
  * @retval Error code
  *             0    Success
  *             <0   Unrecoverable error
  */
int updateWiFiCredentials(void)
{
 80015f8:	b510      	push	{r4, lr}
 80015fa:	b09c      	sub	sp, #112	; 0x70
  wifi_config_t wifi_config;
  int ret = 0;

  memset(&wifi_config, 0, sizeof(wifi_config_t));
 80015fc:	2270      	movs	r2, #112	; 0x70
 80015fe:	2100      	movs	r1, #0
 8001600:	4668      	mov	r0, sp
 8001602:	f020 ff19 	bl	8022438 <memset>

  printf("\nEnter SSID: ");
 8001606:	4824      	ldr	r0, [pc, #144]	; (8001698 <updateWiFiCredentials+0xa0>)

  printf("\n");
  char c;
  do
  {
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 8001608:	4c24      	ldr	r4, [pc, #144]	; (800169c <updateWiFiCredentials+0xa4>)
  printf("\nEnter SSID: ");
 800160a:	f022 f819 	bl	8023640 <iprintf>
  getInputString(wifi_config.ssid, USER_CONF_WIFI_SSID_MAX_LENGTH);
 800160e:	2120      	movs	r1, #32
 8001610:	a802      	add	r0, sp, #8
 8001612:	f7ff ff87 	bl	8001524 <getInputString>
  msg_info("You have entered %s as the ssid.\n", wifi_config.ssid);
 8001616:	a902      	add	r1, sp, #8
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <updateWiFiCredentials+0xa8>)
 800161a:	f022 f811 	bl	8023640 <iprintf>
  printf("\n");
 800161e:	200a      	movs	r0, #10
 8001620:	f022 f826 	bl	8023670 <putchar>
      printf("\rEnter Security Mode (0 - Open, 1 - WEP, 2 - WPA, 3 - WPA2): \b");
 8001624:	4620      	mov	r0, r4
 8001626:	f022 f80b 	bl	8023640 <iprintf>
      c = getchar();
 800162a:	f020 fdb3 	bl	8022194 <getchar>
  }
  while ( (c < '0')  || (c > '3'));
 800162e:	3830      	subs	r0, #48	; 0x30
 8001630:	b2c1      	uxtb	r1, r0
 8001632:	2903      	cmp	r1, #3
 8001634:	d8f6      	bhi.n	8001624 <updateWiFiCredentials+0x2c>
  wifi_config.security_mode = c - '0';
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 8001636:	481b      	ldr	r0, [pc, #108]	; (80016a4 <updateWiFiCredentials+0xac>)
  wifi_config.security_mode = c - '0';
 8001638:	f88d 1068 	strb.w	r1, [sp, #104]	; 0x68
  msg_info("\nYou have entered %d as the security mode.\n", wifi_config.security_mode);
 800163c:	f022 f800 	bl	8023640 <iprintf>

  if (wifi_config.security_mode != 0)
 8001640:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8001644:	b133      	cbz	r3, 8001654 <updateWiFiCredentials+0x5c>
  {
    printf("\nEnter password: ");
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <updateWiFiCredentials+0xb0>)
 8001648:	f021 fffa 	bl	8023640 <iprintf>
    getInputString(wifi_config.psk, sizeof(wifi_config.psk));
 800164c:	2140      	movs	r1, #64	; 0x40
 800164e:	a80a      	add	r0, sp, #40	; 0x28
 8001650:	f7ff ff68 	bl	8001524 <getInputString>
  }

  wifi_config.magic = USER_CONF_MAGIC;
 8001654:	a30e      	add	r3, pc, #56	; (adr r3, 8001690 <updateWiFiCredentials+0x98>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	e9cd 2300 	strd	r2, r3, [sp]

  ret = FLASH_update((uint32_t)&lUserConfigPtr->wifi_config, &wifi_config, sizeof(wifi_config_t));
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <updateWiFiCredentials+0xb4>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	2270      	movs	r2, #112	; 0x70
 8001664:	4669      	mov	r1, sp
 8001666:	f500 5020 	add.w	r0, r0, #10240	; 0x2800
 800166a:	f7ff feb1 	bl	80013d0 <FLASH_update>

  if (ret < 0)
 800166e:	1e04      	subs	r4, r0, #0
 8001670:	da08      	bge.n	8001684 <updateWiFiCredentials+0x8c>
  {
    msg_error("Failed updating the wifi configuration in Flash.\n");
 8001672:	490f      	ldr	r1, [pc, #60]	; (80016b0 <updateWiFiCredentials+0xb8>)
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <updateWiFiCredentials+0xbc>)
 8001676:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800167a:	f021 ffe1 	bl	8023640 <iprintf>
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <updateWiFiCredentials+0xc0>)
 8001680:	f022 f87a 	bl	8023778 <puts>
  }

  printf("\n");
 8001684:	200a      	movs	r0, #10
 8001686:	f021 fff3 	bl	8023670 <putchar>
  return ret;
}
 800168a:	4620      	mov	r0, r4
 800168c:	b01c      	add	sp, #112	; 0x70
 800168e:	bd10      	pop	{r4, pc}
 8001690:	89abcdef 	.word	0x89abcdef
 8001694:	01234567 	.word	0x01234567
 8001698:	0802db8a 	.word	0x0802db8a
 800169c:	0802dbba 	.word	0x0802dbba
 80016a0:	0802db98 	.word	0x0802db98
 80016a4:	0802dbf9 	.word	0x0802dbf9
 80016a8:	0802dc25 	.word	0x0802dc25
 80016ac:	20000008 	.word	0x20000008
 80016b0:	080281ba 	.word	0x080281ba
 80016b4:	0802d9c5 	.word	0x0802d9c5
 80016b8:	0802dc37 	.word	0x0802dc37

080016bc <enterPemString>:
  * @param  Out: key_read_buffer    Destination buffer.
  * @param  In:  max_len            Maximum length to be written to the destination buffer.
  * @retval Number of characters read into the output buffer.
  */
int enterPemString(char * read_buffer, size_t max_len)
{
 80016bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016c0:	4607      	mov	r7, r0
 80016c2:	468a      	mov	sl, r1
  int i = 0;
  int read_len = 0;
  bool eof = false;
  read_len = getInputString(&read_buffer[i], max_len);
 80016c4:	f7ff ff2e 	bl	8001524 <getInputString>
  bool eof = false;
 80016c8:	2500      	movs	r5, #0
  while ( (read_len >= 0) && (i < max_len) && !eof )
  {
    i += read_len;
    read_buffer[i++] = '\n';
    read_len = getInputString(&read_buffer[i], max_len);
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016ca:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001750 <enterPemString+0x94>
  read_len = getInputString(&read_buffer[i], max_len);
 80016ce:	4604      	mov	r4, r0
  int i = 0;
 80016d0:	462e      	mov	r6, r5
    read_buffer[i++] = '\n';
 80016d2:	f04f 080a 	mov.w	r8, #10
  while ( (read_len >= 0) && (i < max_len) && !eof )
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	db25      	blt.n	8001726 <enterPemString+0x6a>
 80016da:	4556      	cmp	r6, sl
 80016dc:	d225      	bcs.n	800172a <enterPemString+0x6e>
 80016de:	b11d      	cbz	r5, 80016e8 <enterPemString+0x2c>
  if (i >= max_len)
  {
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
   return 0;
  }
  read_buffer[++i] = '\0';
 80016e0:	1c70      	adds	r0, r6, #1
 80016e2:	2300      	movs	r3, #0
 80016e4:	543b      	strb	r3, [r7, r0]
  return i;
 80016e6:	e02b      	b.n	8001740 <enterPemString+0x84>
    i += read_len;
 80016e8:	4434      	add	r4, r6
    read_buffer[i++] = '\n';
 80016ea:	1c66      	adds	r6, r4, #1
    read_len = getInputString(&read_buffer[i], max_len);
 80016ec:	eb07 0b06 	add.w	fp, r7, r6
    read_buffer[i++] = '\n';
 80016f0:	f807 8004 	strb.w	r8, [r7, r4]
    read_len = getInputString(&read_buffer[i], max_len);
 80016f4:	4651      	mov	r1, sl
 80016f6:	4658      	mov	r0, fp
 80016f8:	f7ff ff14 	bl	8001524 <getInputString>
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 80016fc:	2208      	movs	r2, #8
    read_len = getInputString(&read_buffer[i], max_len);
 80016fe:	4604      	mov	r4, r0
    eof = (strncmp(&read_buffer[i], "-----END",8) == 0);
 8001700:	4649      	mov	r1, r9
 8001702:	4658      	mov	r0, fp
 8001704:	f022 f960 	bl	80239c8 <strncmp>
    if (eof)
 8001708:	2800      	cmp	r0, #0
 800170a:	d1e4      	bne.n	80016d6 <enterPemString+0x1a>
        i += read_len;
 800170c:	4434      	add	r4, r6
        read_buffer[i++] = '\n';
 800170e:	1c66      	adds	r6, r4, #1
 8001710:	f807 8004 	strb.w	r8, [r7, r4]
        read_len = getInputString(&read_buffer[i], max_len);
 8001714:	4651      	mov	r1, sl
 8001716:	19b8      	adds	r0, r7, r6
 8001718:	f7ff ff04 	bl	8001524 <getInputString>
        if (read_len != 0) eof =false;
 800171c:	fab0 f580 	clz	r5, r0
 8001720:	4604      	mov	r4, r0
 8001722:	096d      	lsrs	r5, r5, #5
 8001724:	e7d7      	b.n	80016d6 <enterPemString+0x1a>
  if (i >= max_len)
 8001726:	4556      	cmp	r6, sl
 8001728:	d3da      	bcc.n	80016e0 <enterPemString+0x24>
   msg_error("Certificate is too long , allocated size is %d\n",max_len);
 800172a:	4906      	ldr	r1, [pc, #24]	; (8001744 <enterPemString+0x88>)
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <enterPemString+0x8c>)
 800172e:	f240 1253 	movw	r2, #339	; 0x153
 8001732:	f021 ff85 	bl	8023640 <iprintf>
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <enterPemString+0x90>)
 8001738:	4651      	mov	r1, sl
 800173a:	f021 ff81 	bl	8023640 <iprintf>
   return 0;
 800173e:	2000      	movs	r0, #0
}
 8001740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001744:	080281d0 	.word	0x080281d0
 8001748:	0802d9c5 	.word	0x0802d9c5
 800174c:	0802dc71 	.word	0x0802dc71
 8001750:	0802dc68 	.word	0x0802dc68

08001754 <CaptureAndFlashPem>:
  *             0    Success
  *             <0   Unrecoverable error
  */

 int CaptureAndFlashPem(char *pem_name, char const *flash_addr, bool restricted_area)
 {
 8001754:	b570      	push	{r4, r5, r6, lr}
 8001756:	4606      	mov	r6, r0
  char * key_read_buffer = NULL;
  int    ret = 0;
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 8001758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 {
 800175c:	460d      	mov	r5, r1
  key_read_buffer = malloc(PEM_READ_BUFFER_SIZE);
 800175e:	f020 fe25 	bl	80223ac <malloc>
  if (key_read_buffer == NULL)
 8001762:	4604      	mov	r4, r0
 8001764:	b970      	cbnz	r0, 8001784 <CaptureAndFlashPem+0x30>
  {
    msg_error("Could not allocate %d bytes for the console readbuffer.\n", PEM_READ_BUFFER_SIZE);
 8001766:	4917      	ldr	r1, [pc, #92]	; (80017c4 <CaptureAndFlashPem+0x70>)
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <CaptureAndFlashPem+0x74>)
 800176a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800176e:	f021 ff67 	bl	8023640 <iprintf>
 8001772:	4816      	ldr	r0, [pc, #88]	; (80017cc <CaptureAndFlashPem+0x78>)
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	f021 ff62 	bl	8023640 <iprintf>
 800177c:	f04f 35ff 	mov.w	r5, #4294967295
  }

  free(key_read_buffer);

  return ret;
 }
 8001780:	4628      	mov	r0, r5
 8001782:	bd70      	pop	{r4, r5, r6, pc}
  memset(key_read_buffer, 0, PEM_READ_BUFFER_SIZE);
 8001784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001788:	2100      	movs	r1, #0
 800178a:	f020 fe55 	bl	8022438 <memset>
  printf("\nEnter your %s: \n",pem_name);
 800178e:	4631      	mov	r1, r6
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <CaptureAndFlashPem+0x7c>)
 8001792:	f021 ff55 	bl	8023640 <iprintf>
  enterPemString(key_read_buffer, PEM_READ_BUFFER_SIZE);
 8001796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff ff8e 	bl	80016bc <enterPemString>
  msg_info("read: --->\n%s\n<---\n", key_read_buffer);
 80017a0:	4621      	mov	r1, r4
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <CaptureAndFlashPem+0x80>)
 80017a4:	f021 ff4c 	bl	8023640 <iprintf>
    ret = FLASH_update((uint32_t)flash_addr, key_read_buffer, strlen(key_read_buffer) + 1);  /* Append the closing \0*/
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7fe fd1b 	bl	80001e4 <strlen>
 80017ae:	4621      	mov	r1, r4
 80017b0:	1c42      	adds	r2, r0, #1
 80017b2:	4628      	mov	r0, r5
 80017b4:	f7ff fe0c 	bl	80013d0 <FLASH_update>
 80017b8:	4605      	mov	r5, r0
  free(key_read_buffer);
 80017ba:	4620      	mov	r0, r4
 80017bc:	f020 fdfe 	bl	80223bc <free>
  return ret;
 80017c0:	e7de      	b.n	8001780 <CaptureAndFlashPem+0x2c>
 80017c2:	bf00      	nop
 80017c4:	080281df 	.word	0x080281df
 80017c8:	0802d9c5 	.word	0x0802d9c5
 80017cc:	0802dca1 	.word	0x0802dca1
 80017d0:	0802dcda 	.word	0x0802dcda
 80017d4:	0802dcec 	.word	0x0802dcec

080017d8 <checkTLSRootCA>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSRootCA()
{
  return (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <checkTLSRootCA+0x28>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 80017e0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80017e4:	a304      	add	r3, pc, #16	; (adr r3, 80017f8 <checkTLSRootCA+0x20>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	4299      	cmp	r1, r3
 80017ec:	bf0a      	itet	eq
 80017ee:	4290      	cmpeq	r0, r2
}
 80017f0:	f04f 30ff 	movne.w	r0, #4294967295
 80017f4:	2000      	moveq	r0, #0
 80017f6:	4770      	bx	lr
 80017f8:	89abcdef 	.word	0x89abcdef
 80017fc:	01234567 	.word	0x01234567
 8001800:	20000008 	.word	0x20000008
 8001804:	00000000 	.word	0x00000000

08001808 <checkTLSDeviceConfig>:
  * @retval 0 Configured,
           -1 Not configured.
  */
int checkTLSDeviceConfig()
{
  return (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) ? 0 : -1;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <checkTLSDeviceConfig+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001810:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001814:	a304      	add	r3, pc, #16	; (adr r3, 8001828 <checkTLSDeviceConfig+0x20>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	4299      	cmp	r1, r3
 800181c:	bf0a      	itet	eq
 800181e:	4290      	cmpeq	r0, r2
}
 8001820:	f04f 30ff 	movne.w	r0, #4294967295
 8001824:	2000      	moveq	r0, #0
 8001826:	4770      	bx	lr
 8001828:	89abcdef 	.word	0x89abcdef
 800182c:	01234567 	.word	0x01234567
 8001830:	20000008 	.word	0x20000008
 8001834:	00000000 	.word	0x00000000

08001838 <updateTLSCredentials>:
{
 8001838:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ( (checkTLSRootCA() == -1)
 800183a:	f7ff ffcd 	bl	80017d8 <checkTLSRootCA>
 800183e:	3001      	adds	r0, #1
 8001840:	d146      	bne.n	80018d0 <updateTLSCredentials+0x98>
    printf("\nUpdating TLS security credentials.\n");
 8001842:	4849      	ldr	r0, [pc, #292]	; (8001968 <updateTLSCredentials+0x130>)
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 8001844:	4d49      	ldr	r5, [pc, #292]	; (800196c <updateTLSCredentials+0x134>)
    printf("\nUpdating TLS security credentials.\n");
 8001846:	f021 ff97 	bl	8023778 <puts>
    printf("\nEnter the x509 certificates or keys as per the following format:\n");
 800184a:	4849      	ldr	r0, [pc, #292]	; (8001970 <updateTLSCredentials+0x138>)
 800184c:	f021 ff94 	bl	8023778 <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 8001850:	4848      	ldr	r0, [pc, #288]	; (8001974 <updateTLSCredentials+0x13c>)
 8001852:	f021 ff91 	bl	8023778 <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 8001856:	4848      	ldr	r0, [pc, #288]	; (8001978 <updateTLSCredentials+0x140>)
 8001858:	f021 ff8e 	bl	8023778 <puts>
    printf("R7EUQIN9Z/SG9jGr8XmksrUuEvmEF/Bibyc+E1ixVA0hmnM3oTDPb5Lc9un8rNsu\n");
 800185c:	4847      	ldr	r0, [pc, #284]	; (800197c <updateTLSCredentials+0x144>)
 800185e:	f021 ff8b 	bl	8023778 <puts>
    printf(".......\n");
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <updateTLSCredentials+0x148>)
 8001864:	f021 ff88 	bl	8023778 <puts>
    printf("-----END CERTIFICATE-----\n");
 8001868:	4846      	ldr	r0, [pc, #280]	; (8001984 <updateTLSCredentials+0x14c>)
 800186a:	f021 ff85 	bl	8023778 <puts>
    printf("-----BEGIN CERTIFICATE-----\n");
 800186e:	4841      	ldr	r0, [pc, #260]	; (8001974 <updateTLSCredentials+0x13c>)
 8001870:	f021 ff82 	bl	8023778 <puts>
    printf("YMPGn8u67GB9t+aEMr5P+1gmIgNb1LTV+/Xjli5wwOQuvfwu7uJBVcA0Ln0kcmnL\n");
 8001874:	4840      	ldr	r0, [pc, #256]	; (8001978 <updateTLSCredentials+0x140>)
 8001876:	f021 ff7f 	bl	8023778 <puts>
    printf(".......\n");
 800187a:	4841      	ldr	r0, [pc, #260]	; (8001980 <updateTLSCredentials+0x148>)
 800187c:	f021 ff7c 	bl	8023778 <puts>
    printf("-----END CERTIFICATE-----\n");
 8001880:	4840      	ldr	r0, [pc, #256]	; (8001984 <updateTLSCredentials+0x14c>)
 8001882:	f021 ff79 	bl	8023778 <puts>
    printf("\n.......\n");
 8001886:	4840      	ldr	r0, [pc, #256]	; (8001988 <updateTLSCredentials+0x150>)
 8001888:	f021 ff76 	bl	8023778 <puts>
    ret = CaptureAndFlashPem("root CA",lUserConfigPtr->tls_root_ca_cert, false);
 800188c:	6829      	ldr	r1, [r5, #0]
 800188e:	483f      	ldr	r0, [pc, #252]	; (800198c <updateTLSCredentials+0x154>)
 8001890:	2200      	movs	r2, #0
 8001892:	f7ff ff5f 	bl	8001754 <CaptureAndFlashPem>
    if (ret == 0)
 8001896:	4604      	mov	r4, r0
 8001898:	b970      	cbnz	r0, 80018b8 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 800189a:	a331      	add	r3, pc, #196	; (adr r3, 8001960 <updateTLSCredentials+0x128>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 80018a0:	6828      	ldr	r0, [r5, #0]
 80018a2:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
      uint64_t magic = USER_CONF_MAGIC;
 80018a6:	e9cd 2300 	strd	r2, r3, [sp]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->ca_tls_magic, &magic, sizeof(uint64_t));
 80018aa:	4669      	mov	r1, sp
 80018ac:	2208      	movs	r2, #8
 80018ae:	3028      	adds	r0, #40	; 0x28
 80018b0:	f7ff fd8e 	bl	80013d0 <FLASH_update>
  if ( (ret == 0) && app_needs_device_keypair() )
 80018b4:	4604      	mov	r4, r0
 80018b6:	b180      	cbz	r0, 80018da <updateTLSCredentials+0xa2>
  if (ret < 0)
 80018b8:	2c00      	cmp	r4, #0
 80018ba:	da12      	bge.n	80018e2 <updateTLSCredentials+0xaa>
    msg_error("Failed updating the TLS configuration in Flash.\n");
 80018bc:	4934      	ldr	r1, [pc, #208]	; (8001990 <updateTLSCredentials+0x158>)
 80018be:	4835      	ldr	r0, [pc, #212]	; (8001994 <updateTLSCredentials+0x15c>)
 80018c0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80018c4:	f021 febc 	bl	8023640 <iprintf>
 80018c8:	4833      	ldr	r0, [pc, #204]	; (8001998 <updateTLSCredentials+0x160>)
 80018ca:	f021 ff55 	bl	8023778 <puts>
  return ret;
 80018ce:	e008      	b.n	80018e2 <updateTLSCredentials+0xaa>
      || dialog_ask("\nDo you want to update the root CA certificate(s)? [y/n]\n") )
 80018d0:	4832      	ldr	r0, [pc, #200]	; (800199c <updateTLSCredentials+0x164>)
 80018d2:	f7ff fbdb 	bl	800108c <dialog_ask>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1b3      	bne.n	8001842 <updateTLSCredentials+0xa>
  if ( (ret == 0) && app_needs_device_keypair() )
 80018da:	f001 ff7b 	bl	80037d4 <app_needs_device_keypair>
 80018de:	b918      	cbnz	r0, 80018e8 <updateTLSCredentials+0xb0>
 80018e0:	4604      	mov	r4, r0
}
 80018e2:	4620      	mov	r0, r4
 80018e4:	b003      	add	sp, #12
 80018e6:	bd30      	pop	{r4, r5, pc}
    if (checkTLSDeviceConfig() == -1)
 80018e8:	f7ff ff8e 	bl	8001808 <checkTLSDeviceConfig>
 80018ec:	3001      	adds	r0, #1
 80018ee:	d122      	bne.n	8001936 <updateTLSCredentials+0xfe>
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 80018f0:	4d1e      	ldr	r5, [pc, #120]	; (800196c <updateTLSCredentials+0x134>)
 80018f2:	482b      	ldr	r0, [pc, #172]	; (80019a0 <updateTLSCredentials+0x168>)
 80018f4:	6829      	ldr	r1, [r5, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 80018fc:	f7ff ff2a 	bl	8001754 <CaptureAndFlashPem>
      ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 8001900:	6829      	ldr	r1, [r5, #0]
      ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 8001902:	4604      	mov	r4, r0
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 8001904:	4827      	ldr	r0, [pc, #156]	; (80019a4 <updateTLSCredentials+0x16c>)
 8001906:	2201      	movs	r2, #1
 8001908:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800190c:	f7ff ff22 	bl	8001754 <CaptureAndFlashPem>
 8001910:	4304      	orrs	r4, r0
    if (ret == 0)
 8001912:	2c00      	cmp	r4, #0
 8001914:	d1d0      	bne.n	80018b8 <updateTLSCredentials+0x80>
      uint64_t magic = USER_CONF_MAGIC;
 8001916:	a312      	add	r3, pc, #72	; (adr r3, 8001960 <updateTLSCredentials+0x128>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	e9cd 2300 	strd	r2, r3, [sp]
      ret = FLASH_update((uint32_t)&lUserConfigPtr->device_tls_magic, &magic, sizeof(uint64_t));
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <updateTLSCredentials+0x134>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 8001928:	2208      	movs	r2, #8
 800192a:	4669      	mov	r1, sp
 800192c:	3030      	adds	r0, #48	; 0x30
 800192e:	f7ff fd4f 	bl	80013d0 <FLASH_update>
 8001932:	4604      	mov	r4, r0
 8001934:	e7c0      	b.n	80018b8 <updateTLSCredentials+0x80>
      if (dialog_ask("Do you want to update the device certificate? [y/n]\n"))
 8001936:	481c      	ldr	r0, [pc, #112]	; (80019a8 <updateTLSCredentials+0x170>)
 8001938:	f7ff fba8 	bl	800108c <dialog_ask>
 800193c:	b138      	cbz	r0, 800194e <updateTLSCredentials+0x116>
        ret |= CaptureAndFlashPem("device certificate",lUserConfigPtr->tls_device_cert, false);
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <updateTLSCredentials+0x134>)
 8001940:	4817      	ldr	r0, [pc, #92]	; (80019a0 <updateTLSCredentials+0x168>)
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	f501 51c0 	add.w	r1, r1, #6144	; 0x1800
 800194a:	f7ff ff03 	bl	8001754 <CaptureAndFlashPem>
 800194e:	4604      	mov	r4, r0
      if (dialog_ask("Do you want to update the device key? [y/n]\n"))
 8001950:	4816      	ldr	r0, [pc, #88]	; (80019ac <updateTLSCredentials+0x174>)
 8001952:	f7ff fb9b 	bl	800108c <dialog_ask>
 8001956:	2800      	cmp	r0, #0
 8001958:	d0db      	beq.n	8001912 <updateTLSCredentials+0xda>
        ret |= CaptureAndFlashPem("device key",lUserConfigPtr->tls_device_key, true);
 800195a:	4b04      	ldr	r3, [pc, #16]	; (800196c <updateTLSCredentials+0x134>)
 800195c:	6819      	ldr	r1, [r3, #0]
 800195e:	e7d1      	b.n	8001904 <updateTLSCredentials+0xcc>
 8001960:	89abcdef 	.word	0x89abcdef
 8001964:	01234567 	.word	0x01234567
 8001968:	0802dd00 	.word	0x0802dd00
 800196c:	20000008 	.word	0x20000008
 8001970:	0802dd24 	.word	0x0802dd24
 8001974:	0802dd66 	.word	0x0802dd66
 8001978:	0802dd82 	.word	0x0802dd82
 800197c:	0802ddc3 	.word	0x0802ddc3
 8001980:	0802de1f 	.word	0x0802de1f
 8001984:	0802de04 	.word	0x0802de04
 8001988:	0802de1e 	.word	0x0802de1e
 800198c:	0802de27 	.word	0x0802de27
 8001990:	080281f2 	.word	0x080281f2
 8001994:	0802d9c5 	.word	0x0802d9c5
 8001998:	0802dee9 	.word	0x0802dee9
 800199c:	0802de2f 	.word	0x0802de2f
 80019a0:	0802de69 	.word	0x0802de69
 80019a4:	0802de7c 	.word	0x0802de7c
 80019a8:	0802de87 	.word	0x0802de87
 80019ac:	0802debc 	.word	0x0802debc

080019b0 <setIoTDeviceConfig>:
  * @param  In: config    Configuration data.
  * @retval  0  Success
  *         -1  Error
  */
int setIoTDeviceConfig(iot_config_t *config)
{
 80019b0:	b508      	push	{r3, lr}
  int ret = 0;
  config->magic = USER_CONF_MAGIC;
 80019b2:	a313      	add	r3, pc, #76	; (adr r3, 8001a00 <setIoTDeviceConfig+0x50>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	e9c0 2300 	strd	r2, r3, [r0]

  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <setIoTDeviceConfig+0x40>)
{
 80019be:	4601      	mov	r1, r0
  if (FLASH_update((uint32_t)&lUserConfigPtr->iot_config, config, sizeof(iot_config_t)) < 0)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f500 5021 	add.w	r0, r0, #10304	; 0x2840
 80019c6:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80019ca:	3030      	adds	r0, #48	; 0x30
 80019cc:	f7ff fd00 	bl	80013d0 <FLASH_update>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	da0b      	bge.n	80019ec <setIoTDeviceConfig+0x3c>
  {
    msg_error("Failed programming the IOT config into Flash.\n");
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <setIoTDeviceConfig+0x44>)
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <setIoTDeviceConfig+0x48>)
 80019d8:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 80019dc:	f021 fe30 	bl	8023640 <iprintf>
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <setIoTDeviceConfig+0x4c>)
 80019e2:	f021 fec9 	bl	8023778 <puts>
    ret = -1;
 80019e6:	f04f 30ff 	mov.w	r0, #4294967295
  }

  return ret;
}
 80019ea:	bd08      	pop	{r3, pc}
  int ret = 0;
 80019ec:	2000      	movs	r0, #0
  return ret;
 80019ee:	e7fc      	b.n	80019ea <setIoTDeviceConfig+0x3a>
 80019f0:	20000008 	.word	0x20000008
 80019f4:	08028207 	.word	0x08028207
 80019f8:	0802d9c5 	.word	0x0802d9c5
 80019fc:	0802df19 	.word	0x0802df19
 8001a00:	89abcdef 	.word	0x89abcdef
 8001a04:	01234567 	.word	0x01234567

08001a08 <getIoTDeviceConfig>:
  * @retval   0   Success:  The device configuration is configured and returned to the caller.
  *          -1   Error:    Device configuration absent.

  */
int getIoTDeviceConfig(const char ** const name)
{
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
  int ret = -1;

  if (name != NULL)
 8001a0a:	b1a8      	cbz	r0, 8001a38 <getIoTDeviceConfig+0x30>
  {
    if (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC)
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <getIoTDeviceConfig+0x40>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f502 5321 	add.w	r3, r2, #10304	; 0x2840
 8001a14:	e9d3 670c 	ldrd	r6, r7, [r3, #48]	; 0x30
 8001a18:	a509      	add	r5, pc, #36	; (adr r5, 8001a40 <getIoTDeviceConfig+0x38>)
 8001a1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8001a1e:	42af      	cmp	r7, r5
 8001a20:	bf08      	it	eq
 8001a22:	42a6      	cmpeq	r6, r4
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	d105      	bne.n	8001a36 <getIoTDeviceConfig+0x2e>
    {
      *name = lUserConfigPtr->iot_config.device_name;
 8001a2a:	f502 5221 	add.w	r2, r2, #10304	; 0x2840
 8001a2e:	3238      	adds	r2, #56	; 0x38
 8001a30:	6002      	str	r2, [r0, #0]
      ret = 0;
 8001a32:	4618      	mov	r0, r3
    } else {
      *name = NULL;
    }
  }
  return ret;
}
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *name = NULL;
 8001a36:	6003      	str	r3, [r0, #0]
  int ret = -1;
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001a3c:	e7fa      	b.n	8001a34 <getIoTDeviceConfig+0x2c>
 8001a3e:	bf00      	nop
 8001a40:	89abcdef 	.word	0x89abcdef
 8001a44:	01234567 	.word	0x01234567
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	00000000 	.word	0x00000000

08001a50 <checkIoTDeviceConfig>:
  * @retval 0:  Configuration present.
  *        -1:  No configuration.
  */
int checkIoTDeviceConfig()
{
  return (lUserConfigPtr->iot_config.magic == USER_CONF_MAGIC) ? 0 : -1;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <checkIoTDeviceConfig+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8001a58:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a5c:	a304      	add	r3, pc, #16	; (adr r3, 8001a70 <checkIoTDeviceConfig+0x20>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	4299      	cmp	r1, r3
 8001a64:	bf0a      	itet	eq
 8001a66:	4290      	cmpeq	r0, r2
}
 8001a68:	f04f 30ff 	movne.w	r0, #4294967295
 8001a6c:	2000      	moveq	r0, #0
 8001a6e:	4770      	bx	lr
 8001a70:	89abcdef 	.word	0x89abcdef
 8001a74:	01234567 	.word	0x01234567
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	00000000 	.word	0x00000000

08001a80 <getTLSKeys>:
  * @param  Out: private_key    Device private key (PEM format: string)
  * @retval 0:    TLS credentials found, and passed back to the caller.
  *        -1:    TLS credentials not found.
  */
int getTLSKeys(const char ** const root_ca_cert, const char ** const device_cert, const char ** const private_key)
{
 8001a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int rc = -1;
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a84:	4f20      	ldr	r7, [pc, #128]	; (8001b08 <getTLSKeys+0x88>)
 8001a86:	683b      	ldr	r3, [r7, #0]
{
 8001a88:	4614      	mov	r4, r2
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a8a:	f503 5228 	add.w	r2, r3, #10752	; 0x2a00
 8001a8e:	f20f 0970 	addw	r9, pc, #112	; 0x70
 8001a92:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 8001a96:	4606      	mov	r6, r0
 8001a98:	460d      	mov	r5, r1
  if (  (lUserConfigPtr->ca_tls_magic == USER_CONF_MAGIC)
 8001a9a:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
 8001a9e:	4549      	cmp	r1, r9
 8001aa0:	bf08      	it	eq
 8001aa2:	4540      	cmpeq	r0, r8
 8001aa4:	d11a      	bne.n	8001adc <getTLSKeys+0x5c>
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001aa6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001aaa:	3330      	adds	r3, #48	; 0x30
 8001aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	bf08      	it	eq
 8001ab4:	4282      	cmpeq	r2, r0
 8001ab6:	d10d      	bne.n	8001ad4 <getTLSKeys+0x54>
  {
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001ab8:	b9e6      	cbnz	r6, 8001af4 <getTLSKeys+0x74>
    if (device_cert !=NULL)      *device_cert = lUserConfigPtr->tls_device_cert;
 8001aba:	b11d      	cbz	r5, 8001ac4 <getTLSKeys+0x44>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8001ac2:	602b      	str	r3, [r5, #0]
    if (private_key!= NULL)      *private_key = lUserConfigPtr->tls_device_key;
 8001ac4:	b11c      	cbz	r4, 8001ace <getTLSKeys+0x4e>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001acc:	6023      	str	r3, [r4, #0]
    rc = 0;
 8001ace:	2000      	movs	r0, #0
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
    if (device_cert !=NULL)      *device_cert = NULL;
    if (private_key!= NULL)      *private_key = NULL;
  }
  return rc;
}
 8001ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      && ( (lUserConfigPtr->device_tls_magic == USER_CONF_MAGIC) || !app_needs_device_keypair() )  )
 8001ad4:	f001 fe7e 	bl	80037d4 <app_needs_device_keypair>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d0ed      	beq.n	8001ab8 <getTLSKeys+0x38>
    if (root_ca_cert != NULL)    *root_ca_cert = NULL;
 8001adc:	b10e      	cbz	r6, 8001ae2 <getTLSKeys+0x62>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	6033      	str	r3, [r6, #0]
    if (device_cert !=NULL)      *device_cert = NULL;
 8001ae2:	b10d      	cbz	r5, 8001ae8 <getTLSKeys+0x68>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	602b      	str	r3, [r5, #0]
    if (private_key!= NULL)      *private_key = NULL;
 8001ae8:	b10c      	cbz	r4, 8001aee <getTLSKeys+0x6e>
 8001aea:	2300      	movs	r3, #0
 8001aec:	6023      	str	r3, [r4, #0]
  int rc = -1;
 8001aee:	f04f 30ff 	mov.w	r0, #4294967295
  return rc;
 8001af2:	e7ed      	b.n	8001ad0 <getTLSKeys+0x50>
    if (root_ca_cert != NULL)    *root_ca_cert = lUserConfigPtr->tls_root_ca_cert;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6033      	str	r3, [r6, #0]
 8001af8:	e7df      	b.n	8001aba <getTLSKeys+0x3a>
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	89abcdef 	.word	0x89abcdef
 8001b04:	01234567 	.word	0x01234567
 8001b08:	20000008 	.word	0x20000008

08001b0c <mbedtls_net_recv>:
#include "msg.h"
#include <string.h>

/* Non-blocking interface implementation. Timeout is not applicable. */
int mbedtls_net_recv(void *ctx, unsigned char *buf, size_t len)
{
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4615      	mov	r5, r2
  int ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001b10:	f000 fa34 	bl	8001f7c <net_sock_recv>
  
  if (ret > 0)
 8001b14:	1e04      	subs	r4, r0, #0
 8001b16:	dc0b      	bgt.n	8001b30 <mbedtls_net_recv+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001b18:	d00c      	beq.n	8001b34 <mbedtls_net_recv+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_READ; 
  }
  
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b1a:	4907      	ldr	r1, [pc, #28]	; (8001b38 <mbedtls_net_recv+0x2c>)
 8001b1c:	4807      	ldr	r0, [pc, #28]	; (8001b3c <mbedtls_net_recv+0x30>)
 8001b1e:	2244      	movs	r2, #68	; 0x44
 8001b20:	f021 fd8e 	bl	8023640 <iprintf>
 8001b24:	4621      	mov	r1, r4
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <mbedtls_net_recv+0x34>)
 
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001b28:	4c06      	ldr	r4, [pc, #24]	; (8001b44 <mbedtls_net_recv+0x38>)
  msg_error("mbedtls_net_recv(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001b2a:	462a      	mov	r2, r5
 8001b2c:	f021 fd88 	bl	8023640 <iprintf>
}
 8001b30:	4620      	mov	r0, r4
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_READ; 
 8001b34:	4c04      	ldr	r4, [pc, #16]	; (8001b48 <mbedtls_net_recv+0x3c>)
 8001b36:	e7fb      	b.n	8001b30 <mbedtls_net_recv+0x24>
 8001b38:	0802821a 	.word	0x0802821a
 8001b3c:	0802d9c5 	.word	0x0802d9c5
 8001b40:	0802df47 	.word	0x0802df47
 8001b44:	ffff9400 	.word	0xffff9400
 8001b48:	ffff9700 	.word	0xffff9700

08001b4c <mbedtls_net_recv_blocking>:


/* Blocking interface implementation.*/
int mbedtls_net_recv_blocking(void *ctx, unsigned char *buf, size_t len, uint32_t timeout)
{
 8001b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b4e:	4604      	mov	r4, r0
 8001b50:	460e      	mov	r6, r1
 8001b52:	4615      	mov	r5, r2
  int ret = 0;
  char stimeout[8];
  
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b54:	2108      	movs	r1, #8
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <mbedtls_net_recv_blocking+0x7c>)
 8001b58:	4668      	mov	r0, sp
{
 8001b5a:	461f      	mov	r7, r3
  if ((sizeof(stimeout) - 1) <= snprintf(stimeout, sizeof(stimeout), "%lu",timeout))
 8001b5c:	f021 fe5a 	bl	8023814 <sniprintf>
 8001b60:	2806      	cmp	r0, #6
 8001b62:	dd0c      	ble.n	8001b7e <mbedtls_net_recv_blocking+0x32>
  {
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b64:	4919      	ldr	r1, [pc, #100]	; (8001bcc <mbedtls_net_recv_blocking+0x80>)
 8001b66:	481a      	ldr	r0, [pc, #104]	; (8001bd0 <mbedtls_net_recv_blocking+0x84>)
    return MBEDTLS_ERR_SSL_BAD_INPUT_DATA;
 8001b68:	4c1a      	ldr	r4, [pc, #104]	; (8001bd4 <mbedtls_net_recv_blocking+0x88>)
    msg_error("mbedtls_net_recv_blocking(): out of range timeout %lu\n", timeout);
 8001b6a:	2252      	movs	r2, #82	; 0x52
 8001b6c:	f021 fd68 	bl	8023640 <iprintf>
 8001b70:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <mbedtls_net_recv_blocking+0x8c>)
 8001b72:	4639      	mov	r1, r7
 8001b74:	f021 fd64 	bl	8023640 <iprintf>
    }
  }
  
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
}
 8001b78:	4620      	mov	r0, r4
 8001b7a:	b003      	add	sp, #12
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (net_sock_setopt((net_sockhnd_t) ctx, "sock_read_timeout", (uint8_t *)stimeout, strlen(stimeout) + 1) == NET_OK)
 8001b7e:	4668      	mov	r0, sp
 8001b80:	f7fe fb30 	bl	80001e4 <strlen>
 8001b84:	4915      	ldr	r1, [pc, #84]	; (8001bdc <mbedtls_net_recv_blocking+0x90>)
 8001b86:	1c43      	adds	r3, r0, #1
 8001b88:	466a      	mov	r2, sp
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f000 f952 	bl	8001e34 <net_sock_setopt>
 8001b90:	b9a8      	cbnz	r0, 8001bbe <mbedtls_net_recv_blocking+0x72>
    ret = net_sock_recv((net_sockhnd_t) ctx, buf, len);
 8001b92:	4620      	mov	r0, r4
 8001b94:	462a      	mov	r2, r5
 8001b96:	4631      	mov	r1, r6
 8001b98:	f000 f9f0 	bl	8001f7c <net_sock_recv>
    if (ret > 0)
 8001b9c:	1e04      	subs	r4, r0, #0
 8001b9e:	dceb      	bgt.n	8001b78 <mbedtls_net_recv_blocking+0x2c>
      switch(ret)
 8001ba0:	1ce3      	adds	r3, r4, #3
 8001ba2:	d00e      	beq.n	8001bc2 <mbedtls_net_recv_blocking+0x76>
 8001ba4:	b16c      	cbz	r4, 8001bc2 <mbedtls_net_recv_blocking+0x76>
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001ba6:	4909      	ldr	r1, [pc, #36]	; (8001bcc <mbedtls_net_recv_blocking+0x80>)
 8001ba8:	4809      	ldr	r0, [pc, #36]	; (8001bd0 <mbedtls_net_recv_blocking+0x84>)
 8001baa:	226e      	movs	r2, #110	; 0x6e
 8001bac:	f021 fd48 	bl	8023640 <iprintf>
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <mbedtls_net_recv_blocking+0x94>)
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <mbedtls_net_recv_blocking+0x98>)
  msg_error("mbedtls_net_recv_blocking(): error %d in net_sock_recv() - requestedLen=%d\n", ret, len);
 8001bb6:	462a      	mov	r2, r5
 8001bb8:	f021 fd42 	bl	8023640 <iprintf>
  return MBEDTLS_ERR_SSL_INTERNAL_ERROR;
 8001bbc:	e7dc      	b.n	8001b78 <mbedtls_net_recv_blocking+0x2c>
  int ret = 0;
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	e7f1      	b.n	8001ba6 <mbedtls_net_recv_blocking+0x5a>
      switch(ret)
 8001bc2:	4c09      	ldr	r4, [pc, #36]	; (8001be8 <mbedtls_net_recv_blocking+0x9c>)
 8001bc4:	e7d8      	b.n	8001b78 <mbedtls_net_recv_blocking+0x2c>
 8001bc6:	bf00      	nop
 8001bc8:	080314dc 	.word	0x080314dc
 8001bcc:	0802822b 	.word	0x0802822b
 8001bd0:	0802d9c5 	.word	0x0802d9c5
 8001bd4:	ffff8f00 	.word	0xffff8f00
 8001bd8:	0802df8a 	.word	0x0802df8a
 8001bdc:	0802dfc1 	.word	0x0802dfc1
 8001be0:	0802dfd3 	.word	0x0802dfd3
 8001be4:	ffff9400 	.word	0xffff9400
 8001be8:	ffff9700 	.word	0xffff9700

08001bec <mbedtls_net_send>:


int mbedtls_net_send(void *ctx, const unsigned char *buf, size_t len)
{
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4615      	mov	r5, r2
  int ret = net_sock_send((net_sockhnd_t) ctx, buf, len);
 8001bf0:	f000 f9ca 	bl	8001f88 <net_sock_send>
  
  if (ret > 0)
 8001bf4:	1e04      	subs	r4, r0, #0
 8001bf6:	dc0b      	bgt.n	8001c10 <mbedtls_net_send+0x24>
  {
    return ret;
  }
  
  if(ret == 0)
 8001bf8:	d00c      	beq.n	8001c14 <mbedtls_net_send+0x28>
  {
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
  }
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001bfa:	4907      	ldr	r1, [pc, #28]	; (8001c18 <mbedtls_net_send+0x2c>)
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <mbedtls_net_send+0x30>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	f021 fd1e 	bl	8023640 <iprintf>
 8001c04:	4621      	mov	r1, r4
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <mbedtls_net_send+0x34>)
   *          MBEDTLS_ERR_SSL_INTERNAL_ERROR,
   *          MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY,
   *          MBEDTLS_ERR_SSL_CONN_EOF.
   *  Most often, the error is due to the closure of the connection by the remote host. */ 
  
  return MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY;
 8001c08:	4c06      	ldr	r4, [pc, #24]	; (8001c24 <mbedtls_net_send+0x38>)
  msg_error("mbedtls_net_send(): error %d in net_sock_send() - requestedLen=%d\n", ret, len);
 8001c0a:	462a      	mov	r2, r5
 8001c0c:	f021 fd18 	bl	8023640 <iprintf>
  
}
 8001c10:	4620      	mov	r0, r4
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
    return  MBEDTLS_ERR_SSL_WANT_WRITE; 
 8001c14:	4c04      	ldr	r4, [pc, #16]	; (8001c28 <mbedtls_net_send+0x3c>)
 8001c16:	e7fb      	b.n	8001c10 <mbedtls_net_send+0x24>
 8001c18:	08028245 	.word	0x08028245
 8001c1c:	0802d9c5 	.word	0x0802d9c5
 8001c20:	0802e01f 	.word	0x0802e01f
 8001c24:	ffff8780 	.word	0xffff8780
 8001c28:	ffff9780 	.word	0xffff9780

08001c2c <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2e:	4607      	mov	r7, r0
 8001c30:	460c      	mov	r4, r1
  int rc = NET_ERR;
  net_ctxt_t *ctxt = NULL;

  if (f_netinit == NULL)
 8001c32:	4616      	mov	r6, r2
 8001c34:	b36a      	cbz	r2, 8001c92 <net_init+0x66>
  {
    rc = NET_PARAM;
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 8001c36:	2008      	movs	r0, #8
 8001c38:	f020 fbb8 	bl	80223ac <malloc>
    if (ctxt == NULL)
 8001c3c:	4605      	mov	r5, r0
 8001c3e:	b958      	cbnz	r0, 8001c58 <net_init+0x2c>
    {
      msg_error("net_init: allocation failed.\n");
 8001c40:	4915      	ldr	r1, [pc, #84]	; (8001c98 <net_init+0x6c>)
 8001c42:	4816      	ldr	r0, [pc, #88]	; (8001c9c <net_init+0x70>)
 8001c44:	2253      	movs	r2, #83	; 0x53
 8001c46:	f021 fcfb 	bl	8023640 <iprintf>
 8001c4a:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <net_init+0x74>)
 8001c4c:	f021 fd94 	bl	8023778 <puts>
      rc = NET_ERR;
 8001c50:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
    }
  }
  
  return rc;
}
 8001c54:	4620      	mov	r0, r4
 8001c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c58:	2000      	movs	r0, #0
      switch(interface)
 8001c5a:	2c01      	cmp	r4, #1
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8001c5c:	e9c5 0000 	strd	r0, r0, [r5]
      switch(interface)
 8001c60:	d109      	bne.n	8001c76 <net_init+0x4a>
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 8001c62:	702c      	strb	r4, [r5, #0]
          if(f_netinit(NULL) == 0)
 8001c64:	47b0      	blx	r6
 8001c66:	4604      	mov	r4, r0
 8001c68:	b188      	cbz	r0, 8001c8e <net_init+0x62>
  int rc = NET_ERR;
 8001c6a:	f04f 34ff 	mov.w	r4, #4294967295
      net_free(ctxt);
 8001c6e:	4628      	mov	r0, r5
 8001c70:	f020 fba4 	bl	80223bc <free>
 8001c74:	e7ee      	b.n	8001c54 <net_init+0x28>
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <net_init+0x6c>)
 8001c78:	4808      	ldr	r0, [pc, #32]	; (8001c9c <net_init+0x70>)
 8001c7a:	2277      	movs	r2, #119	; 0x77
 8001c7c:	f021 fce0 	bl	8023640 <iprintf>
 8001c80:	4621      	mov	r1, r4
 8001c82:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <net_init+0x78>)
 8001c84:	f021 fcdc 	bl	8023640 <iprintf>
          rc = NET_PARAM;
 8001c88:	f06f 0401 	mvn.w	r4, #1
 8001c8c:	e7ef      	b.n	8001c6e <net_init+0x42>
    *nethnd = (net_hnd_t) ctxt;
 8001c8e:	603d      	str	r5, [r7, #0]
 8001c90:	e7e0      	b.n	8001c54 <net_init+0x28>
    rc = NET_PARAM;
 8001c92:	f06f 0401 	mvn.w	r4, #1
  return rc;
 8001c96:	e7dd      	b.n	8001c54 <net_init+0x28>
 8001c98:	08028256 	.word	0x08028256
 8001c9c:	0802d9c5 	.word	0x0802d9c5
 8001ca0:	0802e062 	.word	0x0802e062
 8001ca4:	0802e07f 	.word	0x0802e07f

08001ca8 <net_deinit>:


int net_deinit(net_hnd_t nethnd, net_if_deinit_t *f_netdeinit)
{
 8001ca8:	b538      	push	{r3, r4, r5, lr}
 8001caa:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netdeinit == NULL)
 8001cac:	b1a1      	cbz	r1, 8001cd8 <net_deinit+0x30>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001cae:	6844      	ldr	r4, [r0, #4]
 8001cb0:	b994      	cbnz	r4, 8001cd8 <net_deinit+0x30>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001cb2:	7803      	ldrb	r3, [r0, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d106      	bne.n	8001cc6 <net_deinit+0x1e>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netdeinit(NULL);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	4788      	blx	r1
          rc = NET_PARAM;
      }
      
      if (rc == NET_OK)
      {
        net_free((void *)nethnd);
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	f020 fb7d 	bl	80223bc <free>
          rc = NET_OK;
 8001cc2:	4620      	mov	r0, r4
      }
    }
  }
  return rc;
}
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_deinit: interface type of %d not implemented.\n", ctxt->itf);
 8001cc6:	4906      	ldr	r1, [pc, #24]	; (8001ce0 <net_deinit+0x38>)
 8001cc8:	4806      	ldr	r0, [pc, #24]	; (8001ce4 <net_deinit+0x3c>)
 8001cca:	22b3      	movs	r2, #179	; 0xb3
 8001ccc:	f021 fcb8 	bl	8023640 <iprintf>
 8001cd0:	7829      	ldrb	r1, [r5, #0]
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <net_deinit+0x40>)
 8001cd4:	f021 fcb4 	bl	8023640 <iprintf>
    rc = NET_PARAM;
 8001cd8:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001cdc:	e7f2      	b.n	8001cc4 <net_deinit+0x1c>
 8001cde:	bf00      	nop
 8001ce0:	0802825f 	.word	0x0802825f
 8001ce4:	0802d9c5 	.word	0x0802d9c5
 8001ce8:	0802e0b0 	.word	0x0802e0b0

08001cec <net_reinit>:


int net_reinit(net_hnd_t nethnd, net_if_reinit_t *f_netreinit)
{
 8001cec:	b538      	push	{r3, r4, r5, lr}
 8001cee:	4605      	mov	r5, r0
  int rc = NET_ERR;
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  
  if (f_netreinit == NULL)
 8001cf0:	b189      	cbz	r1, 8001d16 <net_reinit+0x2a>
  {
    rc = NET_PARAM;
  }
  else
  {
    if (ctxt->sock_list != NULL)
 8001cf2:	6844      	ldr	r4, [r0, #4]
 8001cf4:	b97c      	cbnz	r4, 8001d16 <net_reinit+0x2a>
    {
      rc = NET_PARAM;
    }
    else
    {
      switch(ctxt->itf)
 8001cf6:	7803      	ldrb	r3, [r0, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d103      	bne.n	8001d04 <net_reinit+0x18>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          f_netreinit(NULL);
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4788      	blx	r1
          rc = NET_OK;
 8001d00:	4620      	mov	r0, r4
          rc = NET_PARAM;
      }
    }
  }
  return rc;
}
 8001d02:	bd38      	pop	{r3, r4, r5, pc}
          msg_error("net_reinit: interface type of %d not implemented.\n", ctxt->itf);
 8001d04:	4905      	ldr	r1, [pc, #20]	; (8001d1c <net_reinit+0x30>)
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <net_reinit+0x34>)
 8001d08:	22e7      	movs	r2, #231	; 0xe7
 8001d0a:	f021 fc99 	bl	8023640 <iprintf>
 8001d0e:	7829      	ldrb	r1, [r5, #0]
 8001d10:	4804      	ldr	r0, [pc, #16]	; (8001d24 <net_reinit+0x38>)
 8001d12:	f021 fc95 	bl	8023640 <iprintf>
    rc = NET_PARAM;
 8001d16:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d1a:	e7f2      	b.n	8001d02 <net_reinit+0x16>
 8001d1c:	0802826a 	.word	0x0802826a
 8001d20:	0802d9c5 	.word	0x0802d9c5
 8001d24:	0802e0e3 	.word	0x0802e0e3

08001d28 <net_get_ip_address>:


int net_get_ip_address(net_hnd_t nethnd, net_ipaddr_t * ipAddress)
{
 8001d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d2a:	4604      	mov	r4, r0
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  
  if (ipAddress == NULL)
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	b309      	cbz	r1, 8001d74 <net_get_ip_address+0x4c>
  {
    rc = NET_PARAM;
  }
  else
  {
    switch(ctxt->itf)
 8001d30:	7803      	ldrb	r3, [r0, #0]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d114      	bne.n	8001d60 <net_get_ip_address+0x38>
#ifdef USE_WIFI
      case NET_IF_WLAN:
      {
        uint8_t addr[4];
        /* WIFI_GetIP_Address() returns IPv4 addresses in binary format, network byte order. */
        WIFI_Status_t ret = WIFI_GetIP_Address(addr);
 8001d36:	a801      	add	r0, sp, #4
 8001d38:	f003 f894 	bl	8004e64 <WIFI_GetIP_Address>
        if (ret == WIFI_STATUS_OK)
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	b960      	cbnz	r0, 8001d5a <net_get_ip_address+0x32>
        {
          ipAddress->ipv = NET_IP_V4;
 8001d40:	4628      	mov	r0, r5
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d42:	2210      	movs	r2, #16
          ipAddress->ipv = NET_IP_V4;
 8001d44:	f800 4b01 	strb.w	r4, [r0], #1
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8001d48:	21ff      	movs	r1, #255	; 0xff
 8001d4a:	f020 fb75 	bl	8022438 <memset>
          memcpy(&ipAddress->ip[12], addr, 4);
 8001d4e:	9b01      	ldr	r3, [sp, #4]
 8001d50:	f8c5 300d 	str.w	r3, [r5, #13]
          rc = NET_OK;
 8001d54:	4620      	mov	r0, r4
        rc = NET_PARAM;
    }
  }
  
  return rc;
}
 8001d56:	b003      	add	sp, #12
 8001d58:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001d5a:	f04f 30ff 	mov.w	r0, #4294967295
        break;
 8001d5e:	e7fa      	b.n	8001d56 <net_get_ip_address+0x2e>
        msg_error("net_get_ip_address: interface type of %d not implemented.\n", ctxt->itf);
 8001d60:	4906      	ldr	r1, [pc, #24]	; (8001d7c <net_get_ip_address+0x54>)
 8001d62:	4807      	ldr	r0, [pc, #28]	; (8001d80 <net_get_ip_address+0x58>)
 8001d64:	f44f 729b 	mov.w	r2, #310	; 0x136
 8001d68:	f021 fc6a 	bl	8023640 <iprintf>
 8001d6c:	7821      	ldrb	r1, [r4, #0]
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <net_get_ip_address+0x5c>)
 8001d70:	f021 fc66 	bl	8023640 <iprintf>
    rc = NET_PARAM;
 8001d74:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001d78:	e7ed      	b.n	8001d56 <net_get_ip_address+0x2e>
 8001d7a:	bf00      	nop
 8001d7c:	08028275 	.word	0x08028275
 8001d80:	0802d9c5 	.word	0x0802d9c5
 8001d84:	0802e116 	.word	0x0802e116

08001d88 <net_get_mac_address>:


int net_get_mac_address(net_hnd_t nethnd, net_macaddr_t * macAddress)
{
 8001d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  int rc = NET_ERR;
  switch (ctxt->itf)
 8001d8a:	7803      	ldrb	r3, [r0, #0]
 8001d8c:	2b01      	cmp	r3, #1
{
 8001d8e:	4604      	mov	r4, r0
 8001d90:	460d      	mov	r5, r1
  switch (ctxt->itf)
 8001d92:	d10f      	bne.n	8001db4 <net_get_mac_address+0x2c>
  {
#ifdef USE_WIFI
    case NET_IF_WLAN:
    {
      uint8_t addr[6];  /* WIFI_GetMAC_Address() returns in binary format. */
      WIFI_Status_t ret = WIFI_GetMAC_Address(addr);
 8001d94:	4668      	mov	r0, sp
 8001d96:	f003 f859 	bl	8004e4c <WIFI_GetMAC_Address>
      if (ret == WIFI_STATUS_OK)
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b938      	cbnz	r0, 8001dae <net_get_mac_address+0x26>
      {
        memcpy(macAddress->mac, addr, MIN(sizeof(macAddress->mac), 6));
 8001d9e:	9800      	ldr	r0, [sp, #0]
 8001da0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001da4:	6028      	str	r0, [r5, #0]
 8001da6:	80aa      	strh	r2, [r5, #4]
        rc = NET_OK;
 8001da8:	4618      	mov	r0, r3
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
      rc = NET_PARAM;
  }
  
  return rc;
}
 8001daa:	b003      	add	sp, #12
 8001dac:	bd30      	pop	{r4, r5, pc}
  int rc = NET_ERR;
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
      break;
 8001db2:	e7fa      	b.n	8001daa <net_get_mac_address+0x22>
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
 8001db4:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <net_get_mac_address+0x48>)
 8001db6:	4807      	ldr	r0, [pc, #28]	; (8001dd4 <net_get_mac_address+0x4c>)
 8001db8:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001dbc:	f021 fc40 	bl	8023640 <iprintf>
 8001dc0:	7821      	ldrb	r1, [r4, #0]
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <net_get_mac_address+0x50>)
 8001dc4:	f021 fc3c 	bl	8023640 <iprintf>
      rc = NET_PARAM;
 8001dc8:	f06f 0001 	mvn.w	r0, #1
  return rc;
 8001dcc:	e7ed      	b.n	8001daa <net_get_mac_address+0x22>
 8001dce:	bf00      	nop
 8001dd0:	08028288 	.word	0x08028288
 8001dd4:	0802d9c5 	.word	0x0802d9c5
 8001dd8:	0802e151 	.word	0x0802e151

08001ddc <net_sock_create>:


int net_sock_create(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
  switch(proto)
 8001ddc:	2a02      	cmp	r2, #2
{
 8001dde:	b510      	push	{r4, lr}
 8001de0:	4604      	mov	r4, r0
  switch(proto)
 8001de2:	d00a      	beq.n	8001dfa <net_sock_create+0x1e>
 8001de4:	f002 03fd 	and.w	r3, r2, #253	; 0xfd
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10a      	bne.n	8001e02 <net_sock_create+0x26>
  {
    case NET_PROTO_TCP:
    case NET_PROTO_UDP:
      switch(ctxt->itf)
 8001dec:	7803      	ldrb	r3, [r0, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d111      	bne.n	8001e16 <net_sock_create+0x3a>
    default:
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
      return NET_PARAM;
  }
  return NET_PARAM;
}
 8001df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 8001df6:	f000 bb41 	b.w	800247c <net_sock_create_wifi>
}
 8001dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return net_sock_create_mbedtls(nethnd, sockhnd, proto);
 8001dfe:	f000 bf17 	b.w	8002c30 <net_sock_create_mbedtls>
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
 8001e02:	4906      	ldr	r1, [pc, #24]	; (8001e1c <net_sock_create+0x40>)
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <net_sock_create+0x44>)
 8001e06:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8001e0a:	f021 fc19 	bl	8023640 <iprintf>
 8001e0e:	7821      	ldrb	r1, [r4, #0]
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <net_sock_create+0x48>)
 8001e12:	f021 fc15 	bl	8023640 <iprintf>
}
 8001e16:	f06f 0001 	mvn.w	r0, #1
 8001e1a:	bd10      	pop	{r4, pc}
 8001e1c:	080282b0 	.word	0x080282b0
 8001e20:	0802d9c5 	.word	0x0802d9c5
 8001e24:	0802e18d 	.word	0x0802e18d

08001e28 <net_sock_open>:


int net_sock_open(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001e28:	b410      	push	{r4}
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e2a:	6884      	ldr	r4, [r0, #8]
 8001e2c:	46a4      	mov	ip, r4
}
 8001e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 8001e32:	4760      	bx	ip

08001e34 <net_sock_setopt>:


int net_sock_setopt(net_sockhnd_t sockhnd, const char * optname, const uint8_t * optbuf, size_t optlen)
{
 8001e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e38:	4681      	mov	r9, r0
 8001e3a:	460e      	mov	r6, r1
 8001e3c:	469a      	mov	sl, r3
  int rc = NET_PARAM;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001e3e:	4617      	mov	r7, r2
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d07d      	beq.n	8001f40 <net_sock_setopt+0x10c>
 8001e44:	1e1d      	subs	r5, r3, #0
 8001e46:	bf18      	it	ne
 8001e48:	2501      	movne	r5, #1

#ifdef USE_MBED_TLS
  net_tls_data_t * tlsData = sock->tlsData;
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e4a:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d17b      	bne.n	8001f4a <net_sock_setopt+0x116>
  net_tls_data_t * tlsData = sock->tlsData;
 8001e52:	f8d9 802c 	ldr.w	r8, [r9, #44]	; 0x2c
  if ( (sock->proto == NET_PROTO_TLS) && (tlsData != NULL) )
 8001e56:	f1b8 0f00 	cmp.w	r8, #0
 8001e5a:	d076      	beq.n	8001f4a <net_sock_setopt+0x116>
  {
    if (strcmp(optname, "tls_ca_certs") == 0)
 8001e5c:	493c      	ldr	r1, [pc, #240]	; (8001f50 <net_sock_setopt+0x11c>)
 8001e5e:	4630      	mov	r0, r6
 8001e60:	f7fe f9b6 	bl	80001d0 <strcmp>
 8001e64:	4604      	mov	r4, r0
 8001e66:	2800      	cmp	r0, #0
 8001e68:	d16c      	bne.n	8001f44 <net_sock_setopt+0x110>
    {
      if (has_opt_data)
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d06a      	beq.n	8001f44 <net_sock_setopt+0x110>
      {
        tlsData->tls_ca_certs = (unsigned char *) optbuf;
 8001e6e:	f8c8 7000 	str.w	r7, [r8]
        rc = NET_OK;
      }
    }
    if (strcmp(optname, "tls_dev_cert") == 0)
 8001e72:	4938      	ldr	r1, [pc, #224]	; (8001f54 <net_sock_setopt+0x120>)
 8001e74:	4630      	mov	r0, r6
 8001e76:	f7fe f9ab 	bl	80001d0 <strcmp>
 8001e7a:	b918      	cbnz	r0, 8001e84 <net_sock_setopt+0x50>
    {
      if (has_opt_data)
 8001e7c:	b115      	cbz	r5, 8001e84 <net_sock_setopt+0x50>
      {
        tlsData->tls_dev_cert = (unsigned char *) optbuf;
 8001e7e:	f8c8 7008 	str.w	r7, [r8, #8]
        rc = NET_OK;
 8001e82:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_dev_key") == 0)
 8001e84:	4934      	ldr	r1, [pc, #208]	; (8001f58 <net_sock_setopt+0x124>)
 8001e86:	4630      	mov	r0, r6
 8001e88:	f7fe f9a2 	bl	80001d0 <strcmp>
 8001e8c:	b918      	cbnz	r0, 8001e96 <net_sock_setopt+0x62>
    {
      if (has_opt_data)
 8001e8e:	b115      	cbz	r5, 8001e96 <net_sock_setopt+0x62>
      {
        tlsData->tls_dev_key = (unsigned char *) optbuf;
 8001e90:	f8c8 700c 	str.w	r7, [r8, #12]
        rc = NET_OK;
 8001e94:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_dev_pwd") == 0)
 8001e96:	4931      	ldr	r1, [pc, #196]	; (8001f5c <net_sock_setopt+0x128>)
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7fe f999 	bl	80001d0 <strcmp>
 8001e9e:	b918      	cbnz	r0, 8001ea8 <net_sock_setopt+0x74>
    {
      if (has_opt_data)
 8001ea0:	b115      	cbz	r5, 8001ea8 <net_sock_setopt+0x74>
      {
        tlsData->tls_dev_pwd = (uint8_t *) optbuf;
        tlsData->tls_dev_pwd_len = optlen;
 8001ea2:	e9c8 7a04 	strd	r7, sl, [r8, #16]
        rc = NET_OK;
 8001ea6:	4604      	mov	r4, r0
      }
    }
    if (strcmp(optname, "tls_server_verification") == 0)
 8001ea8:	492d      	ldr	r1, [pc, #180]	; (8001f60 <net_sock_setopt+0x12c>)
 8001eaa:	4630      	mov	r0, r6
 8001eac:	f7fe f990 	bl	80001d0 <strcmp>
 8001eb0:	4328      	orrs	r0, r5
    {
      if (!has_opt_data)
      {
        tlsData->tls_srv_verification = true;
 8001eb2:	bf02      	ittt	eq
 8001eb4:	2301      	moveq	r3, #1
        rc = NET_OK;
 8001eb6:	4604      	moveq	r4, r0
        tlsData->tls_srv_verification = true;
 8001eb8:	f888 3018 	strbeq.w	r3, [r8, #24]
      }
    }
    if (strcmp(optname, "tls_server_noverification") == 0)
 8001ebc:	4929      	ldr	r1, [pc, #164]	; (8001f64 <net_sock_setopt+0x130>)
 8001ebe:	4630      	mov	r0, r6
 8001ec0:	f7fe f986 	bl	80001d0 <strcmp>
 8001ec4:	4328      	orrs	r0, r5
    {
      if (!has_opt_data)
      {
        tlsData->tls_srv_verification = false;
 8001ec6:	bf04      	itt	eq
 8001ec8:	f888 0018 	strbeq.w	r0, [r8, #24]
        rc = NET_OK;
 8001ecc:	4604      	moveq	r4, r0
      }
    }
    if (strcmp(optname, "tls_server_name") == 0)
 8001ece:	4926      	ldr	r1, [pc, #152]	; (8001f68 <net_sock_setopt+0x134>)
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f7fe f97d 	bl	80001d0 <strcmp>
 8001ed6:	b918      	cbnz	r0, 8001ee0 <net_sock_setopt+0xac>
    {
      if (has_opt_data)
 8001ed8:	b115      	cbz	r5, 8001ee0 <net_sock_setopt+0xac>
      {
        tlsData->tls_srv_name = (char *) optbuf;
 8001eda:	f8c8 701c 	str.w	r7, [r8, #28]
        rc = NET_OK;
 8001ede:	4604      	mov	r4, r0
      }
    }
  }
#endif /* USE_MBED_TLS */
  
  if (strcmp(optname, "sock_blocking") == 0)
 8001ee0:	4922      	ldr	r1, [pc, #136]	; (8001f6c <net_sock_setopt+0x138>)
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	f7fe f974 	bl	80001d0 <strcmp>
 8001ee8:	4328      	orrs	r0, r5
  {
    if (!has_opt_data)
    {
      sock->blocking = true;
 8001eea:	bf02      	ittt	eq
 8001eec:	2301      	moveq	r3, #1
      rc = NET_OK;
 8001eee:	4604      	moveq	r4, r0
      sock->blocking = true;
 8001ef0:	f889 3025 	strbeq.w	r3, [r9, #37]	; 0x25
    }
  }
  if (strcmp(optname, "sock_noblocking") == 0)
 8001ef4:	491e      	ldr	r1, [pc, #120]	; (8001f70 <net_sock_setopt+0x13c>)
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f7fe f96a 	bl	80001d0 <strcmp>
 8001efc:	4328      	orrs	r0, r5
  {
    if (!has_opt_data)
    {
      sock->blocking = false;
 8001efe:	bf04      	itt	eq
 8001f00:	f889 0025 	strbeq.w	r0, [r9, #37]	; 0x25
      rc = NET_OK;
 8001f04:	4604      	moveq	r4, r0
    }
  }
  if (strcmp(optname, "sock_read_timeout") == 0)
 8001f06:	491b      	ldr	r1, [pc, #108]	; (8001f74 <net_sock_setopt+0x140>)
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f7fe f961 	bl	80001d0 <strcmp>
 8001f0e:	4680      	mov	r8, r0
 8001f10:	b930      	cbnz	r0, 8001f20 <net_sock_setopt+0xec>
  {
    if (has_opt_data)
 8001f12:	b12d      	cbz	r5, 8001f20 <net_sock_setopt+0xec>
    {
      sock->read_timeout = atoi((char const *)optbuf);
 8001f14:	4638      	mov	r0, r7
 8001f16:	f020 f918 	bl	802214a <atoi>
      rc = NET_OK;
 8001f1a:	4644      	mov	r4, r8
      sock->read_timeout = atoi((char const *)optbuf);
 8001f1c:	f8a9 0026 	strh.w	r0, [r9, #38]	; 0x26
    }
  }
  if (strcmp(optname, "sock_write_timeout") == 0)
 8001f20:	4630      	mov	r0, r6
 8001f22:	4915      	ldr	r1, [pc, #84]	; (8001f78 <net_sock_setopt+0x144>)
 8001f24:	f7fe f954 	bl	80001d0 <strcmp>
 8001f28:	4606      	mov	r6, r0
 8001f2a:	b930      	cbnz	r0, 8001f3a <net_sock_setopt+0x106>
  {
    if (has_opt_data)
 8001f2c:	b12d      	cbz	r5, 8001f3a <net_sock_setopt+0x106>
    {
      sock->write_timeout = atoi((char const *)optbuf);
 8001f2e:	4638      	mov	r0, r7
 8001f30:	f020 f90b 	bl	802214a <atoi>
      rc = NET_OK;
 8001f34:	4634      	mov	r4, r6
      sock->write_timeout = atoi((char const *)optbuf);
 8001f36:	f8a9 0028 	strh.w	r0, [r9, #40]	; 0x28
    }
  }
  return rc;
}
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 8001f40:	4615      	mov	r5, r2
 8001f42:	e782      	b.n	8001e4a <net_sock_setopt+0x16>
  int rc = NET_PARAM;
 8001f44:	f06f 0401 	mvn.w	r4, #1
 8001f48:	e793      	b.n	8001e72 <net_sock_setopt+0x3e>
 8001f4a:	f06f 0401 	mvn.w	r4, #1
 8001f4e:	e7c7      	b.n	8001ee0 <net_sock_setopt+0xac>
 8001f50:	0802e1c5 	.word	0x0802e1c5
 8001f54:	0802e1d2 	.word	0x0802e1d2
 8001f58:	0802e1df 	.word	0x0802e1df
 8001f5c:	0802e1eb 	.word	0x0802e1eb
 8001f60:	0802e1f7 	.word	0x0802e1f7
 8001f64:	0802e20f 	.word	0x0802e20f
 8001f68:	0802e229 	.word	0x0802e229
 8001f6c:	0802e239 	.word	0x0802e239
 8001f70:	0802e247 	.word	0x0802e247
 8001f74:	0802dfc1 	.word	0x0802dfc1
 8001f78:	0802e257 	.word	0x0802e257

08001f7c <net_sock_recv>:


int net_sock_recv(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.recv != NULL) ? sock->methods.recv(sockhnd, buf, len) : NET_PARAM;
 8001f7c:	68c3      	ldr	r3, [r0, #12]
 8001f7e:	b103      	cbz	r3, 8001f82 <net_sock_recv+0x6>
 8001f80:	4718      	bx	r3
}
 8001f82:	f06f 0001 	mvn.w	r0, #1
 8001f86:	4770      	bx	lr

08001f88 <net_sock_send>:


int net_sock_send(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.send != NULL) ? sock->methods.send(sockhnd, buf, len) : NET_PARAM;
 8001f88:	6943      	ldr	r3, [r0, #20]
 8001f8a:	b103      	cbz	r3, 8001f8e <net_sock_send+0x6>
 8001f8c:	4718      	bx	r3
} 
 8001f8e:	f06f 0001 	mvn.w	r0, #1
 8001f92:	4770      	bx	lr

08001f94 <net_sock_close>:
  

int net_sock_close(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.close != NULL) ? sock->methods.close(sockhnd) : NET_PARAM;
 8001f94:	69c3      	ldr	r3, [r0, #28]
 8001f96:	b103      	cbz	r3, 8001f9a <net_sock_close+0x6>
 8001f98:	4718      	bx	r3
}
 8001f9a:	f06f 0001 	mvn.w	r0, #1
 8001f9e:	4770      	bx	lr

08001fa0 <net_sock_destroy>:


int net_sock_destroy(net_sockhnd_t sockhnd)
{
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
  return (sock->methods.destroy != NULL) ? sock->methods.destroy(sockhnd) : NET_PARAM;
 8001fa0:	6a03      	ldr	r3, [r0, #32]
 8001fa2:	b103      	cbz	r3, 8001fa6 <net_sock_destroy+0x6>
 8001fa4:	4718      	bx	r3
}
 8001fa6:	f06f 0001 	mvn.w	r0, #1
 8001faa:	4770      	bx	lr

08001fac <net_timeout_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t net_timeout_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 8001fac:	b510      	push	{r4, lr}
  int32_t ret = 0;
  uint32_t wrap_end = 0;
  
  if (now < init)
 8001fae:	4281      	cmp	r1, r0
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", init, now);
    wrap_end = UINT32_MAX - init;
  }
  ret = wrap_end - (now - init) + timeout;
 8001fb0:	4402      	add	r2, r0
    wrap_end = UINT32_MAX - init;
 8001fb2:	bf34      	ite	cc
 8001fb4:	43c4      	mvncc	r4, r0
  uint32_t wrap_end = 0;
 8001fb6:	2400      	movcs	r4, #0
  ret = wrap_end - (now - init) + timeout;
 8001fb8:	1a53      	subs	r3, r2, r1

  return ret;
}
 8001fba:	1918      	adds	r0, r3, r4
 8001fbc:	bd10      	pop	{r4, pc}

08001fbe <net_sock_destroy_tcp_wifi>:

int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd)
{
  int rc = NET_ERR;
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
  net_ctxt_t *ctxt = sock->net;
 8001fbe:	6802      	ldr	r2, [r0, #0]
{
 8001fc0:	b508      	push	{r3, lr}
    
  /* Find the parent in the linked list.
   * Unlink and free. 
   */
  if (sock == ctxt->sock_list)
 8001fc2:	6853      	ldr	r3, [r2, #4]
 8001fc4:	4283      	cmp	r3, r0
 8001fc6:	d105      	bne.n	8001fd4 <net_sock_destroy_tcp_wifi+0x16>
    net_sock_ctxt_t *cur = ctxt->sock_list;
    do
    {
      if (cur->next == sock)
      {
        cur->next = sock->next;
 8001fc8:	6843      	ldr	r3, [r0, #4]
 8001fca:	6053      	str	r3, [r2, #4]
      cur = cur->next;
    } while(cur->next != NULL);
  }
  if (rc == NET_OK)
  {
    net_free(sock);
 8001fcc:	f020 f9f6 	bl	80223bc <free>
 8001fd0:	2000      	movs	r0, #0
  }
  
  return rc;
}
 8001fd2:	bd08      	pop	{r3, pc}
      if (cur->next == sock)
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4283      	cmp	r3, r0
 8001fda:	d0f5      	beq.n	8001fc8 <net_sock_destroy_tcp_wifi+0xa>
    } while(cur->next != NULL);
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d1f8      	bne.n	8001fd4 <net_sock_destroy_tcp_wifi+0x16>
  int rc = NET_ERR;
 8001fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe6:	e7f4      	b.n	8001fd2 <net_sock_destroy_tcp_wifi+0x14>

08001fe8 <net_sock_open_wifi>:
{
 8001fe8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001fec:	461e      	mov	r6, r3
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9302      	str	r3, [sp, #8]
  memset(underlying_socket_busy, 0, sizeof(underlying_socket_busy));
 8001ff2:	9303      	str	r3, [sp, #12]
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001ff4:	6803      	ldr	r3, [r0, #0]
{
 8001ff6:	4617      	mov	r7, r2
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001ff8:	685c      	ldr	r4, [r3, #4]
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
{
 8001ffe:	4605      	mov	r5, r0
 8002000:	4688      	mov	r8, r1
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 8002002:	6302      	str	r2, [r0, #48]	; 0x30
    if ( ((cur->proto == NET_PROTO_TCP) || (cur->proto == NET_PROTO_UDP) )&& ((int) cur->underlying_sock_ctxt >= 0) )
 8002004:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8002008:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800200c:	2a01      	cmp	r2, #1
 800200e:	d106      	bne.n	800201e <net_sock_open_wifi+0x36>
 8002010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002012:	2b00      	cmp	r3, #0
      underlying_socket_busy[(int) cur->underlying_sock_ctxt] = true;
 8002014:	bfa2      	ittt	ge
 8002016:	a904      	addge	r1, sp, #16
 8002018:	185b      	addge	r3, r3, r1
 800201a:	f803 2c04 	strbge.w	r2, [r3, #-4]
    cur = cur->next;
 800201e:	6864      	ldr	r4, [r4, #4]
  } while (cur != NULL);
 8002020:	2c00      	cmp	r4, #0
 8002022:	d1ef      	bne.n	8002004 <net_sock_open_wifi+0x1c>
 8002024:	ab03      	add	r3, sp, #12
    if (underlying_socket_busy[i] == false)
 8002026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800202a:	b95a      	cbnz	r2, 8002044 <net_sock_open_wifi+0x5c>
      sock->underlying_sock_ctxt = (net_sockhnd_t) i;
 800202c:	632c      	str	r4, [r5, #48]	; 0x30
    switch(sock->proto)
 800202e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002032:	2b01      	cmp	r3, #1
 8002034:	d00a      	beq.n	800204c <net_sock_open_wifi+0x64>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d014      	beq.n	8002064 <net_sock_open_wifi+0x7c>
  int rc = NET_ERR;
 800203a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800203e:	b004      	add	sp, #16
 8002040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 8002044:	3401      	adds	r4, #1
 8002046:	2c04      	cmp	r4, #4
 8002048:	d1ed      	bne.n	8002026 <net_sock_open_wifi+0x3e>
 800204a:	e7f0      	b.n	800202e <net_sock_open_wifi+0x46>
        if (localport != 0)
 800204c:	bb26      	cbnz	r6, 8002098 <net_sock_open_wifi+0xb0>
          if (WIFI_GetHostAddress((char *)hostname, ip_addr) != WIFI_STATUS_OK)
 800204e:	a902      	add	r1, sp, #8
 8002050:	4640      	mov	r0, r8
 8002052:	f002 ff17 	bl	8004e84 <WIFI_GetHostAddress>
 8002056:	4601      	mov	r1, r0
 8002058:	b130      	cbz	r0, 8002068 <net_sock_open_wifi+0x80>
            msg_info("The address of %s could not be resolved.\n", hostname);
 800205a:	4641      	mov	r1, r8
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <net_sock_open_wifi+0xb8>)
 800205e:	f021 faef 	bl	8023640 <iprintf>
 8002062:	e7ea      	b.n	800203a <net_sock_open_wifi+0x52>
        sock->localport = localport;
 8002064:	636e      	str	r6, [r5, #52]	; 0x34
        proto = WIFI_UDP_PROTOCOL;
 8002066:	2101      	movs	r1, #1
      if( WIFI_STATUS_OK != WIFI_OpenClientConnection((uint32_t) sock->underlying_sock_ctxt,
 8002068:	b2b6      	uxth	r6, r6
 800206a:	b2bf      	uxth	r7, r7
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <net_sock_open_wifi+0xbc>)
 800206e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002070:	9601      	str	r6, [sp, #4]
 8002072:	9700      	str	r7, [sp, #0]
 8002074:	ab02      	add	r3, sp, #8
 8002076:	f002 ff11 	bl	8004e9c <WIFI_OpenClientConnection>
 800207a:	2800      	cmp	r0, #0
 800207c:	d0df      	beq.n	800203e <net_sock_open_wifi+0x56>
        msg_error("Failed opening the underlying Wifi socket %d.\n", (int) sock->underlying_sock_ctxt);
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <net_sock_open_wifi+0xc0>)
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <net_sock_open_wifi+0xc4>)
 8002082:	22c9      	movs	r2, #201	; 0xc9
 8002084:	f021 fadc 	bl	8023640 <iprintf>
 8002088:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800208a:	4809      	ldr	r0, [pc, #36]	; (80020b0 <net_sock_open_wifi+0xc8>)
 800208c:	f021 fad8 	bl	8023640 <iprintf>
        sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	6328      	str	r0, [r5, #48]	; 0x30
        rc = NET_ERR;
 8002096:	e7d2      	b.n	800203e <net_sock_open_wifi+0x56>
          rc = NET_PARAM;
 8002098:	f06f 0001 	mvn.w	r0, #1
 800209c:	e7cf      	b.n	800203e <net_sock_open_wifi+0x56>
 800209e:	bf00      	nop
 80020a0:	0802e26a 	.word	0x0802e26a
 80020a4:	080303e5 	.word	0x080303e5
 80020a8:	080282c0 	.word	0x080282c0
 80020ac:	0802d9c5 	.word	0x0802d9c5
 80020b0:	0802e294 	.word	0x0802e294

080020b4 <net_sock_recv_tcp_wifi>:
{
 80020b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020b8:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 80020bc:	f04f 0300 	mov.w	r3, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020c0:	4614      	mov	r4, r2
{
 80020c2:	4689      	mov	r9, r1
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020c4:	bf28      	it	cs
 80020c6:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80020ca:	4605      	mov	r5, r0
 80020cc:	4616      	mov	r6, r2
  uint16_t read = 0;
 80020ce:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint32_t start_time = HAL_GetTick();
 80020d2:	f006 fd69 	bl	8008ba8 <HAL_GetTick>
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80020d6:	b2a4      	uxth	r4, r4
  uint32_t start_time = HAL_GetTick();
 80020d8:	4682      	mov	sl, r0
  uint8_t * tmp_buf = buf;
 80020da:	46c8      	mov	r8, r9
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80020dc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80020e0:	bb4b      	cbnz	r3, 8002136 <net_sock_recv_tcp_wifi+0x82>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80020e2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80020e6:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80020ea:	bb83      	cbnz	r3, 800214e <net_sock_recv_tcp_wifi+0x9a>
 80020ec:	2301      	movs	r3, #1
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4622      	mov	r2, r4
 80020f2:	f10d 030e 	add.w	r3, sp, #14
 80020f6:	4641      	mov	r1, r8
 80020f8:	f002 ff30 	bl	8004f5c <WIFI_ReceiveData>
    if (status != WIFI_STATUS_OK)
 80020fc:	4607      	mov	r7, r0
 80020fe:	b340      	cbz	r0, 8002152 <net_sock_recv_tcp_wifi+0x9e>
      msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 8002100:	4927      	ldr	r1, [pc, #156]	; (80021a0 <net_sock_recv_tcp_wifi+0xec>)
 8002102:	4828      	ldr	r0, [pc, #160]	; (80021a4 <net_sock_recv_tcp_wifi+0xf0>)
 8002104:	22f2      	movs	r2, #242	; 0xf2
 8002106:	f021 fa9b 	bl	8023640 <iprintf>
 800210a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800210e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4639      	mov	r1, r7
 8002114:	4623      	mov	r3, r4
 8002116:	4824      	ldr	r0, [pc, #144]	; (80021a8 <net_sock_recv_tcp_wifi+0xf4>)
 8002118:	f021 fa92 	bl	8023640 <iprintf>
      msg_error("The port is likely to have been closed by the server.\n")
 800211c:	4920      	ldr	r1, [pc, #128]	; (80021a0 <net_sock_recv_tcp_wifi+0xec>)
 800211e:	4821      	ldr	r0, [pc, #132]	; (80021a4 <net_sock_recv_tcp_wifi+0xf0>)
 8002120:	22f4      	movs	r2, #244	; 0xf4
 8002122:	f021 fa8d 	bl	8023640 <iprintf>
 8002126:	4821      	ldr	r0, [pc, #132]	; (80021ac <net_sock_recv_tcp_wifi+0xf8>)
 8002128:	f021 fb26 	bl	8023778 <puts>
      rc = NET_EOF;
 800212c:	f06f 0003 	mvn.w	r0, #3
}
 8002130:	b004      	add	sp, #16
 8002132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8002136:	f006 fd37 	bl	8008ba8 <HAL_GetTick>
 800213a:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 800213c:	4601      	mov	r1, r0
 800213e:	4650      	mov	r0, sl
 8002140:	f7ff ff34 	bl	8001fac <net_timeout_left_ms>
 8002144:	2800      	cmp	r0, #0
 8002146:	dccc      	bgt.n	80020e2 <net_sock_recv_tcp_wifi+0x2e>
      rc = NET_TIMEOUT;
 8002148:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : tmp_buf - buf;
 800214c:	e7f0      	b.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800214e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8002150:	e7cd      	b.n	80020ee <net_sock_recv_tcp_wifi+0x3a>
      if (read > tmp_len)
 8002152:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8002156:	42a2      	cmp	r2, r4
 8002158:	d90d      	bls.n	8002176 <net_sock_recv_tcp_wifi+0xc2>
        msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 800215a:	4911      	ldr	r1, [pc, #68]	; (80021a0 <net_sock_recv_tcp_wifi+0xec>)
 800215c:	4811      	ldr	r0, [pc, #68]	; (80021a4 <net_sock_recv_tcp_wifi+0xf0>)
 800215e:	22fc      	movs	r2, #252	; 0xfc
 8002160:	f021 fa6e 	bl	8023640 <iprintf>
 8002164:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <net_sock_recv_tcp_wifi+0xfc>)
 800216a:	4622      	mov	r2, r4
 800216c:	f021 fa68 	bl	8023640 <iprintf>
        rc = NET_ERR;
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	e7dc      	b.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
      tmp_buf += read;
 8002176:	4490      	add	r8, r2
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8002178:	eba8 0009 	sub.w	r0, r8, r9
 800217c:	42b0      	cmp	r0, r6
 800217e:	d00d      	beq.n	800219c <net_sock_recv_tcp_wifi+0xe8>
 8002180:	1a34      	subs	r4, r6, r0
 8002182:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8002186:	bf28      	it	cs
 8002188:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 800218c:	b2a4      	uxth	r4, r4
  } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 800218e:	2a00      	cmp	r2, #0
 8002190:	d1ce      	bne.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
 8002192:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 8002196:	2a00      	cmp	r2, #0
 8002198:	d1a0      	bne.n	80020dc <net_sock_recv_tcp_wifi+0x28>
 800219a:	e7c9      	b.n	8002130 <net_sock_recv_tcp_wifi+0x7c>
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 800219c:	463c      	mov	r4, r7
 800219e:	e7f6      	b.n	800218e <net_sock_recv_tcp_wifi+0xda>
 80021a0:	080282d3 	.word	0x080282d3
 80021a4:	0802d9c5 	.word	0x0802d9c5
 80021a8:	0802e2c3 	.word	0x0802e2c3
 80021ac:	0802e31c 	.word	0x0802e31c
 80021b0:	0802e352 	.word	0x0802e352

080021b4 <net_sock_recvfrom_udp_wifi>:
{
 80021b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b8:	ed2d 8b02 	vpush	{d8}
 80021bc:	b089      	sub	sp, #36	; 0x24
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021be:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
  uint16_t read = 0;
 80021c2:	f04f 0700 	mov.w	r7, #0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021c6:	4614      	mov	r4, r2
{
 80021c8:	4605      	mov	r5, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021ca:	bf28      	it	cs
 80021cc:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
{
 80021d0:	9104      	str	r1, [sp, #16]
 80021d2:	4690      	mov	r8, r2
 80021d4:	469b      	mov	fp, r3
  uint16_t read = 0;
 80021d6:	f8ad 7018 	strh.w	r7, [sp, #24]
  uint32_t start_time = HAL_GetTick();
 80021da:	f006 fce5 	bl	8008ba8 <HAL_GetTick>
  uint8_t * tmp_buf = buf;
 80021de:	f8dd a010 	ldr.w	sl, [sp, #16]
  uint32_t start_time = HAL_GetTick();
 80021e2:	ee08 0a10 	vmov	s16, r0
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80021e6:	b2a4      	uxth	r4, r4
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80021e8:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
      uint16_t port = 0;
 80021ec:	f8ad 701a 	strh.w	r7, [sp, #26]
      uint8_t ip[4] = { 0, 0, 0, 0 };
 80021f0:	9707      	str	r7, [sp, #28]
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d133      	bne.n	800225e <net_sock_recvfrom_udp_wifi+0xaa>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80021f6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80021fa:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d13a      	bne.n	8002278 <net_sock_recvfrom_udp_wifi+0xc4>
 8002202:	2301      	movs	r3, #1
 8002204:	f10d 021a 	add.w	r2, sp, #26
 8002208:	9202      	str	r2, [sp, #8]
 800220a:	aa07      	add	r2, sp, #28
 800220c:	e9cd 3200 	strd	r3, r2, [sp]
 8002210:	4651      	mov	r1, sl
 8002212:	ab06      	add	r3, sp, #24
 8002214:	4622      	mov	r2, r4
 8002216:	f002 feb3 	bl	8004f80 <WIFI_ReceiveDataFrom>
      if (status != WIFI_STATUS_OK)
 800221a:	4681      	mov	r9, r0
 800221c:	b370      	cbz	r0, 800227c <net_sock_recvfrom_udp_wifi+0xc8>
        msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 800221e:	4935      	ldr	r1, [pc, #212]	; (80022f4 <net_sock_recvfrom_udp_wifi+0x140>)
 8002220:	4835      	ldr	r0, [pc, #212]	; (80022f8 <net_sock_recvfrom_udp_wifi+0x144>)
 8002222:	f44f 7293 	mov.w	r2, #294	; 0x126
 8002226:	f021 fa0b 	bl	8023640 <iprintf>
 800222a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800222e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	4649      	mov	r1, r9
 8002234:	4623      	mov	r3, r4
 8002236:	4831      	ldr	r0, [pc, #196]	; (80022fc <net_sock_recvfrom_udp_wifi+0x148>)
 8002238:	f021 fa02 	bl	8023640 <iprintf>
        msg_error("The port is likely to have been closed by the server.\n")
 800223c:	492d      	ldr	r1, [pc, #180]	; (80022f4 <net_sock_recvfrom_udp_wifi+0x140>)
 800223e:	482e      	ldr	r0, [pc, #184]	; (80022f8 <net_sock_recvfrom_udp_wifi+0x144>)
 8002240:	f44f 7294 	mov.w	r2, #296	; 0x128
 8002244:	f021 f9fc 	bl	8023640 <iprintf>
 8002248:	482d      	ldr	r0, [pc, #180]	; (8002300 <net_sock_recvfrom_udp_wifi+0x14c>)
 800224a:	f021 fa95 	bl	8023778 <puts>
        rc = NET_EOF;
 800224e:	f06f 0603 	mvn.w	r6, #3
}
 8002252:	4630      	mov	r0, r6
 8002254:	b009      	add	sp, #36	; 0x24
 8002256:	ecbd 8b02 	vpop	{d8}
 800225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 800225e:	f006 fca3 	bl	8008ba8 <HAL_GetTick>
 8002262:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 8002264:	4601      	mov	r1, r0
 8002266:	ee18 0a10 	vmov	r0, s16
 800226a:	f7ff fe9f 	bl	8001fac <net_timeout_left_ms>
 800226e:	2800      	cmp	r0, #0
 8002270:	dcc1      	bgt.n	80021f6 <net_sock_recvfrom_udp_wifi+0x42>
        rc = NET_TIMEOUT;
 8002272:	f06f 0602 	mvn.w	r6, #2
 8002276:	e7ec      	b.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8002278:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800227a:	e7c3      	b.n	8002204 <net_sock_recvfrom_udp_wifi+0x50>
        if (read > tmp_len)
 800227c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8002280:	42a3      	cmp	r3, r4
 8002282:	d90e      	bls.n	80022a2 <net_sock_recvfrom_udp_wifi+0xee>
          msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8002284:	491b      	ldr	r1, [pc, #108]	; (80022f4 <net_sock_recvfrom_udp_wifi+0x140>)
 8002286:	481c      	ldr	r0, [pc, #112]	; (80022f8 <net_sock_recvfrom_udp_wifi+0x144>)
 8002288:	f44f 7298 	mov.w	r2, #304	; 0x130
 800228c:	f021 f9d8 	bl	8023640 <iprintf>
 8002290:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8002294:	481b      	ldr	r0, [pc, #108]	; (8002304 <net_sock_recvfrom_udp_wifi+0x150>)
 8002296:	4622      	mov	r2, r4
 8002298:	f021 f9d2 	bl	8023640 <iprintf>
          rc = NET_ERR;
 800229c:	f04f 36ff 	mov.w	r6, #4294967295
 80022a0:	e7d7      	b.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022a2:	9a04      	ldr	r2, [sp, #16]
        tmp_buf += read;
 80022a4:	449a      	add	sl, r3
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022a6:	ebaa 0602 	sub.w	r6, sl, r2
 80022aa:	4546      	cmp	r6, r8
 80022ac:	d01f      	beq.n	80022ee <net_sock_recvfrom_udp_wifi+0x13a>
 80022ae:	eba8 0406 	sub.w	r4, r8, r6
 80022b2:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 80022b6:	bf28      	it	cs
 80022b8:	f44f 6496 	movcs.w	r4, #1200	; 0x4b0
 80022bc:	b2a4      	uxth	r4, r4
      remoteaddress->ipv = NET_IP_V4;
 80022be:	4658      	mov	r0, fp
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 80022c0:	2210      	movs	r2, #16
      remoteaddress->ipv = NET_IP_V4;
 80022c2:	f800 7b01 	strb.w	r7, [r0], #1
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 80022c6:	21ff      	movs	r1, #255	; 0xff
 80022c8:	9305      	str	r3, [sp, #20]
 80022ca:	f020 f8b5 	bl	8022438 <memset>
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022ce:	9a07      	ldr	r2, [sp, #28]
      *remoteport = port;
 80022d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
      memcpy(&remoteaddress->ip[12], ip, 4);
 80022d2:	f8cb 200d 	str.w	r2, [fp, #13]
      *remoteport = port;
 80022d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80022da:	601a      	str	r2, [r3, #0]
    } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 80022dc:	9b05      	ldr	r3, [sp, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1b7      	bne.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
 80022e2:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f47f af7e 	bne.w	80021e8 <net_sock_recvfrom_udp_wifi+0x34>
 80022ec:	e7b1      	b.n	8002252 <net_sock_recvfrom_udp_wifi+0x9e>
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 80022ee:	4604      	mov	r4, r0
 80022f0:	e7e5      	b.n	80022be <net_sock_recvfrom_udp_wifi+0x10a>
 80022f2:	bf00      	nop
 80022f4:	080282ea 	.word	0x080282ea
 80022f8:	0802d9c5 	.word	0x0802d9c5
 80022fc:	0802e2c3 	.word	0x0802e2c3
 8002300:	0802e31c 	.word	0x0802e31c
 8002304:	0802e352 	.word	0x0802e352

08002308 <net_sock_send_tcp_wifi>:
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b085      	sub	sp, #20
  uint16_t sent = 0;
 800230c:	2300      	movs	r3, #0
{
 800230e:	4615      	mov	r5, r2
 8002310:	4604      	mov	r4, r0
 8002312:	460f      	mov	r7, r1
  uint16_t sent = 0;
 8002314:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint32_t start_time = HAL_GetTick();
 8002318:	f006 fc46 	bl	8008ba8 <HAL_GetTick>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800231c:	b2ad      	uxth	r5, r5
  uint32_t start_time = HAL_GetTick();
 800231e:	4606      	mov	r6, r0
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 8002320:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002324:	b9d3      	cbnz	r3, 800235c <net_sock_send_tcp_wifi+0x54>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002326:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800232a:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 800232e:	bb0b      	cbnz	r3, 8002374 <net_sock_send_tcp_wifi+0x6c>
 8002330:	2301      	movs	r3, #1
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	462a      	mov	r2, r5
 8002336:	f10d 030e 	add.w	r3, sp, #14
 800233a:	4639      	mov	r1, r7
 800233c:	f002 fde6 	bl	8004f0c <WIFI_SendData>
    if (status !=  WIFI_STATUS_OK)
 8002340:	b1d0      	cbz	r0, 8002378 <net_sock_send_tcp_wifi+0x70>
      msg_error("Send failed.\n");
 8002342:	4912      	ldr	r1, [pc, #72]	; (800238c <net_sock_send_tcp_wifi+0x84>)
 8002344:	4812      	ldr	r0, [pc, #72]	; (8002390 <net_sock_send_tcp_wifi+0x88>)
 8002346:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800234a:	f021 f979 	bl	8023640 <iprintf>
 800234e:	4811      	ldr	r0, [pc, #68]	; (8002394 <net_sock_send_tcp_wifi+0x8c>)
 8002350:	f021 fa12 	bl	8023778 <puts>
      rc = NET_ERR;
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002358:	b005      	add	sp, #20
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 800235c:	f006 fc24 	bl	8008ba8 <HAL_GetTick>
 8002360:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002362:	4601      	mov	r1, r0
 8002364:	4630      	mov	r0, r6
 8002366:	f7ff fe21 	bl	8001fac <net_timeout_left_ms>
 800236a:	2800      	cmp	r0, #0
 800236c:	dcdb      	bgt.n	8002326 <net_sock_send_tcp_wifi+0x1e>
      rc = NET_TIMEOUT;
 800236e:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002372:	e7f1      	b.n	8002358 <net_sock_send_tcp_wifi+0x50>
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002374:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002376:	e7dc      	b.n	8002332 <net_sock_send_tcp_wifi+0x2a>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8002378:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800237c:	2800      	cmp	r0, #0
 800237e:	d1eb      	bne.n	8002358 <net_sock_send_tcp_wifi+0x50>
 8002380:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8002384:	2a00      	cmp	r2, #0
 8002386:	d1cb      	bne.n	8002320 <net_sock_send_tcp_wifi+0x18>
 8002388:	e7e6      	b.n	8002358 <net_sock_send_tcp_wifi+0x50>
 800238a:	bf00      	nop
 800238c:	08028305 	.word	0x08028305
 8002390:	0802d9c5 	.word	0x0802d9c5
 8002394:	0802e398 	.word	0x0802e398

08002398 <net_sock_sendto_udp_wifi>:
{
 8002398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	461d      	mov	r5, r3
  uint16_t sent = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8ad 3012 	strh.w	r3, [sp, #18]
{
 80023a6:	4604      	mov	r4, r0
 80023a8:	4688      	mov	r8, r1
 80023aa:	4616      	mov	r6, r2
  uint32_t start_time = HAL_GetTick();
 80023ac:	f006 fbfc 	bl	8008ba8 <HAL_GetTick>
  if (remoteaddress->ipv != NET_IP_V4)
 80023b0:	782b      	ldrb	r3, [r5, #0]
  uint32_t start_time = HAL_GetTick();
 80023b2:	4607      	mov	r7, r0
  if (remoteaddress->ipv != NET_IP_V4)
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d147      	bne.n	8002448 <net_sock_sendto_udp_wifi+0xb0>
    ip_addr[i] = remoteaddress->ip[12+i];
 80023b8:	7b6b      	ldrb	r3, [r5, #13]
 80023ba:	f88d 3014 	strb.w	r3, [sp, #20]
 80023be:	7bab      	ldrb	r3, [r5, #14]
 80023c0:	f88d 3015 	strb.w	r3, [sp, #21]
 80023c4:	7beb      	ldrb	r3, [r5, #15]
 80023c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80023ca:	7c2b      	ldrb	r3, [r5, #16]
 80023cc:	f88d 3017 	strb.w	r3, [sp, #23]
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023d0:	b2b6      	uxth	r6, r6
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80023d2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023d6:	bb03      	cbnz	r3, 800241a <net_sock_sendto_udp_wifi+0x82>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 80023d8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80023dc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80023e0:	bb3b      	cbnz	r3, 8002432 <net_sock_sendto_udp_wifi+0x9a>
 80023e2:	2301      	movs	r3, #1
 80023e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80023e6:	b292      	uxth	r2, r2
 80023e8:	9202      	str	r2, [sp, #8]
 80023ea:	aa05      	add	r2, sp, #20
 80023ec:	e9cd 3200 	strd	r3, r2, [sp]
 80023f0:	4641      	mov	r1, r8
 80023f2:	f10d 0312 	add.w	r3, sp, #18
 80023f6:	4632      	mov	r2, r6
 80023f8:	f002 fd9a 	bl	8004f30 <WIFI_SendDataTo>
    if (status !=  WIFI_STATUS_OK)
 80023fc:	b1d8      	cbz	r0, 8002436 <net_sock_sendto_udp_wifi+0x9e>
      msg_error("Send failed.\n");
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <net_sock_sendto_udp_wifi+0xb8>)
 8002400:	4814      	ldr	r0, [pc, #80]	; (8002454 <net_sock_sendto_udp_wifi+0xbc>)
 8002402:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002406:	f021 f91b 	bl	8023640 <iprintf>
 800240a:	4813      	ldr	r0, [pc, #76]	; (8002458 <net_sock_sendto_udp_wifi+0xc0>)
 800240c:	f021 f9b4 	bl	8023778 <puts>
      rc = NET_ERR;
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002414:	b006      	add	sp, #24
 8002416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 800241a:	f006 fbc5 	bl	8008ba8 <HAL_GetTick>
 800241e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002420:	4601      	mov	r1, r0
 8002422:	4638      	mov	r0, r7
 8002424:	f7ff fdc2 	bl	8001fac <net_timeout_left_ms>
 8002428:	2800      	cmp	r0, #0
 800242a:	dcd5      	bgt.n	80023d8 <net_sock_sendto_udp_wifi+0x40>
      rc = NET_TIMEOUT;
 800242c:	f06f 0002 	mvn.w	r0, #2
 8002430:	e7f0      	b.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8002432:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002434:	e7d6      	b.n	80023e4 <net_sock_sendto_udp_wifi+0x4c>
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8002436:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 800243a:	2800      	cmp	r0, #0
 800243c:	d1ea      	bne.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
 800243e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8002442:	2a00      	cmp	r2, #0
 8002444:	d1c5      	bne.n	80023d2 <net_sock_sendto_udp_wifi+0x3a>
 8002446:	e7e5      	b.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
    return NET_PARAM;
 8002448:	f06f 0001 	mvn.w	r0, #1
 800244c:	e7e2      	b.n	8002414 <net_sock_sendto_udp_wifi+0x7c>
 800244e:	bf00      	nop
 8002450:	0802831c 	.word	0x0802831c
 8002454:	0802d9c5 	.word	0x0802d9c5
 8002458:	0802e398 	.word	0x0802e398

0800245c <net_sock_close_tcp_wifi>:
{
 800245c:	b510      	push	{r4, lr}
 800245e:	4604      	mov	r4, r0
  WIFI_Status_t status = WIFI_CloseClientConnection((uint8_t) ((uint32_t)sock->underlying_sock_ctxt && 0xFF));
 8002460:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002462:	3800      	subs	r0, #0
 8002464:	bf18      	it	ne
 8002466:	2001      	movne	r0, #1
 8002468:	f002 fd40 	bl	8004eec <WIFI_CloseClientConnection>
  if (status == WIFI_STATUS_OK)
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	b908      	cbnz	r0, 8002476 <net_sock_close_tcp_wifi+0x1a>
    sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002472:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002474:	bd10      	pop	{r4, pc}
  int rc = NET_ERR;
 8002476:	4618      	mov	r0, r3
  return rc;
 8002478:	e7fc      	b.n	8002474 <net_sock_close_tcp_wifi+0x18>
	...

0800247c <net_sock_create_wifi>:
{
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002480:	2038      	movs	r0, #56	; 0x38
{
 8002482:	460f      	mov	r7, r1
 8002484:	4616      	mov	r6, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002486:	f01f ff91 	bl	80223ac <malloc>
  if (sock == NULL)
 800248a:	4604      	mov	r4, r0
 800248c:	b950      	cbnz	r0, 80024a4 <net_sock_create_wifi+0x28>
    msg_error("net_sock_create allocation failed.\n");
 800248e:	491c      	ldr	r1, [pc, #112]	; (8002500 <net_sock_create_wifi+0x84>)
 8002490:	481c      	ldr	r0, [pc, #112]	; (8002504 <net_sock_create_wifi+0x88>)
 8002492:	2259      	movs	r2, #89	; 0x59
 8002494:	f021 f8d4 	bl	8023640 <iprintf>
 8002498:	481b      	ldr	r0, [pc, #108]	; (8002508 <net_sock_create_wifi+0x8c>)
 800249a:	f021 f96d 	bl	8023778 <puts>
    rc = NET_ERR;
 800249e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80024a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 80024a4:	222c      	movs	r2, #44	; 0x2c
 80024a6:	2100      	movs	r1, #0
 80024a8:	300c      	adds	r0, #12
 80024aa:	f01f ffc5 	bl	8022438 <memset>
    sock->next = ctxt->sock_list;
 80024ae:	686b      	ldr	r3, [r5, #4]
 80024b0:	6063      	str	r3, [r4, #4]
    switch(proto)
 80024b2:	2e01      	cmp	r6, #1
    sock->methods.open      = (net_sock_open_wifi);
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <net_sock_create_wifi+0x90>)
    sock->net = ctxt;
 80024b6:	6025      	str	r5, [r4, #0]
    sock->methods.open      = (net_sock_open_wifi);
 80024b8:	60a3      	str	r3, [r4, #8]
    switch(proto)
 80024ba:	d007      	beq.n	80024cc <net_sock_create_wifi+0x50>
 80024bc:	2e03      	cmp	r6, #3
 80024be:	d01a      	beq.n	80024f6 <net_sock_create_wifi+0x7a>
        free(sock);
 80024c0:	4620      	mov	r0, r4
 80024c2:	f01f ff7b 	bl	80223bc <free>
        return NET_PARAM;
 80024c6:	f06f 0001 	mvn.w	r0, #1
 80024ca:	e7ea      	b.n	80024a2 <net_sock_create_wifi+0x26>
        sock->methods.recv      = (net_sock_recv_tcp_wifi);
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <net_sock_create_wifi+0x94>)
 80024ce:	60e3      	str	r3, [r4, #12]
        sock->methods.send      = (net_sock_send_tcp_wifi);
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <net_sock_create_wifi+0x98>)
 80024d2:	6163      	str	r3, [r4, #20]
    sock->methods.close     = (net_sock_close_tcp_wifi);
 80024d4:	4b10      	ldr	r3, [pc, #64]	; (8002518 <net_sock_create_wifi+0x9c>)
 80024d6:	61e3      	str	r3, [r4, #28]
    sock->methods.destroy   = (net_sock_destroy_tcp_wifi);
 80024d8:	4b10      	ldr	r3, [pc, #64]	; (800251c <net_sock_create_wifi+0xa0>)
 80024da:	6223      	str	r3, [r4, #32]
    sock->blocking          = NET_DEFAULT_BLOCKING;
 80024dc:	2301      	movs	r3, #1
 80024de:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80024e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    ctxt->sock_list         = sock; /* Insert at the head of the list */
 80024e6:	606c      	str	r4, [r5, #4]
    sock->proto             = proto;
 80024e8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80024ec:	84e3      	strh	r3, [r4, #38]	; 0x26
    sock->write_timeout     = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 80024ee:	8523      	strh	r3, [r4, #40]	; 0x28
    *sockhnd = (net_sockhnd_t) sock;
 80024f0:	603c      	str	r4, [r7, #0]
    rc = NET_OK;
 80024f2:	2000      	movs	r0, #0
 80024f4:	e7d5      	b.n	80024a2 <net_sock_create_wifi+0x26>
        sock->methods.recvfrom  = (net_sock_recvfrom_udp_wifi);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <net_sock_create_wifi+0xa4>)
 80024f8:	6123      	str	r3, [r4, #16]
        sock->methods.sendto    = (net_sock_sendto_udp_wifi);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <net_sock_create_wifi+0xa8>)
 80024fc:	61a3      	str	r3, [r4, #24]
        break;
 80024fe:	e7e9      	b.n	80024d4 <net_sock_create_wifi+0x58>
 8002500:	08028335 	.word	0x08028335
 8002504:	0802d9c5 	.word	0x0802d9c5
 8002508:	0802e3a5 	.word	0x0802e3a5
 800250c:	08001fe9 	.word	0x08001fe9
 8002510:	080020b5 	.word	0x080020b5
 8002514:	08002309 	.word	0x08002309
 8002518:	0800245d 	.word	0x0800245d
 800251c:	08001fbf 	.word	0x08001fbf
 8002520:	080021b5 	.word	0x080021b5
 8002524:	08002399 	.word	0x08002399

08002528 <my_debug>:
  ((void) level);
#if defined ( __GNUC__ ) && !defined(__CC_ARM) && defined (HAS_RTOS)
  ((void) ctx);
  mbedtls_printf("%s:%04d: %s\n", file, line, str );
#else
  mbedtls_fprintf((FILE *) ctx, "%s:%04d: %s\n", file, line, str );
 8002528:	4901      	ldr	r1, [pc, #4]	; (8002530 <my_debug+0x8>)
 800252a:	f01f be21 	b.w	8022170 <fiprintf>
 800252e:	bf00      	nop
 8002530:	0802e3c8 	.word	0x0802e3c8

08002534 <internal_close>:
#endif
}


static void internal_close(net_sock_ctxt_t * sock)
{
 8002534:	b510      	push	{r4, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002536:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	6303      	str	r3, [r0, #48]	; 0x30
 
  mbedtls_x509_crt_free(&tlsData->clicert);
 800253e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8002542:	f01e fe57 	bl	80211f4 <mbedtls_x509_crt_free>
  mbedtls_pk_free(&tlsData->pkey);
 8002546:	f204 7014 	addw	r0, r4, #1812	; 0x714
 800254a:	f013 fa92 	bl	8015a72 <mbedtls_pk_free>
  mbedtls_x509_crt_free(&tlsData->cacert);
 800254e:	f504 706e 	add.w	r0, r4, #952	; 0x3b8
 8002552:	f01e fe4f 	bl	80211f4 <mbedtls_x509_crt_free>
  mbedtls_x509_crl_free(&tlsData->cacrl);
 8002556:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 800255a:	f01d fbb5 	bl	801fcc8 <mbedtls_x509_crl_free>
  mbedtls_ssl_free(&tlsData->ssl);
 800255e:	f504 701a 	add.w	r0, r4, #616	; 0x268
 8002562:	f01c fb73 	bl	801ec4c <mbedtls_ssl_free>
  mbedtls_ssl_config_free(&tlsData->conf);
 8002566:	f504 7051 	add.w	r0, r4, #836	; 0x344
 800256a:	f01c fc3d 	bl	801ede8 <mbedtls_ssl_config_free>
  mbedtls_ctr_drbg_free(&tlsData->ctr_drbg);
 800256e:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8002572:	f00e f920 	bl	80107b6 <mbedtls_ctr_drbg_free>
  mbedtls_entropy_free(&tlsData->entropy);
 8002576:	f104 0020 	add.w	r0, r4, #32
  
  return;
}
 800257a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mbedtls_entropy_free(&tlsData->entropy);
 800257e:	f011 bce3 	b.w	8013f48 <mbedtls_entropy_free>
	...

08002584 <net_sock_open_mbedtls>:
{
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	ed2d 8b02 	vpush	{d8}
  net_tls_data_t * tlsData = sock->tlsData;
 800258c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 800258e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  mbedtls_ssl_config_init(&tlsData->conf);
 8002592:	f504 7651 	add.w	r6, r4, #836	; 0x344
{
 8002596:	4605      	mov	r5, r0
 8002598:	460f      	mov	r7, r1
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 800259a:	48ac      	ldr	r0, [pc, #688]	; (800284c <net_sock_open_mbedtls+0x2c8>)
 800259c:	49ac      	ldr	r1, [pc, #688]	; (8002850 <net_sock_open_mbedtls+0x2cc>)
{
 800259e:	ee08 3a10 	vmov	s16, r3
 80025a2:	4690      	mov	r8, r2
  mbedtls_platform_set_calloc_free(heap_alloc, heap_free);  /* Common to all sockets. */
 80025a4:	f014 f850 	bl	8016648 <mbedtls_platform_set_calloc_free>
  mbedtls_ssl_config_init(&tlsData->conf);
 80025a8:	4630      	mov	r0, r6
 80025aa:	f01c fbbf 	bl	801ed2c <mbedtls_ssl_config_init>
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 80025ae:	4ba9      	ldr	r3, [pc, #676]	; (8002854 <net_sock_open_mbedtls+0x2d0>)
 80025b0:	49a9      	ldr	r1, [pc, #676]	; (8002858 <net_sock_open_mbedtls+0x2d4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4630      	mov	r0, r6
 80025b6:	689a      	ldr	r2, [r3, #8]
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 80025b8:	f504 7a94 	add.w	sl, r4, #296	; 0x128
  mbedtls_ssl_conf_dbg(&tlsData->conf, my_debug, stdout);
 80025bc:	f01b fe3c 	bl	801e238 <mbedtls_ssl_conf_dbg>
  mbedtls_x509_crt_init(&tlsData->cacert);
 80025c0:	f504 796e 	add.w	r9, r4, #952	; 0x3b8
  mbedtls_ctr_drbg_init(&tlsData->ctr_drbg);
 80025c4:	4650      	mov	r0, sl
 80025c6:	f00e f8f1 	bl	80107ac <mbedtls_ctr_drbg_init>
  mbedtls_x509_crt_init(&tlsData->cacert);
 80025ca:	4648      	mov	r0, r9
 80025cc:	f01e fe0c 	bl	80211e8 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_cert != NULL)
 80025d0:	68a3      	ldr	r3, [r4, #8]
 80025d2:	b11b      	cbz	r3, 80025dc <net_sock_open_mbedtls+0x58>
    mbedtls_x509_crt_init(&tlsData->clicert);
 80025d4:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80025d8:	f01e fe06 	bl	80211e8 <mbedtls_x509_crt_init>
  if (tlsData->tls_dev_key != NULL)
 80025dc:	68e3      	ldr	r3, [r4, #12]
 80025de:	b11b      	cbz	r3, 80025e8 <net_sock_open_mbedtls+0x64>
    mbedtls_pk_init(&tlsData->pkey);
 80025e0:	f204 7014 	addw	r0, r4, #1812	; 0x714
 80025e4:	f013 fa40 	bl	8015a68 <mbedtls_pk_init>
  mbedtls_debug_set_threshold(1);
 80025e8:	2001      	movs	r0, #1
  mbedtls_entropy_init(&tlsData->entropy);
 80025ea:	f104 0b20 	add.w	fp, r4, #32
  mbedtls_debug_set_threshold(1);
 80025ee:	f00e fa67 	bl	8010ac0 <mbedtls_debug_set_threshold>
  mbedtls_entropy_init(&tlsData->entropy);
 80025f2:	4658      	mov	r0, fp
 80025f4:	f011 fc84 	bl	8013f00 <mbedtls_entropy_init>
  if( (ret = mbedtls_entropy_add_source(&tlsData->entropy, mbedtls_hardware_poll, (void*)&hrng, 1, MBEDTLS_ENTROPY_SOURCE_STRONG)) != 0 )
 80025f8:	2301      	movs	r3, #1
 80025fa:	4a98      	ldr	r2, [pc, #608]	; (800285c <net_sock_open_mbedtls+0x2d8>)
 80025fc:	4998      	ldr	r1, [pc, #608]	; (8002860 <net_sock_open_mbedtls+0x2dc>)
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	4658      	mov	r0, fp
 8002602:	f011 fcaa 	bl	8013f5a <mbedtls_entropy_add_source>
 8002606:	b1b0      	cbz	r0, 8002636 <net_sock_open_mbedtls+0xb2>
    msg_error( " failed\n  ! mbedtls_entropy_add_source returned -0x%x\n", -ret );
 8002608:	4996      	ldr	r1, [pc, #600]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800260a:	9003      	str	r0, [sp, #12]
 800260c:	2295      	movs	r2, #149	; 0x95
 800260e:	4896      	ldr	r0, [pc, #600]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002610:	f021 f816 	bl	8023640 <iprintf>
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	4895      	ldr	r0, [pc, #596]	; (800286c <net_sock_open_mbedtls+0x2e8>)
 8002618:	4259      	negs	r1, r3
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 800261a:	f021 f811 	bl	8023640 <iprintf>
    internal_close(sock);
 800261e:	4628      	mov	r0, r5
 8002620:	f7ff ff88 	bl	8002534 <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 8002624:	f04f 36ff 	mov.w	r6, #4294967295
}
 8002628:	4630      	mov	r0, r6
 800262a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 800262e:	ecbd 8b02 	vpop	{d8}
 8002632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if( (ret = mbedtls_ctr_drbg_seed(&tlsData->ctr_drbg, mbedtls_entropy_func, &tlsData->entropy, pers, strlen((char const *)pers))) != 0 )
 8002636:	2307      	movs	r3, #7
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	465a      	mov	r2, fp
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <net_sock_open_mbedtls+0x2ec>)
 800263e:	498d      	ldr	r1, [pc, #564]	; (8002874 <net_sock_open_mbedtls+0x2f0>)
 8002640:	4650      	mov	r0, sl
 8002642:	f00e f91e 	bl	8010882 <mbedtls_ctr_drbg_seed>
 8002646:	4683      	mov	fp, r0
 8002648:	b140      	cbz	r0, 800265c <net_sock_open_mbedtls+0xd8>
    msg_error(" failed\n  ! mbedtls_ctr_drbg_seed returned -0x%x\n", -ret);
 800264a:	4986      	ldr	r1, [pc, #536]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800264c:	4886      	ldr	r0, [pc, #536]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800264e:	229b      	movs	r2, #155	; 0x9b
 8002650:	f020 fff6 	bl	8023640 <iprintf>
 8002654:	4888      	ldr	r0, [pc, #544]	; (8002878 <net_sock_open_mbedtls+0x2f4>)
 8002656:	f1cb 0100 	rsb	r1, fp, #0
 800265a:	e7de      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if (tlsData->tls_ca_certs != NULL)
 800265c:	6821      	ldr	r1, [r4, #0]
 800265e:	b199      	cbz	r1, 8002688 <net_sock_open_mbedtls+0x104>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->cacert, (unsigned char const *)tlsData->tls_ca_certs, strlen((char const *) tlsData->tls_ca_certs) + 1)) != 0 )
 8002660:	4608      	mov	r0, r1
 8002662:	9103      	str	r1, [sp, #12]
 8002664:	f7fd fdbe 	bl	80001e4 <strlen>
 8002668:	9903      	ldr	r1, [sp, #12]
 800266a:	1c42      	adds	r2, r0, #1
 800266c:	4648      	mov	r0, r9
 800266e:	f01f f96d 	bl	802194c <mbedtls_x509_crt_parse>
 8002672:	4683      	mov	fp, r0
 8002674:	b140      	cbz	r0, 8002688 <net_sock_open_mbedtls+0x104>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing root cert\n", -ret);
 8002676:	497b      	ldr	r1, [pc, #492]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 8002678:	487b      	ldr	r0, [pc, #492]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800267a:	22a5      	movs	r2, #165	; 0xa5
 800267c:	f020 ffe0 	bl	8023640 <iprintf>
 8002680:	487e      	ldr	r0, [pc, #504]	; (800287c <net_sock_open_mbedtls+0x2f8>)
 8002682:	f1cb 0100 	rsb	r1, fp, #0
 8002686:	e7c8      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if (tlsData->tls_ca_crl != NULL)
 8002688:	6861      	ldr	r1, [r4, #4]
 800268a:	b1a1      	cbz	r1, 80026b6 <net_sock_open_mbedtls+0x132>
    if( (ret = mbedtls_x509_crl_parse(&tlsData->cacrl, (unsigned char const *)tlsData->tls_ca_crl, strlen((char const *) tlsData->tls_ca_crl) + 1)) != 0 )
 800268c:	4608      	mov	r0, r1
 800268e:	9103      	str	r1, [sp, #12]
 8002690:	f7fd fda8 	bl	80001e4 <strlen>
 8002694:	9903      	ldr	r1, [sp, #12]
 8002696:	1c42      	adds	r2, r0, #1
 8002698:	f204 40ec 	addw	r0, r4, #1260	; 0x4ec
 800269c:	f01d fd34 	bl	8020108 <mbedtls_x509_crl_parse>
 80026a0:	4683      	mov	fp, r0
 80026a2:	b140      	cbz	r0, 80026b6 <net_sock_open_mbedtls+0x132>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing the cert revocation list\n", -ret);
 80026a4:	496f      	ldr	r1, [pc, #444]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80026a6:	4870      	ldr	r0, [pc, #448]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80026a8:	22af      	movs	r2, #175	; 0xaf
 80026aa:	f020 ffc9 	bl	8023640 <iprintf>
 80026ae:	4874      	ldr	r0, [pc, #464]	; (8002880 <net_sock_open_mbedtls+0x2fc>)
 80026b0:	f1cb 0100 	rsb	r1, fp, #0
 80026b4:	e7b1      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 80026b6:	68a1      	ldr	r1, [r4, #8]
 80026b8:	b379      	cbz	r1, 800271a <net_sock_open_mbedtls+0x196>
 80026ba:	68e3      	ldr	r3, [r4, #12]
 80026bc:	b36b      	cbz	r3, 800271a <net_sock_open_mbedtls+0x196>
    if( (ret = mbedtls_x509_crt_parse(&tlsData->clicert, (unsigned char const *)tlsData->tls_dev_cert, strlen((char const *)tlsData->tls_dev_cert) + 1)) != 0 )
 80026be:	4608      	mov	r0, r1
 80026c0:	9103      	str	r1, [sp, #12]
 80026c2:	f7fd fd8f 	bl	80001e4 <strlen>
 80026c6:	9903      	ldr	r1, [sp, #12]
 80026c8:	1c42      	adds	r2, r0, #1
 80026ca:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 80026ce:	f01f f93d 	bl	802194c <mbedtls_x509_crt_parse>
 80026d2:	4683      	mov	fp, r0
 80026d4:	b140      	cbz	r0, 80026e8 <net_sock_open_mbedtls+0x164>
      msg_error(" failed\n  !  mbedtls_x509_crt_parse returned -0x%x while parsing device cert\n", -ret);
 80026d6:	4963      	ldr	r1, [pc, #396]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80026d8:	4863      	ldr	r0, [pc, #396]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80026da:	22ba      	movs	r2, #186	; 0xba
 80026dc:	f020 ffb0 	bl	8023640 <iprintf>
 80026e0:	4868      	ldr	r0, [pc, #416]	; (8002884 <net_sock_open_mbedtls+0x300>)
 80026e2:	f1cb 0100 	rsb	r1, fp, #0
 80026e6:	e798      	b.n	800261a <net_sock_open_mbedtls+0x96>
    if( (ret = mbedtls_pk_parse_key(&tlsData->pkey, (unsigned char const *)tlsData->tls_dev_key, strlen((char const *)tlsData->tls_dev_key) + 1,
 80026e8:	68e1      	ldr	r1, [r4, #12]
 80026ea:	9103      	str	r1, [sp, #12]
 80026ec:	4608      	mov	r0, r1
 80026ee:	f7fd fd79 	bl	80001e4 <strlen>
 80026f2:	6963      	ldr	r3, [r4, #20]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	1c42      	adds	r2, r0, #1
 80026f8:	6923      	ldr	r3, [r4, #16]
 80026fa:	9903      	ldr	r1, [sp, #12]
 80026fc:	f204 7014 	addw	r0, r4, #1812	; 0x714
 8002700:	f013 fec0 	bl	8016484 <mbedtls_pk_parse_key>
 8002704:	4683      	mov	fp, r0
 8002706:	b140      	cbz	r0, 800271a <net_sock_open_mbedtls+0x196>
      msg_error(" failed\n  !  mbedtls_pk_parse_key returned -0x%x while parsing private key\n\n", -ret);
 8002708:	4956      	ldr	r1, [pc, #344]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800270a:	4857      	ldr	r0, [pc, #348]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800270c:	22cf      	movs	r2, #207	; 0xcf
 800270e:	f020 ff97 	bl	8023640 <iprintf>
 8002712:	485d      	ldr	r0, [pc, #372]	; (8002888 <net_sock_open_mbedtls+0x304>)
 8002714:	f1cb 0100 	rsb	r1, fp, #0
 8002718:	e77f      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if( (ret = net_sock_create(hnet, &sock->underlying_sock_ctxt, NET_PROTO_TCP)) != NET_OK )
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <net_sock_open_mbedtls+0x308>)
 800271c:	2201      	movs	r2, #1
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8002724:	f7ff fb5a 	bl	8001ddc <net_sock_create>
 8002728:	4603      	mov	r3, r0
 800272a:	b148      	cbz	r0, 8002740 <net_sock_open_mbedtls+0x1bc>
    msg_error(" failed to create a TCP socket  ! net_sock_create returned %d\n", ret);
 800272c:	494d      	ldr	r1, [pc, #308]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800272e:	9003      	str	r0, [sp, #12]
 8002730:	22da      	movs	r2, #218	; 0xda
 8002732:	484d      	ldr	r0, [pc, #308]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002734:	f020 ff84 	bl	8023640 <iprintf>
 8002738:	9b03      	ldr	r3, [sp, #12]
 800273a:	4855      	ldr	r0, [pc, #340]	; (8002890 <net_sock_open_mbedtls+0x30c>)
 800273c:	4619      	mov	r1, r3
 800273e:	e76c      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if( (ret = net_sock_setopt(sock->underlying_sock_ctxt, (sock->blocking == true) ? "sock_blocking" : "sock_noblocking", NULL, 0)) != NET_OK )
 8002740:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8002744:	f8df b168 	ldr.w	fp, [pc, #360]	; 80028b0 <net_sock_open_mbedtls+0x32c>
 8002748:	4602      	mov	r2, r0
 800274a:	4852      	ldr	r0, [pc, #328]	; (8002894 <net_sock_open_mbedtls+0x310>)
 800274c:	2900      	cmp	r1, #0
 800274e:	bf18      	it	ne
 8002750:	4658      	movne	r0, fp
 8002752:	4601      	mov	r1, r0
 8002754:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002756:	f7ff fb6d 	bl	8001e34 <net_sock_setopt>
 800275a:	4603      	mov	r3, r0
 800275c:	b1e8      	cbz	r0, 800279a <net_sock_open_mbedtls+0x216>
    msg_error(" failed setting the %s option.\n", (sock->blocking == true) ? "sock_blocking" : "sock_noblocking");
 800275e:	4941      	ldr	r1, [pc, #260]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 8002760:	4841      	ldr	r0, [pc, #260]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002762:	22e1      	movs	r2, #225	; 0xe1
 8002764:	f020 ff6c 	bl	8023640 <iprintf>
 8002768:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800276c:	4b49      	ldr	r3, [pc, #292]	; (8002894 <net_sock_open_mbedtls+0x310>)
 800276e:	484a      	ldr	r0, [pc, #296]	; (8002898 <net_sock_open_mbedtls+0x314>)
 8002770:	2900      	cmp	r1, #0
 8002772:	bf18      	it	ne
 8002774:	465b      	movne	r3, fp
 8002776:	4619      	mov	r1, r3
 8002778:	f020 ff62 	bl	8023640 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800277c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800277e:	f7ff fc0f 	bl	8001fa0 <net_sock_destroy>
 8002782:	2800      	cmp	r0, #0
 8002784:	f43f af4b 	beq.w	800261e <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 8002788:	22e4      	movs	r2, #228	; 0xe4
 800278a:	4936      	ldr	r1, [pc, #216]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 800278c:	4836      	ldr	r0, [pc, #216]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 800278e:	f020 ff57 	bl	8023640 <iprintf>
 8002792:	4842      	ldr	r0, [pc, #264]	; (800289c <net_sock_open_mbedtls+0x318>)
 8002794:	f020 fff0 	bl	8023778 <puts>
    internal_close(sock);
 8002798:	e741      	b.n	800261e <net_sock_open_mbedtls+0x9a>
  if( (ret = mbedtls_ssl_config_defaults(&tlsData->conf, MBEDTLS_SSL_IS_CLIENT, MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT)) != 0)
 800279a:	4602      	mov	r2, r0
 800279c:	4601      	mov	r1, r0
 800279e:	4630      	mov	r0, r6
 80027a0:	f01c fac8 	bl	801ed34 <mbedtls_ssl_config_defaults>
 80027a4:	4683      	mov	fp, r0
 80027a6:	b140      	cbz	r0, 80027ba <net_sock_open_mbedtls+0x236>
    msg_error(" failed\n  ! mbedtls_ssl_config_defaults returned -0x%x\n\n", -ret);
 80027a8:	492e      	ldr	r1, [pc, #184]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80027aa:	482f      	ldr	r0, [pc, #188]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80027ac:	22ed      	movs	r2, #237	; 0xed
 80027ae:	f020 ff47 	bl	8023640 <iprintf>
 80027b2:	483b      	ldr	r0, [pc, #236]	; (80028a0 <net_sock_open_mbedtls+0x31c>)
 80027b4:	f1cb 0100 	rsb	r1, fp, #0
 80027b8:	e72f      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if(tlsData->tls_srv_verification == true)
 80027ba:	7e23      	ldrb	r3, [r4, #24]
 80027bc:	b33b      	cbz	r3, 800280e <net_sock_open_mbedtls+0x28a>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_REQUIRED);
 80027be:	2102      	movs	r1, #2
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 80027c0:	4630      	mov	r0, r6
 80027c2:	f01b fd2f 	bl	801e224 <mbedtls_ssl_conf_authmode>
  mbedtls_ssl_conf_rng(&tlsData->conf, mbedtls_ctr_drbg_random, &tlsData->ctr_drbg);
 80027c6:	4652      	mov	r2, sl
 80027c8:	4936      	ldr	r1, [pc, #216]	; (80028a4 <net_sock_open_mbedtls+0x320>)
 80027ca:	4630      	mov	r0, r6
 80027cc:	f01b fd31 	bl	801e232 <mbedtls_ssl_conf_rng>
  mbedtls_ssl_conf_ca_chain(&tlsData->conf, &tlsData->cacert, (tlsData->tls_ca_crl != NULL) ? &tlsData->cacrl : NULL);
 80027d0:	6862      	ldr	r2, [r4, #4]
 80027d2:	b10a      	cbz	r2, 80027d8 <net_sock_open_mbedtls+0x254>
 80027d4:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 80027d8:	4649      	mov	r1, r9
 80027da:	4630      	mov	r0, r6
 80027dc:	f01b fd3a 	bl	801e254 <mbedtls_ssl_conf_ca_chain>
  if( (tlsData->tls_dev_cert != NULL) && (tlsData->tls_dev_key != NULL) )
 80027e0:	68a3      	ldr	r3, [r4, #8]
 80027e2:	b1b3      	cbz	r3, 8002812 <net_sock_open_mbedtls+0x28e>
 80027e4:	68e3      	ldr	r3, [r4, #12]
 80027e6:	b1a3      	cbz	r3, 8002812 <net_sock_open_mbedtls+0x28e>
    if( (ret = mbedtls_ssl_conf_own_cert(&tlsData->conf, &tlsData->clicert, &tlsData->pkey)) != 0)
 80027e8:	f204 7214 	addw	r2, r4, #1812	; 0x714
 80027ec:	f504 61bc 	add.w	r1, r4, #1504	; 0x5e0
 80027f0:	4630      	mov	r0, r6
 80027f2:	f01b fd2c 	bl	801e24e <mbedtls_ssl_conf_own_cert>
 80027f6:	4681      	mov	r9, r0
 80027f8:	b158      	cbz	r0, 8002812 <net_sock_open_mbedtls+0x28e>
      msg_error(" failed\n  ! mbedtls_ssl_conf_own_cert returned -0x%x\n\n", -ret);
 80027fa:	491a      	ldr	r1, [pc, #104]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 80027fc:	481a      	ldr	r0, [pc, #104]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 80027fe:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002802:	f020 ff1d 	bl	8023640 <iprintf>
 8002806:	4828      	ldr	r0, [pc, #160]	; (80028a8 <net_sock_open_mbedtls+0x324>)
 8002808:	f1c9 0100 	rsb	r1, r9, #0
 800280c:	e705      	b.n	800261a <net_sock_open_mbedtls+0x96>
    mbedtls_ssl_conf_authmode(&tlsData->conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
 800280e:	2101      	movs	r1, #1
 8002810:	e7d6      	b.n	80027c0 <net_sock_open_mbedtls+0x23c>
  if( (ret = mbedtls_ssl_setup(&tlsData->ssl, &tlsData->conf)) != 0 )
 8002812:	f504 791a 	add.w	r9, r4, #616	; 0x268
 8002816:	4631      	mov	r1, r6
 8002818:	4648      	mov	r0, r9
 800281a:	f01b ff71 	bl	801e700 <mbedtls_ssl_setup>
 800281e:	4682      	mov	sl, r0
 8002820:	2800      	cmp	r0, #0
 8002822:	d047      	beq.n	80028b4 <net_sock_open_mbedtls+0x330>
    msg_error(" failed\n  ! mbedtls_ssl_setup returned -0x%x\n\n", -ret);
 8002824:	490f      	ldr	r1, [pc, #60]	; (8002864 <net_sock_open_mbedtls+0x2e0>)
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <net_sock_open_mbedtls+0x2e4>)
 8002828:	f44f 7288 	mov.w	r2, #272	; 0x110
 800282c:	f020 ff08 	bl	8023640 <iprintf>
 8002830:	481e      	ldr	r0, [pc, #120]	; (80028ac <net_sock_open_mbedtls+0x328>)
 8002832:	f1ca 0100 	rsb	r1, sl, #0
 8002836:	f020 ff03 	bl	8023640 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800283a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800283c:	f7ff fbb0 	bl	8001fa0 <net_sock_destroy>
 8002840:	2800      	cmp	r0, #0
 8002842:	f43f aeec 	beq.w	800261e <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 8002846:	f44f 728a 	mov.w	r2, #276	; 0x114
 800284a:	e79e      	b.n	800278a <net_sock_open_mbedtls+0x206>
 800284c:	08022155 	.word	0x08022155
 8002850:	080223bd 	.word	0x080223bd
 8002854:	200005e4 	.word	0x200005e4
 8002858:	08002529 	.word	0x08002529
 800285c:	200011d4 	.word	0x200011d4
 8002860:	080012e1 	.word	0x080012e1
 8002864:	0802834a 	.word	0x0802834a
 8002868:	0802d9c5 	.word	0x0802d9c5
 800286c:	0802e3d5 	.word	0x0802e3d5
 8002870:	0802e40c 	.word	0x0802e40c
 8002874:	08013f89 	.word	0x08013f89
 8002878:	0802e414 	.word	0x0802e414
 800287c:	0802e446 	.word	0x0802e446
 8002880:	0802e492 	.word	0x0802e492
 8002884:	0802e4ed 	.word	0x0802e4ed
 8002888:	0802e53b 	.word	0x0802e53b
 800288c:	200011e0 	.word	0x200011e0
 8002890:	0802e588 	.word	0x0802e588
 8002894:	0802e247 	.word	0x0802e247
 8002898:	0802e5c7 	.word	0x0802e5c7
 800289c:	0802e5e7 	.word	0x0802e5e7
 80028a0:	0802e605 	.word	0x0802e605
 80028a4:	08010955 	.word	0x08010955
 80028a8:	0802e63e 	.word	0x0802e63e
 80028ac:	0802e675 	.word	0x0802e675
 80028b0:	0802e239 	.word	0x0802e239
  if(tlsData->tls_srv_name != NULL)
 80028b4:	69e1      	ldr	r1, [r4, #28]
 80028b6:	b169      	cbz	r1, 80028d4 <net_sock_open_mbedtls+0x350>
    if( (ret = mbedtls_ssl_set_hostname(&tlsData->ssl, tlsData->tls_srv_name)) != 0 )
 80028b8:	4648      	mov	r0, r9
 80028ba:	f01b fccf 	bl	801e25c <mbedtls_ssl_set_hostname>
 80028be:	4682      	mov	sl, r0
 80028c0:	b140      	cbz	r0, 80028d4 <net_sock_open_mbedtls+0x350>
      msg_error(" failed\n  ! mbedtls_ssl_set_hostname returned %d\n\n", ret);
 80028c2:	4948      	ldr	r1, [pc, #288]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 80028c4:	4848      	ldr	r0, [pc, #288]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 80028c6:	f240 121d 	movw	r2, #285	; 0x11d
 80028ca:	f020 feb9 	bl	8023640 <iprintf>
 80028ce:	4847      	ldr	r0, [pc, #284]	; (80029ec <net_sock_open_mbedtls+0x468>)
 80028d0:	4651      	mov	r1, sl
 80028d2:	e6a2      	b.n	800261a <net_sock_open_mbedtls+0x96>
  if (sock->blocking == true)
 80028d4:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 80028d8:	b353      	cbz	r3, 8002930 <net_sock_open_mbedtls+0x3ac>
    mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 80028da:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 80028dc:	4630      	mov	r0, r6
 80028de:	f01b fcb4 	bl	801e24a <mbedtls_ssl_conf_read_timeout>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, NULL, mbedtls_net_recv_blocking);
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <net_sock_open_mbedtls+0x46c>)
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2300      	movs	r3, #0
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 80028e8:	4a42      	ldr	r2, [pc, #264]	; (80029f4 <net_sock_open_mbedtls+0x470>)
 80028ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80028ec:	4648      	mov	r0, r9
 80028ee:	f01b fca6 	bl	801e23e <mbedtls_ssl_set_bio>
  if( (ret = net_sock_open(sock->underlying_sock_ctxt, hostname, dstport, localport)) != NET_OK )
 80028f2:	ee18 3a10 	vmov	r3, s16
 80028f6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80028f8:	4642      	mov	r2, r8
 80028fa:	4639      	mov	r1, r7
 80028fc:	f7ff fa94 	bl	8001e28 <net_sock_open>
 8002900:	4606      	mov	r6, r0
 8002902:	2800      	cmp	r0, #0
 8002904:	d063      	beq.n	80029ce <net_sock_open_mbedtls+0x44a>
    msg_error(" failed to connect to %s:%d  ! net_sock_open returned %d\n", hostname, dstport, ret);
 8002906:	4937      	ldr	r1, [pc, #220]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002908:	4837      	ldr	r0, [pc, #220]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 800290a:	f240 1231 	movw	r2, #305	; 0x131
 800290e:	f020 fe97 	bl	8023640 <iprintf>
 8002912:	4839      	ldr	r0, [pc, #228]	; (80029f8 <net_sock_open_mbedtls+0x474>)
 8002914:	4633      	mov	r3, r6
 8002916:	4642      	mov	r2, r8
 8002918:	4639      	mov	r1, r7
 800291a:	f020 fe91 	bl	8023640 <iprintf>
    if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 800291e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002920:	f7ff fb3e 	bl	8001fa0 <net_sock_destroy>
 8002924:	2800      	cmp	r0, #0
 8002926:	f43f ae7a 	beq.w	800261e <net_sock_open_mbedtls+0x9a>
      msg_error("Failed destroying the socket.\n");
 800292a:	f44f 729a 	mov.w	r2, #308	; 0x134
 800292e:	e72c      	b.n	800278a <net_sock_open_mbedtls+0x206>
    mbedtls_ssl_set_bio(&tlsData->ssl, (void *) sock->underlying_sock_ctxt, mbedtls_net_send, mbedtls_net_recv, NULL);
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <net_sock_open_mbedtls+0x478>)
 8002934:	e7d8      	b.n	80028e8 <net_sock_open_mbedtls+0x364>
    if( (ret != MBEDTLS_ERR_SSL_WANT_READ) && (ret != MBEDTLS_ERR_SSL_WANT_WRITE) )
 8002936:	f026 0380 	bic.w	r3, r6, #128	; 0x80
 800293a:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 800293e:	d046      	beq.n	80029ce <net_sock_open_mbedtls+0x44a>
      if( (tlsData->flags = mbedtls_ssl_get_verify_result(&tlsData->ssl)) != 0 )
 8002940:	4648      	mov	r0, r9
 8002942:	f01b fcb1 	bl	801e2a8 <mbedtls_ssl_get_verify_result>
 8002946:	4603      	mov	r3, r0
 8002948:	f8c4 03b4 	str.w	r0, [r4, #948]	; 0x3b4
 800294c:	b188      	cbz	r0, 8002972 <net_sock_open_mbedtls+0x3ee>
        mbedtls_x509_crt_verify_info(vrfy_buf, sizeof(vrfy_buf), "  ! ", tlsData->flags);
 800294e:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <net_sock_open_mbedtls+0x47c>)
 8002950:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002954:	a804      	add	r0, sp, #16
 8002956:	f01e f80f 	bl	8020978 <mbedtls_x509_crt_verify_info>
        if (tlsData->tls_srv_verification == true)
 800295a:	7e23      	ldrb	r3, [r4, #24]
 800295c:	b12b      	cbz	r3, 800296a <net_sock_open_mbedtls+0x3e6>
          msg_error("Server verification:\n%s\n", vrfy_buf);
 800295e:	4921      	ldr	r1, [pc, #132]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002960:	4821      	ldr	r0, [pc, #132]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 8002962:	f240 1247 	movw	r2, #327	; 0x147
 8002966:	f020 fe6b 	bl	8023640 <iprintf>
          msg_info("Server verification:\n%s\n", vrfy_buf);
 800296a:	4826      	ldr	r0, [pc, #152]	; (8002a04 <net_sock_open_mbedtls+0x480>)
 800296c:	a904      	add	r1, sp, #16
 800296e:	f020 fe67 	bl	8023640 <iprintf>
      msg_error(" failed\n  ! mbedtls_ssl_handshake returned -0x%x\n", -ret);
 8002972:	491c      	ldr	r1, [pc, #112]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002974:	481c      	ldr	r0, [pc, #112]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 8002976:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 800297a:	f020 fe61 	bl	8023640 <iprintf>
 800297e:	4822      	ldr	r0, [pc, #136]	; (8002a08 <net_sock_open_mbedtls+0x484>)
 8002980:	4271      	negs	r1, r6
 8002982:	f020 fe5d 	bl	8023640 <iprintf>
      if (net_sock_close(sock->underlying_sock_ctxt) != NET_OK )
 8002986:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002988:	f7ff fb04 	bl	8001f94 <net_sock_close>
 800298c:	b140      	cbz	r0, 80029a0 <net_sock_open_mbedtls+0x41c>
        msg_error("Failed closing the socket.\n");
 800298e:	4915      	ldr	r1, [pc, #84]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 8002990:	4815      	ldr	r0, [pc, #84]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 8002992:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8002996:	f020 fe53 	bl	8023640 <iprintf>
 800299a:	481c      	ldr	r0, [pc, #112]	; (8002a0c <net_sock_open_mbedtls+0x488>)
 800299c:	f020 feec 	bl	8023778 <puts>
      if (net_sock_destroy(sock->underlying_sock_ctxt) != NET_OK )
 80029a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029a2:	f7ff fafd 	bl	8001fa0 <net_sock_destroy>
 80029a6:	b140      	cbz	r0, 80029ba <net_sock_open_mbedtls+0x436>
        msg_error("Failed destroying the socket.\n");
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <net_sock_open_mbedtls+0x460>)
 80029aa:	480f      	ldr	r0, [pc, #60]	; (80029e8 <net_sock_open_mbedtls+0x464>)
 80029ac:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80029b0:	f020 fe46 	bl	8023640 <iprintf>
 80029b4:	4816      	ldr	r0, [pc, #88]	; (8002a10 <net_sock_open_mbedtls+0x48c>)
 80029b6:	f020 fedf 	bl	8023778 <puts>
      internal_close(sock);
 80029ba:	4628      	mov	r0, r5
 80029bc:	f7ff fdba 	bl	8002534 <internal_close>
      return (ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED) ? NET_AUTH : NET_ERR;
 80029c0:	f516 5f1c 	cmn.w	r6, #9984	; 0x2700
 80029c4:	f47f ae2e 	bne.w	8002624 <net_sock_open_mbedtls+0xa0>
 80029c8:	f06f 0605 	mvn.w	r6, #5
 80029cc:	e62c      	b.n	8002628 <net_sock_open_mbedtls+0xa4>
  while( (ret = mbedtls_ssl_handshake(&tlsData->ssl)) != 0 )
 80029ce:	4648      	mov	r0, r9
 80029d0:	f01b fcc2 	bl	801e358 <mbedtls_ssl_handshake>
 80029d4:	4606      	mov	r6, r0
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d1ad      	bne.n	8002936 <net_sock_open_mbedtls+0x3b2>
  if( (ret = mbedtls_ssl_get_record_expansion(&tlsData->ssl)) >= 0)
 80029da:	4648      	mov	r0, r9
 80029dc:	f01b fc6e 	bl	801e2bc <mbedtls_ssl_get_record_expansion>
  return rc;
 80029e0:	e622      	b.n	8002628 <net_sock_open_mbedtls+0xa4>
 80029e2:	bf00      	nop
 80029e4:	0802834a 	.word	0x0802834a
 80029e8:	0802d9c5 	.word	0x0802d9c5
 80029ec:	0802e6a4 	.word	0x0802e6a4
 80029f0:	08001b4d 	.word	0x08001b4d
 80029f4:	08001bed 	.word	0x08001bed
 80029f8:	0802e6d7 	.word	0x0802e6d7
 80029fc:	08001b0d 	.word	0x08001b0d
 8002a00:	0802e711 	.word	0x0802e711
 8002a04:	0802e716 	.word	0x0802e716
 8002a08:	0802e72f 	.word	0x0802e72f
 8002a0c:	0802e761 	.word	0x0802e761
 8002a10:	0802e5e7 	.word	0x0802e5e7

08002a14 <net_sock_recv_mbedtls>:
{
 8002a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002a18:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002a1c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8002ad0 <net_sock_recv_mbedtls+0xbc>
 8002a20:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8002ad4 <net_sock_recv_mbedtls+0xc0>
{
 8002a24:	4604      	mov	r4, r0
 8002a26:	460e      	mov	r6, r1
 8002a28:	4617      	mov	r7, r2
  uint32_t start_time = HAL_GetTick();
 8002a2a:	f006 f8bd 	bl	8008ba8 <HAL_GetTick>
 8002a2e:	4605      	mov	r5, r0
    if (sock->blocking == true)
 8002a30:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002a34:	b9ab      	cbnz	r3, 8002a62 <net_sock_recv_mbedtls+0x4e>
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002a36:	463a      	mov	r2, r7
 8002a38:	4631      	mov	r1, r6
 8002a3a:	f508 701a 	add.w	r0, r8, #616	; 0x268
 8002a3e:	f01b ffcb 	bl	801e9d8 <mbedtls_ssl_read>
    if (ret > 0)
 8002a42:	f1b0 0900 	subs.w	r9, r0, #0
 8002a46:	dc3d      	bgt.n	8002ac4 <net_sock_recv_mbedtls+0xb0>
      switch (ret)
 8002a48:	f519 4fd0 	cmn.w	r9, #26624	; 0x6800
 8002a4c:	d017      	beq.n	8002a7e <net_sock_recv_mbedtls+0x6a>
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	; (8002ac8 <net_sock_recv_mbedtls+0xb4>)
 8002a50:	4599      	cmp	r9, r3
 8002a52:	da17      	bge.n	8002a84 <net_sock_recv_mbedtls+0x70>
 8002a54:	f029 0280 	bic.w	r2, r9, #128	; 0x80
 8002a58:	f512 4fd2 	cmn.w	r2, #26880	; 0x6900
 8002a5c:	d115      	bne.n	8002a8a <net_sock_recv_mbedtls+0x76>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e020      	b.n	8002aa4 <net_sock_recv_mbedtls+0x90>
      mbedtls_ssl_conf_read_timeout(&tlsData->conf, sock->read_timeout);
 8002a62:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002a64:	f508 7051 	add.w	r0, r8, #836	; 0x344
 8002a68:	f01b fbef 	bl	801e24a <mbedtls_ssl_conf_read_timeout>
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0)
 8002a6c:	f006 f89c 	bl	8008ba8 <HAL_GetTick>
 8002a70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002a72:	4601      	mov	r1, r0
 8002a74:	4628      	mov	r0, r5
 8002a76:	f7ff fa99 	bl	8001fac <net_timeout_left_ms>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	dcdb      	bgt.n	8002a36 <net_sock_recv_mbedtls+0x22>
        rc = NET_TIMEOUT;
 8002a7e:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : read;
 8002a82:	e01d      	b.n	8002ac0 <net_sock_recv_mbedtls+0xac>
      switch (ret)
 8002a84:	f1b9 0f00 	cmp.w	r9, #0
 8002a88:	d018      	beq.n	8002abc <net_sock_recv_mbedtls+0xa8>
          msg_error(" failed\n  ! mbedtls_ssl_read returned -0x%x\n\n", -ret);
 8002a8a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002a8e:	4651      	mov	r1, sl
 8002a90:	4658      	mov	r0, fp
 8002a92:	f020 fdd5 	bl	8023640 <iprintf>
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <net_sock_recv_mbedtls+0xb8>)
 8002a98:	f1c9 0100 	rsb	r1, r9, #0
 8002a9c:	f020 fdd0 	bl	8023640 <iprintf>
          rc = NET_ERR;
 8002aa0:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0) );
 8002aa4:	f519 4fd2 	cmn.w	r9, #26880	; 0x6900
 8002aa8:	d002      	beq.n	8002ab0 <net_sock_recv_mbedtls+0x9c>
 8002aaa:	f519 4fd1 	cmn.w	r9, #26752	; 0x6880
 8002aae:	d107      	bne.n	8002ac0 <net_sock_recv_mbedtls+0xac>
 8002ab0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002ab4:	b123      	cbz	r3, 8002ac0 <net_sock_recv_mbedtls+0xac>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d0ba      	beq.n	8002a30 <net_sock_recv_mbedtls+0x1c>
 8002aba:	e001      	b.n	8002ac0 <net_sock_recv_mbedtls+0xac>
          rc = NET_EOF;
 8002abc:	f06f 0003 	mvn.w	r0, #3
}
 8002ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_ssl_read(&tlsData->ssl, buf + read, len - read);
 8002ac4:	4648      	mov	r0, r9
 8002ac6:	e7fb      	b.n	8002ac0 <net_sock_recv_mbedtls+0xac>
 8002ac8:	ffff9801 	.word	0xffff9801
 8002acc:	0802e77c 	.word	0x0802e77c
 8002ad0:	08028360 	.word	0x08028360
 8002ad4:	0802d9c5 	.word	0x0802d9c5

08002ad8 <net_sock_send_mbedtls>:
{
 8002ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  net_tls_data_t * tlsData = sock->tlsData;
 8002adc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ade:	9301      	str	r3, [sp, #4]
{
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460e      	mov	r6, r1
 8002ae4:	4617      	mov	r7, r2
  uint32_t start_time = HAL_GetTick();
 8002ae6:	f006 f85f 	bl	8008ba8 <HAL_GetTick>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002aea:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002b84 <net_sock_send_mbedtls+0xac>
 8002aee:	f8df a098 	ldr.w	sl, [pc, #152]	; 8002b88 <net_sock_send_mbedtls+0xb0>
 8002af2:	f8df b098 	ldr.w	fp, [pc, #152]	; 8002b8c <net_sock_send_mbedtls+0xb4>
  uint32_t start_time = HAL_GetTick();
 8002af6:	4605      	mov	r5, r0
    if (sock->blocking == true)
 8002af8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002afc:	bb63      	cbnz	r3, 8002b58 <net_sock_send_mbedtls+0x80>
    ret = mbedtls_ssl_write(&tlsData->ssl, buf + sent, len - sent);
 8002afe:	9b01      	ldr	r3, [sp, #4]
 8002b00:	463a      	mov	r2, r7
 8002b02:	4631      	mov	r1, r6
 8002b04:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002b08:	f01b fee8 	bl	801e8dc <mbedtls_ssl_write>
    if (ret > 0)
 8002b0c:	f1b0 0800 	subs.w	r8, r0, #0
 8002b10:	dc36      	bgt.n	8002b80 <net_sock_send_mbedtls+0xa8>
      switch(ret)
 8002b12:	f518 4fd1 	cmn.w	r8, #26752	; 0x6880
 8002b16:	d02e      	beq.n	8002b76 <net_sock_send_mbedtls+0x9e>
 8002b18:	f1b8 0f00 	cmp.w	r8, #0
 8002b1c:	d028      	beq.n	8002b70 <net_sock_send_mbedtls+0x98>
 8002b1e:	f518 4fd2 	cmn.w	r8, #26880	; 0x6900
 8002b22:	d028      	beq.n	8002b76 <net_sock_send_mbedtls+0x9e>
          msg_error(" failed\n  ! mbedtls_ssl_write returned -0x%x\n\n", -ret);
 8002b24:	f240 12d9 	movw	r2, #473	; 0x1d9
 8002b28:	4649      	mov	r1, r9
 8002b2a:	4650      	mov	r0, sl
 8002b2c:	f020 fd88 	bl	8023640 <iprintf>
 8002b30:	f1c8 0100 	rsb	r1, r8, #0
 8002b34:	4658      	mov	r0, fp
 8002b36:	f020 fd83 	bl	8023640 <iprintf>
          rc = NET_ERR;
 8002b3a:	f04f 30ff 	mov.w	r0, #4294967295
  } while ( ((ret == MBEDTLS_ERR_SSL_WANT_READ) || (ret == MBEDTLS_ERR_SSL_WANT_WRITE)) && (sock->blocking == true) && (rc == 0));
 8002b3e:	f028 0380 	bic.w	r3, r8, #128	; 0x80
 8002b42:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8002b46:	d118      	bne.n	8002b7a <net_sock_send_mbedtls+0xa2>
 8002b48:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002b4c:	b1ab      	cbz	r3, 8002b7a <net_sock_send_mbedtls+0xa2>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d0d2      	beq.n	8002af8 <net_sock_send_mbedtls+0x20>
}
 8002b52:	b003      	add	sp, #12
 8002b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0)
 8002b58:	f006 f826 	bl	8008ba8 <HAL_GetTick>
 8002b5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002b5e:	4601      	mov	r1, r0
 8002b60:	4628      	mov	r0, r5
 8002b62:	f7ff fa23 	bl	8001fac <net_timeout_left_ms>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	dcc9      	bgt.n	8002afe <net_sock_send_mbedtls+0x26>
        rc = NET_TIMEOUT;
 8002b6a:	f06f 0002 	mvn.w	r0, #2
  return (rc < 0) ? rc : sent;
 8002b6e:	e7f0      	b.n	8002b52 <net_sock_send_mbedtls+0x7a>
          rc = NET_EOF;
 8002b70:	f06f 0003 	mvn.w	r0, #3
 8002b74:	e7e3      	b.n	8002b3e <net_sock_send_mbedtls+0x66>
      switch(ret)
 8002b76:	2000      	movs	r0, #0
 8002b78:	e7e1      	b.n	8002b3e <net_sock_send_mbedtls+0x66>
  return (rc < 0) ? rc : sent;
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	d1e9      	bne.n	8002b52 <net_sock_send_mbedtls+0x7a>
 8002b7e:	4680      	mov	r8, r0
 8002b80:	4640      	mov	r0, r8
 8002b82:	e7e6      	b.n	8002b52 <net_sock_send_mbedtls+0x7a>
 8002b84:	08028376 	.word	0x08028376
 8002b88:	0802d9c5 	.word	0x0802d9c5
 8002b8c:	0802e7aa 	.word	0x0802e7aa

08002b90 <net_sock_close_mbedtls>:
{
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4604      	mov	r4, r0
  net_tls_data_t * tlsData = sock->tlsData;
 8002b94:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    ret = mbedtls_ssl_close_notify(&tlsData->ssl);
 8002b96:	f500 751a 	add.w	r5, r0, #616	; 0x268
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f01b fc0a 	bl	801e3b4 <mbedtls_ssl_close_notify>
  while ( (ret == MBEDTLS_ERR_SSL_WANT_WRITE) || (ret == MBEDTLS_ERR_SSL_WANT_READ) );
 8002ba0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8002ba4:	f510 4fd2 	cmn.w	r0, #26880	; 0x6900
 8002ba8:	d0f7      	beq.n	8002b9a <net_sock_close_mbedtls+0xa>
  ret = net_sock_close(sock->underlying_sock_ctxt);
 8002baa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bac:	f7ff f9f2 	bl	8001f94 <net_sock_close>
 8002bb0:	4605      	mov	r5, r0
  ret |= net_sock_destroy(sock->underlying_sock_ctxt);
 8002bb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002bb4:	f7ff f9f4 	bl	8001fa0 <net_sock_destroy>
  if (ret != NET_OK)
 8002bb8:	ea55 0300 	orrs.w	r3, r5, r0
 8002bbc:	d011      	beq.n	8002be2 <net_sock_close_mbedtls+0x52>
    msg_error("Underlying net_sock_close() or net_sock_destroy() failed.\n");
 8002bbe:	490b      	ldr	r1, [pc, #44]	; (8002bec <net_sock_close_mbedtls+0x5c>)
 8002bc0:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <net_sock_close_mbedtls+0x60>)
 8002bc2:	f240 12f7 	movw	r2, #503	; 0x1f7
 8002bc6:	f020 fd3b 	bl	8023640 <iprintf>
 8002bca:	480a      	ldr	r0, [pc, #40]	; (8002bf4 <net_sock_close_mbedtls+0x64>)
 8002bcc:	f020 fdd4 	bl	8023778 <puts>
    msg_error("Freeing the mbedtls context anyway.\n");
 8002bd0:	4906      	ldr	r1, [pc, #24]	; (8002bec <net_sock_close_mbedtls+0x5c>)
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <net_sock_close_mbedtls+0x60>)
 8002bd4:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8002bd8:	f020 fd32 	bl	8023640 <iprintf>
 8002bdc:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <net_sock_close_mbedtls+0x68>)
 8002bde:	f020 fdcb 	bl	8023778 <puts>
  internal_close(sock);
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7ff fca6 	bl	8002534 <internal_close>
}
 8002be8:	2000      	movs	r0, #0
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	0802838c 	.word	0x0802838c
 8002bf0:	0802d9c5 	.word	0x0802d9c5
 8002bf4:	0802e7d9 	.word	0x0802e7d9
 8002bf8:	0802e813 	.word	0x0802e813

08002bfc <net_sock_destroy_mbedtls>:
  net_ctxt_t *ctxt = sock->net;
 8002bfc:	6802      	ldr	r2, [r0, #0]
  if (sock == ctxt->sock_list)
 8002bfe:	6853      	ldr	r3, [r2, #4]
 8002c00:	4283      	cmp	r3, r0
{
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
  if (sock == ctxt->sock_list)
 8002c06:	d109      	bne.n	8002c1c <net_sock_destroy_mbedtls+0x20>
        cur->next = sock->next;
 8002c08:	6863      	ldr	r3, [r4, #4]
    net_free(sock->tlsData);
 8002c0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
        cur->next = sock->next;
 8002c0c:	6053      	str	r3, [r2, #4]
    net_free(sock->tlsData);
 8002c0e:	f01f fbd5 	bl	80223bc <free>
    net_free(sock);
 8002c12:	4620      	mov	r0, r4
 8002c14:	f01f fbd2 	bl	80223bc <free>
 8002c18:	2000      	movs	r0, #0
}
 8002c1a:	bd10      	pop	{r4, pc}
      if (cur->next == sock)
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d0f1      	beq.n	8002c08 <net_sock_destroy_mbedtls+0xc>
    } while(cur->next != NULL);
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d1f8      	bne.n	8002c1c <net_sock_destroy_mbedtls+0x20>
  int rc = NET_ERR;
 8002c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2e:	e7f4      	b.n	8002c1a <net_sock_destroy_mbedtls+0x1e>

08002c30 <net_sock_create_mbedtls>:
{
 8002c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c34:	4605      	mov	r5, r0
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c36:	2038      	movs	r0, #56	; 0x38
{
 8002c38:	460f      	mov	r7, r1
 8002c3a:	4690      	mov	r8, r2
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8002c3c:	f01f fbb6 	bl	80223ac <malloc>
  if (sock == NULL) 
 8002c40:	4604      	mov	r4, r0
 8002c42:	b958      	cbnz	r0, 8002c5c <net_sock_create_mbedtls+0x2c>
    msg_error("net_sock_create allocation 1 failed.\n");
 8002c44:	4921      	ldr	r1, [pc, #132]	; (8002ccc <net_sock_create_mbedtls+0x9c>)
 8002c46:	4822      	ldr	r0, [pc, #136]	; (8002cd0 <net_sock_create_mbedtls+0xa0>)
 8002c48:	224b      	movs	r2, #75	; 0x4b
 8002c4a:	f020 fcf9 	bl	8023640 <iprintf>
 8002c4e:	4821      	ldr	r0, [pc, #132]	; (8002cd4 <net_sock_create_mbedtls+0xa4>)
 8002c50:	f020 fd92 	bl	8023778 <puts>
      rc = NET_ERR;
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8002c5c:	2238      	movs	r2, #56	; 0x38
 8002c5e:	2100      	movs	r1, #0
 8002c60:	f01f fbea 	bl	8022438 <memset>
    tlsData = net_malloc(sizeof(net_tls_data_t));
 8002c64:	f44f 60e4 	mov.w	r0, #1824	; 0x720
 8002c68:	f01f fba0 	bl	80223ac <malloc>
    if (tlsData == NULL)
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	b958      	cbnz	r0, 8002c88 <net_sock_create_mbedtls+0x58>
      msg_error("net_sock_create allocation 2 failed.\n");
 8002c70:	4916      	ldr	r1, [pc, #88]	; (8002ccc <net_sock_create_mbedtls+0x9c>)
 8002c72:	4817      	ldr	r0, [pc, #92]	; (8002cd0 <net_sock_create_mbedtls+0xa0>)
 8002c74:	2254      	movs	r2, #84	; 0x54
 8002c76:	f020 fce3 	bl	8023640 <iprintf>
 8002c7a:	4817      	ldr	r0, [pc, #92]	; (8002cd8 <net_sock_create_mbedtls+0xa8>)
 8002c7c:	f020 fd7c 	bl	8023778 <puts>
      net_free(sock);
 8002c80:	4620      	mov	r0, r4
 8002c82:	f01f fb9b 	bl	80223bc <free>
 8002c86:	e7e5      	b.n	8002c54 <net_sock_create_mbedtls+0x24>
      memset(tlsData, 0, sizeof(net_tls_data_t));
 8002c88:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f01f fbd3 	bl	8022438 <memset>
      sock->next = ctxt->sock_list;
 8002c92:	686a      	ldr	r2, [r5, #4]
 8002c94:	6062      	str	r2, [r4, #4]
      sock->methods.open    = (net_sock_open_mbedtls);
 8002c96:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <net_sock_create_mbedtls+0xac>)
 8002c98:	60a2      	str	r2, [r4, #8]
      sock->methods.recv    = (net_sock_recv_mbedtls);
 8002c9a:	4a11      	ldr	r2, [pc, #68]	; (8002ce0 <net_sock_create_mbedtls+0xb0>)
 8002c9c:	60e2      	str	r2, [r4, #12]
      sock->methods.send    = (net_sock_send_mbedtls);
 8002c9e:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <net_sock_create_mbedtls+0xb4>)
 8002ca0:	6162      	str	r2, [r4, #20]
      tlsData->tls_srv_verification = true;
 8002ca2:	2301      	movs	r3, #1
      sock->methods.close   = (net_sock_close_mbedtls);
 8002ca4:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <net_sock_create_mbedtls+0xb8>)
      tlsData->tls_srv_verification = true;
 8002ca6:	7633      	strb	r3, [r6, #24]
      sock->methods.close   = (net_sock_close_mbedtls);
 8002ca8:	61e2      	str	r2, [r4, #28]
      sock->blocking        = NET_DEFAULT_BLOCKING;
 8002caa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002cae:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <net_sock_create_mbedtls+0xbc>)
      ctxt->sock_list       = sock;                       /* Insert at the head of the list */
 8002cb0:	606c      	str	r4, [r5, #4]
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002cb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
      sock->net = ctxt;
 8002cb6:	6025      	str	r5, [r4, #0]
      sock->methods.destroy = (net_sock_destroy_mbedtls);
 8002cb8:	6222      	str	r2, [r4, #32]
      sock->proto           = proto;
 8002cba:	f884 8024 	strb.w	r8, [r4, #36]	; 0x24
      sock->read_timeout    = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 8002cbe:	84e3      	strh	r3, [r4, #38]	; 0x26
      sock->write_timeout   = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 8002cc0:	8523      	strh	r3, [r4, #40]	; 0x28
      sock->tlsData         = tlsData;
 8002cc2:	62e6      	str	r6, [r4, #44]	; 0x2c
      *sockhnd = (net_sockhnd_t) sock;
 8002cc4:	603c      	str	r4, [r7, #0]
      rc = NET_OK;
 8002cc6:	2000      	movs	r0, #0
  return rc;
 8002cc8:	e7c6      	b.n	8002c58 <net_sock_create_mbedtls+0x28>
 8002cca:	bf00      	nop
 8002ccc:	080283a3 	.word	0x080283a3
 8002cd0:	0802d9c5 	.word	0x0802d9c5
 8002cd4:	0802e837 	.word	0x0802e837
 8002cd8:	0802e85c 	.word	0x0802e85c
 8002cdc:	08002585 	.word	0x08002585
 8002ce0:	08002a15 	.word	0x08002a15
 8002ce4:	08002ad9 	.word	0x08002ad9
 8002ce8:	08002b91 	.word	0x08002b91
 8002cec:	08002bfd 	.word	0x08002bfd

08002cf0 <TimerCountdownMS>:
#include "main.h"
#include "paho_timer.h"  


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms)
{
 8002cf0:	b538      	push	{r3, r4, r5, lr}
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002cf6:	f005 ff57 	bl	8008ba8 <HAL_GetTick>
  timer->timeout_ms = timeout_ms;
 8002cfa:	e9c4 0500 	strd	r0, r5, [r4]
}
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}

08002d00 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout)
{
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4604      	mov	r4, r0
 8002d04:	460d      	mov	r5, r1
  timer->init_tick = HAL_GetTick();
 8002d06:	f005 ff4f 	bl	8008ba8 <HAL_GetTick>
  TimerCountdownMS(timer, timeout * 1000);
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	436b      	muls	r3, r5
  timer->init_tick = HAL_GetTick();
 8002d10:	6020      	str	r0, [r4, #0]
  timer->timeout_ms = timeout_ms;
 8002d12:	6063      	str	r3, [r4, #4]
}
 8002d14:	bd38      	pop	{r3, r4, r5, pc}

08002d16 <TimerLeftMS>:


int TimerLeftMS(Timer* timer)
{
 8002d16:	b510      	push	{r4, lr}
 8002d18:	4604      	mov	r4, r0
  int ret = 0;
  uint32_t cur_tick = HAL_GetTick();  // The HAL tick period is 1 millisecond.
 8002d1a:	f005 ff45 	bl	8008ba8 <HAL_GetTick>
  if (cur_tick < timer->init_tick)
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	4283      	cmp	r3, r0
 8002d22:	d905      	bls.n	8002d30 <TimerLeftMS+0x1a>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", timer->init_tick, cur_tick);
    timer->timeout_ms -= 0xFFFFFFFF - timer->init_tick;
 8002d24:	6862      	ldr	r2, [r4, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6063      	str	r3, [r4, #4]
    timer->init_tick = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6023      	str	r3, [r4, #0]
  }
  ret = timer->timeout_ms - (cur_tick - timer->init_tick);
 8002d30:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002d34:	4413      	add	r3, r2
 8002d36:	1a18      	subs	r0, r3, r0

  return (ret >= 0) ? ret : 0;
}
 8002d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002d3c:	bd10      	pop	{r4, pc}

08002d3e <TimerIsExpired>:


char TimerIsExpired(Timer* timer)
{
 8002d3e:	b508      	push	{r3, lr}
  return (TimerLeftMS(timer) > 0) ? 0 : 1;
 8002d40:	f7ff ffe9 	bl	8002d16 <TimerLeftMS>
}
 8002d44:	2800      	cmp	r0, #0
 8002d46:	bfcc      	ite	gt
 8002d48:	2000      	movgt	r0, #0
 8002d4a:	2001      	movle	r0, #1
 8002d4c:	bd08      	pop	{r3, pc}

08002d4e <TimerInit>:


void TimerInit(Timer* timer)
{
  timer->init_tick = 0;
 8002d4e:	2300      	movs	r3, #0
  timer->timeout_ms = 0;
 8002d50:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002d54:	4770      	bx	lr
	...

08002d58 <init_sensors>:
  * @param  none
  * @retval 0 in case of success
  *         -1 in case of failure
  */
int init_sensors(void)
{
 8002d58:	b510      	push	{r4, lr}
  int ret = 0;
  
  if (HSENSOR_OK != BSP_HSENSOR_Init())
 8002d5a:	f002 fadb 	bl	8005314 <BSP_HSENSOR_Init>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d054      	beq.n	8002e0c <init_sensors+0xb4>
  {
    msg_error("BSP_HSENSOR_Init() returns %d\n", ret);
 8002d62:	492b      	ldr	r1, [pc, #172]	; (8002e10 <init_sensors+0xb8>)
 8002d64:	482b      	ldr	r0, [pc, #172]	; (8002e14 <init_sensors+0xbc>)
 8002d66:	2252      	movs	r2, #82	; 0x52
 8002d68:	f020 fc6a 	bl	8023640 <iprintf>
 8002d6c:	482a      	ldr	r0, [pc, #168]	; (8002e18 <init_sensors+0xc0>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f020 fc66 	bl	8023640 <iprintf>
    ret = -1;
 8002d74:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (TSENSOR_OK != BSP_TSENSOR_Init())
 8002d78:	f002 fb2c 	bl	80053d4 <BSP_TSENSOR_Init>
 8002d7c:	b150      	cbz	r0, 8002d94 <init_sensors+0x3c>
  {
    msg_error("BSP_TSENSOR_Init() returns %d\n", ret);
 8002d7e:	4924      	ldr	r1, [pc, #144]	; (8002e10 <init_sensors+0xb8>)
 8002d80:	4824      	ldr	r0, [pc, #144]	; (8002e14 <init_sensors+0xbc>)
 8002d82:	2258      	movs	r2, #88	; 0x58
 8002d84:	f020 fc5c 	bl	8023640 <iprintf>
 8002d88:	4621      	mov	r1, r4
 8002d8a:	4824      	ldr	r0, [pc, #144]	; (8002e1c <init_sensors+0xc4>)
 8002d8c:	f020 fc58 	bl	8023640 <iprintf>
    ret = -1;
 8002d90:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (PSENSOR_OK != BSP_PSENSOR_Init())
 8002d94:	f002 fb02 	bl	800539c <BSP_PSENSOR_Init>
 8002d98:	b150      	cbz	r0, 8002db0 <init_sensors+0x58>
  {
    msg_error("BSP_PSENSOR_Init() returns %d\n", ret);
 8002d9a:	491d      	ldr	r1, [pc, #116]	; (8002e10 <init_sensors+0xb8>)
 8002d9c:	481d      	ldr	r0, [pc, #116]	; (8002e14 <init_sensors+0xbc>)
 8002d9e:	225e      	movs	r2, #94	; 0x5e
 8002da0:	f020 fc4e 	bl	8023640 <iprintf>
 8002da4:	4621      	mov	r1, r4
 8002da6:	481e      	ldr	r0, [pc, #120]	; (8002e20 <init_sensors+0xc8>)
 8002da8:	f020 fc4a 	bl	8023640 <iprintf>
    ret = -1;
 8002dac:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (MAGNETO_OK != BSP_MAGNETO_Init())
 8002db0:	f002 facc 	bl	800534c <BSP_MAGNETO_Init>
 8002db4:	b150      	cbz	r0, 8002dcc <init_sensors+0x74>
  {
    msg_error("BSP_MAGNETO_Init() returns %d\n", ret);
 8002db6:	4916      	ldr	r1, [pc, #88]	; (8002e10 <init_sensors+0xb8>)
 8002db8:	4816      	ldr	r0, [pc, #88]	; (8002e14 <init_sensors+0xbc>)
 8002dba:	2264      	movs	r2, #100	; 0x64
 8002dbc:	f020 fc40 	bl	8023640 <iprintf>
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	4818      	ldr	r0, [pc, #96]	; (8002e24 <init_sensors+0xcc>)
 8002dc4:	f020 fc3c 	bl	8023640 <iprintf>
    ret = -1;
 8002dc8:	f04f 34ff 	mov.w	r4, #4294967295
  }

  if (GYRO_OK != BSP_GYRO_Init())
 8002dcc:	f002 faa0 	bl	8005310 <BSP_GYRO_Init>
 8002dd0:	b150      	cbz	r0, 8002de8 <init_sensors+0x90>
  {
    msg_error("BSP_GYRO_Init() returns %d\n", ret);
 8002dd2:	490f      	ldr	r1, [pc, #60]	; (8002e10 <init_sensors+0xb8>)
 8002dd4:	480f      	ldr	r0, [pc, #60]	; (8002e14 <init_sensors+0xbc>)
 8002dd6:	226a      	movs	r2, #106	; 0x6a
 8002dd8:	f020 fc32 	bl	8023640 <iprintf>
 8002ddc:	4621      	mov	r1, r4
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <init_sensors+0xd0>)
 8002de0:	f020 fc2e 	bl	8023640 <iprintf>
    ret = -1;
 8002de4:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  if (ACCELERO_OK != BSP_ACCELERO_Init())
 8002de8:	f002 fa76 	bl	80052d8 <BSP_ACCELERO_Init>
 8002dec:	b150      	cbz	r0, 8002e04 <init_sensors+0xac>
  {


	msg_error("BSP_ACCELERO_Init() returns %d\n", ret);
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <init_sensors+0xb8>)
 8002df0:	4808      	ldr	r0, [pc, #32]	; (8002e14 <init_sensors+0xbc>)
 8002df2:	2272      	movs	r2, #114	; 0x72
 8002df4:	f020 fc24 	bl	8023640 <iprintf>
 8002df8:	4621      	mov	r1, r4
 8002dfa:	480c      	ldr	r0, [pc, #48]	; (8002e2c <init_sensors+0xd4>)
 8002dfc:	f020 fc20 	bl	8023640 <iprintf>
    ret = -1;
 8002e00:	f04f 34ff 	mov.w	r4, #4294967295
  }
  
  VL53L0X_PROXIMITY_Init();
 8002e04:	f001 fd3c 	bl	8004880 <VL53L0X_PROXIMITY_Init>
  
  return ret;
}
 8002e08:	4620      	mov	r0, r4
 8002e0a:	bd10      	pop	{r4, pc}
  int ret = 0;
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	e7b3      	b.n	8002d78 <init_sensors+0x20>
 8002e10:	080283bb 	.word	0x080283bb
 8002e14:	0802d9c5 	.word	0x0802d9c5
 8002e18:	0802e881 	.word	0x0802e881
 8002e1c:	0802e8a0 	.word	0x0802e8a0
 8002e20:	0802e8bf 	.word	0x0802e8bf
 8002e24:	0802e8de 	.word	0x0802e8de
 8002e28:	0802e8fd 	.word	0x0802e8fd
 8002e2c:	0802e919 	.word	0x0802e919

08002e30 <setRTCTimeDateFromNetwork>:
 *            TD_ERR_RTC          Could not set the RTC.
 *            TD_ERR_TLS_CERT     The server certificate verification failed. Applicable only when force_apply is false.
 *                                .
 */
int setRTCTimeDateFromNetwork(bool force_apply)
{
 8002e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e34:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
 // return 0;
  int rc = TD_OK;
  int ret = NET_OK;
  net_sockhnd_t socket = NULL;
 8002e38:	2100      	movs	r1, #0
  int len = strlen(http_request);
  char buffer[NET_BUF_SIZE + 1]; /* +1 to be sure that the buffer is closed by a \0, so that it may be parsed by string commands. */
  memset(buffer, 0, sizeof(buffer));
 8002e3a:	f240 32e9 	movw	r2, #1001	; 0x3e9
{
 8002e3e:	4606      	mov	r6, r0
  memset(buffer, 0, sizeof(buffer));
 8002e40:	a819      	add	r0, sp, #100	; 0x64
  net_sockhnd_t socket = NULL;
 8002e42:	9108      	str	r1, [sp, #32]
  memset(buffer, 0, sizeof(buffer));
 8002e44:	f01f faf8 	bl	8022438 <memset>
 
  ret = net_sock_create(hnet, &socket, TIME_SOURCE_HTTP_PROTO);
 8002e48:	4bae      	ldr	r3, [pc, #696]	; (8003104 <setRTCTimeDateFromNetwork+0x2d4>)
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	a908      	add	r1, sp, #32
 8002e50:	f7fe ffc4 	bl	8001ddc <net_sock_create>
  if (ret != NET_OK)
 8002e54:	4604      	mov	r4, r0
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d034      	beq.n	8002ec4 <setRTCTimeDateFromNetwork+0x94>
  {
    msg_error("Could not create the socket.\n");
 8002e5a:	49ab      	ldr	r1, [pc, #684]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e5c:	48ab      	ldr	r0, [pc, #684]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e5e:	2267      	movs	r2, #103	; 0x67
 8002e60:	f020 fbee 	bl	8023640 <iprintf>
 8002e64:	48aa      	ldr	r0, [pc, #680]	; (8003110 <setRTCTimeDateFromNetwork+0x2e0>)
 8002e66:	f020 fc87 	bl	8023778 <puts>
    }
  }
  
  if (ret != NET_OK)
  {
    msg_error("Could not set the socket options.\n");
 8002e6a:	2277      	movs	r2, #119	; 0x77
 8002e6c:	49a6      	ldr	r1, [pc, #664]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e6e:	48a7      	ldr	r0, [pc, #668]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e70:	f020 fbe6 	bl	8023640 <iprintf>
 8002e74:	48a7      	ldr	r0, [pc, #668]	; (8003114 <setRTCTimeDateFromNetwork+0x2e4>)
 8002e76:	f020 fc7f 	bl	8023778 <puts>
  else
  {
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
  }
  
  if (ret == NET_AUTH)
 8002e7a:	1da2      	adds	r2, r4, #6
 8002e7c:	d155      	bne.n	8002f2a <setRTCTimeDateFromNetwork+0xfa>
  {
    msg_error("An incorrect system time may have resulted in a TLS authentication error.\n");
 8002e7e:	49a2      	ldr	r1, [pc, #648]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e80:	48a2      	ldr	r0, [pc, #648]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	f020 fbdc 	bl	8023640 <iprintf>
 8002e88:	48a3      	ldr	r0, [pc, #652]	; (8003118 <setRTCTimeDateFromNetwork+0x2e8>)
 8002e8a:	f020 fc75 	bl	8023778 <puts>
 8002e8e:	f06f 0505 	mvn.w	r5, #5
    rc = TD_ERR_TLS_CERT;
 8002e92:	f06f 0403 	mvn.w	r4, #3
  }
  
  if ( (ret != NET_OK) || (rc != TD_OK) )
  {
    msg_error("Could not open the socket.\n");
 8002e96:	499c      	ldr	r1, [pc, #624]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002e98:	489c      	ldr	r0, [pc, #624]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002e9a:	2286      	movs	r2, #134	; 0x86
 8002e9c:	f020 fbd0 	bl	8023640 <iprintf>
 8002ea0:	489e      	ldr	r0, [pc, #632]	; (800311c <setRTCTimeDateFromNetwork+0x2ec>)
 8002ea2:	f020 fc69 	bl	8023778 <puts>
    }
    
    ret = net_sock_close(socket);  
  }
  
  if (socket != NULL)
 8002ea6:	9808      	ldr	r0, [sp, #32]
 8002ea8:	b110      	cbz	r0, 8002eb0 <setRTCTimeDateFromNetwork+0x80>
  {
    ret |= net_sock_destroy(socket);
 8002eaa:	f7ff f879 	bl	8001fa0 <net_sock_destroy>
 8002eae:	4305      	orrs	r5, r0
  }
  /* Translate a socket closure error in network error. */
  if ((rc == TD_OK) && (ret != NET_OK))
 8002eb0:	b91c      	cbnz	r4, 8002eba <setRTCTimeDateFromNetwork+0x8a>
 8002eb2:	1e28      	subs	r0, r5, #0
 8002eb4:	bf18      	it	ne
 8002eb6:	2001      	movne	r0, #1
 8002eb8:	4244      	negs	r4, r0
  {
    rc = TD_ERR_CONNECT;
  }
  
  return rc;
}
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
 8002ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002ec4:	4996      	ldr	r1, [pc, #600]	; (8003120 <setRTCTimeDateFromNetwork+0x2f0>)
 8002ec6:	4a97      	ldr	r2, [pc, #604]	; (8003124 <setRTCTimeDateFromNetwork+0x2f4>)
 8002ec8:	9808      	ldr	r0, [sp, #32]
 8002eca:	2305      	movs	r3, #5
 8002ecc:	f7fe ffb2 	bl	8001e34 <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002ed0:	4b95      	ldr	r3, [pc, #596]	; (8003128 <setRTCTimeDateFromNetwork+0x2f8>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	9207      	str	r2, [sp, #28]
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8002ed6:	4605      	mov	r5, r0
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fd f983 	bl	80001e4 <strlen>
 8002ede:	9a07      	ldr	r2, [sp, #28]
 8002ee0:	4992      	ldr	r1, [pc, #584]	; (800312c <setRTCTimeDateFromNetwork+0x2fc>)
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	9808      	ldr	r0, [sp, #32]
 8002ee6:	f7fe ffa5 	bl	8001e34 <net_sock_setopt>
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002eea:	4a91      	ldr	r2, [pc, #580]	; (8003130 <setRTCTimeDateFromNetwork+0x300>)
 8002eec:	4991      	ldr	r1, [pc, #580]	; (8003134 <setRTCTimeDateFromNetwork+0x304>)
      ret |= net_sock_setopt(socket, "tls_ca_certs", (void *)lUserConfigPtr->tls_root_ca_cert, strlen(lUserConfigPtr->tls_root_ca_cert));
 8002eee:	4305      	orrs	r5, r0
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002ef0:	230e      	movs	r3, #14
 8002ef2:	9808      	ldr	r0, [sp, #32]
 8002ef4:	f7fe ff9e 	bl	8001e34 <net_sock_setopt>
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002ef8:	498f      	ldr	r1, [pc, #572]	; (8003138 <setRTCTimeDateFromNetwork+0x308>)
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
 8002efa:	4305      	orrs	r5, r0
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
 8002efc:	488f      	ldr	r0, [pc, #572]	; (800313c <setRTCTimeDateFromNetwork+0x30c>)
 8002efe:	4623      	mov	r3, r4
 8002f00:	2e00      	cmp	r6, #0
 8002f02:	bf18      	it	ne
 8002f04:	4601      	movne	r1, r0
 8002f06:	4622      	mov	r2, r4
 8002f08:	9808      	ldr	r0, [sp, #32]
 8002f0a:	f7fe ff93 	bl	8001e34 <net_sock_setopt>
  if (ret != NET_OK)
 8002f0e:	ea55 0400 	orrs.w	r4, r5, r0
 8002f12:	d1aa      	bne.n	8002e6a <setRTCTimeDateFromNetwork+0x3a>
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002f14:	4623      	mov	r3, r4
 8002f16:	4986      	ldr	r1, [pc, #536]	; (8003130 <setRTCTimeDateFromNetwork+0x300>)
 8002f18:	9808      	ldr	r0, [sp, #32]
 8002f1a:	f240 12bb 	movw	r2, #443	; 0x1bb
 8002f1e:	f7fe ff83 	bl	8001e28 <net_sock_open>
  if (ret == NET_AUTH)
 8002f22:	1d83      	adds	r3, r0, #6
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8002f24:	4604      	mov	r4, r0
  if (ret == NET_AUTH)
 8002f26:	d0aa      	beq.n	8002e7e <setRTCTimeDateFromNetwork+0x4e>
  if ( (ret != NET_OK) || (rc != TD_OK) )
 8002f28:	b110      	cbz	r0, 8002f30 <setRTCTimeDateFromNetwork+0x100>
    rc = TD_ERR_TLS_CERT;
 8002f2a:	4625      	mov	r5, r4
  int rc = TD_OK;
 8002f2c:	2400      	movs	r4, #0
 8002f2e:	e7b2      	b.n	8002e96 <setRTCTimeDateFromNetwork+0x66>
    ret = net_sock_send(socket, (uint8_t *) http_request, len);
 8002f30:	4983      	ldr	r1, [pc, #524]	; (8003140 <setRTCTimeDateFromNetwork+0x310>)
 8002f32:	9808      	ldr	r0, [sp, #32]
 8002f34:	2228      	movs	r2, #40	; 0x28
 8002f36:	f7ff f827 	bl	8001f88 <net_sock_send>
    if (ret != len)
 8002f3a:	2828      	cmp	r0, #40	; 0x28
 8002f3c:	d00d      	beq.n	8002f5a <setRTCTimeDateFromNetwork+0x12a>
      msg_error("Could not send %d bytes.\n", len);
 8002f3e:	4972      	ldr	r1, [pc, #456]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002f40:	4872      	ldr	r0, [pc, #456]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002f42:	228e      	movs	r2, #142	; 0x8e
 8002f44:	f020 fb7c 	bl	8023640 <iprintf>
 8002f48:	487e      	ldr	r0, [pc, #504]	; (8003144 <setRTCTimeDateFromNetwork+0x314>)
 8002f4a:	2128      	movs	r1, #40	; 0x28
 8002f4c:	f020 fb78 	bl	8023640 <iprintf>
    ret = net_sock_close(socket);  
 8002f50:	9808      	ldr	r0, [sp, #32]
 8002f52:	f7ff f81f 	bl	8001f94 <net_sock_close>
 8002f56:	4605      	mov	r5, r0
 8002f58:	e7a5      	b.n	8002ea6 <setRTCTimeDateFromNetwork+0x76>
          dateStr = strstr(buffer, "Date: ");
 8002f5a:	4e7b      	ldr	r6, [pc, #492]	; (8003148 <setRTCTimeDateFromNetwork+0x318>)
      int read = 0;
 8002f5c:	4625      	mov	r5, r4
        len = net_sock_recv(socket, (uint8_t *) buffer + read, NET_BUF_SIZE - read);
 8002f5e:	ab19      	add	r3, sp, #100	; 0x64
 8002f60:	9808      	ldr	r0, [sp, #32]
 8002f62:	f5c5 727a 	rsb	r2, r5, #1000	; 0x3e8
 8002f66:	1959      	adds	r1, r3, r5
 8002f68:	f7ff f808 	bl	8001f7c <net_sock_recv>
        if (len > 0)
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	dc0b      	bgt.n	8002f88 <setRTCTimeDateFromNetwork+0x158>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f70:	d0f5      	beq.n	8002f5e <setRTCTimeDateFromNetwork+0x12e>
 8002f72:	3003      	adds	r0, #3
 8002f74:	d0f3      	beq.n	8002f5e <setRTCTimeDateFromNetwork+0x12e>
        msg_error("No 'Date:' line found in the HTTP response header.\n");
 8002f76:	4964      	ldr	r1, [pc, #400]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8002f78:	4864      	ldr	r0, [pc, #400]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8002f7a:	22a0      	movs	r2, #160	; 0xa0
 8002f7c:	f020 fb60 	bl	8023640 <iprintf>
 8002f80:	4872      	ldr	r0, [pc, #456]	; (800314c <setRTCTimeDateFromNetwork+0x31c>)
 8002f82:	f020 fbf9 	bl	8023778 <puts>
 8002f86:	e080      	b.n	800308a <setRTCTimeDateFromNetwork+0x25a>
          read += len;
 8002f88:	4405      	add	r5, r0
          dateStr = strstr(buffer, "Date: ");
 8002f8a:	4631      	mov	r1, r6
 8002f8c:	a819      	add	r0, sp, #100	; 0x64
 8002f8e:	f020 fd40 	bl	8023a12 <strstr>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8002f92:	4607      	mov	r7, r0
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d067      	beq.n	8003068 <setRTCTimeDateFromNetwork+0x238>
        memset(month, 0, sizeof(month));
 8002f98:	ad09      	add	r5, sp, #36	; 0x24
        day = year = hour = min = sec = 0;
 8002f9a:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8002f9e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8002fa2:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
 8002fa6:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
        memset(dow, 0, sizeof(dow));
 8002faa:	2600      	movs	r6, #0
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fac:	ab0e      	add	r3, sp, #56	; 0x38
        memset(month, 0, sizeof(month));
 8002fae:	602e      	str	r6, [r5, #0]
        day = year = hour = min = sec = 0;
 8002fb0:	f8c8 6000 	str.w	r6, [r8]
 8002fb4:	f8c9 6000 	str.w	r6, [r9]
 8002fb8:	f8ca 6000 	str.w	r6, [sl]
 8002fbc:	f8cb 6000 	str.w	r6, [fp]
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fc0:	4963      	ldr	r1, [pc, #396]	; (8003150 <setRTCTimeDateFromNetwork+0x320>)
        day = year = hour = min = sec = 0;
 8002fc2:	960e      	str	r6, [sp, #56]	; 0x38
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fc4:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8002fc8:	e9cd a902 	strd	sl, r9, [sp, #8]
 8002fcc:	ab12      	add	r3, sp, #72	; 0x48
 8002fce:	e9cd b500 	strd	fp, r5, [sp]
 8002fd2:	aa10      	add	r2, sp, #64	; 0x40
        memset(dow, 0, sizeof(dow));
 8002fd4:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fd8:	f020 fc70 	bl	80238bc <siscanf>
        if (count < 8)
 8002fdc:	2807      	cmp	r0, #7
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8002fde:	4603      	mov	r3, r0
        if (count < 8)
 8002fe0:	dd47      	ble.n	8003072 <setRTCTimeDateFromNetwork+0x242>
          char * str = strstr(dateStr, "\r\n");
 8002fe2:	495c      	ldr	r1, [pc, #368]	; (8003154 <setRTCTimeDateFromNetwork+0x324>)
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f020 fd14 	bl	8023a12 <strstr>
          msg_info("Configuring the RTC from %s\n", dateStr);
 8002fea:	4639      	mov	r1, r7
          str[0] = '\0';
 8002fec:	7006      	strb	r6, [r0, #0]
          msg_info("Configuring the RTC from %s\n", dateStr);
 8002fee:	485a      	ldr	r0, [pc, #360]	; (8003158 <setRTCTimeDateFromNetwork+0x328>)
 8002ff0:	f020 fb26 	bl	8023640 <iprintf>
          sTime.Hours = hour;
 8002ff4:	f8d9 3000 	ldr.w	r3, [r9]
 8002ff8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
          sTime.Minutes = min;
 8002ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8003000:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003004:	a914      	add	r1, sp, #80	; 0x50
          sTime.Seconds = sec;
 8003006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003008:	4854      	ldr	r0, [pc, #336]	; (800315c <setRTCTimeDateFromNetwork+0x32c>)
          sTime.Seconds = sec;
 800300a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800300e:	4632      	mov	r2, r6
          sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003010:	e9cd 6617 	strd	r6, r6, [sp, #92]	; 0x5c
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003014:	f007 fdf7 	bl	800ac06 <HAL_RTC_SetTime>
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8003018:	4951      	ldr	r1, [pc, #324]	; (8003160 <setRTCTimeDateFromNetwork+0x330>)
            rc = TD_ERR_RTC;
 800301a:	2800      	cmp	r0, #0
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 800301c:	a812      	add	r0, sp, #72	; 0x48
            rc = TD_ERR_RTC;
 800301e:	bf18      	it	ne
 8003020:	f06f 0402 	mvnne.w	r4, #2
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8003024:	f7fd f8d4 	bl	80001d0 <strcmp>
 8003028:	bb90      	cbnz	r0, 8003090 <setRTCTimeDateFromNetwork+0x260>
 800302a:	2301      	movs	r3, #1
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 800302c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
          if (strcmp(month, "Jan") == 0) { sDate.Month = RTC_MONTH_JANUARY; } else
 8003030:	494c      	ldr	r1, [pc, #304]	; (8003164 <setRTCTimeDateFromNetwork+0x334>)
 8003032:	4628      	mov	r0, r5
 8003034:	f7fd f8cc 	bl	80001d0 <strcmp>
 8003038:	2800      	cmp	r0, #0
 800303a:	d154      	bne.n	80030e6 <setRTCTimeDateFromNetwork+0x2b6>
 800303c:	2301      	movs	r3, #1
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 800303e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
          sDate.Date = day;
 8003042:	f8db 3000 	ldr.w	r3, [fp]
 8003046:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
          sDate.Year = year - 2000;
 800304a:	f8da 3000 	ldr.w	r3, [sl]
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800304e:	4843      	ldr	r0, [pc, #268]	; (800315c <setRTCTimeDateFromNetwork+0x32c>)
          sDate.Year = year - 2000;
 8003050:	3330      	adds	r3, #48	; 0x30
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003052:	2200      	movs	r2, #0
 8003054:	a90f      	add	r1, sp, #60	; 0x3c
          sDate.Year = year - 2000;
 8003056:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800305a:	f007 fe4e 	bl	800acfa <HAL_RTC_SetDate>
            rc = TD_ERR_RTC;
 800305e:	2800      	cmp	r0, #0
 8003060:	bf18      	it	ne
 8003062:	f06f 0402 	mvnne.w	r4, #2
 8003066:	e773      	b.n	8002f50 <setRTCTimeDateFromNetwork+0x120>
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8003068:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800306c:	f6ff af77 	blt.w	8002f5e <setRTCTimeDateFromNetwork+0x12e>
 8003070:	e781      	b.n	8002f76 <setRTCTimeDateFromNetwork+0x146>
          msg_error("At time initialization, only %d out of the 8 time/date data could be parsed from the HTTP response %s\n", count, buffer);
 8003072:	4925      	ldr	r1, [pc, #148]	; (8003108 <setRTCTimeDateFromNetwork+0x2d8>)
 8003074:	4825      	ldr	r0, [pc, #148]	; (800310c <setRTCTimeDateFromNetwork+0x2dc>)
 8003076:	9307      	str	r3, [sp, #28]
 8003078:	22b0      	movs	r2, #176	; 0xb0
 800307a:	f020 fae1 	bl	8023640 <iprintf>
 800307e:	9b07      	ldr	r3, [sp, #28]
 8003080:	4839      	ldr	r0, [pc, #228]	; (8003168 <setRTCTimeDateFromNetwork+0x338>)
 8003082:	aa19      	add	r2, sp, #100	; 0x64
 8003084:	4619      	mov	r1, r3
 8003086:	f020 fadb 	bl	8023640 <iprintf>
        rc = TD_ERR_HTTP;
 800308a:	f06f 0401 	mvn.w	r4, #1
 800308e:	e75f      	b.n	8002f50 <setRTCTimeDateFromNetwork+0x120>
            if (strcmp(dow, "Tue,") == 0) { sDate.WeekDay = RTC_WEEKDAY_TUESDAY; } else
 8003090:	4936      	ldr	r1, [pc, #216]	; (800316c <setRTCTimeDateFromNetwork+0x33c>)
 8003092:	a812      	add	r0, sp, #72	; 0x48
 8003094:	f7fd f89c 	bl	80001d0 <strcmp>
 8003098:	b908      	cbnz	r0, 800309e <setRTCTimeDateFromNetwork+0x26e>
 800309a:	2302      	movs	r3, #2
 800309c:	e7c6      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
              if (strcmp(dow, "Wed,") == 0) { sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; } else  
 800309e:	4934      	ldr	r1, [pc, #208]	; (8003170 <setRTCTimeDateFromNetwork+0x340>)
 80030a0:	a812      	add	r0, sp, #72	; 0x48
 80030a2:	f7fd f895 	bl	80001d0 <strcmp>
 80030a6:	b908      	cbnz	r0, 80030ac <setRTCTimeDateFromNetwork+0x27c>
 80030a8:	2303      	movs	r3, #3
 80030aa:	e7bf      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                if (strcmp(dow, "Thu,") == 0) { sDate.WeekDay = RTC_WEEKDAY_THURSDAY; } else  
 80030ac:	4931      	ldr	r1, [pc, #196]	; (8003174 <setRTCTimeDateFromNetwork+0x344>)
 80030ae:	a812      	add	r0, sp, #72	; 0x48
 80030b0:	f7fd f88e 	bl	80001d0 <strcmp>
 80030b4:	b908      	cbnz	r0, 80030ba <setRTCTimeDateFromNetwork+0x28a>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e7b8      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                  if (strcmp(dow, "Fri,") == 0) { sDate.WeekDay = RTC_WEEKDAY_FRIDAY; } else
 80030ba:	492f      	ldr	r1, [pc, #188]	; (8003178 <setRTCTimeDateFromNetwork+0x348>)
 80030bc:	a812      	add	r0, sp, #72	; 0x48
 80030be:	f7fd f887 	bl	80001d0 <strcmp>
 80030c2:	b908      	cbnz	r0, 80030c8 <setRTCTimeDateFromNetwork+0x298>
 80030c4:	2305      	movs	r3, #5
 80030c6:	e7b1      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                    if (strcmp(dow, "Sat,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SATURDAY; } else
 80030c8:	492c      	ldr	r1, [pc, #176]	; (800317c <setRTCTimeDateFromNetwork+0x34c>)
 80030ca:	a812      	add	r0, sp, #72	; 0x48
 80030cc:	f7fd f880 	bl	80001d0 <strcmp>
 80030d0:	b908      	cbnz	r0, 80030d6 <setRTCTimeDateFromNetwork+0x2a6>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e7aa      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 80030d6:	492a      	ldr	r1, [pc, #168]	; (8003180 <setRTCTimeDateFromNetwork+0x350>)
 80030d8:	a812      	add	r0, sp, #72	; 0x48
 80030da:	f7fd f879 	bl	80001d0 <strcmp>
 80030de:	2800      	cmp	r0, #0
 80030e0:	d1a6      	bne.n	8003030 <setRTCTimeDateFromNetwork+0x200>
 80030e2:	2307      	movs	r3, #7
 80030e4:	e7a2      	b.n	800302c <setRTCTimeDateFromNetwork+0x1fc>
            if (strcmp(month, "Feb") == 0) { sDate.Month = RTC_MONTH_FEBRUARY; } else
 80030e6:	4927      	ldr	r1, [pc, #156]	; (8003184 <setRTCTimeDateFromNetwork+0x354>)
 80030e8:	4628      	mov	r0, r5
 80030ea:	f7fd f871 	bl	80001d0 <strcmp>
 80030ee:	b908      	cbnz	r0, 80030f4 <setRTCTimeDateFromNetwork+0x2c4>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e7a4      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
              if (strcmp(month, "Mar") == 0) { sDate.Month = RTC_MONTH_MARCH; } else
 80030f4:	4924      	ldr	r1, [pc, #144]	; (8003188 <setRTCTimeDateFromNetwork+0x358>)
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7fd f86a 	bl	80001d0 <strcmp>
 80030fc:	2800      	cmp	r0, #0
 80030fe:	d145      	bne.n	800318c <setRTCTimeDateFromNetwork+0x35c>
 8003100:	2303      	movs	r3, #3
 8003102:	e79c      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
 8003104:	200011e0 	.word	0x200011e0
 8003108:	080283c8 	.word	0x080283c8
 800310c:	0802d9c5 	.word	0x0802d9c5
 8003110:	0802e939 	.word	0x0802e939
 8003114:	0802e969 	.word	0x0802e969
 8003118:	0802e98b 	.word	0x0802e98b
 800311c:	0802e9d5 	.word	0x0802e9d5
 8003120:	0802dfc1 	.word	0x0802dfc1
 8003124:	0802e956 	.word	0x0802e956
 8003128:	20000008 	.word	0x20000008
 800312c:	0802e1c5 	.word	0x0802e1c5
 8003130:	0802e95b 	.word	0x0802e95b
 8003134:	0802e229 	.word	0x0802e229
 8003138:	0802e1f7 	.word	0x0802e1f7
 800313c:	0802e20f 	.word	0x0802e20f
 8003140:	080283e2 	.word	0x080283e2
 8003144:	0802e9f0 	.word	0x0802e9f0
 8003148:	0802ea0a 	.word	0x0802ea0a
 800314c:	0802eae8 	.word	0x0802eae8
 8003150:	0802eb1b 	.word	0x0802eb1b
 8003154:	0802fe85 	.word	0x0802fe85
 8003158:	0802ea78 	.word	0x0802ea78
 800315c:	20001170 	.word	0x20001170
 8003160:	0802ea95 	.word	0x0802ea95
 8003164:	0802eab8 	.word	0x0802eab8
 8003168:	0802ea11 	.word	0x0802ea11
 800316c:	0802ea9a 	.word	0x0802ea9a
 8003170:	0802ea9f 	.word	0x0802ea9f
 8003174:	0802eaa4 	.word	0x0802eaa4
 8003178:	0802eaa9 	.word	0x0802eaa9
 800317c:	0802eaae 	.word	0x0802eaae
 8003180:	0802eab3 	.word	0x0802eab3
 8003184:	0802eabc 	.word	0x0802eabc
 8003188:	0802eac0 	.word	0x0802eac0
                if (strcmp(month, "Apr") == 0) { sDate.Month = RTC_MONTH_APRIL; } else
 800318c:	4920      	ldr	r1, [pc, #128]	; (8003210 <setRTCTimeDateFromNetwork+0x3e0>)
 800318e:	4628      	mov	r0, r5
 8003190:	f7fd f81e 	bl	80001d0 <strcmp>
 8003194:	b908      	cbnz	r0, 800319a <setRTCTimeDateFromNetwork+0x36a>
 8003196:	2304      	movs	r3, #4
 8003198:	e751      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                  if (strcmp(month, "May") == 0) { sDate.Month = RTC_MONTH_MAY; } else
 800319a:	491e      	ldr	r1, [pc, #120]	; (8003214 <setRTCTimeDateFromNetwork+0x3e4>)
 800319c:	4628      	mov	r0, r5
 800319e:	f7fd f817 	bl	80001d0 <strcmp>
 80031a2:	b908      	cbnz	r0, 80031a8 <setRTCTimeDateFromNetwork+0x378>
 80031a4:	2305      	movs	r3, #5
 80031a6:	e74a      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                    if (strcmp(month, "Jun") == 0) { sDate.Month = RTC_MONTH_JUNE; } else
 80031a8:	491b      	ldr	r1, [pc, #108]	; (8003218 <setRTCTimeDateFromNetwork+0x3e8>)
 80031aa:	4628      	mov	r0, r5
 80031ac:	f7fd f810 	bl	80001d0 <strcmp>
 80031b0:	b908      	cbnz	r0, 80031b6 <setRTCTimeDateFromNetwork+0x386>
 80031b2:	2306      	movs	r3, #6
 80031b4:	e743      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                      if (strcmp(month, "Jul") == 0) { sDate.Month = RTC_MONTH_JULY; } else
 80031b6:	4919      	ldr	r1, [pc, #100]	; (800321c <setRTCTimeDateFromNetwork+0x3ec>)
 80031b8:	4628      	mov	r0, r5
 80031ba:	f7fd f809 	bl	80001d0 <strcmp>
 80031be:	b908      	cbnz	r0, 80031c4 <setRTCTimeDateFromNetwork+0x394>
 80031c0:	2307      	movs	r3, #7
 80031c2:	e73c      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                        if (strcmp(month, "Aug") == 0) { sDate.Month = RTC_MONTH_AUGUST; } else
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <setRTCTimeDateFromNetwork+0x3f0>)
 80031c6:	4628      	mov	r0, r5
 80031c8:	f7fd f802 	bl	80001d0 <strcmp>
 80031cc:	b908      	cbnz	r0, 80031d2 <setRTCTimeDateFromNetwork+0x3a2>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e735      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                          if (strcmp(month, "Sep") == 0) { sDate.Month = RTC_MONTH_SEPTEMBER; } else
 80031d2:	4914      	ldr	r1, [pc, #80]	; (8003224 <setRTCTimeDateFromNetwork+0x3f4>)
 80031d4:	4628      	mov	r0, r5
 80031d6:	f7fc fffb 	bl	80001d0 <strcmp>
 80031da:	b908      	cbnz	r0, 80031e0 <setRTCTimeDateFromNetwork+0x3b0>
 80031dc:	2309      	movs	r3, #9
 80031de:	e72e      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                            if (strcmp(month, "Oct") == 0) { sDate.Month = RTC_MONTH_OCTOBER; } else
 80031e0:	4911      	ldr	r1, [pc, #68]	; (8003228 <setRTCTimeDateFromNetwork+0x3f8>)
 80031e2:	4628      	mov	r0, r5
 80031e4:	f7fc fff4 	bl	80001d0 <strcmp>
 80031e8:	b908      	cbnz	r0, 80031ee <setRTCTimeDateFromNetwork+0x3be>
 80031ea:	2310      	movs	r3, #16
 80031ec:	e727      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                              if (strcmp(month, "Nov") == 0) { sDate.Month = RTC_MONTH_NOVEMBER; } else
 80031ee:	490f      	ldr	r1, [pc, #60]	; (800322c <setRTCTimeDateFromNetwork+0x3fc>)
 80031f0:	4628      	mov	r0, r5
 80031f2:	f7fc ffed 	bl	80001d0 <strcmp>
 80031f6:	b908      	cbnz	r0, 80031fc <setRTCTimeDateFromNetwork+0x3cc>
 80031f8:	2311      	movs	r3, #17
 80031fa:	e720      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 80031fc:	490c      	ldr	r1, [pc, #48]	; (8003230 <setRTCTimeDateFromNetwork+0x400>)
 80031fe:	4628      	mov	r0, r5
 8003200:	f7fc ffe6 	bl	80001d0 <strcmp>
 8003204:	2800      	cmp	r0, #0
 8003206:	f47f af1c 	bne.w	8003042 <setRTCTimeDateFromNetwork+0x212>
 800320a:	2312      	movs	r3, #18
 800320c:	e717      	b.n	800303e <setRTCTimeDateFromNetwork+0x20e>
 800320e:	bf00      	nop
 8003210:	0802eac4 	.word	0x0802eac4
 8003214:	0802eac8 	.word	0x0802eac8
 8003218:	0802eacc 	.word	0x0802eacc
 800321c:	0802ead0 	.word	0x0802ead0
 8003220:	0802ead4 	.word	0x0802ead4
 8003224:	0802ead8 	.word	0x0802ead8
 8003228:	0802eadc 	.word	0x0802eadc
 800322c:	0802eae0 	.word	0x0802eae0
 8003230:	0802eae4 	.word	0x0802eae4

08003234 <time>:


#elif defined (__GNUC__)
time_t time(time_t * pointer)
{
  return (time_t)TimingSystemGetSystemTime();
 8003234:	f7fd beea 	b.w	800100c <TimingSystemGetSystemTime>

08003238 <net_if_init>:
int net_if_deinit(void * if_ctxt);
int net_if_reinit(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/
int net_if_init(void * if_ctxt)
{
 8003238:	b570      	push	{r4, r5, r6, lr}
  WIFI_Status_t wifiRes;
  uint8_t macAddress[6];
  int wifiConnectCounter = 0;
  bool skip_reconf = false;

  printf("\n*** WIFI connection ***\n\n");
 800323a:	4841      	ldr	r0, [pc, #260]	; (8003340 <net_if_init+0x108>)
{
 800323c:	b092      	sub	sp, #72	; 0x48
  printf("\n*** WIFI connection ***\n\n");
 800323e:	f020 fa9b 	bl	8023778 <puts>

  skip_reconf = (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) == HAL_OK);
 8003242:	f10d 0217 	add.w	r2, sp, #23
 8003246:	a907      	add	r1, sp, #28
 8003248:	a806      	add	r0, sp, #24
 800324a:	f7fe f9a5 	bl	8001598 <checkWiFiCredentials>

  if (skip_reconf == true)
 800324e:	b168      	cbz	r0, 800326c <net_if_init+0x34>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
  }
  
  if (skip_reconf == false)
  {
    printf("Your WiFi parameters need to be entered to proceed.\n");
 8003250:	483c      	ldr	r0, [pc, #240]	; (8003344 <net_if_init+0x10c>)
 8003252:	f020 fa91 	bl	8023778 <puts>
    do
    {
      updateWiFiCredentials();
 8003256:	f7fe f9cf 	bl	80015f8 <updateWiFiCredentials>
    } while (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK);
 800325a:	f10d 0217 	add.w	r2, sp, #23
 800325e:	a907      	add	r1, sp, #28
 8003260:	a806      	add	r0, sp, #24
 8003262:	f7fe f999 	bl	8001598 <checkWiFiCredentials>
 8003266:	2800      	cmp	r0, #0
 8003268:	d1f5      	bne.n	8003256 <net_if_init+0x1e>
 800326a:	e008      	b.n	800327e <net_if_init+0x46>
    printf("Push the User button (Blue) within the next 5 seconds if you want to update"
 800326c:	4836      	ldr	r0, [pc, #216]	; (8003348 <net_if_init+0x110>)
 800326e:	f020 fa83 	bl	8023778 <puts>
    skip_reconf = (Button_WaitForPush(5000) == BP_NOT_PUSHED);
 8003272:	f241 3088 	movw	r0, #5000	; 0x1388
 8003276:	f000 ff91 	bl	800419c <Button_WaitForPush>
  if (skip_reconf == false)
 800327a:	2800      	cmp	r0, #0
 800327c:	d1e8      	bne.n	8003250 <net_if_init+0x18>
  }
  
  /*  Wifi Module initialization */
  printf("Initializing the WiFi module\n");
 800327e:	4833      	ldr	r0, [pc, #204]	; (800334c <net_if_init+0x114>)
 8003280:	f020 fa7a 	bl	8023778 <puts>
  
  wifiRes = WIFI_Init();
 8003284:	f001 fdaa 	bl	8004ddc <WIFI_Init>
  if ( WIFI_STATUS_OK != wifiRes )
 8003288:	b128      	cbz	r0, 8003296 <net_if_init+0x5e>
  {
    printf("Failed to initialize WIFI module\n");
 800328a:	4831      	ldr	r0, [pc, #196]	; (8003350 <net_if_init+0x118>)
 800328c:	f020 fa74 	bl	8023778 <puts>
  else
  {
    printf("\nFailed to connect to AP %s\n",ssid);
  }
  
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	e051      	b.n	800333a <net_if_init+0x102>
  WIFI_GetModuleName(moduleinfo);
 8003296:	a80a      	add	r0, sp, #40	; 0x28
 8003298:	f001 fe9c 	bl	8004fd4 <WIFI_GetModuleName>
  printf("Module initialized successfully: %s",moduleinfo);
 800329c:	a90a      	add	r1, sp, #40	; 0x28
 800329e:	482d      	ldr	r0, [pc, #180]	; (8003354 <net_if_init+0x11c>)
 80032a0:	f020 f9ce 	bl	8023640 <iprintf>
  WIFI_GetModuleID(moduleinfo);
 80032a4:	a80a      	add	r0, sp, #40	; 0x28
 80032a6:	f001 fe8b 	bl	8004fc0 <WIFI_GetModuleID>
  printf(" %s",moduleinfo);
 80032aa:	a90a      	add	r1, sp, #40	; 0x28
 80032ac:	482a      	ldr	r0, [pc, #168]	; (8003358 <net_if_init+0x120>)
 80032ae:	f020 f9c7 	bl	8023640 <iprintf>
  WIFI_GetModuleFwRevision(moduleinfo);
 80032b2:	a80a      	add	r0, sp, #40	; 0x28
 80032b4:	f001 fe7a 	bl	8004fac <WIFI_GetModuleFwRevision>
  printf(" %s\n",moduleinfo);
 80032b8:	a90a      	add	r1, sp, #40	; 0x28
 80032ba:	4828      	ldr	r0, [pc, #160]	; (800335c <net_if_init+0x124>)
 80032bc:	f020 f9c0 	bl	8023640 <iprintf>
  printf("Retrieving the WiFi module MAC address:");
 80032c0:	4827      	ldr	r0, [pc, #156]	; (8003360 <net_if_init+0x128>)
 80032c2:	f020 f9bd 	bl	8023640 <iprintf>
  wifiRes = WIFI_GetMAC_Address( (uint8_t*)macAddress);
 80032c6:	a808      	add	r0, sp, #32
 80032c8:	f001 fdc0 	bl	8004e4c <WIFI_GetMAC_Address>
  if ( WIFI_STATUS_OK == wifiRes)
 80032cc:	bb60      	cbnz	r0, 8003328 <net_if_init+0xf0>
    printf(" %02x:%02x:%02x:%02x:%02x:%02x\n",
 80032ce:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80032d2:	9302      	str	r3, [sp, #8]
 80032d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80032e4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80032e8:	f89d 1020 	ldrb.w	r1, [sp, #32]
 80032ec:	481d      	ldr	r0, [pc, #116]	; (8003364 <net_if_init+0x12c>)
 80032ee:	f020 f9a7 	bl	8023640 <iprintf>
  printf("\n");
 80032f2:	200a      	movs	r0, #10
 80032f4:	f020 f9bc 	bl	8023670 <putchar>
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032f8:	4e1b      	ldr	r6, [pc, #108]	; (8003368 <net_if_init+0x130>)
  int wifiConnectCounter = 0;
 80032fa:	2500      	movs	r5, #0
    printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80032fc:	3501      	adds	r5, #1
 80032fe:	9906      	ldr	r1, [sp, #24]
 8003300:	2303      	movs	r3, #3
 8003302:	462a      	mov	r2, r5
 8003304:	4630      	mov	r0, r6
 8003306:	f020 f99b 	bl	8023640 <iprintf>
    wifiRes = WIFI_Connect(ssid, psk, security_mode);
 800330a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800330e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8003312:	f001 fd87 	bl	8004e24 <WIFI_Connect>
    if (wifiRes == WIFI_STATUS_OK) break;
 8003316:	4604      	mov	r4, r0
 8003318:	b150      	cbz	r0, 8003330 <net_if_init+0xf8>
  while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 800331a:	2d03      	cmp	r5, #3
 800331c:	d1ee      	bne.n	80032fc <net_if_init+0xc4>
    printf("\nFailed to connect to AP %s\n",ssid);
 800331e:	9906      	ldr	r1, [sp, #24]
 8003320:	4812      	ldr	r0, [pc, #72]	; (800336c <net_if_init+0x134>)
 8003322:	f020 f98d 	bl	8023640 <iprintf>
 8003326:	e7b3      	b.n	8003290 <net_if_init+0x58>
       printf("Failed to get MAC address\n");
 8003328:	4811      	ldr	r0, [pc, #68]	; (8003370 <net_if_init+0x138>)
 800332a:	f020 fa25 	bl	8023778 <puts>
 800332e:	e7e0      	b.n	80032f2 <net_if_init+0xba>
    printf("\nConnected to AP %s\n",ssid);
 8003330:	9906      	ldr	r1, [sp, #24]
 8003332:	4810      	ldr	r0, [pc, #64]	; (8003374 <net_if_init+0x13c>)
 8003334:	f020 f984 	bl	8023640 <iprintf>
  return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8003338:	4620      	mov	r0, r4
}
 800333a:	b012      	add	sp, #72	; 0x48
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	bf00      	nop
 8003340:	0802eb3a 	.word	0x0802eb3a
 8003344:	0802eb54 	.word	0x0802eb54
 8003348:	0802eb88 	.word	0x0802eb88
 800334c:	0802ebf5 	.word	0x0802ebf5
 8003350:	0802ec12 	.word	0x0802ec12
 8003354:	0802ec33 	.word	0x0802ec33
 8003358:	08031618 	.word	0x08031618
 800335c:	0803009b 	.word	0x0803009b
 8003360:	0802ec57 	.word	0x0802ec57
 8003364:	0802d8b1 	.word	0x0802d8b1
 8003368:	0802ec99 	.word	0x0802ec99
 800336c:	0802ecd7 	.word	0x0802ecd7
 8003370:	0802ec7f 	.word	0x0802ec7f
 8003374:	0802ecc2 	.word	0x0802ecc2

08003378 <net_if_deinit>:


int net_if_deinit(void * if_ctxt)
{
  return 0;
}
 8003378:	2000      	movs	r0, #0
 800337a:	4770      	bx	lr

0800337c <net_if_reinit>:


int net_if_reinit(void * if_ctxt)
{
 800337c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Ecn_t security_mode;
  WIFI_Status_t wifiRes;
  int wifiConnectCounter = 0;
  
  // wifiRes = WIFI_Disconnect(); // Disconnect() is not enough for the Inventek module which does not clean the previous state properly.
  wifiRes = WIFI_Init();
 800337e:	f001 fd2d 	bl	8004ddc <WIFI_Init>
  if (wifiRes != WIFI_STATUS_OK)
 8003382:	b138      	cbz	r0, 8003394 <net_if_reinit+0x18>
  {
    msg_error("WIFI_Init() failed.\n");
 8003384:	4917      	ldr	r1, [pc, #92]	; (80033e4 <net_if_reinit+0x68>)
 8003386:	4818      	ldr	r0, [pc, #96]	; (80033e8 <net_if_reinit+0x6c>)
 8003388:	22af      	movs	r2, #175	; 0xaf
 800338a:	f020 f959 	bl	8023640 <iprintf>
 800338e:	4817      	ldr	r0, [pc, #92]	; (80033ec <net_if_reinit+0x70>)
 8003390:	f020 f9f2 	bl	8023778 <puts>
  }
  
  if (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK)
 8003394:	f10d 0207 	add.w	r2, sp, #7
 8003398:	a903      	add	r1, sp, #12
 800339a:	a802      	add	r0, sp, #8
 800339c:	f7fe f8fc 	bl	8001598 <checkWiFiCredentials>
 80033a0:	4604      	mov	r4, r0
 80033a2:	b9a8      	cbnz	r0, 80033d0 <net_if_reinit+0x54>
  }
  else
  {
    do 
    {
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033a4:	4e12      	ldr	r6, [pc, #72]	; (80033f0 <net_if_reinit+0x74>)
  int wifiConnectCounter = 0;
 80033a6:	4605      	mov	r5, r0
      printf("\rConnecting to AP: %s  Attempt %d/%d ...",ssid, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033a8:	3501      	adds	r5, #1
 80033aa:	9902      	ldr	r1, [sp, #8]
 80033ac:	462a      	mov	r2, r5
 80033ae:	2303      	movs	r3, #3
 80033b0:	4630      	mov	r0, r6
 80033b2:	f020 f945 	bl	8023640 <iprintf>
      wifiRes = WIFI_Connect(ssid, psk, security_mode);
 80033b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80033ba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80033be:	f001 fd31 	bl	8004e24 <WIFI_Connect>
      if (wifiRes == WIFI_STATUS_OK) break;
 80033c2:	b140      	cbz	r0, 80033d6 <net_if_reinit+0x5a>
    } 
    while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80033c4:	2d03      	cmp	r5, #3
 80033c6:	d1ef      	bne.n	80033a8 <net_if_reinit+0x2c>
    {
      printf("\nRe-connected to AP %s\n",ssid);
    }
    else
    {
      printf("\nFailed to re-connect to AP %s\n",ssid);
 80033c8:	9902      	ldr	r1, [sp, #8]
 80033ca:	480a      	ldr	r0, [pc, #40]	; (80033f4 <net_if_reinit+0x78>)
 80033cc:	f020 f938 	bl	8023640 <iprintf>
      ret = -1;
 80033d0:	f04f 34ff 	mov.w	r4, #4294967295
 80033d4:	e003      	b.n	80033de <net_if_reinit+0x62>
      printf("\nRe-connected to AP %s\n",ssid);
 80033d6:	9902      	ldr	r1, [sp, #8]
 80033d8:	4807      	ldr	r0, [pc, #28]	; (80033f8 <net_if_reinit+0x7c>)
 80033da:	f020 f931 	bl	8023640 <iprintf>
    }
  }
    
  return ret;
}
 80033de:	4620      	mov	r0, r4
 80033e0:	b004      	add	sp, #16
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	0802840b 	.word	0x0802840b
 80033e8:	0802d9c5 	.word	0x0802d9c5
 80033ec:	0802ecf4 	.word	0x0802ecf4
 80033f0:	0802ec99 	.word	0x0802ec99
 80033f4:	0802ed20 	.word	0x0802ed20
 80033f8:	0802ed08 	.word	0x0802ed08

080033fc <network_read>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes read on SUCCESS
 *         - -1 on FAILURE
 **/
int network_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80033fc:	b510      	push	{r4, lr}
  int bytes;

  bytes = net_sock_recv((net_sockhnd_t) n->my_socket, buffer, len);
 80033fe:	6800      	ldr	r0, [r0, #0]
 8003400:	f7fe fdbc 	bl	8001f7c <net_sock_recv>
  if(bytes < 0)
 8003404:	1e04      	subs	r4, r0, #0
 8003406:	da0a      	bge.n	800341e <network_read+0x22>
  {
    msg_error("net_sock_recv failed - %d\n", bytes);
 8003408:	4906      	ldr	r1, [pc, #24]	; (8003424 <network_read+0x28>)
 800340a:	4807      	ldr	r0, [pc, #28]	; (8003428 <network_read+0x2c>)
 800340c:	22e1      	movs	r2, #225	; 0xe1
 800340e:	f020 f917 	bl	8023640 <iprintf>
 8003412:	4621      	mov	r1, r4
 8003414:	4805      	ldr	r0, [pc, #20]	; (800342c <network_read+0x30>)
 8003416:	f020 f913 	bl	8023640 <iprintf>
    bytes = -1;
 800341a:	f04f 34ff 	mov.w	r4, #4294967295
  }

   return bytes;
}
 800341e:	4620      	mov	r0, r4
 8003420:	bd10      	pop	{r4, pc}
 8003422:	bf00      	nop
 8003424:	0802841c 	.word	0x0802841c
 8003428:	0802d9c5 	.word	0x0802d9c5
 800342c:	0802ed40 	.word	0x0802ed40

08003430 <network_write>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes written on SUCCESS
 *         - -1 on FAILURE
 **/
int network_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8003430:	b510      	push	{r4, lr}
  int rc;

  rc = net_sock_send((net_sockhnd_t) n->my_socket, buffer, len);
 8003432:	6800      	ldr	r0, [r0, #0]
 8003434:	f7fe fda8 	bl	8001f88 <net_sock_send>
  if(rc < 0)
 8003438:	1e04      	subs	r4, r0, #0
 800343a:	da0a      	bge.n	8003452 <network_write+0x22>
  {
    msg_error("net_sock_send failed - %d\n", rc);
 800343c:	4906      	ldr	r1, [pc, #24]	; (8003458 <network_write+0x28>)
 800343e:	4807      	ldr	r0, [pc, #28]	; (800345c <network_write+0x2c>)
 8003440:	22f7      	movs	r2, #247	; 0xf7
 8003442:	f020 f8fd 	bl	8023640 <iprintf>
 8003446:	4621      	mov	r1, r4
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <network_write+0x30>)
 800344a:	f020 f8f9 	bl	8023640 <iprintf>
    rc = -1;
 800344e:	f04f 34ff 	mov.w	r4, #4294967295
  }

  return rc;
}
 8003452:	4620      	mov	r0, r4
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	08028429 	.word	0x08028429
 800345c:	0802d9c5 	.word	0x0802d9c5
 8003460:	0802ed5b 	.word	0x0802ed5b

08003464 <allpurposeMessageHandler>:
 *
 *  Note: No context handle is passed by the callback. Must rely on static variables.
 *        TODO: Maybe store couples of hander/contextHanders so that the context could
 *              be retrieved from the handler address. */
void allpurposeMessageHandler(MessageData* data)
{
 8003464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1),
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	4c39      	ldr	r4, [pc, #228]	; (8003550 <allpurposeMessageHandler+0xec>)
 800346a:	68d9      	ldr	r1, [r3, #12]
 800346c:	4a39      	ldr	r2, [pc, #228]	; (8003554 <allpurposeMessageHandler+0xf0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	3101      	adds	r1, #1
 8003472:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
{
 8003476:	4605      	mov	r5, r0
  snprintf(mqtt_msg, MIN(MQTT_MSG_BUFFER_SIZE, data->message->payloadlen + 1),
 8003478:	bf28      	it	cs
 800347a:	f44f 7116 	movcs.w	r1, #600	; 0x258
 800347e:	4620      	mov	r0, r4
 8003480:	f020 f9c8 	bl	8023814 <sniprintf>
           "%s", (char *)data->message->payload);
  msg_info("Received message: topic: %.*s content: %s.\n",
 8003484:	6869      	ldr	r1, [r5, #4]
 8003486:	4834      	ldr	r0, [pc, #208]	; (8003558 <allpurposeMessageHandler+0xf4>)
 8003488:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
 800348c:	4623      	mov	r3, r4
 800348e:	f020 f8d7 	bl	8023640 <iprintf>
           data->topicName->lenstring.len, data->topicName->lenstring.data,
           mqtt_msg);

  cJSON *json = NULL;
  cJSON * root = cJSON_Parse(mqtt_msg);
 8003492:	4620      	mov	r0, r4
 8003494:	f01e fe3e 	bl	8022114 <cJSON_Parse>

  json = cJSON_GetObjectItemCaseSensitive(root, "LedOn");
 8003498:	4930      	ldr	r1, [pc, #192]	; (800355c <allpurposeMessageHandler+0xf8>)
  cJSON * root = cJSON_Parse(mqtt_msg);
 800349a:	4605      	mov	r5, r0
  json = cJSON_GetObjectItemCaseSensitive(root, "LedOn");
 800349c:	f01e fe3e 	bl	802211c <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034a0:	4607      	mov	r7, r0
 80034a2:	b180      	cbz	r0, 80034c6 <allpurposeMessageHandler+0x62>
  {
    if (cJSON_IsBool(json) == true)
 80034a4:	f01e fe43 	bl	802212e <cJSON_IsBool>
 80034a8:	2801      	cmp	r0, #1
 80034aa:	4606      	mov	r6, r0
 80034ac:	d131      	bne.n	8003512 <allpurposeMessageHandler+0xae>
    {
      status_data.LedOn = (cJSON_IsTrue(json) == true);
 80034ae:	4638      	mov	r0, r7
 80034b0:	f01e fe37 	bl	8022122 <cJSON_IsTrue>
 80034b4:	1e42      	subs	r2, r0, #1
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <allpurposeMessageHandler+0xfc>)
 80034b8:	4250      	negs	r0, r2
 80034ba:	4150      	adcs	r0, r2
 80034bc:	7358      	strb	r0, [r3, #13]
      Led_SetState(status_data.LedOn);
 80034be:	f000 fe3d 	bl	800413c <Led_SetState>
      g_statusChanged = true;
 80034c2:	f884 6258 	strb.w	r6, [r4, #600]	; 0x258
    {
      msg_error("JSON parsing error of LedOn value.\n");
    }
  }

  json = cJSON_GetObjectItemCaseSensitive(root, "TelemetryInterval");
 80034c6:	4927      	ldr	r1, [pc, #156]	; (8003564 <allpurposeMessageHandler+0x100>)
 80034c8:	4628      	mov	r0, r5
 80034ca:	f01e fe27 	bl	802211c <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034ce:	4606      	mov	r6, r0
 80034d0:	b140      	cbz	r0, 80034e4 <allpurposeMessageHandler+0x80>
  {
    if (cJSON_IsNumber(json) == true)
 80034d2:	f01e fe33 	bl	802213c <cJSON_IsNumber>
 80034d6:	2801      	cmp	r0, #1
 80034d8:	d125      	bne.n	8003526 <allpurposeMessageHandler+0xc2>
    {
      status_data.TelemetryInterval = json->valueint;
 80034da:	4b21      	ldr	r3, [pc, #132]	; (8003560 <allpurposeMessageHandler+0xfc>)
 80034dc:	6972      	ldr	r2, [r6, #20]
 80034de:	611a      	str	r2, [r3, #16]
      g_statusChanged = true;
 80034e0:	f884 0258 	strb.w	r0, [r4, #600]	; 0x258
    {
      msg_error("JSON parsing error of TelemetryInterval value.\n");
    }
  }

  json = cJSON_GetObjectItemCaseSensitive(root, "Reboot");
 80034e4:	4920      	ldr	r1, [pc, #128]	; (8003568 <allpurposeMessageHandler+0x104>)
 80034e6:	4628      	mov	r0, r5
 80034e8:	f01e fe18 	bl	802211c <cJSON_GetObjectItemCaseSensitive>
  if (json != NULL)
 80034ec:	4606      	mov	r6, r0
 80034ee:	b158      	cbz	r0, 8003508 <allpurposeMessageHandler+0xa4>
  {
    if (cJSON_IsBool(json) == true)
 80034f0:	f01e fe1d 	bl	802212e <cJSON_IsBool>
 80034f4:	2801      	cmp	r0, #1
 80034f6:	d120      	bne.n	800353a <allpurposeMessageHandler+0xd6>
    {
      g_reboot = (cJSON_IsTrue(json) == true);
 80034f8:	4630      	mov	r0, r6
 80034fa:	f01e fe12 	bl	8022122 <cJSON_IsTrue>
 80034fe:	1e43      	subs	r3, r0, #1
 8003500:	4258      	negs	r0, r3
 8003502:	4158      	adcs	r0, r3
 8003504:	f884 0259 	strb.w	r0, [r4, #601]	; 0x259
    {
      msg_error("JSON parsing error of Reboot value.\n");
    }
  }

  cJSON_Delete(root);
 8003508:	4628      	mov	r0, r5
}
 800350a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  cJSON_Delete(root);
 800350e:	f01e bbfb 	b.w	8021d08 <cJSON_Delete>
      msg_error("JSON parsing error of LedOn value.\n");
 8003512:	4916      	ldr	r1, [pc, #88]	; (800356c <allpurposeMessageHandler+0x108>)
 8003514:	4816      	ldr	r0, [pc, #88]	; (8003570 <allpurposeMessageHandler+0x10c>)
 8003516:	f240 1219 	movw	r2, #281	; 0x119
 800351a:	f020 f891 	bl	8023640 <iprintf>
 800351e:	4815      	ldr	r0, [pc, #84]	; (8003574 <allpurposeMessageHandler+0x110>)
 8003520:	f020 f92a 	bl	8023778 <puts>
 8003524:	e7cf      	b.n	80034c6 <allpurposeMessageHandler+0x62>
      msg_error("JSON parsing error of TelemetryInterval value.\n");
 8003526:	4911      	ldr	r1, [pc, #68]	; (800356c <allpurposeMessageHandler+0x108>)
 8003528:	4811      	ldr	r0, [pc, #68]	; (8003570 <allpurposeMessageHandler+0x10c>)
 800352a:	f240 1227 	movw	r2, #295	; 0x127
 800352e:	f020 f887 	bl	8023640 <iprintf>
 8003532:	4811      	ldr	r0, [pc, #68]	; (8003578 <allpurposeMessageHandler+0x114>)
 8003534:	f020 f920 	bl	8023778 <puts>
 8003538:	e7d4      	b.n	80034e4 <allpurposeMessageHandler+0x80>
      msg_error("JSON parsing error of Reboot value.\n");
 800353a:	490c      	ldr	r1, [pc, #48]	; (800356c <allpurposeMessageHandler+0x108>)
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <allpurposeMessageHandler+0x10c>)
 800353e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8003542:	f020 f87d 	bl	8023640 <iprintf>
 8003546:	480d      	ldr	r0, [pc, #52]	; (800357c <allpurposeMessageHandler+0x118>)
 8003548:	f020 f916 	bl	8023778 <puts>
 800354c:	e7dc      	b.n	8003508 <allpurposeMessageHandler+0xa4>
 800354e:	bf00      	nop
 8003550:	20000834 	.word	0x20000834
 8003554:	08031619 	.word	0x08031619
 8003558:	0802ed76 	.word	0x0802ed76
 800355c:	0802eda2 	.word	0x0802eda2
 8003560:	2000000c 	.word	0x2000000c
 8003564:	0802edcb 	.word	0x0802edcb
 8003568:	0802ee0c 	.word	0x0802ee0c
 800356c:	08028437 	.word	0x08028437
 8003570:	0802d9c5 	.word	0x0802d9c5
 8003574:	0802eda8 	.word	0x0802eda8
 8003578:	0802eddd 	.word	0x0802eddd
 800357c:	0802ee13 	.word	0x0802ee13

08003580 <cloud_device_enter_credentials>:
{
 8003580:	b500      	push	{lr}
 8003582:	b0ef      	sub	sp, #444	; 0x1bc
  memset(&iot_config, 0, sizeof(iot_config_t));
 8003584:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8003588:	2100      	movs	r1, #0
 800358a:	4668      	mov	r0, sp
 800358c:	f01e ff54 	bl	8022438 <memset>
  printf("\nEnter the connection string of your device:\n"
 8003590:	480e      	ldr	r0, [pc, #56]	; (80035cc <cloud_device_enter_credentials+0x4c>)
 8003592:	f020 f8f1 	bl	8023778 <puts>
  getInputString(iot_config.device_name, USER_CONF_DEVICE_NAME_LENGTH);
 8003596:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800359a:	a802      	add	r0, sp, #8
 800359c:	f7fd ffc2 	bl	8001524 <getInputString>
  msg_info("read: --->\n%s\n<---\n", iot_config.device_name);
 80035a0:	480b      	ldr	r0, [pc, #44]	; (80035d0 <cloud_device_enter_credentials+0x50>)
 80035a2:	a902      	add	r1, sp, #8
 80035a4:	f020 f84c 	bl	8023640 <iprintf>
  if(setIoTDeviceConfig(&iot_config) != 0)
 80035a8:	4668      	mov	r0, sp
 80035aa:	f7fe fa01 	bl	80019b0 <setIoTDeviceConfig>
 80035ae:	b148      	cbz	r0, 80035c4 <cloud_device_enter_credentials+0x44>
    msg_error("Failed programming the IoT device configuration to Flash.\n");
 80035b0:	4908      	ldr	r1, [pc, #32]	; (80035d4 <cloud_device_enter_credentials+0x54>)
 80035b2:	4809      	ldr	r0, [pc, #36]	; (80035d8 <cloud_device_enter_credentials+0x58>)
 80035b4:	22b2      	movs	r2, #178	; 0xb2
 80035b6:	f020 f843 	bl	8023640 <iprintf>
 80035ba:	4808      	ldr	r0, [pc, #32]	; (80035dc <cloud_device_enter_credentials+0x5c>)
 80035bc:	f020 f8dc 	bl	8023778 <puts>
    ret = -1;
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80035c4:	b06f      	add	sp, #444	; 0x1bc
 80035c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ca:	bf00      	nop
 80035cc:	0802ee37 	.word	0x0802ee37
 80035d0:	0802dcec 	.word	0x0802dcec
 80035d4:	08028450 	.word	0x08028450
 80035d8:	0802d9c5 	.word	0x0802d9c5
 80035dc:	0802ef3f 	.word	0x0802ef3f

080035e0 <stiot_publish>:

/**
 * MQTT publish API abstraction called by the metering loop.
 */
int stiot_publish(void * mqtt_ctxt, const char * topic, const char * msg)
{
 80035e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80035e2:	4614      	mov	r4, r2
 80035e4:	4606      	mov	r6, r0
  int rc;
  MQTTMessage mqmsg;
  memset(&mqmsg, 0, sizeof(MQTTMessage));
 80035e6:	2210      	movs	r2, #16
{
 80035e8:	460d      	mov	r5, r1
  memset(&mqmsg, 0, sizeof(MQTTMessage));
 80035ea:	4668      	mov	r0, sp
 80035ec:	2100      	movs	r1, #0
 80035ee:	f01e ff23 	bl	8022438 <memset>
  mqmsg.qos = QOS0;
 80035f2:	2300      	movs	r3, #0
  mqmsg.payload = (char *) msg;
  mqmsg.payloadlen = strlen(msg);
 80035f4:	4620      	mov	r0, r4
  mqmsg.qos = QOS0;
 80035f6:	f88d 3000 	strb.w	r3, [sp]
  mqmsg.payload = (char *) msg;
 80035fa:	9402      	str	r4, [sp, #8]
  mqmsg.payloadlen = strlen(msg);
 80035fc:	f7fc fdf2 	bl	80001e4 <strlen>

  rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 8003600:	466a      	mov	r2, sp
  mqmsg.payloadlen = strlen(msg);
 8003602:	9003      	str	r0, [sp, #12]
  rc = MQTTPublish(mqtt_ctxt, topic, &mqmsg);
 8003604:	4629      	mov	r1, r5
 8003606:	4630      	mov	r0, r6
 8003608:	f009 fbcb 	bl	800cda2 <MQTTPublish>
  if (rc != MQSUCCESS)
 800360c:	4604      	mov	r4, r0
 800360e:	b150      	cbz	r0, 8003626 <stiot_publish+0x46>
  {
    msg_error("Failed publishing %s on %s\n", (char *)(mqmsg.payload), topic);
 8003610:	4906      	ldr	r1, [pc, #24]	; (800362c <stiot_publish+0x4c>)
 8003612:	4807      	ldr	r0, [pc, #28]	; (8003630 <stiot_publish+0x50>)
 8003614:	f240 322b 	movw	r2, #811	; 0x32b
 8003618:	f020 f812 	bl	8023640 <iprintf>
 800361c:	9902      	ldr	r1, [sp, #8]
 800361e:	4805      	ldr	r0, [pc, #20]	; (8003634 <stiot_publish+0x54>)
 8003620:	462a      	mov	r2, r5
 8003622:	f020 f80d 	bl	8023640 <iprintf>
  }
  return rc;
}
 8003626:	4620      	mov	r0, r4
 8003628:	b004      	add	sp, #16
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	0802846f 	.word	0x0802846f
 8003630:	0802d9c5 	.word	0x0802d9c5
 8003634:	0802ef79 	.word	0x0802ef79

08003638 <string_allocate_from_token>:

/** Look for a 'key=value' pair in the passed configuration string, and return a new buffer
 *  holding the 'value' field.
 */
int string_allocate_from_token(char ** pDestString, char * tokenName, const char * sourceString)
{
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	4607      	mov	r7, r0
  int ret = 0;
  char * key = NULL;
  char * value = NULL;

  if ((key = strstr(sourceString, tokenName)) != NULL)
 800363c:	4610      	mov	r0, r2
{
 800363e:	460c      	mov	r4, r1
  if ((key = strstr(sourceString, tokenName)) != NULL)
 8003640:	f020 f9e7 	bl	8023a12 <strstr>
 8003644:	4605      	mov	r5, r0
 8003646:	b1b0      	cbz	r0, 8003676 <string_allocate_from_token+0x3e>
  {
    int size = 0;
    value = key + strlen(tokenName);    /* '=' key=value separator is part of tokenName. */
 8003648:	4620      	mov	r0, r4
 800364a:	f7fc fdcb 	bl	80001e4 <strlen>
 800364e:	4405      	add	r5, r0
    if ((key = strstr(value, ";")) != NULL)
 8003650:	213b      	movs	r1, #59	; 0x3b
 8003652:	4628      	mov	r0, r5
 8003654:	f020 f9a3 	bl	802399e <strchr>
 8003658:	4604      	mov	r4, r0
 800365a:	b100      	cbz	r0, 800365e <string_allocate_from_token+0x26>
    {
      size = key - value;
 800365c:	1b44      	subs	r4, r0, r5
    }
    *pDestString = malloc(size + 1);
 800365e:	1c60      	adds	r0, r4, #1
 8003660:	f01e fea4 	bl	80223ac <malloc>
 8003664:	4606      	mov	r6, r0
 8003666:	6038      	str	r0, [r7, #0]
    if (*pDestString != NULL)
 8003668:	b138      	cbz	r0, 800367a <string_allocate_from_token+0x42>
    {
      memcpy(*pDestString, value, size);
 800366a:	4622      	mov	r2, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f01e febb 	bl	80223e8 <memcpy>
      (*pDestString)[size] = '\0';
 8003672:	2300      	movs	r3, #0
 8003674:	5533      	strb	r3, [r6, r4]
      msg_error("Allocation failed\n");
    }
  }

  return ret;
}
 8003676:	2000      	movs	r0, #0
 8003678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      msg_error("Allocation failed\n");
 800367a:	4905      	ldr	r1, [pc, #20]	; (8003690 <string_allocate_from_token+0x58>)
 800367c:	4805      	ldr	r0, [pc, #20]	; (8003694 <string_allocate_from_token+0x5c>)
 800367e:	f240 324a 	movw	r2, #842	; 0x34a
 8003682:	f01f ffdd 	bl	8023640 <iprintf>
 8003686:	4804      	ldr	r0, [pc, #16]	; (8003698 <string_allocate_from_token+0x60>)
 8003688:	f020 f876 	bl	8023778 <puts>
 800368c:	e7f3      	b.n	8003676 <string_allocate_from_token+0x3e>
 800368e:	bf00      	nop
 8003690:	0802847d 	.word	0x0802847d
 8003694:	0802d9c5 	.word	0x0802d9c5
 8003698:	0802ef95 	.word	0x0802ef95

0800369c <free_device_config>:


/** Free a device_config_t allocated by parse_and_fill_device_config().
 */
void free_device_config(device_config_t * config)
{
 800369c:	b510      	push	{r4, lr}
  if (config != NULL)
 800369e:	4604      	mov	r4, r0
 80036a0:	b1e0      	cbz	r0, 80036dc <free_device_config+0x40>
  {
    if (config->HostName != NULL) free(config->HostName);
 80036a2:	6800      	ldr	r0, [r0, #0]
 80036a4:	b108      	cbz	r0, 80036aa <free_device_config+0xe>
 80036a6:	f01e fe89 	bl	80223bc <free>
    if (config->HostPort != NULL) free(config->HostPort);
 80036aa:	6860      	ldr	r0, [r4, #4]
 80036ac:	b108      	cbz	r0, 80036b2 <free_device_config+0x16>
 80036ae:	f01e fe85 	bl	80223bc <free>
    if (config->ConnSecurity != NULL) free(config->ConnSecurity);
 80036b2:	68a0      	ldr	r0, [r4, #8]
 80036b4:	b108      	cbz	r0, 80036ba <free_device_config+0x1e>
 80036b6:	f01e fe81 	bl	80223bc <free>
    if (config->MQClientId != NULL) free(config->MQClientId);
 80036ba:	68e0      	ldr	r0, [r4, #12]
 80036bc:	b108      	cbz	r0, 80036c2 <free_device_config+0x26>
 80036be:	f01e fe7d 	bl	80223bc <free>
    if (config->MQUserName != NULL) free(config->MQUserName);
 80036c2:	6920      	ldr	r0, [r4, #16]
 80036c4:	b108      	cbz	r0, 80036ca <free_device_config+0x2e>
 80036c6:	f01e fe79 	bl	80223bc <free>
    if (config->MQUserPwd != NULL) free(config->MQUserPwd);
 80036ca:	6960      	ldr	r0, [r4, #20]
 80036cc:	b108      	cbz	r0, 80036d2 <free_device_config+0x36>
 80036ce:	f01e fe75 	bl	80223bc <free>
#ifdef LITMUS_LOOP
    if (config->LoopTopicId != NULL) free(config->LoopTopicId);
#endif

    free(config);
 80036d2:	4620      	mov	r0, r4
  }
  else
  {
    msg_warning("Attemped to free a non-allocated config structure.\n");
  }
}
 80036d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(config);
 80036d8:	f01e be70 	b.w	80223bc <free>
}
 80036dc:	bd10      	pop	{r4, pc}
	...

080036e0 <parse_and_fill_device_config>:
{
 80036e0:	e92d 4a38 	stmdb	sp!, {r3, r4, r5, r9, fp, lr}
 80036e4:	4604      	mov	r4, r0
  if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 80036e6:	4608      	mov	r0, r1
{
 80036e8:	468b      	mov	fp, r1
  if (strlen(string) > USER_CONF_DEVICE_NAME_LENGTH)
 80036ea:	f7fc fd7b 	bl	80001e4 <strlen>
 80036ee:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80036f2:	d90d      	bls.n	8003710 <parse_and_fill_device_config+0x30>
    msg_error("Cannot parse the configuration string:  It is not null-terminated!\n");
 80036f4:	492c      	ldr	r1, [pc, #176]	; (80037a8 <parse_and_fill_device_config+0xc8>)
 80036f6:	482d      	ldr	r0, [pc, #180]	; (80037ac <parse_and_fill_device_config+0xcc>)
 80036f8:	f240 325e 	movw	r2, #862	; 0x35e
 80036fc:	f01f ffa0 	bl	8023640 <iprintf>
 8003700:	482b      	ldr	r0, [pc, #172]	; (80037b0 <parse_and_fill_device_config+0xd0>)
      msg_error("Null parameter\n");
 8003702:	f020 f839 	bl	8023778 <puts>
  int ret = -1;
 8003706:	f04f 35ff 	mov.w	r5, #4294967295
}
 800370a:	4628      	mov	r0, r5
 800370c:	e8bd 8a38 	ldmia.w	sp!, {r3, r4, r5, r9, fp, pc}
    if (pConfig == NULL)
 8003710:	b93c      	cbnz	r4, 8003722 <parse_and_fill_device_config+0x42>
      msg_error("Null parameter\n");
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <parse_and_fill_device_config+0xc8>)
 8003714:	4825      	ldr	r0, [pc, #148]	; (80037ac <parse_and_fill_device_config+0xcc>)
 8003716:	f44f 7259 	mov.w	r2, #868	; 0x364
 800371a:	f01f ff91 	bl	8023640 <iprintf>
 800371e:	4825      	ldr	r0, [pc, #148]	; (80037b4 <parse_and_fill_device_config+0xd4>)
 8003720:	e7ef      	b.n	8003702 <parse_and_fill_device_config+0x22>
      config = malloc(sizeof(device_config_t));
 8003722:	2018      	movs	r0, #24
 8003724:	f01e fe42 	bl	80223ac <malloc>
      memset(config, 0, sizeof(device_config_t));
 8003728:	2218      	movs	r2, #24
      config = malloc(sizeof(device_config_t));
 800372a:	4681      	mov	r9, r0
      memset(config, 0, sizeof(device_config_t));
 800372c:	2100      	movs	r1, #0
 800372e:	f01e fe83 	bl	8022438 <memset>
      ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 8003732:	4921      	ldr	r1, [pc, #132]	; (80037b8 <parse_and_fill_device_config+0xd8>)
 8003734:	465a      	mov	r2, fp
 8003736:	4648      	mov	r0, r9
 8003738:	f7ff ff7e 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 800373c:	491f      	ldr	r1, [pc, #124]	; (80037bc <parse_and_fill_device_config+0xdc>)
      ret = string_allocate_from_token(&config->HostName, "HostName=", string);
 800373e:	4605      	mov	r5, r0
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 8003740:	465a      	mov	r2, fp
 8003742:	f109 0004 	add.w	r0, r9, #4
 8003746:	f7ff ff77 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 800374a:	491d      	ldr	r1, [pc, #116]	; (80037c0 <parse_and_fill_device_config+0xe0>)
      ret |= string_allocate_from_token(&config->HostPort, "HostPort=", string);
 800374c:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 800374e:	465a      	mov	r2, fp
 8003750:	f109 0008 	add.w	r0, r9, #8
 8003754:	f7ff ff70 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003758:	491a      	ldr	r1, [pc, #104]	; (80037c4 <parse_and_fill_device_config+0xe4>)
      ret |= string_allocate_from_token(&config->ConnSecurity, "ConnSecurity=", string);
 800375a:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 800375c:	465a      	mov	r2, fp
 800375e:	f109 000c 	add.w	r0, r9, #12
 8003762:	f7ff ff69 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 8003766:	4918      	ldr	r1, [pc, #96]	; (80037c8 <parse_and_fill_device_config+0xe8>)
      ret |= string_allocate_from_token(&config->MQClientId, "MQClientId=", string);
 8003768:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 800376a:	465a      	mov	r2, fp
 800376c:	f109 0010 	add.w	r0, r9, #16
 8003770:	f7ff ff62 	bl	8003638 <string_allocate_from_token>
      ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 8003774:	4915      	ldr	r1, [pc, #84]	; (80037cc <parse_and_fill_device_config+0xec>)
      ret |= string_allocate_from_token(&config->MQUserName, "MQUserName=", string);
 8003776:	4305      	orrs	r5, r0
      ret |= string_allocate_from_token(&config->MQUserPwd, "MQUserPwd=", string);
 8003778:	465a      	mov	r2, fp
 800377a:	f109 0014 	add.w	r0, r9, #20
 800377e:	f7ff ff5b 	bl	8003638 <string_allocate_from_token>
      if (ret != 0)
 8003782:	4305      	orrs	r5, r0
 8003784:	d00c      	beq.n	80037a0 <parse_and_fill_device_config+0xc0>
        msg_error("Failed parsing the device configuration string.\n");
 8003786:	4908      	ldr	r1, [pc, #32]	; (80037a8 <parse_and_fill_device_config+0xc8>)
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <parse_and_fill_device_config+0xcc>)
 800378a:	f240 3277 	movw	r2, #887	; 0x377
 800378e:	f01f ff57 	bl	8023640 <iprintf>
 8003792:	480f      	ldr	r0, [pc, #60]	; (80037d0 <parse_and_fill_device_config+0xf0>)
 8003794:	f01f fff0 	bl	8023778 <puts>
        free_device_config(config);
 8003798:	4648      	mov	r0, r9
 800379a:	f7ff ff7f 	bl	800369c <free_device_config>
 800379e:	e7b4      	b.n	800370a <parse_and_fill_device_config+0x2a>
        *pConfig = config;
 80037a0:	f8c4 9000 	str.w	r9, [r4]
  return ret;
 80037a4:	e7b1      	b.n	800370a <parse_and_fill_device_config+0x2a>
 80037a6:	bf00      	nop
 80037a8:	08028498 	.word	0x08028498
 80037ac:	0802d9c5 	.word	0x0802d9c5
 80037b0:	0802efa7 	.word	0x0802efa7
 80037b4:	0802efea 	.word	0x0802efea
 80037b8:	0802eff9 	.word	0x0802eff9
 80037bc:	0802f003 	.word	0x0802f003
 80037c0:	0802f00d 	.word	0x0802f00d
 80037c4:	0802f01b 	.word	0x0802f01b
 80037c8:	0802f027 	.word	0x0802f027
 80037cc:	0802f033 	.word	0x0802f033
 80037d0:	0802f03e 	.word	0x0802f03e

080037d4 <app_needs_device_keypair>:
{
 80037d4:	b513      	push	{r0, r1, r4, lr}
  const char * config_string = NULL;
 80037d6:	2300      	movs	r3, #0
  if(getIoTDeviceConfig(&config_string) != 0)
 80037d8:	4668      	mov	r0, sp
  device_config_t * device_config = NULL;
 80037da:	e9cd 3300 	strd	r3, r3, [sp]
  if(getIoTDeviceConfig(&config_string) != 0)
 80037de:	f7fe f913 	bl	8001a08 <getIoTDeviceConfig>
 80037e2:	b150      	cbz	r0, 80037fa <app_needs_device_keypair+0x26>
    msg_error("Failed retrieving the device configuration string.\n");
 80037e4:	4911      	ldr	r1, [pc, #68]	; (800382c <app_needs_device_keypair+0x58>)
 80037e6:	4812      	ldr	r0, [pc, #72]	; (8003830 <app_needs_device_keypair+0x5c>)
 80037e8:	22c0      	movs	r2, #192	; 0xc0
 80037ea:	f01f ff29 	bl	8023640 <iprintf>
 80037ee:	4811      	ldr	r0, [pc, #68]	; (8003834 <app_needs_device_keypair+0x60>)
      msg_error("Could not parse the connection security settings from the configuration string.\n");
 80037f0:	f01f ffc2 	bl	8023778 <puts>
  conn_sec_t security = CONN_SEC_UNDEFINED;
 80037f4:	f04f 34ff 	mov.w	r4, #4294967295
 80037f8:	e00c      	b.n	8003814 <app_needs_device_keypair+0x40>
    if (parse_and_fill_device_config(&device_config, config_string) == 0)
 80037fa:	9900      	ldr	r1, [sp, #0]
 80037fc:	a801      	add	r0, sp, #4
 80037fe:	f7ff ff6f 	bl	80036e0 <parse_and_fill_device_config>
 8003802:	b960      	cbnz	r0, 800381e <app_needs_device_keypair+0x4a>
      security = (conn_sec_t) atoi(device_config->ConnSecurity);
 8003804:	9b01      	ldr	r3, [sp, #4]
 8003806:	6898      	ldr	r0, [r3, #8]
 8003808:	f01e fc9f 	bl	802214a <atoi>
 800380c:	b244      	sxtb	r4, r0
      free_device_config(device_config);
 800380e:	9801      	ldr	r0, [sp, #4]
 8003810:	f7ff ff44 	bl	800369c <free_device_config>
}
 8003814:	1ee3      	subs	r3, r4, #3
 8003816:	4258      	negs	r0, r3
 8003818:	4158      	adcs	r0, r3
 800381a:	b002      	add	sp, #8
 800381c:	bd10      	pop	{r4, pc}
      msg_error("Could not parse the connection security settings from the configuration string.\n");
 800381e:	4903      	ldr	r1, [pc, #12]	; (800382c <app_needs_device_keypair+0x58>)
 8003820:	4803      	ldr	r0, [pc, #12]	; (8003830 <app_needs_device_keypair+0x5c>)
 8003822:	22cb      	movs	r2, #203	; 0xcb
 8003824:	f01f ff0c 	bl	8023640 <iprintf>
 8003828:	4803      	ldr	r0, [pc, #12]	; (8003838 <app_needs_device_keypair+0x64>)
 800382a:	e7e1      	b.n	80037f0 <app_needs_device_keypair+0x1c>
 800382c:	080284b5 	.word	0x080284b5
 8003830:	0802d9c5 	.word	0x0802d9c5
 8003834:	0802f06e 	.word	0x0802f06e
 8003838:	0802f0a1 	.word	0x0802f0a1

0800383c <comp_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t comp_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 800383c:	b510      	push	{r4, lr}
  int32_t ret = 0;
  uint32_t wrap_end = 0;

  if (now < init)
 800383e:	4281      	cmp	r1, r0
  { /* Timer wrap-around detected */
    /* printf("Timer: wrap-around detected from %d to %d\n", init, now); */
    wrap_end = UINT32_MAX - init;
  }
  ret = wrap_end - (now - init) + timeout;
 8003840:	4402      	add	r2, r0
    wrap_end = UINT32_MAX - init;
 8003842:	bf34      	ite	cc
 8003844:	43c4      	mvncc	r4, r0
  uint32_t wrap_end = 0;
 8003846:	2400      	movcs	r4, #0
  ret = wrap_end - (now - init) + timeout;
 8003848:	1a53      	subs	r3, r2, r1

  return ret;
}
 800384a:	1918      	adds	r0, r3, r4
 800384c:	bd10      	pop	{r4, pc}
	...

08003850 <genericmqtt_client_XCube_sample_run>:
{
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  g_continueRunning = true;
 8003854:	4c85      	ldr	r4, [pc, #532]	; (8003a6c <genericmqtt_client_XCube_sample_run+0x21c>)
  memset(&pub_data, 0, sizeof(pub_data));
 8003856:	4886      	ldr	r0, [pc, #536]	; (8003a70 <genericmqtt_client_XCube_sample_run+0x220>)
{
 8003858:	b0d9      	sub	sp, #356	; 0x164
  const char * connectionString   = NULL;
 800385a:	2100      	movs	r1, #0
  g_continueRunning = true;
 800385c:	2301      	movs	r3, #1
  memset(&pub_data, 0, sizeof(pub_data));
 800385e:	2240      	movs	r2, #64	; 0x40
  device_config_t * device_config = NULL;
 8003860:	e9cd 1118 	strd	r1, r1, [sp, #96]	; 0x60
  const char * device_cert  = NULL;
 8003864:	e9cd 111a 	strd	r1, r1, [sp, #104]	; 0x68
  const char * device_key   = NULL;
 8003868:	911c      	str	r1, [sp, #112]	; 0x70
  g_continueRunning = true;
 800386a:	f884 325a 	strb.w	r3, [r4, #602]	; 0x25a
  g_publishData     = false;
 800386e:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
  g_statusChanged   = true;
 8003872:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
  g_reboot          = false;
 8003876:	f884 1259 	strb.w	r1, [r4, #601]	; 0x259
  g_connection_needed_score = 1;
 800387a:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
  memset(&pub_data, 0, sizeof(pub_data));
 800387e:	f01e fddb 	bl	8022438 <memset>
  ret = platform_init();
 8003882:	f7fd fc47 	bl	8001114 <platform_init>
  if (ret != 0)
 8003886:	b308      	cbz	r0, 80038cc <genericmqtt_client_XCube_sample_run+0x7c>
    msg_error("Failed to initialize the platform.\n");
 8003888:	497a      	ldr	r1, [pc, #488]	; (8003a74 <genericmqtt_client_XCube_sample_run+0x224>)
 800388a:	487b      	ldr	r0, [pc, #492]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 800388c:	f240 125b 	movw	r2, #347	; 0x15b
 8003890:	f01f fed6 	bl	8023640 <iprintf>
 8003894:	4879      	ldr	r0, [pc, #484]	; (8003a7c <genericmqtt_client_XCube_sample_run+0x22c>)
 8003896:	f01f ff6f 	bl	8023778 <puts>
    msg_error("Cannot retrieve the connection string from the user configuration storage.\n");
 800389a:	4976      	ldr	r1, [pc, #472]	; (8003a74 <genericmqtt_client_XCube_sample_run+0x224>)
 800389c:	4876      	ldr	r0, [pc, #472]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 800389e:	f240 1267 	movw	r2, #359	; 0x167
 80038a2:	f01f fecd 	bl	8023640 <iprintf>
 80038a6:	4876      	ldr	r0, [pc, #472]	; (8003a80 <genericmqtt_client_XCube_sample_run+0x230>)
 80038a8:	f01f ff66 	bl	8023778 <puts>
  free_device_config(device_config);
 80038ac:	9819      	ldr	r0, [sp, #100]	; 0x64
 80038ae:	f7ff fef5 	bl	800369c <free_device_config>
  platform_deinit();
 80038b2:	f7fd fcff 	bl	80012b4 <platform_deinit>
  if(g_reboot == true)
 80038b6:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 80038ba:	b123      	cbz	r3, 80038c6 <genericmqtt_client_XCube_sample_run+0x76>
    msg_info("Calling HAL_NVIC_SystemReset()\n");
 80038bc:	4871      	ldr	r0, [pc, #452]	; (8003a84 <genericmqtt_client_XCube_sample_run+0x234>)
 80038be:	f01f ff5b 	bl	8023778 <puts>
    HAL_NVIC_SystemReset();
 80038c2:	f005 f9d5 	bl	8008c70 <HAL_NVIC_SystemReset>
}
 80038c6:	b059      	add	sp, #356	; 0x164
 80038c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = (getIoTDeviceConfig(&connectionString) != 0);
 80038cc:	a818      	add	r0, sp, #96	; 0x60
 80038ce:	f7fe f89b 	bl	8001a08 <getIoTDeviceConfig>
    ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 80038d2:	9918      	ldr	r1, [sp, #96]	; 0x60
    ret = (getIoTDeviceConfig(&connectionString) != 0);
 80038d4:	4605      	mov	r5, r0
    ret |= (parse_and_fill_device_config(&device_config, connectionString) != 0);
 80038d6:	a819      	add	r0, sp, #100	; 0x64
 80038d8:	f7ff ff02 	bl	80036e0 <parse_and_fill_device_config>
    connection_security = (conn_sec_t) atoi(device_config->ConnSecurity);
 80038dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038de:	4305      	orrs	r5, r0
 80038e0:	6898      	ldr	r0, [r3, #8]
 80038e2:	f01e fc32 	bl	802214a <atoi>
 80038e6:	b247      	sxtb	r7, r0
  if (ret != 0)
 80038e8:	2d00      	cmp	r5, #0
 80038ea:	d1d6      	bne.n	800389a <genericmqtt_client_XCube_sample_run+0x4a>
    net_macaddr_t mac = { 0 };
 80038ec:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <genericmqtt_client_XCube_sample_run+0x238>)
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 80038ee:	4d67      	ldr	r5, [pc, #412]	; (8003a8c <genericmqtt_client_XCube_sample_run+0x23c>)
    net_macaddr_t mac = { 0 };
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	901e      	str	r0, [sp, #120]	; 0x78
 80038f4:	889b      	ldrh	r3, [r3, #4]
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 80038f6:	6828      	ldr	r0, [r5, #0]
    net_macaddr_t mac = { 0 };
 80038f8:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
    if (net_get_mac_address(hnet, &mac) == NET_OK)
 80038fc:	a91e      	add	r1, sp, #120	; 0x78
 80038fe:	f7fe fa43 	bl	8001d88 <net_get_mac_address>
 8003902:	46a8      	mov	r8, r5
 8003904:	2800      	cmp	r0, #0
 8003906:	d171      	bne.n	80039ec <genericmqtt_client_XCube_sample_run+0x19c>
      snprintf(status_data.mac, MODEL_MAC_SIZE - 1, "%02X%02X%02X%02X%02X%02X",
 8003908:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4a5a      	ldr	r2, [pc, #360]	; (8003a90 <genericmqtt_client_XCube_sample_run+0x240>)
 8003928:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800392c:	4859      	ldr	r0, [pc, #356]	; (8003a94 <genericmqtt_client_XCube_sample_run+0x244>)
 800392e:	210c      	movs	r1, #12
 8003930:	f01f ff70 	bl	8023814 <sniprintf>
    strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 8003934:	4e57      	ldr	r6, [pc, #348]	; (8003a94 <genericmqtt_client_XCube_sample_run+0x244>)
 8003936:	484e      	ldr	r0, [pc, #312]	; (8003a70 <genericmqtt_client_XCube_sample_run+0x220>)
        msg_error("net_sock_destroy() failed.\n");
 8003938:	4d4e      	ldr	r5, [pc, #312]	; (8003a74 <genericmqtt_client_XCube_sample_run+0x224>)
    strncpy(pub_data.mac, status_data.mac, MODEL_MAC_SIZE - 1);
 800393a:	220c      	movs	r2, #12
 800393c:	4631      	mov	r1, r6
 800393e:	f020 f855 	bl	80239ec <strncpy>
    status_data.TelemetryInterval = MODEL_DEFAULT_TELEMETRYINTERVAL;
 8003942:	2f00      	cmp	r7, #0
 8003944:	f04f 030f 	mov.w	r3, #15
 8003948:	6133      	str	r3, [r6, #16]
 800394a:	bf0c      	ite	eq
 800394c:	f04f 0b01 	moveq.w	fp, #1
 8003950:	f04f 0b02 	movne.w	fp, #2
      if ( (net_get_ip_address(hnet, &ip) == NET_ERR) || (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) )
 8003954:	f8d8 0000 	ldr.w	r0, [r8]
 8003958:	a923      	add	r1, sp, #140	; 0x8c
 800395a:	f7fe f9e5 	bl	8001d28 <net_get_ip_address>
 800395e:	3001      	adds	r0, #1
 8003960:	d04a      	beq.n	80039f8 <genericmqtt_client_XCube_sample_run+0x1a8>
 8003962:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003966:	2b03      	cmp	r3, #3
 8003968:	dc69      	bgt.n	8003a3e <genericmqtt_client_XCube_sample_run+0x1ee>
      ret = net_sock_create(hnet, &socket, (connection_security == CONN_SEC_NONE) ? NET_PROTO_TCP :NET_PROTO_TLS);
 800396a:	f8d8 0000 	ldr.w	r0, [r8]
 800396e:	465a      	mov	r2, fp
 8003970:	a91d      	add	r1, sp, #116	; 0x74
 8003972:	f7fe fa33 	bl	8001ddc <net_sock_create>
      if (ret != NET_OK)
 8003976:	4681      	mov	r9, r0
 8003978:	2800      	cmp	r0, #0
 800397a:	d06d      	beq.n	8003a58 <genericmqtt_client_XCube_sample_run+0x208>
        msg_error("Could not create the socket.\n");
 800397c:	483e      	ldr	r0, [pc, #248]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 800397e:	f240 1299 	movw	r2, #409	; 0x199
 8003982:	4629      	mov	r1, r5
 8003984:	f01f fe5c 	bl	8023640 <iprintf>
 8003988:	4843      	ldr	r0, [pc, #268]	; (8003a98 <genericmqtt_client_XCube_sample_run+0x248>)
 800398a:	f01f fef5 	bl	8023778 <puts>
        msg_error("Could not retrieve the security connection settings and set the socket options.\n");
 800398e:	483a      	ldr	r0, [pc, #232]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 8003990:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8003994:	4629      	mov	r1, r5
 8003996:	f01f fe53 	bl	8023640 <iprintf>
 800399a:	4840      	ldr	r0, [pc, #256]	; (8003a9c <genericmqtt_client_XCube_sample_run+0x24c>)
 800399c:	f01f feec 	bl	8023778 <puts>
        msg_error("Could not open the socket at %s port %d.\n", device_config->HostName, atoi(device_config->HostPort));
 80039a0:	f240 12c7 	movw	r2, #455	; 0x1c7
 80039a4:	4629      	mov	r1, r5
 80039a6:	4834      	ldr	r0, [pc, #208]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 80039a8:	f01f fe4a 	bl	8023640 <iprintf>
 80039ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	6858      	ldr	r0, [r3, #4]
 80039b2:	9116      	str	r1, [sp, #88]	; 0x58
 80039b4:	f01e fbc9 	bl	802214a <atoi>
 80039b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80039ba:	4602      	mov	r2, r0
 80039bc:	4838      	ldr	r0, [pc, #224]	; (8003aa0 <genericmqtt_client_XCube_sample_run+0x250>)
 80039be:	f01f fe3f 	bl	8023640 <iprintf>
        g_connection_needed_score++;
 80039c2:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
        HAL_Delay(1000);
 80039c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        g_connection_needed_score++;
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
        HAL_Delay(1000);
 80039d0:	f005 f8f0 	bl	8008bb4 <HAL_Delay>
      if (NET_OK != net_sock_destroy(socket))
 80039d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80039d6:	f7fe fae3 	bl	8001fa0 <net_sock_destroy>
 80039da:	b330      	cbz	r0, 8003a2a <genericmqtt_client_XCube_sample_run+0x1da>
        msg_error("net_sock_destroy() failed.\n");
 80039dc:	4826      	ldr	r0, [pc, #152]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 80039de:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80039e2:	4629      	mov	r1, r5
 80039e4:	f01f fe2c 	bl	8023640 <iprintf>
 80039e8:	482e      	ldr	r0, [pc, #184]	; (8003aa4 <genericmqtt_client_XCube_sample_run+0x254>)
 80039ea:	e01c      	b.n	8003a26 <genericmqtt_client_XCube_sample_run+0x1d6>
      snprintf(status_data.mac, MODEL_MAC_SIZE - 1, "MyDevice-UnknownMAC");
 80039ec:	4a2e      	ldr	r2, [pc, #184]	; (8003aa8 <genericmqtt_client_XCube_sample_run+0x258>)
 80039ee:	4829      	ldr	r0, [pc, #164]	; (8003a94 <genericmqtt_client_XCube_sample_run+0x244>)
 80039f0:	210c      	movs	r1, #12
 80039f2:	f01f ff0f 	bl	8023814 <sniprintf>
 80039f6:	e79d      	b.n	8003934 <genericmqtt_client_XCube_sample_run+0xe4>
        msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 80039f8:	f8d4 225c 	ldr.w	r2, [r4, #604]	; 0x25c
 80039fc:	492b      	ldr	r1, [pc, #172]	; (8003aac <genericmqtt_client_XCube_sample_run+0x25c>)
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <genericmqtt_client_XCube_sample_run+0x260>)
 8003a00:	2a03      	cmp	r2, #3
 8003a02:	bfd8      	it	le
 8003a04:	4619      	movle	r1, r3
 8003a06:	482b      	ldr	r0, [pc, #172]	; (8003ab4 <genericmqtt_client_XCube_sample_run+0x264>)
 8003a08:	f01f fe1a 	bl	8023640 <iprintf>
        if (net_reinit(hnet, (net_if_reinit)) != 0)
 8003a0c:	492a      	ldr	r1, [pc, #168]	; (8003ab8 <genericmqtt_client_XCube_sample_run+0x268>)
 8003a0e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a12:	f7fe f96b 	bl	8001cec <net_reinit>
 8003a16:	b1a0      	cbz	r0, 8003a42 <genericmqtt_client_XCube_sample_run+0x1f2>
          msg_error("Netif re-initialization failed.\n");
 8003a18:	4817      	ldr	r0, [pc, #92]	; (8003a78 <genericmqtt_client_XCube_sample_run+0x228>)
 8003a1a:	f240 128b 	movw	r2, #395	; 0x18b
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f01f fe0e 	bl	8023640 <iprintf>
 8003a24:	4825      	ldr	r0, [pc, #148]	; (8003abc <genericmqtt_client_XCube_sample_run+0x26c>)
        msg_error("net_sock_destroy() failed.\n");
 8003a26:	f01f fea7 	bl	8023778 <puts>
    } while (!g_reboot && (g_connection_needed_score > 0));
 8003a2a:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f47f af3c 	bne.w	80038ac <genericmqtt_client_XCube_sample_run+0x5c>
 8003a34:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	dc8b      	bgt.n	8003954 <genericmqtt_client_XCube_sample_run+0x104>
 8003a3c:	e736      	b.n	80038ac <genericmqtt_client_XCube_sample_run+0x5c>
        msg_info("Network link %s down. Trying to reconnect.\n", (g_connection_needed_score > MAX_SOCKET_ERRORS_BEFORE_NETIF_RESET) ? "may be" : "");
 8003a3e:	491b      	ldr	r1, [pc, #108]	; (8003aac <genericmqtt_client_XCube_sample_run+0x25c>)
 8003a40:	e7e1      	b.n	8003a06 <genericmqtt_client_XCube_sample_run+0x1b6>
          msg_info("Netif re-initialized successfully.\n");
 8003a42:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <genericmqtt_client_XCube_sample_run+0x270>)
 8003a44:	f01f fe98 	bl	8023778 <puts>
          HAL_Delay(1000);
 8003a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a4c:	f005 f8b2 	bl	8008bb4 <HAL_Delay>
          g_connection_needed_score = 1;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003a56:	e788      	b.n	800396a <genericmqtt_client_XCube_sample_run+0x11a>
        switch(connection_security)
 8003a58:	2f03      	cmp	r7, #3
 8003a5a:	f200 8150 	bhi.w	8003cfe <genericmqtt_client_XCube_sample_run+0x4ae>
 8003a5e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8003a62:	0075      	.short	0x0075
 8003a64:	012f00ff 	.word	0x012f00ff
 8003a68:	0031      	.short	0x0031
 8003a6a:	bf00      	nop
 8003a6c:	20000834 	.word	0x20000834
 8003a70:	20000024 	.word	0x20000024
 8003a74:	080284ce 	.word	0x080284ce
 8003a78:	0802d9c5 	.word	0x0802d9c5
 8003a7c:	0802f109 	.word	0x0802f109
 8003a80:	0802f12c 	.word	0x0802f12c
 8003a84:	0802f5c0 	.word	0x0802f5c0
 8003a88:	080284f2 	.word	0x080284f2
 8003a8c:	200011e0 	.word	0x200011e0
 8003a90:	0802f177 	.word	0x0802f177
 8003a94:	2000000c 	.word	0x2000000c
 8003a98:	0802e939 	.word	0x0802e939
 8003a9c:	0802f23b 	.word	0x0802f23b
 8003aa0:	0802f28b 	.word	0x0802f28b
 8003aa4:	0802e7f8 	.word	0x0802e7f8
 8003aa8:	0802f190 	.word	0x0802f190
 8003aac:	0802f0f1 	.word	0x0802f0f1
 8003ab0:	080303e5 	.word	0x080303e5
 8003ab4:	0802f1a4 	.word	0x0802f1a4
 8003ab8:	0800337d 	.word	0x0800337d
 8003abc:	0802f1d0 	.word	0x0802f1d0
 8003ac0:	0802f1f0 	.word	0x0802f1f0
            ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0) )
 8003ac4:	f7fd fe88 	bl	80017d8 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f040 80c1 	bne.w	8003c50 <genericmqtt_client_XCube_sample_run+0x400>
 8003ace:	aa1c      	add	r2, sp, #112	; 0x70
 8003ad0:	a91b      	add	r1, sp, #108	; 0x6c
 8003ad2:	a81a      	add	r0, sp, #104	; 0x68
 8003ad4:	f7fd ffd4 	bl	8001a80 <getTLSKeys>
 8003ad8:	f1b0 0900 	subs.w	r9, r0, #0
 8003adc:	bf18      	it	ne
 8003ade:	f04f 0901 	movne.w	r9, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	9216      	str	r2, [sp, #88]	; 0x58
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f7fc fb7b 	bl	80001e4 <strlen>
 8003aee:	4999      	ldr	r1, [pc, #612]	; (8003d54 <genericmqtt_client_XCube_sample_run+0x504>)
 8003af0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003af6:	f7fe f99d 	bl	8001e34 <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003afa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003afc:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003afe:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fc fb6e 	bl	80001e4 <strlen>
 8003b08:	4993      	ldr	r1, [pc, #588]	; (8003d58 <genericmqtt_client_XCube_sample_run+0x508>)
 8003b0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b10:	f7fe f990 	bl	8001e34 <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003b16:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b18:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7fc fb61 	bl	80001e4 <strlen>
 8003b22:	498e      	ldr	r1, [pc, #568]	; (8003d5c <genericmqtt_client_XCube_sample_run+0x50c>)
 8003b24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b26:	1c43      	adds	r3, r0, #1
 8003b28:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b2a:	f7fe f983 	bl	8001e34 <net_sock_setopt>
            ret |= net_sock_setopt(socket, "tls_dev_key",     (void *) device_key,              strlen(device_key) + 1);
 8003b2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003b30:	9216      	str	r2, [sp, #88]	; 0x58
            ret |= net_sock_setopt(socket, "tls_dev_cert",    (void *) device_cert,             strlen(device_cert) + 1);
 8003b32:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_dev_key",     (void *) device_key,              strlen(device_key) + 1);
 8003b36:	4610      	mov	r0, r2
 8003b38:	f7fc fb54 	bl	80001e4 <strlen>
 8003b3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003b3e:	4988      	ldr	r1, [pc, #544]	; (8003d60 <genericmqtt_client_XCube_sample_run+0x510>)
 8003b40:	1c43      	adds	r3, r0, #1
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003b42:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b44:	f7fe f976 	bl	8001e34 <net_sock_setopt>
 8003b48:	ea49 0900 	orr.w	r9, r9, r0
        ret |= net_sock_setopt(socket, "sock_noblocking", NULL, 0);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	461a      	mov	r2, r3
 8003b50:	4984      	ldr	r1, [pc, #528]	; (8003d64 <genericmqtt_client_XCube_sample_run+0x514>)
 8003b52:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003b54:	f7fe f96e 	bl	8001e34 <net_sock_setopt>
      if (ret != NET_OK)
 8003b58:	ea59 0300 	orrs.w	r3, r9, r0
 8003b5c:	f47f af17 	bne.w	800398e <genericmqtt_client_XCube_sample_run+0x13e>
        ret = net_sock_open(socket, device_config->HostName, atoi(device_config->HostPort), 0);
 8003b60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003b62:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
 8003b66:	6811      	ldr	r1, [r2, #0]
 8003b68:	6850      	ldr	r0, [r2, #4]
 8003b6a:	9317      	str	r3, [sp, #92]	; 0x5c
 8003b6c:	9116      	str	r1, [sp, #88]	; 0x58
 8003b6e:	f01e faec 	bl	802214a <atoi>
 8003b72:	e9dd 1316 	ldrd	r1, r3, [sp, #88]	; 0x58
 8003b76:	4602      	mov	r2, r0
 8003b78:	4648      	mov	r0, r9
 8003b7a:	f7fe f955 	bl	8001e28 <net_sock_open>
      if (ret != NET_OK)
 8003b7e:	4681      	mov	r9, r0
 8003b80:	2800      	cmp	r0, #0
 8003b82:	f47f af0d 	bne.w	80039a0 <genericmqtt_client_XCube_sample_run+0x150>
        network.my_socket = socket;
 8003b86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b88:	9320      	str	r3, [sp, #128]	; 0x80
        network.mqttread = (network_read);
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <genericmqtt_client_XCube_sample_run+0x518>)
        MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT,
 8003b8c:	4a77      	ldr	r2, [pc, #476]	; (8003d6c <genericmqtt_client_XCube_sample_run+0x51c>)
        network.mqttread = (network_read);
 8003b8e:	9321      	str	r3, [sp, #132]	; 0x84
        network.mqttwrite = (network_write);
 8003b90:	4b77      	ldr	r3, [pc, #476]	; (8003d70 <genericmqtt_client_XCube_sample_run+0x520>)
 8003b92:	9322      	str	r3, [sp, #136]	; 0x88
        MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT,
 8003b94:	f44f 7316 	mov.w	r3, #600	; 0x258
 8003b98:	e9cd 3200 	strd	r3, r2, [sp]
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	a920      	add	r1, sp, #128	; 0x80
 8003ba0:	f5a2 7316 	sub.w	r3, r2, #600	; 0x258
 8003ba4:	a83e      	add	r0, sp, #248	; 0xf8
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	f008 ffd8 	bl	800cb5e <MQTTClientInit>
        MQTTPacket_connectData options = MQTTPacket_connectData_initializer;
 8003bae:	4971      	ldr	r1, [pc, #452]	; (8003d74 <genericmqtt_client_XCube_sample_run+0x524>)
 8003bb0:	2258      	movs	r2, #88	; 0x58
 8003bb2:	a828      	add	r0, sp, #160	; 0xa0
 8003bb4:	f01e fc18 	bl	80223e8 <memcpy>
        options.clientID.cstring = device_config->MQClientId;
 8003bb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	922b      	str	r2, [sp, #172]	; 0xac
        ret = MQTTConnect(&client, &options);
 8003bbe:	a928      	add	r1, sp, #160	; 0xa0
        options.username.cstring = device_config->MQUserName;
 8003bc0:	691a      	ldr	r2, [r3, #16]
        options.password.cstring = device_config->MQUserPwd;
 8003bc2:	695b      	ldr	r3, [r3, #20]
        options.username.cstring = device_config->MQUserName;
 8003bc4:	9238      	str	r2, [sp, #224]	; 0xe0
        ret = MQTTConnect(&client, &options);
 8003bc6:	a83e      	add	r0, sp, #248	; 0xf8
        options.password.cstring = device_config->MQUserPwd;
 8003bc8:	933b      	str	r3, [sp, #236]	; 0xec
        ret = MQTTConnect(&client, &options);
 8003bca:	f009 f84f 	bl	800cc6c <MQTTConnect>
        if (ret != 0)
 8003bce:	4682      	mov	sl, r0
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f000 809f 	beq.w	8003d14 <genericmqtt_client_XCube_sample_run+0x4c4>
          msg_error("MQTTConnect() failed: %d\n", ret);
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	4867      	ldr	r0, [pc, #412]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003bda:	f240 12df 	movw	r2, #479	; 0x1df
 8003bde:	f01f fd2f 	bl	8023640 <iprintf>
 8003be2:	4866      	ldr	r0, [pc, #408]	; (8003d7c <genericmqtt_client_XCube_sample_run+0x52c>)
 8003be4:	4651      	mov	r1, sl
 8003be6:	f01f fd2b 	bl	8023640 <iprintf>
          msg_error("Failed subscribing to the %s topic.\n", mqtt_subtopic);
 8003bea:	4629      	mov	r1, r5
 8003bec:	4862      	ldr	r0, [pc, #392]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003bee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf2:	f01f fd25 	bl	8023640 <iprintf>
 8003bf6:	4962      	ldr	r1, [pc, #392]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003bf8:	4862      	ldr	r0, [pc, #392]	; (8003d84 <genericmqtt_client_XCube_sample_run+0x534>)
 8003bfa:	f01f fd21 	bl	8023640 <iprintf>
          msg_error("Yield failed.\n");
 8003bfe:	485e      	ldr	r0, [pc, #376]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c00:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8003c04:	4629      	mov	r1, r5
 8003c06:	f01f fd1b 	bl	8023640 <iprintf>
 8003c0a:	485f      	ldr	r0, [pc, #380]	; (8003d88 <genericmqtt_client_XCube_sample_run+0x538>)
 8003c0c:	f01f fdb4 	bl	8023778 <puts>
        if (b_mqtt_connected == true)
 8003c10:	f1b9 0f00 	cmp.w	r9, #0
 8003c14:	d00c      	beq.n	8003c30 <genericmqtt_client_XCube_sample_run+0x3e0>
          ret = MQTTDisconnect(&client);
 8003c16:	a83e      	add	r0, sp, #248	; 0xf8
 8003c18:	f009 f928 	bl	800ce6c <MQTTDisconnect>
          if (ret != MQSUCCESS)
 8003c1c:	b140      	cbz	r0, 8003c30 <genericmqtt_client_XCube_sample_run+0x3e0>
            msg_error("MQTTDisconnect() failed.\n");
 8003c1e:	4856      	ldr	r0, [pc, #344]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c20:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003c24:	4629      	mov	r1, r5
 8003c26:	f01f fd0b 	bl	8023640 <iprintf>
 8003c2a:	4858      	ldr	r0, [pc, #352]	; (8003d8c <genericmqtt_client_XCube_sample_run+0x53c>)
 8003c2c:	f01f fda4 	bl	8023778 <puts>
        if (NET_OK !=  net_sock_close(socket))
 8003c30:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c32:	f7fe f9af 	bl	8001f94 <net_sock_close>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	f43f aecc 	beq.w	80039d4 <genericmqtt_client_XCube_sample_run+0x184>
          msg_error("net_sock_close() failed.\n");
 8003c3c:	f240 3206 	movw	r2, #774	; 0x306
 8003c40:	4629      	mov	r1, r5
 8003c42:	484d      	ldr	r0, [pc, #308]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003c44:	f01f fcfc 	bl	8023640 <iprintf>
 8003c48:	4851      	ldr	r0, [pc, #324]	; (8003d90 <genericmqtt_client_XCube_sample_run+0x540>)
 8003c4a:	f01f fd95 	bl	8023778 <puts>
 8003c4e:	e6c1      	b.n	80039d4 <genericmqtt_client_XCube_sample_run+0x184>
            ret |= ((checkTLSRootCA() != 0) && (checkTLSDeviceConfig() != 0) )
 8003c50:	f7fd fdda 	bl	8001808 <checkTLSDeviceConfig>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	f43f af3a 	beq.w	8003ace <genericmqtt_client_XCube_sample_run+0x27e>
              || (getTLSKeys(&ca_cert, &device_cert, &device_key) != 0);
 8003c5a:	f04f 0901 	mov.w	r9, #1
 8003c5e:	e740      	b.n	8003ae2 <genericmqtt_client_XCube_sample_run+0x292>
            ret |= net_sock_setopt(socket, "tls_server_noverification", NULL, 0);
 8003c60:	2300      	movs	r3, #0
 8003c62:	461a      	mov	r2, r3
 8003c64:	494b      	ldr	r1, [pc, #300]	; (8003d94 <genericmqtt_client_XCube_sample_run+0x544>)
 8003c66:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c68:	f7fe f8e4 	bl	8001e34 <net_sock_setopt>
 8003c6c:	4682      	mov	sl, r0
            ret |= (checkTLSRootCA() != 0)
 8003c6e:	f7fd fdb3 	bl	80017d8 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003c72:	4602      	mov	r2, r0
 8003c74:	bb08      	cbnz	r0, 8003cba <genericmqtt_client_XCube_sample_run+0x46a>
 8003c76:	4601      	mov	r1, r0
 8003c78:	a81a      	add	r0, sp, #104	; 0x68
 8003c7a:	f7fd ff01 	bl	8001a80 <getTLSKeys>
 8003c7e:	f1b0 0900 	subs.w	r9, r0, #0
 8003c82:	bf18      	it	ne
 8003c84:	f04f 0901 	movne.w	r9, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	9216      	str	r2, [sp, #88]	; 0x58
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f7fc faa8 	bl	80001e4 <strlen>
 8003c94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003c96:	492f      	ldr	r1, [pc, #188]	; (8003d54 <genericmqtt_client_XCube_sample_run+0x504>)
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c9c:	f7fe f8ca 	bl	8001e34 <net_sock_setopt>
 8003ca0:	ea49 0000 	orr.w	r0, r9, r0
 8003ca4:	ea40 090a 	orr.w	r9, r0, sl
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003ca8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003caa:	9216      	str	r2, [sp, #88]	; 0x58
 8003cac:	4610      	mov	r0, r2
 8003cae:	f7fc fa99 	bl	80001e4 <strlen>
 8003cb2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003cb4:	4928      	ldr	r1, [pc, #160]	; (8003d58 <genericmqtt_client_XCube_sample_run+0x508>)
 8003cb6:	1c43      	adds	r3, r0, #1
 8003cb8:	e743      	b.n	8003b42 <genericmqtt_client_XCube_sample_run+0x2f2>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cba:	f04f 0901 	mov.w	r9, #1
 8003cbe:	e7e3      	b.n	8003c88 <genericmqtt_client_XCube_sample_run+0x438>
            ret |= (checkTLSRootCA() != 0)
 8003cc0:	f7fd fd8a 	bl	80017d8 <checkTLSRootCA>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	b9b8      	cbnz	r0, 8003cf8 <genericmqtt_client_XCube_sample_run+0x4a8>
 8003cc8:	4601      	mov	r1, r0
 8003cca:	a81a      	add	r0, sp, #104	; 0x68
 8003ccc:	f7fd fed8 	bl	8001a80 <getTLSKeys>
 8003cd0:	f1b0 0900 	subs.w	r9, r0, #0
 8003cd4:	bf18      	it	ne
 8003cd6:	f04f 0901 	movne.w	r9, #1
            ret |= net_sock_setopt(socket, "tls_server_name", (void *) device_config->HostName, strlen(device_config->HostName) + 1);
 8003cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	9216      	str	r2, [sp, #88]	; 0x58
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7fc fa7f 	bl	80001e4 <strlen>
 8003ce6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003ce8:	491a      	ldr	r1, [pc, #104]	; (8003d54 <genericmqtt_client_XCube_sample_run+0x504>)
 8003cea:	1c43      	adds	r3, r0, #1
 8003cec:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003cee:	f7fe f8a1 	bl	8001e34 <net_sock_setopt>
 8003cf2:	ea49 0900 	orr.w	r9, r9, r0
            ret |= net_sock_setopt(socket, "tls_ca_certs",    (void *) ca_cert,                 strlen(ca_cert) + 1);
 8003cf6:	e7d7      	b.n	8003ca8 <genericmqtt_client_XCube_sample_run+0x458>
              || (getTLSKeys(&ca_cert, NULL, NULL) != 0);
 8003cf8:	f04f 0901 	mov.w	r9, #1
 8003cfc:	e7ed      	b.n	8003cda <genericmqtt_client_XCube_sample_run+0x48a>
            msg_error("Invalid connection security mode. - %d\n", connection_security);
 8003cfe:	4629      	mov	r1, r5
 8003d00:	f240 12b7 	movw	r2, #439	; 0x1b7
 8003d04:	481c      	ldr	r0, [pc, #112]	; (8003d78 <genericmqtt_client_XCube_sample_run+0x528>)
 8003d06:	f01f fc9b 	bl	8023640 <iprintf>
 8003d0a:	4639      	mov	r1, r7
 8003d0c:	4822      	ldr	r0, [pc, #136]	; (8003d98 <genericmqtt_client_XCube_sample_run+0x548>)
 8003d0e:	f01f fc97 	bl	8023640 <iprintf>
 8003d12:	e71b      	b.n	8003b4c <genericmqtt_client_XCube_sample_run+0x2fc>
          snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003d14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <genericmqtt_client_XCube_sample_run+0x54c>)
 8003d18:	68db      	ldr	r3, [r3, #12]
          g_connection_needed_score = 0;
 8003d1a:	f8c4 025c 	str.w	r0, [r4, #604]	; 0x25c
          snprintf(mqtt_subtopic, MQTT_TOPIC_BUFFER_SIZE, "/devices/%s/control", device_config->MQClientId);
 8003d1e:	2164      	movs	r1, #100	; 0x64
 8003d20:	4817      	ldr	r0, [pc, #92]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d22:	f01f fd77 	bl	8023814 <sniprintf>
          ret = MQTTSubscribe(&client, mqtt_subtopic, QOS0, (allpurposeMessageHandler));
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <genericmqtt_client_XCube_sample_run+0x550>)
 8003d28:	4915      	ldr	r1, [pc, #84]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d2a:	4652      	mov	r2, sl
 8003d2c:	a83e      	add	r0, sp, #248	; 0xf8
 8003d2e:	f009 f831 	bl	800cd94 <MQTTSubscribe>
        if (ret != MQSUCCESS)
 8003d32:	b110      	cbz	r0, 8003d3a <genericmqtt_client_XCube_sample_run+0x4ea>
          b_mqtt_connected = true;
 8003d34:	f04f 0901 	mov.w	r9, #1
 8003d38:	e757      	b.n	8003bea <genericmqtt_client_XCube_sample_run+0x39a>
          msg_info("Subscribed to %s.\n", mqtt_subtopic);
 8003d3a:	4911      	ldr	r1, [pc, #68]	; (8003d80 <genericmqtt_client_XCube_sample_run+0x530>)
 8003d3c:	4819      	ldr	r0, [pc, #100]	; (8003da4 <genericmqtt_client_XCube_sample_run+0x554>)
 8003d3e:	f01f fc7f 	bl	8023640 <iprintf>
          ret = MQTTYield(&client, 500);
 8003d42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d46:	a83e      	add	r0, sp, #248	; 0xf8
 8003d48:	f008 ff29 	bl	800cb9e <MQTTYield>
        if (ret != MQSUCCESS)
 8003d4c:	b360      	cbz	r0, 8003da8 <genericmqtt_client_XCube_sample_run+0x558>
          b_mqtt_connected = true;
 8003d4e:	f04f 0901 	mov.w	r9, #1
 8003d52:	e754      	b.n	8003bfe <genericmqtt_client_XCube_sample_run+0x3ae>
 8003d54:	0802e229 	.word	0x0802e229
 8003d58:	0802e1c5 	.word	0x0802e1c5
 8003d5c:	0802e1d2 	.word	0x0802e1d2
 8003d60:	0802e1df 	.word	0x0802e1df
 8003d64:	0802e247 	.word	0x0802e247
 8003d68:	080033fd 	.word	0x080033fd
 8003d6c:	20000cec 	.word	0x20000cec
 8003d70:	08003431 	.word	0x08003431
 8003d74:	080284f8 	.word	0x080284f8
 8003d78:	0802d9c5 	.word	0x0802d9c5
 8003d7c:	0802f2b5 	.word	0x0802f2b5
 8003d80:	20000f44 	.word	0x20000f44
 8003d84:	0802f2e3 	.word	0x0802f2e3
 8003d88:	0802f31b 	.word	0x0802f31b
 8003d8c:	0802f58e 	.word	0x0802f58e
 8003d90:	0802f5a7 	.word	0x0802f5a7
 8003d94:	0802e20f 	.word	0x0802e20f
 8003d98:	0802f213 	.word	0x0802f213
 8003d9c:	0802f2cf 	.word	0x0802f2cf
 8003da0:	08003465 	.word	0x08003465
 8003da4:	0802f308 	.word	0x0802f308
          uint32_t last_telemetry_time_ms = HAL_GetTick();
 8003da8:	f004 fefe 	bl	8008ba8 <HAL_GetTick>
 8003dac:	4681      	mov	r9, r0
            uint8_t command = Button_WaitForMultiPush(500);
 8003dae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003db2:	f000 fa0f 	bl	80041d4 <Button_WaitForMultiPush>
            if (command == BP_MULTIPLE_PUSH)                  /* If long button push, toggle the telemetry publication. */
 8003db6:	2802      	cmp	r0, #2
            uint8_t command = Button_WaitForMultiPush(500);
 8003db8:	4682      	mov	sl, r0
            if (command == BP_MULTIPLE_PUSH)                  /* If long button push, toggle the telemetry publication. */
 8003dba:	d10e      	bne.n	8003dda <genericmqtt_client_XCube_sample_run+0x58a>
              g_publishData = !g_publishData;
 8003dbc:	f894 125b 	ldrb.w	r1, [r4, #603]	; 0x25b
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dc0:	4b91      	ldr	r3, [pc, #580]	; (8004008 <genericmqtt_client_XCube_sample_run+0x7b8>)
 8003dc2:	4a92      	ldr	r2, [pc, #584]	; (800400c <genericmqtt_client_XCube_sample_run+0x7bc>)
 8003dc4:	4892      	ldr	r0, [pc, #584]	; (8004010 <genericmqtt_client_XCube_sample_run+0x7c0>)
              g_publishData = !g_publishData;
 8003dc6:	f081 0101 	eor.w	r1, r1, #1
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	bf08      	it	eq
 8003dce:	4613      	moveq	r3, r2
              g_publishData = !g_publishData;
 8003dd0:	f884 125b 	strb.w	r1, [r4, #603]	; 0x25b
              msg_info("%s the sensor values publication loop.\n", (g_publishData == true) ? "Enter" : "Exit");
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f01f fc33 	bl	8023640 <iprintf>
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003dda:	f004 fee5 	bl	8008ba8 <HAL_GetTick>
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003dde:	f894 225b 	ldrb.w	r2, [r4, #603]	; 0x25b
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003de2:	6933      	ldr	r3, [r6, #16]
 8003de4:	4601      	mov	r1, r0
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003de6:	b13a      	cbz	r2, 8003df8 <genericmqtt_client_XCube_sample_run+0x5a8>
            int32_t left_ms = comp_left_ms(last_telemetry_time_ms, HAL_GetTick(), status_data.TelemetryInterval * 1000);
 8003de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dec:	435a      	muls	r2, r3
 8003dee:	4648      	mov	r0, r9
 8003df0:	f7ff fd24 	bl	800383c <comp_left_ms>
            if ( ((g_publishData == true) && (left_ms <= 0))
 8003df4:	2800      	cmp	r0, #0
 8003df6:	dd02      	ble.n	8003dfe <genericmqtt_client_XCube_sample_run+0x5ae>
                || (b_sample_data == true) )
 8003df8:	f1ba 0f01 	cmp.w	sl, #1
 8003dfc:	d160      	bne.n	8003ec0 <genericmqtt_client_XCube_sample_run+0x670>
              last_telemetry_time_ms = HAL_GetTick();
 8003dfe:	f004 fed3 	bl	8008ba8 <HAL_GetTick>
 8003e02:	4681      	mov	r9, r0
              pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7ff fa15 	bl	8003234 <time>
 8003e0a:	f8df a228 	ldr.w	sl, [pc, #552]	; 8004034 <genericmqtt_client_XCube_sample_run+0x7e4>
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e10:	4a80      	ldr	r2, [pc, #512]	; (8004014 <genericmqtt_client_XCube_sample_run+0x7c4>)
 8003e12:	68db      	ldr	r3, [r3, #12]
              pub_data.ts = time(NULL); /* last_telemetry_time_ms; */
 8003e14:	f8ca 0010 	str.w	r0, [sl, #16]
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003e18:	2164      	movs	r1, #100	; 0x64
 8003e1a:	487f      	ldr	r0, [pc, #508]	; (8004018 <genericmqtt_client_XCube_sample_run+0x7c8>)
 8003e1c:	f01f fcfa 	bl	8023814 <sniprintf>
              ret = snprintf( mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"data\": {\n"
 8003e20:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8003e24:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003e28:	9313      	str	r3, [sp, #76]	; 0x4c
 8003e2a:	f9ba 302c 	ldrsh.w	r3, [sl, #44]	; 0x2c
 8003e2e:	9312      	str	r3, [sp, #72]	; 0x48
 8003e30:	f9ba 302a 	ldrsh.w	r3, [sl, #42]	; 0x2a
 8003e34:	9311      	str	r3, [sp, #68]	; 0x44
 8003e36:	f9ba 3028 	ldrsh.w	r3, [sl, #40]	; 0x28
 8003e3a:	9310      	str	r3, [sp, #64]	; 0x40
 8003e3c:	f8da 0024 	ldr.w	r0, [sl, #36]	; 0x24
 8003e40:	f7fc fb92 	bl	8000568 <__aeabi_f2d>
 8003e44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003e48:	f8da 0020 	ldr.w	r0, [sl, #32]
 8003e4c:	f7fc fb8c 	bl	8000568 <__aeabi_f2d>
 8003e50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003e54:	f8da 001c 	ldr.w	r0, [sl, #28]
 8003e58:	f7fc fb86 	bl	8000568 <__aeabi_f2d>
 8003e5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e60:	f9ba 3018 	ldrsh.w	r3, [sl, #24]
 8003e64:	9309      	str	r3, [sp, #36]	; 0x24
 8003e66:	f9ba 3016 	ldrsh.w	r3, [sl, #22]
 8003e6a:	9308      	str	r3, [sp, #32]
 8003e6c:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
 8003e70:	9307      	str	r3, [sp, #28]
 8003e72:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 8003e76:	9306      	str	r3, [sp, #24]
 8003e78:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8003e7c:	f7fc fb74 	bl	8000568 <__aeabi_f2d>
 8003e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e84:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 8003e88:	f7fc fb6e 	bl	8000568 <__aeabi_f2d>
 8003e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e90:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8003e94:	f7fc fb68 	bl	8000568 <__aeabi_f2d>
 8003e98:	4a60      	ldr	r2, [pc, #384]	; (800401c <genericmqtt_client_XCube_sample_run+0x7cc>)
 8003e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8003e9e:	4860      	ldr	r0, [pc, #384]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003ea0:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003ea4:	f01f fcb6 	bl	8023814 <sniprintf>
              if ( (ret < 0) || (ret >= MQTT_MSG_BUFFER_SIZE) )
 8003ea8:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8003eac:	d368      	bcc.n	8003f80 <genericmqtt_client_XCube_sample_run+0x730>
                msg_error("Telemetry message formatting error.\n");
 8003eae:	485d      	ldr	r0, [pc, #372]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003eb0:	f240 22a2 	movw	r2, #674	; 0x2a2
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f01f fbc3 	bl	8023640 <iprintf>
 8003eba:	485b      	ldr	r0, [pc, #364]	; (8004028 <genericmqtt_client_XCube_sample_run+0x7d8>)
                  msg_error("Yield failed. Reconnection needed?.\n");
 8003ebc:	f01f fc5c 	bl	8023778 <puts>
            if (g_statusChanged)
 8003ec0:	f894 3258 	ldrb.w	r3, [r4, #600]	; 0x258
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d036      	beq.n	8003f36 <genericmqtt_client_XCube_sample_run+0x6e6>
              snprintf(mqtt_pubtopic, MQTT_TOPIC_BUFFER_SIZE, "/losant/%s/state", device_config->MQClientId);
 8003ec8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003eca:	4a52      	ldr	r2, [pc, #328]	; (8004014 <genericmqtt_client_XCube_sample_run+0x7c4>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	4852      	ldr	r0, [pc, #328]	; (8004018 <genericmqtt_client_XCube_sample_run+0x7c8>)
 8003ed0:	2164      	movs	r1, #100	; 0x64
 8003ed2:	f01f fc9f 	bl	8023814 <sniprintf>
              ret = snprintf( mqtt_msg, MQTT_MSG_BUFFER_SIZE, "{\n \"data\": {\n"
 8003ed6:	4a55      	ldr	r2, [pc, #340]	; (800402c <genericmqtt_client_XCube_sample_run+0x7dc>)
 8003ed8:	7b71      	ldrb	r1, [r6, #13]
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <genericmqtt_client_XCube_sample_run+0x7e0>)
 8003edc:	f8d6 a010 	ldr.w	sl, [r6, #16]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	bf08      	it	eq
 8003ee4:	4613      	moveq	r3, r2
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	9316      	str	r3, [sp, #88]	; 0x58
 8003eea:	f7ff f9a3 	bl	8003234 <time>
 8003eee:	4a51      	ldr	r2, [pc, #324]	; (8004034 <genericmqtt_client_XCube_sample_run+0x7e4>)
 8003ef0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ef2:	9204      	str	r2, [sp, #16]
 8003ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <genericmqtt_client_XCube_sample_run+0x7e8>)
 8003efa:	f8cd a000 	str.w	sl, [sp]
 8003efe:	f44f 7116 	mov.w	r1, #600	; 0x258
 8003f02:	4847      	ldr	r0, [pc, #284]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003f04:	f01f fc86 	bl	8023814 <sniprintf>
                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);  /* Wrapper for MQTTPublish() */
 8003f08:	4a45      	ldr	r2, [pc, #276]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003f0a:	a83e      	add	r0, sp, #248	; 0xf8
 8003f0c:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f10:	f7ff fb66 	bl	80035e0 <stiot_publish>
                if (ret != MQSUCCESS)
 8003f14:	4682      	mov	sl, r0
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d068      	beq.n	8003fec <genericmqtt_client_XCube_sample_run+0x79c>
                  msg_error("Status publication failed.\n");
 8003f1a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8003f1e:	4629      	mov	r1, r5
 8003f20:	4840      	ldr	r0, [pc, #256]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003f22:	f01f fb8d 	bl	8023640 <iprintf>
 8003f26:	4845      	ldr	r0, [pc, #276]	; (800403c <genericmqtt_client_XCube_sample_run+0x7ec>)
 8003f28:	f01f fc26 	bl	8023778 <puts>
                  g_connection_needed_score++;
 8003f2c:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f30:	3301      	adds	r3, #1
 8003f32:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
            ret = MQTTYield(&client, 500);
 8003f36:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003f3a:	a83e      	add	r0, sp, #248	; 0xf8
 8003f3c:	f008 fe2f 	bl	800cb9e <MQTTYield>
            if (ret != MQSUCCESS)
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d05c      	beq.n	8003ffe <genericmqtt_client_XCube_sample_run+0x7ae>
              msg_error("Yield failed. Reconnection needed.\n");
 8003f44:	f240 22ed 	movw	r2, #749	; 0x2ed
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4836      	ldr	r0, [pc, #216]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003f4c:	f01f fb78 	bl	8023640 <iprintf>
 8003f50:	483b      	ldr	r0, [pc, #236]	; (8004040 <genericmqtt_client_XCube_sample_run+0x7f0>)
 8003f52:	f01f fc11 	bl	8023778 <puts>
              g_connection_needed_score++;
 8003f56:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
          } while ( g_continueRunning && !g_reboot && (g_connection_needed_score == 0) );
 8003f60:	f894 325a 	ldrb.w	r3, [r4, #602]	; 0x25a
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f43f ae56 	beq.w	8003c16 <genericmqtt_client_XCube_sample_run+0x3c6>
 8003f6a:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f47f ae51 	bne.w	8003c16 <genericmqtt_client_XCube_sample_run+0x3c6>
 8003f74:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f43f af18 	beq.w	8003dae <genericmqtt_client_XCube_sample_run+0x55e>
 8003f7e:	e64a      	b.n	8003c16 <genericmqtt_client_XCube_sample_run+0x3c6>
                ret = stiot_publish(&client, mqtt_pubtopic, mqtt_msg);  /* Wrapper for MQTTPublish() */
 8003f80:	4a27      	ldr	r2, [pc, #156]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003f82:	a83e      	add	r0, sp, #248	; 0xf8
 8003f84:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003f88:	f7ff fb2a 	bl	80035e0 <stiot_publish>
                if (ret == MQSUCCESS)
 8003f8c:	b9f8      	cbnz	r0, 8003fce <genericmqtt_client_XCube_sample_run+0x77e>
                  Led_Blink(80, 40, 5);
 8003f8e:	2205      	movs	r2, #5
 8003f90:	2128      	movs	r1, #40	; 0x28
 8003f92:	2050      	movs	r0, #80	; 0x50
 8003f94:	f000 f8d8 	bl	8004148 <Led_Blink>
                  Led_SetState(status_data.LedOn);
 8003f98:	7b70      	ldrb	r0, [r6, #13]
 8003f9a:	f000 f8cf 	bl	800413c <Led_SetState>
                  msg_info("#\n");
 8003f9e:	4829      	ldr	r0, [pc, #164]	; (8004044 <genericmqtt_client_XCube_sample_run+0x7f4>)
 8003fa0:	f01f fbea 	bl	8023778 <puts>
                  msg_info("publication topic: %s \tpayload: %s\n", mqtt_pubtopic, mqtt_msg);
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003fa6:	4828      	ldr	r0, [pc, #160]	; (8004048 <genericmqtt_client_XCube_sample_run+0x7f8>)
 8003fa8:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003fac:	f01f fb48 	bl	8023640 <iprintf>
                ret = MQTTYield(&client, 500);
 8003fb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003fb4:	a83e      	add	r0, sp, #248	; 0xf8
 8003fb6:	f008 fdf2 	bl	800cb9e <MQTTYield>
                if (ret != MQSUCCESS)
 8003fba:	2800      	cmp	r0, #0
 8003fbc:	d080      	beq.n	8003ec0 <genericmqtt_client_XCube_sample_run+0x670>
                  msg_error("Yield failed. Reconnection needed?.\n");
 8003fbe:	4819      	ldr	r0, [pc, #100]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003fc0:	f240 22b9 	movw	r2, #697	; 0x2b9
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f01f fb3b 	bl	8023640 <iprintf>
 8003fca:	4820      	ldr	r0, [pc, #128]	; (800404c <genericmqtt_client_XCube_sample_run+0x7fc>)
 8003fcc:	e776      	b.n	8003ebc <genericmqtt_client_XCube_sample_run+0x66c>
                  msg_error("Telemetry publication failed.\n");
 8003fce:	f240 22b2 	movw	r2, #690	; 0x2b2
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	4813      	ldr	r0, [pc, #76]	; (8004024 <genericmqtt_client_XCube_sample_run+0x7d4>)
 8003fd6:	f01f fb33 	bl	8023640 <iprintf>
 8003fda:	481d      	ldr	r0, [pc, #116]	; (8004050 <genericmqtt_client_XCube_sample_run+0x800>)
 8003fdc:	f01f fbcc 	bl	8023778 <puts>
                  g_connection_needed_score++;
 8003fe0:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
 8003fea:	e7e1      	b.n	8003fb0 <genericmqtt_client_XCube_sample_run+0x760>
                  msg_info("publication topic: %s \tpayload: %s\n",mqtt_pubtopic, mqtt_msg);
 8003fec:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <genericmqtt_client_XCube_sample_run+0x7d0>)
 8003fee:	4816      	ldr	r0, [pc, #88]	; (8004048 <genericmqtt_client_XCube_sample_run+0x7f8>)
 8003ff0:	f202 7174 	addw	r1, r2, #1908	; 0x774
 8003ff4:	f01f fb24 	bl	8023640 <iprintf>
                  g_statusChanged = false;
 8003ff8:	f884 a258 	strb.w	sl, [r4, #600]	; 0x258
 8003ffc:	e79b      	b.n	8003f36 <genericmqtt_client_XCube_sample_run+0x6e6>
              msg_info(".");
 8003ffe:	202e      	movs	r0, #46	; 0x2e
 8004000:	f01f fb36 	bl	8023670 <putchar>
 8004004:	e7ac      	b.n	8003f60 <genericmqtt_client_XCube_sample_run+0x710>
 8004006:	bf00      	nop
 8004008:	0802f0f8 	.word	0x0802f0f8
 800400c:	0802f833 	.word	0x0802f833
 8004010:	0802f329 	.word	0x0802f329
 8004014:	0802f351 	.word	0x0802f351
 8004018:	20000fa8 	.word	0x20000fa8
 800401c:	0802f362 	.word	0x0802f362
 8004020:	20000834 	.word	0x20000834
 8004024:	0802d9c5 	.word	0x0802d9c5
 8004028:	0802f46b 	.word	0x0802f46b
 800402c:	0802f103 	.word	0x0802f103
 8004030:	0802f0fe 	.word	0x0802f0fe
 8004034:	20000024 	.word	0x20000024
 8004038:	0802f4f7 	.word	0x0802f4f7
 800403c:	0802f550 	.word	0x0802f550
 8004040:	0802f56b 	.word	0x0802f56b
 8004044:	0802f48f 	.word	0x0802f48f
 8004048:	0802f491 	.word	0x0802f491
 800404c:	0802f4d3 	.word	0x0802f4d3
 8004050:	0802f4b5 	.word	0x0802f4b5

08004054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800408c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004058:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800405a:	e003      	b.n	8004064 <LoopCopyDataInit>

0800405c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800405e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004060:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004062:	3104      	adds	r1, #4

08004064 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004064:	480b      	ldr	r0, [pc, #44]	; (8004094 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004068:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800406a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800406c:	d3f6      	bcc.n	800405c <CopyDataInit>
	ldr	r2, =_sbss
 800406e:	4a0b      	ldr	r2, [pc, #44]	; (800409c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004070:	e002      	b.n	8004078 <LoopFillZerobss>

08004072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004072:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004074:	f842 3b04 	str.w	r3, [r2], #4

08004078 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <LoopForever+0x16>)
	cmp	r2, r3
 800407a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800407c:	d3f9      	bcc.n	8004072 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800407e:	f004 fd43 	bl	8008b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004082:	f01e f967 	bl	8022354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004086:	f000 f901 	bl	800428c <main>

0800408a <LoopForever>:

LoopForever:
    b LoopForever
 800408a:	e7fe      	b.n	800408a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800408c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004090:	08033ea8 	.word	0x08033ea8
	ldr	r0, =_sdata
 8004094:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004098:	20000818 	.word	0x20000818
	ldr	r2, =_sbss
 800409c:	20000818 	.word	0x20000818
	ldr	r3, = _ebss
 80040a0:	20001a28 	.word	0x20001a28

080040a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040a4:	e7fe      	b.n	80040a4 <ADC1_2_IRQHandler>

080040a6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80040a6:	2001      	movs	r0, #1
 80040a8:	4770      	bx	lr

080040aa <_kill>:

int _kill(int pid, int sig)
{
 80040aa:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040ac:	f01e f85a 	bl	8022164 <__errno>
 80040b0:	2316      	movs	r3, #22
 80040b2:	6003      	str	r3, [r0, #0]
	return -1;
}
 80040b4:	f04f 30ff 	mov.w	r0, #4294967295
 80040b8:	bd08      	pop	{r3, pc}

080040ba <_exit>:

void _exit (int status)
{
 80040ba:	b508      	push	{r3, lr}
	errno = EINVAL;
 80040bc:	f01e f852 	bl	8022164 <__errno>
 80040c0:	2316      	movs	r3, #22
 80040c2:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80040c4:	e7fe      	b.n	80040c4 <_exit+0xa>

080040c6 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80040c6:	b510      	push	{r4, lr}
 80040c8:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80040ca:	f000 f8ab 	bl	8004224 <__io_getchar>
 80040ce:	7020      	strb	r0, [r4, #0]

	return 1;
}
 80040d0:	2001      	movs	r0, #1
 80040d2:	bd10      	pop	{r4, pc}

080040d4 <_write>:

int _write(int file, char *ptr, int len)
{
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	460e      	mov	r6, r1
 80040d8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040da:	2500      	movs	r5, #0
 80040dc:	42a5      	cmp	r5, r4
 80040de:	db01      	blt.n	80040e4 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80040e0:	4620      	mov	r0, r4
 80040e2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80040e4:	5d70      	ldrb	r0, [r6, r5]
 80040e6:	f000 f88b 	bl	8004200 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ea:	3501      	adds	r5, #1
 80040ec:	e7f6      	b.n	80040dc <_write+0x8>
	...

080040f0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80040f0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <_sbrk+0x2c>)
 80040f4:	6819      	ldr	r1, [r3, #0]
{
 80040f6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80040f8:	b909      	cbnz	r1, 80040fe <_sbrk+0xe>
		heap_end = &end;
 80040fa:	4909      	ldr	r1, [pc, #36]	; (8004120 <_sbrk+0x30>)
 80040fc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80040fe:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004100:	4669      	mov	r1, sp
 8004102:	4402      	add	r2, r0
 8004104:	428a      	cmp	r2, r1
 8004106:	d906      	bls.n	8004116 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004108:	f01e f82c 	bl	8022164 <__errno>
 800410c:	230c      	movs	r3, #12
 800410e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8004114:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8004116:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004118:	e7fc      	b.n	8004114 <_sbrk+0x24>
 800411a:	bf00      	nop
 800411c:	2000100c 	.word	0x2000100c
 8004120:	20001a28 	.word	0x20001a28

08004124 <_close>:

int _close(int file)
{
	return -1;
}
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	4770      	bx	lr

0800412a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800412a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800412e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004130:	2000      	movs	r0, #0
 8004132:	4770      	bx	lr

08004134 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004134:	2001      	movs	r0, #1
 8004136:	4770      	bx	lr

08004138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004138:	2000      	movs	r0, #0
 800413a:	4770      	bx	lr

0800413c <Led_SetState>:
/**
  * @brief Set LED state
  */
void Led_SetState(bool on)
{
  if (on == true)
 800413c:	b110      	cbz	r0, 8004144 <Led_SetState+0x8>
  {
    BSP_LED_On(LED_GREEN);
 800413e:	2000      	movs	r0, #0
 8004140:	f000 bfde 	b.w	8005100 <BSP_LED_On>
  }
  else
  {
    BSP_LED_Off(LED_GREEN);
 8004144:	f000 bfe6 	b.w	8005114 <BSP_LED_Off>

08004148 <Led_Blink>:
/**
 * @brief Blink LED for 'count' cycles of 'period' period and 'duty' ON duration.
 * duty < 0 tells to start with an OFF state.
 */
void Led_Blink(int period, int duty, int count)
{
 8004148:	b570      	push	{r4, r5, r6, lr}
  if ( (duty > 0) && (period >= duty) )
 800414a:	1e0c      	subs	r4, r1, #0
{
 800414c:	4615      	mov	r5, r2
  if ( (duty > 0) && (period >= duty) )
 800414e:	dd11      	ble.n	8004174 <Led_Blink+0x2c>
 8004150:	4284      	cmp	r4, r0
 8004152:	dc0e      	bgt.n	8004172 <Led_Blink+0x2a>
    do
    {
      Led_SetState(true);
      HAL_Delay(duty);
      Led_SetState(false);
      HAL_Delay(period - duty);
 8004154:	1b06      	subs	r6, r0, r4
    BSP_LED_On(LED_GREEN);
 8004156:	2000      	movs	r0, #0
 8004158:	f000 ffd2 	bl	8005100 <BSP_LED_On>
      HAL_Delay(duty);
 800415c:	4620      	mov	r0, r4
 800415e:	f004 fd29 	bl	8008bb4 <HAL_Delay>
    BSP_LED_Off(LED_GREEN);
 8004162:	2000      	movs	r0, #0
 8004164:	f000 ffd6 	bl	8005114 <BSP_LED_Off>
      HAL_Delay(period - duty);
 8004168:	4630      	mov	r0, r6
 800416a:	f004 fd23 	bl	8008bb4 <HAL_Delay>
    } while (count--);
 800416e:	3d01      	subs	r5, #1
 8004170:	d2f1      	bcs.n	8004156 <Led_Blink+0xe>
      HAL_Delay(period + duty);
      Led_SetState(true);
      HAL_Delay(-duty);
    } while (count--);
  }
}
 8004172:	bd70      	pop	{r4, r5, r6, pc}
  if ( (duty < 0) && (period >= -duty) )
 8004174:	d0fd      	beq.n	8004172 <Led_Blink+0x2a>
 8004176:	4266      	negs	r6, r4
 8004178:	4286      	cmp	r6, r0
 800417a:	dcfa      	bgt.n	8004172 <Led_Blink+0x2a>
      HAL_Delay(period + duty);
 800417c:	4404      	add	r4, r0
    BSP_LED_Off(LED_GREEN);
 800417e:	2000      	movs	r0, #0
 8004180:	f000 ffc8 	bl	8005114 <BSP_LED_Off>
      HAL_Delay(period + duty);
 8004184:	4620      	mov	r0, r4
 8004186:	f004 fd15 	bl	8008bb4 <HAL_Delay>
    BSP_LED_On(LED_GREEN);
 800418a:	2000      	movs	r0, #0
 800418c:	f000 ffb8 	bl	8005100 <BSP_LED_On>
      HAL_Delay(-duty);
 8004190:	4630      	mov	r0, r6
 8004192:	f004 fd0f 	bl	8008bb4 <HAL_Delay>
    } while (count--);
 8004196:	3d01      	subs	r5, #1
 8004198:	d2f1      	bcs.n	800417e <Led_Blink+0x36>
 800419a:	e7ea      	b.n	8004172 <Led_Blink+0x2a>

0800419c <Button_WaitForPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForPush(uint32_t delay)
{
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4605      	mov	r5, r0
  uint32_t time_out = HAL_GetTick()+delay;
 80041a0:	f004 fd02 	bl	8008ba8 <HAL_GetTick>
  do
  {
    if (button_flags > 1)
 80041a4:	4c0a      	ldr	r4, [pc, #40]	; (80041d0 <Button_WaitForPush+0x34>)
  uint32_t time_out = HAL_GetTick()+delay;
 80041a6:	4405      	add	r5, r0
    if (button_flags > 1)
 80041a8:	7823      	ldrb	r3, [r4, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d903      	bls.n	80041b6 <Button_WaitForPush+0x1a>
    {
      button_flags = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	7023      	strb	r3, [r4, #0]
      return BP_MULTIPLE_PUSH;
 80041b2:	2002      	movs	r0, #2
      return BP_SINGLE_PUSH;
    }
  }
  while( HAL_GetTick() < time_out);
  return BP_NOT_PUSHED;
}
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
    if (button_flags == 1)
 80041b6:	7823      	ldrb	r3, [r4, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	b2d8      	uxtb	r0, r3
 80041bc:	d102      	bne.n	80041c4 <Button_WaitForPush+0x28>
      button_flags = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	7023      	strb	r3, [r4, #0]
      return BP_SINGLE_PUSH;
 80041c2:	e7f7      	b.n	80041b4 <Button_WaitForPush+0x18>
  while( HAL_GetTick() < time_out);
 80041c4:	f004 fcf0 	bl	8008ba8 <HAL_GetTick>
 80041c8:	42a8      	cmp	r0, r5
 80041ca:	d3ed      	bcc.n	80041a8 <Button_WaitForPush+0xc>
  return BP_NOT_PUSHED;
 80041cc:	2000      	movs	r0, #0
 80041ce:	e7f1      	b.n	80041b4 <Button_WaitForPush+0x18>
 80041d0:	20001014 	.word	0x20001014

080041d4 <Button_WaitForMultiPush>:

/**
  * @brief Waiting for button to be pushed
  */
uint8_t Button_WaitForMultiPush(uint32_t delay)
{
 80041d4:	b508      	push	{r3, lr}
  HAL_Delay(delay);
 80041d6:	f004 fced 	bl	8008bb4 <HAL_Delay>
  if (button_flags > 1)
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <Button_WaitForMultiPush+0x28>)
 80041dc:	781a      	ldrb	r2, [r3, #0]
 80041de:	2a01      	cmp	r2, #1
 80041e0:	d903      	bls.n	80041ea <Button_WaitForMultiPush+0x16>
  {
    button_flags = 0;
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
    return BP_MULTIPLE_PUSH;
 80041e6:	2002      	movs	r0, #2
  {
    button_flags = 0;
    return BP_SINGLE_PUSH;
  }
  return BP_NOT_PUSHED;
}
 80041e8:	bd08      	pop	{r3, pc}
  if (button_flags == 1)
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	2a01      	cmp	r2, #1
 80041ee:	b2d0      	uxtb	r0, r2
 80041f0:	f04f 0200 	mov.w	r2, #0
    button_flags = 0;
 80041f4:	bf0c      	ite	eq
 80041f6:	701a      	strbeq	r2, [r3, #0]
  return BP_NOT_PUSHED;
 80041f8:	4610      	movne	r0, r2
 80041fa:	e7f5      	b.n	80041e8 <Button_WaitForMultiPush+0x14>
 80041fc:	20001014 	.word	0x20001014

08004200 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004200:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t *) &ch, 1, 30000))
 8004202:	4c07      	ldr	r4, [pc, #28]	; (8004220 <__io_putchar+0x20>)
{
 8004204:	9001      	str	r0, [sp, #4]
  while (HAL_OK != HAL_UART_Transmit(&console_uart, (uint8_t *) &ch, 1, 30000))
 8004206:	f247 5330 	movw	r3, #30000	; 0x7530
 800420a:	2201      	movs	r2, #1
 800420c:	a901      	add	r1, sp, #4
 800420e:	4620      	mov	r0, r4
 8004210:	f008 f9bd 	bl	800c58e <HAL_UART_Transmit>
 8004214:	2800      	cmp	r0, #0
 8004216:	d1f6      	bne.n	8004206 <__io_putchar+0x6>
  {
    ;
  }
  return ch;
}
 8004218:	9801      	ldr	r0, [sp, #4]
 800421a:	b002      	add	sp, #8
 800421c:	bd10      	pop	{r4, pc}
 800421e:	bf00      	nop
 8004220:	20001018 	.word	0x20001018

08004224 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8004224:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8004226:	2300      	movs	r3, #0
  while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t *)&ch, 1, 30000))
 8004228:	4c08      	ldr	r4, [pc, #32]	; (800424c <__io_getchar+0x28>)
  uint8_t ch = 0;
 800422a:	f88d 3007 	strb.w	r3, [sp, #7]
  while (HAL_OK != HAL_UART_Receive(&console_uart, (uint8_t *)&ch, 1, 30000))
 800422e:	f247 5330 	movw	r3, #30000	; 0x7530
 8004232:	2201      	movs	r2, #1
 8004234:	f10d 0107 	add.w	r1, sp, #7
 8004238:	4620      	mov	r0, r4
 800423a:	f008 f9fe 	bl	800c63a <HAL_UART_Receive>
 800423e:	2800      	cmp	r0, #0
 8004240:	d1f5      	bne.n	800422e <__io_getchar+0xa>
  {
    ;
  }
  return ch;
}
 8004242:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8004246:	b002      	add	sp, #8
 8004248:	bd10      	pop	{r4, pc}
 800424a:	bf00      	nop
 800424c:	20001018 	.word	0x20001018

08004250 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8004250:	2802      	cmp	r0, #2
 8004252:	d008      	beq.n	8004266 <HAL_GPIO_EXTI_Callback+0x16>
 8004254:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004258:	d107      	bne.n	800426a <HAL_GPIO_EXTI_Callback+0x1a>
  button_flags++;
 800425a:	4a04      	ldr	r2, [pc, #16]	; (800426c <HAL_GPIO_EXTI_Callback+0x1c>)
 800425c:	7813      	ldrb	r3, [r2, #0]
 800425e:	3301      	adds	r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	7013      	strb	r3, [r2, #0]
}
 8004264:	4770      	bx	lr
      break;
    }

	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 8004266:	f000 bdaf 	b.w	8004dc8 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 800426a:	4770      	bx	lr
 800426c:	20001014 	.word	0x20001014

08004270 <SPI3_IRQHandler>:


void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <SPI3_IRQHandler+0x8>)
 8004272:	f007 bd93 	b.w	800bd9c <HAL_SPI_IRQHandler>
 8004276:	bf00      	nop
 8004278:	20001224 	.word	0x20001224

0800427c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800427c:	b508      	push	{r3, lr}
  while(1)
  {
    BSP_LED_Toggle(LED_GREEN);
 800427e:	2000      	movs	r0, #0
 8004280:	f000 ff52 	bl	8005128 <BSP_LED_Toggle>
    HAL_Delay(200);
 8004284:	20c8      	movs	r0, #200	; 0xc8
 8004286:	f004 fc95 	bl	8008bb4 <HAL_Delay>
  while(1)
 800428a:	e7f8      	b.n	800427e <Error_Handler+0x2>

0800428c <main>:
{
 800428c:	b530      	push	{r4, r5, lr}
 800428e:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8004290:	f004 fc76 	bl	8008b80 <HAL_Init>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004294:	2214      	movs	r2, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8004296:	23b0      	movs	r3, #176	; 0xb0
 8004298:	f04f 0e00 	mov.w	lr, #0
  RCC_OscInitStruct.PLL.PLLM = 6;
 800429c:	2106      	movs	r1, #6
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800429e:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80042a0:	e9cd e30c 	strd	lr, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 20;
 80042a4:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042a8:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80042aa:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ac:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80042ae:	2207      	movs	r2, #7
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80042b0:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042b4:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042b8:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80042ba:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042bc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042be:	f005 fdcd 	bl	8009e5c <HAL_RCC_OscConfig>
 80042c2:	b108      	cbz	r0, 80042c8 <main+0x3c>
    Error_Handler();
 80042c4:	f7ff ffda 	bl	800427c <Error_Handler>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042c8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042cc:	f04f 0c0f 	mov.w	ip, #15
 80042d0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042d2:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80042d4:	2104      	movs	r1, #4
 80042d6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042d8:	e9cd c300 	strd	ip, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80042dc:	f005 fff0 	bl	800a2c0 <HAL_RCC_ClockConfig>
 80042e0:	4604      	mov	r4, r0
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d1ee      	bne.n	80042c4 <main+0x38>
  HAL_RCCEx_EnableMSIPLLMode();
 80042e6:	f006 fbb3 	bl	800aa50 <HAL_RCCEx_EnableMSIPLLMode>
  Periph_Config();
 80042ea:	f000 f891 	bl	8004410 <Periph_Config>
  MX_TIM6_Init();
 80042ee:	f000 f901 	bl	80044f4 <MX_TIM6_Init>
  */
static void MX_NVIC_Init(void)
{

  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80042f2:	4622      	mov	r2, r4
 80042f4:	4621      	mov	r1, r4
 80042f6:	2036      	movs	r0, #54	; 0x36
 80042f8:	f004 fc7c 	bl	8008bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042fc:	2036      	movs	r0, #54	; 0x36
 80042fe:	f004 fcab 	bl	8008c58 <HAL_NVIC_EnableIRQ>
  BSP_LED_Init(LED_GREEN);
 8004302:	4620      	mov	r0, r4
 8004304:	f000 feda 	bl	80050bc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8004308:	4629      	mov	r1, r5
 800430a:	4620      	mov	r0, r4
 800430c:	f000 ff16 	bl	800513c <BSP_PB_Init>
  hrng.Instance = RNG;
 8004310:	481f      	ldr	r0, [pc, #124]	; (8004390 <main+0x104>)
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <main+0x108>)
 8004314:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004316:	f006 fba3 	bl	800aa60 <HAL_RNG_Init>
 800431a:	4603      	mov	r3, r0
 800431c:	2800      	cmp	r0, #0
 800431e:	d1d1      	bne.n	80042c4 <main+0x38>
  hrtc.Instance = RTC;
 8004320:	481d      	ldr	r0, [pc, #116]	; (8004398 <main+0x10c>)
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <main+0x110>)
  hrtc.Init.SynchPrediv = 255;
 8004324:	257f      	movs	r5, #127	; 0x7f
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004326:	e9c0 2300 	strd	r2, r3, [r0]
  hrtc.Init.SynchPrediv = 255;
 800432a:	22ff      	movs	r2, #255	; 0xff
 800432c:	e9c0 5202 	strd	r5, r2, [r0, #8]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004330:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004334:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004338:	f006 fc05 	bl	800ab46 <HAL_RTC_Init>
 800433c:	2800      	cmp	r0, #0
 800433e:	d1c1      	bne.n	80042c4 <main+0x38>
  console_uart.Instance = USART1;
 8004340:	4917      	ldr	r1, [pc, #92]	; (80043a0 <main+0x114>)
  console_uart.Init.BaudRate = 115200;
 8004342:	4c18      	ldr	r4, [pc, #96]	; (80043a4 <main+0x118>)
  console_uart.Init.Parity = UART_PARITY_NONE;
 8004344:	6148      	str	r0, [r1, #20]
  console_uart.Init.BaudRate = 115200;
 8004346:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800434a:	e9c1 4201 	strd	r4, r2, [r1, #4]
  console_uart.Init.Mode = UART_MODE_TX_RX;
 800434e:	220c      	movs	r2, #12
  console_uart.Init.StopBits = UART_STOPBITS_1;
 8004350:	e9c1 0003 	strd	r0, r0, [r1, #12]
  console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004354:	e9c1 2006 	strd	r2, r0, [r1, #24]
  console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004358:	e9c1 0008 	strd	r0, r0, [r1, #32]
  console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800435c:	6288      	str	r0, [r1, #40]	; 0x28
  BSP_COM_Init(COM1,&console_uart);
 800435e:	3104      	adds	r1, #4
 8004360:	f000 ff2a 	bl	80051b8 <BSP_COM_Init>
  int res = init_sensors();
 8004364:	f7fe fcf8 	bl	8002d58 <init_sensors>
   if(0 != res)
 8004368:	4604      	mov	r4, r0
 800436a:	b140      	cbz	r0, 800437e <main+0xf2>
     msg_error("init_sensors returned error : %d\n", res);
 800436c:	490e      	ldr	r1, [pc, #56]	; (80043a8 <main+0x11c>)
 800436e:	480f      	ldr	r0, [pc, #60]	; (80043ac <main+0x120>)
 8004370:	2276      	movs	r2, #118	; 0x76
 8004372:	f01f f965 	bl	8023640 <iprintf>
 8004376:	480e      	ldr	r0, [pc, #56]	; (80043b0 <main+0x124>)
 8004378:	4621      	mov	r1, r4
 800437a:	f01f f961 	bl	8023640 <iprintf>
  HAL_TIM_Base_Start_IT(&htim6);
 800437e:	480d      	ldr	r0, [pc, #52]	; (80043b4 <main+0x128>)
 8004380:	f007 fd8b 	bl	800be9a <HAL_TIM_Base_Start_IT>
  genericmqtt_client_XCube_sample_run();
 8004384:	f7ff fa64 	bl	8003850 <genericmqtt_client_XCube_sample_run>
}
 8004388:	2000      	movs	r0, #0
 800438a:	b017      	add	sp, #92	; 0x5c
 800438c:	bd30      	pop	{r4, r5, pc}
 800438e:	bf00      	nop
 8004390:	200011d4 	.word	0x200011d4
 8004394:	50060800 	.word	0x50060800
 8004398:	20001170 	.word	0x20001170
 800439c:	40002800 	.word	0x40002800
 80043a0:	20001014 	.word	0x20001014
 80043a4:	40013800 	.word	0x40013800
 80043a8:	08028550 	.word	0x08028550
 80043ac:	0802d9c5 	.word	0x0802d9c5
 80043b0:	0802f5df 	.word	0x0802f5df
 80043b4:	20001194 	.word	0x20001194

080043b8 <HAL_TIM_PeriodElapsedCallback>:
{
 80043b8:	b510      	push	{r4, lr}
	pub_data.temperature = BSP_TSENSOR_ReadTemp();
 80043ba:	f001 f81d 	bl	80053f8 <BSP_TSENSOR_ReadTemp>
 80043be:	4c12      	ldr	r4, [pc, #72]	; (8004408 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80043c0:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
  pub_data.humidity = BSP_HSENSOR_ReadHumidity();
 80043c4:	f000 ffba 	bl	800533c <BSP_HSENSOR_ReadHumidity>
 80043c8:	ee07 0a90 	vmov	s15, r0
 80043cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
  pub_data.pressure = BSP_PSENSOR_ReadPressure();
 80043d4:	f000 fff6 	bl	80053c4 <BSP_PSENSOR_ReadPressure>
 80043d8:	ee07 0a90 	vmov	s15, r0
 80043dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 80043e0:	f104 0014 	add.w	r0, r4, #20
  pub_data.pressure = BSP_PSENSOR_ReadPressure();
 80043e4:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
  BSP_ACCELERO_AccGetXYZ(pub_data.ACC_Value);
 80043e8:	f000 ff88 	bl	80052fc <BSP_ACCELERO_AccGetXYZ>
  BSP_GYRO_GetXYZ(pub_data.GYR_Value);
 80043ec:	f104 001c 	add.w	r0, r4, #28
 80043f0:	f000 ff8f 	bl	8005312 <BSP_GYRO_GetXYZ>
  BSP_MAGNETO_GetXYZ(pub_data.MAG_Value);
 80043f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80043f8:	f000 ffc6 	bl	8005388 <BSP_MAGNETO_GetXYZ>
  i++;
 80043fc:	4a03      	ldr	r2, [pc, #12]	; (800440c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80043fe:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8004400:	3301      	adds	r3, #1
 8004402:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8004404:	bd10      	pop	{r4, pc}
 8004406:	bf00      	nop
 8004408:	20000024 	.word	0x20000024
 800440c:	20001014 	.word	0x20001014

08004410 <Periph_Config>:
/**
  * Initializes the Global MSP.
  */

 void Periph_Config(void)
 {
 8004410:	b500      	push	{lr}
 8004412:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection  = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004414:	4b12      	ldr	r3, [pc, #72]	; (8004460 <Periph_Config+0x50>)
 8004416:	9302      	str	r3, [sp, #8]
                                       |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                                       |RCC_PERIPHCLK_RNG;
  PeriphClkInit.Usart1ClockSelection  = RCC_USART1CLKSOURCE_PCLK2;
 8004418:	2300      	movs	r3, #0
 800441a:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInit.Usart3ClockSelection  = RCC_USART3CLKSOURCE_PCLK1;
 800441c:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.I2c2ClockSelection    = RCC_I2C2CLKSOURCE_PCLK1;
 800441e:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.RngClockSelection     = RCC_RNGCLKSOURCE_MSI;
 8004420:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8004424:	931f      	str	r3, [sp, #124]	; 0x7c

  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004426:	a802      	add	r0, sp, #8
  PeriphClkInit.RTCClockSelection     = RCC_RTCCLKSOURCE_LSE;
 8004428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800442c:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800442e:	f006 f925 	bl	800a67c <HAL_RCCEx_PeriphCLKConfig>
 8004432:	b108      	cbz	r0, 8004438 <Periph_Config+0x28>
  {
    Error_Handler();
 8004434:	f7ff ff22 	bl	800427c <Error_Handler>
  }

   __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <Periph_Config+0x54>)
 800443a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800443c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004440:	659a      	str	r2, [r3, #88]	; 0x58
 8004442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	9301      	str	r3, [sp, #4]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800444a:	f44f 7000 	mov.w	r0, #512	; 0x200
   __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	9b01      	ldr	r3, [sp, #4]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004450:	f005 fc26 	bl	8009ca0 <HAL_PWREx_ControlVoltageScaling>
 8004454:	b108      	cbz	r0, 800445a <Periph_Config+0x4a>
  {
    Error_Handler();
 8004456:	f7ff ff11 	bl	800427c <Error_Handler>
  }
}
 800445a:	b025      	add	sp, #148	; 0x94
 800445c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004460:	00060085 	.word	0x00060085
 8004464:	40021000 	.word	0x40021000

08004468 <HAL_RNG_MspInit>:


void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004468:	6802      	ldr	r2, [r0, #0]
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RNG_MspInit+0x28>)
 800446c:	429a      	cmp	r2, r3
{
 800446e:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8004470:	d10c      	bne.n	800448c <HAL_RNG_MspInit+0x24>
  {
      /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004472:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004476:	f5a3 337e 	sub.w	r3, r3, #260096	; 0x3f800
 800447a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800447c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004480:	64da      	str	r2, [r3, #76]	; 0x4c
 8004482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	9b01      	ldr	r3, [sp, #4]
  }
}
 800448c:	b002      	add	sp, #8
 800448e:	4770      	bx	lr
 8004490:	50060800 	.word	0x50060800

08004494 <HAL_RTC_MspInit>:
  }
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8004494:	6802      	ldr	r2, [r0, #0]
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RTC_MspInit+0x18>)
 8004498:	429a      	cmp	r2, r3
  {
    __HAL_RCC_RTC_ENABLE();
 800449a:	bf01      	itttt	eq
 800449c:	4a04      	ldreq	r2, [pc, #16]	; (80044b0 <HAL_RTC_MspInit+0x1c>)
 800449e:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 80044a2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80044a6:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
  }
}
 80044aa:	4770      	bx	lr
 80044ac:	40002800 	.word	0x40002800
 80044b0:	40021000 	.word	0x40021000

080044b4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80044b4:	4770      	bx	lr

080044b6 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80044b6:	e7fe      	b.n	80044b6 <HardFault_Handler>

080044b8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <MemManage_Handler>

080044ba <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80044ba:	e7fe      	b.n	80044ba <BusFault_Handler>

080044bc <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80044bc:	e7fe      	b.n	80044bc <UsageFault_Handler>

080044be <SVC_Handler>:
 80044be:	4770      	bx	lr

080044c0 <DebugMon_Handler>:
 80044c0:	4770      	bx	lr

080044c2 <PendSV_Handler>:
 80044c2:	4770      	bx	lr

080044c4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80044c4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80044c6:	f004 fb67 	bl	8008b98 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
}
 80044ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80044ce:	f004 bbf8 	b.w	8008cc2 <HAL_SYSTICK_IRQHandler>
	...

080044d4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <TIM2_IRQHandler+0x8>)
 80044d6:	f007 bcef 	b.w	800beb8 <HAL_TIM_IRQHandler>
 80044da:	bf00      	nop
 80044dc:	20001194 	.word	0x20001194

080044e0 <TIM6_DAC_IRQHandler>:
 80044e0:	f7ff bff8 	b.w	80044d4 <TIM2_IRQHandler>

080044e4 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80044e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80044e8:	f004 befe 	b.w	80092e8 <HAL_GPIO_EXTI_IRQHandler>

080044ec <EXTI1_IRQHandler>:
}


void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);		
 80044ec:	2002      	movs	r0, #2
 80044ee:	f004 befb 	b.w	80092e8 <HAL_GPIO_EXTI_IRQHandler>
	...

080044f4 <MX_TIM6_Init>:

extern TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80044f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN TIM6_Init 1 */
  #define BASE_1s	10000
  #define BASE_1ms	10

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044f6:	480f      	ldr	r0, [pc, #60]	; (8004534 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = BASE_1s;
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <MX_TIM6_Init+0x44>)
 80044fa:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044fe:	2400      	movs	r4, #0
  htim6.Init.Prescaler = BASE_1s;
 8004500:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 8000;
 8004504:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004508:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800450c:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800450e:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 8000;
 8004510:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004512:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004514:	f007 fdd8 	bl	800c0c8 <HAL_TIM_Base_Init>
 8004518:	b108      	cbz	r0, 800451e <MX_TIM6_Init+0x2a>
  {
    Error_Handler();
 800451a:	f7ff feaf 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800451e:	4805      	ldr	r0, [pc, #20]	; (8004534 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004520:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004522:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004524:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004526:	f007 fde9 	bl	800c0fc <HAL_TIMEx_MasterConfigSynchronization>
 800452a:	b108      	cbz	r0, 8004530 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800452c:	f7ff fea6 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004530:	b004      	add	sp, #16
 8004532:	bd10      	pop	{r4, pc}
 8004534:	20001194 	.word	0x20001194
 8004538:	40001000 	.word	0x40001000

0800453c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800453c:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <HAL_TIM_Base_MspInit+0x3c>)
 8004540:	6802      	ldr	r2, [r0, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d115      	bne.n	8004572 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004546:	f503 3300 	add.w	r3, r3, #131072	; 0x20000

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800454a:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800454c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800454e:	f042 0210 	orr.w	r2, r2, #16
 8004552:	659a      	str	r2, [r3, #88]	; 0x58
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004556:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800455e:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004560:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004562:	f004 fb47 	bl	8008bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004566:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004568:	b003      	add	sp, #12
 800456a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800456e:	f004 bb73 	b.w	8008c58 <HAL_NVIC_EnableIRQ>
}
 8004572:	b003      	add	sp, #12
 8004574:	f85d fb04 	ldr.w	pc, [sp], #4
 8004578:	40001000 	.word	0x40001000

0800457c <_I2CWrite>:
int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count);

/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800457c:	b507      	push	{r0, r1, r2, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800457e:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	b293      	uxth	r3, r2
 8004586:	460a      	mov	r2, r1
 8004588:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 800458c:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8004590:	f005 f8ae 	bl	80096f0 <HAL_I2C_Master_Transmit>
    
    return status;
}
 8004594:	b003      	add	sp, #12
 8004596:	f85d fb04 	ldr.w	pc, [sp], #4

0800459a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count)
{
 800459a:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800459c:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80045a0:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80045aa:	b293      	uxth	r3, r2
 80045ac:	460a      	mov	r2, r1
 80045ae:	f044 0101 	orr.w	r1, r4, #1
 80045b2:	f005 f937 	bl	8009824 <HAL_I2C_Master_Receive>
    
    return status;
}
 80045b6:	b002      	add	sp, #8
 80045b8:	bd10      	pop	{r4, pc}

080045ba <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data)
{
 80045ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045bc:	4615      	mov	r5, r2
 80045be:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80045c2:	2201      	movs	r2, #1
 80045c4:	f10d 0107 	add.w	r1, sp, #7
{
 80045c8:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 80045ca:	f7ff ffd7 	bl	800457c <_I2CWrite>
    
    if (status_int)
 80045ce:	b928      	cbnz	r0, 80045dc <VL53L0X_RdByte+0x22>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 80045d0:	2201      	movs	r2, #1
 80045d2:	4629      	mov	r1, r5
 80045d4:	4620      	mov	r0, r4
 80045d6:	f7ff ffe0 	bl	800459a <_I2CRead>
    
    if (status_int != 0)
 80045da:	b108      	cbz	r0, 80045e0 <VL53L0X_RdByte+0x26>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80045dc:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 80045e0:	b003      	add	sp, #12
 80045e2:	bd30      	pop	{r4, r5, pc}

080045e4 <VL53L0X_WriteMulti>:
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 80045e4:	2b3f      	cmp	r3, #63	; 0x3f
{
 80045e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e8:	460e      	mov	r6, r1
 80045ea:	4605      	mov	r5, r0
 80045ec:	4611      	mov	r1, r2
 80045ee:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 80045f0:	d811      	bhi.n	8004616 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 80045f2:	4f0a      	ldr	r7, [pc, #40]	; (800461c <VL53L0X_WriteMulti+0x38>)
 80045f4:	4638      	mov	r0, r7
    memcpy(&_I2CBuffer[1], pdata, count);
 80045f6:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 80045f8:	f800 6b01 	strb.w	r6, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 80045fc:	f01d fef4 	bl	80223e8 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8004600:	1c62      	adds	r2, r4, #1
 8004602:	4639      	mov	r1, r7
 8004604:	4628      	mov	r0, r5
 8004606:	f7ff ffb9 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800460a:	2800      	cmp	r0, #0
 800460c:	bf0c      	ite	eq
 800460e:	2000      	moveq	r0, #0
 8004610:	f06f 0013 	mvnne.w	r0, #19
    }
    
    return Status;
}
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 8004616:	f06f 0003 	mvn.w	r0, #3
 800461a:	e7fb      	b.n	8004614 <VL53L0X_WriteMulti+0x30>
 800461c:	200011e4 	.word	0x200011e4

08004620 <VL53L0X_ReadMulti>:

VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count)
{
 8004620:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004622:	4615      	mov	r5, r2
 8004624:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8004628:	2201      	movs	r2, #1
 800462a:	f10d 0107 	add.w	r1, sp, #7
{
 800462e:	4604      	mov	r4, r0
 8004630:	461e      	mov	r6, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8004632:	f7ff ffa3 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 8004636:	b928      	cbnz	r0, 8004644 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8004638:	4632      	mov	r2, r6
 800463a:	4629      	mov	r1, r5
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff ffac 	bl	800459a <_I2CRead>
    
    if (status_int != 0) {
 8004642:	b108      	cbz	r0, 8004648 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004644:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8004648:	b002      	add	sp, #8
 800464a:	bd70      	pop	{r4, r5, r6, pc}

0800464c <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data)
{
 800464c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800464e:	4614      	mov	r4, r2
 8004650:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004654:	2201      	movs	r2, #1
 8004656:	f10d 0107 	add.w	r1, sp, #7
{
 800465a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800465c:	f7ff ff8e 	bl	800457c <_I2CWrite>

    if (status_int)
 8004660:	b118      	cbz	r0, 800466a <VL53L0X_RdWord+0x1e>
    {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8004662:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 8004666:	b002      	add	sp, #8
 8004668:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800466a:	4d07      	ldr	r5, [pc, #28]	; (8004688 <VL53L0X_RdWord+0x3c>)
 800466c:	2202      	movs	r2, #2
 800466e:	4629      	mov	r1, r5
 8004670:	4630      	mov	r0, r6
 8004672:	f7ff ff92 	bl	800459a <_I2CRead>
    if (status_int != 0)
 8004676:	2800      	cmp	r0, #0
 8004678:	d1f3      	bne.n	8004662 <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800467a:	782a      	ldrb	r2, [r5, #0]
 800467c:	786b      	ldrb	r3, [r5, #1]
 800467e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004682:	8023      	strh	r3, [r4, #0]
 8004684:	e7ef      	b.n	8004666 <VL53L0X_RdWord+0x1a>
 8004686:	bf00      	nop
 8004688:	200011e4 	.word	0x200011e4

0800468c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data)
{
 800468c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800468e:	4614      	mov	r4, r2
 8004690:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8004694:	2201      	movs	r2, #1
 8004696:	f10d 0107 	add.w	r1, sp, #7
{
 800469a:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 800469c:	f7ff ff6e 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 80046a0:	b118      	cbz	r0, 80046aa <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80046a2:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 80046a6:	b002      	add	sp, #8
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80046aa:	4d0a      	ldr	r5, [pc, #40]	; (80046d4 <VL53L0X_RdDWord+0x48>)
 80046ac:	2204      	movs	r2, #4
 80046ae:	4629      	mov	r1, r5
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7ff ff72 	bl	800459a <_I2CRead>
    if (status_int != 0) {
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d1f3      	bne.n	80046a2 <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80046ba:	786b      	ldrb	r3, [r5, #1]
 80046bc:	782a      	ldrb	r2, [r5, #0]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80046c4:	78ea      	ldrb	r2, [r5, #3]
 80046c6:	4413      	add	r3, r2
 80046c8:	78aa      	ldrb	r2, [r5, #2]
 80046ca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	e7e9      	b.n	80046a6 <VL53L0X_RdDWord+0x1a>
 80046d2:	bf00      	nop
 80046d4:	200011e4 	.word	0x200011e4

080046d8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data)
{
 80046d8:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <VL53L0X_WrByte+0x1c>)
 80046dc:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 80046de:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80046e0:	4619      	mov	r1, r3
 80046e2:	2202      	movs	r2, #2
 80046e4:	f7ff ff4a 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 80046e8:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 80046ea:	bf14      	ite	ne
 80046ec:	f06f 0013 	mvnne.w	r0, #19
 80046f0:	2000      	moveq	r0, #0
 80046f2:	bd08      	pop	{r3, pc}
 80046f4:	200011e4 	.word	0x200011e4

080046f8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data)
{
 80046f8:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <VL53L0X_WrWord+0x20>)
 80046fc:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 80046fe:	0a11      	lsrs	r1, r2, #8
 8004700:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8004702:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8004704:	4619      	mov	r1, r3
 8004706:	2203      	movs	r2, #3
 8004708:	f7ff ff38 	bl	800457c <_I2CWrite>
    
    if (status_int != 0) {
 800470c:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 800470e:	bf14      	ite	ne
 8004710:	f06f 0013 	mvnne.w	r0, #19
 8004714:	2000      	moveq	r0, #0
 8004716:	bd08      	pop	{r3, pc}
 8004718:	200011e4 	.word	0x200011e4

0800471c <VL53L0X_UpdateByte>:

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData)
{
 800471c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800471e:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8004720:	f10d 0207 	add.w	r2, sp, #7
{
 8004724:	4606      	mov	r6, r0
 8004726:	460f      	mov	r7, r1
 8004728:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 800472a:	f7ff ff46 	bl	80045ba <VL53L0X_RdByte>
    
    if (Status) {
 800472e:	b948      	cbnz	r0, 8004744 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8004730:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004734:	402a      	ands	r2, r5
 8004736:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8004738:	4639      	mov	r1, r7
 800473a:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 800473c:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8004740:	f7ff ffca 	bl	80046d8 <VL53L0X_WrByte>
done:
    return Status;
}
 8004744:	b003      	add	sp, #12
 8004746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004748 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev)
{
 8004748:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    /* do nothing */
    VL53L0X_OsDelay();
 800474a:	2002      	movs	r0, #2
 800474c:	f004 fa32 	bl	8008bb4 <HAL_Delay>
    return status;
}
 8004750:	2000      	movs	r0, #0
 8004752:	bd08      	pop	{r3, pc}

08004754 <SetupSingleShot.part.0>:
}

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t* pDev)
 8004754:	b513      	push	{r0, r1, r4, lr}
 8004756:	4604      	mov	r4, r0
  uint8_t preRangeVcselPeriod = 14;
  uint8_t finalRangeVcselPeriod = 10;
                          
  if (pDev->Present)
  {
    status = VL53L0X_StaticInit(pDev);
 8004758:	f001 fde2 	bl	8006320 <VL53L0X_StaticInit>
    if (status)
 800475c:	b110      	cbz	r0, 8004764 <SetupSingleShot.part.0+0x10>
    {
      printf("VL53L0X_StaticInit failed\n");
 800475e:	4833      	ldr	r0, [pc, #204]	; (800482c <SetupSingleShot.part.0+0xd8>)
 8004760:	f01f f80a 	bl	8023778 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8004764:	f10d 0202 	add.w	r2, sp, #2
 8004768:	f10d 0101 	add.w	r1, sp, #1
 800476c:	4620      	mov	r0, r4
 800476e:	f001 fbb9 	bl	8005ee4 <VL53L0X_PerformRefCalibration>
    if (status)
 8004772:	b110      	cbz	r0, 800477a <SetupSingleShot.part.0+0x26>
    {
      printf("VL53L0X_PerformRefCalibration failed\n");
 8004774:	482e      	ldr	r0, [pc, #184]	; (8004830 <SetupSingleShot.part.0+0xdc>)
 8004776:	f01e ffff 	bl	8023778 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800477a:	f10d 0203 	add.w	r2, sp, #3
 800477e:	a901      	add	r1, sp, #4
 8004780:	4620      	mov	r0, r4
 8004782:	f001 fed2 	bl	800652a <VL53L0X_PerformRefSpadManagement>
    if (status)
 8004786:	b110      	cbz	r0, 800478e <SetupSingleShot.part.0+0x3a>
    {
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8004788:	482a      	ldr	r0, [pc, #168]	; (8004834 <SetupSingleShot.part.0+0xe0>)
 800478a:	f01e fff5 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_SINGLE_RANGING); /* Setup in single ranging mode */
 800478e:	2100      	movs	r1, #0
 8004790:	4620      	mov	r0, r4
 8004792:	f001 f953 	bl	8005a3c <VL53L0X_SetDeviceMode>
    if (status)
 8004796:	b110      	cbz	r0, 800479e <SetupSingleShot.part.0+0x4a>
    {
      printf("VL53L0X_SetDeviceMode failed\n");
 8004798:	4827      	ldr	r0, [pc, #156]	; (8004838 <SetupSingleShot.part.0+0xe4>)
 800479a:	f01e ffed 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); /* Enable Sigma limit */
 800479e:	2201      	movs	r2, #1
 80047a0:	2100      	movs	r1, #0
 80047a2:	4620      	mov	r0, r4
 80047a4:	f001 fa28 	bl	8005bf8 <VL53L0X_SetLimitCheckEnable>
    if (status)
 80047a8:	b110      	cbz	r0, 80047b0 <SetupSingleShot.part.0+0x5c>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80047aa:	4824      	ldr	r0, [pc, #144]	; (800483c <SetupSingleShot.part.0+0xe8>)
 80047ac:	f01e ffe4 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(pDev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); /* Enable Signa limit */
 80047b0:	2201      	movs	r2, #1
 80047b2:	4611      	mov	r1, r2
 80047b4:	4620      	mov	r0, r4
 80047b6:	f001 fa1f 	bl	8005bf8 <VL53L0X_SetLimitCheckEnable>
    if (status)
 80047ba:	b110      	cbz	r0, 80047c2 <SetupSingleShot.part.0+0x6e>
    {
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 80047bc:	481f      	ldr	r0, [pc, #124]	; (800483c <SetupSingleShot.part.0+0xe8>)
 80047be:	f01e ffdb 	bl	8023778 <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 80047c2:	f641 1299 	movw	r2, #6553	; 0x1999
 80047c6:	2101      	movs	r1, #1
 80047c8:	4620      	mov	r0, r4
 80047ca:	f001 fa60 	bl	8005c8e <VL53L0X_SetLimitCheckValue>
    
    if (status)
 80047ce:	b110      	cbz	r0, 80047d6 <SetupSingleShot.part.0+0x82>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80047d0:	481b      	ldr	r0, [pc, #108]	; (8004840 <SetupSingleShot.part.0+0xec>)
 80047d2:	f01e ffd1 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(pDev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 80047d6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80047da:	2100      	movs	r1, #0
 80047dc:	4620      	mov	r0, r4
 80047de:	f001 fa56 	bl	8005c8e <VL53L0X_SetLimitCheckValue>
    if (status)
 80047e2:	b110      	cbz	r0, 80047ea <SetupSingleShot.part.0+0x96>
    {
      printf("VL53L0X_SetLimitCheckValue failed\n");
 80047e4:	4816      	ldr	r0, [pc, #88]	; (8004840 <SetupSingleShot.part.0+0xec>)
 80047e6:	f01e ffc7 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDev,  timingBudget);
 80047ea:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80047ee:	4620      	mov	r0, r4
 80047f0:	f001 f940 	bl	8005a74 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if (status)
 80047f4:	b110      	cbz	r0, 80047fc <SetupSingleShot.part.0+0xa8>
    {
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 80047f6:	4813      	ldr	r0, [pc, #76]	; (8004844 <SetupSingleShot.part.0+0xf0>)
 80047f8:	f01e ffbe 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 80047fc:	2212      	movs	r2, #18
 80047fe:	2100      	movs	r1, #0
 8004800:	4620      	mov	r0, r4
 8004802:	f001 f939 	bl	8005a78 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 8004806:	b110      	cbz	r0, 800480e <SetupSingleShot.part.0+0xba>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8004808:	480f      	ldr	r0, [pc, #60]	; (8004848 <SetupSingleShot.part.0+0xf4>)
 800480a:	f01e ffb5 	bl	8023778 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(pDev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800480e:	220e      	movs	r2, #14
 8004810:	2101      	movs	r1, #1
 8004812:	4620      	mov	r0, r4
 8004814:	f001 f930 	bl	8005a78 <VL53L0X_SetVcselPulsePeriod>
    if (status)
 8004818:	b110      	cbz	r0, 8004820 <SetupSingleShot.part.0+0xcc>
    {
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800481a:	480b      	ldr	r0, [pc, #44]	; (8004848 <SetupSingleShot.part.0+0xf4>)
 800481c:	f01e ffac 	bl	8023778 <puts>
    }
    
    pDev->LeakyFirst = 1;
 8004820:	2301      	movs	r3, #1
 8004822:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
  }
}
 8004826:	b002      	add	sp, #8
 8004828:	bd10      	pop	{r4, pc}
 800482a:	bf00      	nop
 800482c:	0802f601 	.word	0x0802f601
 8004830:	0802f61b 	.word	0x0802f61b
 8004834:	0802f640 	.word	0x0802f640
 8004838:	0802f668 	.word	0x0802f668
 800483c:	0802f685 	.word	0x0802f685
 8004840:	0802f6a8 	.word	0x0802f6a8
 8004844:	0802f6ca 	.word	0x0802f6ca
 8004848:	0802f700 	.word	0x0802f700

0800484c <VL53L0X_PROXIMITY_MspInit>:
{
 800484c:	b530      	push	{r4, r5, lr}
 800484e:	b087      	sub	sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004850:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004852:	2401      	movs	r4, #1
 8004854:	2540      	movs	r5, #64	; 0x40
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004856:	a901      	add	r1, sp, #4
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <VL53L0X_PROXIMITY_MspInit+0x30>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800485a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800485c:	e9cd 5401 	strd	r5, r4, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004860:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8004862:	f004 fc53 	bl	800910c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4804      	ldr	r0, [pc, #16]	; (800487c <VL53L0X_PROXIMITY_MspInit+0x30>)
 800486c:	f004 fd32 	bl	80092d4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);  
 8004870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004874:	f004 f99e 	bl	8008bb4 <HAL_Delay>
}
 8004878:	b007      	add	sp, #28
 800487a:	bd30      	pop	{r4, r5, pc}
 800487c:	48000800 	.word	0x48000800

08004880 <VL53L0X_PROXIMITY_Init>:
{
 8004880:	b510      	push	{r4, lr}
 8004882:	b09a      	sub	sp, #104	; 0x68
  uint16_t vl53l0x_id = 0; 
 8004884:	2400      	movs	r4, #0
 8004886:	f8ad 4002 	strh.w	r4, [sp, #2]
  SENSOR_IO_Init();
 800488a:	f000 fcd9 	bl	8005240 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 800488e:	f7ff ffdd 	bl	800484c <VL53L0X_PROXIMITY_MspInit>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004892:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8004894:	4c14      	ldr	r4, [pc, #80]	; (80048e8 <VL53L0X_PROXIMITY_Init+0x68>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8004896:	2263      	movs	r2, #99	; 0x63
 8004898:	a801      	add	r0, sp, #4
 800489a:	f01d fdcd 	bl	8022438 <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800489e:	a901      	add	r1, sp, #4
 80048a0:	4620      	mov	r0, r4
 80048a2:	f001 f8c9 	bl	8005a38 <VL53L0X_GetDeviceInfo>
 80048a6:	b9e0      	cbnz	r0, 80048e2 <VL53L0X_PROXIMITY_Init+0x62>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 80048a8:	f10d 0202 	add.w	r2, sp, #2
 80048ac:	21c0      	movs	r1, #192	; 0xc0
 80048ae:	4620      	mov	r0, r4
 80048b0:	f7ff fecc 	bl	800464c <VL53L0X_RdWord>
 80048b4:	b988      	cbnz	r0, 80048da <VL53L0X_PROXIMITY_Init+0x5a>
      if (vl53l0x_id == VL53L0X_ID)
 80048b6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80048ba:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 80048be:	429a      	cmp	r2, r3
 80048c0:	d109      	bne.n	80048d6 <VL53L0X_PROXIMITY_Init+0x56>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 80048c2:	4620      	mov	r0, r4
 80048c4:	f001 fa94 	bl	8005df0 <VL53L0X_DataInit>
 80048c8:	b928      	cbnz	r0, 80048d6 <VL53L0X_PROXIMITY_Init+0x56>
          Dev.Present = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	4620      	mov	r0, r4
 80048ce:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  if (pDev->Present)
 80048d2:	f7ff ff3f 	bl	8004754 <SetupSingleShot.part.0>
}
 80048d6:	b01a      	add	sp, #104	; 0x68
 80048d8:	bd10      	pop	{r4, pc}
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 80048da:	4804      	ldr	r0, [pc, #16]	; (80048ec <VL53L0X_PROXIMITY_Init+0x6c>)
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80048dc:	f01e ff4c 	bl	8023778 <puts>
}
 80048e0:	e7f9      	b.n	80048d6 <VL53L0X_PROXIMITY_Init+0x56>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80048e2:	4803      	ldr	r0, [pc, #12]	; (80048f0 <VL53L0X_PROXIMITY_Init+0x70>)
 80048e4:	e7fa      	b.n	80048dc <VL53L0X_PROXIMITY_Init+0x5c>
 80048e6:	bf00      	nop
 80048e8:	20000064 	.word	0x20000064
 80048ec:	0802f723 	.word	0x0802f723
 80048f0:	0802f750 	.word	0x0802f750

080048f4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80048f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 80048f6:	4c16      	ldr	r4, [pc, #88]	; (8004950 <SPI_WIFI_DelayUs+0x5c>)
 80048f8:	4f16      	ldr	r7, [pc, #88]	; (8004954 <SPI_WIFI_DelayUs+0x60>)
 80048fa:	6823      	ldr	r3, [r4, #0]
{
 80048fc:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 80048fe:	b98b      	cbnz	r3, 8004924 <SPI_WIFI_DelayUs+0x30>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004906:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t   t; 
     ct=cycle_per_ms;
 800490a:	9301      	str	r3, [sp, #4]
     t=HAL_GetTick();
 800490c:	f004 f94c 	bl	8008ba8 <HAL_GetTick>
 8004910:	4606      	mov	r6, r0
     while(ct) ct--;
 8004912:	9b01      	ldr	r3, [sp, #4]
 8004914:	b99b      	cbnz	r3, 800493e <SPI_WIFI_DelayUs+0x4a>
     cycle_per_loop=HAL_GetTick()-t;  
 8004916:	f004 f947 	bl	8008ba8 <HAL_GetTick>
     if (cycle_per_loop==0) cycle_per_loop=1;
 800491a:	1b80      	subs	r0, r0, r6
 800491c:	bf0a      	itet	eq
 800491e:	2301      	moveq	r3, #1
     cycle_per_loop=HAL_GetTick()-t;  
 8004920:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 8004922:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <SPI_WIFI_DelayUs+0x64>)
 8004926:	6838      	ldr	r0, [r7, #0]
 8004928:	fbb0 f0f3 	udiv	r0, r0, r3
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 8004932:	4368      	muls	r0, r5
 8004934:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	b92b      	cbnz	r3, 8004946 <SPI_WIFI_DelayUs+0x52>
  return;
}
 800493a:	b003      	add	sp, #12
 800493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	3b01      	subs	r3, #1
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	e7e5      	b.n	8004912 <SPI_WIFI_DelayUs+0x1e>
  while(ct) ct--;
 8004946:	9b01      	ldr	r3, [sp, #4]
 8004948:	3b01      	subs	r3, #1
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	e7f3      	b.n	8004936 <SPI_WIFI_DelayUs+0x42>
 800494e:	bf00      	nop
 8004950:	20001094 	.word	0x20001094
 8004954:	20000590 	.word	0x20000590
 8004958:	000f4240 	.word	0x000f4240

0800495c <wait_spi_tx_event>:
{
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8004960:	f004 f922 	bl	8008ba8 <HAL_GetTick>
  while (spi_tx_event==1)
 8004964:	4e07      	ldr	r6, [pc, #28]	; (8004984 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 8004966:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 8004968:	6873      	ldr	r3, [r6, #4]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d001      	beq.n	8004972 <wait_spi_tx_event+0x16>
  return 0; 
 800496e:	2000      	movs	r0, #0
}
 8004970:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8004972:	f004 f919 	bl	8008ba8 <HAL_GetTick>
 8004976:	1b00      	subs	r0, r0, r4
 8004978:	42a8      	cmp	r0, r5
 800497a:	d9f5      	bls.n	8004968 <wait_spi_tx_event+0xc>
      return -1;
 800497c:	f04f 30ff 	mov.w	r0, #4294967295
 8004980:	e7f6      	b.n	8004970 <wait_spi_tx_event+0x14>
 8004982:	bf00      	nop
 8004984:	20001094 	.word	0x20001094

08004988 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 800498a:	4840      	ldr	r0, [pc, #256]	; (8004a8c <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 800498c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 800498e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8004990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004994:	659a      	str	r2, [r3, #88]	; 0x58
 8004996:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8004998:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 800499a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800499e:	9201      	str	r2, [sp, #4]
 80049a0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049a4:	f042 0202 	orr.w	r2, r2, #2
 80049a8:	64da      	str	r2, [r3, #76]	; 0x4c
 80049aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049ac:	f002 0202 	and.w	r2, r2, #2
 80049b0:	9202      	str	r2, [sp, #8]
 80049b2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049b6:	f042 0204 	orr.w	r2, r2, #4
 80049ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80049bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049be:	f002 0204 	and.w	r2, r2, #4
 80049c2:	9203      	str	r2, [sp, #12]
 80049c4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049c8:	f042 0210 	orr.w	r2, r2, #16
 80049cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80049ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d0:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049d4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80049dc:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 80049de:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80049e0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 80049e2:	f004 fc77 	bl	80092d4 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80049e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80049ea:	a905      	add	r1, sp, #20
 80049ec:	4827      	ldr	r0, [pc, #156]	; (8004a8c <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80049ee:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80049f2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80049f6:	f004 fb89 	bl	800910c <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80049fc:	4825      	ldr	r0, [pc, #148]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80049fe:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a00:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8004a02:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a06:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a0a:	f004 fb7f 	bl	800910c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8004a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a12:	a905      	add	r1, sp, #20
 8004a14:	481f      	ldr	r0, [pc, #124]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 8004a16:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a18:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8004a1c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8004a20:	f004 fb74 	bl	800910c <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 8004a24:	4622      	mov	r2, r4
 8004a26:	4621      	mov	r1, r4
 8004a28:	481a      	ldr	r0, [pc, #104]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
 8004a2a:	f004 fc53 	bl	80092d4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004a2e:	a905      	add	r1, sp, #20
 8004a30:	4818      	ldr	r0, [pc, #96]	; (8004a94 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a32:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8004a34:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a38:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8004a3c:	f004 fb66 	bl	800910c <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8004a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004a44:	a905      	add	r1, sp, #20
 8004a46:	4814      	ldr	r0, [pc, #80]	; (8004a98 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a48:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004a4a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a4e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8004a52:	f004 fb5b 	bl	800910c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8004a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004a5a:	a905      	add	r1, sp, #20
 8004a5c:	480e      	ldr	r0, [pc, #56]	; (8004a98 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a5e:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004a60:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a64:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8004a68:	f004 fb50 	bl	800910c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8004a6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004a70:	4809      	ldr	r0, [pc, #36]	; (8004a98 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8004a72:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004a74:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004a76:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8004a7a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8004a7e:	f004 fb45 	bl	800910c <HAL_GPIO_Init>
}
 8004a82:	b00b      	add	sp, #44	; 0x2c
 8004a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	48000400 	.word	0x48000400
 8004a90:	10110000 	.word	0x10110000
 8004a94:	48001000 	.word	0x48001000
 8004a98:	48000800 	.word	0x48000800

08004a9c <SPI_WIFI_ResetModule>:
{
 8004a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8004a9e:	f004 f883 	bl	8008ba8 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8004aaa:	482e      	ldr	r0, [pc, #184]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004aac:	4f2e      	ldr	r7, [pc, #184]	; (8004b68 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8004aae:	f004 fc11 	bl	80092d4 <HAL_GPIO_WritePin>
 8004ab2:	200a      	movs	r0, #10
 8004ab4:	f004 f87e 	bl	8008bb4 <HAL_Delay>
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004abe:	4829      	ldr	r0, [pc, #164]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004ac0:	f004 fc08 	bl	80092d4 <HAL_GPIO_WritePin>
 8004ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ac8:	f004 f874 	bl	8008bb4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8004acc:	4825      	ldr	r0, [pc, #148]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	f004 fbff 	bl	80092d4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004ad6:	200f      	movs	r0, #15
 8004ad8:	f7ff ff0c 	bl	80048f4 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8004adc:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8004ade:	4821      	ldr	r0, [pc, #132]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	f004 fbf1 	bl	80092c8 <HAL_GPIO_ReadPin>
 8004ae6:	2801      	cmp	r0, #1
 8004ae8:	4602      	mov	r2, r0
 8004aea:	d020      	beq.n	8004b2e <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS(); 
 8004aec:	2201      	movs	r2, #1
 8004aee:	481d      	ldr	r0, [pc, #116]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004af0:	4611      	mov	r1, r2
 8004af2:	f004 fbef 	bl	80092d4 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 8004af6:	f89d 3000 	ldrb.w	r3, [sp]
 8004afa:	2b15      	cmp	r3, #21
 8004afc:	d12e      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004afe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8004b02:	2b15      	cmp	r3, #21
 8004b04:	d12a      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004b06:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004b0a:	2b0d      	cmp	r3, #13
 8004b0c:	d126      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004b0e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004b12:	2b0a      	cmp	r3, #10
 8004b14:	d122      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 8004b16:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8004b1c:	d11e      	bne.n	8004b5c <SPI_WIFI_ResetModule+0xc0>
 8004b1e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8004b22:	3820      	subs	r0, #32
 8004b24:	bf18      	it	ne
 8004b26:	f04f 30ff 	movne.w	r0, #4294967295
}
 8004b2a:	b003      	add	sp, #12
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 8004b2e:	eb0d 0104 	add.w	r1, sp, r4
 8004b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b36:	4638      	mov	r0, r7
 8004b38:	f006 fc99 	bl	800b46e <HAL_SPI_Receive>
 8004b3c:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b3e:	f004 f833 	bl	8008ba8 <HAL_GetTick>
 8004b42:	1b40      	subs	r0, r0, r5
    count += 2;
 8004b44:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b46:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8004b4a:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8004b4c:	d201      	bcs.n	8004b52 <SPI_WIFI_ResetModule+0xb6>
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d0c5      	beq.n	8004ade <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS(); 
 8004b52:	2201      	movs	r2, #1
 8004b54:	4803      	ldr	r0, [pc, #12]	; (8004b64 <SPI_WIFI_ResetModule+0xc8>)
 8004b56:	4611      	mov	r1, r2
 8004b58:	f004 fbbc 	bl	80092d4 <HAL_GPIO_WritePin>
    return -1;
 8004b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b60:	e7e3      	b.n	8004b2a <SPI_WIFI_ResetModule+0x8e>
 8004b62:	bf00      	nop
 8004b64:	48001000 	.word	0x48001000
 8004b68:	20001224 	.word	0x20001224

08004b6c <SPI_WIFI_Init>:
{
 8004b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8004b6e:	4605      	mov	r5, r0
 8004b70:	bb78      	cbnz	r0, 8004bd2 <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8004b72:	4c1c      	ldr	r4, [pc, #112]	; (8004be4 <SPI_WIFI_Init+0x78>)
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <SPI_WIFI_Init+0x7c>)
 8004b76:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f7ff ff05 	bl	8004988 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8004b7e:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8004b82:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8004b86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8004b8e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004b92:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 8004b94:	2310      	movs	r3, #16
 8004b96:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8004b9a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 8004b9e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8004ba2:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8004ba4:	f006 fa38 	bl	800b018 <HAL_SPI_Init>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	b9b8      	cbnz	r0, 8004bdc <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 8004bac:	210f      	movs	r1, #15
 8004bae:	9001      	str	r0, [sp, #4]
 8004bb0:	2007      	movs	r0, #7
 8004bb2:	f004 f81f 	bl	8008bf4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8004bb6:	2007      	movs	r0, #7
 8004bb8:	f004 f84e 	bl	8008c58 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 1, 0);
 8004bbc:	9a01      	ldr	r2, [sp, #4]
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	2033      	movs	r0, #51	; 0x33
 8004bc2:	f004 f817 	bl	8008bf4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8004bc6:	2033      	movs	r0, #51	; 0x33
 8004bc8:	f004 f846 	bl	8008c58 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8004bcc:	200a      	movs	r0, #10
 8004bce:	f7ff fe91 	bl	80048f4 <SPI_WIFI_DelayUs>
}
 8004bd2:	b003      	add	sp, #12
 8004bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8004bd8:	f7ff bf60 	b.w	8004a9c <SPI_WIFI_ResetModule>
}
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	b003      	add	sp, #12
 8004be2:	bd30      	pop	{r4, r5, pc}
 8004be4:	20001224 	.word	0x20001224
 8004be8:	40003c00 	.word	0x40003c00

08004bec <SPI_WIFI_DeInit>:
{
 8004bec:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8004bee:	4802      	ldr	r0, [pc, #8]	; (8004bf8 <SPI_WIFI_DeInit+0xc>)
 8004bf0:	f006 fa71 	bl	800b0d6 <HAL_SPI_DeInit>
}
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	bd08      	pop	{r3, pc}
 8004bf8:	20001224 	.word	0x20001224

08004bfc <SPI_WIFI_ReceiveData>:
{
 8004bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS(); 
 8004c02:	2201      	movs	r2, #1
{
 8004c04:	4604      	mov	r4, r0
 8004c06:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS(); 
 8004c08:	4836      	ldr	r0, [pc, #216]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 8004c0a:	4e37      	ldr	r6, [pc, #220]	; (8004ce8 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS(); 
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	f004 fb61 	bl	80092d4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8004c12:	2003      	movs	r0, #3
 8004c14:	f7ff fe6e 	bl	80048f4 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8004c18:	f003 ffc6 	bl	8008ba8 <HAL_GetTick>
 8004c1c:	46b1      	mov	r9, r6
 8004c1e:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 8004c20:	68b3      	ldr	r3, [r6, #8]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d01a      	beq.n	8004c5c <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS(); 
 8004c26:	482f      	ldr	r0, [pc, #188]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8004c28:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8004ce4 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004cec <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS(); 
 8004c30:	2200      	movs	r2, #0
 8004c32:	2101      	movs	r1, #1
 8004c34:	f004 fb4e 	bl	80092d4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004c38:	200f      	movs	r0, #15
 8004c3a:	f7ff fe5b 	bl	80048f4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8004c3e:	3402      	adds	r4, #2
 8004c40:	2500      	movs	r5, #0
 8004c42:	2102      	movs	r1, #2
 8004c44:	4658      	mov	r0, fp
 8004c46:	f004 fb3f 	bl	80092c8 <HAL_GPIO_ReadPin>
 8004c4a:	2801      	cmp	r0, #1
 8004c4c:	b22e      	sxth	r6, r5
 8004c4e:	d00d      	beq.n	8004c6c <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS(); 
 8004c50:	2201      	movs	r2, #1
 8004c52:	4824      	ldr	r0, [pc, #144]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
 8004c54:	4611      	mov	r1, r2
 8004c56:	f004 fb3d 	bl	80092d4 <HAL_GPIO_WritePin>
  return length;
 8004c5a:	e01a      	b.n	8004c92 <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004c5c:	f003 ffa4 	bl	8008ba8 <HAL_GetTick>
 8004c60:	1b40      	subs	r0, r0, r5
 8004c62:	4580      	cmp	r8, r0
 8004c64:	d2dc      	bcs.n	8004c20 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8004c66:	f06f 0602 	mvn.w	r6, #2
 8004c6a:	e012      	b.n	8004c92 <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 8004c6c:	42af      	cmp	r7, r5
 8004c6e:	dc01      	bgt.n	8004c74 <SPI_WIFI_ReceiveData+0x78>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	d1ed      	bne.n	8004c50 <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8004c74:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c76:	a901      	add	r1, sp, #4
 8004c78:	4650      	mov	r0, sl
      spi_rx_event=1;
 8004c7a:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8004c7e:	f006 fde7 	bl	800b850 <HAL_SPI_Receive_IT>
 8004c82:	2201      	movs	r2, #1
 8004c84:	b148      	cbz	r0, 8004c9a <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8004c86:	4817      	ldr	r0, [pc, #92]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
 8004c88:	4611      	mov	r1, r2
 8004c8a:	f004 fb23 	bl	80092d4 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8004c8e:	f04f 36ff 	mov.w	r6, #4294967295
}
 8004c92:	4630      	mov	r0, r6
 8004c94:	b003      	add	sp, #12
 8004c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8004c9a:	f003 ff85 	bl	8008ba8 <HAL_GetTick>
 8004c9e:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8004ca0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d104      	bne.n	8004cb2 <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004ca8:	f003 ff7e 	bl	8008ba8 <HAL_GetTick>
 8004cac:	1b80      	subs	r0, r0, r6
 8004cae:	4580      	cmp	r8, r0
 8004cb0:	d2f6      	bcs.n	8004ca0 <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8004cb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cb6:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 8004cba:	3502      	adds	r5, #2
 8004cbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004cc0:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8004cc4:	f5b5 6faf 	cmp.w	r5, #1400	; 0x578
 8004cc8:	f104 0402 	add.w	r4, r4, #2
 8004ccc:	d1b9      	bne.n	8004c42 <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4804      	ldr	r0, [pc, #16]	; (8004ce4 <SPI_WIFI_ReceiveData+0xe8>)
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	f004 fafe 	bl	80092d4 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004cd8:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();    
 8004cdc:	f7ff fede 	bl	8004a9c <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8004ce0:	e7d7      	b.n	8004c92 <SPI_WIFI_ReceiveData+0x96>
 8004ce2:	bf00      	nop
 8004ce4:	48001000 	.word	0x48001000
 8004ce8:	20001094 	.word	0x20001094
 8004cec:	20001224 	.word	0x20001224

08004cf0 <SPI_WIFI_SendData>:
{
 8004cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8004cfa:	f003 ff55 	bl	8008ba8 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 8004cfe:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004d98 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8004d02:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 8004d04:	2102      	movs	r1, #2
 8004d06:	4648      	mov	r0, r9
 8004d08:	f004 fade 	bl	80092c8 <HAL_GPIO_ReadPin>
 8004d0c:	2801      	cmp	r0, #1
 8004d0e:	4606      	mov	r6, r0
 8004d10:	d11b      	bne.n	8004d4a <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 8004d12:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8004da0 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 8004d16:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 8004d18:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	481e      	ldr	r0, [pc, #120]	; (8004d98 <SPI_WIFI_SendData+0xa8>)
 8004d20:	f004 fad8 	bl	80092d4 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8004d24:	200f      	movs	r0, #15
 8004d26:	f7ff fde5 	bl	80048f4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8004d2a:	2c01      	cmp	r4, #1
 8004d2c:	d919      	bls.n	8004d62 <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004d2e:	481b      	ldr	r0, [pc, #108]	; (8004d9c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8004d30:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 8004d34:	0862      	lsrs	r2, r4, #1
 8004d36:	4629      	mov	r1, r5
 8004d38:	f006 fcb0 	bl	800b69c <HAL_SPI_Transmit_IT>
 8004d3c:	b170      	cbz	r0, 8004d5c <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4815      	ldr	r0, [pc, #84]	; (8004d98 <SPI_WIFI_SendData+0xa8>)
 8004d42:	4611      	mov	r1, r2
 8004d44:	f004 fac6 	bl	80092d4 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8004d48:	e005      	b.n	8004d56 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 8004d4a:	f003 ff2d 	bl	8008ba8 <HAL_GetTick>
 8004d4e:	eba0 0008 	sub.w	r0, r0, r8
 8004d52:	4287      	cmp	r7, r0
 8004d54:	d2d6      	bcs.n	8004d04 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8004d56:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5a:	e019      	b.n	8004d90 <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	f7ff fdfd 	bl	800495c <wait_spi_tx_event>
  if ( len & 1)
 8004d62:	07e3      	lsls	r3, r4, #31
 8004d64:	d513      	bpl.n	8004d8e <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 8004d66:	4425      	add	r5, r4
    spi_tx_event=1;
 8004d68:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 8004d6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d6e:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004d72:	480a      	ldr	r0, [pc, #40]	; (8004d9c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8004d74:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8004d78:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004d7a:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8004d7c:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8004d80:	f006 fc8c 	bl	800b69c <HAL_SPI_Transmit_IT>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d1da      	bne.n	8004d3e <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff fde7 	bl	800495c <wait_spi_tx_event>
  return len;
 8004d8e:	b220      	sxth	r0, r4
}
 8004d90:	b003      	add	sp, #12
 8004d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d96:	bf00      	nop
 8004d98:	48001000 	.word	0x48001000
 8004d9c:	20001224 	.word	0x20001224
 8004da0:	20001094 	.word	0x20001094

08004da4 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8004da4:	f003 bf06 	b.w	8008bb4 <HAL_Delay>

08004da8 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <HAL_SPI_RxCpltCallback+0xc>)
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	b10a      	cbz	r2, 8004db2 <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 8004dae:	2200      	movs	r2, #0
 8004db0:	60da      	str	r2, [r3, #12]
  }
}
 8004db2:	4770      	bx	lr
 8004db4:	20001094 	.word	0x20001094

08004db8 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <HAL_SPI_TxCpltCallback+0xc>)
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	b10a      	cbz	r2, 8004dc2 <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	605a      	str	r2, [r3, #4]
  }
}
 8004dc2:	4770      	bx	lr
 8004dc4:	20001094 	.word	0x20001094

08004dc8 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <SPI_WIFI_ISR+0x10>)
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 8004dce:	bf04      	itt	eq
 8004dd0:	2200      	moveq	r2, #0
 8004dd2:	609a      	streq	r2, [r3, #8]
   }
}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20001094 	.word	0x20001094

08004ddc <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8004ddc:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <WIFI_Init+0x30>)
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <WIFI_Init+0x34>)
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <WIFI_Init+0x38>)
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <WIFI_Init+0x3c>)
 8004dea:	490c      	ldr	r1, [pc, #48]	; (8004e1c <WIFI_Init+0x40>)
 8004dec:	480c      	ldr	r0, [pc, #48]	; (8004e20 <WIFI_Init+0x44>)
 8004dee:	f003 fa3b 	bl	8008268 <ES_WIFI_RegisterBusIO>
 8004df2:	b940      	cbnz	r0, 8004e06 <WIFI_Init+0x2a>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004df4:	480a      	ldr	r0, [pc, #40]	; (8004e20 <WIFI_Init+0x44>)
 8004df6:	f003 f9d5 	bl	80081a4 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004dfa:	3800      	subs	r0, #0
 8004dfc:	bf18      	it	ne
 8004dfe:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8004e00:	b003      	add	sp, #12
 8004e02:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8004e06:	2001      	movs	r0, #1
 8004e08:	e7fa      	b.n	8004e00 <WIFI_Init+0x24>
 8004e0a:	bf00      	nop
 8004e0c:	08004bfd 	.word	0x08004bfd
 8004e10:	08004cf1 	.word	0x08004cf1
 8004e14:	08004bed 	.word	0x08004bed
 8004e18:	08004da5 	.word	0x08004da5
 8004e1c:	08004b6d 	.word	0x08004b6d
 8004e20:	20001288 	.word	0x20001288

08004e24 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8004e24:	b508      	push	{r3, lr}
 8004e26:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8004e28:	460a      	mov	r2, r1
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	4806      	ldr	r0, [pc, #24]	; (8004e48 <WIFI_Connect+0x24>)
 8004e2e:	f003 fa2d 	bl	800828c <ES_WIFI_Connect>
 8004e32:	b930      	cbnz	r0, 8004e42 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8004e34:	4804      	ldr	r0, [pc, #16]	; (8004e48 <WIFI_Connect+0x24>)
 8004e36:	f003 fa85 	bl	8008344 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004e3a:	3800      	subs	r0, #0
 8004e3c:	bf18      	it	ne
 8004e3e:	2001      	movne	r0, #1
       ret = WIFI_STATUS_OK;
    }
    
  }
  return ret;
}
 8004e40:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 8004e42:	2001      	movs	r0, #1
 8004e44:	e7fc      	b.n	8004e40 <WIFI_Connect+0x1c>
 8004e46:	bf00      	nop
 8004e48:	20001288 	.word	0x20001288

08004e4c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8004e50:	4803      	ldr	r0, [pc, #12]	; (8004e60 <WIFI_GetMAC_Address+0x14>)
 8004e52:	f003 faeb 	bl	800842c <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004e56:	3800      	subs	r0, #0
 8004e58:	bf18      	it	ne
 8004e5a:	2001      	movne	r0, #1
 8004e5c:	bd08      	pop	{r3, pc}
 8004e5e:	bf00      	nop
 8004e60:	20001288 	.word	0x20001288

08004e64 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8004e64:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004e66:	4d06      	ldr	r5, [pc, #24]	; (8004e80 <WIFI_GetIP_Address+0x1c>)
{
 8004e68:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f003 fa4e 	bl	800830c <ES_WIFI_IsConnected>
 8004e70:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8004e72:	bf03      	ittte	eq
 8004e74:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8004e78:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 8004e7a:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 8004e7c:	2001      	movne	r0, #1
  }
  return ret;
}
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	20001288 	.word	0x20001288

08004e84 <WIFI_GetHostAddress>:
  * @param  location : Host URL
  * @param  ipaddr : array of the IP address
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetHostAddress(const char *location, uint8_t *ipaddr)
{
 8004e84:	460a      	mov	r2, r1
 8004e86:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4803      	ldr	r0, [pc, #12]	; (8004e98 <WIFI_GetHostAddress+0x14>)
 8004e8c:	f003 faec 	bl	8008468 <ES_WIFI_DNS_LookUp>
  {
    return WIFI_STATUS_OK;
  }
  
  return ret;
}
 8004e90:	3800      	subs	r0, #0
 8004e92:	bf18      	it	ne
 8004e94:	2001      	movne	r0, #1
 8004e96:	bd08      	pop	{r3, pc}
 8004e98:	20001288 	.word	0x20001288

08004e9c <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8004e9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8004e9e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8004ea2:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8004ea6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8004eaa:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004eae:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004eb6:	bf18      	it	ne
 8004eb8:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8004eba:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8004ebc:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8004ec0:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8004ec4:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ec8:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8004eca:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ecc:	4806      	ldr	r0, [pc, #24]	; (8004ee8 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8004ece:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8004ed0:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8004ed4:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ed8:	f003 fae6 	bl	80084a8 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8004edc:	3800      	subs	r0, #0
 8004ede:	bf18      	it	ne
 8004ee0:	2001      	movne	r0, #1
 8004ee2:	b007      	add	sp, #28
 8004ee4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ee8:	20001288 	.word	0x20001288

08004eec <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 8004eec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 8004eee:	f88d 0005 	strb.w	r0, [sp, #5]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8004ef2:	a901      	add	r1, sp, #4
 8004ef4:	4804      	ldr	r0, [pc, #16]	; (8004f08 <WIFI_CloseClientConnection+0x1c>)
 8004ef6:	f003 fb39 	bl	800856c <ES_WIFI_StopClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret; 
}
 8004efa:	3800      	subs	r0, #0
 8004efc:	bf18      	it	ne
 8004efe:	2001      	movne	r0, #1
 8004f00:	b007      	add	sp, #28
 8004f02:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f06:	bf00      	nop
 8004f08:	20001288 	.word	0x20001288

08004f0c <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8004f0c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004f0e:	9c04      	ldr	r4, [sp, #16]
 8004f10:	e9cd 3400 	strd	r3, r4, [sp]
 8004f14:	4613      	mov	r3, r2
 8004f16:	460a      	mov	r2, r1
 8004f18:	4601      	mov	r1, r0
 8004f1a:	4804      	ldr	r0, [pc, #16]	; (8004f2c <WIFI_SendData+0x20>)
 8004f1c:	f003 fb46 	bl	80085ac <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8004f20:	3800      	subs	r0, #0
 8004f22:	bf18      	it	ne
 8004f24:	2001      	movne	r0, #1
 8004f26:	b002      	add	sp, #8
 8004f28:	bd10      	pop	{r4, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20001288 	.word	0x20001288

08004f30 <WIFI_SendDataTo>:



WIFI_Status_t WIFI_SendDataTo(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t port)
{
 8004f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_SendDataTo(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004f32:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004f36:	9403      	str	r4, [sp, #12]
 8004f38:	9c07      	ldr	r4, [sp, #28]
 8004f3a:	9402      	str	r4, [sp, #8]
 8004f3c:	9c06      	ldr	r4, [sp, #24]
 8004f3e:	e9cd 3400 	strd	r3, r4, [sp]
 8004f42:	4613      	mov	r3, r2
 8004f44:	460a      	mov	r2, r1
 8004f46:	4601      	mov	r1, r0
 8004f48:	4803      	ldr	r0, [pc, #12]	; (8004f58 <WIFI_SendDataTo+0x28>)
 8004f4a:	f003 fbad 	bl	80086a8 <ES_WIFI_SendDataTo>
  {
    ret = WIFI_STATUS_OK;
  }

  return ret;
}
 8004f4e:	3800      	subs	r0, #0
 8004f50:	bf18      	it	ne
 8004f52:	2001      	movne	r0, #1
 8004f54:	b004      	add	sp, #16
 8004f56:	bd10      	pop	{r4, pc}
 8004f58:	20001288 	.word	0x20001288

08004f5c <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 8004f5c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8004f5e:	9c04      	ldr	r4, [sp, #16]
 8004f60:	e9cd 3400 	strd	r3, r4, [sp]
 8004f64:	4613      	mov	r3, r2
 8004f66:	460a      	mov	r2, r1
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4804      	ldr	r0, [pc, #16]	; (8004f7c <WIFI_ReceiveData+0x20>)
 8004f6c:	f003 fc38 	bl	80087e0 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004f70:	3800      	subs	r0, #0
 8004f72:	bf18      	it	ne
 8004f74:	2001      	movne	r0, #1
 8004f76:	b002      	add	sp, #8
 8004f78:	bd10      	pop	{r4, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20001288 	.word	0x20001288

08004f80 <WIFI_ReceiveDataFrom>:


WIFI_Status_t WIFI_ReceiveDataFrom(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t *port)
{
 8004f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 

  if(ES_WIFI_ReceiveDataFrom(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 8004f82:	9c08      	ldr	r4, [sp, #32]
 8004f84:	9403      	str	r4, [sp, #12]
 8004f86:	9c07      	ldr	r4, [sp, #28]
 8004f88:	9402      	str	r4, [sp, #8]
 8004f8a:	9c06      	ldr	r4, [sp, #24]
 8004f8c:	e9cd 3400 	strd	r3, r4, [sp]
 8004f90:	4613      	mov	r3, r2
 8004f92:	460a      	mov	r2, r1
 8004f94:	4601      	mov	r1, r0
 8004f96:	4804      	ldr	r0, [pc, #16]	; (8004fa8 <WIFI_ReceiveDataFrom+0x28>)
 8004f98:	f003 fcaa 	bl	80088f0 <ES_WIFI_ReceiveDataFrom>
  {
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004f9c:	3800      	subs	r0, #0
 8004f9e:	bf18      	it	ne
 8004fa0:	2001      	movne	r0, #1
 8004fa2:	b004      	add	sp, #16
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20001288 	.word	0x20001288

08004fac <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 8004fac:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 8004fae:	4903      	ldr	r1, [pc, #12]	; (8004fbc <WIFI_GetModuleFwRevision+0x10>)
 8004fb0:	2218      	movs	r2, #24
 8004fb2:	f01e fd1b 	bl	80239ec <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	bd08      	pop	{r3, pc}
 8004fba:	bf00      	nop
 8004fbc:	200012a8 	.word	0x200012a8

08004fc0 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 8004fc0:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 8004fc2:	4903      	ldr	r1, [pc, #12]	; (8004fd0 <WIFI_GetModuleID+0x10>)
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f01e fd11 	bl	80239ec <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fca:	2000      	movs	r0, #0
 8004fcc:	bd08      	pop	{r3, pc}
 8004fce:	bf00      	nop
 8004fd0:	20001288 	.word	0x20001288

08004fd4 <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 8004fd4:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 8004fd6:	4903      	ldr	r1, [pc, #12]	; (8004fe4 <WIFI_GetModuleName+0x10>)
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f01e fd07 	bl	80239ec <strncpy>
    ret = WIFI_STATUS_OK; 
  }
  return ret;
}
 8004fde:	2000      	movs	r0, #0
 8004fe0:	bd08      	pop	{r3, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200012f0 	.word	0x200012f0

08004fe8 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8004fe8:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8004fec:	4c2a      	ldr	r4, [pc, #168]	; (8005098 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004fee:	4b2b      	ldr	r3, [pc, #172]	; (800509c <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8004ff0:	4d2b      	ldr	r5, [pc, #172]	; (80050a0 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ff2:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004ff4:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 8004ffe:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005002:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005006:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800500e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8005010:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800501a:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800501c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005020:	2312      	movs	r3, #18
 8005022:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005026:	2003      	movs	r0, #3
 8005028:	2304      	movs	r3, #4
 800502a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800502e:	a903      	add	r1, sp, #12
 8005030:	481c      	ldr	r0, [pc, #112]	; (80050a4 <I2Cx_Init.constprop.0+0xbc>)
 8005032:	f004 f86b 	bl	800910c <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005036:	a903      	add	r1, sp, #12
 8005038:	481a      	ldr	r0, [pc, #104]	; (80050a4 <I2Cx_Init.constprop.0+0xbc>)
 800503a:	f004 f867 	bl	800910c <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800503e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005044:	65ab      	str	r3, [r5, #88]	; 0x58
 8005046:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504c:	9302      	str	r3, [sp, #8]
 800504e:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8005050:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005052:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005056:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8005058:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800505a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800505e:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005060:	4632      	mov	r2, r6
 8005062:	210f      	movs	r1, #15
 8005064:	2021      	movs	r0, #33	; 0x21
 8005066:	f003 fdc5 	bl	8008bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800506a:	2021      	movs	r0, #33	; 0x21
 800506c:	f003 fdf4 	bl	8008c58 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005070:	4632      	mov	r2, r6
 8005072:	210f      	movs	r1, #15
 8005074:	2022      	movs	r0, #34	; 0x22
 8005076:	f003 fdbd 	bl	8008bf4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800507a:	2022      	movs	r0, #34	; 0x22
 800507c:	f003 fdec 	bl	8008c58 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8005080:	4620      	mov	r0, r4
 8005082:	f004 fac9 	bl	8009618 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8005086:	4631      	mov	r1, r6
 8005088:	4620      	mov	r0, r4
 800508a:	f004 fddb 	bl	8009c44 <HAL_I2CEx_ConfigAnalogFilter>
}
 800508e:	b008      	add	sp, #32
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	bf00      	nop
 8005094:	40005800 	.word	0x40005800
 8005098:	200019a8 	.word	0x200019a8
 800509c:	00702681 	.word	0x00702681
 80050a0:	40021000 	.word	0x40021000
 80050a4:	48000400 	.word	0x48000400

080050a8 <I2Cx_Error.isra.0.constprop.0>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
 80050a8:	b508      	push	{r3, lr}
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80050aa:	4803      	ldr	r0, [pc, #12]	; (80050b8 <I2Cx_Error.isra.0.constprop.0+0x10>)
 80050ac:	f004 fb06 	bl	80096bc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
}
 80050b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init(i2c_handler);
 80050b4:	f7ff bf98 	b.w	8004fe8 <I2Cx_Init.constprop.0>
 80050b8:	200019a8 	.word	0x200019a8

080050bc <BSP_LED_Init>:
{
 80050bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80050be:	b948      	cbnz	r0, 80050d4 <BSP_LED_Init+0x18>
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <BSP_LED_Init+0x3c>)
 80050c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050c4:	f042 0202 	orr.w	r2, r2, #2
 80050c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80050ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80050d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050d8:	2301      	movs	r3, #1
 80050da:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80050de:	2100      	movs	r1, #0
 80050e0:	2302      	movs	r3, #2
 80050e2:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <BSP_LED_Init+0x40>)
 80050e8:	a901      	add	r1, sp, #4
 80050ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80050ee:	f004 f80d 	bl	800910c <HAL_GPIO_Init>
}
 80050f2:	b007      	add	sp, #28
 80050f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80050f8:	40021000 	.word	0x40021000
 80050fc:	200001ec 	.word	0x200001ec

08005100 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8005100:	4b03      	ldr	r3, [pc, #12]	; (8005110 <BSP_LED_On+0x10>)
 8005102:	2201      	movs	r2, #1
 8005104:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005108:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800510c:	f004 b8e2 	b.w	80092d4 <HAL_GPIO_WritePin>
 8005110:	200001ec 	.word	0x200001ec

08005114 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <BSP_LED_Off+0x10>)
 8005116:	2200      	movs	r2, #0
 8005118:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800511c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005120:	f004 b8d8 	b.w	80092d4 <HAL_GPIO_WritePin>
 8005124:	200001ec 	.word	0x200001ec

08005128 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8005128:	4b03      	ldr	r3, [pc, #12]	; (8005138 <BSP_LED_Toggle+0x10>)
 800512a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800512e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005132:	f004 b8d4 	b.w	80092de <HAL_GPIO_TogglePin>
 8005136:	bf00      	nop
 8005138:	200001ec 	.word	0x200001ec

0800513c <BSP_PB_Init>:
{
 800513c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <BSP_PB_Init+0x70>)
 8005140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005142:	f042 0204 	orr.w	r2, r2, #4
 8005146:	64da      	str	r2, [r3, #76]	; 0x4c
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005152:	b989      	cbnz	r1, 8005178 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8005154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005158:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800515c:	2101      	movs	r1, #1
 800515e:	2302      	movs	r3, #2
 8005160:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <BSP_PB_Init+0x74>)
 8005166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800516a:	a901      	add	r1, sp, #4
 800516c:	6840      	ldr	r0, [r0, #4]
 800516e:	f003 ffcd 	bl	800910c <HAL_GPIO_Init>
}
 8005172:	b007      	add	sp, #28
 8005174:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005178:	2901      	cmp	r1, #1
 800517a:	d1fa      	bne.n	8005172 <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800517c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005180:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005182:	2303      	movs	r3, #3
 8005184:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <BSP_PB_Init+0x78>)
 8005188:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 800518c:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800518e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005192:	a901      	add	r1, sp, #4
 8005194:	6840      	ldr	r0, [r0, #4]
 8005196:	f003 ffb9 	bl	800910c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800519a:	2200      	movs	r2, #0
 800519c:	210f      	movs	r1, #15
 800519e:	2028      	movs	r0, #40	; 0x28
 80051a0:	f003 fd28 	bl	8008bf4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80051a4:	2028      	movs	r0, #40	; 0x28
 80051a6:	f003 fd57 	bl	8008c58 <HAL_NVIC_EnableIRQ>
}
 80051aa:	e7e2      	b.n	8005172 <BSP_PB_Init+0x36>
 80051ac:	40021000 	.word	0x40021000
 80051b0:	200001ec 	.word	0x200001ec
 80051b4:	10110000 	.word	0x10110000

080051b8 <BSP_COM_Init>:
{
 80051b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ba:	460d      	mov	r5, r1
 80051bc:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80051be:	b9d8      	cbnz	r0, 80051f8 <BSP_COM_Init+0x40>
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <BSP_COM_Init+0x80>)
 80051c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051c4:	f042 0202 	orr.w	r2, r2, #2
 80051c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80051ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051cc:	f002 0202 	and.w	r2, r2, #2
 80051d0:	9200      	str	r2, [sp, #0]
 80051d2:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80051d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051d6:	f042 0202 	orr.w	r2, r2, #2
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c
 80051dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051de:	f002 0202 	and.w	r2, r2, #2
 80051e2:	9201      	str	r2, [sp, #4]
 80051e4:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80051e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ec:	661a      	str	r2, [r3, #96]	; 0x60
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 80051f8:	4c10      	ldr	r4, [pc, #64]	; (800523c <BSP_COM_Init+0x84>)
 80051fa:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80051fe:	2602      	movs	r6, #2
 8005200:	2340      	movs	r3, #64	; 0x40
 8005202:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005206:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005208:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800520a:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800520c:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800520e:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005210:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8005212:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8005214:	f003 ff7a 	bl	800910c <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005218:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800521a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800521c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800521e:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005220:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8005224:	f003 ff72 	bl	800910c <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 800522c:	4628      	mov	r0, r5
 800522e:	f007 faa5 	bl	800c77c <HAL_UART_Init>
}
 8005232:	b009      	add	sp, #36	; 0x24
 8005234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
 800523c:	200001ec 	.word	0x200001ec

08005240 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8005240:	f7ff bed2 	b.w	8004fe8 <I2Cx_Init.constprop.0>

08005244 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005244:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005246:	2301      	movs	r3, #1
{
 8005248:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800524c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005250:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005254:	f10d 0217 	add.w	r2, sp, #23
 8005258:	9200      	str	r2, [sp, #0]
 800525a:	460a      	mov	r2, r1
 800525c:	4601      	mov	r1, r0
 800525e:	4804      	ldr	r0, [pc, #16]	; (8005270 <SENSOR_IO_Write+0x2c>)
 8005260:	f004 fb7a 	bl	8009958 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8005264:	b108      	cbz	r0, 800526a <SENSOR_IO_Write+0x26>
    I2Cx_Error(i2c_handler, Addr);
 8005266:	f7ff ff1f 	bl	80050a8 <I2Cx_Error.isra.0.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 800526a:	b007      	add	sp, #28
 800526c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005270:	200019a8 	.word	0x200019a8

08005274 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8005276:	2300      	movs	r3, #0
{
 8005278:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 800527a:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800527e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005282:	2301      	movs	r3, #1
 8005284:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8005288:	f10d 0117 	add.w	r1, sp, #23
 800528c:	9100      	str	r1, [sp, #0]
 800528e:	4601      	mov	r1, r0
 8005290:	4805      	ldr	r0, [pc, #20]	; (80052a8 <SENSOR_IO_Read+0x34>)
 8005292:	f004 fc19 	bl	8009ac8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8005296:	b108      	cbz	r0, 800529c <SENSOR_IO_Read+0x28>
    I2Cx_Error(i2c_handler, Addr);
 8005298:	f7ff ff06 	bl	80050a8 <I2Cx_Error.isra.0.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 800529c:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80052a0:	b007      	add	sp, #28
 80052a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80052a6:	bf00      	nop
 80052a8:	200019a8 	.word	0x200019a8

080052ac <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80052ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80052ae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80052b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	2301      	movs	r3, #1
 80052ba:	460a      	mov	r2, r1
 80052bc:	4601      	mov	r1, r0
 80052be:	4805      	ldr	r0, [pc, #20]	; (80052d4 <SENSOR_IO_ReadMultiple+0x28>)
 80052c0:	f004 fc02 	bl	8009ac8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80052c4:	4604      	mov	r4, r0
 80052c6:	b108      	cbz	r0, 80052cc <SENSOR_IO_ReadMultiple+0x20>
    I2Cx_Error(i2c_handler, Addr);
 80052c8:	f7ff feee 	bl	80050a8 <I2Cx_Error.isra.0.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80052cc:	b2a0      	uxth	r0, r4
 80052ce:	b004      	add	sp, #16
 80052d0:	bd10      	pop	{r4, pc}
 80052d2:	bf00      	nop
 80052d4:	200019a8 	.word	0x200019a8

080052d8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80052d8:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80052da:	4c06      	ldr	r4, [pc, #24]	; (80052f4 <BSP_ACCELERO_Init+0x1c>)
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	4798      	blx	r3
 80052e0:	286a      	cmp	r0, #106	; 0x6a
 80052e2:	d105      	bne.n	80052f0 <BSP_ACCELERO_Init+0x18>
//    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80052e4:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <BSP_ACCELERO_Init+0x20>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80052e6:	f244 40a0 	movw	r0, #17568	; 0x44a0
    AccelerometerDrv = &Lsm6dslAccDrv;
 80052ea:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	4798      	blx	r3


  }  

  return ret;
}
 80052f0:	2000      	movs	r0, #0
 80052f2:	bd10      	pop	{r4, pc}
 80052f4:	200002a0 	.word	0x200002a0
 80052f8:	200010a4 	.word	0x200010a4

080052fc <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <BSP_ACCELERO_AccGetXYZ+0x10>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b113      	cbz	r3, 8005308 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	b103      	cbz	r3, 8005308 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8005306:	4718      	bx	r3
    }
  }
}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	200010a4 	.word	0x200010a4

08005310 <BSP_GYRO_Init>:
//
//    ret = GYRO_OK;
//  }
//
//  return ret;
}
 8005310:	4770      	bx	lr

08005312 <BSP_GYRO_GetXYZ>:
    if(GyroscopeDrv->GetXYZ!= NULL)
    {
      GyroscopeDrv->GetXYZ(pfData);
    }
  }
}
 8005312:	4770      	bx	lr

08005314 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8005314:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8005316:	4c07      	ldr	r4, [pc, #28]	; (8005334 <BSP_HSENSOR_Init+0x20>)
 8005318:	20be      	movs	r0, #190	; 0xbe
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	4798      	blx	r3
 800531e:	28bc      	cmp	r0, #188	; 0xbc
 8005320:	d106      	bne.n	8005330 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005324:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 8005326:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	4798      	blx	r3
    ret = HSENSOR_OK;
 800532c:	2000      	movs	r0, #0
  }
  
  return ret;
}
 800532e:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8005330:	2001      	movs	r0, #1
  return ret;
 8005332:	e7fc      	b.n	800532e <BSP_HSENSOR_Init+0x1a>
 8005334:	20000210 	.word	0x20000210
 8005338:	200010a8 	.word	0x200010a8

0800533c <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800533c:	4b02      	ldr	r3, [pc, #8]	; (8005348 <BSP_HSENSOR_ReadHumidity+0xc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	20be      	movs	r0, #190	; 0xbe
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4718      	bx	r3
 8005346:	bf00      	nop
 8005348:	200010a8 	.word	0x200010a8

0800534c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800534c:	b513      	push	{r0, r1, r4, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800534e:	4c0b      	ldr	r4, [pc, #44]	; (800537c <BSP_MAGNETO_Init+0x30>)
 8005350:	68a3      	ldr	r3, [r4, #8]
 8005352:	4798      	blx	r3
 8005354:	283d      	cmp	r0, #61	; 0x3d
 8005356:	d10e      	bne.n	8005376 <BSP_MAGNETO_Init+0x2a>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <BSP_MAGNETO_Init+0x34>)
 800535a:	601c      	str	r4, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <BSP_MAGNETO_Init+0x38>)
 800535e:	9300      	str	r3, [sp, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8005360:	2340      	movs	r3, #64	; 0x40
 8005362:	f88d 3004 	strb.w	r3, [sp, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8005366:	aa02      	add	r2, sp, #8
 8005368:	e912 0003 	ldmdb	r2, {r0, r1}
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8005370:	2000      	movs	r0, #0
  } 

  return ret;  
}
 8005372:	b002      	add	sp, #8
 8005374:	bd10      	pop	{r4, pc}
    ret = MAGNETO_ERROR;
 8005376:	2001      	movs	r0, #1
 8005378:	e7fb      	b.n	8005372 <BSP_MAGNETO_Init+0x26>
 800537a:	bf00      	nop
 800537c:	2000021c 	.word	0x2000021c
 8005380:	200010ac 	.word	0x200010ac
 8005384:	08000058 	.word	0x08000058

08005388 <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 8005388:	4b03      	ldr	r3, [pc, #12]	; (8005398 <BSP_MAGNETO_GetXYZ+0x10>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	b113      	cbz	r3, 8005394 <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 800538e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005390:	b103      	cbz	r3, 8005394 <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8005392:	4718      	bx	r3
    }
  }
}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	200010ac 	.word	0x200010ac

0800539c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 800539c:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800539e:	4c07      	ldr	r4, [pc, #28]	; (80053bc <BSP_PSENSOR_Init+0x20>)
 80053a0:	20ba      	movs	r0, #186	; 0xba
 80053a2:	6863      	ldr	r3, [r4, #4]
 80053a4:	4798      	blx	r3
 80053a6:	28b1      	cmp	r0, #177	; 0xb1
 80053a8:	d106      	bne.n	80053b8 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80053ac:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 80053ae:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	4798      	blx	r3
    ret = PSENSOR_OK;
 80053b4:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80053b6:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 80053b8:	2001      	movs	r0, #1
  return ret;
 80053ba:	e7fc      	b.n	80053b6 <BSP_PSENSOR_Init+0x1a>
 80053bc:	20000260 	.word	0x20000260
 80053c0:	200010b0 	.word	0x200010b0

080053c4 <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <BSP_PSENSOR_ReadPressure+0xc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	20ba      	movs	r0, #186	; 0xba
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4718      	bx	r3
 80053ce:	bf00      	nop
 80053d0:	200010b0 	.word	0x200010b0

080053d4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80053d4:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80053d6:	4c06      	ldr	r4, [pc, #24]	; (80053f0 <BSP_TSENSOR_Init+0x1c>)
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <BSP_TSENSOR_Init+0x20>)
 80053da:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80053dc:	f7ff ff30 	bl	8005240 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	2100      	movs	r1, #0
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	20be      	movs	r0, #190	; 0xbe
 80053e8:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 80053ea:	2000      	movs	r0, #0
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	bf00      	nop
 80053f0:	200010b4 	.word	0x200010b4
 80053f4:	20000200 	.word	0x20000200

080053f8 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80053f8:	4b02      	ldr	r3, [pc, #8]	; (8005404 <BSP_TSENSOR_ReadTemp+0xc>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	20be      	movs	r0, #190	; 0xbe
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4718      	bx	r3
 8005402:	bf00      	nop
 8005404:	200010b4 	.word	0x200010b4

08005408 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8005408:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800540a:	b2c4      	uxtb	r4, r0
 800540c:	2120      	movs	r1, #32
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff ff30 	bl	8005274 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8005414:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005418:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 800541c:	2120      	movs	r1, #32
 800541e:	4620      	mov	r0, r4
}
 8005420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005424:	f7ff bf0e 	b.w	8005244 <SENSOR_IO_Write>

08005428 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8005428:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800542a:	b2c4      	uxtb	r4, r0
 800542c:	2120      	movs	r1, #32
 800542e:	4620      	mov	r0, r4
 8005430:	f7ff ff20 	bl	8005274 <SENSOR_IO_Read>
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
  tmp |= (1 << HTS221_BDU_BIT);
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8005434:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005438:	f040 0285 	orr.w	r2, r0, #133	; 0x85
 800543c:	2120      	movs	r1, #32
 800543e:	4620      	mov	r0, r4
}
 8005440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8005444:	f7ff befe 	b.w	8005244 <SENSOR_IO_Write>

08005448 <HTS221_H_ReadID>:
{  
 8005448:	b510      	push	{r4, lr}
 800544a:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 800544c:	f7ff fef8 	bl	8005240 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8005450:	b2e0      	uxtb	r0, r4
 8005452:	210f      	movs	r1, #15
}
 8005454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8005458:	f7ff bf0c 	b.w	8005274 <SENSOR_IO_Read>

0800545c <HTS221_H_ReadHumidity>:
{
 800545c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8005460:	fa5f f880 	uxtb.w	r8, r0
 8005464:	2302      	movs	r3, #2
 8005466:	aa01      	add	r2, sp, #4
 8005468:	21b0      	movs	r1, #176	; 0xb0
 800546a:	4640      	mov	r0, r8
 800546c:	f7ff ff1e 	bl	80052ac <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005470:	2302      	movs	r3, #2
 8005472:	aa01      	add	r2, sp, #4
 8005474:	21b6      	movs	r1, #182	; 0xb6
 8005476:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8005478:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 800547c:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8005480:	f7ff ff14 	bl	80052ac <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005484:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005488:	f89d 7004 	ldrb.w	r7, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800548c:	2302      	movs	r3, #2
 800548e:	aa01      	add	r2, sp, #4
 8005490:	21ba      	movs	r1, #186	; 0xba
 8005492:	4640      	mov	r0, r8
 8005494:	f7ff ff0a 	bl	80052ac <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005498:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800549c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80054a0:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80054a4:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054a6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80054aa:	21a8      	movs	r1, #168	; 0xa8
 80054ac:	2302      	movs	r3, #2
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7ff fefc 	bl	80052ac <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80054b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054c0:	b23f      	sxth	r7, r7
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80054c2:	b21b      	sxth	r3, r3
 80054c4:	1bdb      	subs	r3, r3, r7
 80054c6:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 80054ca:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 80054cc:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80054ce:	1bab      	subs	r3, r5, r6
 80054d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054d4:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80054d8:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80054da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054de:	1be4      	subs	r4, r4, r7
 80054e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e4:	ee07 4a10 	vmov	s14, r4
 80054e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80054ec:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80054f0:	ee07 6a90 	vmov	s15, r6
 80054f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 80054f8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005530 <HTS221_H_ReadHumidity+0xd4>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80054fc:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8005500:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005504:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8005508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800550c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005510:	dc07      	bgt.n	8005522 <HTS221_H_ReadHumidity+0xc6>
        : tmp_f;
 8005512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551a:	d504      	bpl.n	8005526 <HTS221_H_ReadHumidity+0xca>
 800551c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005534 <HTS221_H_ReadHumidity+0xd8>
 8005520:	e001      	b.n	8005526 <HTS221_H_ReadHumidity+0xca>
        : ( tmp_f <    0.0f ) ?    0.0f
 8005522:	eef0 7a47 	vmov.f32	s15, s14
}
 8005526:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800552a:	b002      	add	sp, #8
 800552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005530:	447a0000 	.word	0x447a0000
 8005534:	00000000 	.word	0x00000000

08005538 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8005538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800553c:	fa5f f880 	uxtb.w	r8, r0
 8005540:	aa01      	add	r2, sp, #4
 8005542:	2302      	movs	r3, #2
 8005544:	21b2      	movs	r1, #178	; 0xb2
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff feb0 	bl	80052ac <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800554c:	2135      	movs	r1, #53	; 0x35
 800554e:	4640      	mov	r0, r8
 8005550:	f7ff fe90 	bl	8005274 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005554:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005556:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800555a:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800555e:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8005560:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8005564:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 8005568:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800556a:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800556c:	2304      	movs	r3, #4
 800556e:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8005572:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8005574:	21bc      	movs	r1, #188	; 0xbc
 8005576:	4640      	mov	r0, r8
 8005578:	f7ff fe98 	bl	80052ac <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800557c:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005580:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005584:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8005588:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800558c:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005590:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8005592:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8005596:	21aa      	movs	r1, #170	; 0xaa
 8005598:	2302      	movs	r3, #2
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff fe86 	bl	80052ac <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80055a0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80055a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80055a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80055ac:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80055ae:	b21b      	sxth	r3, r3
 80055b0:	1bdb      	subs	r3, r3, r7
 80055b2:	ee07 3a90 	vmov	s15, r3
  T0_degC = T0_degC_x8_u16 >> 3;
 80055b6:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80055b8:	1bab      	subs	r3, r5, r6
 80055ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055be:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80055c2:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80055c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055c8:	1be4      	subs	r4, r4, r7
 80055ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ce:	ee07 4a10 	vmov	s14, r4
 80055d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80055d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80055da:	ee07 6a90 	vmov	s15, r6
 80055de:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 80055e2:	ee36 0a80 	vadd.f32	s0, s13, s0
 80055e6:	b002      	add	sp, #8
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055ec <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80055ec:	b507      	push	{r0, r1, r2, lr}
 80055ee:	ab02      	add	r3, sp, #8
 80055f0:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80055f4:	2120      	movs	r1, #32
 80055f6:	f89d 2000 	ldrb.w	r2, [sp]
 80055fa:	203c      	movs	r0, #60	; 0x3c
 80055fc:	f7ff fe22 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8005600:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8005604:	2121      	movs	r1, #33	; 0x21
 8005606:	203c      	movs	r0, #60	; 0x3c
 8005608:	f7ff fe1c 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800560c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8005610:	2122      	movs	r1, #34	; 0x22
 8005612:	203c      	movs	r0, #60	; 0x3c
 8005614:	f7ff fe16 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8005618:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800561c:	2123      	movs	r1, #35	; 0x23
 800561e:	203c      	movs	r0, #60	; 0x3c
 8005620:	f7ff fe10 	bl	8005244 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005624:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005628:	2124      	movs	r1, #36	; 0x24
 800562a:	203c      	movs	r0, #60	; 0x3c
}
 800562c:	b003      	add	sp, #12
 800562e:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005632:	f7ff be07 	b.w	8005244 <SENSOR_IO_Write>

08005636 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8005636:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005638:	2122      	movs	r1, #34	; 0x22
 800563a:	203c      	movs	r0, #60	; 0x3c
 800563c:	f7ff fe1a 	bl	8005274 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8005640:	f000 00fc 	and.w	r0, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005644:	f040 0203 	orr.w	r2, r0, #3
}
 8005648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800564c:	2122      	movs	r1, #34	; 0x22
 800564e:	203c      	movs	r0, #60	; 0x3c
 8005650:	f7ff bdf8 	b.w	8005244 <SENSOR_IO_Write>

08005654 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8005654:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005656:	2122      	movs	r1, #34	; 0x22
{  
 8005658:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800565a:	203c      	movs	r0, #60	; 0x3c
 800565c:	f7ff fe0a 	bl	8005274 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8005660:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8005664:	b10c      	cbz	r4, 800566a <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8005666:	f042 0220 	orr.w	r2, r2, #32
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
}
 800566a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800566e:	2122      	movs	r1, #34	; 0x22
 8005670:	203c      	movs	r0, #60	; 0x3c
 8005672:	f7ff bde7 	b.w	8005244 <SENSOR_IO_Write>

08005676 <LIS3MDL_MagReadID>:
{
 8005676:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8005678:	f7ff fde2 	bl	8005240 <SENSOR_IO_Init>
}
 800567c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8005680:	210f      	movs	r1, #15
 8005682:	203c      	movs	r0, #60	; 0x3c
 8005684:	f7ff bdf6 	b.w	8005274 <SENSOR_IO_Read>

08005688 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8005688:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800568a:	2121      	movs	r1, #33	; 0x21
{
 800568c:	b085      	sub	sp, #20
 800568e:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005690:	203c      	movs	r0, #60	; 0x3c
 8005692:	f7ff fdef 	bl	8005274 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8005696:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005698:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800569a:	aa02      	add	r2, sp, #8
 800569c:	21a8      	movs	r1, #168	; 0xa8
 800569e:	203c      	movs	r0, #60	; 0x3c
 80056a0:	f7ff fe04 	bl	80052ac <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80056a4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80056a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80056ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056b0:	f8ad 3000 	strh.w	r3, [sp]
 80056b4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80056b8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80056bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056c0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80056c4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80056c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80056cc:	f004 0460 	and.w	r4, r4, #96	; 0x60
 80056d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80056d4:	2c40      	cmp	r4, #64	; 0x40
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80056d6:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 80056da:	d024      	beq.n	8005726 <LIS3MDL_MagReadXYZ+0x9e>
 80056dc:	d81d      	bhi.n	800571a <LIS3MDL_MagReadXYZ+0x92>
 80056de:	b32c      	cbz	r4, 800572c <LIS3MDL_MagReadXYZ+0xa4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
    break;
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80056e0:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005734 <LIS3MDL_MagReadXYZ+0xac>
 80056e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005738 <LIS3MDL_MagReadXYZ+0xb0>
 80056e8:	2c20      	cmp	r4, #32
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80056ea:	bf08      	it	eq
 80056ec:	eef0 7a47 	vmoveq.f32	s15, s14
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80056f0:	1eab      	subs	r3, r5, #2
 80056f2:	466a      	mov	r2, sp
 80056f4:	3504      	adds	r5, #4
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80056f6:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80056fa:	ee07 1a10 	vmov	s14, r1
 80056fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005706:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800570a:	ee17 1a10 	vmov	r1, s14
 800570e:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 8005712:	429d      	cmp	r5, r3
 8005714:	d1ef      	bne.n	80056f6 <LIS3MDL_MagReadXYZ+0x6e>
  }
}
 8005716:	b005      	add	sp, #20
 8005718:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800571a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005734 <LIS3MDL_MagReadXYZ+0xac>
 800571e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800573c <LIS3MDL_MagReadXYZ+0xb4>
 8005722:	2c60      	cmp	r4, #96	; 0x60
 8005724:	e7e1      	b.n	80056ea <LIS3MDL_MagReadXYZ+0x62>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8005726:	eddf 7a06 	vldr	s15, [pc, #24]	; 8005740 <LIS3MDL_MagReadXYZ+0xb8>
 800572a:	e7e1      	b.n	80056f0 <LIS3MDL_MagReadXYZ+0x68>
  switch(ctrlm & 0x60)
 800572c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005744 <LIS3MDL_MagReadXYZ+0xbc>
 8005730:	e7de      	b.n	80056f0 <LIS3MDL_MagReadXYZ+0x68>
 8005732:	bf00      	nop
 8005734:	00000000 	.word	0x00000000
 8005738:	3e947ae1 	.word	0x3e947ae1
 800573c:	3f147ae1 	.word	0x3f147ae1
 8005740:	3edc28f6 	.word	0x3edc28f6
 8005744:	3e0f5c29 	.word	0x3e0f5c29

08005748 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8005748:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800574a:	b2c4      	uxtb	r4, r0
 800574c:	2128      	movs	r1, #40	; 0x28
 800574e:	4620      	mov	r0, r4
 8005750:	f7ff fd90 	bl	8005274 <SENSOR_IO_Read>
 8005754:	2129      	movs	r1, #41	; 0x29
 8005756:	4605      	mov	r5, r0
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff fd8b 	bl	8005274 <SENSOR_IO_Read>
 800575e:	212a      	movs	r1, #42	; 0x2a
 8005760:	4606      	mov	r6, r0
 8005762:	4620      	mov	r0, r4
 8005764:	f7ff fd86 	bl	8005274 <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005768:	0402      	lsls	r2, r0, #16
 800576a:	ea42 2306 	orr.w	r3, r2, r6, lsl #8
 800576e:	ea43 0005 	orr.w	r0, r3, r5

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8005772:	0203      	lsls	r3, r0, #8
    tmp |= 0xFF000000;
 8005774:	bf48      	it	mi
 8005776:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 800577a:	2364      	movs	r3, #100	; 0x64
 800577c:	4358      	muls	r0, r3
 800577e:	bf48      	it	mi
 8005780:	f600 70ff 	addwmi	r0, r0, #4095	; 0xfff
 8005784:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 8005786:	ee07 0a90 	vmov	s15, r0
 800578a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 800578e:	eddf 7a02 	vldr	s15, [pc, #8]	; 8005798 <LPS22HB_P_ReadPressure+0x50>
 8005792:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	42c80000 	.word	0x42c80000

0800579c <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 800579c:	b538      	push	{r3, r4, r5, lr}
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 800579e:	b2c5      	uxtb	r5, r0
 80057a0:	212b      	movs	r1, #43	; 0x2b
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7ff fd66 	bl	8005274 <SENSOR_IO_Read>
 80057a8:	212c      	movs	r1, #44	; 0x2c
 80057aa:	4604      	mov	r4, r0
 80057ac:	4628      	mov	r0, r5
 80057ae:	f7ff fd61 	bl	8005274 <SENSOR_IO_Read>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 80057b2:	eb04 2400 	add.w	r4, r4, r0, lsl #8

  raw_data = (tmp * 10) / 100;
 80057b6:	b2a4      	uxth	r4, r4
 80057b8:	200a      	movs	r0, #10
 80057ba:	fbb4 f4f0 	udiv	r4, r4, r0
  
  return ((float)(raw_data / 10.0f));
 80057be:	b223      	sxth	r3, r4
 80057c0:	ee00 3a10 	vmov	s0, r3
 80057c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 80057c8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80057cc:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80057d0:	bd38      	pop	{r3, r4, r5, pc}

080057d2 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80057d2:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80057d4:	b2c4      	uxtb	r4, r0
 80057d6:	211a      	movs	r1, #26
 80057d8:	4620      	mov	r0, r4
 80057da:	f7ff fd4b 	bl	8005274 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80057de:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80057e2:	f040 0201 	orr.w	r2, r0, #1
 80057e6:	211a      	movs	r1, #26
 80057e8:	4620      	mov	r0, r4
 80057ea:	f7ff fd2b 	bl	8005244 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80057ee:	2110      	movs	r1, #16
 80057f0:	4620      	mov	r0, r4
 80057f2:	f7ff fd3f 	bl	8005274 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80057f6:	f000 008d 	and.w	r0, r0, #141	; 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80057fa:	f040 0232 	orr.w	r2, r0, #50	; 0x32
 80057fe:	2110      	movs	r1, #16
 8005800:	4620      	mov	r0, r4
}  
 8005802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8005806:	f7ff bd1d 	b.w	8005244 <SENSOR_IO_Write>

0800580a <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 800580a:	f7ff bfe2 	b.w	80057d2 <LPS22HB_Init>

0800580e <LPS22HB_T_Init>:
  LPS22HB_Init(DeviceAddr);
 800580e:	f7ff bfe0 	b.w	80057d2 <LPS22HB_Init>

08005812 <LPS22HB_P_ReadID>:
{  
 8005812:	b510      	push	{r4, lr}
 8005814:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8005816:	f7ff fd13 	bl	8005240 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800581a:	b2e0      	uxtb	r0, r4
 800581c:	210f      	movs	r1, #15
}
 800581e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8005822:	f7ff bd27 	b.w	8005274 <SENSOR_IO_Read>

08005826 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8005826:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005828:	2110      	movs	r1, #16
{  
 800582a:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800582c:	20d4      	movs	r0, #212	; 0xd4
 800582e:	f7ff fd21 	bl	8005274 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8005832:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8005836:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	2110      	movs	r1, #16
 800583c:	20d4      	movs	r0, #212	; 0xd4
 800583e:	f7ff fd01 	bl	8005244 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005842:	2112      	movs	r1, #18
 8005844:	20d4      	movs	r0, #212	; 0xd4
 8005846:	f7ff fd15 	bl	8005274 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800584a:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800584e:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 8005852:	2112      	movs	r1, #18
}
 8005854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005858:	20d4      	movs	r0, #212	; 0xd4
 800585a:	f7ff bcf3 	b.w	8005244 <SENSOR_IO_Write>

0800585e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800585e:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005860:	2110      	movs	r1, #16
 8005862:	20d4      	movs	r0, #212	; 0xd4
 8005864:	f7ff fd06 	bl	8005274 <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
}
 8005868:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800586c:	f000 020f 	and.w	r2, r0, #15
 8005870:	2110      	movs	r1, #16
 8005872:	20d4      	movs	r0, #212	; 0xd4
 8005874:	f7ff bce6 	b.w	8005244 <SENSOR_IO_Write>

08005878 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005878:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800587a:	2115      	movs	r1, #21
{
 800587c:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800587e:	20d4      	movs	r0, #212	; 0xd4
 8005880:	f7ff fcf8 	bl	8005274 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8005884:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8005888:	b10c      	cbz	r4, 800588e <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800588a:	f042 0210 	orr.w	r2, r2, #16
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
}
 800588e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8005892:	2115      	movs	r1, #21
 8005894:	20d4      	movs	r0, #212	; 0xd4
 8005896:	f7ff bcd5 	b.w	8005244 <SENSOR_IO_Write>

0800589a <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800589a:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800589c:	2111      	movs	r1, #17
{  
 800589e:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80058a0:	20d4      	movs	r0, #212	; 0xd4
 80058a2:	f7ff fce7 	bl	8005274 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80058a6:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80058aa:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	2111      	movs	r1, #17
 80058b0:	20d4      	movs	r0, #212	; 0xd4
 80058b2:	f7ff fcc7 	bl	8005244 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80058b6:	2112      	movs	r1, #18
 80058b8:	20d4      	movs	r0, #212	; 0xd4
 80058ba:	f7ff fcdb 	bl	8005274 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80058be:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80058c2:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 80058c6:	2112      	movs	r1, #18
}
 80058c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80058cc:	20d4      	movs	r0, #212	; 0xd4
 80058ce:	f7ff bcb9 	b.w	8005244 <SENSOR_IO_Write>

080058d2 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80058d2:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80058d4:	2111      	movs	r1, #17
 80058d6:	20d4      	movs	r0, #212	; 0xd4
 80058d8:	f7ff fccc 	bl	8005274 <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
}
 80058dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80058e0:	f000 020f 	and.w	r2, r0, #15
 80058e4:	2111      	movs	r1, #17
 80058e6:	20d4      	movs	r0, #212	; 0xd4
 80058e8:	f7ff bcac 	b.w	8005244 <SENSOR_IO_Write>

080058ec <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80058ec:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80058ee:	2116      	movs	r1, #22
{  
 80058f0:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80058f2:	20d4      	movs	r0, #212	; 0xd4
 80058f4:	f7ff fcbe 	bl	8005274 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80058f8:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 80058fc:	b10c      	cbz	r4, 8005902 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80058fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
}
 8005902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8005906:	2116      	movs	r1, #22
 8005908:	20d4      	movs	r0, #212	; 0xd4
 800590a:	f7ff bc9b 	b.w	8005244 <SENSOR_IO_Write>

0800590e <LSM6DSL_AccReadID>:
{  
 800590e:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 8005910:	f7ff fc96 	bl	8005240 <SENSOR_IO_Init>
}
 8005914:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8005918:	210f      	movs	r1, #15
 800591a:	20d4      	movs	r0, #212	; 0xd4
 800591c:	f7ff bcaa 	b.w	8005274 <SENSOR_IO_Read>

08005920 <LSM6DSL_GyroReadID>:
 8005920:	f7ff bff5 	b.w	800590e <LSM6DSL_AccReadID>

08005924 <LSM6DSL_AccReadXYZ>:
{
 8005924:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005926:	2110      	movs	r1, #16
{
 8005928:	b085      	sub	sp, #20
 800592a:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800592c:	20d4      	movs	r0, #212	; 0xd4
 800592e:	f7ff fca1 	bl	8005274 <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8005932:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005934:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8005936:	aa02      	add	r2, sp, #8
 8005938:	2128      	movs	r1, #40	; 0x28
 800593a:	20d4      	movs	r0, #212	; 0xd4
 800593c:	f7ff fcb6 	bl	80052ac <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005940:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8005944:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005948:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800594c:	f8ad 3000 	strh.w	r3, [sp]
 8005950:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8005954:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8005958:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800595c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005960:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005964:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005968:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800596c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlx & 0x0C)
 8005970:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <LSM6DSL_AccReadXYZ+0x84>)
 8005972:	f005 050c 	and.w	r5, r5, #12
 8005976:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800597a:	ed95 7a00 	vldr	s14, [r5]
  for(i=0; i<3; i++)
 800597e:	1ea3      	subs	r3, r4, #2
 8005980:	466a      	mov	r2, sp
 8005982:	3404      	adds	r4, #4
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005984:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8005988:	ee07 1a90 	vmov	s15, r1
 800598c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005998:	ee17 1a90 	vmov	r1, s15
 800599c:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d1ef      	bne.n	8005984 <LSM6DSL_AccReadXYZ+0x60>
}
 80059a4:	b005      	add	sp, #20
 80059a6:	bd30      	pop	{r4, r5, pc}
 80059a8:	08028558 	.word	0x08028558

080059ac <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80059ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059ae:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80059b0:	2111      	movs	r1, #17
 80059b2:	20d4      	movs	r0, #212	; 0xd4
 80059b4:	f7ff fc5e 	bl	8005274 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80059b8:	466a      	mov	r2, sp
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80059ba:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80059bc:	2306      	movs	r3, #6
 80059be:	2122      	movs	r1, #34	; 0x22
 80059c0:	20d4      	movs	r0, #212	; 0xd4
 80059c2:	f7ff fc73 	bl	80052ac <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80059c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80059ca:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80059ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80059d8:	ee07 3a10 	vmov	s14, r3
 80059dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80059e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80059e4:	b21b      	sxth	r3, r3
 80059e6:	ee07 3a90 	vmov	s15, r3
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <LSM6DSL_GyroReadXYZAngRate+0x88>)
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80059ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80059f0:	f005 050c 	and.w	r5, r5, #12
 80059f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80059f8:	f89d 3000 	ldrb.w	r3, [sp]
 80059fc:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 8005a00:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8005a04:	b21b      	sxth	r3, r3
 8005a06:	ee06 3a90 	vmov	s13, r3
 8005a0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a0e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a16:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005a1a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005a1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a22:	edc4 6a00 	vstr	s13, [r4]
 8005a26:	ed84 7a01 	vstr	s14, [r4, #4]
 8005a2a:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 8005a2e:	b003      	add	sp, #12
 8005a30:	bd30      	pop	{r4, r5, pc}
 8005a32:	bf00      	nop
 8005a34:	08028558 	.word	0x08028558

08005a38 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8005a38:	f002 ba38 	b.w	8007eac <VL53L0X_get_device_info>

08005a3c <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005a3c:	2915      	cmp	r1, #21
 8005a3e:	d807      	bhi.n	8005a50 <VL53L0X_SetDeviceMode+0x14>
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <VL53L0X_SetDeviceMode+0x1c>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	408a      	lsls	r2, r1
 8005a46:	4013      	ands	r3, r2
 8005a48:	b113      	cbz	r3, 8005a50 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005a4a:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a4c:	2000      	movs	r0, #0
		break;
 8005a4e:	4770      	bx	lr
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a50:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	0030000b 	.word	0x0030000b

08005a5c <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005a5c:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005a5e:	460a      	mov	r2, r1
{
 8005a60:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005a62:	2109      	movs	r1, #9
 8005a64:	f7fe fda9 	bl	80045ba <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8005a68:	b918      	cbnz	r0, 8005a72 <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8005a6a:	7823      	ldrb	r3, [r4, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005a72:	bd10      	pop	{r4, pc}

08005a74 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005a74:	f001 be4c 	b.w	8007710 <VL53L0X_set_measurement_timing_budget_micro_seconds>

08005a78 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8005a78:	f001 bd2c 	b.w	80074d4 <VL53L0X_set_vcsel_pulse_period>

08005a7c <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005a7c:	f001 be2e 	b.w	80076dc <VL53L0X_get_vcsel_pulse_period>

08005a80 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005a82:	2300      	movs	r3, #0
{
 8005a84:	460c      	mov	r4, r1
 8005a86:	4617      	mov	r7, r2
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a88:	2101      	movs	r1, #1
 8005a8a:	f10d 0207 	add.w	r2, sp, #7
{
 8005a8e:	4606      	mov	r6, r0
	uint8_t SequenceConfig = 0;
 8005a90:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005a94:	f7fe fd91 	bl	80045ba <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 8005a98:	4605      	mov	r5, r0
 8005a9a:	b9d8      	cbnz	r0, 8005ad4 <VL53L0X_SetSequenceStepEnable+0x54>
		if (SequenceStepEnabled == 1) {
 8005a9c:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 8005a9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8005aa2:	d126      	bne.n	8005af2 <VL53L0X_SetSequenceStepEnable+0x72>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005aa4:	2c04      	cmp	r4, #4
 8005aa6:	d83a      	bhi.n	8005b1e <VL53L0X_SetSequenceStepEnable+0x9e>
 8005aa8:	e8df f004 	tbb	[pc, r4]
 8005aac:	1d1a1703 	.word	0x1d1a1703
 8005ab0:	20          	.byte	0x20
 8005ab1:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005ab2:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d00c      	beq.n	8005ad4 <VL53L0X_SetSequenceStepEnable+0x54>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8005aba:	4622      	mov	r2, r4
 8005abc:	2101      	movs	r1, #1
 8005abe:	4630      	mov	r0, r6
 8005ac0:	f7fe fe0a 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8005ac4:	4605      	mov	r5, r0
 8005ac6:	b928      	cbnz	r0, 8005ad4 <VL53L0X_SetSequenceStepEnable+0x54>
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005ac8:	6971      	ldr	r1, [r6, #20]
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005aca:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7ff ffd0 	bl	8005a74 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	b003      	add	sp, #12
 8005ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 8005ada:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8005ade:	e7ea      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x04;
 8005ae0:	f043 0404 	orr.w	r4, r3, #4
				break;
 8005ae4:	e7e7      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x40;
 8005ae6:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8005aea:	e7e4      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x80;
 8005aec:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8005af0:	e7e1      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
 8005af2:	2c04      	cmp	r4, #4
 8005af4:	d813      	bhi.n	8005b1e <VL53L0X_SetSequenceStepEnable+0x9e>
 8005af6:	e8df f004 	tbb	[pc, r4]
 8005afa:	0603      	.short	0x0603
 8005afc:	0c09      	.short	0x0c09
 8005afe:	0f          	.byte	0x0f
 8005aff:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8005b00:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 8005b04:	e7d7      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xd7;
 8005b06:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 8005b0a:	e7d4      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xfb;
 8005b0c:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 8005b10:	e7d1      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xbf;
 8005b12:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 8005b16:	e7ce      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0x7f;
 8005b18:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 8005b1c:	e7cb      	b.n	8005ab6 <VL53L0X_SetSequenceStepEnable+0x36>
		if (SequenceStepEnabled == 1) {
 8005b1e:	f06f 0503 	mvn.w	r5, #3
 8005b22:	e7d7      	b.n	8005ad4 <VL53L0X_SetSequenceStepEnable+0x54>

08005b24 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005b24:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8005b26:	2300      	movs	r3, #0
{
 8005b28:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b2a:	f10d 0207 	add.w	r2, sp, #7
 8005b2e:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
 8005b30:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005b34:	f7fe fd41 	bl	80045ba <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005b38:	b978      	cbnz	r0, 8005b5a <VL53L0X_GetSequenceStepEnables+0x36>
		Status = sequence_step_enabled(Dev,
 8005b3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8005b3e:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005b42:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8005b44:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8005b48:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005b4a:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8005b4e:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005b50:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005b54:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005b56:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005b58:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005b5a:	b002      	add	sp, #8
 8005b5c:	bd10      	pop	{r4, pc}

08005b5e <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 8005b5e:	b513      	push	{r0, r1, r4, lr}
 8005b60:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8005b62:	aa01      	add	r2, sp, #4
 8005b64:	f001 fc10 	bl	8007388 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8005b68:	b978      	cbnz	r0, 8005b8a <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8005b6a:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8005b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b74:	fb02 3311 	mls	r3, r2, r1, r3
 8005b78:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8005b7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b84:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 8005b88:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005b8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b90:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005b92:	f10d 0202 	add.w	r2, sp, #2
 8005b96:	21f8      	movs	r1, #248	; 0xf8
{
 8005b98:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005b9a:	f7fe fd57 	bl	800464c <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005b9e:	b970      	cbnz	r0, 8005bbe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8005ba0:	aa01      	add	r2, sp, #4
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f7fe fd71 	bl	800468c <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005baa:	b940      	cbnz	r0, 8005bbe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8005bac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005bb0:	b11a      	cbz	r2, 8005bba <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005bb2:	9b01      	ldr	r3, [sp, #4]
 8005bb4:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005bb8:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005bba:	682b      	ldr	r3, [r5, #0]
 8005bbc:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005bbe:	b003      	add	sp, #12
 8005bc0:	bd30      	pop	{r4, r5, pc}

08005bc2 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005bc2:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8005bc4:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	4770      	bx	lr

08005bca <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8005bca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bcc:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8005bce:	f10d 0206 	add.w	r2, sp, #6
 8005bd2:	2120      	movs	r1, #32
{
 8005bd4:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8005bd6:	f7fe fd39 	bl	800464c <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8005bda:	b928      	cbnz	r0, 8005be8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8005bdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005be0:	b923      	cbnz	r3, 8005bec <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005be2:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005be4:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005be6:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005be8:	b003      	add	sp, #12
 8005bea:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005bec:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005bee:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005bf0:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	7723      	strb	r3, [r4, #28]
 8005bf6:	e7f7      	b.n	8005be8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08005bf8 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005bf8:	2905      	cmp	r1, #5
{
 8005bfa:	b570      	push	{r4, r5, r6, lr}
 8005bfc:	4604      	mov	r4, r0
 8005bfe:	460e      	mov	r6, r1
 8005c00:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c02:	d835      	bhi.n	8005c70 <VL53L0X_SetLimitCheckEnable+0x78>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8005c04:	b162      	cbz	r2, 8005c20 <VL53L0X_SetLimitCheckEnable+0x28>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c06:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005c0a:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8005c0e:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8005c10:	1e70      	subs	r0, r6, #1
 8005c12:	2804      	cmp	r0, #4
 8005c14:	d807      	bhi.n	8005c26 <VL53L0X_SetLimitCheckEnable+0x2e>
 8005c16:	e8df f000 	tbb	[pc, r0]
 8005c1a:	170e      	.short	0x170e
 8005c1c:	1d1a      	.short	0x1d1a
 8005c1e:	24          	.byte	0x24
 8005c1f:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
 8005c20:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7f4      	b.n	8005c10 <VL53L0X_SetLimitCheckEnable+0x18>

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c26:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 8005c2a:	4434      	add	r4, r6
 8005c2c:	b9e5      	cbnz	r5, 8005c68 <VL53L0X_SetLimitCheckEnable+0x70>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c2e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c32:	2000      	movs	r0, #0
 8005c34:	e007      	b.n	8005c46 <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_WrWord(Dev,
 8005c36:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005c3a:	2144      	movs	r1, #68	; 0x44
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7fe fd5b 	bl	80046f8 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d0f1      	beq.n	8005c2a <VL53L0X_SetLimitCheckEnable+0x32>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c48:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
 8005c4c:	e7ed      	b.n	8005c2a <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c4e:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
 8005c52:	e7ea      	b.n	8005c2a <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8005c58:	2160      	movs	r1, #96	; 0x60
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f7fe fd5e 	bl	800471c <VL53L0X_UpdateByte>
			break;
 8005c60:	e7ef      	b.n	8005c42 <VL53L0X_SetLimitCheckEnable+0x4a>
			Status = VL53L0X_UpdateByte(Dev,
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	22ef      	movs	r2, #239	; 0xef
 8005c66:	e7f7      	b.n	8005c58 <VL53L0X_SetLimitCheckEnable+0x60>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005c6e:	e7e0      	b.n	8005c32 <VL53L0X_SetLimitCheckEnable+0x3a>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c70:	f06f 0003 	mvn.w	r0, #3
 8005c74:	e7e7      	b.n	8005c46 <VL53L0X_SetLimitCheckEnable+0x4e>

08005c76 <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005c76:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c78:	bf96      	itet	ls
 8005c7a:	1809      	addls	r1, r1, r0
		*pLimitCheckEnable = 0;
 8005c7c:	2300      	movhi	r3, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005c7e:	f891 3028 	ldrbls.w	r3, [r1, #40]	; 0x28
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005c82:	7013      	strb	r3, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c84:	bf94      	ite	ls
 8005c86:	2000      	movls	r0, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005c88:	f06f 0003 	mvnhi.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005c8c:	4770      	bx	lr

08005c8e <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005c8e:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005c90:	1843      	adds	r3, r0, r1
{
 8005c92:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005c94:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8005c98:	460e      	mov	r6, r1
 8005c9a:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8005c9c:	b918      	cbnz	r0, 8005ca6 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005c9e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8005ca2:	6362      	str	r2, [r4, #52]	; 0x34
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8005ca6:	2905      	cmp	r1, #5
 8005ca8:	d81b      	bhi.n	8005ce2 <VL53L0X_SetLimitCheckValue+0x54>
 8005caa:	e8df f001 	tbb	[pc, r1]
 8005cae:	0903      	.short	0x0903
 8005cb0:	16161412 	.word	0x16161412
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005cb4:	6362      	str	r2, [r4, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005cb6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8005cba:	2000      	movs	r0, #0
 8005cbc:	6365      	str	r5, [r4, #52]	; 0x34
 8005cbe:	e7f1      	b.n	8005ca4 <VL53L0X_SetLimitCheckValue+0x16>
			Status = VL53L0X_WrWord(Dev,
 8005cc0:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005cc4:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f7fe fd16 	bl	80046f8 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d1e9      	bne.n	8005ca4 <VL53L0X_SetLimitCheckValue+0x16>
 8005cd0:	e7f1      	b.n	8005cb6 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005cd2:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 8005cd4:	e7ef      	b.n	8005cb6 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005cd6:	6422      	str	r2, [r4, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 8005cd8:	e7ed      	b.n	8005cb6 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8005cda:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	e7f1      	b.n	8005cc6 <VL53L0X_SetLimitCheckValue+0x38>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005ce2:	f06f 0003 	mvn.w	r0, #3
 8005ce6:	e7dd      	b.n	8005ca4 <VL53L0X_SetLimitCheckValue+0x16>

08005ce8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	4615      	mov	r5, r2
 8005cee:	2905      	cmp	r1, #5
 8005cf0:	d82c      	bhi.n	8005d4c <VL53L0X_GetLimitCheckValue+0x64>
 8005cf2:	e8df f001 	tbb	[pc, r1]
 8005cf6:	0703      	.short	0x0703
 8005cf8:	1b1b1917 	.word	0x1b1b1917

	switch (LimitCheckId) {

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005cfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	2000      	movs	r0, #0
 8005d02:	e021      	b.n	8005d48 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8005d04:	f10d 0206 	add.w	r2, sp, #6
 8005d08:	2144      	movs	r1, #68	; 0x44
 8005d0a:	f7fe fc9f 	bl	800464c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005d0e:	b9d8      	cbnz	r0, 8005d48 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005d10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 8005d14:	0253      	lsls	r3, r2, #9
 8005d16:	b19a      	cbz	r2, 8005d40 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8005d18:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005d1a:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8005d22:	e011      	b.n	8005d48 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d24:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		if (EnableZeroValue == 1) {
 8005d26:	e7ea      	b.n	8005cfe <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005d28:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (EnableZeroValue == 1) {
 8005d2a:	e7e8      	b.n	8005cfe <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8005d2c:	f10d 0206 	add.w	r2, sp, #6
 8005d30:	2164      	movs	r1, #100	; 0x64
 8005d32:	f7fe fc8b 	bl	800464c <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8005d36:	b938      	cbnz	r0, 8005d48 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005d38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005d3c:	025b      	lsls	r3, r3, #9
		if (EnableZeroValue == 1) {
 8005d3e:	e7de      	b.n	8005cfe <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8005d42:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005d44:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8005d48:	b003      	add	sp, #12
 8005d4a:	bd30      	pop	{r4, r5, pc}
			*pLimitCheckValue = TempFix1616;
 8005d4c:	f06f 0003 	mvn.w	r0, #3
 8005d50:	e7fa      	b.n	8005d48 <VL53L0X_GetLimitCheckValue+0x60>

08005d52 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005d52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d54:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005d56:	f10d 0207 	add.w	r2, sp, #7
 8005d5a:	2101      	movs	r1, #1
{
 8005d5c:	4604      	mov	r4, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8005d5e:	f7fe fc2c 	bl	80045ba <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8005d62:	b938      	cbnz	r0, 8005d74 <VL53L0X_GetWrapAroundCheckEnable+0x22>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005d64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005d68:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (data & (0x01 << 7))
			*pWrapAroundCheckEnable = 0x01;
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	702b      	strb	r3, [r5, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005d70:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005d74:	b003      	add	sp, #12
 8005d76:	bd30      	pop	{r4, r5, pc}

08005d78 <VL53L0X_GetDeviceParameters>:
{
 8005d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005d7c:	7c03      	ldrb	r3, [r0, #16]
{
 8005d7e:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005d80:	f801 3b08 	strb.w	r3, [r1], #8
{
 8005d84:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005d86:	f7ff ff02 	bl	8005b8e <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8005d8a:	bb40      	cbnz	r0, 8005dde <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005d8c:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005d8e:	f104 0110 	add.w	r1, r4, #16
 8005d92:	4628      	mov	r0, r5
 8005d94:	f7ff ff19 	bl	8005bca <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8005d98:	bb08      	cbnz	r0, 8005dde <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8005d9a:	f104 0114 	add.w	r1, r4, #20
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f000 fbc5 	bl	800652e <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8005da4:	b9d8      	cbnz	r0, 8005dde <VL53L0X_GetDeviceParameters+0x66>
 8005da6:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8005daa:	f105 0928 	add.w	r9, r5, #40	; 0x28
 8005dae:	f104 0818 	add.w	r8, r4, #24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005db2:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005db4:	463a      	mov	r2, r7
 8005db6:	b2b1      	uxth	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	f7ff ff95 	bl	8005ce8 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8005dbe:	b970      	cbnz	r0, 8005dde <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005dc0:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005dc2:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 8005dc6:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005dca:	2e06      	cmp	r6, #6
 8005dcc:	f107 0704 	add.w	r7, r7, #4
 8005dd0:	d1f0      	bne.n	8005db4 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005dd2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f7ff ffbb 	bl	8005d52 <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005ddc:	b108      	cbz	r0, 8005de2 <VL53L0X_GetDeviceParameters+0x6a>
}
 8005dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005de2:	1d21      	adds	r1, r4, #4
 8005de4:	4628      	mov	r0, r5
}
 8005de6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005dea:	f001 bcf9 	b.w	80077e0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

08005df0 <VL53L0X_DataInit>:
{
 8005df0:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005df2:	2200      	movs	r2, #0
{
 8005df4:	4605      	mov	r5, r0
 8005df6:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8005df8:	2188      	movs	r1, #136	; 0x88
 8005dfa:	f7fe fc6d 	bl	80046d8 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8005dfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e02:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005e06:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e0a:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005e0e:	4a31      	ldr	r2, [pc, #196]	; (8005ed4 <VL53L0X_DataInit+0xe4>)
 8005e10:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005e14:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005e16:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <VL53L0X_DataInit+0xe8>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005e18:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8005e1c:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005e20:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005e22:	4669      	mov	r1, sp
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7ff ffa7 	bl	8005d78 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	b970      	cbnz	r0, 8005e4c <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005e2e:	f8ad 0000 	strh.w	r0, [sp]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005e32:	466e      	mov	r6, sp
 8005e34:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e36:	f105 0710 	add.w	r7, r5, #16
 8005e3a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005e3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e3e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005e40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005e42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005e44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005e48:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8005e4c:	4b23      	ldr	r3, [pc, #140]	; (8005edc <VL53L0X_DataInit+0xec>)
 8005e4e:	4a24      	ldr	r2, [pc, #144]	; (8005ee0 <VL53L0X_DataInit+0xf0>)
 8005e50:	e9c5 234d 	strd	r2, r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8005e54:	2301      	movs	r3, #1
 8005e56:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e5a:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 8005e5c:	bbb4      	cbnz	r4, 8005ecc <VL53L0X_DataInit+0xdc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005e5e:	b2b1      	uxth	r1, r6
 8005e60:	2201      	movs	r2, #1
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7ff fec8 	bl	8005bf8 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e68:	3601      	adds	r6, #1
 8005e6a:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005e6c:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005e6e:	d1f5      	bne.n	8005e5c <VL53L0X_DataInit+0x6c>
	if (Status == VL53L0X_ERROR_NONE)
 8005e70:	bb60      	cbnz	r0, 8005ecc <VL53L0X_DataInit+0xdc>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e72:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e74:	4602      	mov	r2, r0
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005e76:	4606      	mov	r6, r0
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e78:	2104      	movs	r1, #4
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff febc 	bl	8005bf8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8005e80:	4604      	mov	r4, r0
 8005e82:	bb18      	cbnz	r0, 8005ecc <VL53L0X_DataInit+0xdc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8005e84:	4602      	mov	r2, r0
 8005e86:	2105      	movs	r1, #5
 8005e88:	4628      	mov	r0, r5
 8005e8a:	f7ff feb5 	bl	8005bf8 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8005e8e:	4604      	mov	r4, r0
 8005e90:	b9e0      	cbnz	r0, 8005ecc <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005e92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8005e96:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7ff fef5 	bl	8005c8e <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	b988      	cbnz	r0, 8005ecc <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8005ea8:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
 8005eb2:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7fe fc0d 	bl	80046d8 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	b908      	cbnz	r0, 8005ecc <VL53L0X_DataInit+0xdc>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8005ec8:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
}
 8005ecc:	4620      	mov	r0, r4
 8005ece:	b011      	add	sp, #68	; 0x44
 8005ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	00016b85 	.word	0x00016b85
 8005ed8:	000970a4 	.word	0x000970a4
 8005edc:	0a0001f4 	.word	0x0a0001f4
 8005ee0:	03840064 	.word	0x03840064

08005ee4 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f000 bd50 	b.w	800698a <VL53L0X_perform_ref_calibration>

08005eea <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005eea:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005eee:	b08e      	sub	sp, #56	; 0x38
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005ef0:	230c      	movs	r3, #12
{
 8005ef2:	460c      	mov	r4, r1
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005ef4:	aa04      	add	r2, sp, #16
 8005ef6:	2114      	movs	r1, #20
{
 8005ef8:	4605      	mov	r5, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005efa:	f7fe fb91 	bl	8004620 <VL53L0X_ReadMulti>
 8005efe:	4603      	mov	r3, r0
 8005f00:	4684      	mov	ip, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d16e      	bne.n	8005fe4 <VL53L0X_GetRangingMeasurementData+0xfa>
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005f06:	6063      	str	r3, [r4, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005f08:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8005f0c:	f89d 3016 	ldrb.w	r3, [sp, #22]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005f10:	f89d 1018 	ldrb.w	r1, [sp, #24]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005f14:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005f16:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005f1a:	f89d 3019 	ldrb.w	r3, [sp, #25]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005f1e:	f89d 701a 	ldrb.w	r7, [sp, #26]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005f22:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005f24:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	025b      	lsls	r3, r3, #9

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005f2c:	f89d 1012 	ldrb.w	r1, [sp, #18]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005f30:	6123      	str	r3, [r4, #16]
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005f32:	f89d 3013 	ldrb.w	r3, [sp, #19]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005f36:	f89d 001b 	ldrb.w	r0, [sp, #27]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005f3a:	f8b5 614e 	ldrh.w	r6, [r5, #334]	; 0x14e
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005f3e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005f42:	b292      	uxth	r2, r2
 8005f44:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005f46:	b29b      	uxth	r3, r3
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005f48:	eb00 2007 	add.w	r0, r0, r7, lsl #8
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005f4c:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005f4e:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005f50:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		DeviceRangeStatus = localBuffer[0];
 8005f54:	f89d 1010 	ldrb.w	r1, [sp, #16]
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005f58:	f895 c131 	ldrb.w	ip, [r5, #305]	; 0x131
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005f5c:	b287      	uxth	r7, r0
		if (LinearityCorrectiveGain != 1000) {
 8005f5e:	d00c      	beq.n	8005f7a <VL53L0X_GetRangingMeasurementData+0x90>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005f60:	fb07 f006 	mul.w	r0, r7, r6
 8005f64:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8005f68:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005f6c:	fbb0 f0f6 	udiv	r0, r0, r6
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005f70:	7f2e      	ldrb	r6, [r5, #28]
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005f72:	6a2f      	ldr	r7, [r5, #32]
			if (XTalkCompensationEnable) {
 8005f74:	2e00      	cmp	r6, #0
 8005f76:	d139      	bne.n	8005fec <VL53L0X_GetRangingMeasurementData+0x102>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8005f78:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8005f7a:	f1bc 0f00 	cmp.w	ip, #0
 8005f7e:	d041      	beq.n	8006004 <VL53L0X_GetRangingMeasurementData+0x11a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005f80:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8005f82:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005f84:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f86:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005f88:	f10d 000f 	add.w	r0, sp, #15
 8005f8c:	e9cd 4000 	strd	r4, r0, [sp]
 8005f90:	4628      	mov	r0, r5
 8005f92:	f001 fe71 	bl	8007c78 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f96:	4684      	mov	ip, r0
 8005f98:	bb20      	cbnz	r0, 8005fe4 <VL53L0X_GetRangingMeasurementData+0xfa>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f9a:	f89d e00f 	ldrb.w	lr, [sp, #15]
 8005f9e:	f884 e018 	strb.w	lr, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005fa2:	f105 0650 	add.w	r6, r5, #80	; 0x50
 8005fa6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005fa8:	af07      	add	r7, sp, #28
 8005faa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8005fac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005fb0:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005fb2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005fb6:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005fba:	8aa2      	ldrh	r2, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005fbc:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8005fc0:	e9d4 4901 	ldrd	r4, r9, [r4, #4]
 8005fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005fc8:	e9cd 4908 	strd	r4, r9, [sp, #32]
 8005fcc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8005fd0:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 8005fd4:	ac07      	add	r4, sp, #28
 8005fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fd8:	3550      	adds	r5, #80	; 0x50
 8005fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fdc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005fe0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8005fe4:	4660      	mov	r0, ip
 8005fe6:	b00e      	add	sp, #56	; 0x38
 8005fe8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
					* EffectiveSpadRtnCount) >> 8))
 8005fec:	b2bf      	uxth	r7, r7
 8005fee:	435f      	muls	r7, r3
				if ((SignalRate
 8005ff0:	ebb2 2f27 	cmp.w	r2, r7, asr #8
					* EffectiveSpadRtnCount) >> 8))
 8005ff4:	ea4f 2627 	mov.w	r6, r7, asr #8
				if ((SignalRate
 8005ff8:	d107      	bne.n	800600a <VL53L0X_GetRangingMeasurementData+0x120>
					if (RangeFractionalEnable)
 8005ffa:	f1bc 0f00 	cmp.w	ip, #0
 8005ffe:	d10a      	bne.n	8006016 <VL53L0X_GetRangingMeasurementData+0x12c>
						XtalkRangeMilliMeter = 8888
 8006000:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006004:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006006:	2000      	movs	r0, #0
 8006008:	e7bd      	b.n	8005f86 <VL53L0X_GetRangingMeasurementData+0x9c>
					(tmpuint16 * SignalRate)
 800600a:	b280      	uxth	r0, r0
 800600c:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 800600e:	1b96      	subs	r6, r2, r6
						/ (SignalRate
 8006010:	fbb0 f0f6 	udiv	r0, r0, r6
 8006014:	e7b0      	b.n	8005f78 <VL53L0X_GetRangingMeasurementData+0x8e>
						XtalkRangeMilliMeter = 8888;
 8006016:	f242 27b8 	movw	r7, #8888	; 0x22b8
 800601a:	e7b1      	b.n	8005f80 <VL53L0X_GetRangingMeasurementData+0x96>

0800601c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800601c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800601e:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006020:	210e      	movs	r1, #14
 8006022:	f10d 0206 	add.w	r2, sp, #6
{
 8006026:	461d      	mov	r5, r3
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006028:	4c0b      	ldr	r4, [pc, #44]	; (8006058 <VL53L0X_GetInterruptThresholds+0x3c>)
{
 800602a:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800602c:	f7fe fb0e 	bl	800464c <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006030:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006034:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8006038:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800603a:	b950      	cbnz	r0, 8006052 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800603c:	f10d 0206 	add.w	r2, sp, #6
 8006040:	210c      	movs	r1, #12
 8006042:	4630      	mov	r0, r6
 8006044:	f7fe fb02 	bl	800464c <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006048:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800604c:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8006050:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8006052:	b003      	add	sp, #12
 8006054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006056:	bf00      	nop
 8006058:	1ffe0000 	.word	0x1ffe0000

0800605c <VL53L0X_CheckAndLoadInterruptSettings>:
{
 800605c:	b5e3      	push	{r0, r1, r5, r6, r7, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800605e:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8006062:	3b01      	subs	r3, #1
 8006064:	2b02      	cmp	r3, #2
{
 8006066:	4607      	mov	r7, r0
 8006068:	460d      	mov	r5, r1
	if ((InterruptConfig ==
 800606a:	d833      	bhi.n	80060d4 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800606c:	ab01      	add	r3, sp, #4
 800606e:	466a      	mov	r2, sp
 8006070:	2101      	movs	r1, #1
 8006072:	f7ff ffd3 	bl	800601c <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8006076:	9b00      	ldr	r3, [sp, #0]
 8006078:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800607c:	4606      	mov	r6, r0
		if (((ThresholdLow > 255*65536) ||
 800607e:	d803      	bhi.n	8006088 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006086:	d906      	bls.n	8006096 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8006088:	b92e      	cbnz	r6, 8006096 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 800608a:	b13d      	cbz	r5, 800609c <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 800608c:	4912      	ldr	r1, [pc, #72]	; (80060d8 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 800608e:	4638      	mov	r0, r7
 8006090:	f001 fc0b 	bl	80078aa <VL53L0X_load_tuning_settings>
 8006094:	4606      	mov	r6, r0
}
 8006096:	4630      	mov	r0, r6
 8006098:	b002      	add	sp, #8
 800609a:	bde0      	pop	{r5, r6, r7, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800609c:	2204      	movs	r2, #4
 800609e:	21ff      	movs	r1, #255	; 0xff
 80060a0:	4638      	mov	r0, r7
 80060a2:	f7fe fb19 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80060a6:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80060a8:	4605      	mov	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80060aa:	2170      	movs	r1, #112	; 0x70
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7fe fb13 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060b2:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80060b4:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060b6:	21ff      	movs	r1, #255	; 0xff
 80060b8:	4638      	mov	r0, r7
 80060ba:	f7fe fb0d 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80060be:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060c0:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80060c2:	4632      	mov	r2, r6
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	4638      	mov	r0, r7
 80060c8:	f7fe fb06 	bl	80046d8 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060cc:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80060ce:	4328      	orrs	r0, r5
 80060d0:	b246      	sxtb	r6, r0
	return Status;
 80060d2:	e7e0      	b.n	8006096 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060d4:	2600      	movs	r6, #0
 80060d6:	e7de      	b.n	8006096 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 80060d8:	200002d4 	.word	0x200002d4

080060dc <VL53L0X_StartMeasurement>:
{
 80060dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80060de:	7c01      	ldrb	r1, [r0, #16]
	switch (DeviceMode) {
 80060e0:	2901      	cmp	r1, #1
{
 80060e2:	4604      	mov	r4, r0
	switch (DeviceMode) {
 80060e4:	d024      	beq.n	8006130 <VL53L0X_StartMeasurement+0x54>
 80060e6:	2903      	cmp	r1, #3
 80060e8:	d02f      	beq.n	800614a <VL53L0X_StartMeasurement+0x6e>
 80060ea:	bb99      	cbnz	r1, 8006154 <VL53L0X_StartMeasurement+0x78>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80060ec:	2201      	movs	r2, #1
 80060ee:	f7fe faf3 	bl	80046d8 <VL53L0X_WrByte>
		Byte = StartStopByte;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 80060f8:	b198      	cbz	r0, 8006122 <VL53L0X_StartMeasurement+0x46>
}
 80060fa:	b003      	add	sp, #12
 80060fc:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 80060fe:	4601      	mov	r1, r0
 8006100:	f10d 0207 	add.w	r2, sp, #7
 8006104:	4620      	mov	r0, r4
 8006106:	f7fe fa58 	bl	80045ba <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
 800610a:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800610e:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 8006110:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006114:	d507      	bpl.n	8006126 <VL53L0X_StartMeasurement+0x4a>
				&& (Status == VL53L0X_ERROR_NONE)
 8006116:	b930      	cbnz	r0, 8006126 <VL53L0X_StartMeasurement+0x4a>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8006118:	2dc8      	cmp	r5, #200	; 0xc8
 800611a:	d1f0      	bne.n	80060fe <VL53L0X_StartMeasurement+0x22>
				Status = VL53L0X_ERROR_TIME_OUT;
 800611c:	f06f 0006 	mvn.w	r0, #6
 8006120:	e7eb      	b.n	80060fa <VL53L0X_StartMeasurement+0x1e>
			LoopNb = 0;
 8006122:	4605      	mov	r5, r0
 8006124:	e7f1      	b.n	800610a <VL53L0X_StartMeasurement+0x2e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8006126:	2dc8      	cmp	r5, #200	; 0xc8
 8006128:	bf08      	it	eq
 800612a:	f06f 0006 	mvneq.w	r0, #6
 800612e:	e7e4      	b.n	80060fa <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006130:	f7ff ff94 	bl	800605c <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8006134:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8006136:	2100      	movs	r1, #0
 8006138:	4620      	mov	r0, r4
 800613a:	f7fe facd 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800613e:	2800      	cmp	r0, #0
 8006140:	d1db      	bne.n	80060fa <VL53L0X_StartMeasurement+0x1e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8006142:	2304      	movs	r3, #4
 8006144:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8006148:	e7d7      	b.n	80060fa <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800614a:	2101      	movs	r1, #1
 800614c:	f7ff ff86 	bl	800605c <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8006150:	2204      	movs	r2, #4
 8006152:	e7f0      	b.n	8006136 <VL53L0X_StartMeasurement+0x5a>
	switch (DeviceMode) {
 8006154:	f06f 0007 	mvn.w	r0, #7
 8006158:	e7cf      	b.n	80060fa <VL53L0X_StartMeasurement+0x1e>

0800615a <VL53L0X_PerformSingleMeasurement>:
{
 800615a:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800615c:	7c05      	ldrb	r5, [r0, #16]
{
 800615e:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006160:	b125      	cbz	r5, 800616c <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006162:	4620      	mov	r0, r4
 8006164:	f000 fd5a 	bl	8006c1c <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8006168:	b128      	cbz	r0, 8006176 <VL53L0X_PerformSingleMeasurement+0x1c>
}
 800616a:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 800616c:	f7ff ffb6 	bl	80060dc <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8006170:	2800      	cmp	r0, #0
 8006172:	d0f6      	beq.n	8006162 <VL53L0X_PerformSingleMeasurement+0x8>
 8006174:	e7f9      	b.n	800616a <VL53L0X_PerformSingleMeasurement+0x10>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8006176:	2d00      	cmp	r5, #0
 8006178:	d1f7      	bne.n	800616a <VL53L0X_PerformSingleMeasurement+0x10>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800617a:	2303      	movs	r3, #3
 800617c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8006180:	e7f3      	b.n	800616a <VL53L0X_PerformSingleMeasurement+0x10>

08006182 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006184:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006186:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8006188:	2201      	movs	r2, #1
 800618a:	210b      	movs	r1, #11
 800618c:	4630      	mov	r0, r6
 800618e:	f7fe faa3 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006192:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8006194:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8006196:	210b      	movs	r1, #11
 8006198:	4630      	mov	r0, r6
 800619a:	f7fe fa9d 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800619e:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 80061a2:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 80061a4:	2113      	movs	r1, #19
 80061a6:	4630      	mov	r0, r6
 80061a8:	f7fe fa07 	bl	80045ba <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80061ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 80061b0:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 80061b2:	4304      	orrs	r4, r0
		LoopCount++;
 80061b4:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 80061b6:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 80061b8:	b260      	sxtb	r0, r4
		LoopCount++;
 80061ba:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 80061bc:	d005      	beq.n	80061ca <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 80061be:	2d03      	cmp	r5, #3
 80061c0:	d008      	beq.n	80061d4 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0e0      	beq.n	8006188 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80061c6:	b002      	add	sp, #8
 80061c8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80061ca:	2d03      	cmp	r5, #3
 80061cc:	bf08      	it	eq
 80061ce:	f06f 000b 	mvneq.w	r0, #11
 80061d2:	e7f8      	b.n	80061c6 <VL53L0X_ClearInterruptMask+0x44>
 80061d4:	f06f 000b 	mvn.w	r0, #11
 80061d8:	e7f5      	b.n	80061c6 <VL53L0X_ClearInterruptMask+0x44>

080061da <VL53L0X_PerformSingleRangingMeasurement>:
{
 80061da:	b513      	push	{r0, r1, r4, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80061dc:	2300      	movs	r3, #0
 80061de:	7403      	strb	r3, [r0, #16]
{
 80061e0:	9101      	str	r1, [sp, #4]
 80061e2:	4604      	mov	r4, r0
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80061e4:	f7ff ffb9 	bl	800615a <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 80061e8:	9901      	ldr	r1, [sp, #4]
 80061ea:	b950      	cbnz	r0, 8006202 <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80061ec:	4620      	mov	r0, r4
 80061ee:	f7ff fe7c 	bl	8005eea <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 80061f2:	b930      	cbnz	r0, 8006202 <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80061f4:	4601      	mov	r1, r0
 80061f6:	4620      	mov	r0, r4
}
 80061f8:	b002      	add	sp, #8
 80061fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80061fe:	f7ff bfc0 	b.w	8006182 <VL53L0X_ClearInterruptMask>
}
 8006202:	b002      	add	sp, #8
 8006204:	bd10      	pop	{r4, pc}

08006206 <VL53L0X_SetGpioConfig.part.0>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006206:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
 8006208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620c:	4680      	mov	r8, r0
 800620e:	4614      	mov	r4, r2
 8006210:	461d      	mov	r5, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006212:	d168      	bne.n	80062e6 <VL53L0X_SetGpioConfig.part.0+0xe0>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006214:	2201      	movs	r2, #1
 8006216:	21ff      	movs	r1, #255	; 0xff
 8006218:	f7fe fa5e 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800621c:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800621e:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006220:	4611      	mov	r1, r2
 8006222:	4640      	mov	r0, r8
 8006224:	f7fe fa58 	bl	80046d8 <VL53L0X_WrByte>
 8006228:	4320      	orrs	r0, r4
 800622a:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800622c:	2200      	movs	r2, #0
 800622e:	21ff      	movs	r1, #255	; 0xff
 8006230:	4640      	mov	r0, r8
 8006232:	f7fe fa51 	bl	80046d8 <VL53L0X_WrByte>
 8006236:	4320      	orrs	r0, r4
 8006238:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800623a:	2201      	movs	r2, #1
 800623c:	2180      	movs	r1, #128	; 0x80
 800623e:	4640      	mov	r0, r8
 8006240:	f7fe fa4a 	bl	80046d8 <VL53L0X_WrByte>
 8006244:	4338      	orrs	r0, r7
 8006246:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006248:	2202      	movs	r2, #2
 800624a:	2185      	movs	r1, #133	; 0x85
 800624c:	4640      	mov	r0, r8
 800624e:	f7fe fa43 	bl	80046d8 <VL53L0X_WrByte>
 8006252:	4330      	orrs	r0, r6
 8006254:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006256:	2204      	movs	r2, #4
 8006258:	21ff      	movs	r1, #255	; 0xff
 800625a:	4640      	mov	r0, r8
 800625c:	f7fe fa3c 	bl	80046d8 <VL53L0X_WrByte>
 8006260:	4328      	orrs	r0, r5
 8006262:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006264:	2200      	movs	r2, #0
 8006266:	21cd      	movs	r1, #205	; 0xcd
 8006268:	4640      	mov	r0, r8
 800626a:	f7fe fa35 	bl	80046d8 <VL53L0X_WrByte>
 800626e:	4320      	orrs	r0, r4
 8006270:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006272:	2211      	movs	r2, #17
 8006274:	21cc      	movs	r1, #204	; 0xcc
 8006276:	4640      	mov	r0, r8
 8006278:	f7fe fa2e 	bl	80046d8 <VL53L0X_WrByte>
 800627c:	4338      	orrs	r0, r7
 800627e:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006280:	2207      	movs	r2, #7
 8006282:	21ff      	movs	r1, #255	; 0xff
 8006284:	4640      	mov	r0, r8
 8006286:	f7fe fa27 	bl	80046d8 <VL53L0X_WrByte>
 800628a:	4330      	orrs	r0, r6
 800628c:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800628e:	2200      	movs	r2, #0
 8006290:	21be      	movs	r1, #190	; 0xbe
 8006292:	4640      	mov	r0, r8
 8006294:	f7fe fa20 	bl	80046d8 <VL53L0X_WrByte>
 8006298:	4328      	orrs	r0, r5
 800629a:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800629c:	2206      	movs	r2, #6
 800629e:	21ff      	movs	r1, #255	; 0xff
 80062a0:	4640      	mov	r0, r8
 80062a2:	f7fe fa19 	bl	80046d8 <VL53L0X_WrByte>
 80062a6:	4320      	orrs	r0, r4
 80062a8:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80062aa:	2209      	movs	r2, #9
 80062ac:	21cc      	movs	r1, #204	; 0xcc
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7fe fa12 	bl	80046d8 <VL53L0X_WrByte>
 80062b4:	4338      	orrs	r0, r7
 80062b6:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80062b8:	2200      	movs	r2, #0
 80062ba:	21ff      	movs	r1, #255	; 0xff
 80062bc:	4640      	mov	r0, r8
 80062be:	f7fe fa0b 	bl	80046d8 <VL53L0X_WrByte>
 80062c2:	4330      	orrs	r0, r6
 80062c4:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062c6:	2201      	movs	r2, #1
 80062c8:	21ff      	movs	r1, #255	; 0xff
 80062ca:	4640      	mov	r0, r8
 80062cc:	f7fe fa04 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062d0:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80062d2:	4328      	orrs	r0, r5
 80062d4:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80062d6:	4611      	mov	r1, r2
 80062d8:	4640      	mov	r0, r8
 80062da:	f7fe f9fd 	bl	80046d8 <VL53L0X_WrByte>
 80062de:	4320      	orrs	r0, r4
 80062e0:	b240      	sxtb	r0, r0
}
 80062e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (Functionality) {
 80062e6:	2a04      	cmp	r2, #4
 80062e8:	d817      	bhi.n	800631a <VL53L0X_SetGpioConfig.part.0+0x114>
			Status = VL53L0X_WrByte(Dev,
 80062ea:	210a      	movs	r1, #10
 80062ec:	f7fe f9f4 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1f6      	bne.n	80062e2 <VL53L0X_SetGpioConfig.part.0+0xdc>
				data = (uint8_t)(1 << 4);
 80062f4:	2d00      	cmp	r5, #0
			Status = VL53L0X_UpdateByte(Dev,
 80062f6:	bf0c      	ite	eq
 80062f8:	462b      	moveq	r3, r5
 80062fa:	2310      	movne	r3, #16
 80062fc:	22ef      	movs	r2, #239	; 0xef
 80062fe:	2184      	movs	r1, #132	; 0x84
 8006300:	4640      	mov	r0, r8
 8006302:	f7fe fa0b 	bl	800471c <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006306:	2800      	cmp	r0, #0
 8006308:	d1eb      	bne.n	80062e2 <VL53L0X_SetGpioConfig.part.0+0xdc>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800630a:	f888 40da 	strb.w	r4, [r8, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800630e:	4601      	mov	r1, r0
 8006310:	4640      	mov	r0, r8
}
 8006312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006316:	f7ff bf34 	b.w	8006182 <VL53L0X_ClearInterruptMask>
				Status =
 800631a:	f06f 000a 	mvn.w	r0, #10
 800631e:	e7e0      	b.n	80062e2 <VL53L0X_SetGpioConfig.part.0+0xdc>

08006320 <VL53L0X_StaticInit>:
{
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	b094      	sub	sp, #80	; 0x50
 8006324:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006326:	2240      	movs	r2, #64	; 0x40
 8006328:	2100      	movs	r1, #0
 800632a:	a804      	add	r0, sp, #16
 800632c:	f01c f884 	bl	8022438 <memset>
	uint16_t tempword = 0;
 8006330:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006332:	2101      	movs	r1, #1
 8006334:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8006336:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
 800633a:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
 800633e:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
 8006342:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006344:	f000 fcba 	bl	8006cbc <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006348:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 800634c:	2a01      	cmp	r2, #1
 800634e:	d806      	bhi.n	800635e <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006350:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8006354:	f040 80ad 	bne.w	80064b2 <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
 8006358:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 800635a:	f240 80ac 	bls.w	80064b6 <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800635e:	aa01      	add	r2, sp, #4
 8006360:	a902      	add	r1, sp, #8
 8006362:	4628      	mov	r0, r5
 8006364:	f000 fb2d 	bl	80069c2 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006368:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800636a:	2800      	cmp	r0, #0
 800636c:	f040 809e 	bne.w	80064ac <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
 8006370:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 80a2 	bne.w	80064be <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800637a:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800637e:	4628      	mov	r0, r5
 8006380:	f001 fa93 	bl	80078aa <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8006384:	4604      	mov	r4, r0
 8006386:	2800      	cmp	r0, #0
 8006388:	f040 8090 	bne.w	80064ac <VL53L0X_StaticInit+0x18c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800638c:	4623      	mov	r3, r4
 800638e:	4621      	mov	r1, r4
 8006390:	2204      	movs	r2, #4
 8006392:	4628      	mov	r0, r5
 8006394:	f7ff ff37 	bl	8006206 <VL53L0X_SetGpioConfig.part.0>
	if (Status == VL53L0X_ERROR_NONE) {
 8006398:	4604      	mov	r4, r0
 800639a:	2800      	cmp	r0, #0
 800639c:	f040 8086 	bne.w	80064ac <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80063a0:	2201      	movs	r2, #1
 80063a2:	21ff      	movs	r1, #255	; 0xff
 80063a4:	4628      	mov	r0, r5
 80063a6:	f7fe f997 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80063aa:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80063ae:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80063b0:	2184      	movs	r1, #132	; 0x84
 80063b2:	4628      	mov	r0, r5
 80063b4:	f7fe f94a 	bl	800464c <VL53L0X_RdWord>
 80063b8:	4330      	orrs	r0, r6
 80063ba:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80063bc:	4622      	mov	r2, r4
 80063be:	21ff      	movs	r1, #255	; 0xff
 80063c0:	4628      	mov	r0, r5
 80063c2:	f7fe f989 	bl	80046d8 <VL53L0X_WrByte>
 80063c6:	4330      	orrs	r0, r6
 80063c8:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80063ca:	2c00      	cmp	r4, #0
 80063cc:	d16e      	bne.n	80064ac <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80063ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80063d8:	a904      	add	r1, sp, #16
 80063da:	4628      	mov	r0, r5
 80063dc:	f7ff fccc 	bl	8005d78 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80063e0:	4604      	mov	r4, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d162      	bne.n	80064ac <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80063e6:	f10d 0103 	add.w	r1, sp, #3
 80063ea:	4628      	mov	r0, r5
 80063ec:	f7ff fb36 	bl	8005a5c <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 80063f0:	4604      	mov	r4, r0
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d15a      	bne.n	80064ac <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80063f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063fa:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80063fe:	ae04      	add	r6, sp, #16
 8006400:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006402:	f105 0410 	add.w	r4, r5, #16
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800640a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800640e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006410:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8006418:	f10d 0203 	add.w	r2, sp, #3
 800641c:	2101      	movs	r1, #1
 800641e:	4628      	mov	r0, r5
 8006420:	f7fe f8cb 	bl	80045ba <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006424:	4604      	mov	r4, r0
 8006426:	2800      	cmp	r0, #0
 8006428:	d140      	bne.n	80064ac <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800642a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800642e:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006432:	4602      	mov	r2, r0
 8006434:	4601      	mov	r1, r0
 8006436:	4628      	mov	r0, r5
 8006438:	f7ff fb22 	bl	8005a80 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800643c:	4604      	mov	r4, r0
 800643e:	bba8      	cbnz	r0, 80064ac <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006440:	4602      	mov	r2, r0
 8006442:	2102      	movs	r1, #2
 8006444:	4628      	mov	r0, r5
 8006446:	f7ff fb1b 	bl	8005a80 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 800644a:	4604      	mov	r4, r0
 800644c:	bb70      	cbnz	r0, 80064ac <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800644e:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006450:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006452:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006456:	f10d 0205 	add.w	r2, sp, #5
 800645a:	4628      	mov	r0, r5
 800645c:	f001 f93e 	bl	80076dc <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8006460:	4604      	mov	r4, r0
 8006462:	bb18      	cbnz	r0, 80064ac <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006464:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006468:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800646c:	f10d 0205 	add.w	r2, sp, #5
 8006470:	2101      	movs	r1, #1
 8006472:	4628      	mov	r0, r5
 8006474:	f001 f932 	bl	80076dc <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8006478:	4604      	mov	r4, r0
 800647a:	b9b8      	cbnz	r0, 80064ac <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800647c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006480:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 8006484:	aa03      	add	r2, sp, #12
 8006486:	2103      	movs	r1, #3
 8006488:	4628      	mov	r0, r5
 800648a:	f7ff fb68 	bl	8005b5e <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 800648e:	4604      	mov	r4, r0
 8006490:	b960      	cbnz	r0, 80064ac <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8006498:	aa03      	add	r2, sp, #12
 800649a:	2104      	movs	r1, #4
 800649c:	4628      	mov	r0, r5
 800649e:	f7ff fb5e 	bl	8005b5e <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80064a2:	4604      	mov	r4, r0
 80064a4:	b910      	cbnz	r0, 80064ac <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 80064ac:	4620      	mov	r0, r4
 80064ae:	b014      	add	sp, #80	; 0x50
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 80064b2:	290c      	cmp	r1, #12
 80064b4:	e751      	b.n	800635a <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80064b6:	4628      	mov	r0, r5
 80064b8:	f000 f910 	bl	80066dc <VL53L0X_set_reference_spads>
 80064bc:	e754      	b.n	8006368 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 80064be:	4901      	ldr	r1, [pc, #4]	; (80064c4 <VL53L0X_StaticInit+0x1a4>)
 80064c0:	e75d      	b.n	800637e <VL53L0X_StaticInit+0x5e>
 80064c2:	bf00      	nop
 80064c4:	2000048a 	.word	0x2000048a

080064c8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80064c8:	b513      	push	{r0, r1, r4, lr}
 80064ca:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80064cc:	f10d 0207 	add.w	r2, sp, #7
 80064d0:	2113      	movs	r1, #19
 80064d2:	f7fe f872 	bl	80045ba <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 80064d6:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 80064da:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 80064de:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 80064e2:	bf18      	it	ne
 80064e4:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 80064e8:	6022      	str	r2, [r4, #0]
}
 80064ea:	b002      	add	sp, #8
 80064ec:	bd10      	pop	{r4, pc}

080064ee <VL53L0X_GetMeasurementDataReady>:
{
 80064ee:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 80064f0:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 80064f4:	2b04      	cmp	r3, #4
{
 80064f6:	460c      	mov	r4, r1
	if (InterruptConfig ==
 80064f8:	d10b      	bne.n	8006512 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80064fa:	a901      	add	r1, sp, #4
 80064fc:	f7ff ffe4 	bl	80064c8 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8006500:	9b01      	ldr	r3, [sp, #4]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d101      	bne.n	800650a <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	7023      	strb	r3, [r4, #0]
}
 800650e:	b002      	add	sp, #8
 8006510:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8006512:	aa01      	add	r2, sp, #4
 8006514:	2114      	movs	r1, #20
 8006516:	f7fe f850 	bl	80045ba <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800651a:	2800      	cmp	r0, #0
 800651c:	d1f7      	bne.n	800650e <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 800651e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006522:	07db      	lsls	r3, r3, #31
 8006524:	d4ef      	bmi.n	8006506 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8006526:	7020      	strb	r0, [r4, #0]
 8006528:	e7f1      	b.n	800650e <VL53L0X_GetMeasurementDataReady+0x20>

0800652a <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800652a:	f000 ba4a 	b.w	80069c2 <VL53L0X_perform_ref_spad_management>

0800652e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800652e:	b513      	push	{r0, r1, r4, lr}
 8006530:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8006532:	f10d 0206 	add.w	r2, sp, #6
 8006536:	2128      	movs	r1, #40	; 0x28
 8006538:	f7fe f888 	bl	800464c <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800653c:	b978      	cbnz	r0, 800655e <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800653e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006542:	f3c2 030b 	ubfx	r3, r2, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006546:	f412 6f00 	tst.w	r2, #2048	; 0x800
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800654a:	bf18      	it	ne
 800654c:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
 8006550:	f04f 02fa 	mov.w	r2, #250	; 0xfa
					* 250;
 8006554:	bf14      	ite	ne
 8006556:	fb13 f302 	smulbbne	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800655a:	4353      	muleq	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800655c:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 800655e:	b002      	add	sp, #8
 8006560:	bd10      	pop	{r4, pc}

08006562 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006562:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8006564:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	*next = -1;
 8006568:	f04f 34ff 	mov.w	r4, #4294967295
 800656c:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 800656e:	f002 0207 	and.w	r2, r2, #7

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006572:	4666      	mov	r6, ip
	uint8_t success = 0;
 8006574:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006576:	428e      	cmp	r6, r1
 8006578:	d200      	bcs.n	800657c <get_next_good_spad+0x1a>
 800657a:	b107      	cbz	r7, 800657e <get_next_good_spad+0x1c>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
 800657c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dataByte = goodSpadArray[coarseIndex];
 800657e:	5d84      	ldrb	r4, [r0, r6]
		if (coarseIndex == startIndex) {
 8006580:	4566      	cmp	r6, ip
			dataByte >>= fineOffset;
 8006582:	bf03      	ittte	eq
 8006584:	4114      	asreq	r4, r2
 8006586:	b2e4      	uxtbeq	r4, r4
			fineIndex = fineOffset;
 8006588:	4615      	moveq	r5, r2
		fineIndex = 0;
 800658a:	463d      	movne	r5, r7
			if ((dataByte & 0x1) == 1) {
 800658c:	f014 0701 	ands.w	r7, r4, #1
 8006590:	d004      	beq.n	800659c <get_next_good_spad+0x3a>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006592:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8006596:	601d      	str	r5, [r3, #0]
				coarseIndex++) {
 8006598:	3601      	adds	r6, #1
 800659a:	e7ec      	b.n	8006576 <get_next_good_spad+0x14>
			fineIndex++;
 800659c:	3501      	adds	r5, #1
		while (fineIndex < cSpadsPerByte) {
 800659e:	2d08      	cmp	r5, #8
			dataByte >>= 1;
 80065a0:	ea4f 0454 	mov.w	r4, r4, lsr #1
		while (fineIndex < cSpadsPerByte) {
 80065a4:	d1f2      	bne.n	800658c <get_next_good_spad+0x2a>
 80065a6:	e7f7      	b.n	8006598 <get_next_good_spad+0x36>

080065a8 <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 80065aa:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80065ac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 80065b0:	3800      	subs	r0, #0
 80065b2:	bf18      	it	ne
 80065b4:	2001      	movne	r0, #1
 80065b6:	4770      	bx	lr
 80065b8:	20000580 	.word	0x20000580

080065bc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80065bc:	b530      	push	{r4, r5, lr}
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 80065be:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	coarseIndex = spadIndex / cSpadsPerByte;
 80065c2:	ea4f 04d2 	mov.w	r4, r2, lsr #3
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80065c6:	bf88      	it	hi
 80065c8:	2301      	movhi	r3, #1
	fineIndex = spadIndex % cSpadsPerByte;
 80065ca:	f002 0507 	and.w	r5, r2, #7
		spadArray[coarseIndex] |= (1 << fineIndex);
 80065ce:	bf81      	itttt	hi
 80065d0:	fa03 f205 	lslhi.w	r2, r3, r5
 80065d4:	5d03      	ldrbhi	r3, [r0, r4]
 80065d6:	4313      	orrhi	r3, r2
 80065d8:	5503      	strbhi	r3, [r0, r4]
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80065da:	bf94      	ite	ls
 80065dc:	f06f 0031 	mvnls.w	r0, #49	; 0x31
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80065e0:	2000      	movhi	r0, #0

	return status;
}
 80065e2:	bd30      	pop	{r4, r5, pc}

080065e4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065e4:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80065e6:	2306      	movs	r3, #6
 80065e8:	21b0      	movs	r1, #176	; 0xb0
 80065ea:	f7fd bffb 	b.w	80045e4 <VL53L0X_WriteMulti>

080065ee <get_ref_spad_map>:
				refSpadArray, 6);
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065ee:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80065f0:	2306      	movs	r3, #6
 80065f2:	21b0      	movs	r1, #176	; 0xb0
 80065f4:	f7fe b814 	b.w	8004620 <VL53L0X_ReadMulti>

080065f8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	b085      	sub	sp, #20
 80065fe:	4680      	mov	r8, r0
 8006600:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006602:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006604:	9601      	str	r6, [sp, #4]
{
 8006606:	468a      	mov	sl, r1
 8006608:	4693      	mov	fp, r2
 800660a:	461c      	mov	r4, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 800660c:	f04f 0900 	mov.w	r9, #0
 8006610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006612:	4599      	cmp	r9, r3
 8006614:	d113      	bne.n	800663e <enable_ref_spads+0x46>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006616:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8006618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800661a:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800661c:	b960      	cbnz	r0, 8006638 <enable_ref_spads+0x40>
		status = set_ref_spad_map(Dev, spadArray);
 800661e:	4621      	mov	r1, r4
 8006620:	4640      	mov	r0, r8
 8006622:	f7ff ffdf 	bl	80065e4 <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
 8006626:	b938      	cbnz	r0, 8006638 <enable_ref_spads+0x40>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006628:	a902      	add	r1, sp, #8
 800662a:	4640      	mov	r0, r8
 800662c:	f7ff ffdf 	bl	80065ee <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8006630:	4425      	add	r5, r4
 8006632:	ab02      	add	r3, sp, #8
 8006634:	42ac      	cmp	r4, r5
 8006636:	d11c      	bne.n	8006672 <enable_ref_spads+0x7a>
			}
			i++;
		}
	}
	return status;
}
 8006638:	b005      	add	sp, #20
 800663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800663e:	ab01      	add	r3, sp, #4
 8006640:	4632      	mov	r2, r6
 8006642:	4629      	mov	r1, r5
 8006644:	4658      	mov	r0, fp
 8006646:	f7ff ff8c 	bl	8006562 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 800664a:	9f01      	ldr	r7, [sp, #4]
 800664c:	1c7b      	adds	r3, r7, #1
 800664e:	d00d      	beq.n	800666c <enable_ref_spads+0x74>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006652:	18f8      	adds	r0, r7, r3
 8006654:	f7ff ffa8 	bl	80065a8 <is_aperture>
 8006658:	4550      	cmp	r0, sl
 800665a:	d107      	bne.n	800666c <enable_ref_spads+0x74>
		enable_spad_bit(spadArray, size, currentSpad);
 800665c:	463a      	mov	r2, r7
 800665e:	4620      	mov	r0, r4
 8006660:	f7ff ffac 	bl	80065bc <enable_spad_bit>
		currentSpad++;
 8006664:	1c7e      	adds	r6, r7, #1
	for (index = 0; index < spadCount; index++) {
 8006666:	f109 0901 	add.w	r9, r9, #1
 800666a:	e7d1      	b.n	8006610 <enable_ref_spads+0x18>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800666c:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8006670:	e7d2      	b.n	8006618 <enable_ref_spads+0x20>
			if (spadArray[i] != checkSpadArray[i]) {
 8006672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800667a:	4291      	cmp	r1, r2
 800667c:	d0da      	beq.n	8006634 <enable_ref_spads+0x3c>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800667e:	f06f 0031 	mvn.w	r0, #49	; 0x31
	return status;
 8006682:	e7d9      	b.n	8006638 <enable_ref_spads+0x40>

08006684 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006684:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8006686:	22c0      	movs	r2, #192	; 0xc0
{
 8006688:	b088      	sub	sp, #32
 800668a:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 800668c:	2101      	movs	r1, #1
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800668e:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
{
 8006692:	4605      	mov	r5, r0
		status = VL53L0X_WrByte(Dev,
 8006694:	f7fe f820 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006698:	b9f0      	cbnz	r0, 80066d8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800669a:	a901      	add	r1, sp, #4
 800669c:	4628      	mov	r0, r5
 800669e:	f7ff fd9c 	bl	80061da <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80066a2:	b9c8      	cbnz	r0, 80066d8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066a4:	2201      	movs	r2, #1
 80066a6:	21ff      	movs	r1, #255	; 0xff
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7fe f815 	bl	80046d8 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 80066ae:	b998      	cbnz	r0, 80066d8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 80066b0:	4632      	mov	r2, r6
 80066b2:	21b6      	movs	r1, #182	; 0xb6
 80066b4:	4628      	mov	r0, r5
 80066b6:	f7fd ffc9 	bl	800464c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80066ba:	b968      	cbnz	r0, 80066d8 <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066bc:	4602      	mov	r2, r0
 80066be:	21ff      	movs	r1, #255	; 0xff
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7fe f809 	bl	80046d8 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 80066c6:	b938      	cbnz	r0, 80066d8 <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066c8:	4622      	mov	r2, r4
 80066ca:	2101      	movs	r1, #1
 80066cc:	4628      	mov	r0, r5
 80066ce:	f7fe f803 	bl	80046d8 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80066d2:	b908      	cbnz	r0, 80066d8 <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80066d4:	f885 4130 	strb.w	r4, [r5, #304]	; 0x130
	}

	return status;
}
 80066d8:	b008      	add	sp, #32
 80066da:	bd70      	pop	{r4, r5, r6, pc}

080066dc <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80066dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066de:	460f      	mov	r7, r1
 80066e0:	b089      	sub	sp, #36	; 0x24
 80066e2:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066e4:	21ff      	movs	r1, #255	; 0xff
 80066e6:	2201      	movs	r2, #1
{
 80066e8:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066ea:	f7fd fff5 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80066ee:	4602      	mov	r2, r0
 80066f0:	b9a8      	cbnz	r0, 800671e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 80066f2:	214f      	movs	r1, #79	; 0x4f
 80066f4:	4620      	mov	r0, r4
 80066f6:	f7fd ffef 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80066fa:	b980      	cbnz	r0, 800671e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 80066fc:	222c      	movs	r2, #44	; 0x2c
 80066fe:	214e      	movs	r1, #78	; 0x4e
 8006700:	4620      	mov	r0, r4
 8006702:	f7fd ffe9 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006706:	4602      	mov	r2, r0
 8006708:	b948      	cbnz	r0, 800671e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800670a:	21ff      	movs	r1, #255	; 0xff
 800670c:	4620      	mov	r0, r4
 800670e:	f7fd ffe3 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006712:	b920      	cbnz	r0, 800671e <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8006714:	22b4      	movs	r2, #180	; 0xb4
 8006716:	21b6      	movs	r1, #182	; 0xb6
 8006718:	4620      	mov	r0, r4
 800671a:	f7fd ffdd 	bl	80046d8 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800671e:	2500      	movs	r5, #0
 8006720:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8006724:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128

	if (isApertureSpads) {
 8006728:	b9de      	cbnz	r6, 8006762 <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
 800672a:	4635      	mov	r5, r6
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 800672c:	ab07      	add	r3, sp, #28
 800672e:	22b4      	movs	r2, #180	; 0xb4
 8006730:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8006734:	2306      	movs	r3, #6
 8006736:	e9cd 3200 	strd	r3, r2, [sp]
 800673a:	9502      	str	r5, [sp, #8]
 800673c:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8006740:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8006744:	4631      	mov	r1, r6
 8006746:	4620      	mov	r0, r4
 8006748:	f7ff ff56 	bl	80065f8 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800674c:	b930      	cbnz	r0, 800675c <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800674e:	2301      	movs	r3, #1
 8006750:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006754:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006758:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 800675c:	b009      	add	sp, #36	; 0x24
 800675e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			currentSpadIndex++;
 8006760:	3501      	adds	r5, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006762:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 8006766:	f7ff ff1f 	bl	80065a8 <is_aperture>
 800676a:	2800      	cmp	r0, #0
 800676c:	d1de      	bne.n	800672c <VL53L0X_set_reference_spads+0x50>
 800676e:	2d2c      	cmp	r5, #44	; 0x2c
 8006770:	d1f6      	bne.n	8006760 <VL53L0X_set_reference_spads+0x84>
 8006772:	e7db      	b.n	800672c <VL53L0X_set_reference_spads+0x50>

08006774 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006774:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006776:	f041 0201 	orr.w	r2, r1, #1
 800677a:	2100      	movs	r1, #0
{
 800677c:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800677e:	f7fd ffab 	bl	80046d8 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006782:	b978      	cbnz	r0, 80067a4 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fa49 	bl	8006c1c <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 800678a:	b958      	cbnz	r0, 80067a4 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800678c:	4601      	mov	r1, r0
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff fcf7 	bl	8006182 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 8006794:	b930      	cbnz	r0, 80067a4 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006796:	4602      	mov	r2, r0
 8006798:	4601      	mov	r1, r0
 800679a:	4620      	mov	r0, r4

	return Status;
}
 800679c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80067a0:	f7fd bf9a 	b.w	80046d8 <VL53L0X_WrByte>
}
 80067a4:	bd10      	pop	{r4, pc}

080067a6 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80067a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 80067aa:	2400      	movs	r4, #0
{
 80067ac:	4689      	mov	r9, r1
 80067ae:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067b0:	21ff      	movs	r1, #255	; 0xff
 80067b2:	2201      	movs	r2, #1
{
 80067b4:	4606      	mov	r6, r0
 80067b6:	461f      	mov	r7, r3
	uint8_t PhaseCalint = 0;
 80067b8:	f88d 4007 	strb.w	r4, [sp, #7]
{
 80067bc:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80067c0:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067c4:	f7fd ff88 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80067c8:	4622      	mov	r2, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80067ca:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80067cc:	4621      	mov	r1, r4
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7fd ff82 	bl	80046d8 <VL53L0X_WrByte>
 80067d4:	4328      	orrs	r0, r5
 80067d6:	b245      	sxtb	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067d8:	4622      	mov	r2, r4
 80067da:	21ff      	movs	r1, #255	; 0xff
 80067dc:	4630      	mov	r0, r6
 80067de:	f7fd ff7b 	bl	80046d8 <VL53L0X_WrByte>
 80067e2:	4328      	orrs	r0, r5
 80067e4:	b244      	sxtb	r4, r0

	if (read_not_write) {
 80067e6:	f1b9 0f00 	cmp.w	r9, #0
 80067ea:	d032      	beq.n	8006852 <VL53L0X_ref_calibration_io+0xac>
		if (vhv_enable)
 80067ec:	f1bb 0f00 	cmp.w	fp, #0
 80067f0:	d006      	beq.n	8006800 <VL53L0X_ref_calibration_io+0x5a>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80067f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067f4:	21cb      	movs	r1, #203	; 0xcb
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7fd fedf 	bl	80045ba <VL53L0X_RdByte>
 80067fc:	4320      	orrs	r0, r4
 80067fe:	b244      	sxtb	r4, r0
		if (phase_enable)
 8006800:	f1ba 0f00 	cmp.w	sl, #0
 8006804:	d007      	beq.n	8006816 <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006806:	f10d 0207 	add.w	r2, sp, #7
 800680a:	21ee      	movs	r1, #238	; 0xee
 800680c:	4630      	mov	r0, r6
 800680e:	f7fd fed4 	bl	80045ba <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006812:	4320      	orrs	r0, r4
 8006814:	b244      	sxtb	r4, r0
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006816:	2201      	movs	r2, #1
 8006818:	21ff      	movs	r1, #255	; 0xff
 800681a:	4630      	mov	r0, r6
 800681c:	f7fd ff5c 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006820:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006822:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006824:	2100      	movs	r1, #0
 8006826:	4630      	mov	r0, r6
 8006828:	f7fd ff56 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800682c:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800682e:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006830:	2200      	movs	r2, #0
 8006832:	21ff      	movs	r1, #255	; 0xff
 8006834:	4630      	mov	r0, r6
 8006836:	f7fd ff4f 	bl	80046d8 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800683a:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800683c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006842:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006844:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 8006848:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800684a:	7013      	strb	r3, [r2, #0]
}
 800684c:	b003      	add	sp, #12
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 8006852:	f1bb 0f00 	cmp.w	fp, #0
 8006856:	d006      	beq.n	8006866 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006858:	4642      	mov	r2, r8
 800685a:	21cb      	movs	r1, #203	; 0xcb
 800685c:	4630      	mov	r0, r6
 800685e:	f7fd ff3b 	bl	80046d8 <VL53L0X_WrByte>
 8006862:	4320      	orrs	r0, r4
 8006864:	b244      	sxtb	r4, r0
		if (phase_enable)
 8006866:	f1ba 0f00 	cmp.w	sl, #0
 800686a:	d0d4      	beq.n	8006816 <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800686c:	463b      	mov	r3, r7
 800686e:	2280      	movs	r2, #128	; 0x80
 8006870:	21ee      	movs	r1, #238	; 0xee
 8006872:	4630      	mov	r0, r6
 8006874:	f7fd ff52 	bl	800471c <VL53L0X_UpdateByte>
 8006878:	e7cb      	b.n	8006812 <VL53L0X_ref_calibration_io+0x6c>

0800687a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800687a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800687e:	b087      	sub	sp, #28
 8006880:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 8006882:	2200      	movs	r2, #0
{
 8006884:	4605      	mov	r5, r0
 8006886:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 8006888:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800688c:	461e      	mov	r6, r3
 800688e:	b31b      	cbz	r3, 80068d8 <VL53L0X_perform_vhv_calibration+0x5e>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006890:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006894:	2201      	movs	r2, #1
 8006896:	4611      	mov	r1, r2
 8006898:	4628      	mov	r0, r5
 800689a:	f7fd ff1d 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800689e:	4604      	mov	r4, r0
 80068a0:	bb58      	cbnz	r0, 80068fa <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80068a2:	2140      	movs	r1, #64	; 0x40
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff ff65 	bl	8006774 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80068aa:	4604      	mov	r4, r0
 80068ac:	bb28      	cbnz	r0, 80068fa <VL53L0X_perform_vhv_calibration+0x80>
 80068ae:	f1b9 0f01 	cmp.w	r9, #1
 80068b2:	d113      	bne.n	80068dc <VL53L0X_perform_vhv_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80068b4:	f10d 0317 	add.w	r3, sp, #23
 80068b8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80068bc:	e9cd 8300 	strd	r8, r3, [sp]
 80068c0:	4602      	mov	r2, r0
 80068c2:	4603      	mov	r3, r0
 80068c4:	4649      	mov	r1, r9
 80068c6:	4628      	mov	r0, r5
 80068c8:	f7ff ff6d 	bl	80067a6 <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80068cc:	b140      	cbz	r0, 80068e0 <VL53L0X_perform_vhv_calibration+0x66>
		*pVhvSettings = 0;
 80068ce:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 80068d0:	4620      	mov	r0, r4
 80068d2:	b007      	add	sp, #28
 80068d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 80068d8:	461f      	mov	r7, r3
 80068da:	e7db      	b.n	8006894 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 80068dc:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80068e0:	2e00      	cmp	r6, #0
 80068e2:	d0f5      	beq.n	80068d0 <VL53L0X_perform_vhv_calibration+0x56>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80068e4:	463a      	mov	r2, r7
 80068e6:	2101      	movs	r1, #1
 80068e8:	4628      	mov	r0, r5
 80068ea:	f7fd fef5 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 80068ee:	4604      	mov	r4, r0
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d1ed      	bne.n	80068d0 <VL53L0X_perform_vhv_calibration+0x56>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80068f4:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 80068f8:	e7ea      	b.n	80068d0 <VL53L0X_perform_vhv_calibration+0x56>
		*pVhvSettings = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f888 3000 	strb.w	r3, [r8]
 8006900:	4620      	mov	r0, r4
 8006902:	e7e4      	b.n	80068ce <VL53L0X_perform_vhv_calibration+0x54>

08006904 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006908:	4605      	mov	r5, r0
 800690a:	b087      	sub	sp, #28
 800690c:	4688      	mov	r8, r1
 800690e:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006910:	461e      	mov	r6, r3
 8006912:	b323      	cbz	r3, 800695e <VL53L0X_perform_phase_calibration+0x5a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006914:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006918:	2202      	movs	r2, #2
 800691a:	2101      	movs	r1, #1
 800691c:	4628      	mov	r0, r5
 800691e:	f7fd fedb 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8006922:	4604      	mov	r4, r0
 8006924:	bb60      	cbnz	r0, 8006980 <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006926:	4601      	mov	r1, r0
 8006928:	4628      	mov	r0, r5
 800692a:	f7ff ff23 	bl	8006774 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800692e:	4604      	mov	r4, r0
 8006930:	bb30      	cbnz	r0, 8006980 <VL53L0X_perform_phase_calibration+0x7c>
 8006932:	f1b9 0f01 	cmp.w	r9, #1
 8006936:	d114      	bne.n	8006962 <VL53L0X_perform_phase_calibration+0x5e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006938:	f10d 0317 	add.w	r3, sp, #23
 800693c:	e9cd 0902 	strd	r0, r9, [sp, #8]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	4602      	mov	r2, r0
 8006944:	4603      	mov	r3, r0
 8006946:	f8cd 8004 	str.w	r8, [sp, #4]
 800694a:	4649      	mov	r1, r9
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff ff2a 	bl	80067a6 <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006952:	b140      	cbz	r0, 8006966 <VL53L0X_perform_phase_calibration+0x62>
		*pPhaseCal = 0;
 8006954:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8006956:	4620      	mov	r0, r4
 8006958:	b007      	add	sp, #28
 800695a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 800695e:	461f      	mov	r7, r3
 8006960:	e7da      	b.n	8006918 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8006962:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006966:	2e00      	cmp	r6, #0
 8006968:	d0f5      	beq.n	8006956 <VL53L0X_perform_phase_calibration+0x52>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800696a:	463a      	mov	r2, r7
 800696c:	2101      	movs	r1, #1
 800696e:	4628      	mov	r0, r5
 8006970:	f7fd feb2 	bl	80046d8 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8006974:	4604      	mov	r4, r0
 8006976:	2800      	cmp	r0, #0
 8006978:	d1ed      	bne.n	8006956 <VL53L0X_perform_phase_calibration+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800697a:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 800697e:	e7ea      	b.n	8006956 <VL53L0X_perform_phase_calibration+0x52>
		*pPhaseCal = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	f888 3000 	strb.w	r3, [r8]
 8006986:	4620      	mov	r0, r4
 8006988:	e7e4      	b.n	8006954 <VL53L0X_perform_phase_calibration+0x50>

0800698a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800698a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800698c:	4615      	mov	r5, r2
 800698e:	461a      	mov	r2, r3

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006990:	2300      	movs	r3, #0
 8006992:	9201      	str	r2, [sp, #4]
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006994:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130
{
 8006998:	4604      	mov	r4, r0
	Status = VL53L0X_perform_vhv_calibration(
 800699a:	f7ff ff6e 	bl	800687a <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800699e:	9a01      	ldr	r2, [sp, #4]
 80069a0:	b968      	cbnz	r0, 80069be <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 80069a2:	4603      	mov	r3, r0
 80069a4:	4629      	mov	r1, r5
 80069a6:	4620      	mov	r0, r4
 80069a8:	f7ff ffac 	bl	8006904 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80069ac:	b938      	cbnz	r0, 80069be <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80069ae:	4632      	mov	r2, r6
 80069b0:	2101      	movs	r1, #1
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7fd fe90 	bl	80046d8 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80069b8:	b908      	cbnz	r0, 80069be <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80069ba:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130

	}

	return Status;
}
 80069be:	b002      	add	sp, #8
 80069c0:	bd70      	pop	{r4, r5, r6, pc}

080069c2 <VL53L0X_perform_ref_spad_management>:
{
 80069c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
 80069c6:	2300      	movs	r3, #0
{
 80069c8:	b093      	sub	sp, #76	; 0x4c
 80069ca:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80069ce:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 80069d2:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069d6:	2201      	movs	r2, #1
 80069d8:	21ff      	movs	r1, #255	; 0xff
	int32_t nextGoodSpad = 0;
 80069da:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80069de:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	uint8_t VhvSettings = 0;
 80069e2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
{
 80069e6:	4605      	mov	r5, r0
	uint8_t PhaseCal = 0;
 80069e8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069ec:	f7fd fe74 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80069f0:	4604      	mov	r4, r0
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f040 80e8 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 80069f8:	4602      	mov	r2, r0
 80069fa:	214f      	movs	r1, #79	; 0x4f
 80069fc:	4628      	mov	r0, r5
 80069fe:	f7fd fe6b 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a02:	4604      	mov	r4, r0
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f040 80df 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006a0a:	222c      	movs	r2, #44	; 0x2c
 8006a0c:	214e      	movs	r1, #78	; 0x4e
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f7fd fe62 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a14:	4604      	mov	r4, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f040 80d6 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	21ff      	movs	r1, #255	; 0xff
 8006a20:	4628      	mov	r0, r5
 8006a22:	f7fd fe59 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a26:	4604      	mov	r4, r0
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f040 80cd 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006a2e:	22b4      	movs	r2, #180	; 0xb4
 8006a30:	21b6      	movs	r1, #182	; 0xb6
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7fd fe50 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a38:	4604      	mov	r4, r0
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f040 80c4 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8006a40:	4602      	mov	r2, r0
 8006a42:	2180      	movs	r1, #128	; 0x80
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7fd fe47 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f040 80bb 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006a52:	4603      	mov	r3, r0
 8006a54:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 8006a58:	a90d      	add	r1, sp, #52	; 0x34
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f7ff ff95 	bl	800698a <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8006a60:	4604      	mov	r4, r0
 8006a62:	2800      	cmp	r0, #0
 8006a64:	f040 80b0 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = enable_ref_spads(Dev,
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a6e:	21b4      	movs	r1, #180	; 0xb4
 8006a70:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefGoodSpadMap,
 8006a72:	f505 7a95 	add.w	sl, r5, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006a76:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006a7a:	ae0e      	add	r6, sp, #56	; 0x38
 8006a7c:	e9cd 3100 	strd	r3, r1, [sp]
		lastSpadIndex = currentSpadIndex;
 8006a80:	900e      	str	r0, [sp, #56]	; 0x38
		Status = enable_ref_spads(Dev,
 8006a82:	4601      	mov	r1, r0
 8006a84:	9604      	str	r6, [sp, #16]
 8006a86:	464b      	mov	r3, r9
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f7ff fdb4 	bl	80065f8 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 8006a90:	4604      	mov	r4, r0
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 8098 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
		Status = perform_ref_signal_measurement(Dev,
 8006a98:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006a9c:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 8006a9e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 8006aa2:	f7ff fdef 	bl	8006684 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f040 808d 	bne.w	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
 8006aae:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006ab2:	4543      	cmp	r3, r8
 8006ab4:	f240 80aa 	bls.w	8006c0c <VL53L0X_perform_ref_spad_management+0x24a>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006ab8:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
 8006abc:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
 8006ac0:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
 8006ac4:	f7ff fd70 	bl	80065a8 <is_aperture>
 8006ac8:	b180      	cbz	r0, 8006aec <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
 8006aca:	2306      	movs	r3, #6
 8006acc:	22b4      	movs	r2, #180	; 0xb4
 8006ace:	2703      	movs	r7, #3
 8006ad0:	e9cd 3200 	strd	r3, r2, [sp]
 8006ad4:	e9cd b702 	strd	fp, r7, [sp, #8]
 8006ad8:	9604      	str	r6, [sp, #16]
 8006ada:	464b      	mov	r3, r9
 8006adc:	4652      	mov	r2, sl
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f7ff fd89 	bl	80065f8 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8006ae6:	b138      	cbz	r0, 8006af8 <VL53L0X_perform_ref_spad_management+0x136>
			Status = perform_ref_signal_measurement(Dev,
 8006ae8:	4604      	mov	r4, r0
	return Status;
 8006aea:	e06d      	b.n	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006aec:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8006af0:	d8eb      	bhi.n	8006aca <VL53L0X_perform_ref_spad_management+0x108>
				currentSpadIndex++;
 8006af2:	f10b 0b01 	add.w	fp, fp, #1
 8006af6:	e7e3      	b.n	8006ac0 <VL53L0X_perform_ref_spad_management+0xfe>
				Status = perform_ref_signal_measurement(Dev,
 8006af8:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006afc:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8006afe:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 8006b02:	f7ff fdbf 	bl	8006684 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d1ee      	bne.n	8006ae8 <VL53L0X_perform_ref_spad_management+0x126>
 8006b0a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8006b0e:	4543      	cmp	r3, r8
 8006b10:	d97f      	bls.n	8006c12 <VL53L0X_perform_ref_spad_management+0x250>
					isApertureSpads_int = 1;
 8006b12:	2601      	movs	r6, #1
			needAptSpads = 0;
 8006b14:	9607      	str	r6, [sp, #28]
		(peakSignalRateRef < targetRefRate)) {
 8006b16:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006b1a:	4543      	cmp	r3, r8
 8006b1c:	d263      	bcs.n	8006be6 <VL53L0X_perform_ref_spad_management+0x224>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006b1e:	eba3 0308 	sub.w	r3, r3, r8
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bfb8      	it	lt
 8006b26:	425b      	neglt	r3, r3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006b28:	f8d9 0000 	ldr.w	r0, [r9]
 8006b2c:	f8b9 1004 	ldrh.w	r1, [r9, #4]
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006b30:	9309      	str	r3, [sp, #36]	; 0x24
		isApertureSpads_int = needAptSpads;
 8006b32:	f89d 601c 	ldrb.w	r6, [sp, #28]
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006b36:	9010      	str	r0, [sp, #64]	; 0x40
		refSpadCount_int	= minimumSpadCount;
 8006b38:	2303      	movs	r3, #3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006b3a:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		refSpadCount_int	= minimumSpadCount;
 8006b3e:	9308      	str	r3, [sp, #32]
			get_next_good_spad(
 8006b40:	465a      	mov	r2, fp
 8006b42:	ab0f      	add	r3, sp, #60	; 0x3c
 8006b44:	2106      	movs	r1, #6
 8006b46:	4650      	mov	r0, sl
 8006b48:	f7ff fd0b 	bl	8006562 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 8006b4c:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8006b50:	f1bb 3fff 	cmp.w	fp, #4294967295
 8006b54:	d057      	beq.n	8006c06 <VL53L0X_perform_ref_spad_management+0x244>
			(refSpadCount_int)++;
 8006b56:	9b08      	ldr	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006b58:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
			(refSpadCount_int)++;
 8006b5c:	1c5f      	adds	r7, r3, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006b5e:	f7ff fd23 	bl	80065a8 <is_aperture>
 8006b62:	9b07      	ldr	r3, [sp, #28]
 8006b64:	4298      	cmp	r0, r3
 8006b66:	d14e      	bne.n	8006c06 <VL53L0X_perform_ref_spad_management+0x244>
			Status = enable_spad_bit(
 8006b68:	465a      	mov	r2, fp
 8006b6a:	2106      	movs	r1, #6
 8006b6c:	4648      	mov	r0, r9
 8006b6e:	f7ff fd25 	bl	80065bc <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 8006b72:	2800      	cmp	r0, #0
 8006b74:	d1b8      	bne.n	8006ae8 <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
 8006b76:	4649      	mov	r1, r9
 8006b78:	4628      	mov	r0, r5
				currentSpadIndex++;
 8006b7a:	f10b 0b01 	add.w	fp, fp, #1
				Status = set_ref_spad_map(Dev,
 8006b7e:	f7ff fd31 	bl	80065e4 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d1b0      	bne.n	8006ae8 <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
 8006b86:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f7ff fd7a 	bl	8006684 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 8006b90:	2800      	cmp	r0, #0
 8006b92:	d1a9      	bne.n	8006ae8 <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006b94:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8006b98:	eba1 0308 	sub.w	r3, r1, r8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfb8      	it	lt
 8006ba0:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 8006ba2:	4541      	cmp	r1, r8
 8006ba4:	d914      	bls.n	8006bd0 <VL53L0X_perform_ref_spad_management+0x20e>
				if (signalRateDiff > lastSignalRateDiff) {
 8006ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d91c      	bls.n	8006be6 <VL53L0X_perform_ref_spad_management+0x224>
					Status = set_ref_spad_map(Dev,
 8006bac:	a910      	add	r1, sp, #64	; 0x40
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7ff fd18 	bl	80065e4 <set_ref_spad_map>
					memcpy(
 8006bb4:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8006bb8:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8006bbc:	4603      	mov	r3, r0
					memcpy(
 8006bbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006bc0:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8006bc4:	b173      	cbz	r3, 8006be4 <VL53L0X_perform_ref_spad_management+0x222>
 8006bc6:	461c      	mov	r4, r3
}
 8006bc8:	4620      	mov	r0, r4
 8006bca:	b013      	add	sp, #76	; 0x4c
 8006bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(lastSpadArray,
 8006bd0:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8006bd4:	f8b5 1128 	ldrh.w	r1, [r5, #296]	; 0x128
 8006bd8:	9010      	str	r0, [sp, #64]	; 0x40
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006bda:	e9cd 7308 	strd	r7, r3, [sp, #32]
				memcpy(lastSpadArray,
 8006bde:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		while (!complete) {
 8006be2:	e7ad      	b.n	8006b40 <VL53L0X_perform_ref_spad_management+0x17e>
 8006be4:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	701e      	strb	r6, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 8006c04:	e7e0      	b.n	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006c06:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8006c0a:	e7dd      	b.n	8006bc8 <VL53L0X_perform_ref_spad_management+0x206>
	uint8_t	 isApertureSpads_int = 0;
 8006c0c:	2600      	movs	r6, #0
	uint32_t refSpadCount_int = 0;
 8006c0e:	4637      	mov	r7, r6
 8006c10:	e780      	b.n	8006b14 <VL53L0X_perform_ref_spad_management+0x152>
			needAptSpads = 1;
 8006c12:	2301      	movs	r3, #1
	uint8_t	 isApertureSpads_int = 0;
 8006c14:	4606      	mov	r6, r0
	uint32_t refSpadCount_int = 0;
 8006c16:	4607      	mov	r7, r0
			needAptSpads = 1;
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	e77c      	b.n	8006b16 <VL53L0X_perform_ref_spad_management+0x154>

08006c1c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8006c1e:	2300      	movs	r3, #0
{
 8006c20:	4604      	mov	r4, r0
	uint8_t NewDataReady = 0;
 8006c22:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c26:	25c8      	movs	r5, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006c28:	f10d 0107 	add.w	r1, sp, #7
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7ff fc5e 	bl	80064ee <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8006c32:	b958      	cbnz	r0, 8006c4c <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d007      	beq.n	8006c4c <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006c3c:	3d01      	subs	r5, #1
 8006c3e:	d003      	beq.n	8006c48 <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8006c40:	4620      	mov	r0, r4
 8006c42:	f7fd fd81 	bl	8004748 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006c46:	e7ef      	b.n	8006c28 <VL53L0X_measurement_poll_for_completion+0xc>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006c48:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8006c4c:	b003      	add	sp, #12
 8006c4e:	bd30      	pop	{r4, r5, pc}

08006c50 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006c50:	4602      	mov	r2, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8006c52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d802      	bhi.n	8006c60 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
 8006c5a:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8006c5c:	b913      	cbnz	r3, 8006c64 <VL53L0X_isqrt+0x14>

		bit >>= 2;
	}

	return res;
}
 8006c5e:	4770      	bx	lr
		bit >>= 2;
 8006c60:	089b      	lsrs	r3, r3, #2
 8006c62:	e7f8      	b.n	8006c56 <VL53L0X_isqrt+0x6>
		if (num >= res + bit) {
 8006c64:	18c1      	adds	r1, r0, r3
 8006c66:	4291      	cmp	r1, r2
 8006c68:	ea4f 0050 	mov.w	r0, r0, lsr #1
			res = (res >> 1) + bit;
 8006c6c:	bf9c      	itt	ls
 8006c6e:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 8006c70:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 8006c72:	089b      	lsrs	r3, r3, #2
 8006c74:	e7f2      	b.n	8006c5c <VL53L0X_isqrt+0xc>

08006c76 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2183      	movs	r1, #131	; 0x83
{
 8006c7c:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006c7e:	f7fd fd2b 	bl	80046d8 <VL53L0X_WrByte>
 8006c82:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8006c84:	b988      	cbnz	r0, 8006caa <VL53L0X_device_read_strobe+0x34>
 8006c86:	26c8      	movs	r6, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006c88:	f10d 0207 	add.w	r2, sp, #7
 8006c8c:	2183      	movs	r1, #131	; 0x83
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f7fd fc93 	bl	80045ba <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006c94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006c98:	4303      	orrs	r3, r0
 8006c9a:	f013 0fff 	tst.w	r3, #255	; 0xff
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006c9e:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006ca0:	d103      	bne.n	8006caa <VL53L0X_device_read_strobe+0x34>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006ca2:	3e01      	subs	r6, #1
 8006ca4:	d1f0      	bne.n	8006c88 <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8006ca6:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006caa:	2201      	movs	r2, #1
 8006cac:	2183      	movs	r1, #131	; 0x83
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f7fd fd12 	bl	80046d8 <VL53L0X_WrByte>
 8006cb4:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8006cb6:	b240      	sxtb	r0, r0
 8006cb8:	b002      	add	sp, #8
 8006cba:	bd70      	pop	{r4, r5, r6, pc}

08006cbc <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006cc0:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 8006cc4:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8006cc6:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006cca:	2e07      	cmp	r6, #7
	uint32_t PartUIDLower = 0;
 8006ccc:	e9cd 9907 	strd	r9, r9, [sp, #28]
{
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460f      	mov	r7, r1
	if (ReadDataFromDeviceDone != 7) {
 8006cd4:	f000 82b0 	beq.w	8007238 <VL53L0X_get_info_from_device+0x57c>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	f7fd fcfc 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ce0:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006ce2:	4683      	mov	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ce4:	21ff      	movs	r1, #255	; 0xff
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f7fd fcf6 	bl	80046d8 <VL53L0X_WrByte>
 8006cec:	ea4b 0000 	orr.w	r0, fp, r0
 8006cf0:	fa4f fb80 	sxtb.w	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006cf4:	464a      	mov	r2, r9
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f7fd fced 	bl	80046d8 <VL53L0X_WrByte>
 8006cfe:	ea4b 0000 	orr.w	r0, fp, r0
 8006d02:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006d06:	2206      	movs	r2, #6
 8006d08:	21ff      	movs	r1, #255	; 0xff
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7fd fce4 	bl	80046d8 <VL53L0X_WrByte>
 8006d10:	ea4a 0000 	orr.w	r0, sl, r0
 8006d14:	b245      	sxtb	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006d16:	f10d 0215 	add.w	r2, sp, #21
 8006d1a:	2183      	movs	r1, #131	; 0x83
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7fd fc4c 	bl	80045ba <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006d22:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006d26:	4328      	orrs	r0, r5
 8006d28:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006d2c:	f042 0204 	orr.w	r2, r2, #4
 8006d30:	2183      	movs	r1, #131	; 0x83
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7fd fcd0 	bl	80046d8 <VL53L0X_WrByte>
 8006d38:	ea48 0000 	orr.w	r0, r8, r0
 8006d3c:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006d40:	2207      	movs	r2, #7
 8006d42:	21ff      	movs	r1, #255	; 0xff
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7fd fcc7 	bl	80046d8 <VL53L0X_WrByte>
 8006d4a:	ea48 0000 	orr.w	r0, r8, r0
 8006d4e:	fa4f fa80 	sxtb.w	sl, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006d52:	2201      	movs	r2, #1
 8006d54:	2181      	movs	r1, #129	; 0x81
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7fd fcbe 	bl	80046d8 <VL53L0X_WrByte>
 8006d5c:	ea4a 0000 	orr.w	r0, sl, r0
 8006d60:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8006d64:	4620      	mov	r0, r4
 8006d66:	f7fd fcef 	bl	8004748 <VL53L0X_PollingDelay>
 8006d6a:	ea4a 0000 	orr.w	r0, sl, r0
 8006d6e:	fa4f f880 	sxtb.w	r8, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d72:	2201      	movs	r2, #1
 8006d74:	2180      	movs	r1, #128	; 0x80
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7fd fcae 	bl	80046d8 <VL53L0X_WrByte>

		if (((option & 1) == 1) &&
 8006d7c:	f017 0b01 	ands.w	fp, r7, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d80:	ea48 0000 	orr.w	r0, r8, r0
 8006d84:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8006d86:	f000 822a 	beq.w	80071de <VL53L0X_get_info_from_device+0x522>
 8006d8a:	07f2      	lsls	r2, r6, #31
 8006d8c:	f100 822a 	bmi.w	80071e4 <VL53L0X_get_info_from_device+0x528>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006d90:	226b      	movs	r2, #107	; 0x6b
 8006d92:	2194      	movs	r1, #148	; 0x94
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7fd fc9f 	bl	80046d8 <VL53L0X_WrByte>
 8006d9a:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f7ff ff6a 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006da2:	ea48 0000 	orr.w	r0, r8, r0
 8006da6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006da8:	aa06      	add	r2, sp, #24
 8006daa:	2190      	movs	r1, #144	; 0x90
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fd fc6d 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006db2:	b26d      	sxtb	r5, r5

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006db4:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006db6:	4328      	orrs	r0, r5
 8006db8:	fa4f f880 	sxtb.w	r8, r0
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006dbc:	2224      	movs	r2, #36	; 0x24
 8006dbe:	2194      	movs	r1, #148	; 0x94
 8006dc0:	4620      	mov	r0, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006dc2:	f3c3 2a06 	ubfx	sl, r3, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006dc6:	f3c3 39c0 	ubfx	r9, r3, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006dca:	f7fd fc85 	bl	80046d8 <VL53L0X_WrByte>
 8006dce:	ea48 0000 	orr.w	r0, r8, r0
 8006dd2:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f7ff ff4d 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006ddc:	ea48 0000 	orr.w	r0, r8, r0
 8006de0:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006de2:	aa06      	add	r2, sp, #24
 8006de4:	2190      	movs	r1, #144	; 0x90
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7fd fc50 	bl	800468c <VL53L0X_RdDWord>
 8006dec:	9b06      	ldr	r3, [sp, #24]
 8006dee:	4328      	orrs	r0, r5
 8006df0:	ba1b      	rev	r3, r3
 8006df2:	b245      	sxtb	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006df4:	2225      	movs	r2, #37	; 0x25
 8006df6:	2194      	movs	r1, #148	; 0x94
 8006df8:	4620      	mov	r0, r4
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006dfa:	9309      	str	r3, [sp, #36]	; 0x24
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006dfc:	f7fd fc6c 	bl	80046d8 <VL53L0X_WrByte>
 8006e00:	4328      	orrs	r0, r5
 8006e02:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff ff36 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006e0a:	4328      	orrs	r0, r5
 8006e0c:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e10:	aa06      	add	r2, sp, #24
 8006e12:	2190      	movs	r1, #144	; 0x90
 8006e14:	4620      	mov	r0, r4
 8006e16:	f7fd fc39 	bl	800468c <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006e1a:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e1c:	ea48 0000 	orr.w	r0, r8, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006e20:	0e1a      	lsrs	r2, r3, #24
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006e22:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e24:	b245      	sxtb	r5, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006e26:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006e2e:	f017 0302 	ands.w	r3, r7, #2
 8006e32:	9302      	str	r3, [sp, #8]
 8006e34:	f000 80db 	beq.w	8006fee <VL53L0X_get_info_from_device+0x332>
 8006e38:	f016 0802 	ands.w	r8, r6, #2
 8006e3c:	f040 80d7 	bne.w	8006fee <VL53L0X_get_info_from_device+0x332>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006e40:	2202      	movs	r2, #2
 8006e42:	2194      	movs	r1, #148	; 0x94
 8006e44:	4620      	mov	r0, r4
 8006e46:	f7fd fc47 	bl	80046d8 <VL53L0X_WrByte>
 8006e4a:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff ff12 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	4318      	orrs	r0, r3
 8006e56:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006e58:	f10d 0216 	add.w	r2, sp, #22
 8006e5c:	2190      	movs	r1, #144	; 0x90
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f7fd fbab 	bl	80045ba <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e64:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006e66:	227b      	movs	r2, #123	; 0x7b
 8006e68:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006e6a:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f7fd fc33 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006e72:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006e74:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7ff fefd 	bl	8006c76 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006e7c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e7e:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006e80:	f10d 0217 	add.w	r2, sp, #23
 8006e84:	2190      	movs	r1, #144	; 0x90
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7fd fb97 	bl	80045ba <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e8c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006e8e:	4328      	orrs	r0, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006e90:	2277      	movs	r2, #119	; 0x77
 8006e92:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006e94:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006e96:	4620      	mov	r0, r4
 8006e98:	f7fd fc1e 	bl	80046d8 <VL53L0X_WrByte>
 8006e9c:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	f7ff fee9 	bl	8006c76 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006ea4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ea6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ea8:	aa06      	add	r2, sp, #24
 8006eaa:	2190      	movs	r1, #144	; 0x90
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7fd fbed 	bl	800468c <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	0e5a      	lsrs	r2, r3, #25
 8006eb6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006eba:	f3c3 4286 	ubfx	r2, r3, #18, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ebe:	b26d      	sxtb	r5, r5
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006ec0:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006ec4:	f3c3 22c6 	ubfx	r2, r3, #11, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ec8:	4328      	orrs	r0, r5
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006eca:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006ece:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	f003 0378 	and.w	r3, r3, #120	; 0x78
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ed8:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006eda:	2194      	movs	r1, #148	; 0x94
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006edc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006ee4:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006ee8:	f7fd fbf6 	bl	80046d8 <VL53L0X_WrByte>
 8006eec:	4328      	orrs	r0, r5
 8006eee:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff fec0 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006ef6:	4328      	orrs	r0, r5
 8006ef8:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006efa:	aa06      	add	r2, sp, #24
 8006efc:	2190      	movs	r1, #144	; 0x90
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7fd fbc4 	bl	800468c <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006f04:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8006f06:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006f0a:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8006f0e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006f12:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8006f16:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006f1a:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8006f1e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006f22:	f3c3 2206 	ubfx	r2, r3, #8, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f26:	4328      	orrs	r0, r5
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006f28:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006f2c:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006f30:	019b      	lsls	r3, r3, #6
 8006f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f36:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006f38:	2194      	movs	r1, #148	; 0x94
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006f3a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006f3e:	4620      	mov	r0, r4
 8006f40:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006f42:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006f46:	f7fd fbc7 	bl	80046d8 <VL53L0X_WrByte>
 8006f4a:	4328      	orrs	r0, r5
 8006f4c:	b245      	sxtb	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff fe91 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006f54:	4328      	orrs	r0, r5
 8006f56:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f58:	aa06      	add	r2, sp, #24
 8006f5a:	2190      	movs	r1, #144	; 0x90
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7fd fb95 	bl	800468c <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006f62:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8006f64:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8006f68:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8006f6c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006f70:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8006f74:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006f78:	f3c3 3206 	ubfx	r2, r3, #12, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f7c:	4328      	orrs	r0, r5
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006f7e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006f82:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	f003 037c 	and.w	r3, r3, #124	; 0x7c
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f8c:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006f8e:	2194      	movs	r1, #148	; 0x94
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006f90:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006f94:	4620      	mov	r0, r4
 8006f96:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006f98:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006f9c:	f7fd fb9c 	bl	80046d8 <VL53L0X_WrByte>
 8006fa0:	4328      	orrs	r0, r5
 8006fa2:	b245      	sxtb	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7ff fe66 	bl	8006c76 <VL53L0X_device_read_strobe>
 8006faa:	4328      	orrs	r0, r5
 8006fac:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fae:	aa06      	add	r2, sp, #24
 8006fb0:	2190      	movs	r1, #144	; 0x90
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f7fd fb6a 	bl	800468c <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006fb8:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8006fba:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 8006fbe:	f88d 803e 	strb.w	r8, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 8006fc2:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 8006fc6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006fca:	f3c3 52c6 	ubfx	r2, r3, #23, #7
 8006fce:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006fd2:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fd6:	4328      	orrs	r0, r5
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006fd8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006fdc:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006fe0:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006fe4:	b245      	sxtb	r5, r0
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006fe6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006fea:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8006fee:	f017 0304 	ands.w	r3, r7, #4
 8006ff2:	9301      	str	r3, [sp, #4]
 8006ff4:	f000 80f8 	beq.w	80071e8 <VL53L0X_get_info_from_device+0x52c>
 8006ff8:	0773      	lsls	r3, r6, #29
 8006ffa:	f100 80f5 	bmi.w	80071e8 <VL53L0X_get_info_from_device+0x52c>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006ffe:	227b      	movs	r2, #123	; 0x7b
 8007000:	2194      	movs	r1, #148	; 0x94
 8007002:	4620      	mov	r0, r4
 8007004:	f7fd fb68 	bl	80046d8 <VL53L0X_WrByte>
 8007008:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800700a:	4620      	mov	r0, r4
 800700c:	f7ff fe33 	bl	8006c76 <VL53L0X_device_read_strobe>
 8007010:	ea48 0000 	orr.w	r0, r8, r0
 8007014:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007016:	aa07      	add	r2, sp, #28
 8007018:	2190      	movs	r1, #144	; 0x90
 800701a:	4620      	mov	r0, r4
 800701c:	f7fd fb36 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8007020:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8007022:	4328      	orrs	r0, r5
 8007024:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007026:	227c      	movs	r2, #124	; 0x7c
 8007028:	2194      	movs	r1, #148	; 0x94
 800702a:	4620      	mov	r0, r4
 800702c:	f7fd fb54 	bl	80046d8 <VL53L0X_WrByte>
 8007030:	4328      	orrs	r0, r5
 8007032:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff fe1d 	bl	8006c76 <VL53L0X_device_read_strobe>
 800703c:	ea48 0000 	orr.w	r0, r8, r0
 8007040:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007044:	aa08      	add	r2, sp, #32
 8007046:	2190      	movs	r1, #144	; 0x90
 8007048:	4620      	mov	r0, r4
 800704a:	f7fd fb1f 	bl	800468c <VL53L0X_RdDWord>
 800704e:	ea48 0000 	orr.w	r0, r8, r0
 8007052:	fa4f f880 	sxtb.w	r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8007056:	2273      	movs	r2, #115	; 0x73
 8007058:	2194      	movs	r1, #148	; 0x94
 800705a:	4620      	mov	r0, r4
 800705c:	f7fd fb3c 	bl	80046d8 <VL53L0X_WrByte>
 8007060:	ea48 0000 	orr.w	r0, r8, r0
 8007064:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8007066:	4620      	mov	r0, r4
 8007068:	f7ff fe05 	bl	8006c76 <VL53L0X_device_read_strobe>
 800706c:	4328      	orrs	r0, r5
 800706e:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007072:	aa06      	add	r2, sp, #24
 8007074:	2190      	movs	r1, #144	; 0x90
 8007076:	4620      	mov	r0, r4
 8007078:	f7fd fb08 	bl	800468c <VL53L0X_RdDWord>

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800707c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800707e:	ea48 0000 	orr.w	r0, r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007082:	2274      	movs	r2, #116	; 0x74
 8007084:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007086:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007088:	4620      	mov	r0, r4
				0x0000000ff) << 8;
 800708a:	ea4f 2803 	mov.w	r8, r3, lsl #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800708e:	f7fd fb23 	bl	80046d8 <VL53L0X_WrByte>
 8007092:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8007094:	4620      	mov	r0, r4
 8007096:	f7ff fdee 	bl	8006c76 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800709a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800709c:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800709e:	aa06      	add	r2, sp, #24
 80070a0:	2190      	movs	r1, #144	; 0x90
 80070a2:	4620      	mov	r0, r4
 80070a4:	f7fd faf2 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80070a8:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80070aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070ae:	4328      	orrs	r0, r5
 80070b0:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80070b2:	2275      	movs	r2, #117	; 0x75
 80070b4:	2194      	movs	r1, #148	; 0x94
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80070b6:	fa1f f888 	uxth.w	r8, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80070ba:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80070bc:	ea43 0808 	orr.w	r8, r3, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80070c0:	f7fd fb0a 	bl	80046d8 <VL53L0X_WrByte>
 80070c4:	4328      	orrs	r0, r5
 80070c6:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80070c8:	4620      	mov	r0, r4
 80070ca:	f7ff fdd4 	bl	8006c76 <VL53L0X_device_read_strobe>
 80070ce:	4328      	orrs	r0, r5
 80070d0:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070d2:	aa06      	add	r2, sp, #24
 80070d4:	2190      	movs	r1, #144	; 0x90
 80070d6:	4620      	mov	r0, r4
 80070d8:	f7fd fad8 	bl	800468c <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80070dc:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070de:	4328      	orrs	r0, r5
							<< 8;
 80070e0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80070e2:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80070e4:	2276      	movs	r2, #118	; 0x76
 80070e6:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070e8:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80070ea:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80070ec:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80070ee:	f7fd faf3 	bl	80046d8 <VL53L0X_WrByte>
 80070f2:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7ff fdbe 	bl	8006c76 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80070fa:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80070fc:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070fe:	aa06      	add	r2, sp, #24
 8007100:	2190      	movs	r1, #144	; 0x90
 8007102:	4620      	mov	r0, r4
 8007104:	f7fd fac2 	bl	800468c <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8007108:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800710a:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800710e:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007110:	4328      	orrs	r0, r5
 8007112:	b245      	sxtb	r5, r0
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007114:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007116:	2200      	movs	r2, #0
 8007118:	2181      	movs	r1, #129	; 0x81
 800711a:	4620      	mov	r0, r4
 800711c:	9303      	str	r3, [sp, #12]
 800711e:	f7fd fadb 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007122:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007124:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007126:	21ff      	movs	r1, #255	; 0xff
 8007128:	4620      	mov	r0, r4
 800712a:	f7fd fad5 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800712e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007130:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007132:	f10d 0215 	add.w	r2, sp, #21
 8007136:	2183      	movs	r1, #131	; 0x83
 8007138:	4620      	mov	r0, r4
 800713a:	f7fd fa3e 	bl	80045ba <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800713e:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007142:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007144:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007146:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800714a:	2183      	movs	r1, #131	; 0x83
 800714c:	4620      	mov	r0, r4
 800714e:	f7fd fac3 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007152:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007154:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007156:	2201      	movs	r2, #1
 8007158:	21ff      	movs	r1, #255	; 0xff
 800715a:	4620      	mov	r0, r4
 800715c:	f7fd fabc 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007160:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007162:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007164:	2201      	movs	r2, #1
 8007166:	2100      	movs	r1, #0
 8007168:	4620      	mov	r0, r4
 800716a:	f7fd fab5 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800716e:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007170:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007172:	2200      	movs	r2, #0
 8007174:	21ff      	movs	r1, #255	; 0xff
 8007176:	4620      	mov	r0, r4
 8007178:	f7fd faae 	bl	80046d8 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800717c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800717e:	4328      	orrs	r0, r5
 8007180:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007182:	2200      	movs	r2, #0
 8007184:	2180      	movs	r1, #128	; 0x80
 8007186:	4620      	mov	r0, r4
 8007188:	f7fd faa6 	bl	80046d8 <VL53L0X_WrByte>
 800718c:	4328      	orrs	r0, r5
 800718e:	b245      	sxtb	r5, r0
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	bb05      	cbnz	r5, 80071d6 <VL53L0X_get_info_from_device+0x51a>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007194:	f1bb 0f00 	cmp.w	fp, #0
 8007198:	d12a      	bne.n	80071f0 <VL53L0X_get_info_from_device+0x534>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 800719a:	9a02      	ldr	r2, [sp, #8]
 800719c:	2a00      	cmp	r2, #0
 800719e:	d139      	bne.n	8007214 <VL53L0X_get_info_from_device+0x558>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 80071a0:	9a01      	ldr	r2, [sp, #4]
 80071a2:	b1aa      	cbz	r2, 80071d0 <VL53L0X_get_info_from_device+0x514>
 80071a4:	0772      	lsls	r2, r6, #29
 80071a6:	d413      	bmi.n	80071d0 <VL53L0X_get_info_from_device+0x514>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071a8:	9a07      	ldr	r2, [sp, #28]
 80071aa:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071ae:	9a08      	ldr	r2, [sp, #32]
 80071b0:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80071b4:	ea4f 2248 	mov.w	r2, r8, lsl #9
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071b8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 80071bc:	b13b      	cbz	r3, 80071ce <VL53L0X_get_info_from_device+0x512>
					OffsetFixed1104_mm =
 80071be:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80071c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071c6:	4353      	muls	r3, r2
 80071c8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 80071ca:	425b      	negs	r3, r3
 80071cc:	b21b      	sxth	r3, r3
			}

			PALDevDataSet(Dev,
 80071ce:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80071d0:	433e      	orrs	r6, r7
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80071d2:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80071d6:	4628      	mov	r0, r5
 80071d8:	b011      	add	sp, #68	; 0x44
 80071da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 80071de:	46d9      	mov	r9, fp
	uint8_t ReferenceSpadCount = 0;
 80071e0:	46da      	mov	sl, fp
 80071e2:	e624      	b.n	8006e2e <VL53L0X_get_info_from_device+0x172>
 80071e4:	46ca      	mov	sl, r9
 80071e6:	e622      	b.n	8006e2e <VL53L0X_get_info_from_device+0x172>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80071e8:	f04f 0800 	mov.w	r8, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 80071ec:	4643      	mov	r3, r8
 80071ee:	e792      	b.n	8007116 <VL53L0X_get_info_from_device+0x45a>
		if (((option & 1) == 1) &&
 80071f0:	07f0      	lsls	r0, r6, #31
 80071f2:	d4d2      	bmi.n	800719a <VL53L0X_get_info_from_device+0x4de>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071f4:	f884 a113 	strb.w	sl, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80071f8:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80071fc:	a909      	add	r1, sp, #36	; 0x24
 80071fe:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8007202:	f504 7098 	add.w	r0, r4, #304	; 0x130
					NvmRefGoodSpadMap[i];
 8007206:	f811 cb01 	ldrb.w	ip, [r1], #1
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800720a:	f802 cb01 	strb.w	ip, [r2], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800720e:	4290      	cmp	r0, r2
 8007210:	d1f9      	bne.n	8007206 <VL53L0X_get_info_from_device+0x54a>
 8007212:	e7c2      	b.n	800719a <VL53L0X_get_info_from_device+0x4de>
		if (((option & 2) == 2) &&
 8007214:	07b1      	lsls	r1, r6, #30
 8007216:	d4c3      	bmi.n	80071a0 <VL53L0X_get_info_from_device+0x4e4>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007218:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800721c:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007220:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8007224:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007228:	a90b      	add	r1, sp, #44	; 0x2c
 800722a:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 800722e:	9302      	str	r3, [sp, #8]
 8007230:	f01c fbc2 	bl	80239b8 <strcpy>
 8007234:	9b02      	ldr	r3, [sp, #8]
 8007236:	e7b3      	b.n	80071a0 <VL53L0X_get_info_from_device+0x4e4>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007238:	464d      	mov	r5, r9
 800723a:	e7cc      	b.n	80071d6 <VL53L0X_get_info_from_device+0x51a>

0800723c <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 800723c:	b150      	cbz	r0, 8007254 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 800723e:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007240:	2300      	movs	r3, #0
 8007242:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8007246:	b29a      	uxth	r2, r3
 8007248:	f103 0301 	add.w	r3, r3, #1
 800724c:	d103      	bne.n	8007256 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 800724e:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8007252:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8007254:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8007256:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 8007258:	e7f3      	b.n	8007242 <VL53L0X_encode_timeout+0x6>

0800725a <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800725a:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800725c:	0a00      	lsrs	r0, r0, #8
 800725e:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8007262:	3001      	adds	r0, #1
 8007264:	4770      	bx	lr
	...

08007268 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <VL53L0X_calc_timeout_mclks+0x24>)
 800726a:	435a      	muls	r2, r3

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800726c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007270:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007278:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800727c:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007280:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 8007284:	fbb0 f0f2 	udiv	r0, r0, r2
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	003a2f00 	.word	0x003a2f00

08007290 <set_sequence_step_timeout.part.0>:

	return Status;
}


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 8007290:	b5f0      	push	{r4, r5, r6, r7, lr}
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007292:	2903      	cmp	r1, #3
VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
 8007294:	b085      	sub	sp, #20
 8007296:	4605      	mov	r5, r0
 8007298:	4616      	mov	r6, r2
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800729a:	d11f      	bne.n	80072dc <set_sequence_step_timeout.part.0+0x4c>

			if (Status == VL53L0X_ERROR_NONE) {
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800729c:	f10d 0205 	add.w	r2, sp, #5
 80072a0:	2100      	movs	r1, #0
 80072a2:	f7fe fbeb 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80072a6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80072aa:	4631      	mov	r1, r6
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80072ac:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 80072ae:	4628      	mov	r0, r5
 80072b0:	f7ff ffda 	bl	8007268 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80072b4:	b280      	uxth	r0, r0
 80072b6:	f7ff ffc1 	bl	800723c <VL53L0X_encode_timeout>
 80072ba:	4602      	mov	r2, r0
 80072bc:	f8ad 0006 	strh.w	r0, [sp, #6]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80072c0:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80072c4:	b93c      	cbnz	r4, 80072d6 <set_sequence_step_timeout.part.0+0x46>
				Status = VL53L0X_WrWord(Dev,
 80072c6:	2151      	movs	r1, #81	; 0x51
 80072c8:	4628      	mov	r0, r5
 80072ca:	f7fd fa15 	bl	80046f8 <VL53L0X_WrWord>
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80072ce:	4604      	mov	r4, r0
 80072d0:	b908      	cbnz	r0, 80072d6 <set_sequence_step_timeout.part.0+0x46>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80072d2:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 80072d6:	4620      	mov	r0, r4
 80072d8:	b005      	add	sp, #20
 80072da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80072dc:	2904      	cmp	r1, #4
 80072de:	d13b      	bne.n	8007358 <set_sequence_step_timeout.part.0+0xc8>
			VL53L0X_GetSequenceStepEnables(Dev,
 80072e0:	a902      	add	r1, sp, #8
 80072e2:	f7fe fc1f 	bl	8005b24 <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 80072e6:	f89d 700b 	ldrb.w	r7, [sp, #11]
 80072ea:	b1b7      	cbz	r7, 800731a <set_sequence_step_timeout.part.0+0x8a>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80072ec:	f10d 0205 	add.w	r2, sp, #5
 80072f0:	2100      	movs	r1, #0
 80072f2:	4628      	mov	r0, r5
 80072f4:	f7fe fbc2 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 80072f8:	4604      	mov	r4, r0
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d1eb      	bne.n	80072d6 <set_sequence_step_timeout.part.0+0x46>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80072fe:	f10d 0206 	add.w	r2, sp, #6
 8007302:	2151      	movs	r1, #81	; 0x51
 8007304:	4628      	mov	r0, r5
 8007306:	f7fd f9a1 	bl	800464c <VL53L0X_RdWord>
 800730a:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 800730c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007310:	f7ff ffa3 	bl	800725a <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 8007314:	b287      	uxth	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8007316:	2c00      	cmp	r4, #0
 8007318:	d1dd      	bne.n	80072d6 <set_sequence_step_timeout.part.0+0x46>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800731a:	f10d 0205 	add.w	r2, sp, #5
 800731e:	2101      	movs	r1, #1
 8007320:	4628      	mov	r0, r5
 8007322:	f7fe fbab 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8007326:	4604      	mov	r4, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	d1d4      	bne.n	80072d6 <set_sequence_step_timeout.part.0+0x46>
					VL53L0X_calc_timeout_mclks(Dev,
 800732c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	f7ff ff98 	bl	8007268 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007338:	fa17 f080 	uxtah	r0, r7, r0
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800733c:	b280      	uxth	r0, r0
 800733e:	f7ff ff7d 	bl	800723c <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007342:	2171      	movs	r1, #113	; 0x71
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007344:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007346:	4628      	mov	r0, r5
 8007348:	f7fd f9d6 	bl	80046f8 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 800734c:	4604      	mov	r4, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d1c1      	bne.n	80072d6 <set_sequence_step_timeout.part.0+0x46>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007352:	f8c5 60dc 	str.w	r6, [r5, #220]	; 0xdc
 8007356:	e7be      	b.n	80072d6 <set_sequence_step_timeout.part.0+0x46>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007358:	f06f 0403 	mvn.w	r4, #3
 800735c:	e7bb      	b.n	80072d6 <set_sequence_step_timeout.part.0+0x46>
	...

08007360 <VL53L0X_calc_timeout_us>:
{
 8007360:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007362:	4b08      	ldr	r3, [pc, #32]	; (8007384 <VL53L0X_calc_timeout_us+0x24>)
 8007364:	435a      	muls	r2, r3
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007366:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 800736a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		+ (macro_period_ns / 2)) / 1000;
 800736e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007372:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 8007376:	fbb2 f2f4 	udiv	r2, r2, r4
 800737a:	fb01 2203 	mla	r2, r1, r3, r2
}
 800737e:	fbb2 f0f0 	udiv	r0, r2, r0
 8007382:	bd10      	pop	{r4, pc}
 8007384:	003a2f00 	.word	0x003a2f00

08007388 <get_sequence_step_timeout>:
{
 8007388:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800738c:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 800738e:	f04f 0500 	mov.w	r5, #0
{
 8007392:	4607      	mov	r7, r0
 8007394:	4616      	mov	r6, r2
	uint8_t EncodedTimeOutByte = 0;
 8007396:	f88d 5003 	strb.w	r5, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 800739a:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800739e:	d81c      	bhi.n	80073da <get_sequence_step_timeout+0x52>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073a0:	f10d 0202 	add.w	r2, sp, #2
 80073a4:	4629      	mov	r1, r5
 80073a6:	f7fe fb69 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80073aa:	4604      	mov	r4, r0
 80073ac:	b930      	cbnz	r0, 80073bc <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 80073ae:	f10d 0203 	add.w	r2, sp, #3
 80073b2:	2146      	movs	r1, #70	; 0x46
 80073b4:	4638      	mov	r0, r7
 80073b6:	f7fd f900 	bl	80045ba <VL53L0X_RdByte>
 80073ba:	4604      	mov	r4, r0
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80073bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80073c0:	f7ff ff4b 	bl	800725a <VL53L0X_decode_timeout>
			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80073c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80073c8:	b281      	uxth	r1, r0
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80073ca:	4638      	mov	r0, r7
 80073cc:	f7ff ffc8 	bl	8007360 <VL53L0X_calc_timeout_us>
	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80073d0:	6030      	str	r0, [r6, #0]
}
 80073d2:	4620      	mov	r0, r4
 80073d4:	b004      	add	sp, #16
 80073d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80073da:	2903      	cmp	r1, #3
 80073dc:	d118      	bne.n	8007410 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073de:	f10d 0202 	add.w	r2, sp, #2
 80073e2:	4629      	mov	r1, r5
 80073e4:	f7fe fb4a 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80073e8:	4604      	mov	r4, r0
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d149      	bne.n	8007482 <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073ee:	4601      	mov	r1, r0
 80073f0:	f10d 0202 	add.w	r2, sp, #2
 80073f4:	4638      	mov	r0, r7
 80073f6:	f7fe fb41 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80073fa:	4604      	mov	r4, r0
 80073fc:	b928      	cbnz	r0, 800740a <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
 80073fe:	aa01      	add	r2, sp, #4
 8007400:	2151      	movs	r1, #81	; 0x51
 8007402:	4638      	mov	r0, r7
 8007404:	f7fd f922 	bl	800464c <VL53L0X_RdWord>
 8007408:	4604      	mov	r4, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800740a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800740e:	e7d7      	b.n	80073c0 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007410:	2904      	cmp	r1, #4
 8007412:	d138      	bne.n	8007486 <get_sequence_step_timeout+0xfe>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007414:	a902      	add	r1, sp, #8
 8007416:	f7fe fb85 	bl	8005b24 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800741a:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800741e:	b1a8      	cbz	r0, 800744c <get_sequence_step_timeout+0xc4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007420:	f10d 0202 	add.w	r2, sp, #2
 8007424:	4629      	mov	r1, r5
 8007426:	4638      	mov	r0, r7
 8007428:	f7fe fb28 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
 800742c:	4604      	mov	r4, r0
			if (Status == VL53L0X_ERROR_NONE) {
 800742e:	b958      	cbnz	r0, 8007448 <get_sequence_step_timeout+0xc0>
				Status = VL53L0X_RdWord(Dev,
 8007430:	aa01      	add	r2, sp, #4
 8007432:	2151      	movs	r1, #81	; 0x51
 8007434:	4638      	mov	r0, r7
 8007436:	f7fd f909 	bl	800464c <VL53L0X_RdWord>
 800743a:	4604      	mov	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800743c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8007440:	f7ff ff0b 	bl	800725a <VL53L0X_decode_timeout>
 8007444:	b285      	uxth	r5, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8007446:	b114      	cbz	r4, 800744e <get_sequence_step_timeout+0xc6>
	uint16_t FinalRangeTimeOutMClks = 0;
 8007448:	2000      	movs	r0, #0
 800744a:	e015      	b.n	8007478 <get_sequence_step_timeout+0xf0>
		PreRangeTimeOutMClks = 0;
 800744c:	4605      	mov	r5, r0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800744e:	f10d 0202 	add.w	r2, sp, #2
 8007452:	2101      	movs	r1, #1
 8007454:	4638      	mov	r0, r7
 8007456:	f7fe fb11 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 800745a:	4604      	mov	r4, r0
 800745c:	2800      	cmp	r0, #0
 800745e:	d1f3      	bne.n	8007448 <get_sequence_step_timeout+0xc0>
			Status = VL53L0X_RdWord(Dev,
 8007460:	f10d 0206 	add.w	r2, sp, #6
 8007464:	2171      	movs	r1, #113	; 0x71
 8007466:	4638      	mov	r0, r7
 8007468:	f7fd f8f0 	bl	800464c <VL53L0X_RdWord>
 800746c:	4604      	mov	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800746e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007472:	f7ff fef2 	bl	800725a <VL53L0X_decode_timeout>
 8007476:	b280      	uxth	r0, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007478:	1b45      	subs	r5, r0, r5
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800747a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800747e:	b2a9      	uxth	r1, r5
 8007480:	e7a3      	b.n	80073ca <get_sequence_step_timeout+0x42>
	uint32_t TimeoutMicroSeconds = 0;
 8007482:	4628      	mov	r0, r5
 8007484:	e7a4      	b.n	80073d0 <get_sequence_step_timeout+0x48>
 8007486:	4628      	mov	r0, r5
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007488:	462c      	mov	r4, r5
 800748a:	e7a1      	b.n	80073d0 <get_sequence_step_timeout+0x48>

0800748c <set_sequence_step_timeout>:
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800748c:	2902      	cmp	r1, #2
{
 800748e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007490:	4604      	mov	r4, r0
 8007492:	4615      	mov	r5, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007494:	d81b      	bhi.n	80074ce <set_sequence_step_timeout+0x42>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007496:	f10d 0207 	add.w	r2, sp, #7
 800749a:	2100      	movs	r1, #0
 800749c:	f7fe faee 	bl	8005a7c <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80074a0:	b998      	cbnz	r0, 80074ca <set_sequence_step_timeout+0x3e>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80074a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80074a6:	4629      	mov	r1, r5
 80074a8:	4620      	mov	r0, r4
 80074aa:	f7ff fedd 	bl	8007268 <VL53L0X_calc_timeout_mclks>
			if (MsrcRangeTimeOutMClks > 256)
 80074ae:	b283      	uxth	r3, r0
 80074b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut =
 80074b4:	bf9a      	itte	ls
 80074b6:	f100 32ff 	addls.w	r2, r0, #4294967295
 80074ba:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 80074bc:	22ff      	movhi	r2, #255	; 0xff
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80074be:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
			Status = VL53L0X_WrByte(Dev,
 80074c2:	2146      	movs	r1, #70	; 0x46
 80074c4:	4620      	mov	r0, r4
 80074c6:	f7fd f907 	bl	80046d8 <VL53L0X_WrByte>
}
 80074ca:	b003      	add	sp, #12
 80074cc:	bd30      	pop	{r4, r5, pc}
 80074ce:	f7ff fedf 	bl	8007290 <set_sequence_step_timeout.part.0>
 80074d2:	e7fa      	b.n	80074ca <set_sequence_step_timeout+0x3e>

080074d4 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	b085      	sub	sp, #20
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80074da:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80074dc:	f012 0b01 	ands.w	fp, r2, #1
{
 80074e0:	4680      	mov	r8, r0
 80074e2:	468a      	mov	sl, r1
 80074e4:	4691      	mov	r9, r2
	uint8_t PhaseCalInt = 0;
 80074e6:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80074ea:	d104      	bne.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x22>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80074ec:	b931      	cbnz	r1, 80074fc <VL53L0X_set_vcsel_pulse_period+0x28>
 80074ee:	f1a2 030c 	sub.w	r3, r2, #12
 80074f2:	2b06      	cmp	r3, #6
 80074f4:	d957      	bls.n	80075a6 <VL53L0X_set_vcsel_pulse_period+0xd2>
 80074f6:	f06f 0003 	mvn.w	r0, #3
 80074fa:	e061      	b.n	80075c0 <VL53L0X_set_vcsel_pulse_period+0xec>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80074fc:	2901      	cmp	r1, #1
 80074fe:	d01e      	beq.n	800753e <VL53L0X_set_vcsel_pulse_period+0x6a>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8007500:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8007504:	3c01      	subs	r4, #1
 8007506:	b2e4      	uxtb	r4, r4
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007508:	f1ba 0f00 	cmp.w	sl, #0
 800750c:	f000 80b5 	beq.w	800767a <VL53L0X_set_vcsel_pulse_period+0x1a6>
 8007510:	f1ba 0f01 	cmp.w	sl, #1
 8007514:	d1ef      	bne.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x22>
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007516:	aa01      	add	r2, sp, #4
 8007518:	2104      	movs	r1, #4
 800751a:	4640      	mov	r0, r8
 800751c:	f7ff ff34 	bl	8007388 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007520:	b950      	cbnz	r0, 8007538 <VL53L0X_set_vcsel_pulse_period+0x64>
				Status = VL53L0X_WrByte(Dev,
 8007522:	4622      	mov	r2, r4
 8007524:	2170      	movs	r1, #112	; 0x70
 8007526:	4640      	mov	r0, r8
 8007528:	f7fd f8d6 	bl	80046d8 <VL53L0X_WrByte>
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800752c:	b920      	cbnz	r0, 8007538 <VL53L0X_set_vcsel_pulse_period+0x64>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800752e:	9a01      	ldr	r2, [sp, #4]
 8007530:	2104      	movs	r1, #4
 8007532:	4640      	mov	r0, r8
 8007534:	f7ff feac 	bl	8007290 <set_sequence_step_timeout.part.0>
				Status = set_sequence_step_timeout(Dev,
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007538:	f888 90e0 	strb.w	r9, [r8, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800753c:	e0bc      	b.n	80076b8 <VL53L0X_set_vcsel_pulse_period+0x1e4>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800753e:	f1a2 0308 	sub.w	r3, r2, #8
 8007542:	2b06      	cmp	r3, #6
 8007544:	d8d7      	bhi.n	80074f6 <VL53L0X_set_vcsel_pulse_period+0x22>
		if (VCSELPulsePeriodPCLK == 8) {
 8007546:	2a08      	cmp	r2, #8
 8007548:	d149      	bne.n	80075de <VL53L0X_set_vcsel_pulse_period+0x10a>
			Status = VL53L0X_WrByte(Dev,
 800754a:	2210      	movs	r2, #16
 800754c:	2148      	movs	r1, #72	; 0x48
 800754e:	f7fd f8c3 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007552:	464a      	mov	r2, r9
 8007554:	2147      	movs	r1, #71	; 0x47
 8007556:	4640      	mov	r0, r8
 8007558:	f7fd f8be 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800755c:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 800755e:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007560:	2132      	movs	r1, #50	; 0x32
 8007562:	4640      	mov	r0, r8
 8007564:	f7fd f8b8 	bl	80046d8 <VL53L0X_WrByte>
 8007568:	4338      	orrs	r0, r7
 800756a:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800756c:	220c      	movs	r2, #12
 800756e:	2130      	movs	r1, #48	; 0x30
 8007570:	4640      	mov	r0, r8
 8007572:	f7fd f8b1 	bl	80046d8 <VL53L0X_WrByte>
 8007576:	4338      	orrs	r0, r7
 8007578:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800757a:	4652      	mov	r2, sl
 800757c:	21ff      	movs	r1, #255	; 0xff
 800757e:	4640      	mov	r0, r8
 8007580:	f7fd f8aa 	bl	80046d8 <VL53L0X_WrByte>
 8007584:	4330      	orrs	r0, r6
 8007586:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 8007588:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 800758a:	2130      	movs	r1, #48	; 0x30
 800758c:	4640      	mov	r0, r8
 800758e:	f7fd f8a3 	bl	80046d8 <VL53L0X_WrByte>
 8007592:	4328      	orrs	r0, r5
 8007594:	b244      	sxtb	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007596:	465a      	mov	r2, fp
 8007598:	21ff      	movs	r1, #255	; 0xff
 800759a:	4640      	mov	r0, r8
 800759c:	f7fd f89c 	bl	80046d8 <VL53L0X_WrByte>
 80075a0:	4320      	orrs	r0, r4
 80075a2:	b240      	sxtb	r0, r0
 80075a4:	e00a      	b.n	80075bc <VL53L0X_set_vcsel_pulse_period+0xe8>
		if (VCSELPulsePeriodPCLK == 12) {
 80075a6:	2a0c      	cmp	r2, #12
 80075a8:	d10d      	bne.n	80075c6 <VL53L0X_set_vcsel_pulse_period+0xf2>
			Status = VL53L0X_WrByte(Dev,
 80075aa:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
 80075ac:	2157      	movs	r1, #87	; 0x57
 80075ae:	f7fd f893 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80075b2:	2208      	movs	r2, #8
 80075b4:	2156      	movs	r1, #86	; 0x56
 80075b6:	4640      	mov	r0, r8
 80075b8:	f7fd f88e 	bl	80046d8 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 80075bc:	2800      	cmp	r0, #0
 80075be:	d09f      	beq.n	8007500 <VL53L0X_set_vcsel_pulse_period+0x2c>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 80075c0:	b005      	add	sp, #20
 80075c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 80075c6:	2a0e      	cmp	r2, #14
 80075c8:	d101      	bne.n	80075ce <VL53L0X_set_vcsel_pulse_period+0xfa>
			Status = VL53L0X_WrByte(Dev,
 80075ca:	2230      	movs	r2, #48	; 0x30
 80075cc:	e7ee      	b.n	80075ac <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 16) {
 80075ce:	2a10      	cmp	r2, #16
 80075d0:	d101      	bne.n	80075d6 <VL53L0X_set_vcsel_pulse_period+0x102>
			Status = VL53L0X_WrByte(Dev,
 80075d2:	2240      	movs	r2, #64	; 0x40
 80075d4:	e7ea      	b.n	80075ac <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 18) {
 80075d6:	2a12      	cmp	r2, #18
 80075d8:	d192      	bne.n	8007500 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 80075da:	2250      	movs	r2, #80	; 0x50
 80075dc:	e7e6      	b.n	80075ac <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80075de:	2a0a      	cmp	r2, #10
 80075e0:	d120      	bne.n	8007624 <VL53L0X_set_vcsel_pulse_period+0x150>
			Status = VL53L0X_WrByte(Dev,
 80075e2:	2228      	movs	r2, #40	; 0x28
 80075e4:	2148      	movs	r1, #72	; 0x48
 80075e6:	f7fd f877 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80075ea:	2208      	movs	r2, #8
 80075ec:	2147      	movs	r1, #71	; 0x47
 80075ee:	4640      	mov	r0, r8
 80075f0:	f7fd f872 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80075f4:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80075f6:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80075f8:	2132      	movs	r1, #50	; 0x32
 80075fa:	4640      	mov	r0, r8
 80075fc:	f7fd f86c 	bl	80046d8 <VL53L0X_WrByte>
 8007600:	4338      	orrs	r0, r7
 8007602:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007604:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8007606:	2130      	movs	r1, #48	; 0x30
 8007608:	4640      	mov	r0, r8
 800760a:	f7fd f865 	bl	80046d8 <VL53L0X_WrByte>
 800760e:	4338      	orrs	r0, r7
 8007610:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007612:	4652      	mov	r2, sl
 8007614:	21ff      	movs	r1, #255	; 0xff
 8007616:	4640      	mov	r0, r8
 8007618:	f7fd f85e 	bl	80046d8 <VL53L0X_WrByte>
 800761c:	4330      	orrs	r0, r6
 800761e:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 8007620:	2220      	movs	r2, #32
 8007622:	e7b2      	b.n	800758a <VL53L0X_set_vcsel_pulse_period+0xb6>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007624:	2a0c      	cmp	r2, #12
 8007626:	d112      	bne.n	800764e <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 8007628:	2238      	movs	r2, #56	; 0x38
 800762a:	2148      	movs	r1, #72	; 0x48
 800762c:	f7fd f854 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8007630:	2208      	movs	r2, #8
 8007632:	2147      	movs	r1, #71	; 0x47
 8007634:	4640      	mov	r0, r8
 8007636:	f7fd f84f 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800763a:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 800763c:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800763e:	2132      	movs	r1, #50	; 0x32
 8007640:	4640      	mov	r0, r8
 8007642:	f7fd f849 	bl	80046d8 <VL53L0X_WrByte>
 8007646:	4338      	orrs	r0, r7
 8007648:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800764a:	2208      	movs	r2, #8
 800764c:	e7db      	b.n	8007606 <VL53L0X_set_vcsel_pulse_period+0x132>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800764e:	2a0e      	cmp	r2, #14
 8007650:	f47f af56 	bne.w	8007500 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 8007654:	2248      	movs	r2, #72	; 0x48
 8007656:	4611      	mov	r1, r2
 8007658:	f7fd f83e 	bl	80046d8 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800765c:	2208      	movs	r2, #8
 800765e:	2147      	movs	r1, #71	; 0x47
 8007660:	4640      	mov	r0, r8
 8007662:	f7fd f839 	bl	80046d8 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8007666:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8007668:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800766a:	2132      	movs	r1, #50	; 0x32
 800766c:	4640      	mov	r0, r8
 800766e:	f7fd f833 	bl	80046d8 <VL53L0X_WrByte>
 8007672:	4338      	orrs	r0, r7
 8007674:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8007676:	2207      	movs	r2, #7
 8007678:	e7c5      	b.n	8007606 <VL53L0X_set_vcsel_pulse_period+0x132>
			Status = get_sequence_step_timeout(Dev,
 800767a:	aa02      	add	r2, sp, #8
 800767c:	2103      	movs	r1, #3
 800767e:	4640      	mov	r0, r8
 8007680:	f7ff fe82 	bl	8007388 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8007684:	b9b0      	cbnz	r0, 80076b4 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = get_sequence_step_timeout(Dev,
 8007686:	aa03      	add	r2, sp, #12
 8007688:	2102      	movs	r1, #2
 800768a:	4640      	mov	r0, r8
 800768c:	f7ff fe7c 	bl	8007388 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8007690:	b980      	cbnz	r0, 80076b4 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = VL53L0X_WrByte(Dev,
 8007692:	4622      	mov	r2, r4
 8007694:	2150      	movs	r1, #80	; 0x50
 8007696:	4640      	mov	r0, r8
 8007698:	f7fd f81e 	bl	80046d8 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 800769c:	b950      	cbnz	r0, 80076b4 <VL53L0X_set_vcsel_pulse_period+0x1e0>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800769e:	9a02      	ldr	r2, [sp, #8]
 80076a0:	2103      	movs	r1, #3
 80076a2:	4640      	mov	r0, r8
 80076a4:	f7ff fdf4 	bl	8007290 <set_sequence_step_timeout.part.0>
			if (Status == VL53L0X_ERROR_NONE)
 80076a8:	b920      	cbnz	r0, 80076b4 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = set_sequence_step_timeout(Dev,
 80076aa:	9a03      	ldr	r2, [sp, #12]
 80076ac:	2102      	movs	r1, #2
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff feec 	bl	800748c <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80076b4:	f888 90e8 	strb.w	r9, [r8, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d181      	bne.n	80075c0 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80076bc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80076c0:	4640      	mov	r0, r8
 80076c2:	f7fe f9d7 	bl	8005a74 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f47f af7a 	bne.w	80075c0 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_perform_phase_calibration(
 80076cc:	4602      	mov	r2, r0
 80076ce:	2301      	movs	r3, #1
 80076d0:	f10d 0103 	add.w	r1, sp, #3
 80076d4:	4640      	mov	r0, r8
 80076d6:	f7ff f915 	bl	8006904 <VL53L0X_perform_phase_calibration>
 80076da:	e771      	b.n	80075c0 <VL53L0X_set_vcsel_pulse_period+0xec>

080076dc <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80076dc:	b513      	push	{r0, r1, r4, lr}
 80076de:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80076e0:	b129      	cbz	r1, 80076ee <VL53L0X_get_vcsel_pulse_period+0x12>
 80076e2:	2901      	cmp	r1, #1
 80076e4:	d010      	beq.n	8007708 <VL53L0X_get_vcsel_pulse_period+0x2c>
 80076e6:	f06f 0003 	mvn.w	r0, #3
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 80076ea:	b002      	add	sp, #8
 80076ec:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 80076ee:	f10d 0207 	add.w	r2, sp, #7
 80076f2:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 80076f4:	f7fc ff61 	bl	80045ba <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1f6      	bne.n	80076ea <VL53L0X_get_vcsel_pulse_period+0xe>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80076fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007700:	3301      	adds	r3, #1
 8007702:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8007704:	7023      	strb	r3, [r4, #0]
 8007706:	e7f0      	b.n	80076ea <VL53L0X_get_vcsel_pulse_period+0xe>
		Status = VL53L0X_RdByte(Dev,
 8007708:	f10d 0207 	add.w	r2, sp, #7
 800770c:	2170      	movs	r1, #112	; 0x70
 800770e:	e7f1      	b.n	80076f4 <VL53L0X_get_vcsel_pulse_period+0x18>

08007710 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007710:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007712:	2300      	movs	r3, #0
{
 8007714:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007716:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800771a:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800771e:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8007722:	4299      	cmp	r1, r3
{
 8007724:	4606      	mov	r6, r0
 8007726:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8007728:	d804      	bhi.n	8007734 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 800772a:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 800772e:	4628      	mov	r0, r5
 8007730:	b005      	add	sp, #20
 8007732:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007734:	a902      	add	r1, sp, #8
 8007736:	f7fe f9f5 	bl	8005b24 <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 800773a:	4605      	mov	r5, r0
 800773c:	2800      	cmp	r0, #0
 800773e:	d1f6      	bne.n	800772e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		SchedulerSequenceSteps.MsrcOn ||
 8007740:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8007744:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007748:	4313      	orrs	r3, r2
 800774a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800774e:	4313      	orrs	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007750:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
		SchedulerSequenceSteps.MsrcOn ||
 8007754:	d01b      	beq.n	800778e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
		Status = get_sequence_step_timeout(Dev,
 8007756:	466a      	mov	r2, sp
 8007758:	2102      	movs	r1, #2
 800775a:	4630      	mov	r0, r6
 800775c:	f7ff fe14 	bl	8007388 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8007760:	2800      	cmp	r0, #0
 8007762:	d13b      	bne.n	80077dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
		if (SchedulerSequenceSteps.TccOn) {
 8007764:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007768:	b12b      	cbz	r3, 8007776 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800776a:	9b00      	ldr	r3, [sp, #0]
 800776c:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8007770:	429c      	cmp	r4, r3
 8007772:	d9da      	bls.n	800772a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8007774:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8007776:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800777a:	b323      	cbz	r3, 80077c6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb6>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800777c:	9b00      	ldr	r3, [sp, #0]
 800777e:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007782:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007786:	ea4f 0243 	mov.w	r2, r3, lsl #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800778a:	d9ce      	bls.n	800772a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 800778c:	1aa4      	subs	r4, r4, r2
	if (SchedulerSequenceSteps.PreRangeOn) {
 800778e:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007792:	b15b      	cbz	r3, 80077ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
		Status = get_sequence_step_timeout(Dev,
 8007794:	aa01      	add	r2, sp, #4
 8007796:	2103      	movs	r1, #3
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff fdf5 	bl	8007388 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	d2c0      	bcs.n	800772a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 80077a8:	b9c0      	cbnz	r0, 80077dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80077aa:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 80077ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0bc      	beq.n	800772e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80077b4:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 80077b8:	2104      	movs	r1, #4
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7ff fd68 	bl	8007290 <set_sequence_step_timeout.part.0>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80077c0:	6177      	str	r7, [r6, #20]
 80077c2:	4605      	mov	r5, r0
 80077c4:	e7b3      	b.n	800772e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 80077c6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0df      	beq.n	800778e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 80077ce:	9b00      	ldr	r3, [sp, #0]
 80077d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80077d4:	429c      	cmp	r4, r3
 80077d6:	d9a8      	bls.n	800772a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 80077d8:	1ae4      	subs	r4, r4, r3
	if (Status != VL53L0X_ERROR_NONE) {
 80077da:	e7d8      	b.n	800778e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
 80077dc:	4605      	mov	r5, r0
 80077de:	e7a6      	b.n	800772e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080077e0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80077e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80077e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 80077e6:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e9cd 2302 	strd	r2, r3, [sp, #8]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80077ee:	f640 3336 	movw	r3, #2870	; 0xb36
 80077f2:	600b      	str	r3, [r1, #0]
{
 80077f4:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80077f6:	a904      	add	r1, sp, #16
{
 80077f8:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80077fa:	f7fe f993 	bl	8005b24 <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80077fe:	4605      	mov	r5, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	d136      	bne.n	8007872 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
 8007804:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8007808:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8007812:	4313      	orrs	r3, r2
 8007814:	d019      	beq.n	800784a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8007816:	aa02      	add	r2, sp, #8
 8007818:	2102      	movs	r1, #2
 800781a:	4630      	mov	r0, r6
 800781c:	f7ff fdb4 	bl	8007388 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007820:	2800      	cmp	r0, #0
 8007822:	d140      	bne.n	80078a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8007824:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007828:	b12b      	cbz	r3, 8007836 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8007830:	6823      	ldr	r3, [r4, #0]
 8007832:	4413      	add	r3, r2
 8007834:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007836:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800783a:	b1eb      	cbz	r3, 8007878 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800783c:	9b02      	ldr	r3, [sp, #8]
 800783e:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 8007848:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 800784a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800784e:	b9eb      	cbnz	r3, 800788c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007850:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007854:	b15b      	cbz	r3, 800786e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
 8007856:	aa01      	add	r2, sp, #4
 8007858:	2104      	movs	r1, #4
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff fd94 	bl	8007388 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				(FinalRangeTimeoutMicroSeconds +
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	4413      	add	r3, r2
 800786a:	6023      	str	r3, [r4, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800786c:	b9d8      	cbnz	r0, 80078a6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007872:	4628      	mov	r0, r5
 8007874:	b006      	add	sp, #24
 8007876:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007878:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0e4      	beq.n	800784a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	4413      	add	r3, r2
 800788a:	e7dd      	b.n	8007848 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 800788c:	aa03      	add	r2, sp, #12
 800788e:	2103      	movs	r1, #3
 8007890:	4630      	mov	r0, r6
 8007892:	f7ff fd79 	bl	8007388 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	4413      	add	r3, r2
 80078a0:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d0d4      	beq.n	8007850 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
 80078a6:	4605      	mov	r5, r0
 80078a8:	e7e3      	b.n	8007872 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

080078aa <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80078aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80078ac:	2200      	movs	r2, #0
{
 80078ae:	4607      	mov	r7, r0
 80078b0:	460e      	mov	r6, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078b2:	4610      	mov	r0, r2

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80078b4:	5cb3      	ldrb	r3, [r6, r2]
 80078b6:	b103      	cbz	r3, 80078ba <VL53L0X_load_tuning_settings+0x10>
 80078b8:	b108      	cbz	r0, 80078be <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80078ba:	b003      	add	sp, #12
 80078bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Index++;
 80078be:	1c55      	adds	r5, r2, #1
		if (NumberOfWrites == 0xFF) {
 80078c0:	2bff      	cmp	r3, #255	; 0xff
 80078c2:	5d71      	ldrb	r1, [r6, r5]
 80078c4:	d128      	bne.n	8007918 <VL53L0X_load_tuning_settings+0x6e>
			Index++;
 80078c6:	1c95      	adds	r5, r2, #2
			switch (SelectParam) {
 80078c8:	5d73      	ldrb	r3, [r6, r5]
 80078ca:	2903      	cmp	r1, #3
 80078cc:	d837      	bhi.n	800793e <VL53L0X_load_tuning_settings+0x94>
 80078ce:	e8df f001 	tbb	[pc, r1]
 80078d2:	0b02      	.short	0x0b02
 80078d4:	1b13      	.short	0x1b13
				Index++;
 80078d6:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80078d8:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80078da:	78d2      	ldrb	r2, [r2, #3]
 80078dc:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80078e0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078e4:	462a      	mov	r2, r5
 80078e6:	e7e5      	b.n	80078b4 <VL53L0X_load_tuning_settings+0xa>
				Index++;
 80078e8:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80078ea:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80078ec:	78d2      	ldrb	r2, [r2, #3]
 80078ee:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80078f2:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
				break;
 80078f6:	e7f5      	b.n	80078e4 <VL53L0X_load_tuning_settings+0x3a>
				Index++;
 80078f8:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 80078fa:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80078fc:	78d2      	ldrb	r2, [r2, #3]
 80078fe:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8007902:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
				break;
 8007906:	e7ed      	b.n	80078e4 <VL53L0X_load_tuning_settings+0x3a>
				Index++;
 8007908:	1d15      	adds	r5, r2, #4
				lsb = *(pTuningSettingBuffer + Index);
 800790a:	4432      	add	r2, r6
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800790c:	78d2      	ldrb	r2, [r2, #3]
 800790e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007912:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
				break;
 8007916:	e7e5      	b.n	80078e4 <VL53L0X_load_tuning_settings+0x3a>
		} else if (NumberOfWrites <= 4) {
 8007918:	2b04      	cmp	r3, #4
 800791a:	d810      	bhi.n	800793e <VL53L0X_load_tuning_settings+0x94>
			Index++;
 800791c:	f10d 0c04 	add.w	ip, sp, #4
 8007920:	1c94      	adds	r4, r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8007922:	4435      	add	r5, r6
 8007924:	4662      	mov	r2, ip
 8007926:	3001      	adds	r0, #1
				localBuffer[i] = *(pTuningSettingBuffer +
 8007928:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 800792c:	f80c eb01 	strb.w	lr, [ip], #1
			for (i = 0; i < NumberOfWrites; i++) {
 8007930:	4283      	cmp	r3, r0
 8007932:	dcf8      	bgt.n	8007926 <VL53L0X_load_tuning_settings+0x7c>
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8007934:	4638      	mov	r0, r7
 8007936:	18e5      	adds	r5, r4, r3
 8007938:	f7fc fe54 	bl	80045e4 <VL53L0X_WriteMulti>
 800793c:	e7d2      	b.n	80078e4 <VL53L0X_load_tuning_settings+0x3a>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800793e:	f06f 0003 	mvn.w	r0, #3
 8007942:	e7cf      	b.n	80078e4 <VL53L0X_load_tuning_settings+0x3a>

08007944 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007944:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007946:	2300      	movs	r3, #0
{
 8007948:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 800794a:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800794c:	f10d 0107 	add.w	r1, sp, #7
{
 8007950:	4605      	mov	r5, r0
 8007952:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8007954:	f7fe f935 	bl	8005bc2 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8007958:	b940      	cbnz	r0, 800796c <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 800795a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800795e:	b12b      	cbz	r3, 800796c <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8007960:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8007962:	6a2b      	ldr	r3, [r5, #32]
 8007964:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8007966:	3380      	adds	r3, #128	; 0x80
 8007968:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 800796a:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 800796c:	b002      	add	sp, #8
 800796e:	bd70      	pop	{r4, r5, r6, pc}

08007970 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007970:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007972:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8007974:	6013      	str	r3, [r2, #0]
{
 8007976:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 8007978:	aa01      	add	r2, sp, #4
 800797a:	f7ff ffe3 	bl	8007944 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800797e:	b918      	cbnz	r0, 8007988 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	9a01      	ldr	r2, [sp, #4]
 8007984:	4413      	add	r3, r2
 8007986:	6023      	str	r3, [r4, #0]

	return Status;
}
 8007988:	b002      	add	sp, #8
 800798a:	bd10      	pop	{r4, pc}

0800798c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 800798e:	f8b0 c150 	ldrh.w	ip, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8007992:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
 8007996:	fb05 f50c 	mul.w	r5, r5, ip

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800799a:	3580      	adds	r5, #128	; 0x80
 800799c:	0a2d      	lsrs	r5, r5, #8
{
 800799e:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
	SignalAt0mm *= dmaxCalRange_mm;
 80079a2:	fb05 f50c 	mul.w	r5, r5, ip

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 80079a6:	b152      	cbz	r2, 80079be <VL53L0X_calc_dmax+0x32>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80079a8:	028c      	lsls	r4, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80079aa:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80079ae:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80079b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80079b6:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80079b8:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80079bc:	0c22      	lsrs	r2, r4, #16
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80079be:	f506 4000 	add.w	r0, r6, #32768	; 0x8000
 80079c2:	0c00      	lsrs	r0, r0, #16
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80079c4:	9906      	ldr	r1, [sp, #24]
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80079c6:	2406      	movs	r4, #6
 80079c8:	3003      	adds	r0, #3
 80079ca:	fbb0 f0f4 	udiv	r0, r0, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80079ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 80079d2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80079d6:	fb01 f303 	mul.w	r3, r1, r3

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80079da:	bf38      	it	cc
 80079dc:	1cf1      	addcc	r1, r6, #3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80079de:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80079e2:	bf3e      	ittt	cc
 80079e4:	fbb1 f1f4 	udivcc	r1, r1, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80079e8:	ebc1 01c1 	rsbcc	r1, r1, r1, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80079ec:	f501 4100 	addcc.w	r1, r1, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80079f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80079f4:	bf34      	ite	cc
 80079f6:	0c09      	lsrcc	r1, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 80079f8:	491b      	ldrcs	r1, [pc, #108]	; (8007a68 <VL53L0X_calc_dmax+0xdc>)
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80079fa:	fb03 f303 	mul.w	r3, r3, r3

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80079fe:	bf38      	it	cc
 8007a00:	4349      	mulcc	r1, r1

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007a02:	eb03 0357 	add.w	r3, r3, r7, lsr #1
 8007a06:	440b      	add	r3, r1
	minSignalNeeded /= peakVcselDuration_us;
 8007a08:	fbb3 f3f7 	udiv	r3, r3, r7

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8007a0c:	039b      	lsls	r3, r3, #14
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007a0e:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded /= minSignalNeeded_p4;
 8007a12:	24fe      	movs	r4, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007a14:	337f      	adds	r3, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8007a16:	fbb3 f3f4 	udiv	r3, r3, r4
	minSignalNeeded *= minSignalNeeded_p1;
 8007a1a:	fb03 f402 	mul.w	r4, r3, r2
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007a1e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8007a22:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007a26:	0980      	lsrs	r0, r0, #6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007a28:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 4;
 8007a2c:	0124      	lsls	r4, r4, #4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007a2e:	f7ff f90f 	bl	8006c50 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007a32:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8007a36:	42bc      	cmp	r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007a38:	bf28      	it	cs
 8007a3a:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007a3e:	4606      	mov	r6, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007a40:	bf29      	itett	cs
 8007a42:	fbb4 f3f3 	udivcs	r3, r4, r3
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007a46:	2000      	movcc	r0, #0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007a48:	18ed      	addcs	r5, r5, r3
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007a4a:	fbb4 f4f7 	udivcs	r4, r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8007a4e:	bf28      	it	cs
 8007a50:	fbb5 f0f4 	udivcs	r0, r5, r4

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007a54:	f7ff f8fc 	bl	8006c50 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
 8007a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5a:	4286      	cmp	r6, r0
 8007a5c:	bf94      	ite	ls
 8007a5e:	601e      	strls	r6, [r3, #0]
 8007a60:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8007a62:	2000      	movs	r0, #0
 8007a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a66:	bf00      	nop
 8007a68:	fff00000 	.word	0xfff00000

08007a6c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a70:	ed2d 8b02 	vpush	{d8}
 8007a74:	b08f      	sub	sp, #60	; 0x3c
 8007a76:	4604      	mov	r4, r0
 8007a78:	9307      	str	r3, [sp, #28]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007a7a:	6a03      	ldr	r3, [r0, #32]
 8007a7c:	930c      	str	r3, [sp, #48]	; 0x30
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007a7e:	690b      	ldr	r3, [r1, #16]
 8007a80:	9308      	str	r3, [sp, #32]

	correctedSignalRate_mcps =
 8007a82:	68cb      	ldr	r3, [r1, #12]
{
 8007a84:	460e      	mov	r6, r1
 8007a86:	4693      	mov	fp, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007a88:	aa0d      	add	r2, sp, #52	; 0x34
	correctedSignalRate_mcps =
 8007a8a:	ee08 3a10 	vmov	s16, r3
	Status = VL53L0X_get_total_signal_rate(
 8007a8e:	f7ff ff6f 	bl	8007970 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007a92:	aa0c      	add	r2, sp, #48	; 0x30
 8007a94:	4631      	mov	r1, r6
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7ff ff54 	bl	8007944 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8007a9c:	bb48      	cbnz	r0, 8007af2 <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007a9e:	f894 a0e0 	ldrb.w	sl, [r4, #224]	; 0xe0
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007aa2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007aa4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007aa8:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007aac:	f894 e0e8 	ldrb.w	lr, [r4, #232]	; 0xe8

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 8007ab0:	f1ba 0f08 	cmp.w	sl, #8
		vcselWidth = 3;
 8007ab4:	bf0c      	ite	eq
 8007ab6:	2502      	moveq	r5, #2
 8007ab8:	2503      	movne	r5, #3
 8007aba:	9509      	str	r5, [sp, #36]	; 0x24
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007abc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007ac0:	fb05 fc07 	mul.w	ip, r5, r7
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007ac4:	f50c 4200 	add.w	r2, ip, #32768	; 0x8000
 8007ac8:	9204      	str	r2, [sp, #16]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007aca:	f107 0280 	add.w	r2, r7, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007ace:	f022 09ff 	bic.w	r9, r2, #255	; 0xff
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007ad2:	9205      	str	r2, [sp, #20]
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 8007ad4:	9a04      	ldr	r2, [sp, #16]
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007ad6:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
		totalSignalRate_mcps <<= 8;
 8007ada:	4f62      	ldr	r7, [pc, #392]	; (8007c64 <VL53L0X_calc_sigma_estimate+0x1f8>)
 8007adc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (peakSignalRate_kcps == 0) {
 8007ae0:	0c12      	lsrs	r2, r2, #16
 8007ae2:	920a      	str	r2, [sp, #40]	; 0x28
 8007ae4:	d10a      	bne.n	8007afc <VL53L0X_calc_sigma_estimate+0x90>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 8007ae6:	9b07      	ldr	r3, [sp, #28]
		*pSigmaEstimate = cSigmaEstMax;
 8007ae8:	f8cb 7000 	str.w	r7, [fp]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007aec:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		*pDmax_mm = 0;
 8007af0:	6018      	str	r0, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007af2:	b00f      	add	sp, #60	; 0x3c
 8007af4:	ecbd 8b02 	vpop	{d8}
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007afc:	fb05 fc0c 	mul.w	ip, r5, ip
 8007b00:	f5bc 1f48 	cmp.w	ip, #3276800	; 0x320000
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b04:	4672      	mov	r2, lr
 8007b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b08:	4620      	mov	r0, r4
 8007b0a:	4663      	mov	r3, ip
 8007b0c:	bf28      	it	cs
 8007b0e:	f44f 1348 	movcs.w	r3, #3276800	; 0x320000
 8007b12:	9306      	str	r3, [sp, #24]
 8007b14:	f7ff fba8 	bl	8007268 <VL53L0X_calc_timeout_mclks>
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b1a:	4680      	mov	r8, r0
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4652      	mov	r2, sl
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff fba1 	bl	8007268 <VL53L0X_calc_timeout_mclks>
		peakVcselDuration_us = vcselWidth * 2048 *
 8007b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007b28:	eb00 0308 	add.w	r3, r0, r8
		peakVcselDuration_us = vcselWidth * 2048 *
 8007b2c:	435a      	muls	r2, r3
 8007b2e:	02d3      	lsls	r3, r2, #11
		peakVcselDuration_us *= cPllPeriod_ps;
 8007b30:	f240 6877 	movw	r8, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b38:	fbb3 f3f5 	udiv	r3, r3, r5
		peakVcselDuration_us *= cPllPeriod_ps;
 8007b3c:	fb08 f803 	mul.w	r8, r8, r3
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007b40:	9b05      	ldr	r3, [sp, #20]
 8007b42:	4a49      	ldr	r2, [pc, #292]	; (8007c68 <VL53L0X_calc_sigma_estimate+0x1fc>)
 8007b44:	0a18      	lsrs	r0, r3, #8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007b46:	9b08      	ldr	r3, [sp, #32]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b48:	f508 78fa 	add.w	r8, r8, #500	; 0x1f4
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007b4c:	fb05 fa03 	mul.w	sl, r5, r3
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b50:	fbb8 f8f5 	udiv	r8, r8, r5
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007b54:	4b45      	ldr	r3, [pc, #276]	; (8007c6c <VL53L0X_calc_sigma_estimate+0x200>)
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007b56:	fb08 f000 	mul.w	r0, r8, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007b5a:	3080      	adds	r0, #128	; 0x80
 8007b5c:	0a00      	lsrs	r0, r0, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007b5e:	ea0a 0a03 	and.w	sl, sl, r3
 8007b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b64:	fbba faf3 	udiv	sl, sl, r3
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007b68:	4592      	cmp	sl, r2
 8007b6a:	bf28      	it	cs
 8007b6c:	4692      	movcs	sl, r2
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007b6e:	2801      	cmp	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007b70:	f44f 7216 	mov.w	r2, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007b74:	bf38      	it	cc
 8007b76:	2001      	movcc	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007b78:	fb02 fa0a 	mul.w	sl, r2, sl
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007b7c:	220c      	movs	r2, #12
 8007b7e:	4350      	muls	r0, r2
 8007b80:	f7ff f866 	bl	8006c50 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b84:	9b04      	ldr	r3, [sp, #16]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007b86:	9005      	str	r0, [sp, #20]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <VL53L0X_calc_sigma_estimate+0x200>)
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007b8c:	8930      	ldrh	r0, [r6, #8]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b8e:	ea02 0c03 	and.w	ip, r2, r3
 8007b92:	9b06      	ldr	r3, [sp, #24]
			xTalkCompRate_kcps) + 500)/1000;
 8007b94:	9a06      	ldr	r2, [sp, #24]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007b96:	ebac 0103 	sub.w	r1, ip, r3
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007b9a:	4b35      	ldr	r3, [pc, #212]	; (8007c70 <VL53L0X_calc_sigma_estimate+0x204>)
 8007b9c:	4343      	muls	r3, r0
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007b9e:	f241 205c 	movw	r0, #4700	; 0x125c
 8007ba2:	fbb3 f3f0 	udiv	r3, r3, r0
			xTalkCompRate_kcps) + 500)/1000;
 8007ba6:	f502 70fa 	add.w	r0, r2, #500	; 0x1f4
 8007baa:	4460      	add	r0, ip
			xTalkCompRate_kcps) + 500)/1000;
 8007bac:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007bb0:	fbb1 f1f5 	udiv	r1, r1, r5
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8007bb4:	fbb0 f5f5 	udiv	r5, r0, r5
		diff1_mcps <<= 8;
 8007bb8:	0209      	lsls	r1, r1, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007bba:	fbb1 f5f5 	udiv	r5, r1, r5
		xTalkCorrection <<= 8;
 8007bbe:	022d      	lsls	r5, r5, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8007bc0:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
 8007bc4:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007bc6:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8007bca:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 8007bcc:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8007bd0:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8007bd2:	436d      	muls	r5, r5
		pwMult >>= 14;
 8007bd4:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8007bd6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007bda:	4368      	muls	r0, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007bdc:	f50a 4300 	add.w	r3, sl, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007be0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007be4:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8007be6:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007be8:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007bea:	fb00 3000 	mla	r0, r0, r0, r3
 8007bee:	f7ff f82f 	bl	8006c50 <VL53L0X_isqrt>
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007bf2:	9a05      	ldr	r2, [sp, #20]
		sqrtResult_centi_ns <<= 16;
 8007bf4:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007bf6:	3032      	adds	r0, #50	; 0x32
 8007bf8:	2364      	movs	r3, #100	; 0x64
 8007bfa:	fbb0 f3f3 	udiv	r3, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007bfe:	0050      	lsls	r0, r2, #1
		sigmaEstRtn		 += 5000;
 8007c00:	f640 32b5 	movw	r2, #2997	; 0xbb5
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007c04:	fbb3 f0f0 	udiv	r0, r3, r0
		sigmaEstRtn		 += 5000;
 8007c08:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c0c:	fb02 3000 	mla	r0, r2, r0, r3
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007c10:	4b18      	ldr	r3, [pc, #96]	; (8007c74 <VL53L0X_calc_sigma_estimate+0x208>)
 8007c12:	4298      	cmp	r0, r3
		sigmaEstRtn		 /= 10000;
 8007c14:	bf96      	itet	ls
 8007c16:	f242 7310 	movwls	r3, #10000	; 0x2710
			sigmaEstRtn = cSigmaEstRtnMax;
 8007c1a:	f44f 4070 	movhi.w	r0, #61440	; 0xf000
		sigmaEstRtn		 /= 10000;
 8007c1e:	fbb0 f0f3 	udivls	r0, r0, r3
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007c22:	f241 1304 	movw	r3, #4356	; 0x1104
 8007c26:	fb00 3000 	mla	r0, r0, r0, r3
 8007c2a:	f7ff f811 	bl	8006c50 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 8007c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c32:	4358      	muls	r0, r3
		Status = VL53L0X_calc_dmax(
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	f8cd a004 	str.w	sl, [sp, #4]
 8007c3a:	4287      	cmp	r7, r0
 8007c3c:	bf28      	it	cs
 8007c3e:	4607      	movcs	r7, r0
 8007c40:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8007c44:	f44f 7348 	mov.w	r3, #800	; 0x320
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007c48:	f8cb 7000 	str.w	r7, [fp]
		Status = VL53L0X_calc_dmax(
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	ee18 2a10 	vmov	r2, s16
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007c52:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8007c56:	462b      	mov	r3, r5
 8007c58:	4649      	mov	r1, r9
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff fe96 	bl	800798c <VL53L0X_calc_dmax>
 8007c60:	e747      	b.n	8007af2 <VL53L0X_calc_sigma_estimate+0x86>
 8007c62:	bf00      	nop
 8007c64:	028f87ae 	.word	0x028f87ae
 8007c68:	00666666 	.word	0x00666666
 8007c6c:	ffff0000 	.word	0xffff0000
 8007c70:	0006999a 	.word	0x0006999a
 8007c74:	249f270f 	.word	0x249f270f

08007c78 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	b08b      	sub	sp, #44	; 0x2c
 8007c7e:	4699      	mov	r9, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007c86:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007c8a:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007c8e:	f88d 3011 	strb.w	r3, [sp, #17]
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
 8007c92:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007c96:	9309      	str	r3, [sp, #36]	; 0x24
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007c98:	08cb      	lsrs	r3, r1, #3
 8007c9a:	f3c1 06c3 	ubfx	r6, r1, #3, #4
 8007c9e:	9300      	str	r3, [sp, #0]

	if (DeviceRangeStatusInternal == 0 ||
 8007ca0:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8007ca4:	40f3      	lsrs	r3, r6
{
 8007ca6:	4690      	mov	r8, r2
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
	} else {
		NoneFlag = 0;
 8007ca8:	f003 0301 	and.w	r3, r3, #1
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cac:	2201      	movs	r2, #1
 8007cae:	21ff      	movs	r1, #255	; 0xff
{
 8007cb0:	9f15      	ldr	r7, [sp, #84]	; 0x54
		NoneFlag = 0;
 8007cb2:	9301      	str	r3, [sp, #4]
{
 8007cb4:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007cb6:	f7fc fd0f 	bl	80046d8 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8007cba:	b928      	cbnz	r0, 8007cc8 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 8007cbc:	f10d 0212 	add.w	r2, sp, #18
 8007cc0:	21b6      	movs	r1, #182	; 0xb6
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f7fc fcc2 	bl	800464c <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007cc8:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8007ccc:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8007cd0:	b920      	cbnz	r0, 8007cdc <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	21ff      	movs	r1, #255	; 0xff
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7fc fcfe 	bl	80046d8 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007cdc:	f8c4 a144 	str.w	sl, [r4, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007ce0:	b928      	cbnz	r0, 8007cee <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007ce2:	4601      	mov	r1, r0
 8007ce4:	f10d 020e 	add.w	r2, sp, #14
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7fd ffc4 	bl	8005c76 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007cee:	f89d 500e 	ldrb.w	r5, [sp, #14]
 8007cf2:	b1d5      	cbz	r5, 8007d2a <VL53L0X_get_pal_range_status+0xb2>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	f040 808c 	bne.w	8007e12 <VL53L0X_get_pal_range_status+0x19a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007cfa:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007cfc:	ab09      	add	r3, sp, #36	; 0x24
 8007cfe:	aa05      	add	r2, sp, #20
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff feb3 	bl	8007a6c <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f040 8083 	bne.w	8007e12 <VL53L0X_get_pal_range_status+0x19a>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007d0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d10:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007d12:	4601      	mov	r1, r0
 8007d14:	aa06      	add	r2, sp, #24
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7fd ffe6 	bl	8005ce8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007d1c:	9d06      	ldr	r5, [sp, #24]
 8007d1e:	b125      	cbz	r5, 8007d2a <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 8007d20:	9b05      	ldr	r3, [sp, #20]
 8007d22:	429d      	cmp	r5, r3
 8007d24:	bf2c      	ite	cs
 8007d26:	2500      	movcs	r5, #0
 8007d28:	2501      	movcc	r5, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007d2a:	b920      	cbnz	r0, 8007d36 <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007d2c:	aa04      	add	r2, sp, #16
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4620      	mov	r0, r4
 8007d32:	f7fd ffa0 	bl	8005c76 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007d36:	f89d b010 	ldrb.w	fp, [sp, #16]
 8007d3a:	f1bb 0f00 	cmp.w	fp, #0
 8007d3e:	d00f      	beq.n	8007d60 <VL53L0X_get_pal_range_status+0xe8>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d16a      	bne.n	8007e1a <VL53L0X_get_pal_range_status+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007d44:	aa07      	add	r2, sp, #28
 8007d46:	2102      	movs	r1, #2
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f7fd ffcd 	bl	8005ce8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d060      	beq.n	8007e16 <VL53L0X_get_pal_range_status+0x19e>
	uint8_t SignalRefClipflag = 0;
 8007d54:	4553      	cmp	r3, sl
 8007d56:	bf2c      	ite	cs
 8007d58:	f04f 0b00 	movcs.w	fp, #0
 8007d5c:	f04f 0b01 	movcc.w	fp, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007d60:	b928      	cbnz	r0, 8007d6e <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007d62:	f10d 0211 	add.w	r2, sp, #17
 8007d66:	2103      	movs	r1, #3
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f7fd ff84 	bl	8005c76 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8007d6e:	f89d a011 	ldrb.w	sl, [sp, #17]
 8007d72:	f1ba 0f00 	cmp.w	sl, #0
 8007d76:	d016      	beq.n	8007da6 <VL53L0X_get_pal_range_status+0x12e>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d177      	bne.n	8007e6c <VL53L0X_get_pal_range_status+0x1f4>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8007d7c:	f1b9 0f00 	cmp.w	r9, #0
 8007d80:	d003      	beq.n	8007d8a <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007d82:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8007d86:	fbb8 f9f9 	udiv	r9, r8, r9
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007d8a:	aa08      	add	r2, sp, #32
 8007d8c:	2103      	movs	r1, #3
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7fd ffaa 	bl	8005ce8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007d94:	9a08      	ldr	r2, [sp, #32]
 8007d96:	2a00      	cmp	r2, #0
 8007d98:	d042      	beq.n	8007e20 <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007d9a:	454a      	cmp	r2, r9
 8007d9c:	bf94      	ite	ls
 8007d9e:	f04f 0a00 	movls.w	sl, #0
 8007da2:	f04f 0a01 	movhi.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007da6:	b920      	cbnz	r0, 8007db2 <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d03a      	beq.n	8007e24 <VL53L0X_get_pal_range_status+0x1ac>
			*pPalRangeStatus = 255;	 /* NONE */
 8007dae:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007db0:	703a      	strb	r2, [r7, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007db2:	783a      	ldrb	r2, [r7, #0]
 8007db4:	b90a      	cbnz	r2, 8007dba <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007db8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007dba:	f10d 020f 	add.w	r2, sp, #15
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7fd ff58 	bl	8005c76 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8007dc6:	bb08      	cbnz	r0, 8007e0c <VL53L0X_get_pal_range_status+0x194>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007dc8:	f89d 200e 	ldrb.w	r2, [sp, #14]
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007dcc:	f89d 3011 	ldrb.w	r3, [sp, #17]
			Temp8 = 1;
 8007dd0:	2a00      	cmp	r2, #0
 8007dd2:	bf08      	it	eq
 8007dd4:	2501      	moveq	r5, #1
		if ((DeviceRangeStatusInternal == 4) ||
 8007dd6:	2e04      	cmp	r6, #4
 8007dd8:	bf18      	it	ne
 8007dda:	f89d 200f 	ldrbne.w	r2, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007dde:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
			Temp8 = 1;
 8007de2:	bf1a      	itte	ne
 8007de4:	fab2 f282 	clzne	r2, r2
 8007de8:	0952      	lsrne	r2, r2, #5
 8007dea:	2201      	moveq	r2, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007dec:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if ((SignalRefClipLimitCheckEnable == 0) ||
 8007df0:	f89d 2010 	ldrb.w	r2, [sp, #16]
			Temp8 = 1;
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	bf08      	it	eq
 8007df8:	f04f 0b01 	moveq.w	fp, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf08      	it	eq
 8007e00:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e04:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007e08:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8007e0c:	b00b      	add	sp, #44	; 0x2c
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	2500      	movs	r5, #0
 8007e14:	e78f      	b.n	8007d36 <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 8007e16:	469b      	mov	fp, r3
 8007e18:	e7a2      	b.n	8007d60 <VL53L0X_get_pal_range_status+0xe8>
 8007e1a:	f04f 0b00 	mov.w	fp, #0
 8007e1e:	e7a6      	b.n	8007d6e <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007e20:	4692      	mov	sl, r2
 8007e22:	e7c0      	b.n	8007da6 <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 8007e24:	1e72      	subs	r2, r6, #1
 8007e26:	2a02      	cmp	r2, #2
 8007e28:	d801      	bhi.n	8007e2e <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 5; /* HW fail */
 8007e2a:	2205      	movs	r2, #5
 8007e2c:	e7c0      	b.n	8007db0 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 8007e2e:	2e06      	cmp	r6, #6
 8007e30:	d001      	beq.n	8007e36 <VL53L0X_get_pal_range_status+0x1be>
 8007e32:	2e09      	cmp	r6, #9
 8007e34:	d101      	bne.n	8007e3a <VL53L0X_get_pal_range_status+0x1c2>
			*pPalRangeStatus = 4;  /* Phase fail */
 8007e36:	2204      	movs	r2, #4
 8007e38:	e7ba      	b.n	8007db0 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 8007e3a:	9b00      	ldr	r3, [sp, #0]
 8007e3c:	f003 020d 	and.w	r2, r3, #13
 8007e40:	2a08      	cmp	r2, #8
 8007e42:	d002      	beq.n	8007e4a <VL53L0X_get_pal_range_status+0x1d2>
					DeviceRangeStatusInternal == 10 ||
 8007e44:	f1bb 0f01 	cmp.w	fp, #1
 8007e48:	d101      	bne.n	8007e4e <VL53L0X_get_pal_range_status+0x1d6>
			*pPalRangeStatus = 3;  /* Min range */
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	e7b0      	b.n	8007db0 <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 8007e4e:	2e04      	cmp	r6, #4
 8007e50:	d002      	beq.n	8007e58 <VL53L0X_get_pal_range_status+0x1e0>
 8007e52:	f1ba 0f01 	cmp.w	sl, #1
 8007e56:	d101      	bne.n	8007e5c <VL53L0X_get_pal_range_status+0x1e4>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8007e58:	2202      	movs	r2, #2
 8007e5a:	e7a9      	b.n	8007db0 <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 8007e5c:	2d01      	cmp	r5, #1
 8007e5e:	d101      	bne.n	8007e64 <VL53L0X_get_pal_range_status+0x1ec>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8007e60:	2201      	movs	r2, #1
 8007e62:	e7a5      	b.n	8007db0 <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 8007e64:	2200      	movs	r2, #0
 8007e66:	703a      	strb	r2, [r7, #0]
 8007e68:	46aa      	mov	sl, r5
 8007e6a:	e7a2      	b.n	8007db2 <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 8007e6c:	f04f 0a00 	mov.w	sl, #0
 8007e70:	e79f      	b.n	8007db2 <VL53L0X_get_pal_range_status+0x13a>
	...

08007e74 <VL53L0X_check_part_used>:
/* Functions Definition ------------------------------------------------------*/

VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007e78:	2102      	movs	r1, #2
{
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8007e7e:	f7fe ff1d 	bl	8006cbc <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8007e82:	4605      	mov	r5, r0
 8007e84:	b940      	cbnz	r0, 8007e98 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8007e86:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 8007e8a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8007e8e:	b92b      	cbnz	r3, 8007e9c <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007e90:	4905      	ldr	r1, [pc, #20]	; (8007ea8 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8007e92:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007e94:	f01b fd90 	bl	80239b8 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8007e98:	4628      	mov	r0, r5
 8007e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007e9c:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8007ea0:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007ea2:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8007ea6:	e7f5      	b.n	8007e94 <VL53L0X_check_part_used+0x20>
 8007ea8:	080303e5 	.word	0x080303e5

08007eac <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eae:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	f10d 0107 	add.w	r1, sp, #7
{
 8007eb6:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007eb8:	f7ff ffdc 	bl	8007e74 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8007ebc:	bb00      	cbnz	r0, 8007f00 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8007ebe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ec2:	b9fb      	cbnz	r3, 8007f04 <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007ec4:	4915      	ldr	r1, [pc, #84]	; (8007f1c <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f01b fd76 	bl	80239b8 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007ecc:	4914      	ldr	r1, [pc, #80]	; (8007f20 <VL53L0X_get_device_info+0x74>)
 8007ece:	f104 0020 	add.w	r0, r4, #32
 8007ed2:	f01b fd71 	bl	80239b8 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007ed6:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8007eda:	21c0      	movs	r1, #192	; 0xc0
 8007edc:	4628      	mov	r0, r5
 8007ede:	f7fc fb6c 	bl	80045ba <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ee2:	b968      	cbnz	r0, 8007f00 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8007ee4:	f10d 0206 	add.w	r2, sp, #6
 8007ee8:	21c2      	movs	r1, #194	; 0xc2
 8007eea:	4628      	mov	r0, r5
 8007eec:	f7fc fb65 	bl	80045ba <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8007ef6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007efa:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8007efc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 8007f00:	b003      	add	sp, #12
 8007f02:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 8007f04:	2b22      	cmp	r3, #34	; 0x22
 8007f06:	d803      	bhi.n	8007f10 <VL53L0X_get_device_info+0x64>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d003      	beq.n	8007f14 <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007f0c:	4905      	ldr	r1, [pc, #20]	; (8007f24 <VL53L0X_get_device_info+0x78>)
 8007f0e:	e7da      	b.n	8007ec6 <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 8007f10:	2b26      	cmp	r3, #38	; 0x26
 8007f12:	d801      	bhi.n	8007f18 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007f14:	4904      	ldr	r1, [pc, #16]	; (8007f28 <VL53L0X_get_device_info+0x7c>)
 8007f16:	e7d6      	b.n	8007ec6 <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007f18:	4904      	ldr	r1, [pc, #16]	; (8007f2c <VL53L0X_get_device_info+0x80>)
 8007f1a:	e7d4      	b.n	8007ec6 <VL53L0X_get_device_info+0x1a>
 8007f1c:	0802f77c 	.word	0x0802f77c
 8007f20:	0802f7b5 	.word	0x0802f7b5
 8007f24:	0802f788 	.word	0x0802f788
 8007f28:	0802f794 	.word	0x0802f794
 8007f2c:	0802f7a0 	.word	0x0802f7a0

08007f30 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8007f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8007f32:	7803      	ldrb	r3, [r0, #0]
 8007f34:	2b2d      	cmp	r3, #45	; 0x2d
 8007f36:	d115      	bne.n	8007f64 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 8007f38:	3001      	adds	r0, #1
        minus = 1;
 8007f3a:	2501      	movs	r5, #1
 8007f3c:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8007f3e:	462a      	mov	r2, r5
 8007f40:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007f42:	270a      	movs	r7, #10
 8007f44:	e003      	b.n	8007f4e <ParseNumber+0x1e>
        ptr++;
        i++;
 8007f46:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 8007f48:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8007f4c:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8007f4e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8007f52:	3c30      	subs	r4, #48	; 0x30
 8007f54:	b2e6      	uxtb	r6, r4
 8007f56:	2e09      	cmp	r6, #9
 8007f58:	d9f5      	bls.n	8007f46 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8007f5a:	b101      	cbz	r1, 8007f5e <ParseNumber+0x2e>
        *cnt = i;
 8007f5c:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8007f5e:	b105      	cbz	r5, 8007f62 <ParseNumber+0x32>
        return 0 - sum;
 8007f60:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8007f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 8007f64:	2500      	movs	r5, #0
 8007f66:	e7e9      	b.n	8007f3c <ParseNumber+0xc>

08007f68 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8007f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8007f6a:	2600      	movs	r6, #0

  while(* ptr) {
 8007f6c:	7803      	ldrb	r3, [r0, #0]
 8007f6e:	b903      	cbnz	r3, 8007f72 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8007f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8007f72:	2b3a      	cmp	r3, #58	; 0x3a
 8007f74:	d128      	bne.n	8007fc8 <ParseMAC+0x60>
    hexcnt = 1;
 8007f76:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 8007f7a:	4460      	add	r0, ip
 8007f7c:	e7f6      	b.n	8007f6c <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007f7e:	2a09      	cmp	r2, #9
        sum <<= 4;
 8007f80:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8007f84:	d905      	bls.n	8007f92 <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8007f86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f8a:	2a05      	cmp	r2, #5
 8007f8c:	d814      	bhi.n	8007fb8 <ParseMAC+0x50>
        return (a - 'a') + 10;
 8007f8e:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 8007f90:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 8007f92:	4414      	add	r4, r2
        i++;
 8007f94:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8007f96:	5d43      	ldrb	r3, [r0, r5]
 8007f98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	2a09      	cmp	r2, #9
 8007fa0:	fa5f fc85 	uxtb.w	ip, r5
 8007fa4:	d9eb      	bls.n	8007f7e <ParseMAC+0x16>
 8007fa6:	f023 0720 	bic.w	r7, r3, #32
 8007faa:	3f41      	subs	r7, #65	; 0x41
 8007fac:	2f05      	cmp	r7, #5
 8007fae:	d9e6      	bls.n	8007f7e <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8007fb0:	1c73      	adds	r3, r6, #1
 8007fb2:	558c      	strb	r4, [r1, r6]
 8007fb4:	b2de      	uxtb	r6, r3
 8007fb6:	e7e0      	b.n	8007f7a <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8007fb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007fbc:	2a05      	cmp	r2, #5
 8007fbe:	d801      	bhi.n	8007fc4 <ParseMAC+0x5c>
        return (a - 'A') + 10;
 8007fc0:	3b37      	subs	r3, #55	; 0x37
 8007fc2:	e7e5      	b.n	8007f90 <ParseMAC+0x28>
    return 0;
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	e7e4      	b.n	8007f92 <ParseMAC+0x2a>
 8007fc8:	2500      	movs	r5, #0
    uint32_t sum = 0;
 8007fca:	462c      	mov	r4, r5
 8007fcc:	e7e3      	b.n	8007f96 <ParseMAC+0x2e>

08007fce <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8007fce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 8007fd4:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 8007fd6:	2701      	movs	r7, #1
  while(* ptr) {
 8007fd8:	7823      	ldrb	r3, [r4, #0]
 8007fda:	b90b      	cbnz	r3, 8007fe0 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8007fdc:	b003      	add	sp, #12
 8007fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8007fe0:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8007fe2:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 8007fe6:	d007      	beq.n	8007ff8 <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8007fe8:	f10d 0107 	add.w	r1, sp, #7
 8007fec:	4620      	mov	r0, r4
 8007fee:	f7ff ff9f 	bl	8007f30 <ParseNumber>
 8007ff2:	1c6b      	adds	r3, r5, #1
 8007ff4:	5570      	strb	r0, [r6, r5]
 8007ff6:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 8007ff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007ffc:	441c      	add	r4, r3
 8007ffe:	e7eb      	b.n	8007fd8 <ParseIP+0xa>

08008000 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8008004:	4608      	mov	r0, r1
{
 8008006:	460e      	mov	r6, r1
 8008008:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800800a:	f7f8 f8eb 	bl	80001e4 <strlen>
 800800e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8008012:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8008016:	b281      	uxth	r1, r0
 8008018:	4630      	mov	r0, r6
 800801a:	4798      	blx	r3

  if( ret > 0)
 800801c:	2800      	cmp	r0, #0
 800801e:	dd21      	ble.n	8008064 <AT_ExecuteCommand+0x64>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8008020:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8008024:	f8d4 26a0 	ldr.w	r2, [r4, #1696]	; 0x6a0
 8008028:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800802c:	4628      	mov	r0, r5
 800802e:	4798      	blx	r3
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 8008030:	1e43      	subs	r3, r0, #1
 8008032:	b29b      	uxth	r3, r3
 8008034:	f240 5276 	movw	r2, #1398	; 0x576
 8008038:	4293      	cmp	r3, r2
 800803a:	d80d      	bhi.n	8008058 <AT_ExecuteCommand+0x58>
    {
      *(pdata + recv_len) = 0;
 800803c:	2400      	movs	r4, #0
 800803e:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8008040:	4909      	ldr	r1, [pc, #36]	; (8008068 <AT_ExecuteCommand+0x68>)
 8008042:	4628      	mov	r0, r5
 8008044:	f01b fce5 	bl	8023a12 <strstr>
 8008048:	b950      	cbnz	r0, 8008060 <AT_ExecuteCommand+0x60>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800804a:	4908      	ldr	r1, [pc, #32]	; (800806c <AT_ExecuteCommand+0x6c>)
 800804c:	4628      	mov	r0, r5
 800804e:	f01b fce0 	bl	8023a12 <strstr>
 8008052:	b138      	cbz	r0, 8008064 <AT_ExecuteCommand+0x64>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008054:	2005      	movs	r0, #5
 8008056:	e002      	b.n	800805e <AT_ExecuteCommand+0x5e>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8008058:	3004      	adds	r0, #4
 800805a:	d103      	bne.n	8008064 <AT_ExecuteCommand+0x64>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800805c:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
}
 800805e:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 8008060:	4620      	mov	r0, r4
 8008062:	e7fc      	b.n	800805e <AT_ExecuteCommand+0x5e>
  return ES_WIFI_STATUS_IO_ERROR;
 8008064:	2004      	movs	r0, #4
 8008066:	e7fa      	b.n	800805e <AT_ExecuteCommand+0x5e>
 8008068:	0802fbb3 	.word	0x0802fbb3
 800806c:	0802fbbc 	.word	0x0802fbbc

08008070 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8008070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008074:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 8008076:	4608      	mov	r0, r1
{
 8008078:	4689      	mov	r9, r1
 800807a:	4615      	mov	r5, r2
 800807c:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800807e:	f7f8 f8b1 	bl	80001e4 <strlen>
 8008082:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 8008086:	f8d8 26a0 	ldr.w	r2, [r8, #1696]	; 0x6a0
{
 800808a:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800808c:	b281      	uxth	r1, r0
 800808e:	4648      	mov	r0, r9
 8008090:	4798      	blx	r3
 8008092:	2800      	cmp	r0, #0
 8008094:	dc02      	bgt.n	800809c <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8008096:	2004      	movs	r0, #4
}
 8008098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 800809c:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 80080a0:	f8d8 26a0 	ldr.w	r2, [r8, #1696]	; 0x6a0
 80080a4:	2100      	movs	r1, #0
 80080a6:	f508 7094 	add.w	r0, r8, #296	; 0x128
 80080aa:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 80080ac:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 80080b0:	2b0d      	cmp	r3, #13
 80080b2:	d1f0      	bne.n	8008096 <AT_RequestReceiveData+0x26>
 80080b4:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80080b8:	2b0a      	cmp	r3, #10
 80080ba:	d1ec      	bne.n	8008096 <AT_RequestReceiveData+0x26>
    len-=2;
 80080bc:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 80080be:	2907      	cmp	r1, #7
 80080c0:	d9e9      	bls.n	8008096 <AT_RequestReceiveData+0x26>
    p+=2;
 80080c2:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 80080c6:	f208 1829 	addw	r8, r8, #297	; 0x129
 80080ca:	b119      	cbz	r1, 80080d4 <AT_RequestReceiveData+0x64>
 80080cc:	f818 3001 	ldrb.w	r3, [r8, r1]
 80080d0:	2b15      	cmp	r3, #21
 80080d2:	d017      	beq.n	8008104 <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80080d4:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 80080d8:	f04f 0800 	mov.w	r8, #0
 80080dc:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80080e0:	eb09 0004 	add.w	r0, r9, r4
 80080e4:	490a      	ldr	r1, [pc, #40]	; (8008110 <AT_RequestReceiveData+0xa0>)
 80080e6:	f01b fc94 	bl	8023a12 <strstr>
 80080ea:	b168      	cbz	r0, 8008108 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 80080ec:	b2a4      	uxth	r4, r4
 80080ee:	42bc      	cmp	r4, r7
 80080f0:	4622      	mov	r2, r4
 80080f2:	bf28      	it	cs
 80080f4:	463a      	movcs	r2, r7
 80080f6:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 80080f8:	4649      	mov	r1, r9
 80080fa:	4628      	mov	r0, r5
 80080fc:	f01a f974 	bl	80223e8 <memcpy>
       return ES_WIFI_STATUS_OK;
 8008100:	4640      	mov	r0, r8
 8008102:	e7c9      	b.n	8008098 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 8008104:	3901      	subs	r1, #1
 8008106:	e7e0      	b.n	80080ca <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 8008108:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800810a:	2005      	movs	r0, #5
 800810c:	e7c4      	b.n	8008098 <AT_RequestReceiveData+0x28>
 800810e:	bf00      	nop
 8008110:	0802fbb3 	.word	0x0802fbb3

08008114 <AT_RequestSendData>:
{
 8008114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	4605      	mov	r5, r0
  cmd_len = strlen((char*)cmd);
 800811a:	4608      	mov	r0, r1
{
 800811c:	4688      	mov	r8, r1
 800811e:	4691      	mov	r9, r2
 8008120:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8008122:	f7f8 f85f 	bl	80001e4 <strlen>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8008126:	f010 0401 	ands.w	r4, r0, #1
{
 800812a:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 800812c:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8008130:	d126      	bne.n	8008180 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8008132:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8008136:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 800813a:	4651      	mov	r1, sl
 800813c:	4640      	mov	r0, r8
 800813e:	4798      	blx	r3
  if (n == cmd_len)
 8008140:	b280      	uxth	r0, r0
 8008142:	4582      	cmp	sl, r0
 8008144:	d123      	bne.n	800818e <AT_RequestSendData+0x7a>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8008146:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800814a:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 800814e:	4639      	mov	r1, r7
 8008150:	4648      	mov	r0, r9
 8008152:	4798      	blx	r3
    if (send_len == len)
 8008154:	42b8      	cmp	r0, r7
 8008156:	d113      	bne.n	8008180 <AT_RequestSendData+0x6c>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8008158:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800815c:	f8d5 26a0 	ldr.w	r2, [r5, #1696]	; 0x6a0
 8008160:	4621      	mov	r1, r4
 8008162:	4630      	mov	r0, r6
 8008164:	4798      	blx	r3
      if (recv_len > 0)
 8008166:	2800      	cmp	r0, #0
 8008168:	dd0d      	ble.n	8008186 <AT_RequestSendData+0x72>
        *(pdata+recv_len) = 0;
 800816a:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 800816c:	490b      	ldr	r1, [pc, #44]	; (800819c <AT_RequestSendData+0x88>)
 800816e:	4630      	mov	r0, r6
 8008170:	f01b fc4f 	bl	8023a12 <strstr>
 8008174:	b968      	cbnz	r0, 8008192 <AT_RequestSendData+0x7e>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8008176:	490a      	ldr	r1, [pc, #40]	; (80081a0 <AT_RequestSendData+0x8c>)
 8008178:	4630      	mov	r0, r6
 800817a:	f01b fc4a 	bl	8023a12 <strstr>
 800817e:	b950      	cbnz	r0, 8008196 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_ERROR;
 8008180:	2002      	movs	r0, #2
}
 8008182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8008186:	3004      	adds	r0, #4
 8008188:	d1fa      	bne.n	8008180 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800818a:	2006      	movs	r0, #6
 800818c:	e7f9      	b.n	8008182 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 800818e:	2004      	movs	r0, #4
 8008190:	e7f7      	b.n	8008182 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8008192:	4620      	mov	r0, r4
 8008194:	e7f5      	b.n	8008182 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8008196:	2005      	movs	r0, #5
 8008198:	e7f3      	b.n	8008182 <AT_RequestSendData+0x6e>
 800819a:	bf00      	nop
 800819c:	0802fbb3 	.word	0x0802fbb3
 80081a0:	0802fbbc 	.word	0x0802fbbc

080081a4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80081a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80081a8:	f247 5330 	movw	r3, #30000	; 0x7530
 80081ac:	f8c0 36a0 	str.w	r3, [r0, #1696]	; 0x6a0
{
 80081b0:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80081b2:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80081b6:	2000      	movs	r0, #0
 80081b8:	4798      	blx	r3
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d14b      	bne.n	8008256 <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 80081be:	4927      	ldr	r1, [pc, #156]	; (800825c <ES_WIFI_Init+0xb8>)
 80081c0:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80081c4:	4620      	mov	r0, r4
 80081c6:	f7ff ff1b 	bl	8008000 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80081ca:	4605      	mov	r5, r0
 80081cc:	b960      	cbnz	r0, 80081e8 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 80081ce:	4924      	ldr	r1, [pc, #144]	; (8008260 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 80081d0:	4f24      	ldr	r7, [pc, #144]	; (8008264 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 80081d2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008260 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 80081d6:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80081da:	f01c fa63 	bl	80246a4 <strtok>
  while (ptr != NULL){
 80081de:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80081e0:	f104 0868 	add.w	r8, r4, #104	; 0x68
 80081e4:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 80081e6:	b910      	cbnz	r0, 80081ee <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80081e8:	4628      	mov	r0, r5
 80081ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 80081ee:	2b06      	cmp	r3, #6
 80081f0:	d824      	bhi.n	800823c <ES_WIFI_Init+0x98>
 80081f2:	e8df f003 	tbb	[pc, r3]
 80081f6:	0a04      	.short	0x0a04
 80081f8:	1e19140f 	.word	0x1e19140f
 80081fc:	29          	.byte	0x29
 80081fd:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 80081fe:	4601      	mov	r1, r0
 8008200:	2220      	movs	r2, #32
 8008202:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008204:	f01b fbf2 	bl	80239ec <strncpy>
      break;
 8008208:	e018      	b.n	800823c <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800820a:	4601      	mov	r1, r0
 800820c:	2218      	movs	r2, #24
 800820e:	f104 0020 	add.w	r0, r4, #32
 8008212:	e7f7      	b.n	8008204 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8008214:	4601      	mov	r1, r0
 8008216:	2210      	movs	r2, #16
 8008218:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800821c:	e7f2      	b.n	8008204 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800821e:	4601      	mov	r1, r0
 8008220:	2210      	movs	r2, #16
 8008222:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8008226:	e7ed      	b.n	8008204 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8008228:	4601      	mov	r1, r0
 800822a:	2210      	movs	r2, #16
 800822c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008230:	e7e8      	b.n	8008204 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8008232:	2100      	movs	r1, #0
 8008234:	f7ff fe7c 	bl	8007f30 <ParseNumber>
 8008238:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 800823c:	4649      	mov	r1, r9
 800823e:	2000      	movs	r0, #0
 8008240:	f01c fa30 	bl	80246a4 <strtok>
 8008244:	3601      	adds	r6, #1
 8008246:	e7cd      	b.n	80081e4 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 8008248:	4639      	mov	r1, r7
 800824a:	f01c fa2b 	bl	80246a4 <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 800824e:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8008250:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8008252:	4640      	mov	r0, r8
 8008254:	e7d6      	b.n	8008204 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008256:	2502      	movs	r5, #2
 8008258:	e7c6      	b.n	80081e8 <ES_WIFI_Init+0x44>
 800825a:	bf00      	nop
 800825c:	0802fbc4 	.word	0x0802fbc4
 8008260:	080309f6 	.word	0x080309f6
 8008264:	08030538 	.word	0x08030538

08008268 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8008268:	b530      	push	{r4, r5, lr}
 800826a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800826e:	b158      	cbz	r0, 8008288 <ES_WIFI_RegisterBusIO+0x20>
 8008270:	b151      	cbz	r1, 8008288 <ES_WIFI_RegisterBusIO+0x20>
 8008272:	b14a      	cbz	r2, 8008288 <ES_WIFI_RegisterBusIO+0x20>
 8008274:	b145      	cbz	r5, 8008288 <ES_WIFI_RegisterBusIO+0x20>
 8008276:	b13c      	cbz	r4, 8008288 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8008278:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 800827c:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8008280:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8008284:	2000      	movs	r0, #0
}
 8008286:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8008288:	2002      	movs	r0, #2
 800828a:	e7fc      	b.n	8008286 <ES_WIFI_RegisterBusIO+0x1e>

0800828c <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 800828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800828e:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8008292:	4605      	mov	r5, r0
 8008294:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8008296:	4620      	mov	r0, r4
 8008298:	460a      	mov	r2, r1
 800829a:	4918      	ldr	r1, [pc, #96]	; (80082fc <ES_WIFI_Connect+0x70>)
{
 800829c:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 800829e:	f01b faed 	bl	802387c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082a2:	4622      	mov	r2, r4
 80082a4:	4621      	mov	r1, r4
 80082a6:	4628      	mov	r0, r5
 80082a8:	f7ff feaa 	bl	8008000 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80082ac:	bb20      	cbnz	r0, 80082f8 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 80082ae:	4914      	ldr	r1, [pc, #80]	; (8008300 <ES_WIFI_Connect+0x74>)
 80082b0:	463a      	mov	r2, r7
 80082b2:	4620      	mov	r0, r4
 80082b4:	f01b fae2 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082b8:	4622      	mov	r2, r4
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f7ff fe9f 	bl	8008000 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80082c2:	b9c8      	cbnz	r0, 80082f8 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80082c4:	490f      	ldr	r1, [pc, #60]	; (8008304 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 80082c6:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80082ca:	4632      	mov	r2, r6
 80082cc:	4620      	mov	r0, r4
 80082ce:	f01b fad5 	bl	802387c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082d2:	4622      	mov	r2, r4
 80082d4:	4621      	mov	r1, r4
 80082d6:	4628      	mov	r0, r5
 80082d8:	f7ff fe92 	bl	8008000 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 80082dc:	b960      	cbnz	r0, 80082f8 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 80082de:	490a      	ldr	r1, [pc, #40]	; (8008308 <ES_WIFI_Connect+0x7c>)
 80082e0:	4620      	mov	r0, r4
 80082e2:	f01b fb69 	bl	80239b8 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80082e6:	4622      	mov	r2, r4
 80082e8:	4621      	mov	r1, r4
 80082ea:	4628      	mov	r0, r5
 80082ec:	f7ff fe88 	bl	8008000 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 80082f0:	b910      	cbnz	r0, 80082f8 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 80082f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fa:	bf00      	nop
 80082fc:	0802fbed 	.word	0x0802fbed
 8008300:	0802fbf4 	.word	0x0802fbf4
 8008304:	0802fbfb 	.word	0x0802fbfb
 8008308:	0802fc02 	.word	0x0802fc02

0800830c <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 800830c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8008310:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 8008312:	490b      	ldr	r1, [pc, #44]	; (8008340 <ES_WIFI_IsConnected+0x34>)
{
 8008314:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 8008316:	4610      	mov	r0, r2
 8008318:	f01b fb4e 	bl	80239b8 <strcpy>
 800831c:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800831e:	4601      	mov	r1, r0
 8008320:	4620      	mov	r0, r4
 8008322:	f7ff fe6d 	bl	8008000 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008326:	b938      	cbnz	r0, 8008338 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8008328:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800832c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008330:	4253      	negs	r3, r2
 8008332:	4153      	adcs	r3, r2
 8008334:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8008338:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 800833c:	bd10      	pop	{r4, pc}
 800833e:	bf00      	nop
 8008340:	0802fc06 	.word	0x0802fc06

08008344 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 8008344:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8008348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 800834c:	4935      	ldr	r1, [pc, #212]	; (8008424 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 800834e:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8008350:	4610      	mov	r0, r2
 8008352:	f01b fb31 	bl	80239b8 <strcpy>
 8008356:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008358:	4601      	mov	r1, r0
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff fe50 	bl	8008000 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008360:	4606      	mov	r6, r0
 8008362:	b960      	cbnz	r0, 800837e <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8008364:	4930      	ldr	r1, [pc, #192]	; (8008428 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8008366:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8008428 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 800836a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 800836e:	f01c f999 	bl	80246a4 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8008372:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8008376:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8008378:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 800837c:	b910      	cbnz	r0, 8008384 <ES_WIFI_GetNetworkSettings+0x40>
  }
  
  UNLOCK_WIFI();
  return ret;
}
 800837e:	4630      	mov	r0, r6
 8008380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8008384:	2d0b      	cmp	r5, #11
 8008386:	d80c      	bhi.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
 8008388:	e8df f005 	tbb	[pc, r5]
 800838c:	241e1906 	.word	0x241e1906
 8008390:	3835302a 	.word	0x3835302a
 8008394:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8008398:	4601      	mov	r1, r0
 800839a:	2221      	movs	r2, #33	; 0x21
 800839c:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800839e:	f01b fb25 	bl	80239ec <strncpy>
    ptr = strtok(NULL, ",");
 80083a2:	4649      	mov	r1, r9
 80083a4:	2000      	movs	r0, #0
 80083a6:	f01c f97d 	bl	80246a4 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0e7      	beq.n	800837e <ES_WIFI_GetNetworkSettings+0x3a>
 80083ae:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80083b2:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 80083b4:	bf14      	ite	ne
 80083b6:	3501      	addne	r5, #1
      num++;
 80083b8:	3502      	addeq	r5, #2
 80083ba:	b2ed      	uxtb	r5, r5
 80083bc:	e7de      	b.n	800837c <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 80083be:	4601      	mov	r1, r0
 80083c0:	2221      	movs	r2, #33	; 0x21
 80083c2:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 80083c6:	e7ea      	b.n	800839e <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80083c8:	2100      	movs	r1, #0
 80083ca:	f7ff fdb1 	bl	8007f30 <ParseNumber>
 80083ce:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 80083d2:	e7e6      	b.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 80083d4:	2100      	movs	r1, #0
 80083d6:	f7ff fdab 	bl	8007f30 <ParseNumber>
 80083da:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 80083de:	e7e0      	b.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80083e0:	2100      	movs	r1, #0
 80083e2:	f7ff fda5 	bl	8007f30 <ParseNumber>
 80083e6:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 80083ea:	e7da      	b.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 80083ec:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 80083f0:	f7ff fded 	bl	8007fce <ParseIP>
      break;
 80083f4:	e7d5      	b.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 80083f6:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 80083fa:	e7f9      	b.n	80083f0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80083fc:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8008400:	e7f6      	b.n	80083f0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 8008402:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8008406:	e7f3      	b.n	80083f0 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 8008408:	4641      	mov	r1, r8
 800840a:	e7f1      	b.n	80083f0 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 800840c:	2100      	movs	r1, #0
 800840e:	f7ff fd8f 	bl	8007f30 <ParseNumber>
 8008412:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8008416:	e7c4      	b.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8008418:	2100      	movs	r1, #0
 800841a:	f7ff fd89 	bl	8007f30 <ParseNumber>
 800841e:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8008422:	e7be      	b.n	80083a2 <ES_WIFI_GetNetworkSettings+0x5e>
 8008424:	0802fc0e 	.word	0x0802fc0e
 8008428:	080309f6 	.word	0x080309f6

0800842c <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 800842c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8008436:	4610      	mov	r0, r2
 8008438:	4909      	ldr	r1, [pc, #36]	; (8008460 <ES_WIFI_GetMACAddress+0x34>)
 800843a:	f01b fabd 	bl	80239b8 <strcpy>
 800843e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008440:	4601      	mov	r1, r0
 8008442:	4620      	mov	r0, r4
 8008444:	f7ff fddc 	bl	8008000 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8008448:	4605      	mov	r5, r0
 800844a:	b938      	cbnz	r0, 800845c <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800844c:	4905      	ldr	r1, [pc, #20]	; (8008464 <ES_WIFI_GetMACAddress+0x38>)
 800844e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008452:	f01c f927 	bl	80246a4 <strtok>
    ParseMAC(ptr, mac) ;
 8008456:	4631      	mov	r1, r6
 8008458:	f7ff fd86 	bl	8007f68 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 800845c:	4628      	mov	r0, r5
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	0802fc53 	.word	0x0802fc53
 8008464:	0802fe85 	.word	0x0802fe85

08008468 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8008468:	b570      	push	{r4, r5, r6, lr}
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 800846a:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 800846e:	4604      	mov	r4, r0
 8008470:	4616      	mov	r6, r2
  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8008472:	4628      	mov	r0, r5
 8008474:	460a      	mov	r2, r1
 8008476:	490a      	ldr	r1, [pc, #40]	; (80084a0 <ES_WIFI_DNS_LookUp+0x38>)
 8008478:	f01b fa00 	bl	802387c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800847c:	462a      	mov	r2, r5
 800847e:	4629      	mov	r1, r5
 8008480:	4620      	mov	r0, r4
 8008482:	f7ff fdbd 	bl	8008000 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8008486:	4605      	mov	r5, r0
 8008488:	b938      	cbnz	r0, 800849a <ES_WIFI_DNS_LookUp+0x32>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 800848a:	4906      	ldr	r1, [pc, #24]	; (80084a4 <ES_WIFI_DNS_LookUp+0x3c>)
 800848c:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8008490:	f01c f908 	bl	80246a4 <strtok>
    ParseIP(ptr, ipaddress);
 8008494:	4631      	mov	r1, r6
 8008496:	f7ff fd9a 	bl	8007fce <ParseIP>
  }
  UNLOCK_WIFI();
  return ret;
}
 800849a:	4628      	mov	r0, r5
 800849c:	bd70      	pop	{r4, r5, r6, pc}
 800849e:	bf00      	nop
 80084a0:	0802fca7 	.word	0x0802fca7
 80084a4:	08030538 	.word	0x08030538

080084a8 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80084a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80084aa:	f500 7494 	add.w	r4, r0, #296	; 0x128
 80084ae:	784a      	ldrb	r2, [r1, #1]
{
 80084b0:	4605      	mov	r5, r0
 80084b2:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80084b4:	4620      	mov	r0, r4
 80084b6:	4927      	ldr	r1, [pc, #156]	; (8008554 <ES_WIFI_StartClientConnection+0xac>)
 80084b8:	f01b f9e0 	bl	802387c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084bc:	4622      	mov	r2, r4
 80084be:	4621      	mov	r1, r4
 80084c0:	4628      	mov	r0, r5
 80084c2:	f7ff fd9d 	bl	8008000 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d142      	bne.n	8008550 <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80084ca:	7832      	ldrb	r2, [r6, #0]
 80084cc:	4922      	ldr	r1, [pc, #136]	; (8008558 <ES_WIFI_StartClientConnection+0xb0>)
 80084ce:	4620      	mov	r0, r4
 80084d0:	f01b f9d4 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084d4:	4622      	mov	r2, r4
 80084d6:	4621      	mov	r1, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	f7ff fd91 	bl	8008000 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 80084de:	2800      	cmp	r0, #0
 80084e0:	d136      	bne.n	8008550 <ES_WIFI_StartClientConnection+0xa8>
 80084e2:	88b2      	ldrh	r2, [r6, #4]
 80084e4:	bb4a      	cbnz	r2, 800853a <ES_WIFI_StartClientConnection+0x92>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 80084e6:	8872      	ldrh	r2, [r6, #2]
 80084e8:	b14a      	cbz	r2, 80084fe <ES_WIFI_StartClientConnection+0x56>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 80084ea:	491c      	ldr	r1, [pc, #112]	; (800855c <ES_WIFI_StartClientConnection+0xb4>)
 80084ec:	4620      	mov	r0, r4
 80084ee:	f01b f9c5 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80084f2:	4622      	mov	r2, r4
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f7ff fd82 	bl	8008000 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 80084fc:	bb40      	cbnz	r0, 8008550 <ES_WIFI_StartClientConnection+0xa8>
 80084fe:	7833      	ldrb	r3, [r6, #0]
 8008500:	b97b      	cbnz	r3, 8008522 <ES_WIFI_StartClientConnection+0x7a>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8008502:	7a73      	ldrb	r3, [r6, #9]
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	7a33      	ldrb	r3, [r6, #8]
 8008508:	79b2      	ldrb	r2, [r6, #6]
 800850a:	4915      	ldr	r1, [pc, #84]	; (8008560 <ES_WIFI_StartClientConnection+0xb8>)
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4620      	mov	r0, r4
 8008510:	79f3      	ldrb	r3, [r6, #7]
 8008512:	f01b f9b3 	bl	802387c <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008516:	4622      	mov	r2, r4
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f7ff fd70 	bl	8008000 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008520:	b9b0      	cbnz	r0, 8008550 <ES_WIFI_StartClientConnection+0xa8>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8008522:	4910      	ldr	r1, [pc, #64]	; (8008564 <ES_WIFI_StartClientConnection+0xbc>)
 8008524:	4620      	mov	r0, r4
 8008526:	f01b fa47 	bl	80239b8 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800852a:	4622      	mov	r2, r4
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
  }
  
  UNLOCK_WIFI();
  return ret;
}
 8008530:	b002      	add	sp, #8
 8008532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008536:	f7ff bd63 	b.w	8008000 <AT_ExecuteCommand>
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 800853a:	490b      	ldr	r1, [pc, #44]	; (8008568 <ES_WIFI_StartClientConnection+0xc0>)
 800853c:	4620      	mov	r0, r4
 800853e:	f01b f99d 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008542:	4622      	mov	r2, r4
 8008544:	4621      	mov	r1, r4
 8008546:	4628      	mov	r0, r5
 8008548:	f7ff fd5a 	bl	8008000 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 800854c:	2800      	cmp	r0, #0
 800854e:	d0ca      	beq.n	80084e6 <ES_WIFI_StartClientConnection+0x3e>
}
 8008550:	b002      	add	sp, #8
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0802fcae 	.word	0x0802fcae
 8008558:	0802fcb5 	.word	0x0802fcb5
 800855c:	0802fcc3 	.word	0x0802fcc3
 8008560:	0802fcd0 	.word	0x0802fcd0
 8008564:	0802fcca 	.word	0x0802fcca
 8008568:	0802fcbc 	.word	0x0802fcbc

0800856c <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 800856c:	b538      	push	{r3, r4, r5, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 800856e:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8008572:	784a      	ldrb	r2, [r1, #1]
 8008574:	490b      	ldr	r1, [pc, #44]	; (80085a4 <ES_WIFI_StopClientConnection+0x38>)
{
 8008576:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8008578:	4628      	mov	r0, r5
 800857a:	f01b f97f 	bl	802387c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800857e:	462a      	mov	r2, r5
 8008580:	4629      	mov	r1, r5
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff fd3c 	bl	8008000 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8008588:	b950      	cbnz	r0, 80085a0 <ES_WIFI_StopClientConnection+0x34>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 800858a:	4907      	ldr	r1, [pc, #28]	; (80085a8 <ES_WIFI_StopClientConnection+0x3c>)
 800858c:	4628      	mov	r0, r5
 800858e:	f01b fa13 	bl	80239b8 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008592:	462a      	mov	r2, r5
 8008594:	4629      	mov	r1, r5
 8008596:	4620      	mov	r0, r4
  }
  UNLOCK_WIFI();
  return ret;
}
 8008598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800859c:	f7ff bd30 	b.w	8008000 <AT_ExecuteCommand>
}
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	0802fcae 	.word	0x0802fcae
 80085a8:	0802fce0 	.word	0x0802fce0

080085ac <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 80085ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80085b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80085b8:	bf28      	it	cs
 80085ba:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80085be:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 80085c2:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 80085c4:	f8a8 3000 	strh.w	r3, [r8]
{
 80085c8:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80085ca:	4628      	mov	r0, r5
 80085cc:	460a      	mov	r2, r1
 80085ce:	492c      	ldr	r1, [pc, #176]	; (8008680 <ES_WIFI_SendData+0xd4>)
 80085d0:	461f      	mov	r7, r3
 80085d2:	f01b f953 	bl	802387c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085d6:	462a      	mov	r2, r5
 80085d8:	4629      	mov	r1, r5
 80085da:	4630      	mov	r0, r6
 80085dc:	f7ff fd10 	bl	8008000 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80085e0:	4604      	mov	r4, r0
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d144      	bne.n	8008670 <ES_WIFI_SendData+0xc4>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 80085e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085e8:	4926      	ldr	r1, [pc, #152]	; (8008684 <ES_WIFI_SendData+0xd8>)
 80085ea:	4628      	mov	r0, r5
 80085ec:	f01b f946 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80085f0:	462a      	mov	r2, r5
 80085f2:	4629      	mov	r1, r5
 80085f4:	4630      	mov	r0, r6
 80085f6:	f7ff fd03 	bl	8008000 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80085fa:	4604      	mov	r4, r0
 80085fc:	bb80      	cbnz	r0, 8008660 <ES_WIFI_SendData+0xb4>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 80085fe:	4922      	ldr	r1, [pc, #136]	; (8008688 <ES_WIFI_SendData+0xdc>)
 8008600:	463a      	mov	r2, r7
 8008602:	4628      	mov	r0, r5
 8008604:	f01b f93a 	bl	802387c <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008608:	9500      	str	r5, [sp, #0]
 800860a:	463b      	mov	r3, r7
 800860c:	464a      	mov	r2, r9
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff fd7f 	bl	8008114 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 8008616:	4604      	mov	r4, r0
 8008618:	b998      	cbnz	r0, 8008642 <ES_WIFI_SendData+0x96>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 800861a:	491c      	ldr	r1, [pc, #112]	; (800868c <ES_WIFI_SendData+0xe0>)
 800861c:	4628      	mov	r0, r5
 800861e:	f01b f9f8 	bl	8023a12 <strstr>
 8008622:	b1c8      	cbz	r0, 8008658 <ES_WIFI_SendData+0xac>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8008624:	491a      	ldr	r1, [pc, #104]	; (8008690 <ES_WIFI_SendData+0xe4>)
 8008626:	481b      	ldr	r0, [pc, #108]	; (8008694 <ES_WIFI_SendData+0xe8>)
 8008628:	f240 7279 	movw	r2, #1913	; 0x779
 800862c:	f01b f808 	bl	8023640 <iprintf>
 8008630:	4819      	ldr	r0, [pc, #100]	; (8008698 <ES_WIFI_SendData+0xec>)
 8008632:	4629      	mov	r1, r5
 8008634:	f01b f804 	bl	8023640 <iprintf>
   DEBUG("P0 command failed\n"); 
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	f8a8 3000 	strh.w	r3, [r8]
 800863e:	2402      	movs	r4, #2
 8008640:	e00a      	b.n	8008658 <ES_WIFI_SendData+0xac>
        DEBUG("Send Data command failed\n");  
 8008642:	4913      	ldr	r1, [pc, #76]	; (8008690 <ES_WIFI_SendData+0xe4>)
 8008644:	4813      	ldr	r0, [pc, #76]	; (8008694 <ES_WIFI_SendData+0xe8>)
 8008646:	f240 727f 	movw	r2, #1919	; 0x77f
 800864a:	f01a fff9 	bl	8023640 <iprintf>
 800864e:	4813      	ldr	r0, [pc, #76]	; (800869c <ES_WIFI_SendData+0xf0>)
   DEBUG("P0 command failed\n"); 
 8008650:	f01b f892 	bl	8023778 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8008654:	2c02      	cmp	r4, #2
 8008656:	d0ef      	beq.n	8008638 <ES_WIFI_SendData+0x8c>
  }
  UNLOCK_WIFI();
  return ret;
}
 8008658:	4620      	mov	r0, r4
 800865a:	b003      	add	sp, #12
 800865c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n"); 
 8008660:	490b      	ldr	r1, [pc, #44]	; (8008690 <ES_WIFI_SendData+0xe4>)
 8008662:	480c      	ldr	r0, [pc, #48]	; (8008694 <ES_WIFI_SendData+0xe8>)
 8008664:	f240 7284 	movw	r2, #1924	; 0x784
 8008668:	f01a ffea 	bl	8023640 <iprintf>
 800866c:	480c      	ldr	r0, [pc, #48]	; (80086a0 <ES_WIFI_SendData+0xf4>)
 800866e:	e7ef      	b.n	8008650 <ES_WIFI_SendData+0xa4>
   DEBUG("P0 command failed\n"); 
 8008670:	4907      	ldr	r1, [pc, #28]	; (8008690 <ES_WIFI_SendData+0xe4>)
 8008672:	4808      	ldr	r0, [pc, #32]	; (8008694 <ES_WIFI_SendData+0xe8>)
 8008674:	f240 7289 	movw	r2, #1929	; 0x789
 8008678:	f01a ffe2 	bl	8023640 <iprintf>
 800867c:	4809      	ldr	r0, [pc, #36]	; (80086a4 <ES_WIFI_SendData+0xf8>)
 800867e:	e7e7      	b.n	8008650 <ES_WIFI_SendData+0xa4>
 8008680:	0802fcae 	.word	0x0802fcae
 8008684:	0802fe72 	.word	0x0802fe72
 8008688:	0802fe7a 	.word	0x0802fe7a
 800868c:	0802fe83 	.word	0x0802fe83
 8008690:	0802fd1c 	.word	0x0802fd1c
 8008694:	0802fd83 	.word	0x0802fd83
 8008698:	0802fe88 	.word	0x0802fe88
 800869c:	0802fea3 	.word	0x0802fea3
 80086a0:	0802febc 	.word	0x0802febc
 80086a4:	0802fece 	.word	0x0802fece

080086a8 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 80086a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80086ac:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 80086b0:	4606      	mov	r6, r0
 80086b2:	4692      	mov	sl, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80086b4:	4628      	mov	r0, r5
 80086b6:	460a      	mov	r2, r1
 80086b8:	493f      	ldr	r1, [pc, #252]	; (80087b8 <ES_WIFI_SendDataTo+0x110>)
{
 80086ba:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80086be:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80086c2:	461f      	mov	r7, r3
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80086c4:	f01b f8da 	bl	802387c <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086c8:	462a      	mov	r2, r5
 80086ca:	4629      	mov	r1, r5
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff fc97 	bl	8008000 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80086d2:	4604      	mov	r4, r0
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d15a      	bne.n	800878e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 80086d8:	4938      	ldr	r1, [pc, #224]	; (80087bc <ES_WIFI_SendDataTo+0x114>)
 80086da:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 80086de:	4628      	mov	r0, r5
 80086e0:	f01b f8cc 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80086e4:	462a      	mov	r2, r5
 80086e6:	4629      	mov	r1, r5
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7ff fc89 	bl	8008000 <AT_ExecuteCommand>
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 80086ee:	4604      	mov	r4, r0
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d14c      	bne.n	800878e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 80086f4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80086f8:	4931      	ldr	r1, [pc, #196]	; (80087c0 <ES_WIFI_SendDataTo+0x118>)
 80086fa:	4628      	mov	r0, r5
 80086fc:	f01b f8be 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008700:	462a      	mov	r2, r5
 8008702:	4629      	mov	r1, r5
 8008704:	4630      	mov	r0, r6
 8008706:	f7ff fc7b 	bl	8008000 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 800870a:	4604      	mov	r4, r0
 800870c:	2800      	cmp	r0, #0
 800870e:	d13e      	bne.n	800878e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8008710:	f899 3003 	ldrb.w	r3, [r9, #3]
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	f899 3002 	ldrb.w	r3, [r9, #2]
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008720:	f899 2000 	ldrb.w	r2, [r9]
 8008724:	4927      	ldr	r1, [pc, #156]	; (80087c4 <ES_WIFI_SendDataTo+0x11c>)
 8008726:	4628      	mov	r0, r5
 8008728:	f01b f8a8 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800872c:	462a      	mov	r2, r5
 800872e:	4629      	mov	r1, r5
 8008730:	4630      	mov	r0, r6
 8008732:	f7ff fc65 	bl	8008000 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008736:	4604      	mov	r4, r0
 8008738:	bb48      	cbnz	r0, 800878e <ES_WIFI_SendDataTo+0xe6>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 800873a:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", Timeout);
 800873e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008740:	4921      	ldr	r1, [pc, #132]	; (80087c8 <ES_WIFI_SendDataTo+0x120>)
 8008742:	4628      	mov	r0, r5
 8008744:	bf28      	it	cs
 8008746:	f44f 6796 	movcs.w	r7, #1200	; 0x4b0
 800874a:	f01b f897 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800874e:	462a      	mov	r2, r5
 8008750:	4629      	mov	r1, r5
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff fc54 	bl	8008000 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008758:	4604      	mov	r4, r0
 800875a:	b9c0      	cbnz	r0, 800878e <ES_WIFI_SendDataTo+0xe6>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 800875c:	491b      	ldr	r1, [pc, #108]	; (80087cc <ES_WIFI_SendDataTo+0x124>)
 800875e:	463a      	mov	r2, r7
 8008760:	4628      	mov	r0, r5
 8008762:	f01b f88b 	bl	802387c <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8008766:	9500      	str	r5, [sp, #0]
 8008768:	463b      	mov	r3, r7
 800876a:	4652      	mov	r2, sl
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff fcd0 	bl	8008114 <AT_RequestSendData>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008774:	4604      	mov	r4, r0
 8008776:	b950      	cbnz	r0, 800878e <ES_WIFI_SendDataTo+0xe6>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8008778:	4915      	ldr	r1, [pc, #84]	; (80087d0 <ES_WIFI_SendDataTo+0x128>)
 800877a:	4628      	mov	r0, r5
 800877c:	f01b f949 	bl	8023a12 <strstr>
    if(ptr != NULL)
 8008780:	b198      	cbz	r0, 80087aa <ES_WIFI_SendDataTo+0x102>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8008782:	f506 64d4 	add.w	r4, r6, #1696	; 0x6a0
      {
        ret = ES_WIFI_STATUS_ERROR;
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8008786:	42a0      	cmp	r0, r4
 8008788:	bf34      	ite	cc
 800878a:	2402      	movcc	r4, #2
 800878c:	2404      	movcs	r4, #4
  {
    *SentLen = Reqlen;
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
 800878e:	4911      	ldr	r1, [pc, #68]	; (80087d4 <ES_WIFI_SendDataTo+0x12c>)
 8008790:	4811      	ldr	r0, [pc, #68]	; (80087d8 <ES_WIFI_SendDataTo+0x130>)
 8008792:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8008796:	f01a ff53 	bl	8023640 <iprintf>
 800879a:	4810      	ldr	r0, [pc, #64]	; (80087dc <ES_WIFI_SendDataTo+0x134>)
 800879c:	4629      	mov	r1, r5
 800879e:	f01a ff4f 	bl	8023640 <iprintf>
    *SentLen = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f8a8 3000 	strh.w	r3, [r8]
 80087a8:	e001      	b.n	80087ae <ES_WIFI_SendDataTo+0x106>
    *SentLen = Reqlen;
 80087aa:	f8a8 7000 	strh.w	r7, [r8]
  }

  UNLOCK_WIFI();
  return ret;
}
 80087ae:	4620      	mov	r0, r4
 80087b0:	b002      	add	sp, #8
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	bf00      	nop
 80087b8:	0802fcae 	.word	0x0802fcae
 80087bc:	0802fcbc 	.word	0x0802fcbc
 80087c0:	0802fcc3 	.word	0x0802fcc3
 80087c4:	0802fcd0 	.word	0x0802fcd0
 80087c8:	0802fe72 	.word	0x0802fe72
 80087cc:	0802fe7a 	.word	0x0802fe7a
 80087d0:	0802fe83 	.word	0x0802fe83
 80087d4:	0802fd1c 	.word	0x0802fd1c
 80087d8:	0802fd83 	.word	0x0802fd83
 80087dc:	0802fee0 	.word	0x0802fee0

080087e0 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 80087e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80087e4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 80087e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80087ec:	4606      	mov	r6, r0
 80087ee:	4690      	mov	r8, r2
 80087f0:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80087f2:	d864      	bhi.n	80088be <ES_WIFI_ReceiveData+0xde>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80087f4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80087f8:	460a      	mov	r2, r1
 80087fa:	4628      	mov	r0, r5
 80087fc:	4931      	ldr	r1, [pc, #196]	; (80088c4 <ES_WIFI_ReceiveData+0xe4>)
 80087fe:	f01b f83d 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008802:	462a      	mov	r2, r5
 8008804:	4629      	mov	r1, r5
 8008806:	4630      	mov	r0, r6
 8008808:	f7ff fbfa 	bl	8008000 <AT_ExecuteCommand>
 800880c:	4604      	mov	r4, r0
 800880e:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 8008810:	2800      	cmp	r0, #0
 8008812:	d146      	bne.n	80088a2 <ES_WIFI_ReceiveData+0xc2>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008814:	492c      	ldr	r1, [pc, #176]	; (80088c8 <ES_WIFI_ReceiveData+0xe8>)
 8008816:	463a      	mov	r2, r7
 8008818:	4628      	mov	r0, r5
 800881a:	f01b f82f 	bl	802387c <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800881e:	462a      	mov	r2, r5
 8008820:	4629      	mov	r1, r5
 8008822:	4630      	mov	r0, r6
 8008824:	f7ff fbec 	bl	8008000 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8008828:	4604      	mov	r4, r0
 800882a:	bb70      	cbnz	r0, 800888a <ES_WIFI_ReceiveData+0xaa>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 800882c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800882e:	4927      	ldr	r1, [pc, #156]	; (80088cc <ES_WIFI_ReceiveData+0xec>)
 8008830:	4628      	mov	r0, r5
 8008832:	f01b f823 	bl	802387c <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008836:	462a      	mov	r2, r5
 8008838:	4629      	mov	r1, r5
 800883a:	4630      	mov	r0, r6
 800883c:	f7ff fbe0 	bl	8008000 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8008840:	4604      	mov	r4, r0
 8008842:	b9d0      	cbnz	r0, 800887a <ES_WIFI_ReceiveData+0x9a>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8008844:	4922      	ldr	r1, [pc, #136]	; (80088d0 <ES_WIFI_ReceiveData+0xf0>)
 8008846:	4628      	mov	r0, r5
 8008848:	f01b f8b6 	bl	80239b8 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800884c:	f8cd 9000 	str.w	r9, [sp]
 8008850:	463b      	mov	r3, r7
 8008852:	4642      	mov	r2, r8
 8008854:	4629      	mov	r1, r5
 8008856:	4630      	mov	r0, r6
 8008858:	f7ff fc0a 	bl	8008070 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 800885c:	4604      	mov	r4, r0
 800885e:	b140      	cbz	r0, 8008872 <ES_WIFI_ReceiveData+0x92>
          {
            DEBUG("AT_RequestReceiveData  failed\n"); 
 8008860:	491c      	ldr	r1, [pc, #112]	; (80088d4 <ES_WIFI_ReceiveData+0xf4>)
 8008862:	481d      	ldr	r0, [pc, #116]	; (80088d8 <ES_WIFI_ReceiveData+0xf8>)
 8008864:	f640 0202 	movw	r2, #2050	; 0x802
 8008868:	f01a feea 	bl	8023640 <iprintf>
 800886c:	481b      	ldr	r0, [pc, #108]	; (80088dc <ES_WIFI_ReceiveData+0xfc>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n"); 
 800886e:	f01a ff83 	bl	8023778 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8008872:	4620      	mov	r0, r4
 8008874:	b002      	add	sp, #8
 8008876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n"); 
 800887a:	4916      	ldr	r1, [pc, #88]	; (80088d4 <ES_WIFI_ReceiveData+0xf4>)
 800887c:	4816      	ldr	r0, [pc, #88]	; (80088d8 <ES_WIFI_ReceiveData+0xf8>)
 800887e:	f640 0207 	movw	r2, #2055	; 0x807
 8008882:	f01a fedd 	bl	8023640 <iprintf>
 8008886:	4816      	ldr	r0, [pc, #88]	; (80088e0 <ES_WIFI_ReceiveData+0x100>)
 8008888:	e7f1      	b.n	800886e <ES_WIFI_ReceiveData+0x8e>
        DEBUG("setting requested len failed\n"); 
 800888a:	4912      	ldr	r1, [pc, #72]	; (80088d4 <ES_WIFI_ReceiveData+0xf4>)
 800888c:	4812      	ldr	r0, [pc, #72]	; (80088d8 <ES_WIFI_ReceiveData+0xf8>)
 800888e:	f640 020c 	movw	r2, #2060	; 0x80c
 8008892:	f01a fed5 	bl	8023640 <iprintf>
 8008896:	4813      	ldr	r0, [pc, #76]	; (80088e4 <ES_WIFI_ReceiveData+0x104>)
 8008898:	f01a ff6e 	bl	8023778 <puts>
        *Receivedlen = 0;
 800889c:	f8a9 a000 	strh.w	sl, [r9]
 80088a0:	e7e7      	b.n	8008872 <ES_WIFI_ReceiveData+0x92>
      DEBUG("setting socket for read failed\n"); 
 80088a2:	f640 0212 	movw	r2, #2066	; 0x812
 80088a6:	490b      	ldr	r1, [pc, #44]	; (80088d4 <ES_WIFI_ReceiveData+0xf4>)
 80088a8:	480b      	ldr	r0, [pc, #44]	; (80088d8 <ES_WIFI_ReceiveData+0xf8>)
 80088aa:	f01a fec9 	bl	8023640 <iprintf>
 80088ae:	480e      	ldr	r0, [pc, #56]	; (80088e8 <ES_WIFI_ReceiveData+0x108>)
 80088b0:	f01a ff62 	bl	8023778 <puts>
      issue15++;
 80088b4:	4a0d      	ldr	r2, [pc, #52]	; (80088ec <ES_WIFI_ReceiveData+0x10c>)
 80088b6:	6813      	ldr	r3, [r2, #0]
 80088b8:	3301      	adds	r3, #1
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	e7d9      	b.n	8008872 <ES_WIFI_ReceiveData+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80088be:	2402      	movs	r4, #2
 80088c0:	e7d7      	b.n	8008872 <ES_WIFI_ReceiveData+0x92>
 80088c2:	bf00      	nop
 80088c4:	0802fcae 	.word	0x0802fcae
 80088c8:	0802fef0 	.word	0x0802fef0
 80088cc:	0802fef7 	.word	0x0802fef7
 80088d0:	0802feff 	.word	0x0802feff
 80088d4:	0802fd1c 	.word	0x0802fd1c
 80088d8:	0802fd83 	.word	0x0802fd83
 80088dc:	0802ff03 	.word	0x0802ff03
 80088e0:	0802ff21 	.word	0x0802ff21
 80088e4:	0802ff38 	.word	0x0802ff38
 80088e8:	0802ff55 	.word	0x0802ff55
 80088ec:	200010b8 	.word	0x200010b8

080088f0 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 80088f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088f4:	b089      	sub	sp, #36	; 0x24
 80088f6:	461f      	mov	r7, r3
 80088f8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
  *Receivedlen = 0;
 80088fc:	2300      	movs	r3, #0
  LOCK_WIFI();  

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 80088fe:	f5b7 6f96 	cmp.w	r7, #1200	; 0x4b0
{
 8008902:	4606      	mov	r6, r0
 8008904:	4691      	mov	r9, r2
  *Receivedlen = 0;
 8008906:	f8a8 3000 	strh.w	r3, [r8]
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 800890a:	f500 7594 	add.w	r5, r0, #296	; 0x128
 800890e:	d821      	bhi.n	8008954 <ES_WIFI_ReceiveDataFrom+0x64>
  {
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8008910:	460a      	mov	r2, r1
 8008912:	4628      	mov	r0, r5
 8008914:	496f      	ldr	r1, [pc, #444]	; (8008ad4 <ES_WIFI_ReceiveDataFrom+0x1e4>)
 8008916:	f01a ffb1 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800891a:	462a      	mov	r2, r5
 800891c:	4629      	mov	r1, r5
 800891e:	4630      	mov	r0, r6
 8008920:	f7ff fb6e 	bl	8008000 <AT_ExecuteCommand>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008924:	4604      	mov	r4, r0
 8008926:	b9b0      	cbnz	r0, 8008956 <ES_WIFI_ReceiveDataFrom+0x66>
  {
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8008928:	496b      	ldr	r1, [pc, #428]	; (8008ad8 <ES_WIFI_ReceiveDataFrom+0x1e8>)
 800892a:	463a      	mov	r2, r7
 800892c:	4628      	mov	r0, r5
 800892e:	f01a ffa5 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008932:	462a      	mov	r2, r5
 8008934:	4629      	mov	r1, r5
 8008936:	4630      	mov	r0, r6
 8008938:	f7ff fb62 	bl	8008000 <AT_ExecuteCommand>
  else
  {
    DEBUG("P0 failed.\n");
  }

  if(ret == ES_WIFI_STATUS_OK)
 800893c:	4604      	mov	r4, r0
 800893e:	b1a0      	cbz	r0, 800896a <ES_WIFI_ReceiveDataFrom+0x7a>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }
  else
  {
    DEBUG("R1 failed.\n");
 8008940:	4966      	ldr	r1, [pc, #408]	; (8008adc <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008942:	4867      	ldr	r0, [pc, #412]	; (8008ae0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008944:	f640 0238 	movw	r2, #2104	; 0x838
 8008948:	f01a fe7a 	bl	8023640 <iprintf>
 800894c:	4865      	ldr	r0, [pc, #404]	; (8008ae4 <ES_WIFI_ReceiveDataFrom+0x1f4>)
 800894e:	f01a ff13 	bl	8023778 <puts>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8008952:	e016      	b.n	8008982 <ES_WIFI_ReceiveDataFrom+0x92>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8008954:	2402      	movs	r4, #2
    DEBUG("P0 failed.\n");
 8008956:	4961      	ldr	r1, [pc, #388]	; (8008adc <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008958:	4861      	ldr	r0, [pc, #388]	; (8008ae0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 800895a:	f640 022e 	movw	r2, #2094	; 0x82e
 800895e:	f01a fe6f 	bl	8023640 <iprintf>
 8008962:	4861      	ldr	r0, [pc, #388]	; (8008ae8 <ES_WIFI_ReceiveDataFrom+0x1f8>)
 8008964:	f01a ff08 	bl	8023778 <puts>
  if(ret == ES_WIFI_STATUS_OK)
 8008968:	e7ea      	b.n	8008940 <ES_WIFI_ReceiveDataFrom+0x50>
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 800896a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800896c:	495f      	ldr	r1, [pc, #380]	; (8008aec <ES_WIFI_ReceiveDataFrom+0x1fc>)
 800896e:	4628      	mov	r0, r5
 8008970:	f01a ff84 	bl	802387c <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8008974:	462a      	mov	r2, r5
 8008976:	4629      	mov	r1, r5
 8008978:	4630      	mov	r0, r6
 800897a:	f7ff fb41 	bl	8008000 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800897e:	4604      	mov	r4, r0
 8008980:	b148      	cbz	r0, 8008996 <ES_WIFI_ReceiveDataFrom+0xa6>
    sprintf((char*)Obj->CmdData,"R0\r");
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
  }
  else
  {
    DEBUG("R2 failed.\n");
 8008982:	4956      	ldr	r1, [pc, #344]	; (8008adc <ES_WIFI_ReceiveDataFrom+0x1ec>)
 8008984:	4856      	ldr	r0, [pc, #344]	; (8008ae0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8008986:	f640 0242 	movw	r2, #2114	; 0x842
 800898a:	f01a fe59 	bl	8023640 <iprintf>
 800898e:	4858      	ldr	r0, [pc, #352]	; (8008af0 <ES_WIFI_ReceiveDataFrom+0x200>)
 8008990:	f01a fef2 	bl	8023778 <puts>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8008994:	e00d      	b.n	80089b2 <ES_WIFI_ReceiveDataFrom+0xc2>
    sprintf((char*)Obj->CmdData,"R0\r");
 8008996:	4957      	ldr	r1, [pc, #348]	; (8008af4 <ES_WIFI_ReceiveDataFrom+0x204>)
 8008998:	4628      	mov	r0, r5
 800899a:	f01b f80d 	bl	80239b8 <strcpy>
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800899e:	f8cd 8000 	str.w	r8, [sp]
 80089a2:	463b      	mov	r3, r7
 80089a4:	464a      	mov	r2, r9
 80089a6:	4629      	mov	r1, r5
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff fb61 	bl	8008070 <AT_RequestReceiveData>
  if (ret == ES_WIFI_STATUS_OK)
 80089ae:	4604      	mov	r4, r0
 80089b0:	b168      	cbz	r0, 80089ce <ES_WIFI_ReceiveDataFrom+0xde>
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
 80089b2:	494a      	ldr	r1, [pc, #296]	; (8008adc <ES_WIFI_ReceiveDataFrom+0x1ec>)
 80089b4:	484a      	ldr	r0, [pc, #296]	; (8008ae0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 80089b6:	f640 0262 	movw	r2, #2146	; 0x862
 80089ba:	f01a fe41 	bl	8023640 <iprintf>
 80089be:	484e      	ldr	r0, [pc, #312]	; (8008af8 <ES_WIFI_ReceiveDataFrom+0x208>)
 80089c0:	4629      	mov	r1, r5
 80089c2:	f01a fe3d 	bl	8023640 <iprintf>
    *Receivedlen = 0;
 80089c6:	2300      	movs	r3, #0
 80089c8:	f8a8 3000 	strh.w	r3, [r8]
 80089cc:	e044      	b.n	8008a58 <ES_WIFI_ReceiveDataFrom+0x168>
    if (*Receivedlen > Reqlen)
 80089ce:	f8b8 3000 	ldrh.w	r3, [r8]
 80089d2:	42bb      	cmp	r3, r7
 80089d4:	d90a      	bls.n	80089ec <ES_WIFI_ReceiveDataFrom+0xfc>
      DEBUG("AT_RequestReceiveData overflow\n.");
 80089d6:	4941      	ldr	r1, [pc, #260]	; (8008adc <ES_WIFI_ReceiveDataFrom+0x1ec>)
 80089d8:	4841      	ldr	r0, [pc, #260]	; (8008ae0 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 80089da:	f640 0249 	movw	r2, #2121	; 0x849
 80089de:	f01a fe2f 	bl	8023640 <iprintf>
 80089e2:	4846      	ldr	r0, [pc, #280]	; (8008afc <ES_WIFI_ReceiveDataFrom+0x20c>)
 80089e4:	f01a fe2c 	bl	8023640 <iprintf>
      ret = ES_WIFI_STATUS_ERROR;
 80089e8:	2402      	movs	r4, #2
 80089ea:	e7e2      	b.n	80089b2 <ES_WIFI_ReceiveDataFrom+0xc2>
      if (*Receivedlen > 0)
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d033      	beq.n	8008a58 <ES_WIFI_ReceiveDataFrom+0x168>
        sprintf((char*)Obj->CmdData,"P?\r");
 80089f0:	4943      	ldr	r1, [pc, #268]	; (8008b00 <ES_WIFI_ReceiveDataFrom+0x210>)
 80089f2:	4628      	mov	r0, r5
 80089f4:	f01a ffe0 	bl	80239b8 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80089f8:	462a      	mov	r2, r5
 80089fa:	4629      	mov	r1, r5
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff faff 	bl	8008000 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8008a02:	4604      	mov	r4, r0
 8008a04:	2800      	cmp	r0, #0
 8008a06:	d1d4      	bne.n	80089b2 <ES_WIFI_ReceiveDataFrom+0xc2>
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 8008a08:	4601      	mov	r1, r0
 8008a0a:	2214      	movs	r2, #20
 8008a0c:	a803      	add	r0, sp, #12
 8008a0e:	f019 fd13 	bl	8022438 <memset>
  ptr = strtok(pdata + 2, ",");
 8008a12:	f506 7095 	add.w	r0, r6, #298	; 0x12a
 8008a16:	493b      	ldr	r1, [pc, #236]	; (8008b04 <ES_WIFI_ReceiveDataFrom+0x214>)
    ptr = strtok(NULL, ",");
 8008a18:	4e3a      	ldr	r6, [pc, #232]	; (8008b04 <ES_WIFI_ReceiveDataFrom+0x214>)
  ptr = strtok(pdata + 2, ",");
 8008a1a:	f01b fe43 	bl	80246a4 <strtok>
  uint8_t num = 0;
 8008a1e:	4625      	mov	r5, r4
  while (ptr != NULL) {
 8008a20:	b198      	cbz	r0, 8008a4a <ES_WIFI_ReceiveDataFrom+0x15a>
    switch (num++) {
 8008a22:	2d09      	cmp	r5, #9
 8008a24:	d80b      	bhi.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
 8008a26:	e8df f005 	tbb	[pc, r5]
 8008a2a:	1b05      	.short	0x1b05
 8008a2c:	2e282620 	.word	0x2e282620
 8008a30:	46403a34 	.word	0x46403a34
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8008a34:	2100      	movs	r1, #0
 8008a36:	f7ff fa7b 	bl	8007f30 <ParseNumber>
 8008a3a:	f88d 000c 	strb.w	r0, [sp, #12]
    ptr = strtok(NULL, ",");
 8008a3e:	4631      	mov	r1, r6
 8008a40:	2000      	movs	r0, #0
 8008a42:	f01b fe2f 	bl	80246a4 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d13b      	bne.n	8008ac2 <ES_WIFI_ReceiveDataFrom+0x1d2>
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8008a4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a4c:	9a05      	ldr	r2, [sp, #20]
 8008a4e:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8008a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a52:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8008a56:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
}
 8008a58:	4620      	mov	r0, r4
 8008a5a:	b009      	add	sp, #36	; 0x24
 8008a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 8008a60:	f10d 010d 	add.w	r1, sp, #13
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008a64:	f7ff fab3 	bl	8007fce <ParseIP>
      break;
 8008a68:	e7e9      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f7ff fa60 	bl	8007f30 <ParseNumber>
 8008a70:	f8ad 0012 	strh.w	r0, [sp, #18]
      break;
 8008a74:	e7e3      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 8008a76:	a905      	add	r1, sp, #20
 8008a78:	e7f4      	b.n	8008a64 <ES_WIFI_ReceiveDataFrom+0x174>
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	f7ff fa58 	bl	8007f30 <ParseNumber>
 8008a80:	f8ad 0018 	strh.w	r0, [sp, #24]
      break;
 8008a84:	e7db      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 8008a86:	2100      	movs	r1, #0
 8008a88:	f7ff fa52 	bl	8007f30 <ParseNumber>
 8008a8c:	f88d 001a 	strb.w	r0, [sp, #26]
      break;
 8008a90:	e7d5      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 8008a92:	2100      	movs	r1, #0
 8008a94:	f7ff fa4c 	bl	8007f30 <ParseNumber>
 8008a98:	f88d 001b 	strb.w	r0, [sp, #27]
      break;
 8008a9c:	e7cf      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f7ff fa46 	bl	8007f30 <ParseNumber>
 8008aa4:	f88d 001c 	strb.w	r0, [sp, #28]
      break;
 8008aa8:	e7c9      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8008aaa:	2100      	movs	r1, #0
 8008aac:	f7ff fa40 	bl	8007f30 <ParseNumber>
 8008ab0:	f88d 001d 	strb.w	r0, [sp, #29]
      break;
 8008ab4:	e7c3      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	f7ff fa3a 	bl	8007f30 <ParseNumber>
 8008abc:	f88d 001e 	strb.w	r0, [sp, #30]
      break;
 8008ac0:	e7bd      	b.n	8008a3e <ES_WIFI_ReceiveDataFrom+0x14e>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8008ac2:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8008ac6:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8008ac8:	bf14      	ite	ne
 8008aca:	3501      	addne	r5, #1
      num++;
 8008acc:	3502      	addeq	r5, #2
 8008ace:	b2ed      	uxtb	r5, r5
 8008ad0:	e7a6      	b.n	8008a20 <ES_WIFI_ReceiveDataFrom+0x130>
 8008ad2:	bf00      	nop
 8008ad4:	0802fcae 	.word	0x0802fcae
 8008ad8:	0802fef0 	.word	0x0802fef0
 8008adc:	0802fd1c 	.word	0x0802fd1c
 8008ae0:	0802fd83 	.word	0x0802fd83
 8008ae4:	0802ff7f 	.word	0x0802ff7f
 8008ae8:	0802ff74 	.word	0x0802ff74
 8008aec:	0802fef7 	.word	0x0802fef7
 8008af0:	0802ff8a 	.word	0x0802ff8a
 8008af4:	0802feff 	.word	0x0802feff
 8008af8:	0802ffb6 	.word	0x0802ffb6
 8008afc:	0802ff95 	.word	0x0802ff95
 8008b00:	0802fdb7 	.word	0x0802fdb7
 8008b04:	080309f6 	.word	0x080309f6

08008b08 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b08:	490f      	ldr	r1, [pc, #60]	; (8008b48 <SystemInit+0x40>)
 8008b0a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008b0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <SystemInit+0x44>)
 8008b18:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b1a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008b22:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8008b2a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8008b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b3c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008b3e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECTOR_TABLE;
 8008b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b44:	608b      	str	r3, [r1, #8]

}
 8008b46:	4770      	bx	lr
 8008b48:	e000ed00 	.word	0xe000ed00
 8008b4c:	40021000 	.word	0x40021000

08008b50 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8008b50:	4770      	bx	lr
	...

08008b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b54:	b507      	push	{r0, r1, r2, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <HAL_InitTick+0x28>)
{
 8008b58:	9001      	str	r0, [sp, #4]
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8008b5a:	6818      	ldr	r0, [r3, #0]
 8008b5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b60:	fbb0 f0f3 	udiv	r0, r0, r3
 8008b64:	f000 f896 	bl	8008c94 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8008b68:	9901      	ldr	r1, [sp, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	f000 f840 	bl	8008bf4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8008b74:	2000      	movs	r0, #0
 8008b76:	b003      	add	sp, #12
 8008b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b7c:	20000590 	.word	0x20000590

08008b80 <HAL_Init>:
{
 8008b80:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b82:	2003      	movs	r0, #3
 8008b84:	f000 f824 	bl	8008bd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b88:	200f      	movs	r0, #15
 8008b8a:	f7ff ffe3 	bl	8008b54 <HAL_InitTick>
  HAL_MspInit();
 8008b8e:	f7ff ffdf 	bl	8008b50 <HAL_MspInit>
}
 8008b92:	2000      	movs	r0, #0
 8008b94:	bd08      	pop	{r3, pc}
	...

08008b98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8008b98:	4a02      	ldr	r2, [pc, #8]	; (8008ba4 <HAL_IncTick+0xc>)
 8008b9a:	6813      	ldr	r3, [r2, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	6013      	str	r3, [r2, #0]
}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	200019f4 	.word	0x200019f4

08008ba8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008ba8:	4b01      	ldr	r3, [pc, #4]	; (8008bb0 <HAL_GetTick+0x8>)
 8008baa:	6818      	ldr	r0, [r3, #0]
}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	200019f4 	.word	0x200019f4

08008bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008bb8:	f7ff fff6 	bl	8008ba8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008bbc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8008bbe:	4605      	mov	r5, r0
  {
    wait++;
 8008bc0:	bf18      	it	ne
 8008bc2:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8008bc4:	f7ff fff0 	bl	8008ba8 <HAL_GetTick>
 8008bc8:	1b43      	subs	r3, r0, r5
 8008bca:	42a3      	cmp	r3, r4
 8008bcc:	d3fa      	bcc.n	8008bc4 <HAL_Delay+0x10>
  {
  }
}
 8008bce:	bd38      	pop	{r3, r4, r5, pc}

08008bd0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bd0:	4907      	ldr	r1, [pc, #28]	; (8008bf0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008bd2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008bd8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bda:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008bdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008be0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008bec:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008bee:	4770      	bx	lr
 8008bf0:	e000ed00 	.word	0xe000ed00

08008bf4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008bf4:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008bf6:	b530      	push	{r4, r5, lr}
 8008bf8:	68dc      	ldr	r4, [r3, #12]
 8008bfa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bfe:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c02:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c04:	2d04      	cmp	r5, #4
 8008c06:	bf28      	it	cs
 8008c08:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c0a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c10:	bf8c      	ite	hi
 8008c12:	3c03      	subhi	r4, #3
 8008c14:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c16:	fa03 f505 	lsl.w	r5, r3, r5
 8008c1a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c1e:	40a3      	lsls	r3, r4
 8008c20:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c24:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8008c26:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c28:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c2c:	bfac      	ite	ge
 8008c2e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c32:	4a08      	ldrlt	r2, [pc, #32]	; (8008c54 <HAL_NVIC_SetPriority+0x60>)
 8008c34:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008c38:	bfb8      	it	lt
 8008c3a:	f000 000f 	andlt.w	r0, r0, #15
 8008c3e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c40:	bfaa      	itet	ge
 8008c42:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c46:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c48:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008c4c:	bd30      	pop	{r4, r5, pc}
 8008c4e:	bf00      	nop
 8008c50:	e000ed00 	.word	0xe000ed00
 8008c54:	e000ed14 	.word	0xe000ed14

08008c58 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008c58:	0942      	lsrs	r2, r0, #5
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f000 001f 	and.w	r0, r0, #31
 8008c60:	fa03 f000 	lsl.w	r0, r3, r0
 8008c64:	4b01      	ldr	r3, [pc, #4]	; (8008c6c <HAL_NVIC_EnableIRQ+0x14>)
 8008c66:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008c6a:	4770      	bx	lr
 8008c6c:	e000e100 	.word	0xe000e100

08008c70 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008c70:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008c74:	4905      	ldr	r1, [pc, #20]	; (8008c8c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008c78:	68ca      	ldr	r2, [r1, #12]
 8008c7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60cb      	str	r3, [r1, #12]
 8008c82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <HAL_NVIC_SystemReset+0x16>
 8008c8a:	bf00      	nop
 8008c8c:	e000ed00 	.word	0xe000ed00
 8008c90:	05fa0004 	.word	0x05fa0004

08008c94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c94:	3801      	subs	r0, #1
 8008c96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008c9a:	d20a      	bcs.n	8008cb2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c9e:	4a07      	ldr	r2, [pc, #28]	; (8008cbc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ca0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ca2:	21f0      	movs	r1, #240	; 0xf0
 8008ca4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ca8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008caa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008cb0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8008cb2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	e000e010 	.word	0xe000e010
 8008cbc:	e000ed00 	.word	0xe000ed00

08008cc0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8008cc0:	4770      	bx	lr

08008cc2 <HAL_SYSTICK_IRQHandler>:
{
 8008cc2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8008cc4:	f7ff fffc 	bl	8008cc0 <HAL_SYSTICK_Callback>
}
 8008cc8:	bd08      	pop	{r3, pc}

08008cca <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008cca:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008ccc:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8008cd0:	2a02      	cmp	r2, #2
 8008cd2:	d003      	beq.n	8008cdc <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8008cd8:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8008cda:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008cdc:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cde:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ce0:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8008ce2:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ce4:	f021 010e 	bic.w	r1, r1, #14
 8008ce8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008cea:	6811      	ldr	r1, [r2, #0]
 8008cec:	f021 0101 	bic.w	r1, r1, #1
 8008cf0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008cf2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8008cfa:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8008cfc:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8008cfe:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008d02:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8008d06:	b113      	cbz	r3, 8008d0e <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8008d08:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	e7e5      	b.n	8008cda <HAL_DMA_Abort_IT+0x10>
 8008d0e:	4618      	mov	r0, r3
 8008d10:	e7e3      	b.n	8008cda <HAL_DMA_Abort_IT+0x10>
	...

08008d14 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))
 8008d14:	4b32      	ldr	r3, [pc, #200]	; (8008de0 <FLASH_SetErrorCode+0xcc>)
 8008d16:	691a      	ldr	r2, [r3, #16]
 8008d18:	0792      	lsls	r2, r2, #30
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OP;
 8008d1a:	bf41      	itttt	mi
 8008d1c:	4931      	ldrmi	r1, [pc, #196]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d1e:	684a      	ldrmi	r2, [r1, #4]
 8008d20:	f042 0201 	orrmi.w	r2, r2, #1
 8008d24:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR))
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	071b      	lsls	r3, r3, #28
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008d2a:	bf41      	itttt	mi
 8008d2c:	4a2d      	ldrmi	r2, [pc, #180]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d2e:	6853      	ldrmi	r3, [r2, #4]
 8008d30:	f043 0302 	orrmi.w	r3, r3, #2
 8008d34:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008d36:	4b2a      	ldr	r3, [pc, #168]	; (8008de0 <FLASH_SetErrorCode+0xcc>)
 8008d38:	691a      	ldr	r2, [r3, #16]
 8008d3a:	06d0      	lsls	r0, r2, #27
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008d3c:	bf41      	itttt	mi
 8008d3e:	4929      	ldrmi	r1, [pc, #164]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d40:	684a      	ldrmi	r2, [r1, #4]
 8008d42:	f042 0204 	orrmi.w	r2, r2, #4
 8008d46:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	0699      	lsls	r1, r3, #26
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008d4c:	bf41      	itttt	mi
 8008d4e:	4a25      	ldrmi	r2, [pc, #148]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d50:	6853      	ldrmi	r3, [r2, #4]
 8008d52:	f043 0308 	orrmi.w	r3, r3, #8
 8008d56:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8008d58:	4b21      	ldr	r3, [pc, #132]	; (8008de0 <FLASH_SetErrorCode+0xcc>)
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	0652      	lsls	r2, r2, #25
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZ;
 8008d5e:	bf41      	itttt	mi
 8008d60:	4920      	ldrmi	r1, [pc, #128]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d62:	684a      	ldrmi	r2, [r1, #4]
 8008d64:	f042 0210 	orrmi.w	r2, r2, #16
 8008d68:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	061b      	lsls	r3, r3, #24
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008d6e:	bf41      	itttt	mi
 8008d70:	4a1c      	ldrmi	r2, [pc, #112]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d72:	6853      	ldrmi	r3, [r2, #4]
 8008d74:	f043 0320 	orrmi.w	r3, r3, #32
 8008d78:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR))
 8008d7a:	4b19      	ldr	r3, [pc, #100]	; (8008de0 <FLASH_SetErrorCode+0xcc>)
 8008d7c:	691a      	ldr	r2, [r3, #16]
 8008d7e:	05d0      	lsls	r0, r2, #23
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_MIS;
 8008d80:	bf41      	itttt	mi
 8008d82:	4918      	ldrmi	r1, [pc, #96]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d84:	684a      	ldrmi	r2, [r1, #4]
 8008d86:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 8008d8a:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR))
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	0599      	lsls	r1, r3, #22
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_FAST;
 8008d90:	bf41      	itttt	mi
 8008d92:	4a14      	ldrmi	r2, [pc, #80]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008d94:	6853      	ldrmi	r3, [r2, #4]
 8008d96:	f043 0380 	orrmi.w	r3, r3, #128	; 0x80
 8008d9a:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8008d9c:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <FLASH_SetErrorCode+0xcc>)
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	0452      	lsls	r2, r2, #17
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008da2:	bf41      	itttt	mi
 8008da4:	490f      	ldrmi	r1, [pc, #60]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008da6:	684a      	ldrmi	r2, [r1, #4]
 8008da8:	f442 7280 	orrmi.w	r2, r2, #256	; 0x100
 8008dac:	604a      	strmi	r2, [r1, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	041b      	lsls	r3, r3, #16
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008db2:	bf41      	itttt	mi
 8008db4:	4a0b      	ldrmi	r2, [pc, #44]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008db6:	6853      	ldrmi	r3, [r2, #4]
 8008db8:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 8008dbc:	6053      	strmi	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8008dbe:	4b08      	ldr	r3, [pc, #32]	; (8008de0 <FLASH_SetErrorCode+0xcc>)
 8008dc0:	699a      	ldr	r2, [r3, #24]
 8008dc2:	2a00      	cmp	r2, #0
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_ECCD;
 8008dc4:	bfbf      	itttt	lt
 8008dc6:	4907      	ldrlt	r1, [pc, #28]	; (8008de4 <FLASH_SetErrorCode+0xd0>)
 8008dc8:	684a      	ldrlt	r2, [r1, #4]
 8008dca:	f442 6280 	orrlt.w	r2, r2, #1024	; 0x400
 8008dce:	604a      	strlt	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
  }
#endif
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8008dd0:	699a      	ldr	r2, [r3, #24]
 8008dd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008dd6:	619a      	str	r2, [r3, #24]
 8008dd8:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8008ddc:	611a      	str	r2, [r3, #16]
} 
 8008dde:	4770      	bx	lr
 8008de0:	40022000 	.word	0x40022000
 8008de4:	200019f8 	.word	0x200019f8

08008de8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008de8:	4a07      	ldr	r2, [pc, #28]	; (8008e08 <FLASH_Program_Fast+0x20>)
 8008dea:	6953      	ldr	r3, [r2, #20]
 8008dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008df0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008df2:	b672      	cpsid	i
}
 8008df4:	2300      	movs	r3, #0
  __disable_irq();
  
  /* Program the double word of the row */
  do
  {
    *dest_addr++ = *src_addr++;
 8008df6:	58ca      	ldr	r2, [r1, r3]
 8008df8:	50c2      	str	r2, [r0, r3]
  } while (--row_index != 0);
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e00:	d1f9      	bne.n	8008df6 <FLASH_Program_Fast+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8008e02:	b662      	cpsie	i

  /* Re-enable the interrupts */
  __enable_irq();
}
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40022000 	.word	0x40022000

08008e0c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <HAL_FLASH_Unlock+0x1c>)
 8008e0e:	695a      	ldr	r2, [r3, #20]
 8008e10:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008e12:	bfbf      	itttt	lt
 8008e14:	4a05      	ldrlt	r2, [pc, #20]	; (8008e2c <HAL_FLASH_Unlock+0x20>)
 8008e16:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008e18:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8008e1c:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008e1e:	bfba      	itte	lt
 8008e20:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8008e22:	0fc0      	lsrlt	r0, r0, #31
 8008e24:	2000      	movge	r0, #0
}
 8008e26:	4770      	bx	lr
 8008e28:	40022000 	.word	0x40022000
 8008e2c:	45670123 	.word	0x45670123

08008e30 <FLASH_WaitForLastOperation>:
{
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008e34:	f7ff feb8 	bl	8008ba8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008e38:	4c1e      	ldr	r4, [pc, #120]	; (8008eb4 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8008e3a:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	03d8      	lsls	r0, r3, #15
 8008e40:	d426      	bmi.n	8008e90 <FLASH_WaitForLastOperation+0x60>
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008e42:	6923      	ldr	r3, [r4, #16]
 8008e44:	0799      	lsls	r1, r3, #30
 8008e46:	d41f      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
 8008e48:	6923      	ldr	r3, [r4, #16]
 8008e4a:	071a      	lsls	r2, r3, #28
 8008e4c:	d41c      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008e4e:	6923      	ldr	r3, [r4, #16]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8008e50:	06db      	lsls	r3, r3, #27
 8008e52:	d419      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	069e      	lsls	r6, r3, #26
 8008e58:	d416      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008e5a:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8008e5c:	065d      	lsls	r5, r3, #25
 8008e5e:	d413      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008e60:	6923      	ldr	r3, [r4, #16]
 8008e62:	0618      	lsls	r0, r3, #24
 8008e64:	d410      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008e66:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8008e68:	05d9      	lsls	r1, r3, #23
 8008e6a:	d40d      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008e6c:	6923      	ldr	r3, [r4, #16]
 8008e6e:	059a      	lsls	r2, r3, #22
 8008e70:	d40a      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008e72:	6923      	ldr	r3, [r4, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8008e74:	045b      	lsls	r3, r3, #17
 8008e76:	d407      	bmi.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008e78:	490e      	ldr	r1, [pc, #56]	; (8008eb4 <FLASH_WaitForLastOperation+0x84>)
 8008e7a:	690a      	ldr	r2, [r1, #16]
 8008e7c:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8008e80:	d102      	bne.n	8008e88 <FLASH_WaitForLastOperation+0x58>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD)))
 8008e82:	698b      	ldr	r3, [r1, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	da0c      	bge.n	8008ea2 <FLASH_WaitForLastOperation+0x72>
    FLASH_SetErrorCode();
 8008e88:	f7ff ff44 	bl	8008d14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008e8c:	2001      	movs	r0, #1
}
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8008e90:	1c6b      	adds	r3, r5, #1
 8008e92:	d0d3      	beq.n	8008e3c <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8008e94:	f7ff fe88 	bl	8008ba8 <HAL_GetTick>
 8008e98:	1b80      	subs	r0, r0, r6
 8008e9a:	42a8      	cmp	r0, r5
 8008e9c:	d3ce      	bcc.n	8008e3c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8008e9e:	2003      	movs	r0, #3
 8008ea0:	e7f5      	b.n	8008e8e <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008ea2:	6908      	ldr	r0, [r1, #16]
 8008ea4:	f010 0001 	ands.w	r0, r0, #1
 8008ea8:	d0f1      	beq.n	8008e8e <FLASH_WaitForLastOperation+0x5e>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008eaa:	2301      	movs	r3, #1
 8008eac:	610b      	str	r3, [r1, #16]
  return HAL_OK;  
 8008eae:	4610      	mov	r0, r2
 8008eb0:	e7ed      	b.n	8008e8e <FLASH_WaitForLastOperation+0x5e>
 8008eb2:	bf00      	nop
 8008eb4:	40022000 	.word	0x40022000

08008eb8 <HAL_FLASH_Program>:
{
 8008eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8008ebc:	4c24      	ldr	r4, [pc, #144]	; (8008f50 <HAL_FLASH_Program+0x98>)
{
 8008ebe:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8008ec0:	7823      	ldrb	r3, [r4, #0]
 8008ec2:	2b01      	cmp	r3, #1
{
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8008eca:	d03f      	beq.n	8008f4c <HAL_FLASH_Program+0x94>
 8008ecc:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008ece:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8008ed2:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008ed4:	f7ff ffac 	bl	8008e30 <FLASH_WaitForLastOperation>
 8008ed8:	4605      	mov	r5, r0
  if(status == HAL_OK)
 8008eda:	bb20      	cbnz	r0, 8008f26 <HAL_FLASH_Program+0x6e>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008edc:	4d1d      	ldr	r5, [pc, #116]	; (8008f54 <HAL_FLASH_Program+0x9c>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ede:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008ee0:	682a      	ldr	r2, [r5, #0]
 8008ee2:	f412 6280 	ands.w	r2, r2, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008ee6:	bf17      	itett	ne
 8008ee8:	682b      	ldrne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8008eea:	7722      	strbeq	r2, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8008eec:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8008ef0:	602b      	strne	r3, [r5, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8008ef2:	bf1c      	itt	ne
 8008ef4:	2302      	movne	r3, #2
 8008ef6:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008ef8:	b9d6      	cbnz	r6, 8008f30 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008efa:	696b      	ldr	r3, [r5, #20]
 8008efc:	f043 0301 	orr.w	r3, r3, #1
 8008f00:	616b      	str	r3, [r5, #20]
      prog_bit = FLASH_CR_PG;
 8008f02:	2601      	movs	r6, #1
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008f04:	f8c7 8000 	str.w	r8, [r7]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008f08:	f8c7 9004 	str.w	r9, [r7, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008f0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008f10:	f7ff ff8e 	bl	8008e30 <FLASH_WaitForLastOperation>
 8008f14:	4605      	mov	r5, r0
    if (prog_bit != 0)
 8008f16:	b126      	cbz	r6, 8008f22 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8008f18:	4a0e      	ldr	r2, [pc, #56]	; (8008f54 <HAL_FLASH_Program+0x9c>)
 8008f1a:	6953      	ldr	r3, [r2, #20]
 8008f1c:	ea23 0606 	bic.w	r6, r3, r6
 8008f20:	6156      	str	r6, [r2, #20]
    FLASH_FlushCaches();
 8008f22:	f000 f851 	bl	8008fc8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008f26:	2300      	movs	r3, #0
 8008f28:	7023      	strb	r3, [r4, #0]
}
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8008f30:	1e73      	subs	r3, r6, #1
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d901      	bls.n	8008f3a <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8008f36:	2600      	movs	r6, #0
 8008f38:	e7e8      	b.n	8008f0c <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	4638      	mov	r0, r7
 8008f3e:	f7ff ff53 	bl	8008de8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8008f42:	2e02      	cmp	r6, #2
 8008f44:	d1f7      	bne.n	8008f36 <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8008f46:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 8008f4a:	e7df      	b.n	8008f0c <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8008f4c:	2502      	movs	r5, #2
 8008f4e:	e7ec      	b.n	8008f2a <HAL_FLASH_Program+0x72>
 8008f50:	200019f8 	.word	0x200019f8
 8008f54:	40022000 	.word	0x40022000

08008f58 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != RESET)
 8008f58:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <FLASH_MassErase+0x28>)
 8008f5a:	f010 0f01 	tst.w	r0, #1
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8008f5e:	bf1e      	ittt	ne
 8008f60:	695a      	ldrne	r2, [r3, #20]
 8008f62:	f042 0204 	orrne.w	r2, r2, #4
 8008f66:	615a      	strne	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != RESET)
 8008f68:	0782      	lsls	r2, r0, #30
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8008f6a:	bf42      	ittt	mi
 8008f6c:	695a      	ldrmi	r2, [r3, #20]
 8008f6e:	f442 4200 	orrmi.w	r2, r2, #32768	; 0x8000
 8008f72:	615a      	strmi	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008f74:	4a02      	ldr	r2, [pc, #8]	; (8008f80 <FLASH_MassErase+0x28>)
 8008f76:	6953      	ldr	r3, [r2, #20]
 8008f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f7c:	6153      	str	r3, [r2, #20]
}
 8008f7e:	4770      	bx	lr
 8008f80:	40022000 	.word	0x40022000

08008f84 <FLASH_PageErase>:
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != RESET)
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <FLASH_PageErase+0x40>)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008f86:	695a      	ldr	r2, [r3, #20]
    if((Banks & FLASH_BANK_1) != RESET)
 8008f88:	f011 0f01 	tst.w	r1, #1
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8008f8c:	bf14      	ite	ne
 8008f8e:	f422 6200 	bicne.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8008f92:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8008f96:	615a      	str	r2, [r3, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (Page << POSITION_VAL(FLASH_CR_PNB)));
 8008f98:	695a      	ldr	r2, [r3, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9a:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8008f9e:	fa91 f1a1 	rbit	r1, r1
 8008fa2:	fab1 f181 	clz	r1, r1
 8008fa6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8008faa:	4088      	lsls	r0, r1
 8008fac:	4310      	orrs	r0, r2
 8008fae:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8008fb0:	695a      	ldr	r2, [r3, #20]
 8008fb2:	f042 0202 	orr.w	r2, r2, #2
 8008fb6:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008fbe:	615a      	str	r2, [r3, #20]
}
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	40022000 	.word	0x40022000

08008fc8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8008fc8:	4b14      	ldr	r3, [pc, #80]	; (800901c <FLASH_FlushCaches+0x54>)
 8008fca:	7f1a      	ldrb	r2, [r3, #28]
 8008fcc:	2a01      	cmp	r2, #1
 8008fce:	d002      	beq.n	8008fd6 <FLASH_FlushCaches+0xe>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8008fd0:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8008fd2:	2a03      	cmp	r2, #3
 8008fd4:	d10c      	bne.n	8008ff0 <FLASH_FlushCaches+0x28>
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008fd6:	4a12      	ldr	r2, [pc, #72]	; (8009020 <FLASH_FlushCaches+0x58>)
 8008fd8:	6811      	ldr	r1, [r2, #0]
 8008fda:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8008fde:	6011      	str	r1, [r2, #0]
 8008fe0:	6811      	ldr	r1, [r2, #0]
 8008fe2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008fe6:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008fe8:	6811      	ldr	r1, [r2, #0]
 8008fea:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008fee:	6011      	str	r1, [r2, #0]
  }
  
  /* Flush data cache */
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8008ff0:	7f1a      	ldrb	r2, [r3, #28]
 8008ff2:	2a02      	cmp	r2, #2
 8008ff4:	d002      	beq.n	8008ffc <FLASH_FlushCaches+0x34>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8008ff6:	7f1a      	ldrb	r2, [r3, #28]
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8008ff8:	2a03      	cmp	r2, #3
 8008ffa:	d10c      	bne.n	8009016 <FLASH_FlushCaches+0x4e>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008ffc:	4a08      	ldr	r2, [pc, #32]	; (8009020 <FLASH_FlushCaches+0x58>)
 8008ffe:	6811      	ldr	r1, [r2, #0]
 8009000:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8009004:	6011      	str	r1, [r2, #0]
 8009006:	6811      	ldr	r1, [r2, #0]
 8009008:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800900c:	6011      	str	r1, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800900e:	6811      	ldr	r1, [r2, #0]
 8009010:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009014:	6011      	str	r1, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009016:	2200      	movs	r2, #0
 8009018:	771a      	strb	r2, [r3, #28]
}
 800901a:	4770      	bx	lr
 800901c:	200019f8 	.word	0x200019f8
 8009020:	40022000 	.word	0x40022000

08009024 <HAL_FLASHEx_Erase>:
{
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8009028:	4d35      	ldr	r5, [pc, #212]	; (8009100 <HAL_FLASHEx_Erase+0xdc>)
 800902a:	782b      	ldrb	r3, [r5, #0]
 800902c:	2b01      	cmp	r3, #1
{
 800902e:	4606      	mov	r6, r0
 8009030:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8009032:	d062      	beq.n	80090fa <HAL_FLASHEx_Erase+0xd6>
 8009034:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009036:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800903a:	702f      	strb	r7, [r5, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800903c:	f7ff fef8 	bl	8008e30 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8009040:	4604      	mov	r4, r0
 8009042:	bb40      	cbnz	r0, 8009096 <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009044:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009046:	6068      	str	r0, [r5, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800904e:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009050:	d026      	beq.n	80090a0 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009052:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009056:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	0551      	lsls	r1, r2, #21
 800905c:	d506      	bpl.n	800906c <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009064:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009066:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009068:	772b      	strb	r3, [r5, #28]
 800906a:	e000      	b.n	800906e <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800906c:	772f      	strb	r7, [r5, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800906e:	6833      	ldr	r3, [r6, #0]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d11f      	bne.n	80090b4 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 8009074:	6870      	ldr	r0, [r6, #4]
 8009076:	f7ff ff6f 	bl	8008f58 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800907a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800907e:	f7ff fed7 	bl	8008e30 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8009082:	4a20      	ldr	r2, [pc, #128]	; (8009104 <HAL_FLASHEx_Erase+0xe0>)
 8009084:	6953      	ldr	r3, [r2, #20]
 8009086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800908a:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800908e:	4604      	mov	r4, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8009090:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 8009092:	f7ff ff99 	bl	8008fc8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8009096:	2300      	movs	r3, #0
 8009098:	702b      	strb	r3, [r5, #0]
}
 800909a:	4620      	mov	r0, r4
 800909c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80090a0:	0552      	lsls	r2, r2, #21
 80090a2:	d505      	bpl.n	80090b0 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090aa:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80090ac:	2302      	movs	r3, #2
 80090ae:	e7db      	b.n	8009068 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80090b0:	7728      	strb	r0, [r5, #28]
 80090b2:	e7dc      	b.n	800906e <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFF;
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295
 80090b8:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80090bc:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80090be:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009104 <HAL_FLASHEx_Erase+0xe0>
 80090c2:	f8df a044 	ldr.w	sl, [pc, #68]	; 8009108 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80090c6:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 80090ca:	4413      	add	r3, r2
 80090cc:	42bb      	cmp	r3, r7
 80090ce:	d9e0      	bls.n	8009092 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80090d0:	6871      	ldr	r1, [r6, #4]
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7ff ff56 	bl	8008f84 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80090dc:	f7ff fea8 	bl	8008e30 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80090e0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80090e4:	ea03 030a 	and.w	r3, r3, sl
 80090e8:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80090ec:	b118      	cbz	r0, 80090f6 <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80090ee:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090f2:	4604      	mov	r4, r0
          break;
 80090f4:	e7cd      	b.n	8009092 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80090f6:	3701      	adds	r7, #1
 80090f8:	e7e5      	b.n	80090c6 <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80090fa:	2402      	movs	r4, #2
 80090fc:	e7cd      	b.n	800909a <HAL_FLASHEx_Erase+0x76>
 80090fe:	bf00      	nop
 8009100:	200019f8 	.word	0x200019f8
 8009104:	40022000 	.word	0x40022000
 8009108:	fffff805 	.word	0xfffff805

0800910c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800910c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009110:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009114:	4d69      	ldr	r5, [pc, #420]	; (80092bc <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00;
 8009116:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8009118:	680a      	ldr	r2, [r1, #0]
 800911a:	fa32 f403 	lsrs.w	r4, r2, r3
 800911e:	d102      	bne.n	8009126 <HAL_GPIO_Init+0x1a>
      }
    }
    
    position++;
  }
}
 8009120:	b003      	add	sp, #12
 8009122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009126:	2601      	movs	r6, #1
 8009128:	409e      	lsls	r6, r3
    if(iocurrent)
 800912a:	4032      	ands	r2, r6
 800912c:	f000 80b7 	beq.w	800929e <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009130:	684c      	ldr	r4, [r1, #4]
 8009132:	f024 0e10 	bic.w	lr, r4, #16
 8009136:	f1be 0f02 	cmp.w	lr, #2
 800913a:	d116      	bne.n	800916a <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 800913c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8009140:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009144:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8009148:	f8d9 7020 	ldr.w	r7, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800914c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8009150:	f04f 0c0f 	mov.w	ip, #15
 8009154:	fa0c fc0a 	lsl.w	ip, ip, sl
 8009158:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800915c:	690f      	ldr	r7, [r1, #16]
 800915e:	fa07 f70a 	lsl.w	r7, r7, sl
 8009162:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8009166:	f8c9 7020 	str.w	r7, [r9, #32]
      temp = GPIOx->MODER;
 800916a:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800916e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009172:	f04f 0b03 	mov.w	fp, #3
 8009176:	fa0b f70c 	lsl.w	r7, fp, ip
 800917a:	ea2a 0b07 	bic.w	fp, sl, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800917e:	f004 0a03 	and.w	sl, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8009182:	ea6f 0907 	mvn.w	r9, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009186:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800918a:	fa0a f70c 	lsl.w	r7, sl, ip
 800918e:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009192:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8009196:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009198:	d811      	bhi.n	80091be <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800919a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 800919c:	ea09 0e07 	and.w	lr, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80091a0:	68cf      	ldr	r7, [r1, #12]
 80091a2:	fa07 f70c 	lsl.w	r7, r7, ip
 80091a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80091aa:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80091ac:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80091ae:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80091b2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80091b6:	409f      	lsls	r7, r3
 80091b8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80091bc:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80091be:	f1ba 0f03 	cmp.w	sl, #3
 80091c2:	d107      	bne.n	80091d4 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 80091c4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80091c6:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80091ca:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 80091ce:	409f      	lsls	r7, r3
 80091d0:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80091d2:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80091d4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80091d6:	ea09 0906 	and.w	r9, r9, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80091da:	688e      	ldr	r6, [r1, #8]
 80091dc:	fa06 f60c 	lsl.w	r6, r6, ip
 80091e0:	ea46 0609 	orr.w	r6, r6, r9
      GPIOx->PUPDR = temp;
 80091e4:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091e6:	00e6      	lsls	r6, r4, #3
 80091e8:	d559      	bpl.n	800929e <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091ea:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80091ee:	f046 0601 	orr.w	r6, r6, #1
 80091f2:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 80091f6:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 80091fa:	f023 0703 	bic.w	r7, r3, #3
 80091fe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8009202:	f006 0601 	and.w	r6, r6, #1
 8009206:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800920a:	9601      	str	r6, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800920c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009210:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8009212:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009214:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8009218:	f04f 0c0f 	mov.w	ip, #15
 800921c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8009220:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009224:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8009228:	d03b      	beq.n	80092a2 <HAL_GPIO_Init+0x196>
 800922a:	4e25      	ldr	r6, [pc, #148]	; (80092c0 <HAL_GPIO_Init+0x1b4>)
 800922c:	42b0      	cmp	r0, r6
 800922e:	d03a      	beq.n	80092a6 <HAL_GPIO_Init+0x19a>
 8009230:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009234:	42b0      	cmp	r0, r6
 8009236:	d038      	beq.n	80092aa <HAL_GPIO_Init+0x19e>
 8009238:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800923c:	42b0      	cmp	r0, r6
 800923e:	d036      	beq.n	80092ae <HAL_GPIO_Init+0x1a2>
 8009240:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009244:	42b0      	cmp	r0, r6
 8009246:	d034      	beq.n	80092b2 <HAL_GPIO_Init+0x1a6>
 8009248:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800924c:	42b0      	cmp	r0, r6
 800924e:	d032      	beq.n	80092b6 <HAL_GPIO_Init+0x1aa>
 8009250:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009254:	42b0      	cmp	r0, r6
 8009256:	bf0c      	ite	eq
 8009258:	2606      	moveq	r6, #6
 800925a:	2607      	movne	r6, #7
 800925c:	fa06 f60e 	lsl.w	r6, r6, lr
 8009260:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8009264:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8009266:	682e      	ldr	r6, [r5, #0]
        temp &= ~((uint32_t)iocurrent);
 8009268:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800926a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800926e:	bf0c      	ite	eq
 8009270:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8009272:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8009274:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8009276:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009278:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800927c:	bf0c      	ite	eq
 800927e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8009280:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8009282:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8009284:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009286:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800928a:	bf0c      	ite	eq
 800928c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800928e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8009290:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8009292:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009294:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8009296:	bf54      	ite	pl
 8009298:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800929a:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 800929c:	60ee      	str	r6, [r5, #12]
    position++;
 800929e:	3301      	adds	r3, #1
 80092a0:	e73a      	b.n	8009118 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80092a2:	2600      	movs	r6, #0
 80092a4:	e7da      	b.n	800925c <HAL_GPIO_Init+0x150>
 80092a6:	2601      	movs	r6, #1
 80092a8:	e7d8      	b.n	800925c <HAL_GPIO_Init+0x150>
 80092aa:	2602      	movs	r6, #2
 80092ac:	e7d6      	b.n	800925c <HAL_GPIO_Init+0x150>
 80092ae:	2603      	movs	r6, #3
 80092b0:	e7d4      	b.n	800925c <HAL_GPIO_Init+0x150>
 80092b2:	2604      	movs	r6, #4
 80092b4:	e7d2      	b.n	800925c <HAL_GPIO_Init+0x150>
 80092b6:	2605      	movs	r6, #5
 80092b8:	e7d0      	b.n	800925c <HAL_GPIO_Init+0x150>
 80092ba:	bf00      	nop
 80092bc:	40010400 	.word	0x40010400
 80092c0:	48000400 	.word	0x48000400
 80092c4:	40021000 	.word	0x40021000

080092c8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80092c8:	6903      	ldr	r3, [r0, #16]
 80092ca:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80092cc:	bf14      	ite	ne
 80092ce:	2001      	movne	r0, #1
 80092d0:	2000      	moveq	r0, #0
 80092d2:	4770      	bx	lr

080092d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80092d4:	b10a      	cbz	r2, 80092da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80092d6:	6181      	str	r1, [r0, #24]
 80092d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80092da:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80092dc:	4770      	bx	lr

080092de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80092de:	6943      	ldr	r3, [r0, #20]
 80092e0:	4059      	eors	r1, r3
 80092e2:	6141      	str	r1, [r0, #20]
}
 80092e4:	4770      	bx	lr
	...

080092e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80092e8:	4a04      	ldr	r2, [pc, #16]	; (80092fc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80092ea:	6951      	ldr	r1, [r2, #20]
 80092ec:	4201      	tst	r1, r0
{
 80092ee:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80092f0:	d002      	beq.n	80092f8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092f2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092f4:	f7fa ffac 	bl	8004250 <HAL_GPIO_EXTI_Callback>
  }
}
 80092f8:	bd08      	pop	{r3, pc}
 80092fa:	bf00      	nop
 80092fc:	40010400 	.word	0x40010400

08009300 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009300:	6803      	ldr	r3, [r0, #0]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8009306:	bf44      	itt	mi
 8009308:	2200      	movmi	r2, #0
 800930a:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800930c:	699a      	ldr	r2, [r3, #24]
 800930e:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009310:	bf5e      	ittt	pl
 8009312:	699a      	ldrpl	r2, [r3, #24]
 8009314:	f042 0201 	orrpl.w	r2, r2, #1
 8009318:	619a      	strpl	r2, [r3, #24]
  }
}
 800931a:	4770      	bx	lr

0800931c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800931c:	b530      	push	{r4, r5, lr}
 800931e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8009320:	6804      	ldr	r4, [r0, #0]
 8009322:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 8009326:	431a      	orrs	r2, r3
 8009328:	4b05      	ldr	r3, [pc, #20]	; (8009340 <I2C_TransferConfig+0x24>)
 800932a:	6860      	ldr	r0, [r4, #4]
 800932c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009330:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8009334:	430a      	orrs	r2, r1
 8009336:	ea20 0003 	bic.w	r0, r0, r3
 800933a:	4302      	orrs	r2, r0
 800933c:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800933e:	bd30      	pop	{r4, r5, pc}
 8009340:	03ff63ff 	.word	0x03ff63ff

08009344 <I2C_WaitOnFlagUntilTimeout>:
{
 8009344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009348:	9f06      	ldr	r7, [sp, #24]
 800934a:	4604      	mov	r4, r0
 800934c:	4688      	mov	r8, r1
 800934e:	4616      	mov	r6, r2
 8009350:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	6993      	ldr	r3, [r2, #24]
 8009356:	ea38 0303 	bics.w	r3, r8, r3
 800935a:	bf0c      	ite	eq
 800935c:	2301      	moveq	r3, #1
 800935e:	2300      	movne	r3, #0
 8009360:	42b3      	cmp	r3, r6
 8009362:	d001      	beq.n	8009368 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8009364:	2000      	movs	r0, #0
 8009366:	e00b      	b.n	8009380 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8009368:	1c6b      	adds	r3, r5, #1
 800936a:	d0f3      	beq.n	8009354 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800936c:	b955      	cbnz	r5, 8009384 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 800936e:	2320      	movs	r3, #32
 8009370:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009374:	2300      	movs	r3, #0
 8009376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800937a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 800937e:	2003      	movs	r0, #3
}
 8009380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009384:	f7ff fc10 	bl	8008ba8 <HAL_GetTick>
 8009388:	1bc0      	subs	r0, r0, r7
 800938a:	42a8      	cmp	r0, r5
 800938c:	d9e1      	bls.n	8009352 <I2C_WaitOnFlagUntilTimeout+0xe>
 800938e:	e7ee      	b.n	800936e <I2C_WaitOnFlagUntilTimeout+0x2a>

08009390 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009390:	6803      	ldr	r3, [r0, #0]
{
 8009392:	b570      	push	{r4, r5, r6, lr}
 8009394:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009396:	6998      	ldr	r0, [r3, #24]
 8009398:	f010 0010 	ands.w	r0, r0, #16
{
 800939c:	460d      	mov	r5, r1
 800939e:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80093a0:	d112      	bne.n	80093c8 <I2C_IsAcknowledgeFailed+0x38>
}
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80093a4:	1c69      	adds	r1, r5, #1
 80093a6:	d010      	beq.n	80093ca <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80093a8:	b125      	cbz	r5, 80093b4 <I2C_IsAcknowledgeFailed+0x24>
 80093aa:	f7ff fbfd 	bl	8008ba8 <HAL_GetTick>
 80093ae:	1b80      	subs	r0, r0, r6
 80093b0:	4285      	cmp	r5, r0
 80093b2:	d209      	bcs.n	80093c8 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 80093b4:	2320      	movs	r3, #32
 80093b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ba:	2300      	movs	r3, #0
 80093bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80093c0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 80093c4:	2003      	movs	r0, #3
 80093c6:	e7ec      	b.n	80093a2 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	699a      	ldr	r2, [r3, #24]
 80093cc:	0692      	lsls	r2, r2, #26
 80093ce:	d5e9      	bpl.n	80093a4 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093d0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093d2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093d4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80093d6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093d8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80093da:	f7ff ff91 	bl	8009300 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	6853      	ldr	r3, [r2, #4]
 80093e2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80093e6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80093ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80093ee:	f023 0301 	bic.w	r3, r3, #1
 80093f2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80093f4:	2304      	movs	r3, #4
 80093f6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80093fa:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80093fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009402:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 8009406:	2001      	movs	r0, #1
 8009408:	e7cb      	b.n	80093a2 <I2C_IsAcknowledgeFailed+0x12>

0800940a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800940a:	b570      	push	{r4, r5, r6, lr}
 800940c:	4604      	mov	r4, r0
 800940e:	460d      	mov	r5, r1
 8009410:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	075b      	lsls	r3, r3, #29
 8009418:	d40e      	bmi.n	8009438 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800941a:	4632      	mov	r2, r6
 800941c:	4629      	mov	r1, r5
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff ffb6 	bl	8009390 <I2C_IsAcknowledgeFailed>
 8009424:	b9f0      	cbnz	r0, 8009464 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	0691      	lsls	r1, r2, #26
 800942c:	d51c      	bpl.n	8009468 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800942e:	699a      	ldr	r2, [r3, #24]
 8009430:	0752      	lsls	r2, r2, #29
 8009432:	d503      	bpl.n	800943c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8009434:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009436:	b10a      	cbz	r2, 800943c <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8009438:	2000      	movs	r0, #0
}
 800943a:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800943c:	2120      	movs	r1, #32
 800943e:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009446:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800944a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800944e:	f022 0201 	bic.w	r2, r2, #1
 8009452:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009454:	2300      	movs	r3, #0
 8009456:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009458:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 800945c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8009464:	2001      	movs	r0, #1
 8009466:	e7e8      	b.n	800943a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009468:	b95d      	cbnz	r5, 8009482 <I2C_WaitOnRXNEFlagUntilTimeout+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800946a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800946c:	f043 0320 	orr.w	r3, r3, #32
 8009470:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009472:	2320      	movs	r3, #32
 8009474:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8009478:	2300      	movs	r3, #0
 800947a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 800947e:	2003      	movs	r0, #3
 8009480:	e7db      	b.n	800943a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009482:	f7ff fb91 	bl	8008ba8 <HAL_GetTick>
 8009486:	1b80      	subs	r0, r0, r6
 8009488:	42a8      	cmp	r0, r5
 800948a:	d9c2      	bls.n	8009412 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 800948c:	e7ed      	b.n	800946a <I2C_WaitOnRXNEFlagUntilTimeout+0x60>

0800948e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	4604      	mov	r4, r0
 8009492:	460d      	mov	r5, r1
 8009494:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	079b      	lsls	r3, r3, #30
 800949c:	d501      	bpl.n	80094a2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800949e:	2000      	movs	r0, #0
 80094a0:	e015      	b.n	80094ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a2:	4632      	mov	r2, r6
 80094a4:	4629      	mov	r1, r5
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7ff ff72 	bl	8009390 <I2C_IsAcknowledgeFailed>
 80094ac:	b9b0      	cbnz	r0, 80094dc <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80094ae:	1c6a      	adds	r2, r5, #1
 80094b0:	d0f1      	beq.n	8009496 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094b2:	b96d      	cbnz	r5, 80094d0 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80094b6:	f043 0320 	orr.w	r3, r3, #32
 80094ba:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094bc:	2320      	movs	r3, #32
 80094be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80094c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80094cc:	2003      	movs	r0, #3
}
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094d0:	f7ff fb6a 	bl	8008ba8 <HAL_GetTick>
 80094d4:	1b80      	subs	r0, r0, r6
 80094d6:	42a8      	cmp	r0, r5
 80094d8:	d9dd      	bls.n	8009496 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 80094da:	e7eb      	b.n	80094b4 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 80094dc:	2001      	movs	r0, #1
 80094de:	e7f6      	b.n	80094ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>

080094e0 <I2C_RequestMemoryWrite>:
{
 80094e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80094e4:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 80094e8:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094ea:	4b19      	ldr	r3, [pc, #100]	; (8009550 <I2C_RequestMemoryWrite+0x70>)
 80094ec:	9300      	str	r3, [sp, #0]
{
 80094ee:	4604      	mov	r4, r0
 80094f0:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094f6:	b2f2      	uxtb	r2, r6
 80094f8:	f7ff ff10 	bl	800931c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094fc:	4642      	mov	r2, r8
 80094fe:	4639      	mov	r1, r7
 8009500:	4620      	mov	r0, r4
 8009502:	f7ff ffc4 	bl	800948e <I2C_WaitOnTXISFlagUntilTimeout>
 8009506:	b140      	cbz	r0, 800951a <I2C_RequestMemoryWrite+0x3a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009508:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800950a:	2b04      	cmp	r3, #4
 800950c:	d003      	beq.n	8009516 <I2C_RequestMemoryWrite+0x36>
      return HAL_TIMEOUT;
 800950e:	2003      	movs	r0, #3
}
 8009510:	b002      	add	sp, #8
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8009516:	2001      	movs	r0, #1
 8009518:	e7fa      	b.n	8009510 <I2C_RequestMemoryWrite+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800951a:	2e01      	cmp	r6, #1
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	d10c      	bne.n	800953a <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009520:	b2ed      	uxtb	r5, r5
 8009522:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009524:	2200      	movs	r2, #0
 8009526:	f8cd 8000 	str.w	r8, [sp]
 800952a:	463b      	mov	r3, r7
 800952c:	2180      	movs	r1, #128	; 0x80
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff ff08 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009534:	2800      	cmp	r0, #0
 8009536:	d0eb      	beq.n	8009510 <I2C_RequestMemoryWrite+0x30>
 8009538:	e7e9      	b.n	800950e <I2C_RequestMemoryWrite+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800953a:	0a2a      	lsrs	r2, r5, #8
 800953c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800953e:	4639      	mov	r1, r7
 8009540:	4642      	mov	r2, r8
 8009542:	4620      	mov	r0, r4
 8009544:	f7ff ffa3 	bl	800948e <I2C_WaitOnTXISFlagUntilTimeout>
 8009548:	2800      	cmp	r0, #0
 800954a:	d1dd      	bne.n	8009508 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	e7e7      	b.n	8009520 <I2C_RequestMemoryWrite+0x40>
 8009550:	80002000 	.word	0x80002000

08009554 <I2C_RequestMemoryRead>:
{
 8009554:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009558:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 800955c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800955e:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <I2C_RequestMemoryRead+0x70>)
 8009560:	9300      	str	r3, [sp, #0]
{
 8009562:	4604      	mov	r4, r0
 8009564:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009566:	2300      	movs	r3, #0
 8009568:	b2f2      	uxtb	r2, r6
 800956a:	f7ff fed7 	bl	800931c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800956e:	4642      	mov	r2, r8
 8009570:	4639      	mov	r1, r7
 8009572:	4620      	mov	r0, r4
 8009574:	f7ff ff8b 	bl	800948e <I2C_WaitOnTXISFlagUntilTimeout>
 8009578:	b140      	cbz	r0, 800958c <I2C_RequestMemoryRead+0x38>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800957a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800957c:	2b04      	cmp	r3, #4
 800957e:	d003      	beq.n	8009588 <I2C_RequestMemoryRead+0x34>
      return HAL_TIMEOUT;
 8009580:	2003      	movs	r0, #3
}
 8009582:	b002      	add	sp, #8
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8009588:	2001      	movs	r0, #1
 800958a:	e7fa      	b.n	8009582 <I2C_RequestMemoryRead+0x2e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800958c:	2e01      	cmp	r6, #1
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	d10c      	bne.n	80095ac <I2C_RequestMemoryRead+0x58>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009592:	b2ed      	uxtb	r5, r5
 8009594:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009596:	2200      	movs	r2, #0
 8009598:	f8cd 8000 	str.w	r8, [sp]
 800959c:	463b      	mov	r3, r7
 800959e:	2140      	movs	r1, #64	; 0x40
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7ff fecf 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0eb      	beq.n	8009582 <I2C_RequestMemoryRead+0x2e>
 80095aa:	e7e9      	b.n	8009580 <I2C_RequestMemoryRead+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095ac:	0a2a      	lsrs	r2, r5, #8
 80095ae:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095b0:	4639      	mov	r1, r7
 80095b2:	4642      	mov	r2, r8
 80095b4:	4620      	mov	r0, r4
 80095b6:	f7ff ff6a 	bl	800948e <I2C_WaitOnTXISFlagUntilTimeout>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d1dd      	bne.n	800957a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	e7e7      	b.n	8009592 <I2C_RequestMemoryRead+0x3e>
 80095c2:	bf00      	nop
 80095c4:	80002000 	.word	0x80002000

080095c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	4604      	mov	r4, r0
 80095cc:	460d      	mov	r5, r1
 80095ce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	069b      	lsls	r3, r3, #26
 80095d6:	d501      	bpl.n	80095dc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80095d8:	2000      	movs	r0, #0
 80095da:	e013      	b.n	8009604 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80095dc:	4632      	mov	r2, r6
 80095de:	4629      	mov	r1, r5
 80095e0:	4620      	mov	r0, r4
 80095e2:	f7ff fed5 	bl	8009390 <I2C_IsAcknowledgeFailed>
 80095e6:	b9a0      	cbnz	r0, 8009612 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095e8:	b96d      	cbnz	r5, 8009606 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80095ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80095ec:	f043 0320 	orr.w	r3, r3, #32
 80095f0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095f2:	2320      	movs	r3, #32
 80095f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80095fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009602:	2003      	movs	r0, #3
}
 8009604:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009606:	f7ff facf 	bl	8008ba8 <HAL_GetTick>
 800960a:	1b80      	subs	r0, r0, r6
 800960c:	42a8      	cmp	r0, r5
 800960e:	d9df      	bls.n	80095d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8009610:	e7eb      	b.n	80095ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8009612:	2001      	movs	r0, #1
 8009614:	e7f6      	b.n	8009604 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

08009616 <HAL_I2C_MspInit>:
}
 8009616:	4770      	bx	lr

08009618 <HAL_I2C_Init>:
{
 8009618:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800961a:	4604      	mov	r4, r0
 800961c:	2800      	cmp	r0, #0
 800961e:	d04a      	beq.n	80096b6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009620:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009624:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009628:	b91b      	cbnz	r3, 8009632 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800962a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800962e:	f7ff fff2 	bl	8009616 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009632:	2324      	movs	r3, #36	; 0x24
 8009634:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	f022 0201 	bic.w	r2, r2, #1
 8009640:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009642:	6862      	ldr	r2, [r4, #4]
 8009644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009648:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800964a:	689a      	ldr	r2, [r3, #8]
 800964c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009650:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009652:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009656:	2901      	cmp	r1, #1
 8009658:	d124      	bne.n	80096a4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800965a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800965e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800966a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009672:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009674:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8009678:	430a      	orrs	r2, r1
 800967a:	69a1      	ldr	r1, [r4, #24]
 800967c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009680:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009682:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8009686:	430a      	orrs	r2, r1
 8009688:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	f042 0201 	orr.w	r2, r2, #1
 8009690:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009692:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8009694:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009696:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009698:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800969c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800969e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80096a2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096a4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096a8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80096aa:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80096ac:	bf04      	itt	eq
 80096ae:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80096b2:	605a      	streq	r2, [r3, #4]
 80096b4:	e7d4      	b.n	8009660 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80096b6:	2001      	movs	r0, #1
 80096b8:	e7f3      	b.n	80096a2 <HAL_I2C_Init+0x8a>

080096ba <HAL_I2C_MspDeInit>:
 80096ba:	4770      	bx	lr

080096bc <HAL_I2C_DeInit>:
{
 80096bc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80096be:	4604      	mov	r4, r0
 80096c0:	b198      	cbz	r0, 80096ea <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80096c2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80096c4:	2324      	movs	r3, #36	; 0x24
 80096c6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80096ca:	6813      	ldr	r3, [r2, #0]
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80096d2:	f7ff fff2 	bl	80096ba <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096d6:	2000      	movs	r0, #0
 80096d8:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80096da:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80096de:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80096e2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096e4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80096e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80096ea:	2001      	movs	r0, #1
 80096ec:	e7fc      	b.n	80096e8 <HAL_I2C_DeInit+0x2c>
	...

080096f0 <HAL_I2C_Master_Transmit>:
{
 80096f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80096f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80096fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80096fc:	2b20      	cmp	r3, #32
{
 80096fe:	4604      	mov	r4, r0
 8009700:	460e      	mov	r6, r1
 8009702:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009704:	f040 808a 	bne.w	800981c <HAL_I2C_Master_Transmit+0x12c>
    __HAL_LOCK(hi2c);
 8009708:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800970c:	2b01      	cmp	r3, #1
 800970e:	f000 8085 	beq.w	800981c <HAL_I2C_Master_Transmit+0x12c>
 8009712:	f04f 0a01 	mov.w	sl, #1
 8009716:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800971a:	f7ff fa45 	bl	8008ba8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800971e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009720:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009722:	9000      	str	r0, [sp, #0]
 8009724:	4652      	mov	r2, sl
 8009726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800972a:	4620      	mov	r0, r4
 800972c:	f7ff fe0a 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009730:	2800      	cmp	r0, #0
 8009732:	d148      	bne.n	80097c6 <HAL_I2C_Master_Transmit+0xd6>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009734:	2321      	movs	r3, #33	; 0x21
 8009736:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800973a:	2310      	movs	r3, #16
 800973c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009740:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009742:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009746:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8009748:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800974c:	b29b      	uxth	r3, r3
 800974e:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8009750:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009752:	4b33      	ldr	r3, [pc, #204]	; (8009820 <HAL_I2C_Master_Transmit+0x130>)
 8009754:	d925      	bls.n	80097a2 <HAL_I2C_Master_Transmit+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009756:	22ff      	movs	r2, #255	; 0xff
 8009758:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800975a:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800975c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009760:	4631      	mov	r1, r6
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff fdda 	bl	800931c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009768:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800976a:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800976c:	462a      	mov	r2, r5
 800976e:	4639      	mov	r1, r7
 8009770:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009772:	b9f3      	cbnz	r3, 80097b2 <HAL_I2C_Master_Transmit+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009774:	f7ff ff28 	bl	80095c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009778:	b9f0      	cbnz	r0, 80097b8 <HAL_I2C_Master_Transmit+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800977a:	6823      	ldr	r3, [r4, #0]
 800977c:	2120      	movs	r1, #32
 800977e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009786:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800978a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800978e:	f022 0201 	bic.w	r2, r2, #1
 8009792:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009794:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009798:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800979c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80097a0:	e00e      	b.n	80097c0 <HAL_I2C_Master_Transmit+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 80097a2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80097a4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80097a6:	b292      	uxth	r2, r2
 80097a8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	e7d6      	b.n	8009760 <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097b2:	f7ff fe6c 	bl	800948e <I2C_WaitOnTXISFlagUntilTimeout>
 80097b6:	b140      	cbz	r0, 80097ca <HAL_I2C_Master_Transmit+0xda>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d103      	bne.n	80097c6 <HAL_I2C_Master_Transmit+0xd6>
          return HAL_ERROR;
 80097be:	2001      	movs	r0, #1
}
 80097c0:	b002      	add	sp, #8
 80097c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 80097c6:	2003      	movs	r0, #3
 80097c8:	e7fa      	b.n	80097c0 <HAL_I2C_Master_Transmit+0xd0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80097ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097cc:	1c5a      	adds	r2, r3, #1
 80097ce:	6262      	str	r2, [r4, #36]	; 0x24
 80097d0:	6822      	ldr	r2, [r4, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80097d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80097d8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80097da:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80097dc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80097de:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80097e0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80097e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80097e4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	d1be      	bne.n	8009768 <HAL_I2C_Master_Transmit+0x78>
 80097ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ba      	beq.n	8009768 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097f2:	9500      	str	r5, [sp, #0]
 80097f4:	463b      	mov	r3, r7
 80097f6:	2180      	movs	r1, #128	; 0x80
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff fda3 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1e1      	bne.n	80097c6 <HAL_I2C_Master_Transmit+0xd6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009802:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009804:	b29b      	uxth	r3, r3
 8009806:	2bff      	cmp	r3, #255	; 0xff
 8009808:	d903      	bls.n	8009812 <HAL_I2C_Master_Transmit+0x122>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800980a:	22ff      	movs	r2, #255	; 0xff
 800980c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800980e:	9000      	str	r0, [sp, #0]
 8009810:	e7a4      	b.n	800975c <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8009812:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009814:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009816:	b292      	uxth	r2, r2
 8009818:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800981a:	e7c6      	b.n	80097aa <HAL_I2C_Master_Transmit+0xba>
    return HAL_BUSY;
 800981c:	2002      	movs	r0, #2
 800981e:	e7cf      	b.n	80097c0 <HAL_I2C_Master_Transmit+0xd0>
 8009820:	80002000 	.word	0x80002000

08009824 <HAL_I2C_Master_Receive>:
{
 8009824:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800982a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800982e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009830:	2b20      	cmp	r3, #32
{
 8009832:	4604      	mov	r4, r0
 8009834:	460e      	mov	r6, r1
 8009836:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009838:	f040 808a 	bne.w	8009950 <HAL_I2C_Master_Receive+0x12c>
    __HAL_LOCK(hi2c);
 800983c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009840:	2b01      	cmp	r3, #1
 8009842:	f000 8085 	beq.w	8009950 <HAL_I2C_Master_Receive+0x12c>
 8009846:	f04f 0a01 	mov.w	sl, #1
 800984a:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800984e:	f7ff f9ab 	bl	8008ba8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009852:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8009854:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009856:	9000      	str	r0, [sp, #0]
 8009858:	4652      	mov	r2, sl
 800985a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800985e:	4620      	mov	r0, r4
 8009860:	f7ff fd70 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009864:	2800      	cmp	r0, #0
 8009866:	d148      	bne.n	80098fa <HAL_I2C_Master_Receive+0xd6>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009868:	2322      	movs	r3, #34	; 0x22
 800986a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800986e:	2310      	movs	r3, #16
 8009870:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009874:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009876:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800987a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 800987c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009880:	b29b      	uxth	r3, r3
 8009882:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8009884:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009886:	4b33      	ldr	r3, [pc, #204]	; (8009954 <HAL_I2C_Master_Receive+0x130>)
 8009888:	d925      	bls.n	80098d6 <HAL_I2C_Master_Receive+0xb2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800988a:	22ff      	movs	r2, #255	; 0xff
 800988c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800988e:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009894:	4631      	mov	r1, r6
 8009896:	4620      	mov	r0, r4
 8009898:	f7ff fd40 	bl	800931c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800989c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800989e:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098a0:	462a      	mov	r2, r5
 80098a2:	4639      	mov	r1, r7
 80098a4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80098a6:	b9f3      	cbnz	r3, 80098e6 <HAL_I2C_Master_Receive+0xc2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098a8:	f7ff fe8e 	bl	80095c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80098ac:	b9f0      	cbnz	r0, 80098ec <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	2120      	movs	r1, #32
 80098b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80098ba:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80098be:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80098c2:	f022 0201 	bic.w	r2, r2, #1
 80098c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80098c8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80098cc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80098d4:	e00e      	b.n	80098f4 <HAL_I2C_Master_Receive+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 80098d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80098d8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80098da:	b292      	uxth	r2, r2
 80098dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80098de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	e7d6      	b.n	8009894 <HAL_I2C_Master_Receive+0x70>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e6:	f7ff fd90 	bl	800940a <I2C_WaitOnRXNEFlagUntilTimeout>
 80098ea:	b140      	cbz	r0, 80098fe <HAL_I2C_Master_Receive+0xda>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d103      	bne.n	80098fa <HAL_I2C_Master_Receive+0xd6>
          return HAL_ERROR;
 80098f2:	2001      	movs	r0, #1
}
 80098f4:	b002      	add	sp, #8
 80098f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          return HAL_TIMEOUT;
 80098fa:	2003      	movs	r0, #3
 80098fc:	e7fa      	b.n	80098f4 <HAL_I2C_Master_Receive+0xd0>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009904:	1c59      	adds	r1, r3, #1
 8009906:	6261      	str	r1, [r4, #36]	; 0x24
 8009908:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800990a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800990c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800990e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009910:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009912:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009914:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009916:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009918:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800991a:	2a00      	cmp	r2, #0
 800991c:	d1be      	bne.n	800989c <HAL_I2C_Master_Receive+0x78>
 800991e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009920:	b29b      	uxth	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0ba      	beq.n	800989c <HAL_I2C_Master_Receive+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009926:	9500      	str	r5, [sp, #0]
 8009928:	463b      	mov	r3, r7
 800992a:	2180      	movs	r1, #128	; 0x80
 800992c:	4620      	mov	r0, r4
 800992e:	f7ff fd09 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009932:	2800      	cmp	r0, #0
 8009934:	d1e1      	bne.n	80098fa <HAL_I2C_Master_Receive+0xd6>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009936:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009938:	b29b      	uxth	r3, r3
 800993a:	2bff      	cmp	r3, #255	; 0xff
 800993c:	d903      	bls.n	8009946 <HAL_I2C_Master_Receive+0x122>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800993e:	22ff      	movs	r2, #255	; 0xff
 8009940:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009942:	9000      	str	r0, [sp, #0]
 8009944:	e7a4      	b.n	8009890 <HAL_I2C_Master_Receive+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8009946:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009948:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800994a:	b292      	uxth	r2, r2
 800994c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800994e:	e7c6      	b.n	80098de <HAL_I2C_Master_Receive+0xba>
    return HAL_BUSY;
 8009950:	2002      	movs	r0, #2
 8009952:	e7cf      	b.n	80098f4 <HAL_I2C_Master_Receive+0xd0>
 8009954:	80002400 	.word	0x80002400

08009958 <HAL_I2C_Mem_Write>:
{
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	b085      	sub	sp, #20
 800995e:	469b      	mov	fp, r3
 8009960:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009964:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009966:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800996a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800996e:	2b20      	cmp	r3, #32
{
 8009970:	4604      	mov	r4, r0
 8009972:	460f      	mov	r7, r1
 8009974:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009976:	f040 80a5 	bne.w	8009ac4 <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 800997a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800997c:	b91b      	cbnz	r3, 8009986 <HAL_I2C_Mem_Write+0x2e>
      return  HAL_ERROR;
 800997e:	2001      	movs	r0, #1
}
 8009980:	b005      	add	sp, #20
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0f8      	beq.n	800997e <HAL_I2C_Mem_Write+0x26>
    __HAL_LOCK(hi2c);
 800998c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009990:	2b01      	cmp	r3, #1
 8009992:	f000 8097 	beq.w	8009ac4 <HAL_I2C_Mem_Write+0x16c>
 8009996:	2501      	movs	r5, #1
 8009998:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800999c:	f7ff f904 	bl	8008ba8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099a0:	2319      	movs	r3, #25
 80099a2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80099a4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099a6:	462a      	mov	r2, r5
 80099a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099ac:	4620      	mov	r0, r4
 80099ae:	f7ff fcc9 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 80099b2:	4680      	mov	r8, r0
 80099b4:	b9c8      	cbnz	r0, 80099ea <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099b6:	2321      	movs	r3, #33	; 0x21
 80099b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80099c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80099c6:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099c8:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80099ca:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80099cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80099ce:	e9cd 9600 	strd	r9, r6, [sp]
 80099d2:	465b      	mov	r3, fp
 80099d4:	4652      	mov	r2, sl
 80099d6:	4639      	mov	r1, r7
 80099d8:	4620      	mov	r0, r4
 80099da:	f7ff fd81 	bl	80094e0 <I2C_RequestMemoryWrite>
 80099de:	b130      	cbz	r0, 80099ee <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80099e2:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d0c9      	beq.n	800997e <HAL_I2C_Mem_Write+0x26>
          return HAL_TIMEOUT;
 80099ea:	2003      	movs	r0, #3
 80099ec:	e7c8      	b.n	8009980 <HAL_I2C_Mem_Write+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	2bff      	cmp	r3, #255	; 0xff
 80099f4:	d910      	bls.n	8009a18 <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099f6:	22ff      	movs	r2, #255	; 0xff
 80099f8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80099fa:	9000      	str	r0, [sp, #0]
 80099fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a00:	4639      	mov	r1, r7
 8009a02:	4620      	mov	r0, r4
 8009a04:	f7ff fc8a 	bl	800931c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a08:	4632      	mov	r2, r6
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f7ff fd3e 	bl	800948e <I2C_WaitOnTXISFlagUntilTimeout>
 8009a12:	b148      	cbz	r0, 8009a28 <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009a16:	e7e6      	b.n	80099e6 <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8009a18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a1a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009a1c:	b292      	uxth	r2, r2
 8009a1e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a24:	b2d2      	uxtb	r2, r2
 8009a26:	e7eb      	b.n	8009a00 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8009a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	6262      	str	r2, [r4, #36]	; 0x24
 8009a2e:	6822      	ldr	r2, [r4, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8009a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009a36:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009a38:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009a3a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009a3c:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009a3e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009a40:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009a42:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009a44:	b9ba      	cbnz	r2, 8009a76 <HAL_I2C_Mem_Write+0x11e>
 8009a46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	b1a3      	cbz	r3, 8009a76 <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009a4c:	9600      	str	r6, [sp, #0]
 8009a4e:	464b      	mov	r3, r9
 8009a50:	2180      	movs	r1, #128	; 0x80
 8009a52:	4620      	mov	r0, r4
 8009a54:	f7ff fc76 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d1c6      	bne.n	80099ea <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	2bff      	cmp	r3, #255	; 0xff
 8009a62:	d927      	bls.n	8009ab4 <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a64:	22ff      	movs	r2, #255	; 0xff
 8009a66:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a68:	9000      	str	r0, [sp, #0]
 8009a6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a6e:	4639      	mov	r1, r7
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7ff fc53 	bl	800931c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8009a76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1c4      	bne.n	8009a08 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a7e:	4632      	mov	r2, r6
 8009a80:	4649      	mov	r1, r9
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7ff fda0 	bl	80095c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d1c3      	bne.n	8009a14 <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a8c:	6823      	ldr	r3, [r4, #0]
 8009a8e:	2120      	movs	r1, #32
 8009a90:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009a98:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009a9c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009aa6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009aaa:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009aae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009ab2:	e765      	b.n	8009980 <HAL_I2C_Mem_Write+0x28>
          hi2c->XferSize = hi2c->XferCount;
 8009ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ab6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	e7d4      	b.n	8009a6e <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 8009ac4:	2002      	movs	r0, #2
 8009ac6:	e75b      	b.n	8009980 <HAL_I2C_Mem_Write+0x28>

08009ac8 <HAL_I2C_Mem_Read>:
{
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	b085      	sub	sp, #20
 8009ace:	469b      	mov	fp, r3
 8009ad0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8009ad4:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ad6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009ada:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ade:	2b20      	cmp	r3, #32
{
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460f      	mov	r7, r1
 8009ae4:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ae6:	f040 80a8 	bne.w	8009c3a <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8009aea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aec:	b91b      	cbnz	r3, 8009af6 <HAL_I2C_Mem_Read+0x2e>
      return  HAL_ERROR;
 8009aee:	2001      	movs	r0, #1
}
 8009af0:	b005      	add	sp, #20
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0f8      	beq.n	8009aee <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8009afc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	f000 809a 	beq.w	8009c3a <HAL_I2C_Mem_Read+0x172>
 8009b06:	2501      	movs	r5, #1
 8009b08:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009b0c:	f7ff f84c 	bl	8008ba8 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b10:	2319      	movs	r3, #25
 8009b12:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8009b14:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b16:	462a      	mov	r2, r5
 8009b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f7ff fc11 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009b22:	4680      	mov	r8, r0
 8009b24:	b9c8      	cbnz	r0, 8009b5a <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b26:	2322      	movs	r3, #34	; 0x22
 8009b28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b2c:	2340      	movs	r3, #64	; 0x40
 8009b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8009b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b34:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8009b36:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b38:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8009b3a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8009b3c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009b3e:	e9cd 9600 	strd	r9, r6, [sp]
 8009b42:	465b      	mov	r3, fp
 8009b44:	4652      	mov	r2, sl
 8009b46:	4639      	mov	r1, r7
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff fd03 	bl	8009554 <I2C_RequestMemoryRead>
 8009b4e:	b130      	cbz	r0, 8009b5e <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b50:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8009b52:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	d0c9      	beq.n	8009aee <HAL_I2C_Mem_Read+0x26>
        return HAL_TIMEOUT;
 8009b5a:	2003      	movs	r0, #3
 8009b5c:	e7c8      	b.n	8009af0 <HAL_I2C_Mem_Read+0x28>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2bff      	cmp	r3, #255	; 0xff
 8009b64:	4b36      	ldr	r3, [pc, #216]	; (8009c40 <HAL_I2C_Mem_Read+0x178>)
 8009b66:	d944      	bls.n	8009bf2 <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b68:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009b6a:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b6c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009b6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009b72:	4639      	mov	r1, r7
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7ff fbd1 	bl	800931c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009b7a:	9600      	str	r6, [sp, #0]
 8009b7c:	464b      	mov	r3, r9
 8009b7e:	2200      	movs	r2, #0
 8009b80:	2104      	movs	r1, #4
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7ff fbde 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1e6      	bne.n	8009b5a <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b92:	1c59      	adds	r1, r3, #1
 8009b94:	6261      	str	r1, [r4, #36]	; 0x24
 8009b96:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8009b98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009b9c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009b9e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009ba0:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009ba2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009ba4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009ba6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8009ba8:	b9ba      	cbnz	r2, 8009bda <HAL_I2C_Mem_Read+0x112>
 8009baa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	b1a3      	cbz	r3, 8009bda <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bb0:	9600      	str	r6, [sp, #0]
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	2180      	movs	r1, #128	; 0x80
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f7ff fbc4 	bl	8009344 <I2C_WaitOnFlagUntilTimeout>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	d1cc      	bne.n	8009b5a <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2bff      	cmp	r3, #255	; 0xff
 8009bc6:	d91c      	bls.n	8009c02 <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009bc8:	22ff      	movs	r2, #255	; 0xff
 8009bca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009bcc:	9000      	str	r0, [sp, #0]
 8009bce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7ff fba1 	bl	800931c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8009bda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1cb      	bne.n	8009b7a <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009be2:	4632      	mov	r2, r6
 8009be4:	4649      	mov	r1, r9
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff fcee 	bl	80095c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009bec:	b188      	cbz	r0, 8009c12 <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009bf0:	e7b1      	b.n	8009b56 <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 8009bf2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009bf4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009bf6:	b292      	uxth	r2, r2
 8009bf8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	e7b7      	b.n	8009b72 <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8009c02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c04:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009c06:	b292      	uxth	r2, r2
 8009c08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c0e:	b2d2      	uxtb	r2, r2
 8009c10:	e7df      	b.n	8009bd2 <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	2120      	movs	r1, #32
 8009c16:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8009c1e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8009c22:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8009c26:	f022 0201 	bic.w	r2, r2, #1
 8009c2a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009c2c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009c30:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c34:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009c38:	e75a      	b.n	8009af0 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8009c3a:	2002      	movs	r0, #2
 8009c3c:	e758      	b.n	8009af0 <HAL_I2C_Mem_Read+0x28>
 8009c3e:	bf00      	nop
 8009c40:	80002400 	.word	0x80002400

08009c44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c44:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	b2dc      	uxtb	r4, r3
 8009c4e:	d11d      	bne.n	8009c8c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c50:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d019      	beq.n	8009c8c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c58:	2324      	movs	r3, #36	; 0x24
 8009c5a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c5e:	6803      	ldr	r3, [r0, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	f022 0201 	bic.w	r2, r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4311      	orrs	r1, r2
 8009c74:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	f042 0201 	orr.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c7e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8009c80:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009c84:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8009c88:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009c8a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8009c8c:	2002      	movs	r0, #2
 8009c8e:	e7fc      	b.n	8009c8a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08009c90 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009c90:	4b02      	ldr	r3, [pc, #8]	; (8009c9c <HAL_PWREx_GetVoltageRange+0xc>)
 8009c92:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8009c94:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	40007000 	.word	0x40007000

08009ca0 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ca0:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <HAL_PWREx_ControlVoltageScaling+0x5c>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ca2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ca4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009ca8:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009cac:	d11c      	bne.n	8009ce8 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009cae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009cb2:	d101      	bne.n	8009cb8 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cb8:	681a      	ldr	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009cba:	4911      	ldr	r1, [pc, #68]	; (8009d00 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cbc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8009cc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cc4:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8009cc6:	4a0f      	ldr	r2, [pc, #60]	; (8009d04 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	fbb2 f1f1 	udiv	r1, r2, r1
 8009cce:	2232      	movs	r2, #50	; 0x32
 8009cd0:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8009cd2:	b112      	cbz	r2, 8009cda <HAL_PWREx_ControlVoltageScaling+0x3a>
 8009cd4:	6959      	ldr	r1, [r3, #20]
 8009cd6:	0549      	lsls	r1, r1, #21
 8009cd8:	d404      	bmi.n	8009ce4 <HAL_PWREx_ControlVoltageScaling+0x44>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	055b      	lsls	r3, r3, #21
 8009cde:	d5e9      	bpl.n	8009cb4 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8009ce0:	2003      	movs	r0, #3
}  
 8009ce2:	4770      	bx	lr
        wait_loop_index--;
 8009ce4:	3a01      	subs	r2, #1
 8009ce6:	e7f4      	b.n	8009cd2 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ce8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009cec:	bf1f      	itttt	ne
 8009cee:	681a      	ldrne	r2, [r3, #0]
 8009cf0:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8009cf4:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8009cf8:	601a      	strne	r2, [r3, #0]
 8009cfa:	e7db      	b.n	8009cb4 <HAL_PWREx_ControlVoltageScaling+0x14>
 8009cfc:	40007000 	.word	0x40007000
 8009d00:	000f4240 	.word	0x000f4240
 8009d04:	20000590 	.word	0x20000590

08009d08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d0a:	4d1e      	ldr	r5, [pc, #120]	; (8009d84 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8009d0c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009d0e:	00da      	lsls	r2, r3, #3
{
 8009d10:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009d12:	d518      	bpl.n	8009d46 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009d14:	f7ff ffbc 	bl	8009c90 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009d1c:	d123      	bne.n	8009d66 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009d1e:	2c80      	cmp	r4, #128	; 0x80
 8009d20:	d929      	bls.n	8009d76 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009d22:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009d24:	bf8c      	ite	hi
 8009d26:	2402      	movhi	r4, #2
 8009d28:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009d2a:	4917      	ldr	r1, [pc, #92]	; (8009d88 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8009d2c:	680a      	ldr	r2, [r1, #0]
 8009d2e:	f022 0207 	bic.w	r2, r2, #7
 8009d32:	4322      	orrs	r2, r4
 8009d34:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8009d36:	6808      	ldr	r0, [r1, #0]
 8009d38:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8009d3c:	1b00      	subs	r0, r0, r4
 8009d3e:	bf18      	it	ne
 8009d40:	2001      	movne	r0, #1
 8009d42:	b003      	add	sp, #12
 8009d44:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8009d46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d4c:	65ab      	str	r3, [r5, #88]	; 0x58
 8009d4e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8009d58:	f7ff ff9a 	bl	8009c90 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8009d5c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d62:	65ab      	str	r3, [r5, #88]	; 0x58
 8009d64:	e7d8      	b.n	8009d18 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8009d66:	2c80      	cmp	r4, #128	; 0x80
 8009d68:	d807      	bhi.n	8009d7a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8009d6a:	d008      	beq.n	8009d7e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8009d6c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8009d70:	425c      	negs	r4, r3
 8009d72:	415c      	adcs	r4, r3
 8009d74:	e7d9      	b.n	8009d2a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009d76:	2400      	movs	r4, #0
 8009d78:	e7d7      	b.n	8009d2a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8009d7a:	2403      	movs	r4, #3
 8009d7c:	e7d5      	b.n	8009d2a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8009d7e:	2402      	movs	r4, #2
 8009d80:	e7d3      	b.n	8009d2a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8009d82:	bf00      	nop
 8009d84:	40021000 	.word	0x40021000
 8009d88:	40022000 	.word	0x40022000

08009d8c <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009d8c:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009d8e:	689a      	ldr	r2, [r3, #8]
 8009d90:	f012 0f0c 	tst.w	r2, #12
{
 8009d94:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009d96:	d009      	beq.n	8009dac <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8009d9e:	2a0c      	cmp	r2, #12
 8009da0:	d12e      	bne.n	8009e00 <HAL_RCC_GetSysClockFreq+0x74>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8009da2:	68da      	ldr	r2, [r3, #12]
 8009da4:	f002 0203 	and.w	r2, r2, #3
 8009da8:	2a01      	cmp	r2, #1
 8009daa:	d129      	bne.n	8009e00 <HAL_RCC_GetSysClockFreq+0x74>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009dac:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8009dae:	4928      	ldr	r1, [pc, #160]	; (8009e50 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8009db0:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009db2:	bf55      	itete	pl
 8009db4:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009db8:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009dba:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009dbe:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8009dc2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8009dc6:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8009dc8:	f011 0f0c 	tst.w	r1, #12
 8009dcc:	bf0c      	ite	eq
 8009dce:	4610      	moveq	r0, r2
 8009dd0:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009dd2:	6899      	ldr	r1, [r3, #8]
 8009dd4:	f001 010c 	and.w	r1, r1, #12
 8009dd8:	290c      	cmp	r1, #12
 8009dda:	d131      	bne.n	8009e40 <HAL_RCC_GetSysClockFreq+0xb4>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009ddc:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dde:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009de0:	f004 0403 	and.w	r4, r4, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009de4:	f3c0 1002 	ubfx	r0, r0, #4, #3
    switch (pllsource)
 8009de8:	2c02      	cmp	r4, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009dea:	f100 0101 	add.w	r1, r0, #1
    switch (pllsource)
 8009dee:	d019      	beq.n	8009e24 <HAL_RCC_GetSysClockFreq+0x98>
 8009df0:	2c03      	cmp	r4, #3
 8009df2:	d026      	beq.n	8009e42 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009df4:	fbb2 f2f1 	udiv	r2, r2, r1
 8009df8:	68d8      	ldr	r0, [r3, #12]
 8009dfa:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8009dfe:	e017      	b.n	8009e30 <HAL_RCC_GetSysClockFreq+0xa4>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009e00:	689a      	ldr	r2, [r3, #8]
 8009e02:	f002 020c 	and.w	r2, r2, #12
 8009e06:	2a04      	cmp	r2, #4
 8009e08:	d007      	beq.n	8009e1a <HAL_RCC_GetSysClockFreq+0x8e>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	f002 020c 	and.w	r2, r2, #12
 8009e10:	2a08      	cmp	r2, #8
 8009e12:	d104      	bne.n	8009e1e <HAL_RCC_GetSysClockFreq+0x92>
    sysclockfreq = HSE_VALUE;
 8009e14:	480f      	ldr	r0, [pc, #60]	; (8009e54 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009e16:	2200      	movs	r2, #0
 8009e18:	e7db      	b.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8009e1a:	480f      	ldr	r0, [pc, #60]	; (8009e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009e1c:	e7fb      	b.n	8009e16 <HAL_RCC_GetSysClockFreq+0x8a>
  uint32_t sysclockfreq = 0U;
 8009e1e:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8009e20:	4602      	mov	r2, r0
 8009e22:	e7d6      	b.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	480c      	ldr	r0, [pc, #48]	; (8009e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009e28:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e2c:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8009e36:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e38:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009e3a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8009e3c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8009e40:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	4803      	ldr	r0, [pc, #12]	; (8009e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009e46:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8009e4a:	e7ef      	b.n	8009e2c <HAL_RCC_GetSysClockFreq+0xa0>
 8009e4c:	40021000 	.word	0x40021000
 8009e50:	080285c0 	.word	0x080285c0
 8009e54:	007a1200 	.word	0x007a1200
 8009e58:	00f42400 	.word	0x00f42400

08009e5c <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009e5c:	6803      	ldr	r3, [r0, #0]
{
 8009e5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e62:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009e64:	06d8      	lsls	r0, r3, #27
 8009e66:	d53b      	bpl.n	8009ee0 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8009e68:	4ca9      	ldr	r4, [pc, #676]	; (800a110 <HAL_RCC_OscConfig+0x2b4>)
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	f013 0f0c 	tst.w	r3, #12
 8009e70:	d160      	bne.n	8009f34 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	0799      	lsls	r1, r3, #30
 8009e76:	d505      	bpl.n	8009e84 <HAL_RCC_OscConfig+0x28>
 8009e78:	69ab      	ldr	r3, [r5, #24]
 8009e7a:	b91b      	cbnz	r3, 8009e84 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 8009e7c:	2001      	movs	r0, #1
}
 8009e7e:	b002      	add	sp, #8
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	6a28      	ldr	r0, [r5, #32]
 8009e88:	071a      	lsls	r2, r3, #28
 8009e8a:	bf56      	itet	pl
 8009e8c:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8009e90:	6823      	ldrmi	r3, [r4, #0]
 8009e92:	091b      	lsrpl	r3, r3, #4
 8009e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e98:	4298      	cmp	r0, r3
 8009e9a:	d936      	bls.n	8009f0a <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e9c:	f7ff ff34 	bl	8009d08 <RCC_SetFlashLatencyFromMSIRange>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1eb      	bne.n	8009e7c <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	f043 0308 	orr.w	r3, r3, #8
 8009eaa:	6023      	str	r3, [r4, #0]
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	6a2a      	ldr	r2, [r5, #32]
 8009eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009eb8:	6863      	ldr	r3, [r4, #4]
 8009eba:	69ea      	ldr	r2, [r5, #28]
 8009ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009ec4:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009ec6:	f7ff ff61 	bl	8009d8c <HAL_RCC_GetSysClockFreq>
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	4a91      	ldr	r2, [pc, #580]	; (800a114 <HAL_RCC_OscConfig+0x2b8>)
 8009ece:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009ed2:	5cd3      	ldrb	r3, [r2, r3]
 8009ed4:	40d8      	lsrs	r0, r3
 8009ed6:	4b90      	ldr	r3, [pc, #576]	; (800a118 <HAL_RCC_OscConfig+0x2bc>)
 8009ed8:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8009eda:	200f      	movs	r0, #15
 8009edc:	f7fe fe3a 	bl	8008b54 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	07de      	lsls	r6, r3, #31
 8009ee4:	d45b      	bmi.n	8009f9e <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	079c      	lsls	r4, r3, #30
 8009eea:	f100 80a3 	bmi.w	800a034 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	0719      	lsls	r1, r3, #28
 8009ef2:	f100 80e1 	bmi.w	800a0b8 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ef6:	682b      	ldr	r3, [r5, #0]
 8009ef8:	075a      	lsls	r2, r3, #29
 8009efa:	f100 810f 	bmi.w	800a11c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009efe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009f00:	2a00      	cmp	r2, #0
 8009f02:	f040 8176 	bne.w	800a1f2 <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8009f06:	2000      	movs	r0, #0
 8009f08:	e7b9      	b.n	8009e7e <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	f043 0308 	orr.w	r3, r3, #8
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f18:	4303      	orrs	r3, r0
 8009f1a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009f1c:	6863      	ldr	r3, [r4, #4]
 8009f1e:	69ea      	ldr	r2, [r5, #28]
 8009f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f28:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009f2a:	f7ff feed 	bl	8009d08 <RCC_SetFlashLatencyFromMSIRange>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d0c9      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x6a>
 8009f32:	e7a3      	b.n	8009e7c <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009f34:	69ab      	ldr	r3, [r5, #24]
 8009f36:	b313      	cbz	r3, 8009f7e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8009f38:	6823      	ldr	r3, [r4, #0]
 8009f3a:	f043 0301 	orr.w	r3, r3, #1
 8009f3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009f40:	f7fe fe32 	bl	8008ba8 <HAL_GetTick>
 8009f44:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	079b      	lsls	r3, r3, #30
 8009f4a:	d511      	bpl.n	8009f70 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	f043 0308 	orr.w	r3, r3, #8
 8009f52:	6023      	str	r3, [r4, #0]
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	6a2a      	ldr	r2, [r5, #32]
 8009f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009f60:	6863      	ldr	r3, [r4, #4]
 8009f62:	69ea      	ldr	r2, [r5, #28]
 8009f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	e7b7      	b.n	8009ee0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f70:	f7fe fe1a 	bl	8008ba8 <HAL_GetTick>
 8009f74:	1b80      	subs	r0, r0, r6
 8009f76:	2802      	cmp	r0, #2
 8009f78:	d9e5      	bls.n	8009f46 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8009f7a:	2003      	movs	r0, #3
 8009f7c:	e77f      	b.n	8009e7e <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009f86:	f7fe fe0f 	bl	8008ba8 <HAL_GetTick>
 8009f8a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	079f      	lsls	r7, r3, #30
 8009f90:	d5a6      	bpl.n	8009ee0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f92:	f7fe fe09 	bl	8008ba8 <HAL_GetTick>
 8009f96:	1b80      	subs	r0, r0, r6
 8009f98:	2802      	cmp	r0, #2
 8009f9a:	d9f7      	bls.n	8009f8c <HAL_RCC_OscConfig+0x130>
 8009f9c:	e7ed      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8009f9e:	4c5c      	ldr	r4, [pc, #368]	; (800a110 <HAL_RCC_OscConfig+0x2b4>)
 8009fa0:	68a3      	ldr	r3, [r4, #8]
 8009fa2:	f003 030c 	and.w	r3, r3, #12
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d009      	beq.n	8009fbe <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8009fb0:	2b0c      	cmp	r3, #12
 8009fb2:	d10b      	bne.n	8009fcc <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009fb4:	68e3      	ldr	r3, [r4, #12]
 8009fb6:	f003 0303 	and.w	r3, r3, #3
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d106      	bne.n	8009fcc <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	0398      	lsls	r0, r3, #14
 8009fc2:	d590      	bpl.n	8009ee6 <HAL_RCC_OscConfig+0x8a>
 8009fc4:	686b      	ldr	r3, [r5, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d18d      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x8a>
 8009fca:	e757      	b.n	8009e7c <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fcc:	686b      	ldr	r3, [r5, #4]
 8009fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fd2:	d110      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x19a>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fda:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009fdc:	f7fe fde4 	bl	8008ba8 <HAL_GetTick>
 8009fe0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	0399      	lsls	r1, r3, #14
 8009fe6:	f53f af7e 	bmi.w	8009ee6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fea:	f7fe fddd 	bl	8008ba8 <HAL_GetTick>
 8009fee:	1b80      	subs	r0, r0, r6
 8009ff0:	2864      	cmp	r0, #100	; 0x64
 8009ff2:	d9f6      	bls.n	8009fe2 <HAL_RCC_OscConfig+0x186>
 8009ff4:	e7c1      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ffa:	d104      	bne.n	800a006 <HAL_RCC_OscConfig+0x1aa>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	e7e6      	b.n	8009fd4 <HAL_RCC_OscConfig+0x178>
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a00c:	6022      	str	r2, [r4, #0]
 800a00e:	6822      	ldr	r2, [r4, #0]
 800a010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a014:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1e0      	bne.n	8009fdc <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 800a01a:	f7fe fdc5 	bl	8008ba8 <HAL_GetTick>
 800a01e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	039a      	lsls	r2, r3, #14
 800a024:	f57f af5f 	bpl.w	8009ee6 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a028:	f7fe fdbe 	bl	8008ba8 <HAL_GetTick>
 800a02c:	1b80      	subs	r0, r0, r6
 800a02e:	2864      	cmp	r0, #100	; 0x64
 800a030:	d9f6      	bls.n	800a020 <HAL_RCC_OscConfig+0x1c4>
 800a032:	e7a2      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800a034:	4c36      	ldr	r4, [pc, #216]	; (800a110 <HAL_RCC_OscConfig+0x2b4>)
 800a036:	68a3      	ldr	r3, [r4, #8]
 800a038:	f003 030c 	and.w	r3, r3, #12
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d009      	beq.n	800a054 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a040:	68a3      	ldr	r3, [r4, #8]
 800a042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800a046:	2b0c      	cmp	r3, #12
 800a048:	d113      	bne.n	800a072 <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800a04a:	68e3      	ldr	r3, [r4, #12]
 800a04c:	f003 0303 	and.w	r3, r3, #3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d10e      	bne.n	800a072 <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	055b      	lsls	r3, r3, #21
 800a058:	d503      	bpl.n	800a062 <HAL_RCC_OscConfig+0x206>
 800a05a:	68eb      	ldr	r3, [r5, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f43f af0d 	beq.w	8009e7c <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a062:	6863      	ldr	r3, [r4, #4]
 800a064:	692a      	ldr	r2, [r5, #16]
 800a066:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800a06a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a06e:	6063      	str	r3, [r4, #4]
 800a070:	e73d      	b.n	8009eee <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a072:	68eb      	ldr	r3, [r5, #12]
 800a074:	b17b      	cbz	r3, 800a096 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a07c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a07e:	f7fe fd93 	bl	8008ba8 <HAL_GetTick>
 800a082:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	055f      	lsls	r7, r3, #21
 800a088:	d4eb      	bmi.n	800a062 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a08a:	f7fe fd8d 	bl	8008ba8 <HAL_GetTick>
 800a08e:	1b80      	subs	r0, r0, r6
 800a090:	2802      	cmp	r0, #2
 800a092:	d9f7      	bls.n	800a084 <HAL_RCC_OscConfig+0x228>
 800a094:	e771      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a09c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800a09e:	f7fe fd83 	bl	8008ba8 <HAL_GetTick>
 800a0a2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	0558      	lsls	r0, r3, #21
 800a0a8:	f57f af21 	bpl.w	8009eee <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a0ac:	f7fe fd7c 	bl	8008ba8 <HAL_GetTick>
 800a0b0:	1b80      	subs	r0, r0, r6
 800a0b2:	2802      	cmp	r0, #2
 800a0b4:	d9f6      	bls.n	800a0a4 <HAL_RCC_OscConfig+0x248>
 800a0b6:	e760      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a0b8:	696b      	ldr	r3, [r5, #20]
 800a0ba:	4c15      	ldr	r4, [pc, #84]	; (800a110 <HAL_RCC_OscConfig+0x2b4>)
 800a0bc:	b19b      	cbz	r3, 800a0e6 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 800a0be:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a0c2:	f043 0301 	orr.w	r3, r3, #1
 800a0c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a0ca:	f7fe fd6d 	bl	8008ba8 <HAL_GetTick>
 800a0ce:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800a0d0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a0d4:	079b      	lsls	r3, r3, #30
 800a0d6:	f53f af0e 	bmi.w	8009ef6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0da:	f7fe fd65 	bl	8008ba8 <HAL_GetTick>
 800a0de:	1b80      	subs	r0, r0, r6
 800a0e0:	2802      	cmp	r0, #2
 800a0e2:	d9f5      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x274>
 800a0e4:	e749      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 800a0e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a0ea:	f023 0301 	bic.w	r3, r3, #1
 800a0ee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a0f2:	f7fe fd59 	bl	8008ba8 <HAL_GetTick>
 800a0f6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800a0f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a0fc:	079f      	lsls	r7, r3, #30
 800a0fe:	f57f aefa 	bpl.w	8009ef6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a102:	f7fe fd51 	bl	8008ba8 <HAL_GetTick>
 800a106:	1b80      	subs	r0, r0, r6
 800a108:	2802      	cmp	r0, #2
 800a10a:	d9f5      	bls.n	800a0f8 <HAL_RCC_OscConfig+0x29c>
 800a10c:	e735      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
 800a10e:	bf00      	nop
 800a110:	40021000 	.word	0x40021000
 800a114:	080285f0 	.word	0x080285f0
 800a118:	20000590 	.word	0x20000590
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a11c:	4c66      	ldr	r4, [pc, #408]	; (800a2b8 <HAL_RCC_OscConfig+0x45c>)
 800a11e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a120:	00de      	lsls	r6, r3, #3
 800a122:	d427      	bmi.n	800a174 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a124:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a12a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a12c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a12e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a132:	9301      	str	r3, [sp, #4]
 800a134:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a136:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a138:	4e60      	ldr	r6, [pc, #384]	; (800a2bc <HAL_RCC_OscConfig+0x460>)
 800a13a:	6833      	ldr	r3, [r6, #0]
 800a13c:	05d8      	lsls	r0, r3, #23
 800a13e:	d51b      	bpl.n	800a178 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a140:	68ab      	ldr	r3, [r5, #8]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d129      	bne.n	800a19a <HAL_RCC_OscConfig+0x33e>
 800a146:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800a152:	f7fe fd29 	bl	8008ba8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a156:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a15a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a15c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a160:	079a      	lsls	r2, r3, #30
 800a162:	d540      	bpl.n	800a1e6 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 800a164:	2f00      	cmp	r7, #0
 800a166:	f43f aeca 	beq.w	8009efe <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a16a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a16c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a170:	65a3      	str	r3, [r4, #88]	; 0x58
 800a172:	e6c4      	b.n	8009efe <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 800a174:	2700      	movs	r7, #0
 800a176:	e7df      	b.n	800a138 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a178:	6833      	ldr	r3, [r6, #0]
 800a17a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a17e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800a180:	f7fe fd12 	bl	8008ba8 <HAL_GetTick>
 800a184:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a186:	6833      	ldr	r3, [r6, #0]
 800a188:	05d9      	lsls	r1, r3, #23
 800a18a:	d4d9      	bmi.n	800a140 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a18c:	f7fe fd0c 	bl	8008ba8 <HAL_GetTick>
 800a190:	eba0 0008 	sub.w	r0, r0, r8
 800a194:	2802      	cmp	r0, #2
 800a196:	d9f6      	bls.n	800a186 <HAL_RCC_OscConfig+0x32a>
 800a198:	e6ef      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	d106      	bne.n	800a1ac <HAL_RCC_OscConfig+0x350>
 800a19e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a1a2:	f043 0304 	orr.w	r3, r3, #4
 800a1a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800a1aa:	e7cc      	b.n	800a146 <HAL_RCC_OscConfig+0x2ea>
 800a1ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a1b0:	f022 0201 	bic.w	r2, r2, #1
 800a1b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800a1b8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800a1bc:	f022 0204 	bic.w	r2, r2, #4
 800a1c0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d1c4      	bne.n	800a152 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800a1c8:	f7fe fcee 	bl	8008ba8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1cc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a1d0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800a1d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a1d6:	079b      	lsls	r3, r3, #30
 800a1d8:	d5c4      	bpl.n	800a164 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1da:	f7fe fce5 	bl	8008ba8 <HAL_GetTick>
 800a1de:	1b80      	subs	r0, r0, r6
 800a1e0:	4540      	cmp	r0, r8
 800a1e2:	d9f6      	bls.n	800a1d2 <HAL_RCC_OscConfig+0x376>
 800a1e4:	e6c9      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e6:	f7fe fcdf 	bl	8008ba8 <HAL_GetTick>
 800a1ea:	1b80      	subs	r0, r0, r6
 800a1ec:	4540      	cmp	r0, r8
 800a1ee:	d9b5      	bls.n	800a15c <HAL_RCC_OscConfig+0x300>
 800a1f0:	e6c3      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1f2:	4c31      	ldr	r4, [pc, #196]	; (800a2b8 <HAL_RCC_OscConfig+0x45c>)
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	f003 030c 	and.w	r3, r3, #12
 800a1fa:	2b0c      	cmp	r3, #12
 800a1fc:	f43f ae3e 	beq.w	8009e7c <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 800a200:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a202:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800a204:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a208:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a20a:	d137      	bne.n	800a27c <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 800a20c:	f7fe fccc 	bl	8008ba8 <HAL_GetTick>
 800a210:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	019f      	lsls	r7, r3, #6
 800a216:	d42b      	bmi.n	800a270 <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a218:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a21a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a21c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a220:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800a222:	3a01      	subs	r2, #1
 800a224:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a228:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a22a:	0912      	lsrs	r2, r2, #4
 800a22c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800a230:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800a232:	0852      	lsrs	r2, r2, #1
 800a234:	3a01      	subs	r2, #1
 800a236:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800a23a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800a23c:	0852      	lsrs	r2, r2, #1
 800a23e:	3a01      	subs	r2, #1
 800a240:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800a244:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a24c:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a24e:	68e3      	ldr	r3, [r4, #12]
 800a250:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a254:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a256:	f7fe fca7 	bl	8008ba8 <HAL_GetTick>
 800a25a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	0198      	lsls	r0, r3, #6
 800a260:	f53f ae51 	bmi.w	8009f06 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a264:	f7fe fca0 	bl	8008ba8 <HAL_GetTick>
 800a268:	1b40      	subs	r0, r0, r5
 800a26a:	2802      	cmp	r0, #2
 800a26c:	d9f6      	bls.n	800a25c <HAL_RCC_OscConfig+0x400>
 800a26e:	e684      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a270:	f7fe fc9a 	bl	8008ba8 <HAL_GetTick>
 800a274:	1b80      	subs	r0, r0, r6
 800a276:	2802      	cmp	r0, #2
 800a278:	d9cb      	bls.n	800a212 <HAL_RCC_OscConfig+0x3b6>
 800a27a:	e67e      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	0119      	lsls	r1, r3, #4
 800a280:	d406      	bmi.n	800a290 <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a282:	6823      	ldr	r3, [r4, #0]
           &&
 800a284:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a286:	bf5e      	ittt	pl
 800a288:	68e3      	ldrpl	r3, [r4, #12]
 800a28a:	f023 0303 	bicpl.w	r3, r3, #3
 800a28e:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a290:	68e3      	ldr	r3, [r4, #12]
 800a292:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a29a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800a29c:	f7fe fc84 	bl	8008ba8 <HAL_GetTick>
 800a2a0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	019b      	lsls	r3, r3, #6
 800a2a6:	f57f ae2e 	bpl.w	8009f06 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2aa:	f7fe fc7d 	bl	8008ba8 <HAL_GetTick>
 800a2ae:	1b40      	subs	r0, r0, r5
 800a2b0:	2802      	cmp	r0, #2
 800a2b2:	d9f6      	bls.n	800a2a2 <HAL_RCC_OscConfig+0x446>
 800a2b4:	e661      	b.n	8009f7a <HAL_RCC_OscConfig+0x11e>
 800a2b6:	bf00      	nop
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	40007000 	.word	0x40007000

0800a2c0 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a2c0:	4a55      	ldr	r2, [pc, #340]	; (800a418 <HAL_RCC_ClockConfig+0x158>)
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	428b      	cmp	r3, r1
{
 800a2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a2d2:	d32a      	bcc.n	800a32a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2d4:	682b      	ldr	r3, [r5, #0]
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d434      	bmi.n	800a344 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2da:	6829      	ldr	r1, [r5, #0]
 800a2dc:	078a      	lsls	r2, r1, #30
 800a2de:	f100 8081 	bmi.w	800a3e4 <HAL_RCC_ClockConfig+0x124>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800a2e2:	4a4d      	ldr	r2, [pc, #308]	; (800a418 <HAL_RCC_ClockConfig+0x158>)
 800a2e4:	6813      	ldr	r3, [r2, #0]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	42b3      	cmp	r3, r6
 800a2ec:	f200 8082 	bhi.w	800a3f4 <HAL_RCC_ClockConfig+0x134>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2f0:	f011 0f04 	tst.w	r1, #4
 800a2f4:	4c49      	ldr	r4, [pc, #292]	; (800a41c <HAL_RCC_ClockConfig+0x15c>)
 800a2f6:	f040 8088 	bne.w	800a40a <HAL_RCC_ClockConfig+0x14a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2fa:	070b      	lsls	r3, r1, #28
 800a2fc:	d506      	bpl.n	800a30c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	692a      	ldr	r2, [r5, #16]
 800a302:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a306:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a30a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a30c:	f7ff fd3e 	bl	8009d8c <HAL_RCC_GetSysClockFreq>
 800a310:	68a3      	ldr	r3, [r4, #8]
 800a312:	4a43      	ldr	r2, [pc, #268]	; (800a420 <HAL_RCC_ClockConfig+0x160>)
 800a314:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a318:	5cd3      	ldrb	r3, [r2, r3]
 800a31a:	40d8      	lsrs	r0, r3
 800a31c:	4b41      	ldr	r3, [pc, #260]	; (800a424 <HAL_RCC_ClockConfig+0x164>)
 800a31e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800a320:	200f      	movs	r0, #15
 800a322:	f7fe fc17 	bl	8008b54 <HAL_InitTick>
  return HAL_OK;
 800a326:	2000      	movs	r0, #0
 800a328:	e00a      	b.n	800a340 <HAL_RCC_ClockConfig+0x80>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	f023 0307 	bic.w	r3, r3, #7
 800a330:	430b      	orrs	r3, r1
 800a332:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a334:	6813      	ldr	r3, [r2, #0]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	428b      	cmp	r3, r1
 800a33c:	d0ca      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800a33e:	2001      	movs	r0, #1
}
 800a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a344:	686a      	ldr	r2, [r5, #4]
 800a346:	4c35      	ldr	r4, [pc, #212]	; (800a41c <HAL_RCC_ClockConfig+0x15c>)
 800a348:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a34a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a34c:	d11b      	bne.n	800a386 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800a34e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a352:	d0f4      	beq.n	800a33e <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a354:	68a3      	ldr	r3, [r4, #8]
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	4313      	orrs	r3, r2
 800a35c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a35e:	f7fe fc23 	bl	8008ba8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a362:	686b      	ldr	r3, [r5, #4]
 800a364:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 800a366:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a368:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a36c:	d117      	bne.n	800a39e <HAL_RCC_ClockConfig+0xde>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a36e:	68a3      	ldr	r3, [r4, #8]
 800a370:	f003 030c 	and.w	r3, r3, #12
 800a374:	2b0c      	cmp	r3, #12
 800a376:	d0b0      	beq.n	800a2da <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a378:	f7fe fc16 	bl	8008ba8 <HAL_GetTick>
 800a37c:	1bc0      	subs	r0, r0, r7
 800a37e:	4540      	cmp	r0, r8
 800a380:	d9f5      	bls.n	800a36e <HAL_RCC_ClockConfig+0xae>
          return HAL_TIMEOUT;
 800a382:	2003      	movs	r0, #3
 800a384:	e7dc      	b.n	800a340 <HAL_RCC_ClockConfig+0x80>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a386:	2a02      	cmp	r2, #2
 800a388:	d102      	bne.n	800a390 <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800a38a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a38e:	e7e0      	b.n	800a352 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a390:	b912      	cbnz	r2, 800a398 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800a392:	f013 0f02 	tst.w	r3, #2
 800a396:	e7dc      	b.n	800a352 <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800a398:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a39c:	e7d9      	b.n	800a352 <HAL_RCC_ClockConfig+0x92>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d10a      	bne.n	800a3b8 <HAL_RCC_ClockConfig+0xf8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800a3a2:	68a3      	ldr	r3, [r4, #8]
 800a3a4:	f003 030c 	and.w	r3, r3, #12
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d096      	beq.n	800a2da <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3ac:	f7fe fbfc 	bl	8008ba8 <HAL_GetTick>
 800a3b0:	1bc0      	subs	r0, r0, r7
 800a3b2:	4540      	cmp	r0, r8
 800a3b4:	d9f5      	bls.n	800a3a2 <HAL_RCC_ClockConfig+0xe2>
 800a3b6:	e7e4      	b.n	800a382 <HAL_RCC_ClockConfig+0xc2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a3b8:	b973      	cbnz	r3, 800a3d8 <HAL_RCC_ClockConfig+0x118>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800a3ba:	68a3      	ldr	r3, [r4, #8]
 800a3bc:	f013 0f0c 	tst.w	r3, #12
 800a3c0:	d08b      	beq.n	800a2da <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3c2:	f7fe fbf1 	bl	8008ba8 <HAL_GetTick>
 800a3c6:	1bc0      	subs	r0, r0, r7
 800a3c8:	4540      	cmp	r0, r8
 800a3ca:	d9f6      	bls.n	800a3ba <HAL_RCC_ClockConfig+0xfa>
 800a3cc:	e7d9      	b.n	800a382 <HAL_RCC_ClockConfig+0xc2>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3ce:	f7fe fbeb 	bl	8008ba8 <HAL_GetTick>
 800a3d2:	1bc0      	subs	r0, r0, r7
 800a3d4:	4540      	cmp	r0, r8
 800a3d6:	d8d4      	bhi.n	800a382 <HAL_RCC_ClockConfig+0xc2>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800a3d8:	68a3      	ldr	r3, [r4, #8]
 800a3da:	f003 030c 	and.w	r3, r3, #12
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d1f5      	bne.n	800a3ce <HAL_RCC_ClockConfig+0x10e>
 800a3e2:	e77a      	b.n	800a2da <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3e4:	4a0d      	ldr	r2, [pc, #52]	; (800a41c <HAL_RCC_ClockConfig+0x15c>)
 800a3e6:	68a8      	ldr	r0, [r5, #8]
 800a3e8:	6893      	ldr	r3, [r2, #8]
 800a3ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3ee:	4303      	orrs	r3, r0
 800a3f0:	6093      	str	r3, [r2, #8]
 800a3f2:	e776      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f4:	6813      	ldr	r3, [r2, #0]
 800a3f6:	f023 0307 	bic.w	r3, r3, #7
 800a3fa:	4333      	orrs	r3, r6
 800a3fc:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 800a3fe:	6813      	ldr	r3, [r2, #0]
 800a400:	f003 0307 	and.w	r3, r3, #7
 800a404:	42b3      	cmp	r3, r6
 800a406:	d19a      	bne.n	800a33e <HAL_RCC_ClockConfig+0x7e>
 800a408:	e772      	b.n	800a2f0 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a40a:	68a3      	ldr	r3, [r4, #8]
 800a40c:	68ea      	ldr	r2, [r5, #12]
 800a40e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a412:	4313      	orrs	r3, r2
 800a414:	60a3      	str	r3, [r4, #8]
 800a416:	e770      	b.n	800a2fa <HAL_RCC_ClockConfig+0x3a>
 800a418:	40022000 	.word	0x40022000
 800a41c:	40021000 	.word	0x40021000
 800a420:	080285f0 	.word	0x080285f0
 800a424:	20000590 	.word	0x20000590

0800a428 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a428:	4b04      	ldr	r3, [pc, #16]	; (800a43c <HAL_RCC_GetPCLK1Freq+0x14>)
 800a42a:	4a05      	ldr	r2, [pc, #20]	; (800a440 <HAL_RCC_GetPCLK1Freq+0x18>)
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a432:	5cd3      	ldrb	r3, [r2, r3]
 800a434:	4a03      	ldr	r2, [pc, #12]	; (800a444 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a436:	6810      	ldr	r0, [r2, #0]
}
 800a438:	40d8      	lsrs	r0, r3
 800a43a:	4770      	bx	lr
 800a43c:	40021000 	.word	0x40021000
 800a440:	08028600 	.word	0x08028600
 800a444:	20000590 	.word	0x20000590

0800a448 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a448:	4b04      	ldr	r3, [pc, #16]	; (800a45c <HAL_RCC_GetPCLK2Freq+0x14>)
 800a44a:	4a05      	ldr	r2, [pc, #20]	; (800a460 <HAL_RCC_GetPCLK2Freq+0x18>)
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a452:	5cd3      	ldrb	r3, [r2, r3]
 800a454:	4a03      	ldr	r2, [pc, #12]	; (800a464 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a456:	6810      	ldr	r0, [r2, #0]
}
 800a458:	40d8      	lsrs	r0, r3
 800a45a:	4770      	bx	lr
 800a45c:	40021000 	.word	0x40021000
 800a460:	08028600 	.word	0x08028600
 800a464:	20000590 	.word	0x20000590

0800a468 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a468:	4a44      	ldr	r2, [pc, #272]	; (800a57c <RCCEx_PLLSAI1_Config+0x114>)
{
 800a46a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46c:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a46e:	68d1      	ldr	r1, [r2, #12]
 800a470:	6803      	ldr	r3, [r0, #0]
 800a472:	f011 0f03 	tst.w	r1, #3
{
 800a476:	4605      	mov	r5, r0
 800a478:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a47a:	d029      	beq.n	800a4d0 <RCCEx_PLLSAI1_Config+0x68>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a47c:	68d1      	ldr	r1, [r2, #12]
 800a47e:	f001 0103 	and.w	r1, r1, #3
 800a482:	4299      	cmp	r1, r3
 800a484:	d178      	bne.n	800a578 <RCCEx_PLLSAI1_Config+0x110>
       ||
 800a486:	2900      	cmp	r1, #0
 800a488:	d076      	beq.n	800a578 <RCCEx_PLLSAI1_Config+0x110>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a48a:	68d3      	ldr	r3, [r2, #12]
       ||
 800a48c:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a48e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a492:	3301      	adds	r3, #1
       ||
 800a494:	4293      	cmp	r3, r2
 800a496:	d16f      	bne.n	800a578 <RCCEx_PLLSAI1_Config+0x110>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a49e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4a0:	f7fe fb82 	bl	8008ba8 <HAL_GetTick>
 800a4a4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	011a      	lsls	r2, r3, #4
 800a4aa:	d430      	bmi.n	800a50e <RCCEx_PLLSAI1_Config+0xa6>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a4ac:	68ab      	ldr	r3, [r5, #8]
 800a4ae:	021f      	lsls	r7, r3, #8
 800a4b0:	b3a6      	cbz	r6, 800a51c <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a4b2:	2e01      	cmp	r6, #1
 800a4b4:	d14d      	bne.n	800a552 <RCCEx_PLLSAI1_Config+0xea>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a4b6:	692a      	ldr	r2, [r5, #16]
 800a4b8:	6921      	ldr	r1, [r4, #16]
 800a4ba:	0852      	lsrs	r2, r2, #1
 800a4bc:	1e53      	subs	r3, r2, #1
 800a4be:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800a4c2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800a4c6:	433a      	orrs	r2, r7
 800a4c8:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 800a4cc:	6122      	str	r2, [r4, #16]
 800a4ce:	e030      	b.n	800a532 <RCCEx_PLLSAI1_Config+0xca>
    switch(PllSai1->PLLSAI1Source)
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d011      	beq.n	800a4f8 <RCCEx_PLLSAI1_Config+0x90>
 800a4d4:	2b03      	cmp	r3, #3
 800a4d6:	d013      	beq.n	800a500 <RCCEx_PLLSAI1_Config+0x98>
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d14d      	bne.n	800a578 <RCCEx_PLLSAI1_Config+0x110>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a4dc:	6812      	ldr	r2, [r2, #0]
 800a4de:	f012 0f02 	tst.w	r2, #2
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a4e2:	d049      	beq.n	800a578 <RCCEx_PLLSAI1_Config+0x110>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a4e4:	68e0      	ldr	r0, [r4, #12]
 800a4e6:	686a      	ldr	r2, [r5, #4]
 800a4e8:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a4ec:	3a01      	subs	r2, #1
 800a4ee:	4318      	orrs	r0, r3
 800a4f0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4f4:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a4f6:	e7cf      	b.n	800a498 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a4fe:	e7f0      	b.n	800a4e2 <RCCEx_PLLSAI1_Config+0x7a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a500:	6811      	ldr	r1, [r2, #0]
 800a502:	0389      	lsls	r1, r1, #14
 800a504:	d4ee      	bmi.n	800a4e4 <RCCEx_PLLSAI1_Config+0x7c>
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a50c:	e7e9      	b.n	800a4e2 <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a50e:	f7fe fb4b 	bl	8008ba8 <HAL_GetTick>
 800a512:	1bc0      	subs	r0, r0, r7
 800a514:	2802      	cmp	r0, #2
 800a516:	d9c6      	bls.n	800a4a6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800a518:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a51c:	6921      	ldr	r1, [r4, #16]
 800a51e:	68eb      	ldr	r3, [r5, #12]
 800a520:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 800a524:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800a528:	091b      	lsrs	r3, r3, #4
 800a52a:	4339      	orrs	r1, r7
 800a52c:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800a530:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a538:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a53a:	f7fe fb35 	bl	8008ba8 <HAL_GetTick>
 800a53e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	011b      	lsls	r3, r3, #4
 800a544:	d512      	bpl.n	800a56c <RCCEx_PLLSAI1_Config+0x104>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a546:	6923      	ldr	r3, [r4, #16]
 800a548:	69aa      	ldr	r2, [r5, #24]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	2000      	movs	r0, #0
  return status;
 800a550:	e7e3      	b.n	800a51a <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a552:	696b      	ldr	r3, [r5, #20]
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	085b      	lsrs	r3, r3, #1
 800a558:	1e59      	subs	r1, r3, #1
 800a55a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800a55e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a562:	433b      	orrs	r3, r7
 800a564:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a568:	6123      	str	r3, [r4, #16]
 800a56a:	e7e2      	b.n	800a532 <RCCEx_PLLSAI1_Config+0xca>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a56c:	f7fe fb1c 	bl	8008ba8 <HAL_GetTick>
 800a570:	1b80      	subs	r0, r0, r6
 800a572:	2802      	cmp	r0, #2
 800a574:	d9e4      	bls.n	800a540 <RCCEx_PLLSAI1_Config+0xd8>
 800a576:	e7cf      	b.n	800a518 <RCCEx_PLLSAI1_Config+0xb0>
      status = HAL_ERROR;
 800a578:	2001      	movs	r0, #1
 800a57a:	e7ce      	b.n	800a51a <RCCEx_PLLSAI1_Config+0xb2>
 800a57c:	40021000 	.word	0x40021000

0800a580 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a580:	4a3d      	ldr	r2, [pc, #244]	; (800a678 <RCCEx_PLLSAI2_Config+0xf8>)
{
 800a582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a584:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a586:	68d1      	ldr	r1, [r2, #12]
 800a588:	6803      	ldr	r3, [r0, #0]
 800a58a:	f011 0f03 	tst.w	r1, #3
{
 800a58e:	4605      	mov	r5, r0
 800a590:	4614      	mov	r4, r2
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a592:	d027      	beq.n	800a5e4 <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a594:	68d1      	ldr	r1, [r2, #12]
 800a596:	f001 0103 	and.w	r1, r1, #3
 800a59a:	4299      	cmp	r1, r3
 800a59c:	d169      	bne.n	800a672 <RCCEx_PLLSAI2_Config+0xf2>
       ||
 800a59e:	2900      	cmp	r1, #0
 800a5a0:	d067      	beq.n	800a672 <RCCEx_PLLSAI2_Config+0xf2>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a5a2:	68d3      	ldr	r3, [r2, #12]
       ||
 800a5a4:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a5a6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a5aa:	3301      	adds	r3, #1
       ||
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d160      	bne.n	800a672 <RCCEx_PLLSAI2_Config+0xf2>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5b6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b8:	f7fe faf6 	bl	8008ba8 <HAL_GetTick>
 800a5bc:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	009a      	lsls	r2, r3, #2
 800a5c2:	d42e      	bmi.n	800a622 <RCCEx_PLLSAI2_Config+0xa2>
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a5c4:	68ab      	ldr	r3, [r5, #8]
 800a5c6:	0218      	lsls	r0, r3, #8
 800a5c8:	b396      	cbz	r6, 800a630 <RCCEx_PLLSAI2_Config+0xb0>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a5ca:	6963      	ldr	r3, [r4, #20]
 800a5cc:	6929      	ldr	r1, [r5, #16]
 800a5ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a5d2:	0849      	lsrs	r1, r1, #1
 800a5d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a5d8:	3901      	subs	r1, #1
 800a5da:	4303      	orrs	r3, r0
 800a5dc:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800a5e0:	6163      	str	r3, [r4, #20]
 800a5e2:	e030      	b.n	800a646 <RCCEx_PLLSAI2_Config+0xc6>
    switch(PllSai2->PLLSAI2Source)
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d011      	beq.n	800a60c <RCCEx_PLLSAI2_Config+0x8c>
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d013      	beq.n	800a614 <RCCEx_PLLSAI2_Config+0x94>
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d140      	bne.n	800a672 <RCCEx_PLLSAI2_Config+0xf2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a5f0:	6812      	ldr	r2, [r2, #0]
 800a5f2:	f012 0f02 	tst.w	r2, #2
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a5f6:	d03c      	beq.n	800a672 <RCCEx_PLLSAI2_Config+0xf2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a5f8:	68e0      	ldr	r0, [r4, #12]
 800a5fa:	686a      	ldr	r2, [r5, #4]
 800a5fc:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800a600:	3a01      	subs	r2, #1
 800a602:	4318      	orrs	r0, r3
 800a604:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a608:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 800a60a:	e7d1      	b.n	800a5b0 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a60c:	6812      	ldr	r2, [r2, #0]
 800a60e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a612:	e7f0      	b.n	800a5f6 <RCCEx_PLLSAI2_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a614:	6811      	ldr	r1, [r2, #0]
 800a616:	0389      	lsls	r1, r1, #14
 800a618:	d4ee      	bmi.n	800a5f8 <RCCEx_PLLSAI2_Config+0x78>
 800a61a:	6812      	ldr	r2, [r2, #0]
 800a61c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800a620:	e7e9      	b.n	800a5f6 <RCCEx_PLLSAI2_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a622:	f7fe fac1 	bl	8008ba8 <HAL_GetTick>
 800a626:	1bc0      	subs	r0, r0, r7
 800a628:	2802      	cmp	r0, #2
 800a62a:	d9c8      	bls.n	800a5be <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 800a62c:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a630:	6962      	ldr	r2, [r4, #20]
 800a632:	68eb      	ldr	r3, [r5, #12]
 800a634:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 800a638:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a63c:	091b      	lsrs	r3, r3, #4
 800a63e:	4302      	orrs	r2, r0
 800a640:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800a644:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a64c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800a64e:	f7fe faab 	bl	8008ba8 <HAL_GetTick>
 800a652:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	d505      	bpl.n	800a666 <RCCEx_PLLSAI2_Config+0xe6>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a65a:	6963      	ldr	r3, [r4, #20]
 800a65c:	696a      	ldr	r2, [r5, #20]
 800a65e:	4313      	orrs	r3, r2
 800a660:	6163      	str	r3, [r4, #20]
 800a662:	2000      	movs	r0, #0
  return status;
 800a664:	e7e3      	b.n	800a62e <RCCEx_PLLSAI2_Config+0xae>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a666:	f7fe fa9f 	bl	8008ba8 <HAL_GetTick>
 800a66a:	1b80      	subs	r0, r0, r6
 800a66c:	2802      	cmp	r0, #2
 800a66e:	d9f1      	bls.n	800a654 <RCCEx_PLLSAI2_Config+0xd4>
 800a670:	e7dc      	b.n	800a62c <RCCEx_PLLSAI2_Config+0xac>
      status = HAL_ERROR;
 800a672:	2001      	movs	r0, #1
 800a674:	e7db      	b.n	800a62e <RCCEx_PLLSAI2_Config+0xae>
 800a676:	bf00      	nop
 800a678:	40021000 	.word	0x40021000

0800a67c <HAL_RCCEx_PeriphCLKConfig>:
{
 800a67c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a680:	6806      	ldr	r6, [r0, #0]
 800a682:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800a686:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a688:	d009      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a68a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800a68c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a690:	d022      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a692:	d813      	bhi.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a694:	b331      	cbz	r1, 800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800a696:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a69a:	d02a      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a69c:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	04d8      	lsls	r0, r3, #19
 800a6a2:	d509      	bpl.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a6a4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a6a6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800a6aa:	d02c      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800a6ac:	d826      	bhi.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x80>
 800a6ae:	b381      	cbz	r1, 800a712 <HAL_RCCEx_PeriphCLKConfig+0x96>
 800a6b0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800a6b4:	d070      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800a6b6:	2601      	movs	r6, #1
 800a6b8:	4635      	mov	r5, r6
 800a6ba:	e039      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 800a6bc:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800a6c0:	d1ec      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a6c2:	4ab5      	ldr	r2, [pc, #724]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a6c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a6c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a6ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800a6d4:	2600      	movs	r6, #0
 800a6d6:	e7e2      	b.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a6d8:	4aaf      	ldr	r2, [pc, #700]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a6da:	68d3      	ldr	r3, [r2, #12]
 800a6dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6e0:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 800a6e2:	e7ee      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a6e4:	3004      	adds	r0, #4
 800a6e6:	f7ff febf 	bl	800a468 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a6ea:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1d6      	bne.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x22>
 800a6f0:	e7e7      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	3020      	adds	r0, #32
 800a6f6:	f7ff ff43 	bl	800a580 <RCCEx_PLLSAI2_Config>
 800a6fa:	e7f6      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800a6fc:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800a700:	d1d9      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800a702:	4635      	mov	r5, r6
 800a704:	e009      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a706:	4aa4      	ldr	r2, [pc, #656]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a708:	68d3      	ldr	r3, [r2, #12]
 800a70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70e:	60d3      	str	r3, [r2, #12]
      break;
 800a710:	e7f7      	b.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a712:	1d20      	adds	r0, r4, #4
 800a714:	f7ff fea8 	bl	800a468 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a718:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	d142      	bne.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a71e:	4a9e      	ldr	r2, [pc, #632]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a720:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800a722:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a726:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a72a:	430b      	orrs	r3, r1
 800a72c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	0399      	lsls	r1, r3, #14
 800a734:	f140 815e 	bpl.w	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a738:	4f97      	ldr	r7, [pc, #604]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a73a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a73c:	00da      	lsls	r2, r3, #3
 800a73e:	d433      	bmi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800a740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a746:	65bb      	str	r3, [r7, #88]	; 0x58
 800a748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a74a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800a752:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a756:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800a99c <HAL_RCCEx_PeriphCLKConfig+0x320>
 800a75a:	f8d9 3000 	ldr.w	r3, [r9]
 800a75e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a762:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800a766:	f7fe fa1f 	bl	8008ba8 <HAL_GetTick>
 800a76a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800a76c:	f8d9 3000 	ldr.w	r3, [r9]
 800a770:	05db      	lsls	r3, r3, #23
 800a772:	d51c      	bpl.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x132>
    if(ret == HAL_OK)
 800a774:	bb15      	cbnz	r5, 800a7bc <HAL_RCCEx_PeriphCLKConfig+0x140>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a77a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800a77e:	f040 810f 	bne.w	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a786:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a78a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a78e:	4313      	orrs	r3, r2
 800a790:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a794:	4635      	mov	r5, r6
 800a796:	e011      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x140>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a798:	2100      	movs	r1, #0
 800a79a:	f104 0020 	add.w	r0, r4, #32
 800a79e:	f7ff feef 	bl	800a580 <RCCEx_PLLSAI2_Config>
 800a7a2:	e7b9      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800a7a4:	462e      	mov	r6, r5
 800a7a6:	e7c3      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800a7a8:	f04f 0800 	mov.w	r8, #0
 800a7ac:	e7d3      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xda>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7ae:	f7fe f9fb 	bl	8008ba8 <HAL_GetTick>
 800a7b2:	eba0 000a 	sub.w	r0, r0, sl
 800a7b6:	2802      	cmp	r0, #2
 800a7b8:	d9d8      	bls.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800a7ba:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800a7bc:	f1b8 0f00 	cmp.w	r8, #0
 800a7c0:	d003      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	07da      	lsls	r2, r3, #31
 800a7ce:	d508      	bpl.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a7d0:	4971      	ldr	r1, [pc, #452]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a7d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a7d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7d8:	f022 0203 	bic.w	r2, r2, #3
 800a7dc:	4302      	orrs	r2, r0
 800a7de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7e2:	079f      	lsls	r7, r3, #30
 800a7e4:	d508      	bpl.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a7e6:	496c      	ldr	r1, [pc, #432]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a7e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a7ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7ee:	f022 020c 	bic.w	r2, r2, #12
 800a7f2:	4302      	orrs	r2, r0
 800a7f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a7f8:	075e      	lsls	r6, r3, #29
 800a7fa:	d508      	bpl.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0x192>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a7fc:	4966      	ldr	r1, [pc, #408]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a7fe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a800:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a804:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a808:	4302      	orrs	r2, r0
 800a80a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a80e:	0718      	lsls	r0, r3, #28
 800a810:	d508      	bpl.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a812:	4961      	ldr	r1, [pc, #388]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a814:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a816:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a81a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a81e:	4302      	orrs	r2, r0
 800a820:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a824:	06d9      	lsls	r1, r3, #27
 800a826:	d508      	bpl.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a828:	495b      	ldr	r1, [pc, #364]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a82a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a82c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a830:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a834:	4302      	orrs	r2, r0
 800a836:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a83a:	069a      	lsls	r2, r3, #26
 800a83c:	d508      	bpl.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a83e:	4956      	ldr	r1, [pc, #344]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a840:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a842:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a846:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a84a:	4302      	orrs	r2, r0
 800a84c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a850:	059f      	lsls	r7, r3, #22
 800a852:	d508      	bpl.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a854:	4950      	ldr	r1, [pc, #320]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a856:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a858:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a85c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800a860:	4302      	orrs	r2, r0
 800a862:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a866:	055e      	lsls	r6, r3, #21
 800a868:	d508      	bpl.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x200>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a86a:	494b      	ldr	r1, [pc, #300]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a86c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a86e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a872:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800a876:	4302      	orrs	r2, r0
 800a878:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a87c:	0658      	lsls	r0, r3, #25
 800a87e:	d508      	bpl.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a880:	4945      	ldr	r1, [pc, #276]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a882:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a884:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a888:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a88c:	4302      	orrs	r2, r0
 800a88e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a892:	0619      	lsls	r1, r3, #24
 800a894:	d508      	bpl.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a896:	4940      	ldr	r1, [pc, #256]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a89a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a89e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a8a2:	4302      	orrs	r2, r0
 800a8a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a8a8:	05da      	lsls	r2, r3, #23
 800a8aa:	d508      	bpl.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x242>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a8ac:	493a      	ldr	r1, [pc, #232]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a8b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800a8b8:	4302      	orrs	r2, r0
 800a8ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a8be:	049b      	lsls	r3, r3, #18
 800a8c0:	d510      	bpl.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8c2:	4a35      	ldr	r2, [pc, #212]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8c4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a8c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a8ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a8ce:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a8d0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a8d8:	f040 808e 	bne.w	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8dc:	68d3      	ldr	r3, [r2, #12]
 800a8de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8e2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	031f      	lsls	r7, r3, #12
 800a8e8:	d510      	bpl.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a8ea:	4a2b      	ldr	r2, [pc, #172]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a8ec:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a8ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a8f2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a8f6:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a8f8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a8fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a900:	f040 8086 	bne.w	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a904:	68d3      	ldr	r3, [r2, #12]
 800a906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a90a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	035e      	lsls	r6, r3, #13
 800a910:	d50f      	bpl.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a912:	4a21      	ldr	r2, [pc, #132]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a914:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800a916:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a91a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800a91e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a920:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a928:	d17e      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a92a:	68d3      	ldr	r3, [r2, #12]
 800a92c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a930:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	0458      	lsls	r0, r3, #17
 800a936:	d512      	bpl.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a938:	4917      	ldr	r1, [pc, #92]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a93a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a93c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a940:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a944:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a946:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a94a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a94e:	d176      	bne.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a950:	2102      	movs	r1, #2
 800a952:	1d20      	adds	r0, r4, #4
 800a954:	f7ff fd88 	bl	800a468 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800a958:	2800      	cmp	r0, #0
 800a95a:	bf18      	it	ne
 800a95c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a95e:	6822      	ldr	r2, [r4, #0]
 800a960:	0411      	lsls	r1, r2, #16
 800a962:	d508      	bpl.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a964:	490c      	ldr	r1, [pc, #48]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a966:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a968:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a96c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a970:	4303      	orrs	r3, r0
 800a972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a976:	03d3      	lsls	r3, r2, #15
 800a978:	d509      	bpl.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x312>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a97a:	4a07      	ldr	r2, [pc, #28]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800a97c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a980:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800a984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a988:	430b      	orrs	r3, r1
 800a98a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800a98e:	4628      	mov	r0, r5
 800a990:	b002      	add	sp, #8
 800a992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a996:	bf00      	nop
 800a998:	40021000 	.word	0x40021000
 800a99c:	40007000 	.word	0x40007000
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a9a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	f43f aeec 	beq.w	800a782 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9aa:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9be:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9c6:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800a9cc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9d0:	f57f aed7 	bpl.w	800a782 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 800a9d4:	f7fe f8e8 	bl	8008ba8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9d8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800a9dc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800a9de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a9e2:	0799      	lsls	r1, r3, #30
 800a9e4:	f53f aecd 	bmi.w	800a782 <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9e8:	f7fe f8de 	bl	8008ba8 <HAL_GetTick>
 800a9ec:	1b40      	subs	r0, r0, r5
 800a9ee:	4548      	cmp	r0, r9
 800a9f0:	d9f5      	bls.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a9f2:	e6e2      	b.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800a9f4:	4635      	mov	r5, r6
 800a9f6:	e6e8      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a9f8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a9fc:	f47f af72 	bne.w	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa00:	2101      	movs	r1, #1
 800aa02:	1d20      	adds	r0, r4, #4
 800aa04:	f7ff fd30 	bl	800a468 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	bf18      	it	ne
 800aa0c:	4605      	movne	r5, r0
 800aa0e:	e769      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800aa10:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800aa14:	f47f af7a 	bne.w	800a90c <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa18:	2101      	movs	r1, #1
 800aa1a:	1d20      	adds	r0, r4, #4
 800aa1c:	f7ff fd24 	bl	800a468 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800aa20:	2800      	cmp	r0, #0
 800aa22:	bf18      	it	ne
 800aa24:	4605      	movne	r5, r0
 800aa26:	e771      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x290>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800aa28:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800aa2c:	d181      	bne.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800aa2e:	2101      	movs	r1, #1
 800aa30:	1d20      	adds	r0, r4, #4
 800aa32:	f7ff fd19 	bl	800a468 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800aa36:	2800      	cmp	r0, #0
 800aa38:	bf18      	it	ne
 800aa3a:	4605      	movne	r5, r0
 800aa3c:	e779      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800aa3e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800aa42:	d18c      	bne.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800aa44:	2102      	movs	r1, #2
 800aa46:	f104 0020 	add.w	r0, r4, #32
 800aa4a:	f7ff fd99 	bl	800a580 <RCCEx_PLLSAI2_Config>
 800aa4e:	e783      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x2dc>

0800aa50 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800aa50:	4a02      	ldr	r2, [pc, #8]	; (800aa5c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 800aa52:	6813      	ldr	r3, [r2, #0]
 800aa54:	f043 0304 	orr.w	r3, r3, #4
 800aa58:	6013      	str	r3, [r2, #0]
}
 800aa5a:	4770      	bx	lr
 800aa5c:	40021000 	.word	0x40021000

0800aa60 <HAL_RNG_Init>:
  * @brief  Initialize the RNG peripheral and initialize the associated handle.
  * @param  hrng: pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 800aa60:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 800aa62:	4604      	mov	r4, r0
 800aa64:	b188      	cbz	r0, 800aa8a <HAL_RNG_Init+0x2a>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined(RNG_CR_CED)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* defined(RNG_CR_CED) */

  if(hrng->State == HAL_RNG_STATE_RESET)
 800aa66:	7943      	ldrb	r3, [r0, #5]
 800aa68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aa6c:	b913      	cbnz	r3, 800aa74 <HAL_RNG_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800aa6e:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800aa70:	f7f9 fcfa 	bl	8004468 <HAL_RNG_MspInit>
  /* Clock Error Detection configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800aa74:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800aa76:	2302      	movs	r3, #2
 800aa78:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800aa7a:	6813      	ldr	r3, [r2, #0]
 800aa7c:	f043 0304 	orr.w	r3, r3, #4
 800aa80:	6013      	str	r3, [r2, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800aa82:	2301      	movs	r3, #1
 800aa84:	7163      	strb	r3, [r4, #5]
  
  /* Return function status */
  return HAL_OK;
 800aa86:	2000      	movs	r0, #0
}
 800aa88:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aa8a:	2001      	movs	r0, #1
 800aa8c:	e7fc      	b.n	800aa88 <HAL_RNG_Init+0x28>

0800aa8e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit: pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800aa8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;    
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng); 
 800aa90:	7903      	ldrb	r3, [r0, #4]
 800aa92:	2b01      	cmp	r3, #1
{
 800aa94:	4604      	mov	r4, r0
 800aa96:	460e      	mov	r6, r1
  __HAL_LOCK(hrng); 
 800aa98:	d021      	beq.n	800aade <HAL_RNG_GenerateRandomNumber+0x50>
  
  /* Check RNS peripheral state */
  if(hrng->State == HAL_RNG_STATE_READY)
 800aa9a:	7963      	ldrb	r3, [r4, #5]
  __HAL_LOCK(hrng); 
 800aa9c:	2001      	movs	r0, #1
  if(hrng->State == HAL_RNG_STATE_READY)
 800aa9e:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng); 
 800aaa0:	7120      	strb	r0, [r4, #4]
  if(hrng->State == HAL_RNG_STATE_READY)
 800aaa2:	d10f      	bne.n	800aac4 <HAL_RNG_GenerateRandomNumber+0x36>
  {
    /* Change RNG peripheral state */  
    hrng->State = HAL_RNG_STATE_BUSY;  
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aaa8:	f7fe f87e 	bl	8008ba8 <HAL_GetTick>
 800aaac:	4607      	mov	r7, r0
  
    /* Check if data register contains valid random data */
    while(__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800aaae:	6822      	ldr	r2, [r4, #0]
 800aab0:	6855      	ldr	r5, [r2, #4]
 800aab2:	f015 0501 	ands.w	r5, r5, #1
 800aab6:	d008      	beq.n	800aaca <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_TIMEOUT;
      } 
    }
  
    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800aab8:	6893      	ldr	r3, [r2, #8]
 800aaba:	60a3      	str	r3, [r4, #8]
    *random32bit = hrng->RandomNumber;
 800aabc:	6033      	str	r3, [r6, #0]
  
    hrng->State = HAL_RNG_STATE_READY;
 800aabe:	2301      	movs	r3, #1
 800aac0:	7163      	strb	r3, [r4, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800aac2:	2000      	movs	r0, #0
  {
    status = HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800aac4:	2300      	movs	r3, #0
 800aac6:	7123      	strb	r3, [r4, #4]

  return status;
 800aac8:	e008      	b.n	800aadc <HAL_RNG_GenerateRandomNumber+0x4e>
      if((HAL_GetTick() - tickstart ) > RNG_TIMEOUT_VALUE)
 800aaca:	f7fe f86d 	bl	8008ba8 <HAL_GetTick>
 800aace:	1bc0      	subs	r0, r0, r7
 800aad0:	2802      	cmp	r0, #2
 800aad2:	d9ec      	bls.n	800aaae <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_ERROR;
 800aad4:	2304      	movs	r3, #4
 800aad6:	7163      	strb	r3, [r4, #5]
        __HAL_UNLOCK(hrng);
 800aad8:	7125      	strb	r5, [r4, #4]
        return HAL_TIMEOUT;
 800aada:	2003      	movs	r0, #3
}
 800aadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrng); 
 800aade:	2002      	movs	r0, #2
 800aae0:	e7fc      	b.n	800aadc <HAL_RNG_GenerateRandomNumber+0x4e>

0800aae2 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aae2:	6802      	ldr	r2, [r0, #0]
{
 800aae4:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800aae6:	68d3      	ldr	r3, [r2, #12]
 800aae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aaec:	60d3      	str	r3, [r2, #12]
{
 800aaee:	4604      	mov	r4, r0

  tickstart = HAL_GetTick();
 800aaf0:	f7fe f85a 	bl	8008ba8 <HAL_GetTick>
 800aaf4:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	68db      	ldr	r3, [r3, #12]
 800aafa:	069b      	lsls	r3, r3, #26
 800aafc:	d501      	bpl.n	800ab02 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800aafe:	2000      	movs	r0, #0
}
 800ab00:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ab02:	f7fe f851 	bl	8008ba8 <HAL_GetTick>
 800ab06:	1b40      	subs	r0, r0, r5
 800ab08:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ab0c:	d9f3      	bls.n	800aaf6 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800ab0e:	2003      	movs	r0, #3
 800ab10:	e7f6      	b.n	800ab00 <HAL_RTC_WaitForSynchro+0x1e>

0800ab12 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ab12:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ab14:	6803      	ldr	r3, [r0, #0]
 800ab16:	68da      	ldr	r2, [r3, #12]
 800ab18:	0652      	lsls	r2, r2, #25
{
 800ab1a:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ab1c:	d501      	bpl.n	800ab22 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800ab1e:	2000      	movs	r0, #0
}
 800ab20:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ab22:	f04f 32ff 	mov.w	r2, #4294967295
 800ab26:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800ab28:	f7fe f83e 	bl	8008ba8 <HAL_GetTick>
 800ab2c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	065b      	lsls	r3, r3, #25
 800ab34:	d4f3      	bmi.n	800ab1e <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ab36:	f7fe f837 	bl	8008ba8 <HAL_GetTick>
 800ab3a:	1b40      	subs	r0, r0, r5
 800ab3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ab40:	d9f5      	bls.n	800ab2e <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 800ab42:	2003      	movs	r0, #3
 800ab44:	e7ec      	b.n	800ab20 <RTC_EnterInitMode+0xe>

0800ab46 <HAL_RTC_Init>:
{
 800ab46:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800ab48:	4604      	mov	r4, r0
 800ab4a:	b1d8      	cbz	r0, 800ab84 <HAL_RTC_Init+0x3e>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ab4c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ab50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ab54:	b91b      	cbnz	r3, 800ab5e <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 800ab56:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 800ab5a:	f7f9 fc9b 	bl	8004494 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	22ca      	movs	r2, #202	; 0xca
 800ab68:	625a      	str	r2, [r3, #36]	; 0x24
 800ab6a:	2253      	movs	r2, #83	; 0x53
 800ab6c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f7ff ffcf 	bl	800ab12 <RTC_EnterInitMode>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	4605      	mov	r5, r0
 800ab78:	b130      	cbz	r0, 800ab88 <HAL_RTC_Init+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab7a:	22ff      	movs	r2, #255	; 0xff
 800ab7c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ab7e:	2304      	movs	r3, #4
 800ab80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
     return HAL_ERROR;
 800ab84:	2501      	movs	r5, #1
 800ab86:	e031      	b.n	800abec <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ab88:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab8a:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ab8c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800ab90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab94:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ab96:	6862      	ldr	r2, [r4, #4]
 800ab98:	6899      	ldr	r1, [r3, #8]
 800ab9a:	4302      	orrs	r2, r0
 800ab9c:	69a0      	ldr	r0, [r4, #24]
 800ab9e:	4302      	orrs	r2, r0
 800aba0:	430a      	orrs	r2, r1
 800aba2:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aba4:	68e2      	ldr	r2, [r4, #12]
 800aba6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800aba8:	691a      	ldr	r2, [r3, #16]
 800abaa:	68a1      	ldr	r1, [r4, #8]
 800abac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800abb0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abb8:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	069b      	lsls	r3, r3, #26
 800abbe:	d405      	bmi.n	800abcc <HAL_RTC_Init+0x86>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7ff ff8e 	bl	800aae2 <HAL_RTC_WaitForSynchro>
 800abc6:	b108      	cbz	r0, 800abcc <HAL_RTC_Init+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	e7d6      	b.n	800ab7a <HAL_RTC_Init+0x34>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800abcc:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800abce:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800abd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abd2:	f022 0203 	bic.w	r2, r2, #3
 800abd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800abd8:	69e2      	ldr	r2, [r4, #28]
 800abda:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800abdc:	4302      	orrs	r2, r0
 800abde:	430a      	orrs	r2, r1
 800abe0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abe2:	22ff      	movs	r2, #255	; 0xff
 800abe4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800abe6:	2301      	movs	r3, #1
 800abe8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800abec:	4628      	mov	r0, r5
 800abee:	bd38      	pop	{r3, r4, r5, pc}

0800abf0 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 800abf0:	2300      	movs	r3, #0

  while(Value >= 10)
 800abf2:	2809      	cmp	r0, #9
 800abf4:	d803      	bhi.n	800abfe <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800abf6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 800abfa:	b2c0      	uxtb	r0, r0
 800abfc:	4770      	bx	lr
    Value -= 10;
 800abfe:	380a      	subs	r0, #10
    bcdhigh++;
 800ac00:	3301      	adds	r3, #1
    Value -= 10;
 800ac02:	b2c0      	uxtb	r0, r0
 800ac04:	e7f5      	b.n	800abf2 <RTC_ByteToBcd2+0x2>

0800ac06 <HAL_RTC_SetTime>:
{
 800ac06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 800ac0a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ac0e:	2b01      	cmp	r3, #1
{
 800ac10:	4605      	mov	r5, r0
 800ac12:	460e      	mov	r6, r1
 800ac14:	f04f 0702 	mov.w	r7, #2
  __HAL_LOCK(hrtc);
 800ac18:	d032      	beq.n	800ac80 <HAL_RTC_SetTime+0x7a>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac20:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 800ac24:	6801      	ldr	r1, [r0, #0]
 800ac26:	7874      	ldrb	r4, [r6, #1]
 800ac28:	7830      	ldrb	r0, [r6, #0]
 800ac2a:	78b7      	ldrb	r7, [r6, #2]
 800ac2c:	bb5a      	cbnz	r2, 800ac86 <HAL_RTC_SetTime+0x80>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ac2e:	688a      	ldr	r2, [r1, #8]
 800ac30:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800ac34:	bf08      	it	eq
 800ac36:	70f2      	strbeq	r2, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ac38:	f7ff ffda 	bl	800abf0 <RTC_ByteToBcd2>
 800ac3c:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7ff ffd6 	bl	800abf0 <RTC_ByteToBcd2>
 800ac44:	4604      	mov	r4, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7ff ffd2 	bl	800abf0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));
 800ac4c:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800ac4e:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800ac52:	ea42 4308 	orr.w	r3, r2, r8, lsl #16
 800ac56:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac5a:	23ca      	movs	r3, #202	; 0xca
 800ac5c:	624b      	str	r3, [r1, #36]	; 0x24
 800ac5e:	2353      	movs	r3, #83	; 0x53
 800ac60:	624b      	str	r3, [r1, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ac62:	4628      	mov	r0, r5
 800ac64:	f7ff ff55 	bl	800ab12 <RTC_EnterInitMode>
 800ac68:	682a      	ldr	r2, [r5, #0]
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	b1c0      	cbz	r0, 800aca0 <HAL_RTC_SetTime+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac6e:	23ff      	movs	r3, #255	; 0xff
 800ac70:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ac72:	2304      	movs	r3, #4
 800ac74:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ac78:	2300      	movs	r3, #0
 800ac7a:	f885 3020 	strb.w	r3, [r5, #32]
        return HAL_ERROR;
 800ac7e:	2701      	movs	r7, #1
}
 800ac80:	4638      	mov	r0, r7
 800ac82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ac86:	688a      	ldr	r2, [r1, #8]
 800ac88:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      sTime->TimeFormat = 0x00;
 800ac8c:	bf08      	it	eq
 800ac8e:	70f2      	strbeq	r2, [r6, #3]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ac90:	0224      	lsls	r4, r4, #8
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ac92:	78f3      	ldrb	r3, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ac94:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ac98:	433c      	orrs	r4, r7
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ac9a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ac9e:	e7dc      	b.n	800ac5a <HAL_RTC_SetTime+0x54>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aca0:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 800aca4:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 800aca8:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 800acaa:	6893      	ldr	r3, [r2, #8]
 800acac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acb0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800acb2:	e9d6 3003 	ldrd	r3, r0, [r6, #12]
 800acb6:	6891      	ldr	r1, [r2, #8]
 800acb8:	4303      	orrs	r3, r0
 800acba:	430b      	orrs	r3, r1
 800acbc:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800acbe:	68d3      	ldr	r3, [r2, #12]
 800acc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acc4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800acc6:	6893      	ldr	r3, [r2, #8]
 800acc8:	069b      	lsls	r3, r3, #26
 800acca:	d40c      	bmi.n	800ace6 <HAL_RTC_SetTime+0xe0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800accc:	4628      	mov	r0, r5
 800acce:	f7ff ff08 	bl	800aae2 <HAL_RTC_WaitForSynchro>
 800acd2:	b140      	cbz	r0, 800ace6 <HAL_RTC_SetTime+0xe0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	22ff      	movs	r2, #255	; 0xff
 800acd8:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800acda:	2304      	movs	r3, #4
 800acdc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ace0:	f885 7020 	strb.w	r7, [r5, #32]
 800ace4:	e7cb      	b.n	800ac7e <HAL_RTC_SetTime+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	22ff      	movs	r2, #255	; 0xff
 800acea:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 800acec:	2301      	movs	r3, #1
 800acee:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 800acf2:	2300      	movs	r3, #0
 800acf4:	f885 3020 	strb.w	r3, [r5, #32]
   return HAL_OK;
 800acf8:	e7c2      	b.n	800ac80 <HAL_RTC_SetTime+0x7a>

0800acfa <HAL_RTC_SetDate>:
{
 800acfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 800acfc:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ad00:	2b01      	cmp	r3, #1
{
 800ad02:	4604      	mov	r4, r0
 800ad04:	f04f 0602 	mov.w	r6, #2
 __HAL_LOCK(hrtc);
 800ad08:	d035      	beq.n	800ad76 <HAL_RTC_SetDate+0x7c>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad10:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ad14:	780d      	ldrb	r5, [r1, #0]
 800ad16:	784b      	ldrb	r3, [r1, #1]
 800ad18:	788f      	ldrb	r7, [r1, #2]
 800ad1a:	78c8      	ldrb	r0, [r1, #3]
 800ad1c:	036d      	lsls	r5, r5, #13
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d14e      	bne.n	800adc0 <HAL_RTC_SetDate+0xc6>
 800ad22:	06da      	lsls	r2, r3, #27
 800ad24:	d503      	bpl.n	800ad2e <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ad26:	f023 0310 	bic.w	r3, r3, #16
 800ad2a:	330a      	adds	r3, #10
 800ad2c:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ad2e:	f7ff ff5f 	bl	800abf0 <RTC_ByteToBcd2>
 800ad32:	4606      	mov	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ad34:	7848      	ldrb	r0, [r1, #1]
 800ad36:	f7ff ff5b 	bl	800abf0 <RTC_ByteToBcd2>
 800ad3a:	4601      	mov	r1, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	f7ff ff57 	bl	800abf0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ad42:	ea40 0205 	orr.w	r2, r0, r5
 800ad46:	ea42 4306 	orr.w	r3, r2, r6, lsl #16
 800ad4a:	ea43 2501 	orr.w	r5, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	22ca      	movs	r2, #202	; 0xca
 800ad52:	625a      	str	r2, [r3, #36]	; 0x24
 800ad54:	2253      	movs	r2, #83	; 0x53
 800ad56:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f7ff feda 	bl	800ab12 <RTC_EnterInitMode>
 800ad5e:	6822      	ldr	r2, [r4, #0]
 800ad60:	4606      	mov	r6, r0
 800ad62:	b150      	cbz	r0, 800ad7a <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad64:	23ff      	movs	r3, #255	; 0xff
 800ad66:	6253      	str	r3, [r2, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ad68:	2304      	movs	r3, #4
 800ad6a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800ad74:	2601      	movs	r6, #1
}
 800ad76:	4630      	mov	r0, r6
 800ad78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ad7a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800ad7e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 800ad82:	6055      	str	r5, [r2, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ad84:	68d3      	ldr	r3, [r2, #12]
 800ad86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad8a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ad8c:	6893      	ldr	r3, [r2, #8]
 800ad8e:	069b      	lsls	r3, r3, #26
 800ad90:	d40c      	bmi.n	800adac <HAL_RTC_SetDate+0xb2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7ff fea5 	bl	800aae2 <HAL_RTC_WaitForSynchro>
 800ad98:	b140      	cbz	r0, 800adac <HAL_RTC_SetDate+0xb2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	22ff      	movs	r2, #255	; 0xff
 800ad9e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ada0:	2304      	movs	r3, #4
 800ada2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800ada6:	f884 6020 	strb.w	r6, [r4, #32]
 800adaa:	e7e3      	b.n	800ad74 <HAL_RTC_SetDate+0x7a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	22ff      	movs	r2, #255	; 0xff
 800adb0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800adb2:	2301      	movs	r3, #1
 800adb4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800adb8:	2300      	movs	r3, #0
 800adba:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 800adbe:	e7da      	b.n	800ad76 <HAL_RTC_SetDate+0x7c>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800adc0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800adc4:	433d      	orrs	r5, r7
 800adc6:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800adca:	e7c0      	b.n	800ad4e <HAL_RTC_SetDate+0x54>

0800adcc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800adcc:	0903      	lsrs	r3, r0, #4
 800adce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800add2:	f000 000f 	and.w	r0, r0, #15
 800add6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800adda:	b2c0      	uxtb	r0, r0
 800addc:	4770      	bx	lr

0800adde <HAL_RTC_GetTime>:
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800adde:	6803      	ldr	r3, [r0, #0]
 800ade0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ade2:	6048      	str	r0, [r1, #4]
{
 800ade4:	b570      	push	{r4, r5, r6, lr}
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ade6:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ade8:	681c      	ldr	r4, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800adea:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800adee:	f3c4 4506 	ubfx	r5, r4, #16, #7
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800adf2:	f3c4 2606 	ubfx	r6, r4, #8, #7
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800adf6:	6088      	str	r0, [r1, #8]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800adf8:	f005 0340 	and.w	r3, r5, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800adfc:	f3c4 4005 	ubfx	r0, r4, #16, #6
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ae00:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ae04:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800ae06:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ae08:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 800ae0a:	70cb      	strb	r3, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800ae0c:	b952      	cbnz	r2, 800ae24 <HAL_RTC_GetTime+0x46>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ae0e:	f7ff ffdd 	bl	800adcc <RTC_Bcd2ToByte>
 800ae12:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff ffd9 	bl	800adcc <RTC_Bcd2ToByte>
 800ae1a:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f7ff ffd5 	bl	800adcc <RTC_Bcd2ToByte>
 800ae22:	7088      	strb	r0, [r1, #2]
}
 800ae24:	2000      	movs	r0, #0
 800ae26:	bd70      	pop	{r4, r5, r6, pc}

0800ae28 <HAL_RTC_GetDate>:
{
 800ae28:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ae2a:	6803      	ldr	r3, [r0, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800ae2e:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800ae32:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ae36:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800ae3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800ae3e:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800ae40:	704d      	strb	r5, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ae42:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 800ae44:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 800ae46:	b952      	cbnz	r2, 800ae5e <HAL_RTC_GetDate+0x36>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ae48:	f7ff ffc0 	bl	800adcc <RTC_Bcd2ToByte>
 800ae4c:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f7ff ffbc 	bl	800adcc <RTC_Bcd2ToByte>
 800ae54:	7048      	strb	r0, [r1, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7ff ffb8 	bl	800adcc <RTC_Bcd2ToByte>
 800ae5c:	7088      	strb	r0, [r1, #2]
}
 800ae5e:	2000      	movs	r0, #0
 800ae60:	bd38      	pop	{r3, r4, r5, pc}

0800ae62 <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ae62:	6803      	ldr	r3, [r0, #0]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae6c:	6842      	ldr	r2, [r0, #4]
 800ae6e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800ae72:	d10a      	bne.n	800ae8a <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 800ae74:	6882      	ldr	r2, [r0, #8]
 800ae76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ae7a:	d002      	beq.n	800ae82 <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ae80:	d103      	bne.n	800ae8a <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae8a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ae8c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ae90:	d107      	bne.n	800aea2 <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          SPI_RESET_CRC(hspi);
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aea2:	2301      	movs	r3, #1
 800aea4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 800aeae:	2003      	movs	r0, #3
 800aeb0:	4770      	bx	lr

0800aeb2 <SPI_WaitFlagStateUntilTimeout>:
{
 800aeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aeba:	4605      	mov	r5, r0
 800aebc:	460f      	mov	r7, r1
 800aebe:	4616      	mov	r6, r2
 800aec0:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aec2:	682a      	ldr	r2, [r5, #0]
 800aec4:	6893      	ldr	r3, [r2, #8]
 800aec6:	ea37 0303 	bics.w	r3, r7, r3
 800aeca:	bf0c      	ite	eq
 800aecc:	2301      	moveq	r3, #1
 800aece:	2300      	movne	r3, #0
 800aed0:	429e      	cmp	r6, r3
 800aed2:	d102      	bne.n	800aeda <SPI_WaitFlagStateUntilTimeout+0x28>
}
 800aed4:	2000      	movs	r0, #0
 800aed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800aeda:	1c63      	adds	r3, r4, #1
 800aedc:	d0f2      	beq.n	800aec4 <SPI_WaitFlagStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800aede:	b924      	cbnz	r4, 800aeea <SPI_WaitFlagStateUntilTimeout+0x38>
 800aee0:	4628      	mov	r0, r5
}
 800aee2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee6:	f7ff bfbc 	b.w	800ae62 <SPI_WaitFifoStateUntilTimeout.part.0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800aeea:	f7fd fe5d 	bl	8008ba8 <HAL_GetTick>
 800aeee:	eba0 0008 	sub.w	r0, r0, r8
 800aef2:	42a0      	cmp	r0, r4
 800aef4:	d3e5      	bcc.n	800aec2 <SPI_WaitFlagStateUntilTimeout+0x10>
 800aef6:	e7f3      	b.n	800aee0 <SPI_WaitFlagStateUntilTimeout+0x2e>

0800aef8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aefc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af00:	4607      	mov	r7, r0
 800af02:	460e      	mov	r6, r1
 800af04:	4615      	mov	r5, r2
 800af06:	461c      	mov	r4, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	6893      	ldr	r3, [r2, #8]
 800af0c:	4033      	ands	r3, r6
 800af0e:	42ab      	cmp	r3, r5
 800af10:	d103      	bne.n	800af1a <SPI_WaitFifoStateUntilTimeout+0x22>
      }
    }
  }

  return HAL_OK;
}
 800af12:	2000      	movs	r0, #0
 800af14:	b002      	add	sp, #8
 800af16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800af1a:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800af1e:	d106      	bne.n	800af2e <SPI_WaitFifoStateUntilTimeout+0x36>
 800af20:	b92d      	cbnz	r5, 800af2e <SPI_WaitFifoStateUntilTimeout+0x36>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800af22:	7b13      	ldrb	r3, [r2, #12]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800af2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 800af2e:	1c63      	adds	r3, r4, #1
 800af30:	d0eb      	beq.n	800af0a <SPI_WaitFifoStateUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800af32:	b92c      	cbnz	r4, 800af40 <SPI_WaitFifoStateUntilTimeout+0x48>
 800af34:	4638      	mov	r0, r7
}
 800af36:	b002      	add	sp, #8
 800af38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3c:	f7ff bf91 	b.w	800ae62 <SPI_WaitFifoStateUntilTimeout.part.0>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800af40:	f7fd fe32 	bl	8008ba8 <HAL_GetTick>
 800af44:	eba0 0008 	sub.w	r0, r0, r8
 800af48:	42a0      	cmp	r0, r4
 800af4a:	d3dd      	bcc.n	800af08 <SPI_WaitFifoStateUntilTimeout+0x10>
 800af4c:	e7f2      	b.n	800af34 <SPI_WaitFifoStateUntilTimeout+0x3c>

0800af4e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af4e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af50:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af52:	6842      	ldr	r2, [r0, #4]
 800af54:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 800af58:	4604      	mov	r4, r0
 800af5a:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af5c:	d10b      	bne.n	800af76 <SPI_EndRxTransaction+0x28>
 800af5e:	6882      	ldr	r2, [r0, #8]
 800af60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800af64:	d002      	beq.n	800af6c <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af66:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800af6a:	d104      	bne.n	800af76 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800af6c:	6821      	ldr	r1, [r4, #0]
 800af6e:	680a      	ldr	r2, [r1, #0]
 800af70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af74:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af76:	9600      	str	r6, [sp, #0]
 800af78:	2200      	movs	r2, #0
 800af7a:	2180      	movs	r1, #128	; 0x80
 800af7c:	4620      	mov	r0, r4
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	f7ff ff97 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	4605      	mov	r5, r0
 800af88:	b128      	cbz	r0, 800af96 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800af8c:	f043 0320 	orr.w	r3, r3, #32
 800af90:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800af92:	2503      	movs	r5, #3
 800af94:	e013      	b.n	800afbe <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af96:	6862      	ldr	r2, [r4, #4]
 800af98:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800af9c:	d10f      	bne.n	800afbe <SPI_EndRxTransaction+0x70>
 800af9e:	68a2      	ldr	r2, [r4, #8]
 800afa0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800afa4:	d002      	beq.n	800afac <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afa6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800afaa:	d108      	bne.n	800afbe <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afac:	9600      	str	r6, [sp, #0]
 800afae:	2200      	movs	r2, #0
 800afb0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800afb4:	4620      	mov	r0, r4
 800afb6:	f7ff ff9f 	bl	800aef8 <SPI_WaitFifoStateUntilTimeout>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d1e5      	bne.n	800af8a <SPI_EndRxTransaction+0x3c>
}
 800afbe:	4628      	mov	r0, r5
 800afc0:	b004      	add	sp, #16
 800afc2:	bd70      	pop	{r4, r5, r6, pc}

0800afc4 <SPI_EndRxTxTransaction>:
{
 800afc4:	b530      	push	{r4, r5, lr}
 800afc6:	b085      	sub	sp, #20
 800afc8:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afca:	9200      	str	r2, [sp, #0]
 800afcc:	9103      	str	r1, [sp, #12]
{
 800afce:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800afd4:	2200      	movs	r2, #0
{
 800afd6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800afd8:	f7ff ff8e 	bl	800aef8 <SPI_WaitFifoStateUntilTimeout>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	4602      	mov	r2, r0
 800afe0:	b128      	cbz	r0, 800afee <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800afe4:	f043 0320 	orr.w	r3, r3, #32
 800afe8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800afea:	2003      	movs	r0, #3
 800afec:	e011      	b.n	800b012 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afee:	9500      	str	r5, [sp, #0]
 800aff0:	2180      	movs	r1, #128	; 0x80
 800aff2:	4620      	mov	r0, r4
 800aff4:	9303      	str	r3, [sp, #12]
 800aff6:	f7ff ff5c 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	4602      	mov	r2, r0
 800affe:	2800      	cmp	r0, #0
 800b000:	d1ef      	bne.n	800afe2 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b002:	9500      	str	r5, [sp, #0]
 800b004:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b008:	4620      	mov	r0, r4
 800b00a:	f7ff ff75 	bl	800aef8 <SPI_WaitFifoStateUntilTimeout>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d1e7      	bne.n	800afe2 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 800b012:	b005      	add	sp, #20
 800b014:	bd30      	pop	{r4, r5, pc}

0800b016 <HAL_SPI_MspInit>:
}
 800b016:	4770      	bx	lr

0800b018 <HAL_SPI_Init>:
{
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 800b01a:	4604      	mov	r4, r0
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d053      	beq.n	800b0c8 <HAL_SPI_Init+0xb0>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800b020:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800b024:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b028:	b91b      	cbnz	r3, 800b032 <HAL_SPI_Init+0x1a>
    hspi->Lock = HAL_UNLOCKED;
 800b02a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800b02e:	f7ff fff2 	bl	800b016 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800b032:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b034:	68e5      	ldr	r5, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b036:	2302      	movs	r3, #2
 800b038:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b03c:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b03e:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800b042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b046:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b048:	f04f 0300 	mov.w	r3, #0
 800b04c:	d83e      	bhi.n	800b0cc <HAL_SPI_Init+0xb4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b04e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b052:	d000      	beq.n	800b056 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b054:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b058:	b92b      	cbnz	r3, 800b066 <HAL_SPI_Init+0x4e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b05a:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b05e:	bf8c      	ite	hi
 800b060:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b062:	2301      	movls	r3, #1
 800b064:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b066:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b06a:	433b      	orrs	r3, r7
 800b06c:	6927      	ldr	r7, [r4, #16]
 800b06e:	69a1      	ldr	r1, [r4, #24]
 800b070:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b072:	433b      	orrs	r3, r7
 800b074:	6967      	ldr	r7, [r4, #20]
 800b076:	433b      	orrs	r3, r7
 800b078:	69e7      	ldr	r7, [r4, #28]
 800b07a:	433b      	orrs	r3, r7
 800b07c:	6a27      	ldr	r7, [r4, #32]
 800b07e:	433b      	orrs	r3, r7
 800b080:	4333      	orrs	r3, r6
 800b082:	f401 7700 	and.w	r7, r1, #512	; 0x200
 800b086:	433b      	orrs	r3, r7
 800b088:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b08a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b08c:	2b02      	cmp	r3, #2
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
 800b08e:	bf02      	ittt	eq
 800b090:	6813      	ldreq	r3, [r2, #0]
 800b092:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800b096:	6013      	streq	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b09a:	431d      	orrs	r5, r3
 800b09c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b09e:	0c09      	lsrs	r1, r1, #16
 800b0a0:	431d      	orrs	r5, r3
 800b0a2:	f001 0104 	and.w	r1, r1, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0a6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b0aa:	ea45 0501 	orr.w	r5, r5, r1
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800b0ae:	bf08      	it	eq
 800b0b0:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b0b2:	ea40 0005 	orr.w	r0, r0, r5
 800b0b6:	6050      	str	r0, [r2, #4]
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800b0b8:	bf08      	it	eq
 800b0ba:	6113      	streq	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0bc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800b0be:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0c0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b0c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800b0c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b0c8:	2001      	movs	r0, #1
 800b0ca:	e7fc      	b.n	800b0c6 <HAL_SPI_Init+0xae>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b0cc:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b0ce:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800b0d2:	e7be      	b.n	800b052 <HAL_SPI_Init+0x3a>

0800b0d4 <HAL_SPI_MspDeInit>:
 800b0d4:	4770      	bx	lr

0800b0d6 <HAL_SPI_DeInit>:
{
 800b0d6:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800b0d8:	4604      	mov	r4, r0
 800b0da:	b180      	cbz	r0, 800b0fe <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 800b0dc:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800b0de:	2302      	movs	r3, #2
 800b0e0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800b0e4:	6813      	ldr	r3, [r2, #0]
 800b0e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ea:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800b0ec:	f7ff fff2 	bl	800b0d4 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 800b0f4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 800b0f8:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 800b0fc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7fc      	b.n	800b0fc <HAL_SPI_DeInit+0x26>

0800b102 <HAL_SPI_TransmitReceive>:
{
 800b102:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b106:	b085      	sub	sp, #20
 800b108:	4699      	mov	r9, r3
  __IO uint16_t tmpreg = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	f8ad 300e 	strh.w	r3, [sp, #14]
  __HAL_LOCK(hspi);
 800b110:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 800b114:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800b116:	2b01      	cmp	r3, #1
{
 800b118:	4604      	mov	r4, r0
 800b11a:	460d      	mov	r5, r1
 800b11c:	4616      	mov	r6, r2
  __HAL_LOCK(hspi);
 800b11e:	f000 81a4 	beq.w	800b46a <HAL_SPI_TransmitReceive+0x368>
 800b122:	2301      	movs	r3, #1
 800b124:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b128:	f7fd fd3e 	bl	8008ba8 <HAL_GetTick>
  tmp  = hspi->State;
 800b12c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp1 = hspi->Init.Mode;
 800b130:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b132:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b134:	4680      	mov	r8, r0
  tmp  = hspi->State;
 800b136:	b2d9      	uxtb	r1, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b138:	d00a      	beq.n	800b150 <HAL_SPI_TransmitReceive+0x4e>
 800b13a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800b13e:	f040 8192 	bne.w	800b466 <HAL_SPI_TransmitReceive+0x364>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	f040 818e 	bne.w	800b466 <HAL_SPI_TransmitReceive+0x364>
 800b14a:	2904      	cmp	r1, #4
 800b14c:	f040 818b 	bne.w	800b466 <HAL_SPI_TransmitReceive+0x364>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b150:	2d00      	cmp	r5, #0
 800b152:	f000 8170 	beq.w	800b436 <HAL_SPI_TransmitReceive+0x334>
 800b156:	2e00      	cmp	r6, #0
 800b158:	f000 816d 	beq.w	800b436 <HAL_SPI_TransmitReceive+0x334>
 800b15c:	f1b9 0f00 	cmp.w	r9, #0
 800b160:	f000 8169 	beq.w	800b436 <HAL_SPI_TransmitReceive+0x334>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b164:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b168:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b16a:	6426      	str	r6, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b16c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b16e:	bf1c      	itt	ne
 800b170:	2305      	movne	r3, #5
 800b172:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b176:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b178:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b17c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800b17e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800b182:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b18c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b18e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b192:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b196:	d107      	bne.n	800b1a8 <HAL_SPI_TransmitReceive+0xa6>
    SPI_RESET_CRC(hspi);
 800b198:	6819      	ldr	r1, [r3, #0]
 800b19a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b19e:	6019      	str	r1, [r3, #0]
 800b1a0:	6819      	ldr	r1, [r3, #0]
 800b1a2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b1a6:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 800b1a8:	68e0      	ldr	r0, [r4, #12]
 800b1aa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b1ae:	d804      	bhi.n	800b1ba <HAL_SPI_TransmitReceive+0xb8>
 800b1b0:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800b1b4:	b289      	uxth	r1, r1
 800b1b6:	2901      	cmp	r1, #1
 800b1b8:	d937      	bls.n	800b22a <HAL_SPI_TransmitReceive+0x128>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b1ba:	6859      	ldr	r1, [r3, #4]
 800b1bc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b1c0:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1c2:	6819      	ldr	r1, [r3, #0]
 800b1c4:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800b1c6:	bf5e      	ittt	pl
 800b1c8:	6819      	ldrpl	r1, [r3, #0]
 800b1ca:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 800b1ce:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1d0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b1d4:	d97f      	bls.n	800b2d6 <HAL_SPI_TransmitReceive+0x1d4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b1d6:	b11a      	cbz	r2, 800b1e0 <HAL_SPI_TransmitReceive+0xde>
 800b1d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b1da:	b292      	uxth	r2, r2
 800b1dc:	2a01      	cmp	r2, #1
 800b1de:	d106      	bne.n	800b1ee <HAL_SPI_TransmitReceive+0xec>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800b1e0:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b1e4:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800b1e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b1ee:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	b9e3      	cbnz	r3, 800b232 <HAL_SPI_TransmitReceive+0x130>
 800b1f8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	b9c3      	cbnz	r3, 800b232 <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b206:	f040 80ff 	bne.w	800b408 <HAL_SPI_TransmitReceive+0x306>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b20a:	2201      	movs	r2, #1
 800b20c:	f8cd 8000 	str.w	r8, [sp]
 800b210:	463b      	mov	r3, r7
 800b212:	4611      	mov	r1, r2
 800b214:	4620      	mov	r0, r4
 800b216:	f7ff fe4c 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f000 80e9 	beq.w	800b3f2 <HAL_SPI_TransmitReceive+0x2f0>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b220:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b222:	f043 0302 	orr.w	r3, r3, #2
 800b226:	6623      	str	r3, [r4, #96]	; 0x60
 800b228:	e04a      	b.n	800b2c0 <HAL_SPI_TransmitReceive+0x1be>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b22a:	6859      	ldr	r1, [r3, #4]
 800b22c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800b230:	e7c6      	b.n	800b1c0 <HAL_SPI_TransmitReceive+0xbe>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b232:	f1b9 0f00 	cmp.w	r9, #0
 800b236:	d028      	beq.n	800b28a <HAL_SPI_TransmitReceive+0x188>
 800b238:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	b32b      	cbz	r3, 800b28a <HAL_SPI_TransmitReceive+0x188>
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	689a      	ldr	r2, [r3, #8]
 800b242:	0790      	lsls	r0, r2, #30
 800b244:	d521      	bpl.n	800b28a <HAL_SPI_TransmitReceive+0x188>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b246:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b24a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800b24c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b24e:	3a01      	subs	r2, #1
 800b250:	b292      	uxth	r2, r2
 800b252:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b254:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
 800b258:	fa1f f989 	uxth.w	r9, r9
 800b25c:	f1b9 0f00 	cmp.w	r9, #0
 800b260:	d111      	bne.n	800b286 <HAL_SPI_TransmitReceive+0x184>
 800b262:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b264:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b268:	d10f      	bne.n	800b28a <HAL_SPI_TransmitReceive+0x188>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	0751      	lsls	r1, r2, #29
 800b26e:	d406      	bmi.n	800b27e <HAL_SPI_TransmitReceive+0x17c>
 800b270:	685a      	ldr	r2, [r3, #4]
 800b272:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b274:	bf42      	ittt	mi
 800b276:	681a      	ldrmi	r2, [r3, #0]
 800b278:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b27c:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b284:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b286:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b28a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b28e:	b29b      	uxth	r3, r3
 800b290:	b173      	cbz	r3, 800b2b0 <HAL_SPI_TransmitReceive+0x1ae>
 800b292:	6821      	ldr	r1, [r4, #0]
 800b294:	688a      	ldr	r2, [r1, #8]
 800b296:	f012 0201 	ands.w	r2, r2, #1
 800b29a:	d009      	beq.n	800b2b0 <HAL_SPI_TransmitReceive+0x1ae>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b29c:	68cb      	ldr	r3, [r1, #12]
 800b29e:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b2a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800b2ae:	4691      	mov	r9, r2
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b2b0:	1c7b      	adds	r3, r7, #1
 800b2b2:	d09e      	beq.n	800b1f2 <HAL_SPI_TransmitReceive+0xf0>
 800b2b4:	f7fd fc78 	bl	8008ba8 <HAL_GetTick>
 800b2b8:	eba0 0008 	sub.w	r0, r0, r8
 800b2bc:	42b8      	cmp	r0, r7
 800b2be:	d398      	bcc.n	800b1f2 <HAL_SPI_TransmitReceive+0xf0>
          errorcode = HAL_TIMEOUT;
 800b2c0:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	b005      	add	sp, #20
 800b2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800b2d6:	b11a      	cbz	r2, 800b2e0 <HAL_SPI_TransmitReceive+0x1de>
 800b2d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b2da:	b292      	uxth	r2, r2
 800b2dc:	2a01      	cmp	r2, #1
 800b2de:	d10a      	bne.n	800b2f6 <HAL_SPI_TransmitReceive+0x1f4>
      if (hspi->TxXferCount > 1U)
 800b2e0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b2e2:	b292      	uxth	r2, r2
 800b2e4:	2a01      	cmp	r2, #1
 800b2e6:	d974      	bls.n	800b3d2 <HAL_SPI_TransmitReceive+0x2d0>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800b2e8:	f835 2b02 	ldrh.w	r2, [r5], #2
 800b2ec:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800b2ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b2f0:	3b02      	subs	r3, #2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800b2f6:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	b92b      	cbnz	r3, 800b30c <HAL_SPI_TransmitReceive+0x20a>
 800b300:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b304:	b29b      	uxth	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	f43f af7a 	beq.w	800b200 <HAL_SPI_TransmitReceive+0xfe>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800b30c:	f1b9 0f00 	cmp.w	r9, #0
 800b310:	d035      	beq.n	800b37e <HAL_SPI_TransmitReceive+0x27c>
 800b312:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b314:	b29b      	uxth	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d031      	beq.n	800b37e <HAL_SPI_TransmitReceive+0x27c>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	0790      	lsls	r0, r2, #30
 800b320:	d52d      	bpl.n	800b37e <HAL_SPI_TransmitReceive+0x27c>
        if (hspi->TxXferCount > 1U)
 800b322:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b324:	b292      	uxth	r2, r2
 800b326:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b328:	bf8b      	itete	hi
 800b32a:	f835 2b02 	ldrhhi.w	r2, [r5], #2
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b32e:	f815 2b01 	ldrbls.w	r2, [r5], #1
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800b332:	60da      	strhi	r2, [r3, #12]
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b334:	731a      	strbls	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800b336:	bf8b      	itete	hi
 800b338:	8fe3      	ldrhhi	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount--;
 800b33a:	8fe3      	ldrhls	r3, [r4, #62]	; 0x3e
          hspi->TxXferCount -= 2U;
 800b33c:	3b02      	subhi	r3, #2
          hspi->TxXferCount--;
 800b33e:	f103 33ff 	addls.w	r3, r3, #4294967295
 800b342:	b29b      	uxth	r3, r3
 800b344:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800b346:	f8b4 903e 	ldrh.w	r9, [r4, #62]	; 0x3e
 800b34a:	fa1f f989 	uxth.w	r9, r9
 800b34e:	f1b9 0f00 	cmp.w	r9, #0
 800b352:	d112      	bne.n	800b37a <HAL_SPI_TransmitReceive+0x278>
 800b354:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b356:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b35a:	d110      	bne.n	800b37e <HAL_SPI_TransmitReceive+0x27c>
          if (((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0U) && ((hspi->Instance->CR2 & SPI_CR2_NSSP) == SPI_CR2_NSSP))
 800b35c:	6823      	ldr	r3, [r4, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	0751      	lsls	r1, r2, #29
 800b362:	d406      	bmi.n	800b372 <HAL_SPI_TransmitReceive+0x270>
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	0712      	lsls	r2, r2, #28
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800b368:	bf42      	ittt	mi
 800b36a:	681a      	ldrmi	r2, [r3, #0]
 800b36c:	f442 7200 	orrmi.w	r2, r2, #512	; 0x200
 800b370:	601a      	strmi	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b378:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 800b37a:	f04f 0900 	mov.w	r9, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800b37e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b382:	b29b      	uxth	r3, r3
 800b384:	b1e3      	cbz	r3, 800b3c0 <HAL_SPI_TransmitReceive+0x2be>
 800b386:	6820      	ldr	r0, [r4, #0]
 800b388:	6881      	ldr	r1, [r0, #8]
 800b38a:	f011 0101 	ands.w	r1, r1, #1
 800b38e:	d017      	beq.n	800b3c0 <HAL_SPI_TransmitReceive+0x2be>
        if (hspi->RxXferCount > 1U)
 800b390:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b394:	b29b      	uxth	r3, r3
 800b396:	2b01      	cmp	r3, #1
 800b398:	d921      	bls.n	800b3de <HAL_SPI_TransmitReceive+0x2dc>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800b39a:	68c3      	ldr	r3, [r0, #12]
 800b39c:	f826 3b02 	strh.w	r3, [r6], #2
          hspi->RxXferCount -= 2U;
 800b3a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3a4:	3b02      	subs	r3, #2
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800b3ac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d803      	bhi.n	800b3be <HAL_SPI_TransmitReceive+0x2bc>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b3b6:	6843      	ldr	r3, [r0, #4]
 800b3b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b3bc:	6043      	str	r3, [r0, #4]
        txallowed = 1U;
 800b3be:	4689      	mov	r9, r1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800b3c0:	1c7b      	adds	r3, r7, #1
 800b3c2:	d09a      	beq.n	800b2fa <HAL_SPI_TransmitReceive+0x1f8>
 800b3c4:	f7fd fbf0 	bl	8008ba8 <HAL_GetTick>
 800b3c8:	eba0 0008 	sub.w	r0, r0, r8
 800b3cc:	42b8      	cmp	r0, r7
 800b3ce:	d394      	bcc.n	800b2fa <HAL_SPI_TransmitReceive+0x1f8>
 800b3d0:	e776      	b.n	800b2c0 <HAL_SPI_TransmitReceive+0x1be>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800b3d2:	f815 2b01 	ldrb.w	r2, [r5], #1
 800b3d6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800b3d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	e789      	b.n	800b2f2 <HAL_SPI_TransmitReceive+0x1f0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b3de:	7b03      	ldrb	r3, [r0, #12]
 800b3e0:	f806 3b01 	strb.w	r3, [r6], #1
          hspi->RxXferCount--;
 800b3e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b3f0:	e7e5      	b.n	800b3be <HAL_SPI_TransmitReceive+0x2bc>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3f2:	68e2      	ldr	r2, [r4, #12]
 800b3f4:	6823      	ldr	r3, [r4, #0]
 800b3f6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b3fa:	d11e      	bne.n	800b43a <HAL_SPI_TransmitReceive+0x338>
      tmpreg = hspi->Instance->DR;
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b400:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b404:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b408:	6822      	ldr	r2, [r4, #0]
 800b40a:	6895      	ldr	r5, [r2, #8]
 800b40c:	f015 0510 	ands.w	r5, r5, #16
 800b410:	d007      	beq.n	800b422 <HAL_SPI_TransmitReceive+0x320>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b412:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b414:	f043 0302 	orr.w	r3, r3, #2
 800b418:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b41a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b41e:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 800b420:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b422:	4642      	mov	r2, r8
 800b424:	4639      	mov	r1, r7
 800b426:	4620      	mov	r0, r4
 800b428:	f7ff fdcc 	bl	800afc4 <SPI_EndRxTxTransaction>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	f43f af48 	beq.w	800b2c2 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b432:	2320      	movs	r3, #32
 800b434:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800b436:	2501      	movs	r5, #1
 800b438:	e743      	b.n	800b2c2 <HAL_SPI_TransmitReceive+0x1c0>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b43a:	7b1b      	ldrb	r3, [r3, #12]
 800b43c:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 800b440:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b444:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b446:	2b02      	cmp	r3, #2
 800b448:	d1de      	bne.n	800b408 <HAL_SPI_TransmitReceive+0x306>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b44a:	2201      	movs	r2, #1
 800b44c:	f8cd 8000 	str.w	r8, [sp]
 800b450:	463b      	mov	r3, r7
 800b452:	4611      	mov	r1, r2
 800b454:	4620      	mov	r0, r4
 800b456:	f7ff fd2c 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f47f aee0 	bne.w	800b220 <HAL_SPI_TransmitReceive+0x11e>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	7b1b      	ldrb	r3, [r3, #12]
 800b464:	e7cc      	b.n	800b400 <HAL_SPI_TransmitReceive+0x2fe>
    errorcode = HAL_BUSY;
 800b466:	2502      	movs	r5, #2
 800b468:	e72b      	b.n	800b2c2 <HAL_SPI_TransmitReceive+0x1c0>
  __HAL_LOCK(hspi);
 800b46a:	2502      	movs	r5, #2
 800b46c:	e72f      	b.n	800b2ce <HAL_SPI_TransmitReceive+0x1cc>

0800b46e <HAL_SPI_Receive>:
{
 800b46e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b472:	461d      	mov	r5, r3
  __IO uint16_t tmpreg = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	f8ad 300e 	strh.w	r3, [sp, #14]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b47a:	6843      	ldr	r3, [r0, #4]
 800b47c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800b480:	4604      	mov	r4, r0
 800b482:	460e      	mov	r6, r1
 800b484:	4690      	mov	r8, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b486:	d10c      	bne.n	800b4a2 <HAL_SPI_Receive+0x34>
 800b488:	6883      	ldr	r3, [r0, #8]
 800b48a:	b953      	cbnz	r3, 800b4a2 <HAL_SPI_Receive+0x34>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b48c:	2304      	movs	r3, #4
 800b48e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b492:	4613      	mov	r3, r2
 800b494:	9500      	str	r5, [sp, #0]
 800b496:	460a      	mov	r2, r1
 800b498:	f7ff fe33 	bl	800b102 <HAL_SPI_TransmitReceive>
}
 800b49c:	b004      	add	sp, #16
 800b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800b4a2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	f000 80f6 	beq.w	800b698 <HAL_SPI_Receive+0x22a>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800b4b2:	f7fd fb79 	bl	8008ba8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b4b6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b4ba:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b4bc:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800b4be:	b2d8      	uxtb	r0, r3
 800b4c0:	f040 80e8 	bne.w	800b694 <HAL_SPI_Receive+0x226>
  if ((pData == NULL) || (Size == 0U))
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	f000 8092 	beq.w	800b5ee <HAL_SPI_Receive+0x180>
 800b4ca:	f1b8 0f00 	cmp.w	r8, #0
 800b4ce:	f000 808e 	beq.w	800b5ee <HAL_SPI_Receive+0x180>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b4d4:	6426      	str	r6, [r4, #64]	; 0x40
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b4d6:	2304      	movs	r3, #4
 800b4d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4dc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b4e0:	f04f 0300 	mov.w	r3, #0
 800b4e4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800b4e6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 800b4ea:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b4ee:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b4f0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b4f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b4f4:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	d10d      	bne.n	800b518 <HAL_SPI_Receive+0xaa>
    SPI_RESET_CRC(hspi);
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b50a:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 800b50c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800b510:	3a01      	subs	r2, #1
 800b512:	b292      	uxth	r2, r2
 800b514:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b518:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b51a:	685a      	ldr	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b51c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b520:	bf8c      	ite	hi
 800b522:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b526:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
 800b52a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b52c:	68a2      	ldr	r2, [r4, #8]
 800b52e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b532:	bf02      	ittt	eq
 800b534:	681a      	ldreq	r2, [r3, #0]
 800b536:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b53a:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800b540:	bf5e      	ittt	pl
 800b542:	681a      	ldrpl	r2, [r3, #0]
 800b544:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800b548:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b54a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b54e:	d91e      	bls.n	800b58e <HAL_SPI_Receive+0x120>
    while (hspi->RxXferCount > 0U)
 800b550:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b554:	b29b      	uxth	r3, r3
 800b556:	b1fb      	cbz	r3, 800b598 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	07d1      	lsls	r1, r2, #31
 800b55e:	d555      	bpl.n	800b60c <HAL_SPI_Receive+0x19e>
        *((uint16_t *)pData) = hspi->Instance->DR;
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800b566:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b572:	e7ed      	b.n	800b550 <HAL_SPI_Receive+0xe2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	689a      	ldr	r2, [r3, #8]
 800b578:	07d2      	lsls	r2, r2, #31
 800b57a:	d536      	bpl.n	800b5ea <HAL_SPI_Receive+0x17c>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b57c:	7b1b      	ldrb	r3, [r3, #12]
 800b57e:	f806 3b01 	strb.w	r3, [r6], #1
        hspi->RxXferCount--;
 800b582:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b586:	3b01      	subs	r3, #1
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 800b58e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b592:	b29b      	uxth	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1ed      	bne.n	800b574 <HAL_SPI_Receive+0x106>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b59a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b59e:	d14a      	bne.n	800b636 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b5a0:	6822      	ldr	r2, [r4, #0]
 800b5a2:	6813      	ldr	r3, [r2, #0]
 800b5a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5a8:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	9700      	str	r7, [sp, #0]
 800b5ae:	462b      	mov	r3, r5
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f7ff fc7d 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800b5b8:	b9c0      	cbnz	r0, 800b5ec <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5ba:	68e2      	ldr	r2, [r4, #12]
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b5c2:	bf8a      	itet	hi
 800b5c4:	68db      	ldrhi	r3, [r3, #12]
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5c6:	7b1b      	ldrbls	r3, [r3, #12]
      *((uint16_t *)pData) = hspi->Instance->DR;
 800b5c8:	8033      	strhhi	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b5ca:	f04f 0201 	mov.w	r2, #1
      (*(uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5ce:	bf98      	it	ls
 800b5d0:	7033      	strbls	r3, [r6, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800b5d2:	9700      	str	r7, [sp, #0]
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7ff fc6a 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800b5de:	b1f8      	cbz	r0, 800b620 <HAL_SPI_Receive+0x1b2>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b5e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b5e2:	f043 0302 	orr.w	r3, r3, #2
 800b5e6:	6623      	str	r3, [r4, #96]	; 0x60
 800b5e8:	e000      	b.n	800b5ec <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b5ea:	b93d      	cbnz	r5, 800b5fc <HAL_SPI_Receive+0x18e>
          errorcode = HAL_TIMEOUT;
 800b5ec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800b5fa:	e74f      	b.n	800b49c <HAL_SPI_Receive+0x2e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b5fc:	1c68      	adds	r0, r5, #1
 800b5fe:	d0c6      	beq.n	800b58e <HAL_SPI_Receive+0x120>
 800b600:	f7fd fad2 	bl	8008ba8 <HAL_GetTick>
 800b604:	1bc0      	subs	r0, r0, r7
 800b606:	42a8      	cmp	r0, r5
 800b608:	d3c1      	bcc.n	800b58e <HAL_SPI_Receive+0x120>
 800b60a:	e7ef      	b.n	800b5ec <HAL_SPI_Receive+0x17e>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800b60c:	2d00      	cmp	r5, #0
 800b60e:	d0ed      	beq.n	800b5ec <HAL_SPI_Receive+0x17e>
 800b610:	1c6a      	adds	r2, r5, #1
 800b612:	d09d      	beq.n	800b550 <HAL_SPI_Receive+0xe2>
 800b614:	f7fd fac8 	bl	8008ba8 <HAL_GetTick>
 800b618:	1bc0      	subs	r0, r0, r7
 800b61a:	42a8      	cmp	r0, r5
 800b61c:	d398      	bcc.n	800b550 <HAL_SPI_Receive+0xe2>
 800b61e:	e7e5      	b.n	800b5ec <HAL_SPI_Receive+0x17e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b620:	68e2      	ldr	r2, [r4, #12]
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b628:	d11d      	bne.n	800b666 <HAL_SPI_Receive+0x1f8>
      tmpreg = hspi->Instance->DR;
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b62e:	f8ad 300e 	strh.w	r3, [sp, #14]
        UNUSED(tmpreg);
 800b632:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b636:	463a      	mov	r2, r7
 800b638:	4629      	mov	r1, r5
 800b63a:	4620      	mov	r0, r4
 800b63c:	f7ff fc87 	bl	800af4e <SPI_EndRxTransaction>
 800b640:	b108      	cbz	r0, 800b646 <HAL_SPI_Receive+0x1d8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b642:	2320      	movs	r3, #32
 800b644:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800b646:	6822      	ldr	r2, [r4, #0]
 800b648:	6893      	ldr	r3, [r2, #8]
 800b64a:	06db      	lsls	r3, r3, #27
 800b64c:	d506      	bpl.n	800b65c <HAL_SPI_Receive+0x1ee>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800b64e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b650:	f043 0302 	orr.w	r3, r3, #2
 800b654:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b656:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800b65a:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b65c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800b65e:	3800      	subs	r0, #0
 800b660:	bf18      	it	ne
 800b662:	2001      	movne	r0, #1
error :
 800b664:	e7c3      	b.n	800b5ee <HAL_SPI_Receive+0x180>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b666:	7b1b      	ldrb	r3, [r3, #12]
 800b668:	f8ad 300e 	strh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b66c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg);
 800b670:	f8bd 300e 	ldrh.w	r3, [sp, #14]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b674:	d1df      	bne.n	800b636 <HAL_SPI_Receive+0x1c8>
 800b676:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d1dc      	bne.n	800b636 <HAL_SPI_Receive+0x1c8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout, tickstart) != HAL_OK)
 800b67c:	2201      	movs	r2, #1
 800b67e:	9700      	str	r7, [sp, #0]
 800b680:	462b      	mov	r3, r5
 800b682:	4611      	mov	r1, r2
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff fc14 	bl	800aeb2 <SPI_WaitFlagStateUntilTimeout>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d1a8      	bne.n	800b5e0 <HAL_SPI_Receive+0x172>
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	7b1b      	ldrb	r3, [r3, #12]
 800b692:	e7cc      	b.n	800b62e <HAL_SPI_Receive+0x1c0>
    errorcode = HAL_BUSY;
 800b694:	2002      	movs	r0, #2
 800b696:	e7aa      	b.n	800b5ee <HAL_SPI_Receive+0x180>
  __HAL_LOCK(hspi);
 800b698:	2002      	movs	r0, #2
 800b69a:	e6ff      	b.n	800b49c <HAL_SPI_Receive+0x2e>

0800b69c <HAL_SPI_Transmit_IT>:
{
 800b69c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800b69e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 800b6a2:	2801      	cmp	r0, #1
 800b6a4:	d049      	beq.n	800b73a <HAL_SPI_Transmit_IT+0x9e>
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 800b6ac:	2900      	cmp	r1, #0
 800b6ae:	d03c      	beq.n	800b72a <HAL_SPI_Transmit_IT+0x8e>
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	d03a      	beq.n	800b72a <HAL_SPI_Transmit_IT+0x8e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800b6b4:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 800b6b8:	2801      	cmp	r0, #1
 800b6ba:	d13a      	bne.n	800b732 <HAL_SPI_Transmit_IT+0x96>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b6bc:	2003      	movs	r0, #3
 800b6be:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b6c6:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b6c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 800b6ca:	491d      	ldr	r1, [pc, #116]	; (800b740 <HAL_SPI_Transmit_IT+0xa4>)
  hspi->RxXferCount = 0U;
 800b6cc:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->TxXferSize  = Size;
 800b6d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b6d2:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b6d4:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b6d8:	64d8      	str	r0, [r3, #76]	; 0x4c
    hspi->TxISR = SPI_TxISR_8BIT;
 800b6da:	4a1a      	ldr	r2, [pc, #104]	; (800b744 <HAL_SPI_Transmit_IT+0xa8>)
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b6dc:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 800b6de:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b6e2:	bf98      	it	ls
 800b6e4:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6e6:	6899      	ldr	r1, [r3, #8]
 800b6e8:	651a      	str	r2, [r3, #80]	; 0x50
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 800b6f0:	bf02      	ittt	eq
 800b6f2:	6811      	ldreq	r1, [r2, #0]
 800b6f4:	f441 4180 	orreq.w	r1, r1, #16384	; 0x4000
 800b6f8:	6011      	streq	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b6fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800b6fc:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b700:	d107      	bne.n	800b712 <HAL_SPI_Transmit_IT+0x76>
    SPI_RESET_CRC(hspi);
 800b702:	6811      	ldr	r1, [r2, #0]
 800b704:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b708:	6011      	str	r1, [r2, #0]
 800b70a:	6811      	ldr	r1, [r2, #0]
 800b70c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b710:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b712:	6851      	ldr	r1, [r2, #4]
 800b714:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 800b718:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b71a:	6810      	ldr	r0, [r2, #0]
 800b71c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b720:	d109      	bne.n	800b736 <HAL_SPI_Transmit_IT+0x9a>
    __HAL_SPI_ENABLE(hspi);
 800b722:	6811      	ldr	r1, [r2, #0]
 800b724:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b728:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b730:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800b732:	2002      	movs	r0, #2
 800b734:	e7f9      	b.n	800b72a <HAL_SPI_Transmit_IT+0x8e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b736:	2000      	movs	r0, #0
 800b738:	e7f7      	b.n	800b72a <HAL_SPI_Transmit_IT+0x8e>
  __HAL_LOCK(hspi);
 800b73a:	2002      	movs	r0, #2
}
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	0800b99b 	.word	0x0800b99b
 800b744:	0800b9cd 	.word	0x0800b9cd

0800b748 <HAL_SPI_TransmitReceive_IT>:
{
 800b748:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 800b74a:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800b74e:	2c01      	cmp	r4, #1
 800b750:	d073      	beq.n	800b83a <HAL_SPI_TransmitReceive_IT+0xf2>
 800b752:	2401      	movs	r4, #1
 800b754:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 800b758:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b75c:	2c01      	cmp	r4, #1
  tmp  = hspi->State;
 800b75e:	b2e5      	uxtb	r5, r4
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800b760:	d008      	beq.n	800b774 <HAL_SPI_TransmitReceive_IT+0x2c>
 800b762:	6844      	ldr	r4, [r0, #4]
 800b764:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 800b768:	d161      	bne.n	800b82e <HAL_SPI_TransmitReceive_IT+0xe6>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800b76a:	6884      	ldr	r4, [r0, #8]
 800b76c:	2c00      	cmp	r4, #0
 800b76e:	d15e      	bne.n	800b82e <HAL_SPI_TransmitReceive_IT+0xe6>
 800b770:	2d04      	cmp	r5, #4
 800b772:	d15c      	bne.n	800b82e <HAL_SPI_TransmitReceive_IT+0xe6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b774:	2900      	cmp	r1, #0
 800b776:	d05c      	beq.n	800b832 <HAL_SPI_TransmitReceive_IT+0xea>
 800b778:	2a00      	cmp	r2, #0
 800b77a:	d05a      	beq.n	800b832 <HAL_SPI_TransmitReceive_IT+0xea>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d058      	beq.n	800b832 <HAL_SPI_TransmitReceive_IT+0xea>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b780:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->TxXferSize  = Size;
 800b784:	8783      	strh	r3, [r0, #60]	; 0x3c
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b786:	2c04      	cmp	r4, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b788:	bf1c      	itt	ne
 800b78a:	2405      	movne	r4, #5
 800b78c:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b790:	2400      	movs	r4, #0
 800b792:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->RxXferSize  = Size;
 800b794:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->TxXferCount = Size;
 800b798:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800b79a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b79e:	68c3      	ldr	r3, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7a0:	6402      	str	r2, [r0, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b7a6:	bf8b      	itete	hi
 800b7a8:	4a25      	ldrhi	r2, [pc, #148]	; (800b840 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b7aa:	4a26      	ldrls	r2, [pc, #152]	; (800b844 <HAL_SPI_TransmitReceive_IT+0xfc>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b7ac:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b7ae:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b7b0:	bf8c      	ite	hi
 800b7b2:	4a25      	ldrhi	r2, [pc, #148]	; (800b848 <HAL_SPI_TransmitReceive_IT+0x100>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b7b4:	4a25      	ldrls	r2, [pc, #148]	; (800b84c <HAL_SPI_TransmitReceive_IT+0x104>)
 800b7b6:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7ba:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b7c0:	6802      	ldr	r2, [r0, #0]
 800b7c2:	d12d      	bne.n	800b820 <HAL_SPI_TransmitReceive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b7c4:	2101      	movs	r1, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b7c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b7ca:	6481      	str	r1, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b7cc:	d803      	bhi.n	800b7d6 <HAL_SPI_TransmitReceive_IT+0x8e>
 800b7ce:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b7d0:	2902      	cmp	r1, #2
      hspi->CRCSize = 2U;
 800b7d2:	bf08      	it	eq
 800b7d4:	6481      	streq	r1, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b7d6:	6811      	ldr	r1, [r2, #0]
 800b7d8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800b7dc:	6011      	str	r1, [r2, #0]
 800b7de:	6811      	ldr	r1, [r2, #0]
 800b7e0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800b7e4:	6011      	str	r1, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 800b7e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7ea:	d804      	bhi.n	800b7f6 <HAL_SPI_TransmitReceive_IT+0xae>
 800b7ec:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d917      	bls.n	800b826 <HAL_SPI_TransmitReceive_IT+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7f6:	6853      	ldr	r3, [r2, #4]
 800b7f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b7fc:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7fe:	6853      	ldr	r3, [r2, #4]
 800b800:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b804:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b806:	6813      	ldr	r3, [r2, #0]
 800b808:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800b80c:	d113      	bne.n	800b836 <HAL_SPI_TransmitReceive_IT+0xee>
    __HAL_SPI_ENABLE(hspi);
 800b80e:	6811      	ldr	r1, [r2, #0]
 800b810:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800b814:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b816:	2200      	movs	r2, #0
 800b818:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 800b820:	2100      	movs	r1, #0
 800b822:	6481      	str	r1, [r0, #72]	; 0x48
 800b824:	e7df      	b.n	800b7e6 <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b826:	6853      	ldr	r3, [r2, #4]
 800b828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b82c:	e7e6      	b.n	800b7fc <HAL_SPI_TransmitReceive_IT+0xb4>
    errorcode = HAL_BUSY;
 800b82e:	2302      	movs	r3, #2
 800b830:	e7f1      	b.n	800b816 <HAL_SPI_TransmitReceive_IT+0xce>
    errorcode = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e7ef      	b.n	800b816 <HAL_SPI_TransmitReceive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	e7ed      	b.n	800b816 <HAL_SPI_TransmitReceive_IT+0xce>
  __HAL_LOCK(hspi);
 800b83a:	2302      	movs	r3, #2
 800b83c:	e7ee      	b.n	800b81c <HAL_SPI_TransmitReceive_IT+0xd4>
 800b83e:	bf00      	nop
 800b840:	0800bd29 	.word	0x0800bd29
 800b844:	0800bc1d 	.word	0x0800bc1d
 800b848:	0800bcd3 	.word	0x0800bcd3
 800b84c:	0800bbbb 	.word	0x0800bbbb

0800b850 <HAL_SPI_Receive_IT>:
{
 800b850:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b852:	6886      	ldr	r6, [r0, #8]
{
 800b854:	4604      	mov	r4, r0
 800b856:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b858:	b95e      	cbnz	r6, 800b872 <HAL_SPI_Receive_IT+0x22>
 800b85a:	6843      	ldr	r3, [r0, #4]
 800b85c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b860:	d107      	bne.n	800b872 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b862:	2304      	movs	r3, #4
 800b864:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 800b868:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b86a:	4613      	mov	r3, r2
 800b86c:	460a      	mov	r2, r1
 800b86e:	f7ff bf6b 	b.w	800b748 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 800b872:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b876:	2b01      	cmp	r3, #1
 800b878:	d05d      	beq.n	800b936 <HAL_SPI_Receive_IT+0xe6>
 800b87a:	2301      	movs	r3, #1
 800b87c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800b880:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800b884:	2b01      	cmp	r3, #1
 800b886:	b2d8      	uxtb	r0, r3
 800b888:	d151      	bne.n	800b92e <HAL_SPI_Receive_IT+0xde>
  if ((pData == NULL) || (Size == 0U))
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	d047      	beq.n	800b91e <HAL_SPI_Receive_IT+0xce>
 800b88e:	2a00      	cmp	r2, #0
 800b890:	d045      	beq.n	800b91e <HAL_SPI_Receive_IT+0xce>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b892:	2304      	movs	r3, #4
 800b894:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b898:	2300      	movs	r3, #0
 800b89a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b89c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b89e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 800b8a2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b8a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b8a6:	6523      	str	r3, [r4, #80]	; 0x50
 800b8a8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8aa:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 800b8ac:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8b0:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b8b2:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b8b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8b8:	bf8b      	itete	hi
 800b8ba:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8be:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8c2:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8c4:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800b8c6:	bf8c      	ite	hi
 800b8c8:	4a1c      	ldrhi	r2, [pc, #112]	; (800b93c <HAL_SPI_Receive_IT+0xec>)
    hspi->RxISR = SPI_RxISR_8BIT;
 800b8ca:	4a1d      	ldrls	r2, [pc, #116]	; (800b940 <HAL_SPI_Receive_IT+0xf0>)
 800b8cc:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8ce:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 800b8d2:	bf02      	ittt	eq
 800b8d4:	681a      	ldreq	r2, [r3, #0]
 800b8d6:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 800b8da:	601a      	streq	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b8de:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b8e2:	d121      	bne.n	800b928 <HAL_SPI_Receive_IT+0xd8>
    hspi->CRCSize = 1U;
 800b8e4:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b8e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 800b8ea:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800b8ec:	d803      	bhi.n	800b8f6 <HAL_SPI_Receive_IT+0xa6>
 800b8ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b8f0:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 800b8f2:	bf08      	it	eq
 800b8f4:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b904:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b90c:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b90e:	6818      	ldr	r0, [r3, #0]
 800b910:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b914:	d10d      	bne.n	800b932 <HAL_SPI_Receive_IT+0xe2>
    __HAL_SPI_ENABLE(hspi);
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b91c:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800b91e:	2300      	movs	r3, #0
 800b920:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800b924:	bc70      	pop	{r4, r5, r6}
 800b926:	4770      	bx	lr
    hspi->CRCSize = 0U;
 800b928:	2200      	movs	r2, #0
 800b92a:	64a2      	str	r2, [r4, #72]	; 0x48
 800b92c:	e7eb      	b.n	800b906 <HAL_SPI_Receive_IT+0xb6>
    errorcode = HAL_BUSY;
 800b92e:	2002      	movs	r0, #2
 800b930:	e7f5      	b.n	800b91e <HAL_SPI_Receive_IT+0xce>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b932:	2000      	movs	r0, #0
 800b934:	e7f3      	b.n	800b91e <HAL_SPI_Receive_IT+0xce>
  __HAL_LOCK(hspi);
 800b936:	2002      	movs	r0, #2
 800b938:	e7f4      	b.n	800b924 <HAL_SPI_Receive_IT+0xd4>
 800b93a:	bf00      	nop
 800b93c:	0800bad1 	.word	0x0800bad1
 800b940:	0800ba55 	.word	0x0800ba55

0800b944 <HAL_SPI_TxRxCpltCallback>:
 800b944:	4770      	bx	lr

0800b946 <HAL_SPI_ErrorCallback>:
 800b946:	4770      	bx	lr

0800b948 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b948:	b513      	push	{r0, r1, r4, lr}
 800b94a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b94c:	f7fd f92c 	bl	8008ba8 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b950:	6821      	ldr	r1, [r4, #0]
 800b952:	684b      	ldr	r3, [r1, #4]
 800b954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 800b958:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b95a:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b95c:	4620      	mov	r0, r4
 800b95e:	2164      	movs	r1, #100	; 0x64
 800b960:	f7ff fb30 	bl	800afc4 <SPI_EndRxTxTransaction>
 800b964:	b118      	cbz	r0, 800b96e <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b966:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800b968:	f043 0320 	orr.w	r3, r3, #32
 800b96c:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	b933      	cbnz	r3, 800b980 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b972:	9301      	str	r3, [sp, #4]
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	68da      	ldr	r2, [r3, #12]
 800b978:	9201      	str	r2, [sp, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b980:	2301      	movs	r3, #1
 800b982:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b986:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    HAL_SPI_ErrorCallback(hspi);
 800b988:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b98a:	b11b      	cbz	r3, 800b994 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 800b98c:	f7ff ffdb 	bl	800b946 <HAL_SPI_ErrorCallback>
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
  }
}
 800b990:	b002      	add	sp, #8
 800b992:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 800b994:	f7f9 fa10 	bl	8004db8 <HAL_SPI_TxCpltCallback>
}
 800b998:	e7fa      	b.n	800b990 <SPI_CloseTx_ISR+0x48>

0800b99a <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b99a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	6382      	str	r2, [r0, #56]	; 0x38
 800b9a0:	6802      	ldr	r2, [r0, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 800b9a6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b9ae:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	b953      	cbnz	r3, 800b9ca <SPI_TxISR_8BIT+0x30>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b9b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b9ba:	bf01      	itttt	eq
 800b9bc:	6802      	ldreq	r2, [r0, #0]
 800b9be:	6813      	ldreq	r3, [r2, #0]
 800b9c0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b9c4:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800b9c6:	f7ff bfbf 	b.w	800b948 <SPI_CloseTx_ISR>
}
 800b9ca:	4770      	bx	lr

0800b9cc <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b9ce:	6802      	ldr	r2, [r0, #0]
 800b9d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 800b9d4:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9d6:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800b9d8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800b9e0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	b94b      	cbnz	r3, 800b9fa <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b9e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b9e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b9ec:	bf02      	ittt	eq
 800b9ee:	6813      	ldreq	r3, [r2, #0]
 800b9f0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b9f4:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800b9f6:	f7ff bfa7 	b.w	800b948 <SPI_CloseTx_ISR>
}
 800b9fa:	4770      	bx	lr

0800b9fc <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b9fc:	6802      	ldr	r2, [r0, #0]
 800b9fe:	6853      	ldr	r3, [r2, #4]
 800ba00:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 800ba04:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ba06:	6053      	str	r3, [r2, #4]
{
 800ba08:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ba0a:	f7fd f8cd 	bl	8008ba8 <HAL_GetTick>
 800ba0e:	2164      	movs	r1, #100	; 0x64
 800ba10:	4602      	mov	r2, r0
 800ba12:	4620      	mov	r0, r4
 800ba14:	f7ff fa9b 	bl	800af4e <SPI_EndRxTransaction>
 800ba18:	b118      	cbz	r0, 800ba22 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba1a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ba1c:	f043 0320 	orr.w	r3, r3, #32
 800ba20:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ba22:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ba24:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800ba26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ba2a:	6893      	ldr	r3, [r2, #8]
 800ba2c:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800ba30:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800ba32:	d009      	beq.n	800ba48 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800ba34:	f043 0302 	orr.w	r3, r3, #2
 800ba38:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800ba3a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800ba3e:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 800ba40:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 800ba42:	f7ff ff80 	bl	800b946 <HAL_SPI_ErrorCallback>
}
 800ba46:	e004      	b.n	800ba52 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 800ba48:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1f9      	bne.n	800ba42 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 800ba4e:	f7f9 f9ab 	bl	8004da8 <HAL_SPI_RxCpltCallback>
}
 800ba52:	bd10      	pop	{r4, pc}

0800ba54 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ba54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ba56:	6802      	ldr	r2, [r0, #0]
 800ba58:	1c59      	adds	r1, r3, #1
 800ba5a:	6401      	str	r1, [r0, #64]	; 0x40
 800ba5c:	7b12      	ldrb	r2, [r2, #12]
 800ba5e:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800ba60:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba64:	3b01      	subs	r3, #1
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800ba6c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d108      	bne.n	800ba88 <SPI_RxISR_8BIT+0x34>
 800ba76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ba78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800ba7c:	bf01      	itttt	eq
 800ba7e:	6802      	ldreq	r2, [r0, #0]
 800ba80:	6813      	ldreq	r3, [r2, #0]
 800ba82:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800ba86:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800ba88:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	b943      	cbnz	r3, 800baa2 <SPI_RxISR_8BIT+0x4e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ba92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba96:	d102      	bne.n	800ba9e <SPI_RxISR_8BIT+0x4a>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <SPI_RxISR_8BIT+0x50>)
 800ba9a:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800ba9c:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800ba9e:	f7ff bfad 	b.w	800b9fc <SPI_CloseRx_ISR>
}
 800baa2:	4770      	bx	lr
 800baa4:	0800baa9 	.word	0x0800baa9

0800baa8 <SPI_RxISR_8BITCRC>:
{
 800baa8:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800baaa:	2200      	movs	r2, #0
 800baac:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bab0:	6802      	ldr	r2, [r0, #0]
 800bab2:	7b12      	ldrb	r2, [r2, #12]
 800bab4:	b2d2      	uxtb	r2, r2
 800bab6:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800baba:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800babe:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800bac0:	3a01      	subs	r2, #1
 800bac2:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800bac4:	b912      	cbnz	r2, 800bacc <SPI_RxISR_8BITCRC+0x24>
}
 800bac6:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 800bac8:	f7ff bf98 	b.w	800b9fc <SPI_CloseRx_ISR>
}
 800bacc:	b002      	add	sp, #8
 800bace:	4770      	bx	lr

0800bad0 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bad0:	6802      	ldr	r2, [r0, #0]
 800bad2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bad4:	68d1      	ldr	r1, [r2, #12]
 800bad6:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bada:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800badc:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bae0:	3b01      	subs	r3, #1
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800bae8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800baec:	b29b      	uxth	r3, r3
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d107      	bne.n	800bb02 <SPI_RxISR_16BIT+0x32>
 800baf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800baf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800baf8:	bf02      	ittt	eq
 800bafa:	6813      	ldreq	r3, [r2, #0]
 800bafc:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800bb00:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800bb02:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	b943      	cbnz	r3, 800bb1c <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bb0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb10:	d102      	bne.n	800bb18 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800bb12:	4b03      	ldr	r3, [pc, #12]	; (800bb20 <SPI_RxISR_16BIT+0x50>)
 800bb14:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800bb16:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800bb18:	f7ff bf70 	b.w	800b9fc <SPI_CloseRx_ISR>
}
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	0800bb25 	.word	0x0800bb25

0800bb24 <SPI_RxISR_16BITCRC>:
{
 800bb24:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800bb26:	2300      	movs	r3, #0
 800bb28:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800bb2c:	6803      	ldr	r3, [r0, #0]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	b292      	uxth	r2, r2
 800bb32:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800bb36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bb40:	605a      	str	r2, [r3, #4]
}
 800bb42:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 800bb44:	f7ff bf5a 	b.w	800b9fc <SPI_CloseRx_ISR>

0800bb48 <SPI_CloseRxTx_ISR>:
{
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800bb4c:	f7fd f82c 	bl	8008ba8 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bb50:	6821      	ldr	r1, [r4, #0]
 800bb52:	684b      	ldr	r3, [r1, #4]
 800bb54:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 800bb58:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bb5a:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	2164      	movs	r1, #100	; 0x64
 800bb60:	f7ff fa30 	bl	800afc4 <SPI_EndRxTxTransaction>
 800bb64:	b118      	cbz	r0, 800bb6e <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb66:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bb68:	f043 0320 	orr.w	r3, r3, #32
 800bb6c:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800bb6e:	6822      	ldr	r2, [r4, #0]
 800bb70:	6893      	ldr	r3, [r2, #8]
 800bb72:	f013 0f10 	tst.w	r3, #16
 800bb76:	f04f 0301 	mov.w	r3, #1
 800bb7a:	d00c      	beq.n	800bb96 <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 800bb7c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800bb80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800bb82:	f043 0302 	orr.w	r3, r3, #2
 800bb86:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800bb88:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800bb8c:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f7ff fed9 	bl	800b946 <HAL_SPI_ErrorCallback>
}
 800bb94:	e00a      	b.n	800bbac <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bb96:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800bb98:	b962      	cbnz	r2, 800bbb4 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bb9a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 800bb9e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bba2:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 800bba4:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bba6:	d102      	bne.n	800bbae <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 800bba8:	f7f9 f8fe 	bl	8004da8 <HAL_SPI_RxCpltCallback>
}
 800bbac:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 800bbae:	f7ff fec9 	bl	800b944 <HAL_SPI_TxRxCpltCallback>
 800bbb2:	e7fb      	b.n	800bbac <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 800bbb4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800bbb8:	e7e9      	b.n	800bb8e <SPI_CloseRxTx_ISR+0x46>

0800bbba <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 800bbba:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 800bbbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bbbe:	6801      	ldr	r1, [r0, #0]
 800bbc0:	b292      	uxth	r2, r2
 800bbc2:	2a01      	cmp	r2, #1
 800bbc4:	d918      	bls.n	800bbf8 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bbc6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800bbca:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800bbcc:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800bbce:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bbd0:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800bbd6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	b9f3      	cbnz	r3, 800bc1a <SPI_2linesTxISR_8BIT+0x60>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bbdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bbde:	6803      	ldr	r3, [r0, #0]
 800bbe0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bbe4:	d10f      	bne.n	800bc06 <SPI_2linesTxISR_8BIT+0x4c>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbec:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bbee:	685a      	ldr	r2, [r3, #4]
 800bbf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbf4:	605a      	str	r2, [r3, #4]
      return;
 800bbf6:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	6382      	str	r2, [r0, #56]	; 0x38
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	730b      	strb	r3, [r1, #12]
    hspi->TxXferCount--;
 800bc00:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bc02:	3b01      	subs	r3, #1
 800bc04:	e7e5      	b.n	800bbd2 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bc06:	685a      	ldr	r2, [r3, #4]
 800bc08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc0c:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 800bc0e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	b90b      	cbnz	r3, 800bc1a <SPI_2linesTxISR_8BIT+0x60>
      SPI_CloseRxTx_ISR(hspi);
 800bc16:	f7ff bf97 	b.w	800bb48 <SPI_CloseRxTx_ISR>
}
 800bc1a:	4770      	bx	lr

0800bc1c <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 800bc1c:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 800bc20:	6802      	ldr	r2, [r0, #0]
 800bc22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bc24:	b289      	uxth	r1, r1
 800bc26:	2901      	cmp	r1, #1
 800bc28:	d922      	bls.n	800bc70 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bc2a:	68d1      	ldr	r1, [r2, #12]
 800bc2c:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800bc30:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800bc32:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bc36:	3b02      	subs	r3, #2
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800bc3e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d103      	bne.n	800bc50 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc48:	6853      	ldr	r3, [r2, #4]
 800bc4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc4e:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 800bc50:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	b9f3      	cbnz	r3, 800bc96 <SPI_2linesRxISR_8BIT+0x7a>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc58:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bc5a:	6803      	ldr	r3, [r0, #0]
 800bc5c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc60:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc62:	d110      	bne.n	800bc86 <SPI_2linesRxISR_8BIT+0x6a>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bc64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bc68:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <SPI_2linesRxISR_8BIT+0x7c>)
 800bc6c:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800bc6e:	4770      	bx	lr
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 800bc70:	1c59      	adds	r1, r3, #1
 800bc72:	6401      	str	r1, [r0, #64]	; 0x40
 800bc74:	7b12      	ldrb	r2, [r2, #12]
 800bc76:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 800bc78:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 800bc84:	e7e4      	b.n	800bc50 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bc86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bc8a:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 800bc8c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	b90b      	cbnz	r3, 800bc96 <SPI_2linesRxISR_8BIT+0x7a>
      SPI_CloseRxTx_ISR(hspi);
 800bc92:	f7ff bf59 	b.w	800bb48 <SPI_CloseRxTx_ISR>
}
 800bc96:	4770      	bx	lr
 800bc98:	0800bc9d 	.word	0x0800bc9d

0800bc9c <SPI_2linesRxISR_8BITCRC>:
{
 800bc9c:	b082      	sub	sp, #8
  __IO uint8_t tmpreg = 0U;
 800bc9e:	2200      	movs	r2, #0
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bca0:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t tmpreg = 0U;
 800bca2:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800bca6:	7b0a      	ldrb	r2, [r1, #12]
 800bca8:	b2d2      	uxtb	r2, r2
 800bcaa:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg);
 800bcae:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800bcb2:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800bcb4:	3a01      	subs	r2, #1
 800bcb6:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 800bcb8:	b94a      	cbnz	r2, 800bcce <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bcba:	684a      	ldr	r2, [r1, #4]
 800bcbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bcc0:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bcc2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	b913      	cbnz	r3, 800bcce <SPI_2linesRxISR_8BITCRC+0x32>
}
 800bcc8:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 800bcca:	f7ff bf3d 	b.w	800bb48 <SPI_CloseRxTx_ISR>
}
 800bcce:	b002      	add	sp, #8
 800bcd0:	4770      	bx	lr

0800bcd2 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcd2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800bcd4:	6802      	ldr	r2, [r0, #0]
{
 800bcd6:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bcd8:	f831 4b02 	ldrh.w	r4, [r1], #2
 800bcdc:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800bcde:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800bce0:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800bce2:	3901      	subs	r1, #1
 800bce4:	b289      	uxth	r1, r1
 800bce6:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800bce8:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800bcea:	b289      	uxth	r1, r1
 800bcec:	b959      	cbnz	r1, 800bd06 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bcee:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800bcf0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bcf4:	d10a      	bne.n	800bd0c <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800bcf6:	6813      	ldr	r3, [r2, #0]
 800bcf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bcfc:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bcfe:	6853      	ldr	r3, [r2, #4]
 800bd00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd04:	6053      	str	r3, [r2, #4]
}
 800bd06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd0a:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bd0c:	6851      	ldr	r1, [r2, #4]
 800bd0e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bd12:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800bd14:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f3      	bne.n	800bd06 <SPI_2linesTxISR_16BIT+0x34>
}
 800bd1e:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bd22:	f7ff bf11 	b.w	800bb48 <SPI_CloseRxTx_ISR>
	...

0800bd28 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bd28:	6801      	ldr	r1, [r0, #0]
 800bd2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800bd2c:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bd2e:	68cc      	ldr	r4, [r1, #12]
 800bd30:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd34:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800bd36:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bd3a:	3a01      	subs	r2, #1
 800bd3c:	b292      	uxth	r2, r2
 800bd3e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800bd42:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800bd46:	b292      	uxth	r2, r2
 800bd48:	b92a      	cbnz	r2, 800bd56 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd4a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bd4c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800bd50:	d104      	bne.n	800bd5c <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800bd52:	4a08      	ldr	r2, [pc, #32]	; (800bd74 <SPI_2linesRxISR_16BIT+0x4c>)
 800bd54:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 800bd56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd5a:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bd5c:	684a      	ldr	r2, [r1, #4]
 800bd5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd62:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800bd64:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f4      	bne.n	800bd56 <SPI_2linesRxISR_16BIT+0x2e>
}
 800bd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800bd70:	f7ff beea 	b.w	800bb48 <SPI_CloseRxTx_ISR>
 800bd74:	0800bd79 	.word	0x0800bd79

0800bd78 <SPI_2linesRxISR_16BITCRC>:
{
 800bd78:	b082      	sub	sp, #8
  __IO uint16_t tmpreg = 0U;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f8ad 3006 	strh.w	r3, [sp, #6]
  tmpreg = hspi->Instance->DR;
 800bd80:	6803      	ldr	r3, [r0, #0]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	b292      	uxth	r2, r2
 800bd86:	f8ad 2006 	strh.w	r2, [sp, #6]
  UNUSED(tmpreg);
 800bd8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bd8e:	685a      	ldr	r2, [r3, #4]
 800bd90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd94:	605a      	str	r2, [r3, #4]
}
 800bd96:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 800bd98:	f7ff bed6 	b.w	800bb48 <SPI_CloseRxTx_ISR>

0800bd9c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 800bd9c:	6803      	ldr	r3, [r0, #0]
{
 800bd9e:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800bda0:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800bda2:	689a      	ldr	r2, [r3, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800bda4:	f002 0541 	and.w	r5, r2, #65	; 0x41
 800bda8:	2d01      	cmp	r5, #1
{
 800bdaa:	b085      	sub	sp, #20
 800bdac:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800bdae:	d106      	bne.n	800bdbe <HAL_SPI_IRQHandler+0x22>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800bdb0:	064d      	lsls	r5, r1, #25
 800bdb2:	d504      	bpl.n	800bdbe <HAL_SPI_IRQHandler+0x22>
    hspi->RxISR(hspi);
 800bdb4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 800bdb6:	b005      	add	sp, #20
 800bdb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 800bdbc:	4718      	bx	r3
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800bdbe:	0795      	lsls	r5, r2, #30
 800bdc0:	d504      	bpl.n	800bdcc <HAL_SPI_IRQHandler+0x30>
 800bdc2:	0608      	lsls	r0, r1, #24
 800bdc4:	d502      	bpl.n	800bdcc <HAL_SPI_IRQHandler+0x30>
    hspi->TxISR(hspi);
 800bdc6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800bdc8:	4620      	mov	r0, r4
 800bdca:	e7f4      	b.n	800bdb6 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800bdcc:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800bdd0:	d051      	beq.n	800be76 <HAL_SPI_IRQHandler+0xda>
 800bdd2:	068d      	lsls	r5, r1, #26
 800bdd4:	d54f      	bpl.n	800be76 <HAL_SPI_IRQHandler+0xda>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800bdd6:	0650      	lsls	r0, r2, #25
 800bdd8:	d50f      	bpl.n	800bdfa <HAL_SPI_IRQHandler+0x5e>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bdda:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800bdde:	2803      	cmp	r0, #3
 800bde0:	f04f 0500 	mov.w	r5, #0
 800bde4:	d041      	beq.n	800be6a <HAL_SPI_IRQHandler+0xce>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bde6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800bde8:	f040 0004 	orr.w	r0, r0, #4
 800bdec:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bdee:	9500      	str	r5, [sp, #0]
 800bdf0:	68d8      	ldr	r0, [r3, #12]
 800bdf2:	9000      	str	r0, [sp, #0]
 800bdf4:	6898      	ldr	r0, [r3, #8]
 800bdf6:	9000      	str	r0, [sp, #0]
 800bdf8:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 800bdfa:	0695      	lsls	r5, r2, #26
 800bdfc:	d50c      	bpl.n	800be18 <HAL_SPI_IRQHandler+0x7c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bdfe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800be00:	f040 0001 	orr.w	r0, r0, #1
 800be04:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800be06:	2000      	movs	r0, #0
 800be08:	9002      	str	r0, [sp, #8]
 800be0a:	6898      	ldr	r0, [r3, #8]
 800be0c:	9002      	str	r0, [sp, #8]
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800be14:	6018      	str	r0, [r3, #0]
 800be16:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800be18:	05d0      	lsls	r0, r2, #23
 800be1a:	d508      	bpl.n	800be2e <HAL_SPI_IRQHandler+0x92>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800be1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800be1e:	f042 0208 	orr.w	r2, r2, #8
 800be22:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800be24:	2200      	movs	r2, #0
 800be26:	9203      	str	r2, [sp, #12]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	9203      	str	r2, [sp, #12]
 800be2c:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be2e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800be30:	b30a      	cbz	r2, 800be76 <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be38:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800be3a:	2201      	movs	r2, #1
 800be3c:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800be40:	078a      	lsls	r2, r1, #30
 800be42:	d01a      	beq.n	800be7a <HAL_SPI_IRQHandler+0xde>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800be44:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800be46:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800be48:	f022 0203 	bic.w	r2, r2, #3
 800be4c:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800be4e:	b118      	cbz	r0, 800be58 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800be50:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <HAL_SPI_IRQHandler+0xe8>)
 800be52:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800be54:	f7fc ff39 	bl	8008cca <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800be58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be5a:	b160      	cbz	r0, 800be76 <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800be5c:	4b09      	ldr	r3, [pc, #36]	; (800be84 <HAL_SPI_IRQHandler+0xe8>)
 800be5e:	6383      	str	r3, [r0, #56]	; 0x38
}
 800be60:	b005      	add	sp, #20
 800be62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800be66:	f7fc bf30 	b.w	8008cca <HAL_DMA_Abort_IT>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be6a:	9501      	str	r5, [sp, #4]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	9201      	str	r2, [sp, #4]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	9b01      	ldr	r3, [sp, #4]
}
 800be76:	b005      	add	sp, #20
 800be78:	bd30      	pop	{r4, r5, pc}
        HAL_SPI_ErrorCallback(hspi);
 800be7a:	4620      	mov	r0, r4
 800be7c:	f7ff fd63 	bl	800b946 <HAL_SPI_ErrorCallback>
 800be80:	e7f9      	b.n	800be76 <HAL_SPI_IRQHandler+0xda>
 800be82:	bf00      	nop
 800be84:	0800be89 	.word	0x0800be89

0800be88 <SPI_DMAAbortOnError>:
{
 800be88:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800be92:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800be94:	f7ff fd57 	bl	800b946 <HAL_SPI_ErrorCallback>
}
 800be98:	bd08      	pop	{r3, pc}

0800be9a <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be9a:	6803      	ldr	r3, [r0, #0]
 800be9c:	68da      	ldr	r2, [r3, #12]
 800be9e:	f042 0201 	orr.w	r2, r2, #1
 800bea2:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	f042 0201 	orr.w	r2, r2, #1
 800beaa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800beac:	2000      	movs	r0, #0
 800beae:	4770      	bx	lr

0800beb0 <HAL_TIM_OC_DelayElapsedCallback>:
 800beb0:	4770      	bx	lr

0800beb2 <HAL_TIM_IC_CaptureCallback>:
 800beb2:	4770      	bx	lr

0800beb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 800beb4:	4770      	bx	lr

0800beb6 <HAL_TIM_TriggerCallback>:
 800beb6:	4770      	bx	lr

0800beb8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800beb8:	6803      	ldr	r3, [r0, #0]
 800beba:	691a      	ldr	r2, [r3, #16]
 800bebc:	0791      	lsls	r1, r2, #30
{
 800bebe:	b510      	push	{r4, lr}
 800bec0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bec2:	d50e      	bpl.n	800bee2 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800bec4:	68da      	ldr	r2, [r3, #12]
 800bec6:	0792      	lsls	r2, r2, #30
 800bec8:	d50b      	bpl.n	800bee2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800beca:	f06f 0202 	mvn.w	r2, #2
 800bece:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bed0:	2201      	movs	r2, #1
 800bed2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	079b      	lsls	r3, r3, #30
 800bed8:	d077      	beq.n	800bfca <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800beda:	f7ff ffea 	bl	800beb2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bede:	2300      	movs	r3, #0
 800bee0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	691a      	ldr	r2, [r3, #16]
 800bee6:	0750      	lsls	r0, r2, #29
 800bee8:	d510      	bpl.n	800bf0c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800beea:	68da      	ldr	r2, [r3, #12]
 800beec:	0751      	lsls	r1, r2, #29
 800beee:	d50d      	bpl.n	800bf0c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bef0:	f06f 0204 	mvn.w	r2, #4
 800bef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bef6:	2202      	movs	r2, #2
 800bef8:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bf00:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800bf02:	d068      	beq.n	800bfd6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800bf04:	f7ff ffd5 	bl	800beb2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	691a      	ldr	r2, [r3, #16]
 800bf10:	0712      	lsls	r2, r2, #28
 800bf12:	d50f      	bpl.n	800bf34 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800bf14:	68da      	ldr	r2, [r3, #12]
 800bf16:	0710      	lsls	r0, r2, #28
 800bf18:	d50c      	bpl.n	800bf34 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf1a:	f06f 0208 	mvn.w	r2, #8
 800bf1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf20:	2204      	movs	r2, #4
 800bf22:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800bf24:	69db      	ldr	r3, [r3, #28]
 800bf26:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bf28:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800bf2a:	d05a      	beq.n	800bfe2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800bf2c:	f7ff ffc1 	bl	800beb2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf30:	2300      	movs	r3, #0
 800bf32:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	691a      	ldr	r2, [r3, #16]
 800bf38:	06d2      	lsls	r2, r2, #27
 800bf3a:	d510      	bpl.n	800bf5e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800bf3c:	68da      	ldr	r2, [r3, #12]
 800bf3e:	06d0      	lsls	r0, r2, #27
 800bf40:	d50d      	bpl.n	800bf5e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf42:	f06f 0210 	mvn.w	r2, #16
 800bf46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf48:	2208      	movs	r2, #8
 800bf4a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800bf4c:	69db      	ldr	r3, [r3, #28]
 800bf4e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800bf52:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800bf54:	d04b      	beq.n	800bfee <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800bf56:	f7ff ffac 	bl	800beb2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	691a      	ldr	r2, [r3, #16]
 800bf62:	07d1      	lsls	r1, r2, #31
 800bf64:	d508      	bpl.n	800bf78 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800bf66:	68da      	ldr	r2, [r3, #12]
 800bf68:	07d2      	lsls	r2, r2, #31
 800bf6a:	d505      	bpl.n	800bf78 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf6c:	f06f 0201 	mvn.w	r2, #1
 800bf70:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf72:	4620      	mov	r0, r4
 800bf74:	f7f8 fa20 	bl	80043b8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf78:	6823      	ldr	r3, [r4, #0]
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	0610      	lsls	r0, r2, #24
 800bf7e:	d508      	bpl.n	800bf92 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	0611      	lsls	r1, r2, #24
 800bf84:	d505      	bpl.n	800bf92 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf8a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f000 f8dc 	bl	800c14a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	691a      	ldr	r2, [r3, #16]
 800bf96:	0652      	lsls	r2, r2, #25
 800bf98:	d508      	bpl.n	800bfac <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	0650      	lsls	r0, r2, #25
 800bf9e:	d505      	bpl.n	800bfac <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfa4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f7ff ff85 	bl	800beb6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	691a      	ldr	r2, [r3, #16]
 800bfb0:	0691      	lsls	r1, r2, #26
 800bfb2:	d522      	bpl.n	800bffa <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800bfb4:	68da      	ldr	r2, [r3, #12]
 800bfb6:	0692      	lsls	r2, r2, #26
 800bfb8:	d51f      	bpl.n	800bffa <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800bfbe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfc0:	611a      	str	r2, [r3, #16]
    }
  }
}
 800bfc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800bfc6:	f000 b8bf 	b.w	800c148 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfca:	f7ff ff71 	bl	800beb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7ff ff70 	bl	800beb4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bfd4:	e783      	b.n	800bede <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfd6:	f7ff ff6b 	bl	800beb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfda:	4620      	mov	r0, r4
 800bfdc:	f7ff ff6a 	bl	800beb4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bfe0:	e792      	b.n	800bf08 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfe2:	f7ff ff65 	bl	800beb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f7ff ff64 	bl	800beb4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bfec:	e7a0      	b.n	800bf30 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfee:	f7ff ff5f 	bl	800beb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bff2:	4620      	mov	r0, r4
 800bff4:	f7ff ff5e 	bl	800beb4 <HAL_TIM_PWM_PulseFinishedCallback>
 800bff8:	e7af      	b.n	800bf5a <HAL_TIM_IRQHandler+0xa2>
}
 800bffa:	bd10      	pop	{r4, pc}

0800bffc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bffc:	4a30      	ldr	r2, [pc, #192]	; (800c0c0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800bffe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c000:	4290      	cmp	r0, r2
 800c002:	d012      	beq.n	800c02a <TIM_Base_SetConfig+0x2e>
 800c004:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c008:	d00f      	beq.n	800c02a <TIM_Base_SetConfig+0x2e>
 800c00a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c00e:	4290      	cmp	r0, r2
 800c010:	d00b      	beq.n	800c02a <TIM_Base_SetConfig+0x2e>
 800c012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c016:	4290      	cmp	r0, r2
 800c018:	d007      	beq.n	800c02a <TIM_Base_SetConfig+0x2e>
 800c01a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c01e:	4290      	cmp	r0, r2
 800c020:	d003      	beq.n	800c02a <TIM_Base_SetConfig+0x2e>
 800c022:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c026:	4290      	cmp	r0, r2
 800c028:	d119      	bne.n	800c05e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800c02a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c02c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c030:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c032:	4a23      	ldr	r2, [pc, #140]	; (800c0c0 <TIM_Base_SetConfig+0xc4>)
 800c034:	4290      	cmp	r0, r2
 800c036:	d01d      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c038:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c03c:	d01a      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c03e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c042:	4290      	cmp	r0, r2
 800c044:	d016      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c04a:	4290      	cmp	r0, r2
 800c04c:	d012      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c04e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c052:	4290      	cmp	r0, r2
 800c054:	d00e      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c056:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800c05a:	4290      	cmp	r0, r2
 800c05c:	d00a      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c05e:	4a19      	ldr	r2, [pc, #100]	; (800c0c4 <TIM_Base_SetConfig+0xc8>)
 800c060:	4290      	cmp	r0, r2
 800c062:	d007      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c068:	4290      	cmp	r0, r2
 800c06a:	d003      	beq.n	800c074 <TIM_Base_SetConfig+0x78>
 800c06c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c070:	4290      	cmp	r0, r2
 800c072:	d103      	bne.n	800c07c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c074:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800c076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c07a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800c07c:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 800c07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800c082:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800c084:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c086:	688b      	ldr	r3, [r1, #8]
 800c088:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800c08a:	680b      	ldr	r3, [r1, #0]
 800c08c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c08e:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <TIM_Base_SetConfig+0xc4>)
 800c090:	4298      	cmp	r0, r3
 800c092:	d00f      	beq.n	800c0b4 <TIM_Base_SetConfig+0xb8>
 800c094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c098:	4298      	cmp	r0, r3
 800c09a:	d00b      	beq.n	800c0b4 <TIM_Base_SetConfig+0xb8>
 800c09c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800c0a0:	4298      	cmp	r0, r3
 800c0a2:	d007      	beq.n	800c0b4 <TIM_Base_SetConfig+0xb8>
 800c0a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0a8:	4298      	cmp	r0, r3
 800c0aa:	d003      	beq.n	800c0b4 <TIM_Base_SetConfig+0xb8>
 800c0ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0b0:	4298      	cmp	r0, r3
 800c0b2:	d101      	bne.n	800c0b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0b4:	690b      	ldr	r3, [r1, #16]
 800c0b6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	6143      	str	r3, [r0, #20]
}
 800c0bc:	4770      	bx	lr
 800c0be:	bf00      	nop
 800c0c0:	40012c00 	.word	0x40012c00
 800c0c4:	40014000 	.word	0x40014000

0800c0c8 <HAL_TIM_Base_Init>:
{
 800c0c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	b1a0      	cbz	r0, 800c0f8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800c0ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800c0d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c0d6:	b91b      	cbnz	r3, 800c0e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800c0d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800c0dc:	f7f8 fa2e 	bl	800453c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800c0e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0e2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800c0e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0e8:	1d21      	adds	r1, r4, #4
 800c0ea:	f7ff ff87 	bl	800bffc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800c0f4:	2000      	movs	r0, #0
}
 800c0f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c0f8:	2001      	movs	r0, #1
 800c0fa:	e7fc      	b.n	800c0f6 <HAL_TIM_Base_Init+0x2e>

0800c0fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800c0fc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800c102:	2b01      	cmp	r3, #1
 800c104:	d01c      	beq.n	800c140 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c106:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c108:	4d0e      	ldr	r5, [pc, #56]	; (800c144 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800c10a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800c10c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c10e:	42aa      	cmp	r2, r5
 800c110:	d003      	beq.n	800c11a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 800c112:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800c116:	42aa      	cmp	r2, r5
 800c118:	d103      	bne.n	800c122 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c11a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c11c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c120:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c122:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c124:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800c126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c12a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c12c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c130:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c132:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800c134:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800c136:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800c138:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800c13c:	4618      	mov	r0, r3
}
 800c13e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800c140:	2002      	movs	r0, #2
 800c142:	e7fc      	b.n	800c13e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800c144:	40012c00 	.word	0x40012c00

0800c148 <HAL_TIMEx_CommutationCallback>:
 800c148:	4770      	bx	lr

0800c14a <HAL_TIMEx_BreakCallback>:
 800c14a:	4770      	bx	lr

0800c14c <HAL_UART_MspInit>:
  UNUSED(huart);
  
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c14c:	4770      	bx	lr
	...

0800c150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c152:	69c1      	ldr	r1, [r0, #28]
  if(UART_INSTANCE_LOWPOWER(huart))
 800c154:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c156:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c158:	681d      	ldr	r5, [r3, #0]
{
 800c15a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c15c:	6900      	ldr	r0, [r0, #16]
 800c15e:	4302      	orrs	r2, r0
 800c160:	6960      	ldr	r0, [r4, #20]
 800c162:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c164:	48ac      	ldr	r0, [pc, #688]	; (800c418 <UART_SetConfig+0x2c8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c166:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c168:	4028      	ands	r0, r5
 800c16a:	4302      	orrs	r2, r0
 800c16c:	601a      	str	r2, [r3, #0]
  
  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	68e0      	ldr	r0, [r4, #12]
 800c172:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c176:	4302      	orrs	r2, r0
 800c178:	605a      	str	r2, [r3, #4]
  *   to huart->Init.OneBitSampling (not applicable to LPUART)
  * - set TXFTCFG bit according to huart->Init.TxFifoThreshold value
  * - set RXFTCFG bit according to huart->Init.RxFifoThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c17a:	4aa8      	ldr	r2, [pc, #672]	; (800c41c <UART_SetConfig+0x2cc>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c17c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c17e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c180:	bf1c      	itt	ne
 800c182:	6a22      	ldrne	r2, [r4, #32]
 800c184:	4310      	orrne	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c186:	689a      	ldr	r2, [r3, #8]
 800c188:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800c18c:	4302      	orrs	r2, r0
 800c18e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c190:	4aa3      	ldr	r2, [pc, #652]	; (800c420 <UART_SetConfig+0x2d0>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d11c      	bne.n	800c1d0 <UART_SetConfig+0x80>
 800c196:	4ba3      	ldr	r3, [pc, #652]	; (800c424 <UART_SetConfig+0x2d4>)
 800c198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c19c:	f003 0303 	and.w	r3, r3, #3
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	f200 8120 	bhi.w	800c3e8 <UART_SetConfig+0x298>
 800c1a8:	4a9f      	ldr	r2, [pc, #636]	; (800c428 <UART_SetConfig+0x2d8>)
 800c1aa:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c1b0:	f040 80df 	bne.w	800c372 <UART_SetConfig+0x222>
  {
    switch (clocksource)
 800c1b4:	2b08      	cmp	r3, #8
 800c1b6:	f200 80d9 	bhi.w	800c36c <UART_SetConfig+0x21c>
 800c1ba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c1be:	0148      	.short	0x0148
 800c1c0:	011e0118 	.word	0x011e0118
 800c1c4:	012a00d7 	.word	0x012a00d7
 800c1c8:	00d700d7 	.word	0x00d700d7
 800c1cc:	003400d7 	.word	0x003400d7
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1d0:	4a96      	ldr	r2, [pc, #600]	; (800c42c <UART_SetConfig+0x2dc>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d108      	bne.n	800c1e8 <UART_SetConfig+0x98>
 800c1d6:	4b93      	ldr	r3, [pc, #588]	; (800c424 <UART_SetConfig+0x2d4>)
 800c1d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c1dc:	4b92      	ldr	r3, [pc, #584]	; (800c428 <UART_SetConfig+0x2d8>)
 800c1de:	f002 020c 	and.w	r2, r2, #12
 800c1e2:	4413      	add	r3, r2
 800c1e4:	78db      	ldrb	r3, [r3, #3]
  if(UART_INSTANCE_LOWPOWER(huart))
 800c1e6:	e7e1      	b.n	800c1ac <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1e8:	4a91      	ldr	r2, [pc, #580]	; (800c430 <UART_SetConfig+0x2e0>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d120      	bne.n	800c230 <UART_SetConfig+0xe0>
 800c1ee:	4b8d      	ldr	r3, [pc, #564]	; (800c424 <UART_SetConfig+0x2d4>)
 800c1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c1f8:	2b20      	cmp	r3, #32
 800c1fa:	f000 80fb 	beq.w	800c3f4 <UART_SetConfig+0x2a4>
 800c1fe:	d80c      	bhi.n	800c21a <UART_SetConfig+0xca>
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 8121 	beq.w	800c448 <UART_SetConfig+0x2f8>
 800c206:	2b10      	cmp	r3, #16
 800c208:	f000 8100 	beq.w	800c40c <UART_SetConfig+0x2bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c20c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c210:	f000 80ac 	beq.w	800c36c <UART_SetConfig+0x21c>
 800c214:	2501      	movs	r5, #1
 800c216:	2000      	movs	r0, #0
 800c218:	e0cd      	b.n	800c3b6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c21a:	2b30      	cmp	r3, #48	; 0x30
 800c21c:	d1f6      	bne.n	800c20c <UART_SetConfig+0xbc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c21e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c222:	f040 80da 	bne.w	800c3da <UART_SetConfig+0x28a>
      break;
    case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c226:	6862      	ldr	r2, [r4, #4]
 800c228:	0853      	lsrs	r3, r2, #1
 800c22a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c22e:	e0ea      	b.n	800c406 <UART_SetConfig+0x2b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c230:	4a80      	ldr	r2, [pc, #512]	; (800c434 <UART_SetConfig+0x2e4>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d10f      	bne.n	800c256 <UART_SetConfig+0x106>
 800c236:	4b7b      	ldr	r3, [pc, #492]	; (800c424 <UART_SetConfig+0x2d4>)
 800c238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c23c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c240:	2b80      	cmp	r3, #128	; 0x80
 800c242:	f000 80d7 	beq.w	800c3f4 <UART_SetConfig+0x2a4>
 800c246:	d804      	bhi.n	800c252 <UART_SetConfig+0x102>
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 80fd 	beq.w	800c448 <UART_SetConfig+0x2f8>
 800c24e:	2b40      	cmp	r3, #64	; 0x40
 800c250:	e7da      	b.n	800c208 <UART_SetConfig+0xb8>
 800c252:	2bc0      	cmp	r3, #192	; 0xc0
 800c254:	e7e2      	b.n	800c21c <UART_SetConfig+0xcc>
 800c256:	4a78      	ldr	r2, [pc, #480]	; (800c438 <UART_SetConfig+0x2e8>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d112      	bne.n	800c282 <UART_SetConfig+0x132>
 800c25c:	4b71      	ldr	r3, [pc, #452]	; (800c424 <UART_SetConfig+0x2d4>)
 800c25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c26a:	f000 80c3 	beq.w	800c3f4 <UART_SetConfig+0x2a4>
 800c26e:	d805      	bhi.n	800c27c <UART_SetConfig+0x12c>
 800c270:	2b00      	cmp	r3, #0
 800c272:	f000 80e9 	beq.w	800c448 <UART_SetConfig+0x2f8>
 800c276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c27a:	e7c5      	b.n	800c208 <UART_SetConfig+0xb8>
 800c27c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c280:	e7cc      	b.n	800c21c <UART_SetConfig+0xcc>
 800c282:	4a66      	ldr	r2, [pc, #408]	; (800c41c <UART_SetConfig+0x2cc>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d1c1      	bne.n	800c20c <UART_SetConfig+0xbc>
 800c288:	4b66      	ldr	r3, [pc, #408]	; (800c424 <UART_SetConfig+0x2d4>)
 800c28a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800c28e:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800c292:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c296:	d02b      	beq.n	800c2f0 <UART_SetConfig+0x1a0>
 800c298:	d809      	bhi.n	800c2ae <UART_SetConfig+0x15e>
 800c29a:	b17d      	cbz	r5, 800c2bc <UART_SetConfig+0x16c>
 800c29c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c2a0:	d022      	beq.n	800c2e8 <UART_SetConfig+0x198>
        ret = HAL_ERROR;
 800c2a2:	2501      	movs	r5, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif
    
  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2a4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800c2a6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  
  return ret;
}
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2ae:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800c2b2:	d1f6      	bne.n	800c2a2 <UART_SetConfig+0x152>
 800c2b4:	2508      	movs	r5, #8
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800c2b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c2ba:	e004      	b.n	800c2c6 <UART_SetConfig+0x176>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800c2bc:	f7fe f8b4 	bl	800a428 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f000 808f 	beq.w	800c3e4 <UART_SetConfig+0x294>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800c2c6:	6862      	ldr	r2, [r4, #4]
 800c2c8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800c2cc:	4283      	cmp	r3, r0
 800c2ce:	d8e8      	bhi.n	800c2a2 <UART_SetConfig+0x152>
 800c2d0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800c2d4:	d8e5      	bhi.n	800c2a2 <UART_SetConfig+0x152>
        switch (clocksource)
 800c2d6:	2d08      	cmp	r5, #8
 800c2d8:	d845      	bhi.n	800c366 <UART_SetConfig+0x216>
 800c2da:	e8df f005 	tbb	[pc, r5]
 800c2de:	440c      	.short	0x440c
 800c2e0:	442e4422 	.word	0x442e4422
 800c2e4:	4444      	.short	0x4444
 800c2e6:	3b          	.byte	0x3b
 800c2e7:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800c2e8:	f7fd fd50 	bl	8009d8c <HAL_RCC_GetSysClockFreq>
      break;
 800c2ec:	2504      	movs	r5, #4
 800c2ee:	e7e7      	b.n	800c2c0 <UART_SetConfig+0x170>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800c2f0:	4852      	ldr	r0, [pc, #328]	; (800c43c <UART_SetConfig+0x2ec>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2f2:	2502      	movs	r5, #2
 800c2f4:	e7e7      	b.n	800c2c6 <UART_SetConfig+0x176>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c2f6:	f7fe f897 	bl	800a428 <HAL_RCC_GetPCLK1Freq>
 800c2fa:	6862      	ldr	r2, [r4, #4]
 800c2fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c300:	0856      	lsrs	r6, r2, #1
 800c302:	2700      	movs	r7, #0
 800c304:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c308:	2300      	movs	r3, #0
 800c30a:	4630      	mov	r0, r6
 800c30c:	4639      	mov	r1, r7
 800c30e:	f7f4 fccb 	bl	8000ca8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c312:	4b4b      	ldr	r3, [pc, #300]	; (800c440 <UART_SetConfig+0x2f0>)
 800c314:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c318:	429a      	cmp	r2, r3
 800c31a:	d8c2      	bhi.n	800c2a2 <UART_SetConfig+0x152>
      huart->Instance->BRR = usartdiv;
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	60d8      	str	r0, [r3, #12]
 800c320:	e7c0      	b.n	800c2a4 <UART_SetConfig+0x154>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800c322:	4848      	ldr	r0, [pc, #288]	; (800c444 <UART_SetConfig+0x2f4>)
 800c324:	0855      	lsrs	r5, r2, #1
 800c326:	2100      	movs	r1, #0
 800c328:	1940      	adds	r0, r0, r5
 800c32a:	f04f 0300 	mov.w	r3, #0
 800c32e:	f141 0100 	adc.w	r1, r1, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c332:	f7f4 fcb9 	bl	8000ca8 <__aeabi_uldivmod>
          break;
 800c336:	2500      	movs	r5, #0
 800c338:	e7eb      	b.n	800c312 <UART_SetConfig+0x1c2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c33a:	f7fd fd27 	bl	8009d8c <HAL_RCC_GetSysClockFreq>
 800c33e:	6862      	ldr	r2, [r4, #4]
 800c340:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c344:	0856      	lsrs	r6, r2, #1
 800c346:	2700      	movs	r7, #0
 800c348:	fbe1 6700 	umlal	r6, r7, r1, r0
 800c34c:	2300      	movs	r3, #0
 800c34e:	4630      	mov	r0, r6
 800c350:	4639      	mov	r1, r7
 800c352:	e7ee      	b.n	800c332 <UART_SetConfig+0x1e2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800c354:	0850      	lsrs	r0, r2, #1
 800c356:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800c35a:	f04f 0300 	mov.w	r3, #0
 800c35e:	bf2c      	ite	cs
 800c360:	2101      	movcs	r1, #1
 800c362:	2100      	movcc	r1, #0
 800c364:	e7e5      	b.n	800c332 <UART_SetConfig+0x1e2>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800c366:	2501      	movs	r5, #1
 800c368:	2000      	movs	r0, #0
 800c36a:	e7d2      	b.n	800c312 <UART_SetConfig+0x1c2>
      ret = HAL_ERROR;
 800c36c:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c36e:	2300      	movs	r3, #0
 800c370:	e077      	b.n	800c462 <UART_SetConfig+0x312>
    switch (clocksource)
 800c372:	2b08      	cmp	r3, #8
 800c374:	f63f af4e 	bhi.w	800c214 <UART_SetConfig+0xc4>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <UART_SetConfig+0x230>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c3a5 	.word	0x0800c3a5
 800c384:	0800c3c1 	.word	0x0800c3c1
 800c388:	0800c3c7 	.word	0x0800c3c7
 800c38c:	0800c215 	.word	0x0800c215
 800c390:	0800c3d5 	.word	0x0800c3d5
 800c394:	0800c215 	.word	0x0800c215
 800c398:	0800c215 	.word	0x0800c215
 800c39c:	0800c215 	.word	0x0800c215
 800c3a0:	0800c3db 	.word	0x0800c3db
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c3a4:	f7fe f840 	bl	800a428 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c3a8:	6863      	ldr	r3, [r4, #4]
 800c3aa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c3ae:	fbb0 f0f3 	udiv	r0, r0, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3b2:	2500      	movs	r5, #0
 800c3b4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3b6:	f1a0 0210 	sub.w	r2, r0, #16
 800c3ba:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c3be:	e7ab      	b.n	800c318 <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c3c0:	f7fe f842 	bl	800a448 <HAL_RCC_GetPCLK2Freq>
 800c3c4:	e7f0      	b.n	800c3a8 <UART_SetConfig+0x258>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c3c6:	6863      	ldr	r3, [r4, #4]
 800c3c8:	0858      	lsrs	r0, r3, #1
 800c3ca:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800c3ce:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 800c3d2:	e7ec      	b.n	800c3ae <UART_SetConfig+0x25e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c3d4:	f7fd fcda 	bl	8009d8c <HAL_RCC_GetSysClockFreq>
 800c3d8:	e7e6      	b.n	800c3a8 <UART_SetConfig+0x258>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c3da:	6863      	ldr	r3, [r4, #4]
 800c3dc:	0858      	lsrs	r0, r3, #1
 800c3de:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 800c3e2:	e7e4      	b.n	800c3ae <UART_SetConfig+0x25e>
 800c3e4:	4605      	mov	r5, r0
 800c3e6:	e75d      	b.n	800c2a4 <UART_SetConfig+0x154>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c3ec:	d1e8      	bne.n	800c3c0 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800c3ee:	f7fe f82b 	bl	800a448 <HAL_RCC_GetPCLK2Freq>
 800c3f2:	e02e      	b.n	800c452 <UART_SetConfig+0x302>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c3f8:	d1e5      	bne.n	800c3c6 <UART_SetConfig+0x276>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c3fa:	6862      	ldr	r2, [r4, #4]
 800c3fc:	0853      	lsrs	r3, r2, #1
 800c3fe:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800c402:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c406:	fbb3 f3f2 	udiv	r3, r3, r2
 800c40a:	e028      	b.n	800c45e <UART_SetConfig+0x30e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c40c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c410:	d1e0      	bne.n	800c3d4 <UART_SetConfig+0x284>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c412:	f7fd fcbb 	bl	8009d8c <HAL_RCC_GetSysClockFreq>
 800c416:	e01c      	b.n	800c452 <UART_SetConfig+0x302>
 800c418:	efff69f3 	.word	0xefff69f3
 800c41c:	40008000 	.word	0x40008000
 800c420:	40013800 	.word	0x40013800
 800c424:	40021000 	.word	0x40021000
 800c428:	08028608 	.word	0x08028608
 800c42c:	40004400 	.word	0x40004400
 800c430:	40004800 	.word	0x40004800
 800c434:	40004c00 	.word	0x40004c00
 800c438:	40005000 	.word	0x40005000
 800c43c:	00f42400 	.word	0x00f42400
 800c440:	000ffcff 	.word	0x000ffcff
 800c444:	f4240000 	.word	0xf4240000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c448:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800c44c:	d1aa      	bne.n	800c3a4 <UART_SetConfig+0x254>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800c44e:	f7fd ffeb 	bl	800a428 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800c452:	6863      	ldr	r3, [r4, #4]
 800c454:	085a      	lsrs	r2, r3, #1
 800c456:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c45a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c45e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800c460:	2500      	movs	r5, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c462:	f1a3 0110 	sub.w	r1, r3, #16
 800c466:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c46a:	4291      	cmp	r1, r2
 800c46c:	f63f af19 	bhi.w	800c2a2 <UART_SetConfig+0x152>
      brrtemp = usartdiv & 0xFFF0U;
 800c470:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800c474:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c476:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800c47a:	4313      	orrs	r3, r2
 800c47c:	60cb      	str	r3, [r1, #12]
 800c47e:	e711      	b.n	800c2a4 <UART_SetConfig+0x154>

0800c480 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c482:	07da      	lsls	r2, r3, #31
{
 800c484:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c486:	d506      	bpl.n	800c496 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c488:	6801      	ldr	r1, [r0, #0]
 800c48a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800c48c:	684a      	ldr	r2, [r1, #4]
 800c48e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c492:	4322      	orrs	r2, r4
 800c494:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c496:	079c      	lsls	r4, r3, #30
 800c498:	d506      	bpl.n	800c4a8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c49a:	6801      	ldr	r1, [r0, #0]
 800c49c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800c49e:	684a      	ldr	r2, [r1, #4]
 800c4a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c4a4:	4322      	orrs	r2, r4
 800c4a6:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c4a8:	0759      	lsls	r1, r3, #29
 800c4aa:	d506      	bpl.n	800c4ba <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c4ac:	6801      	ldr	r1, [r0, #0]
 800c4ae:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800c4b0:	684a      	ldr	r2, [r1, #4]
 800c4b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c4b6:	4322      	orrs	r2, r4
 800c4b8:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4ba:	071a      	lsls	r2, r3, #28
 800c4bc:	d506      	bpl.n	800c4cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4be:	6801      	ldr	r1, [r0, #0]
 800c4c0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800c4c2:	684a      	ldr	r2, [r1, #4]
 800c4c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c4c8:	4322      	orrs	r2, r4
 800c4ca:	604a      	str	r2, [r1, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c4cc:	06dc      	lsls	r4, r3, #27
 800c4ce:	d506      	bpl.n	800c4de <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c4d0:	6801      	ldr	r1, [r0, #0]
 800c4d2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c4d4:	688a      	ldr	r2, [r1, #8]
 800c4d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c4da:	4322      	orrs	r2, r4
 800c4dc:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c4de:	0699      	lsls	r1, r3, #26
 800c4e0:	d506      	bpl.n	800c4f0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4e2:	6801      	ldr	r1, [r0, #0]
 800c4e4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800c4e6:	688a      	ldr	r2, [r1, #8]
 800c4e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4ec:	4322      	orrs	r2, r4
 800c4ee:	608a      	str	r2, [r1, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4f0:	065a      	lsls	r2, r3, #25
 800c4f2:	d50f      	bpl.n	800c514 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4f4:	6801      	ldr	r1, [r0, #0]
 800c4f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800c4f8:	684a      	ldr	r2, [r1, #4]
 800c4fa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800c4fe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c500:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c504:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c506:	d105      	bne.n	800c514 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c508:	684a      	ldr	r2, [r1, #4]
 800c50a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800c50c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800c510:	4322      	orrs	r2, r4
 800c512:	604a      	str	r2, [r1, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c514:	061b      	lsls	r3, r3, #24
 800c516:	d506      	bpl.n	800c526 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c518:	6802      	ldr	r2, [r0, #0]
 800c51a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c51c:	6853      	ldr	r3, [r2, #4]
 800c51e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c522:	430b      	orrs	r3, r1
 800c524:	6053      	str	r3, [r2, #4]
  }
}
 800c526:	bd10      	pop	{r4, pc}

0800c528 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c530:	4604      	mov	r4, r0
 800c532:	460e      	mov	r6, r1
 800c534:	4615      	mov	r5, r2
 800c536:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	69d3      	ldr	r3, [r2, #28]
 800c53c:	ea36 0303 	bics.w	r3, r6, r3
 800c540:	bf0c      	ite	eq
 800c542:	2301      	moveq	r3, #1
 800c544:	2300      	movne	r3, #0
 800c546:	42ab      	cmp	r3, r5
 800c548:	d001      	beq.n	800c54e <UART_WaitOnFlagUntilTimeout+0x26>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c54a:	2000      	movs	r0, #0
 800c54c:	e017      	b.n	800c57e <UART_WaitOnFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 800c54e:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c552:	d0f2      	beq.n	800c53a <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c554:	f1b8 0f00 	cmp.w	r8, #0
 800c558:	d113      	bne.n	800c582 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c562:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c564:	689a      	ldr	r2, [r3, #8]
 800c566:	f022 0201 	bic.w	r2, r2, #1
 800c56a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800c56c:	2320      	movs	r3, #32
 800c56e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 800c572:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 800c576:	2300      	movs	r3, #0
 800c578:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 800c57c:	2003      	movs	r0, #3
}
 800c57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800c582:	f7fc fb11 	bl	8008ba8 <HAL_GetTick>
 800c586:	1bc0      	subs	r0, r0, r7
 800c588:	4540      	cmp	r0, r8
 800c58a:	d9d5      	bls.n	800c538 <UART_WaitOnFlagUntilTimeout+0x10>
 800c58c:	e7e5      	b.n	800c55a <UART_WaitOnFlagUntilTimeout+0x32>

0800c58e <HAL_UART_Transmit>:
{
 800c58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c590:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800c592:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c596:	2b20      	cmp	r3, #32
{
 800c598:	b085      	sub	sp, #20
 800c59a:	4604      	mov	r4, r0
 800c59c:	460d      	mov	r5, r1
 800c59e:	4616      	mov	r6, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800c5a0:	d149      	bne.n	800c636 <HAL_UART_Transmit+0xa8>
    if((pData == NULL ) || (Size == 0U))
 800c5a2:	2900      	cmp	r1, #0
 800c5a4:	d045      	beq.n	800c632 <HAL_UART_Transmit+0xa4>
 800c5a6:	2a00      	cmp	r2, #0
 800c5a8:	d043      	beq.n	800c632 <HAL_UART_Transmit+0xa4>
    __HAL_LOCK(huart);
 800c5aa:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d041      	beq.n	800c636 <HAL_UART_Transmit+0xa8>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5bc:	2321      	movs	r3, #33	; 0x21
 800c5be:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 800c5c2:	f7fc faf1 	bl	8008ba8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800c5c6:	f8a4 6050 	strh.w	r6, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800c5ca:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800c5cc:	f8a4 6052 	strh.w	r6, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800c5d0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5d4:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 800c5d6:	b292      	uxth	r2, r2
 800c5d8:	b952      	cbnz	r2, 800c5f0 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5da:	2140      	movs	r1, #64	; 0x40
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f7ff ffa3 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800c5e2:	b968      	cbnz	r0, 800c600 <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800c5e4:	2320      	movs	r3, #32
 800c5e6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 800c5ea:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 800c5ee:	e008      	b.n	800c602 <HAL_UART_Transmit+0x74>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2180      	movs	r1, #128	; 0x80
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	9303      	str	r3, [sp, #12]
 800c5f8:	f7ff ff96 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	b110      	cbz	r0, 800c606 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 800c600:	2003      	movs	r0, #3
}
 800c602:	b005      	add	sp, #20
 800c604:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c606:	68a2      	ldr	r2, [r4, #8]
 800c608:	6821      	ldr	r1, [r4, #0]
 800c60a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c60e:	d10d      	bne.n	800c62c <HAL_UART_Transmit+0x9e>
 800c610:	6922      	ldr	r2, [r4, #16]
 800c612:	b95a      	cbnz	r2, 800c62c <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800c614:	f835 2b02 	ldrh.w	r2, [r5], #2
 800c618:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c61c:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800c61e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800c622:	3a01      	subs	r2, #1
 800c624:	b292      	uxth	r2, r2
 800c626:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800c62a:	e7d1      	b.n	800c5d0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800c62c:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c630:	e7f4      	b.n	800c61c <HAL_UART_Transmit+0x8e>
      return  HAL_ERROR;
 800c632:	2001      	movs	r0, #1
 800c634:	e7e5      	b.n	800c602 <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 800c636:	2002      	movs	r0, #2
 800c638:	e7e3      	b.n	800c602 <HAL_UART_Transmit+0x74>

0800c63a <HAL_UART_Receive>:
{
 800c63a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c63e:	461e      	mov	r6, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 800c640:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800c644:	2b20      	cmp	r3, #32
{
 800c646:	4604      	mov	r4, r0
 800c648:	460d      	mov	r5, r1
 800c64a:	4617      	mov	r7, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800c64c:	d15f      	bne.n	800c70e <HAL_UART_Receive+0xd4>
    if((pData == NULL ) || (Size == 0U))
 800c64e:	2900      	cmp	r1, #0
 800c650:	d05b      	beq.n	800c70a <HAL_UART_Receive+0xd0>
 800c652:	2a00      	cmp	r2, #0
 800c654:	d059      	beq.n	800c70a <HAL_UART_Receive+0xd0>
    __HAL_LOCK(huart);
 800c656:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d057      	beq.n	800c70e <HAL_UART_Receive+0xd4>
 800c65e:	2301      	movs	r3, #1
 800c660:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c664:	2300      	movs	r3, #0
 800c666:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c668:	2322      	movs	r3, #34	; 0x22
 800c66a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 800c66e:	f7fc fa9b 	bl	8008ba8 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800c672:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 800c674:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800c678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800c67c:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800c67e:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800c682:	d115      	bne.n	800c6b0 <HAL_UART_Receive+0x76>
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	b98b      	cbnz	r3, 800c6ac <HAL_UART_Receive+0x72>
 800c688:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c68c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 800c690:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    while(huart->RxXferCount > 0U)
 800c694:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800c698:	b290      	uxth	r0, r2
 800c69a:	b9b8      	cbnz	r0, 800c6cc <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 800c69c:	2320      	movs	r3, #32
 800c69e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 800c6a2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800c6a6:	b002      	add	sp, #8
 800c6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 800c6ac:	23ff      	movs	r3, #255	; 0xff
 800c6ae:	e7ed      	b.n	800c68c <HAL_UART_Receive+0x52>
 800c6b0:	b923      	cbnz	r3, 800c6bc <HAL_UART_Receive+0x82>
 800c6b2:	6923      	ldr	r3, [r4, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d0f9      	beq.n	800c6ac <HAL_UART_Receive+0x72>
 800c6b8:	237f      	movs	r3, #127	; 0x7f
 800c6ba:	e7e7      	b.n	800c68c <HAL_UART_Receive+0x52>
 800c6bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6c0:	d1e6      	bne.n	800c690 <HAL_UART_Receive+0x56>
 800c6c2:	6923      	ldr	r3, [r4, #16]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d0f7      	beq.n	800c6b8 <HAL_UART_Receive+0x7e>
 800c6c8:	233f      	movs	r3, #63	; 0x3f
 800c6ca:	e7df      	b.n	800c68c <HAL_UART_Receive+0x52>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c6cc:	9600      	str	r6, [sp, #0]
 800c6ce:	4643      	mov	r3, r8
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2120      	movs	r1, #32
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f7ff ff27 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800c6da:	b9d0      	cbnz	r0, 800c712 <HAL_UART_Receive+0xd8>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6dc:	68a2      	ldr	r2, [r4, #8]
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800c6e4:	d10c      	bne.n	800c700 <HAL_UART_Receive+0xc6>
 800c6e6:	6922      	ldr	r2, [r4, #16]
 800c6e8:	b952      	cbnz	r2, 800c700 <HAL_UART_Receive+0xc6>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800c6ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c6ec:	403b      	ands	r3, r7
 800c6ee:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 800c6f2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800c6f6:	3a01      	subs	r2, #1
 800c6f8:	b292      	uxth	r2, r2
 800c6fa:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800c6fe:	e7c9      	b.n	800c694 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c700:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c702:	403b      	ands	r3, r7
 800c704:	f805 3b01 	strb.w	r3, [r5], #1
 800c708:	e7f3      	b.n	800c6f2 <HAL_UART_Receive+0xb8>
      return  HAL_ERROR;
 800c70a:	2001      	movs	r0, #1
 800c70c:	e7cb      	b.n	800c6a6 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 800c70e:	2002      	movs	r0, #2
 800c710:	e7c9      	b.n	800c6a6 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800c712:	2003      	movs	r0, #3
 800c714:	e7c7      	b.n	800c6a6 <HAL_UART_Receive+0x6c>

0800c716 <UART_CheckIdleState>:
{
 800c716:	b530      	push	{r4, r5, lr}
 800c718:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71a:	2500      	movs	r5, #0
{
 800c71c:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71e:	6745      	str	r5, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800c720:	f7fc fa42 	bl	8008ba8 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c724:	6822      	ldr	r2, [r4, #0]
 800c726:	6812      	ldr	r2, [r2, #0]
 800c728:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800c72a:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c72c:	d416      	bmi.n	800c75c <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c72e:	6822      	ldr	r2, [r4, #0]
 800c730:	6812      	ldr	r2, [r2, #0]
 800c732:	0752      	lsls	r2, r2, #29
 800c734:	d509      	bpl.n	800c74a <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c736:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c73a:	9200      	str	r2, [sp, #0]
 800c73c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c740:	2200      	movs	r2, #0
 800c742:	4620      	mov	r0, r4
 800c744:	f7ff fef0 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800c748:	b9a8      	cbnz	r0, 800c776 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 800c74a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800c74c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800c74e:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800c752:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 800c756:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 800c75a:	e00d      	b.n	800c778 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c75c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c760:	9200      	str	r2, [sp, #0]
 800c762:	9003      	str	r0, [sp, #12]
 800c764:	462a      	mov	r2, r5
 800c766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c76a:	4620      	mov	r0, r4
 800c76c:	f7ff fedc 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	2800      	cmp	r0, #0
 800c774:	d0db      	beq.n	800c72e <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800c776:	2003      	movs	r0, #3
}
 800c778:	b005      	add	sp, #20
 800c77a:	bd30      	pop	{r4, r5, pc}

0800c77c <HAL_UART_Init>:
{
 800c77c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800c77e:	4604      	mov	r4, r0
 800c780:	b360      	cbz	r0, 800c7dc <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800c782:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800c786:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c78a:	b91b      	cbnz	r3, 800c794 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800c78c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800c790:	f7ff fcdc 	bl	800c14c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800c794:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c796:	2324      	movs	r3, #36	; 0x24
 800c798:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800c79c:	6813      	ldr	r3, [r2, #0]
 800c79e:	f023 0301 	bic.w	r3, r3, #1
 800c7a2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f7ff fcd3 	bl	800c150 <UART_SetConfig>
 800c7aa:	2801      	cmp	r0, #1
 800c7ac:	d016      	beq.n	800c7dc <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c7ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7b0:	b113      	cbz	r3, 800c7b8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7ff fe64 	bl	800c480 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c7c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c7c2:	689a      	ldr	r2, [r3, #8]
 800c7c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c7c8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800c7d0:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800c7d2:	601a      	str	r2, [r3, #0]
}
 800c7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800c7d8:	f7ff bf9d 	b.w	800c716 <UART_CheckIdleState>
}
 800c7dc:	2001      	movs	r0, #1
 800c7de:	bd10      	pop	{r4, pc}

0800c7e0 <MQTTCloseSession>:

void MQTTCloseSession(MQTTClient* c)
{
    c->ping_outstanding = 0;
    c->isconnected = 0;
    if (c->cleansession)
 800c7e0:	6a42      	ldr	r2, [r0, #36]	; 0x24
    c->ping_outstanding = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	7703      	strb	r3, [r0, #28]
    c->isconnected = 0;
 800c7e6:	6203      	str	r3, [r0, #32]
    if (c->cleansession)
 800c7e8:	b122      	cbz	r2, 800c7f4 <MQTTCloseSession+0x14>
        c->messageHandlers[i].topicFilter = NULL;
 800c7ea:	6283      	str	r3, [r0, #40]	; 0x28
 800c7ec:	6303      	str	r3, [r0, #48]	; 0x30
 800c7ee:	6383      	str	r3, [r0, #56]	; 0x38
 800c7f0:	6403      	str	r3, [r0, #64]	; 0x40
 800c7f2:	6483      	str	r3, [r0, #72]	; 0x48
        MQTTCleanSession(c);
}
 800c7f4:	4770      	bx	lr

0800c7f6 <sendPacket>:
{
 800c7f6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	460f      	mov	r7, r1
 800c7fe:	4616      	mov	r6, r2
        sent = 0;
 800c800:	2500      	movs	r5, #0
    while (sent < length && !TimerIsExpired(timer))
 800c802:	42bd      	cmp	r5, r7
 800c804:	da1d      	bge.n	800c842 <sendPacket+0x4c>
 800c806:	4630      	mov	r0, r6
 800c808:	f7f6 fa99 	bl	8002d3e <TimerIsExpired>
 800c80c:	b990      	cbnz	r0, 800c834 <sendPacket+0x3e>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length - sent, TimerLeftMS(timer)); // length changed by length - sent for long packets and non blocking sockets
 800c80e:	6921      	ldr	r1, [r4, #16]
 800c810:	f8d4 9054 	ldr.w	r9, [r4, #84]	; 0x54
 800c814:	4429      	add	r1, r5
 800c816:	4630      	mov	r0, r6
 800c818:	f8d9 a008 	ldr.w	sl, [r9, #8]
 800c81c:	9101      	str	r1, [sp, #4]
 800c81e:	f7f6 fa7a 	bl	8002d16 <TimerLeftMS>
 800c822:	eba7 0805 	sub.w	r8, r7, r5
 800c826:	4603      	mov	r3, r0
 800c828:	9901      	ldr	r1, [sp, #4]
 800c82a:	4642      	mov	r2, r8
 800c82c:	4648      	mov	r0, r9
 800c82e:	47d0      	blx	sl
        if (rc < 0)  // there was an error writing the data
 800c830:	2800      	cmp	r0, #0
 800c832:	da04      	bge.n	800c83e <sendPacket+0x48>
        rc = FAILURE;
 800c834:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c838:	b002      	add	sp, #8
 800c83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        sent += rc;
 800c83e:	4405      	add	r5, r0
 800c840:	e7df      	b.n	800c802 <sendPacket+0xc>
    if (sent == length)
 800c842:	d1f7      	bne.n	800c834 <sendPacket+0x3e>
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800c844:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c848:	69a1      	ldr	r1, [r4, #24]
 800c84a:	f7f6 fa59 	bl	8002d00 <TimerCountdown>
        rc = MQSUCCESS;
 800c84e:	2000      	movs	r0, #0
    return rc;
 800c850:	e7f2      	b.n	800c838 <sendPacket+0x42>
	...

0800c854 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800c854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c858:	6d45      	ldr	r5, [r0, #84]	; 0x54
{
 800c85a:	b093      	sub	sp, #76	; 0x4c
 800c85c:	460f      	mov	r7, r1
 800c85e:	4604      	mov	r4, r0
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c860:	6941      	ldr	r1, [r0, #20]
 800c862:	686e      	ldr	r6, [r5, #4]
 800c864:	9107      	str	r1, [sp, #28]
 800c866:	4638      	mov	r0, r7
 800c868:	f7f6 fa55 	bl	8002d16 <TimerLeftMS>
 800c86c:	9907      	ldr	r1, [sp, #28]
 800c86e:	4603      	mov	r3, r0
 800c870:	2201      	movs	r2, #1
 800c872:	4628      	mov	r0, r5
 800c874:	47b0      	blx	r6
    if (rc != 1)
 800c876:	2801      	cmp	r0, #1
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800c878:	4606      	mov	r6, r0
    if (rc != 1)
 800c87a:	d14e      	bne.n	800c91a <cycle+0xc6>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800c87c:	4638      	mov	r0, r7
 800c87e:	f7f6 fa4a 	bl	8002d16 <TimerLeftMS>
 800c882:	f04f 0805 	mov.w	r8, #5
 800c886:	4681      	mov	r9, r0
    *value = 0;
 800c888:	2500      	movs	r5, #0
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c88a:	f1b8 0801 	subs.w	r8, r8, #1
 800c88e:	d012      	beq.n	800c8b6 <cycle+0x62>
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800c890:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c892:	464b      	mov	r3, r9
 800c894:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	a90e      	add	r1, sp, #56	; 0x38
 800c89c:	47d0      	blx	sl
        if (rc != 1)
 800c89e:	2801      	cmp	r0, #1
 800c8a0:	d109      	bne.n	800c8b6 <cycle+0x62>
        *value += (i & 127) * multiplier;
 800c8a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800c8a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8aa:	fb06 5502 	mla	r5, r6, r2, r5
    } while ((i & 128) != 0);
 800c8ae:	061a      	lsls	r2, r3, #24
        multiplier *= 128;
 800c8b0:	ea4f 16c6 	mov.w	r6, r6, lsl #7
    } while ((i & 128) != 0);
 800c8b4:	d4e9      	bmi.n	800c88a <cycle+0x36>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c8b6:	6960      	ldr	r0, [r4, #20]
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	f000 fc80 	bl	800d1c0 <MQTTPacket_encode>
    if (rem_len > (c->readbuf_size - len))
 800c8c0:	68e3      	ldr	r3, [r4, #12]
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800c8c2:	3001      	adds	r0, #1
    if (rem_len > (c->readbuf_size - len))
 800c8c4:	1a1b      	subs	r3, r3, r0
 800c8c6:	42ab      	cmp	r3, r5
 800c8c8:	d20a      	bcs.n	800c8e0 <cycle+0x8c>
        rc = BUFFER_OVERFLOW;
 800c8ca:	f06f 0501 	mvn.w	r5, #1
    }

exit:
    if (rc == MQSUCCESS)
        rc = packet_type;
    else if (c->isconnected)
 800c8ce:	6a23      	ldr	r3, [r4, #32]
 800c8d0:	b113      	cbz	r3, 800c8d8 <cycle+0x84>
        MQTTCloseSession(c);
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f7ff ff84 	bl	800c7e0 <MQTTCloseSession>
    return rc;
}
 800c8d8:	4628      	mov	r0, r5
 800c8da:	b013      	add	sp, #76	; 0x4c
 800c8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (rem_len > 0)
 800c8e0:	b195      	cbz	r5, 800c908 <cycle+0xb4>
      rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer));
 800c8e2:	6961      	ldr	r1, [r4, #20]
 800c8e4:	6d66      	ldr	r6, [r4, #84]	; 0x54
 800c8e6:	4401      	add	r1, r0
 800c8e8:	4638      	mov	r0, r7
 800c8ea:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800c8ee:	9107      	str	r1, [sp, #28]
 800c8f0:	f7f6 fa11 	bl	8002d16 <TimerLeftMS>
 800c8f4:	9907      	ldr	r1, [sp, #28]
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4630      	mov	r0, r6
 800c8fc:	47c0      	blx	r8
      if (rc != rem_len)
 800c8fe:	42a8      	cmp	r0, r5
 800c900:	d002      	beq.n	800c908 <cycle+0xb4>
        rc = 0;
 800c902:	2600      	movs	r6, #0
 800c904:	2500      	movs	r5, #0
 800c906:	e0ae      	b.n	800ca66 <cycle+0x212>
    header.byte = c->readbuf[0];
 800c908:	6963      	ldr	r3, [r4, #20]
    if (c->keepAliveInterval > 0)
 800c90a:	69a1      	ldr	r1, [r4, #24]
    header.byte = c->readbuf[0];
 800c90c:	781e      	ldrb	r6, [r3, #0]
    rc = header.bits.type;
 800c90e:	0936      	lsrs	r6, r6, #4
    if (c->keepAliveInterval > 0)
 800c910:	b119      	cbz	r1, 800c91a <cycle+0xc6>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800c912:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c916:	f7f6 f9f3 	bl	8002d00 <TimerCountdown>
    switch (packet_type)
 800c91a:	2e0d      	cmp	r6, #13
 800c91c:	f200 80f9 	bhi.w	800cb12 <cycle+0x2be>
 800c920:	a301      	add	r3, pc, #4	; (adr r3, 800c928 <cycle+0xd4>)
 800c922:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800c905 	.word	0x0800c905
 800c92c:	0800cb13 	.word	0x0800cb13
 800c930:	0800c905 	.word	0x0800c905
 800c934:	0800c961 	.word	0x0800c961
 800c938:	0800c905 	.word	0x0800c905
 800c93c:	0800cab9 	.word	0x0800cab9
 800c940:	0800cab9 	.word	0x0800cab9
 800c944:	0800c905 	.word	0x0800c905
 800c948:	0800cb13 	.word	0x0800cb13
 800c94c:	0800c905 	.word	0x0800c905
 800c950:	0800cb13 	.word	0x0800cb13
 800c954:	0800cb13 	.word	0x0800cb13
 800c958:	0800cb13 	.word	0x0800cb13
 800c95c:	0800caf9 	.word	0x0800caf9
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800c960:	2300      	movs	r3, #0
 800c962:	9311      	str	r3, [sp, #68]	; 0x44
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800c964:	68e3      	ldr	r3, [r4, #12]
 800c966:	9304      	str	r3, [sp, #16]
 800c968:	6963      	ldr	r3, [r4, #20]
 800c96a:	9303      	str	r3, [sp, #12]
 800c96c:	ab11      	add	r3, sp, #68	; 0x44
 800c96e:	9302      	str	r3, [sp, #8]
 800c970:	ad0b      	add	r5, sp, #44	; 0x2c
 800c972:	ab10      	add	r3, sp, #64	; 0x40
 800c974:	9301      	str	r3, [sp, #4]
 800c976:	9500      	str	r5, [sp, #0]
 800c978:	ab0f      	add	r3, sp, #60	; 0x3c
 800c97a:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 800c97e:	a908      	add	r1, sp, #32
 800c980:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 800c984:	f000 fb9e 	bl	800d0c4 <MQTTDeserialize_publish>
 800c988:	2801      	cmp	r0, #1
 800c98a:	d001      	beq.n	800c990 <cycle+0x13c>
 800c98c:	4635      	mov	r5, r6
    return rc;
 800c98e:	e7a3      	b.n	800c8d8 <cycle+0x84>
            msg.qos = (enum QoS)intQoS;
 800c990:	9b08      	ldr	r3, [sp, #32]
 800c992:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c996:	46a2      	mov	sl, r4
 800c998:	f104 0828 	add.w	r8, r4, #40	; 0x28
    int rc = FAILURE;
 800c99c:	f04f 3bff 	mov.w	fp, #4294967295
    md->message = aMessage;
 800c9a0:	f10d 0938 	add.w	r9, sp, #56	; 0x38
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800c9a4:	f8da 1028 	ldr.w	r1, [sl, #40]	; 0x28
 800c9a8:	b1c9      	cbz	r1, 800c9de <cycle+0x18a>
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f000 fce4 	bl	800d378 <MQTTPacket_equals>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	f040 80b3 	bne.w	800cb1c <cycle+0x2c8>
    char* curn_end = curn + topicName->lenstring.len;
 800c9b6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c9ba:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800c9be:	4411      	add	r1, r2
    while (*curf && curn < curn_end)
 800c9c0:	1e58      	subs	r0, r3, #1
 800c9c2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 80a5 	beq.w	800cb16 <cycle+0x2c2>
 800c9cc:	4291      	cmp	r1, r2
 800c9ce:	d906      	bls.n	800c9de <cycle+0x18a>
        if (*curn == '/' && *curf != '/')
 800c9d0:	f892 c000 	ldrb.w	ip, [r2]
 800c9d4:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800c9d8:	d122      	bne.n	800ca20 <cycle+0x1cc>
 800c9da:	2b2f      	cmp	r3, #47	; 0x2f
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800c9dc:	d02f      	beq.n	800ca3e <cycle+0x1ea>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c9de:	f10a 0a08 	add.w	sl, sl, #8
 800c9e2:	45d0      	cmp	r8, sl
 800c9e4:	d1de      	bne.n	800c9a4 <cycle+0x150>
    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800c9e6:	f1bb 0f00 	cmp.w	fp, #0
 800c9ea:	d006      	beq.n	800c9fa <cycle+0x1a6>
 800c9ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c9ee:	b123      	cbz	r3, 800c9fa <cycle+0x1a6>
    md->message = aMessage;
 800c9f0:	aa0e      	add	r2, sp, #56	; 0x38
    md->topicName = aTopicName;
 800c9f2:	950a      	str	r5, [sp, #40]	; 0x28
    md->message = aMessage;
 800c9f4:	9209      	str	r2, [sp, #36]	; 0x24
        c->defaultMessageHandler(&md);
 800c9f6:	a809      	add	r0, sp, #36	; 0x24
 800c9f8:	4798      	blx	r3
            if (msg.qos != QOS0)
 800c9fa:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 800c9fe:	b395      	cbz	r5, 800ca66 <cycle+0x212>
                if (msg.qos == QOS1)
 800ca00:	2d01      	cmp	r5, #1
 800ca02:	d120      	bne.n	800ca46 <cycle+0x1f2>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800ca04:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	2204      	movs	r2, #4
 800ca0c:	2300      	movs	r3, #0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800ca0e:	68a1      	ldr	r1, [r4, #8]
 800ca10:	6920      	ldr	r0, [r4, #16]
 800ca12:	f000 fd1d 	bl	800d450 <MQTTSerialize_ack>
                if (len <= 0)
 800ca16:	2800      	cmp	r0, #0
 800ca18:	dc1d      	bgt.n	800ca56 <cycle+0x202>
        rc = FAILURE;
 800ca1a:	f04f 35ff 	mov.w	r5, #4294967295
 800ca1e:	e756      	b.n	800c8ce <cycle+0x7a>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800ca20:	2b2b      	cmp	r3, #43	; 0x2b
 800ca22:	d004      	beq.n	800ca2e <cycle+0x1da>
 800ca24:	2b23      	cmp	r3, #35	; 0x23
 800ca26:	d00c      	beq.n	800ca42 <cycle+0x1ee>
 800ca28:	459c      	cmp	ip, r3
 800ca2a:	e7d7      	b.n	800c9dc <cycle+0x188>
 800ca2c:	461a      	mov	r2, r3
            while (nextpos < curn_end && *nextpos != '/')
 800ca2e:	1c53      	adds	r3, r2, #1
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d004      	beq.n	800ca3e <cycle+0x1ea>
 800ca34:	f892 c001 	ldrb.w	ip, [r2, #1]
 800ca38:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ca3c:	d1f6      	bne.n	800ca2c <cycle+0x1d8>
        curn++;
 800ca3e:	3201      	adds	r2, #1
 800ca40:	e7bf      	b.n	800c9c2 <cycle+0x16e>
            curn = curn_end - 1;    // skip until end of string
 800ca42:	1e4a      	subs	r2, r1, #1
 800ca44:	e7fb      	b.n	800ca3e <cycle+0x1ea>
                else if (msg.qos == QOS2)
 800ca46:	2d02      	cmp	r5, #2
 800ca48:	d1e7      	bne.n	800ca1a <cycle+0x1c6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800ca4a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2205      	movs	r2, #5
 800ca52:	2300      	movs	r3, #0
 800ca54:	e7db      	b.n	800ca0e <cycle+0x1ba>
                    rc = sendPacket(c, len, timer);
 800ca56:	4601      	mov	r1, r0
 800ca58:	463a      	mov	r2, r7
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f7ff fecb 	bl	800c7f6 <sendPacket>
                if (rc == FAILURE)
 800ca60:	1c43      	adds	r3, r0, #1
                    rc = sendPacket(c, len, timer);
 800ca62:	4605      	mov	r5, r0
                if (rc == FAILURE)
 800ca64:	d0d9      	beq.n	800ca1a <cycle+0x1c6>
    if (c->keepAliveInterval == 0)
 800ca66:	69a3      	ldr	r3, [r4, #24]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d04e      	beq.n	800cb0a <cycle+0x2b6>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800ca6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca70:	f7f6 f965 	bl	8002d3e <TimerIsExpired>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	d042      	beq.n	800cafe <cycle+0x2aa>
        if (c->ping_outstanding)
 800ca78:	7f23      	ldrb	r3, [r4, #28]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1cd      	bne.n	800ca1a <cycle+0x1c6>
            TimerInit(&timer);
 800ca7e:	a80e      	add	r0, sp, #56	; 0x38
 800ca80:	f7f6 f965 	bl	8002d4e <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800ca84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ca88:	a80e      	add	r0, sp, #56	; 0x38
 800ca8a:	f7f6 f931 	bl	8002cf0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800ca8e:	68a1      	ldr	r1, [r4, #8]
 800ca90:	6920      	ldr	r0, [r4, #16]
 800ca92:	f000 fb14 	bl	800d0be <MQTTSerialize_pingreq>
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQSUCCESS) // send the ping packet
 800ca96:	1e01      	subs	r1, r0, #0
 800ca98:	dd37      	ble.n	800cb0a <cycle+0x2b6>
 800ca9a:	aa0e      	add	r2, sp, #56	; 0x38
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f7ff feaa 	bl	800c7f6 <sendPacket>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d1b9      	bne.n	800ca1a <cycle+0x1c6>
                c->ping_outstanding = 1;
 800caa6:	2301      	movs	r3, #1
 800caa8:	7723      	strb	r3, [r4, #28]
                TimerCountdownMS(&c->last_received, 5000);  // allow for a few seconds to receive the ping response
 800caaa:	f241 3188 	movw	r1, #5000	; 0x1388
 800caae:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800cab2:	f7f6 f91d 	bl	8002cf0 <TimerCountdownMS>
    return rc;
 800cab6:	e028      	b.n	800cb0a <cycle+0x2b6>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800cab8:	68e3      	ldr	r3, [r4, #12]
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	aa0e      	add	r2, sp, #56	; 0x38
 800cabe:	6963      	ldr	r3, [r4, #20]
 800cac0:	a909      	add	r1, sp, #36	; 0x24
 800cac2:	a80b      	add	r0, sp, #44	; 0x2c
 800cac4:	f000 fb43 	bl	800d14e <MQTTDeserialize_ack>
 800cac8:	2801      	cmp	r0, #1
 800caca:	d1a6      	bne.n	800ca1a <cycle+0x1c6>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 800cacc:	2e05      	cmp	r6, #5
 800cace:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800cad2:	68a1      	ldr	r1, [r4, #8]
 800cad4:	9300      	str	r3, [sp, #0]
 800cad6:	bf0c      	ite	eq
 800cad8:	2206      	moveq	r2, #6
 800cada:	2207      	movne	r2, #7
 800cadc:	6920      	ldr	r0, [r4, #16]
 800cade:	2300      	movs	r3, #0
 800cae0:	f000 fcb6 	bl	800d450 <MQTTSerialize_ack>
 800cae4:	1e01      	subs	r1, r0, #0
 800cae6:	dd98      	ble.n	800ca1a <cycle+0x1c6>
            else if ((rc = sendPacket(c, len, timer)) != MQSUCCESS) // send the PUBREL packet
 800cae8:	463a      	mov	r2, r7
 800caea:	4620      	mov	r0, r4
 800caec:	f7ff fe83 	bl	800c7f6 <sendPacket>
 800caf0:	4605      	mov	r5, r0
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d0b7      	beq.n	800ca66 <cycle+0x212>
 800caf6:	e790      	b.n	800ca1a <cycle+0x1c6>
            c->ping_outstanding = 0;
 800caf8:	2500      	movs	r5, #0
 800cafa:	7725      	strb	r5, [r4, #28]
            break;
 800cafc:	e7b3      	b.n	800ca66 <cycle+0x212>
    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800cafe:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800cb02:	f7f6 f91c 	bl	8002d3e <TimerIsExpired>
 800cb06:	2800      	cmp	r0, #0
 800cb08:	d1b6      	bne.n	800ca78 <cycle+0x224>
    if (rc == MQSUCCESS)
 800cb0a:	2d00      	cmp	r5, #0
 800cb0c:	f43f af3e 	beq.w	800c98c <cycle+0x138>
 800cb10:	e6dd      	b.n	800c8ce <cycle+0x7a>
 800cb12:	4635      	mov	r5, r6
 800cb14:	e6db      	b.n	800c8ce <cycle+0x7a>
    return (curn == curn_end) && (*curf == '\0');
 800cb16:	4291      	cmp	r1, r2
 800cb18:	f47f af61 	bne.w	800c9de <cycle+0x18a>
            if (c->messageHandlers[i].fp != NULL)
 800cb1c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f43f af5c 	beq.w	800c9de <cycle+0x18a>
    md->message = aMessage;
 800cb26:	e9cd 9509 	strd	r9, r5, [sp, #36]	; 0x24
                c->messageHandlers[i].fp(&md);
 800cb2a:	a809      	add	r0, sp, #36	; 0x24
 800cb2c:	4798      	blx	r3
                rc = MQSUCCESS;
 800cb2e:	f04f 0b00 	mov.w	fp, #0
 800cb32:	e754      	b.n	800c9de <cycle+0x18a>

0800cb34 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb36:	4606      	mov	r6, r0
 800cb38:	460f      	mov	r7, r1
 800cb3a:	4615      	mov	r5, r2
    int rc = FAILURE;
 800cb3c:	f04f 34ff 	mov.w	r4, #4294967295

    do
    {
        if (TimerIsExpired(timer))
 800cb40:	4628      	mov	r0, r5
 800cb42:	f7f6 f8fc 	bl	8002d3e <TimerIsExpired>
 800cb46:	b940      	cbnz	r0, 800cb5a <waitfor+0x26>
            break; // we timed out
        rc = cycle(c, timer);
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4630      	mov	r0, r6
 800cb4c:	f7ff fe82 	bl	800c854 <cycle>
    }
    while (rc != packet_type && rc >= 0);
 800cb50:	42b8      	cmp	r0, r7
        rc = cycle(c, timer);
 800cb52:	4604      	mov	r4, r0
    while (rc != packet_type && rc >= 0);
 800cb54:	d001      	beq.n	800cb5a <waitfor+0x26>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	daf2      	bge.n	800cb40 <waitfor+0xc>

    return rc;
}
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb5e <MQTTClientInit>:
{
 800cb5e:	b510      	push	{r4, lr}
    c->buf = sendbuf;
 800cb60:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
 800cb62:	9b02      	ldr	r3, [sp, #8]
 800cb64:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
 800cb66:	9b03      	ldr	r3, [sp, #12]
 800cb68:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
 800cb6a:	9b04      	ldr	r3, [sp, #16]
    c->ipstack = network;
 800cb6c:	6541      	str	r1, [r0, #84]	; 0x54
    c->readbuf_size = readbuf_size;
 800cb6e:	60c3      	str	r3, [r0, #12]
        c->messageHandlers[i].topicFilter = 0;
 800cb70:	2100      	movs	r1, #0
	  c->next_packetid = 1;
 800cb72:	2301      	movs	r3, #1
{
 800cb74:	4604      	mov	r4, r0
    c->cleansession = 0;
 800cb76:	e9c0 1108 	strd	r1, r1, [r0, #32]
        c->messageHandlers[i].topicFilter = 0;
 800cb7a:	6281      	str	r1, [r0, #40]	; 0x28
 800cb7c:	6301      	str	r1, [r0, #48]	; 0x30
 800cb7e:	6381      	str	r1, [r0, #56]	; 0x38
 800cb80:	6401      	str	r1, [r0, #64]	; 0x40
 800cb82:	6481      	str	r1, [r0, #72]	; 0x48
    c->command_timeout_ms = command_timeout_ms;
 800cb84:	6042      	str	r2, [r0, #4]
    c->ping_outstanding = 0;
 800cb86:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
 800cb88:	6501      	str	r1, [r0, #80]	; 0x50
	  c->next_packetid = 1;
 800cb8a:	f840 3b58 	str.w	r3, [r0], #88
    TimerInit(&c->last_sent);
 800cb8e:	f7f6 f8de 	bl	8002d4e <TimerInit>
    TimerInit(&c->last_received);
 800cb92:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
 800cb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TimerInit(&c->last_received);
 800cb9a:	f7f6 b8d8 	b.w	8002d4e <TimerInit>

0800cb9e <MQTTYield>:
{
 800cb9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cba0:	4604      	mov	r4, r0
    TimerInit(&timer);
 800cba2:	a802      	add	r0, sp, #8
{
 800cba4:	9101      	str	r1, [sp, #4]
    TimerInit(&timer);
 800cba6:	f7f6 f8d2 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800cbaa:	9901      	ldr	r1, [sp, #4]
 800cbac:	a802      	add	r0, sp, #8
 800cbae:	f7f6 f89f 	bl	8002cf0 <TimerCountdownMS>
        if (cycle(c, &timer) < 0)
 800cbb2:	a902      	add	r1, sp, #8
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	f7ff fe4d 	bl	800c854 <cycle>
 800cbba:	2800      	cmp	r0, #0
 800cbbc:	db07      	blt.n	800cbce <MQTTYield+0x30>
  	} while (!TimerIsExpired(&timer));
 800cbbe:	a802      	add	r0, sp, #8
 800cbc0:	f7f6 f8bd 	bl	8002d3e <TimerIsExpired>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d0f4      	beq.n	800cbb2 <MQTTYield+0x14>
    int rc = MQSUCCESS;
 800cbc8:	2000      	movs	r0, #0
}
 800cbca:	b004      	add	sp, #16
 800cbcc:	bd10      	pop	{r4, pc}
            rc = FAILURE;
 800cbce:	f04f 30ff 	mov.w	r0, #4294967295
    return rc;
 800cbd2:	e7fa      	b.n	800cbca <MQTTYield+0x2c>

0800cbd4 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 800cbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd6:	b099      	sub	sp, #100	; 0x64
 800cbd8:	4604      	mov	r4, r0
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800cbda:	af02      	add	r7, sp, #8
{
 800cbdc:	460d      	mov	r5, r1
 800cbde:	4616      	mov	r6, r2
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800cbe0:	4921      	ldr	r1, [pc, #132]	; (800cc68 <MQTTConnectWithResults+0x94>)
 800cbe2:	2258      	movs	r2, #88	; 0x58
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f015 fbff 	bl	80223e8 <memcpy>
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 800cbea:	6a23      	ldr	r3, [r4, #32]
 800cbec:	b123      	cbz	r3, 800cbf8 <MQTTConnectWithResults+0x24>
    int rc = FAILURE;
 800cbee:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
}
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	b019      	add	sp, #100	; 0x64
 800cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        options = &default_options; /* set default options if none were supplied */
 800cbf8:	2d00      	cmp	r5, #0
 800cbfa:	bf08      	it	eq
 800cbfc:	463d      	moveq	r5, r7
    TimerInit(&connect_timer);
 800cbfe:	4668      	mov	r0, sp
 800cc00:	f7f6 f8a5 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800cc04:	6861      	ldr	r1, [r4, #4]
 800cc06:	4668      	mov	r0, sp
 800cc08:	f7f6 f872 	bl	8002cf0 <TimerCountdownMS>
    c->keepAliveInterval = options->keepAliveInterval;
 800cc0c:	8b29      	ldrh	r1, [r5, #24]
 800cc0e:	61a1      	str	r1, [r4, #24]
    c->cleansession = options->cleansession;
 800cc10:	7eab      	ldrb	r3, [r5, #26]
 800cc12:	6263      	str	r3, [r4, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 800cc14:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800cc18:	f7f6 f872 	bl	8002d00 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800cc1c:	68a1      	ldr	r1, [r4, #8]
 800cc1e:	6920      	ldr	r0, [r4, #16]
 800cc20:	462a      	mov	r2, r5
 800cc22:	f000 f957 	bl	800ced4 <MQTTSerialize_connect>
 800cc26:	1e01      	subs	r1, r0, #0
 800cc28:	dde1      	ble.n	800cbee <MQTTConnectWithResults+0x1a>
    if ((rc = sendPacket(c, len, &connect_timer)) != MQSUCCESS)  // send the connect packet
 800cc2a:	466a      	mov	r2, sp
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7ff fde2 	bl	800c7f6 <sendPacket>
 800cc32:	4605      	mov	r5, r0
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1dc      	bne.n	800cbf2 <MQTTConnectWithResults+0x1e>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800cc38:	466a      	mov	r2, sp
 800cc3a:	2102      	movs	r1, #2
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f7ff ff79 	bl	800cb34 <waitfor>
 800cc42:	2802      	cmp	r0, #2
 800cc44:	d1d3      	bne.n	800cbee <MQTTConnectWithResults+0x1a>
        data->sessionPresent = 0;
 800cc46:	4630      	mov	r0, r6
        data->rc = 0;
 800cc48:	7035      	strb	r5, [r6, #0]
        data->sessionPresent = 0;
 800cc4a:	f800 5f01 	strb.w	r5, [r0, #1]!
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 800cc4e:	4631      	mov	r1, r6
 800cc50:	68e3      	ldr	r3, [r4, #12]
 800cc52:	6962      	ldr	r2, [r4, #20]
 800cc54:	f000 fa0c 	bl	800d070 <MQTTDeserialize_connack>
 800cc58:	2801      	cmp	r0, #1
 800cc5a:	d1c8      	bne.n	800cbee <MQTTConnectWithResults+0x1a>
            rc = data->rc;
 800cc5c:	7835      	ldrb	r5, [r6, #0]
    if (rc == MQSUCCESS)
 800cc5e:	2d00      	cmp	r5, #0
 800cc60:	d1c7      	bne.n	800cbf2 <MQTTConnectWithResults+0x1e>
        c->isconnected = 1;
 800cc62:	6220      	str	r0, [r4, #32]
        c->ping_outstanding = 0;
 800cc64:	7725      	strb	r5, [r4, #28]
    return rc;
 800cc66:	e7c4      	b.n	800cbf2 <MQTTConnectWithResults+0x1e>
 800cc68:	08028618 	.word	0x08028618

0800cc6c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800cc6c:	b507      	push	{r0, r1, r2, lr}
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800cc6e:	aa01      	add	r2, sp, #4
 800cc70:	f7ff ffb0 	bl	800cbd4 <MQTTConnectWithResults>
}
 800cc74:	b003      	add	sp, #12
 800cc76:	f85d fb04 	ldr.w	pc, [sp], #4

0800cc7a <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 800cc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460f      	mov	r7, r1
 800cc82:	4615      	mov	r5, r2
    int rc = FAILURE;
    int i = -1;

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800cc84:	2400      	movs	r4, #0
 800cc86:	f100 0828 	add.w	r8, r0, #40	; 0x28
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 800cc8a:	f858 0034 	ldr.w	r0, [r8, r4, lsl #3]
 800cc8e:	b150      	cbz	r0, 800cca6 <MQTTSetMessageHandler+0x2c>
 800cc90:	4639      	mov	r1, r7
 800cc92:	f7f3 fa9d 	bl	80001d0 <strcmp>
 800cc96:	b930      	cbnz	r0, 800cca6 <MQTTSetMessageHandler+0x2c>
        {
            if (messageHandler == NULL) /* remove existing */
 800cc98:	b99d      	cbnz	r5, 800ccc2 <MQTTSetMessageHandler+0x48>
            {
                c->messageHandlers[i].topicFilter = NULL;
 800cc9a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
                c->messageHandlers[i].fp = NULL;
 800cc9e:	e9c4 000a 	strd	r0, r0, [r4, #40]	; 0x28
            c->messageHandlers[i].topicFilter = topicFilter;
            c->messageHandlers[i].fp = messageHandler;
        }
    }
    return rc;
}
 800cca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800cca6:	3401      	adds	r4, #1
 800cca8:	2c05      	cmp	r4, #5
 800ccaa:	d1ee      	bne.n	800cc8a <MQTTSetMessageHandler+0x10>
    if (messageHandler != NULL) {
 800ccac:	b135      	cbz	r5, 800ccbc <MQTTSetMessageHandler+0x42>
 800ccae:	2400      	movs	r4, #0
                if (c->messageHandlers[i].topicFilter == NULL)
 800ccb0:	f858 3034 	ldr.w	r3, [r8, r4, lsl #3]
 800ccb4:	b12b      	cbz	r3, 800ccc2 <MQTTSetMessageHandler+0x48>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ccb6:	3401      	adds	r4, #1
 800ccb8:	2c05      	cmp	r4, #5
 800ccba:	d1f9      	bne.n	800ccb0 <MQTTSetMessageHandler+0x36>
    if (messageHandler != NULL) {
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	e7ef      	b.n	800cca2 <MQTTSetMessageHandler+0x28>
            c->messageHandlers[i].topicFilter = topicFilter;
 800ccc2:	eb06 00c4 	add.w	r0, r6, r4, lsl #3
            c->messageHandlers[i].fp = messageHandler;
 800ccc6:	e9c0 750a 	strd	r7, r5, [r0, #40]	; 0x28
 800ccca:	2000      	movs	r0, #0
    return rc;
 800cccc:	e7e9      	b.n	800cca2 <MQTTSetMessageHandler+0x28>

0800ccce <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 800ccce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccd2:	461f      	mov	r7, r3
 800ccd4:	b08f      	sub	sp, #60	; 0x3c
    int rc = FAILURE;
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    topic.cstring = (char *)topicFilter;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800ccdc:	6a03      	ldr	r3, [r0, #32]
{
 800ccde:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cce2:	f88d 2017 	strb.w	r2, [sp, #23]
 800cce6:	4604      	mov	r4, r0
 800cce8:	460e      	mov	r6, r1
    topic.cstring = (char *)topicFilter;
 800ccea:	910b      	str	r1, [sp, #44]	; 0x2c
	  if (!c->isconnected)
 800ccec:	b943      	cbnz	r3, 800cd00 <MQTTSubscribeWithResults+0x32>
    else
        rc = FAILURE;

exit:
    if (rc == FAILURE)
        MQTTCloseSession(c);
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f7ff fd76 	bl	800c7e0 <MQTTCloseSession>
 800ccf4:	f04f 35ff 	mov.w	r5, #4294967295
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	b00f      	add	sp, #60	; 0x3c
 800ccfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TimerInit(&timer);
 800cd00:	a809      	add	r0, sp, #36	; 0x24
 800cd02:	f7f6 f824 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cd06:	6861      	ldr	r1, [r4, #4]
 800cd08:	a809      	add	r0, sp, #36	; 0x24
 800cd0a:	f7f5 fff1 	bl	8002cf0 <TimerCountdownMS>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cd0e:	6822      	ldr	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cd10:	68a1      	ldr	r1, [r4, #8]
 800cd12:	6920      	ldr	r0, [r4, #16]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cd14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd18:	429a      	cmp	r2, r3
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cd1a:	f10d 0317 	add.w	r3, sp, #23
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cd1e:	bf14      	ite	ne
 800cd20:	3201      	addne	r2, #1
 800cd22:	2201      	moveq	r2, #1
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cd24:	9302      	str	r3, [sp, #8]
 800cd26:	f04f 0901 	mov.w	r9, #1
 800cd2a:	ab0b      	add	r3, sp, #44	; 0x2c
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cd2c:	6022      	str	r2, [r4, #0]
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	f8cd 9000 	str.w	r9, [sp]
 800cd34:	b293      	uxth	r3, r2
 800cd36:	2200      	movs	r2, #0
 800cd38:	f000 fbb1 	bl	800d49e <MQTTSerialize_subscribe>
    if (len <= 0)
 800cd3c:	1e01      	subs	r1, r0, #0
 800cd3e:	ddd6      	ble.n	800ccee <MQTTSubscribeWithResults+0x20>
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800cd40:	aa09      	add	r2, sp, #36	; 0x24
 800cd42:	4620      	mov	r0, r4
 800cd44:	f7ff fd57 	bl	800c7f6 <sendPacket>
 800cd48:	4605      	mov	r5, r0
 800cd4a:	bb00      	cbnz	r0, 800cd8e <MQTTSubscribeWithResults+0xc0>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800cd4c:	aa09      	add	r2, sp, #36	; 0x24
 800cd4e:	2109      	movs	r1, #9
 800cd50:	4620      	mov	r0, r4
 800cd52:	f7ff feef 	bl	800cb34 <waitfor>
 800cd56:	2809      	cmp	r0, #9
 800cd58:	d1c9      	bne.n	800ccee <MQTTSubscribeWithResults+0x20>
        data->grantedQoS = QOS0;
 800cd5a:	f888 5000 	strb.w	r5, [r8]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800cd5e:	68e3      	ldr	r3, [r4, #12]
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	6963      	ldr	r3, [r4, #20]
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	aa08      	add	r2, sp, #32
 800cd68:	4643      	mov	r3, r8
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	f10d 001e 	add.w	r0, sp, #30
        int count = 0;
 800cd70:	9508      	str	r5, [sp, #32]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800cd72:	f000 fbe0 	bl	800d536 <MQTTDeserialize_suback>
 800cd76:	4548      	cmp	r0, r9
 800cd78:	d1be      	bne.n	800ccf8 <MQTTSubscribeWithResults+0x2a>
            if (data->grantedQoS != 0x80)
 800cd7a:	f898 3000 	ldrb.w	r3, [r8]
 800cd7e:	2b80      	cmp	r3, #128	; 0x80
 800cd80:	d0ba      	beq.n	800ccf8 <MQTTSubscribeWithResults+0x2a>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800cd82:	463a      	mov	r2, r7
 800cd84:	4631      	mov	r1, r6
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7ff ff77 	bl	800cc7a <MQTTSetMessageHandler>
 800cd8c:	4605      	mov	r5, r0
    if (rc == FAILURE)
 800cd8e:	1c6b      	adds	r3, r5, #1
 800cd90:	d1b2      	bne.n	800ccf8 <MQTTSubscribeWithResults+0x2a>
 800cd92:	e7ac      	b.n	800ccee <MQTTSubscribeWithResults+0x20>

0800cd94 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 800cd94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 800cd96:	ac03      	add	r4, sp, #12
 800cd98:	9400      	str	r4, [sp, #0]
 800cd9a:	f7ff ff98 	bl	800ccce <MQTTSubscribeWithResults>
}
 800cd9e:	b004      	add	sp, #16
 800cda0:	bd10      	pop	{r4, pc}

0800cda2 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800cda2:	b570      	push	{r4, r5, r6, lr}
    int rc = FAILURE;
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800cda4:	2300      	movs	r3, #0
{
 800cda6:	b08e      	sub	sp, #56	; 0x38
    MQTTString topic = MQTTString_initializer;
 800cda8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    int len = 0;

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800cdac:	6a03      	ldr	r3, [r0, #32]
    topic.cstring = (char *)topicName;
 800cdae:	910b      	str	r1, [sp, #44]	; 0x2c
{
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	4615      	mov	r5, r2
	  if (!c->isconnected)
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d053      	beq.n	800ce60 <MQTTPublish+0xbe>
		    goto exit;

    TimerInit(&timer);
 800cdb8:	a809      	add	r0, sp, #36	; 0x24
 800cdba:	f7f5 ffc8 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800cdbe:	6861      	ldr	r1, [r4, #4]
 800cdc0:	a809      	add	r0, sp, #36	; 0x24
 800cdc2:	f7f5 ff95 	bl	8002cf0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800cdc6:	782b      	ldrb	r3, [r5, #0]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d808      	bhi.n	800cde0 <MQTTPublish+0x3e>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	bf14      	ite	ne
 800cdd8:	3301      	addne	r3, #1
 800cdda:	2301      	moveq	r3, #1
 800cddc:	6023      	str	r3, [r4, #0]
        message->id = getNextPacketId(c);
 800cdde:	80ab      	strh	r3, [r5, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800cde0:	68eb      	ldr	r3, [r5, #12]
 800cde2:	9306      	str	r3, [sp, #24]
 800cde4:	68ab      	ldr	r3, [r5, #8]
 800cde6:	9305      	str	r3, [sp, #20]
 800cde8:	aa0e      	add	r2, sp, #56	; 0x38
 800cdea:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 800cdee:	ab02      	add	r3, sp, #8
 800cdf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cdf4:	88ab      	ldrh	r3, [r5, #4]
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	786b      	ldrb	r3, [r5, #1]
 800cdfa:	68a1      	ldr	r1, [r4, #8]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	6920      	ldr	r0, [r4, #16]
 800ce00:	782b      	ldrb	r3, [r5, #0]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f000 fad3 	bl	800d3ae <MQTTSerialize_publish>
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
 800ce08:	1e01      	subs	r1, r0, #0
 800ce0a:	dd29      	ble.n	800ce60 <MQTTPublish+0xbe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800ce0c:	aa09      	add	r2, sp, #36	; 0x24
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7ff fcf1 	bl	800c7f6 <sendPacket>
 800ce14:	4606      	mov	r6, r0
 800ce16:	bb08      	cbnz	r0, 800ce5c <MQTTPublish+0xba>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800ce18:	782b      	ldrb	r3, [r5, #0]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d115      	bne.n	800ce4a <MQTTPublish+0xa8>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800ce1e:	aa09      	add	r2, sp, #36	; 0x24
 800ce20:	2104      	movs	r1, #4
 800ce22:	4620      	mov	r0, r4
 800ce24:	f7ff fe86 	bl	800cb34 <waitfor>
 800ce28:	2804      	cmp	r0, #4
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800ce2a:	d119      	bne.n	800ce60 <MQTTPublish+0xbe>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800ce2c:	68e3      	ldr	r3, [r4, #12]
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ce34:	6963      	ldr	r3, [r4, #20]
 800ce36:	a908      	add	r1, sp, #32
 800ce38:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800ce3c:	f000 f987 	bl	800d14e <MQTTDeserialize_ack>
 800ce40:	2801      	cmp	r0, #1
 800ce42:	d10d      	bne.n	800ce60 <MQTTPublish+0xbe>
        MQTTCloseSession(c);
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800ce44:	4630      	mov	r0, r6
 800ce46:	b00e      	add	sp, #56	; 0x38
 800ce48:	bd70      	pop	{r4, r5, r6, pc}
    else if (message->qos == QOS2)
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d1fa      	bne.n	800ce44 <MQTTPublish+0xa2>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800ce4e:	aa09      	add	r2, sp, #36	; 0x24
 800ce50:	2107      	movs	r1, #7
 800ce52:	4620      	mov	r0, r4
 800ce54:	f7ff fe6e 	bl	800cb34 <waitfor>
 800ce58:	2807      	cmp	r0, #7
 800ce5a:	e7e6      	b.n	800ce2a <MQTTPublish+0x88>
    if (rc == FAILURE)
 800ce5c:	1c43      	adds	r3, r0, #1
 800ce5e:	d1f1      	bne.n	800ce44 <MQTTPublish+0xa2>
        MQTTCloseSession(c);
 800ce60:	4620      	mov	r0, r4
 800ce62:	f7ff fcbd 	bl	800c7e0 <MQTTCloseSession>
 800ce66:	f04f 36ff 	mov.w	r6, #4294967295
    return rc;
 800ce6a:	e7eb      	b.n	800ce44 <MQTTPublish+0xa2>

0800ce6c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 800ce6c:	b513      	push	{r0, r1, r4, lr}
 800ce6e:	4604      	mov	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 800ce70:	4668      	mov	r0, sp
 800ce72:	f7f5 ff6c 	bl	8002d4e <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800ce76:	6861      	ldr	r1, [r4, #4]
 800ce78:	4668      	mov	r0, sp
 800ce7a:	f7f5 ff39 	bl	8002cf0 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 800ce7e:	68a1      	ldr	r1, [r4, #8]
 800ce80:	6920      	ldr	r0, [r4, #16]
 800ce82:	f000 f919 	bl	800d0b8 <MQTTSerialize_disconnect>
    if (len > 0)
 800ce86:	1e01      	subs	r1, r0, #0
 800ce88:	dd0a      	ble.n	800cea0 <MQTTDisconnect+0x34>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f7ff fcb2 	bl	800c7f6 <sendPacket>
 800ce92:	4601      	mov	r1, r0
    MQTTCloseSession(c);
 800ce94:	4620      	mov	r0, r4
 800ce96:	f7ff fca3 	bl	800c7e0 <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
}
 800ce9a:	4608      	mov	r0, r1
 800ce9c:	b002      	add	sp, #8
 800ce9e:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
 800cea0:	f04f 31ff 	mov.w	r1, #4294967295
 800cea4:	e7f6      	b.n	800ce94 <MQTTDisconnect+0x28>

0800cea6 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800cea6:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 2)
 800cea8:	2901      	cmp	r1, #1
{
 800ceaa:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800ceac:	9001      	str	r0, [sp, #4]
	if (buflen < 2)
 800ceae:	dd0e      	ble.n	800cece <MQTTSerialize_zero+0x28>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
 800ceb0:	0112      	lsls	r2, r2, #4
	writeChar(&ptr, header.byte); /* write header */
 800ceb2:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 800ceb6:	a801      	add	r0, sp, #4
 800ceb8:	f000 f9e8 	bl	800d28c <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800cebc:	9801      	ldr	r0, [sp, #4]
 800cebe:	2100      	movs	r1, #0
 800cec0:	f000 f97e 	bl	800d1c0 <MQTTPacket_encode>
 800cec4:	9b01      	ldr	r3, [sp, #4]
 800cec6:	4403      	add	r3, r0
	rc = ptr - buf;
 800cec8:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800ceca:	b002      	add	sp, #8
 800cecc:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cece:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800ced2:	e7fa      	b.n	800ceca <MQTTSerialize_zero+0x24>

0800ced4 <MQTTSerialize_connect>:
{
 800ced4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (options->MQTTVersion == 3)
 800ced8:	7a13      	ldrb	r3, [r2, #8]
	unsigned char *ptr = buf;
 800ceda:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 3)
 800cedc:	2b03      	cmp	r3, #3
{
 800cede:	4606      	mov	r6, r0
 800cee0:	4689      	mov	r9, r1
 800cee2:	4614      	mov	r4, r2
	if (options->MQTTVersion == 3)
 800cee4:	f000 80b5 	beq.w	800d052 <MQTTSerialize_connect+0x17e>
		len = 10;
 800cee8:	2b04      	cmp	r3, #4
 800ceea:	bf14      	ite	ne
 800ceec:	2500      	movne	r5, #0
 800ceee:	250a      	moveq	r5, #10
	len += MQTTstrlen(options->clientID)+2;
 800cef0:	f104 070c 	add.w	r7, r4, #12
 800cef4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800cef8:	f000 fa32 	bl	800d360 <MQTTstrlen>
	if (options->willFlag)
 800cefc:	7ee3      	ldrb	r3, [r4, #27]
	len += MQTTstrlen(options->clientID)+2;
 800cefe:	3002      	adds	r0, #2
 800cf00:	4405      	add	r5, r0
	if (options->willFlag)
 800cf02:	b17b      	cbz	r3, 800cf24 <MQTTSerialize_connect+0x50>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800cf04:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800cf08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf0c:	f000 fa28 	bl	800d360 <MQTTstrlen>
 800cf10:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800cf14:	4680      	mov	r8, r0
 800cf16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf1a:	f000 fa21 	bl	800d360 <MQTTstrlen>
 800cf1e:	4440      	add	r0, r8
 800cf20:	3004      	adds	r0, #4
 800cf22:	4405      	add	r5, r0
	if (options->username.cstring || options->username.lenstring.data)
 800cf24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf26:	b90b      	cbnz	r3, 800cf2c <MQTTSerialize_connect+0x58>
 800cf28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cf2a:	b13b      	cbz	r3, 800cf3c <MQTTSerialize_connect+0x68>
		len += MQTTstrlen(options->username)+2;
 800cf2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cf30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf34:	f000 fa14 	bl	800d360 <MQTTstrlen>
 800cf38:	3002      	adds	r0, #2
 800cf3a:	4405      	add	r5, r0
	if (options->password.cstring || options->password.lenstring.data)
 800cf3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cf3e:	b90b      	cbnz	r3, 800cf44 <MQTTSerialize_connect+0x70>
 800cf40:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cf42:	b13b      	cbz	r3, 800cf54 <MQTTSerialize_connect+0x80>
		len += MQTTstrlen(options->password)+2;
 800cf44:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 800cf48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf4c:	f000 fa08 	bl	800d360 <MQTTstrlen>
 800cf50:	3002      	adds	r0, #2
 800cf52:	4405      	add	r5, r0
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 f96f 	bl	800d238 <MQTTPacket_len>
 800cf5a:	4548      	cmp	r0, r9
 800cf5c:	f300 8081 	bgt.w	800d062 <MQTTSerialize_connect+0x18e>
	writeChar(&ptr, header.byte); /* write header */
 800cf60:	2110      	movs	r1, #16
 800cf62:	a801      	add	r0, sp, #4
 800cf64:	f000 f992 	bl	800d28c <writeChar>
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cf68:	4629      	mov	r1, r5
 800cf6a:	9801      	ldr	r0, [sp, #4]
 800cf6c:	f000 f928 	bl	800d1c0 <MQTTPacket_encode>
 800cf70:	9b01      	ldr	r3, [sp, #4]
	if (options->MQTTVersion == 4)
 800cf72:	7a25      	ldrb	r5, [r4, #8]
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cf74:	4418      	add	r0, r3
	if (options->MQTTVersion == 4)
 800cf76:	2d04      	cmp	r5, #4
	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800cf78:	9001      	str	r0, [sp, #4]
	if (options->MQTTVersion == 4)
 800cf7a:	d16c      	bne.n	800d056 <MQTTSerialize_connect+0x182>
		writeCString(&ptr, "MQTT");
 800cf7c:	493a      	ldr	r1, [pc, #232]	; (800d068 <MQTTSerialize_connect+0x194>)
 800cf7e:	a801      	add	r0, sp, #4
 800cf80:	f000 f99f 	bl	800d2c2 <writeCString>
		writeChar(&ptr, (char) 4);
 800cf84:	4629      	mov	r1, r5
		writeChar(&ptr, (char) 3);
 800cf86:	a801      	add	r0, sp, #4
 800cf88:	f000 f980 	bl	800d28c <writeChar>
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cf8c:	7ee3      	ldrb	r3, [r4, #27]
 800cf8e:	1e1a      	subs	r2, r3, #0
	flags.bits.cleansession = options->cleansession;
 800cf90:	7ea3      	ldrb	r3, [r4, #26]
	flags.all = 0;
 800cf92:	f04f 0100 	mov.w	r1, #0
	flags.bits.cleansession = options->cleansession;
 800cf96:	ea4f 0343 	mov.w	r3, r3, lsl #1
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800cf9a:	bf18      	it	ne
 800cf9c:	2201      	movne	r2, #1
	flags.all = 0;
 800cf9e:	f36f 0107 	bfc	r1, #0, #8
	flags.bits.cleansession = options->cleansession;
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800cfaa:	f021 0206 	bic.w	r2, r1, #6
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	f363 0107 	bfi	r1, r3, #0, #8
	if (flags.bits.will)
 800cfb4:	0748      	lsls	r0, r1, #29
 800cfb6:	d50f      	bpl.n	800cfd8 <MQTTSerialize_connect+0x104>
		flags.bits.willQoS = options->will.qos;
 800cfb8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800cfbc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800cfc0:	015b      	lsls	r3, r3, #5
 800cfc2:	00d2      	lsls	r2, r2, #3
 800cfc4:	f002 0218 	and.w	r2, r2, #24
 800cfc8:	f003 0320 	and.w	r3, r3, #32
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	f021 0238 	bic.w	r2, r1, #56	; 0x38
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	f363 0107 	bfi	r1, r3, #0, #8
	if (options->username.cstring || options->username.lenstring.data)
 800cfd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfda:	b90b      	cbnz	r3, 800cfe0 <MQTTSerialize_connect+0x10c>
 800cfdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800cfde:	b10b      	cbz	r3, 800cfe4 <MQTTSerialize_connect+0x110>
		flags.bits.username = 1;
 800cfe0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	if (options->password.cstring || options->password.lenstring.data)
 800cfe4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800cfe6:	b90b      	cbnz	r3, 800cfec <MQTTSerialize_connect+0x118>
 800cfe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800cfea:	b10b      	cbz	r3, 800cff0 <MQTTSerialize_connect+0x11c>
		flags.bits.password = 1;
 800cfec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	writeChar(&ptr, flags.all);
 800cff0:	b2cd      	uxtb	r5, r1
 800cff2:	4629      	mov	r1, r5
 800cff4:	a801      	add	r0, sp, #4
 800cff6:	f000 f949 	bl	800d28c <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800cffa:	8b21      	ldrh	r1, [r4, #24]
 800cffc:	a801      	add	r0, sp, #4
 800cffe:	f000 f94b 	bl	800d298 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800d002:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d006:	a801      	add	r0, sp, #4
 800d008:	f000 f96f 	bl	800d2ea <writeMQTTString>
	if (options->willFlag)
 800d00c:	7ee3      	ldrb	r3, [r4, #27]
 800d00e:	b15b      	cbz	r3, 800d028 <MQTTSerialize_connect+0x154>
		writeMQTTString(&ptr, options->will.topicName);
 800d010:	f104 0324 	add.w	r3, r4, #36	; 0x24
 800d014:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d016:	a801      	add	r0, sp, #4
 800d018:	f000 f967 	bl	800d2ea <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800d01c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800d020:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d022:	a801      	add	r0, sp, #4
 800d024:	f000 f961 	bl	800d2ea <writeMQTTString>
	if (flags.bits.username)
 800d028:	062a      	lsls	r2, r5, #24
 800d02a:	d505      	bpl.n	800d038 <MQTTSerialize_connect+0x164>
		writeMQTTString(&ptr, options->username);
 800d02c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d030:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d032:	a801      	add	r0, sp, #4
 800d034:	f000 f959 	bl	800d2ea <writeMQTTString>
	if (flags.bits.password)
 800d038:	066b      	lsls	r3, r5, #25
 800d03a:	d505      	bpl.n	800d048 <MQTTSerialize_connect+0x174>
		writeMQTTString(&ptr, options->password);
 800d03c:	344c      	adds	r4, #76	; 0x4c
 800d03e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d042:	a801      	add	r0, sp, #4
 800d044:	f000 f951 	bl	800d2ea <writeMQTTString>
	rc = ptr - buf;
 800d048:	9801      	ldr	r0, [sp, #4]
 800d04a:	1b80      	subs	r0, r0, r6
}
 800d04c:	b003      	add	sp, #12
 800d04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		len = 12; /* variable depending on MQTT or MQIsdp */
 800d052:	250c      	movs	r5, #12
 800d054:	e74c      	b.n	800cef0 <MQTTSerialize_connect+0x1c>
		writeCString(&ptr, "MQIsdp");
 800d056:	4905      	ldr	r1, [pc, #20]	; (800d06c <MQTTSerialize_connect+0x198>)
 800d058:	a801      	add	r0, sp, #4
 800d05a:	f000 f932 	bl	800d2c2 <writeCString>
		writeChar(&ptr, (char) 3);
 800d05e:	2103      	movs	r1, #3
 800d060:	e791      	b.n	800cf86 <MQTTSerialize_connect+0xb2>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d062:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d066:	e7f1      	b.n	800d04c <MQTTSerialize_connect+0x178>
 800d068:	0802ffc6 	.word	0x0802ffc6
 800d06c:	0802ffcb 	.word	0x0802ffcb

0800d070 <MQTTDeserialize_connack>:
{
 800d070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d072:	4605      	mov	r5, r0
	header.byte = readChar(&curdata);
 800d074:	4668      	mov	r0, sp
{
 800d076:	460c      	mov	r4, r1
	unsigned char* curdata = buf;
 800d078:	9200      	str	r2, [sp, #0]
	header.byte = readChar(&curdata);
 800d07a:	f000 f901 	bl	800d280 <readChar>
	if (header.bits.type != CONNACK)
 800d07e:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d082:	2820      	cmp	r0, #32
 800d084:	d116      	bne.n	800d0b4 <MQTTDeserialize_connack+0x44>
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d086:	9800      	ldr	r0, [sp, #0]
 800d088:	a901      	add	r1, sp, #4
 800d08a:	f000 f8e7 	bl	800d25c <MQTTPacket_decodeBuf>
 800d08e:	9b00      	ldr	r3, [sp, #0]
 800d090:	4403      	add	r3, r0
 800d092:	9300      	str	r3, [sp, #0]
	if (enddata - curdata < 2)
 800d094:	9b01      	ldr	r3, [sp, #4]
 800d096:	2b01      	cmp	r3, #1
 800d098:	dd0a      	ble.n	800d0b0 <MQTTDeserialize_connack+0x40>
	flags.all = readChar(&curdata);
 800d09a:	4668      	mov	r0, sp
 800d09c:	f000 f8f0 	bl	800d280 <readChar>
	*sessionPresent = flags.bits.sessionpresent;
 800d0a0:	f000 0001 	and.w	r0, r0, #1
 800d0a4:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
 800d0a6:	4668      	mov	r0, sp
 800d0a8:	f000 f8ea 	bl	800d280 <readChar>
 800d0ac:	7020      	strb	r0, [r4, #0]
	rc = 1;
 800d0ae:	2001      	movs	r0, #1
}
 800d0b0:	b003      	add	sp, #12
 800d0b2:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
 800d0b4:	2000      	movs	r0, #0
	return rc;
 800d0b6:	e7fb      	b.n	800d0b0 <MQTTDeserialize_connack+0x40>

0800d0b8 <MQTTSerialize_disconnect>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 800d0b8:	220e      	movs	r2, #14
 800d0ba:	f7ff bef4 	b.w	800cea6 <MQTTSerialize_zero>

0800d0be <MQTTSerialize_pingreq>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800d0be:	220c      	movs	r2, #12
 800d0c0:	f7ff bef1 	b.w	800cea6 <MQTTSerialize_zero>

0800d0c4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800d0c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
 800d0c8:	2500      	movs	r5, #0
{
 800d0ca:	4681      	mov	r9, r0
 800d0cc:	461f      	mov	r7, r3

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d0ce:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800d0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0d2:	9300      	str	r3, [sp, #0]
{
 800d0d4:	460e      	mov	r6, r1
 800d0d6:	4690      	mov	r8, r2
	int mylen = 0;
 800d0d8:	9501      	str	r5, [sp, #4]
	header.byte = readChar(&curdata);
 800d0da:	f000 f8d1 	bl	800d280 <readChar>
	if (header.bits.type != PUBLISH)
 800d0de:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	header.byte = readChar(&curdata);
 800d0e2:	462c      	mov	r4, r5
	if (header.bits.type != PUBLISH)
 800d0e4:	2b30      	cmp	r3, #48	; 0x30
	header.byte = readChar(&curdata);
 800d0e6:	f360 0407 	bfi	r4, r0, #0, #8
	if (header.bits.type != PUBLISH)
 800d0ea:	d12c      	bne.n	800d146 <MQTTDeserialize_publish+0x82>
		goto exit;
	*dup = header.bits.dup;
 800d0ec:	f3c4 03c0 	ubfx	r3, r4, #3, #1
 800d0f0:	f889 3000 	strb.w	r3, [r9]
	*qos = header.bits.qos;
 800d0f4:	f3c4 0341 	ubfx	r3, r4, #1, #2
	*retained = header.bits.retain;
 800d0f8:	f3c4 0400 	ubfx	r4, r4, #0, #1
	*qos = header.bits.qos;
 800d0fc:	6033      	str	r3, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d0fe:	a901      	add	r1, sp, #4
	*retained = header.bits.retain;
 800d100:	f888 4000 	strb.w	r4, [r8]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d104:	9800      	ldr	r0, [sp, #0]
 800d106:	f000 f8a9 	bl	800d25c <MQTTPacket_decodeBuf>
 800d10a:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800d10c:	9a01      	ldr	r2, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d10e:	4404      	add	r4, r0
 800d110:	9400      	str	r4, [sp, #0]
	enddata = curdata + mylen;
 800d112:	4414      	add	r4, r2
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d114:	4605      	mov	r5, r0

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d116:	4622      	mov	r2, r4
 800d118:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d11a:	4669      	mov	r1, sp
 800d11c:	f000 f907 	bl	800d32e <readMQTTLenString>
 800d120:	b188      	cbz	r0, 800d146 <MQTTDeserialize_publish+0x82>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800d122:	9b00      	ldr	r3, [sp, #0]
 800d124:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800d126:	2b00      	cmp	r3, #0
 800d128:	db0d      	blt.n	800d146 <MQTTDeserialize_publish+0x82>
		goto exit;

	if (*qos > 0)
 800d12a:	6833      	ldr	r3, [r6, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dd03      	ble.n	800d138 <MQTTDeserialize_publish+0x74>
		*packetid = readInt(&curdata);
 800d130:	4668      	mov	r0, sp
 800d132:	f000 f89d 	bl	800d270 <readInt>
 800d136:	8038      	strh	r0, [r7, #0]

	*payloadlen = enddata - curdata;
 800d138:	9b00      	ldr	r3, [sp, #0]
 800d13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d13c:	1ae4      	subs	r4, r4, r3
 800d13e:	6014      	str	r4, [r2, #0]
	*payload = curdata;
 800d140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	rc = 1;
 800d142:	2501      	movs	r5, #1
	*payload = curdata;
 800d144:	6013      	str	r3, [r2, #0]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d146:	4628      	mov	r0, r5
 800d148:	b003      	add	sp, #12
 800d14a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d14e <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800d14e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d150:	4605      	mov	r5, r0
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d152:	4668      	mov	r0, sp
{
 800d154:	460e      	mov	r6, r1
 800d156:	4614      	mov	r4, r2
	unsigned char* curdata = buf;
 800d158:	9300      	str	r3, [sp, #0]
	header.byte = readChar(&curdata);
 800d15a:	f000 f891 	bl	800d280 <readChar>
 800d15e:	2300      	movs	r3, #0
 800d160:	f360 0307 	bfi	r3, r0, #0, #8
	*dup = header.bits.dup;
 800d164:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	*packettype = header.bits.type;
 800d168:	f3c3 1303 	ubfx	r3, r3, #4, #4
	*dup = header.bits.dup;
 800d16c:	7032      	strb	r2, [r6, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d16e:	9800      	ldr	r0, [sp, #0]
	*packettype = header.bits.type;
 800d170:	702b      	strb	r3, [r5, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d172:	a901      	add	r1, sp, #4
 800d174:	f000 f872 	bl	800d25c <MQTTPacket_decodeBuf>
 800d178:	9b00      	ldr	r3, [sp, #0]
 800d17a:	4403      	add	r3, r0
 800d17c:	9300      	str	r3, [sp, #0]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	2b01      	cmp	r3, #1
 800d182:	dd04      	ble.n	800d18e <MQTTDeserialize_ack+0x40>
		goto exit;
	*packetid = readInt(&curdata);
 800d184:	4668      	mov	r0, sp
 800d186:	f000 f873 	bl	800d270 <readInt>
 800d18a:	8020      	strh	r0, [r4, #0]

	rc = 1;
 800d18c:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d18e:	b002      	add	sp, #8
 800d190:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d194 <bufchar>:

int bufchar(unsigned char* c, int count)
{
	int i;

	for (i = 0; i < count; ++i)
 800d194:	4b09      	ldr	r3, [pc, #36]	; (800d1bc <bufchar+0x28>)
{
 800d196:	b530      	push	{r4, r5, lr}
 800d198:	681a      	ldr	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800d19a:	2500      	movs	r5, #0
 800d19c:	462c      	mov	r4, r5
 800d19e:	428c      	cmp	r4, r1
 800d1a0:	db06      	blt.n	800d1b0 <bufchar+0x1c>
 800d1a2:	2900      	cmp	r1, #0
 800d1a4:	bfa8      	it	ge
 800d1a6:	1852      	addge	r2, r2, r1
 800d1a8:	b105      	cbz	r5, 800d1ac <bufchar+0x18>
 800d1aa:	601a      	str	r2, [r3, #0]
		*c = *bufptr++;
	return count;
}
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	bd30      	pop	{r4, r5, pc}
		*c = *bufptr++;
 800d1b0:	5d15      	ldrb	r5, [r2, r4]
 800d1b2:	7005      	strb	r5, [r0, #0]
	for (i = 0; i < count; ++i)
 800d1b4:	3401      	adds	r4, #1
 800d1b6:	2501      	movs	r5, #1
 800d1b8:	e7f1      	b.n	800d19e <bufchar+0xa>
 800d1ba:	bf00      	nop
 800d1bc:	200010bc 	.word	0x200010bc

0800d1c0 <MQTTPacket_encode>:
{
 800d1c0:	b530      	push	{r4, r5, lr}
 800d1c2:	f1c0 0202 	rsb	r2, r0, #2
 800d1c6:	1e45      	subs	r5, r0, #1
		char d = length % 128;
 800d1c8:	4248      	negs	r0, r1
 800d1ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800d1ce:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800d1d2:	460c      	mov	r4, r1
 800d1d4:	bf58      	it	pl
 800d1d6:	4243      	negpl	r3, r0
		length /= 128;
 800d1d8:	2900      	cmp	r1, #0
		char d = length % 128;
 800d1da:	b2db      	uxtb	r3, r3
		length /= 128;
 800d1dc:	bfb8      	it	lt
 800d1de:	317f      	addlt	r1, #127	; 0x7f
		if (length > 0)
 800d1e0:	2c7f      	cmp	r4, #127	; 0x7f
			d |= 0x80;
 800d1e2:	bfc8      	it	gt
 800d1e4:	f043 0380 	orrgt.w	r3, r3, #128	; 0x80
	} while (length > 0);
 800d1e8:	2c7f      	cmp	r4, #127	; 0x7f
 800d1ea:	eb02 0005 	add.w	r0, r2, r5
		length /= 128;
 800d1ee:	ea4f 11e1 	mov.w	r1, r1, asr #7
		buf[rc++] = d;
 800d1f2:	f805 3f01 	strb.w	r3, [r5, #1]!
	} while (length > 0);
 800d1f6:	dce7      	bgt.n	800d1c8 <MQTTPacket_encode+0x8>
}
 800d1f8:	bd30      	pop	{r4, r5, pc}

0800d1fa <MQTTPacket_decode>:
{
 800d1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	*value = 0;
 800d1fc:	2400      	movs	r4, #0
{
 800d1fe:	4607      	mov	r7, r0
 800d200:	460d      	mov	r5, r1
	*value = 0;
 800d202:	600c      	str	r4, [r1, #0]
	int multiplier = 1;
 800d204:	2601      	movs	r6, #1
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800d206:	3401      	adds	r4, #1
 800d208:	2c05      	cmp	r4, #5
 800d20a:	d011      	beq.n	800d230 <MQTTPacket_decode+0x36>
		rc = (*getcharfn)(&c, 1);
 800d20c:	2101      	movs	r1, #1
 800d20e:	f10d 0007 	add.w	r0, sp, #7
 800d212:	47b8      	blx	r7
		if (rc != 1)
 800d214:	2801      	cmp	r0, #1
 800d216:	d10b      	bne.n	800d230 <MQTTPacket_decode+0x36>
		*value += (c & 127) * multiplier;
 800d218:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d21c:	6829      	ldr	r1, [r5, #0]
 800d21e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800d222:	fb06 1303 	mla	r3, r6, r3, r1
 800d226:	602b      	str	r3, [r5, #0]
	} while ((c & 128) != 0);
 800d228:	0613      	lsls	r3, r2, #24
		multiplier *= 128;
 800d22a:	ea4f 16c6 	mov.w	r6, r6, lsl #7
	} while ((c & 128) != 0);
 800d22e:	d4ea      	bmi.n	800d206 <MQTTPacket_decode+0xc>
}
 800d230:	4620      	mov	r0, r4
 800d232:	b003      	add	sp, #12
 800d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800d238 <MQTTPacket_len>:
	rem_len += 1; /* header byte */
 800d238:	1c43      	adds	r3, r0, #1
	if (rem_len < 128)
 800d23a:	2b7f      	cmp	r3, #127	; 0x7f
 800d23c:	dc01      	bgt.n	800d242 <MQTTPacket_len+0xa>
		rem_len += 1;
 800d23e:	3002      	adds	r0, #2
 800d240:	4770      	bx	lr
	else if (rem_len < 16384)
 800d242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d246:	da01      	bge.n	800d24c <MQTTPacket_len+0x14>
		rem_len += 2;
 800d248:	3003      	adds	r0, #3
 800d24a:	4770      	bx	lr
	else if (rem_len < 2097151)
 800d24c:	4a02      	ldr	r2, [pc, #8]	; (800d258 <MQTTPacket_len+0x20>)
 800d24e:	4293      	cmp	r3, r2
		rem_len += 3;
 800d250:	bfd4      	ite	le
 800d252:	3004      	addle	r0, #4
		rem_len += 4;
 800d254:	3005      	addgt	r0, #5
}
 800d256:	4770      	bx	lr
 800d258:	001ffffe 	.word	0x001ffffe

0800d25c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
	bufptr = buf;
 800d25c:	4b02      	ldr	r3, [pc, #8]	; (800d268 <MQTTPacket_decodeBuf+0xc>)
 800d25e:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
 800d260:	4802      	ldr	r0, [pc, #8]	; (800d26c <MQTTPacket_decodeBuf+0x10>)
 800d262:	f7ff bfca 	b.w	800d1fa <MQTTPacket_decode>
 800d266:	bf00      	nop
 800d268:	200010bc 	.word	0x200010bc
 800d26c:	0800d195 	.word	0x0800d195

0800d270 <readInt>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
	unsigned char* ptr = *pptr;
 800d270:	6803      	ldr	r3, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
 800d272:	7819      	ldrb	r1, [r3, #0]
 800d274:	785a      	ldrb	r2, [r3, #1]
	*pptr += 2;
 800d276:	3302      	adds	r3, #2
 800d278:	6003      	str	r3, [r0, #0]
	return len;
}
 800d27a:	eb02 2001 	add.w	r0, r2, r1, lsl #8
 800d27e:	4770      	bx	lr

0800d280 <readChar>:
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
	char c = **pptr;
 800d280:	6802      	ldr	r2, [r0, #0]
{
 800d282:	4603      	mov	r3, r0
	char c = **pptr;
 800d284:	f812 0b01 	ldrb.w	r0, [r2], #1
	(*pptr)++;
 800d288:	601a      	str	r2, [r3, #0]
	return c;
}
 800d28a:	4770      	bx	lr

0800d28c <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
 800d28c:	6803      	ldr	r3, [r0, #0]
 800d28e:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
 800d290:	6803      	ldr	r3, [r0, #0]
 800d292:	3301      	adds	r3, #1
 800d294:	6003      	str	r3, [r0, #0]
}
 800d296:	4770      	bx	lr

0800d298 <writeInt>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
	**pptr = (unsigned char)(anInt / 256);
 800d298:	2900      	cmp	r1, #0
 800d29a:	6802      	ldr	r2, [r0, #0]
 800d29c:	460b      	mov	r3, r1
 800d29e:	bfb8      	it	lt
 800d2a0:	f101 03ff 	addlt.w	r3, r1, #255	; 0xff
 800d2a4:	121b      	asrs	r3, r3, #8
 800d2a6:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800d2a8:	6802      	ldr	r2, [r0, #0]
 800d2aa:	1c53      	adds	r3, r2, #1
 800d2ac:	6003      	str	r3, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
 800d2ae:	424b      	negs	r3, r1
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	b2c9      	uxtb	r1, r1
 800d2b4:	bf58      	it	pl
 800d2b6:	4259      	negpl	r1, r3
 800d2b8:	7051      	strb	r1, [r2, #1]
	(*pptr)++;
 800d2ba:	6803      	ldr	r3, [r0, #0]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	6003      	str	r3, [r0, #0]
}
 800d2c0:	4770      	bx	lr

0800d2c2 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800d2c2:	b570      	push	{r4, r5, r6, lr}
 800d2c4:	4604      	mov	r4, r0
	int len = strlen(string);
 800d2c6:	4608      	mov	r0, r1
{
 800d2c8:	460e      	mov	r6, r1
	int len = strlen(string);
 800d2ca:	f7f2 ff8b 	bl	80001e4 <strlen>
 800d2ce:	4605      	mov	r5, r0
	writeInt(pptr, len);
 800d2d0:	4601      	mov	r1, r0
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f7ff ffe0 	bl	800d298 <writeInt>
	memcpy(*pptr, string, len);
 800d2d8:	6820      	ldr	r0, [r4, #0]
 800d2da:	462a      	mov	r2, r5
 800d2dc:	4631      	mov	r1, r6
 800d2de:	f015 f883 	bl	80223e8 <memcpy>
	*pptr += len;
 800d2e2:	6820      	ldr	r0, [r4, #0]
 800d2e4:	4428      	add	r0, r5
 800d2e6:	6020      	str	r0, [r4, #0]
}
 800d2e8:	bd70      	pop	{r4, r5, r6, pc}

0800d2ea <writeMQTTString>:


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800d2ea:	b530      	push	{r4, r5, lr}
 800d2ec:	b085      	sub	sp, #20
 800d2ee:	ad04      	add	r5, sp, #16
 800d2f0:	e905 000e 	stmdb	r5, {r1, r2, r3}
 800d2f4:	9d02      	ldr	r5, [sp, #8]
	if (mqttstring.lenstring.len > 0)
 800d2f6:	2d00      	cmp	r5, #0
{
 800d2f8:	4604      	mov	r4, r0
	if (mqttstring.lenstring.len > 0)
 800d2fa:	dd0c      	ble.n	800d316 <writeMQTTString+0x2c>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800d2fc:	4629      	mov	r1, r5
 800d2fe:	f7ff ffcb 	bl	800d298 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800d302:	462a      	mov	r2, r5
 800d304:	9903      	ldr	r1, [sp, #12]
 800d306:	6800      	ldr	r0, [r0, #0]
 800d308:	f015 f86e 	bl	80223e8 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800d30c:	6822      	ldr	r2, [r4, #0]
 800d30e:	442a      	add	r2, r5
 800d310:	6022      	str	r2, [r4, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800d312:	b005      	add	sp, #20
 800d314:	bd30      	pop	{r4, r5, pc}
 800d316:	9901      	ldr	r1, [sp, #4]
	else if (mqttstring.cstring)
 800d318:	b121      	cbz	r1, 800d324 <writeMQTTString+0x3a>
}
 800d31a:	b005      	add	sp, #20
 800d31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeCString(pptr, mqttstring.cstring);
 800d320:	f7ff bfcf 	b.w	800d2c2 <writeCString>
}
 800d324:	b005      	add	sp, #20
 800d326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		writeInt(pptr, 0);
 800d32a:	f7ff bfb5 	b.w	800d298 <writeInt>

0800d32e <readMQTTLenString>:
{
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d32e:	680b      	ldr	r3, [r1, #0]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	2b01      	cmp	r3, #1
{
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	4605      	mov	r5, r0
 800d338:	460c      	mov	r4, r1
 800d33a:	4616      	mov	r6, r2
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800d33c:	dc03      	bgt.n	800d346 <readMQTTLenString+0x18>
	int rc = 0;
 800d33e:	2000      	movs	r0, #0
			mqttstring->lenstring.data = (char*)*pptr;
			*pptr += mqttstring->lenstring.len;
			rc = 1;
		}
	}
	mqttstring->cstring = NULL;
 800d340:	2300      	movs	r3, #0
 800d342:	602b      	str	r3, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d344:	bd70      	pop	{r4, r5, r6, pc}
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d346:	4608      	mov	r0, r1
 800d348:	f7ff ff92 	bl	800d270 <readInt>
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d34c:	6822      	ldr	r2, [r4, #0]
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800d34e:	6068      	str	r0, [r5, #4]
 800d350:	4603      	mov	r3, r0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800d352:	4413      	add	r3, r2
 800d354:	42b3      	cmp	r3, r6
 800d356:	d8f2      	bhi.n	800d33e <readMQTTLenString+0x10>
			mqttstring->lenstring.data = (char*)*pptr;
 800d358:	60aa      	str	r2, [r5, #8]
			rc = 1;
 800d35a:	2001      	movs	r0, #1
			*pptr += mqttstring->lenstring.len;
 800d35c:	6023      	str	r3, [r4, #0]
			rc = 1;
 800d35e:	e7ef      	b.n	800d340 <readMQTTLenString+0x12>

0800d360 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800d360:	b084      	sub	sp, #16
 800d362:	ab04      	add	r3, sp, #16
 800d364:	e903 0007 	stmdb	r3, {r0, r1, r2}
 800d368:	9801      	ldr	r0, [sp, #4]
	int rc = 0;

	if (mqttstring.cstring)
 800d36a:	b110      	cbz	r0, 800d372 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
 800d36c:	b004      	add	sp, #16
		rc = strlen(mqttstring.cstring);
 800d36e:	f7f2 bf39 	b.w	80001e4 <strlen>
}
 800d372:	9802      	ldr	r0, [sp, #8]
 800d374:	b004      	add	sp, #16
 800d376:	4770      	bx	lr

0800d378 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800d378:	b570      	push	{r4, r5, r6, lr}
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
 800d37a:	6805      	ldr	r5, [r0, #0]
{
 800d37c:	460e      	mov	r6, r1
	if (a->cstring)
 800d37e:	b18d      	cbz	r5, 800d3a4 <MQTTPacket_equals+0x2c>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
 800d380:	4628      	mov	r0, r5
 800d382:	f7f2 ff2f 	bl	80001e4 <strlen>
 800d386:	4604      	mov	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
 800d388:	4630      	mov	r0, r6
 800d38a:	f7f2 ff2b 	bl	80001e4 <strlen>
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d38e:	4284      	cmp	r4, r0
 800d390:	d10b      	bne.n	800d3aa <MQTTPacket_equals+0x32>
 800d392:	4622      	mov	r2, r4
 800d394:	4631      	mov	r1, r6
 800d396:	4628      	mov	r0, r5
 800d398:	f016 fb16 	bl	80239c8 <strncmp>
 800d39c:	fab0 f080 	clz	r0, r0
 800d3a0:	0940      	lsrs	r0, r0, #5
}
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
		alen = a->lenstring.len;
 800d3a4:	e9d0 4501 	ldrd	r4, r5, [r0, #4]
 800d3a8:	e7ee      	b.n	800d388 <MQTTPacket_equals+0x10>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	e7f9      	b.n	800d3a2 <MQTTPacket_equals+0x2a>

0800d3ae <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800d3ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b2:	af0e      	add	r7, sp, #56	; 0x38
 800d3b4:	460e      	mov	r6, r1
	unsigned char *ptr = buf;
 800d3b6:	9000      	str	r0, [sp, #0]
{
 800d3b8:	4681      	mov	r9, r0
 800d3ba:	4615      	mov	r5, r2
 800d3bc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800d3c0:	4698      	mov	r8, r3
 800d3c2:	ab01      	add	r3, sp, #4
 800d3c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d3c8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d3cc:	f7ff ffc8 	bl	800d360 <MQTTstrlen>
 800d3d0:	3002      	adds	r0, #2
	if (qos > 0)
 800d3d2:	f1b8 0f00 	cmp.w	r8, #0
	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800d3d6:	eb00 040a 	add.w	r4, r0, sl
		len += 2; /* packetid */
 800d3da:	bfc8      	it	gt
 800d3dc:	3402      	addgt	r4, #2
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f7ff ff2a 	bl	800d238 <MQTTPacket_len>
 800d3e4:	42b0      	cmp	r0, r6
 800d3e6:	dc30      	bgt.n	800d44a <MQTTSerialize_publish+0x9c>
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
	header.bits.qos = qos;
	header.bits.retain = retained;
 800d3e8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 800d3ec:	f006 0601 	and.w	r6, r6, #1
 800d3f0:	f008 0103 	and.w	r1, r8, #3
 800d3f4:	f046 0630 	orr.w	r6, r6, #48	; 0x30
 800d3f8:	ea46 0641 	orr.w	r6, r6, r1, lsl #1
 800d3fc:	00e9      	lsls	r1, r5, #3
 800d3fe:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 800d402:	4331      	orrs	r1, r6
 800d404:	4668      	mov	r0, sp
 800d406:	f7ff ff41 	bl	800d28c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d40a:	4621      	mov	r1, r4
 800d40c:	9800      	ldr	r0, [sp, #0]
 800d40e:	f7ff fed7 	bl	800d1c0 <MQTTPacket_encode>
 800d412:	9b00      	ldr	r3, [sp, #0]
 800d414:	4418      	add	r0, r3
 800d416:	9000      	str	r0, [sp, #0]

	writeMQTTString(&ptr, topicName);
 800d418:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800d41c:	4668      	mov	r0, sp
 800d41e:	f7ff ff64 	bl	800d2ea <writeMQTTString>

	if (qos > 0)
 800d422:	f1b8 0f00 	cmp.w	r8, #0
 800d426:	dd04      	ble.n	800d432 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
 800d428:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 800d42c:	4668      	mov	r0, sp
 800d42e:	f7ff ff33 	bl	800d298 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800d432:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d434:	9800      	ldr	r0, [sp, #0]
 800d436:	4652      	mov	r2, sl
 800d438:	f014 ffd6 	bl	80223e8 <memcpy>
	ptr += payloadlen;
 800d43c:	9800      	ldr	r0, [sp, #0]
 800d43e:	4450      	add	r0, sl

	rc = ptr - buf;
 800d440:	eba0 0009 	sub.w	r0, r0, r9

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d444:	b004      	add	sp, #16
 800d446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d44a:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d44e:	e7f9      	b.n	800d444 <MQTTSerialize_publish+0x96>

0800d450 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800d450:	b513      	push	{r0, r1, r4, lr}
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;

	FUNC_ENTRY;
	if (buflen < 4)
 800d452:	2903      	cmp	r1, #3
{
 800d454:	4604      	mov	r4, r0
	unsigned char *ptr = buf;
 800d456:	9001      	str	r0, [sp, #4]
	if (buflen < 4)
 800d458:	dd1e      	ble.n	800d498 <MQTTSerialize_ack+0x48>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
	header.bits.dup = dup;
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800d45a:	1f90      	subs	r0, r2, #6
 800d45c:	00d9      	lsls	r1, r3, #3
 800d45e:	4243      	negs	r3, r0
 800d460:	4143      	adcs	r3, r0
 800d462:	f001 0108 	and.w	r1, r1, #8
 800d466:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
 800d46a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
	writeChar(&ptr, header.byte); /* write header */
 800d46e:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
 800d472:	a801      	add	r0, sp, #4
 800d474:	f7ff ff0a 	bl	800d28c <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d478:	2102      	movs	r1, #2
 800d47a:	9801      	ldr	r0, [sp, #4]
 800d47c:	f7ff fea0 	bl	800d1c0 <MQTTPacket_encode>
 800d480:	9b01      	ldr	r3, [sp, #4]
	writeInt(&ptr, packetid);
 800d482:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800d486:	4418      	add	r0, r3
 800d488:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
 800d48a:	a801      	add	r0, sp, #4
 800d48c:	f7ff ff04 	bl	800d298 <writeInt>
	rc = ptr - buf;
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d494:	b002      	add	sp, #8
 800d496:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d498:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d49c:	e7fa      	b.n	800d494 <MQTTSerialize_ack+0x44>

0800d49e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800d49e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	unsigned char *ptr = buf;
 800d4a6:	9001      	str	r0, [sp, #4]
{
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	4689      	mov	r9, r1
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	4698      	mov	r8, r3
	int len = 2; /* packetid */
 800d4b0:	2602      	movs	r6, #2
	for (i = 0; i < count; ++i)
 800d4b2:	2700      	movs	r7, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d4b4:	f04f 0a0c 	mov.w	sl, #12
	for (i = 0; i < count; ++i)
 800d4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4ba:	42bb      	cmp	r3, r7
 800d4bc:	dc21      	bgt.n	800d502 <MQTTSerialize_subscribe+0x64>
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff feba 	bl	800d238 <MQTTPacket_len>
 800d4c4:	4548      	cmp	r0, r9
 800d4c6:	dc33      	bgt.n	800d530 <MQTTSerialize_subscribe+0x92>
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
	header.bits.qos = 1;
 800d4c8:	00e1      	lsls	r1, r4, #3
 800d4ca:	f001 0108 	and.w	r1, r1, #8
	writeChar(&ptr, header.byte); /* write header */
 800d4ce:	f041 0182 	orr.w	r1, r1, #130	; 0x82
 800d4d2:	a801      	add	r0, sp, #4
 800d4d4:	f7ff feda 	bl	800d28c <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800d4d8:	4631      	mov	r1, r6
 800d4da:	9801      	ldr	r0, [sp, #4]
 800d4dc:	f7ff fe70 	bl	800d1c0 <MQTTPacket_encode>
 800d4e0:	9b01      	ldr	r3, [sp, #4]
 800d4e2:	4418      	add	r0, r3
 800d4e4:	9001      	str	r0, [sp, #4]

	writeInt(&ptr, packetid);
 800d4e6:	4641      	mov	r1, r8
 800d4e8:	a801      	add	r0, sp, #4
 800d4ea:	f7ff fed5 	bl	800d298 <writeInt>

	for (i = 0; i < count; ++i)
 800d4ee:	2400      	movs	r4, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800d4f0:	260c      	movs	r6, #12
	for (i = 0; i < count; ++i)
 800d4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4f4:	429c      	cmp	r4, r3
 800d4f6:	db0d      	blt.n	800d514 <MQTTSerialize_subscribe+0x76>
		writeChar(&ptr, requestedQoSs[i]);
	}

	rc = ptr - buf;
 800d4f8:	9801      	ldr	r0, [sp, #4]
 800d4fa:	1b40      	subs	r0, r0, r5
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d4fc:	b003      	add	sp, #12
 800d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800d502:	fb0a b207 	mla	r2, sl, r7, fp
 800d506:	ca07      	ldmia	r2, {r0, r1, r2}
 800d508:	f7ff ff2a 	bl	800d360 <MQTTstrlen>
 800d50c:	3003      	adds	r0, #3
 800d50e:	4406      	add	r6, r0
	for (i = 0; i < count; ++i)
 800d510:	3701      	adds	r7, #1
 800d512:	e7d1      	b.n	800d4b8 <MQTTSerialize_subscribe+0x1a>
		writeMQTTString(&ptr, topicFilters[i]);
 800d514:	fb06 b304 	mla	r3, r6, r4, fp
 800d518:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d51a:	a801      	add	r0, sp, #4
 800d51c:	f7ff fee5 	bl	800d2ea <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800d520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d522:	a801      	add	r0, sp, #4
 800d524:	f813 1024 	ldrb.w	r1, [r3, r4, lsl #2]
 800d528:	f7ff feb0 	bl	800d28c <writeChar>
	for (i = 0; i < count; ++i)
 800d52c:	3401      	adds	r4, #1
 800d52e:	e7e0      	b.n	800d4f2 <MQTTSerialize_subscribe+0x54>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800d530:	f06f 0001 	mvn.w	r0, #1
	return rc;
 800d534:	e7e2      	b.n	800d4fc <MQTTSerialize_subscribe+0x5e>

0800d536 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800d536:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d53a:	4680      	mov	r8, r0
 800d53c:	461f      	mov	r7, r3
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d53e:	4668      	mov	r0, sp
	unsigned char* curdata = buf;
 800d540:	9b08      	ldr	r3, [sp, #32]
 800d542:	9300      	str	r3, [sp, #0]
{
 800d544:	460e      	mov	r6, r1
 800d546:	4615      	mov	r5, r2
	header.byte = readChar(&curdata);
 800d548:	f7ff fe9a 	bl	800d280 <readChar>
	if (header.bits.type != SUBACK)
 800d54c:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800d550:	2890      	cmp	r0, #144	; 0x90
 800d552:	d124      	bne.n	800d59e <MQTTDeserialize_suback+0x68>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d554:	9800      	ldr	r0, [sp, #0]
 800d556:	a901      	add	r1, sp, #4
 800d558:	f7ff fe80 	bl	800d25c <MQTTPacket_decodeBuf>
 800d55c:	9c00      	ldr	r4, [sp, #0]
	enddata = curdata + mylen;
 800d55e:	9b01      	ldr	r3, [sp, #4]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d560:	4404      	add	r4, r0
	if (enddata - curdata < 2)
 800d562:	2b01      	cmp	r3, #1
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d564:	9400      	str	r4, [sp, #0]
	if (enddata - curdata < 2)
 800d566:	dd0b      	ble.n	800d580 <MQTTDeserialize_suback+0x4a>
		goto exit;

	*packetid = readInt(&curdata);
 800d568:	4668      	mov	r0, sp
	enddata = curdata + mylen;
 800d56a:	441c      	add	r4, r3
	*packetid = readInt(&curdata);
 800d56c:	f7ff fe80 	bl	800d270 <readInt>

	*count = 0;
 800d570:	2300      	movs	r3, #0
	*packetid = readInt(&curdata);
 800d572:	f8a8 0000 	strh.w	r0, [r8]
	*count = 0;
 800d576:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
 800d578:	9b00      	ldr	r3, [sp, #0]
 800d57a:	42a3      	cmp	r3, r4
 800d57c:	d303      	bcc.n	800d586 <MQTTDeserialize_suback+0x50>
			goto exit;
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
	}

	rc = 1;
 800d57e:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
 800d580:	b002      	add	sp, #8
 800d582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (*count > maxcount)
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	42b3      	cmp	r3, r6
 800d58a:	dc0a      	bgt.n	800d5a2 <MQTTDeserialize_suback+0x6c>
		grantedQoSs[(*count)++] = readChar(&curdata);
 800d58c:	4668      	mov	r0, sp
 800d58e:	f7ff fe77 	bl	800d280 <readChar>
 800d592:	682b      	ldr	r3, [r5, #0]
 800d594:	1c5a      	adds	r2, r3, #1
 800d596:	602a      	str	r2, [r5, #0]
 800d598:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
 800d59c:	e7ec      	b.n	800d578 <MQTTDeserialize_suback+0x42>
	int rc = 0;
 800d59e:	2000      	movs	r0, #0
 800d5a0:	e7ee      	b.n	800d580 <MQTTDeserialize_suback+0x4a>
			rc = -1;
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
	return rc;
 800d5a6:	e7eb      	b.n	800d580 <MQTTDeserialize_suback+0x4a>

0800d5a8 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 800d5a8:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	f014 bf43 	b.w	8022438 <memset>

0800d5b2 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
 800d5b2:	b120      	cbz	r0, 800d5be <mbedtls_aes_free+0xc>
 800d5b4:	f500 738c 	add.w	r3, r0, #280	; 0x118
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	4298      	cmp	r0, r3
 800d5bc:	d100      	bne.n	800d5c0 <mbedtls_aes_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
}
 800d5be:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800d5c0:	f800 2b01 	strb.w	r2, [r0], #1
 800d5c4:	e7f9      	b.n	800d5ba <mbedtls_aes_free+0x8>
	...

0800d5c8 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
 800d5c8:	2ac0      	cmp	r2, #192	; 0xc0
{
 800d5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( keybits )
 800d5cc:	d049      	beq.n	800d662 <mbedtls_aes_setkey_enc+0x9a>
 800d5ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d5d2:	d048      	beq.n	800d666 <mbedtls_aes_setkey_enc+0x9e>
 800d5d4:	2a80      	cmp	r2, #128	; 0x80
 800d5d6:	f040 80e5 	bne.w	800d7a4 <mbedtls_aes_setkey_enc+0x1dc>
    {
        case 128: ctx->nr = 10; break;
 800d5da:	230a      	movs	r3, #10

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d5dc:	4604      	mov	r4, r0
        case 256: ctx->nr = 14; break;
 800d5de:	6003      	str	r3, [r0, #0]
    ctx->rk = RK = ctx->buf;
 800d5e0:	f100 0308 	add.w	r3, r0, #8
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d5e4:	0952      	lsrs	r2, r2, #5
    ctx->rk = RK = ctx->buf;
 800d5e6:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d5ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d5ee:	428a      	cmp	r2, r1
 800d5f0:	d13b      	bne.n	800d66a <mbedtls_aes_setkey_enc+0xa2>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    }

    switch( ctx->nr )
 800d5f2:	6803      	ldr	r3, [r0, #0]
 800d5f4:	2b0c      	cmp	r3, #12
 800d5f6:	d046      	beq.n	800d686 <mbedtls_aes_setkey_enc+0xbe>
 800d5f8:	2b0e      	cmp	r3, #14
 800d5fa:	d07c      	beq.n	800d6f6 <mbedtls_aes_setkey_enc+0x12e>
 800d5fc:	2b0a      	cmp	r3, #10
 800d5fe:	d12e      	bne.n	800d65e <mbedtls_aes_setkey_enc+0x96>
 800d600:	4d6a      	ldr	r5, [pc, #424]	; (800d7ac <mbedtls_aes_setkey_enc+0x1e4>)
 800d602:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
 800d606:	4629      	mov	r1, r5
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
            {
                RK[4]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d608:	6942      	ldr	r2, [r0, #20]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d60a:	f855 4b04 	ldr.w	r4, [r5], #4
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d60e:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d610:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d614:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d616:	407c      	eors	r4, r7
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800d618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d61c:	4063      	eors	r3, r4
 800d61e:	eb01 6412 	add.w	r4, r1, r2, lsr #24
 800d622:	3010      	adds	r0, #16
 800d624:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
 800d628:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800d62c:	fa51 f482 	uxtab	r4, r1, r2
 800d630:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d634:	ea83 6304 	eor.w	r3, r3, r4, lsl #24
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800d638:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d63c:	440c      	add	r4, r1
 800d63e:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800d642:	ea83 2304 	eor.w	r3, r3, r4, lsl #8

                RK[5]  = RK[1] ^ RK[4];
 800d646:	f850 4c04 	ldr.w	r4, [r0, #-4]
                RK[4]  = RK[0] ^ RCON[i] ^
 800d64a:	6083      	str	r3, [r0, #8]
                RK[5]  = RK[1] ^ RK[4];
 800d64c:	4063      	eors	r3, r4
                RK[6]  = RK[2] ^ RK[5];
 800d64e:	6804      	ldr	r4, [r0, #0]
                RK[5]  = RK[1] ^ RK[4];
 800d650:	60c3      	str	r3, [r0, #12]
                RK[6]  = RK[2] ^ RK[5];
 800d652:	4063      	eors	r3, r4
 800d654:	6103      	str	r3, [r0, #16]
                RK[7]  = RK[3] ^ RK[6];
 800d656:	4053      	eors	r3, r2
 800d658:	6143      	str	r3, [r0, #20]
            for( i = 0; i < 10; i++, RK += 4 )
 800d65a:	4286      	cmp	r6, r0
 800d65c:	d1d4      	bne.n	800d608 <mbedtls_aes_setkey_enc+0x40>
    switch( ctx->nr )
 800d65e:	2000      	movs	r0, #0
 800d660:	e0a2      	b.n	800d7a8 <mbedtls_aes_setkey_enc+0x1e0>
        case 192: ctx->nr = 12; break;
 800d662:	230c      	movs	r3, #12
 800d664:	e7ba      	b.n	800d5dc <mbedtls_aes_setkey_enc+0x14>
        case 256: ctx->nr = 14; break;
 800d666:	230e      	movs	r3, #14
 800d668:	e7b8      	b.n	800d5dc <mbedtls_aes_setkey_enc+0x14>
        GET_UINT32_LE( RK[i], key, i << 2 );
 800d66a:	788b      	ldrb	r3, [r1, #2]
 800d66c:	784d      	ldrb	r5, [r1, #1]
 800d66e:	041b      	lsls	r3, r3, #16
 800d670:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800d674:	780d      	ldrb	r5, [r1, #0]
 800d676:	432b      	orrs	r3, r5
 800d678:	78cd      	ldrb	r5, [r1, #3]
 800d67a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800d67e:	f844 3f04 	str.w	r3, [r4, #4]!
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800d682:	3104      	adds	r1, #4
 800d684:	e7b3      	b.n	800d5ee <mbedtls_aes_setkey_enc+0x26>
 800d686:	4c49      	ldr	r4, [pc, #292]	; (800d7ac <mbedtls_aes_setkey_enc+0x1e4>)
 800d688:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
 800d68c:	4621      	mov	r1, r4
        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
            {
                RK[6]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d68e:	69c2      	ldr	r2, [r0, #28]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d690:	f854 6b04 	ldr.w	r6, [r4], #4
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d694:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d696:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d69a:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d69c:	407e      	eors	r6, r7
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800d69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d6a2:	4073      	eors	r3, r6
 800d6a4:	eb01 6612 	add.w	r6, r1, r2, lsr #24
 800d6a8:	3018      	adds	r0, #24
 800d6aa:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800d6ae:	ea83 4306 	eor.w	r3, r3, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800d6b2:	fa51 f682 	uxtab	r6, r1, r2
 800d6b6:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d6ba:	ea83 6306 	eor.w	r3, r3, r6, lsl #24
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800d6be:	f3c2 4607 	ubfx	r6, r2, #16, #8
 800d6c2:	440e      	add	r6, r1
 800d6c4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800d6c8:	ea83 2306 	eor.w	r3, r3, r6, lsl #8

                RK[7]  = RK[1] ^ RK[6];
 800d6cc:	f850 6c0c 	ldr.w	r6, [r0, #-12]
                RK[6]  = RK[0] ^ RCON[i] ^
 800d6d0:	6083      	str	r3, [r0, #8]
                RK[7]  = RK[1] ^ RK[6];
 800d6d2:	4073      	eors	r3, r6
                RK[8]  = RK[2] ^ RK[7];
 800d6d4:	f850 6c08 	ldr.w	r6, [r0, #-8]
                RK[7]  = RK[1] ^ RK[6];
 800d6d8:	60c3      	str	r3, [r0, #12]
                RK[8]  = RK[2] ^ RK[7];
 800d6da:	4073      	eors	r3, r6
                RK[9]  = RK[3] ^ RK[8];
 800d6dc:	f850 6c04 	ldr.w	r6, [r0, #-4]
                RK[8]  = RK[2] ^ RK[7];
 800d6e0:	6103      	str	r3, [r0, #16]
                RK[9]  = RK[3] ^ RK[8];
 800d6e2:	4073      	eors	r3, r6
                RK[10] = RK[4] ^ RK[9];
 800d6e4:	6806      	ldr	r6, [r0, #0]
                RK[9]  = RK[3] ^ RK[8];
 800d6e6:	6143      	str	r3, [r0, #20]
                RK[10] = RK[4] ^ RK[9];
 800d6e8:	4073      	eors	r3, r6
 800d6ea:	6183      	str	r3, [r0, #24]
                RK[11] = RK[5] ^ RK[10];
 800d6ec:	4053      	eors	r3, r2
 800d6ee:	61c3      	str	r3, [r0, #28]
            for( i = 0; i < 8; i++, RK += 6 )
 800d6f0:	4285      	cmp	r5, r0
 800d6f2:	d1cc      	bne.n	800d68e <mbedtls_aes_setkey_enc+0xc6>
 800d6f4:	e7b3      	b.n	800d65e <mbedtls_aes_setkey_enc+0x96>
 800d6f6:	4d2d      	ldr	r5, [pc, #180]	; (800d7ac <mbedtls_aes_setkey_enc+0x1e4>)
 800d6f8:	f100 06e0 	add.w	r6, r0, #224	; 0xe0
 800d6fc:	4629      	mov	r1, r5
        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
            {
                RK[8]  = RK[0] ^ RCON[i] ^
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d6fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
                RK[8]  = RK[0] ^ RCON[i] ^
 800d700:	f855 2b04 	ldr.w	r2, [r5], #4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d704:	6887      	ldr	r7, [r0, #8]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d706:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800d70a:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d70c:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800d70e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];

                RK[12] = RK[4] ^
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d712:	6987      	ldr	r7, [r0, #24]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d714:	4053      	eors	r3, r2
 800d716:	eb01 6214 	add.w	r2, r1, r4, lsr #24
 800d71a:	3020      	adds	r0, #32
 800d71c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800d720:	ea83 4302 	eor.w	r3, r3, r2, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800d724:	fa51 f284 	uxtab	r2, r1, r4
 800d728:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d72c:	ea83 6302 	eor.w	r3, r3, r2, lsl #24
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 800d730:	f3c4 4207 	ubfx	r2, r4, #16, #8
 800d734:	440a      	add	r2, r1
 800d736:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800d73a:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
                RK[9]  = RK[1] ^ RK[8];
 800d73e:	f850 2c14 	ldr.w	r2, [r0, #-20]
                RK[8]  = RK[0] ^ RCON[i] ^
 800d742:	6083      	str	r3, [r0, #8]
                RK[9]  = RK[1] ^ RK[8];
 800d744:	4053      	eors	r3, r2
                RK[10] = RK[2] ^ RK[9];
 800d746:	f850 2c10 	ldr.w	r2, [r0, #-16]
                RK[9]  = RK[1] ^ RK[8];
 800d74a:	60c3      	str	r3, [r0, #12]
                RK[10] = RK[2] ^ RK[9];
 800d74c:	4053      	eors	r3, r2
                RK[11] = RK[3] ^ RK[10];
 800d74e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
                RK[10] = RK[2] ^ RK[9];
 800d752:	6103      	str	r3, [r0, #16]
                RK[11] = RK[3] ^ RK[10];
 800d754:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d756:	fa51 f283 	uxtab	r2, r1, r3
                RK[11] = RK[3] ^ RK[10];
 800d75a:	6143      	str	r3, [r0, #20]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800d75c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d760:	407a      	eors	r2, r7
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800d762:	eb01 6713 	add.w	r7, r1, r3, lsr #24
 800d766:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d76a:	ea82 6207 	eor.w	r2, r2, r7, lsl #24
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d76e:	f3c3 2707 	ubfx	r7, r3, #8, #8
 800d772:	440f      	add	r7, r1
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d774:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800d778:	440b      	add	r3, r1
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800d77a:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800d77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d782:	ea82 2207 	eor.w	r2, r2, r7, lsl #8
 800d786:	ea82 4303 	eor.w	r3, r2, r3, lsl #16

                RK[13] = RK[5] ^ RK[12];
 800d78a:	f850 2c04 	ldr.w	r2, [r0, #-4]
                RK[12] = RK[4] ^
 800d78e:	6183      	str	r3, [r0, #24]
                RK[13] = RK[5] ^ RK[12];
 800d790:	4053      	eors	r3, r2
                RK[14] = RK[6] ^ RK[13];
 800d792:	6802      	ldr	r2, [r0, #0]
                RK[13] = RK[5] ^ RK[12];
 800d794:	61c3      	str	r3, [r0, #28]
                RK[14] = RK[6] ^ RK[13];
 800d796:	4053      	eors	r3, r2
 800d798:	6203      	str	r3, [r0, #32]
                RK[15] = RK[7] ^ RK[14];
 800d79a:	4063      	eors	r3, r4
 800d79c:	6243      	str	r3, [r0, #36]	; 0x24
            for( i = 0; i < 7; i++, RK += 8 )
 800d79e:	4286      	cmp	r6, r0
 800d7a0:	d1ad      	bne.n	800d6fe <mbedtls_aes_setkey_enc+0x136>
 800d7a2:	e75c      	b.n	800d65e <mbedtls_aes_setkey_enc+0x96>
    switch( keybits )
 800d7a4:	f06f 001f 	mvn.w	r0, #31
            }
            break;
    }

    return( 0 );
}
 800d7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	08028670 	.word	0x08028670

0800d7b0 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	b0c9      	sub	sp, #292	; 0x124
 800d7b6:	4604      	mov	r4, r0
    int i, j, ret;
    mbedtls_aes_context cty;
    uint32_t *RK;
    uint32_t *SK;

    mbedtls_aes_init( &cty );
 800d7b8:	a802      	add	r0, sp, #8
{
 800d7ba:	e9cd 2100 	strd	r2, r1, [sp]
    mbedtls_aes_init( &cty );
 800d7be:	f7ff fef3 	bl	800d5a8 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800d7c2:	f104 0308 	add.w	r3, r4, #8

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d7c6:	e9dd 2100 	ldrd	r2, r1, [sp]
    ctx->rk = RK = ctx->buf;
 800d7ca:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800d7cc:	a802      	add	r0, sp, #8
 800d7ce:	f7ff fefb 	bl	800d5c8 <mbedtls_aes_setkey_enc>
 800d7d2:	4680      	mov	r8, r0
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d137      	bne.n	800d848 <mbedtls_aes_setkey_dec+0x98>
        goto exit;

    ctx->nr = cty.nr;
 800d7d8:	9e02      	ldr	r6, [sp, #8]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800d7da:	9b03      	ldr	r3, [sp, #12]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
    {
        for( j = 0; j < 4; j++, SK++ )
        {
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d7dc:	4938      	ldr	r1, [pc, #224]	; (800d8c0 <mbedtls_aes_setkey_dec+0x110>)
    ctx->nr = cty.nr;
 800d7de:	6026      	str	r6, [r4, #0]
    SK = cty.rk + cty.nr * 4;
 800d7e0:	0135      	lsls	r5, r6, #4
 800d7e2:	eb03 1206 	add.w	r2, r3, r6, lsl #4
    *RK++ = *SK++;
 800d7e6:	595b      	ldr	r3, [r3, r5]
 800d7e8:	60a3      	str	r3, [r4, #8]
    *RK++ = *SK++;
 800d7ea:	6853      	ldr	r3, [r2, #4]
 800d7ec:	60e3      	str	r3, [r4, #12]
    *RK++ = *SK++;
 800d7ee:	6893      	ldr	r3, [r2, #8]
 800d7f0:	6123      	str	r3, [r4, #16]
    *RK++ = *SK++;
 800d7f2:	f104 0318 	add.w	r3, r4, #24
 800d7f6:	9300      	str	r3, [sp, #0]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d7f8:	f106 3aff 	add.w	sl, r6, #4294967295
    *RK++ = *SK++;
 800d7fc:	68d3      	ldr	r3, [r2, #12]
 800d7fe:	6163      	str	r3, [r4, #20]
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d800:	3a10      	subs	r2, #16
 800d802:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800d806:	4696      	mov	lr, r2
 800d808:	4650      	mov	r0, sl
 800d80a:	2800      	cmp	r0, #0
 800d80c:	f1a3 0c10 	sub.w	ip, r3, #16
 800d810:	dc21      	bgt.n	800d856 <mbedtls_aes_setkey_dec+0xa6>
 800d812:	9b00      	ldr	r3, [sp, #0]
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
        }
    }

    *RK++ = *SK++;
 800d814:	9800      	ldr	r0, [sp, #0]
 800d816:	2e00      	cmp	r6, #0
 800d818:	f1a5 0510 	sub.w	r5, r5, #16
 800d81c:	bfd8      	it	le
 800d81e:	2500      	movle	r5, #0
 800d820:	eb03 0105 	add.w	r1, r3, r5
 800d824:	f06f 030f 	mvn.w	r3, #15
 800d828:	fb03 fa0a 	mul.w	sl, r3, sl
 800d82c:	bfd8      	it	le
 800d82e:	f04f 0a00 	movle.w	sl, #0
 800d832:	eb02 030a 	add.w	r3, r2, sl
 800d836:	f852 200a 	ldr.w	r2, [r2, sl]
 800d83a:	5142      	str	r2, [r0, r5]
    *RK++ = *SK++;
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	604a      	str	r2, [r1, #4]
    *RK++ = *SK++;
 800d840:	689a      	ldr	r2, [r3, #8]
 800d842:	608a      	str	r2, [r1, #8]
    *RK++ = *SK++;
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	60cb      	str	r3, [r1, #12]

exit:
    mbedtls_aes_free( &cty );
 800d848:	a802      	add	r0, sp, #8
 800d84a:	f7ff feb2 	bl	800d5b2 <mbedtls_aes_free>

    return( ret );
}
 800d84e:	4640      	mov	r0, r8
 800d850:	b049      	add	sp, #292	; 0x124
 800d852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d856:	f1ae 0b04 	sub.w	fp, lr, #4
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d85a:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800d85e:	fa51 f784 	uxtab	r7, r1, r4
 800d862:	f897 9028 	ldrb.w	r9, [r7, #40]	; 0x28
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d866:	eb01 6714 	add.w	r7, r1, r4, lsr #24
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d86a:	eb01 0989 	add.w	r9, r1, r9, lsl #2
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d86e:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d872:	f8d9 9128 	ldr.w	r9, [r9, #296]	; 0x128
                    RT3[ FSb[ ( *SK >> 24 ) & 0xFF ] ];
 800d876:	eb01 0787 	add.w	r7, r1, r7, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d87a:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800d87e:	ea89 0907 	eor.w	r9, r9, r7
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d882:	f3c4 2707 	ubfx	r7, r4, #8, #8
 800d886:	440f      	add	r7, r1
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d888:	f3c4 4407 	ubfx	r4, r4, #16, #8
 800d88c:	440c      	add	r4, r1
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d88e:	f897 7028 	ldrb.w	r7, [r7, #40]	; 0x28
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d892:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
                    RT1[ FSb[ ( *SK >>  8 ) & 0xFF ] ] ^
 800d896:	eb01 0787 	add.w	r7, r1, r7, lsl #2
                    RT2[ FSb[ ( *SK >> 16 ) & 0xFF ] ] ^
 800d89a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800d89e:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800d8a2:	f8d4 4d28 	ldr.w	r4, [r4, #3368]	; 0xd28
 800d8a6:	ea89 0707 	eor.w	r7, r9, r7
 800d8aa:	4067      	eors	r7, r4
            *RK++ = RT0[ FSb[ ( *SK       ) & 0xFF ] ] ^
 800d8ac:	f84c 7b04 	str.w	r7, [ip], #4
        for( j = 0; j < 4; j++, SK++ )
 800d8b0:	459c      	cmp	ip, r3
 800d8b2:	d1d2      	bne.n	800d85a <mbedtls_aes_setkey_dec+0xaa>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800d8b4:	3801      	subs	r0, #1
 800d8b6:	f1ae 0e10 	sub.w	lr, lr, #16
 800d8ba:	3310      	adds	r3, #16
 800d8bc:	e7a5      	b.n	800d80a <mbedtls_aes_setkey_dec+0x5a>
 800d8be:	bf00      	nop
 800d8c0:	08028670 	.word	0x08028670

0800d8c4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800d8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800d8c8:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d8ca:	680e      	ldr	r6, [r1, #0]
 800d8cc:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d8ce:	684d      	ldr	r5, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d8d0:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d8d2:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800d8d4:	4066      	eors	r6, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800d8d6:	685c      	ldr	r4, [r3, #4]
 800d8d8:	4065      	eors	r5, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d8da:	689c      	ldr	r4, [r3, #8]
{
 800d8dc:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d8de:	1040      	asrs	r0, r0, #1
 800d8e0:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800d8e2:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d8e6:	68cf      	ldr	r7, [r1, #12]
 800d8e8:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d8ea:	9000      	str	r0, [sp, #0]
 800d8ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d8f0:	4bc2      	ldr	r3, [pc, #776]	; (800dbfc <mbedtls_internal_aes_encrypt+0x338>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800d8f2:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800d8f4:	f850 7c10 	ldr.w	r7, [r0, #-16]
 800d8f8:	9701      	str	r7, [sp, #4]
 800d8fa:	b2f7      	uxtb	r7, r6
 800d8fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d900:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800d904:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d906:	ea87 0e04 	eor.w	lr, r7, r4
 800d90a:	0e0f      	lsrs	r7, r1, #24
 800d90c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d910:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800d914:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d918:	ea8e 0e07 	eor.w	lr, lr, r7
 800d91c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 800d920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d924:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 800d928:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d92c:	ea8e 0e07 	eor.w	lr, lr, r7
 800d930:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800d934:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d938:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d93c:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d940:	f8da a430 	ldr.w	sl, [sl, #1072]	; 0x430
 800d944:	ea8e 0e07 	eor.w	lr, lr, r7
 800d948:	b2ef      	uxtb	r7, r5
 800d94a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d94e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 800d952:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d954:	ea87 0c04 	eor.w	ip, r7, r4
 800d958:	0e37      	lsrs	r7, r6, #24
 800d95a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d95e:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800d962:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800d966:	ea8c 0c07 	eor.w	ip, ip, r7
 800d96a:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800d96e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d972:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800d976:	f8d7 7830 	ldr.w	r7, [r7, #2096]	; 0x830
 800d97a:	ea8c 0c07 	eor.w	ip, ip, r7
 800d97e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 800d982:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d986:	fa5f f88e 	uxtb.w	r8, lr
 800d98a:	f8d7 7c30 	ldr.w	r7, [r7, #3120]	; 0xc30
 800d98e:	ea8c 0c07 	eor.w	ip, ip, r7
 800d992:	fa5f f78b 	uxtb.w	r7, fp
 800d996:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d99a:	f3cc 2907 	ubfx	r9, ip, #8, #8
 800d99e:	6b3f      	ldr	r7, [r7, #48]	; 0x30
 800d9a0:	4067      	eors	r7, r4
 800d9a2:	ea87 070a 	eor.w	r7, r7, sl
 800d9a6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800d9aa:	b2c9      	uxtb	r1, r1
 800d9ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d9b0:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800d9b4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800d9b6:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d9ba:	4061      	eors	r1, r4
 800d9bc:	f8da a830 	ldr.w	sl, [sl, #2096]	; 0x830
 800d9c0:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800d9c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9c8:	ea87 070a 	eor.w	r7, r7, sl
 800d9cc:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 800d9d0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800d9d4:	f8d4 4430 	ldr.w	r4, [r4, #1072]	; 0x430
 800d9d8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800d9dc:	4061      	eors	r1, r4
 800d9de:	f8d6 4830 	ldr.w	r4, [r6, #2096]	; 0x830
 800d9e2:	4061      	eors	r1, r4
 800d9e4:	f8d5 4c30 	ldr.w	r4, [r5, #3120]	; 0xc30
 800d9e8:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800d9ec:	4061      	eors	r1, r4
 800d9ee:	f8da ac30 	ldr.w	sl, [sl, #3120]	; 0xc30
 800d9f2:	f850 4c0c 	ldr.w	r4, [r0, #-12]
 800d9f6:	9402      	str	r4, [sp, #8]
 800d9f8:	f3c1 4607 	ubfx	r6, r1, #16, #8
 800d9fc:	9603      	str	r6, [sp, #12]
 800d9fe:	ea4f 661e 	mov.w	r6, lr, lsr #24
 800da02:	ea87 070a 	eor.w	r7, r7, sl
 800da06:	9604      	str	r6, [sp, #16]
 800da08:	f850 6c08 	ldr.w	r6, [r0, #-8]
 800da0c:	9605      	str	r6, [sp, #20]
 800da0e:	b2fe      	uxtb	r6, r7
 800da10:	9606      	str	r6, [sp, #24]
 800da12:	f3c1 2607 	ubfx	r6, r1, #8, #8
 800da16:	9607      	str	r6, [sp, #28]
 800da18:	f3ce 4607 	ubfx	r6, lr, #16, #8
 800da1c:	9608      	str	r6, [sp, #32]
 800da1e:	0e0d      	lsrs	r5, r1, #24
 800da20:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800da24:	b2c9      	uxtb	r1, r1
 800da26:	9609      	str	r6, [sp, #36]	; 0x24
 800da28:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800da2c:	910b      	str	r1, [sp, #44]	; 0x2c
 800da2e:	9900      	ldr	r1, [sp, #0]
 800da30:	960a      	str	r6, [sp, #40]	; 0x28
 800da32:	2900      	cmp	r1, #0
 800da34:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800da38:	fa5f f48c 	uxtb.w	r4, ip
 800da3c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 800da40:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 800da44:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 800da48:	ea4f 6717 	mov.w	r7, r7, lsr #24
 800da4c:	f100 0020 	add.w	r0, r0, #32
 800da50:	dc77      	bgt.n	800db42 <mbedtls_internal_aes_encrypt+0x27e>

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800da52:	4b6b      	ldr	r3, [pc, #428]	; (800dc00 <mbedtls_internal_aes_encrypt+0x33c>)
    X0 = *RK++ ^ \
 800da54:	9801      	ldr	r0, [sp, #4]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800da56:	4498      	add	r8, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800da58:	4499      	add	r9, r3
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800da5a:	f898 6028 	ldrb.w	r6, [r8, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800da5e:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800da62:	449a      	add	sl, r3
    X0 = *RK++ ^ \
 800da64:	4046      	eors	r6, r0
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800da66:	441d      	add	r5, r3
    X0 = *RK++ ^ \
 800da68:	ea86 2601 	eor.w	r6, r6, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800da6c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28

    X1 = *RK++ ^ \
 800da70:	9802      	ldr	r0, [sp, #8]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800da72:	441c      	add	r4, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800da74:	449b      	add	fp, r3
    X0 = *RK++ ^ \
 800da76:	ea86 4601 	eor.w	r6, r6, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800da7a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800da7e:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X3 = *RK++ ^ \
 800da82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    X0 = *RK++ ^ \
 800da84:	ea86 6601 	eor.w	r6, r6, r1, lsl #24
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800da88:	f89b 1028 	ldrb.w	r1, [fp, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800da8c:	7016      	strb	r6, [r2, #0]
    X1 = *RK++ ^ \
 800da8e:	4045      	eors	r5, r0
 800da90:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800da94:	9903      	ldr	r1, [sp, #12]
 800da96:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800da98:	449e      	add	lr, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800da9a:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800da9e:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800daa2:	9904      	ldr	r1, [sp, #16]
 800daa4:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800daa6:	449c      	add	ip, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800daa8:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X1 = *RK++ ^ \
 800daac:	ea85 6501 	eor.w	r5, r5, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800dab0:	9907      	ldr	r1, [sp, #28]
    PUT_UINT32_LE( X1, output,  4 );
 800dab2:	7115      	strb	r5, [r2, #4]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800dab4:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800dab6:	441f      	add	r7, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800dab8:	f891 8028 	ldrb.w	r8, [r1, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800dabc:	9906      	ldr	r1, [sp, #24]
 800dabe:	4419      	add	r1, r3
 800dac0:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800dac4:	9905      	ldr	r1, [sp, #20]
 800dac6:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800dac8:	9908      	ldr	r1, [sp, #32]
 800daca:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800dacc:	ea80 2008 	eor.w	r0, r0, r8, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800dad0:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800dad4:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800dad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dada:	4419      	add	r1, r3
 800dadc:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X2 = *RK++ ^ \
 800dae0:	ea80 6001 	eor.w	r0, r0, r1, lsl #24
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800dae4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dae6:	4419      	add	r1, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800dae8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800daec:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    X3 = *RK++ ^ \
 800daf0:	4061      	eors	r1, r4
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800daf2:	f89e 4028 	ldrb.w	r4, [lr, #40]	; 0x28
    X3 = *RK++ ^ \
 800daf6:	ea81 2104 	eor.w	r1, r1, r4, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800dafa:	f89c 4028 	ldrb.w	r4, [ip, #40]	; 0x28
    X3 = *RK++ ^ \
 800dafe:	ea81 4104 	eor.w	r1, r1, r4, lsl #16
 800db02:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800db06:	0a31      	lsrs	r1, r6, #8
 800db08:	7051      	strb	r1, [r2, #1]
 800db0a:	0c31      	lsrs	r1, r6, #16
 800db0c:	7091      	strb	r1, [r2, #2]
 800db0e:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X1, output,  4 );
 800db10:	0a29      	lsrs	r1, r5, #8
    PUT_UINT32_LE( X0, output,  0 );
 800db12:	70d6      	strb	r6, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800db14:	7151      	strb	r1, [r2, #5]
 800db16:	0c29      	lsrs	r1, r5, #16
 800db18:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800db1a:	0a01      	lsrs	r1, r0, #8
 800db1c:	7251      	strb	r1, [r2, #9]
 800db1e:	0c01      	lsrs	r1, r0, #16
 800db20:	7210      	strb	r0, [r2, #8]
 800db22:	7291      	strb	r1, [r2, #10]
 800db24:	0e00      	lsrs	r0, r0, #24
    PUT_UINT32_LE( X3, output, 12 );
 800db26:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800db28:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X2, output,  8 );
 800db2a:	72d0      	strb	r0, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800db2c:	7313      	strb	r3, [r2, #12]
 800db2e:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800db30:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800db32:	0c19      	lsrs	r1, r3, #16
 800db34:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800db36:	71d5      	strb	r5, [r2, #7]
    PUT_UINT32_LE( X3, output, 12 );
 800db38:	7391      	strb	r1, [r2, #14]
 800db3a:	73d3      	strb	r3, [r2, #15]
}
 800db3c:	b00d      	add	sp, #52	; 0x34
 800db3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800db42:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800db46:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800db4a:	f8d8 6030 	ldr.w	r6, [r8, #48]	; 0x30
 800db4e:	f8d5 1430 	ldr.w	r1, [r5, #1072]	; 0x430
 800db52:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800db56:	404e      	eors	r6, r1
 800db58:	9901      	ldr	r1, [sp, #4]
 800db5a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800db5e:	404e      	eors	r6, r1
 800db60:	f8d9 1830 	ldr.w	r1, [r9, #2096]	; 0x830
 800db64:	404e      	eors	r6, r1
 800db66:	f8da 1c30 	ldr.w	r1, [sl, #3120]	; 0xc30
 800db6a:	404e      	eors	r6, r1
 800db6c:	9904      	ldr	r1, [sp, #16]
 800db6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800db72:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800db76:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800db78:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
 800db7c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800db7e:	404d      	eors	r5, r1
 800db80:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800db84:	9902      	ldr	r1, [sp, #8]
 800db86:	404d      	eors	r5, r1
 800db88:	f8db 1830 	ldr.w	r1, [fp, #2096]	; 0x830
 800db8c:	404d      	eors	r5, r1
 800db8e:	9903      	ldr	r1, [sp, #12]
 800db90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800db94:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800db98:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800db9c:	404d      	eors	r5, r1
 800db9e:	9906      	ldr	r1, [sp, #24]
 800dba0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dba4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dba8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800dbaa:	f8d8 1430 	ldr.w	r1, [r8, #1072]	; 0x430
 800dbae:	f8d7 7430 	ldr.w	r7, [r7, #1072]	; 0x430
 800dbb2:	404c      	eors	r4, r1
 800dbb4:	9905      	ldr	r1, [sp, #20]
 800dbb6:	404c      	eors	r4, r1
 800dbb8:	9907      	ldr	r1, [sp, #28]
 800dbba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dbbe:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800dbc2:	f8d1 1830 	ldr.w	r1, [r1, #2096]	; 0x830
 800dbc6:	404c      	eors	r4, r1
 800dbc8:	9908      	ldr	r1, [sp, #32]
 800dbca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dbce:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800dbd2:	f8d1 1c30 	ldr.w	r1, [r1, #3120]	; 0xc30
 800dbd6:	ea84 0b01 	eor.w	fp, r4, r1
 800dbda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dbdc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dbe0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800dbe2:	4079      	eors	r1, r7
 800dbe4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800dbe6:	4079      	eors	r1, r7
 800dbe8:	f8de 7830 	ldr.w	r7, [lr, #2096]	; 0x830
 800dbec:	4079      	eors	r1, r7
 800dbee:	f8dc 7c30 	ldr.w	r7, [ip, #3120]	; 0xc30
 800dbf2:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dbf4:	9f00      	ldr	r7, [sp, #0]
 800dbf6:	3f01      	subs	r7, #1
 800dbf8:	9700      	str	r7, [sp, #0]
 800dbfa:	e67b      	b.n	800d8f4 <mbedtls_internal_aes_encrypt+0x30>
 800dbfc:	08029768 	.word	0x08029768
 800dc00:	08028670 	.word	0x08028670

0800dc04 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800dc08:	6843      	ldr	r3, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800dc0a:	680d      	ldr	r5, [r1, #0]
 800dc0c:	681c      	ldr	r4, [r3, #0]
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800dc0e:	684e      	ldr	r6, [r1, #4]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dc10:	6800      	ldr	r0, [r0, #0]
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800dc12:	688f      	ldr	r7, [r1, #8]
    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800dc14:	4065      	eors	r5, r4
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800dc16:	685c      	ldr	r4, [r3, #4]
 800dc18:	4066      	eors	r6, r4
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800dc1a:	689c      	ldr	r4, [r3, #8]
{
 800dc1c:	b08d      	sub	sp, #52	; 0x34
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dc1e:	1040      	asrs	r0, r0, #1
 800dc20:	3801      	subs	r0, #1
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800dc22:	ea84 0b07 	eor.w	fp, r4, r7
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800dc26:	68cf      	ldr	r7, [r1, #12]
 800dc28:	68d9      	ldr	r1, [r3, #12]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dc2a:	9000      	str	r0, [sp, #0]
 800dc2c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800dc30:	4bc7      	ldr	r3, [pc, #796]	; (800df50 <mbedtls_internal_aes_decrypt+0x34c>)
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800dc32:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800dc34:	b2ef      	uxtb	r7, r5
 800dc36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc3a:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800dc3e:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800dc42:	9401      	str	r4, [sp, #4]
 800dc44:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800dc48:	ea87 0c04 	eor.w	ip, r7, r4
 800dc4c:	0e37      	lsrs	r7, r6, #24
 800dc4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc52:	f850 4c14 	ldr.w	r4, [r0, #-20]
 800dc56:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800dc5a:	ea8c 0c07 	eor.w	ip, ip, r7
 800dc5e:	f3c1 2707 	ubfx	r7, r1, #8, #8
 800dc62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc66:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 800dc6a:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800dc6e:	ea8c 0c07 	eor.w	ip, ip, r7
 800dc72:	f3cb 4707 	ubfx	r7, fp, #16, #8
 800dc76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc7a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dc7e:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800dc82:	f8da a528 	ldr.w	sl, [sl, #1320]	; 0x528
 800dc86:	ea8c 0c07 	eor.w	ip, ip, r7
 800dc8a:	b2cf      	uxtb	r7, r1
 800dc8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc90:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800dc94:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800dc98:	ea87 0e04 	eor.w	lr, r7, r4
 800dc9c:	0e2f      	lsrs	r7, r5, #24
 800dc9e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dca2:	f850 4c18 	ldr.w	r4, [r0, #-24]
 800dca6:	f8d7 7528 	ldr.w	r7, [r7, #1320]	; 0x528
 800dcaa:	ea8e 0e07 	eor.w	lr, lr, r7
 800dcae:	f3cb 2707 	ubfx	r7, fp, #8, #8
 800dcb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcb6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dcba:	f8d7 7928 	ldr.w	r7, [r7, #2344]	; 0x928
 800dcbe:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800dcc2:	ea8e 0e07 	eor.w	lr, lr, r7
 800dcc6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800dcca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcce:	fa5f f88c 	uxtb.w	r8, ip
 800dcd2:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800dcd6:	ea8e 0e07 	eor.w	lr, lr, r7
 800dcda:	fa5f f78b 	uxtb.w	r7, fp
 800dcde:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dce2:	f3ce 2907 	ubfx	r9, lr, #8, #8
 800dce6:	f8d7 7128 	ldr.w	r7, [r7, #296]	; 0x128
 800dcea:	4067      	eors	r7, r4
 800dcec:	ea87 070a 	eor.w	r7, r7, sl
 800dcf0:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 800dcf4:	b2f6      	uxtb	r6, r6
 800dcf6:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dcfa:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800dcfe:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 800dd02:	f8da a928 	ldr.w	sl, [sl, #2344]	; 0x928
 800dd06:	f8d6 6128 	ldr.w	r6, [r6, #296]	; 0x128
 800dd0a:	ea87 070a 	eor.w	r7, r7, sl
 800dd0e:	4066      	eors	r6, r4
 800dd10:	f3c5 4a07 	ubfx	sl, r5, #16, #8
 800dd14:	ea4f 641b 	mov.w	r4, fp, lsr #24
 800dd18:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dd1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd20:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800dd24:	f8da ad28 	ldr.w	sl, [sl, #3368]	; 0xd28
 800dd28:	f8d4 4528 	ldr.w	r4, [r4, #1320]	; 0x528
 800dd2c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800dd30:	ea87 070a 	eor.w	r7, r7, sl
 800dd34:	4066      	eors	r6, r4
 800dd36:	f8d5 4928 	ldr.w	r4, [r5, #2344]	; 0x928
 800dd3a:	f3ce 4507 	ubfx	r5, lr, #16, #8
 800dd3e:	9503      	str	r5, [sp, #12]
 800dd40:	0e3d      	lsrs	r5, r7, #24
 800dd42:	4066      	eors	r6, r4
 800dd44:	9504      	str	r5, [sp, #16]
 800dd46:	f850 5c08 	ldr.w	r5, [r0, #-8]
 800dd4a:	9505      	str	r5, [sp, #20]
 800dd4c:	404e      	eors	r6, r1
 800dd4e:	b2fd      	uxtb	r5, r7
 800dd50:	9506      	str	r5, [sp, #24]
 800dd52:	f3c6 2507 	ubfx	r5, r6, #8, #8
 800dd56:	9507      	str	r5, [sp, #28]
 800dd58:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800dd5c:	f850 1c0c 	ldr.w	r1, [r0, #-12]
 800dd60:	9508      	str	r5, [sp, #32]
 800dd62:	ea4f 651e 	mov.w	r5, lr, lsr #24
 800dd66:	9102      	str	r1, [sp, #8]
 800dd68:	9509      	str	r5, [sp, #36]	; 0x24
 800dd6a:	f850 5c04 	ldr.w	r5, [r0, #-4]
 800dd6e:	950a      	str	r5, [sp, #40]	; 0x28
 800dd70:	fa5f f58e 	uxtb.w	r5, lr
 800dd74:	950b      	str	r5, [sp, #44]	; 0x2c
 800dd76:	9d00      	ldr	r5, [sp, #0]
 800dd78:	2d00      	cmp	r5, #0
 800dd7a:	f3c7 4a07 	ubfx	sl, r7, #16, #8
 800dd7e:	f3cc 2407 	ubfx	r4, ip, #8, #8
 800dd82:	f3c7 2e07 	ubfx	lr, r7, #8, #8
 800dd86:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 800dd8a:	b2f1      	uxtb	r1, r6
 800dd8c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 800dd90:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
 800dd94:	f100 0020 	add.w	r0, r0, #32
 800dd98:	dc77      	bgt.n	800de8a <mbedtls_internal_aes_decrypt+0x286>

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );

    X0 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800dd9a:	4b6e      	ldr	r3, [pc, #440]	; (800df54 <mbedtls_internal_aes_decrypt+0x350>)
    X0 = *RK++ ^ \
 800dd9c:	9e01      	ldr	r6, [sp, #4]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800dd9e:	4498      	add	r8, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800dda0:	4499      	add	r9, r3
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800dda2:	f818 5cc8 	ldrb.w	r5, [r8, #-200]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800dda6:	f819 0cc8 	ldrb.w	r0, [r9, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800ddaa:	449a      	add	sl, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );

    X1 = *RK++ ^ \
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800ddac:	4419      	add	r1, r3
    X0 = *RK++ ^ \
 800ddae:	4075      	eors	r5, r6
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800ddb0:	449b      	add	fp, r3
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800ddb2:	f811 6cc8 	ldrb.w	r6, [r1, #-200]
    X1 = *RK++ ^ \
 800ddb6:	9902      	ldr	r1, [sp, #8]
    X0 = *RK++ ^ \
 800ddb8:	ea85 2500 	eor.w	r5, r5, r0, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800ddbc:	f81a 0cc8 	ldrb.w	r0, [sl, #-200]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800ddc0:	441c      	add	r4, r3
    X0 = *RK++ ^ \
 800ddc2:	ea85 4500 	eor.w	r5, r5, r0, lsl #16
    X1 = *RK++ ^ \
 800ddc6:	404e      	eors	r6, r1
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800ddc8:	f81b 0cc8 	ldrb.w	r0, [fp, #-200]
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800ddcc:	9903      	ldr	r1, [sp, #12]
    X0 = *RK++ ^ \
 800ddce:	ea85 6500 	eor.w	r5, r5, r0, lsl #24
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800ddd2:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800ddd4:	f814 0cc8 	ldrb.w	r0, [r4, #-200]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );

    PUT_UINT32_LE( X0, output,  0 );
 800ddd8:	7015      	strb	r5, [r2, #0]
    X1 = *RK++ ^ \
 800ddda:	ea86 2600 	eor.w	r6, r6, r0, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800ddde:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800dde2:	9904      	ldr	r1, [sp, #16]
 800dde4:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800dde6:	ea86 4600 	eor.w	r6, r6, r0, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800ddea:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800ddee:	9907      	ldr	r1, [sp, #28]
 800ddf0:	4419      	add	r1, r3
    X1 = *RK++ ^ \
 800ddf2:	ea86 6600 	eor.w	r6, r6, r0, lsl #24
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800ddf6:	f811 0cc8 	ldrb.w	r0, [r1, #-200]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800ddfa:	9906      	ldr	r1, [sp, #24]
    PUT_UINT32_LE( X1, output,  4 );
 800ddfc:	7116      	strb	r6, [r2, #4]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800ddfe:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800de00:	449e      	add	lr, r3
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800de02:	f811 4cc8 	ldrb.w	r4, [r1, #-200]
    X2 = *RK++ ^ \
 800de06:	9905      	ldr	r1, [sp, #20]
 800de08:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800de0a:	9908      	ldr	r1, [sp, #32]
 800de0c:	4419      	add	r1, r3
    X2 = *RK++ ^ \
 800de0e:	ea84 2400 	eor.w	r4, r4, r0, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800de12:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X3 = *RK++ ^ \
 800de16:	980a      	ldr	r0, [sp, #40]	; 0x28
    X2 = *RK++ ^ \
 800de18:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800de1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de1e:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800de20:	441f      	add	r7, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800de22:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
    X2 = *RK++ ^ \
 800de26:	ea84 6401 	eor.w	r4, r4, r1, lsl #24
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800de2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de2c:	4419      	add	r1, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800de2e:	449c      	add	ip, r3
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800de30:	f811 1cc8 	ldrb.w	r1, [r1, #-200]
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800de34:	f81c 3cc8 	ldrb.w	r3, [ip, #-200]
    X3 = *RK++ ^ \
 800de38:	4041      	eors	r1, r0
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800de3a:	f81e 0cc8 	ldrb.w	r0, [lr, #-200]
    X3 = *RK++ ^ \
 800de3e:	ea81 2100 	eor.w	r1, r1, r0, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800de42:	f817 0cc8 	ldrb.w	r0, [r7, #-200]
    X3 = *RK++ ^ \
 800de46:	ea81 4100 	eor.w	r1, r1, r0, lsl #16
 800de4a:	ea81 6303 	eor.w	r3, r1, r3, lsl #24
    PUT_UINT32_LE( X0, output,  0 );
 800de4e:	0a29      	lsrs	r1, r5, #8
 800de50:	7051      	strb	r1, [r2, #1]
 800de52:	0c29      	lsrs	r1, r5, #16
 800de54:	7091      	strb	r1, [r2, #2]
 800de56:	0e2d      	lsrs	r5, r5, #24
    PUT_UINT32_LE( X1, output,  4 );
 800de58:	0a31      	lsrs	r1, r6, #8
    PUT_UINT32_LE( X0, output,  0 );
 800de5a:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_LE( X1, output,  4 );
 800de5c:	7151      	strb	r1, [r2, #5]
 800de5e:	0c31      	lsrs	r1, r6, #16
 800de60:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_LE( X2, output,  8 );
 800de62:	0a21      	lsrs	r1, r4, #8
 800de64:	7251      	strb	r1, [r2, #9]
 800de66:	0c21      	lsrs	r1, r4, #16
 800de68:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_LE( X3, output, 12 );
 800de6a:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_LE( X1, output,  4 );
 800de6c:	0e36      	lsrs	r6, r6, #24
    PUT_UINT32_LE( X2, output,  8 );
 800de6e:	7214      	strb	r4, [r2, #8]
    PUT_UINT32_LE( X3, output, 12 );
 800de70:	7313      	strb	r3, [r2, #12]
    PUT_UINT32_LE( X2, output,  8 );
 800de72:	0e24      	lsrs	r4, r4, #24
    PUT_UINT32_LE( X3, output, 12 );
 800de74:	7351      	strb	r1, [r2, #13]

    return( 0 );
}
 800de76:	2000      	movs	r0, #0
    PUT_UINT32_LE( X3, output, 12 );
 800de78:	0c19      	lsrs	r1, r3, #16
 800de7a:	0e1b      	lsrs	r3, r3, #24
    PUT_UINT32_LE( X1, output,  4 );
 800de7c:	71d6      	strb	r6, [r2, #7]
    PUT_UINT32_LE( X2, output,  8 );
 800de7e:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_LE( X3, output, 12 );
 800de80:	7391      	strb	r1, [r2, #14]
 800de82:	73d3      	strb	r3, [r2, #15]
}
 800de84:	b00d      	add	sp, #52	; 0x34
 800de86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800de8a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800de8e:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 800de92:	f8d8 5128 	ldr.w	r5, [r8, #296]	; 0x128
 800de96:	f8db 6528 	ldr.w	r6, [fp, #1320]	; 0x528
 800de9a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800de9e:	4075      	eors	r5, r6
 800dea0:	9e01      	ldr	r6, [sp, #4]
 800dea2:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 800dea6:	4075      	eors	r5, r6
 800dea8:	f8d9 6928 	ldr.w	r6, [r9, #2344]	; 0x928
 800deac:	4075      	eors	r5, r6
 800deae:	f8da 6d28 	ldr.w	r6, [sl, #3368]	; 0xd28
 800deb2:	4075      	eors	r5, r6
 800deb4:	9e04      	ldr	r6, [sp, #16]
 800deb6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800deba:	eb03 0886 	add.w	r8, r3, r6, lsl #2
 800debe:	f8d1 6128 	ldr.w	r6, [r1, #296]	; 0x128
 800dec2:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800dec6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800deca:	404e      	eors	r6, r1
 800decc:	9902      	ldr	r1, [sp, #8]
 800dece:	404e      	eors	r6, r1
 800ded0:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
 800ded4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800ded6:	404e      	eors	r6, r1
 800ded8:	9903      	ldr	r1, [sp, #12]
 800deda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800dede:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 800dee2:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800dee6:	404e      	eors	r6, r1
 800dee8:	9906      	ldr	r1, [sp, #24]
 800deea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800deee:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800def2:	f8d1 4128 	ldr.w	r4, [r1, #296]	; 0x128
 800def6:	f8d8 1528 	ldr.w	r1, [r8, #1320]	; 0x528
 800defa:	f8dc c528 	ldr.w	ip, [ip, #1320]	; 0x528
 800defe:	404c      	eors	r4, r1
 800df00:	9905      	ldr	r1, [sp, #20]
 800df02:	404c      	eors	r4, r1
 800df04:	9907      	ldr	r1, [sp, #28]
 800df06:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df0a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800df0e:	f8d1 1928 	ldr.w	r1, [r1, #2344]	; 0x928
 800df12:	404c      	eors	r4, r1
 800df14:	9908      	ldr	r1, [sp, #32]
 800df16:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df1a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800df1e:	f8d1 1d28 	ldr.w	r1, [r1, #3368]	; 0xd28
 800df22:	f8d7 7d28 	ldr.w	r7, [r7, #3368]	; 0xd28
 800df26:	ea84 0b01 	eor.w	fp, r4, r1
 800df2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800df2e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800df32:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 800df36:	ea81 010c 	eor.w	r1, r1, ip
 800df3a:	4061      	eors	r1, r4
 800df3c:	f8de c928 	ldr.w	ip, [lr, #2344]	; 0x928
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800df40:	9c00      	ldr	r4, [sp, #0]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800df42:	ea81 010c 	eor.w	r1, r1, ip
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800df46:	3c01      	subs	r4, #1
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800df48:	4079      	eors	r1, r7
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800df4a:	9400      	str	r4, [sp, #0]
 800df4c:	e672      	b.n	800dc34 <mbedtls_internal_aes_decrypt+0x30>
 800df4e:	bf00      	nop
 800df50:	08028670 	.word	0x08028670
 800df54:	0802a860 	.word	0x0802a860

0800df58 <mbedtls_aes_crypt_cbc.part.0>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
/*
 * AES-CBC buffer encryption/decryption
 */
int mbedtls_aes_crypt_cbc( mbedtls_aes_context *ctx,
 800df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5c:	b085      	sub	sp, #20
 800df5e:	4681      	mov	r9, r0
 800df60:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800df62:	4617      	mov	r7, r2
 800df64:	350f      	adds	r5, #15
 800df66:	461c      	mov	r4, r3
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
    {
        while( length > 0 )
 800df68:	eb03 0801 	add.w	r8, r3, r1
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );

            for( i = 0; i < 16; i++ )
                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );
 800df6c:	f10d 0a10 	add.w	sl, sp, #16
        while( length > 0 )
 800df70:	4544      	cmp	r4, r8
 800df72:	f1a5 020f 	sub.w	r2, r5, #15
 800df76:	d103      	bne.n	800df80 <mbedtls_aes_crypt_cbc.part.0+0x28>
            length -= 16;
        }
    }

    return( 0 );
}
 800df78:	2000      	movs	r0, #0
 800df7a:	b005      	add	sp, #20
 800df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memcpy( temp, input, 16 );
 800df80:	46ec      	mov	ip, sp
 800df82:	4623      	mov	r3, r4
 800df84:	f104 0b10 	add.w	fp, r4, #16
 800df88:	4666      	mov	r6, ip
 800df8a:	6818      	ldr	r0, [r3, #0]
 800df8c:	6859      	ldr	r1, [r3, #4]
 800df8e:	46e6      	mov	lr, ip
 800df90:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800df94:	3308      	adds	r3, #8
 800df96:	455b      	cmp	r3, fp
 800df98:	46f4      	mov	ip, lr
 800df9a:	d1f6      	bne.n	800df8a <mbedtls_aes_crypt_cbc.part.0+0x32>
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800df9c:	4621      	mov	r1, r4
 800df9e:	4648      	mov	r0, r9
 800dfa0:	f7ff fe30 	bl	800dc04 <mbedtls_internal_aes_decrypt>
            for( i = 0; i < 16; i++ )
 800dfa4:	f1a5 0310 	sub.w	r3, r5, #16
 800dfa8:	1e79      	subs	r1, r7, #1
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800dfaa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800dfae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
            for( i = 0; i < 16; i++ )
 800dfb2:	42ab      	cmp	r3, r5
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800dfb4:	ea82 0200 	eor.w	r2, r2, r0
 800dfb8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800dfba:	d1f6      	bne.n	800dfaa <mbedtls_aes_crypt_cbc.part.0+0x52>
            memcpy( iv, temp, 16 );
 800dfbc:	463a      	mov	r2, r7
 800dfbe:	4633      	mov	r3, r6
 800dfc0:	cb03      	ldmia	r3!, {r0, r1}
 800dfc2:	4553      	cmp	r3, sl
 800dfc4:	6010      	str	r0, [r2, #0]
 800dfc6:	6051      	str	r1, [r2, #4]
 800dfc8:	461e      	mov	r6, r3
 800dfca:	f102 0208 	add.w	r2, r2, #8
 800dfce:	d1f6      	bne.n	800dfbe <mbedtls_aes_crypt_cbc.part.0+0x66>
            input  += 16;
 800dfd0:	3410      	adds	r4, #16
            length -= 16;
 800dfd2:	3510      	adds	r5, #16
 800dfd4:	e7cc      	b.n	800df70 <mbedtls_aes_crypt_cbc.part.0+0x18>

0800dfd6 <mbedtls_aes_crypt_ecb>:
{
 800dfd6:	b410      	push	{r4}
 800dfd8:	460c      	mov	r4, r1
    if( mode == MBEDTLS_AES_ENCRYPT )
 800dfda:	2c01      	cmp	r4, #1
{
 800dfdc:	4611      	mov	r1, r2
 800dfde:	461a      	mov	r2, r3
    if( mode == MBEDTLS_AES_ENCRYPT )
 800dfe0:	d103      	bne.n	800dfea <mbedtls_aes_crypt_ecb+0x14>
}
 800dfe2:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800dfe6:	f7ff bc6d 	b.w	800d8c4 <mbedtls_internal_aes_encrypt>
}
 800dfea:	f85d 4b04 	ldr.w	r4, [sp], #4
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800dfee:	f7ff be09 	b.w	800dc04 <mbedtls_internal_aes_decrypt>

0800dff2 <mbedtls_aes_crypt_cbc>:
{
 800dff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff6:	4689      	mov	r9, r1
 800dff8:	4611      	mov	r1, r2
    if( length % 16 )
 800dffa:	070a      	lsls	r2, r1, #28
{
 800dffc:	461e      	mov	r6, r3
 800dffe:	4680      	mov	r8, r0
 800e000:	e9dd 3708 	ldrd	r3, r7, [sp, #32]
    if( length % 16 )
 800e004:	d12d      	bne.n	800e062 <mbedtls_aes_crypt_cbc+0x70>
    if( mode == MBEDTLS_AES_DECRYPT )
 800e006:	f1b9 0f00 	cmp.w	r9, #0
 800e00a:	d125      	bne.n	800e058 <mbedtls_aes_crypt_cbc+0x66>
 800e00c:	9708      	str	r7, [sp, #32]
 800e00e:	4632      	mov	r2, r6
}
 800e010:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	f7ff bfa0 	b.w	800df58 <mbedtls_aes_crypt_cbc.part.0>
            for( i = 0; i < 16; i++ )
 800e018:	2200      	movs	r2, #0
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800e01a:	5c8b      	ldrb	r3, [r1, r2]
 800e01c:	5cb0      	ldrb	r0, [r6, r2]
 800e01e:	4043      	eors	r3, r0
 800e020:	54ab      	strb	r3, [r5, r2]
            for( i = 0; i < 16; i++ )
 800e022:	3201      	adds	r2, #1
 800e024:	2a10      	cmp	r2, #16
 800e026:	d1f8      	bne.n	800e01a <mbedtls_aes_crypt_cbc+0x28>
            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800e028:	462b      	mov	r3, r5
 800e02a:	462a      	mov	r2, r5
 800e02c:	4649      	mov	r1, r9
 800e02e:	4640      	mov	r0, r8
 800e030:	f7ff ffd1 	bl	800dfd6 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800e034:	4633      	mov	r3, r6
 800e036:	f105 0210 	add.w	r2, r5, #16
 800e03a:	f855 1b04 	ldr.w	r1, [r5], #4
 800e03e:	f843 1b04 	str.w	r1, [r3], #4
 800e042:	4295      	cmp	r5, r2
 800e044:	d1f9      	bne.n	800e03a <mbedtls_aes_crypt_cbc+0x48>
            length -= 16;
 800e046:	3c10      	subs	r4, #16
 800e048:	ebaa 0104 	sub.w	r1, sl, r4
 800e04c:	1b3d      	subs	r5, r7, r4
        while( length > 0 )
 800e04e:	2c00      	cmp	r4, #0
 800e050:	d1e2      	bne.n	800e018 <mbedtls_aes_crypt_cbc+0x26>
    return( 0 );
 800e052:	4620      	mov	r0, r4
}
 800e054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e058:	460c      	mov	r4, r1
 800e05a:	eb03 0a01 	add.w	sl, r3, r1
 800e05e:	440f      	add	r7, r1
 800e060:	e7f2      	b.n	800e048 <mbedtls_aes_crypt_cbc+0x56>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800e062:	f06f 0021 	mvn.w	r0, #33	; 0x21
 800e066:	e7f5      	b.n	800e054 <mbedtls_aes_crypt_cbc+0x62>

0800e068 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
 800e068:	6803      	ldr	r3, [r0, #0]
{
 800e06a:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
 800e06c:	1acd      	subs	r5, r1, r3
 800e06e:	2d00      	cmp	r5, #0
 800e070:	dd0d      	ble.n	800e08e <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
 800e072:	f993 6000 	ldrsb.w	r6, [r3]
 800e076:	781c      	ldrb	r4, [r3, #0]
 800e078:	2e00      	cmp	r6, #0
 800e07a:	db0b      	blt.n	800e094 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
 800e07c:	1c5c      	adds	r4, r3, #1
 800e07e:	6004      	str	r4, [r0, #0]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
 800e084:	6803      	ldr	r3, [r0, #0]
 800e086:	1ac9      	subs	r1, r1, r3
 800e088:	6813      	ldr	r3, [r2, #0]
 800e08a:	428b      	cmp	r3, r1
 800e08c:	d932      	bls.n	800e0f4 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e08e:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
 800e092:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
 800e094:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 800e098:	3c01      	subs	r4, #1
 800e09a:	2c03      	cmp	r4, #3
 800e09c:	d827      	bhi.n	800e0ee <mbedtls_asn1_get_len+0x86>
 800e09e:	e8df f004 	tbb	[pc, r4]
 800e0a2:	0902      	.short	0x0902
 800e0a4:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
 800e0a6:	2d01      	cmp	r5, #1
 800e0a8:	d0f1      	beq.n	800e08e <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
 800e0aa:	785c      	ldrb	r4, [r3, #1]
 800e0ac:	6014      	str	r4, [r2, #0]
            (*p) += 2;
 800e0ae:	3302      	adds	r3, #2
            (*p) += 5;
 800e0b0:	6003      	str	r3, [r0, #0]
            break;
 800e0b2:	e7e7      	b.n	800e084 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
 800e0b4:	2d02      	cmp	r5, #2
 800e0b6:	ddea      	ble.n	800e08e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
 800e0b8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
 800e0bc:	ba64      	rev16	r4, r4
 800e0be:	b2a4      	uxth	r4, r4
 800e0c0:	6014      	str	r4, [r2, #0]
            (*p) += 3;
 800e0c2:	3303      	adds	r3, #3
 800e0c4:	e7f4      	b.n	800e0b0 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
 800e0c6:	2d03      	cmp	r5, #3
 800e0c8:	dde1      	ble.n	800e08e <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800e0ca:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
 800e0cc:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800e0ce:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
 800e0d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
 800e0d4:	78dd      	ldrb	r5, [r3, #3]
 800e0d6:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
 800e0d8:	6014      	str	r4, [r2, #0]
            (*p) += 4;
 800e0da:	3304      	adds	r3, #4
 800e0dc:	e7e8      	b.n	800e0b0 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
 800e0de:	2d04      	cmp	r5, #4
 800e0e0:	ddd5      	ble.n	800e08e <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
 800e0e2:	f8d3 4001 	ldr.w	r4, [r3, #1]
 800e0e6:	ba24      	rev	r4, r4
 800e0e8:	6014      	str	r4, [r2, #0]
            (*p) += 5;
 800e0ea:	3305      	adds	r3, #5
 800e0ec:	e7e0      	b.n	800e0b0 <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
 800e0ee:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e0f2:	e7ce      	b.n	800e092 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
 800e0f4:	2000      	movs	r0, #0
 800e0f6:	e7cc      	b.n	800e092 <mbedtls_asn1_get_len+0x2a>

0800e0f8 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
 800e0f8:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
 800e0fa:	6804      	ldr	r4, [r0, #0]
 800e0fc:	1b0e      	subs	r6, r1, r4
 800e0fe:	2e00      	cmp	r6, #0
 800e100:	dd07      	ble.n	800e112 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
 800e102:	7826      	ldrb	r6, [r4, #0]
 800e104:	429e      	cmp	r6, r3
 800e106:	d108      	bne.n	800e11a <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
 800e108:	3401      	adds	r4, #1
 800e10a:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
 800e10c:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
 800e10e:	f7ff bfab 	b.w	800e068 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e112:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
 800e116:	bc70      	pop	{r4, r5, r6}
 800e118:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
 800e11a:	f06f 0061 	mvn.w	r0, #97	; 0x61
 800e11e:	e7fa      	b.n	800e116 <mbedtls_asn1_get_tag+0x1e>

0800e120 <mbedtls_asn1_get_bool>:

int mbedtls_asn1_get_bool( unsigned char **p,
                   const unsigned char *end,
                   int *val )
{
 800e120:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800e122:	2301      	movs	r3, #1
{
 800e124:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800e126:	aa01      	add	r2, sp, #4
{
 800e128:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_BOOLEAN ) ) != 0 )
 800e12a:	f7ff ffe5 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e12e:	b950      	cbnz	r0, 800e146 <mbedtls_asn1_get_bool+0x26>
        return( ret );

    if( len != 1 )
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	2b01      	cmp	r3, #1
 800e134:	d109      	bne.n	800e14a <mbedtls_asn1_get_bool+0x2a>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = ( **p != 0 ) ? 1 : 0;
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e13c:	3a00      	subs	r2, #0
 800e13e:	bf18      	it	ne
 800e140:	2201      	movne	r2, #1
 800e142:	602a      	str	r2, [r5, #0]
    (*p)++;
 800e144:	6023      	str	r3, [r4, #0]

    return( 0 );
}
 800e146:	b003      	add	sp, #12
 800e148:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800e14a:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e14e:	e7fa      	b.n	800e146 <mbedtls_asn1_get_bool+0x26>

0800e150 <mbedtls_asn1_get_int>:

int mbedtls_asn1_get_int( unsigned char **p,
                  const unsigned char *end,
                  int *val )
{
 800e150:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e152:	2302      	movs	r3, #2
{
 800e154:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e156:	aa01      	add	r2, sp, #4
{
 800e158:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e15a:	f7ff ffcd 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e15e:	b968      	cbnz	r0, 800e17c <mbedtls_asn1_get_int+0x2c>
        return( ret );

    if( len == 0 || len > sizeof( int ) || ( **p & 0x80 ) != 0 )
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	3b01      	subs	r3, #1
 800e164:	2b03      	cmp	r3, #3
 800e166:	d814      	bhi.n	800e192 <mbedtls_asn1_get_int+0x42>
 800e168:	6823      	ldr	r3, [r4, #0]
 800e16a:	f993 3000 	ldrsb.w	r3, [r3]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	db0f      	blt.n	800e192 <mbedtls_asn1_get_int+0x42>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );

    *val = 0;
 800e172:	6028      	str	r0, [r5, #0]

    while( len-- > 0 )
 800e174:	9b01      	ldr	r3, [sp, #4]
 800e176:	1e5a      	subs	r2, r3, #1
 800e178:	9201      	str	r2, [sp, #4]
 800e17a:	b90b      	cbnz	r3, 800e180 <mbedtls_asn1_get_int+0x30>
        *val = ( *val << 8 ) | **p;
        (*p)++;
    }

    return( 0 );
}
 800e17c:	b003      	add	sp, #12
 800e17e:	bd30      	pop	{r4, r5, pc}
        *val = ( *val << 8 ) | **p;
 800e180:	6823      	ldr	r3, [r4, #0]
 800e182:	6829      	ldr	r1, [r5, #0]
 800e184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e188:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e18c:	602a      	str	r2, [r5, #0]
        (*p)++;
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	e7f0      	b.n	800e174 <mbedtls_asn1_get_int+0x24>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800e192:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e196:	e7f1      	b.n	800e17c <mbedtls_asn1_get_int+0x2c>

0800e198 <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
 800e198:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e19a:	2302      	movs	r3, #2
{
 800e19c:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e19e:	aa01      	add	r2, sp, #4
{
 800e1a0:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
 800e1a2:	f7ff ffa9 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e1a6:	b940      	cbnz	r0, 800e1ba <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
 800e1a8:	9a01      	ldr	r2, [sp, #4]
 800e1aa:	6821      	ldr	r1, [r4, #0]
 800e1ac:	4628      	mov	r0, r5
 800e1ae:	f000 fd2c 	bl	800ec0a <mbedtls_mpi_read_binary>

    *p += len;
 800e1b2:	6823      	ldr	r3, [r4, #0]
 800e1b4:	9a01      	ldr	r2, [sp, #4]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	6023      	str	r3, [r4, #0]

    return( ret );
}
 800e1ba:	b003      	add	sp, #12
 800e1bc:	bd30      	pop	{r4, r5, pc}

0800e1be <mbedtls_asn1_get_bitstring>:
#endif /* MBEDTLS_BIGNUM_C */

int mbedtls_asn1_get_bitstring( unsigned char **p, const unsigned char *end,
                        mbedtls_asn1_bitstring *bs)
{
 800e1be:	b570      	push	{r4, r5, r6, lr}
    int ret;

    /* Certificate type is a single byte bitstring */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e1c0:	2303      	movs	r3, #3
{
 800e1c2:	4605      	mov	r5, r0
 800e1c4:	460e      	mov	r6, r1
 800e1c6:	4614      	mov	r4, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &bs->len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e1c8:	f7ff ff96 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e1cc:	b988      	cbnz	r0, 800e1f2 <mbedtls_asn1_get_bitstring+0x34>
        return( ret );

    /* Check length, subtract one for actual bit string length */
    if( bs->len < 1 )
 800e1ce:	6812      	ldr	r2, [r2, #0]
 800e1d0:	b182      	cbz	r2, 800e1f4 <mbedtls_asn1_get_bitstring+0x36>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    bs->len -= 1;
 800e1d2:	1e53      	subs	r3, r2, #1
 800e1d4:	6023      	str	r3, [r4, #0]

    /* Get number of unused bits, ensure unused bits <= 7 */
    bs->unused_bits = **p;
 800e1d6:	682b      	ldr	r3, [r5, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	7123      	strb	r3, [r4, #4]
    if( bs->unused_bits > 7 )
 800e1dc:	2b07      	cmp	r3, #7
 800e1de:	d80c      	bhi.n	800e1fa <mbedtls_asn1_get_bitstring+0x3c>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
    (*p)++;
 800e1e0:	682b      	ldr	r3, [r5, #0]
 800e1e2:	1c59      	adds	r1, r3, #1

    /* Get actual bitstring */
    bs->p = *p;
    *p += bs->len;
 800e1e4:	4413      	add	r3, r2

    if( *p != end )
 800e1e6:	42b3      	cmp	r3, r6
    bs->p = *p;
 800e1e8:	60a1      	str	r1, [r4, #8]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e1ea:	bf18      	it	ne
 800e1ec:	f06f 0065 	mvnne.w	r0, #101	; 0x65
    *p += bs->len;
 800e1f0:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 800e1f2:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e1f4:	f06f 005f 	mvn.w	r0, #95	; 0x5f
 800e1f8:	e7fb      	b.n	800e1f2 <mbedtls_asn1_get_bitstring+0x34>
        return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
 800e1fa:	f06f 0063 	mvn.w	r0, #99	; 0x63
 800e1fe:	e7f8      	b.n	800e1f2 <mbedtls_asn1_get_bitstring+0x34>

0800e200 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
 800e200:	b538      	push	{r3, r4, r5, lr}
    int ret;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e202:	2303      	movs	r3, #3
{
 800e204:	4604      	mov	r4, r0
 800e206:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
 800e208:	f7ff ff76 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e20c:	b958      	cbnz	r0, 800e226 <mbedtls_asn1_get_bitstring_null+0x26>
        return( ret );

    if( (*len)-- < 2 || *(*p)++ != 0 )
 800e20e:	6813      	ldr	r3, [r2, #0]
 800e210:	1e5a      	subs	r2, r3, #1
 800e212:	2b01      	cmp	r3, #1
 800e214:	602a      	str	r2, [r5, #0]
 800e216:	d904      	bls.n	800e222 <mbedtls_asn1_get_bitstring_null+0x22>
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	1c5a      	adds	r2, r3, #1
 800e21c:	6022      	str	r2, [r4, #0]
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	b10b      	cbz	r3, 800e226 <mbedtls_asn1_get_bitstring_null+0x26>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e222:	f06f 0067 	mvn.w	r0, #103	; 0x67

    return( 0 );
}
 800e226:	bd38      	pop	{r3, r4, r5, pc}

0800e228 <mbedtls_asn1_get_sequence_of>:
 */
int mbedtls_asn1_get_sequence_of( unsigned char **p,
                          const unsigned char *end,
                          mbedtls_asn1_sequence *cur,
                          int tag)
{
 800e228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e22c:	4614      	mov	r4, r2
 800e22e:	4698      	mov	r8, r3
    int ret;
    size_t len;
    mbedtls_asn1_buf *buf;

    /* Get main sequence tag */
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e230:	aa01      	add	r2, sp, #4
 800e232:	2330      	movs	r3, #48	; 0x30
{
 800e234:	4606      	mov	r6, r0
 800e236:	460f      	mov	r7, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e238:	f7ff ff5e 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e23c:	4605      	mov	r5, r0
 800e23e:	b980      	cbnz	r0, 800e262 <mbedtls_asn1_get_sequence_of+0x3a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( *p + len != end )
 800e240:	6833      	ldr	r3, [r6, #0]
 800e242:	9a01      	ldr	r2, [sp, #4]
 800e244:	4413      	add	r3, r2
 800e246:	429f      	cmp	r7, r3
 800e248:	d109      	bne.n	800e25e <mbedtls_asn1_get_sequence_of+0x36>
        *p += buf->len;

        /* Allocate and assign next pointer */
        if( *p < end )
        {
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800e24a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800e2a4 <mbedtls_asn1_get_sequence_of+0x7c>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e24e:	1d22      	adds	r2, r4, #4
    while( *p < end )
 800e250:	6833      	ldr	r3, [r6, #0]
 800e252:	42bb      	cmp	r3, r7
 800e254:	d309      	bcc.n	800e26a <mbedtls_asn1_get_sequence_of+0x42>
            cur = cur->next;
        }
    }

    /* Set final sequence entry's next pointer to NULL */
    cur->next = NULL;
 800e256:	f04f 0300 	mov.w	r3, #0
 800e25a:	60e3      	str	r3, [r4, #12]

    if( *p != end )
 800e25c:	d001      	beq.n	800e262 <mbedtls_asn1_get_sequence_of+0x3a>
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e25e:	f06f 0565 	mvn.w	r5, #101	; 0x65

    return( 0 );
}
 800e262:	4628      	mov	r0, r5
 800e264:	b003      	add	sp, #12
 800e266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        buf->tag = **p;
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	6023      	str	r3, [r4, #0]
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e26e:	4639      	mov	r1, r7
 800e270:	4643      	mov	r3, r8
 800e272:	4630      	mov	r0, r6
 800e274:	f7ff ff40 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e278:	b978      	cbnz	r0, 800e29a <mbedtls_asn1_get_sequence_of+0x72>
        buf->p = *p;
 800e27a:	6833      	ldr	r3, [r6, #0]
        *p += buf->len;
 800e27c:	6861      	ldr	r1, [r4, #4]
        buf->p = *p;
 800e27e:	60a3      	str	r3, [r4, #8]
        *p += buf->len;
 800e280:	440b      	add	r3, r1
        if( *p < end )
 800e282:	42bb      	cmp	r3, r7
        *p += buf->len;
 800e284:	6033      	str	r3, [r6, #0]
        if( *p < end )
 800e286:	d2e3      	bcs.n	800e250 <mbedtls_asn1_get_sequence_of+0x28>
            cur->next = (mbedtls_asn1_sequence*)mbedtls_calloc( 1,
 800e288:	f8d9 3000 	ldr.w	r3, [r9]
 800e28c:	2110      	movs	r1, #16
 800e28e:	2001      	movs	r0, #1
 800e290:	4798      	blx	r3
 800e292:	60e0      	str	r0, [r4, #12]
            if( cur->next == NULL )
 800e294:	b118      	cbz	r0, 800e29e <mbedtls_asn1_get_sequence_of+0x76>
 800e296:	4604      	mov	r4, r0
 800e298:	e7d9      	b.n	800e24e <mbedtls_asn1_get_sequence_of+0x26>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &buf->len, tag ) ) != 0 )
 800e29a:	4605      	mov	r5, r0
 800e29c:	e7e1      	b.n	800e262 <mbedtls_asn1_get_sequence_of+0x3a>
                return( MBEDTLS_ERR_ASN1_ALLOC_FAILED );
 800e29e:	f06f 0569 	mvn.w	r5, #105	; 0x69
 800e2a2:	e7de      	b.n	800e262 <mbedtls_asn1_get_sequence_of+0x3a>
 800e2a4:	200005a0 	.word	0x200005a0

0800e2a8 <mbedtls_asn1_get_alg>:

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
 800e2a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2ac:	4690      	mov	r8, r2
 800e2ae:	461d      	mov	r5, r3
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e2b0:	aa01      	add	r2, sp, #4
 800e2b2:	2330      	movs	r3, #48	; 0x30
{
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 800e2b8:	f7ff ff1e 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e2bc:	4604      	mov	r4, r0
 800e2be:	bb00      	cbnz	r0, 800e302 <mbedtls_asn1_get_alg+0x5a>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
 800e2c0:	6837      	ldr	r7, [r6, #0]
 800e2c2:	eba9 0907 	sub.w	r9, r9, r7
 800e2c6:	f1b9 0f00 	cmp.w	r9, #0
 800e2ca:	dd36      	ble.n	800e33a <mbedtls_asn1_get_alg+0x92>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    end = *p + len;
 800e2cc:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
 800e2ce:	783b      	ldrb	r3, [r7, #0]
 800e2d0:	4642      	mov	r2, r8
    end = *p + len;
 800e2d2:	440f      	add	r7, r1
    alg->tag = **p;
 800e2d4:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
 800e2d8:	4639      	mov	r1, r7
 800e2da:	2306      	movs	r3, #6
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7ff ff0b 	bl	800e0f8 <mbedtls_asn1_get_tag>
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	b968      	cbnz	r0, 800e302 <mbedtls_asn1_get_alg+0x5a>
        return( ret );

    alg->p = *p;
 800e2e6:	6832      	ldr	r2, [r6, #0]
    *p += alg->len;
 800e2e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
 800e2ec:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
 800e2f0:	1853      	adds	r3, r2, r1

    if( *p == end )
 800e2f2:	42bb      	cmp	r3, r7
    *p += alg->len;
 800e2f4:	6033      	str	r3, [r6, #0]
    if( *p == end )
 800e2f6:	d10b      	bne.n	800e310 <mbedtls_asn1_get_alg+0x68>
 800e2f8:	f105 030c 	add.w	r3, r5, #12
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	429d      	cmp	r5, r3
 800e300:	d103      	bne.n	800e30a <mbedtls_asn1_get_alg+0x62>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
 800e302:	4620      	mov	r0, r4
 800e304:	b003      	add	sp, #12
 800e306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 800e30a:	f805 2b01 	strb.w	r2, [r5], #1
 800e30e:	e7f6      	b.n	800e2fe <mbedtls_asn1_get_alg+0x56>
    params->tag = **p;
 800e310:	5c51      	ldrb	r1, [r2, r1]
 800e312:	462a      	mov	r2, r5
    (*p)++;
 800e314:	3301      	adds	r3, #1
    params->tag = **p;
 800e316:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800e31a:	4630      	mov	r0, r6
    (*p)++;
 800e31c:	6033      	str	r3, [r6, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
 800e31e:	4639      	mov	r1, r7
 800e320:	f7ff fea2 	bl	800e068 <mbedtls_asn1_get_len>
 800e324:	b960      	cbnz	r0, 800e340 <mbedtls_asn1_get_alg+0x98>
    params->p = *p;
 800e326:	6833      	ldr	r3, [r6, #0]
    *p += params->len;
 800e328:	686a      	ldr	r2, [r5, #4]
    params->p = *p;
 800e32a:	60ab      	str	r3, [r5, #8]
    *p += params->len;
 800e32c:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e32e:	42bb      	cmp	r3, r7
    *p += params->len;
 800e330:	6033      	str	r3, [r6, #0]
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
 800e332:	bf18      	it	ne
 800e334:	f06f 0465 	mvnne.w	r4, #101	; 0x65
 800e338:	e7e3      	b.n	800e302 <mbedtls_asn1_get_alg+0x5a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
 800e33a:	f06f 045f 	mvn.w	r4, #95	; 0x5f
 800e33e:	e7e0      	b.n	800e302 <mbedtls_asn1_get_alg+0x5a>
 800e340:	4604      	mov	r4, r0
 800e342:	e7de      	b.n	800e302 <mbedtls_asn1_get_alg+0x5a>

0800e344 <mbedtls_asn1_get_alg_null>:

int mbedtls_asn1_get_alg_null( unsigned char **p,
                       const unsigned char *end,
                       mbedtls_asn1_buf *alg )
{
 800e344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int ret;
    mbedtls_asn1_buf params;

    memset( &params, 0, sizeof(mbedtls_asn1_buf) );
 800e346:	2300      	movs	r3, #0
 800e348:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e34c:	9303      	str	r3, [sp, #12]

    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, &params ) ) != 0 )
 800e34e:	ab01      	add	r3, sp, #4
 800e350:	f7ff ffaa 	bl	800e2a8 <mbedtls_asn1_get_alg>
 800e354:	b940      	cbnz	r0, 800e368 <mbedtls_asn1_get_alg_null+0x24>
        return( ret );

    if( ( params.tag != MBEDTLS_ASN1_NULL && params.tag != 0 ) || params.len != 0 )
 800e356:	9b01      	ldr	r3, [sp, #4]
 800e358:	2b05      	cmp	r3, #5
 800e35a:	d000      	beq.n	800e35e <mbedtls_asn1_get_alg_null+0x1a>
 800e35c:	b93b      	cbnz	r3, 800e36e <mbedtls_asn1_get_alg_null+0x2a>
 800e35e:	9b02      	ldr	r3, [sp, #8]
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e360:	2b00      	cmp	r3, #0
 800e362:	bf18      	it	ne
 800e364:	f06f 0067 	mvnne.w	r0, #103	; 0x67

    return( 0 );
}
 800e368:	b005      	add	sp, #20
 800e36a:	f85d fb04 	ldr.w	pc, [sp], #4
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 800e36e:	f06f 0067 	mvn.w	r0, #103	; 0x67
 800e372:	e7f9      	b.n	800e368 <mbedtls_asn1_get_alg_null+0x24>

0800e374 <mbedtls_asn1_write_len>:
#define mbedtls_free       free
#endif

int mbedtls_asn1_write_len( unsigned char **p, unsigned char *start, size_t len )
{
    if( len < 0x80 )
 800e374:	6803      	ldr	r3, [r0, #0]
 800e376:	2a7f      	cmp	r2, #127	; 0x7f
 800e378:	eba3 0101 	sub.w	r1, r3, r1
 800e37c:	d807      	bhi.n	800e38e <mbedtls_asn1_write_len+0x1a>
    {
        if( *p - start < 1 )
 800e37e:	2900      	cmp	r1, #0
 800e380:	dd69      	ble.n	800e456 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800e382:	1e59      	subs	r1, r3, #1
 800e384:	6001      	str	r1, [r0, #0]
 800e386:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 1 );
 800e38a:	2001      	movs	r0, #1
 800e38c:	4770      	bx	lr
    }

    if( len <= 0xFF )
 800e38e:	2aff      	cmp	r2, #255	; 0xff
 800e390:	d80d      	bhi.n	800e3ae <mbedtls_asn1_write_len+0x3a>
    {
        if( *p - start < 2 )
 800e392:	2901      	cmp	r1, #1
 800e394:	dd5f      	ble.n	800e456 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = (unsigned char) len;
 800e396:	1e59      	subs	r1, r3, #1
 800e398:	6001      	str	r1, [r0, #0]
 800e39a:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x81;
 800e39e:	6803      	ldr	r3, [r0, #0]
 800e3a0:	1e5a      	subs	r2, r3, #1
 800e3a2:	6002      	str	r2, [r0, #0]
 800e3a4:	2281      	movs	r2, #129	; 0x81
 800e3a6:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 2 );
 800e3aa:	2002      	movs	r0, #2
 800e3ac:	4770      	bx	lr
    }

    if( len <= 0xFFFF )
 800e3ae:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e3b2:	d213      	bcs.n	800e3dc <mbedtls_asn1_write_len+0x68>
    {
        if( *p - start < 3 )
 800e3b4:	2902      	cmp	r1, #2
 800e3b6:	dd4e      	ble.n	800e456 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e3b8:	1e59      	subs	r1, r3, #1
 800e3ba:	6001      	str	r1, [r0, #0]
 800e3bc:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e3c0:	6803      	ldr	r3, [r0, #0]
 800e3c2:	0a12      	lsrs	r2, r2, #8
 800e3c4:	1e59      	subs	r1, r3, #1
 800e3c6:	6001      	str	r1, [r0, #0]
 800e3c8:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x82;
 800e3cc:	6803      	ldr	r3, [r0, #0]
 800e3ce:	1e5a      	subs	r2, r3, #1
 800e3d0:	6002      	str	r2, [r0, #0]
 800e3d2:	2282      	movs	r2, #130	; 0x82
 800e3d4:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 3 );
 800e3d8:	2003      	movs	r0, #3
 800e3da:	4770      	bx	lr
    }

    if( len <= 0xFFFFFF )
 800e3dc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e3e0:	d219      	bcs.n	800e416 <mbedtls_asn1_write_len+0xa2>
    {
        if( *p - start < 4 )
 800e3e2:	2903      	cmp	r1, #3
 800e3e4:	dd37      	ble.n	800e456 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e3e6:	1e59      	subs	r1, r3, #1
 800e3e8:	6001      	str	r1, [r0, #0]
 800e3ea:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e3ee:	6803      	ldr	r3, [r0, #0]
 800e3f0:	1e59      	subs	r1, r3, #1
 800e3f2:	6001      	str	r1, [r0, #0]
 800e3f4:	0a11      	lsrs	r1, r2, #8
 800e3f6:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800e3fa:	6803      	ldr	r3, [r0, #0]
 800e3fc:	0c12      	lsrs	r2, r2, #16
 800e3fe:	1e59      	subs	r1, r3, #1
 800e400:	6001      	str	r1, [r0, #0]
 800e402:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x83;
 800e406:	6803      	ldr	r3, [r0, #0]
 800e408:	1e5a      	subs	r2, r3, #1
 800e40a:	6002      	str	r2, [r0, #0]
 800e40c:	2283      	movs	r2, #131	; 0x83
 800e40e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 4 );
 800e412:	2004      	movs	r0, #4
 800e414:	4770      	bx	lr
 */
#if defined(MBEDTLS_HAVE_INT64)
    if( len <= 0xFFFFFFFF )
#endif
    {
        if( *p - start < 5 )
 800e416:	2904      	cmp	r1, #4
 800e418:	dd1d      	ble.n	800e456 <mbedtls_asn1_write_len+0xe2>
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

        *--(*p) = ( len       ) & 0xFF;
 800e41a:	1e59      	subs	r1, r3, #1
 800e41c:	6001      	str	r1, [r0, #0]
 800e41e:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = ( len >>  8 ) & 0xFF;
 800e422:	6803      	ldr	r3, [r0, #0]
 800e424:	1e59      	subs	r1, r3, #1
 800e426:	6001      	str	r1, [r0, #0]
 800e428:	0a11      	lsrs	r1, r2, #8
 800e42a:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 16 ) & 0xFF;
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	1e59      	subs	r1, r3, #1
 800e432:	6001      	str	r1, [r0, #0]
 800e434:	0c11      	lsrs	r1, r2, #16
 800e436:	f803 1c01 	strb.w	r1, [r3, #-1]
        *--(*p) = ( len >> 24 ) & 0xFF;
 800e43a:	6803      	ldr	r3, [r0, #0]
 800e43c:	0e12      	lsrs	r2, r2, #24
 800e43e:	1e59      	subs	r1, r3, #1
 800e440:	6001      	str	r1, [r0, #0]
 800e442:	f803 2c01 	strb.w	r2, [r3, #-1]
        *--(*p) = 0x84;
 800e446:	6803      	ldr	r3, [r0, #0]
 800e448:	1e5a      	subs	r2, r3, #1
 800e44a:	6002      	str	r2, [r0, #0]
 800e44c:	2284      	movs	r2, #132	; 0x84
 800e44e:	f803 2c01 	strb.w	r2, [r3, #-1]
        return( 5 );
 800e452:	2005      	movs	r0, #5
 800e454:	4770      	bx	lr
            return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e456:	f06f 006b 	mvn.w	r0, #107	; 0x6b
 * On 32 bit platforms, this return statement will not be reached
 */
#if defined(MBEDTLS_HAVE_INT64)
    return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
#endif
}
 800e45a:	4770      	bx	lr

0800e45c <mbedtls_asn1_write_tag>:

int mbedtls_asn1_write_tag( unsigned char **p, unsigned char *start, unsigned char tag )
{
    if( *p - start < 1 )
 800e45c:	6803      	ldr	r3, [r0, #0]
 800e45e:	1a59      	subs	r1, r3, r1
 800e460:	2900      	cmp	r1, #0
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );

    *--(*p) = tag;
 800e462:	bfc1      	itttt	gt
 800e464:	f103 31ff 	addgt.w	r1, r3, #4294967295
 800e468:	6001      	strgt	r1, [r0, #0]

    return( 1 );
 800e46a:	2001      	movgt	r0, #1
    *--(*p) = tag;
 800e46c:	f803 2c01 	strbgt.w	r2, [r3, #-1]
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e470:	bfd8      	it	le
 800e472:	f06f 006b 	mvnle.w	r0, #107	; 0x6b
}
 800e476:	4770      	bx	lr

0800e478 <mbedtls_asn1_write_mpi>:
    return( (int) len );
}

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_write_mpi( unsigned char **p, unsigned char *start, const mbedtls_mpi *X )
{
 800e478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e47c:	4607      	mov	r7, r0
    int ret;
    size_t len = 0;

    // Write the MPI
    //
    len = mbedtls_mpi_size( X );
 800e47e:	4610      	mov	r0, r2
{
 800e480:	4688      	mov	r8, r1
 800e482:	4615      	mov	r5, r2
    len = mbedtls_mpi_size( X );
 800e484:	f000 fbbb 	bl	800ebfe <mbedtls_mpi_size>

    if( *p < start || (size_t)( *p - start ) < len )
 800e488:	6839      	ldr	r1, [r7, #0]
 800e48a:	4541      	cmp	r1, r8
    len = mbedtls_mpi_size( X );
 800e48c:	4606      	mov	r6, r0
    if( *p < start || (size_t)( *p - start ) < len )
 800e48e:	d204      	bcs.n	800e49a <mbedtls_asn1_write_mpi+0x22>
        return( MBEDTLS_ERR_ASN1_BUF_TOO_SMALL );
 800e490:	f06f 046b 	mvn.w	r4, #107	; 0x6b

    ret = (int) len;

cleanup:
    return( ret );
}
 800e494:	4620      	mov	r0, r4
 800e496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *p < start || (size_t)( *p - start ) < len )
 800e49a:	eba1 0208 	sub.w	r2, r1, r8
 800e49e:	4282      	cmp	r2, r0
 800e4a0:	d3f6      	bcc.n	800e490 <mbedtls_asn1_write_mpi+0x18>
    (*p) -= len;
 800e4a2:	1a09      	subs	r1, r1, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e4a4:	4602      	mov	r2, r0
    (*p) -= len;
 800e4a6:	6039      	str	r1, [r7, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( X, *p, len ) );
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	f000 fbe1 	bl	800ec70 <mbedtls_mpi_write_binary>
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d1ef      	bne.n	800e494 <mbedtls_asn1_write_mpi+0x1c>
    if( X->s ==1 && **p & 0x80 )
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d10d      	bne.n	800e4d6 <mbedtls_asn1_write_mpi+0x5e>
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	f993 2000 	ldrsb.w	r2, [r3]
 800e4c0:	2a00      	cmp	r2, #0
 800e4c2:	da08      	bge.n	800e4d6 <mbedtls_asn1_write_mpi+0x5e>
        if( *p - start < 1 )
 800e4c4:	eba3 0208 	sub.w	r2, r3, r8
 800e4c8:	2a00      	cmp	r2, #0
 800e4ca:	dde1      	ble.n	800e490 <mbedtls_asn1_write_mpi+0x18>
        *--(*p) = 0x00;
 800e4cc:	1e5a      	subs	r2, r3, #1
 800e4ce:	603a      	str	r2, [r7, #0]
        len += 1;
 800e4d0:	3601      	adds	r6, #1
        *--(*p) = 0x00;
 800e4d2:	f803 0c01 	strb.w	r0, [r3, #-1]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e4d6:	4632      	mov	r2, r6
 800e4d8:	4641      	mov	r1, r8
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7ff ff4a 	bl	800e374 <mbedtls_asn1_write_len>
 800e4e0:	1e04      	subs	r4, r0, #0
 800e4e2:	dbd7      	blt.n	800e494 <mbedtls_asn1_write_mpi+0x1c>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	4641      	mov	r1, r8
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7ff ffb7 	bl	800e45c <mbedtls_asn1_write_tag>
 800e4ee:	1e03      	subs	r3, r0, #0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( p, start, len ) );
 800e4f0:	bfa6      	itte	ge
 800e4f2:	19a0      	addge	r0, r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( p, start, MBEDTLS_ASN1_INTEGER ) );
 800e4f4:	181c      	addge	r4, r3, r0
    ret = (int) len;
 800e4f6:	461c      	movlt	r4, r3
 800e4f8:	e7cc      	b.n	800e494 <mbedtls_asn1_write_mpi+0x1c>
	...

0800e4fc <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 800e4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 800e500:	f04f 0c00 	mov.w	ip, #0
{
 800e504:	9e07      	ldr	r6, [sp, #28]
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] == '=' && ++j > 2 )
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e506:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800e630 <mbedtls_base64_decode+0x134>
    for( i = n = j = 0; i < slen; i++ )
 800e50a:	4664      	mov	r4, ip
 800e50c:	4665      	mov	r5, ip
 800e50e:	42b5      	cmp	r5, r6
 800e510:	d30a      	bcc.n	800e528 <mbedtls_base64_decode+0x2c>
 800e512:	462e      	mov	r6, r5
 800e514:	e004      	b.n	800e520 <mbedtls_base64_decode+0x24>
            ++i;
 800e516:	3501      	adds	r5, #1
        while( i < slen && src[i] == ' ' )
 800e518:	42ae      	cmp	r6, r5
            ++x;
 800e51a:	f10e 0e01 	add.w	lr, lr, #1
        while( i < slen && src[i] == ' ' )
 800e51e:	d105      	bne.n	800e52c <mbedtls_base64_decode+0x30>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );

        n++;
    }

    if( n == 0 )
 800e520:	bbb4      	cbnz	r4, 800e590 <mbedtls_base64_decode+0x94>
    {
        *olen = 0;
 800e522:	6014      	str	r4, [r2, #0]
        }
    }

    *olen = p - dst;

    return( 0 );
 800e524:	2000      	movs	r0, #0
 800e526:	e052      	b.n	800e5ce <mbedtls_base64_decode+0xd2>
        x = 0;
 800e528:	f04f 0e00 	mov.w	lr, #0
        while( i < slen && src[i] == ' ' )
 800e52c:	5d5f      	ldrb	r7, [r3, r5]
 800e52e:	2f20      	cmp	r7, #32
 800e530:	d0f1      	beq.n	800e516 <mbedtls_base64_decode+0x1a>
        if( i == slen )
 800e532:	42ae      	cmp	r6, r5
 800e534:	d0f4      	beq.n	800e520 <mbedtls_base64_decode+0x24>
        if( ( slen - i ) >= 2 &&
 800e536:	eba6 0905 	sub.w	r9, r6, r5
 800e53a:	f1b9 0f01 	cmp.w	r9, #1
 800e53e:	d915      	bls.n	800e56c <mbedtls_base64_decode+0x70>
 800e540:	2f0d      	cmp	r7, #13
 800e542:	d113      	bne.n	800e56c <mbedtls_base64_decode+0x70>
            src[i] == '\r' && src[i + 1] == '\n' )
 800e544:	eb03 0905 	add.w	r9, r3, r5
 800e548:	f899 9001 	ldrb.w	r9, [r9, #1]
 800e54c:	f1b9 0f0a 	cmp.w	r9, #10
        if( src[i] == '\n' )
 800e550:	d01c      	beq.n	800e58c <mbedtls_base64_decode+0x90>
        if( x != 0 )
 800e552:	f1be 0f00 	cmp.w	lr, #0
 800e556:	d106      	bne.n	800e566 <mbedtls_base64_decode+0x6a>
        if( src[i] == '=' && ++j > 2 )
 800e558:	2f3d      	cmp	r7, #61	; 0x3d
 800e55a:	d109      	bne.n	800e570 <mbedtls_base64_decode+0x74>
 800e55c:	f10c 0c01 	add.w	ip, ip, #1
 800e560:	f1bc 0f02 	cmp.w	ip, #2
 800e564:	d907      	bls.n	800e576 <mbedtls_base64_decode+0x7a>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 800e566:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 800e56a:	e030      	b.n	800e5ce <mbedtls_base64_decode+0xd2>
        if( src[i] == '\n' )
 800e56c:	2f0a      	cmp	r7, #10
 800e56e:	e7ef      	b.n	800e550 <mbedtls_base64_decode+0x54>
        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 800e570:	f017 0f80 	tst.w	r7, #128	; 0x80
 800e574:	d1f7      	bne.n	800e566 <mbedtls_base64_decode+0x6a>
 800e576:	4447      	add	r7, r8
 800e578:	f897 7040 	ldrb.w	r7, [r7, #64]	; 0x40
 800e57c:	2f7f      	cmp	r7, #127	; 0x7f
 800e57e:	d0f2      	beq.n	800e566 <mbedtls_base64_decode+0x6a>
        if( base64_dec_map[src[i]] < 64 && j != 0 )
 800e580:	2f3f      	cmp	r7, #63	; 0x3f
 800e582:	d802      	bhi.n	800e58a <mbedtls_base64_decode+0x8e>
 800e584:	f1bc 0f00 	cmp.w	ip, #0
 800e588:	d1ed      	bne.n	800e566 <mbedtls_base64_decode+0x6a>
        n++;
 800e58a:	3401      	adds	r4, #1
    for( i = n = j = 0; i < slen; i++ )
 800e58c:	3501      	adds	r5, #1
 800e58e:	e7be      	b.n	800e50e <mbedtls_base64_decode+0x12>
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 800e590:	f004 0707 	and.w	r7, r4, #7
 800e594:	2506      	movs	r5, #6
 800e596:	08e4      	lsrs	r4, r4, #3
 800e598:	436f      	muls	r7, r5
 800e59a:	436c      	muls	r4, r5
 800e59c:	3707      	adds	r7, #7
    n -= j;
 800e59e:	eba4 040c 	sub.w	r4, r4, ip
 800e5a2:	eb04 04d7 	add.w	r4, r4, r7, lsr #3
    if( dst == NULL || dlen < n )
 800e5a6:	b178      	cbz	r0, 800e5c8 <mbedtls_base64_decode+0xcc>
 800e5a8:	428c      	cmp	r4, r1
 800e5aa:	d80d      	bhi.n	800e5c8 <mbedtls_base64_decode+0xcc>
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e5ac:	2700      	movs	r7, #0
        j -= ( base64_dec_map[*src] == 64 );
 800e5ae:	f8df e080 	ldr.w	lr, [pc, #128]	; 800e630 <mbedtls_base64_decode+0x134>
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e5b2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800e634 <mbedtls_base64_decode+0x138>
 800e5b6:	441e      	add	r6, r3
    if( dst == NULL || dlen < n )
 800e5b8:	4601      	mov	r1, r0
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e5ba:	2503      	movs	r5, #3
 800e5bc:	463c      	mov	r4, r7
 800e5be:	429e      	cmp	r6, r3
 800e5c0:	d107      	bne.n	800e5d2 <mbedtls_base64_decode+0xd6>
    *olen = p - dst;
 800e5c2:	1a09      	subs	r1, r1, r0
 800e5c4:	6011      	str	r1, [r2, #0]
 800e5c6:	e7ad      	b.n	800e524 <mbedtls_base64_decode+0x28>
        *olen = n;
 800e5c8:	6014      	str	r4, [r2, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 800e5ca:	f06f 0029 	mvn.w	r0, #41	; 0x29
}
 800e5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 800e5d2:	f813 9b01 	ldrb.w	r9, [r3], #1
 800e5d6:	f1a9 0c0a 	sub.w	ip, r9, #10
 800e5da:	fa5f fc8c 	uxtb.w	ip, ip
 800e5de:	f1bc 0f16 	cmp.w	ip, #22
 800e5e2:	d804      	bhi.n	800e5ee <mbedtls_base64_decode+0xf2>
 800e5e4:	fa28 fc0c 	lsr.w	ip, r8, ip
 800e5e8:	f01c 0f01 	tst.w	ip, #1
 800e5ec:	d1e7      	bne.n	800e5be <mbedtls_base64_decode+0xc2>
        j -= ( base64_dec_map[*src] == 64 );
 800e5ee:	44f1      	add	r9, lr
        if( ++n == 4 )
 800e5f0:	3401      	adds	r4, #1
        j -= ( base64_dec_map[*src] == 64 );
 800e5f2:	f899 c040 	ldrb.w	ip, [r9, #64]	; 0x40
 800e5f6:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 800e5fa:	bf08      	it	eq
 800e5fc:	3d01      	subeq	r5, #1
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e5fe:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
        if( ++n == 4 )
 800e602:	2c04      	cmp	r4, #4
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 800e604:	ea4c 1787 	orr.w	r7, ip, r7, lsl #6
        if( ++n == 4 )
 800e608:	d1d9      	bne.n	800e5be <mbedtls_base64_decode+0xc2>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e60a:	b17d      	cbz	r5, 800e62c <mbedtls_base64_decode+0x130>
 800e60c:	0c3c      	lsrs	r4, r7, #16
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e60e:	2d01      	cmp	r5, #1
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e610:	700c      	strb	r4, [r1, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e612:	d102      	bne.n	800e61a <mbedtls_base64_decode+0x11e>
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 800e614:	3101      	adds	r1, #1
            n = 0;
 800e616:	2400      	movs	r4, #0
 800e618:	e7d1      	b.n	800e5be <mbedtls_base64_decode+0xc2>
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e61a:	2d02      	cmp	r5, #2
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e61c:	ea4f 2417 	mov.w	r4, r7, lsr #8
 800e620:	704c      	strb	r4, [r1, #1]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e622:	bf16      	itet	ne
 800e624:	708f      	strbne	r7, [r1, #2]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 800e626:	3102      	addeq	r1, #2
            if( j > 2 ) *p++ = (unsigned char)( x       );
 800e628:	3103      	addne	r1, #3
 800e62a:	e7f4      	b.n	800e616 <mbedtls_base64_decode+0x11a>
            n = 0;
 800e62c:	462c      	mov	r4, r5
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 800e62e:	e7c6      	b.n	800e5be <mbedtls_base64_decode+0xc2>
 800e630:	0802a958 	.word	0x0802a958
 800e634:	00400009 	.word	0x00400009

0800e638 <mpi_sub_hlp>:
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800e638:	2300      	movs	r3, #0
{
 800e63a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e63c:	1f16      	subs	r6, r2, #4
    for( i = c = 0; i < n; i++, s++, d++ )
 800e63e:	461c      	mov	r4, r3
 800e640:	4284      	cmp	r4, r0
 800e642:	d103      	bne.n	800e64c <mpi_sub_hlp+0x14>
 800e644:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    while( c != 0 )
 800e648:	b9b3      	cbnz	r3, 800e678 <mpi_sub_hlp+0x40>
    {
        z = ( *d < c ); *d -= c;
        c = z; i++; d++;
    }
}
 800e64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
 800e64c:	f856 cf04 	ldr.w	ip, [r6, #4]!
 800e650:	ebac 0503 	sub.w	r5, ip, r3
 800e654:	6035      	str	r5, [r6, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800e656:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800e65a:	42bd      	cmp	r5, r7
 800e65c:	bf2c      	ite	cs
 800e65e:	f04f 0e00 	movcs.w	lr, #0
 800e662:	f04f 0e01 	movcc.w	lr, #1
 800e666:	1bed      	subs	r5, r5, r7
 800e668:	459c      	cmp	ip, r3
 800e66a:	bf2c      	ite	cs
 800e66c:	4673      	movcs	r3, lr
 800e66e:	f10e 0301 	addcc.w	r3, lr, #1
 800e672:	6035      	str	r5, [r6, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800e674:	3401      	adds	r4, #1
 800e676:	e7e3      	b.n	800e640 <mpi_sub_hlp+0x8>
        z = ( *d < c ); *d -= c;
 800e678:	6811      	ldr	r1, [r2, #0]
 800e67a:	1ac8      	subs	r0, r1, r3
        c = z; i++; d++;
 800e67c:	4299      	cmp	r1, r3
        z = ( *d < c ); *d -= c;
 800e67e:	f842 0b04 	str.w	r0, [r2], #4
        c = z; i++; d++;
 800e682:	bf2c      	ite	cs
 800e684:	2300      	movcs	r3, #0
 800e686:	2301      	movcc	r3, #1
 800e688:	e7de      	b.n	800e648 <mpi_sub_hlp+0x10>

0800e68a <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800e68a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e68c:	b087      	sub	sp, #28
 800e68e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e692:	9301      	str	r3, [sp, #4]
    mbedtls_mpi_uint c = 0, t = 0;
 800e694:	2300      	movs	r3, #0
{
 800e696:	4684      	mov	ip, r0
    mbedtls_mpi_uint c = 0, t = 0;
 800e698:	9305      	str	r3, [sp, #20]
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800e69a:	4686      	mov	lr, r0
 800e69c:	f1be 0f0f 	cmp.w	lr, #15
 800e6a0:	f200 8085 	bhi.w	800e7ae <mpi_mul_hlp+0x124>
 800e6a4:	ea4f 131c 	mov.w	r3, ip, lsr #4
 800e6a8:	f06f 000f 	mvn.w	r0, #15
 800e6ac:	fb00 cc03 	mla	ip, r0, r3, ip
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800e6b0:	f1bc 0f07 	cmp.w	ip, #7
 800e6b4:	d968      	bls.n	800e788 <mpi_mul_hlp+0xfe>
    {
        MULADDC_INIT
 800e6b6:	9803      	ldr	r0, [sp, #12]
 800e6b8:	9902      	ldr	r1, [sp, #8]
 800e6ba:	9a05      	ldr	r2, [sp, #20]
 800e6bc:	9b01      	ldr	r3, [sp, #4]
 800e6be:	f850 4b04 	ldr.w	r4, [r0], #4
 800e6c2:	f04f 0500 	mov.w	r5, #0
 800e6c6:	680e      	ldr	r6, [r1, #0]
 800e6c8:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6cc:	18b7      	adds	r7, r6, r2
 800e6ce:	f145 0200 	adc.w	r2, r5, #0
 800e6d2:	f841 7b04 	str.w	r7, [r1], #4
 800e6d6:	f850 4b04 	ldr.w	r4, [r0], #4
 800e6da:	f04f 0500 	mov.w	r5, #0
 800e6de:	680e      	ldr	r6, [r1, #0]
 800e6e0:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6e4:	18b7      	adds	r7, r6, r2
 800e6e6:	f145 0200 	adc.w	r2, r5, #0
 800e6ea:	f841 7b04 	str.w	r7, [r1], #4
 800e6ee:	f850 4b04 	ldr.w	r4, [r0], #4
 800e6f2:	f04f 0500 	mov.w	r5, #0
 800e6f6:	680e      	ldr	r6, [r1, #0]
 800e6f8:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e6fc:	18b7      	adds	r7, r6, r2
 800e6fe:	f145 0200 	adc.w	r2, r5, #0
 800e702:	f841 7b04 	str.w	r7, [r1], #4
 800e706:	f850 4b04 	ldr.w	r4, [r0], #4
 800e70a:	f04f 0500 	mov.w	r5, #0
 800e70e:	680e      	ldr	r6, [r1, #0]
 800e710:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e714:	18b7      	adds	r7, r6, r2
 800e716:	f145 0200 	adc.w	r2, r5, #0
 800e71a:	f841 7b04 	str.w	r7, [r1], #4
 800e71e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e722:	f04f 0500 	mov.w	r5, #0
 800e726:	680e      	ldr	r6, [r1, #0]
 800e728:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e72c:	18b7      	adds	r7, r6, r2
 800e72e:	f145 0200 	adc.w	r2, r5, #0
 800e732:	f841 7b04 	str.w	r7, [r1], #4
 800e736:	f850 4b04 	ldr.w	r4, [r0], #4
 800e73a:	f04f 0500 	mov.w	r5, #0
 800e73e:	680e      	ldr	r6, [r1, #0]
 800e740:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e744:	18b7      	adds	r7, r6, r2
 800e746:	f145 0200 	adc.w	r2, r5, #0
 800e74a:	f841 7b04 	str.w	r7, [r1], #4
 800e74e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e752:	f04f 0500 	mov.w	r5, #0
 800e756:	680e      	ldr	r6, [r1, #0]
 800e758:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e75c:	18b7      	adds	r7, r6, r2
 800e75e:	f145 0200 	adc.w	r2, r5, #0
 800e762:	f841 7b04 	str.w	r7, [r1], #4
 800e766:	f850 4b04 	ldr.w	r4, [r0], #4
 800e76a:	f04f 0500 	mov.w	r5, #0
 800e76e:	680e      	ldr	r6, [r1, #0]
 800e770:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e774:	18b7      	adds	r7, r6, r2
 800e776:	f145 0200 	adc.w	r2, r5, #0
 800e77a:	f841 7b04 	str.w	r7, [r1], #4
 800e77e:	9205      	str	r2, [sp, #20]
 800e780:	9102      	str	r1, [sp, #8]
 800e782:	9003      	str	r0, [sp, #12]
    for( ; i >= 8; i -= 8 )
 800e784:	f1ac 0c08 	sub.w	ip, ip, #8
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800e788:	f1bc 0f00 	cmp.w	ip, #0
 800e78c:	f040 80d9 	bne.w	800e942 <mpi_mul_hlp+0x2b8>
 800e790:	9a02      	ldr	r2, [sp, #8]
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
 800e792:	9905      	ldr	r1, [sp, #20]
 800e794:	6813      	ldr	r3, [r2, #0]
 800e796:	440b      	add	r3, r1
 800e798:	f842 3b04 	str.w	r3, [r2], #4
 800e79c:	9905      	ldr	r1, [sp, #20]
 800e79e:	428b      	cmp	r3, r1
 800e7a0:	bf34      	ite	cc
 800e7a2:	2301      	movcc	r3, #1
 800e7a4:	2300      	movcs	r3, #0
 800e7a6:	9305      	str	r3, [sp, #20]
    }
    while( c != 0 );
 800e7a8:	d3f3      	bcc.n	800e792 <mpi_mul_hlp+0x108>
}
 800e7aa:	b007      	add	sp, #28
 800e7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for( ; i >= 16; i -= 16 )
 800e7ae:	f1ae 0e10 	sub.w	lr, lr, #16
        MULADDC_INIT
 800e7b2:	9803      	ldr	r0, [sp, #12]
 800e7b4:	9902      	ldr	r1, [sp, #8]
 800e7b6:	9a05      	ldr	r2, [sp, #20]
 800e7b8:	9b01      	ldr	r3, [sp, #4]
 800e7ba:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7be:	f04f 0500 	mov.w	r5, #0
 800e7c2:	680e      	ldr	r6, [r1, #0]
 800e7c4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7c8:	18b7      	adds	r7, r6, r2
 800e7ca:	f145 0200 	adc.w	r2, r5, #0
 800e7ce:	f841 7b04 	str.w	r7, [r1], #4
 800e7d2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7d6:	f04f 0500 	mov.w	r5, #0
 800e7da:	680e      	ldr	r6, [r1, #0]
 800e7dc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7e0:	18b7      	adds	r7, r6, r2
 800e7e2:	f145 0200 	adc.w	r2, r5, #0
 800e7e6:	f841 7b04 	str.w	r7, [r1], #4
 800e7ea:	f850 4b04 	ldr.w	r4, [r0], #4
 800e7ee:	f04f 0500 	mov.w	r5, #0
 800e7f2:	680e      	ldr	r6, [r1, #0]
 800e7f4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e7f8:	18b7      	adds	r7, r6, r2
 800e7fa:	f145 0200 	adc.w	r2, r5, #0
 800e7fe:	f841 7b04 	str.w	r7, [r1], #4
 800e802:	f850 4b04 	ldr.w	r4, [r0], #4
 800e806:	f04f 0500 	mov.w	r5, #0
 800e80a:	680e      	ldr	r6, [r1, #0]
 800e80c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e810:	18b7      	adds	r7, r6, r2
 800e812:	f145 0200 	adc.w	r2, r5, #0
 800e816:	f841 7b04 	str.w	r7, [r1], #4
 800e81a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e81e:	f04f 0500 	mov.w	r5, #0
 800e822:	680e      	ldr	r6, [r1, #0]
 800e824:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e828:	18b7      	adds	r7, r6, r2
 800e82a:	f145 0200 	adc.w	r2, r5, #0
 800e82e:	f841 7b04 	str.w	r7, [r1], #4
 800e832:	f850 4b04 	ldr.w	r4, [r0], #4
 800e836:	f04f 0500 	mov.w	r5, #0
 800e83a:	680e      	ldr	r6, [r1, #0]
 800e83c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e840:	18b7      	adds	r7, r6, r2
 800e842:	f145 0200 	adc.w	r2, r5, #0
 800e846:	f841 7b04 	str.w	r7, [r1], #4
 800e84a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e84e:	f04f 0500 	mov.w	r5, #0
 800e852:	680e      	ldr	r6, [r1, #0]
 800e854:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e858:	18b7      	adds	r7, r6, r2
 800e85a:	f145 0200 	adc.w	r2, r5, #0
 800e85e:	f841 7b04 	str.w	r7, [r1], #4
 800e862:	f850 4b04 	ldr.w	r4, [r0], #4
 800e866:	f04f 0500 	mov.w	r5, #0
 800e86a:	680e      	ldr	r6, [r1, #0]
 800e86c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e870:	18b7      	adds	r7, r6, r2
 800e872:	f145 0200 	adc.w	r2, r5, #0
 800e876:	f841 7b04 	str.w	r7, [r1], #4
 800e87a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e87e:	f04f 0500 	mov.w	r5, #0
 800e882:	680e      	ldr	r6, [r1, #0]
 800e884:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e888:	18b7      	adds	r7, r6, r2
 800e88a:	f145 0200 	adc.w	r2, r5, #0
 800e88e:	f841 7b04 	str.w	r7, [r1], #4
 800e892:	f850 4b04 	ldr.w	r4, [r0], #4
 800e896:	f04f 0500 	mov.w	r5, #0
 800e89a:	680e      	ldr	r6, [r1, #0]
 800e89c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8a0:	18b7      	adds	r7, r6, r2
 800e8a2:	f145 0200 	adc.w	r2, r5, #0
 800e8a6:	f841 7b04 	str.w	r7, [r1], #4
 800e8aa:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8ae:	f04f 0500 	mov.w	r5, #0
 800e8b2:	680e      	ldr	r6, [r1, #0]
 800e8b4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8b8:	18b7      	adds	r7, r6, r2
 800e8ba:	f145 0200 	adc.w	r2, r5, #0
 800e8be:	f841 7b04 	str.w	r7, [r1], #4
 800e8c2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8c6:	f04f 0500 	mov.w	r5, #0
 800e8ca:	680e      	ldr	r6, [r1, #0]
 800e8cc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8d0:	18b7      	adds	r7, r6, r2
 800e8d2:	f145 0200 	adc.w	r2, r5, #0
 800e8d6:	f841 7b04 	str.w	r7, [r1], #4
 800e8da:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8de:	f04f 0500 	mov.w	r5, #0
 800e8e2:	680e      	ldr	r6, [r1, #0]
 800e8e4:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e8e8:	18b7      	adds	r7, r6, r2
 800e8ea:	f145 0200 	adc.w	r2, r5, #0
 800e8ee:	f841 7b04 	str.w	r7, [r1], #4
 800e8f2:	f850 4b04 	ldr.w	r4, [r0], #4
 800e8f6:	f04f 0500 	mov.w	r5, #0
 800e8fa:	680e      	ldr	r6, [r1, #0]
 800e8fc:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e900:	18b7      	adds	r7, r6, r2
 800e902:	f145 0200 	adc.w	r2, r5, #0
 800e906:	f841 7b04 	str.w	r7, [r1], #4
 800e90a:	f850 4b04 	ldr.w	r4, [r0], #4
 800e90e:	f04f 0500 	mov.w	r5, #0
 800e912:	680e      	ldr	r6, [r1, #0]
 800e914:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e918:	18b7      	adds	r7, r6, r2
 800e91a:	f145 0200 	adc.w	r2, r5, #0
 800e91e:	f841 7b04 	str.w	r7, [r1], #4
 800e922:	f850 4b04 	ldr.w	r4, [r0], #4
 800e926:	f04f 0500 	mov.w	r5, #0
 800e92a:	680e      	ldr	r6, [r1, #0]
 800e92c:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e930:	18b7      	adds	r7, r6, r2
 800e932:	f145 0200 	adc.w	r2, r5, #0
 800e936:	f841 7b04 	str.w	r7, [r1], #4
 800e93a:	9205      	str	r2, [sp, #20]
 800e93c:	9102      	str	r1, [sp, #8]
 800e93e:	9003      	str	r0, [sp, #12]
    for( ; i >= 16; i -= 16 )
 800e940:	e6ac      	b.n	800e69c <mpi_mul_hlp+0x12>
    for( ; i > 0; i-- )
 800e942:	f10c 3cff 	add.w	ip, ip, #4294967295
        MULADDC_INIT
 800e946:	9803      	ldr	r0, [sp, #12]
 800e948:	9902      	ldr	r1, [sp, #8]
 800e94a:	9a05      	ldr	r2, [sp, #20]
 800e94c:	9b01      	ldr	r3, [sp, #4]
 800e94e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e952:	f04f 0500 	mov.w	r5, #0
 800e956:	680e      	ldr	r6, [r1, #0]
 800e958:	fbe3 2504 	umlal	r2, r5, r3, r4
 800e95c:	18b7      	adds	r7, r6, r2
 800e95e:	f145 0200 	adc.w	r2, r5, #0
 800e962:	f841 7b04 	str.w	r7, [r1], #4
 800e966:	9205      	str	r2, [sp, #20]
 800e968:	9102      	str	r1, [sp, #8]
 800e96a:	9003      	str	r0, [sp, #12]
    for( ; i > 0; i-- )
 800e96c:	e70c      	b.n	800e788 <mpi_mul_hlp+0xfe>

0800e96e <mbedtls_mpi_init>:
    if( X == NULL )
 800e96e:	b120      	cbz	r0, 800e97a <mbedtls_mpi_init+0xc>
    X->n = 0;
 800e970:	2300      	movs	r3, #0
 800e972:	2201      	movs	r2, #1
 800e974:	e9c0 2300 	strd	r2, r3, [r0]
    X->p = NULL;
 800e978:	6083      	str	r3, [r0, #8]
}
 800e97a:	4770      	bx	lr

0800e97c <mbedtls_mpi_free>:
{
 800e97c:	b510      	push	{r4, lr}
    if( X == NULL )
 800e97e:	4604      	mov	r4, r0
 800e980:	b170      	cbz	r0, 800e9a0 <mbedtls_mpi_free+0x24>
    if( X->p != NULL )
 800e982:	6880      	ldr	r0, [r0, #8]
 800e984:	b138      	cbz	r0, 800e996 <mbedtls_mpi_free+0x1a>
        mbedtls_mpi_zeroize( X->p, X->n );
 800e986:	6862      	ldr	r2, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e988:	4603      	mov	r3, r0
 800e98a:	2100      	movs	r1, #0
 800e98c:	3a01      	subs	r2, #1
 800e98e:	d208      	bcs.n	800e9a2 <mbedtls_mpi_free+0x26>
        mbedtls_free( X->p );
 800e990:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <mbedtls_mpi_free+0x2c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4798      	blx	r3
    X->n = 0;
 800e996:	2300      	movs	r3, #0
 800e998:	2201      	movs	r2, #1
 800e99a:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
 800e99e:	60a3      	str	r3, [r4, #8]
}
 800e9a0:	bd10      	pop	{r4, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e9a2:	f843 1b04 	str.w	r1, [r3], #4
 800e9a6:	e7f1      	b.n	800e98c <mbedtls_mpi_free+0x10>
 800e9a8:	200005a4 	.word	0x200005a4

0800e9ac <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e9ac:	f242 7310 	movw	r3, #10000	; 0x2710
 800e9b0:	4299      	cmp	r1, r3
{
 800e9b2:	b570      	push	{r4, r5, r6, lr}
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800e9b8:	d902      	bls.n	800e9c0 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800e9ba:	f06f 000f 	mvn.w	r0, #15
}
 800e9be:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
 800e9c0:	6843      	ldr	r3, [r0, #4]
 800e9c2:	428b      	cmp	r3, r1
 800e9c4:	d218      	bcs.n	800e9f8 <mbedtls_mpi_grow+0x4c>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800e9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ea04 <mbedtls_mpi_grow+0x58>)
 800e9c8:	2104      	movs	r1, #4
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	4798      	blx	r3
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d0f1      	beq.n	800e9ba <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
 800e9d6:	68a1      	ldr	r1, [r4, #8]
 800e9d8:	b161      	cbz	r1, 800e9f4 <mbedtls_mpi_grow+0x48>
            memcpy( p, X->p, X->n * ciL );
 800e9da:	6862      	ldr	r2, [r4, #4]
 800e9dc:	0092      	lsls	r2, r2, #2
 800e9de:	f013 fd03 	bl	80223e8 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800e9e2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	3a01      	subs	r2, #1
 800e9ec:	d206      	bcs.n	800e9fc <mbedtls_mpi_grow+0x50>
            mbedtls_free( X->p );
 800e9ee:	4b06      	ldr	r3, [pc, #24]	; (800ea08 <mbedtls_mpi_grow+0x5c>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4798      	blx	r3
        X->p = p;
 800e9f4:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800e9f8:	2000      	movs	r0, #0
 800e9fa:	e7e0      	b.n	800e9be <mbedtls_mpi_grow+0x12>
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800e9fc:	f843 1b04 	str.w	r1, [r3], #4
 800ea00:	e7f3      	b.n	800e9ea <mbedtls_mpi_grow+0x3e>
 800ea02:	bf00      	nop
 800ea04:	200005a0 	.word	0x200005a0
 800ea08:	200005a4 	.word	0x200005a4

0800ea0c <mbedtls_mpi_shrink>:
    if( X->n <= nblimbs )
 800ea0c:	6843      	ldr	r3, [r0, #4]
 800ea0e:	428b      	cmp	r3, r1
{
 800ea10:	b570      	push	{r4, r5, r6, lr}
 800ea12:	4604      	mov	r4, r0
 800ea14:	460d      	mov	r5, r1
    if( X->n <= nblimbs )
 800ea16:	d807      	bhi.n	800ea28 <mbedtls_mpi_shrink+0x1c>
}
 800ea18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800ea1c:	f7ff bfc6 	b.w	800e9ac <mbedtls_mpi_grow>
        if( X->p[i] != 0 )
 800ea20:	68a2      	ldr	r2, [r4, #8]
 800ea22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ea26:	b912      	cbnz	r2, 800ea2e <mbedtls_mpi_shrink+0x22>
    for( i = X->n - 1; i > 0; i-- )
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1f8      	bne.n	800ea20 <mbedtls_mpi_shrink+0x14>
    i++;
 800ea2e:	3301      	adds	r3, #1
    if( i < nblimbs )
 800ea30:	429d      	cmp	r5, r3
 800ea32:	bf38      	it	cc
 800ea34:	461d      	movcc	r5, r3
    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800ea36:	4b0f      	ldr	r3, [pc, #60]	; (800ea74 <mbedtls_mpi_shrink+0x68>)
 800ea38:	2104      	movs	r1, #4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	4798      	blx	r3
 800ea40:	4606      	mov	r6, r0
 800ea42:	b1a0      	cbz	r0, 800ea6e <mbedtls_mpi_shrink+0x62>
    if( X->p != NULL )
 800ea44:	68a1      	ldr	r1, [r4, #8]
 800ea46:	b159      	cbz	r1, 800ea60 <mbedtls_mpi_shrink+0x54>
        memcpy( p, X->p, i * ciL );
 800ea48:	00aa      	lsls	r2, r5, #2
 800ea4a:	f013 fccd 	bl	80223e8 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800ea4e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800ea52:	2100      	movs	r1, #0
 800ea54:	4603      	mov	r3, r0
 800ea56:	3a01      	subs	r2, #1
 800ea58:	d206      	bcs.n	800ea68 <mbedtls_mpi_shrink+0x5c>
        mbedtls_free( X->p );
 800ea5a:	4b07      	ldr	r3, [pc, #28]	; (800ea78 <mbedtls_mpi_shrink+0x6c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4798      	blx	r3
    X->p = p;
 800ea60:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
 800ea64:	2000      	movs	r0, #0
}
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
    volatile mbedtls_mpi_uint *p = v; while( n-- ) *p++ = 0;
 800ea68:	f843 1b04 	str.w	r1, [r3], #4
 800ea6c:	e7f3      	b.n	800ea56 <mbedtls_mpi_shrink+0x4a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800ea6e:	f06f 000f 	mvn.w	r0, #15
 800ea72:	e7f8      	b.n	800ea66 <mbedtls_mpi_shrink+0x5a>
 800ea74:	200005a0 	.word	0x200005a0
 800ea78:	200005a4 	.word	0x200005a4

0800ea7c <mbedtls_mpi_copy>:
    if( X == Y )
 800ea7c:	4288      	cmp	r0, r1
{
 800ea7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea80:	4606      	mov	r6, r0
 800ea82:	460f      	mov	r7, r1
    if( X == Y )
 800ea84:	d022      	beq.n	800eacc <mbedtls_mpi_copy+0x50>
    if( Y->p == NULL )
 800ea86:	688c      	ldr	r4, [r1, #8]
 800ea88:	b91c      	cbnz	r4, 800ea92 <mbedtls_mpi_copy+0x16>
        mbedtls_mpi_free( X );
 800ea8a:	f7ff ff77 	bl	800e97c <mbedtls_mpi_free>
}
 800ea8e:	4620      	mov	r0, r4
 800ea90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( i = Y->n - 1; i > 0; i-- )
 800ea92:	684a      	ldr	r2, [r1, #4]
 800ea94:	3a01      	subs	r2, #1
 800ea96:	b11a      	cbz	r2, 800eaa0 <mbedtls_mpi_copy+0x24>
        if( Y->p[i] != 0 )
 800ea98:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d0f9      	beq.n	800ea94 <mbedtls_mpi_copy+0x18>
    X->s = Y->s;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	6033      	str	r3, [r6, #0]
    i++;
 800eaa4:	1c55      	adds	r5, r2, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800eaa6:	4629      	mov	r1, r5
 800eaa8:	4630      	mov	r0, r6
 800eaaa:	f7ff ff7f 	bl	800e9ac <mbedtls_mpi_grow>
 800eaae:	4604      	mov	r4, r0
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d1ec      	bne.n	800ea8e <mbedtls_mpi_copy+0x12>
    memset( X->p, 0, X->n * ciL );
 800eab4:	6872      	ldr	r2, [r6, #4]
 800eab6:	4601      	mov	r1, r0
 800eab8:	0092      	lsls	r2, r2, #2
 800eaba:	68b0      	ldr	r0, [r6, #8]
 800eabc:	f013 fcbc 	bl	8022438 <memset>
    memcpy( X->p, Y->p, i * ciL );
 800eac0:	68b9      	ldr	r1, [r7, #8]
 800eac2:	68b0      	ldr	r0, [r6, #8]
 800eac4:	00aa      	lsls	r2, r5, #2
 800eac6:	f013 fc8f 	bl	80223e8 <memcpy>
 800eaca:	e7e0      	b.n	800ea8e <mbedtls_mpi_copy+0x12>
        return( 0 );
 800eacc:	2400      	movs	r4, #0
 800eace:	e7de      	b.n	800ea8e <mbedtls_mpi_copy+0x12>

0800ead0 <mbedtls_mpi_safe_cond_assign>:
{
 800ead0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ead2:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800ead4:	6849      	ldr	r1, [r1, #4]
{
 800ead6:	4605      	mov	r5, r0
 800ead8:	4614      	mov	r4, r2
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800eada:	f7ff ff67 	bl	800e9ac <mbedtls_mpi_grow>
 800eade:	b998      	cbnz	r0, 800eb08 <mbedtls_mpi_safe_cond_assign+0x38>
    assign = (assign | (unsigned char)-assign) >> 7;
 800eae0:	4262      	negs	r2, r4
 800eae2:	4322      	orrs	r2, r4
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800eae4:	6834      	ldr	r4, [r6, #0]
 800eae6:	682b      	ldr	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800eae8:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assign = (assign | (unsigned char)-assign) >> 7;
 800eaec:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800eaf0:	f1c2 0101 	rsb	r1, r2, #1
 800eaf4:	4354      	muls	r4, r2
 800eaf6:	fb03 4301 	mla	r3, r3, r1, r4
 800eafa:	602b      	str	r3, [r5, #0]
    for( i = 0; i < Y->n; i++ )
 800eafc:	4603      	mov	r3, r0
 800eafe:	459e      	cmp	lr, r3
 800eb00:	d103      	bne.n	800eb0a <mbedtls_mpi_safe_cond_assign+0x3a>
    for( ; i < X->n; i++ )
 800eb02:	686e      	ldr	r6, [r5, #4]
 800eb04:	429e      	cmp	r6, r3
 800eb06:	d80e      	bhi.n	800eb26 <mbedtls_mpi_safe_cond_assign+0x56>
}
 800eb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800eb0a:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800eb0e:	68b4      	ldr	r4, [r6, #8]
 800eb10:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800eb14:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800eb18:	434f      	muls	r7, r1
 800eb1a:	fb04 7402 	mla	r4, r4, r2, r7
 800eb1e:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    for( i = 0; i < Y->n; i++ )
 800eb22:	3301      	adds	r3, #1
 800eb24:	e7eb      	b.n	800eafe <mbedtls_mpi_safe_cond_assign+0x2e>
        X->p[i] *= ( 1 - assign );
 800eb26:	68ac      	ldr	r4, [r5, #8]
 800eb28:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800eb2c:	434a      	muls	r2, r1
 800eb2e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( ; i < X->n; i++ )
 800eb32:	3301      	adds	r3, #1
 800eb34:	e7e6      	b.n	800eb04 <mbedtls_mpi_safe_cond_assign+0x34>

0800eb36 <mbedtls_mpi_lset>:
{
 800eb36:	b570      	push	{r4, r5, r6, lr}
 800eb38:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800eb3a:	2101      	movs	r1, #1
{
 800eb3c:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800eb3e:	f7ff ff35 	bl	800e9ac <mbedtls_mpi_grow>
 800eb42:	4605      	mov	r5, r0
 800eb44:	b988      	cbnz	r0, 800eb6a <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
 800eb46:	6862      	ldr	r2, [r4, #4]
 800eb48:	4601      	mov	r1, r0
 800eb4a:	0092      	lsls	r2, r2, #2
 800eb4c:	68a0      	ldr	r0, [r4, #8]
 800eb4e:	f013 fc73 	bl	8022438 <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
 800eb52:	68a3      	ldr	r3, [r4, #8]
 800eb54:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
 800eb58:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
 800eb5a:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
 800eb5e:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800eb60:	bfb4      	ite	lt
 800eb62:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb66:	2301      	movge	r3, #1
 800eb68:	6023      	str	r3, [r4, #0]
}
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	bd70      	pop	{r4, r5, r6, pc}

0800eb6e <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
 800eb6e:	6843      	ldr	r3, [r0, #4]
 800eb70:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800eb74:	bf3f      	itttt	cc
 800eb76:	094a      	lsrcc	r2, r1, #5
 800eb78:	6883      	ldrcc	r3, [r0, #8]
 800eb7a:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
 800eb7e:	f001 011f 	andcc.w	r1, r1, #31
 800eb82:	bf3a      	itte	cc
 800eb84:	fa20 f101 	lsrcc.w	r1, r0, r1
 800eb88:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
 800eb8c:	2000      	movcs	r0, #0
}
 800eb8e:	4770      	bx	lr

0800eb90 <mbedtls_mpi_lsb>:
{
 800eb90:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, j, count = 0;
 800eb92:	2100      	movs	r1, #0
    for( i = 0; i < X->n; i++ )
 800eb94:	6845      	ldr	r5, [r0, #4]
 800eb96:	460a      	mov	r2, r1
 800eb98:	4295      	cmp	r5, r2
 800eb9a:	d102      	bne.n	800eba2 <mbedtls_mpi_lsb+0x12>
    return( 0 );
 800eb9c:	2400      	movs	r4, #0
}
 800eb9e:	4620      	mov	r0, r4
 800eba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800eba2:	6883      	ldr	r3, [r0, #8]
 800eba4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
        for( j = 0; j < biL; j++, count++ )
 800eba8:	2300      	movs	r3, #0
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800ebaa:	fa26 f703 	lsr.w	r7, r6, r3
 800ebae:	07ff      	lsls	r7, r7, #31
 800ebb0:	eb01 0403 	add.w	r4, r1, r3
 800ebb4:	d4f3      	bmi.n	800eb9e <mbedtls_mpi_lsb+0xe>
        for( j = 0; j < biL; j++, count++ )
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	2b20      	cmp	r3, #32
 800ebba:	eb01 0403 	add.w	r4, r1, r3
 800ebbe:	d1f4      	bne.n	800ebaa <mbedtls_mpi_lsb+0x1a>
    for( i = 0; i < X->n; i++ )
 800ebc0:	3201      	adds	r2, #1
        for( j = 0; j < biL; j++, count++ )
 800ebc2:	4621      	mov	r1, r4
 800ebc4:	e7e8      	b.n	800eb98 <mbedtls_mpi_lsb+0x8>

0800ebc6 <mbedtls_mpi_bitlen>:
{
 800ebc6:	4602      	mov	r2, r0
    if( X->n == 0 )
 800ebc8:	6840      	ldr	r0, [r0, #4]
 800ebca:	b188      	cbz	r0, 800ebf0 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
 800ebcc:	6892      	ldr	r2, [r2, #8]
 800ebce:	1e43      	subs	r3, r0, #1
 800ebd0:	b97b      	cbnz	r3, 800ebf2 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
 800ebd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
 800ebd6:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800ebd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
 800ebdc:	4211      	tst	r1, r2
 800ebde:	d104      	bne.n	800ebea <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
 800ebe0:	3001      	adds	r0, #1
 800ebe2:	2820      	cmp	r0, #32
        mask >>= 1;
 800ebe4:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
 800ebe8:	d1f8      	bne.n	800ebdc <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
 800ebea:	3301      	adds	r3, #1
 800ebec:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
 800ebf0:	4770      	bx	lr
        if( X->p[i] != 0 )
 800ebf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ebf6:	2900      	cmp	r1, #0
 800ebf8:	d1eb      	bne.n	800ebd2 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	e7e8      	b.n	800ebd0 <mbedtls_mpi_bitlen+0xa>

0800ebfe <mbedtls_mpi_size>:
{
 800ebfe:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800ec00:	f7ff ffe1 	bl	800ebc6 <mbedtls_mpi_bitlen>
 800ec04:	3007      	adds	r0, #7
}
 800ec06:	08c0      	lsrs	r0, r0, #3
 800ec08:	bd08      	pop	{r3, pc}

0800ec0a <mbedtls_mpi_read_binary>:
{
 800ec0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0c:	4607      	mov	r7, r0
 800ec0e:	460c      	mov	r4, r1
 800ec10:	4616      	mov	r6, r2
    for( n = 0; n < buflen; n++ )
 800ec12:	2500      	movs	r5, #0
 800ec14:	42b5      	cmp	r5, r6
 800ec16:	d001      	beq.n	800ec1c <mbedtls_mpi_read_binary+0x12>
        if( buf[n] != 0 )
 800ec18:	5d63      	ldrb	r3, [r4, r5]
 800ec1a:	b1ab      	cbz	r3, 800ec48 <mbedtls_mpi_read_binary+0x3e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, CHARS_TO_LIMBS( buflen - n ) ) );
 800ec1c:	1b71      	subs	r1, r6, r5
 800ec1e:	f011 0303 	ands.w	r3, r1, #3
 800ec22:	bf18      	it	ne
 800ec24:	2301      	movne	r3, #1
 800ec26:	eb03 0191 	add.w	r1, r3, r1, lsr #2
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	f7ff febe 	bl	800e9ac <mbedtls_mpi_grow>
 800ec30:	b948      	cbnz	r0, 800ec46 <mbedtls_mpi_read_binary+0x3c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800ec32:	4601      	mov	r1, r0
 800ec34:	4638      	mov	r0, r7
 800ec36:	f7ff ff7e 	bl	800eb36 <mbedtls_mpi_lset>
 800ec3a:	b920      	cbnz	r0, 800ec46 <mbedtls_mpi_read_binary+0x3c>
 800ec3c:	4434      	add	r4, r6
    for( i = buflen, j = 0; i > n; i--, j++ )
 800ec3e:	4603      	mov	r3, r0
 800ec40:	1af2      	subs	r2, r6, r3
 800ec42:	42aa      	cmp	r2, r5
 800ec44:	d802      	bhi.n	800ec4c <mbedtls_mpi_read_binary+0x42>
}
 800ec46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for( n = 0; n < buflen; n++ )
 800ec48:	3501      	adds	r5, #1
 800ec4a:	e7e3      	b.n	800ec14 <mbedtls_mpi_read_binary+0xa>
        X->p[j / ciL] |= ((mbedtls_mpi_uint) buf[i - 1]) << ((j % ciL) << 3);
 800ec4c:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
 800ec50:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800ec54:	f023 0c03 	bic.w	ip, r3, #3
 800ec58:	00d9      	lsls	r1, r3, #3
 800ec5a:	f001 0118 	and.w	r1, r1, #24
 800ec5e:	fa02 f101 	lsl.w	r1, r2, r1
 800ec62:	f85e 200c 	ldr.w	r2, [lr, ip]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	f84e 200c 	str.w	r2, [lr, ip]
    for( i = buflen, j = 0; i > n; i--, j++ )
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	e7e7      	b.n	800ec40 <mbedtls_mpi_read_binary+0x36>

0800ec70 <mbedtls_mpi_write_binary>:
{
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	4615      	mov	r5, r2
 800ec74:	4607      	mov	r7, r0
 800ec76:	460c      	mov	r4, r1
    n = mbedtls_mpi_size( X );
 800ec78:	f7ff ffc1 	bl	800ebfe <mbedtls_mpi_size>
    if( buflen < n )
 800ec7c:	42a8      	cmp	r0, r5
    n = mbedtls_mpi_size( X );
 800ec7e:	4606      	mov	r6, r0
    if( buflen < n )
 800ec80:	d816      	bhi.n	800ecb0 <mbedtls_mpi_write_binary+0x40>
    memset( buf, 0, buflen );
 800ec82:	462a      	mov	r2, r5
 800ec84:	2100      	movs	r1, #0
 800ec86:	4620      	mov	r0, r4
 800ec88:	f013 fbd6 	bl	8022438 <memset>
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800ec8c:	1962      	adds	r2, r4, r5
 800ec8e:	2300      	movs	r3, #0
 800ec90:	42b3      	cmp	r3, r6
 800ec92:	d101      	bne.n	800ec98 <mbedtls_mpi_write_binary+0x28>
    return( 0 );
 800ec94:	2000      	movs	r0, #0
}
 800ec96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        buf[i] = (unsigned char)( X->p[j / ciL] >> ((j % ciL) << 3) );
 800ec98:	68bd      	ldr	r5, [r7, #8]
 800ec9a:	f023 0403 	bic.w	r4, r3, #3
 800ec9e:	00d9      	lsls	r1, r3, #3
 800eca0:	f001 0018 	and.w	r0, r1, #24
 800eca4:	5929      	ldr	r1, [r5, r4]
 800eca6:	40c1      	lsrs	r1, r0
 800eca8:	f802 1d01 	strb.w	r1, [r2, #-1]!
    for( i = buflen - 1, j = 0; n > 0; i--, j++, n-- )
 800ecac:	3301      	adds	r3, #1
 800ecae:	e7ef      	b.n	800ec90 <mbedtls_mpi_write_binary+0x20>
        return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
 800ecb0:	f06f 0007 	mvn.w	r0, #7
 800ecb4:	e7ef      	b.n	800ec96 <mbedtls_mpi_write_binary+0x26>

0800ecb6 <mbedtls_mpi_shift_l>:
{
 800ecb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb8:	4604      	mov	r4, r0
 800ecba:	460e      	mov	r6, r1
    v0 = count / (biL    );
 800ecbc:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
 800ecbe:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
 800ecc2:	f7ff ff80 	bl	800ebc6 <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
 800ecc6:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
 800ecc8:	4430      	add	r0, r6
    if( X->n * biL < i )
 800ecca:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 800ecce:	d804      	bhi.n	800ecda <mbedtls_mpi_shift_l+0x24>
    if( v0 > 0 )
 800ecd0:	2e1f      	cmp	r6, #31
 800ecd2:	d80e      	bhi.n	800ecf2 <mbedtls_mpi_shift_l+0x3c>
    if( t1 > 0 )
 800ecd4:	bb5f      	cbnz	r7, 800ed2e <mbedtls_mpi_shift_l+0x78>
    ret = 0;
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e00a      	b.n	800ecf0 <mbedtls_mpi_shift_l+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800ecda:	f010 011f 	ands.w	r1, r0, #31
 800ecde:	bf18      	it	ne
 800ece0:	2101      	movne	r1, #1
 800ece2:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7ff fe60 	bl	800e9ac <mbedtls_mpi_grow>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d0ef      	beq.n	800ecd0 <mbedtls_mpi_shift_l+0x1a>
}
 800ecf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
 800ecf2:	6863      	ldr	r3, [r4, #4]
 800ecf4:	f06f 0003 	mvn.w	r0, #3
 800ecf8:	009a      	lsls	r2, r3, #2
 800ecfa:	4368      	muls	r0, r5
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	42a9      	cmp	r1, r5
 800ed00:	f1a2 0204 	sub.w	r2, r2, #4
 800ed04:	d80a      	bhi.n	800ed1c <mbedtls_mpi_shift_l+0x66>
 800ed06:	42ab      	cmp	r3, r5
 800ed08:	bf28      	it	cs
 800ed0a:	462b      	movcs	r3, r5
 800ed0c:	009b      	lsls	r3, r3, #2
            X->p[i - 1] = 0;
 800ed0e:	2200      	movs	r2, #0
        for( ; i > 0; i-- )
 800ed10:	3b04      	subs	r3, #4
 800ed12:	1d19      	adds	r1, r3, #4
 800ed14:	d0de      	beq.n	800ecd4 <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
 800ed16:	68a1      	ldr	r1, [r4, #8]
 800ed18:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
 800ed1a:	e7f9      	b.n	800ed10 <mbedtls_mpi_shift_l+0x5a>
            X->p[i - 1] = X->p[i - v0 - 1];
 800ed1c:	68a6      	ldr	r6, [r4, #8]
 800ed1e:	eb06 0c02 	add.w	ip, r6, r2
        for( i = X->n; i > v0; i-- )
 800ed22:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
 800ed24:	f85c c000 	ldr.w	ip, [ip, r0]
 800ed28:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
 800ed2c:	e7e7      	b.n	800ecfe <mbedtls_mpi_shift_l+0x48>
        for( i = v0; i < X->n; i++ )
 800ed2e:	6866      	ldr	r6, [r4, #4]
    mbedtls_mpi_uint r0 = 0, r1;
 800ed30:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
 800ed32:	f1c7 0c20 	rsb	ip, r7, #32
        for( i = v0; i < X->n; i++ )
 800ed36:	42ae      	cmp	r6, r5
 800ed38:	d9cd      	bls.n	800ecd6 <mbedtls_mpi_shift_l+0x20>
            r1 = X->p[i] >> (biL - t1);
 800ed3a:	68a0      	ldr	r0, [r4, #8]
 800ed3c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
 800ed40:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
 800ed44:	4313      	orrs	r3, r2
 800ed46:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
 800ed4a:	fa21 f20c 	lsr.w	r2, r1, ip
        for( i = v0; i < X->n; i++ )
 800ed4e:	3501      	adds	r5, #1
 800ed50:	e7f1      	b.n	800ed36 <mbedtls_mpi_shift_l+0x80>

0800ed52 <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800ed52:	6843      	ldr	r3, [r0, #4]
{
 800ed54:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
 800ed56:	094e      	lsrs	r6, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800ed58:	42b3      	cmp	r3, r6
    v1 = count & (biL - 1);
 800ed5a:	f001 041f 	and.w	r4, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800ed5e:	d301      	bcc.n	800ed64 <mbedtls_mpi_shift_r+0x12>
 800ed60:	d104      	bne.n	800ed6c <mbedtls_mpi_shift_r+0x1a>
 800ed62:	b35c      	cbz	r4, 800edbc <mbedtls_mpi_shift_r+0x6a>
}
 800ed64:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
 800ed66:	2100      	movs	r1, #0
 800ed68:	f7ff bee5 	b.w	800eb36 <mbedtls_mpi_lset>
    if( v0 > 0 )
 800ed6c:	291f      	cmp	r1, #31
 800ed6e:	d827      	bhi.n	800edc0 <mbedtls_mpi_shift_r+0x6e>
    if( v1 > 0 )
 800ed70:	bb04      	cbnz	r4, 800edb4 <mbedtls_mpi_shift_r+0x62>
}
 800ed72:	2000      	movs	r0, #0
 800ed74:	bcf0      	pop	{r4, r5, r6, r7}
 800ed76:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
 800ed78:	6882      	ldr	r2, [r0, #8]
 800ed7a:	5957      	ldr	r7, [r2, r5]
 800ed7c:	f842 7021 	str.w	r7, [r2, r1, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
 800ed80:	3504      	adds	r5, #4
 800ed82:	3101      	adds	r1, #1
 800ed84:	1b9a      	subs	r2, r3, r6
 800ed86:	428a      	cmp	r2, r1
 800ed88:	d8f6      	bhi.n	800ed78 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
 800ed8a:	2100      	movs	r1, #0
        for( ; i < X->n; i++ )
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d9ef      	bls.n	800ed70 <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
 800ed90:	6885      	ldr	r5, [r0, #8]
 800ed92:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
        for( ; i < X->n; i++ )
 800ed96:	3201      	adds	r2, #1
 800ed98:	e7f8      	b.n	800ed8c <mbedtls_mpi_shift_r+0x3a>
            r1 = X->p[i - 1] << (biL - v1);
 800ed9a:	6886      	ldr	r6, [r0, #8]
 800ed9c:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
 800eda0:	fa25 f204 	lsr.w	r2, r5, r4
            X->p[i - 1] |= r0;
 800eda4:	430a      	orrs	r2, r1
 800eda6:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
            r0 = r1;
 800edaa:	fa05 f107 	lsl.w	r1, r5, r7
        for( i = X->n; i > 0; i-- )
 800edae:	3b01      	subs	r3, #1
 800edb0:	d2f3      	bcs.n	800ed9a <mbedtls_mpi_shift_r+0x48>
 800edb2:	e7de      	b.n	800ed72 <mbedtls_mpi_shift_r+0x20>
    mbedtls_mpi_uint r0 = 0, r1;
 800edb4:	2100      	movs	r1, #0
            r1 = X->p[i - 1] << (biL - v1);
 800edb6:	f1c4 0720 	rsb	r7, r4, #32
 800edba:	e7f8      	b.n	800edae <mbedtls_mpi_shift_r+0x5c>
    if( v0 > 0 )
 800edbc:	291f      	cmp	r1, #31
 800edbe:	d9d8      	bls.n	800ed72 <mbedtls_mpi_shift_r+0x20>
 800edc0:	00b5      	lsls	r5, r6, #2
{
 800edc2:	2100      	movs	r1, #0
 800edc4:	e7de      	b.n	800ed84 <mbedtls_mpi_shift_r+0x32>

0800edc6 <mbedtls_mpi_cmp_abs>:
{
 800edc6:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
 800edc8:	6843      	ldr	r3, [r0, #4]
 800edca:	b92b      	cbnz	r3, 800edd8 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
 800edcc:	684a      	ldr	r2, [r1, #4]
 800edce:	b962      	cbnz	r2, 800edea <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
 800edd0:	1e18      	subs	r0, r3, #0
 800edd2:	bf18      	it	ne
 800edd4:	2001      	movne	r0, #1
 800edd6:	e028      	b.n	800ee2a <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
 800edd8:	6882      	ldr	r2, [r0, #8]
 800edda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800edde:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800ede2:	2a00      	cmp	r2, #0
 800ede4:	d1f2      	bne.n	800edcc <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
 800ede6:	3b01      	subs	r3, #1
 800ede8:	e7ef      	b.n	800edca <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
 800edea:	688c      	ldr	r4, [r1, #8]
 800edec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800edf0:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800edf4:	b985      	cbnz	r5, 800ee18 <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
 800edf6:	3a01      	subs	r2, #1
 800edf8:	e7e9      	b.n	800edce <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800edfa:	6882      	ldr	r2, [r0, #8]
 800edfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ee00:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ee04:	4291      	cmp	r1, r2
 800ee06:	d805      	bhi.n	800ee14 <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800ee08:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee0c:	d20a      	bcs.n	800ee24 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
 800ee0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee12:	e00a      	b.n	800ee2a <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
 800ee14:	2001      	movs	r0, #1
 800ee16:	e008      	b.n	800ee2a <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
 800ee18:	b10b      	cbz	r3, 800ee1e <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d8fa      	bhi.n	800ee14 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d3f5      	bcc.n	800ee0e <mbedtls_mpi_cmp_abs+0x48>
 800ee22:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
 800ee24:	1c5a      	adds	r2, r3, #1
 800ee26:	d1e8      	bne.n	800edfa <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
 800ee28:	2000      	movs	r0, #0
}
 800ee2a:	bd30      	pop	{r4, r5, pc}

0800ee2c <mpi_montmul>:
/*
 * Montgomery multiplication: A = A * B * R^-1 mod N  (HAC 14.36)
 */
static int mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
                         const mbedtls_mpi *T )
{
 800ee2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee30:	4615      	mov	r5, r2
 800ee32:	9301      	str	r3, [sp, #4]
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    if( T->n < N->n + 1 || T->p == NULL )
 800ee34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	686b      	ldr	r3, [r5, #4]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	429a      	cmp	r2, r3
{
 800ee3e:	4606      	mov	r6, r0
 800ee40:	468a      	mov	sl, r1
    if( T->n < N->n + 1 || T->p == NULL )
 800ee42:	d357      	bcc.n	800eef4 <mpi_montmul+0xc8>
 800ee44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee46:	6898      	ldr	r0, [r3, #8]
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d053      	beq.n	800eef4 <mpi_montmul+0xc8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    memset( T->p, 0, T->n * ciL );
 800ee4c:	0092      	lsls	r2, r2, #2
 800ee4e:	2100      	movs	r1, #0
 800ee50:	f013 faf2 	bl	8022438 <memset>

    d = T->p;
 800ee54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    n = N->n;
 800ee56:	f8d5 9004 	ldr.w	r9, [r5, #4]
    d = T->p;
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	9300      	str	r3, [sp, #0]
    m = ( B->n < n ) ? B->n : n;
 800ee5e:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
 800ee62:	f8dd 8000 	ldr.w	r8, [sp]
    m = ( B->n < n ) ? B->n : n;
 800ee66:	454b      	cmp	r3, r9
 800ee68:	bf28      	it	cs
 800ee6a:	464b      	movcs	r3, r9
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
 800ee6c:	f109 0701 	add.w	r7, r9, #1
    m = ( B->n < n ) ? B->n : n;
 800ee70:	ee07 3a90 	vmov	s15, r3
        *d++ = u0; d[n + 1] = 0;
 800ee74:	00bf      	lsls	r7, r7, #2
    for( i = 0; i < n; i++ )
 800ee76:	2400      	movs	r4, #0
 800ee78:	454c      	cmp	r4, r9
 800ee7a:	68b0      	ldr	r0, [r6, #8]
 800ee7c:	d119      	bne.n	800eeb2 <mpi_montmul+0x86>
    }

    memcpy( A->p, d, ( n + 1 ) * ciL );
 800ee7e:	9b00      	ldr	r3, [sp, #0]
 800ee80:	1f39      	subs	r1, r7, #4
 800ee82:	440b      	add	r3, r1
 800ee84:	463a      	mov	r2, r7
 800ee86:	4619      	mov	r1, r3
 800ee88:	f013 faae 	bl	80223e8 <memcpy>

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
 800ee8c:	4629      	mov	r1, r5
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7ff ff99 	bl	800edc6 <mbedtls_mpi_cmp_abs>
 800ee94:	2800      	cmp	r0, #0
        mpi_sub_hlp( n, N->p, A->p );
    else
        /* prevent timing attacks */
        mpi_sub_hlp( n, A->p, T->p );
 800ee96:	bfb3      	iteet	lt
 800ee98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
        mpi_sub_hlp( n, N->p, A->p );
 800ee9a:	68b2      	ldrge	r2, [r6, #8]
 800ee9c:	68a9      	ldrge	r1, [r5, #8]
        mpi_sub_hlp( n, A->p, T->p );
 800ee9e:	689a      	ldrlt	r2, [r3, #8]
 800eea0:	bfb8      	it	lt
 800eea2:	68b1      	ldrlt	r1, [r6, #8]
 800eea4:	4620      	mov	r0, r4
 800eea6:	f7ff fbc7 	bl	800e638 <mpi_sub_hlp>

    return( 0 );
 800eeaa:	2000      	movs	r0, #0
}
 800eeac:	b003      	add	sp, #12
 800eeae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800eeb2:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
 800eeb6:	f850 b024 	ldr.w	fp, [r0, r4, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
 800eeba:	680b      	ldr	r3, [r1, #0]
 800eebc:	f8d8 0000 	ldr.w	r0, [r8]
 800eec0:	9a01      	ldr	r2, [sp, #4]
 800eec2:	fb03 030b 	mla	r3, r3, fp, r0
 800eec6:	4353      	muls	r3, r2
 800eec8:	ee07 3a10 	vmov	s14, r3
        mpi_mul_hlp( m, B->p, d, u0 );
 800eecc:	ee17 0a90 	vmov	r0, s15
 800eed0:	4642      	mov	r2, r8
 800eed2:	465b      	mov	r3, fp
 800eed4:	f7ff fbd9 	bl	800e68a <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
 800eed8:	4642      	mov	r2, r8
 800eeda:	ee17 3a10 	vmov	r3, s14
 800eede:	68a9      	ldr	r1, [r5, #8]
 800eee0:	4648      	mov	r0, r9
 800eee2:	f7ff fbd2 	bl	800e68a <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
 800eee6:	f848 bb04 	str.w	fp, [r8], #4
 800eeea:	2300      	movs	r3, #0
 800eeec:	f848 3007 	str.w	r3, [r8, r7]
    for( i = 0; i < n; i++ )
 800eef0:	3401      	adds	r4, #1
 800eef2:	e7c1      	b.n	800ee78 <mpi_montmul+0x4c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800eef4:	f06f 0003 	mvn.w	r0, #3
 800eef8:	e7d8      	b.n	800eeac <mpi_montmul+0x80>

0800eefa <mbedtls_mpi_cmp_mpi>:
{
 800eefa:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
 800eefc:	6843      	ldr	r3, [r0, #4]
{
 800eefe:	4602      	mov	r2, r0
    for( i = X->n; i > 0; i-- )
 800ef00:	b923      	cbnz	r3, 800ef0c <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
 800ef02:	6848      	ldr	r0, [r1, #4]
 800ef04:	b958      	cbnz	r0, 800ef1e <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d138      	bne.n	800ef7c <mbedtls_mpi_cmp_mpi+0x82>
 800ef0a:	e031      	b.n	800ef70 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
 800ef0c:	6890      	ldr	r0, [r2, #8]
 800ef0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ef12:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d1f3      	bne.n	800ef02 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	e7f0      	b.n	800ef00 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
 800ef1e:	688c      	ldr	r4, [r1, #8]
 800ef20:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800ef24:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800ef28:	bb25      	cbnz	r5, 800ef74 <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
 800ef2a:	3801      	subs	r0, #1
 800ef2c:	e7ea      	b.n	800ef04 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
 800ef2e:	4283      	cmp	r3, r0
 800ef30:	6809      	ldr	r1, [r1, #0]
 800ef32:	d201      	bcs.n	800ef38 <mbedtls_mpi_cmp_mpi+0x3e>
 800ef34:	4248      	negs	r0, r1
 800ef36:	e022      	b.n	800ef7e <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800ef38:	6810      	ldr	r0, [r2, #0]
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	dd03      	ble.n	800ef46 <mbedtls_mpi_cmp_mpi+0x4c>
 800ef3e:	2900      	cmp	r1, #0
 800ef40:	da13      	bge.n	800ef6a <mbedtls_mpi_cmp_mpi+0x70>
 800ef42:	2001      	movs	r0, #1
 800ef44:	e01b      	b.n	800ef7e <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800ef46:	2900      	cmp	r1, #0
 800ef48:	dd0f      	ble.n	800ef6a <mbedtls_mpi_cmp_mpi+0x70>
 800ef4a:	b170      	cbz	r0, 800ef6a <mbedtls_mpi_cmp_mpi+0x70>
 800ef4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef50:	e015      	b.n	800ef7e <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800ef52:	6891      	ldr	r1, [r2, #8]
 800ef54:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 800ef58:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ef5c:	428d      	cmp	r5, r1
 800ef5e:	d80e      	bhi.n	800ef7e <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800ef60:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef64:	d202      	bcs.n	800ef6c <mbedtls_mpi_cmp_mpi+0x72>
 800ef66:	4240      	negs	r0, r0
 800ef68:	e009      	b.n	800ef7e <mbedtls_mpi_cmp_mpi+0x84>
 800ef6a:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
 800ef6c:	1c59      	adds	r1, r3, #1
 800ef6e:	d1f0      	bne.n	800ef52 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
 800ef70:	2000      	movs	r0, #0
 800ef72:	e004      	b.n	800ef7e <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d0da      	beq.n	800ef2e <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
 800ef78:	4283      	cmp	r3, r0
 800ef7a:	d9d8      	bls.n	800ef2e <mbedtls_mpi_cmp_mpi+0x34>
 800ef7c:	6810      	ldr	r0, [r2, #0]
}
 800ef7e:	bd30      	pop	{r4, r5, pc}

0800ef80 <mbedtls_mpi_cmp_int>:
{
 800ef80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
 800ef82:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
 800ef86:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
 800ef8a:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
 800ef8c:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
 800ef8e:	bfb4      	ite	lt
 800ef90:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef94:	2301      	movge	r3, #1
 800ef96:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800ef98:	a901      	add	r1, sp, #4
    Y.n = 1;
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	9302      	str	r3, [sp, #8]
    Y.p = p;
 800ef9e:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800efa2:	f7ff ffaa 	bl	800eefa <mbedtls_mpi_cmp_mpi>
}
 800efa6:	b005      	add	sp, #20
 800efa8:	f85d fb04 	ldr.w	pc, [sp], #4

0800efac <mbedtls_mpi_add_abs>:
    if( X == B )
 800efac:	4290      	cmp	r0, r2
{
 800efae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb2:	4607      	mov	r7, r0
 800efb4:	460d      	mov	r5, r1
 800efb6:	4616      	mov	r6, r2
    if( X == B )
 800efb8:	d002      	beq.n	800efc0 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
 800efba:	4288      	cmp	r0, r1
 800efbc:	d129      	bne.n	800f012 <mbedtls_mpi_add_abs+0x66>
{
 800efbe:	4635      	mov	r5, r6
    X->s = 1;
 800efc0:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
 800efc2:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
 800efc4:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
 800efc6:	bb66      	cbnz	r6, 800f022 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800efc8:	4631      	mov	r1, r6
 800efca:	4638      	mov	r0, r7
 800efcc:	f7ff fcee 	bl	800e9ac <mbedtls_mpi_grow>
 800efd0:	4604      	mov	r4, r0
 800efd2:	bb18      	cbnz	r0, 800f01c <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	68a9      	ldr	r1, [r5, #8]
 800efd8:	4605      	mov	r5, r0
    for( i = 0; i < j; i++, o++, p++ )
 800efda:	4286      	cmp	r6, r0
 800efdc:	d12a      	bne.n	800f034 <mbedtls_mpi_add_abs+0x88>
 800efde:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
 800efe2:	b1dd      	cbz	r5, 800f01c <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	42b2      	cmp	r2, r6
 800efe8:	f106 0801 	add.w	r8, r6, #1
 800efec:	d808      	bhi.n	800f000 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800efee:	4641      	mov	r1, r8
 800eff0:	4638      	mov	r0, r7
 800eff2:	f7ff fcdb 	bl	800e9ac <mbedtls_mpi_grow>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d12f      	bne.n	800f05a <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	1955      	adds	r5, r2, r5
 800f004:	f843 5b04 	str.w	r5, [r3], #4
 800f008:	4646      	mov	r6, r8
 800f00a:	bf2c      	ite	cs
 800f00c:	2501      	movcs	r5, #1
 800f00e:	2500      	movcc	r5, #0
 800f010:	e7e7      	b.n	800efe2 <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800f012:	f7ff fd33 	bl	800ea7c <mbedtls_mpi_copy>
 800f016:	4604      	mov	r4, r0
 800f018:	2800      	cmp	r0, #0
 800f01a:	d0d0      	beq.n	800efbe <mbedtls_mpi_add_abs+0x12>
}
 800f01c:	4620      	mov	r0, r4
 800f01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
 800f022:	68ab      	ldr	r3, [r5, #8]
 800f024:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f028:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d1cb      	bne.n	800efc8 <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
 800f030:	3e01      	subs	r6, #1
 800f032:	e7c8      	b.n	800efc6 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
 800f034:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 800f038:	eb12 0c05 	adds.w	ip, r2, r5
 800f03c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 800f040:	bf2c      	ite	cs
 800f042:	2501      	movcs	r5, #1
 800f044:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
 800f046:	eb1c 0202 	adds.w	r2, ip, r2
 800f04a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 800f04e:	bf2c      	ite	cs
 800f050:	2201      	movcs	r2, #1
 800f052:	2200      	movcc	r2, #0
 800f054:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
 800f056:	3001      	adds	r0, #1
 800f058:	e7bf      	b.n	800efda <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800f05a:	4604      	mov	r4, r0
    return( ret );
 800f05c:	e7de      	b.n	800f01c <mbedtls_mpi_add_abs+0x70>

0800f05e <mbedtls_mpi_sub_abs>:
{
 800f05e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f060:	460f      	mov	r7, r1
 800f062:	b085      	sub	sp, #20
 800f064:	4606      	mov	r6, r0
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f066:	4611      	mov	r1, r2
 800f068:	4638      	mov	r0, r7
{
 800f06a:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f06c:	f7ff feab 	bl	800edc6 <mbedtls_mpi_cmp_abs>
 800f070:	2800      	cmp	r0, #0
 800f072:	db2e      	blt.n	800f0d2 <mbedtls_mpi_sub_abs+0x74>
    X->n = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	2201      	movs	r2, #1
    if( X == B )
 800f078:	42b5      	cmp	r5, r6
    X->n = 0;
 800f07a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
 800f07e:	9303      	str	r3, [sp, #12]
    if( X == B )
 800f080:	d106      	bne.n	800f090 <mbedtls_mpi_sub_abs+0x32>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800f082:	4629      	mov	r1, r5
 800f084:	a801      	add	r0, sp, #4
 800f086:	f7ff fcf9 	bl	800ea7c <mbedtls_mpi_copy>
 800f08a:	4604      	mov	r4, r0
 800f08c:	b998      	cbnz	r0, 800f0b6 <mbedtls_mpi_sub_abs+0x58>
        B = &TB;
 800f08e:	ad01      	add	r5, sp, #4
    if( X != A )
 800f090:	42b7      	cmp	r7, r6
 800f092:	d109      	bne.n	800f0a8 <mbedtls_mpi_sub_abs+0x4a>
    X->s = 1;
 800f094:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
 800f098:	2301      	movs	r3, #1
 800f09a:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
 800f09c:	b988      	cbnz	r0, 800f0c2 <mbedtls_mpi_sub_abs+0x64>
    mpi_sub_hlp( n, B->p, X->p );
 800f09e:	68b2      	ldr	r2, [r6, #8]
 800f0a0:	f7ff faca 	bl	800e638 <mpi_sub_hlp>
    ret = 0;
 800f0a4:	2400      	movs	r4, #0
 800f0a6:	e006      	b.n	800f0b6 <mbedtls_mpi_sub_abs+0x58>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800f0a8:	4639      	mov	r1, r7
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7ff fce6 	bl	800ea7c <mbedtls_mpi_copy>
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d0ee      	beq.n	800f094 <mbedtls_mpi_sub_abs+0x36>
    mbedtls_mpi_free( &TB );
 800f0b6:	a801      	add	r0, sp, #4
 800f0b8:	f7ff fc60 	bl	800e97c <mbedtls_mpi_free>
}
 800f0bc:	4620      	mov	r0, r4
 800f0be:	b005      	add	sp, #20
 800f0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
 800f0c2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 800f0c6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1e7      	bne.n	800f09e <mbedtls_mpi_sub_abs+0x40>
    for( n = B->n; n > 0; n-- )
 800f0ce:	3801      	subs	r0, #1
 800f0d0:	e7e4      	b.n	800f09c <mbedtls_mpi_sub_abs+0x3e>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f0d2:	f06f 0409 	mvn.w	r4, #9
 800f0d6:	e7f1      	b.n	800f0bc <mbedtls_mpi_sub_abs+0x5e>

0800f0d8 <mbedtls_mpi_add_mpi>:
{
 800f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800f0da:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
 800f0dc:	6813      	ldr	r3, [r2, #0]
 800f0de:	436b      	muls	r3, r5
{
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	460f      	mov	r7, r1
 800f0e4:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
 800f0e6:	d516      	bpl.n	800f116 <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	4638      	mov	r0, r7
 800f0ec:	f7ff fe6b 	bl	800edc6 <mbedtls_mpi_cmp_abs>
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	db06      	blt.n	800f102 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800f0f4:	4632      	mov	r2, r6
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7ff ffb0 	bl	800f05e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f0fe:	b140      	cbz	r0, 800f112 <mbedtls_mpi_add_mpi+0x3a>
}
 800f100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800f102:	463a      	mov	r2, r7
 800f104:	4631      	mov	r1, r6
 800f106:	4620      	mov	r0, r4
 800f108:	f7ff ffa9 	bl	800f05e <mbedtls_mpi_sub_abs>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d1f7      	bne.n	800f100 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
 800f110:	426d      	negs	r5, r5
        X->s = s;
 800f112:	6025      	str	r5, [r4, #0]
    return( ret );
 800f114:	e7f4      	b.n	800f100 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f116:	f7ff ff49 	bl	800efac <mbedtls_mpi_add_abs>
 800f11a:	e7f0      	b.n	800f0fe <mbedtls_mpi_add_mpi+0x26>

0800f11c <mbedtls_mpi_sub_mpi>:
{
 800f11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ret, s = A->s;
 800f11e:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
 800f120:	6813      	ldr	r3, [r2, #0]
 800f122:	436b      	muls	r3, r5
 800f124:	2b00      	cmp	r3, #0
{
 800f126:	4604      	mov	r4, r0
 800f128:	460f      	mov	r7, r1
 800f12a:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
 800f12c:	dd16      	ble.n	800f15c <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800f12e:	4611      	mov	r1, r2
 800f130:	4638      	mov	r0, r7
 800f132:	f7ff fe48 	bl	800edc6 <mbedtls_mpi_cmp_abs>
 800f136:	2800      	cmp	r0, #0
 800f138:	db06      	blt.n	800f148 <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800f13a:	4632      	mov	r2, r6
 800f13c:	4639      	mov	r1, r7
 800f13e:	4620      	mov	r0, r4
 800f140:	f7ff ff8d 	bl	800f05e <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f144:	b140      	cbz	r0, 800f158 <mbedtls_mpi_sub_mpi+0x3c>
}
 800f146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800f148:	463a      	mov	r2, r7
 800f14a:	4631      	mov	r1, r6
 800f14c:	4620      	mov	r0, r4
 800f14e:	f7ff ff86 	bl	800f05e <mbedtls_mpi_sub_abs>
 800f152:	2800      	cmp	r0, #0
 800f154:	d1f7      	bne.n	800f146 <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
 800f156:	426d      	negs	r5, r5
        X->s = s;
 800f158:	6025      	str	r5, [r4, #0]
    return( ret );
 800f15a:	e7f4      	b.n	800f146 <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800f15c:	f7ff ff26 	bl	800efac <mbedtls_mpi_add_abs>
 800f160:	e7f0      	b.n	800f144 <mbedtls_mpi_sub_mpi+0x28>

0800f162 <mbedtls_mpi_sub_int>:
{
 800f162:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    p[0] = ( b < 0 ) ? -b : b;
 800f164:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800f168:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    _B.s = ( b < 0 ) ? -1 : 1;
 800f16c:	2a00      	cmp	r2, #0
    p[0] = ( b < 0 ) ? -b : b;
 800f16e:	9300      	str	r3, [sp, #0]
    _B.s = ( b < 0 ) ? -1 : 1;
 800f170:	bfb4      	ite	lt
 800f172:	f04f 33ff 	movlt.w	r3, #4294967295
 800f176:	2301      	movge	r3, #1
 800f178:	9301      	str	r3, [sp, #4]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800f17a:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800f17c:	2301      	movs	r3, #1
 800f17e:	9302      	str	r3, [sp, #8]
    _B.p = p;
 800f180:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800f184:	f7ff ffca 	bl	800f11c <mbedtls_mpi_sub_mpi>
}
 800f188:	b005      	add	sp, #20
 800f18a:	f85d fb04 	ldr.w	pc, [sp], #4

0800f18e <mbedtls_mpi_mul_mpi>:
{
 800f18e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
 800f192:	2300      	movs	r3, #0
{
 800f194:	b087      	sub	sp, #28
 800f196:	4615      	mov	r5, r2
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800f198:	4288      	cmp	r0, r1
    X->n = 0;
 800f19a:	f04f 0201 	mov.w	r2, #1
 800f19e:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
 800f1a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
 800f1a6:	e9cd 3304 	strd	r3, r3, [sp, #16]
{
 800f1aa:	4680      	mov	r8, r0
 800f1ac:	460e      	mov	r6, r1
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800f1ae:	d105      	bne.n	800f1bc <mbedtls_mpi_mul_mpi+0x2e>
 800f1b0:	4668      	mov	r0, sp
 800f1b2:	f7ff fc63 	bl	800ea7c <mbedtls_mpi_copy>
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	b9e8      	cbnz	r0, 800f1f6 <mbedtls_mpi_mul_mpi+0x68>
 800f1ba:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800f1bc:	45a8      	cmp	r8, r5
 800f1be:	d106      	bne.n	800f1ce <mbedtls_mpi_mul_mpi+0x40>
 800f1c0:	4641      	mov	r1, r8
 800f1c2:	a803      	add	r0, sp, #12
 800f1c4:	f7ff fc5a 	bl	800ea7c <mbedtls_mpi_copy>
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	b9a0      	cbnz	r0, 800f1f6 <mbedtls_mpi_mul_mpi+0x68>
 800f1cc:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
 800f1ce:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800f1d2:	f1b9 0f00 	cmp.w	r9, #0
 800f1d6:	d118      	bne.n	800f20a <mbedtls_mpi_mul_mpi+0x7c>
    for( j = B->n; j > 0; j-- )
 800f1d8:	686f      	ldr	r7, [r5, #4]
 800f1da:	bb07      	cbnz	r7, 800f21e <mbedtls_mpi_mul_mpi+0x90>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800f1dc:	eb09 0107 	add.w	r1, r9, r7
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	f7ff fbe3 	bl	800e9ac <mbedtls_mpi_grow>
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	b928      	cbnz	r0, 800f1f6 <mbedtls_mpi_mul_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800f1ea:	4601      	mov	r1, r0
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	f7ff fca2 	bl	800eb36 <mbedtls_mpi_lset>
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	b338      	cbz	r0, 800f246 <mbedtls_mpi_mul_mpi+0xb8>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800f1f6:	a803      	add	r0, sp, #12
 800f1f8:	f7ff fbc0 	bl	800e97c <mbedtls_mpi_free>
 800f1fc:	4668      	mov	r0, sp
 800f1fe:	f7ff fbbd 	bl	800e97c <mbedtls_mpi_free>
}
 800f202:	4620      	mov	r0, r4
 800f204:	b007      	add	sp, #28
 800f206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
 800f20a:	68b3      	ldr	r3, [r6, #8]
 800f20c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f210:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d1df      	bne.n	800f1d8 <mbedtls_mpi_mul_mpi+0x4a>
    for( i = A->n; i > 0; i-- )
 800f218:	f109 39ff 	add.w	r9, r9, #4294967295
 800f21c:	e7d9      	b.n	800f1d2 <mbedtls_mpi_mul_mpi+0x44>
        if( B->p[j - 1] != 0 )
 800f21e:	68ab      	ldr	r3, [r5, #8]
 800f220:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800f224:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1d7      	bne.n	800f1dc <mbedtls_mpi_mul_mpi+0x4e>
    for( j = B->n; j > 0; j-- )
 800f22c:	3f01      	subs	r7, #1
 800f22e:	e7d4      	b.n	800f1da <mbedtls_mpi_mul_mpi+0x4c>
        mpi_mul_hlp( i - 1, A->p, X->p + j - 1, B->p[j - 1] );
 800f230:	68ab      	ldr	r3, [r5, #8]
 800f232:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f236:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800f23a:	68b1      	ldr	r1, [r6, #8]
 800f23c:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800f240:	4648      	mov	r0, r9
 800f242:	f7ff fa22 	bl	800e68a <mpi_mul_hlp>
    for( i++; j > 0; j-- )
 800f246:	3f01      	subs	r7, #1
 800f248:	d2f2      	bcs.n	800f230 <mbedtls_mpi_mul_mpi+0xa2>
    X->s = A->s * B->s;
 800f24a:	6832      	ldr	r2, [r6, #0]
 800f24c:	682b      	ldr	r3, [r5, #0]
 800f24e:	4353      	muls	r3, r2
 800f250:	f8c8 3000 	str.w	r3, [r8]
 800f254:	e7cf      	b.n	800f1f6 <mbedtls_mpi_mul_mpi+0x68>

0800f256 <mbedtls_mpi_mul_int>:
{
 800f256:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
 800f258:	2301      	movs	r3, #1
    p[0] = b;
 800f25a:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800f25c:	aa01      	add	r2, sp, #4
    _B.n = 1;
 800f25e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
 800f262:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800f266:	f7ff ff92 	bl	800f18e <mbedtls_mpi_mul_mpi>
}
 800f26a:	b005      	add	sp, #20
 800f26c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f270 <mbedtls_mpi_div_mpi>:
{
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	ed2d 8b02 	vpush	{d8}
 800f278:	4606      	mov	r6, r0
 800f27a:	b095      	sub	sp, #84	; 0x54
 800f27c:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800f27e:	4618      	mov	r0, r3
 800f280:	2100      	movs	r1, #0
{
 800f282:	ee08 3a90 	vmov	s17, r3
 800f286:	4691      	mov	r9, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800f288:	f7ff fe7a 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f28c:	2800      	cmp	r0, #0
 800f28e:	f000 81a9 	beq.w	800f5e4 <mbedtls_mpi_div_mpi+0x374>
    X->n = 0;
 800f292:	2400      	movs	r4, #0
 800f294:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f296:	ee18 1a90 	vmov	r1, s17
 800f29a:	4648      	mov	r0, r9
    X->n = 0;
 800f29c:	e9cd 5405 	strd	r5, r4, [sp, #20]
    X->s = 1;
 800f2a0:	e9cd 4507 	strd	r4, r5, [sp, #28]
    X->p = NULL;
 800f2a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    X->n = 0;
 800f2a8:	e9cd 540b 	strd	r5, r4, [sp, #44]	; 0x2c
    X->s = 1;
 800f2ac:	e9cd 450d 	strd	r4, r5, [sp, #52]	; 0x34
    X->p = NULL;
 800f2b0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    X->n = 0;
 800f2b4:	e9cd 5411 	strd	r5, r4, [sp, #68]	; 0x44
    X->p = NULL;
 800f2b8:	9413      	str	r4, [sp, #76]	; 0x4c
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800f2ba:	f7ff fd84 	bl	800edc6 <mbedtls_mpi_cmp_abs>
 800f2be:	42a0      	cmp	r0, r4
 800f2c0:	da29      	bge.n	800f316 <mbedtls_mpi_div_mpi+0xa6>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800f2c2:	b94e      	cbnz	r6, 800f2d8 <mbedtls_mpi_div_mpi+0x68>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800f2c4:	f1b8 0f00 	cmp.w	r8, #0
 800f2c8:	d11d      	bne.n	800f306 <mbedtls_mpi_div_mpi+0x96>
        return( 0 );
 800f2ca:	2400      	movs	r4, #0
}
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	b015      	add	sp, #84	; 0x54
 800f2d0:	ecbd 8b02 	vpop	{d8}
 800f2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800f2d8:	4621      	mov	r1, r4
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7ff fc2b 	bl	800eb36 <mbedtls_mpi_lset>
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d0ee      	beq.n	800f2c4 <mbedtls_mpi_div_mpi+0x54>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f2e6:	a805      	add	r0, sp, #20
 800f2e8:	f7ff fb48 	bl	800e97c <mbedtls_mpi_free>
 800f2ec:	a808      	add	r0, sp, #32
 800f2ee:	f7ff fb45 	bl	800e97c <mbedtls_mpi_free>
 800f2f2:	a80b      	add	r0, sp, #44	; 0x2c
 800f2f4:	f7ff fb42 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800f2f8:	a80e      	add	r0, sp, #56	; 0x38
 800f2fa:	f7ff fb3f 	bl	800e97c <mbedtls_mpi_free>
 800f2fe:	a811      	add	r0, sp, #68	; 0x44
 800f300:	f7ff fb3c 	bl	800e97c <mbedtls_mpi_free>
    return( ret );
 800f304:	e7e2      	b.n	800f2cc <mbedtls_mpi_div_mpi+0x5c>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800f306:	4649      	mov	r1, r9
 800f308:	4640      	mov	r0, r8
 800f30a:	f7ff fbb7 	bl	800ea7c <mbedtls_mpi_copy>
 800f30e:	4604      	mov	r4, r0
 800f310:	2800      	cmp	r0, #0
 800f312:	d1e8      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
 800f314:	e7d9      	b.n	800f2ca <mbedtls_mpi_div_mpi+0x5a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800f316:	4649      	mov	r1, r9
 800f318:	a805      	add	r0, sp, #20
 800f31a:	f7ff fbaf 	bl	800ea7c <mbedtls_mpi_copy>
 800f31e:	4604      	mov	r4, r0
 800f320:	2800      	cmp	r0, #0
 800f322:	d1e0      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800f324:	af08      	add	r7, sp, #32
 800f326:	ee18 1a90 	vmov	r1, s17
 800f32a:	4638      	mov	r0, r7
 800f32c:	f7ff fba6 	bl	800ea7c <mbedtls_mpi_copy>
 800f330:	4604      	mov	r4, r0
 800f332:	2800      	cmp	r0, #0
 800f334:	d1d7      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f336:	f8d9 1004 	ldr.w	r1, [r9, #4]
    X.s = Y.s = 1;
 800f33a:	9508      	str	r5, [sp, #32]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f33c:	3102      	adds	r1, #2
 800f33e:	a80b      	add	r0, sp, #44	; 0x2c
    X.s = Y.s = 1;
 800f340:	9505      	str	r5, [sp, #20]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800f342:	f7ff fb33 	bl	800e9ac <mbedtls_mpi_grow>
 800f346:	4604      	mov	r4, r0
 800f348:	2800      	cmp	r0, #0
 800f34a:	d1cc      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800f34c:	4601      	mov	r1, r0
 800f34e:	a80b      	add	r0, sp, #44	; 0x2c
 800f350:	f7ff fbf1 	bl	800eb36 <mbedtls_mpi_lset>
 800f354:	4604      	mov	r4, r0
 800f356:	2800      	cmp	r0, #0
 800f358:	d1c5      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800f35a:	2102      	movs	r1, #2
 800f35c:	a80e      	add	r0, sp, #56	; 0x38
 800f35e:	f7ff fb25 	bl	800e9ac <mbedtls_mpi_grow>
 800f362:	4604      	mov	r4, r0
 800f364:	2800      	cmp	r0, #0
 800f366:	d1be      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800f368:	2103      	movs	r1, #3
 800f36a:	a811      	add	r0, sp, #68	; 0x44
 800f36c:	f7ff fb1e 	bl	800e9ac <mbedtls_mpi_grow>
 800f370:	4604      	mov	r4, r0
 800f372:	2800      	cmp	r0, #0
 800f374:	d1b7      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800f376:	4638      	mov	r0, r7
 800f378:	f7ff fc25 	bl	800ebc6 <mbedtls_mpi_bitlen>
 800f37c:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
 800f380:	281f      	cmp	r0, #31
 800f382:	d075      	beq.n	800f470 <mbedtls_mpi_div_mpi+0x200>
        k = biL - 1 - k;
 800f384:	f1c0 031f 	rsb	r3, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800f388:	4619      	mov	r1, r3
 800f38a:	a805      	add	r0, sp, #20
        k = biL - 1 - k;
 800f38c:	ee08 3a10 	vmov	s16, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800f390:	f7ff fc91 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800f394:	4604      	mov	r4, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	d1a5      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800f39a:	ee18 1a10 	vmov	r1, s16
 800f39e:	4638      	mov	r0, r7
 800f3a0:	f7ff fc89 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d19d      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    n = X.n - 1;
 800f3aa:	9d06      	ldr	r5, [sp, #24]
    t = Y.n - 1;
 800f3ac:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800f3b0:	eba5 030a 	sub.w	r3, r5, sl
 800f3b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800f3b8:	4659      	mov	r1, fp
 800f3ba:	4638      	mov	r0, r7
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	f7ff fc7a 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d18e      	bne.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
        Z.p[n - t]++;
 800f3c8:	9b00      	ldr	r3, [sp, #0]
 800f3ca:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800f3cc:	4639      	mov	r1, r7
 800f3ce:	a805      	add	r0, sp, #20
 800f3d0:	9300      	str	r3, [sp, #0]
 800f3d2:	f7ff fd92 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	9b00      	ldr	r3, [sp, #0]
 800f3da:	da4c      	bge.n	800f476 <mbedtls_mpi_div_mpi+0x206>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800f3dc:	4659      	mov	r1, fp
 800f3de:	4638      	mov	r0, r7
 800f3e0:	f7ff fcb7 	bl	800ed52 <mbedtls_mpi_shift_r>
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	f47f af7d 	bne.w	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    t = Y.n - 1;
 800f3ec:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f3f0:	9300      	str	r3, [sp, #0]
        if( X.p[i] >= Y.p[t] )
 800f3f2:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
 800f3f4:	1e6f      	subs	r7, r5, #1
        if( X.p[i] >= Y.p[t] )
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f3fc:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 800f400:	3b02      	subs	r3, #2
 800f402:	3d01      	subs	r5, #1
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	eba5 0a0a 	sub.w	sl, r5, sl
 800f40a:	9303      	str	r3, [sp, #12]
 800f40c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
 800f410:	9b00      	ldr	r3, [sp, #0]
 800f412:	429f      	cmp	r7, r3
 800f414:	d83e      	bhi.n	800f494 <mbedtls_mpi_div_mpi+0x224>
    if( Q != NULL )
 800f416:	b15e      	cbz	r6, 800f430 <mbedtls_mpi_div_mpi+0x1c0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800f418:	a90b      	add	r1, sp, #44	; 0x2c
 800f41a:	4630      	mov	r0, r6
 800f41c:	f7ff fb2e 	bl	800ea7c <mbedtls_mpi_copy>
 800f420:	bb20      	cbnz	r0, 800f46c <mbedtls_mpi_div_mpi+0x1fc>
        Q->s = A->s * B->s;
 800f422:	ee18 3a90 	vmov	r3, s17
 800f426:	f8d9 2000 	ldr.w	r2, [r9]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4353      	muls	r3, r2
 800f42e:	6033      	str	r3, [r6, #0]
    if( R != NULL )
 800f430:	f1b8 0f00 	cmp.w	r8, #0
 800f434:	f43f af57 	beq.w	800f2e6 <mbedtls_mpi_div_mpi+0x76>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800f438:	ee18 1a10 	vmov	r1, s16
 800f43c:	a805      	add	r0, sp, #20
 800f43e:	f7ff fc88 	bl	800ed52 <mbedtls_mpi_shift_r>
 800f442:	b998      	cbnz	r0, 800f46c <mbedtls_mpi_div_mpi+0x1fc>
        X.s = A->s;
 800f444:	f8d9 3000 	ldr.w	r3, [r9]
 800f448:	9305      	str	r3, [sp, #20]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800f44a:	a905      	add	r1, sp, #20
 800f44c:	4640      	mov	r0, r8
 800f44e:	f7ff fb15 	bl	800ea7c <mbedtls_mpi_copy>
 800f452:	4601      	mov	r1, r0
 800f454:	2800      	cmp	r0, #0
 800f456:	f040 80c3 	bne.w	800f5e0 <mbedtls_mpi_div_mpi+0x370>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800f45a:	4640      	mov	r0, r8
 800f45c:	f7ff fd90 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f460:	2800      	cmp	r0, #0
 800f462:	f47f af40 	bne.w	800f2e6 <mbedtls_mpi_div_mpi+0x76>
            R->s = 1;
 800f466:	2301      	movs	r3, #1
 800f468:	f8c8 3000 	str.w	r3, [r8]
 800f46c:	4604      	mov	r4, r0
 800f46e:	e73a      	b.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
    else k = 0;
 800f470:	ee08 4a10 	vmov	s16, r4
 800f474:	e799      	b.n	800f3aa <mbedtls_mpi_div_mpi+0x13a>
        Z.p[n - t]++;
 800f476:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	58ca      	ldr	r2, [r1, r3]
 800f47c:	3201      	adds	r2, #1
 800f47e:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800f480:	a905      	add	r1, sp, #20
 800f482:	463a      	mov	r2, r7
 800f484:	4608      	mov	r0, r1
 800f486:	f7ff fe49 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	4604      	mov	r4, r0
 800f48e:	2800      	cmp	r0, #0
 800f490:	d09c      	beq.n	800f3cc <mbedtls_mpi_div_mpi+0x15c>
 800f492:	e728      	b.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
        if( X.p[i] >= Y.p[t] )
 800f494:	9801      	ldr	r0, [sp, #4]
 800f496:	9b07      	ldr	r3, [sp, #28]
 800f498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f49a:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800f49e:	5812      	ldr	r2, [r2, r0]
 800f4a0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800f4a4:	f1ab 0004 	sub.w	r0, fp, #4
 800f4a8:	9002      	str	r0, [sp, #8]
 800f4aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f4ac:	4291      	cmp	r1, r2
 800f4ae:	eb00 050a 	add.w	r5, r0, sl
 800f4b2:	d37e      	bcc.n	800f5b2 <mbedtls_mpi_div_mpi+0x342>
            Z.p[i - t - 1] = ~0;
 800f4b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b8:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	602b      	str	r3, [r5, #0]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f4c2:	f1ab 0508 	sub.w	r5, fp, #8
            Z.p[i - t - 1]--;
 800f4c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4c8:	f852 300a 	ldr.w	r3, [r2, sl]
 800f4cc:	3b01      	subs	r3, #1
 800f4ce:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	a80e      	add	r0, sp, #56	; 0x38
 800f4d6:	f7ff fb2e 	bl	800eb36 <mbedtls_mpi_lset>
 800f4da:	2800      	cmp	r0, #0
 800f4dc:	d1c6      	bne.n	800f46c <mbedtls_mpi_div_mpi+0x1fc>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f4de:	9b00      	ldr	r3, [sp, #0]
 800f4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d07a      	beq.n	800f5dc <mbedtls_mpi_div_mpi+0x36c>
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	58d1      	ldr	r1, [r2, r3]
 800f4ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4ec:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
 800f4ee:	9901      	ldr	r1, [sp, #4]
 800f4f0:	5852      	ldr	r2, [r2, r1]
 800f4f2:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800f4f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4f6:	a90e      	add	r1, sp, #56	; 0x38
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	f853 200a 	ldr.w	r2, [r3, sl]
 800f4fe:	f7ff feaa 	bl	800f256 <mbedtls_mpi_mul_int>
 800f502:	4601      	mov	r1, r0
 800f504:	2800      	cmp	r0, #0
 800f506:	d16b      	bne.n	800f5e0 <mbedtls_mpi_div_mpi+0x370>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800f508:	a811      	add	r0, sp, #68	; 0x44
 800f50a:	f7ff fb14 	bl	800eb36 <mbedtls_mpi_lset>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d1ac      	bne.n	800f46c <mbedtls_mpi_div_mpi+0x1fc>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f512:	9a07      	ldr	r2, [sp, #28]
 800f514:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f516:	9902      	ldr	r1, [sp, #8]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800f518:	2f01      	cmp	r7, #1
 800f51a:	bf18      	it	ne
 800f51c:	5950      	ldrne	r0, [r2, r5]
 800f51e:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800f520:	5851      	ldr	r1, [r2, r1]
 800f522:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
 800f524:	f852 200b 	ldr.w	r2, [r2, fp]
 800f528:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800f52a:	a911      	add	r1, sp, #68	; 0x44
 800f52c:	a80e      	add	r0, sp, #56	; 0x38
 800f52e:	f7ff fce4 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800f532:	2800      	cmp	r0, #0
 800f534:	dcc7      	bgt.n	800f4c6 <mbedtls_mpi_div_mpi+0x256>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800f536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f538:	a908      	add	r1, sp, #32
 800f53a:	f853 200a 	ldr.w	r2, [r3, sl]
 800f53e:	a80e      	add	r0, sp, #56	; 0x38
 800f540:	f7ff fe89 	bl	800f256 <mbedtls_mpi_mul_int>
 800f544:	2800      	cmp	r0, #0
 800f546:	d191      	bne.n	800f46c <mbedtls_mpi_div_mpi+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800f548:	ea4f 05ca 	mov.w	r5, sl, lsl #3
 800f54c:	4629      	mov	r1, r5
 800f54e:	a80e      	add	r0, sp, #56	; 0x38
 800f550:	f7ff fbb1 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800f554:	2800      	cmp	r0, #0
 800f556:	d189      	bne.n	800f46c <mbedtls_mpi_div_mpi+0x1fc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800f558:	a905      	add	r1, sp, #20
 800f55a:	4608      	mov	r0, r1
 800f55c:	aa0e      	add	r2, sp, #56	; 0x38
 800f55e:	f7ff fddd 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800f562:	4601      	mov	r1, r0
 800f564:	2800      	cmp	r0, #0
 800f566:	d13b      	bne.n	800f5e0 <mbedtls_mpi_div_mpi+0x370>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800f568:	a805      	add	r0, sp, #20
 800f56a:	f7ff fd09 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f56e:	2800      	cmp	r0, #0
 800f570:	da1b      	bge.n	800f5aa <mbedtls_mpi_div_mpi+0x33a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800f572:	a908      	add	r1, sp, #32
 800f574:	a80e      	add	r0, sp, #56	; 0x38
 800f576:	f7ff fa81 	bl	800ea7c <mbedtls_mpi_copy>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	f47f af76 	bne.w	800f46c <mbedtls_mpi_div_mpi+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800f580:	4629      	mov	r1, r5
 800f582:	a80e      	add	r0, sp, #56	; 0x38
 800f584:	f7ff fb97 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800f588:	2800      	cmp	r0, #0
 800f58a:	f47f af6f 	bne.w	800f46c <mbedtls_mpi_div_mpi+0x1fc>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800f58e:	a905      	add	r1, sp, #20
 800f590:	aa0e      	add	r2, sp, #56	; 0x38
 800f592:	4608      	mov	r0, r1
 800f594:	f7ff fda0 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 800f598:	2800      	cmp	r0, #0
 800f59a:	f47f af67 	bne.w	800f46c <mbedtls_mpi_div_mpi+0x1fc>
            Z.p[i - t - 1]--;
 800f59e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5a0:	f852 300a 	ldr.w	r3, [r2, sl]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
 800f5aa:	3f01      	subs	r7, #1
 800f5ac:	f1aa 0a04 	sub.w	sl, sl, #4
 800f5b0:	e72e      	b.n	800f410 <mbedtls_mpi_div_mpi+0x1a0>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f5b2:	9802      	ldr	r0, [sp, #8]
 800f5b4:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
 800f5b6:	b172      	cbz	r2, 800f5d6 <mbedtls_mpi_div_mpi+0x366>
    quotient = dividend / d;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	f7f1 fb75 	bl	8000ca8 <__aeabi_uldivmod>
 800f5be:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
 800f5c0:	2100      	movs	r1, #0
    quotient = dividend / d;
 800f5c2:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
 800f5c4:	4299      	cmp	r1, r3
 800f5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ca:	bf08      	it	eq
 800f5cc:	4290      	cmpeq	r0, r2
 800f5ce:	d200      	bcs.n	800f5d2 <mbedtls_mpi_div_mpi+0x362>
 800f5d0:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800f5d2:	602a      	str	r2, [r5, #0]
 800f5d4:	e772      	b.n	800f4bc <mbedtls_mpi_div_mpi+0x24c>
        return ( ~0 );
 800f5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5da:	e7fa      	b.n	800f5d2 <mbedtls_mpi_div_mpi+0x362>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800f5dc:	9900      	ldr	r1, [sp, #0]
 800f5de:	e784      	b.n	800f4ea <mbedtls_mpi_div_mpi+0x27a>
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	e680      	b.n	800f2e6 <mbedtls_mpi_div_mpi+0x76>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800f5e4:	f06f 040b 	mvn.w	r4, #11
 800f5e8:	e670      	b.n	800f2cc <mbedtls_mpi_div_mpi+0x5c>

0800f5ea <mbedtls_mpi_mod_mpi>:
{
 800f5ea:	b570      	push	{r4, r5, r6, lr}
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f5f0:	4610      	mov	r0, r2
 800f5f2:	2100      	movs	r1, #0
{
 800f5f4:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800f5f6:	f7ff fcc3 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	db24      	blt.n	800f648 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800f5fe:	462a      	mov	r2, r5
 800f600:	4633      	mov	r3, r6
 800f602:	4621      	mov	r1, r4
 800f604:	2000      	movs	r0, #0
 800f606:	f7ff fe33 	bl	800f270 <mbedtls_mpi_div_mpi>
 800f60a:	4605      	mov	r5, r0
 800f60c:	b138      	cbz	r0, 800f61e <mbedtls_mpi_mod_mpi+0x34>
}
 800f60e:	4628      	mov	r0, r5
 800f610:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800f612:	4632      	mov	r2, r6
 800f614:	4621      	mov	r1, r4
 800f616:	4620      	mov	r0, r4
 800f618:	f7ff fd5e 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 800f61c:	b990      	cbnz	r0, 800f644 <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800f61e:	2100      	movs	r1, #0
 800f620:	4620      	mov	r0, r4
 800f622:	f7ff fcad 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f626:	2800      	cmp	r0, #0
 800f628:	dbf3      	blt.n	800f612 <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800f62a:	4631      	mov	r1, r6
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7ff fc64 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800f632:	2800      	cmp	r0, #0
 800f634:	dbeb      	blt.n	800f60e <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800f636:	4632      	mov	r2, r6
 800f638:	4621      	mov	r1, r4
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7ff fd6e 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800f640:	2800      	cmp	r0, #0
 800f642:	d0f2      	beq.n	800f62a <mbedtls_mpi_mod_mpi+0x40>
 800f644:	4605      	mov	r5, r0
 800f646:	e7e2      	b.n	800f60e <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800f648:	f06f 0509 	mvn.w	r5, #9
 800f64c:	e7df      	b.n	800f60e <mbedtls_mpi_mod_mpi+0x24>

0800f64e <mbedtls_mpi_exp_mod>:

/*
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *E, const mbedtls_mpi *N, mbedtls_mpi *_RR )
{
 800f64e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f652:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800f656:	4605      	mov	r5, r0
 800f658:	4688      	mov	r8, r1
    size_t bufsize, nbits;
    mbedtls_mpi_uint ei, mm, state;
    mbedtls_mpi RR, T, W[ 2 << MBEDTLS_MPI_WINDOW_SIZE ], Apos;
    int neg;

    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f65a:	4618      	mov	r0, r3
 800f65c:	2100      	movs	r1, #0
{
 800f65e:	9202      	str	r2, [sp, #8]
 800f660:	461c      	mov	r4, r3
    if( mbedtls_mpi_cmp_int( N, 0 ) < 0 || ( N->p[0] & 1 ) == 0 )
 800f662:	f7ff fc8d 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f666:	2800      	cmp	r0, #0
 800f668:	f2c0 821c 	blt.w	800faa4 <mbedtls_mpi_exp_mod+0x456>
 800f66c:	68a3      	ldr	r3, [r4, #8]
 800f66e:	681e      	ldr	r6, [r3, #0]
 800f670:	f016 0301 	ands.w	r3, r6, #1
 800f674:	9304      	str	r3, [sp, #16]
 800f676:	f000 8215 	beq.w	800faa4 <mbedtls_mpi_exp_mod+0x456>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
 800f67a:	9802      	ldr	r0, [sp, #8]
 800f67c:	2100      	movs	r1, #0
 800f67e:	f7ff fc7f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800f682:	2800      	cmp	r0, #0
 800f684:	f2c0 820e 	blt.w	800faa4 <mbedtls_mpi_exp_mod+0x456>
    x += ( ( m0 + 2 ) & 4 ) << 1;
 800f688:	1cb7      	adds	r7, r6, #2
 800f68a:	007f      	lsls	r7, r7, #1
 800f68c:	f007 0708 	and.w	r7, r7, #8
 800f690:	4437      	add	r7, r6
 800f692:	2103      	movs	r1, #3
        x *= ( 2 - ( m0 * x ) );
 800f694:	fb07 f306 	mul.w	r3, r7, r6
 800f698:	f1c3 0302 	rsb	r3, r3, #2
    for( i = biL; i >= 8; i /= 2 )
 800f69c:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
 800f69e:	fb03 f707 	mul.w	r7, r3, r7
    for( i = biL; i >= 8; i /= 2 )
 800f6a2:	d1f7      	bne.n	800f694 <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
 800f6a4:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
 800f6a6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f6aa:	a814      	add	r0, sp, #80	; 0x50
    X->n = 0;
 800f6ac:	e9cd 3108 	strd	r3, r1, [sp, #32]
    X->s = 1;
 800f6b0:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    X->p = NULL;
 800f6b4:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
    X->n = 0;
 800f6b8:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
    X->p = NULL;
 800f6bc:	9110      	str	r1, [sp, #64]	; 0x40
    memset( W, 0, sizeof( W ) );
 800f6be:	f012 febb 	bl	8022438 <memset>

    i = mbedtls_mpi_bitlen( E );
 800f6c2:	9802      	ldr	r0, [sp, #8]
 800f6c4:	f7ff fa7f 	bl	800ebc6 <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f6c8:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
 800f6cc:	f080 80e2 	bcs.w	800f894 <mbedtls_mpi_exp_mod+0x246>
 800f6d0:	28ef      	cmp	r0, #239	; 0xef
 800f6d2:	f200 80e1 	bhi.w	800f898 <mbedtls_mpi_exp_mod+0x24a>
 800f6d6:	284f      	cmp	r0, #79	; 0x4f
 800f6d8:	f200 80e0 	bhi.w	800f89c <mbedtls_mpi_exp_mod+0x24e>
 800f6dc:	9b04      	ldr	r3, [sp, #16]
 800f6de:	2817      	cmp	r0, #23
 800f6e0:	bf94      	ite	ls
 800f6e2:	461e      	movls	r6, r3
 800f6e4:	2603      	movhi	r6, #3
            ( i >  79 ) ? 4 : ( i >  23 ) ? 3 : 1;

    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;

    j = N->n + 1;
 800f6e6:	6861      	ldr	r1, [r4, #4]
 800f6e8:	f101 0901 	add.w	r9, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800f6ec:	4649      	mov	r1, r9
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	f7ff f95c 	bl	800e9ac <mbedtls_mpi_grow>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	f040 81a9 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
 800f6fc:	4649      	mov	r1, r9
 800f6fe:	a817      	add	r0, sp, #92	; 0x5c
 800f700:	f7ff f954 	bl	800e9ac <mbedtls_mpi_grow>
 800f704:	4602      	mov	r2, r0
 800f706:	2800      	cmp	r0, #0
 800f708:	f040 81a1 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
 800f70c:	ea4f 0149 	mov.w	r1, r9, lsl #1
 800f710:	a80b      	add	r0, sp, #44	; 0x2c
 800f712:	f7ff f94b 	bl	800e9ac <mbedtls_mpi_grow>
 800f716:	4602      	mov	r2, r0
 800f718:	2800      	cmp	r0, #0
 800f71a:	f040 8198 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
 800f71e:	f8d8 3000 	ldr.w	r3, [r8]
 800f722:	9303      	str	r3, [sp, #12]
    if( neg )
 800f724:	3301      	adds	r3, #1
 800f726:	d10b      	bne.n	800f740 <mbedtls_mpi_exp_mod+0xf2>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
 800f728:	4641      	mov	r1, r8
 800f72a:	a80e      	add	r0, sp, #56	; 0x38
 800f72c:	f7ff f9a6 	bl	800ea7c <mbedtls_mpi_copy>
 800f730:	4602      	mov	r2, r0
 800f732:	2800      	cmp	r0, #0
 800f734:	f040 818b 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
        Apos.s = 1;
 800f738:	2301      	movs	r3, #1
 800f73a:	930e      	str	r3, [sp, #56]	; 0x38
        A = &Apos;
 800f73c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
 800f740:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f744:	b11b      	cbz	r3, 800f74e <mbedtls_mpi_exp_mod+0x100>
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f040 80a9 	bne.w	800f8a0 <mbedtls_mpi_exp_mod+0x252>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
 800f74e:	2101      	movs	r1, #1
 800f750:	a808      	add	r0, sp, #32
 800f752:	f7ff f9f0 	bl	800eb36 <mbedtls_mpi_lset>
 800f756:	4602      	mov	r2, r0
 800f758:	2800      	cmp	r0, #0
 800f75a:	f040 8178 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
 800f75e:	6861      	ldr	r1, [r4, #4]
 800f760:	a808      	add	r0, sp, #32
 800f762:	0189      	lsls	r1, r1, #6
 800f764:	f7ff faa7 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800f768:	4602      	mov	r2, r0
 800f76a:	2800      	cmp	r0, #0
 800f76c:	f040 816f 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
 800f770:	a908      	add	r1, sp, #32
 800f772:	4622      	mov	r2, r4
 800f774:	4608      	mov	r0, r1
 800f776:	f7ff ff38 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 800f77a:	4602      	mov	r2, r0
 800f77c:	2800      	cmp	r0, #0
 800f77e:	f040 8166 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>

        if( _RR != NULL )
 800f782:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800f786:	b13b      	cbz	r3, 800f798 <mbedtls_mpi_exp_mod+0x14a>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
 800f788:	ab08      	add	r3, sp, #32
 800f78a:	cb03      	ldmia	r3!, {r0, r1}
 800f78c:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f790:	6010      	str	r0, [r2, #0]
 800f792:	6818      	ldr	r0, [r3, #0]
 800f794:	6051      	str	r1, [r2, #4]
 800f796:	6090      	str	r0, [r2, #8]
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
 800f798:	4621      	mov	r1, r4
 800f79a:	4640      	mov	r0, r8
 800f79c:	f7ff fbad 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	f2c0 8086 	blt.w	800f8b2 <mbedtls_mpi_exp_mod+0x264>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	4641      	mov	r1, r8
 800f7aa:	a817      	add	r0, sp, #92	; 0x5c
 800f7ac:	f7ff ff1d 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	f040 814b 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f7b8:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    *mm = ~x + 1;
 800f7bc:	427b      	negs	r3, r7
    MBEDTLS_MPI_CHK( mpi_montmul( &W[1], &RR, N, mm, &T ) );
 800f7be:	4622      	mov	r2, r4
 800f7c0:	f8cd 9000 	str.w	r9, [sp]
 800f7c4:	a908      	add	r1, sp, #32
 800f7c6:	a817      	add	r0, sp, #92	; 0x5c
 800f7c8:	9305      	str	r3, [sp, #20]
 800f7ca:	f7ff fb2f 	bl	800ee2c <mpi_montmul>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	f040 813c 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
 800f7d6:	a908      	add	r1, sp, #32
 800f7d8:	4628      	mov	r0, r5
 800f7da:	f7ff f94f 	bl	800ea7c <mbedtls_mpi_copy>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	f040 8134 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
    mbedtls_mpi_uint z = 1;
 800f7e6:	aa07      	add	r2, sp, #28
 800f7e8:	2701      	movs	r7, #1
    U.p = &z;
 800f7ea:	9213      	str	r2, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f7ec:	9b05      	ldr	r3, [sp, #20]
 800f7ee:	f8cd 9000 	str.w	r9, [sp]
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	a911      	add	r1, sp, #68	; 0x44
 800f7f6:	4628      	mov	r0, r5
    U.n = U.s = (int) z;
 800f7f8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
 800f7fc:	9707      	str	r7, [sp, #28]
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f7fe:	f7ff fb15 	bl	800ee2c <mpi_montmul>
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f802:	4602      	mov	r2, r0
 800f804:	2800      	cmp	r0, #0
 800f806:	f040 8122 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>

    if( wsize > 1 )
 800f80a:	42be      	cmp	r6, r7
 800f80c:	9b05      	ldr	r3, [sp, #20]
 800f80e:	d155      	bne.n	800f8bc <mbedtls_mpi_exp_mod+0x26e>

            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
        }
    }

    nblimbs = E->n;
 800f810:	9a02      	ldr	r2, [sp, #8]
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
 800f812:	f04f 0800 	mov.w	r8, #0
    nblimbs = E->n;
 800f816:	f8d2 b004 	ldr.w	fp, [r2, #4]
    nbits   = 0;
 800f81a:	4647      	mov	r7, r8
    bufsize = 0;
 800f81c:	46c1      	mov	r9, r8
    wbits   = 0;
 800f81e:	46c2      	mov	sl, r8

    while( 1 )
    {
        if( bufsize == 0 )
 800f820:	f1b9 0f00 	cmp.w	r9, #0
 800f824:	f040 80ac 	bne.w	800f980 <mbedtls_mpi_exp_mod+0x332>
        {
            if( nblimbs == 0 )
 800f828:	f1bb 0f00 	cmp.w	fp, #0
 800f82c:	f040 80a4 	bne.w	800f978 <mbedtls_mpi_exp_mod+0x32a>
    {
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
 800f830:	f04f 0901 	mov.w	r9, #1
 800f834:	fa09 f906 	lsl.w	r9, r9, r6
 800f838:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
    for( i = 0; i < nbits; i++ )
 800f83c:	45bb      	cmp	fp, r7
 800f83e:	f040 80e7 	bne.w	800fa10 <mbedtls_mpi_exp_mod+0x3c2>
    mbedtls_mpi_uint z = 1;
 800f842:	2201      	movs	r2, #1
 800f844:	a907      	add	r1, sp, #28
    U.n = U.s = (int) z;
 800f846:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
    mbedtls_mpi_uint z = 1;
 800f84a:	9207      	str	r2, [sp, #28]
    U.p = &z;
 800f84c:	9113      	str	r1, [sp, #76]	; 0x4c
    return( mpi_montmul( A, &U, N, mm, T ) );
 800f84e:	4622      	mov	r2, r4
 800f850:	f8cd 8000 	str.w	r8, [sp]
 800f854:	a911      	add	r1, sp, #68	; 0x44
 800f856:	4628      	mov	r0, r5
 800f858:	f7ff fae8 	bl	800ee2c <mpi_montmul>
    }

    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    MBEDTLS_MPI_CHK( mpi_montred( X, N, mm, &T ) );
 800f85c:	4602      	mov	r2, r0
 800f85e:	2800      	cmp	r0, #0
 800f860:	f040 80f5 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
 800f864:	9b03      	ldr	r3, [sp, #12]
 800f866:	3301      	adds	r3, #1
 800f868:	f040 80f1 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
 800f86c:	9b02      	ldr	r3, [sp, #8]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 80ec 	beq.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
 800f876:	9b02      	ldr	r3, [sp, #8]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	07db      	lsls	r3, r3, #31
 800f87e:	f140 80e6 	bpl.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
    {
        X->s = -1;
 800f882:	9b03      	ldr	r3, [sp, #12]
 800f884:	602b      	str	r3, [r5, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
 800f886:	462a      	mov	r2, r5
 800f888:	4621      	mov	r1, r4
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7ff fc24 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 800f890:	4602      	mov	r2, r0
    }

cleanup:
 800f892:	e0dc      	b.n	800fa4e <mbedtls_mpi_exp_mod+0x400>
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
 800f894:	2606      	movs	r6, #6
 800f896:	e726      	b.n	800f6e6 <mbedtls_mpi_exp_mod+0x98>
 800f898:	2605      	movs	r6, #5
 800f89a:	e724      	b.n	800f6e6 <mbedtls_mpi_exp_mod+0x98>
 800f89c:	2604      	movs	r6, #4
 800f89e:	e722      	b.n	800f6e6 <mbedtls_mpi_exp_mod+0x98>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
 800f8a0:	f8dd 2678 	ldr.w	r2, [sp, #1656]	; 0x678
 800f8a4:	6810      	ldr	r0, [r2, #0]
 800f8a6:	6851      	ldr	r1, [r2, #4]
 800f8a8:	ab08      	add	r3, sp, #32
 800f8aa:	c303      	stmia	r3!, {r0, r1}
 800f8ac:	6890      	ldr	r0, [r2, #8]
 800f8ae:	6018      	str	r0, [r3, #0]
 800f8b0:	e772      	b.n	800f798 <mbedtls_mpi_exp_mod+0x14a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
 800f8b2:	4641      	mov	r1, r8
 800f8b4:	a817      	add	r0, sp, #92	; 0x5c
 800f8b6:	f7ff f8e1 	bl	800ea7c <mbedtls_mpi_copy>
 800f8ba:	e779      	b.n	800f7b0 <mbedtls_mpi_exp_mod+0x162>
 800f8bc:	f106 3bff 	add.w	fp, r6, #4294967295
 800f8c0:	fa07 f80b 	lsl.w	r8, r7, fp
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
 800f8c4:	270c      	movs	r7, #12
 800f8c6:	6861      	ldr	r1, [r4, #4]
 800f8c8:	9305      	str	r3, [sp, #20]
 800f8ca:	fa07 f70b 	lsl.w	r7, r7, fp
 800f8ce:	ab14      	add	r3, sp, #80	; 0x50
 800f8d0:	441f      	add	r7, r3
 800f8d2:	3101      	adds	r1, #1
 800f8d4:	4638      	mov	r0, r7
 800f8d6:	f7ff f869 	bl	800e9ac <mbedtls_mpi_grow>
 800f8da:	4602      	mov	r2, r0
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	f040 80b6 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
 800f8e2:	a917      	add	r1, sp, #92	; 0x5c
 800f8e4:	4638      	mov	r0, r7
 800f8e6:	f7ff f8c9 	bl	800ea7c <mbedtls_mpi_copy>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	f040 80ae 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f8f2:	9b05      	ldr	r3, [sp, #20]
        for( i = 0; i < wsize - 1; i++ )
 800f8f4:	4682      	mov	sl, r0
            MBEDTLS_MPI_CHK( mpi_montmul( &W[j], &W[j], N, mm, &T ) );
 800f8f6:	4622      	mov	r2, r4
 800f8f8:	f8cd 9000 	str.w	r9, [sp]
 800f8fc:	4639      	mov	r1, r7
 800f8fe:	4638      	mov	r0, r7
 800f900:	9305      	str	r3, [sp, #20]
 800f902:	f7ff fa93 	bl	800ee2c <mpi_montmul>
 800f906:	4602      	mov	r2, r0
 800f908:	2800      	cmp	r0, #0
 800f90a:	f040 80a0 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
        for( i = 0; i < wsize - 1; i++ )
 800f90e:	f10a 0a01 	add.w	sl, sl, #1
 800f912:	45d3      	cmp	fp, sl
 800f914:	9b05      	ldr	r3, [sp, #20]
 800f916:	d8ee      	bhi.n	800f8f6 <mbedtls_mpi_exp_mod+0x2a8>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f918:	f04f 0a01 	mov.w	sl, #1
 800f91c:	46bb      	mov	fp, r7
 800f91e:	f108 0801 	add.w	r8, r8, #1
 800f922:	fa0a fa06 	lsl.w	sl, sl, r6
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f926:	af0b      	add	r7, sp, #44	; 0x2c
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f928:	45c2      	cmp	sl, r8
 800f92a:	f67f af71 	bls.w	800f810 <mbedtls_mpi_exp_mod+0x1c2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
 800f92e:	6861      	ldr	r1, [r4, #4]
 800f930:	9305      	str	r3, [sp, #20]
 800f932:	f10b 090c 	add.w	r9, fp, #12
 800f936:	3101      	adds	r1, #1
 800f938:	4648      	mov	r0, r9
 800f93a:	f7ff f837 	bl	800e9ac <mbedtls_mpi_grow>
 800f93e:	4602      	mov	r2, r0
 800f940:	2800      	cmp	r0, #0
 800f942:	f040 8084 	bne.w	800fa4e <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
 800f946:	4659      	mov	r1, fp
 800f948:	4648      	mov	r0, r9
 800f94a:	f7ff f897 	bl	800ea7c <mbedtls_mpi_copy>
 800f94e:	4602      	mov	r2, r0
 800f950:	2800      	cmp	r0, #0
 800f952:	d17c      	bne.n	800fa4e <mbedtls_mpi_exp_mod+0x400>
            MBEDTLS_MPI_CHK( mpi_montmul( &W[i], &W[1], N, mm, &T ) );
 800f954:	4622      	mov	r2, r4
 800f956:	9b05      	ldr	r3, [sp, #20]
 800f958:	9700      	str	r7, [sp, #0]
 800f95a:	a917      	add	r1, sp, #92	; 0x5c
 800f95c:	4648      	mov	r0, r9
 800f95e:	f7ff fa65 	bl	800ee2c <mpi_montmul>
 800f962:	4602      	mov	r2, r0
 800f964:	2800      	cmp	r0, #0
 800f966:	d172      	bne.n	800fa4e <mbedtls_mpi_exp_mod+0x400>
        for( i = j + 1; i < ( one << wsize ); i++ )
 800f968:	9b05      	ldr	r3, [sp, #20]
 800f96a:	f108 0801 	add.w	r8, r8, #1
 800f96e:	46cb      	mov	fp, r9
 800f970:	e7da      	b.n	800f928 <mbedtls_mpi_exp_mod+0x2da>
        state = 2;
 800f972:	f04f 0802 	mov.w	r8, #2
 800f976:	e753      	b.n	800f820 <mbedtls_mpi_exp_mod+0x1d2>
            nblimbs--;
 800f978:	f10b 3bff 	add.w	fp, fp, #4294967295
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
 800f97c:	f04f 0920 	mov.w	r9, #32
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800f980:	9a02      	ldr	r2, [sp, #8]
 800f982:	6892      	ldr	r2, [r2, #8]
 800f984:	f852 202b 	ldr.w	r2, [r2, fp, lsl #2]
        bufsize--;
 800f988:	f109 39ff 	add.w	r9, r9, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
 800f98c:	fa22 f209 	lsr.w	r2, r2, r9
        if( ei == 0 && state == 0 )
 800f990:	f012 0201 	ands.w	r2, r2, #1
 800f994:	d113      	bne.n	800f9be <mbedtls_mpi_exp_mod+0x370>
 800f996:	f1b8 0f00 	cmp.w	r8, #0
 800f99a:	f43f af41 	beq.w	800f820 <mbedtls_mpi_exp_mod+0x1d2>
        if( ei == 0 && state == 1 )
 800f99e:	f1b8 0f01 	cmp.w	r8, #1
 800f9a2:	d10c      	bne.n	800f9be <mbedtls_mpi_exp_mod+0x370>
            MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f9a4:	aa0b      	add	r2, sp, #44	; 0x2c
 800f9a6:	9200      	str	r2, [sp, #0]
 800f9a8:	4629      	mov	r1, r5
 800f9aa:	4622      	mov	r2, r4
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	9305      	str	r3, [sp, #20]
 800f9b0:	f7ff fa3c 	bl	800ee2c <mpi_montmul>
 800f9b4:	4602      	mov	r2, r0
 800f9b6:	2800      	cmp	r0, #0
 800f9b8:	d149      	bne.n	800fa4e <mbedtls_mpi_exp_mod+0x400>
 800f9ba:	9b05      	ldr	r3, [sp, #20]
 800f9bc:	e730      	b.n	800f820 <mbedtls_mpi_exp_mod+0x1d2>
        nbits++;
 800f9be:	3701      	adds	r7, #1
        wbits |= ( ei << ( wsize - nbits ) );
 800f9c0:	1bf1      	subs	r1, r6, r7
 800f9c2:	408a      	lsls	r2, r1
        if( nbits == wsize )
 800f9c4:	42be      	cmp	r6, r7
        wbits |= ( ei << ( wsize - nbits ) );
 800f9c6:	ea4a 0a02 	orr.w	sl, sl, r2
        if( nbits == wsize )
 800f9ca:	d1d2      	bne.n	800f972 <mbedtls_mpi_exp_mod+0x324>
            for( i = 0; i < wsize; i++ )
 800f9cc:	f04f 0800 	mov.w	r8, #0
                MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800f9d0:	aa0b      	add	r2, sp, #44	; 0x2c
 800f9d2:	9200      	str	r2, [sp, #0]
 800f9d4:	4629      	mov	r1, r5
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4628      	mov	r0, r5
 800f9da:	9305      	str	r3, [sp, #20]
 800f9dc:	f7ff fa26 	bl	800ee2c <mpi_montmul>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	bba0      	cbnz	r0, 800fa4e <mbedtls_mpi_exp_mod+0x400>
            for( i = 0; i < wsize; i++ )
 800f9e4:	f108 0801 	add.w	r8, r8, #1
 800f9e8:	4547      	cmp	r7, r8
 800f9ea:	9b05      	ldr	r3, [sp, #20]
 800f9ec:	d8f0      	bhi.n	800f9d0 <mbedtls_mpi_exp_mod+0x382>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[wbits], N, mm, &T ) );
 800f9ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800f9f0:	a814      	add	r0, sp, #80	; 0x50
 800f9f2:	210c      	movs	r1, #12
 800f9f4:	9200      	str	r2, [sp, #0]
 800f9f6:	fb01 010a 	mla	r1, r1, sl, r0
 800f9fa:	4622      	mov	r2, r4
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f7ff fa15 	bl	800ee2c <mpi_montmul>
 800fa02:	4602      	mov	r2, r0
 800fa04:	bb18      	cbnz	r0, 800fa4e <mbedtls_mpi_exp_mod+0x400>
            state--;
 800fa06:	f8dd 8010 	ldr.w	r8, [sp, #16]
            nbits = 0;
 800fa0a:	4607      	mov	r7, r0
            wbits = 0;
 800fa0c:	4682      	mov	sl, r0
 800fa0e:	e7d4      	b.n	800f9ba <mbedtls_mpi_exp_mod+0x36c>
        MBEDTLS_MPI_CHK( mpi_montmul( X, X, N, mm, &T ) );
 800fa10:	4622      	mov	r2, r4
 800fa12:	f8cd 8000 	str.w	r8, [sp]
 800fa16:	4629      	mov	r1, r5
 800fa18:	4628      	mov	r0, r5
 800fa1a:	9304      	str	r3, [sp, #16]
 800fa1c:	f7ff fa06 	bl	800ee2c <mpi_montmul>
 800fa20:	4602      	mov	r2, r0
 800fa22:	b9a0      	cbnz	r0, 800fa4e <mbedtls_mpi_exp_mod+0x400>
        wbits <<= 1;
 800fa24:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
        if( ( wbits & ( one << wsize ) ) != 0 )
 800fa28:	ea19 0f0a 	tst.w	r9, sl
 800fa2c:	9b04      	ldr	r3, [sp, #16]
 800fa2e:	d102      	bne.n	800fa36 <mbedtls_mpi_exp_mod+0x3e8>
    for( i = 0; i < nbits; i++ )
 800fa30:	f10b 0b01 	add.w	fp, fp, #1
 800fa34:	e702      	b.n	800f83c <mbedtls_mpi_exp_mod+0x1ee>
            MBEDTLS_MPI_CHK( mpi_montmul( X, &W[1], N, mm, &T ) );
 800fa36:	4622      	mov	r2, r4
 800fa38:	f8cd 8000 	str.w	r8, [sp]
 800fa3c:	a917      	add	r1, sp, #92	; 0x5c
 800fa3e:	4628      	mov	r0, r5
 800fa40:	9304      	str	r3, [sp, #16]
 800fa42:	f7ff f9f3 	bl	800ee2c <mpi_montmul>
 800fa46:	9b04      	ldr	r3, [sp, #16]
 800fa48:	4602      	mov	r2, r0
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	d0f0      	beq.n	800fa30 <mbedtls_mpi_exp_mod+0x3e2>

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800fa4e:	1e74      	subs	r4, r6, #1
 800fa50:	2301      	movs	r3, #1
 800fa52:	fa03 f404 	lsl.w	r4, r3, r4
 800fa56:	fa03 f606 	lsl.w	r6, r3, r6
        mbedtls_mpi_free( &W[i] );
 800fa5a:	250c      	movs	r5, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800fa5c:	42a6      	cmp	r6, r4
 800fa5e:	9202      	str	r2, [sp, #8]
 800fa60:	d818      	bhi.n	800fa94 <mbedtls_mpi_exp_mod+0x446>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
 800fa62:	a817      	add	r0, sp, #92	; 0x5c
 800fa64:	f7fe ff8a 	bl	800e97c <mbedtls_mpi_free>
 800fa68:	a80b      	add	r0, sp, #44	; 0x2c
 800fa6a:	f7fe ff87 	bl	800e97c <mbedtls_mpi_free>
 800fa6e:	a80e      	add	r0, sp, #56	; 0x38
 800fa70:	f7fe ff84 	bl	800e97c <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
 800fa74:	f8dd 3678 	ldr.w	r3, [sp, #1656]	; 0x678
 800fa78:	9a02      	ldr	r2, [sp, #8]
 800fa7a:	b10b      	cbz	r3, 800fa80 <mbedtls_mpi_exp_mod+0x432>
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	b923      	cbnz	r3, 800fa8a <mbedtls_mpi_exp_mod+0x43c>
        mbedtls_mpi_free( &RR );
 800fa80:	a808      	add	r0, sp, #32
 800fa82:	9202      	str	r2, [sp, #8]
 800fa84:	f7fe ff7a 	bl	800e97c <mbedtls_mpi_free>
 800fa88:	9a02      	ldr	r2, [sp, #8]

    return( ret );
}
 800fa8a:	4610      	mov	r0, r2
 800fa8c:	f20d 6d54 	addw	sp, sp, #1620	; 0x654
 800fa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_mpi_free( &W[i] );
 800fa94:	ab14      	add	r3, sp, #80	; 0x50
 800fa96:	fb05 3004 	mla	r0, r5, r4, r3
 800fa9a:	f7fe ff6f 	bl	800e97c <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
 800fa9e:	3401      	adds	r4, #1
 800faa0:	9a02      	ldr	r2, [sp, #8]
 800faa2:	e7db      	b.n	800fa5c <mbedtls_mpi_exp_mod+0x40e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800faa4:	f06f 0203 	mvn.w	r2, #3
 800faa8:	e7ef      	b.n	800fa8a <mbedtls_mpi_exp_mod+0x43c>

0800faaa <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800faaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faac:	b08b      	sub	sp, #44	; 0x2c
    X->n = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	2701      	movs	r7, #1
{
 800fab2:	4605      	mov	r5, r0
    size_t lz, lzt;
    mbedtls_mpi TG, TA, TB;

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800fab4:	a804      	add	r0, sp, #16
    X->n = 0;
 800fab6:	e9cd 7301 	strd	r7, r3, [sp, #4]
    X->s = 1;
 800faba:	e9cd 3703 	strd	r3, r7, [sp, #12]
    X->p = NULL;
 800fabe:	e9cd 3305 	strd	r3, r3, [sp, #20]
    X->n = 0;
 800fac2:	e9cd 7307 	strd	r7, r3, [sp, #28]
{
 800fac6:	4616      	mov	r6, r2
    X->p = NULL;
 800fac8:	9309      	str	r3, [sp, #36]	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800faca:	f7fe ffd7 	bl	800ea7c <mbedtls_mpi_copy>
 800face:	4604      	mov	r4, r0
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d157      	bne.n	800fb84 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800fad4:	4631      	mov	r1, r6
 800fad6:	a807      	add	r0, sp, #28
 800fad8:	f7fe ffd0 	bl	800ea7c <mbedtls_mpi_copy>
 800fadc:	4604      	mov	r4, r0
 800fade:	2800      	cmp	r0, #0
 800fae0:	d150      	bne.n	800fb84 <mbedtls_mpi_gcd+0xda>

    lz = mbedtls_mpi_lsb( &TA );
 800fae2:	a804      	add	r0, sp, #16
 800fae4:	f7ff f854 	bl	800eb90 <mbedtls_mpi_lsb>
 800fae8:	4606      	mov	r6, r0
    lzt = mbedtls_mpi_lsb( &TB );
 800faea:	a807      	add	r0, sp, #28
 800faec:	f7ff f850 	bl	800eb90 <mbedtls_mpi_lsb>

    if( lzt < lz )
 800faf0:	4286      	cmp	r6, r0
 800faf2:	bf28      	it	cs
 800faf4:	4606      	movcs	r6, r0
        lz = lzt;

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800faf6:	4631      	mov	r1, r6
 800faf8:	a804      	add	r0, sp, #16
 800fafa:	f7ff f92a 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fafe:	4604      	mov	r4, r0
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d13f      	bne.n	800fb84 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800fb04:	4631      	mov	r1, r6
 800fb06:	a807      	add	r0, sp, #28
 800fb08:	f7ff f923 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d138      	bne.n	800fb84 <mbedtls_mpi_gcd+0xda>

    TA.s = TB.s = 1;
 800fb12:	9707      	str	r7, [sp, #28]
 800fb14:	9704      	str	r7, [sp, #16]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800fb16:	2100      	movs	r1, #0
 800fb18:	a804      	add	r0, sp, #16
 800fb1a:	f7ff fa31 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800fb1e:	b958      	cbnz	r0, 800fb38 <mbedtls_mpi_gcd+0x8e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800fb20:	4631      	mov	r1, r6
 800fb22:	a807      	add	r0, sp, #28
 800fb24:	f7ff f8c7 	bl	800ecb6 <mbedtls_mpi_shift_l>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	bb58      	cbnz	r0, 800fb84 <mbedtls_mpi_gcd+0xda>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800fb2c:	a907      	add	r1, sp, #28
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f7fe ffa4 	bl	800ea7c <mbedtls_mpi_copy>
 800fb34:	4604      	mov	r4, r0

cleanup:
 800fb36:	e025      	b.n	800fb84 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800fb38:	a804      	add	r0, sp, #16
 800fb3a:	f7ff f829 	bl	800eb90 <mbedtls_mpi_lsb>
 800fb3e:	4601      	mov	r1, r0
 800fb40:	a804      	add	r0, sp, #16
 800fb42:	f7ff f906 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fb46:	4604      	mov	r4, r0
 800fb48:	b9e0      	cbnz	r0, 800fb84 <mbedtls_mpi_gcd+0xda>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800fb4a:	a807      	add	r0, sp, #28
 800fb4c:	f7ff f820 	bl	800eb90 <mbedtls_mpi_lsb>
 800fb50:	4601      	mov	r1, r0
 800fb52:	a807      	add	r0, sp, #28
 800fb54:	f7ff f8fd 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fb58:	4604      	mov	r4, r0
 800fb5a:	b998      	cbnz	r0, 800fb84 <mbedtls_mpi_gcd+0xda>
        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800fb5c:	a907      	add	r1, sp, #28
 800fb5e:	a804      	add	r0, sp, #16
 800fb60:	f7ff f9cb 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	db19      	blt.n	800fb9c <mbedtls_mpi_gcd+0xf2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800fb68:	a904      	add	r1, sp, #16
 800fb6a:	aa07      	add	r2, sp, #28
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	f7ff fa76 	bl	800f05e <mbedtls_mpi_sub_abs>
 800fb72:	4604      	mov	r4, r0
 800fb74:	b930      	cbnz	r0, 800fb84 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800fb76:	2101      	movs	r1, #1
 800fb78:	a804      	add	r0, sp, #16
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800fb7a:	f7ff f8ea 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fb7e:	4604      	mov	r4, r0
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d0c8      	beq.n	800fb16 <mbedtls_mpi_gcd+0x6c>

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800fb84:	a801      	add	r0, sp, #4
 800fb86:	f7fe fef9 	bl	800e97c <mbedtls_mpi_free>
 800fb8a:	a804      	add	r0, sp, #16
 800fb8c:	f7fe fef6 	bl	800e97c <mbedtls_mpi_free>
 800fb90:	a807      	add	r0, sp, #28
 800fb92:	f7fe fef3 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
}
 800fb96:	4620      	mov	r0, r4
 800fb98:	b00b      	add	sp, #44	; 0x2c
 800fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800fb9c:	a907      	add	r1, sp, #28
 800fb9e:	aa04      	add	r2, sp, #16
 800fba0:	4608      	mov	r0, r1
 800fba2:	f7ff fa5c 	bl	800f05e <mbedtls_mpi_sub_abs>
 800fba6:	4604      	mov	r4, r0
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d1eb      	bne.n	800fb84 <mbedtls_mpi_gcd+0xda>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800fbac:	2101      	movs	r1, #1
 800fbae:	a807      	add	r0, sp, #28
 800fbb0:	e7e3      	b.n	800fb7a <mbedtls_mpi_gcd+0xd0>

0800fbb2 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800fbb2:	b570      	push	{r4, r5, r6, lr}
    int ret;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( size > MBEDTLS_MPI_MAX_SIZE )
 800fbb4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
{
 800fbb8:	4605      	mov	r5, r0
 800fbba:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 800fbbe:	460c      	mov	r4, r1
 800fbc0:	4616      	mov	r6, r2
 800fbc2:	4618      	mov	r0, r3
    if( size > MBEDTLS_MPI_MAX_SIZE )
 800fbc4:	d80b      	bhi.n	800fbde <mbedtls_mpi_fill_random+0x2c>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    MBEDTLS_MPI_CHK( f_rng( p_rng, buf, size ) );
 800fbc6:	460a      	mov	r2, r1
 800fbc8:	4669      	mov	r1, sp
 800fbca:	47b0      	blx	r6
 800fbcc:	b920      	cbnz	r0, 800fbd8 <mbedtls_mpi_fill_random+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( X, buf, size ) );
 800fbce:	4622      	mov	r2, r4
 800fbd0:	4669      	mov	r1, sp
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f7ff f819 	bl	800ec0a <mbedtls_mpi_read_binary>

cleanup:
    return( ret );
}
 800fbd8:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
 800fbdc:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800fbde:	f06f 0003 	mvn.w	r0, #3
 800fbe2:	e7f9      	b.n	800fbd8 <mbedtls_mpi_fill_random+0x26>

0800fbe4 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800fbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe8:	4606      	mov	r6, r0
 800fbea:	b09c      	sub	sp, #112	; 0x70
 800fbec:	4688      	mov	r8, r1
    int ret;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800fbee:	4610      	mov	r0, r2
 800fbf0:	2101      	movs	r1, #1
{
 800fbf2:	4615      	mov	r5, r2
    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800fbf4:	f7ff f9c4 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	f340 814c 	ble.w	800fe96 <mbedtls_mpi_inv_mod+0x2b2>
    X->n = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	2701      	movs	r7, #1

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800fc02:	462a      	mov	r2, r5
 800fc04:	4641      	mov	r1, r8
 800fc06:	a801      	add	r0, sp, #4
    X->n = 0;
 800fc08:	e9cd 7304 	strd	r7, r3, [sp, #16]
    X->s = 1;
 800fc0c:	e9cd 3706 	strd	r3, r7, [sp, #24]
    X->p = NULL;
 800fc10:	e9cd 3308 	strd	r3, r3, [sp, #32]
    X->n = 0;
 800fc14:	e9cd 730a 	strd	r7, r3, [sp, #40]	; 0x28
    X->s = 1;
 800fc18:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    X->p = NULL;
 800fc1c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    X->n = 0;
 800fc20:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800fc24:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
    X->s = 1;
 800fc28:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
    X->p = NULL;
 800fc2c:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    X->n = 0;
 800fc30:	e9cd 7316 	strd	r7, r3, [sp, #88]	; 0x58
    X->s = 1;
 800fc34:	e9cd 3718 	strd	r3, r7, [sp, #96]	; 0x60
    X->p = NULL;
 800fc38:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800fc3c:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800fc3e:	f7ff ff34 	bl	800faaa <mbedtls_mpi_gcd>
 800fc42:	4604      	mov	r4, r0
 800fc44:	2800      	cmp	r0, #0
 800fc46:	f040 8097 	bne.w	800fd78 <mbedtls_mpi_inv_mod+0x194>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	a801      	add	r0, sp, #4
 800fc4e:	f7ff f997 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	f040 811c 	bne.w	800fe90 <mbedtls_mpi_inv_mod+0x2ac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800fc58:	462a      	mov	r2, r5
 800fc5a:	4641      	mov	r1, r8
 800fc5c:	a804      	add	r0, sp, #16
 800fc5e:	f7ff fcc4 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 800fc62:	4604      	mov	r4, r0
 800fc64:	2800      	cmp	r0, #0
 800fc66:	f040 8087 	bne.w	800fd78 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800fc6a:	a904      	add	r1, sp, #16
 800fc6c:	a807      	add	r0, sp, #28
 800fc6e:	f7fe ff05 	bl	800ea7c <mbedtls_mpi_copy>
 800fc72:	4604      	mov	r4, r0
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d17f      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800fc78:	4629      	mov	r1, r5
 800fc7a:	a810      	add	r0, sp, #64	; 0x40
 800fc7c:	f7fe fefe 	bl	800ea7c <mbedtls_mpi_copy>
 800fc80:	4604      	mov	r4, r0
 800fc82:	2800      	cmp	r0, #0
 800fc84:	d178      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800fc86:	4629      	mov	r1, r5
 800fc88:	a813      	add	r0, sp, #76	; 0x4c
 800fc8a:	f7fe fef7 	bl	800ea7c <mbedtls_mpi_copy>
 800fc8e:	4604      	mov	r4, r0
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d171      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800fc94:	4639      	mov	r1, r7
 800fc96:	a80a      	add	r0, sp, #40	; 0x28
 800fc98:	f7fe ff4d 	bl	800eb36 <mbedtls_mpi_lset>
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d16a      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800fca2:	4601      	mov	r1, r0
 800fca4:	a80d      	add	r0, sp, #52	; 0x34
 800fca6:	f7fe ff46 	bl	800eb36 <mbedtls_mpi_lset>
 800fcaa:	4604      	mov	r4, r0
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d163      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800fcb0:	4601      	mov	r1, r0
 800fcb2:	a816      	add	r0, sp, #88	; 0x58
 800fcb4:	f7fe ff3f 	bl	800eb36 <mbedtls_mpi_lset>
 800fcb8:	4604      	mov	r4, r0
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d15c      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	a819      	add	r0, sp, #100	; 0x64
 800fcc2:	f7fe ff38 	bl	800eb36 <mbedtls_mpi_lset>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	2800      	cmp	r0, #0
 800fcca:	d155      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
        while( ( TU.p[0] & 1 ) == 0 )
 800fccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	07d8      	lsls	r0, r3, #31
 800fcd2:	d53c      	bpl.n	800fd4e <mbedtls_mpi_inv_mod+0x16a>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800fcd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	07db      	lsls	r3, r3, #31
 800fcda:	f140 8082 	bpl.w	800fde2 <mbedtls_mpi_inv_mod+0x1fe>

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800fcde:	a913      	add	r1, sp, #76	; 0x4c
 800fce0:	a807      	add	r0, sp, #28
 800fce2:	f7ff f90a 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800fce6:	2800      	cmp	r0, #0
 800fce8:	f2c0 80ab 	blt.w	800fe42 <mbedtls_mpi_inv_mod+0x25e>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800fcec:	a907      	add	r1, sp, #28
 800fcee:	aa13      	add	r2, sp, #76	; 0x4c
 800fcf0:	4608      	mov	r0, r1
 800fcf2:	f7ff fa13 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	d13d      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800fcfc:	a90a      	add	r1, sp, #40	; 0x28
 800fcfe:	aa16      	add	r2, sp, #88	; 0x58
 800fd00:	4608      	mov	r0, r1
 800fd02:	f7ff fa0b 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fd06:	4604      	mov	r4, r0
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d135      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800fd0c:	aa19      	add	r2, sp, #100	; 0x64
 800fd0e:	a90d      	add	r1, sp, #52	; 0x34
 800fd10:	4608      	mov	r0, r1
 800fd12:	f7ff fa03 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fd16:	4604      	mov	r4, r0
 800fd18:	bb70      	cbnz	r0, 800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	a807      	add	r0, sp, #28
 800fd1e:	f7ff f92f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d1d2      	bne.n	800fccc <mbedtls_mpi_inv_mod+0xe8>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800fd26:	2100      	movs	r1, #0
 800fd28:	a816      	add	r0, sp, #88	; 0x58
 800fd2a:	f7ff f929 	bl	800ef80 <mbedtls_mpi_cmp_int>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	f2c0 809a 	blt.w	800fe68 <mbedtls_mpi_inv_mod+0x284>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800fd34:	4629      	mov	r1, r5
 800fd36:	a816      	add	r0, sp, #88	; 0x58
 800fd38:	f7ff f8df 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	f280 809d 	bge.w	800fe7c <mbedtls_mpi_inv_mod+0x298>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800fd42:	a916      	add	r1, sp, #88	; 0x58
 800fd44:	4630      	mov	r0, r6
 800fd46:	f7fe fe99 	bl	800ea7c <mbedtls_mpi_copy>
 800fd4a:	4604      	mov	r4, r0

cleanup:
 800fd4c:	e014      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800fd4e:	2101      	movs	r1, #1
 800fd50:	a807      	add	r0, sp, #28
 800fd52:	f7fe fffe 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fd56:	4604      	mov	r4, r0
 800fd58:	b970      	cbnz	r0, 800fd78 <mbedtls_mpi_inv_mod+0x194>
            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800fd5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	07df      	lsls	r7, r3, #31
 800fd60:	d429      	bmi.n	800fdb6 <mbedtls_mpi_inv_mod+0x1d2>
 800fd62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	07dc      	lsls	r4, r3, #31
 800fd68:	d425      	bmi.n	800fdb6 <mbedtls_mpi_inv_mod+0x1d2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	a80a      	add	r0, sp, #40	; 0x28
 800fd6e:	f7fe fff0 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fd72:	4604      	mov	r4, r0
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d02f      	beq.n	800fdd8 <mbedtls_mpi_inv_mod+0x1f4>

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800fd78:	a804      	add	r0, sp, #16
 800fd7a:	f7fe fdff 	bl	800e97c <mbedtls_mpi_free>
 800fd7e:	a807      	add	r0, sp, #28
 800fd80:	f7fe fdfc 	bl	800e97c <mbedtls_mpi_free>
 800fd84:	a80a      	add	r0, sp, #40	; 0x28
 800fd86:	f7fe fdf9 	bl	800e97c <mbedtls_mpi_free>
 800fd8a:	a80d      	add	r0, sp, #52	; 0x34
 800fd8c:	f7fe fdf6 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800fd90:	a801      	add	r0, sp, #4
 800fd92:	f7fe fdf3 	bl	800e97c <mbedtls_mpi_free>
 800fd96:	a810      	add	r0, sp, #64	; 0x40
 800fd98:	f7fe fdf0 	bl	800e97c <mbedtls_mpi_free>
 800fd9c:	a813      	add	r0, sp, #76	; 0x4c
 800fd9e:	f7fe fded 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800fda2:	a816      	add	r0, sp, #88	; 0x58
 800fda4:	f7fe fdea 	bl	800e97c <mbedtls_mpi_free>
 800fda8:	a819      	add	r0, sp, #100	; 0x64
 800fdaa:	f7fe fde7 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
}
 800fdae:	4620      	mov	r0, r4
 800fdb0:	b01c      	add	sp, #112	; 0x70
 800fdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800fdb6:	a90a      	add	r1, sp, #40	; 0x28
 800fdb8:	aa10      	add	r2, sp, #64	; 0x40
 800fdba:	4608      	mov	r0, r1
 800fdbc:	f7ff f98c 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	d1d8      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800fdc6:	a90d      	add	r1, sp, #52	; 0x34
 800fdc8:	aa04      	add	r2, sp, #16
 800fdca:	4608      	mov	r0, r1
 800fdcc:	f7ff f9a6 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	2800      	cmp	r0, #0
 800fdd4:	d0c9      	beq.n	800fd6a <mbedtls_mpi_inv_mod+0x186>
 800fdd6:	e7cf      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800fdd8:	2101      	movs	r1, #1
 800fdda:	a80d      	add	r0, sp, #52	; 0x34
 800fddc:	f7fe ffb9 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fde0:	e771      	b.n	800fcc6 <mbedtls_mpi_inv_mod+0xe2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800fde2:	2101      	movs	r1, #1
 800fde4:	a813      	add	r0, sp, #76	; 0x4c
 800fde6:	f7fe ffb4 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fdea:	4604      	mov	r4, r0
 800fdec:	2800      	cmp	r0, #0
 800fdee:	d1c3      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800fdf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	07d9      	lsls	r1, r3, #31
 800fdf6:	d413      	bmi.n	800fe20 <mbedtls_mpi_inv_mod+0x23c>
 800fdf8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	07da      	lsls	r2, r3, #31
 800fdfe:	d40f      	bmi.n	800fe20 <mbedtls_mpi_inv_mod+0x23c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800fe00:	2101      	movs	r1, #1
 800fe02:	a816      	add	r0, sp, #88	; 0x58
 800fe04:	f7fe ffa5 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	2800      	cmp	r0, #0
 800fe0c:	d1b4      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800fe0e:	2101      	movs	r1, #1
 800fe10:	a819      	add	r0, sp, #100	; 0x64
 800fe12:	f7fe ff9e 	bl	800ed52 <mbedtls_mpi_shift_r>
 800fe16:	4604      	mov	r4, r0
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f43f af5b 	beq.w	800fcd4 <mbedtls_mpi_inv_mod+0xf0>
 800fe1e:	e7ab      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800fe20:	a916      	add	r1, sp, #88	; 0x58
 800fe22:	aa10      	add	r2, sp, #64	; 0x40
 800fe24:	4608      	mov	r0, r1
 800fe26:	f7ff f957 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1a3      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800fe30:	a919      	add	r1, sp, #100	; 0x64
 800fe32:	aa04      	add	r2, sp, #16
 800fe34:	4608      	mov	r0, r1
 800fe36:	f7ff f971 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	d0df      	beq.n	800fe00 <mbedtls_mpi_inv_mod+0x21c>
 800fe40:	e79a      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800fe42:	a913      	add	r1, sp, #76	; 0x4c
 800fe44:	aa07      	add	r2, sp, #28
 800fe46:	4608      	mov	r0, r1
 800fe48:	f7ff f968 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d192      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800fe52:	a916      	add	r1, sp, #88	; 0x58
 800fe54:	aa0a      	add	r2, sp, #40	; 0x28
 800fe56:	4608      	mov	r0, r1
 800fe58:	f7ff f960 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	d18a      	bne.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800fe62:	aa0d      	add	r2, sp, #52	; 0x34
 800fe64:	a919      	add	r1, sp, #100	; 0x64
 800fe66:	e753      	b.n	800fd10 <mbedtls_mpi_inv_mod+0x12c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800fe68:	a916      	add	r1, sp, #88	; 0x58
 800fe6a:	462a      	mov	r2, r5
 800fe6c:	4608      	mov	r0, r1
 800fe6e:	f7ff f933 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 800fe72:	4604      	mov	r4, r0
 800fe74:	2800      	cmp	r0, #0
 800fe76:	f43f af56 	beq.w	800fd26 <mbedtls_mpi_inv_mod+0x142>
 800fe7a:	e77d      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800fe7c:	a916      	add	r1, sp, #88	; 0x58
 800fe7e:	462a      	mov	r2, r5
 800fe80:	4608      	mov	r0, r1
 800fe82:	f7ff f94b 	bl	800f11c <mbedtls_mpi_sub_mpi>
 800fe86:	4604      	mov	r4, r0
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	f43f af53 	beq.w	800fd34 <mbedtls_mpi_inv_mod+0x150>
 800fe8e:	e773      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800fe90:	f06f 040d 	mvn.w	r4, #13
 800fe94:	e770      	b.n	800fd78 <mbedtls_mpi_inv_mod+0x194>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800fe96:	f06f 0403 	mvn.w	r4, #3
 800fe9a:	e788      	b.n	800fdae <mbedtls_mpi_inv_mod+0x1ca>

0800fe9c <mbedtls_cipher_get_block_size>:
 * \return              size of the cipher's blocks, or 0 if ctx has not been
 *                      initialised.
 */
static inline unsigned int mbedtls_cipher_get_block_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
 800fe9c:	b110      	cbz	r0, 800fea4 <mbedtls_cipher_get_block_size+0x8>
 800fe9e:	6800      	ldr	r0, [r0, #0]
 800fea0:	b100      	cbz	r0, 800fea4 <mbedtls_cipher_get_block_size+0x8>
        return 0;

    return ctx->cipher_info->block_size;
 800fea2:	6940      	ldr	r0, [r0, #20]
}
 800fea4:	4770      	bx	lr

0800fea6 <add_pkcs_padding>:
/*
 * PKCS7 (and PKCS5) padding: fill with ll bytes, with ll = padding_len
 */
static void add_pkcs_padding( unsigned char *output, size_t output_len,
        size_t data_len )
{
 800fea6:	b510      	push	{r4, lr}
    size_t padding_len = output_len - data_len;
 800fea8:	1a89      	subs	r1, r1, r2
    unsigned char i;

    for( i = 0; i < padding_len; i++ )
 800feaa:	2400      	movs	r4, #0
 800feac:	b2e3      	uxtb	r3, r4
 800feae:	428b      	cmp	r3, r1
 800feb0:	f104 0401 	add.w	r4, r4, #1
 800feb4:	d300      	bcc.n	800feb8 <add_pkcs_padding+0x12>
        output[data_len + i] = (unsigned char) padding_len;
}
 800feb6:	bd10      	pop	{r4, pc}
        output[data_len + i] = (unsigned char) padding_len;
 800feb8:	4403      	add	r3, r0
 800feba:	5499      	strb	r1, [r3, r2]
    for( i = 0; i < padding_len; i++ )
 800febc:	e7f6      	b.n	800feac <add_pkcs_padding+0x6>
	...

0800fec0 <get_pkcs_padding>:

static int get_pkcs_padding( unsigned char *input, size_t input_len,
        size_t *data_len )
{
 800fec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800fec2:	b308      	cbz	r0, 800ff08 <get_pkcs_padding+0x48>
 800fec4:	b302      	cbz	r2, 800ff08 <get_pkcs_padding+0x48>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800fec6:	1843      	adds	r3, r0, r1
 800fec8:	f813 5c01 	ldrb.w	r5, [r3, #-1]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800fecc:	fab5 f385 	clz	r3, r5
    *data_len = input_len - padding_len;
 800fed0:	1b4e      	subs	r6, r1, r5
    bad |= padding_len == 0;
 800fed2:	095b      	lsrs	r3, r3, #5
    *data_len = input_len - padding_len;
 800fed4:	6016      	str	r6, [r2, #0]
    bad |= padding_len == 0;
 800fed6:	428d      	cmp	r5, r1
 800fed8:	bf88      	it	hi
 800feda:	f043 0301 	orrhi.w	r3, r3, #1

    /* The number of bytes checked must be independent of padding_len,
     * so pick input_len, which is usually 8 or 16 (one block) */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len; i++ )
 800fede:	2200      	movs	r2, #0
 800fee0:	428a      	cmp	r2, r1
 800fee2:	d104      	bne.n	800feee <get_pkcs_padding+0x2e>
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	4809      	ldr	r0, [pc, #36]	; (800ff0c <get_pkcs_padding+0x4c>)
 800fee8:	bf08      	it	eq
 800feea:	2000      	moveq	r0, #0
}
 800feec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bad |= ( input[i] ^ padding_len ) * ( i >= pad_idx );
 800feee:	5c84      	ldrb	r4, [r0, r2]
 800fef0:	4296      	cmp	r6, r2
 800fef2:	ea84 0405 	eor.w	r4, r4, r5
 800fef6:	bf8c      	ite	hi
 800fef8:	2700      	movhi	r7, #0
 800fefa:	2701      	movls	r7, #1
 800fefc:	fb14 f407 	smulbb	r4, r4, r7
 800ff00:	4323      	orrs	r3, r4
 800ff02:	b2db      	uxtb	r3, r3
    for( i = 0; i < input_len; i++ )
 800ff04:	3201      	adds	r2, #1
 800ff06:	e7eb      	b.n	800fee0 <get_pkcs_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff08:	4801      	ldr	r0, [pc, #4]	; (800ff10 <get_pkcs_padding+0x50>)
 800ff0a:	e7ef      	b.n	800feec <get_pkcs_padding+0x2c>
 800ff0c:	ffff9e00 	.word	0xffff9e00
 800ff10:	ffff9f00 	.word	0xffff9f00

0800ff14 <add_one_and_zeros_padding>:
                                       size_t output_len, size_t data_len )
{
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    output[data_len] = 0x80;
 800ff14:	2380      	movs	r3, #128	; 0x80
{
 800ff16:	b530      	push	{r4, r5, lr}
    output[data_len] = 0x80;
 800ff18:	5483      	strb	r3, [r0, r2]
    size_t padding_len = output_len - data_len;
 800ff1a:	1a89      	subs	r1, r1, r2
    for( i = 1; i < padding_len; i++ )
 800ff1c:	2301      	movs	r3, #1
        output[data_len + i] = 0x00;
 800ff1e:	2400      	movs	r4, #0
    for( i = 1; i < padding_len; i++ )
 800ff20:	428b      	cmp	r3, r1
 800ff22:	d300      	bcc.n	800ff26 <add_one_and_zeros_padding+0x12>
}
 800ff24:	bd30      	pop	{r4, r5, pc}
        output[data_len + i] = 0x00;
 800ff26:	18c5      	adds	r5, r0, r3
    for( i = 1; i < padding_len; i++ )
 800ff28:	3301      	adds	r3, #1
        output[data_len + i] = 0x00;
 800ff2a:	54ac      	strb	r4, [r5, r2]
    for( i = 1; i < padding_len; i++ )
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	e7f7      	b.n	800ff20 <add_one_and_zeros_padding+0xc>

0800ff30 <add_zeros_and_len_padding>:
/*
 * Zeros and len padding: fill with 00 ... 00 ll, where ll is padding length
 */
static void add_zeros_and_len_padding( unsigned char *output,
                                       size_t output_len, size_t data_len )
{
 800ff30:	b570      	push	{r4, r5, r6, lr}
    size_t padding_len = output_len - data_len;
    unsigned char i = 0;

    for( i = 1; i < padding_len; i++ )
 800ff32:	2301      	movs	r3, #1
    size_t padding_len = output_len - data_len;
 800ff34:	1a8d      	subs	r5, r1, r2
        output[data_len + i - 1] = 0x00;
 800ff36:	2600      	movs	r6, #0
    for( i = 1; i < padding_len; i++ )
 800ff38:	42ab      	cmp	r3, r5
 800ff3a:	d303      	bcc.n	800ff44 <add_zeros_and_len_padding+0x14>
    output[output_len - 1] = (unsigned char) padding_len;
 800ff3c:	4401      	add	r1, r0
 800ff3e:	f801 5c01 	strb.w	r5, [r1, #-1]
}
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
        output[data_len + i - 1] = 0x00;
 800ff44:	18c4      	adds	r4, r0, r3
 800ff46:	4414      	add	r4, r2
    for( i = 1; i < padding_len; i++ )
 800ff48:	3301      	adds	r3, #1
        output[data_len + i - 1] = 0x00;
 800ff4a:	f804 6c01 	strb.w	r6, [r4, #-1]
    for( i = 1; i < padding_len; i++ )
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	e7f2      	b.n	800ff38 <add_zeros_and_len_padding+0x8>
	...

0800ff54 <get_zeros_and_len_padding>:

static int get_zeros_and_len_padding( unsigned char *input, size_t input_len,
                                      size_t *data_len )
{
 800ff54:	b570      	push	{r4, r5, r6, lr}
    size_t i, pad_idx;
    unsigned char padding_len, bad = 0;

    if( NULL == input || NULL == data_len )
 800ff56:	b1f8      	cbz	r0, 800ff98 <get_zeros_and_len_padding+0x44>
 800ff58:	b1f2      	cbz	r2, 800ff98 <get_zeros_and_len_padding+0x44>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    padding_len = input[input_len - 1];
 800ff5a:	1e4d      	subs	r5, r1, #1
 800ff5c:	5d44      	ldrb	r4, [r0, r5]
    *data_len = input_len - padding_len;

    /* Avoid logical || since it results in a branch */
    bad |= padding_len > input_len;
    bad |= padding_len == 0;
 800ff5e:	fab4 f384 	clz	r3, r4
    *data_len = input_len - padding_len;
 800ff62:	1b0e      	subs	r6, r1, r4
    bad |= padding_len == 0;
 800ff64:	095b      	lsrs	r3, r3, #5
 800ff66:	428c      	cmp	r4, r1
 800ff68:	bf94      	ite	ls
 800ff6a:	4619      	movls	r1, r3
 800ff6c:	f043 0101 	orrhi.w	r1, r3, #1
    *data_len = input_len - padding_len;
 800ff70:	6016      	str	r6, [r2, #0]

    /* The number of bytes checked must be independent of padding_len */
    pad_idx = input_len - padding_len;
    for( i = 0; i < input_len - 1; i++ )
 800ff72:	2300      	movs	r3, #0
 800ff74:	429d      	cmp	r5, r3
 800ff76:	d804      	bhi.n	800ff82 <get_zeros_and_len_padding+0x2e>
        bad |= input[i] * ( i >= pad_idx );

    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800ff78:	2900      	cmp	r1, #0
 800ff7a:	4808      	ldr	r0, [pc, #32]	; (800ff9c <get_zeros_and_len_padding+0x48>)
 800ff7c:	bf08      	it	eq
 800ff7e:	2000      	moveq	r0, #0
}
 800ff80:	bd70      	pop	{r4, r5, r6, pc}
        bad |= input[i] * ( i >= pad_idx );
 800ff82:	429e      	cmp	r6, r3
 800ff84:	5cc2      	ldrb	r2, [r0, r3]
 800ff86:	bf8c      	ite	hi
 800ff88:	2400      	movhi	r4, #0
 800ff8a:	2401      	movls	r4, #1
 800ff8c:	fb12 f204 	smulbb	r2, r2, r4
 800ff90:	4311      	orrs	r1, r2
 800ff92:	b2c9      	uxtb	r1, r1
    for( i = 0; i < input_len - 1; i++ )
 800ff94:	3301      	adds	r3, #1
 800ff96:	e7ed      	b.n	800ff74 <get_zeros_and_len_padding+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ff98:	4801      	ldr	r0, [pc, #4]	; (800ffa0 <get_zeros_and_len_padding+0x4c>)
 800ff9a:	e7f1      	b.n	800ff80 <get_zeros_and_len_padding+0x2c>
 800ff9c:	ffff9e00 	.word	0xffff9e00
 800ffa0:	ffff9f00 	.word	0xffff9f00

0800ffa4 <add_zeros_padding>:
                               size_t output_len, size_t data_len )
{
    size_t i;

    for( i = data_len; i < output_len; i++ )
        output[i] = 0x00;
 800ffa4:	2300      	movs	r3, #0
    for( i = data_len; i < output_len; i++ )
 800ffa6:	428a      	cmp	r2, r1
 800ffa8:	d300      	bcc.n	800ffac <add_zeros_padding+0x8>
}
 800ffaa:	4770      	bx	lr
        output[i] = 0x00;
 800ffac:	5483      	strb	r3, [r0, r2]
    for( i = data_len; i < output_len; i++ )
 800ffae:	3201      	adds	r2, #1
 800ffb0:	e7f9      	b.n	800ffa6 <add_zeros_padding+0x2>
	...

0800ffb4 <get_no_padding>:
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
    if( NULL == input || NULL == data_len )
 800ffb4:	b118      	cbz	r0, 800ffbe <get_no_padding+0xa>
 800ffb6:	b112      	cbz	r2, 800ffbe <get_no_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *data_len = input_len;
 800ffb8:	6011      	str	r1, [r2, #0]

    return( 0 );
 800ffba:	2000      	movs	r0, #0
 800ffbc:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800ffbe:	4801      	ldr	r0, [pc, #4]	; (800ffc4 <get_no_padding+0x10>)
}
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	ffff9f00 	.word	0xffff9f00

0800ffc8 <get_one_and_zeros_padding>:
{
 800ffc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( NULL == input || NULL == data_len )
 800ffca:	b320      	cbz	r0, 8010016 <get_one_and_zeros_padding+0x4e>
 800ffcc:	b31a      	cbz	r2, 8010016 <get_one_and_zeros_padding+0x4e>
    *data_len = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	6013      	str	r3, [r2, #0]
static int get_one_and_zeros_padding( unsigned char *input, size_t input_len,
 800ffd2:	4408      	add	r0, r1
    bad = 0xFF;
 800ffd4:	26ff      	movs	r6, #255	; 0xff
    for( i = input_len; i > 0; i-- )
 800ffd6:	b921      	cbnz	r1, 800ffe2 <get_one_and_zeros_padding+0x1a>
    return( MBEDTLS_ERR_CIPHER_INVALID_PADDING * ( bad != 0 ) );
 800ffd8:	2e00      	cmp	r6, #0
 800ffda:	4810      	ldr	r0, [pc, #64]	; (801001c <get_one_and_zeros_padding+0x54>)
 800ffdc:	bf08      	it	eq
 800ffde:	2000      	moveq	r0, #0
}
 800ffe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        done |= ( input[i-1] != 0 );
 800ffe2:	f810 4d01 	ldrb.w	r4, [r0, #-1]!
 800ffe6:	2c00      	cmp	r4, #0
 800ffe8:	bf0c      	ite	eq
 800ffea:	461c      	moveq	r4, r3
 800ffec:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800fff0:	ea83 0504 	eor.w	r5, r3, r4
        done |= ( input[i-1] != 0 );
 800fff4:	3901      	subs	r1, #1
        *data_len |= ( i - 1 ) * ( done != prev_done );
 800fff6:	fb01 f705 	mul.w	r7, r1, r5
 800fffa:	6815      	ldr	r5, [r2, #0]
 800fffc:	433d      	orrs	r5, r7
 800fffe:	6015      	str	r5, [r2, #0]
        bad &= ( input[i-1] ^ 0x80 ) | ( done == prev_done );
 8010000:	7805      	ldrb	r5, [r0, #0]
 8010002:	f085 0580 	eor.w	r5, r5, #128	; 0x80
 8010006:	42a3      	cmp	r3, r4
 8010008:	bf14      	ite	ne
 801000a:	462b      	movne	r3, r5
 801000c:	f045 0301 	orreq.w	r3, r5, #1
 8010010:	401e      	ands	r6, r3
        done |= ( input[i-1] != 0 );
 8010012:	4623      	mov	r3, r4
 8010014:	e7df      	b.n	800ffd6 <get_one_and_zeros_padding+0xe>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010016:	4802      	ldr	r0, [pc, #8]	; (8010020 <get_one_and_zeros_padding+0x58>)
 8010018:	e7e2      	b.n	800ffe0 <get_one_and_zeros_padding+0x18>
 801001a:	bf00      	nop
 801001c:	ffff9e00 	.word	0xffff9e00
 8010020:	ffff9f00 	.word	0xffff9f00

08010024 <get_zeros_padding>:
{
 8010024:	b530      	push	{r4, r5, lr}
    if( NULL == input || NULL == data_len )
 8010026:	b1a0      	cbz	r0, 8010052 <get_zeros_padding+0x2e>
 8010028:	b19a      	cbz	r2, 8010052 <get_zeros_padding+0x2e>
    *data_len = 0;
 801002a:	2300      	movs	r3, #0
 801002c:	6013      	str	r3, [r2, #0]
    for( i = input_len; i > 0; i-- )
 801002e:	b909      	cbnz	r1, 8010034 <get_zeros_padding+0x10>
 8010030:	4608      	mov	r0, r1
}
 8010032:	bd30      	pop	{r4, r5, pc}
        done |= ( input[i-1] != 0 );
 8010034:	1e4d      	subs	r5, r1, #1
 8010036:	5d44      	ldrb	r4, [r0, r5]
 8010038:	2c00      	cmp	r4, #0
 801003a:	bf0c      	ite	eq
 801003c:	461c      	moveq	r4, r3
 801003e:	f043 0401 	orrne.w	r4, r3, #1
        *data_len |= i * ( done != prev_done );
 8010042:	4063      	eors	r3, r4
 8010044:	4359      	muls	r1, r3
 8010046:	6813      	ldr	r3, [r2, #0]
 8010048:	4319      	orrs	r1, r3
 801004a:	6011      	str	r1, [r2, #0]
        done |= ( input[i-1] != 0 );
 801004c:	4623      	mov	r3, r4
    for( i = input_len; i > 0; i-- )
 801004e:	4629      	mov	r1, r5
 8010050:	e7ed      	b.n	801002e <get_zeros_padding+0xa>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010052:	4801      	ldr	r0, [pc, #4]	; (8010058 <get_zeros_padding+0x34>)
 8010054:	e7ed      	b.n	8010032 <get_zeros_padding+0xe>
 8010056:	bf00      	nop
 8010058:	ffff9f00 	.word	0xffff9f00

0801005c <mbedtls_cipher_info_from_type>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 801005c:	4b04      	ldr	r3, [pc, #16]	; (8010070 <mbedtls_cipher_info_from_type+0x14>)
 801005e:	685a      	ldr	r2, [r3, #4]
 8010060:	b90a      	cbnz	r2, 8010066 <mbedtls_cipher_info_from_type+0xa>
}
 8010062:	4610      	mov	r0, r2
 8010064:	4770      	bx	lr
        if( def->type == cipher_type )
 8010066:	7819      	ldrb	r1, [r3, #0]
 8010068:	4281      	cmp	r1, r0
 801006a:	d0fa      	beq.n	8010062 <mbedtls_cipher_info_from_type+0x6>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 801006c:	3308      	adds	r3, #8
 801006e:	e7f6      	b.n	801005e <mbedtls_cipher_info_from_type+0x2>
 8010070:	0802aab4 	.word	0x0802aab4

08010074 <mbedtls_cipher_info_from_values>:
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8010074:	4b08      	ldr	r3, [pc, #32]	; (8010098 <mbedtls_cipher_info_from_values+0x24>)
{
 8010076:	b530      	push	{r4, r5, lr}
 8010078:	4604      	mov	r4, r0
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 801007a:	6858      	ldr	r0, [r3, #4]
 801007c:	b900      	cbnz	r0, 8010080 <mbedtls_cipher_info_from_values+0xc>
}
 801007e:	bd30      	pop	{r4, r5, pc}
        if( def->info->base->cipher == cipher_id &&
 8010080:	6985      	ldr	r5, [r0, #24]
 8010082:	782d      	ldrb	r5, [r5, #0]
 8010084:	42a5      	cmp	r5, r4
 8010086:	d105      	bne.n	8010094 <mbedtls_cipher_info_from_values+0x20>
 8010088:	6845      	ldr	r5, [r0, #4]
 801008a:	428d      	cmp	r5, r1
 801008c:	d102      	bne.n	8010094 <mbedtls_cipher_info_from_values+0x20>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 801008e:	7845      	ldrb	r5, [r0, #1]
 8010090:	4295      	cmp	r5, r2
 8010092:	d0f4      	beq.n	801007e <mbedtls_cipher_info_from_values+0xa>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8010094:	3308      	adds	r3, #8
 8010096:	e7f0      	b.n	801007a <mbedtls_cipher_info_from_values+0x6>
 8010098:	0802aab4 	.word	0x0802aab4

0801009c <mbedtls_cipher_init>:
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 801009c:	2240      	movs	r2, #64	; 0x40
 801009e:	2100      	movs	r1, #0
 80100a0:	f012 b9ca 	b.w	8022438 <memset>

080100a4 <mbedtls_cipher_free>:
{
 80100a4:	b510      	push	{r4, lr}
    if( ctx == NULL )
 80100a6:	4604      	mov	r4, r0
 80100a8:	b150      	cbz	r0, 80100c0 <mbedtls_cipher_free+0x1c>
    if( ctx->cipher_ctx )
 80100aa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80100ac:	b118      	cbz	r0, 80100b6 <mbedtls_cipher_free+0x12>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 80100ae:	6823      	ldr	r3, [r4, #0]
 80100b0:	699b      	ldr	r3, [r3, #24]
 80100b2:	699b      	ldr	r3, [r3, #24]
 80100b4:	4798      	blx	r3
 80100b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80100ba:	2200      	movs	r2, #0
 80100bc:	429c      	cmp	r4, r3
 80100be:	d100      	bne.n	80100c2 <mbedtls_cipher_free+0x1e>
}
 80100c0:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80100c2:	f804 2b01 	strb.w	r2, [r4], #1
 80100c6:	e7f9      	b.n	80100bc <mbedtls_cipher_free+0x18>

080100c8 <mbedtls_cipher_setkey>:
{
 80100c8:	b430      	push	{r4, r5}
    if( NULL == ctx || NULL == ctx->cipher_info )
 80100ca:	b1c8      	cbz	r0, 8010100 <mbedtls_cipher_setkey+0x38>
 80100cc:	6804      	ldr	r4, [r0, #0]
 80100ce:	b1bc      	cbz	r4, 8010100 <mbedtls_cipher_setkey+0x38>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80100d0:	6925      	ldr	r5, [r4, #16]
 80100d2:	07ad      	lsls	r5, r5, #30
 80100d4:	d402      	bmi.n	80100dc <mbedtls_cipher_setkey+0x14>
 80100d6:	6865      	ldr	r5, [r4, #4]
 80100d8:	4295      	cmp	r5, r2
 80100da:	d111      	bne.n	8010100 <mbedtls_cipher_setkey+0x38>
    if( MBEDTLS_ENCRYPT == operation ||
 80100dc:	2b01      	cmp	r3, #1
    ctx->key_bitlen = key_bitlen;
 80100de:	6042      	str	r2, [r0, #4]
    ctx->operation = operation;
 80100e0:	7203      	strb	r3, [r0, #8]
    if( MBEDTLS_ENCRYPT == operation ||
 80100e2:	d004      	beq.n	80100ee <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80100e4:	7865      	ldrb	r5, [r4, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 80100e6:	2d03      	cmp	r5, #3
 80100e8:	d001      	beq.n	80100ee <mbedtls_cipher_setkey+0x26>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80100ea:	2d05      	cmp	r5, #5
 80100ec:	d104      	bne.n	80100f8 <mbedtls_cipher_setkey+0x30>
        return ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80100ee:	69a3      	ldr	r3, [r4, #24]
 80100f0:	68db      	ldr	r3, [r3, #12]
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80100f2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 80100f4:	bc30      	pop	{r4, r5}
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80100f6:	4718      	bx	r3
    if( MBEDTLS_DECRYPT == operation )
 80100f8:	b913      	cbnz	r3, 8010100 <mbedtls_cipher_setkey+0x38>
        return ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 80100fa:	69a3      	ldr	r3, [r4, #24]
 80100fc:	691b      	ldr	r3, [r3, #16]
 80100fe:	e7f8      	b.n	80100f2 <mbedtls_cipher_setkey+0x2a>
}
 8010100:	4801      	ldr	r0, [pc, #4]	; (8010108 <mbedtls_cipher_setkey+0x40>)
 8010102:	bc30      	pop	{r4, r5}
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	ffff9f00 	.word	0xffff9f00

0801010c <mbedtls_cipher_set_iv>:
{
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4614      	mov	r4, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == iv )
 8010110:	4605      	mov	r5, r0
 8010112:	b1a8      	cbz	r0, 8010140 <mbedtls_cipher_set_iv+0x34>
 8010114:	6803      	ldr	r3, [r0, #0]
 8010116:	b19b      	cbz	r3, 8010140 <mbedtls_cipher_set_iv+0x34>
 8010118:	b191      	cbz	r1, 8010140 <mbedtls_cipher_set_iv+0x34>
    if( iv_len > MBEDTLS_MAX_IV_LENGTH )
 801011a:	2a10      	cmp	r2, #16
 801011c:	d80e      	bhi.n	801013c <mbedtls_cipher_set_iv+0x30>
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_IV_LEN ) != 0 )
 801011e:	691a      	ldr	r2, [r3, #16]
 8010120:	07d2      	lsls	r2, r2, #31
 8010122:	d403      	bmi.n	801012c <mbedtls_cipher_set_iv+0x20>
        actual_iv_size = ctx->cipher_info->iv_size;
 8010124:	68db      	ldr	r3, [r3, #12]
        if( actual_iv_size > iv_len )
 8010126:	429c      	cmp	r4, r3
 8010128:	d30a      	bcc.n	8010140 <mbedtls_cipher_set_iv+0x34>
 801012a:	461c      	mov	r4, r3
    memcpy( ctx->iv, iv, actual_iv_size );
 801012c:	4622      	mov	r2, r4
 801012e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8010132:	f012 f959 	bl	80223e8 <memcpy>
    ctx->iv_size = actual_iv_size;
 8010136:	63ac      	str	r4, [r5, #56]	; 0x38
    return( 0 );
 8010138:	2000      	movs	r0, #0
}
 801013a:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 801013c:	4801      	ldr	r0, [pc, #4]	; (8010144 <mbedtls_cipher_set_iv+0x38>)
 801013e:	e7fc      	b.n	801013a <mbedtls_cipher_set_iv+0x2e>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010140:	4801      	ldr	r0, [pc, #4]	; (8010148 <mbedtls_cipher_set_iv+0x3c>)
 8010142:	e7fa      	b.n	801013a <mbedtls_cipher_set_iv+0x2e>
 8010144:	ffff9f80 	.word	0xffff9f80
 8010148:	ffff9f00 	.word	0xffff9f00

0801014c <mbedtls_cipher_reset>:
    if( NULL == ctx || NULL == ctx->cipher_info )
 801014c:	b128      	cbz	r0, 801015a <mbedtls_cipher_reset+0xe>
 801014e:	6803      	ldr	r3, [r0, #0]
 8010150:	b11b      	cbz	r3, 801015a <mbedtls_cipher_reset+0xe>
    ctx->unprocessed_len = 0;
 8010152:	2300      	movs	r3, #0
 8010154:	6243      	str	r3, [r0, #36]	; 0x24
    return( 0 );
 8010156:	4618      	mov	r0, r3
 8010158:	4770      	bx	lr
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801015a:	4801      	ldr	r0, [pc, #4]	; (8010160 <mbedtls_cipher_reset+0x14>)
}
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop
 8010160:	ffff9f00 	.word	0xffff9f00

08010164 <mbedtls_cipher_update>:
{
 8010164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010168:	b085      	sub	sp, #20
 801016a:	4615      	mov	r5, r2
 801016c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8010170:	9103      	str	r1, [sp, #12]
 8010172:	4699      	mov	r9, r3
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8010174:	4604      	mov	r4, r0
 8010176:	b918      	cbnz	r0, 8010180 <mbedtls_cipher_update+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8010178:	485f      	ldr	r0, [pc, #380]	; (80102f8 <mbedtls_cipher_update+0x194>)
}
 801017a:	b005      	add	sp, #20
 801017c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 8010180:	6802      	ldr	r2, [r0, #0]
 8010182:	2a00      	cmp	r2, #0
 8010184:	d0f8      	beq.n	8010178 <mbedtls_cipher_update+0x14>
 8010186:	f1ba 0f00 	cmp.w	sl, #0
 801018a:	d0f5      	beq.n	8010178 <mbedtls_cipher_update+0x14>
    *olen = 0;
 801018c:	2300      	movs	r3, #0
 801018e:	f8ca 3000 	str.w	r3, [sl]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8010192:	f7ff fe83 	bl	800fe9c <mbedtls_cipher_get_block_size>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8010196:	7853      	ldrb	r3, [r2, #1]
 8010198:	2b01      	cmp	r3, #1
    block_size = mbedtls_cipher_get_block_size( ctx );
 801019a:	4606      	mov	r6, r0
    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 801019c:	d110      	bne.n	80101c0 <mbedtls_cipher_update+0x5c>
        if( ilen != block_size )
 801019e:	42a8      	cmp	r0, r5
 80101a0:	f040 80a3 	bne.w	80102ea <mbedtls_cipher_update+0x186>
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80101a4:	6993      	ldr	r3, [r2, #24]
        *olen = ilen;
 80101a6:	f8ca 0000 	str.w	r0, [sl]
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80101aa:	685d      	ldr	r5, [r3, #4]
 80101ac:	9a03      	ldr	r2, [sp, #12]
 80101ae:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80101b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80101b4:	464b      	mov	r3, r9
 80101b6:	46ac      	mov	ip, r5
}
 80101b8:	b005      	add	sp, #20
 80101ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 80101be:	4760      	bx	ip
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 80101c0:	2b06      	cmp	r3, #6
 80101c2:	d10a      	bne.n	80101da <mbedtls_cipher_update+0x76>
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80101c4:	9a03      	ldr	r2, [sp, #12]
 80101c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        *olen = ilen;
 80101c8:	f8ca 5000 	str.w	r5, [sl]
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80101cc:	464b      	mov	r3, r9
 80101ce:	4629      	mov	r1, r5
}
 80101d0:	b005      	add	sp, #20
 80101d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80101d6:	f004 b90d 	b.w	80143f4 <mbedtls_gcm_update>
    if ( 0 == block_size )
 80101da:	2800      	cmp	r0, #0
 80101dc:	f000 8087 	beq.w	80102ee <mbedtls_cipher_update+0x18a>
    if( input == output &&
 80101e0:	9a03      	ldr	r2, [sp, #12]
 80101e2:	454a      	cmp	r2, r9
 80101e4:	d108      	bne.n	80101f8 <mbedtls_cipher_update+0x94>
 80101e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d1c5      	bne.n	8010178 <mbedtls_cipher_update+0x14>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80101ec:	fbb5 f2f0 	udiv	r2, r5, r0
 80101f0:	fb00 5212 	mls	r2, r0, r2, r5
 80101f4:	2a00      	cmp	r2, #0
 80101f6:	d1bf      	bne.n	8010178 <mbedtls_cipher_update+0x14>
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 80101f8:	2b02      	cmp	r3, #2
 80101fa:	d17a      	bne.n	80102f2 <mbedtls_cipher_update+0x18e>
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 80101fc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8010200:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 8010204:	b97b      	cbnz	r3, 8010226 <mbedtls_cipher_update+0xc2>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8010206:	eba6 0308 	sub.w	r3, r6, r8
        if( ( ctx->operation == MBEDTLS_DECRYPT &&
 801020a:	42ab      	cmp	r3, r5
 801020c:	d311      	bcc.n	8010232 <mbedtls_cipher_update+0xce>
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 801020e:	f108 0014 	add.w	r0, r8, #20
 8010212:	462a      	mov	r2, r5
 8010214:	9903      	ldr	r1, [sp, #12]
 8010216:	4420      	add	r0, r4
 8010218:	f012 f8e6 	bl	80223e8 <memcpy>
            ctx->unprocessed_len += ilen;
 801021c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801021e:	442a      	add	r2, r5
 8010220:	6262      	str	r2, [r4, #36]	; 0x24
        return( 0 );
 8010222:	2000      	movs	r0, #0
 8010224:	e7a9      	b.n	801017a <mbedtls_cipher_update+0x16>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8010226:	2b01      	cmp	r3, #1
 8010228:	d103      	bne.n	8010232 <mbedtls_cipher_update+0xce>
                ilen < block_size - ctx->unprocessed_len ) )
 801022a:	eba6 0308 	sub.w	r3, r6, r8
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 801022e:	42ab      	cmp	r3, r5
 8010230:	d8ed      	bhi.n	801020e <mbedtls_cipher_update+0xaa>
        if( 0 != ctx->unprocessed_len )
 8010232:	f1b8 0f00 	cmp.w	r8, #0
 8010236:	d025      	beq.n	8010284 <mbedtls_cipher_update+0x120>
            copy_len = block_size - ctx->unprocessed_len;
 8010238:	eba6 0b08 	sub.w	fp, r6, r8
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 801023c:	f108 0014 	add.w	r0, r8, #20
 8010240:	9903      	ldr	r1, [sp, #12]
 8010242:	465a      	mov	r2, fp
 8010244:	4420      	add	r0, r4
 8010246:	f012 f8cf 	bl	80223e8 <memcpy>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 801024a:	4623      	mov	r3, r4
 801024c:	f853 2b14 	ldr.w	r2, [r3], #20
 8010250:	6992      	ldr	r2, [r2, #24]
 8010252:	e9cd 3900 	strd	r3, r9, [sp]
 8010256:	6893      	ldr	r3, [r2, #8]
 8010258:	f994 1008 	ldrsb.w	r1, [r4, #8]
 801025c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801025e:	461f      	mov	r7, r3
 8010260:	4632      	mov	r2, r6
 8010262:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8010266:	47b8      	blx	r7
 8010268:	2800      	cmp	r0, #0
 801026a:	d186      	bne.n	801017a <mbedtls_cipher_update+0x16>
            *olen += block_size;
 801026c:	f8da 3000 	ldr.w	r3, [sl]
 8010270:	4433      	add	r3, r6
 8010272:	f8ca 3000 	str.w	r3, [sl]
            input += copy_len;
 8010276:	9b03      	ldr	r3, [sp, #12]
            ctx->unprocessed_len = 0;
 8010278:	6260      	str	r0, [r4, #36]	; 0x24
            input += copy_len;
 801027a:	445b      	add	r3, fp
 801027c:	4445      	add	r5, r8
            output += block_size;
 801027e:	44b1      	add	r9, r6
            input += copy_len;
 8010280:	9303      	str	r3, [sp, #12]
            ilen -= copy_len;
 8010282:	1bad      	subs	r5, r5, r6
        if( 0 != ilen )
 8010284:	2d00      	cmp	r5, #0
 8010286:	d0cc      	beq.n	8010222 <mbedtls_cipher_update+0xbe>
            copy_len = ilen % block_size;
 8010288:	fbb5 f8f6 	udiv	r8, r5, r6
 801028c:	fb06 5818 	mls	r8, r6, r8, r5
            if( copy_len == 0 && ctx->operation == MBEDTLS_DECRYPT )
 8010290:	f1b8 0f00 	cmp.w	r8, #0
 8010294:	d104      	bne.n	80102a0 <mbedtls_cipher_update+0x13c>
 8010296:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	bf08      	it	eq
 801029e:	46b0      	moveq	r8, r6
            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 80102a0:	9b03      	ldr	r3, [sp, #12]
 80102a2:	eba5 0508 	sub.w	r5, r5, r8
 80102a6:	4642      	mov	r2, r8
 80102a8:	1959      	adds	r1, r3, r5
 80102aa:	f104 0014 	add.w	r0, r4, #20
 80102ae:	f012 f89b 	bl	80223e8 <memcpy>
            ctx->unprocessed_len += copy_len;
 80102b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80102b4:	4442      	add	r2, r8
 80102b6:	6262      	str	r2, [r4, #36]	; 0x24
        if( ilen )
 80102b8:	2d00      	cmp	r5, #0
 80102ba:	d0b2      	beq.n	8010222 <mbedtls_cipher_update+0xbe>
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80102bc:	6823      	ldr	r3, [r4, #0]
 80102be:	9a03      	ldr	r2, [sp, #12]
 80102c0:	699b      	ldr	r3, [r3, #24]
 80102c2:	9200      	str	r2, [sp, #0]
 80102c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80102c8:	689e      	ldr	r6, [r3, #8]
 80102ca:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80102ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80102d0:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80102d4:	462a      	mov	r2, r5
 80102d6:	47b0      	blx	r6
 80102d8:	2800      	cmp	r0, #0
 80102da:	f47f af4e 	bne.w	801017a <mbedtls_cipher_update+0x16>
            *olen += ilen;
 80102de:	f8da 2000 	ldr.w	r2, [sl]
 80102e2:	4415      	add	r5, r2
 80102e4:	f8ca 5000 	str.w	r5, [sl]
 80102e8:	e747      	b.n	801017a <mbedtls_cipher_update+0x16>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80102ea:	4804      	ldr	r0, [pc, #16]	; (80102fc <mbedtls_cipher_update+0x198>)
 80102ec:	e745      	b.n	801017a <mbedtls_cipher_update+0x16>
        return MBEDTLS_ERR_CIPHER_INVALID_CONTEXT;
 80102ee:	4804      	ldr	r0, [pc, #16]	; (8010300 <mbedtls_cipher_update+0x19c>)
 80102f0:	e743      	b.n	801017a <mbedtls_cipher_update+0x16>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80102f2:	4804      	ldr	r0, [pc, #16]	; (8010304 <mbedtls_cipher_update+0x1a0>)
 80102f4:	e741      	b.n	801017a <mbedtls_cipher_update+0x16>
 80102f6:	bf00      	nop
 80102f8:	ffff9f00 	.word	0xffff9f00
 80102fc:	ffff9d80 	.word	0xffff9d80
 8010300:	ffff9c80 	.word	0xffff9c80
 8010304:	ffff9f80 	.word	0xffff9f80

08010308 <mbedtls_cipher_finish>:
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

int mbedtls_cipher_finish( mbedtls_cipher_context_t *ctx,
                   unsigned char *output, size_t *olen )
{
 8010308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801030a:	460e      	mov	r6, r1
 801030c:	4615      	mov	r5, r2
    if( NULL == ctx || NULL == ctx->cipher_info || NULL == olen )
 801030e:	4604      	mov	r4, r0
 8010310:	2800      	cmp	r0, #0
 8010312:	d055      	beq.n	80103c0 <mbedtls_cipher_finish+0xb8>
 8010314:	6801      	ldr	r1, [r0, #0]
 8010316:	2900      	cmp	r1, #0
 8010318:	d052      	beq.n	80103c0 <mbedtls_cipher_finish+0xb8>
 801031a:	2a00      	cmp	r2, #0
 801031c:	d050      	beq.n	80103c0 <mbedtls_cipher_finish+0xb8>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );

    *olen = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	6013      	str	r3, [r2, #0]

    if( MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8010322:	784a      	ldrb	r2, [r1, #1]
 8010324:	2a03      	cmp	r2, #3
 8010326:	d009      	beq.n	801033c <mbedtls_cipher_finish+0x34>
 8010328:	1f57      	subs	r7, r2, #5
 801032a:	2f02      	cmp	r7, #2
 801032c:	d906      	bls.n	801033c <mbedtls_cipher_finish+0x34>
        MBEDTLS_MODE_STREAM == ctx->cipher_info->mode )
    {
        return( 0 );
    }

    if( MBEDTLS_MODE_ECB == ctx->cipher_info->mode )
 801032e:	2a01      	cmp	r2, #1
 8010330:	d107      	bne.n	8010342 <mbedtls_cipher_finish+0x3a>
    {
        if( ctx->unprocessed_len != 0 )
 8010332:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010334:	2b00      	cmp	r3, #0
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8010336:	4b24      	ldr	r3, [pc, #144]	; (80103c8 <mbedtls_cipher_finish+0xc0>)
 8010338:	bf08      	it	eq
 801033a:	2300      	moveq	r3, #0
#else
    ((void) output);
#endif /* MBEDTLS_CIPHER_MODE_CBC */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 801033c:	4618      	mov	r0, r3
 801033e:	b003      	add	sp, #12
 8010340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( MBEDTLS_MODE_CBC == ctx->cipher_info->mode )
 8010342:	2a02      	cmp	r2, #2
 8010344:	d13e      	bne.n	80103c4 <mbedtls_cipher_finish+0xbc>
        if( MBEDTLS_ENCRYPT == ctx->operation )
 8010346:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801034a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 801034c:	2b01      	cmp	r3, #1
 801034e:	d12c      	bne.n	80103aa <mbedtls_cipher_finish+0xa2>
            if( NULL == ctx->add_padding )
 8010350:	68c7      	ldr	r7, [r0, #12]
 8010352:	b90f      	cbnz	r7, 8010358 <mbedtls_cipher_finish+0x50>
                if( 0 != ctx->unprocessed_len )
 8010354:	2a00      	cmp	r2, #0
 8010356:	e7ee      	b.n	8010336 <mbedtls_cipher_finish+0x2e>
static inline int mbedtls_cipher_get_iv_size( const mbedtls_cipher_context_t *ctx )
{
    if( NULL == ctx || NULL == ctx->cipher_info )
        return 0;

    if( ctx->iv_size != 0 )
 8010358:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ctx->add_padding( ctx->unprocessed_data, mbedtls_cipher_get_iv_size( ctx ),
 801035a:	3014      	adds	r0, #20
 801035c:	b31b      	cbz	r3, 80103a6 <mbedtls_cipher_finish+0x9e>
        return (int) ctx->iv_size;
 801035e:	4619      	mov	r1, r3
 8010360:	47b8      	blx	r7
        if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8010362:	4620      	mov	r0, r4
 8010364:	f7ff fd9a 	bl	800fe9c <mbedtls_cipher_get_block_size>
 8010368:	4623      	mov	r3, r4
 801036a:	4602      	mov	r2, r0
 801036c:	f853 1b14 	ldr.w	r1, [r3], #20
 8010370:	6989      	ldr	r1, [r1, #24]
 8010372:	e9cd 3600 	strd	r3, r6, [sp]
 8010376:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801037a:	688f      	ldr	r7, [r1, #8]
 801037c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801037e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 8010382:	47b8      	blx	r7
 8010384:	4603      	mov	r3, r0
 8010386:	2800      	cmp	r0, #0
 8010388:	d1d8      	bne.n	801033c <mbedtls_cipher_finish+0x34>
        if( MBEDTLS_DECRYPT == ctx->operation )
 801038a:	4620      	mov	r0, r4
 801038c:	f7ff fd86 	bl	800fe9c <mbedtls_cipher_get_block_size>
 8010390:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8010394:	4601      	mov	r1, r0
 8010396:	b98a      	cbnz	r2, 80103bc <mbedtls_cipher_finish+0xb4>
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 8010398:	6923      	ldr	r3, [r4, #16]
 801039a:	462a      	mov	r2, r5
 801039c:	4630      	mov	r0, r6
}
 801039e:	b003      	add	sp, #12
 80103a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return ctx->get_padding( output, mbedtls_cipher_get_block_size( ctx ),
 80103a4:	4718      	bx	r3

    return (int) ctx->cipher_info->iv_size;
 80103a6:	68c9      	ldr	r1, [r1, #12]
 80103a8:	e7da      	b.n	8010360 <mbedtls_cipher_finish+0x58>
        else if( mbedtls_cipher_get_block_size( ctx ) != ctx->unprocessed_len )
 80103aa:	f7ff fd77 	bl	800fe9c <mbedtls_cipher_get_block_size>
 80103ae:	4290      	cmp	r0, r2
 80103b0:	d0d7      	beq.n	8010362 <mbedtls_cipher_finish+0x5a>
            if( NULL == ctx->add_padding && 0 == ctx->unprocessed_len )
 80103b2:	68e3      	ldr	r3, [r4, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d0cd      	beq.n	8010354 <mbedtls_cipher_finish+0x4c>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 80103b8:	4b03      	ldr	r3, [pc, #12]	; (80103c8 <mbedtls_cipher_finish+0xc0>)
 80103ba:	e7bf      	b.n	801033c <mbedtls_cipher_finish+0x34>
        *olen = mbedtls_cipher_get_block_size( ctx );
 80103bc:	6028      	str	r0, [r5, #0]
        return( 0 );
 80103be:	e7bd      	b.n	801033c <mbedtls_cipher_finish+0x34>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80103c0:	4b02      	ldr	r3, [pc, #8]	; (80103cc <mbedtls_cipher_finish+0xc4>)
 80103c2:	e7bb      	b.n	801033c <mbedtls_cipher_finish+0x34>
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80103c4:	4b02      	ldr	r3, [pc, #8]	; (80103d0 <mbedtls_cipher_finish+0xc8>)
 80103c6:	e7b9      	b.n	801033c <mbedtls_cipher_finish+0x34>
 80103c8:	ffff9d80 	.word	0xffff9d80
 80103cc:	ffff9f00 	.word	0xffff9f00
 80103d0:	ffff9f80 	.word	0xffff9f80

080103d4 <mbedtls_cipher_set_padding_mode>:

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx, mbedtls_cipher_padding_t mode )
{
    if( NULL == ctx ||
 80103d4:	b308      	cbz	r0, 801041a <mbedtls_cipher_set_padding_mode+0x46>
        MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 80103d6:	6803      	ldr	r3, [r0, #0]
    if( NULL == ctx ||
 80103d8:	785b      	ldrb	r3, [r3, #1]
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d11d      	bne.n	801041a <mbedtls_cipher_set_padding_mode+0x46>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
    }

    switch( mode )
 80103de:	2904      	cmp	r1, #4
 80103e0:	d81d      	bhi.n	801041e <mbedtls_cipher_set_padding_mode+0x4a>
 80103e2:	e8df f001 	tbb	[pc, r1]
 80103e6:	0903      	.short	0x0903
 80103e8:	110d      	.short	0x110d
 80103ea:	15          	.byte	0x15
 80103eb:	00          	.byte	0x00
    {
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    case MBEDTLS_PADDING_PKCS7:
        ctx->add_padding = add_pkcs_padding;
 80103ec:	4b0d      	ldr	r3, [pc, #52]	; (8010424 <mbedtls_cipher_set_padding_mode+0x50>)
 80103ee:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_pkcs_padding;
 80103f0:	4b0d      	ldr	r3, [pc, #52]	; (8010428 <mbedtls_cipher_set_padding_mode+0x54>)
        break;
#endif
#if defined(MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS)
    case MBEDTLS_PADDING_ONE_AND_ZEROS:
        ctx->add_padding = add_one_and_zeros_padding;
        ctx->get_padding = get_one_and_zeros_padding;
 80103f2:	6103      	str	r3, [r0, #16]

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 80103f4:	2000      	movs	r0, #0
        break;
 80103f6:	4770      	bx	lr
        ctx->add_padding = add_one_and_zeros_padding;
 80103f8:	4b0c      	ldr	r3, [pc, #48]	; (801042c <mbedtls_cipher_set_padding_mode+0x58>)
 80103fa:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_one_and_zeros_padding;
 80103fc:	4b0c      	ldr	r3, [pc, #48]	; (8010430 <mbedtls_cipher_set_padding_mode+0x5c>)
 80103fe:	e7f8      	b.n	80103f2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_and_len_padding;
 8010400:	4b0c      	ldr	r3, [pc, #48]	; (8010434 <mbedtls_cipher_set_padding_mode+0x60>)
 8010402:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_and_len_padding;
 8010404:	4b0c      	ldr	r3, [pc, #48]	; (8010438 <mbedtls_cipher_set_padding_mode+0x64>)
 8010406:	e7f4      	b.n	80103f2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->add_padding = add_zeros_padding;
 8010408:	4b0c      	ldr	r3, [pc, #48]	; (801043c <mbedtls_cipher_set_padding_mode+0x68>)
 801040a:	60c3      	str	r3, [r0, #12]
        ctx->get_padding = get_zeros_padding;
 801040c:	4b0c      	ldr	r3, [pc, #48]	; (8010440 <mbedtls_cipher_set_padding_mode+0x6c>)
 801040e:	e7f0      	b.n	80103f2 <mbedtls_cipher_set_padding_mode+0x1e>
        ctx->get_padding = get_no_padding;
 8010410:	4a0c      	ldr	r2, [pc, #48]	; (8010444 <mbedtls_cipher_set_padding_mode+0x70>)
 8010412:	6102      	str	r2, [r0, #16]
        ctx->add_padding = NULL;
 8010414:	2300      	movs	r3, #0
 8010416:	60c3      	str	r3, [r0, #12]
        break;
 8010418:	e7ec      	b.n	80103f4 <mbedtls_cipher_set_padding_mode+0x20>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801041a:	480b      	ldr	r0, [pc, #44]	; (8010448 <mbedtls_cipher_set_padding_mode+0x74>)
 801041c:	4770      	bx	lr
    if( NULL == ctx ||
 801041e:	480b      	ldr	r0, [pc, #44]	; (801044c <mbedtls_cipher_set_padding_mode+0x78>)
}
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	0800fea7 	.word	0x0800fea7
 8010428:	0800fec1 	.word	0x0800fec1
 801042c:	0800ff15 	.word	0x0800ff15
 8010430:	0800ffc9 	.word	0x0800ffc9
 8010434:	0800ff31 	.word	0x0800ff31
 8010438:	0800ff55 	.word	0x0800ff55
 801043c:	0800ffa5 	.word	0x0800ffa5
 8010440:	08010025 	.word	0x08010025
 8010444:	0800ffb5 	.word	0x0800ffb5
 8010448:	ffff9f00 	.word	0xffff9f00
 801044c:	ffff9f80 	.word	0xffff9f80

08010450 <mbedtls_cipher_setup>:
{
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4604      	mov	r4, r0
    if( NULL == cipher_info || NULL == ctx )
 8010454:	460d      	mov	r5, r1
 8010456:	b181      	cbz	r1, 801047a <mbedtls_cipher_setup+0x2a>
 8010458:	b178      	cbz	r0, 801047a <mbedtls_cipher_setup+0x2a>
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 801045a:	2240      	movs	r2, #64	; 0x40
 801045c:	2100      	movs	r1, #0
 801045e:	f011 ffeb 	bl	8022438 <memset>
    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8010462:	69ab      	ldr	r3, [r5, #24]
 8010464:	695b      	ldr	r3, [r3, #20]
 8010466:	4798      	blx	r3
 8010468:	63e0      	str	r0, [r4, #60]	; 0x3c
 801046a:	b140      	cbz	r0, 801047e <mbedtls_cipher_setup+0x2e>
    ctx->cipher_info = cipher_info;
 801046c:	6025      	str	r5, [r4, #0]
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
 801046e:	2100      	movs	r1, #0
 8010470:	4620      	mov	r0, r4
 8010472:	f7ff ffaf 	bl	80103d4 <mbedtls_cipher_set_padding_mode>
    return( 0 );
 8010476:	2000      	movs	r0, #0
}
 8010478:	bd38      	pop	{r3, r4, r5, pc}
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 801047a:	4802      	ldr	r0, [pc, #8]	; (8010484 <mbedtls_cipher_setup+0x34>)
 801047c:	e7fc      	b.n	8010478 <mbedtls_cipher_setup+0x28>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 801047e:	4802      	ldr	r0, [pc, #8]	; (8010488 <mbedtls_cipher_setup+0x38>)
 8010480:	e7fa      	b.n	8010478 <mbedtls_cipher_setup+0x28>
 8010482:	bf00      	nop
 8010484:	ffff9f00 	.word	0xffff9f00
 8010488:	ffff9e80 	.word	0xffff9e80

0801048c <mbedtls_cipher_crypt>:
 */
int mbedtls_cipher_crypt( mbedtls_cipher_context_t *ctx,
                  const unsigned char *iv, size_t iv_len,
                  const unsigned char *input, size_t ilen,
                  unsigned char *output, size_t *olen )
{
 801048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801048e:	b085      	sub	sp, #20
 8010490:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8010494:	4604      	mov	r4, r0
 8010496:	461e      	mov	r6, r3
    int ret;
    size_t finish_olen;

    if( ( ret = mbedtls_cipher_set_iv( ctx, iv, iv_len ) ) != 0 )
 8010498:	f7ff fe38 	bl	801010c <mbedtls_cipher_set_iv>
 801049c:	b9b0      	cbnz	r0, 80104cc <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_reset( ctx ) ) != 0 )
 801049e:	4620      	mov	r0, r4
 80104a0:	f7ff fe54 	bl	801014c <mbedtls_cipher_reset>
 80104a4:	b990      	cbnz	r0, 80104cc <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_update( ctx, input, ilen, output, olen ) ) != 0 )
 80104a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104a8:	9500      	str	r5, [sp, #0]
 80104aa:	463b      	mov	r3, r7
 80104ac:	4631      	mov	r1, r6
 80104ae:	4620      	mov	r0, r4
 80104b0:	f7ff fe58 	bl	8010164 <mbedtls_cipher_update>
 80104b4:	b950      	cbnz	r0, 80104cc <mbedtls_cipher_crypt+0x40>
        return( ret );

    if( ( ret = mbedtls_cipher_finish( ctx, output + *olen, &finish_olen ) ) != 0 )
 80104b6:	6829      	ldr	r1, [r5, #0]
 80104b8:	aa03      	add	r2, sp, #12
 80104ba:	4439      	add	r1, r7
 80104bc:	4620      	mov	r0, r4
 80104be:	f7ff ff23 	bl	8010308 <mbedtls_cipher_finish>
 80104c2:	b918      	cbnz	r0, 80104cc <mbedtls_cipher_crypt+0x40>
        return( ret );

    *olen += finish_olen;
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	9a03      	ldr	r2, [sp, #12]
 80104c8:	4413      	add	r3, r2
 80104ca:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 80104cc:	b005      	add	sp, #20
 80104ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080104d0 <mbedtls_cipher_auth_encrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         unsigned char *tag, size_t tag_len )
{
 80104d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80104d4:	6807      	ldr	r7, [r0, #0]
{
 80104d6:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80104da:	787f      	ldrb	r7, [r7, #1]
 80104dc:	2f06      	cmp	r7, #6
{
 80104de:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80104e2:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 80104e6:	e9dd 980b 	ldrd	r9, r8, [sp, #44]	; 0x2c
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 80104ea:	d110      	bne.n	801050e <mbedtls_cipher_auth_encrypt+0x3e>
    {
        *olen = ilen;
 80104ec:	f8c9 4000 	str.w	r4, [r9]
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 80104f0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80104f4:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 80104f8:	e9cd 6c0a 	strd	r6, ip, [sp, #40]	; 0x28
 80104fc:	9207      	str	r2, [sp, #28]
 80104fe:	460b      	mov	r3, r1
 8010500:	4622      	mov	r2, r4
 8010502:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
                                     tag, tag_len ) );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8010504:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return( mbedtls_gcm_crypt_and_tag( ctx->cipher_ctx, MBEDTLS_GCM_ENCRYPT, ilen,
 8010508:	2101      	movs	r1, #1
 801050a:	f004 b850 	b.w	80145ae <mbedtls_gcm_crypt_and_tag>
}
 801050e:	4801      	ldr	r0, [pc, #4]	; (8010514 <mbedtls_cipher_auth_encrypt+0x44>)
 8010510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010514:	ffff9f80 	.word	0xffff9f80

08010518 <mbedtls_cipher_auth_decrypt>:
                         const unsigned char *iv, size_t iv_len,
                         const unsigned char *ad, size_t ad_len,
                         const unsigned char *input, size_t ilen,
                         unsigned char *output, size_t *olen,
                         const unsigned char *tag, size_t tag_len )
{
 8010518:	b530      	push	{r4, r5, lr}
#if defined(MBEDTLS_GCM_C)
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 801051a:	6805      	ldr	r5, [r0, #0]
 801051c:	786d      	ldrb	r5, [r5, #1]
{
 801051e:	b087      	sub	sp, #28
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8010520:	2d06      	cmp	r5, #6
{
 8010522:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if( MBEDTLS_MODE_GCM == ctx->cipher_info->mode )
 8010524:	d119      	bne.n	801055a <mbedtls_cipher_auth_decrypt+0x42>
    {
        int ret;

        *olen = ilen;
 8010526:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010528:	602c      	str	r4, [r5, #0]
        ret = mbedtls_gcm_auth_decrypt( ctx->cipher_ctx, ilen,
 801052a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801052c:	9505      	str	r5, [sp, #20]
 801052e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8010530:	9504      	str	r5, [sp, #16]
 8010532:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010534:	9503      	str	r5, [sp, #12]
 8010536:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010538:	9502      	str	r5, [sp, #8]
 801053a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801053c:	e9cd 3500 	strd	r3, r5, [sp]
 8010540:	4613      	mov	r3, r2
 8010542:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8010544:	460a      	mov	r2, r1
 8010546:	4621      	mov	r1, r4
 8010548:	f004 f854 	bl	80145f4 <mbedtls_gcm_auth_decrypt>
                                iv, iv_len, ad, ad_len,
                                tag, tag_len, input, output );

        if( ret == MBEDTLS_ERR_GCM_AUTH_FAILED )
            ret = MBEDTLS_ERR_CIPHER_AUTH_FAILED;
 801054c:	4b04      	ldr	r3, [pc, #16]	; (8010560 <mbedtls_cipher_auth_decrypt+0x48>)
 801054e:	f110 0f12 	cmn.w	r0, #18
 8010552:	bf08      	it	eq
 8010554:	4618      	moveq	r0, r3
        return( ret );
    }
#endif /* MBEDTLS_CCM_C */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
}
 8010556:	b007      	add	sp, #28
 8010558:	bd30      	pop	{r4, r5, pc}
    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 801055a:	4802      	ldr	r0, [pc, #8]	; (8010564 <mbedtls_cipher_auth_decrypt+0x4c>)
 801055c:	e7fb      	b.n	8010556 <mbedtls_cipher_auth_decrypt+0x3e>
 801055e:	bf00      	nop
 8010560:	ffff9d00 	.word	0xffff9d00
 8010564:	ffff9f80 	.word	0xffff9f80

08010568 <gcm_ctx_free>:

    return( ctx );
}

static void gcm_ctx_free( void *ctx )
{
 8010568:	b510      	push	{r4, lr}
 801056a:	4604      	mov	r4, r0
    mbedtls_gcm_free( ctx );
 801056c:	f004 f86e 	bl	801464c <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8010570:	4b02      	ldr	r3, [pc, #8]	; (801057c <gcm_ctx_free+0x14>)
 8010572:	4620      	mov	r0, r4
 8010574:	681b      	ldr	r3, [r3, #0]
}
 8010576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801057a:	4718      	bx	r3
 801057c:	200005a4 	.word	0x200005a4

08010580 <gcm_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010580:	4b06      	ldr	r3, [pc, #24]	; (801059c <gcm_ctx_alloc+0x1c>)
{
 8010582:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	f44f 71c4 	mov.w	r1, #392	; 0x188
 801058a:	2001      	movs	r0, #1
 801058c:	4798      	blx	r3
    if( ctx != NULL )
 801058e:	4604      	mov	r4, r0
 8010590:	b108      	cbz	r0, 8010596 <gcm_ctx_alloc+0x16>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8010592:	f003 fddd 	bl	8014150 <mbedtls_gcm_init>
}
 8010596:	4620      	mov	r0, r4
 8010598:	bd10      	pop	{r4, pc}
 801059a:	bf00      	nop
 801059c:	200005a0 	.word	0x200005a0

080105a0 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 80105a0:	4613      	mov	r3, r2
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 80105a2:	460a      	mov	r2, r1
 80105a4:	2102      	movs	r1, #2
 80105a6:	f003 bdd8 	b.w	801415a <mbedtls_gcm_setkey>
	...

080105ac <aes_ctx_free>:
{
 80105ac:	b510      	push	{r4, lr}
 80105ae:	4604      	mov	r4, r0
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 80105b0:	f7fc ffff 	bl	800d5b2 <mbedtls_aes_free>
    mbedtls_free( ctx );
 80105b4:	4b02      	ldr	r3, [pc, #8]	; (80105c0 <aes_ctx_free+0x14>)
 80105b6:	4620      	mov	r0, r4
 80105b8:	681b      	ldr	r3, [r3, #0]
}
 80105ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80105be:	4718      	bx	r3
 80105c0:	200005a4 	.word	0x200005a4

080105c4 <aes_ctx_alloc>:
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 80105c4:	4b06      	ldr	r3, [pc, #24]	; (80105e0 <aes_ctx_alloc+0x1c>)
{
 80105c6:	b510      	push	{r4, lr}
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f44f 718c 	mov.w	r1, #280	; 0x118
 80105ce:	2001      	movs	r0, #1
 80105d0:	4798      	blx	r3
    if( aes == NULL )
 80105d2:	4604      	mov	r4, r0
 80105d4:	b108      	cbz	r0, 80105da <aes_ctx_alloc+0x16>
    mbedtls_aes_init( aes );
 80105d6:	f7fc ffe7 	bl	800d5a8 <mbedtls_aes_init>
}
 80105da:	4620      	mov	r0, r4
 80105dc:	bd10      	pop	{r4, pc}
 80105de:	bf00      	nop
 80105e0:	200005a0 	.word	0x200005a0

080105e4 <aes_setkey_dec_wrap>:
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80105e4:	f7fd b8e4 	b.w	800d7b0 <mbedtls_aes_setkey_dec>

080105e8 <aes_setkey_enc_wrap>:
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80105e8:	f7fc bfee 	b.w	800d5c8 <mbedtls_aes_setkey_enc>

080105ec <aes_crypt_cbc_wrap>:
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 80105ec:	f7fd bd01 	b.w	800dff2 <mbedtls_aes_crypt_cbc>

080105f0 <aes_crypt_ecb_wrap>:
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 80105f0:	f7fd bcf1 	b.w	800dfd6 <mbedtls_aes_crypt_ecb>

080105f4 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 80105f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_aes_context aes_ctx;

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 80105f8:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
{
 80105fc:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 8010600:	4604      	mov	r4, r0
 8010602:	460f      	mov	r7, r1
 8010604:	4616      	mov	r6, r2
    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8010606:	d87b      	bhi.n	8010700 <block_cipher_df+0x10c>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8010608:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 801060c:	2100      	movs	r1, #0
 801060e:	a85e      	add	r0, sp, #376	; 0x178
 8010610:	f011 ff12 	bl	8022438 <memset>
    mbedtls_aes_init( &aes_ctx );
 8010614:	a818      	add	r0, sp, #96	; 0x60
 8010616:	f7fc ffc7 	bl	800d5a8 <mbedtls_aes_init>
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
    *p++ = ( data_len >> 24 ) & 0xff;
    *p++ = ( data_len >> 16 ) & 0xff;
    *p++ = ( data_len >> 8  ) & 0xff;
 801061a:	ba73      	rev16	r3, r6
 801061c:	f8ad 318a 	strh.w	r3, [sp, #394]	; 0x18a
    *p++ = ( data_len       ) & 0xff;
    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8010620:	2330      	movs	r3, #48	; 0x30
 8010622:	f88d 318f 	strb.w	r3, [sp, #399]	; 0x18f
    memcpy( p, data, data_len );
 8010626:	ab64      	add	r3, sp, #400	; 0x190
 8010628:	4632      	mov	r2, r6
    *p++ = ( data_len >> 24 ) & 0xff;
 801062a:	2500      	movs	r5, #0
    memcpy( p, data, data_len );
 801062c:	4639      	mov	r1, r7
 801062e:	4618      	mov	r0, r3
    *p++ = ( data_len >> 24 ) & 0xff;
 8010630:	f8ad 5188 	strh.w	r5, [sp, #392]	; 0x188
    memcpy( p, data, data_len );
 8010634:	f011 fed8 	bl	80223e8 <memcpy>
    p[data_len] = 0x80;
 8010638:	2280      	movs	r2, #128	; 0x80
 801063a:	5582      	strb	r2, [r0, r6]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 801063c:	aa04      	add	r2, sp, #16
 801063e:	3619      	adds	r6, #25

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8010640:	462b      	mov	r3, r5
 8010642:	4611      	mov	r1, r2
        key[i] = i;
 8010644:	f802 3b01 	strb.w	r3, [r2], #1
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8010648:	3301      	adds	r3, #1
 801064a:	2b20      	cmp	r3, #32
 801064c:	d1fa      	bne.n	8010644 <block_cipher_df+0x50>

    mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 801064e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010652:	a818      	add	r0, sp, #96	; 0x60
 8010654:	f7fc ffb8 	bl	800d5c8 <mbedtls_aes_setkey_enc>

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010658:	2700      	movs	r7, #0
    {
        p = buf;
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 801065a:	466d      	mov	r5, sp
 801065c:	2210      	movs	r2, #16
 801065e:	2100      	movs	r1, #0
 8010660:	4628      	mov	r0, r5
 8010662:	f011 fee9 	bl	8022438 <memset>
        use_len = buf_len;
 8010666:	46b1      	mov	r9, r6
 8010668:	f20d 1387 	addw	r3, sp, #391	; 0x187

        while( use_len > 0 )
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 801066c:	462a      	mov	r2, r5
 801066e:	f1a3 0810 	sub.w	r8, r3, #16
                chain[i] ^= p[i];
 8010672:	7811      	ldrb	r1, [r2, #0]
 8010674:	f818 0f01 	ldrb.w	r0, [r8, #1]!
 8010678:	4041      	eors	r1, r0
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 801067a:	4598      	cmp	r8, r3
                chain[i] ^= p[i];
 801067c:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8010680:	d1f7      	bne.n	8010672 <block_cipher_df+0x7e>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8010682:	f1b9 0f10 	cmp.w	r9, #16
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;

            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 8010686:	462b      	mov	r3, r5
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8010688:	bf94      	ite	ls
 801068a:	eba9 0909 	subls.w	r9, r9, r9
 801068e:	f1a9 0910 	subhi.w	r9, r9, #16
            mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain );
 8010692:	462a      	mov	r2, r5
 8010694:	2101      	movs	r1, #1
 8010696:	a818      	add	r0, sp, #96	; 0x60
 8010698:	f7fd fc9d 	bl	800dfd6 <mbedtls_aes_crypt_ecb>
        while( use_len > 0 )
 801069c:	f108 0310 	add.w	r3, r8, #16
 80106a0:	f1b9 0f00 	cmp.w	r9, #0
 80106a4:	d1e2      	bne.n	801066c <block_cipher_df+0x78>
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80106a6:	ab0c      	add	r3, sp, #48	; 0x30
 80106a8:	eb07 0c03 	add.w	ip, r7, r3
 80106ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80106b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

        /*
         * Update IV
         */
        buf[3]++;
 80106b4:	f89d 317b 	ldrb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80106b8:	3710      	adds	r7, #16
        buf[3]++;
 80106ba:	3301      	adds	r3, #1
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80106bc:	2f30      	cmp	r7, #48	; 0x30
        buf[3]++;
 80106be:	f88d 317b 	strb.w	r3, [sp, #379]	; 0x17b
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80106c2:	d1cb      	bne.n	801065c <block_cipher_df+0x68>
    }

    /*
     * Do final encryption with reduced data
     */
    mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 80106c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80106c8:	a90c      	add	r1, sp, #48	; 0x30
 80106ca:	a818      	add	r0, sp, #96	; 0x60
 80106cc:	f7fc ff7c 	bl	800d5c8 <mbedtls_aes_setkey_enc>
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
    p = output;

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80106d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
    {
        mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 80106d4:	ad14      	add	r5, sp, #80	; 0x50
 80106d6:	462b      	mov	r3, r5
 80106d8:	462a      	mov	r2, r5
 80106da:	2101      	movs	r1, #1
 80106dc:	a818      	add	r0, sp, #96	; 0x60
 80106de:	f7fd fc7a 	bl	800dfd6 <mbedtls_aes_crypt_ecb>
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80106e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80106e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80106ea:	3410      	adds	r4, #16
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80106ec:	42a6      	cmp	r6, r4
 80106ee:	d1f2      	bne.n	80106d6 <block_cipher_df+0xe2>
    }

    mbedtls_aes_free( &aes_ctx );
 80106f0:	a818      	add	r0, sp, #96	; 0x60
 80106f2:	f7fc ff5e 	bl	800d5b2 <mbedtls_aes_free>

    return( 0 );
 80106f6:	2000      	movs	r0, #0
}
 80106f8:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
 80106fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8010700:	f06f 0037 	mvn.w	r0, #55	; 0x37
 8010704:	e7f8      	b.n	80106f8 <block_cipher_df+0x104>

08010706 <ctr_drbg_update_internal>:

static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8010706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801070a:	b08c      	sub	sp, #48	; 0x30
 801070c:	4604      	mov	r4, r0
 801070e:	460d      	mov	r5, r1
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
    int i, j;

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8010710:	2230      	movs	r2, #48	; 0x30
 8010712:	2100      	movs	r1, #0
 8010714:	4668      	mov	r0, sp
 8010716:	f011 fe8f 	bl	8022438 <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801071a:	f04f 0800 	mov.w	r8, #0
                break;

        /*
         * Crypt counter block
         */
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 801071e:	f104 0720 	add.w	r7, r4, #32
 8010722:	466e      	mov	r6, sp
 8010724:	eb0d 0308 	add.w	r3, sp, r8
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8010728:	f104 010f 	add.w	r1, r4, #15
            if( ++ctx->counter[i - 1] != 0 )
 801072c:	780a      	ldrb	r2, [r1, #0]
 801072e:	3201      	adds	r2, #1
 8010730:	b2d2      	uxtb	r2, r2
 8010732:	4608      	mov	r0, r1
 8010734:	f801 2901 	strb.w	r2, [r1], #-1
 8010738:	b90a      	cbnz	r2, 801073e <ctr_drbg_update_internal+0x38>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 801073a:	42a0      	cmp	r0, r4
 801073c:	d1f6      	bne.n	801072c <ctr_drbg_update_internal+0x26>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 801073e:	4622      	mov	r2, r4
 8010740:	2101      	movs	r1, #1
 8010742:	4638      	mov	r0, r7
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8010744:	f108 0810 	add.w	r8, r8, #16
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p );
 8010748:	f7fd fc45 	bl	800dfd6 <mbedtls_aes_crypt_ecb>
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 801074c:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8010750:	d1e7      	bne.n	8010722 <ctr_drbg_update_internal+0x1c>
 8010752:	1e6b      	subs	r3, r5, #1
 8010754:	352f      	adds	r5, #47	; 0x2f

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
        tmp[i] ^= data[i];
 8010756:	7832      	ldrb	r2, [r6, #0]
 8010758:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801075c:	404a      	eors	r2, r1
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 801075e:	42ab      	cmp	r3, r5
        tmp[i] ^= data[i];
 8010760:	f806 2b01 	strb.w	r2, [r6], #1
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8010764:	d1f7      	bne.n	8010756 <ctr_drbg_update_internal+0x50>

    /*
     * Update key and counter
     */
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
 8010766:	f44f 7280 	mov.w	r2, #256	; 0x100
 801076a:	4669      	mov	r1, sp
 801076c:	4638      	mov	r0, r7
 801076e:	f7fc ff2b 	bl	800d5c8 <mbedtls_aes_setkey_enc>
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8010772:	ad0c      	add	r5, sp, #48	; 0x30
 8010774:	aa08      	add	r2, sp, #32
 8010776:	4613      	mov	r3, r2
 8010778:	cb03      	ldmia	r3!, {r0, r1}
 801077a:	42ab      	cmp	r3, r5
 801077c:	6020      	str	r0, [r4, #0]
 801077e:	6061      	str	r1, [r4, #4]
 8010780:	461a      	mov	r2, r3
 8010782:	f104 0408 	add.w	r4, r4, #8
 8010786:	d1f6      	bne.n	8010776 <ctr_drbg_update_internal+0x70>

    return( 0 );
}
 8010788:	2000      	movs	r0, #0
 801078a:	b00c      	add	sp, #48	; 0x30
 801078c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010790 <mbedtls_ctr_drbg_free.part.0>:
void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
 8010790:	b510      	push	{r4, lr}
 8010792:	4604      	mov	r4, r0
    mbedtls_aes_free( &ctx->aes_ctx );
 8010794:	3020      	adds	r0, #32
 8010796:	f7fc ff0c 	bl	800d5b2 <mbedtls_aes_free>
static void mbedtls_zeroize( void *v, size_t n ) {
 801079a:	f504 73a0 	add.w	r3, r4, #320	; 0x140
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801079e:	2200      	movs	r2, #0
 80107a0:	429c      	cmp	r4, r3
 80107a2:	d100      	bne.n	80107a6 <mbedtls_ctr_drbg_free.part.0+0x16>
}
 80107a4:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80107a6:	f804 2b01 	strb.w	r2, [r4], #1
 80107aa:	e7f9      	b.n	80107a0 <mbedtls_ctr_drbg_free.part.0+0x10>

080107ac <mbedtls_ctr_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 80107ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80107b0:	2100      	movs	r1, #0
 80107b2:	f011 be41 	b.w	8022438 <memset>

080107b6 <mbedtls_ctr_drbg_free>:
    if( ctx == NULL )
 80107b6:	b108      	cbz	r0, 80107bc <mbedtls_ctr_drbg_free+0x6>
 80107b8:	f7ff bfea 	b.w	8010790 <mbedtls_ctr_drbg_free.part.0>
}
 80107bc:	4770      	bx	lr

080107be <mbedtls_ctr_drbg_reseed>:
    }
}

int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 80107be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80107c2:	6985      	ldr	r5, [r0, #24]
 80107c4:	f5b5 7fc0 	cmp.w	r5, #384	; 0x180
{
 80107c8:	b0e0      	sub	sp, #384	; 0x180
 80107ca:	4604      	mov	r4, r0
 80107cc:	4688      	mov	r8, r1
 80107ce:	4616      	mov	r6, r2
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80107d0:	d82d      	bhi.n	801082e <mbedtls_ctr_drbg_reseed+0x70>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 80107d2:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d329      	bcc.n	801082e <mbedtls_ctr_drbg_reseed+0x70>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 80107da:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80107de:	2100      	movs	r1, #0
 80107e0:	4668      	mov	r0, sp
 80107e2:	f011 fe29 	bl	8022438 <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 80107e6:	462a      	mov	r2, r5
 80107e8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 80107ec:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 80107f0:	4669      	mov	r1, sp
 80107f2:	4798      	blx	r3
 80107f4:	4605      	mov	r5, r0
 80107f6:	b9e8      	cbnz	r0, 8010834 <mbedtls_ctr_drbg_reseed+0x76>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
    }

    seedlen += ctx->entropy_len;
 80107f8:	69a7      	ldr	r7, [r4, #24]

    /*
     * Add additional data
     */
    if( additional && len )
 80107fa:	f1b8 0f00 	cmp.w	r8, #0
 80107fe:	d007      	beq.n	8010810 <mbedtls_ctr_drbg_reseed+0x52>
 8010800:	b136      	cbz	r6, 8010810 <mbedtls_ctr_drbg_reseed+0x52>
    {
        memcpy( seed + seedlen, additional, len );
 8010802:	eb0d 0007 	add.w	r0, sp, r7
 8010806:	4632      	mov	r2, r6
 8010808:	4641      	mov	r1, r8
 801080a:	f011 fded 	bl	80223e8 <memcpy>
        seedlen += len;
 801080e:	4437      	add	r7, r6
    }

    /*
     * Reduce to 384 bits
     */
    block_cipher_df( seed, seed, seedlen );
 8010810:	463a      	mov	r2, r7
 8010812:	4669      	mov	r1, sp
 8010814:	4668      	mov	r0, sp
 8010816:	f7ff feed 	bl	80105f4 <block_cipher_df>

    /*
     * Update state
     */
    ctr_drbg_update_internal( ctx, seed );
 801081a:	4669      	mov	r1, sp
 801081c:	4620      	mov	r0, r4
 801081e:	f7ff ff72 	bl	8010706 <ctr_drbg_update_internal>
    ctx->reseed_counter = 1;
 8010822:	2301      	movs	r3, #1
 8010824:	6123      	str	r3, [r4, #16]

    return( 0 );
}
 8010826:	4628      	mov	r0, r5
 8010828:	b060      	add	sp, #384	; 0x180
 801082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 801082e:	f06f 0537 	mvn.w	r5, #55	; 0x37
 8010832:	e7f8      	b.n	8010826 <mbedtls_ctr_drbg_reseed+0x68>
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 8010834:	f06f 0533 	mvn.w	r5, #51	; 0x33
 8010838:	e7f5      	b.n	8010826 <mbedtls_ctr_drbg_reseed+0x68>

0801083a <mbedtls_ctr_drbg_seed_entropy_len>:
{
 801083a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801083c:	b08b      	sub	sp, #44	; 0x2c
 801083e:	4604      	mov	r4, r0
 8010840:	460f      	mov	r7, r1
 8010842:	4616      	mov	r6, r2
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 8010844:	2100      	movs	r1, #0
 8010846:	2220      	movs	r2, #32
 8010848:	a802      	add	r0, sp, #8
{
 801084a:	461d      	mov	r5, r3
    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 801084c:	f011 fdf4 	bl	8022438 <memset>
    mbedtls_aes_init( &ctx->aes_ctx );
 8010850:	f104 0020 	add.w	r0, r4, #32
 8010854:	9001      	str	r0, [sp, #4]
 8010856:	f7fc fea7 	bl	800d5a8 <mbedtls_aes_init>
    ctx->entropy_len = entropy_len;
 801085a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801085c:	61a3      	str	r3, [r4, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 801085e:	f242 7310 	movw	r3, #10000	; 0x2710
 8010862:	61e3      	str	r3, [r4, #28]
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 8010864:	a902      	add	r1, sp, #8
    ctx->p_entropy = p_entropy;
 8010866:	e9c4 764e 	strd	r7, r6, [r4, #312]	; 0x138
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS );
 801086a:	9801      	ldr	r0, [sp, #4]
 801086c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010870:	f7fc feaa 	bl	800d5c8 <mbedtls_aes_setkey_enc>
    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 8010874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010876:	4629      	mov	r1, r5
 8010878:	4620      	mov	r0, r4
 801087a:	f7ff ffa0 	bl	80107be <mbedtls_ctr_drbg_reseed>
}
 801087e:	b00b      	add	sp, #44	; 0x2c
 8010880:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010882 <mbedtls_ctr_drbg_seed>:
{
 8010882:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 8010884:	2430      	movs	r4, #48	; 0x30
 8010886:	9401      	str	r4, [sp, #4]
 8010888:	9c04      	ldr	r4, [sp, #16]
 801088a:	9400      	str	r4, [sp, #0]
 801088c:	f7ff ffd5 	bl	801083a <mbedtls_ctr_drbg_seed_entropy_len>
}
 8010890:	b002      	add	sp, #8
 8010892:	bd10      	pop	{r4, pc}

08010894 <mbedtls_ctr_drbg_random_with_add>:

int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 8010894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010898:	b090      	sub	sp, #64	; 0x40
    unsigned char *p = output;
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 801089a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
{
 801089e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80108a2:	4604      	mov	r4, r0
 80108a4:	460e      	mov	r6, r1
 80108a6:	4615      	mov	r5, r2
 80108a8:	461f      	mov	r7, r3
    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 80108aa:	d84d      	bhi.n	8010948 <mbedtls_ctr_drbg_random_with_add+0xb4>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 80108ac:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 80108b0:	d84d      	bhi.n	801094e <mbedtls_ctr_drbg_random_with_add+0xba>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 80108b2:	2230      	movs	r2, #48	; 0x30
 80108b4:	2100      	movs	r1, #0
 80108b6:	a804      	add	r0, sp, #16
 80108b8:	f011 fdbe 	bl	8022438 <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 80108bc:	6922      	ldr	r2, [r4, #16]
 80108be:	69e3      	ldr	r3, [r4, #28]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	dc01      	bgt.n	80108c8 <mbedtls_ctr_drbg_random_with_add+0x34>
 80108c4:	6963      	ldr	r3, [r4, #20]
 80108c6:	b143      	cbz	r3, 80108da <mbedtls_ctr_drbg_random_with_add+0x46>
        ctx->prediction_resistance )
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 80108c8:	4642      	mov	r2, r8
 80108ca:	4639      	mov	r1, r7
 80108cc:	4620      	mov	r0, r4
 80108ce:	f7ff ff76 	bl	80107be <mbedtls_ctr_drbg_reseed>
 80108d2:	b170      	cbz	r0, 80108f2 <mbedtls_ctr_drbg_random_with_add+0x5e>
    ctr_drbg_update_internal( ctx, add_input );

    ctx->reseed_counter++;

    return( 0 );
}
 80108d4:	b010      	add	sp, #64	; 0x40
 80108d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( add_len > 0 )
 80108da:	f1b8 0f00 	cmp.w	r8, #0
 80108de:	d008      	beq.n	80108f2 <mbedtls_ctr_drbg_random_with_add+0x5e>
        block_cipher_df( add_input, additional, add_len );
 80108e0:	4639      	mov	r1, r7
 80108e2:	4642      	mov	r2, r8
 80108e4:	a804      	add	r0, sp, #16
 80108e6:	f7ff fe85 	bl	80105f4 <block_cipher_df>
        ctr_drbg_update_internal( ctx, add_input );
 80108ea:	a904      	add	r1, sp, #16
 80108ec:	4620      	mov	r0, r4
 80108ee:	f7ff ff0a 	bl	8010706 <ctr_drbg_update_internal>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 80108f2:	f104 0720 	add.w	r7, r4, #32
    while( output_len > 0 )
 80108f6:	b945      	cbnz	r5, 801090a <mbedtls_ctr_drbg_random_with_add+0x76>
    ctr_drbg_update_internal( ctx, add_input );
 80108f8:	a904      	add	r1, sp, #16
 80108fa:	4620      	mov	r0, r4
 80108fc:	f7ff ff03 	bl	8010706 <ctr_drbg_update_internal>
    ctx->reseed_counter++;
 8010900:	6923      	ldr	r3, [r4, #16]
 8010902:	3301      	adds	r3, #1
 8010904:	6123      	str	r3, [r4, #16]
    return( 0 );
 8010906:	4628      	mov	r0, r5
 8010908:	e7e4      	b.n	80108d4 <mbedtls_ctr_drbg_random_with_add+0x40>
 801090a:	f104 020f 	add.w	r2, r4, #15
            if( ++ctx->counter[i - 1] != 0 )
 801090e:	7813      	ldrb	r3, [r2, #0]
 8010910:	3301      	adds	r3, #1
 8010912:	b2db      	uxtb	r3, r3
 8010914:	4611      	mov	r1, r2
 8010916:	f802 3901 	strb.w	r3, [r2], #-1
 801091a:	b90b      	cbnz	r3, 8010920 <mbedtls_ctr_drbg_random_with_add+0x8c>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 801091c:	42a1      	cmp	r1, r4
 801091e:	d1f6      	bne.n	801090e <mbedtls_ctr_drbg_random_with_add+0x7a>
        mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp );
 8010920:	466b      	mov	r3, sp
 8010922:	4622      	mov	r2, r4
 8010924:	2101      	movs	r1, #1
 8010926:	4638      	mov	r0, r7
 8010928:	f7fd fb55 	bl	800dfd6 <mbedtls_aes_crypt_ecb>
        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 801092c:	2d10      	cmp	r5, #16
 801092e:	46a8      	mov	r8, r5
 8010930:	bf28      	it	cs
 8010932:	f04f 0810 	movcs.w	r8, #16
        memcpy( p, tmp, use_len );
 8010936:	4630      	mov	r0, r6
 8010938:	4642      	mov	r2, r8
 801093a:	4669      	mov	r1, sp
 801093c:	f011 fd54 	bl	80223e8 <memcpy>
        p += use_len;
 8010940:	4446      	add	r6, r8
        output_len -= use_len;
 8010942:	eba5 0508 	sub.w	r5, r5, r8
 8010946:	e7d6      	b.n	80108f6 <mbedtls_ctr_drbg_random_with_add+0x62>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8010948:	f06f 0035 	mvn.w	r0, #53	; 0x35
 801094c:	e7c2      	b.n	80108d4 <mbedtls_ctr_drbg_random_with_add+0x40>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 801094e:	f06f 0037 	mvn.w	r0, #55	; 0x37
 8010952:	e7bf      	b.n	80108d4 <mbedtls_ctr_drbg_random_with_add+0x40>

08010954 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 8010954:	b507      	push	{r0, r1, r2, lr}
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8010956:	2300      	movs	r3, #0
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	f7ff ff9b 	bl	8010894 <mbedtls_ctr_drbg_random_with_add>
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 801095e:	b003      	add	sp, #12
 8010960:	f85d fb04 	ldr.w	pc, [sp], #4

08010964 <debug_send_line.isra.0>:
}

/*
 * All calls to f_dbg must be made via this function
 */
static inline void debug_send_line( const mbedtls_ssl_context *ssl, int level,
 8010964:	b410      	push	{r4}
#if defined(MBEDTLS_THREADING_C)
    char idstr[20 + DEBUG_BUF_SIZE]; /* 0x + 16 nibbles + ': ' */
    mbedtls_snprintf( idstr, sizeof( idstr ), "%p: %s", (void*)ssl, str );
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, idstr );
#else
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8010966:	e9d0 4004 	ldrd	r4, r0, [r0, #16]
 801096a:	46a4      	mov	ip, r4
#endif
}
 801096c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ssl->conf->f_dbg( ssl->conf->p_dbg, level, file, line, str );
 8010970:	4760      	bx	ip
	...

08010974 <mbedtls_debug_print_mpi.part.0>:
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
}
#endif /* MBEDTLS_ECP_C */

#if defined(MBEDTLS_BIGNUM_C)
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 8010974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010978:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 801097c:	4698      	mov	r8, r3
 801097e:	f8dd 9244 	ldr.w	r9, [sp, #580]	; 0x244
 8010982:	9003      	str	r0, [sp, #12]
    size_t i, n, idx = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
        return;

    for( n = X->n - 1; n > 0; n-- )
 8010984:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8010988:	f8d9 3008 	ldr.w	r3, [r9, #8]
void mbedtls_debug_print_mpi( const mbedtls_ssl_context *ssl, int level,
 801098c:	460e      	mov	r6, r1
 801098e:	4617      	mov	r7, r2
    for( n = X->n - 1; n > 0; n-- )
 8010990:	3d01      	subs	r5, #1
 8010992:	2d00      	cmp	r5, #0
 8010994:	d13e      	bne.n	8010a14 <mbedtls_debug_print_mpi.part.0+0xa0>
        if( X->p[n] != 0 )
            break;

    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 8010996:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 801099a:	231f      	movs	r3, #31
 801099c:	fa22 f103 	lsr.w	r1, r2, r3
 80109a0:	07c9      	lsls	r1, r1, #31
 80109a2:	d401      	bmi.n	80109a8 <mbedtls_debug_print_mpi.part.0+0x34>
    for( j = ( sizeof(mbedtls_mpi_uint) << 3 ) - 1; j >= 0; j-- )
 80109a4:	3b01      	subs	r3, #1
 80109a6:	d2f9      	bcs.n	801099c <mbedtls_debug_print_mpi.part.0+0x28>
            break;

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 80109a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 80109ac:	f10d 0a18 	add.w	sl, sp, #24
              text, (int) ( ( n * ( sizeof(mbedtls_mpi_uint) << 3 ) ) + j + 1 ) );
 80109b0:	3301      	adds	r3, #1
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "value of '%s' (%d bits) is:\n",
 80109b2:	4a3f      	ldr	r2, [pc, #252]	; (8010ab0 <mbedtls_debug_print_mpi.part.0+0x13c>)
 80109b4:	9300      	str	r3, [sp, #0]
 80109b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109ba:	9b90      	ldr	r3, [sp, #576]	; 0x240
 80109bc:	4650      	mov	r0, sl
 80109be:	f012 ff29 	bl	8023814 <sniprintf>

    debug_send_line( ssl, level, file, line, str );
 80109c2:	9803      	ldr	r0, [sp, #12]
 80109c4:	f8cd a000 	str.w	sl, [sp]
 80109c8:	4643      	mov	r3, r8
 80109ca:	6800      	ldr	r0, [r0, #0]
 80109cc:	463a      	mov	r2, r7
 80109ce:	4631      	mov	r1, r6

    idx = 0;
 80109d0:	2400      	movs	r4, #0
    debug_send_line( ssl, level, file, line, str );
 80109d2:	f7ff ffc7 	bl	8010964 <debug_send_line.isra.0>
    int j, k, zeros = 1;
 80109d6:	2301      	movs	r3, #1
    for( i = n + 1, j = 0; i > 0; i-- )
 80109d8:	9402      	str	r4, [sp, #8]
 80109da:	1c6a      	adds	r2, r5, #1
 80109dc:	d120      	bne.n	8010a20 <mbedtls_debug_print_mpi.part.0+0xac>
            j++;
        }

    }

    if( zeros == 1 )
 80109de:	ad06      	add	r5, sp, #24
 80109e0:	b133      	cbz	r3, 80109f0 <mbedtls_debug_print_mpi.part.0+0x7c>
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " 00" );
 80109e2:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80109e6:	1928      	adds	r0, r5, r4
 80109e8:	4a32      	ldr	r2, [pc, #200]	; (8010ab4 <mbedtls_debug_print_mpi.part.0+0x140>)
 80109ea:	f012 ff13 	bl	8023814 <sniprintf>
 80109ee:	3403      	adds	r4, #3

    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 80109f0:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 80109f4:	4a30      	ldr	r2, [pc, #192]	; (8010ab8 <mbedtls_debug_print_mpi.part.0+0x144>)
 80109f6:	1928      	adds	r0, r5, r4
 80109f8:	f012 ff0c 	bl	8023814 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 80109fc:	9803      	ldr	r0, [sp, #12]
 80109fe:	9500      	str	r5, [sp, #0]
 8010a00:	6800      	ldr	r0, [r0, #0]
 8010a02:	4643      	mov	r3, r8
 8010a04:	463a      	mov	r2, r7
 8010a06:	4631      	mov	r1, r6
 8010a08:	f7ff ffac 	bl	8010964 <debug_send_line.isra.0>
}
 8010a0c:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8010a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( X->p[n] != 0 )
 8010a14:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8010a18:	2a00      	cmp	r2, #0
 8010a1a:	d1bc      	bne.n	8010996 <mbedtls_debug_print_mpi.part.0+0x22>
    for( n = X->n - 1; n > 0; n-- )
 8010a1c:	3d01      	subs	r5, #1
 8010a1e:	e7b8      	b.n	8010992 <mbedtls_debug_print_mpi.part.0+0x1e>
        if( zeros && X->p[i - 1] == 0 )
 8010a20:	00aa      	lsls	r2, r5, #2
 8010a22:	9204      	str	r2, [sp, #16]
 8010a24:	b12b      	cbz	r3, 8010a32 <mbedtls_debug_print_mpi.part.0+0xbe>
 8010a26:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8010a2a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010a2e:	2a00      	cmp	r2, #0
 8010a30:	d03b      	beq.n	8010aaa <mbedtls_debug_print_mpi.part.0+0x136>
        if( ( ( X->p[n] >> j ) & 1 ) != 0 )
 8010a32:	f04f 0b18 	mov.w	fp, #24
            if( zeros && ( ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF ) == 0 )
 8010a36:	b143      	cbz	r3, 8010a4a <mbedtls_debug_print_mpi.part.0+0xd6>
 8010a38:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8010a3c:	9904      	ldr	r1, [sp, #16]
 8010a3e:	5852      	ldr	r2, [r2, r1]
 8010a40:	fa22 f20b 	lsr.w	r2, r2, fp
 8010a44:	f012 0fff 	tst.w	r2, #255	; 0xff
 8010a48:	d02a      	beq.n	8010aa0 <mbedtls_debug_print_mpi.part.0+0x12c>
            if( j % 16 == 0 )
 8010a4a:	9b02      	ldr	r3, [sp, #8]
 8010a4c:	f013 030f 	ands.w	r3, r3, #15
 8010a50:	9305      	str	r3, [sp, #20]
 8010a52:	d112      	bne.n	8010a7a <mbedtls_debug_print_mpi.part.0+0x106>
                if( j > 0 )
 8010a54:	9b02      	ldr	r3, [sp, #8]
 8010a56:	b183      	cbz	r3, 8010a7a <mbedtls_debug_print_mpi.part.0+0x106>
                    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "\n" );
 8010a58:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a5c:	4a16      	ldr	r2, [pc, #88]	; (8010ab8 <mbedtls_debug_print_mpi.part.0+0x144>)
 8010a5e:	eb0a 0004 	add.w	r0, sl, r4
 8010a62:	f012 fed7 	bl	8023814 <sniprintf>
                    debug_send_line( ssl, level, file, line, str );
 8010a66:	9803      	ldr	r0, [sp, #12]
 8010a68:	f8cd a000 	str.w	sl, [sp]
 8010a6c:	6800      	ldr	r0, [r0, #0]
 8010a6e:	4643      	mov	r3, r8
 8010a70:	463a      	mov	r2, r7
 8010a72:	4631      	mov	r1, r6
 8010a74:	f7ff ff76 	bl	8010964 <debug_send_line.isra.0>
                    idx = 0;
 8010a78:	9c05      	ldr	r4, [sp, #20]
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8010a7a:	9a04      	ldr	r2, [sp, #16]
 8010a7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010a80:	589b      	ldr	r3, [r3, r2]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010a82:	4a0e      	ldr	r2, [pc, #56]	; (8010abc <mbedtls_debug_print_mpi.part.0+0x148>)
                             ( X->p[i - 1] >> ( k << 3 ) ) & 0xFF );
 8010a84:	fa23 f30b 	lsr.w	r3, r3, fp
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010a88:	a806      	add	r0, sp, #24
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010a90:	4420      	add	r0, r4
 8010a92:	f012 febf 	bl	8023814 <sniprintf>
            j++;
 8010a96:	9b02      	ldr	r3, [sp, #8]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	9302      	str	r3, [sp, #8]
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x", (unsigned int)
 8010a9c:	4404      	add	r4, r0
                zeros = 0;
 8010a9e:	2300      	movs	r3, #0
        for( k = sizeof( mbedtls_mpi_uint ) - 1; k >= 0; k-- )
 8010aa0:	f1ab 0b08 	sub.w	fp, fp, #8
 8010aa4:	f11b 0f08 	cmn.w	fp, #8
 8010aa8:	d1c5      	bne.n	8010a36 <mbedtls_debug_print_mpi.part.0+0xc2>
    for( i = n + 1, j = 0; i > 0; i-- )
 8010aaa:	3d01      	subs	r5, #1
 8010aac:	e795      	b.n	80109da <mbedtls_debug_print_mpi.part.0+0x66>
 8010aae:	bf00      	nop
 8010ab0:	0803003e 	.word	0x0803003e
 8010ab4:	08030061 	.word	0x08030061
 8010ab8:	0803064d 	.word	0x0803064d
 8010abc:	0803005b 	.word	0x0803005b

08010ac0 <mbedtls_debug_set_threshold>:
    debug_threshold = threshold;
 8010ac0:	4b01      	ldr	r3, [pc, #4]	; (8010ac8 <mbedtls_debug_set_threshold+0x8>)
 8010ac2:	6018      	str	r0, [r3, #0]
}
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	200010c0 	.word	0x200010c0

08010acc <mbedtls_debug_print_msg>:
{
 8010acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ad0:	460f      	mov	r7, r1
 8010ad2:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8010ad6:	4690      	mov	r8, r2
 8010ad8:	4699      	mov	r9, r3
    if( NULL == ssl || NULL == ssl->conf || NULL == ssl->conf->f_dbg || level > debug_threshold )
 8010ada:	4606      	mov	r6, r0
 8010adc:	b1f8      	cbz	r0, 8010b1e <mbedtls_debug_print_msg+0x52>
 8010ade:	6803      	ldr	r3, [r0, #0]
 8010ae0:	b1eb      	cbz	r3, 8010b1e <mbedtls_debug_print_msg+0x52>
 8010ae2:	691b      	ldr	r3, [r3, #16]
 8010ae4:	b1db      	cbz	r3, 8010b1e <mbedtls_debug_print_msg+0x52>
 8010ae6:	4b10      	ldr	r3, [pc, #64]	; (8010b28 <mbedtls_debug_print_msg+0x5c>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	428b      	cmp	r3, r1
 8010aec:	db17      	blt.n	8010b1e <mbedtls_debug_print_msg+0x52>
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010aee:	ad04      	add	r5, sp, #16
    va_start( argp, format );
 8010af0:	ab8d      	add	r3, sp, #564	; 0x234
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010af2:	9a8c      	ldr	r2, [sp, #560]	; 0x230
    va_start( argp, format );
 8010af4:	9303      	str	r3, [sp, #12]
    ret = vsnprintf( str, DEBUG_BUF_SIZE, format, argp );
 8010af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010afa:	4628      	mov	r0, r5
 8010afc:	f014 f920 	bl	8024d40 <vsniprintf>
    if( ret >= 0 && ret < DEBUG_BUF_SIZE - 1 )
 8010b00:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
 8010b04:	d804      	bhi.n	8010b10 <mbedtls_debug_print_msg+0x44>
        str[ret]     = '\n';
 8010b06:	230a      	movs	r3, #10
        str[ret + 1] = '\0';
 8010b08:	182c      	adds	r4, r5, r0
        str[ret]     = '\n';
 8010b0a:	542b      	strb	r3, [r5, r0]
        str[ret + 1] = '\0';
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	7063      	strb	r3, [r4, #1]
    debug_send_line( ssl, level, file, line, str );
 8010b10:	9500      	str	r5, [sp, #0]
 8010b12:	6830      	ldr	r0, [r6, #0]
 8010b14:	464b      	mov	r3, r9
 8010b16:	4642      	mov	r2, r8
 8010b18:	4639      	mov	r1, r7
 8010b1a:	f7ff ff23 	bl	8010964 <debug_send_line.isra.0>
}
 8010b1e:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 8010b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b26:	bf00      	nop
 8010b28:	200010c0 	.word	0x200010c0

08010b2c <mbedtls_debug_print_ret>:
{
 8010b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b30:	4616      	mov	r6, r2
 8010b32:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010b36:	6802      	ldr	r2, [r0, #0]
{
 8010b38:	461f      	mov	r7, r3
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	9b89      	ldr	r3, [sp, #548]	; 0x224
 8010b3e:	460d      	mov	r5, r1
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010b40:	b1e2      	cbz	r2, 8010b7c <mbedtls_debug_print_ret+0x50>
 8010b42:	6912      	ldr	r2, [r2, #16]
 8010b44:	b1d2      	cbz	r2, 8010b7c <mbedtls_debug_print_ret+0x50>
 8010b46:	4a0f      	ldr	r2, [pc, #60]	; (8010b84 <mbedtls_debug_print_ret+0x58>)
 8010b48:	6812      	ldr	r2, [r2, #0]
 8010b4a:	428a      	cmp	r2, r1
 8010b4c:	db16      	blt.n	8010b7c <mbedtls_debug_print_ret+0x50>
    if( ret == MBEDTLS_ERR_SSL_WANT_READ )
 8010b4e:	f513 4fd2 	cmn.w	r3, #26880	; 0x6900
 8010b52:	d013      	beq.n	8010b7c <mbedtls_debug_print_ret+0x50>
    mbedtls_snprintf( str, sizeof( str ), "%s() returned %d (-0x%04x)\n",
 8010b54:	425a      	negs	r2, r3
 8010b56:	f10d 0808 	add.w	r8, sp, #8
 8010b5a:	e9cd 3200 	strd	r3, r2, [sp]
 8010b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010b62:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8010b64:	4a08      	ldr	r2, [pc, #32]	; (8010b88 <mbedtls_debug_print_ret+0x5c>)
 8010b66:	4640      	mov	r0, r8
 8010b68:	f012 fe54 	bl	8023814 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010b6c:	6820      	ldr	r0, [r4, #0]
 8010b6e:	f8cd 8000 	str.w	r8, [sp]
 8010b72:	463b      	mov	r3, r7
 8010b74:	4632      	mov	r2, r6
 8010b76:	4629      	mov	r1, r5
 8010b78:	f7ff fef4 	bl	8010964 <debug_send_line.isra.0>
}
 8010b7c:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8010b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b84:	200010c0 	.word	0x200010c0
 8010b88:	08030065 	.word	0x08030065

08010b8c <mbedtls_debug_print_buf>:
{
 8010b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	469a      	mov	sl, r3
 8010b92:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010b96:	6803      	ldr	r3, [r0, #0]
{
 8010b98:	f8dd 8258 	ldr.w	r8, [sp, #600]	; 0x258
 8010b9c:	4606      	mov	r6, r0
 8010b9e:	460f      	mov	r7, r1
 8010ba0:	4691      	mov	r9, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d03e      	beq.n	8010c24 <mbedtls_debug_print_buf+0x98>
 8010ba6:	691b      	ldr	r3, [r3, #16]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d03b      	beq.n	8010c24 <mbedtls_debug_print_buf+0x98>
 8010bac:	4b42      	ldr	r3, [pc, #264]	; (8010cb8 <mbedtls_debug_print_buf+0x12c>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	428b      	cmp	r3, r1
 8010bb2:	db37      	blt.n	8010c24 <mbedtls_debug_print_buf+0x98>
    mbedtls_snprintf( str + idx, sizeof( str ) - idx, "dumping '%s' (%u bytes)\n",
 8010bb4:	ac0a      	add	r4, sp, #40	; 0x28
 8010bb6:	9b94      	ldr	r3, [sp, #592]	; 0x250
 8010bb8:	4a40      	ldr	r2, [pc, #256]	; (8010cbc <mbedtls_debug_print_buf+0x130>)
 8010bba:	f8cd 8000 	str.w	r8, [sp]
 8010bbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	f012 fe26 	bl	8023814 <sniprintf>
    debug_send_line( ssl, level, file, line, str );
 8010bc8:	4653      	mov	r3, sl
 8010bca:	6830      	ldr	r0, [r6, #0]
 8010bcc:	9400      	str	r4, [sp, #0]
 8010bce:	464a      	mov	r2, r9
 8010bd0:	4639      	mov	r1, r7
 8010bd2:	f7ff fec7 	bl	8010964 <debug_send_line.isra.0>
    memset( txt, 0, sizeof( txt ) );
 8010bd6:	2211      	movs	r2, #17
 8010bd8:	2100      	movs	r1, #0
 8010bda:	a805      	add	r0, sp, #20
 8010bdc:	f011 fc2c 	bl	8022438 <memset>
    for( i = 0; i < len; i++ )
 8010be0:	9b95      	ldr	r3, [sp, #596]	; 0x254
    idx = 0;
 8010be2:	2400      	movs	r4, #0
 8010be4:	3b01      	subs	r3, #1
 8010be6:	9303      	str	r3, [sp, #12]
    for( i = 0; i < len; i++ )
 8010be8:	4625      	mov	r5, r4
 8010bea:	4545      	cmp	r5, r8
 8010bec:	d11e      	bne.n	8010c2c <mbedtls_debug_print_buf+0xa0>
    if( len > 0 )
 8010bee:	f1b8 0f00 	cmp.w	r8, #0
 8010bf2:	d017      	beq.n	8010c24 <mbedtls_debug_print_buf+0x98>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010bf4:	4d32      	ldr	r5, [pc, #200]	; (8010cc0 <mbedtls_debug_print_buf+0x134>)
        for( /* i = i */; i % 16 != 0; i++ )
 8010bf6:	ab0a      	add	r3, sp, #40	; 0x28
 8010bf8:	f018 0f0f 	tst.w	r8, #15
 8010bfc:	eb03 0004 	add.w	r0, r3, r4
 8010c00:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010c04:	d150      	bne.n	8010ca8 <mbedtls_debug_print_buf+0x11c>
        mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8010c06:	ad0a      	add	r5, sp, #40	; 0x28
 8010c08:	4a2e      	ldr	r2, [pc, #184]	; (8010cc4 <mbedtls_debug_print_buf+0x138>)
 8010c0a:	ab05      	add	r3, sp, #20
 8010c0c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010c10:	1928      	adds	r0, r5, r4
 8010c12:	f012 fdff 	bl	8023814 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8010c16:	6830      	ldr	r0, [r6, #0]
 8010c18:	9500      	str	r5, [sp, #0]
 8010c1a:	4653      	mov	r3, sl
 8010c1c:	464a      	mov	r2, r9
 8010c1e:	4639      	mov	r1, r7
 8010c20:	f7ff fea0 	bl	8010964 <debug_send_line.isra.0>
}
 8010c24:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 8010c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( i >= 4096 )
 8010c2c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010c30:	d0e9      	beq.n	8010c06 <mbedtls_debug_print_buf+0x7a>
        if( i % 16 == 0 )
 8010c32:	f015 0b0f 	ands.w	fp, r5, #15
 8010c36:	d11f      	bne.n	8010c78 <mbedtls_debug_print_buf+0xec>
            if( i > 0 )
 8010c38:	b1ad      	cbz	r5, 8010c66 <mbedtls_debug_print_buf+0xda>
                mbedtls_snprintf( str + idx, sizeof( str ) - idx, "  %s\n", txt );
 8010c3a:	a80a      	add	r0, sp, #40	; 0x28
 8010c3c:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010c40:	4a20      	ldr	r2, [pc, #128]	; (8010cc4 <mbedtls_debug_print_buf+0x138>)
 8010c42:	ab05      	add	r3, sp, #20
 8010c44:	4420      	add	r0, r4
 8010c46:	f012 fde5 	bl	8023814 <sniprintf>
                debug_send_line( ssl, level, file, line, str );
 8010c4a:	ab0a      	add	r3, sp, #40	; 0x28
 8010c4c:	6830      	ldr	r0, [r6, #0]
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	464a      	mov	r2, r9
 8010c52:	4653      	mov	r3, sl
 8010c54:	4639      	mov	r1, r7
 8010c56:	f7ff fe85 	bl	8010964 <debug_send_line.isra.0>
                memset( txt, 0, sizeof( txt ) );
 8010c5a:	2211      	movs	r2, #17
 8010c5c:	4659      	mov	r1, fp
 8010c5e:	a805      	add	r0, sp, #20
 8010c60:	f011 fbea 	bl	8022438 <memset>
                idx = 0;
 8010c64:	465c      	mov	r4, fp
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "%04x: ",
 8010c66:	a80a      	add	r0, sp, #40	; 0x28
 8010c68:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010c6c:	4420      	add	r0, r4
 8010c6e:	4a16      	ldr	r2, [pc, #88]	; (8010cc8 <mbedtls_debug_print_buf+0x13c>)
 8010c70:	462b      	mov	r3, r5
 8010c72:	f012 fdcf 	bl	8023814 <sniprintf>
 8010c76:	4404      	add	r4, r0
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8010c78:	9a03      	ldr	r2, [sp, #12]
 8010c7a:	a80a      	add	r0, sp, #40	; 0x28
 8010c7c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010c80:	9203      	str	r2, [sp, #12]
 8010c82:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8010c86:	4a11      	ldr	r2, [pc, #68]	; (8010ccc <mbedtls_debug_print_buf+0x140>)
 8010c88:	4420      	add	r0, r4
 8010c8a:	f012 fdc3 	bl	8023814 <sniprintf>
        txt[i % 16] = ( buf[i] > 31 && buf[i] < 127 ) ? buf[i] : '.' ;
 8010c8e:	9b03      	ldr	r3, [sp, #12]
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	f1a3 0220 	sub.w	r2, r3, #32
 8010c96:	2a5e      	cmp	r2, #94	; 0x5e
 8010c98:	aa05      	add	r2, sp, #20
 8010c9a:	bf88      	it	hi
 8010c9c:	232e      	movhi	r3, #46	; 0x2e
 8010c9e:	f802 300b 	strb.w	r3, [r2, fp]
        idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, " %02x",
 8010ca2:	4404      	add	r4, r0
    for( i = 0; i < len; i++ )
 8010ca4:	3501      	adds	r5, #1
 8010ca6:	e7a0      	b.n	8010bea <mbedtls_debug_print_buf+0x5e>
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010ca8:	462a      	mov	r2, r5
 8010caa:	f012 fdb3 	bl	8023814 <sniprintf>
        for( /* i = i */; i % 16 != 0; i++ )
 8010cae:	f108 0801 	add.w	r8, r8, #1
            idx += mbedtls_snprintf( str + idx, sizeof( str ) - idx, "   " );
 8010cb2:	4404      	add	r4, r0
        for( /* i = i */; i % 16 != 0; i++ )
 8010cb4:	e79f      	b.n	8010bf6 <mbedtls_debug_print_buf+0x6a>
 8010cb6:	bf00      	nop
 8010cb8:	200010c0 	.word	0x200010c0
 8010cbc:	08030081 	.word	0x08030081
 8010cc0:	0802d7ca 	.word	0x0802d7ca
 8010cc4:	0803009a 	.word	0x0803009a
 8010cc8:	080300a0 	.word	0x080300a0
 8010ccc:	0803005b 	.word	0x0803005b

08010cd0 <mbedtls_debug_print_mpi>:
{
 8010cd0:	b470      	push	{r4, r5, r6}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8010cd2:	6805      	ldr	r5, [r0, #0]
{
 8010cd4:	9e04      	ldr	r6, [sp, #16]
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || X == NULL || level > debug_threshold )
 8010cd6:	b14d      	cbz	r5, 8010cec <mbedtls_debug_print_mpi+0x1c>
 8010cd8:	692d      	ldr	r5, [r5, #16]
 8010cda:	b13d      	cbz	r5, 8010cec <mbedtls_debug_print_mpi+0x1c>
 8010cdc:	b136      	cbz	r6, 8010cec <mbedtls_debug_print_mpi+0x1c>
 8010cde:	4d04      	ldr	r5, [pc, #16]	; (8010cf0 <mbedtls_debug_print_mpi+0x20>)
 8010ce0:	682d      	ldr	r5, [r5, #0]
 8010ce2:	428d      	cmp	r5, r1
 8010ce4:	db02      	blt.n	8010cec <mbedtls_debug_print_mpi+0x1c>
}
 8010ce6:	bc70      	pop	{r4, r5, r6}
 8010ce8:	f7ff be44 	b.w	8010974 <mbedtls_debug_print_mpi.part.0>
 8010cec:	bc70      	pop	{r4, r5, r6}
 8010cee:	4770      	bx	lr
 8010cf0:	200010c0 	.word	0x200010c0

08010cf4 <mbedtls_debug_print_ecp.part.0>:
void mbedtls_debug_print_ecp( const mbedtls_ssl_context *ssl, int level,
 8010cf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010cf8:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8010cfc:	e9dd 988a 	ldrd	r9, r8, [sp, #552]	; 0x228
 8010d00:	4604      	mov	r4, r0
 8010d02:	460d      	mov	r5, r1
 8010d04:	4616      	mov	r6, r2
 8010d06:	461f      	mov	r7, r3
    mbedtls_snprintf( str, sizeof( str ), "%s(X)", text );
 8010d08:	4a13      	ldr	r2, [pc, #76]	; (8010d58 <mbedtls_debug_print_ecp.part.0+0x64>)
 8010d0a:	464b      	mov	r3, r9
 8010d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d10:	a802      	add	r0, sp, #8
 8010d12:	f012 fd7f 	bl	8023814 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->X );
 8010d16:	ab02      	add	r3, sp, #8
 8010d18:	9300      	str	r3, [sp, #0]
 8010d1a:	4632      	mov	r2, r6
 8010d1c:	463b      	mov	r3, r7
 8010d1e:	4629      	mov	r1, r5
 8010d20:	4620      	mov	r0, r4
 8010d22:	f8cd 8004 	str.w	r8, [sp, #4]
 8010d26:	f7ff ffd3 	bl	8010cd0 <mbedtls_debug_print_mpi>
    mbedtls_snprintf( str, sizeof( str ), "%s(Y)", text );
 8010d2a:	464b      	mov	r3, r9
 8010d2c:	4a0b      	ldr	r2, [pc, #44]	; (8010d5c <mbedtls_debug_print_ecp.part.0+0x68>)
 8010d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d32:	a802      	add	r0, sp, #8
 8010d34:	f012 fd6e 	bl	8023814 <sniprintf>
    mbedtls_debug_print_mpi( ssl, level, file, line, str, &X->Y );
 8010d38:	f108 030c 	add.w	r3, r8, #12
 8010d3c:	9301      	str	r3, [sp, #4]
 8010d3e:	ab02      	add	r3, sp, #8
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	4632      	mov	r2, r6
 8010d44:	463b      	mov	r3, r7
 8010d46:	4629      	mov	r1, r5
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7ff ffc1 	bl	8010cd0 <mbedtls_debug_print_mpi>
}
 8010d4e:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8010d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d56:	bf00      	nop
 8010d58:	080300a7 	.word	0x080300a7
 8010d5c:	080300ad 	.word	0x080300ad

08010d60 <mbedtls_debug_print_ecp>:
{
 8010d60:	b430      	push	{r4, r5}
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || level > debug_threshold )
 8010d62:	6805      	ldr	r5, [r0, #0]
 8010d64:	b145      	cbz	r5, 8010d78 <mbedtls_debug_print_ecp+0x18>
 8010d66:	692d      	ldr	r5, [r5, #16]
 8010d68:	b135      	cbz	r5, 8010d78 <mbedtls_debug_print_ecp+0x18>
 8010d6a:	4d04      	ldr	r5, [pc, #16]	; (8010d7c <mbedtls_debug_print_ecp+0x1c>)
 8010d6c:	682d      	ldr	r5, [r5, #0]
 8010d6e:	428d      	cmp	r5, r1
 8010d70:	db02      	blt.n	8010d78 <mbedtls_debug_print_ecp+0x18>
}
 8010d72:	bc30      	pop	{r4, r5}
 8010d74:	f7ff bfbe 	b.w	8010cf4 <mbedtls_debug_print_ecp.part.0>
 8010d78:	bc30      	pop	{r4, r5}
 8010d7a:	4770      	bx	lr
 8010d7c:	200010c0 	.word	0x200010c0

08010d80 <mbedtls_debug_print_crt>:
}

void mbedtls_debug_print_crt( const mbedtls_ssl_context *ssl, int level,
                      const char *file, int line,
                      const char *text, const mbedtls_x509_crt *crt )
{
 8010d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d84:	4698      	mov	r8, r3
 8010d86:	f6ad 0d24 	subw	sp, sp, #2084	; 0x824
    char str[DEBUG_BUF_SIZE];
    int i = 0;

    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8010d8a:	6803      	ldr	r3, [r0, #0]
{
 8010d8c:	f8dd a84c 	ldr.w	sl, [sp, #2124]	; 0x84c
 8010d90:	4604      	mov	r4, r0
 8010d92:	460d      	mov	r5, r1
 8010d94:	4616      	mov	r6, r2
    if( ssl->conf == NULL || ssl->conf->f_dbg == NULL || crt == NULL || level > debug_threshold )
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d049      	beq.n	8010e2e <mbedtls_debug_print_crt+0xae>
 8010d9a:	691b      	ldr	r3, [r3, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d046      	beq.n	8010e2e <mbedtls_debug_print_crt+0xae>
 8010da0:	f1ba 0f00 	cmp.w	sl, #0
 8010da4:	d043      	beq.n	8010e2e <mbedtls_debug_print_crt+0xae>
 8010da6:	4b50      	ldr	r3, [pc, #320]	; (8010ee8 <mbedtls_debug_print_crt+0x168>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	428b      	cmp	r3, r1
 8010dac:	db3f      	blt.n	8010e2e <mbedtls_debug_print_crt+0xae>
    int i = 0;
 8010dae:	2300      	movs	r3, #0
 8010db0:	9302      	str	r3, [sp, #8]

    while( crt != NULL )
    {
        char buf[1024];

        mbedtls_snprintf( str, sizeof( str ), "%s #%d:\n", text, ++i );
 8010db2:	9b02      	ldr	r3, [sp, #8]
 8010db4:	4a4d      	ldr	r2, [pc, #308]	; (8010eec <mbedtls_debug_print_crt+0x16c>)
 8010db6:	3301      	adds	r3, #1
 8010db8:	af08      	add	r7, sp, #32
 8010dba:	9302      	str	r3, [sp, #8]
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010dc2:	f8dd 3848 	ldr.w	r3, [sp, #2120]	; 0x848
 8010dc6:	4638      	mov	r0, r7
 8010dc8:	f012 fd24 	bl	8023814 <sniprintf>
        debug_send_line( ssl, level, file, line, str );
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	9700      	str	r7, [sp, #0]
 8010dd0:	4643      	mov	r3, r8
 8010dd2:	4632      	mov	r2, r6
 8010dd4:	4629      	mov	r1, r5
 8010dd6:	f7ff fdc5 	bl	8010964 <debug_send_line.isra.0>

        mbedtls_x509_crt_info( buf, sizeof( buf ) - 1, "", crt );
 8010dda:	f50d 6784 	add.w	r7, sp, #1056	; 0x420
 8010dde:	4653      	mov	r3, sl
 8010de0:	4a43      	ldr	r2, [pc, #268]	; (8010ef0 <mbedtls_debug_print_crt+0x170>)
 8010de2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8010de6:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8010dea:	f00f fa95 	bl	8020318 <mbedtls_x509_crt_info>
    for( cur = text; *cur != '\0'; cur++ )
 8010dee:	f240 19ff 	movw	r9, #511	; 0x1ff
    start = text;
 8010df2:	463b      	mov	r3, r7
            str[len] = '\0';
 8010df4:	f04f 0b00 	mov.w	fp, #0
 8010df8:	463a      	mov	r2, r7
    for( cur = text; *cur != '\0'; cur++ )
 8010dfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010dfe:	b9d1      	cbnz	r1, 8010e36 <mbedtls_debug_print_crt+0xb6>
    memset( items, 0, sizeof( items ) );
 8010e00:	2224      	movs	r2, #36	; 0x24
 8010e02:	a888      	add	r0, sp, #544	; 0x220
 8010e04:	f011 fb18 	bl	8022438 <memset>
    if( mbedtls_pk_debug( pk, items ) != 0 )
 8010e08:	a988      	add	r1, sp, #544	; 0x220
 8010e0a:	f10a 00bc 	add.w	r0, sl, #188	; 0xbc
 8010e0e:	f004 ff3f 	bl	8015c90 <mbedtls_pk_debug>
 8010e12:	b348      	cbz	r0, 8010e68 <mbedtls_debug_print_crt+0xe8>
        debug_send_line( ssl, level, file, line,
 8010e14:	4b37      	ldr	r3, [pc, #220]	; (8010ef4 <mbedtls_debug_print_crt+0x174>)
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	6820      	ldr	r0, [r4, #0]
 8010e1a:	4643      	mov	r3, r8
 8010e1c:	4632      	mov	r2, r6
 8010e1e:	4629      	mov	r1, r5
 8010e20:	f7ff fda0 	bl	8010964 <debug_send_line.isra.0>
        debug_print_line_by_line( ssl, level, file, line, buf );

        debug_print_pk( ssl, level, file, line, "crt->", &crt->pk );

        crt = crt->next;
 8010e24:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
    while( crt != NULL )
 8010e28:	f1ba 0f00 	cmp.w	sl, #0
 8010e2c:	d1c1      	bne.n	8010db2 <mbedtls_debug_print_crt+0x32>
    }
}
 8010e2e:	f60d 0d24 	addw	sp, sp, #2084	; 0x824
 8010e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *cur == '\n' )
 8010e36:	290a      	cmp	r1, #10
 8010e38:	d1de      	bne.n	8010df8 <mbedtls_debug_print_crt+0x78>
            size_t len = cur - start + 1;
 8010e3a:	1ad2      	subs	r2, r2, r3
 8010e3c:	3201      	adds	r2, #1
            if( len > DEBUG_BUF_SIZE - 1 )
 8010e3e:	454a      	cmp	r2, r9
 8010e40:	bf28      	it	cs
 8010e42:	464a      	movcs	r2, r9
            memcpy( str, start, len );
 8010e44:	4619      	mov	r1, r3
 8010e46:	a888      	add	r0, sp, #544	; 0x220
 8010e48:	9203      	str	r2, [sp, #12]
 8010e4a:	f011 facd 	bl	80223e8 <memcpy>
            str[len] = '\0';
 8010e4e:	9a03      	ldr	r2, [sp, #12]
            debug_send_line( ssl, level, file, line, str );
 8010e50:	6820      	ldr	r0, [r4, #0]
            str[len] = '\0';
 8010e52:	ab88      	add	r3, sp, #544	; 0x220
            debug_send_line( ssl, level, file, line, str );
 8010e54:	4629      	mov	r1, r5
            str[len] = '\0';
 8010e56:	f803 b002 	strb.w	fp, [r3, r2]
            debug_send_line( ssl, level, file, line, str );
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	4632      	mov	r2, r6
 8010e5e:	4643      	mov	r3, r8
 8010e60:	f7ff fd80 	bl	8010964 <debug_send_line.isra.0>
            start = cur + 1;
 8010e64:	463b      	mov	r3, r7
    for( cur = text; *cur != '\0'; cur++ )
 8010e66:	e7c7      	b.n	8010df8 <mbedtls_debug_print_crt+0x78>
 8010e68:	f50d 7b08 	add.w	fp, sp, #544	; 0x220
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010e6c:	4681      	mov	r9, r0
        if( items[i].type == MBEDTLS_PK_DEBUG_NONE )
 8010e6e:	f89b 3000 	ldrb.w	r3, [fp]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d0d6      	beq.n	8010e24 <mbedtls_debug_print_crt+0xa4>
        mbedtls_snprintf( name, sizeof( name ), "%s%s", text, items[i].name );
 8010e76:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	af04      	add	r7, sp, #16
 8010e7e:	4b1e      	ldr	r3, [pc, #120]	; (8010ef8 <mbedtls_debug_print_crt+0x178>)
 8010e80:	4a1e      	ldr	r2, [pc, #120]	; (8010efc <mbedtls_debug_print_crt+0x17c>)
 8010e82:	2110      	movs	r1, #16
 8010e84:	4638      	mov	r0, r7
 8010e86:	f012 fcc5 	bl	8023814 <sniprintf>
        name[sizeof( name ) - 1] = '\0';
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	73fb      	strb	r3, [r7, #15]
        if( items[i].type == MBEDTLS_PK_DEBUG_MPI )
 8010e8e:	f89b 3000 	ldrb.w	r3, [fp]
 8010e92:	2b01      	cmp	r3, #1
 8010e94:	d111      	bne.n	8010eba <mbedtls_debug_print_crt+0x13a>
            mbedtls_debug_print_mpi( ssl, level, file, line, name, items[i].value );
 8010e96:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010e9a:	4632      	mov	r2, r6
 8010e9c:	e9cd 7300 	strd	r7, r3, [sp]
 8010ea0:	4629      	mov	r1, r5
 8010ea2:	4643      	mov	r3, r8
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f7ff ff13 	bl	8010cd0 <mbedtls_debug_print_mpi>
    for( i = 0; i < MBEDTLS_PK_DEBUG_MAX_ITEMS; i++ )
 8010eaa:	f109 0901 	add.w	r9, r9, #1
 8010eae:	f1b9 0f03 	cmp.w	r9, #3
 8010eb2:	f10b 0b0c 	add.w	fp, fp, #12
 8010eb6:	d1da      	bne.n	8010e6e <mbedtls_debug_print_crt+0xee>
 8010eb8:	e7b4      	b.n	8010e24 <mbedtls_debug_print_crt+0xa4>
        if( items[i].type == MBEDTLS_PK_DEBUG_ECP )
 8010eba:	2b02      	cmp	r3, #2
 8010ebc:	d10a      	bne.n	8010ed4 <mbedtls_debug_print_crt+0x154>
            mbedtls_debug_print_ecp( ssl, level, file, line, name, items[i].value );
 8010ebe:	f8db 3008 	ldr.w	r3, [fp, #8]
 8010ec2:	4632      	mov	r2, r6
 8010ec4:	e9cd 7300 	strd	r7, r3, [sp]
 8010ec8:	4629      	mov	r1, r5
 8010eca:	4643      	mov	r3, r8
 8010ecc:	4620      	mov	r0, r4
 8010ece:	f7ff ff47 	bl	8010d60 <mbedtls_debug_print_ecp>
 8010ed2:	e7ea      	b.n	8010eaa <mbedtls_debug_print_crt+0x12a>
            debug_send_line( ssl, level, file, line,
 8010ed4:	4b0a      	ldr	r3, [pc, #40]	; (8010f00 <mbedtls_debug_print_crt+0x180>)
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	6820      	ldr	r0, [r4, #0]
 8010eda:	4643      	mov	r3, r8
 8010edc:	4632      	mov	r2, r6
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f7ff fd40 	bl	8010964 <debug_send_line.isra.0>
 8010ee4:	e7e1      	b.n	8010eaa <mbedtls_debug_print_crt+0x12a>
 8010ee6:	bf00      	nop
 8010ee8:	200010c0 	.word	0x200010c0
 8010eec:	080300b3 	.word	0x080300b3
 8010ef0:	080303e5 	.word	0x080303e5
 8010ef4:	080300bc 	.word	0x080300bc
 8010ef8:	080300d0 	.word	0x080300d0
 8010efc:	080300d6 	.word	0x080300d6
 8010f00:	080300db 	.word	0x080300db

08010f04 <mbedtls_ecdh_compute_shared>:
 */
int mbedtls_ecdh_compute_shared( mbedtls_ecp_group *grp, mbedtls_mpi *z,
                         const mbedtls_ecp_point *Q, const mbedtls_mpi *d,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 8010f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f06:	b08f      	sub	sp, #60	; 0x3c
 8010f08:	4616      	mov	r6, r2
 8010f0a:	4605      	mov	r5, r0
    int ret;
    mbedtls_ecp_point P;

    mbedtls_ecp_point_init( &P );
 8010f0c:	a805      	add	r0, sp, #20
{
 8010f0e:	460f      	mov	r7, r1
 8010f10:	9303      	str	r3, [sp, #12]
    mbedtls_ecp_point_init( &P );
 8010f12:	f001 f88b 	bl	801202c <mbedtls_ecp_point_init>

    /*
     * Make sure Q is a valid pubkey before using it
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 8010f16:	4631      	mov	r1, r6
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f001 fea7 	bl	8012c6c <mbedtls_ecp_check_pubkey>
 8010f1e:	4604      	mov	r4, r0
 8010f20:	b9a0      	cbnz	r0, 8010f4c <mbedtls_ecdh_compute_shared+0x48>

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, &P, d, Q, f_rng, p_rng ) );
 8010f22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f24:	9301      	str	r3, [sp, #4]
 8010f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	9a03      	ldr	r2, [sp, #12]
 8010f2c:	4633      	mov	r3, r6
 8010f2e:	a905      	add	r1, sp, #20
 8010f30:	4628      	mov	r0, r5
 8010f32:	f001 ff7f 	bl	8012e34 <mbedtls_ecp_mul>
 8010f36:	4604      	mov	r4, r0
 8010f38:	b940      	cbnz	r0, 8010f4c <mbedtls_ecdh_compute_shared+0x48>

    if( mbedtls_ecp_is_zero( &P ) )
 8010f3a:	a805      	add	r0, sp, #20
 8010f3c:	f001 fdb0 	bl	8012aa0 <mbedtls_ecp_is_zero>
 8010f40:	b950      	cbnz	r0, 8010f58 <mbedtls_ecdh_compute_shared+0x54>
    {
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
        goto cleanup;
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( z, &P.X ) );
 8010f42:	a905      	add	r1, sp, #20
 8010f44:	4638      	mov	r0, r7
 8010f46:	f7fd fd99 	bl	800ea7c <mbedtls_mpi_copy>
 8010f4a:	4604      	mov	r4, r0

cleanup:
    mbedtls_ecp_point_free( &P );
 8010f4c:	a805      	add	r0, sp, #20
 8010f4e:	f001 f887 	bl	8012060 <mbedtls_ecp_point_free>

    return( ret );
}
 8010f52:	4620      	mov	r0, r4
 8010f54:	b00f      	add	sp, #60	; 0x3c
 8010f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010f58:	4c00      	ldr	r4, [pc, #0]	; (8010f5c <mbedtls_ecdh_compute_shared+0x58>)
 8010f5a:	e7f7      	b.n	8010f4c <mbedtls_ecdh_compute_shared+0x48>
 8010f5c:	ffffb080 	.word	0xffffb080

08010f60 <mbedtls_ecdh_init>:
/*
 * Initialize context
 */
void mbedtls_ecdh_init( mbedtls_ecdh_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_ecdh_context ) );
 8010f60:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010f64:	2100      	movs	r1, #0
 8010f66:	f011 ba67 	b.w	8022438 <memset>

08010f6a <mbedtls_ecdh_free>:

/*
 * Free context
 */
void mbedtls_ecdh_free( mbedtls_ecdh_context *ctx )
{
 8010f6a:	b510      	push	{r4, lr}
    if( ctx == NULL )
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	b1f8      	cbz	r0, 8010fb0 <mbedtls_ecdh_free+0x46>
        return;

    mbedtls_ecp_group_free( &ctx->grp );
 8010f70:	f001 f87a 	bl	8012068 <mbedtls_ecp_group_free>
    mbedtls_ecp_point_free( &ctx->Q   );
 8010f74:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8010f78:	f001 f872 	bl	8012060 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Qp  );
 8010f7c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8010f80:	f001 f86e 	bl	8012060 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vi  );
 8010f84:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8010f88:	f001 f86a 	bl	8012060 <mbedtls_ecp_point_free>
    mbedtls_ecp_point_free( &ctx->Vf  );
 8010f8c:	f504 7082 	add.w	r0, r4, #260	; 0x104
 8010f90:	f001 f866 	bl	8012060 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &ctx->d  );
 8010f94:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8010f98:	f7fd fcf0 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->z  );
 8010f9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010fa0:	f7fd fcec 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->_d );
 8010fa4:	f504 7094 	add.w	r0, r4, #296	; 0x128
}
 8010fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->_d );
 8010fac:	f7fd bce6 	b.w	800e97c <mbedtls_mpi_free>
}
 8010fb0:	bd10      	pop	{r4, pc}

08010fb2 <mbedtls_ecdh_read_params>:
 *          ECPoint         public;
 *      } ServerECDHParams;
 */
int mbedtls_ecdh_read_params( mbedtls_ecdh_context *ctx,
                      const unsigned char **buf, const unsigned char *end )
{
 8010fb2:	b570      	push	{r4, r5, r6, lr}
 8010fb4:	4616      	mov	r6, r2
    int ret;

    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8010fb6:	680a      	ldr	r2, [r1, #0]
 8010fb8:	1ab2      	subs	r2, r6, r2
{
 8010fba:	4605      	mov	r5, r0
 8010fbc:	460c      	mov	r4, r1
    if( ( ret = mbedtls_ecp_tls_read_group( &ctx->grp, buf, end - *buf ) ) != 0 )
 8010fbe:	f001 fe31 	bl	8012c24 <mbedtls_ecp_tls_read_group>
 8010fc2:	b948      	cbnz	r0, 8010fd8 <mbedtls_ecdh_read_params+0x26>
        return( ret );

    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 8010fc4:	6823      	ldr	r3, [r4, #0]
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	1af3      	subs	r3, r6, r3
 8010fca:	f105 01ac 	add.w	r1, r5, #172	; 0xac
 8010fce:	4628      	mov	r0, r5
                != 0 )
        return( ret );

    return( 0 );
}
 8010fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if( ( ret = mbedtls_ecp_tls_read_point( &ctx->grp, &ctx->Qp, buf, end - *buf ) )
 8010fd4:	f001 bdf6 	b.w	8012bc4 <mbedtls_ecp_tls_read_point>
}
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08010fdc <mbedtls_ecdh_make_public>:
 */
int mbedtls_ecdh_make_public( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8010fdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010fe0:	4616      	mov	r6, r2
 8010fe2:	461f      	mov	r7, r3
 8010fe4:	460d      	mov	r5, r1
 8010fe6:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL || ctx->grp.pbits == 0 )
 8010fea:	4604      	mov	r4, r0
 8010fec:	b1b0      	cbz	r0, 801101c <mbedtls_ecdh_make_public+0x40>
 8010fee:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8010ff0:	b1a1      	cbz	r1, 801101c <mbedtls_ecdh_make_public+0x40>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 8010ff2:	f100 0888 	add.w	r8, r0, #136	; 0x88
    return mbedtls_ecp_gen_keypair( grp, d, Q, f_rng, p_rng );
 8010ff6:	9200      	str	r2, [sp, #0]
 8010ff8:	f100 017c 	add.w	r1, r0, #124	; 0x7c
 8010ffc:	4642      	mov	r2, r8
 8010ffe:	f002 f803 	bl	8013008 <mbedtls_ecp_gen_keypair>
    if( ( ret = mbedtls_ecdh_gen_public( &ctx->grp, &ctx->d, &ctx->Q, f_rng, p_rng ) )
 8011002:	b960      	cbnz	r0, 801101e <mbedtls_ecdh_make_public+0x42>
                != 0 )
        return( ret );

    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 8011004:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8011008:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 801100c:	462b      	mov	r3, r5
 801100e:	4641      	mov	r1, r8
 8011010:	4620      	mov	r0, r4
                                olen, buf, blen );
}
 8011012:	b002      	add	sp, #8
 8011014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_ecp_tls_write_point( &ctx->grp, &ctx->Q, ctx->point_format,
 8011018:	f001 bdec 	b.w	8012bf4 <mbedtls_ecp_tls_write_point>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801101c:	4801      	ldr	r0, [pc, #4]	; (8011024 <mbedtls_ecdh_make_public+0x48>)
}
 801101e:	b002      	add	sp, #8
 8011020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011024:	ffffb080 	.word	0xffffb080

08011028 <mbedtls_ecdh_calc_secret>:
 */
int mbedtls_ecdh_calc_secret( mbedtls_ecdh_context *ctx, size_t *olen,
                      unsigned char *buf, size_t blen,
                      int (*f_rng)(void *, unsigned char *, size_t),
                      void *p_rng )
{
 8011028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801102c:	4616      	mov	r6, r2
 801102e:	4698      	mov	r8, r3
 8011030:	460f      	mov	r7, r1
 8011032:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
    int ret;

    if( ctx == NULL )
 8011036:	4604      	mov	r4, r0
 8011038:	b918      	cbnz	r0, 8011042 <mbedtls_ecdh_calc_secret+0x1a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801103a:	4812      	ldr	r0, [pc, #72]	; (8011084 <mbedtls_ecdh_calc_secret+0x5c>)
    if( mbedtls_mpi_size( &ctx->z ) > blen )
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
}
 801103c:	b002      	add	sp, #8
 801103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_ecdh_compute_shared( &ctx->grp, &ctx->z, &ctx->Qp, &ctx->d,
 8011042:	f100 05d0 	add.w	r5, r0, #208	; 0xd0
 8011046:	e9cd 3200 	strd	r3, r2, [sp]
 801104a:	4629      	mov	r1, r5
 801104c:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 8011050:	f100 02ac 	add.w	r2, r0, #172	; 0xac
 8011054:	f7ff ff56 	bl	8010f04 <mbedtls_ecdh_compute_shared>
 8011058:	2800      	cmp	r0, #0
 801105a:	d1ef      	bne.n	801103c <mbedtls_ecdh_calc_secret+0x14>
    if( mbedtls_mpi_size( &ctx->z ) > blen )
 801105c:	4628      	mov	r0, r5
 801105e:	f7fd fdce 	bl	800ebfe <mbedtls_mpi_size>
 8011062:	4540      	cmp	r0, r8
 8011064:	d8e9      	bhi.n	801103a <mbedtls_ecdh_calc_secret+0x12>
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8011066:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8011068:	f012 0307 	ands.w	r3, r2, #7
 801106c:	bf18      	it	ne
 801106e:	2301      	movne	r3, #1
 8011070:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8011074:	4631      	mov	r1, r6
 8011076:	4628      	mov	r0, r5
    *olen = ctx->grp.pbits / 8 + ( ( ctx->grp.pbits % 8 ) != 0 );
 8011078:	603a      	str	r2, [r7, #0]
}
 801107a:	b002      	add	sp, #8
 801107c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return mbedtls_mpi_write_binary( &ctx->z, buf, *olen );
 8011080:	f7fd bdf6 	b.w	800ec70 <mbedtls_mpi_write_binary>
 8011084:	ffffb080 	.word	0xffffb080

08011088 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 8011088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 801108a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 801108c:	3507      	adds	r5, #7
 801108e:	08ed      	lsrs	r5, r5, #3
    size_t use_size = blen > n_size ? n_size : blen;
 8011090:	429d      	cmp	r5, r3
 8011092:	462c      	mov	r4, r5
{
 8011094:	460f      	mov	r7, r1
    size_t use_size = blen > n_size ? n_size : blen;
 8011096:	bf28      	it	cs
 8011098:	461c      	movcs	r4, r3
{
 801109a:	4611      	mov	r1, r2
 801109c:	4606      	mov	r6, r0

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 801109e:	4622      	mov	r2, r4
 80110a0:	4638      	mov	r0, r7
 80110a2:	f7fd fdb2 	bl	800ec0a <mbedtls_mpi_read_binary>
 80110a6:	4605      	mov	r5, r0
 80110a8:	b9e8      	cbnz	r0, 80110e6 <derive_mpi+0x5e>
    if( use_size * 8 > grp->nbits )
 80110aa:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80110ac:	ebb3 0fc4 	cmp.w	r3, r4, lsl #3
 80110b0:	ea4f 01c4 	mov.w	r1, r4, lsl #3
 80110b4:	d310      	bcc.n	80110d8 <derive_mpi+0x50>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 80110b6:	f106 024c 	add.w	r2, r6, #76	; 0x4c
 80110ba:	4611      	mov	r1, r2
 80110bc:	4638      	mov	r0, r7
 80110be:	9201      	str	r2, [sp, #4]
 80110c0:	f7fd ff1b 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80110c4:	2800      	cmp	r0, #0
 80110c6:	db0e      	blt.n	80110e6 <derive_mpi+0x5e>
 80110c8:	9a01      	ldr	r2, [sp, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 80110ca:	4639      	mov	r1, r7
 80110cc:	4638      	mov	r0, r7

cleanup:
    return( ret );
}
 80110ce:	b003      	add	sp, #12
 80110d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 80110d4:	f7fe b822 	b.w	800f11c <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 80110d8:	1ac9      	subs	r1, r1, r3
 80110da:	4638      	mov	r0, r7
 80110dc:	f7fd fe39 	bl	800ed52 <mbedtls_mpi_shift_r>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	d0e8      	beq.n	80110b6 <derive_mpi+0x2e>
 80110e4:	4605      	mov	r5, r0
}
 80110e6:	4628      	mov	r0, r5
 80110e8:	b003      	add	sp, #12
 80110ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110ec <mbedtls_ecdsa_sign>:
 * Obviously, compared to SEC1 4.1.3, we skip step 4 (hash message)
 */
int mbedtls_ecdsa_sign( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80110ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f0:	ed2d 8b02 	vpush	{d8}
 80110f4:	ee08 3a10 	vmov	s16, r3
    int ret, key_tries, sign_tries, blind_tries;
    mbedtls_ecp_point R;
    mbedtls_mpi k, e, t;

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 80110f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 80110fa:	b097      	sub	sp, #92	; 0x5c
 80110fc:	4605      	mov	r5, r0
 80110fe:	4688      	mov	r8, r1
 8011100:	4614      	mov	r4, r2
    if( grp->N.p == NULL )
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 80af 	beq.w	8011266 <mbedtls_ecdsa_sign+0x17a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_ecp_point_init( &R );
 8011108:	a80d      	add	r0, sp, #52	; 0x34
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 801110a:	ae04      	add	r6, sp, #16
    mbedtls_ecp_point_init( &R );
 801110c:	f000 ff8e 	bl	801202c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 8011110:	4630      	mov	r0, r6
 8011112:	f7fd fc2c 	bl	800e96e <mbedtls_mpi_init>
 8011116:	a807      	add	r0, sp, #28
 8011118:	f7fd fc29 	bl	800e96e <mbedtls_mpi_init>
 801111c:	a80a      	add	r0, sp, #40	; 0x28
 801111e:	f7fd fc26 	bl	800e96e <mbedtls_mpi_init>
 8011122:	f04f 0a0c 	mov.w	sl, #12
         */
        key_tries = 0;
        do
        {
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 8011126:	f105 094c 	add.w	r9, r5, #76	; 0x4c
    mbedtls_mpi_init( &k ); mbedtls_mpi_init( &e ); mbedtls_mpi_init( &t );
 801112a:	270c      	movs	r7, #12
            MBEDTLS_MPI_CHK( mbedtls_ecp_gen_keypair( grp, &k, &R, f_rng, p_rng ) );
 801112c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801112e:	9300      	str	r3, [sp, #0]
 8011130:	4631      	mov	r1, r6
 8011132:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011134:	aa0d      	add	r2, sp, #52	; 0x34
 8011136:	4628      	mov	r0, r5
 8011138:	f001 ff66 	bl	8013008 <mbedtls_ecp_gen_keypair>
 801113c:	4601      	mov	r1, r0
 801113e:	2800      	cmp	r0, #0
 8011140:	d17b      	bne.n	801123a <mbedtls_ecdsa_sign+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( r, &R.X, &grp->N ) );
 8011142:	a90d      	add	r1, sp, #52	; 0x34
 8011144:	464a      	mov	r2, r9
 8011146:	4640      	mov	r0, r8
 8011148:	f7fe fa4f 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 801114c:	4601      	mov	r1, r0
 801114e:	2800      	cmp	r0, #0
 8011150:	d173      	bne.n	801123a <mbedtls_ecdsa_sign+0x14e>

            if( key_tries++ > 10 )
 8011152:	3f01      	subs	r7, #1
 8011154:	f000 8085 	beq.w	8011262 <mbedtls_ecdsa_sign+0x176>
            {
                ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
                goto cleanup;
            }
        }
        while( mbedtls_mpi_cmp_int( r, 0 ) == 0 );
 8011158:	4640      	mov	r0, r8
 801115a:	f7fd ff11 	bl	800ef80 <mbedtls_mpi_cmp_int>
 801115e:	2800      	cmp	r0, #0
 8011160:	d0e4      	beq.n	801112c <mbedtls_ecdsa_sign+0x40>

        /*
         * Step 5: derive MPI from hashed message
         */
        MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 8011162:	a907      	add	r1, sp, #28
 8011164:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8011168:	4628      	mov	r0, r5
 801116a:	f7ff ff8d 	bl	8011088 <derive_mpi>
 801116e:	4601      	mov	r1, r0
 8011170:	2800      	cmp	r0, #0
 8011172:	d162      	bne.n	801123a <mbedtls_ecdsa_sign+0x14e>
 8011174:	f04f 0b1f 	mov.w	fp, #31
         * avoiding a potential timing leak.
         */
        blind_tries = 0;
        do
        {
            size_t n_size = ( grp->nbits + 7 ) / 8;
 8011178:	6def      	ldr	r7, [r5, #92]	; 0x5c
 801117a:	3707      	adds	r7, #7
            MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &t, n_size, f_rng, p_rng ) );
 801117c:	08f9      	lsrs	r1, r7, #3
 801117e:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8011182:	a80a      	add	r0, sp, #40	; 0x28
 8011184:	f7fe fd15 	bl	800fbb2 <mbedtls_mpi_fill_random>
 8011188:	4601      	mov	r1, r0
 801118a:	2800      	cmp	r0, #0
 801118c:	d155      	bne.n	801123a <mbedtls_ecdsa_sign+0x14e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &t, 8 * n_size - grp->nbits ) );
 801118e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8011190:	f027 0707 	bic.w	r7, r7, #7
 8011194:	1a79      	subs	r1, r7, r1
 8011196:	a80a      	add	r0, sp, #40	; 0x28
 8011198:	f7fd fddb 	bl	800ed52 <mbedtls_mpi_shift_r>
 801119c:	4601      	mov	r1, r0
 801119e:	2800      	cmp	r0, #0
 80111a0:	d14b      	bne.n	801123a <mbedtls_ecdsa_sign+0x14e>

            /* See mbedtls_ecp_gen_keypair() */
            if( ++blind_tries > 30 )
 80111a2:	f1bb 0b01 	subs.w	fp, fp, #1
 80111a6:	d060      	beq.n	801126a <mbedtls_ecdsa_sign+0x17e>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
        }
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 80111a8:	2101      	movs	r1, #1
 80111aa:	a80a      	add	r0, sp, #40	; 0x28
 80111ac:	f7fd fee8 	bl	800ef80 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( &t, &grp->N ) >= 0 );
 80111b0:	2800      	cmp	r0, #0
 80111b2:	dbe1      	blt.n	8011178 <mbedtls_ecdsa_sign+0x8c>
 80111b4:	4649      	mov	r1, r9
 80111b6:	a80a      	add	r0, sp, #40	; 0x28
 80111b8:	f7fd fe9f 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( &t, 1 ) < 0 ||
 80111bc:	2800      	cmp	r0, #0
 80111be:	dadb      	bge.n	8011178 <mbedtls_ecdsa_sign+0x8c>

        /*
         * Step 6: compute s = (e + r * d) / k = t (e + rd) / (kt) mod n
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, r, d ) );
 80111c0:	4641      	mov	r1, r8
 80111c2:	ee18 2a10 	vmov	r2, s16
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7fd ffe1 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80111cc:	4601      	mov	r1, r0
 80111ce:	bba0      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &e, &e, s ) );
 80111d0:	a907      	add	r1, sp, #28
 80111d2:	4608      	mov	r0, r1
 80111d4:	4622      	mov	r2, r4
 80111d6:	f7fd ff7f 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 80111da:	4601      	mov	r1, r0
 80111dc:	bb68      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &e, &e, &t ) );
 80111de:	a907      	add	r1, sp, #28
 80111e0:	4608      	mov	r0, r1
 80111e2:	aa0a      	add	r2, sp, #40	; 0x28
 80111e4:	f7fd ffd3 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80111e8:	4601      	mov	r1, r0
 80111ea:	bb30      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &k, &k, &t ) );
 80111ec:	4631      	mov	r1, r6
 80111ee:	aa0a      	add	r2, sp, #40	; 0x28
 80111f0:	4630      	mov	r0, r6
 80111f2:	f7fd ffcc 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80111f6:	4601      	mov	r1, r0
 80111f8:	b9f8      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( s, &k, &grp->N ) );
 80111fa:	4631      	mov	r1, r6
 80111fc:	464a      	mov	r2, r9
 80111fe:	4620      	mov	r0, r4
 8011200:	f7fe fcf0 	bl	800fbe4 <mbedtls_mpi_inv_mod>
 8011204:	4601      	mov	r1, r0
 8011206:	b9c0      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( s, s, &e ) );
 8011208:	4621      	mov	r1, r4
 801120a:	aa07      	add	r2, sp, #28
 801120c:	4620      	mov	r0, r4
 801120e:	f7fd ffbe 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011212:	4601      	mov	r1, r0
 8011214:	b988      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( s, s, &grp->N ) );
 8011216:	4621      	mov	r1, r4
 8011218:	464a      	mov	r2, r9
 801121a:	4620      	mov	r0, r4
 801121c:	f7fe f9e5 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8011220:	4601      	mov	r1, r0
 8011222:	b950      	cbnz	r0, 801123a <mbedtls_ecdsa_sign+0x14e>

        if( sign_tries++ > 10 )
 8011224:	f1ba 0a01 	subs.w	sl, sl, #1
 8011228:	d01b      	beq.n	8011262 <mbedtls_ecdsa_sign+0x176>
        {
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
            goto cleanup;
        }
    }
    while( mbedtls_mpi_cmp_int( s, 0 ) == 0 );
 801122a:	9003      	str	r0, [sp, #12]
 801122c:	4620      	mov	r0, r4
 801122e:	f7fd fea7 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011232:	9903      	ldr	r1, [sp, #12]
 8011234:	2800      	cmp	r0, #0
 8011236:	f43f af78 	beq.w	801112a <mbedtls_ecdsa_sign+0x3e>

cleanup:
    mbedtls_ecp_point_free( &R );
 801123a:	a80d      	add	r0, sp, #52	; 0x34
 801123c:	9103      	str	r1, [sp, #12]
 801123e:	f000 ff0f 	bl	8012060 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &k ); mbedtls_mpi_free( &e ); mbedtls_mpi_free( &t );
 8011242:	a804      	add	r0, sp, #16
 8011244:	f7fd fb9a 	bl	800e97c <mbedtls_mpi_free>
 8011248:	a807      	add	r0, sp, #28
 801124a:	f7fd fb97 	bl	800e97c <mbedtls_mpi_free>
 801124e:	a80a      	add	r0, sp, #40	; 0x28
 8011250:	f7fd fb94 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
 8011254:	9903      	ldr	r1, [sp, #12]
}
 8011256:	4608      	mov	r0, r1
 8011258:	b017      	add	sp, #92	; 0x5c
 801125a:	ecbd 8b02 	vpop	{d8}
 801125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_ECP_RANDOM_FAILED;
 8011262:	4903      	ldr	r1, [pc, #12]	; (8011270 <mbedtls_ecdsa_sign+0x184>)
 8011264:	e7e9      	b.n	801123a <mbedtls_ecdsa_sign+0x14e>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011266:	4903      	ldr	r1, [pc, #12]	; (8011274 <mbedtls_ecdsa_sign+0x188>)
 8011268:	e7f5      	b.n	8011256 <mbedtls_ecdsa_sign+0x16a>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 801126a:	4901      	ldr	r1, [pc, #4]	; (8011270 <mbedtls_ecdsa_sign+0x184>)
 801126c:	e7f3      	b.n	8011256 <mbedtls_ecdsa_sign+0x16a>
 801126e:	bf00      	nop
 8011270:	ffffb300 	.word	0xffffb300
 8011274:	ffffb080 	.word	0xffffb080

08011278 <mbedtls_ecdsa_sign_det>:
 * Deterministic signature wrapper
 */
int mbedtls_ecdsa_sign_det( mbedtls_ecp_group *grp, mbedtls_mpi *r, mbedtls_mpi *s,
                    const mbedtls_mpi *d, const unsigned char *buf, size_t blen,
                    mbedtls_md_type_t md_alg )
{
 8011278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127c:	b0c5      	sub	sp, #276	; 0x114
    int ret;
    mbedtls_hmac_drbg_context rng_ctx;
    unsigned char data[2 * MBEDTLS_ECP_MAX_BYTES];
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 801127e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
{
 8011280:	f8dd b13c 	ldr.w	fp, [sp, #316]	; 0x13c
 8011284:	4605      	mov	r5, r0
    const mbedtls_md_info_t *md_info;
    mbedtls_mpi h;

    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011286:	f89d 0140 	ldrb.w	r0, [sp, #320]	; 0x140
{
 801128a:	4689      	mov	r9, r1
 801128c:	4692      	mov	sl, r2
 801128e:	461f      	mov	r7, r3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011290:	f003 fb08 	bl	80148a4 <mbedtls_md_info_from_type>
    size_t grp_len = ( grp->nbits + 7 ) / 8;
 8011294:	3407      	adds	r4, #7
 8011296:	08e4      	lsrs	r4, r4, #3
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8011298:	4680      	mov	r8, r0
 801129a:	2800      	cmp	r0, #0
 801129c:	d03c      	beq.n	8011318 <mbedtls_ecdsa_sign_det+0xa0>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    mbedtls_mpi_init( &h );
 801129e:	a807      	add	r0, sp, #28
    mbedtls_hmac_drbg_init( &rng_ctx );
 80112a0:	ae0a      	add	r6, sp, #40	; 0x28
    mbedtls_mpi_init( &h );
 80112a2:	f7fd fb64 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_hmac_drbg_init( &rng_ctx );
 80112a6:	4630      	mov	r0, r6
 80112a8:	f003 f9ea 	bl	8014680 <mbedtls_hmac_drbg_init>

    /* Use private key and message hash (reduced) to initialize HMAC_DRBG */
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( d, data, grp_len ) );
 80112ac:	4622      	mov	r2, r4
 80112ae:	a923      	add	r1, sp, #140	; 0x8c
 80112b0:	4638      	mov	r0, r7
 80112b2:	f7fd fcdd 	bl	800ec70 <mbedtls_mpi_write_binary>
 80112b6:	4603      	mov	r3, r0
 80112b8:	bb10      	cbnz	r0, 8011300 <mbedtls_ecdsa_sign_det+0x88>
    MBEDTLS_MPI_CHK( derive_mpi( grp, &h, buf, blen ) );
 80112ba:	465b      	mov	r3, fp
 80112bc:	9a4e      	ldr	r2, [sp, #312]	; 0x138
 80112be:	a907      	add	r1, sp, #28
 80112c0:	4628      	mov	r0, r5
 80112c2:	f7ff fee1 	bl	8011088 <derive_mpi>
 80112c6:	4603      	mov	r3, r0
 80112c8:	b9d0      	cbnz	r0, 8011300 <mbedtls_ecdsa_sign_det+0x88>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &h, data + grp_len, grp_len ) );
 80112ca:	ab23      	add	r3, sp, #140	; 0x8c
 80112cc:	1919      	adds	r1, r3, r4
 80112ce:	4622      	mov	r2, r4
 80112d0:	a807      	add	r0, sp, #28
 80112d2:	f7fd fccd 	bl	800ec70 <mbedtls_mpi_write_binary>
 80112d6:	4603      	mov	r3, r0
 80112d8:	b990      	cbnz	r0, 8011300 <mbedtls_ecdsa_sign_det+0x88>
    mbedtls_hmac_drbg_seed_buf( &rng_ctx, md_info, data, 2 * grp_len );
 80112da:	0063      	lsls	r3, r4, #1
 80112dc:	aa23      	add	r2, sp, #140	; 0x8c
 80112de:	4641      	mov	r1, r8
 80112e0:	4630      	mov	r0, r6
 80112e2:	f003 fa1d 	bl	8014720 <mbedtls_hmac_drbg_seed_buf>

    ret = mbedtls_ecdsa_sign( grp, r, s, d, buf, blen,
 80112e6:	4b0d      	ldr	r3, [pc, #52]	; (801131c <mbedtls_ecdsa_sign_det+0xa4>)
 80112e8:	9603      	str	r6, [sp, #12]
 80112ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80112ee:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80112f0:	9300      	str	r3, [sp, #0]
 80112f2:	4652      	mov	r2, sl
 80112f4:	463b      	mov	r3, r7
 80112f6:	4649      	mov	r1, r9
 80112f8:	4628      	mov	r0, r5
 80112fa:	f7ff fef7 	bl	80110ec <mbedtls_ecdsa_sign>
 80112fe:	4603      	mov	r3, r0
                      mbedtls_hmac_drbg_random, &rng_ctx );

cleanup:
    mbedtls_hmac_drbg_free( &rng_ctx );
 8011300:	4630      	mov	r0, r6
 8011302:	9305      	str	r3, [sp, #20]
 8011304:	f003 fac9 	bl	801489a <mbedtls_hmac_drbg_free>
    mbedtls_mpi_free( &h );
 8011308:	a807      	add	r0, sp, #28
 801130a:	f7fd fb37 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
 801130e:	9b05      	ldr	r3, [sp, #20]
}
 8011310:	4618      	mov	r0, r3
 8011312:	b045      	add	sp, #276	; 0x114
 8011314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011318:	4b01      	ldr	r3, [pc, #4]	; (8011320 <mbedtls_ecdsa_sign_det+0xa8>)
 801131a:	e7f9      	b.n	8011310 <mbedtls_ecdsa_sign_det+0x98>
 801131c:	0801488b 	.word	0x0801488b
 8011320:	ffffb080 	.word	0xffffb080

08011324 <mbedtls_ecdsa_verify>:
 * Obviously, compared to SEC1 4.1.3, we skip step 2 (hash message)
 */
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                  const unsigned char *buf, size_t blen,
                  const mbedtls_ecp_point *Q, const mbedtls_mpi *r, const mbedtls_mpi *s)
{
 8011324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	b099      	sub	sp, #100	; 0x64
 801132a:	4605      	mov	r5, r0
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;

    mbedtls_ecp_point_init( &R );
 801132c:	a80f      	add	r0, sp, #60	; 0x3c
{
 801132e:	4698      	mov	r8, r3
 8011330:	468a      	mov	sl, r1
 8011332:	4693      	mov	fp, r2
 8011334:	e9dd 6922 	ldrd	r6, r9, [sp, #136]	; 0x88
    mbedtls_ecp_point_init( &R );
 8011338:	f000 fe78 	bl	801202c <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv ); mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 801133c:	a803      	add	r0, sp, #12
 801133e:	f7fd fb16 	bl	800e96e <mbedtls_mpi_init>
 8011342:	a806      	add	r0, sp, #24
 8011344:	f7fd fb13 	bl	800e96e <mbedtls_mpi_init>
 8011348:	a809      	add	r0, sp, #36	; 0x24
 801134a:	f7fd fb10 	bl	800e96e <mbedtls_mpi_init>
 801134e:	a80c      	add	r0, sp, #48	; 0x30
 8011350:	f7fd fb0d 	bl	800e96e <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 8011354:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8011356:	2b00      	cmp	r3, #0
 8011358:	d07f      	beq.n	801145a <mbedtls_ecdsa_verify+0x136>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 801135a:	2101      	movs	r1, #1
 801135c:	4630      	mov	r0, r6
 801135e:	f7fd fe0f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011362:	2800      	cmp	r0, #0
 8011364:	db65      	blt.n	8011432 <mbedtls_ecdsa_verify+0x10e>
 8011366:	f105 074c 	add.w	r7, r5, #76	; 0x4c
 801136a:	4639      	mov	r1, r7
 801136c:	4630      	mov	r0, r6
 801136e:	f7fd fdc4 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8011372:	2800      	cmp	r0, #0
 8011374:	da5d      	bge.n	8011432 <mbedtls_ecdsa_verify+0x10e>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8011376:	2101      	movs	r1, #1
 8011378:	4648      	mov	r0, r9
 801137a:	f7fd fe01 	bl	800ef80 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 801137e:	2800      	cmp	r0, #0
 8011380:	db57      	blt.n	8011432 <mbedtls_ecdsa_verify+0x10e>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 8011382:	4639      	mov	r1, r7
 8011384:	4648      	mov	r0, r9
 8011386:	f7fd fdb8 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 801138a:	2800      	cmp	r0, #0
 801138c:	da51      	bge.n	8011432 <mbedtls_ecdsa_verify+0x10e>
    }

    /*
     * Additional precaution: make sure Q is valid
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, Q ) );
 801138e:	4641      	mov	r1, r8
 8011390:	4628      	mov	r0, r5
 8011392:	f001 fc6b 	bl	8012c6c <mbedtls_ecp_check_pubkey>
 8011396:	4604      	mov	r4, r0
 8011398:	2800      	cmp	r0, #0
 801139a:	d14b      	bne.n	8011434 <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 801139c:	465b      	mov	r3, fp
 801139e:	4652      	mov	r2, sl
 80113a0:	a903      	add	r1, sp, #12
 80113a2:	4628      	mov	r0, r5
 80113a4:	f7ff fe70 	bl	8011088 <derive_mpi>
 80113a8:	4604      	mov	r4, r0
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d142      	bne.n	8011434 <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 80113ae:	463a      	mov	r2, r7
 80113b0:	4649      	mov	r1, r9
 80113b2:	a806      	add	r0, sp, #24
 80113b4:	f7fe fc16 	bl	800fbe4 <mbedtls_mpi_inv_mod>
 80113b8:	4604      	mov	r4, r0
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d13a      	bne.n	8011434 <mbedtls_ecdsa_verify+0x110>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u1, &e, &s_inv ) );
 80113be:	aa06      	add	r2, sp, #24
 80113c0:	a903      	add	r1, sp, #12
 80113c2:	a809      	add	r0, sp, #36	; 0x24
 80113c4:	f7fd fee3 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80113c8:	4604      	mov	r4, r0
 80113ca:	bb98      	cbnz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u1, &u1, &grp->N ) );
 80113cc:	a909      	add	r1, sp, #36	; 0x24
 80113ce:	463a      	mov	r2, r7
 80113d0:	4608      	mov	r0, r1
 80113d2:	f7fe f90a 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 80113d6:	4604      	mov	r4, r0
 80113d8:	bb60      	cbnz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u2, r, &s_inv ) );
 80113da:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80113de:	aa06      	add	r2, sp, #24
 80113e0:	4631      	mov	r1, r6
 80113e2:	4648      	mov	r0, r9
 80113e4:	f7fd fed3 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80113e8:	4604      	mov	r4, r0
 80113ea:	bb18      	cbnz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &u2, &u2, &grp->N ) );
 80113ec:	463a      	mov	r2, r7
 80113ee:	4649      	mov	r1, r9
 80113f0:	4648      	mov	r0, r9
 80113f2:	f7fe f8fa 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 80113f6:	4604      	mov	r4, r0
 80113f8:	b9e0      	cbnz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>
     * Step 5: R = u1 G + u2 Q
     *
     * Since we're not using any secret data, no need to pass a RNG to
     * mbedtls_ecp_mul() for countermesures.
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd( grp, &R, &u1, &grp->G, &u2, Q ) );
 80113fa:	e9cd 9800 	strd	r9, r8, [sp]
 80113fe:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011402:	aa09      	add	r2, sp, #36	; 0x24
 8011404:	a90f      	add	r1, sp, #60	; 0x3c
 8011406:	4628      	mov	r0, r5
 8011408:	f001 fd7c 	bl	8012f04 <mbedtls_ecp_muladd>
 801140c:	4604      	mov	r4, r0
 801140e:	b988      	cbnz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>

    if( mbedtls_ecp_is_zero( &R ) )
 8011410:	a80f      	add	r0, sp, #60	; 0x3c
 8011412:	f001 fb45 	bl	8012aa0 <mbedtls_ecp_is_zero>
 8011416:	b960      	cbnz	r0, 8011432 <mbedtls_ecdsa_verify+0x10e>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 8011418:	a90f      	add	r1, sp, #60	; 0x3c
 801141a:	463a      	mov	r2, r7
 801141c:	4608      	mov	r0, r1
 801141e:	f7fe f8e4 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8011422:	4604      	mov	r4, r0
 8011424:	b930      	cbnz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 8011426:	4631      	mov	r1, r6
 8011428:	a80f      	add	r0, sp, #60	; 0x3c
 801142a:	f7fd fd66 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 801142e:	4604      	mov	r4, r0
 8011430:	b100      	cbz	r0, 8011434 <mbedtls_ecdsa_verify+0x110>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 8011432:	4c0b      	ldr	r4, [pc, #44]	; (8011460 <mbedtls_ecdsa_verify+0x13c>)
        goto cleanup;
    }

cleanup:
    mbedtls_ecp_point_free( &R );
 8011434:	a80f      	add	r0, sp, #60	; 0x3c
 8011436:	f000 fe13 	bl	8012060 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv ); mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 801143a:	a803      	add	r0, sp, #12
 801143c:	f7fd fa9e 	bl	800e97c <mbedtls_mpi_free>
 8011440:	a806      	add	r0, sp, #24
 8011442:	f7fd fa9b 	bl	800e97c <mbedtls_mpi_free>
 8011446:	a809      	add	r0, sp, #36	; 0x24
 8011448:	f7fd fa98 	bl	800e97c <mbedtls_mpi_free>
 801144c:	a80c      	add	r0, sp, #48	; 0x30
 801144e:	f7fd fa95 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
}
 8011452:	4620      	mov	r0, r4
 8011454:	b019      	add	sp, #100	; 0x64
 8011456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801145a:	4c02      	ldr	r4, [pc, #8]	; (8011464 <mbedtls_ecdsa_verify+0x140>)
 801145c:	e7f9      	b.n	8011452 <mbedtls_ecdsa_verify+0x12e>
 801145e:	bf00      	nop
 8011460:	ffffb200 	.word	0xffffb200
 8011464:	ffffb080 	.word	0xffffb080

08011468 <mbedtls_ecdsa_write_signature>:
int mbedtls_ecdsa_write_signature( mbedtls_ecdsa_context *ctx, mbedtls_md_type_t md_alg,
                           const unsigned char *hash, size_t hlen,
                           unsigned char *sig, size_t *slen,
                           int (*f_rng)(void *, unsigned char *, size_t),
                           void *p_rng )
{
 8011468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801146a:	b0b1      	sub	sp, #196	; 0xc4
 801146c:	4604      	mov	r4, r0
    int ret;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 801146e:	a806      	add	r0, sp, #24
{
 8011470:	4615      	mov	r5, r2
 8011472:	460f      	mov	r7, r1
 8011474:	461e      	mov	r6, r3
    mbedtls_mpi_init( &r );
 8011476:	f7fd fa7a 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 801147a:	a809      	add	r0, sp, #36	; 0x24
 801147c:	f7fd fa77 	bl	800e96e <mbedtls_mpi_init>

#if defined(MBEDTLS_ECDSA_DETERMINISTIC)
    (void) f_rng;
    (void) p_rng;

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign_det( &ctx->grp, &r, &s, &ctx->d,
 8011480:	9500      	str	r5, [sp, #0]
 8011482:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8011486:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 801148a:	aa09      	add	r2, sp, #36	; 0x24
 801148c:	a906      	add	r1, sp, #24
 801148e:	4620      	mov	r0, r4
 8011490:	f7ff fef2 	bl	8011278 <mbedtls_ecdsa_sign_det>
 8011494:	4605      	mov	r5, r0
 8011496:	bb58      	cbnz	r0, 80114f0 <mbedtls_ecdsa_write_signature+0x88>
    unsigned char *p = buf + sizeof( buf );
 8011498:	f10d 03bd 	add.w	r3, sp, #189	; 0xbd
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 801149c:	aa09      	add	r2, sp, #36	; 0x24
 801149e:	a90c      	add	r1, sp, #48	; 0x30
 80114a0:	a805      	add	r0, sp, #20
    unsigned char *p = buf + sizeof( buf );
 80114a2:	9305      	str	r3, [sp, #20]
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, s ) );
 80114a4:	f7fc ffe8 	bl	800e478 <mbedtls_asn1_write_mpi>
 80114a8:	1e04      	subs	r4, r0, #0
 80114aa:	db20      	blt.n	80114ee <mbedtls_ecdsa_write_signature+0x86>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_mpi( &p, buf, r ) );
 80114ac:	aa06      	add	r2, sp, #24
 80114ae:	a90c      	add	r1, sp, #48	; 0x30
 80114b0:	a805      	add	r0, sp, #20
 80114b2:	f7fc ffe1 	bl	800e478 <mbedtls_asn1_write_mpi>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	db23      	blt.n	8011502 <mbedtls_ecdsa_write_signature+0x9a>
 80114ba:	1826      	adds	r6, r4, r0
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 80114bc:	4632      	mov	r2, r6
 80114be:	a90c      	add	r1, sp, #48	; 0x30
 80114c0:	a805      	add	r0, sp, #20
 80114c2:	f7fc ff57 	bl	800e374 <mbedtls_asn1_write_len>
 80114c6:	1e04      	subs	r4, r0, #0
 80114c8:	db11      	blt.n	80114ee <mbedtls_ecdsa_write_signature+0x86>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 80114ca:	2230      	movs	r2, #48	; 0x30
 80114cc:	eb0d 0102 	add.w	r1, sp, r2
 80114d0:	a805      	add	r0, sp, #20
 80114d2:	f7fc ffc3 	bl	800e45c <mbedtls_asn1_write_tag>
 80114d6:	1e02      	subs	r2, r0, #0
 80114d8:	db15      	blt.n	8011506 <mbedtls_ecdsa_write_signature+0x9e>
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_len( &p, buf, len ) );
 80114da:	4434      	add	r4, r6
    MBEDTLS_ASN1_CHK_ADD( len, mbedtls_asn1_write_tag( &p, buf,
 80114dc:	4414      	add	r4, r2
    memcpy( sig, p, len );
 80114de:	4622      	mov	r2, r4
 80114e0:	9905      	ldr	r1, [sp, #20]
 80114e2:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80114e4:	f010 ff80 	bl	80223e8 <memcpy>
    *slen = len;
 80114e8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 80114ea:	601c      	str	r4, [r3, #0]
    return( 0 );
 80114ec:	462c      	mov	r4, r5

    MBEDTLS_MPI_CHK( mbedtls_ecdsa_sign( &ctx->grp, &r, &s, &ctx->d,
                         hash, hlen, f_rng, p_rng ) );
#endif

    MBEDTLS_MPI_CHK( ecdsa_signature_to_asn1( &r, &s, sig, slen ) );
 80114ee:	4625      	mov	r5, r4

cleanup:
    mbedtls_mpi_free( &r );
 80114f0:	a806      	add	r0, sp, #24
 80114f2:	f7fd fa43 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 80114f6:	a809      	add	r0, sp, #36	; 0x24
 80114f8:	f7fd fa40 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
}
 80114fc:	4628      	mov	r0, r5
 80114fe:	b031      	add	sp, #196	; 0xc4
 8011500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011502:	4604      	mov	r4, r0
 8011504:	e7f3      	b.n	80114ee <mbedtls_ecdsa_write_signature+0x86>
 8011506:	4614      	mov	r4, r2
 8011508:	e7f1      	b.n	80114ee <mbedtls_ecdsa_write_signature+0x86>
	...

0801150c <mbedtls_ecdsa_read_signature>:
 * Read and check signature
 */
int mbedtls_ecdsa_read_signature( mbedtls_ecdsa_context *ctx,
                          const unsigned char *hash, size_t hlen,
                          const unsigned char *sig, size_t slen )
{
 801150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011510:	b08a      	sub	sp, #40	; 0x28
    unsigned char *p = (unsigned char *) sig;
    const unsigned char *end = sig + slen;
    size_t len;
    mbedtls_mpi r, s;

    mbedtls_mpi_init( &r );
 8011512:	af04      	add	r7, sp, #16
    const unsigned char *end = sig + slen;
 8011514:	9d12      	ldr	r5, [sp, #72]	; 0x48
    unsigned char *p = (unsigned char *) sig;
 8011516:	9302      	str	r3, [sp, #8]
{
 8011518:	4680      	mov	r8, r0
    mbedtls_mpi_init( &s );
 801151a:	ae07      	add	r6, sp, #28
    mbedtls_mpi_init( &r );
 801151c:	4638      	mov	r0, r7
    const unsigned char *end = sig + slen;
 801151e:	441d      	add	r5, r3
{
 8011520:	4689      	mov	r9, r1
 8011522:	4692      	mov	sl, r2
    mbedtls_mpi_init( &r );
 8011524:	f7fd fa23 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &s );
 8011528:	4630      	mov	r0, r6
 801152a:	f7fd fa20 	bl	800e96e <mbedtls_mpi_init>

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801152e:	2330      	movs	r3, #48	; 0x30
 8011530:	aa03      	add	r2, sp, #12
 8011532:	4629      	mov	r1, r5
 8011534:	a802      	add	r0, sp, #8
 8011536:	f7fc fddf 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801153a:	b158      	cbz	r0, 8011554 <mbedtls_ecdsa_read_signature+0x48>
    }

    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
    {
        ret += MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 801153c:	f5a0 449f 	sub.w	r4, r0, #20352	; 0x4f80

    if( p != end )
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;

cleanup:
    mbedtls_mpi_free( &r );
 8011540:	4638      	mov	r0, r7
 8011542:	f7fd fa1b 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &s );
 8011546:	4630      	mov	r0, r6
 8011548:	f7fd fa18 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
}
 801154c:	4620      	mov	r0, r4
 801154e:	b00a      	add	sp, #40	; 0x28
 8011550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( p + len != end )
 8011554:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011558:	4413      	add	r3, r2
 801155a:	429d      	cmp	r5, r3
 801155c:	d11f      	bne.n	801159e <mbedtls_ecdsa_read_signature+0x92>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 801155e:	463a      	mov	r2, r7
 8011560:	4629      	mov	r1, r5
 8011562:	a802      	add	r0, sp, #8
 8011564:	f7fc fe18 	bl	800e198 <mbedtls_asn1_get_mpi>
 8011568:	2800      	cmp	r0, #0
 801156a:	d1e7      	bne.n	801153c <mbedtls_ecdsa_read_signature+0x30>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &s ) ) != 0 )
 801156c:	4632      	mov	r2, r6
 801156e:	4629      	mov	r1, r5
 8011570:	a802      	add	r0, sp, #8
 8011572:	f7fc fe11 	bl	800e198 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &r ) ) != 0 ||
 8011576:	2800      	cmp	r0, #0
 8011578:	d1e0      	bne.n	801153c <mbedtls_ecdsa_read_signature+0x30>
    if( ( ret = mbedtls_ecdsa_verify( &ctx->grp, hash, hlen,
 801157a:	e9cd 7600 	strd	r7, r6, [sp]
 801157e:	f108 0388 	add.w	r3, r8, #136	; 0x88
 8011582:	4652      	mov	r2, sl
 8011584:	4649      	mov	r1, r9
 8011586:	4640      	mov	r0, r8
 8011588:	f7ff fecc 	bl	8011324 <mbedtls_ecdsa_verify>
 801158c:	4604      	mov	r4, r0
 801158e:	2800      	cmp	r0, #0
 8011590:	d1d6      	bne.n	8011540 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH;
 8011592:	9a02      	ldr	r2, [sp, #8]
 8011594:	4b03      	ldr	r3, [pc, #12]	; (80115a4 <mbedtls_ecdsa_read_signature+0x98>)
 8011596:	42aa      	cmp	r2, r5
 8011598:	bf18      	it	ne
 801159a:	461c      	movne	r4, r3
 801159c:	e7d0      	b.n	8011540 <mbedtls_ecdsa_read_signature+0x34>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA +
 801159e:	4c02      	ldr	r4, [pc, #8]	; (80115a8 <mbedtls_ecdsa_read_signature+0x9c>)
 80115a0:	e7ce      	b.n	8011540 <mbedtls_ecdsa_read_signature+0x34>
 80115a2:	bf00      	nop
 80115a4:	ffffb400 	.word	0xffffb400
 80115a8:	ffffb01a 	.word	0xffffb01a

080115ac <mbedtls_ecdsa_from_keypair>:

/*
 * Set context from an mbedtls_ecp_keypair
 */
int mbedtls_ecdsa_from_keypair( mbedtls_ecdsa_context *ctx, const mbedtls_ecp_keypair *key )
{
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	4605      	mov	r5, r0
 80115b0:	460e      	mov	r6, r1
    int ret;

    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80115b2:	f000 fdb5 	bl	8012120 <mbedtls_ecp_group_copy>
 80115b6:	4604      	mov	r4, r0
 80115b8:	b978      	cbnz	r0, 80115da <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80115ba:	f106 017c 	add.w	r1, r6, #124	; 0x7c
 80115be:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 80115c2:	f7fd fa5b 	bl	800ea7c <mbedtls_mpi_copy>
    if( ( ret = mbedtls_ecp_group_copy( &ctx->grp, &key->grp ) ) != 0 ||
 80115c6:	4604      	mov	r4, r0
 80115c8:	b938      	cbnz	r0, 80115da <mbedtls_ecdsa_from_keypair+0x2e>
        ( ret = mbedtls_ecp_copy( &ctx->Q, &key->Q ) ) != 0 )
 80115ca:	f106 0188 	add.w	r1, r6, #136	; 0x88
 80115ce:	f105 0088 	add.w	r0, r5, #136	; 0x88
 80115d2:	f000 fd8f 	bl	80120f4 <mbedtls_ecp_copy>
        ( ret = mbedtls_mpi_copy( &ctx->d, &key->d ) ) != 0 ||
 80115d6:	4604      	mov	r4, r0
 80115d8:	b110      	cbz	r0, 80115e0 <mbedtls_ecdsa_from_keypair+0x34>
/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
    mbedtls_ecp_keypair_free( ctx );
 80115da:	4628      	mov	r0, r5
 80115dc:	f000 fd7a 	bl	80120d4 <mbedtls_ecp_keypair_free>
}
 80115e0:	4620      	mov	r0, r4
 80115e2:	bd70      	pop	{r4, r5, r6, pc}

080115e4 <mbedtls_ecdsa_init>:
    mbedtls_ecp_keypair_init( ctx );
 80115e4:	f000 bd2c 	b.w	8012040 <mbedtls_ecp_keypair_init>

080115e8 <mbedtls_ecdsa_free>:
    mbedtls_ecp_keypair_free( ctx );
 80115e8:	f000 bd74 	b.w	80120d4 <mbedtls_ecp_keypair_free>

080115ec <ecp_get_type>:
/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
    if( grp->G.X.p == NULL )
 80115ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80115ee:	b12b      	cbz	r3, 80115fc <ecp_get_type+0x10>
        return( ECP_TYPE_NONE );

    if( grp->G.Y.p == NULL )
 80115f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80115f2:	2b00      	cmp	r3, #0
        return( ECP_TYPE_MONTGOMERY );
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 80115f4:	bf0c      	ite	eq
 80115f6:	2002      	moveq	r0, #2
 80115f8:	2001      	movne	r0, #1
 80115fa:	4770      	bx	lr
        return( ECP_TYPE_NONE );
 80115fc:	4618      	mov	r0, r3
}
 80115fe:	4770      	bx	lr

08011600 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 8011600:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011602:	460d      	mov	r5, r1
 8011604:	4604      	mov	r4, r0
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8011606:	350c      	adds	r5, #12
    mbedtls_mpi_init( &mQY );
 8011608:	a801      	add	r0, sp, #4
{
 801160a:	4616      	mov	r6, r2
    mbedtls_mpi_init( &mQY );
 801160c:	f7fd f9af 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 8011610:	1d21      	adds	r1, r4, #4
 8011612:	462a      	mov	r2, r5
 8011614:	a801      	add	r0, sp, #4
 8011616:	f7fd fd81 	bl	800f11c <mbedtls_mpi_sub_mpi>
 801161a:	4604      	mov	r4, r0
 801161c:	b968      	cbnz	r0, 801163a <ecp_safe_invert_jac+0x3a>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 801161e:	4601      	mov	r1, r0
 8011620:	4628      	mov	r0, r5
 8011622:	f7fd fcad 	bl	800ef80 <mbedtls_mpi_cmp_int>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 8011626:	a901      	add	r1, sp, #4
 8011628:	2800      	cmp	r0, #0
 801162a:	bf0c      	ite	eq
 801162c:	2200      	moveq	r2, #0
 801162e:	f006 0201 	andne.w	r2, r6, #1
 8011632:	4628      	mov	r0, r5
 8011634:	f7fd fa4c 	bl	800ead0 <mbedtls_mpi_safe_cond_assign>
 8011638:	4604      	mov	r4, r0

cleanup:
    mbedtls_mpi_free( &mQY );
 801163a:	a801      	add	r0, sp, #4
 801163c:	f7fd f99e 	bl	800e97c <mbedtls_mpi_free>

    return( ret );
}
 8011640:	4620      	mov	r0, r4
 8011642:	b004      	add	sp, #16
 8011644:	bd70      	pop	{r4, r5, r6, pc}

08011646 <ecp_select_comb>:
 * Select precomputed point: R = sign(i) * T[ abs(i) / 2 ]
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char t_len,
                            unsigned char i )
{
 8011646:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801164a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 801164e:	4606      	mov	r6, r0
 8011650:	460d      	mov	r5, r1
 8011652:	461f      	mov	r7, r3
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 8011654:	f3c8 0945 	ubfx	r9, r8, #1, #6

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < t_len; j++ )
 8011658:	4614      	mov	r4, r2
    ii =  ( i & 0x7Fu ) >> 1;
 801165a:	f04f 0b00 	mov.w	fp, #0
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 801165e:	f101 0a0c 	add.w	sl, r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 8011662:	fa5f f28b 	uxtb.w	r2, fp
 8011666:	eba2 0309 	sub.w	r3, r2, r9
 801166a:	425a      	negs	r2, r3
 801166c:	415a      	adcs	r2, r3
 801166e:	4621      	mov	r1, r4
 8011670:	4628      	mov	r0, r5
 8011672:	9201      	str	r2, [sp, #4]
 8011674:	f7fd fa2c 	bl	800ead0 <mbedtls_mpi_safe_cond_assign>
 8011678:	b9a8      	cbnz	r0, 80116a6 <ecp_select_comb+0x60>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 801167a:	9a01      	ldr	r2, [sp, #4]
 801167c:	f104 010c 	add.w	r1, r4, #12
 8011680:	4650      	mov	r0, sl
 8011682:	f7fd fa25 	bl	800ead0 <mbedtls_mpi_safe_cond_assign>
 8011686:	b970      	cbnz	r0, 80116a6 <ecp_select_comb+0x60>
    for( j = 0; j < t_len; j++ )
 8011688:	f10b 0b01 	add.w	fp, fp, #1
 801168c:	45bb      	cmp	fp, r7
 801168e:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8011692:	d1e6      	bne.n	8011662 <ecp_select_comb+0x1c>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 8011694:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 8011698:	4629      	mov	r1, r5
 801169a:	4630      	mov	r0, r6

cleanup:
    return( ret );
}
 801169c:	b003      	add	sp, #12
 801169e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 80116a2:	f7ff bfad 	b.w	8011600 <ecp_safe_invert_jac>
}
 80116a6:	b003      	add	sp, #12
 80116a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080116ac <ecp_modp>:
    if( grp->modp == NULL )
 80116ac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
{
 80116ae:	b570      	push	{r4, r5, r6, lr}
 80116b0:	4604      	mov	r4, r0
 80116b2:	460d      	mov	r5, r1
    if( grp->modp == NULL )
 80116b4:	b92b      	cbnz	r3, 80116c2 <ecp_modp+0x16>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80116b6:	1d0a      	adds	r2, r1, #4
}
 80116b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 80116bc:	4601      	mov	r1, r0
 80116be:	f7fd bf94 	b.w	800f5ea <mbedtls_mpi_mod_mpi>
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80116c2:	6803      	ldr	r3, [r0, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	db09      	blt.n	80116dc <ecp_modp+0x30>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 80116c8:	4620      	mov	r0, r4
 80116ca:	f7fd fa7c 	bl	800ebc6 <mbedtls_mpi_bitlen>
 80116ce:	6dab      	ldr	r3, [r5, #88]	; 0x58
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80116d0:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 80116d4:	d908      	bls.n	80116e8 <ecp_modp+0x3c>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80116d6:	4e17      	ldr	r6, [pc, #92]	; (8011734 <ecp_modp+0x88>)
}
 80116d8:	4630      	mov	r0, r6
 80116da:	bd70      	pop	{r4, r5, r6, pc}
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 80116dc:	2100      	movs	r1, #0
 80116de:	f7fd fc4f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	d0f0      	beq.n	80116c8 <ecp_modp+0x1c>
 80116e6:	e7f6      	b.n	80116d6 <ecp_modp+0x2a>
    MBEDTLS_MPI_CHK( grp->modp( N ) );
 80116e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116ea:	4620      	mov	r0, r4
 80116ec:	4798      	blx	r3
 80116ee:	4606      	mov	r6, r0
 80116f0:	2800      	cmp	r0, #0
 80116f2:	d1f1      	bne.n	80116d8 <ecp_modp+0x2c>
 80116f4:	3504      	adds	r5, #4
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 80116f6:	6823      	ldr	r3, [r4, #0]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	da04      	bge.n	8011706 <ecp_modp+0x5a>
 80116fc:	2100      	movs	r1, #0
 80116fe:	4620      	mov	r0, r4
 8011700:	f7fd fc3e 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011704:	b968      	cbnz	r0, 8011722 <ecp_modp+0x76>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 8011706:	4629      	mov	r1, r5
 8011708:	4620      	mov	r0, r4
 801170a:	f7fd fbf6 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 801170e:	2800      	cmp	r0, #0
 8011710:	dbe2      	blt.n	80116d8 <ecp_modp+0x2c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8011712:	462a      	mov	r2, r5
 8011714:	4621      	mov	r1, r4
 8011716:	4620      	mov	r0, r4
 8011718:	f7fd fca1 	bl	800f05e <mbedtls_mpi_sub_abs>
 801171c:	2800      	cmp	r0, #0
 801171e:	d0f2      	beq.n	8011706 <ecp_modp+0x5a>
 8011720:	e006      	b.n	8011730 <ecp_modp+0x84>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 8011722:	462a      	mov	r2, r5
 8011724:	4621      	mov	r1, r4
 8011726:	4620      	mov	r0, r4
 8011728:	f7fd fcd6 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 801172c:	2800      	cmp	r0, #0
 801172e:	d0e2      	beq.n	80116f6 <ecp_modp+0x4a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 8011730:	4606      	mov	r6, r0
 8011732:	e7d1      	b.n	80116d8 <ecp_modp+0x2c>
 8011734:	ffffb080 	.word	0xffffb080

08011738 <ecp_double_jac>:
{
 8011738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbl_count++;
 801173c:	4cb9      	ldr	r4, [pc, #740]	; (8011a24 <ecp_double_jac+0x2ec>)
 801173e:	6823      	ldr	r3, [r4, #0]
{
 8011740:	b08c      	sub	sp, #48	; 0x30
    dbl_count++;
 8011742:	3301      	adds	r3, #1
{
 8011744:	4607      	mov	r7, r0
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 8011746:	4668      	mov	r0, sp
    dbl_count++;
 8011748:	6023      	str	r3, [r4, #0]
{
 801174a:	460d      	mov	r5, r1
 801174c:	4690      	mov	r8, r2
    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 801174e:	f7fd f90e 	bl	800e96e <mbedtls_mpi_init>
 8011752:	a803      	add	r0, sp, #12
 8011754:	f7fd f90b 	bl	800e96e <mbedtls_mpi_init>
 8011758:	a806      	add	r0, sp, #24
 801175a:	f7fd f908 	bl	800e96e <mbedtls_mpi_init>
 801175e:	a809      	add	r0, sp, #36	; 0x24
 8011760:	f7fd f905 	bl	800e96e <mbedtls_mpi_init>
    if( grp->A.p == NULL )
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	46a2      	mov	sl, r4
 8011768:	2b00      	cmp	r3, #0
 801176a:	f040 8189 	bne.w	8011a80 <ecp_double_jac+0x348>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801176e:	f108 0218 	add.w	r2, r8, #24
 8011772:	4611      	mov	r1, r2
 8011774:	a803      	add	r0, sp, #12
 8011776:	f7fd fd0a 	bl	800f18e <mbedtls_mpi_mul_mpi>
 801177a:	4604      	mov	r4, r0
 801177c:	2800      	cmp	r0, #0
 801177e:	f040 815c 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011782:	4639      	mov	r1, r7
 8011784:	a803      	add	r0, sp, #12
 8011786:	f7ff ff91 	bl	80116ac <ecp_modp>
 801178a:	4604      	mov	r4, r0
 801178c:	2800      	cmp	r0, #0
 801178e:	f040 8154 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011792:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8011796:	aa03      	add	r2, sp, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011798:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 801179a:	4641      	mov	r1, r8
 801179c:	a806      	add	r0, sp, #24
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 801179e:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 80117a2:	f7fd fc99 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 80117a6:	4604      	mov	r4, r0
 80117a8:	2800      	cmp	r0, #0
 80117aa:	f040 8146 	bne.w	8011a3a <ecp_double_jac+0x302>
 80117ae:	1d3e      	adds	r6, r7, #4
 80117b0:	4631      	mov	r1, r6
 80117b2:	a806      	add	r0, sp, #24
 80117b4:	f7fd fba1 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	f280 8135 	bge.w	8011a28 <ecp_double_jac+0x2f0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 80117be:	aa03      	add	r2, sp, #12
 80117c0:	4641      	mov	r1, r8
 80117c2:	a809      	add	r0, sp, #36	; 0x24
 80117c4:	f7fd fcaa 	bl	800f11c <mbedtls_mpi_sub_mpi>
 80117c8:	4604      	mov	r4, r0
 80117ca:	2800      	cmp	r0, #0
 80117cc:	f040 8135 	bne.w	8011a3a <ecp_double_jac+0x302>
 80117d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f2c0 8141 	blt.w	8011a5a <ecp_double_jac+0x322>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 80117d8:	aa09      	add	r2, sp, #36	; 0x24
 80117da:	a906      	add	r1, sp, #24
 80117dc:	a803      	add	r0, sp, #12
 80117de:	f7fd fcd6 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80117e2:	4604      	mov	r4, r0
 80117e4:	2800      	cmp	r0, #0
 80117e6:	f040 8128 	bne.w	8011a3a <ecp_double_jac+0x302>
 80117ea:	4639      	mov	r1, r7
 80117ec:	a803      	add	r0, sp, #12
 80117ee:	f7ff ff5d 	bl	80116ac <ecp_modp>
 80117f2:	4604      	mov	r4, r0
 80117f4:	2800      	cmp	r0, #0
 80117f6:	f040 8120 	bne.w	8011a3a <ecp_double_jac+0x302>
 80117fa:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 80117fe:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011800:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011802:	a903      	add	r1, sp, #12
 8011804:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 8011806:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 801180a:	f7fd fd24 	bl	800f256 <mbedtls_mpi_mul_int>
 801180e:	4604      	mov	r4, r0
 8011810:	2800      	cmp	r0, #0
 8011812:	f040 8112 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011816:	4631      	mov	r1, r6
 8011818:	4668      	mov	r0, sp
 801181a:	f7fd fb6e 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 801181e:	2800      	cmp	r0, #0
 8011820:	f280 8128 	bge.w	8011a74 <ecp_double_jac+0x33c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011824:	f108 090c 	add.w	r9, r8, #12
 8011828:	464a      	mov	r2, r9
 801182a:	4649      	mov	r1, r9
 801182c:	a806      	add	r0, sp, #24
 801182e:	f7fd fcae 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011832:	4604      	mov	r4, r0
 8011834:	2800      	cmp	r0, #0
 8011836:	f040 8100 	bne.w	8011a3a <ecp_double_jac+0x302>
 801183a:	4639      	mov	r1, r7
 801183c:	a806      	add	r0, sp, #24
 801183e:	f7ff ff35 	bl	80116ac <ecp_modp>
 8011842:	4604      	mov	r4, r0
 8011844:	2800      	cmp	r0, #0
 8011846:	f040 80f8 	bne.w	8011a3a <ecp_double_jac+0x302>
 801184a:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 801184e:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011850:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011852:	a806      	add	r0, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 8011854:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011858:	f7fd fa2d 	bl	800ecb6 <mbedtls_mpi_shift_l>
 801185c:	4604      	mov	r4, r0
 801185e:	2800      	cmp	r0, #0
 8011860:	f040 80eb 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011864:	1d3e      	adds	r6, r7, #4
 8011866:	4631      	mov	r1, r6
 8011868:	a806      	add	r0, sp, #24
 801186a:	f7fd fb46 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 801186e:	2800      	cmp	r0, #0
 8011870:	f280 8190 	bge.w	8011b94 <ecp_double_jac+0x45c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 8011874:	aa06      	add	r2, sp, #24
 8011876:	4641      	mov	r1, r8
 8011878:	a803      	add	r0, sp, #12
 801187a:	f7fd fc88 	bl	800f18e <mbedtls_mpi_mul_mpi>
 801187e:	4604      	mov	r4, r0
 8011880:	2800      	cmp	r0, #0
 8011882:	f040 80da 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011886:	4639      	mov	r1, r7
 8011888:	a803      	add	r0, sp, #12
 801188a:	f7ff ff0f 	bl	80116ac <ecp_modp>
 801188e:	4604      	mov	r4, r0
 8011890:	2800      	cmp	r0, #0
 8011892:	f040 80d2 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011896:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 801189a:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 801189c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 801189e:	a803      	add	r0, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 80118a0:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 80118a4:	f7fd fa07 	bl	800ecb6 <mbedtls_mpi_shift_l>
 80118a8:	4604      	mov	r4, r0
 80118aa:	2800      	cmp	r0, #0
 80118ac:	f040 80c5 	bne.w	8011a3a <ecp_double_jac+0x302>
 80118b0:	4631      	mov	r1, r6
 80118b2:	a803      	add	r0, sp, #12
 80118b4:	f7fd fb21 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80118b8:	2800      	cmp	r0, #0
 80118ba:	f280 8175 	bge.w	8011ba8 <ecp_double_jac+0x470>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80118be:	aa06      	add	r2, sp, #24
 80118c0:	4611      	mov	r1, r2
 80118c2:	a809      	add	r0, sp, #36	; 0x24
 80118c4:	f7fd fc63 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80118c8:	4604      	mov	r4, r0
 80118ca:	2800      	cmp	r0, #0
 80118cc:	f040 80b5 	bne.w	8011a3a <ecp_double_jac+0x302>
 80118d0:	4639      	mov	r1, r7
 80118d2:	a809      	add	r0, sp, #36	; 0x24
 80118d4:	f7ff feea 	bl	80116ac <ecp_modp>
 80118d8:	4604      	mov	r4, r0
 80118da:	2800      	cmp	r0, #0
 80118dc:	f040 80ad 	bne.w	8011a3a <ecp_double_jac+0x302>
 80118e0:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80118e4:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80118e6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80118e8:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 80118ea:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80118ee:	f7fd f9e2 	bl	800ecb6 <mbedtls_mpi_shift_l>
 80118f2:	4604      	mov	r4, r0
 80118f4:	2800      	cmp	r0, #0
 80118f6:	f040 80a0 	bne.w	8011a3a <ecp_double_jac+0x302>
 80118fa:	4631      	mov	r1, r6
 80118fc:	a809      	add	r0, sp, #36	; 0x24
 80118fe:	f7fd fafc 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8011902:	2800      	cmp	r0, #0
 8011904:	f280 8156 	bge.w	8011bb4 <ecp_double_jac+0x47c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8011908:	466a      	mov	r2, sp
 801190a:	4669      	mov	r1, sp
 801190c:	a806      	add	r0, sp, #24
 801190e:	f7fd fc3e 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011912:	4604      	mov	r4, r0
 8011914:	2800      	cmp	r0, #0
 8011916:	f040 8090 	bne.w	8011a3a <ecp_double_jac+0x302>
 801191a:	4639      	mov	r1, r7
 801191c:	a806      	add	r0, sp, #24
 801191e:	f7ff fec5 	bl	80116ac <ecp_modp>
 8011922:	4604      	mov	r4, r0
 8011924:	2800      	cmp	r0, #0
 8011926:	f040 8088 	bne.w	8011a3a <ecp_double_jac+0x302>
 801192a:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 801192e:	a906      	add	r1, sp, #24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8011930:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011932:	aa03      	add	r2, sp, #12
 8011934:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 8011936:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 801193a:	f7fd fbef 	bl	800f11c <mbedtls_mpi_sub_mpi>
 801193e:	4604      	mov	r4, r0
 8011940:	2800      	cmp	r0, #0
 8011942:	d17a      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011944:	9b06      	ldr	r3, [sp, #24]
 8011946:	2b00      	cmp	r3, #0
 8011948:	f2c0 813a 	blt.w	8011bc0 <ecp_double_jac+0x488>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 801194c:	a906      	add	r1, sp, #24
 801194e:	aa03      	add	r2, sp, #12
 8011950:	4608      	mov	r0, r1
 8011952:	f7fd fbe3 	bl	800f11c <mbedtls_mpi_sub_mpi>
 8011956:	4604      	mov	r4, r0
 8011958:	2800      	cmp	r0, #0
 801195a:	d16e      	bne.n	8011a3a <ecp_double_jac+0x302>
 801195c:	9b06      	ldr	r3, [sp, #24]
 801195e:	2b00      	cmp	r3, #0
 8011960:	f2c0 813b 	blt.w	8011bda <ecp_double_jac+0x4a2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 8011964:	a903      	add	r1, sp, #12
 8011966:	aa06      	add	r2, sp, #24
 8011968:	4608      	mov	r0, r1
 801196a:	f7fd fbd7 	bl	800f11c <mbedtls_mpi_sub_mpi>
 801196e:	4604      	mov	r4, r0
 8011970:	2800      	cmp	r0, #0
 8011972:	d162      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011974:	9b03      	ldr	r3, [sp, #12]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f2c0 813c 	blt.w	8011bf4 <ecp_double_jac+0x4bc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 801197c:	a903      	add	r1, sp, #12
 801197e:	466a      	mov	r2, sp
 8011980:	4608      	mov	r0, r1
 8011982:	f7fd fc04 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011986:	4604      	mov	r4, r0
 8011988:	2800      	cmp	r0, #0
 801198a:	d156      	bne.n	8011a3a <ecp_double_jac+0x302>
 801198c:	4639      	mov	r1, r7
 801198e:	a803      	add	r0, sp, #12
 8011990:	f7ff fe8c 	bl	80116ac <ecp_modp>
 8011994:	4604      	mov	r4, r0
 8011996:	2800      	cmp	r0, #0
 8011998:	d14f      	bne.n	8011a3a <ecp_double_jac+0x302>
 801199a:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 801199e:	a903      	add	r1, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 80119a0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80119a2:	aa09      	add	r2, sp, #36	; 0x24
 80119a4:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 80119a6:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 80119aa:	f7fd fbb7 	bl	800f11c <mbedtls_mpi_sub_mpi>
 80119ae:	4604      	mov	r4, r0
 80119b0:	2800      	cmp	r0, #0
 80119b2:	d142      	bne.n	8011a3a <ecp_double_jac+0x302>
 80119b4:	9b03      	ldr	r3, [sp, #12]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	f2c0 8129 	blt.w	8011c0e <ecp_double_jac+0x4d6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80119bc:	f108 0218 	add.w	r2, r8, #24
 80119c0:	4649      	mov	r1, r9
 80119c2:	a809      	add	r0, sp, #36	; 0x24
 80119c4:	f7fd fbe3 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80119c8:	4604      	mov	r4, r0
 80119ca:	2800      	cmp	r0, #0
 80119cc:	d135      	bne.n	8011a3a <ecp_double_jac+0x302>
 80119ce:	4639      	mov	r1, r7
 80119d0:	a809      	add	r0, sp, #36	; 0x24
 80119d2:	f7ff fe6b 	bl	80116ac <ecp_modp>
 80119d6:	4604      	mov	r4, r0
 80119d8:	bb78      	cbnz	r0, 8011a3a <ecp_double_jac+0x302>
 80119da:	4a12      	ldr	r2, [pc, #72]	; (8011a24 <ecp_double_jac+0x2ec>)
 80119dc:	6853      	ldr	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80119de:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80119e0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80119e2:	a809      	add	r0, sp, #36	; 0x24
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 80119e4:	6053      	str	r3, [r2, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 80119e6:	f7fd f966 	bl	800ecb6 <mbedtls_mpi_shift_l>
 80119ea:	4604      	mov	r4, r0
 80119ec:	bb28      	cbnz	r0, 8011a3a <ecp_double_jac+0x302>
 80119ee:	4631      	mov	r1, r6
 80119f0:	a809      	add	r0, sp, #36	; 0x24
 80119f2:	f7fd fa82 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80119f6:	2800      	cmp	r0, #0
 80119f8:	f280 8116 	bge.w	8011c28 <ecp_double_jac+0x4f0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 80119fc:	a906      	add	r1, sp, #24
 80119fe:	4628      	mov	r0, r5
 8011a00:	f7fd f83c 	bl	800ea7c <mbedtls_mpi_copy>
 8011a04:	4604      	mov	r4, r0
 8011a06:	b9c0      	cbnz	r0, 8011a3a <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 8011a08:	a903      	add	r1, sp, #12
 8011a0a:	f105 000c 	add.w	r0, r5, #12
 8011a0e:	f7fd f835 	bl	800ea7c <mbedtls_mpi_copy>
 8011a12:	4604      	mov	r4, r0
 8011a14:	b988      	cbnz	r0, 8011a3a <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 8011a16:	a909      	add	r1, sp, #36	; 0x24
 8011a18:	f105 0018 	add.w	r0, r5, #24
 8011a1c:	f7fd f82e 	bl	800ea7c <mbedtls_mpi_copy>
 8011a20:	4604      	mov	r4, r0
cleanup:
 8011a22:	e00a      	b.n	8011a3a <ecp_double_jac+0x302>
 8011a24:	200010c4 	.word	0x200010c4
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 8011a28:	a906      	add	r1, sp, #24
 8011a2a:	4632      	mov	r2, r6
 8011a2c:	4608      	mov	r0, r1
 8011a2e:	f7fd fb16 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011a32:	4604      	mov	r4, r0
 8011a34:	2800      	cmp	r0, #0
 8011a36:	f43f aebb 	beq.w	80117b0 <ecp_double_jac+0x78>
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 8011a3a:	4668      	mov	r0, sp
 8011a3c:	f7fc ff9e 	bl	800e97c <mbedtls_mpi_free>
 8011a40:	a803      	add	r0, sp, #12
 8011a42:	f7fc ff9b 	bl	800e97c <mbedtls_mpi_free>
 8011a46:	a806      	add	r0, sp, #24
 8011a48:	f7fc ff98 	bl	800e97c <mbedtls_mpi_free>
 8011a4c:	a809      	add	r0, sp, #36	; 0x24
 8011a4e:	f7fc ff95 	bl	800e97c <mbedtls_mpi_free>
}
 8011a52:	4620      	mov	r0, r4
 8011a54:	b00c      	add	sp, #48	; 0x30
 8011a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	a809      	add	r0, sp, #36	; 0x24
 8011a5e:	f7fd fa8f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	f43f aeb8 	beq.w	80117d8 <ecp_double_jac+0xa0>
 8011a68:	a909      	add	r1, sp, #36	; 0x24
 8011a6a:	4632      	mov	r2, r6
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	f7fd fb33 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8011a72:	e6a9      	b.n	80117c8 <ecp_double_jac+0x90>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011a74:	4632      	mov	r2, r6
 8011a76:	4669      	mov	r1, sp
 8011a78:	4668      	mov	r0, sp
 8011a7a:	f7fd faf0 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011a7e:	e6c6      	b.n	801180e <ecp_double_jac+0xd6>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011a80:	4642      	mov	r2, r8
 8011a82:	4641      	mov	r1, r8
 8011a84:	a803      	add	r0, sp, #12
 8011a86:	f7fd fb82 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d1d4      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011a90:	4639      	mov	r1, r7
 8011a92:	a803      	add	r0, sp, #12
 8011a94:	f7ff fe0a 	bl	80116ac <ecp_modp>
 8011a98:	4604      	mov	r4, r0
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	d1cd      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011a9e:	f8da 3004 	ldr.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011aa2:	2203      	movs	r2, #3
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011aa4:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011aa6:	a903      	add	r1, sp, #12
 8011aa8:	4668      	mov	r0, sp
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 8011aaa:	f8ca 3004 	str.w	r3, [sl, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011aae:	f7fd fbd2 	bl	800f256 <mbedtls_mpi_mul_int>
 8011ab2:	4604      	mov	r4, r0
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d1c0      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011ab8:	1d3e      	adds	r6, r7, #4
 8011aba:	4631      	mov	r1, r6
 8011abc:	4668      	mov	r0, sp
 8011abe:	f7fd fa1c 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8011ac2:	2800      	cmp	r0, #0
 8011ac4:	da5d      	bge.n	8011b82 <ecp_double_jac+0x44a>
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 8011ac6:	f107 0910 	add.w	r9, r7, #16
 8011aca:	2100      	movs	r1, #0
 8011acc:	4648      	mov	r0, r9
 8011ace:	f7fd fa57 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	f43f aea6 	beq.w	8011824 <ecp_double_jac+0xec>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011ad8:	f108 0218 	add.w	r2, r8, #24
 8011adc:	4611      	mov	r1, r2
 8011ade:	a803      	add	r0, sp, #12
 8011ae0:	f7fd fb55 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d1a7      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011aea:	4639      	mov	r1, r7
 8011aec:	a803      	add	r0, sp, #12
 8011aee:	f7ff fddd 	bl	80116ac <ecp_modp>
 8011af2:	4604      	mov	r4, r0
 8011af4:	2800      	cmp	r0, #0
 8011af6:	d1a0      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011af8:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011afc:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011afe:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011b00:	4611      	mov	r1, r2
 8011b02:	a806      	add	r0, sp, #24
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 8011b04:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011b08:	f7fd fb41 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	2800      	cmp	r0, #0
 8011b10:	d193      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011b12:	4639      	mov	r1, r7
 8011b14:	a806      	add	r0, sp, #24
 8011b16:	f7ff fdc9 	bl	80116ac <ecp_modp>
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	d18c      	bne.n	8011a3a <ecp_double_jac+0x302>
 8011b20:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011b24:	464a      	mov	r2, r9
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011b26:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011b28:	a906      	add	r1, sp, #24
 8011b2a:	a803      	add	r0, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 8011b2c:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011b30:	f7fd fb2d 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011b34:	4604      	mov	r4, r0
 8011b36:	2800      	cmp	r0, #0
 8011b38:	f47f af7f 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011b3c:	4639      	mov	r1, r7
 8011b3e:	a803      	add	r0, sp, #12
 8011b40:	f7ff fdb4 	bl	80116ac <ecp_modp>
 8011b44:	4604      	mov	r4, r0
 8011b46:	2800      	cmp	r0, #0
 8011b48:	f47f af77 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011b4c:	f8da 3004 	ldr.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011b50:	aa03      	add	r2, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011b52:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011b54:	4669      	mov	r1, sp
 8011b56:	4668      	mov	r0, sp
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 8011b58:	f8ca 3004 	str.w	r3, [sl, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 8011b5c:	f7fd fabc 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8011b60:	4604      	mov	r4, r0
 8011b62:	2800      	cmp	r0, #0
 8011b64:	f47f af69 	bne.w	8011a3a <ecp_double_jac+0x302>
 8011b68:	4631      	mov	r1, r6
 8011b6a:	4668      	mov	r0, sp
 8011b6c:	f7fd f9c5 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	f6ff ae57 	blt.w	8011824 <ecp_double_jac+0xec>
 8011b76:	4632      	mov	r2, r6
 8011b78:	4669      	mov	r1, sp
 8011b7a:	4668      	mov	r0, sp
 8011b7c:	f7fd fa6f 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011b80:	e7ee      	b.n	8011b60 <ecp_double_jac+0x428>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 8011b82:	4632      	mov	r2, r6
 8011b84:	4669      	mov	r1, sp
 8011b86:	4668      	mov	r0, sp
 8011b88:	f7fd fa69 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d093      	beq.n	8011aba <ecp_double_jac+0x382>
 8011b92:	e752      	b.n	8011a3a <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 8011b94:	a906      	add	r1, sp, #24
 8011b96:	4632      	mov	r2, r6
 8011b98:	4608      	mov	r0, r1
 8011b9a:	f7fd fa60 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	2800      	cmp	r0, #0
 8011ba2:	f43f ae60 	beq.w	8011866 <ecp_double_jac+0x12e>
 8011ba6:	e748      	b.n	8011a3a <ecp_double_jac+0x302>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 8011ba8:	a903      	add	r1, sp, #12
 8011baa:	4632      	mov	r2, r6
 8011bac:	4608      	mov	r0, r1
 8011bae:	f7fd fa56 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011bb2:	e679      	b.n	80118a8 <ecp_double_jac+0x170>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011bb4:	a909      	add	r1, sp, #36	; 0x24
 8011bb6:	4632      	mov	r2, r6
 8011bb8:	4608      	mov	r0, r1
 8011bba:	f7fd fa50 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011bbe:	e698      	b.n	80118f2 <ecp_double_jac+0x1ba>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	a806      	add	r0, sp, #24
 8011bc4:	f7fd f9dc 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	f43f aebf 	beq.w	801194c <ecp_double_jac+0x214>
 8011bce:	a906      	add	r1, sp, #24
 8011bd0:	4632      	mov	r2, r6
 8011bd2:	4608      	mov	r0, r1
 8011bd4:	f7fd fa80 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8011bd8:	e6b1      	b.n	801193e <ecp_double_jac+0x206>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 8011bda:	2100      	movs	r1, #0
 8011bdc:	a806      	add	r0, sp, #24
 8011bde:	f7fd f9cf 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011be2:	2800      	cmp	r0, #0
 8011be4:	f43f aebe 	beq.w	8011964 <ecp_double_jac+0x22c>
 8011be8:	a906      	add	r1, sp, #24
 8011bea:	4632      	mov	r2, r6
 8011bec:	4608      	mov	r0, r1
 8011bee:	f7fd fa73 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8011bf2:	e6b0      	b.n	8011956 <ecp_double_jac+0x21e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 8011bf4:	2100      	movs	r1, #0
 8011bf6:	a803      	add	r0, sp, #12
 8011bf8:	f7fd f9c2 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011bfc:	2800      	cmp	r0, #0
 8011bfe:	f43f aebd 	beq.w	801197c <ecp_double_jac+0x244>
 8011c02:	a903      	add	r1, sp, #12
 8011c04:	4632      	mov	r2, r6
 8011c06:	4608      	mov	r0, r1
 8011c08:	f7fd fa66 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8011c0c:	e6af      	b.n	801196e <ecp_double_jac+0x236>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 8011c0e:	2100      	movs	r1, #0
 8011c10:	a803      	add	r0, sp, #12
 8011c12:	f7fd f9b5 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	f43f aed0 	beq.w	80119bc <ecp_double_jac+0x284>
 8011c1c:	a903      	add	r1, sp, #12
 8011c1e:	4632      	mov	r2, r6
 8011c20:	4608      	mov	r0, r1
 8011c22:	f7fd fa59 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8011c26:	e6c2      	b.n	80119ae <ecp_double_jac+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 8011c28:	a909      	add	r1, sp, #36	; 0x24
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	4608      	mov	r0, r1
 8011c2e:	f7fd fa16 	bl	800f05e <mbedtls_mpi_sub_abs>
 8011c32:	e6da      	b.n	80119ea <ecp_double_jac+0x2b2>

08011c34 <ecp_normalize_jac>:
{
 8011c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8011c38:	f101 0518 	add.w	r5, r1, #24
{
 8011c3c:	b086      	sub	sp, #24
 8011c3e:	4606      	mov	r6, r0
 8011c40:	4688      	mov	r8, r1
    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 8011c42:	4628      	mov	r0, r5
 8011c44:	2100      	movs	r1, #0
 8011c46:	f7fd f99b 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	d05d      	beq.n	8011d0c <ecp_normalize_jac+0xd8>
    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011c50:	4668      	mov	r0, sp
 8011c52:	f7fc fe8c 	bl	800e96e <mbedtls_mpi_init>
 8011c56:	a803      	add	r0, sp, #12
 8011c58:	f7fc fe89 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 8011c5c:	1d32      	adds	r2, r6, #4
 8011c5e:	4629      	mov	r1, r5
 8011c60:	4668      	mov	r0, sp
 8011c62:	f7fd ffbf 	bl	800fbe4 <mbedtls_mpi_inv_mod>
 8011c66:	4604      	mov	r4, r0
 8011c68:	2800      	cmp	r0, #0
 8011c6a:	d149      	bne.n	8011d00 <ecp_normalize_jac+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011c6c:	466a      	mov	r2, sp
 8011c6e:	4669      	mov	r1, sp
 8011c70:	a803      	add	r0, sp, #12
 8011c72:	f7fd fa8c 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011c76:	4604      	mov	r4, r0
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	d141      	bne.n	8011d00 <ecp_normalize_jac+0xcc>
 8011c7c:	4631      	mov	r1, r6
 8011c7e:	a803      	add	r0, sp, #12
 8011c80:	f7ff fd14 	bl	80116ac <ecp_modp>
 8011c84:	4604      	mov	r4, r0
 8011c86:	2800      	cmp	r0, #0
 8011c88:	d13a      	bne.n	8011d00 <ecp_normalize_jac+0xcc>
 8011c8a:	4f22      	ldr	r7, [pc, #136]	; (8011d14 <ecp_normalize_jac+0xe0>)
 8011c8c:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011c8e:	aa03      	add	r2, sp, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011c90:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011c92:	4641      	mov	r1, r8
 8011c94:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 8011c96:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011c98:	f7fd fa79 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	bb78      	cbnz	r0, 8011d00 <ecp_normalize_jac+0xcc>
 8011ca0:	4631      	mov	r1, r6
 8011ca2:	4640      	mov	r0, r8
 8011ca4:	f7ff fd02 	bl	80116ac <ecp_modp>
 8011ca8:	4604      	mov	r4, r0
 8011caa:	bb48      	cbnz	r0, 8011d00 <ecp_normalize_jac+0xcc>
 8011cac:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011cae:	f108 080c 	add.w	r8, r8, #12
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011cb2:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011cb4:	aa03      	add	r2, sp, #12
 8011cb6:	4641      	mov	r1, r8
 8011cb8:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 8011cba:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011cbc:	f7fd fa67 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	b9e8      	cbnz	r0, 8011d00 <ecp_normalize_jac+0xcc>
 8011cc4:	4631      	mov	r1, r6
 8011cc6:	4640      	mov	r0, r8
 8011cc8:	f7ff fcf0 	bl	80116ac <ecp_modp>
 8011ccc:	4604      	mov	r4, r0
 8011cce:	b9b8      	cbnz	r0, 8011d00 <ecp_normalize_jac+0xcc>
 8011cd0:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011cd2:	466a      	mov	r2, sp
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011cd4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011cd6:	4641      	mov	r1, r8
 8011cd8:	4640      	mov	r0, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 8011cda:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011cdc:	f7fd fa57 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	b968      	cbnz	r0, 8011d00 <ecp_normalize_jac+0xcc>
 8011ce4:	4631      	mov	r1, r6
 8011ce6:	4640      	mov	r0, r8
 8011ce8:	f7ff fce0 	bl	80116ac <ecp_modp>
 8011cec:	4604      	mov	r4, r0
 8011cee:	b938      	cbnz	r0, 8011d00 <ecp_normalize_jac+0xcc>
 8011cf0:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011cf2:	2101      	movs	r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011cf4:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011cf6:	4628      	mov	r0, r5
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 8011cf8:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8011cfa:	f7fc ff1c 	bl	800eb36 <mbedtls_mpi_lset>
 8011cfe:	4604      	mov	r4, r0
    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011d00:	4668      	mov	r0, sp
 8011d02:	f7fc fe3b 	bl	800e97c <mbedtls_mpi_free>
 8011d06:	a803      	add	r0, sp, #12
 8011d08:	f7fc fe38 	bl	800e97c <mbedtls_mpi_free>
}
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	b006      	add	sp, #24
 8011d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d14:	200010c4 	.word	0x200010c4

08011d18 <ecp_normalize_jac_many>:
{
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( t_len < 2 )
 8011d1c:	2a01      	cmp	r2, #1
{
 8011d1e:	b08d      	sub	sp, #52	; 0x34
 8011d20:	4605      	mov	r5, r0
 8011d22:	4688      	mov	r8, r1
 8011d24:	4617      	mov	r7, r2
    if( t_len < 2 )
 8011d26:	d807      	bhi.n	8011d38 <ecp_normalize_jac_many+0x20>
        return( ecp_normalize_jac( grp, *T ) );
 8011d28:	6809      	ldr	r1, [r1, #0]
 8011d2a:	f7ff ff83 	bl	8011c34 <ecp_normalize_jac>
 8011d2e:	4683      	mov	fp, r0
}
 8011d30:	4658      	mov	r0, fp
 8011d32:	b00d      	add	sp, #52	; 0x34
 8011d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ( c = mbedtls_calloc( t_len, sizeof( mbedtls_mpi ) ) ) == NULL )
 8011d38:	4b8f      	ldr	r3, [pc, #572]	; (8011f78 <ecp_normalize_jac_many+0x260>)
 8011d3a:	210c      	movs	r1, #12
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	4610      	mov	r0, r2
 8011d40:	4798      	blx	r3
 8011d42:	4606      	mov	r6, r0
 8011d44:	2800      	cmp	r0, #0
 8011d46:	f000 8114 	beq.w	8011f72 <ecp_normalize_jac_many+0x25a>
    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 8011d4a:	a803      	add	r0, sp, #12
 8011d4c:	f7fc fe0f 	bl	800e96e <mbedtls_mpi_init>
 8011d50:	a806      	add	r0, sp, #24
 8011d52:	f7fc fe0c 	bl	800e96e <mbedtls_mpi_init>
 8011d56:	a809      	add	r0, sp, #36	; 0x24
 8011d58:	f7fc fe09 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 8011d5c:	f8d8 1000 	ldr.w	r1, [r8]
 8011d60:	4630      	mov	r0, r6
 8011d62:	3118      	adds	r1, #24
 8011d64:	f7fc fe8a 	bl	800ea7c <mbedtls_mpi_copy>
 8011d68:	4683      	mov	fp, r0
 8011d6a:	2800      	cmp	r0, #0
 8011d6c:	d140      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
        MOD_MUL( c[i] );
 8011d6e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8011f80 <ecp_normalize_jac_many+0x268>
 8011d72:	f108 0404 	add.w	r4, r8, #4
 8011d76:	f106 0a0c 	add.w	sl, r6, #12
 8011d7a:	eb08 0887 	add.w	r8, r8, r7, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 8011d7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8011d82:	f1aa 010c 	sub.w	r1, sl, #12
 8011d86:	3218      	adds	r2, #24
 8011d88:	4650      	mov	r0, sl
 8011d8a:	f7fd fa00 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011d8e:	4683      	mov	fp, r0
 8011d90:	bb70      	cbnz	r0, 8011df0 <ecp_normalize_jac_many+0xd8>
        MOD_MUL( c[i] );
 8011d92:	4629      	mov	r1, r5
 8011d94:	4650      	mov	r0, sl
 8011d96:	f7ff fc89 	bl	80116ac <ecp_modp>
 8011d9a:	4683      	mov	fp, r0
 8011d9c:	bb40      	cbnz	r0, 8011df0 <ecp_normalize_jac_many+0xd8>
 8011d9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    for( i = 1; i < t_len; i++ )
 8011da2:	4544      	cmp	r4, r8
        MOD_MUL( c[i] );
 8011da4:	f103 0301 	add.w	r3, r3, #1
 8011da8:	f8c9 3004 	str.w	r3, [r9, #4]
    for( i = 1; i < t_len; i++ )
 8011dac:	f10a 0a0c 	add.w	sl, sl, #12
 8011db0:	d1e5      	bne.n	8011d7e <ecp_normalize_jac_many+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[t_len-1], &grp->P ) );
 8011db2:	f04f 080c 	mov.w	r8, #12
 8011db6:	fb08 6107 	mla	r1, r8, r7, r6
 8011dba:	1d2a      	adds	r2, r5, #4
 8011dbc:	390c      	subs	r1, #12
 8011dbe:	eb0d 0008 	add.w	r0, sp, r8
 8011dc2:	f7fd ff0f 	bl	800fbe4 <mbedtls_mpi_inv_mod>
 8011dc6:	4683      	mov	fp, r0
 8011dc8:	b990      	cbnz	r0, 8011df0 <ecp_normalize_jac_many+0xd8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011dca:	f8cd 8000 	str.w	r8, [sp]
 8011dce:	f1a6 030c 	sub.w	r3, r6, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011dd2:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8011f80 <ecp_normalize_jac_many+0x268>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011dd6:	9301      	str	r3, [sp, #4]
    for( i = t_len - 1; ; i-- )
 8011dd8:	f107 3aff 	add.w	sl, r7, #4294967295
        if( i == 0 ) {
 8011ddc:	f1ba 0f00 	cmp.w	sl, #0
 8011de0:	d11e      	bne.n	8011e20 <ecp_normalize_jac_many+0x108>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 8011de2:	a903      	add	r1, sp, #12
 8011de4:	a806      	add	r0, sp, #24
 8011de6:	f7fc fe49 	bl	800ea7c <mbedtls_mpi_copy>
 8011dea:	4683      	mov	fp, r0
 8011dec:	2800      	cmp	r0, #0
 8011dee:	d044      	beq.n	8011e7a <ecp_normalize_jac_many+0x162>
    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 8011df0:	a803      	add	r0, sp, #12
 8011df2:	f7fc fdc3 	bl	800e97c <mbedtls_mpi_free>
 8011df6:	a806      	add	r0, sp, #24
 8011df8:	f7fc fdc0 	bl	800e97c <mbedtls_mpi_free>
 8011dfc:	a809      	add	r0, sp, #36	; 0x24
 8011dfe:	f7fc fdbd 	bl	800e97c <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011e02:	220c      	movs	r2, #12
 8011e04:	4634      	mov	r4, r6
 8011e06:	fb02 6707 	mla	r7, r2, r7, r6
        mbedtls_mpi_free( &c[i] );
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	340c      	adds	r4, #12
 8011e0e:	f7fc fdb5 	bl	800e97c <mbedtls_mpi_free>
    for( i = 0; i < t_len; i++ )
 8011e12:	42a7      	cmp	r7, r4
 8011e14:	d1f9      	bne.n	8011e0a <ecp_normalize_jac_many+0xf2>
    mbedtls_free( c );
 8011e16:	4a59      	ldr	r2, [pc, #356]	; (8011f7c <ecp_normalize_jac_many+0x264>)
 8011e18:	4630      	mov	r0, r6
 8011e1a:	6812      	ldr	r2, [r2, #0]
 8011e1c:	4790      	blx	r2
    return( ret );
 8011e1e:	e787      	b.n	8011d30 <ecp_normalize_jac_many+0x18>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011e20:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011e24:	a903      	add	r1, sp, #12
 8011e26:	fb03 220a 	mla	r2, r3, sl, r2
 8011e2a:	a806      	add	r0, sp, #24
 8011e2c:	f7fd f9af 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011e30:	4683      	mov	fp, r0
 8011e32:	2800      	cmp	r0, #0
 8011e34:	d1dc      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011e36:	4629      	mov	r1, r5
 8011e38:	a806      	add	r0, sp, #24
 8011e3a:	f7ff fc37 	bl	80116ac <ecp_modp>
 8011e3e:	4683      	mov	fp, r0
 8011e40:	2800      	cmp	r0, #0
 8011e42:	d1d5      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011e44:	f8d9 3004 	ldr.w	r3, [r9, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011e48:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8011e4c:	a903      	add	r1, sp, #12
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011e4e:	3301      	adds	r3, #1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011e50:	3218      	adds	r2, #24
 8011e52:	4608      	mov	r0, r1
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 8011e54:	f8c9 3004 	str.w	r3, [r9, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 8011e58:	f7fd f999 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011e5c:	4683      	mov	fp, r0
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d1c6      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011e62:	4629      	mov	r1, r5
 8011e64:	a803      	add	r0, sp, #12
 8011e66:	f7ff fc21 	bl	80116ac <ecp_modp>
 8011e6a:	4683      	mov	fp, r0
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	d1bf      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011e70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011e74:	3301      	adds	r3, #1
 8011e76:	f8c9 3004 	str.w	r3, [r9, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011e7a:	aa06      	add	r2, sp, #24
 8011e7c:	4611      	mov	r1, r2
 8011e7e:	a809      	add	r0, sp, #36	; 0x24
 8011e80:	f7fd f985 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011e84:	4683      	mov	fp, r0
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d1b2      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011e8a:	4629      	mov	r1, r5
 8011e8c:	a809      	add	r0, sp, #36	; 0x24
 8011e8e:	f7ff fc0d 	bl	80116ac <ecp_modp>
 8011e92:	4683      	mov	fp, r0
 8011e94:	2800      	cmp	r0, #0
 8011e96:	d1ab      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011e98:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011e9c:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011ea0:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011ea2:	aa09      	add	r2, sp, #36	; 0x24
 8011ea4:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 8011ea6:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011eaa:	f7fd f970 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011eae:	4683      	mov	fp, r0
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d19d      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011eb4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011eb8:	4629      	mov	r1, r5
 8011eba:	f7ff fbf7 	bl	80116ac <ecp_modp>
 8011ebe:	4683      	mov	fp, r0
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	d195      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011ec4:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011ec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011ecc:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011ece:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011ed0:	aa09      	add	r2, sp, #36	; 0x24
 8011ed2:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 8011ed4:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011ed8:	f7fd f959 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011edc:	4683      	mov	fp, r0
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	d186      	bne.n	8011df0 <ecp_normalize_jac_many+0xd8>
 8011ee2:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	300c      	adds	r0, #12
 8011eea:	f7ff fbdf 	bl	80116ac <ecp_modp>
 8011eee:	4683      	mov	fp, r0
 8011ef0:	2800      	cmp	r0, #0
 8011ef2:	f47f af7d 	bne.w	8011df0 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011ef6:	f854 1c04 	ldr.w	r1, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011efa:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011efe:	310c      	adds	r1, #12
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f00:	3301      	adds	r3, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011f02:	aa06      	add	r2, sp, #24
 8011f04:	4608      	mov	r0, r1
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 8011f06:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011f0a:	f7fd f940 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8011f0e:	4683      	mov	fp, r0
 8011f10:	2800      	cmp	r0, #0
 8011f12:	f47f af6d 	bne.w	8011df0 <ecp_normalize_jac_many+0xd8>
 8011f16:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011f1a:	4629      	mov	r1, r5
 8011f1c:	300c      	adds	r0, #12
 8011f1e:	f7ff fbc5 	bl	80116ac <ecp_modp>
 8011f22:	4683      	mov	fp, r0
 8011f24:	2800      	cmp	r0, #0
 8011f26:	f47f af63 	bne.w	8011df0 <ecp_normalize_jac_many+0xd8>
 8011f2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011f2e:	68a9      	ldr	r1, [r5, #8]
 8011f30:	f854 0c04 	ldr.w	r0, [r4, #-4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 8011f34:	3301      	adds	r3, #1
 8011f36:	f8c8 3004 	str.w	r3, [r8, #4]
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 8011f3a:	f7fc fd67 	bl	800ea0c <mbedtls_mpi_shrink>
 8011f3e:	4683      	mov	fp, r0
 8011f40:	2800      	cmp	r0, #0
 8011f42:	f47f af55 	bne.w	8011df0 <ecp_normalize_jac_many+0xd8>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 8011f46:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8011f4a:	68a9      	ldr	r1, [r5, #8]
 8011f4c:	300c      	adds	r0, #12
 8011f4e:	f7fc fd5d 	bl	800ea0c <mbedtls_mpi_shrink>
 8011f52:	4683      	mov	fp, r0
 8011f54:	2800      	cmp	r0, #0
 8011f56:	f47f af4b 	bne.w	8011df0 <ecp_normalize_jac_many+0xd8>
        mbedtls_mpi_free( &T[i]->Z );
 8011f5a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8011f5e:	3018      	adds	r0, #24
 8011f60:	f7fc fd0c 	bl	800e97c <mbedtls_mpi_free>
        if( i == 0 )
 8011f64:	f1ba 0f00 	cmp.w	sl, #0
 8011f68:	f43f af42 	beq.w	8011df0 <ecp_normalize_jac_many+0xd8>
    for( i = t_len - 1; ; i-- )
 8011f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
        if( i == 0 ) {
 8011f70:	e734      	b.n	8011ddc <ecp_normalize_jac_many+0xc4>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 8011f72:	f8df b010 	ldr.w	fp, [pc, #16]	; 8011f84 <ecp_normalize_jac_many+0x26c>
 8011f76:	e6db      	b.n	8011d30 <ecp_normalize_jac_many+0x18>
 8011f78:	200005a0 	.word	0x200005a0
 8011f7c:	200005a4 	.word	0x200005a4
 8011f80:	200010c4 	.word	0x200010c4
 8011f84:	ffffb280 	.word	0xffffb280

08011f88 <mbedtls_ecp_point_init.part.0>:
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	4604      	mov	r4, r0
    mbedtls_mpi_init( &pt->X );
 8011f8c:	f7fc fcef 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 8011f90:	f104 000c 	add.w	r0, r4, #12
 8011f94:	f7fc fceb 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 8011f98:	f104 0018 	add.w	r0, r4, #24
}
 8011f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_init( &pt->Z );
 8011fa0:	f7fc bce5 	b.w	800e96e <mbedtls_mpi_init>

08011fa4 <mbedtls_ecp_point_free.part.0>:
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	4604      	mov	r4, r0
    mbedtls_mpi_free( &( pt->X ) );
 8011fa8:	f7fc fce8 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 8011fac:	f104 000c 	add.w	r0, r4, #12
 8011fb0:	f7fc fce4 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 8011fb4:	f104 0018 	add.w	r0, r4, #24
}
 8011fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &( pt->Z ) );
 8011fbc:	f7fc bcde 	b.w	800e97c <mbedtls_mpi_free>

08011fc0 <mbedtls_ecp_grp_id_list>:
    if( ! init_done )
 8011fc0:	4a0a      	ldr	r2, [pc, #40]	; (8011fec <mbedtls_ecp_grp_id_list+0x2c>)
 8011fc2:	6893      	ldr	r3, [r2, #8]
{
 8011fc4:	b530      	push	{r4, r5, lr}
    if( ! init_done )
 8011fc6:	b95b      	cbnz	r3, 8011fe0 <mbedtls_ecp_grp_id_list+0x20>
             curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011fc8:	4c09      	ldr	r4, [pc, #36]	; (8011ff0 <mbedtls_ecp_grp_id_list+0x30>)
 8011fca:	f102 000c 	add.w	r0, r2, #12
 8011fce:	250c      	movs	r5, #12
 8011fd0:	fb05 f103 	mul.w	r1, r5, r3
 8011fd4:	5d09      	ldrb	r1, [r1, r4]
        for( curve_info = mbedtls_ecp_curve_list();
 8011fd6:	b929      	cbnz	r1, 8011fe4 <mbedtls_ecp_grp_id_list+0x24>
        ecp_supported_grp_id[i] = MBEDTLS_ECP_DP_NONE;
 8011fd8:	4413      	add	r3, r2
 8011fda:	7319      	strb	r1, [r3, #12]
        init_done = 1;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	6093      	str	r3, [r2, #8]
}
 8011fe0:	4804      	ldr	r0, [pc, #16]	; (8011ff4 <mbedtls_ecp_grp_id_list+0x34>)
 8011fe2:	bd30      	pop	{r4, r5, pc}
            ecp_supported_grp_id[i++] = curve_info->grp_id;
 8011fe4:	f800 1b01 	strb.w	r1, [r0], #1
 8011fe8:	3301      	adds	r3, #1
             curve_info++ )
 8011fea:	e7f1      	b.n	8011fd0 <mbedtls_ecp_grp_id_list+0x10>
 8011fec:	200010c4 	.word	0x200010c4
 8011ff0:	0802ac38 	.word	0x0802ac38
 8011ff4:	200010d0 	.word	0x200010d0

08011ff8 <mbedtls_ecp_curve_info_from_grp_id>:
{
 8011ff8:	4602      	mov	r2, r0
    for( curve_info = mbedtls_ecp_curve_list();
 8011ffa:	4804      	ldr	r0, [pc, #16]	; (801200c <mbedtls_ecp_curve_info_from_grp_id+0x14>)
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8011ffc:	7803      	ldrb	r3, [r0, #0]
    for( curve_info = mbedtls_ecp_curve_list();
 8011ffe:	b90b      	cbnz	r3, 8012004 <mbedtls_ecp_curve_info_from_grp_id+0xc>
    return( NULL );
 8012000:	4618      	mov	r0, r3
}
 8012002:	4770      	bx	lr
        if( curve_info->grp_id == grp_id )
 8012004:	4293      	cmp	r3, r2
 8012006:	d0fc      	beq.n	8012002 <mbedtls_ecp_curve_info_from_grp_id+0xa>
         curve_info++ )
 8012008:	300c      	adds	r0, #12
 801200a:	e7f7      	b.n	8011ffc <mbedtls_ecp_curve_info_from_grp_id+0x4>
 801200c:	0802ac38 	.word	0x0802ac38

08012010 <mbedtls_ecp_curve_info_from_tls_id>:
         curve_info->grp_id != MBEDTLS_ECP_DP_NONE;
 8012010:	4905      	ldr	r1, [pc, #20]	; (8012028 <mbedtls_ecp_curve_info_from_tls_id+0x18>)
{
 8012012:	4602      	mov	r2, r0
        if( curve_info->tls_id == tls_id )
 8012014:	884b      	ldrh	r3, [r1, #2]
 8012016:	4293      	cmp	r3, r2
 8012018:	4608      	mov	r0, r1
 801201a:	d003      	beq.n	8012024 <mbedtls_ecp_curve_info_from_tls_id+0x14>
    for( curve_info = mbedtls_ecp_curve_list();
 801201c:	7b00      	ldrb	r0, [r0, #12]
 801201e:	310c      	adds	r1, #12
 8012020:	2800      	cmp	r0, #0
 8012022:	d1f7      	bne.n	8012014 <mbedtls_ecp_curve_info_from_tls_id+0x4>
}
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	0802ac38 	.word	0x0802ac38

0801202c <mbedtls_ecp_point_init>:
    if( pt == NULL )
 801202c:	b108      	cbz	r0, 8012032 <mbedtls_ecp_point_init+0x6>
 801202e:	f7ff bfab 	b.w	8011f88 <mbedtls_ecp_point_init.part.0>
}
 8012032:	4770      	bx	lr

08012034 <mbedtls_ecp_group_init>:
    if( grp == NULL )
 8012034:	b118      	cbz	r0, 801203e <mbedtls_ecp_group_init+0xa>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 8012036:	227c      	movs	r2, #124	; 0x7c
 8012038:	2100      	movs	r1, #0
 801203a:	f010 b9fd 	b.w	8022438 <memset>
}
 801203e:	4770      	bx	lr

08012040 <mbedtls_ecp_keypair_init>:
{
 8012040:	b510      	push	{r4, lr}
    if( key == NULL )
 8012042:	4604      	mov	r4, r0
 8012044:	b158      	cbz	r0, 801205e <mbedtls_ecp_keypair_init+0x1e>
    mbedtls_ecp_group_init( &key->grp );
 8012046:	f7ff fff5 	bl	8012034 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 801204a:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801204e:	f7fc fc8e 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 8012052:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 8012056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_init( &key->Q );
 801205a:	f7ff bfe7 	b.w	801202c <mbedtls_ecp_point_init>
}
 801205e:	bd10      	pop	{r4, pc}

08012060 <mbedtls_ecp_point_free>:
    if( pt == NULL )
 8012060:	b108      	cbz	r0, 8012066 <mbedtls_ecp_point_free+0x6>
 8012062:	f7ff bf9f 	b.w	8011fa4 <mbedtls_ecp_point_free.part.0>
}
 8012066:	4770      	bx	lr

08012068 <mbedtls_ecp_group_free>:
{
 8012068:	b570      	push	{r4, r5, r6, lr}
    if( grp == NULL )
 801206a:	4604      	mov	r4, r0
 801206c:	b1e0      	cbz	r0, 80120a8 <mbedtls_ecp_group_free+0x40>
    if( grp->h != 1 )
 801206e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012070:	2b01      	cmp	r3, #1
 8012072:	d012      	beq.n	801209a <mbedtls_ecp_group_free+0x32>
        mbedtls_mpi_free( &grp->P );
 8012074:	3004      	adds	r0, #4
 8012076:	f7fc fc81 	bl	800e97c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 801207a:	f104 0010 	add.w	r0, r4, #16
 801207e:	f7fc fc7d 	bl	800e97c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 8012082:	f104 001c 	add.w	r0, r4, #28
 8012086:	f7fc fc79 	bl	800e97c <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 801208a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801208e:	f7ff ffe7 	bl	8012060 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 8012092:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8012096:	f7fc fc71 	bl	800e97c <mbedtls_mpi_free>
    if( grp->T != NULL )
 801209a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801209c:	b993      	cbnz	r3, 80120c4 <mbedtls_ecp_group_free+0x5c>
 801209e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80120a2:	2200      	movs	r2, #0
 80120a4:	429c      	cmp	r4, r3
 80120a6:	d110      	bne.n	80120ca <mbedtls_ecp_group_free+0x62>
}
 80120a8:	bd70      	pop	{r4, r5, r6, pc}
            mbedtls_ecp_point_free( &grp->T[i] );
 80120aa:	fb06 0005 	mla	r0, r6, r5, r0
 80120ae:	f7ff ffd7 	bl	8012060 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 80120b2:	3501      	adds	r5, #1
 80120b4:	e9d4 031d 	ldrd	r0, r3, [r4, #116]	; 0x74
 80120b8:	42ab      	cmp	r3, r5
 80120ba:	d8f6      	bhi.n	80120aa <mbedtls_ecp_group_free+0x42>
        mbedtls_free( grp->T );
 80120bc:	4b04      	ldr	r3, [pc, #16]	; (80120d0 <mbedtls_ecp_group_free+0x68>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4798      	blx	r3
 80120c2:	e7ec      	b.n	801209e <mbedtls_ecp_group_free+0x36>
        for( i = 0; i < grp->T_size; i++ )
 80120c4:	2500      	movs	r5, #0
            mbedtls_ecp_point_free( &grp->T[i] );
 80120c6:	2624      	movs	r6, #36	; 0x24
 80120c8:	e7f4      	b.n	80120b4 <mbedtls_ecp_group_free+0x4c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80120ca:	f804 2b01 	strb.w	r2, [r4], #1
 80120ce:	e7e9      	b.n	80120a4 <mbedtls_ecp_group_free+0x3c>
 80120d0:	200005a4 	.word	0x200005a4

080120d4 <mbedtls_ecp_keypair_free>:
{
 80120d4:	b510      	push	{r4, lr}
    if( key == NULL )
 80120d6:	4604      	mov	r4, r0
 80120d8:	b158      	cbz	r0, 80120f2 <mbedtls_ecp_keypair_free+0x1e>
    mbedtls_ecp_group_free( &key->grp );
 80120da:	f7ff ffc5 	bl	8012068 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 80120de:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 80120e2:	f7fc fc4b 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 80120e6:	f104 0088 	add.w	r0, r4, #136	; 0x88
}
 80120ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_ecp_point_free( &key->Q );
 80120ee:	f7ff bfb7 	b.w	8012060 <mbedtls_ecp_point_free>
}
 80120f2:	bd10      	pop	{r4, pc}

080120f4 <mbedtls_ecp_copy>:
{
 80120f4:	b538      	push	{r3, r4, r5, lr}
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 80120fa:	f7fc fcbf 	bl	800ea7c <mbedtls_mpi_copy>
 80120fe:	b970      	cbnz	r0, 801211e <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 8012100:	f105 010c 	add.w	r1, r5, #12
 8012104:	f104 000c 	add.w	r0, r4, #12
 8012108:	f7fc fcb8 	bl	800ea7c <mbedtls_mpi_copy>
 801210c:	b938      	cbnz	r0, 801211e <mbedtls_ecp_copy+0x2a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 801210e:	f105 0118 	add.w	r1, r5, #24
 8012112:	f104 0018 	add.w	r0, r4, #24
}
 8012116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 801211a:	f7fc bcaf 	b.w	800ea7c <mbedtls_mpi_copy>
}
 801211e:	bd38      	pop	{r3, r4, r5, pc}

08012120 <mbedtls_ecp_group_copy>:
    return mbedtls_ecp_group_load( dst, src->id );
 8012120:	7809      	ldrb	r1, [r1, #0]
 8012122:	f001 bdc9 	b.w	8013cb8 <mbedtls_ecp_group_load>

08012126 <mbedtls_ecp_set_zero>:
{
 8012126:	b510      	push	{r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 8012128:	2101      	movs	r1, #1
{
 801212a:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 801212c:	f7fc fd03 	bl	800eb36 <mbedtls_mpi_lset>
 8012130:	b960      	cbnz	r0, 801214c <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 8012132:	2101      	movs	r1, #1
 8012134:	f104 000c 	add.w	r0, r4, #12
 8012138:	f7fc fcfd 	bl	800eb36 <mbedtls_mpi_lset>
 801213c:	b930      	cbnz	r0, 801214c <mbedtls_ecp_set_zero+0x26>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 801213e:	4601      	mov	r1, r0
 8012140:	f104 0018 	add.w	r0, r4, #24
}
 8012144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 8012148:	f7fc bcf5 	b.w	800eb36 <mbedtls_mpi_lset>
}
 801214c:	bd10      	pop	{r4, pc}
	...

08012150 <ecp_add_mixed>:
{
 8012150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add_count++;
 8012154:	4e0c      	ldr	r6, [pc, #48]	; (8012188 <ecp_add_mixed+0x38>)
{
 8012156:	469a      	mov	sl, r3
    add_count++;
 8012158:	6973      	ldr	r3, [r6, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 801215a:	f102 0918 	add.w	r9, r2, #24
{
 801215e:	b097      	sub	sp, #92	; 0x5c
 8012160:	4607      	mov	r7, r0
 8012162:	460d      	mov	r5, r1
    add_count++;
 8012164:	3301      	adds	r3, #1
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8012166:	2100      	movs	r1, #0
 8012168:	4648      	mov	r0, r9
{
 801216a:	4690      	mov	r8, r2
    add_count++;
 801216c:	6173      	str	r3, [r6, #20]
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 801216e:	f7fc ff07 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012172:	b958      	cbnz	r0, 801218c <ecp_add_mixed+0x3c>
        return( mbedtls_ecp_copy( R, Q ) );
 8012174:	4651      	mov	r1, sl
        return( mbedtls_ecp_copy( R, P ) );
 8012176:	4628      	mov	r0, r5
 8012178:	f7ff ffbc 	bl	80120f4 <mbedtls_ecp_copy>
 801217c:	4604      	mov	r4, r0
}
 801217e:	4620      	mov	r0, r4
 8012180:	b017      	add	sp, #92	; 0x5c
 8012182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012186:	bf00      	nop
 8012188:	200010c4 	.word	0x200010c4
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 801218c:	f8da 3020 	ldr.w	r3, [sl, #32]
 8012190:	2b00      	cmp	r3, #0
 8012192:	f040 8170 	bne.w	8012476 <ecp_add_mixed+0x326>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 8012196:	a801      	add	r0, sp, #4
 8012198:	f7fc fbe9 	bl	800e96e <mbedtls_mpi_init>
 801219c:	a804      	add	r0, sp, #16
 801219e:	f7fc fbe6 	bl	800e96e <mbedtls_mpi_init>
 80121a2:	a807      	add	r0, sp, #28
 80121a4:	f7fc fbe3 	bl	800e96e <mbedtls_mpi_init>
 80121a8:	a80a      	add	r0, sp, #40	; 0x28
 80121aa:	f7fc fbe0 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 80121ae:	a80d      	add	r0, sp, #52	; 0x34
 80121b0:	f7fc fbdd 	bl	800e96e <mbedtls_mpi_init>
 80121b4:	a810      	add	r0, sp, #64	; 0x40
 80121b6:	f7fc fbda 	bl	800e96e <mbedtls_mpi_init>
 80121ba:	a813      	add	r0, sp, #76	; 0x4c
 80121bc:	f7fc fbd7 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 80121c0:	464a      	mov	r2, r9
 80121c2:	4649      	mov	r1, r9
 80121c4:	a801      	add	r0, sp, #4
 80121c6:	f7fc ffe2 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80121ca:	4604      	mov	r4, r0
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f040 8179 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80121d2:	4639      	mov	r1, r7
 80121d4:	a801      	add	r0, sp, #4
 80121d6:	f7ff fa69 	bl	80116ac <ecp_modp>
 80121da:	4604      	mov	r4, r0
 80121dc:	2800      	cmp	r0, #0
 80121de:	f040 8171 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80121e2:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80121e4:	464a      	mov	r2, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 80121e6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80121e8:	a901      	add	r1, sp, #4
 80121ea:	a804      	add	r0, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 80121ec:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 80121ee:	f7fc ffce 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80121f2:	4604      	mov	r4, r0
 80121f4:	2800      	cmp	r0, #0
 80121f6:	f040 8165 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80121fa:	4639      	mov	r1, r7
 80121fc:	a804      	add	r0, sp, #16
 80121fe:	f7ff fa55 	bl	80116ac <ecp_modp>
 8012202:	4604      	mov	r4, r0
 8012204:	2800      	cmp	r0, #0
 8012206:	f040 815d 	bne.w	80124c4 <ecp_add_mixed+0x374>
 801220a:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 801220c:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 801220e:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8012210:	4652      	mov	r2, sl
 8012212:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 8012214:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8012216:	f7fc ffba 	bl	800f18e <mbedtls_mpi_mul_mpi>
 801221a:	4604      	mov	r4, r0
 801221c:	2800      	cmp	r0, #0
 801221e:	f040 8151 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012222:	4639      	mov	r1, r7
 8012224:	a801      	add	r0, sp, #4
 8012226:	f7ff fa41 	bl	80116ac <ecp_modp>
 801222a:	4604      	mov	r4, r0
 801222c:	2800      	cmp	r0, #0
 801222e:	f040 8149 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012232:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012234:	a904      	add	r1, sp, #16
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 8012236:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012238:	f10a 020c 	add.w	r2, sl, #12
 801223c:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 801223e:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012240:	f7fc ffa5 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012244:	4604      	mov	r4, r0
 8012246:	2800      	cmp	r0, #0
 8012248:	f040 813c 	bne.w	80124c4 <ecp_add_mixed+0x374>
 801224c:	4639      	mov	r1, r7
 801224e:	a804      	add	r0, sp, #16
 8012250:	f7ff fa2c 	bl	80116ac <ecp_modp>
 8012254:	4604      	mov	r4, r0
 8012256:	2800      	cmp	r0, #0
 8012258:	f040 8134 	bne.w	80124c4 <ecp_add_mixed+0x374>
 801225c:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 801225e:	a901      	add	r1, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012260:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8012262:	4642      	mov	r2, r8
 8012264:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 8012266:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 8012268:	f7fc ff58 	bl	800f11c <mbedtls_mpi_sub_mpi>
 801226c:	4604      	mov	r4, r0
 801226e:	2800      	cmp	r0, #0
 8012270:	f040 8128 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012274:	f107 0a04 	add.w	sl, r7, #4
 8012278:	9b01      	ldr	r3, [sp, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	f2c0 8112 	blt.w	80124a4 <ecp_add_mixed+0x354>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 8012280:	a904      	add	r1, sp, #16
 8012282:	f108 0a0c 	add.w	sl, r8, #12
 8012286:	4652      	mov	r2, sl
 8012288:	4608      	mov	r0, r1
 801228a:	f7fc ff47 	bl	800f11c <mbedtls_mpi_sub_mpi>
 801228e:	4604      	mov	r4, r0
 8012290:	2800      	cmp	r0, #0
 8012292:	f040 8117 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012296:	f107 0b04 	add.w	fp, r7, #4
 801229a:	9b04      	ldr	r3, [sp, #16]
 801229c:	2b00      	cmp	r3, #0
 801229e:	f2c0 8127 	blt.w	80124f0 <ecp_add_mixed+0x3a0>
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 80122a2:	2100      	movs	r1, #0
 80122a4:	a801      	add	r0, sp, #4
 80122a6:	f7fc fe6b 	bl	800ef80 <mbedtls_mpi_cmp_int>
 80122aa:	4601      	mov	r1, r0
 80122ac:	2800      	cmp	r0, #0
 80122ae:	f000 8130 	beq.w	8012512 <ecp_add_mixed+0x3c2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80122b2:	aa01      	add	r2, sp, #4
 80122b4:	4649      	mov	r1, r9
 80122b6:	a813      	add	r0, sp, #76	; 0x4c
 80122b8:	f7fc ff69 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80122bc:	4604      	mov	r4, r0
 80122be:	2800      	cmp	r0, #0
 80122c0:	f040 8100 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80122c4:	4639      	mov	r1, r7
 80122c6:	a813      	add	r0, sp, #76	; 0x4c
 80122c8:	f7ff f9f0 	bl	80116ac <ecp_modp>
 80122cc:	4604      	mov	r4, r0
 80122ce:	2800      	cmp	r0, #0
 80122d0:	f040 80f8 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80122d4:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80122d6:	aa01      	add	r2, sp, #4
 80122d8:	f10d 091c 	add.w	r9, sp, #28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80122dc:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80122de:	4611      	mov	r1, r2
 80122e0:	4648      	mov	r0, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 80122e2:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 80122e4:	f7fc ff53 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80122e8:	4604      	mov	r4, r0
 80122ea:	2800      	cmp	r0, #0
 80122ec:	f040 80ea 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80122f0:	4639      	mov	r1, r7
 80122f2:	4648      	mov	r0, r9
 80122f4:	f7ff f9da 	bl	80116ac <ecp_modp>
 80122f8:	4604      	mov	r4, r0
 80122fa:	2800      	cmp	r0, #0
 80122fc:	f040 80e2 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012300:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8012302:	aa01      	add	r2, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 8012304:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8012306:	4649      	mov	r1, r9
 8012308:	a80a      	add	r0, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 801230a:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 801230c:	f7fc ff3f 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012310:	4604      	mov	r4, r0
 8012312:	2800      	cmp	r0, #0
 8012314:	f040 80d6 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012318:	4639      	mov	r1, r7
 801231a:	a80a      	add	r0, sp, #40	; 0x28
 801231c:	f7ff f9c6 	bl	80116ac <ecp_modp>
 8012320:	4604      	mov	r4, r0
 8012322:	2800      	cmp	r0, #0
 8012324:	f040 80ce 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012328:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 801232a:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 801232c:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 801232e:	4649      	mov	r1, r9
 8012330:	4648      	mov	r0, r9
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 8012332:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8012334:	f7fc ff2b 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012338:	4604      	mov	r4, r0
 801233a:	2800      	cmp	r0, #0
 801233c:	f040 80c2 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012340:	4639      	mov	r1, r7
 8012342:	4648      	mov	r0, r9
 8012344:	f7ff f9b2 	bl	80116ac <ecp_modp>
 8012348:	4604      	mov	r4, r0
 801234a:	2800      	cmp	r0, #0
 801234c:	f040 80ba 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012350:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8012352:	2202      	movs	r2, #2
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 8012354:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8012356:	4649      	mov	r1, r9
 8012358:	a801      	add	r0, sp, #4
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 801235a:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 801235c:	f7fc ff7b 	bl	800f256 <mbedtls_mpi_mul_int>
 8012360:	4604      	mov	r4, r0
 8012362:	2800      	cmp	r0, #0
 8012364:	f040 80ae 	bne.w	80124c4 <ecp_add_mixed+0x374>
 8012368:	f107 0804 	add.w	r8, r7, #4
 801236c:	4641      	mov	r1, r8
 801236e:	a801      	add	r0, sp, #4
 8012370:	f7fc fdc3 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8012374:	2800      	cmp	r0, #0
 8012376:	f280 80db 	bge.w	8012530 <ecp_add_mixed+0x3e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 801237a:	aa04      	add	r2, sp, #16
 801237c:	4611      	mov	r1, r2
 801237e:	a80d      	add	r0, sp, #52	; 0x34
 8012380:	f7fc ff05 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012384:	4604      	mov	r4, r0
 8012386:	2800      	cmp	r0, #0
 8012388:	f040 809c 	bne.w	80124c4 <ecp_add_mixed+0x374>
 801238c:	4639      	mov	r1, r7
 801238e:	a80d      	add	r0, sp, #52	; 0x34
 8012390:	f7ff f98c 	bl	80116ac <ecp_modp>
 8012394:	4604      	mov	r4, r0
 8012396:	2800      	cmp	r0, #0
 8012398:	f040 8094 	bne.w	80124c4 <ecp_add_mixed+0x374>
 801239c:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 801239e:	a90d      	add	r1, sp, #52	; 0x34
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 80123a0:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 80123a2:	aa01      	add	r2, sp, #4
 80123a4:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 80123a6:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 80123a8:	f7fc feb8 	bl	800f11c <mbedtls_mpi_sub_mpi>
 80123ac:	4604      	mov	r4, r0
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f040 8088 	bne.w	80124c4 <ecp_add_mixed+0x374>
 80123b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f2c0 80c4 	blt.w	8012544 <ecp_add_mixed+0x3f4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 80123bc:	a90d      	add	r1, sp, #52	; 0x34
 80123be:	aa0a      	add	r2, sp, #40	; 0x28
 80123c0:	4608      	mov	r0, r1
 80123c2:	f7fc feab 	bl	800f11c <mbedtls_mpi_sub_mpi>
 80123c6:	4604      	mov	r4, r0
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d17b      	bne.n	80124c4 <ecp_add_mixed+0x374>
 80123cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f2c0 80c5 	blt.w	801255e <ecp_add_mixed+0x40e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 80123d4:	aa0d      	add	r2, sp, #52	; 0x34
 80123d6:	4649      	mov	r1, r9
 80123d8:	4648      	mov	r0, r9
 80123da:	f7fc fe9f 	bl	800f11c <mbedtls_mpi_sub_mpi>
 80123de:	4604      	mov	r4, r0
 80123e0:	2800      	cmp	r0, #0
 80123e2:	d16f      	bne.n	80124c4 <ecp_add_mixed+0x374>
 80123e4:	464e      	mov	r6, r9
 80123e6:	9b07      	ldr	r3, [sp, #28]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f2c0 80c5 	blt.w	8012578 <ecp_add_mixed+0x428>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 80123ee:	aa04      	add	r2, sp, #16
 80123f0:	4649      	mov	r1, r9
 80123f2:	4648      	mov	r0, r9
 80123f4:	f7fc fecb 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80123f8:	4604      	mov	r4, r0
 80123fa:	2800      	cmp	r0, #0
 80123fc:	d162      	bne.n	80124c4 <ecp_add_mixed+0x374>
 80123fe:	4639      	mov	r1, r7
 8012400:	4648      	mov	r0, r9
 8012402:	f7ff f953 	bl	80116ac <ecp_modp>
 8012406:	4604      	mov	r4, r0
 8012408:	2800      	cmp	r0, #0
 801240a:	d15b      	bne.n	80124c4 <ecp_add_mixed+0x374>
 801240c:	4e69      	ldr	r6, [pc, #420]	; (80125b4 <ecp_add_mixed+0x464>)
 801240e:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8012410:	a90a      	add	r1, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8012412:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8012414:	4652      	mov	r2, sl
 8012416:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 8012418:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 801241a:	f7fc feb8 	bl	800f18e <mbedtls_mpi_mul_mpi>
 801241e:	4604      	mov	r4, r0
 8012420:	2800      	cmp	r0, #0
 8012422:	d14f      	bne.n	80124c4 <ecp_add_mixed+0x374>
 8012424:	4639      	mov	r1, r7
 8012426:	a80a      	add	r0, sp, #40	; 0x28
 8012428:	f7ff f940 	bl	80116ac <ecp_modp>
 801242c:	4604      	mov	r4, r0
 801242e:	2800      	cmp	r0, #0
 8012430:	d148      	bne.n	80124c4 <ecp_add_mixed+0x374>
 8012432:	6873      	ldr	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8012434:	aa0a      	add	r2, sp, #40	; 0x28
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 8012436:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 8012438:	4649      	mov	r1, r9
 801243a:	a810      	add	r0, sp, #64	; 0x40
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 801243c:	6073      	str	r3, [r6, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 801243e:	f7fc fe6d 	bl	800f11c <mbedtls_mpi_sub_mpi>
 8012442:	4604      	mov	r4, r0
 8012444:	2800      	cmp	r0, #0
 8012446:	d13d      	bne.n	80124c4 <ecp_add_mixed+0x374>
 8012448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801244a:	2b00      	cmp	r3, #0
 801244c:	f2c0 80a5 	blt.w	801259a <ecp_add_mixed+0x44a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 8012450:	a90d      	add	r1, sp, #52	; 0x34
 8012452:	4628      	mov	r0, r5
 8012454:	f7fc fb12 	bl	800ea7c <mbedtls_mpi_copy>
 8012458:	4604      	mov	r4, r0
 801245a:	bb98      	cbnz	r0, 80124c4 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 801245c:	a910      	add	r1, sp, #64	; 0x40
 801245e:	f105 000c 	add.w	r0, r5, #12
 8012462:	f7fc fb0b 	bl	800ea7c <mbedtls_mpi_copy>
 8012466:	4604      	mov	r4, r0
 8012468:	bb60      	cbnz	r0, 80124c4 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 801246a:	a913      	add	r1, sp, #76	; 0x4c
 801246c:	f105 0018 	add.w	r0, r5, #24
 8012470:	f7fc fb04 	bl	800ea7c <mbedtls_mpi_copy>
 8012474:	e056      	b.n	8012524 <ecp_add_mixed+0x3d4>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 8012476:	f10a 0418 	add.w	r4, sl, #24
 801247a:	2100      	movs	r1, #0
 801247c:	4620      	mov	r0, r4
 801247e:	f7fc fd7f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012482:	b908      	cbnz	r0, 8012488 <ecp_add_mixed+0x338>
        return( mbedtls_ecp_copy( R, P ) );
 8012484:	4641      	mov	r1, r8
 8012486:	e676      	b.n	8012176 <ecp_add_mixed+0x26>
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 8012488:	f8da 3020 	ldr.w	r3, [sl, #32]
 801248c:	2b00      	cmp	r3, #0
 801248e:	f43f ae82 	beq.w	8012196 <ecp_add_mixed+0x46>
 8012492:	2101      	movs	r1, #1
 8012494:	4620      	mov	r0, r4
 8012496:	f7fc fd73 	bl	800ef80 <mbedtls_mpi_cmp_int>
 801249a:	2800      	cmp	r0, #0
 801249c:	f43f ae7b 	beq.w	8012196 <ecp_add_mixed+0x46>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80124a0:	4c45      	ldr	r4, [pc, #276]	; (80125b8 <ecp_add_mixed+0x468>)
 80124a2:	e66c      	b.n	801217e <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 80124a4:	2100      	movs	r1, #0
 80124a6:	a801      	add	r0, sp, #4
 80124a8:	f7fc fd6a 	bl	800ef80 <mbedtls_mpi_cmp_int>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	f43f aee7 	beq.w	8012280 <ecp_add_mixed+0x130>
 80124b2:	a901      	add	r1, sp, #4
 80124b4:	4652      	mov	r2, sl
 80124b6:	4608      	mov	r0, r1
 80124b8:	f7fc fe0e 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 80124bc:	4604      	mov	r4, r0
 80124be:	2800      	cmp	r0, #0
 80124c0:	f43f aeda 	beq.w	8012278 <ecp_add_mixed+0x128>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 80124c4:	a801      	add	r0, sp, #4
 80124c6:	f7fc fa59 	bl	800e97c <mbedtls_mpi_free>
 80124ca:	a804      	add	r0, sp, #16
 80124cc:	f7fc fa56 	bl	800e97c <mbedtls_mpi_free>
 80124d0:	a807      	add	r0, sp, #28
 80124d2:	f7fc fa53 	bl	800e97c <mbedtls_mpi_free>
 80124d6:	a80a      	add	r0, sp, #40	; 0x28
 80124d8:	f7fc fa50 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 80124dc:	a80d      	add	r0, sp, #52	; 0x34
 80124de:	f7fc fa4d 	bl	800e97c <mbedtls_mpi_free>
 80124e2:	a810      	add	r0, sp, #64	; 0x40
 80124e4:	f7fc fa4a 	bl	800e97c <mbedtls_mpi_free>
 80124e8:	a813      	add	r0, sp, #76	; 0x4c
 80124ea:	f7fc fa47 	bl	800e97c <mbedtls_mpi_free>
    return( ret );
 80124ee:	e646      	b.n	801217e <ecp_add_mixed+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 80124f0:	2100      	movs	r1, #0
 80124f2:	a804      	add	r0, sp, #16
 80124f4:	f7fc fd44 	bl	800ef80 <mbedtls_mpi_cmp_int>
 80124f8:	2800      	cmp	r0, #0
 80124fa:	f43f aed2 	beq.w	80122a2 <ecp_add_mixed+0x152>
 80124fe:	a904      	add	r1, sp, #16
 8012500:	465a      	mov	r2, fp
 8012502:	4608      	mov	r0, r1
 8012504:	f7fc fde8 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8012508:	4604      	mov	r4, r0
 801250a:	2800      	cmp	r0, #0
 801250c:	f43f aec5 	beq.w	801229a <ecp_add_mixed+0x14a>
 8012510:	e7d8      	b.n	80124c4 <ecp_add_mixed+0x374>
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 8012512:	a804      	add	r0, sp, #16
 8012514:	f7fc fd34 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012518:	b930      	cbnz	r0, 8012528 <ecp_add_mixed+0x3d8>
            ret = ecp_double_jac( grp, R, P );
 801251a:	4642      	mov	r2, r8
 801251c:	4629      	mov	r1, r5
 801251e:	4638      	mov	r0, r7
 8012520:	f7ff f90a 	bl	8011738 <ecp_double_jac>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 8012524:	4604      	mov	r4, r0
cleanup:
 8012526:	e7cd      	b.n	80124c4 <ecp_add_mixed+0x374>
            ret = mbedtls_ecp_set_zero( R );
 8012528:	4628      	mov	r0, r5
 801252a:	f7ff fdfc 	bl	8012126 <mbedtls_ecp_set_zero>
 801252e:	e7f9      	b.n	8012524 <ecp_add_mixed+0x3d4>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 8012530:	a901      	add	r1, sp, #4
 8012532:	4642      	mov	r2, r8
 8012534:	4608      	mov	r0, r1
 8012536:	f7fc fd92 	bl	800f05e <mbedtls_mpi_sub_abs>
 801253a:	4604      	mov	r4, r0
 801253c:	2800      	cmp	r0, #0
 801253e:	f43f af15 	beq.w	801236c <ecp_add_mixed+0x21c>
 8012542:	e7bf      	b.n	80124c4 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 8012544:	2100      	movs	r1, #0
 8012546:	a80d      	add	r0, sp, #52	; 0x34
 8012548:	f7fc fd1a 	bl	800ef80 <mbedtls_mpi_cmp_int>
 801254c:	2800      	cmp	r0, #0
 801254e:	f43f af35 	beq.w	80123bc <ecp_add_mixed+0x26c>
 8012552:	a90d      	add	r1, sp, #52	; 0x34
 8012554:	4642      	mov	r2, r8
 8012556:	4608      	mov	r0, r1
 8012558:	f7fc fdbe 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 801255c:	e726      	b.n	80123ac <ecp_add_mixed+0x25c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 801255e:	2100      	movs	r1, #0
 8012560:	a80d      	add	r0, sp, #52	; 0x34
 8012562:	f7fc fd0d 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012566:	2800      	cmp	r0, #0
 8012568:	f43f af34 	beq.w	80123d4 <ecp_add_mixed+0x284>
 801256c:	a90d      	add	r1, sp, #52	; 0x34
 801256e:	4642      	mov	r2, r8
 8012570:	4608      	mov	r0, r1
 8012572:	f7fc fdb1 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8012576:	e726      	b.n	80123c6 <ecp_add_mixed+0x276>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 8012578:	2100      	movs	r1, #0
 801257a:	4630      	mov	r0, r6
 801257c:	f7fc fd00 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012580:	2800      	cmp	r0, #0
 8012582:	f43f af34 	beq.w	80123ee <ecp_add_mixed+0x29e>
 8012586:	4642      	mov	r2, r8
 8012588:	4631      	mov	r1, r6
 801258a:	4630      	mov	r0, r6
 801258c:	f7fc fda4 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8012590:	4604      	mov	r4, r0
 8012592:	2800      	cmp	r0, #0
 8012594:	f43f af27 	beq.w	80123e6 <ecp_add_mixed+0x296>
 8012598:	e794      	b.n	80124c4 <ecp_add_mixed+0x374>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 801259a:	2100      	movs	r1, #0
 801259c:	a810      	add	r0, sp, #64	; 0x40
 801259e:	f7fc fcef 	bl	800ef80 <mbedtls_mpi_cmp_int>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	f43f af54 	beq.w	8012450 <ecp_add_mixed+0x300>
 80125a8:	a910      	add	r1, sp, #64	; 0x40
 80125aa:	4642      	mov	r2, r8
 80125ac:	4608      	mov	r0, r1
 80125ae:	f7fc fd93 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 80125b2:	e746      	b.n	8012442 <ecp_add_mixed+0x2f2>
 80125b4:	200010c4 	.word	0x200010c4
 80125b8:	ffffb080 	.word	0xffffb080

080125bc <ecp_mul_comb>:
 */
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng )
{
 80125bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c0:	ed2d 8b04 	vpush	{d8-d9}
 80125c4:	b0e5      	sub	sp, #404	; 0x194
 80125c6:	4605      	mov	r5, r0
    size_t d;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *T;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 80125c8:	a80d      	add	r0, sp, #52	; 0x34
{
 80125ca:	460e      	mov	r6, r1
 80125cc:	4692      	mov	sl, r2
 80125ce:	461c      	mov	r4, r3
    mbedtls_mpi_init( &M );
 80125d0:	f7fc f9cd 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 80125d4:	a810      	add	r0, sp, #64	; 0x40
 80125d6:	f7fc f9ca 	bl	800e96e <mbedtls_mpi_init>

    /* we need N to be odd to trnaform m in an odd number, check now */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 80125da:	f105 034c 	add.w	r3, r5, #76	; 0x4c
 80125de:	2100      	movs	r1, #0
 80125e0:	4618      	mov	r0, r3
 80125e2:	ee08 3a90 	vmov	s17, r3
 80125e6:	f7fc fac2 	bl	800eb6e <mbedtls_mpi_get_bit>
 80125ea:	2801      	cmp	r0, #1
 80125ec:	4607      	mov	r7, r0
 80125ee:	f040 824a 	bne.w	8012a86 <ecp_mul_comb+0x4ca>
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 80125f2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80125f4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80125f8:	bf2c      	ite	cs
 80125fa:	2305      	movcs	r3, #5
 80125fc:	2304      	movcc	r3, #4
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80125fe:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8012602:	f104 000c 	add.w	r0, r4, #12
    w = grp->nbits >= 384 ? 5 : 4;
 8012606:	9303      	str	r3, [sp, #12]
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 8012608:	f7fc fc77 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 801260c:	9004      	str	r0, [sp, #16]
 801260e:	2800      	cmp	r0, #0
 8012610:	d158      	bne.n	80126c4 <ecp_mul_comb+0x108>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 8012612:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8012616:	4620      	mov	r0, r4
 8012618:	f7fc fc6f 	bl	800eefa <mbedtls_mpi_cmp_mpi>
    if( p_eq_g )
 801261c:	b918      	cbnz	r0, 8012626 <ecp_mul_comb+0x6a>
        w++;
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	3301      	adds	r3, #1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 8012622:	e9cd 3703 	strd	r3, r7, [sp, #12]
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
        w = MBEDTLS_ECP_WINDOW_SIZE;
    if( w >= grp->nbits )
 8012626:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        w = 2;
 8012628:	9a03      	ldr	r2, [sp, #12]
 801262a:	429a      	cmp	r2, r3
 801262c:	bf28      	it	cs
 801262e:	2202      	movcs	r2, #2
 8012630:	9203      	str	r2, [sp, #12]

    /* Other sizes that depend on w */
    pre_len = 1U << ( w - 1 );
 8012632:	3a01      	subs	r2, #1
 8012634:	9206      	str	r2, [sp, #24]
 8012636:	9906      	ldr	r1, [sp, #24]
 8012638:	2201      	movs	r2, #1
 801263a:	408a      	lsls	r2, r1
 801263c:	9207      	str	r2, [sp, #28]
 801263e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8012642:	ee08 2a10 	vmov	s16, r2
    d = ( grp->nbits + w - 1 ) / w;
 8012646:	9a03      	ldr	r2, [sp, #12]
 8012648:	3b01      	subs	r3, #1
 801264a:	4413      	add	r3, r2
 801264c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012650:	9305      	str	r3, [sp, #20]

    /*
     * Prepare precomputed points: if P == G we want to
     * use grp->T if already initialized, or initialize it.
     */
    T = p_eq_g ? grp->T : NULL;
 8012652:	9b04      	ldr	r3, [sp, #16]
 8012654:	b12b      	cbz	r3, 8012662 <ecp_mul_comb+0xa6>
 8012656:	f8d5 b074 	ldr.w	fp, [r5, #116]	; 0x74

    if( T == NULL )
 801265a:	f1bb 0f00 	cmp.w	fp, #0
 801265e:	f040 80b0 	bne.w	80127c2 <ecp_mul_comb+0x206>
    {
        T = mbedtls_calloc( pre_len, sizeof( mbedtls_ecp_point ) );
 8012662:	4b4f      	ldr	r3, [pc, #316]	; (80127a0 <ecp_mul_comb+0x1e4>)
 8012664:	9807      	ldr	r0, [sp, #28]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	2124      	movs	r1, #36	; 0x24
 801266a:	4798      	blx	r3
        if( T == NULL )
 801266c:	4683      	mov	fp, r0
 801266e:	2800      	cmp	r0, #0
 8012670:	f000 8207 	beq.w	8012a82 <ecp_mul_comb+0x4c6>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 8012674:	4621      	mov	r1, r4
 8012676:	f7ff fd3d 	bl	80120f4 <mbedtls_ecp_copy>
 801267a:	4604      	mov	r4, r0
 801267c:	bba8      	cbnz	r0, 80126ea <ecp_mul_comb+0x12e>
 801267e:	4680      	mov	r8, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012680:	2701      	movs	r7, #1
 8012682:	9b06      	ldr	r3, [sp, #24]
 8012684:	fa37 f903 	lsrs.w	r9, r7, r3
 8012688:	d01f      	beq.n	80126ca <ecp_mul_comb+0x10e>
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 801268a:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 801268e:	fa5f f288 	uxtb.w	r2, r8
 8012692:	4649      	mov	r1, r9
 8012694:	4628      	mov	r0, r5
 8012696:	f7ff fb3f 	bl	8011d18 <ecp_normalize_jac_many>
 801269a:	4604      	mov	r4, r0
 801269c:	bb28      	cbnz	r0, 80126ea <ecp_mul_comb+0x12e>
    k = 0;
 801269e:	4602      	mov	r2, r0
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 80126a0:	f04f 0801 	mov.w	r8, #1
            TT[k++] = &T[i + j];
 80126a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 80126a8:	9b06      	ldr	r3, [sp, #24]
 80126aa:	fa38 f303 	lsrs.w	r3, r8, r3
 80126ae:	4641      	mov	r1, r8
 80126b0:	d17a      	bne.n	80127a8 <ecp_mul_comb+0x1ec>
 80126b2:	eb08 0002 	add.w	r0, r8, r2
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 80126b6:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
 80126ba:	b2c2      	uxtb	r2, r0
 80126bc:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 80126c0:	9208      	str	r2, [sp, #32]
 80126c2:	e05f      	b.n	8012784 <ecp_mul_comb+0x1c8>
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80126c4:	2300      	movs	r3, #0
 80126c6:	9304      	str	r3, [sp, #16]
 80126c8:	e7ad      	b.n	8012626 <ecp_mul_comb+0x6a>
        cur = T + i;
 80126ca:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80126ce:	0879      	lsrs	r1, r7, #1
        cur = T + i;
 80126d0:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 80126d4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80126d8:	4610      	mov	r0, r2
 80126da:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80126de:	9208      	str	r2, [sp, #32]
 80126e0:	f7ff fd08 	bl	80120f4 <mbedtls_ecp_copy>
 80126e4:	9a08      	ldr	r2, [sp, #32]
 80126e6:	4604      	mov	r4, r0
 80126e8:	b360      	cbz	r0, 8012744 <ecp_mul_comb+0x188>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );

cleanup:

    if( T != NULL && ! p_eq_g )
 80126ea:	9b04      	ldr	r3, [sp, #16]
 80126ec:	b97b      	cbnz	r3, 801270e <ecp_mul_comb+0x152>
 80126ee:	9d04      	ldr	r5, [sp, #16]
    {
        for( i = 0; i < pre_len; i++ )
            mbedtls_ecp_point_free( &T[i] );
 80126f0:	2724      	movs	r7, #36	; 0x24
 80126f2:	fb07 b005 	mla	r0, r7, r5, fp
 80126f6:	f7ff fcb3 	bl	8012060 <mbedtls_ecp_point_free>
        for( i = 0; i < pre_len; i++ )
 80126fa:	3501      	adds	r5, #1
 80126fc:	ee18 2a10 	vmov	r2, s16
 8012700:	b2eb      	uxtb	r3, r5
 8012702:	4293      	cmp	r3, r2
 8012704:	d3f5      	bcc.n	80126f2 <ecp_mul_comb+0x136>
        mbedtls_free( T );
 8012706:	4b27      	ldr	r3, [pc, #156]	; (80127a4 <ecp_mul_comb+0x1e8>)
 8012708:	4658      	mov	r0, fp
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	4798      	blx	r3
    }

    mbedtls_mpi_free( &M );
 801270e:	a80d      	add	r0, sp, #52	; 0x34
 8012710:	f7fc f934 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &mm );
 8012714:	a810      	add	r0, sp, #64	; 0x40
 8012716:	f7fc f931 	bl	800e97c <mbedtls_mpi_free>

    if( ret != 0 )
 801271a:	b114      	cbz	r4, 8012722 <ecp_mul_comb+0x166>
        mbedtls_ecp_point_free( R );
 801271c:	4630      	mov	r0, r6
 801271e:	f7ff fc9f 	bl	8012060 <mbedtls_ecp_point_free>

    return( ret );
}
 8012722:	4620      	mov	r0, r4
 8012724:	b065      	add	sp, #404	; 0x194
 8012726:	ecbd 8b04 	vpop	{d8-d9}
 801272a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 801272e:	4611      	mov	r1, r2
 8012730:	4628      	mov	r0, r5
 8012732:	9208      	str	r2, [sp, #32]
 8012734:	f7ff f800 	bl	8011738 <ecp_double_jac>
 8012738:	4604      	mov	r4, r0
 801273a:	2800      	cmp	r0, #0
 801273c:	d1d5      	bne.n	80126ea <ecp_mul_comb+0x12e>
        for( j = 0; j < d; j++ )
 801273e:	9a08      	ldr	r2, [sp, #32]
 8012740:	f109 0901 	add.w	r9, r9, #1
 8012744:	9b05      	ldr	r3, [sp, #20]
 8012746:	454b      	cmp	r3, r9
 8012748:	d1f1      	bne.n	801272e <ecp_mul_comb+0x172>
        TT[k++] = cur;
 801274a:	fa5f f388 	uxtb.w	r3, r8
 801274e:	a922      	add	r1, sp, #136	; 0x88
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012750:	007f      	lsls	r7, r7, #1
        TT[k++] = cur;
 8012752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012756:	b2ff      	uxtb	r7, r7
 8012758:	f108 0801 	add.w	r8, r8, #1
 801275c:	e791      	b.n	8012682 <ecp_mul_comb+0xc6>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 801275e:	2224      	movs	r2, #36	; 0x24
 8012760:	fb02 f209 	mul.w	r2, r2, r9
 8012764:	1899      	adds	r1, r3, r2
 8012766:	4628      	mov	r0, r5
 8012768:	445a      	add	r2, fp
 801276a:	930b      	str	r3, [sp, #44]	; 0x2c
 801276c:	910a      	str	r1, [sp, #40]	; 0x28
 801276e:	f7ff fcef 	bl	8012150 <ecp_add_mixed>
 8012772:	4604      	mov	r4, r0
 8012774:	2800      	cmp	r0, #0
 8012776:	d1b8      	bne.n	80126ea <ecp_mul_comb+0x12e>
            TT[k++] = &T[i + j];
 8012778:	e9dd 3109 	ldrd	r3, r1, [sp, #36]	; 0x24
 801277c:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
 8012780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012782:	4649      	mov	r1, r9
 8012784:	9a08      	ldr	r2, [sp, #32]
 8012786:	1a57      	subs	r7, r2, r1
 8012788:	b2ff      	uxtb	r7, r7
        while( j-- )
 801278a:	f101 39ff 	add.w	r9, r1, #4294967295
 801278e:	2900      	cmp	r1, #0
 8012790:	d1e5      	bne.n	801275e <ecp_mul_comb+0x1a2>
    for( i = 1; i < ( 1U << ( w - 1 ) ); i <<= 1 )
 8012792:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8012796:	fa5f f888 	uxtb.w	r8, r8
 801279a:	463a      	mov	r2, r7
 801279c:	e784      	b.n	80126a8 <ecp_mul_comb+0xec>
 801279e:	bf00      	nop
 80127a0:	200005a0 	.word	0x200005a0
 80127a4:	200005a4 	.word	0x200005a4
    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, k ) );
 80127a8:	a922      	add	r1, sp, #136	; 0x88
 80127aa:	4628      	mov	r0, r5
 80127ac:	f7ff fab4 	bl	8011d18 <ecp_normalize_jac_many>
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d ) );
 80127b0:	4604      	mov	r4, r0
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d199      	bne.n	80126ea <ecp_mul_comb+0x12e>
        if( p_eq_g )
 80127b6:	9b04      	ldr	r3, [sp, #16]
 80127b8:	b11b      	cbz	r3, 80127c2 <ecp_mul_comb+0x206>
            grp->T_size = pre_len;
 80127ba:	9b07      	ldr	r3, [sp, #28]
            grp->T = T;
 80127bc:	f8c5 b074 	str.w	fp, [r5, #116]	; 0x74
            grp->T_size = pre_len;
 80127c0:	67ab      	str	r3, [r5, #120]	; 0x78
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 80127c2:	2100      	movs	r1, #0
 80127c4:	4650      	mov	r0, sl
 80127c6:	f7fc f9d2 	bl	800eb6e <mbedtls_mpi_get_bit>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 80127ca:	af0d      	add	r7, sp, #52	; 0x34
    m_is_odd = ( mbedtls_mpi_get_bit( m, 0 ) == 1 );
 80127cc:	4681      	mov	r9, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 80127ce:	4651      	mov	r1, sl
 80127d0:	4638      	mov	r0, r7
 80127d2:	f7fc f953 	bl	800ea7c <mbedtls_mpi_copy>
 80127d6:	4604      	mov	r4, r0
 80127d8:	2800      	cmp	r0, #0
 80127da:	d186      	bne.n	80126ea <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 80127dc:	ee18 1a90 	vmov	r1, s17
 80127e0:	4652      	mov	r2, sl
 80127e2:	a810      	add	r0, sp, #64	; 0x40
 80127e4:	f7fc fc9a 	bl	800f11c <mbedtls_mpi_sub_mpi>
 80127e8:	4604      	mov	r4, r0
 80127ea:	2800      	cmp	r0, #0
 80127ec:	f47f af7d 	bne.w	80126ea <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, ! m_is_odd ) );
 80127f0:	f1b9 0901 	subs.w	r9, r9, #1
 80127f4:	bf18      	it	ne
 80127f6:	f04f 0901 	movne.w	r9, #1
 80127fa:	464a      	mov	r2, r9
 80127fc:	a910      	add	r1, sp, #64	; 0x40
 80127fe:	4638      	mov	r0, r7
 8012800:	f7fc f966 	bl	800ead0 <mbedtls_mpi_safe_cond_assign>
 8012804:	4604      	mov	r4, r0
 8012806:	2800      	cmp	r0, #0
 8012808:	f47f af6f 	bne.w	80126ea <ecp_mul_comb+0x12e>
    memset( x, 0, d+1 );
 801280c:	9b05      	ldr	r3, [sp, #20]
 801280e:	4601      	mov	r1, r0
 8012810:	1c5a      	adds	r2, r3, #1
 8012812:	a822      	add	r0, sp, #136	; 0x88
 8012814:	f10d 0a88 	add.w	sl, sp, #136	; 0x88
 8012818:	f00f fe0e 	bl	8022438 <memset>
    for( i = 0; i < d; i++ )
 801281c:	46a0      	mov	r8, r4
 801281e:	4653      	mov	r3, sl
 8012820:	9a05      	ldr	r2, [sp, #20]
 8012822:	4542      	cmp	r2, r8
 8012824:	f040 80c0 	bne.w	80129a8 <ecp_mul_comb+0x3ec>
    c = 0;
 8012828:	2700      	movs	r7, #0
    for( i = 1; i <= d; i++ )
 801282a:	2401      	movs	r4, #1
 801282c:	45a0      	cmp	r8, r4
 801282e:	f080 80d2 	bcs.w	80129d6 <ecp_mul_comb+0x41a>
    if( pt == NULL )
 8012832:	a819      	add	r0, sp, #100	; 0x64
 8012834:	f7ff fba8 	bl	8011f88 <mbedtls_ecp_point_init.part.0>
    MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, t_len, x[i] ) );
 8012838:	ab22      	add	r3, sp, #136	; 0x88
 801283a:	465a      	mov	r2, fp
 801283c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012840:	9300      	str	r3, [sp, #0]
 8012842:	4631      	mov	r1, r6
 8012844:	ee18 3a10 	vmov	r3, s16
 8012848:	4628      	mov	r0, r5
 801284a:	f7fe fefc 	bl	8011646 <ecp_select_comb>
 801284e:	4604      	mov	r4, r0
 8012850:	2800      	cmp	r0, #0
 8012852:	f040 8101 	bne.w	8012a58 <ecp_mul_comb+0x49c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 8012856:	f106 0a18 	add.w	sl, r6, #24
 801285a:	2101      	movs	r1, #1
 801285c:	4650      	mov	r0, sl
 801285e:	f7fc f96a 	bl	800eb36 <mbedtls_mpi_lset>
 8012862:	4604      	mov	r4, r0
 8012864:	2800      	cmp	r0, #0
 8012866:	f040 80f7 	bne.w	8012a58 <ecp_mul_comb+0x49c>
    if( f_rng != 0 )
 801286a:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 801286c:	2b00      	cmp	r3, #0
 801286e:	f000 80ef 	beq.w	8012a50 <ecp_mul_comb+0x494>
    p_size = ( grp->pbits + 7 ) / 8;
 8012872:	6dab      	ldr	r3, [r5, #88]	; 0x58
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012874:	af13      	add	r7, sp, #76	; 0x4c
    p_size = ( grp->pbits + 7 ) / 8;
 8012876:	3307      	adds	r3, #7
 8012878:	08db      	lsrs	r3, r3, #3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 801287a:	4638      	mov	r0, r7
    p_size = ( grp->pbits + 7 ) / 8;
 801287c:	ee08 3a90 	vmov	s17, r3
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 8012880:	f7fc f875 	bl	800e96e <mbedtls_mpi_init>
 8012884:	a816      	add	r0, sp, #88	; 0x58
 8012886:	f7fc f872 	bl	800e96e <mbedtls_mpi_init>
 801288a:	230c      	movs	r3, #12
 801288c:	9303      	str	r3, [sp, #12]
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 801288e:	1d2b      	adds	r3, r5, #4
 8012890:	ee09 3a10 	vmov	s18, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 8012894:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
 8012898:	ee18 1a90 	vmov	r1, s17
 801289c:	4638      	mov	r0, r7
 801289e:	f7fd f988 	bl	800fbb2 <mbedtls_mpi_fill_random>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 80128a2:	4603      	mov	r3, r0
 80128a4:	2800      	cmp	r0, #0
 80128a6:	d173      	bne.n	8012990 <ecp_mul_comb+0x3d4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80128a8:	ee19 1a10 	vmov	r1, s18
 80128ac:	4638      	mov	r0, r7
 80128ae:	f7fc fb24 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80128b2:	2800      	cmp	r0, #0
 80128b4:	f280 80ad 	bge.w	8012a12 <ecp_mul_comb+0x456>
        if( count++ > 10 )
 80128b8:	9b03      	ldr	r3, [sp, #12]
 80128ba:	3b01      	subs	r3, #1
 80128bc:	9303      	str	r3, [sp, #12]
 80128be:	f000 80e4 	beq.w	8012a8a <ecp_mul_comb+0x4ce>
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 80128c2:	2101      	movs	r1, #1
 80128c4:	4638      	mov	r0, r7
 80128c6:	f7fc fb5b 	bl	800ef80 <mbedtls_mpi_cmp_int>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	dde2      	ble.n	8012894 <ecp_mul_comb+0x2d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80128ce:	463a      	mov	r2, r7
 80128d0:	4651      	mov	r1, sl
 80128d2:	4650      	mov	r0, sl
 80128d4:	f7fc fc5b 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80128d8:	4603      	mov	r3, r0
 80128da:	2800      	cmp	r0, #0
 80128dc:	d158      	bne.n	8012990 <ecp_mul_comb+0x3d4>
 80128de:	4629      	mov	r1, r5
 80128e0:	4650      	mov	r0, sl
 80128e2:	f7fe fee3 	bl	80116ac <ecp_modp>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2800      	cmp	r0, #0
 80128ea:	d151      	bne.n	8012990 <ecp_mul_comb+0x3d4>
 80128ec:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8012a9c <ecp_mul_comb+0x4e0>
 80128f0:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80128f4:	463a      	mov	r2, r7
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80128f6:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 80128f8:	4639      	mov	r1, r7
 80128fa:	a816      	add	r0, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 80128fc:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 8012900:	f7fc fc45 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012904:	4603      	mov	r3, r0
 8012906:	2800      	cmp	r0, #0
 8012908:	d142      	bne.n	8012990 <ecp_mul_comb+0x3d4>
 801290a:	4629      	mov	r1, r5
 801290c:	a816      	add	r0, sp, #88	; 0x58
 801290e:	f7fe fecd 	bl	80116ac <ecp_modp>
 8012912:	4603      	mov	r3, r0
 8012914:	2800      	cmp	r0, #0
 8012916:	d13b      	bne.n	8012990 <ecp_mul_comb+0x3d4>
 8012918:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 801291c:	aa16      	add	r2, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 801291e:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8012920:	4631      	mov	r1, r6
 8012922:	4630      	mov	r0, r6
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 8012924:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8012928:	f7fc fc31 	bl	800f18e <mbedtls_mpi_mul_mpi>
 801292c:	4603      	mov	r3, r0
 801292e:	bb78      	cbnz	r0, 8012990 <ecp_mul_comb+0x3d4>
 8012930:	4629      	mov	r1, r5
 8012932:	4630      	mov	r0, r6
 8012934:	f7fe feba 	bl	80116ac <ecp_modp>
 8012938:	4603      	mov	r3, r0
 801293a:	bb48      	cbnz	r0, 8012990 <ecp_mul_comb+0x3d4>
 801293c:	f8da 3004 	ldr.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 8012940:	a916      	add	r1, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8012942:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 8012944:	463a      	mov	r2, r7
 8012946:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 8012948:	f8ca 3004 	str.w	r3, [sl, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 801294c:	f7fc fc1f 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012950:	4603      	mov	r3, r0
 8012952:	b9e8      	cbnz	r0, 8012990 <ecp_mul_comb+0x3d4>
 8012954:	4629      	mov	r1, r5
 8012956:	a816      	add	r0, sp, #88	; 0x58
 8012958:	f7fe fea8 	bl	80116ac <ecp_modp>
 801295c:	4603      	mov	r3, r0
 801295e:	b9b8      	cbnz	r0, 8012990 <ecp_mul_comb+0x3d4>
 8012960:	f8da 3004 	ldr.w	r3, [sl, #4]
 8012964:	3301      	adds	r3, #1
 8012966:	f8ca 3004 	str.w	r3, [sl, #4]
 801296a:	4657      	mov	r7, sl
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 801296c:	f106 0a0c 	add.w	sl, r6, #12
 8012970:	aa16      	add	r2, sp, #88	; 0x58
 8012972:	4651      	mov	r1, sl
 8012974:	4650      	mov	r0, sl
 8012976:	f7fc fc0a 	bl	800f18e <mbedtls_mpi_mul_mpi>
 801297a:	4603      	mov	r3, r0
 801297c:	b940      	cbnz	r0, 8012990 <ecp_mul_comb+0x3d4>
 801297e:	4629      	mov	r1, r5
 8012980:	4650      	mov	r0, sl
 8012982:	f7fe fe93 	bl	80116ac <ecp_modp>
 8012986:	4603      	mov	r3, r0
 8012988:	b910      	cbnz	r0, 8012990 <ecp_mul_comb+0x3d4>
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	3201      	adds	r2, #1
 801298e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 8012990:	a813      	add	r0, sp, #76	; 0x4c
 8012992:	9303      	str	r3, [sp, #12]
 8012994:	f7fb fff2 	bl	800e97c <mbedtls_mpi_free>
 8012998:	a816      	add	r0, sp, #88	; 0x58
 801299a:	f7fb ffef 	bl	800e97c <mbedtls_mpi_free>
        MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 801299e:	9b03      	ldr	r3, [sp, #12]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d055      	beq.n	8012a50 <ecp_mul_comb+0x494>
 80129a4:	461c      	mov	r4, r3
 80129a6:	e057      	b.n	8012a58 <ecp_mul_comb+0x49c>
 80129a8:	4641      	mov	r1, r8
        for( j = 0; j < w; j++ )
 80129aa:	2400      	movs	r4, #0
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 80129ac:	4638      	mov	r0, r7
 80129ae:	e9cd 1306 	strd	r1, r3, [sp, #24]
 80129b2:	f7fc f8dc 	bl	800eb6e <mbedtls_mpi_get_bit>
 80129b6:	9b07      	ldr	r3, [sp, #28]
 80129b8:	781a      	ldrb	r2, [r3, #0]
 80129ba:	40a0      	lsls	r0, r4
 80129bc:	4310      	orrs	r0, r2
 80129be:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80129c2:	4411      	add	r1, r2
        for( j = 0; j < w; j++ )
 80129c4:	9a03      	ldr	r2, [sp, #12]
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 80129c6:	7018      	strb	r0, [r3, #0]
        for( j = 0; j < w; j++ )
 80129c8:	3401      	adds	r4, #1
 80129ca:	42a2      	cmp	r2, r4
 80129cc:	d8ee      	bhi.n	80129ac <ecp_mul_comb+0x3f0>
    for( i = 0; i < d; i++ )
 80129ce:	f108 0801 	add.w	r8, r8, #1
 80129d2:	3301      	adds	r3, #1
 80129d4:	e724      	b.n	8012820 <ecp_mul_comb+0x264>
        cc   = x[i] & c;
 80129d6:	f89a 0001 	ldrb.w	r0, [sl, #1]
        c   |= x[i] & ( x[i-1] * adjust );
 80129da:	f89a 2000 	ldrb.w	r2, [sl]
        x[i] = x[i] ^ c;
 80129de:	ea80 0307 	eor.w	r3, r0, r7
        adjust = 1 - ( x[i] & 0x01 );
 80129e2:	43d9      	mvns	r1, r3
 80129e4:	f001 0101 	and.w	r1, r1, #1
        c   |= x[i] & ( x[i-1] * adjust );
 80129e8:	fb12 f201 	smulbb	r2, r2, r1
 80129ec:	b25b      	sxtb	r3, r3
 80129ee:	b252      	sxtb	r2, r2
 80129f0:	ea03 0c02 	and.w	ip, r3, r2
        x[i] = x[i] ^ ( x[i-1] * adjust );
 80129f4:	4053      	eors	r3, r2
 80129f6:	f80a 3f01 	strb.w	r3, [sl, #1]!
        x[i-1] |= adjust << 7;
 80129fa:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
        cc   = x[i] & c;
 80129fe:	4038      	ands	r0, r7
        c   |= x[i] & ( x[i-1] * adjust );
 8012a00:	ea4c 0700 	orr.w	r7, ip, r0
        x[i-1] |= adjust << 7;
 8012a04:	ea43 11c1 	orr.w	r1, r3, r1, lsl #7
        c   |= x[i] & ( x[i-1] * adjust );
 8012a08:	b2ff      	uxtb	r7, r7
        x[i-1] |= adjust << 7;
 8012a0a:	f80a 1c01 	strb.w	r1, [sl, #-1]
    for( i = 1; i <= d; i++ )
 8012a0e:	3401      	adds	r4, #1
 8012a10:	e70c      	b.n	801282c <ecp_mul_comb+0x270>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8012a12:	2101      	movs	r1, #1
 8012a14:	4638      	mov	r0, r7
 8012a16:	f7fc f99c 	bl	800ed52 <mbedtls_mpi_shift_r>
 8012a1a:	e742      	b.n	80128a2 <ecp_mul_comb+0x2e6>
        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 8012a1c:	4632      	mov	r2, r6
 8012a1e:	4631      	mov	r1, r6
 8012a20:	4628      	mov	r0, r5
 8012a22:	f7fe fe89 	bl	8011738 <ecp_double_jac>
 8012a26:	b988      	cbnz	r0, 8012a4c <ecp_mul_comb+0x490>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 8012a28:	f818 3007 	ldrb.w	r3, [r8, r7]
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	465a      	mov	r2, fp
 8012a30:	ee18 3a10 	vmov	r3, s16
 8012a34:	a919      	add	r1, sp, #100	; 0x64
 8012a36:	4628      	mov	r0, r5
 8012a38:	f7fe fe05 	bl	8011646 <ecp_select_comb>
 8012a3c:	b930      	cbnz	r0, 8012a4c <ecp_mul_comb+0x490>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 8012a3e:	ab19      	add	r3, sp, #100	; 0x64
 8012a40:	4632      	mov	r2, r6
 8012a42:	4631      	mov	r1, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	f7ff fb83 	bl	8012150 <ecp_add_mixed>
 8012a4a:	b110      	cbz	r0, 8012a52 <ecp_mul_comb+0x496>
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	e003      	b.n	8012a58 <ecp_mul_comb+0x49c>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, t_len, x[i] ) );
 8012a50:	af22      	add	r7, sp, #136	; 0x88
    while( i-- != 0 )
 8012a52:	f1b8 0801 	subs.w	r8, r8, #1
 8012a56:	d2e1      	bcs.n	8012a1c <ecp_mul_comb+0x460>
    if( pt == NULL )
 8012a58:	a819      	add	r0, sp, #100	; 0x64
 8012a5a:	f7ff faa3 	bl	8011fa4 <mbedtls_ecp_point_free.part.0>
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, R, T, pre_len, k, d, f_rng, p_rng ) );
 8012a5e:	2c00      	cmp	r4, #0
 8012a60:	f47f ae43 	bne.w	80126ea <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, ! m_is_odd ) );
 8012a64:	464a      	mov	r2, r9
 8012a66:	4631      	mov	r1, r6
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f7fe fdc9 	bl	8011600 <ecp_safe_invert_jac>
 8012a6e:	4604      	mov	r4, r0
 8012a70:	2800      	cmp	r0, #0
 8012a72:	f47f ae3a 	bne.w	80126ea <ecp_mul_comb+0x12e>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012a76:	4631      	mov	r1, r6
 8012a78:	4628      	mov	r0, r5
 8012a7a:	f7ff f8db 	bl	8011c34 <ecp_normalize_jac>
 8012a7e:	4604      	mov	r4, r0
cleanup:
 8012a80:	e633      	b.n	80126ea <ecp_mul_comb+0x12e>
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8012a82:	4c03      	ldr	r4, [pc, #12]	; (8012a90 <ecp_mul_comb+0x4d4>)
 8012a84:	e643      	b.n	801270e <ecp_mul_comb+0x152>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012a86:	4c03      	ldr	r4, [pc, #12]	; (8012a94 <ecp_mul_comb+0x4d8>)
 8012a88:	e64b      	b.n	8012722 <ecp_mul_comb+0x166>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8012a8a:	4c03      	ldr	r4, [pc, #12]	; (8012a98 <ecp_mul_comb+0x4dc>)
 8012a8c:	e7e4      	b.n	8012a58 <ecp_mul_comb+0x49c>
 8012a8e:	bf00      	nop
 8012a90:	ffffb280 	.word	0xffffb280
 8012a94:	ffffb080 	.word	0xffffb080
 8012a98:	ffffb300 	.word	0xffffb300
 8012a9c:	200010c4 	.word	0x200010c4

08012aa0 <mbedtls_ecp_is_zero>:
{
 8012aa0:	b508      	push	{r3, lr}
    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	3018      	adds	r0, #24
 8012aa6:	f7fc fa6b 	bl	800ef80 <mbedtls_mpi_cmp_int>
}
 8012aaa:	fab0 f080 	clz	r0, r0
 8012aae:	0940      	lsrs	r0, r0, #5
 8012ab0:	bd08      	pop	{r3, pc}
	...

08012ab4 <mbedtls_ecp_point_write_binary>:
{
 8012ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 8012ab8:	2a01      	cmp	r2, #1
{
 8012aba:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
 8012abe:	4605      	mov	r5, r0
 8012ac0:	460e      	mov	r6, r1
 8012ac2:	4690      	mov	r8, r2
 8012ac4:	461f      	mov	r7, r3
    if( format != MBEDTLS_ECP_PF_UNCOMPRESSED &&
 8012ac6:	d83e      	bhi.n	8012b46 <mbedtls_ecp_point_write_binary+0x92>
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 8012ac8:	2100      	movs	r1, #0
 8012aca:	f106 0018 	add.w	r0, r6, #24
 8012ace:	f7fc fa57 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012ad2:	b948      	cbnz	r0, 8012ae8 <mbedtls_ecp_point_write_binary+0x34>
        if( buflen < 1 )
 8012ad4:	f1b9 0f00 	cmp.w	r9, #0
 8012ad8:	d102      	bne.n	8012ae0 <mbedtls_ecp_point_write_binary+0x2c>
            return( MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL );
 8012ada:	481c      	ldr	r0, [pc, #112]	; (8012b4c <mbedtls_ecp_point_write_binary+0x98>)
}
 8012adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *olen = 1;
 8012ae0:	2301      	movs	r3, #1
        buf[0] = 0x00;
 8012ae2:	7020      	strb	r0, [r4, #0]
        *olen = 1;
 8012ae4:	603b      	str	r3, [r7, #0]
        return( 0 );
 8012ae6:	e7f9      	b.n	8012adc <mbedtls_ecp_point_write_binary+0x28>
    plen = mbedtls_mpi_size( &grp->P );
 8012ae8:	1d28      	adds	r0, r5, #4
 8012aea:	f7fc f888 	bl	800ebfe <mbedtls_mpi_size>
 8012aee:	4605      	mov	r5, r0
    if( format == MBEDTLS_ECP_PF_UNCOMPRESSED )
 8012af0:	f1b8 0f00 	cmp.w	r8, #0
 8012af4:	d117      	bne.n	8012b26 <mbedtls_ecp_point_write_binary+0x72>
        *olen = 2 * plen + 1;
 8012af6:	0043      	lsls	r3, r0, #1
 8012af8:	3301      	adds	r3, #1
        if( buflen < *olen )
 8012afa:	4599      	cmp	r9, r3
        *olen = 2 * plen + 1;
 8012afc:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
 8012afe:	d3ec      	bcc.n	8012ada <mbedtls_ecp_point_write_binary+0x26>
        buf[0] = 0x04;
 8012b00:	4621      	mov	r1, r4
 8012b02:	2304      	movs	r3, #4
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012b04:	4602      	mov	r2, r0
        buf[0] = 0x04;
 8012b06:	f801 3b01 	strb.w	r3, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012b0a:	4630      	mov	r0, r6
 8012b0c:	f7fc f8b0 	bl	800ec70 <mbedtls_mpi_write_binary>
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d1e3      	bne.n	8012adc <mbedtls_ecp_point_write_binary+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->Y, buf + 1 + plen, plen ) );
 8012b14:	1c69      	adds	r1, r5, #1
 8012b16:	462a      	mov	r2, r5
 8012b18:	4421      	add	r1, r4
 8012b1a:	f106 000c 	add.w	r0, r6, #12
}
 8012b1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012b22:	f7fc b8a5 	b.w	800ec70 <mbedtls_mpi_write_binary>
        *olen = plen + 1;
 8012b26:	1c43      	adds	r3, r0, #1
        if( buflen < *olen )
 8012b28:	4599      	cmp	r9, r3
        *olen = plen + 1;
 8012b2a:	603b      	str	r3, [r7, #0]
        if( buflen < *olen )
 8012b2c:	d3d5      	bcc.n	8012ada <mbedtls_ecp_point_write_binary+0x26>
        buf[0] = 0x02 + mbedtls_mpi_get_bit( &P->Y, 0 );
 8012b2e:	2100      	movs	r1, #0
 8012b30:	f106 000c 	add.w	r0, r6, #12
 8012b34:	f7fc f81b 	bl	800eb6e <mbedtls_mpi_get_bit>
 8012b38:	4621      	mov	r1, r4
 8012b3a:	3002      	adds	r0, #2
 8012b3c:	f801 0b01 	strb.w	r0, [r1], #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &P->X, buf + 1, plen ) );
 8012b40:	462a      	mov	r2, r5
 8012b42:	4630      	mov	r0, r6
 8012b44:	e7eb      	b.n	8012b1e <mbedtls_ecp_point_write_binary+0x6a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012b46:	4802      	ldr	r0, [pc, #8]	; (8012b50 <mbedtls_ecp_point_write_binary+0x9c>)
 8012b48:	e7c8      	b.n	8012adc <mbedtls_ecp_point_write_binary+0x28>
 8012b4a:	bf00      	nop
 8012b4c:	ffffb100 	.word	0xffffb100
 8012b50:	ffffb080 	.word	0xffffb080

08012b54 <mbedtls_ecp_point_read_binary>:
{
 8012b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b56:	460c      	mov	r4, r1
 8012b58:	4615      	mov	r5, r2
    if( ilen < 1 )
 8012b5a:	461f      	mov	r7, r3
 8012b5c:	b90b      	cbnz	r3, 8012b62 <mbedtls_ecp_point_read_binary+0xe>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012b5e:	4817      	ldr	r0, [pc, #92]	; (8012bbc <mbedtls_ecp_point_read_binary+0x68>)
}
 8012b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if( buf[0] == 0x00 )
 8012b62:	7813      	ldrb	r3, [r2, #0]
 8012b64:	b933      	cbnz	r3, 8012b74 <mbedtls_ecp_point_read_binary+0x20>
        if( ilen == 1 )
 8012b66:	2f01      	cmp	r7, #1
 8012b68:	d1f9      	bne.n	8012b5e <mbedtls_ecp_point_read_binary+0xa>
}
 8012b6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            return( mbedtls_ecp_set_zero( pt ) );
 8012b6e:	4608      	mov	r0, r1
 8012b70:	f7ff bad9 	b.w	8012126 <mbedtls_ecp_set_zero>
    plen = mbedtls_mpi_size( &grp->P );
 8012b74:	3004      	adds	r0, #4
 8012b76:	f7fc f842 	bl	800ebfe <mbedtls_mpi_size>
    if( buf[0] != 0x04 )
 8012b7a:	782b      	ldrb	r3, [r5, #0]
 8012b7c:	2b04      	cmp	r3, #4
    plen = mbedtls_mpi_size( &grp->P );
 8012b7e:	4606      	mov	r6, r0
    if( buf[0] != 0x04 )
 8012b80:	d11a      	bne.n	8012bb8 <mbedtls_ecp_point_read_binary+0x64>
    if( ilen != 2 * plen + 1 )
 8012b82:	0043      	lsls	r3, r0, #1
 8012b84:	3301      	adds	r3, #1
 8012b86:	429f      	cmp	r7, r3
 8012b88:	d1e9      	bne.n	8012b5e <mbedtls_ecp_point_read_binary+0xa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->X, buf + 1, plen ) );
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	1c69      	adds	r1, r5, #1
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f7fc f83b 	bl	800ec0a <mbedtls_mpi_read_binary>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d1e3      	bne.n	8012b60 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &pt->Y, buf + 1 + plen, plen ) );
 8012b98:	1c71      	adds	r1, r6, #1
 8012b9a:	4632      	mov	r2, r6
 8012b9c:	4429      	add	r1, r5
 8012b9e:	f104 000c 	add.w	r0, r4, #12
 8012ba2:	f7fc f832 	bl	800ec0a <mbedtls_mpi_read_binary>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d1da      	bne.n	8012b60 <mbedtls_ecp_point_read_binary+0xc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8012baa:	f104 0018 	add.w	r0, r4, #24
 8012bae:	2101      	movs	r1, #1
}
 8012bb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 8012bb4:	f7fb bfbf 	b.w	800eb36 <mbedtls_mpi_lset>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012bb8:	4801      	ldr	r0, [pc, #4]	; (8012bc0 <mbedtls_ecp_point_read_binary+0x6c>)
 8012bba:	e7d1      	b.n	8012b60 <mbedtls_ecp_point_read_binary+0xc>
 8012bbc:	ffffb080 	.word	0xffffb080
 8012bc0:	ffffb180 	.word	0xffffb180

08012bc4 <mbedtls_ecp_tls_read_point>:
    if( buf_len < 2 )
 8012bc4:	2b01      	cmp	r3, #1
{
 8012bc6:	b470      	push	{r4, r5, r6}
    if( buf_len < 2 )
 8012bc8:	d90e      	bls.n	8012be8 <mbedtls_ecp_tls_read_point+0x24>
    data_len = *(*buf)++;
 8012bca:	6814      	ldr	r4, [r2, #0]
 8012bcc:	1c66      	adds	r6, r4, #1
 8012bce:	6016      	str	r6, [r2, #0]
 8012bd0:	7825      	ldrb	r5, [r4, #0]
    if( data_len < 1 || data_len > buf_len - 1 )
 8012bd2:	b14d      	cbz	r5, 8012be8 <mbedtls_ecp_tls_read_point+0x24>
 8012bd4:	1e5c      	subs	r4, r3, #1
 8012bd6:	42a5      	cmp	r5, r4
 8012bd8:	d806      	bhi.n	8012be8 <mbedtls_ecp_tls_read_point+0x24>
    *buf += data_len;
 8012bda:	1973      	adds	r3, r6, r5
 8012bdc:	6013      	str	r3, [r2, #0]
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 8012bde:	462b      	mov	r3, r5
 8012be0:	4632      	mov	r2, r6
}
 8012be2:	bc70      	pop	{r4, r5, r6}
    return mbedtls_ecp_point_read_binary( grp, pt, buf_start, data_len );
 8012be4:	f7ff bfb6 	b.w	8012b54 <mbedtls_ecp_point_read_binary>
}
 8012be8:	4801      	ldr	r0, [pc, #4]	; (8012bf0 <mbedtls_ecp_tls_read_point+0x2c>)
 8012bea:	bc70      	pop	{r4, r5, r6}
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	ffffb080 	.word	0xffffb080

08012bf4 <mbedtls_ecp_tls_write_point>:
{
 8012bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bf6:	e9dd 6506 	ldrd	r6, r5, [sp, #24]
 8012bfa:	461c      	mov	r4, r3
    if( blen < 1 )
 8012bfc:	b16d      	cbz	r5, 8012c1a <mbedtls_ecp_tls_write_point+0x26>
    if( ( ret = mbedtls_ecp_point_write_binary( grp, pt, format,
 8012bfe:	3d01      	subs	r5, #1
 8012c00:	9501      	str	r5, [sp, #4]
 8012c02:	1c75      	adds	r5, r6, #1
 8012c04:	9500      	str	r5, [sp, #0]
 8012c06:	f7ff ff55 	bl	8012ab4 <mbedtls_ecp_point_write_binary>
 8012c0a:	b920      	cbnz	r0, 8012c16 <mbedtls_ecp_tls_write_point+0x22>
    buf[0] = (unsigned char) *olen;
 8012c0c:	6823      	ldr	r3, [r4, #0]
 8012c0e:	7033      	strb	r3, [r6, #0]
    ++*olen;
 8012c10:	6823      	ldr	r3, [r4, #0]
 8012c12:	3301      	adds	r3, #1
 8012c14:	6023      	str	r3, [r4, #0]
}
 8012c16:	b002      	add	sp, #8
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012c1a:	4801      	ldr	r0, [pc, #4]	; (8012c20 <mbedtls_ecp_tls_write_point+0x2c>)
 8012c1c:	e7fb      	b.n	8012c16 <mbedtls_ecp_tls_write_point+0x22>
 8012c1e:	bf00      	nop
 8012c20:	ffffb080 	.word	0xffffb080

08012c24 <mbedtls_ecp_tls_read_group>:
    if( len < 3 )
 8012c24:	2a02      	cmp	r2, #2
{
 8012c26:	b510      	push	{r4, lr}
 8012c28:	4604      	mov	r4, r0
    if( len < 3 )
 8012c2a:	d801      	bhi.n	8012c30 <mbedtls_ecp_tls_read_group+0xc>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012c2c:	480d      	ldr	r0, [pc, #52]	; (8012c64 <mbedtls_ecp_tls_read_group+0x40>)
}
 8012c2e:	bd10      	pop	{r4, pc}
    if( *(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE )
 8012c30:	680b      	ldr	r3, [r1, #0]
 8012c32:	1c5a      	adds	r2, r3, #1
 8012c34:	600a      	str	r2, [r1, #0]
 8012c36:	781a      	ldrb	r2, [r3, #0]
 8012c38:	2a03      	cmp	r2, #3
 8012c3a:	d1f7      	bne.n	8012c2c <mbedtls_ecp_tls_read_group+0x8>
    tls_id = *(*buf)++;
 8012c3c:	1c9a      	adds	r2, r3, #2
 8012c3e:	600a      	str	r2, [r1, #0]
    tls_id |= *(*buf)++;
 8012c40:	1cda      	adds	r2, r3, #3
    tls_id = *(*buf)++;
 8012c42:	7858      	ldrb	r0, [r3, #1]
    tls_id |= *(*buf)++;
 8012c44:	600a      	str	r2, [r1, #0]
 8012c46:	789b      	ldrb	r3, [r3, #2]
    if( ( curve_info = mbedtls_ecp_curve_info_from_tls_id( tls_id ) ) == NULL )
 8012c48:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8012c4c:	f7ff f9e0 	bl	8012010 <mbedtls_ecp_curve_info_from_tls_id>
 8012c50:	b128      	cbz	r0, 8012c5e <mbedtls_ecp_tls_read_group+0x3a>
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012c52:	7801      	ldrb	r1, [r0, #0]
 8012c54:	4620      	mov	r0, r4
}
 8012c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return mbedtls_ecp_group_load( grp, curve_info->grp_id );
 8012c5a:	f001 b82d 	b.w	8013cb8 <mbedtls_ecp_group_load>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012c5e:	4802      	ldr	r0, [pc, #8]	; (8012c68 <mbedtls_ecp_tls_read_group+0x44>)
 8012c60:	e7e5      	b.n	8012c2e <mbedtls_ecp_tls_read_group+0xa>
 8012c62:	bf00      	nop
 8012c64:	ffffb080 	.word	0xffffb080
 8012c68:	ffffb180 	.word	0xffffb180

08012c6c <mbedtls_ecp_check_pubkey>:

/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8012c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c70:	4688      	mov	r8, r1
 8012c72:	b088      	sub	sp, #32
 8012c74:	4606      	mov	r6, r0
    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8012c76:	2101      	movs	r1, #1
 8012c78:	f108 0018 	add.w	r0, r8, #24
 8012c7c:	f7fc f980 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012c80:	9001      	str	r0, [sp, #4]
 8012c82:	b960      	cbnz	r0, 8012c9e <mbedtls_ecp_check_pubkey+0x32>
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
        return( ecp_check_pubkey_mx( grp, pt ) );
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012c84:	4630      	mov	r0, r6
 8012c86:	f7fe fcb1 	bl	80115ec <ecp_get_type>
 8012c8a:	2801      	cmp	r0, #1
 8012c8c:	f040 80ac 	bne.w	8012de8 <mbedtls_ecp_check_pubkey+0x17c>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012c90:	9901      	ldr	r1, [sp, #4]
 8012c92:	4640      	mov	r0, r8
 8012c94:	f7fc f974 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012c98:	2800      	cmp	r0, #0
 8012c9a:	9901      	ldr	r1, [sp, #4]
 8012c9c:	da01      	bge.n	8012ca2 <mbedtls_ecp_check_pubkey+0x36>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012c9e:	4c53      	ldr	r4, [pc, #332]	; (8012dec <mbedtls_ecp_check_pubkey+0x180>)
 8012ca0:	e077      	b.n	8012d92 <mbedtls_ecp_check_pubkey+0x126>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012ca2:	f108 040c 	add.w	r4, r8, #12
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f7fc f96a 	bl	800ef80 <mbedtls_mpi_cmp_int>
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8012cac:	2800      	cmp	r0, #0
 8012cae:	dbf6      	blt.n	8012c9e <mbedtls_ecp_check_pubkey+0x32>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8012cb0:	1d35      	adds	r5, r6, #4
 8012cb2:	4629      	mov	r1, r5
 8012cb4:	4640      	mov	r0, r8
 8012cb6:	f7fc f920 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	daef      	bge.n	8012c9e <mbedtls_ecp_check_pubkey+0x32>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f7fc f91a 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	dae9      	bge.n	8012c9e <mbedtls_ecp_check_pubkey+0x32>
    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8012cca:	a802      	add	r0, sp, #8
 8012ccc:	f7fb fe4f 	bl	800e96e <mbedtls_mpi_init>
 8012cd0:	a805      	add	r0, sp, #20
 8012cd2:	f7fb fe4c 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012cd6:	4622      	mov	r2, r4
 8012cd8:	4621      	mov	r1, r4
 8012cda:	a802      	add	r0, sp, #8
 8012cdc:	f7fc fa57 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	2800      	cmp	r0, #0
 8012ce4:	d14f      	bne.n	8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012ce6:	4631      	mov	r1, r6
 8012ce8:	a802      	add	r0, sp, #8
 8012cea:	f7fe fcdf 	bl	80116ac <ecp_modp>
 8012cee:	4604      	mov	r4, r0
 8012cf0:	2800      	cmp	r0, #0
 8012cf2:	d148      	bne.n	8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012cf4:	4f3e      	ldr	r7, [pc, #248]	; (8012df0 <mbedtls_ecp_check_pubkey+0x184>)
 8012cf6:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012cf8:	4642      	mov	r2, r8
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012cfa:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012cfc:	4641      	mov	r1, r8
 8012cfe:	a805      	add	r0, sp, #20
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8012d00:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8012d02:	f7fc fa44 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012d06:	4604      	mov	r4, r0
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d13c      	bne.n	8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	a805      	add	r0, sp, #20
 8012d10:	f7fe fccc 	bl	80116ac <ecp_modp>
 8012d14:	4604      	mov	r4, r0
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d135      	bne.n	8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	607b      	str	r3, [r7, #4]
    if( grp->A.p == NULL )
 8012d20:	69b3      	ldr	r3, [r6, #24]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d145      	bne.n	8012db2 <mbedtls_ecp_check_pubkey+0x146>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012d26:	a905      	add	r1, sp, #20
 8012d28:	2203      	movs	r2, #3
 8012d2a:	4608      	mov	r0, r1
 8012d2c:	f7fc fa19 	bl	800f162 <mbedtls_mpi_sub_int>
 8012d30:	4604      	mov	r4, r0
 8012d32:	bb40      	cbnz	r0, 8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012d34:	9b05      	ldr	r3, [sp, #20]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	db2f      	blt.n	8012d9a <mbedtls_ecp_check_pubkey+0x12e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012d3a:	a905      	add	r1, sp, #20
 8012d3c:	4642      	mov	r2, r8
 8012d3e:	4608      	mov	r0, r1
 8012d40:	f7fc fa25 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8012d44:	4604      	mov	r4, r0
 8012d46:	b9f0      	cbnz	r0, 8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012d48:	4631      	mov	r1, r6
 8012d4a:	a805      	add	r0, sp, #20
 8012d4c:	f7fe fcae 	bl	80116ac <ecp_modp>
 8012d50:	4604      	mov	r4, r0
 8012d52:	b9c0      	cbnz	r0, 8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012d54:	687b      	ldr	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012d56:	a905      	add	r1, sp, #20
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012d58:	3301      	adds	r3, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012d5a:	f106 021c 	add.w	r2, r6, #28
 8012d5e:	4608      	mov	r0, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8012d60:	607b      	str	r3, [r7, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012d62:	f7fc f9b9 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8012d66:	4604      	mov	r4, r0
 8012d68:	b968      	cbnz	r0, 8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	a805      	add	r0, sp, #20
 8012d6e:	f7fc f8c4 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8012d72:	2800      	cmp	r0, #0
 8012d74:	da32      	bge.n	8012ddc <mbedtls_ecp_check_pubkey+0x170>
    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8012d76:	a905      	add	r1, sp, #20
 8012d78:	a802      	add	r0, sp, #8
 8012d7a:	f7fc f8be 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8012d7e:	4b1b      	ldr	r3, [pc, #108]	; (8012dec <mbedtls_ecp_check_pubkey+0x180>)
 8012d80:	1e04      	subs	r4, r0, #0
 8012d82:	bf18      	it	ne
 8012d84:	461c      	movne	r4, r3
    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8012d86:	a802      	add	r0, sp, #8
 8012d88:	f7fb fdf8 	bl	800e97c <mbedtls_mpi_free>
 8012d8c:	a805      	add	r0, sp, #20
 8012d8e:	f7fb fdf5 	bl	800e97c <mbedtls_mpi_free>
        return( ecp_check_pubkey_sw( grp, pt ) );
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8012d92:	4620      	mov	r0, r4
 8012d94:	b008      	add	sp, #32
 8012d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8012d9a:	2100      	movs	r1, #0
 8012d9c:	a805      	add	r0, sp, #20
 8012d9e:	f7fc f8ef 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d0c9      	beq.n	8012d3a <mbedtls_ecp_check_pubkey+0xce>
 8012da6:	a905      	add	r1, sp, #20
 8012da8:	462a      	mov	r2, r5
 8012daa:	4608      	mov	r0, r1
 8012dac:	f7fc f994 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8012db0:	e7be      	b.n	8012d30 <mbedtls_ecp_check_pubkey+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8012db2:	a905      	add	r1, sp, #20
 8012db4:	f106 0210 	add.w	r2, r6, #16
 8012db8:	4608      	mov	r0, r1
 8012dba:	f7fc f98d 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8012dbe:	4604      	mov	r4, r0
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d1e0      	bne.n	8012d86 <mbedtls_ecp_check_pubkey+0x11a>
 8012dc4:	4629      	mov	r1, r5
 8012dc6:	a805      	add	r0, sp, #20
 8012dc8:	f7fc f897 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	dbb4      	blt.n	8012d3a <mbedtls_ecp_check_pubkey+0xce>
 8012dd0:	a905      	add	r1, sp, #20
 8012dd2:	462a      	mov	r2, r5
 8012dd4:	4608      	mov	r0, r1
 8012dd6:	f7fc f942 	bl	800f05e <mbedtls_mpi_sub_abs>
 8012dda:	e7f0      	b.n	8012dbe <mbedtls_ecp_check_pubkey+0x152>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8012ddc:	a905      	add	r1, sp, #20
 8012dde:	462a      	mov	r2, r5
 8012de0:	4608      	mov	r0, r1
 8012de2:	f7fc f93c 	bl	800f05e <mbedtls_mpi_sub_abs>
 8012de6:	e7be      	b.n	8012d66 <mbedtls_ecp_check_pubkey+0xfa>
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012de8:	4c02      	ldr	r4, [pc, #8]	; (8012df4 <mbedtls_ecp_check_pubkey+0x188>)
 8012dea:	e7d2      	b.n	8012d92 <mbedtls_ecp_check_pubkey+0x126>
 8012dec:	ffffb380 	.word	0xffffb380
 8012df0:	200010c4 	.word	0x200010c4
 8012df4:	ffffb080 	.word	0xffffb080

08012df8 <mbedtls_ecp_check_privkey>:

/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp, const mbedtls_mpi *d )
{
 8012df8:	b538      	push	{r3, r4, r5, lr}
 8012dfa:	460c      	mov	r4, r1
 8012dfc:	4605      	mov	r5, r0
        else
            return( 0 );
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012dfe:	f7fe fbf5 	bl	80115ec <ecp_get_type>
 8012e02:	2801      	cmp	r0, #1
 8012e04:	4601      	mov	r1, r0
 8012e06:	d10d      	bne.n	8012e24 <mbedtls_ecp_check_privkey+0x2c>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f7fc f8b9 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	db06      	blt.n	8012e20 <mbedtls_ecp_check_privkey+0x28>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8012e12:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8012e16:	4620      	mov	r0, r4
 8012e18:	f7fc f86f 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	db03      	blt.n	8012e28 <mbedtls_ecp_check_privkey+0x30>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8012e20:	4802      	ldr	r0, [pc, #8]	; (8012e2c <mbedtls_ecp_check_privkey+0x34>)
            return( 0 );
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
}
 8012e22:	bd38      	pop	{r3, r4, r5, pc}
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012e24:	4802      	ldr	r0, [pc, #8]	; (8012e30 <mbedtls_ecp_check_privkey+0x38>)
 8012e26:	e7fc      	b.n	8012e22 <mbedtls_ecp_check_privkey+0x2a>
            return( 0 );
 8012e28:	2000      	movs	r0, #0
 8012e2a:	e7fa      	b.n	8012e22 <mbedtls_ecp_check_privkey+0x2a>
 8012e2c:	ffffb380 	.word	0xffffb380
 8012e30:	ffffb080 	.word	0xffffb080

08012e34 <mbedtls_ecp_mul>:
{
 8012e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e38:	4605      	mov	r5, r0
 8012e3a:	460f      	mov	r7, r1
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012e3c:	f103 0018 	add.w	r0, r3, #24
 8012e40:	2101      	movs	r1, #1
{
 8012e42:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8012e46:	4616      	mov	r6, r2
 8012e48:	469a      	mov	sl, r3
    if( mbedtls_mpi_cmp_int( &P->Z, 1 ) != 0 )
 8012e4a:	f7fc f899 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012e4e:	b9d0      	cbnz	r0, 8012e86 <mbedtls_ecp_mul+0x52>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012e50:	4631      	mov	r1, r6
 8012e52:	4628      	mov	r0, r5
 8012e54:	f7ff ffd0 	bl	8012df8 <mbedtls_ecp_check_privkey>
 8012e58:	4604      	mov	r4, r0
 8012e5a:	b9a8      	cbnz	r0, 8012e88 <mbedtls_ecp_mul+0x54>
        ( ret = mbedtls_ecp_check_pubkey( grp, P ) ) != 0 )
 8012e5c:	4651      	mov	r1, sl
 8012e5e:	4628      	mov	r0, r5
 8012e60:	f7ff ff04 	bl	8012c6c <mbedtls_ecp_check_pubkey>
    if( ( ret = mbedtls_ecp_check_privkey( grp, m ) ) != 0 ||
 8012e64:	4604      	mov	r4, r0
 8012e66:	b978      	cbnz	r0, 8012e88 <mbedtls_ecp_mul+0x54>
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f7fe fbbf 	bl	80115ec <ecp_get_type>
 8012e6e:	2801      	cmp	r0, #1
 8012e70:	d10a      	bne.n	8012e88 <mbedtls_ecp_mul+0x54>
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 8012e72:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8012e76:	4653      	mov	r3, sl
 8012e78:	4632      	mov	r2, r6
 8012e7a:	4639      	mov	r1, r7
 8012e7c:	4628      	mov	r0, r5
}
 8012e7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ret = ecp_mul_comb( grp, R, m, P, f_rng, p_rng );
 8012e82:	f7ff bb9b 	b.w	80125bc <ecp_mul_comb>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012e86:	4c02      	ldr	r4, [pc, #8]	; (8012e90 <mbedtls_ecp_mul+0x5c>)
}
 8012e88:	4620      	mov	r0, r4
 8012e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e8e:	bf00      	nop
 8012e90:	ffffb080 	.word	0xffffb080

08012e94 <mbedtls_ecp_mul_shortcuts>:
{
 8012e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e96:	4607      	mov	r7, r0
 8012e98:	b085      	sub	sp, #20
 8012e9a:	460c      	mov	r4, r1
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012e9c:	4610      	mov	r0, r2
 8012e9e:	2101      	movs	r1, #1
{
 8012ea0:	4615      	mov	r5, r2
 8012ea2:	461e      	mov	r6, r3
    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8012ea4:	f7fc f86c 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012ea8:	b930      	cbnz	r0, 8012eb8 <mbedtls_ecp_mul_shortcuts+0x24>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012eaa:	4631      	mov	r1, r6
 8012eac:	4620      	mov	r0, r4
}
 8012eae:	b005      	add	sp, #20
 8012eb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012eb4:	f7ff b91e 	b.w	80120f4 <mbedtls_ecp_copy>
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8012eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f7fc f85f 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012ec2:	b9a0      	cbnz	r0, 8012eee <mbedtls_ecp_mul_shortcuts+0x5a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f7ff f914 	bl	80120f4 <mbedtls_ecp_copy>
 8012ecc:	b9c0      	cbnz	r0, 8012f00 <mbedtls_ecp_mul_shortcuts+0x6c>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8012ece:	f104 020c 	add.w	r2, r4, #12
 8012ed2:	4601      	mov	r1, r0
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	9203      	str	r2, [sp, #12]
 8012ed8:	f7fc f852 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8012edc:	9a03      	ldr	r2, [sp, #12]
 8012ede:	b178      	cbz	r0, 8012f00 <mbedtls_ecp_mul_shortcuts+0x6c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8012ee0:	1d39      	adds	r1, r7, #4
 8012ee2:	4610      	mov	r0, r2
}
 8012ee4:	b005      	add	sp, #20
 8012ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8012eea:	f7fc b917 	b.w	800f11c <mbedtls_mpi_sub_mpi>
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul( grp, R, m, P, NULL, NULL ) );
 8012eee:	2300      	movs	r3, #0
 8012ef0:	e9cd 3300 	strd	r3, r3, [sp]
 8012ef4:	462a      	mov	r2, r5
 8012ef6:	4633      	mov	r3, r6
 8012ef8:	4621      	mov	r1, r4
 8012efa:	4638      	mov	r0, r7
 8012efc:	f7ff ff9a 	bl	8012e34 <mbedtls_ecp_mul>
}
 8012f00:	b005      	add	sp, #20
 8012f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f04 <mbedtls_ecp_muladd>:
{
 8012f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f06:	b08b      	sub	sp, #44	; 0x2c
 8012f08:	4605      	mov	r5, r0
 8012f0a:	460e      	mov	r6, r1
 8012f0c:	4614      	mov	r4, r2
 8012f0e:	461f      	mov	r7, r3
    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8012f10:	f7fe fb6c 	bl	80115ec <ecp_get_type>
 8012f14:	2801      	cmp	r0, #1
 8012f16:	d125      	bne.n	8012f64 <mbedtls_ecp_muladd+0x60>
    if( pt == NULL )
 8012f18:	a801      	add	r0, sp, #4
 8012f1a:	f7ff f835 	bl	8011f88 <mbedtls_ecp_point_init.part.0>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, &mP, m, P ) );
 8012f1e:	4622      	mov	r2, r4
 8012f20:	463b      	mov	r3, r7
 8012f22:	a901      	add	r1, sp, #4
 8012f24:	4628      	mov	r0, r5
 8012f26:	f7ff ffb5 	bl	8012e94 <mbedtls_ecp_mul_shortcuts>
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	b9a0      	cbnz	r0, 8012f58 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, R,   n, Q ) );
 8012f2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012f32:	4631      	mov	r1, r6
 8012f34:	4628      	mov	r0, r5
 8012f36:	f7ff ffad 	bl	8012e94 <mbedtls_ecp_mul_shortcuts>
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	b960      	cbnz	r0, 8012f58 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, &mP, R ) );
 8012f3e:	4633      	mov	r3, r6
 8012f40:	aa01      	add	r2, sp, #4
 8012f42:	4631      	mov	r1, r6
 8012f44:	4628      	mov	r0, r5
 8012f46:	f7ff f903 	bl	8012150 <ecp_add_mixed>
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	b920      	cbnz	r0, 8012f58 <mbedtls_ecp_muladd+0x54>
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, R ) );
 8012f4e:	4631      	mov	r1, r6
 8012f50:	4628      	mov	r0, r5
 8012f52:	f7fe fe6f 	bl	8011c34 <ecp_normalize_jac>
 8012f56:	4604      	mov	r4, r0
    if( pt == NULL )
 8012f58:	a801      	add	r0, sp, #4
 8012f5a:	f7ff f823 	bl	8011fa4 <mbedtls_ecp_point_free.part.0>
}
 8012f5e:	4620      	mov	r0, r4
 8012f60:	b00b      	add	sp, #44	; 0x2c
 8012f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8012f64:	4c00      	ldr	r4, [pc, #0]	; (8012f68 <mbedtls_ecp_muladd+0x64>)
 8012f66:	e7fa      	b.n	8012f5e <mbedtls_ecp_muladd+0x5a>
 8012f68:	ffffb180 	.word	0xffffb180

08012f6c <mbedtls_ecp_gen_keypair_base>:
int mbedtls_ecp_gen_keypair_base( mbedtls_ecp_group *grp,
                     const mbedtls_ecp_point *G,
                     mbedtls_mpi *d, mbedtls_ecp_point *Q,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 8012f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f70:	b095      	sub	sp, #84	; 0x54
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012f72:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
{
 8012f74:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8012f78:	4605      	mov	r5, r0
 8012f7a:	4688      	mov	r8, r1
 8012f7c:	4614      	mov	r4, r2
 8012f7e:	461f      	mov	r7, r3
        MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( d, 2, 0 ) );
    }
    else
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012f80:	f7fe fb34 	bl	80115ec <ecp_get_type>
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012f84:	3607      	adds	r6, #7
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012f86:	2801      	cmp	r0, #1
    size_t n_size = ( grp->nbits + 7 ) / 8;
 8012f88:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8012f8c:	d003      	beq.n	8012f96 <mbedtls_ecp_gen_keypair_base+0x2a>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
    }
    else
#endif /* ECP_SHORTWEIERSTRASS */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8012f8e:	481d      	ldr	r0, [pc, #116]	; (8013004 <mbedtls_ecp_gen_keypair_base+0x98>)
cleanup:
    if( ret != 0 )
        return( ret );

    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
}
 8012f90:	b015      	add	sp, #84	; 0x54
 8012f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f96:	f04f 091f 	mov.w	r9, #31
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8012f9a:	f026 0607 	bic.w	r6, r6, #7
            MBEDTLS_MPI_CHK( f_rng( p_rng, rnd, n_size ) );
 8012f9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012fa0:	465a      	mov	r2, fp
 8012fa2:	a903      	add	r1, sp, #12
 8012fa4:	4650      	mov	r0, sl
 8012fa6:	4798      	blx	r3
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d1f1      	bne.n	8012f90 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( d, rnd, n_size ) );
 8012fac:	465a      	mov	r2, fp
 8012fae:	a903      	add	r1, sp, #12
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f7fb fe2a 	bl	800ec0a <mbedtls_mpi_read_binary>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d1ea      	bne.n	8012f90 <mbedtls_ecp_gen_keypair_base+0x24>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( d, 8 * n_size - grp->nbits ) );
 8012fba:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	1a71      	subs	r1, r6, r1
 8012fc0:	f7fb fec7 	bl	800ed52 <mbedtls_mpi_shift_r>
 8012fc4:	2800      	cmp	r0, #0
 8012fc6:	d1e3      	bne.n	8012f90 <mbedtls_ecp_gen_keypair_base+0x24>
            if( ++count > 30 )
 8012fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8012fcc:	d102      	bne.n	8012fd4 <mbedtls_ecp_gen_keypair_base+0x68>
                return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 8012fce:	f5a0 409a 	sub.w	r0, r0, #19712	; 0x4d00
 8012fd2:	e7dd      	b.n	8012f90 <mbedtls_ecp_gen_keypair_base+0x24>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012fd4:	2101      	movs	r1, #1
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	f7fb ffd2 	bl	800ef80 <mbedtls_mpi_cmp_int>
               mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 );
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	dbde      	blt.n	8012f9e <mbedtls_ecp_gen_keypair_base+0x32>
 8012fe0:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f7fb ff88 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        while( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8012fea:	2800      	cmp	r0, #0
 8012fec:	dad7      	bge.n	8012f9e <mbedtls_ecp_gen_keypair_base+0x32>
    return( mbedtls_ecp_mul( grp, Q, d, G, f_rng, p_rng ) );
 8012fee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012ff0:	9300      	str	r3, [sp, #0]
 8012ff2:	f8cd a004 	str.w	sl, [sp, #4]
 8012ff6:	4643      	mov	r3, r8
 8012ff8:	4622      	mov	r2, r4
 8012ffa:	4639      	mov	r1, r7
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	f7ff ff19 	bl	8012e34 <mbedtls_ecp_mul>
 8013002:	e7c5      	b.n	8012f90 <mbedtls_ecp_gen_keypair_base+0x24>
 8013004:	ffffb080 	.word	0xffffb080

08013008 <mbedtls_ecp_gen_keypair>:
 */
int mbedtls_ecp_gen_keypair( mbedtls_ecp_group *grp,
                             mbedtls_mpi *d, mbedtls_ecp_point *Q,
                             int (*f_rng)(void *, unsigned char *, size_t),
                             void *p_rng )
{
 8013008:	b513      	push	{r0, r1, r4, lr}
    return( mbedtls_ecp_gen_keypair_base( grp, &grp->G, d, Q, f_rng, p_rng ) );
 801300a:	9c04      	ldr	r4, [sp, #16]
 801300c:	e9cd 3400 	strd	r3, r4, [sp]
 8013010:	4613      	mov	r3, r2
 8013012:	460a      	mov	r2, r1
 8013014:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8013018:	f7ff ffa8 	bl	8012f6c <mbedtls_ecp_gen_keypair_base>
}
 801301c:	b002      	add	sp, #8
 801301e:	bd10      	pop	{r4, pc}

08013020 <mbedtls_ecp_check_pub_priv>:

/*
 * Check a public-private key pair
 */
int mbedtls_ecp_check_pub_priv( const mbedtls_ecp_keypair *pub, const mbedtls_ecp_keypair *prv )
{
 8013020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret;
    mbedtls_ecp_point Q;
    mbedtls_ecp_group grp;

    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8013024:	7803      	ldrb	r3, [r0, #0]
{
 8013026:	b0aa      	sub	sp, #168	; 0xa8
 8013028:	4605      	mov	r5, r0
 801302a:	460c      	mov	r4, r1
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 801302c:	b923      	cbnz	r3, 8013038 <mbedtls_ecp_check_pub_priv+0x18>
        pub->grp.id != prv->grp.id ||
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801302e:	4c29      	ldr	r4, [pc, #164]	; (80130d4 <mbedtls_ecp_check_pub_priv+0xb4>)
cleanup:
    mbedtls_ecp_point_free( &Q );
    mbedtls_ecp_group_free( &grp );

    return( ret );
}
 8013030:	4620      	mov	r0, r4
 8013032:	b02a      	add	sp, #168	; 0xa8
 8013034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( pub->grp.id == MBEDTLS_ECP_DP_NONE ||
 8013038:	780a      	ldrb	r2, [r1, #0]
 801303a:	429a      	cmp	r2, r3
 801303c:	d1f7      	bne.n	801302e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 801303e:	f101 0888 	add.w	r8, r1, #136	; 0x88
 8013042:	4641      	mov	r1, r8
 8013044:	3088      	adds	r0, #136	; 0x88
 8013046:	f7fb ff58 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        pub->grp.id != prv->grp.id ||
 801304a:	2800      	cmp	r0, #0
 801304c:	d1ef      	bne.n	801302e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 801304e:	f104 0794 	add.w	r7, r4, #148	; 0x94
 8013052:	4639      	mov	r1, r7
 8013054:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8013058:	f7fb ff4f 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.X, &prv->Q.X ) ||
 801305c:	2800      	cmp	r0, #0
 801305e:	d1e6      	bne.n	801302e <mbedtls_ecp_check_pub_priv+0xe>
        mbedtls_mpi_cmp_mpi( &pub->Q.Z, &prv->Q.Z ) )
 8013060:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 8013064:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8013068:	4631      	mov	r1, r6
 801306a:	f7fb ff46 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &pub->Q.Y, &prv->Q.Y ) ||
 801306e:	4605      	mov	r5, r0
 8013070:	2800      	cmp	r0, #0
 8013072:	d1dc      	bne.n	801302e <mbedtls_ecp_check_pub_priv+0xe>
    if( pt == NULL )
 8013074:	a802      	add	r0, sp, #8
 8013076:	f7fe ff87 	bl	8011f88 <mbedtls_ecp_point_init.part.0>
    memset( grp, 0, sizeof( mbedtls_ecp_group ) );
 801307a:	227c      	movs	r2, #124	; 0x7c
 801307c:	4629      	mov	r1, r5
 801307e:	a80b      	add	r0, sp, #44	; 0x2c
 8013080:	f00f f9da 	bl	8022438 <memset>
    mbedtls_ecp_group_copy( &grp, &prv->grp );
 8013084:	4621      	mov	r1, r4
 8013086:	a80b      	add	r0, sp, #44	; 0x2c
 8013088:	f7ff f84a 	bl	8012120 <mbedtls_ecp_group_copy>
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul( &grp, &Q, &prv->d, &prv->grp.G, NULL, NULL ) );
 801308c:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013090:	f104 027c 	add.w	r2, r4, #124	; 0x7c
 8013094:	e9cd 5500 	strd	r5, r5, [sp]
 8013098:	a902      	add	r1, sp, #8
 801309a:	a80b      	add	r0, sp, #44	; 0x2c
 801309c:	f7ff feca 	bl	8012e34 <mbedtls_ecp_mul>
 80130a0:	4604      	mov	r4, r0
 80130a2:	b980      	cbnz	r0, 80130c6 <mbedtls_ecp_check_pub_priv+0xa6>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80130a4:	4641      	mov	r1, r8
 80130a6:	a802      	add	r0, sp, #8
 80130a8:	f7fb ff27 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80130ac:	b950      	cbnz	r0, 80130c4 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80130ae:	4639      	mov	r1, r7
 80130b0:	a805      	add	r0, sp, #20
 80130b2:	f7fb ff22 	bl	800eefa <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &Q.X, &prv->Q.X ) ||
 80130b6:	b928      	cbnz	r0, 80130c4 <mbedtls_ecp_check_pub_priv+0xa4>
        mbedtls_mpi_cmp_mpi( &Q.Z, &prv->Q.Z ) )
 80130b8:	4631      	mov	r1, r6
 80130ba:	a808      	add	r0, sp, #32
 80130bc:	f7fb ff1d 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &Q.Y, &prv->Q.Y ) ||
 80130c0:	4604      	mov	r4, r0
 80130c2:	b100      	cbz	r0, 80130c6 <mbedtls_ecp_check_pub_priv+0xa6>
        ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 80130c4:	4c03      	ldr	r4, [pc, #12]	; (80130d4 <mbedtls_ecp_check_pub_priv+0xb4>)
    if( pt == NULL )
 80130c6:	a802      	add	r0, sp, #8
 80130c8:	f7fe ff6c 	bl	8011fa4 <mbedtls_ecp_point_free.part.0>
    mbedtls_ecp_group_free( &grp );
 80130cc:	a80b      	add	r0, sp, #44	; 0x2c
 80130ce:	f7fe ffcb 	bl	8012068 <mbedtls_ecp_group_free>
    return( ret );
 80130d2:	e7ad      	b.n	8013030 <mbedtls_ecp_check_pub_priv+0x10>
 80130d4:	ffffb080 	.word	0xffffb080

080130d8 <add32>:
/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *dst += src;
 80130d8:	6803      	ldr	r3, [r0, #0]
 80130da:	1859      	adds	r1, r3, r1
 80130dc:	6001      	str	r1, [r0, #0]
    *carry += ( *dst < src );
 80130de:	7811      	ldrb	r1, [r2, #0]
 80130e0:	bf2c      	ite	cs
 80130e2:	2301      	movcs	r3, #1
 80130e4:	2300      	movcc	r3, #0
 80130e6:	440b      	add	r3, r1
 80130e8:	7013      	strb	r3, [r2, #0]
}
 80130ea:	4770      	bx	lr

080130ec <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
    *carry -= ( *dst < src );
 80130ec:	7813      	ldrb	r3, [r2, #0]
{
 80130ee:	b510      	push	{r4, lr}
    *carry -= ( *dst < src );
 80130f0:	6804      	ldr	r4, [r0, #0]
 80130f2:	428c      	cmp	r4, r1
 80130f4:	bf38      	it	cc
 80130f6:	3b01      	subcc	r3, #1
 80130f8:	7013      	strb	r3, [r2, #0]
    *dst -= src;
 80130fa:	6803      	ldr	r3, [r0, #0]
 80130fc:	1a59      	subs	r1, r3, r1
 80130fe:	6001      	str	r1, [r0, #0]
}
 8013100:	bd10      	pop	{r4, pc}

08013102 <fix_negative.isra.0>:

/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 8013102:	b538      	push	{r3, r4, r5, lr}
 8013104:	4613      	mov	r3, r2
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8013106:	6852      	ldr	r2, [r2, #4]
 8013108:	689d      	ldr	r5, [r3, #8]
 801310a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801310e:	3a01      	subs	r2, #1
 8013110:	4249      	negs	r1, r1
 8013112:	f845 1022 	str.w	r1, [r5, r2, lsl #2]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8013116:	4602      	mov	r2, r0
 8013118:	4619      	mov	r1, r3
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
 801311a:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 801311c:	f7fb ff9f 	bl	800f05e <mbedtls_mpi_sub_abs>
 8013120:	b910      	cbnz	r0, 8013128 <fix_negative.isra.0+0x26>
    N->s = -1;
 8013122:	f04f 33ff 	mov.w	r3, #4294967295
 8013126:	6023      	str	r3, [r4, #0]

cleanup:

    return( ret );
}
 8013128:	bd38      	pop	{r3, r4, r5, pc}

0801312a <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 801312a:	b570      	push	{r4, r5, r6, lr}
    INIT( 384 );
 801312c:	230d      	movs	r3, #13
{
 801312e:	b092      	sub	sp, #72	; 0x48
    INIT( 384 );
 8013130:	2201      	movs	r2, #1
 8013132:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013136:	2100      	movs	r1, #0
{
 8013138:	4604      	mov	r4, r0
    INIT( 384 );
 801313a:	2234      	movs	r2, #52	; 0x34
 801313c:	a805      	add	r0, sp, #20
 801313e:	f88d 1003 	strb.w	r1, [sp, #3]
 8013142:	9004      	str	r0, [sp, #16]
 8013144:	f00f f978 	bl	8022438 <memset>
 8013148:	2118      	movs	r1, #24
 801314a:	4620      	mov	r0, r4
 801314c:	f7fb fc2e 	bl	800e9ac <mbedtls_mpi_grow>
 8013150:	4605      	mov	r5, r0
 8013152:	2800      	cmp	r0, #0
 8013154:	f040 82b4 	bne.w	80136c0 <ecp_mod_p384+0x596>
 8013158:	68a3      	ldr	r3, [r4, #8]
 801315a:	681a      	ldr	r2, [r3, #0]

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 801315c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    INIT( 384 );
 801315e:	9201      	str	r2, [sp, #4]
    ADD( 12 ); ADD( 21 ); ADD( 20 );
 8013160:	a801      	add	r0, sp, #4
 8013162:	f10d 0203 	add.w	r2, sp, #3
 8013166:	f7ff ffb7 	bl	80130d8 <add32>
 801316a:	68a3      	ldr	r3, [r4, #8]
 801316c:	f10d 0203 	add.w	r2, sp, #3
 8013170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013172:	a801      	add	r0, sp, #4
 8013174:	f7ff ffb0 	bl	80130d8 <add32>
 8013178:	68a3      	ldr	r3, [r4, #8]
 801317a:	f10d 0203 	add.w	r2, sp, #3
 801317e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013180:	a801      	add	r0, sp, #4
 8013182:	f7ff ffa9 	bl	80130d8 <add32>
    SUB( 23 );                                              NEXT; // A0
 8013186:	68a3      	ldr	r3, [r4, #8]
 8013188:	f10d 0203 	add.w	r2, sp, #3
 801318c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801318e:	a801      	add	r0, sp, #4
 8013190:	f7ff ffac 	bl	80130ec <sub32>
 8013194:	68a3      	ldr	r3, [r4, #8]
 8013196:	9a01      	ldr	r2, [sp, #4]
 8013198:	601a      	str	r2, [r3, #0]
 801319a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	9301      	str	r3, [sp, #4]
 80131a2:	2900      	cmp	r1, #0
 80131a4:	f88d 5003 	strb.w	r5, [sp, #3]
 80131a8:	f10d 0203 	add.w	r2, sp, #3
 80131ac:	f280 828b 	bge.w	80136c6 <ecp_mod_p384+0x59c>
 80131b0:	4249      	negs	r1, r1
 80131b2:	a801      	add	r0, sp, #4
 80131b4:	f7ff ff9a 	bl	80130ec <sub32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 80131b8:	68a3      	ldr	r3, [r4, #8]
 80131ba:	f10d 0203 	add.w	r2, sp, #3
 80131be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80131c0:	a801      	add	r0, sp, #4
 80131c2:	f7ff ff89 	bl	80130d8 <add32>
 80131c6:	68a3      	ldr	r3, [r4, #8]
 80131c8:	f10d 0203 	add.w	r2, sp, #3
 80131cc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80131ce:	a801      	add	r0, sp, #4
 80131d0:	f7ff ff82 	bl	80130d8 <add32>
 80131d4:	68a3      	ldr	r3, [r4, #8]
 80131d6:	f10d 0203 	add.w	r2, sp, #3
 80131da:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80131dc:	a801      	add	r0, sp, #4
 80131de:	f7ff ff7b 	bl	80130d8 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 80131e2:	68a3      	ldr	r3, [r4, #8]
 80131e4:	f10d 0203 	add.w	r2, sp, #3
 80131e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80131ea:	a801      	add	r0, sp, #4
 80131ec:	f7ff ff7e 	bl	80130ec <sub32>
 80131f0:	68a3      	ldr	r3, [r4, #8]
 80131f2:	f10d 0203 	add.w	r2, sp, #3
 80131f6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80131f8:	a801      	add	r0, sp, #4
 80131fa:	f7ff ff77 	bl	80130ec <sub32>
 80131fe:	68a3      	ldr	r3, [r4, #8]
 8013200:	9a01      	ldr	r2, [sp, #4]
 8013202:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013206:	605a      	str	r2, [r3, #4]
 8013208:	689b      	ldr	r3, [r3, #8]
 801320a:	9301      	str	r3, [sp, #4]
 801320c:	2300      	movs	r3, #0
 801320e:	4299      	cmp	r1, r3
 8013210:	f88d 3003 	strb.w	r3, [sp, #3]
 8013214:	f10d 0203 	add.w	r2, sp, #3
 8013218:	f280 8259 	bge.w	80136ce <ecp_mod_p384+0x5a4>
 801321c:	4249      	negs	r1, r1
 801321e:	a801      	add	r0, sp, #4
 8013220:	f7ff ff64 	bl	80130ec <sub32>

    ADD( 14 ); ADD( 23 );
 8013224:	68a3      	ldr	r3, [r4, #8]
 8013226:	f10d 0203 	add.w	r2, sp, #3
 801322a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801322c:	a801      	add	r0, sp, #4
 801322e:	f7ff ff53 	bl	80130d8 <add32>
 8013232:	68a3      	ldr	r3, [r4, #8]
 8013234:	f10d 0203 	add.w	r2, sp, #3
 8013238:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801323a:	a801      	add	r0, sp, #4
 801323c:	f7ff ff4c 	bl	80130d8 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8013240:	68a3      	ldr	r3, [r4, #8]
 8013242:	f10d 0203 	add.w	r2, sp, #3
 8013246:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013248:	a801      	add	r0, sp, #4
 801324a:	f7ff ff4f 	bl	80130ec <sub32>
 801324e:	68a3      	ldr	r3, [r4, #8]
 8013250:	f10d 0203 	add.w	r2, sp, #3
 8013254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013256:	a801      	add	r0, sp, #4
 8013258:	f7ff ff48 	bl	80130ec <sub32>
 801325c:	68a3      	ldr	r3, [r4, #8]
 801325e:	9a01      	ldr	r2, [sp, #4]
 8013260:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013264:	609a      	str	r2, [r3, #8]
 8013266:	68db      	ldr	r3, [r3, #12]
 8013268:	9301      	str	r3, [sp, #4]
 801326a:	2300      	movs	r3, #0
 801326c:	4299      	cmp	r1, r3
 801326e:	f88d 3003 	strb.w	r3, [sp, #3]
 8013272:	f10d 0203 	add.w	r2, sp, #3
 8013276:	f280 822e 	bge.w	80136d6 <ecp_mod_p384+0x5ac>
 801327a:	4249      	negs	r1, r1
 801327c:	a801      	add	r0, sp, #4
 801327e:	f7ff ff35 	bl	80130ec <sub32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 8013282:	68a3      	ldr	r3, [r4, #8]
 8013284:	f10d 0203 	add.w	r2, sp, #3
 8013288:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801328a:	a801      	add	r0, sp, #4
 801328c:	f7ff ff24 	bl	80130d8 <add32>
 8013290:	68a3      	ldr	r3, [r4, #8]
 8013292:	f10d 0203 	add.w	r2, sp, #3
 8013296:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013298:	a801      	add	r0, sp, #4
 801329a:	f7ff ff1d 	bl	80130d8 <add32>
 801329e:	68a3      	ldr	r3, [r4, #8]
 80132a0:	f10d 0203 	add.w	r2, sp, #3
 80132a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80132a6:	a801      	add	r0, sp, #4
 80132a8:	f7ff ff16 	bl	80130d8 <add32>
 80132ac:	68a3      	ldr	r3, [r4, #8]
 80132ae:	f10d 0203 	add.w	r2, sp, #3
 80132b2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80132b4:	a801      	add	r0, sp, #4
 80132b6:	f7ff ff0f 	bl	80130d8 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 80132ba:	68a3      	ldr	r3, [r4, #8]
 80132bc:	f10d 0203 	add.w	r2, sp, #3
 80132c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80132c2:	a801      	add	r0, sp, #4
 80132c4:	f7ff ff12 	bl	80130ec <sub32>
 80132c8:	68a3      	ldr	r3, [r4, #8]
 80132ca:	f10d 0203 	add.w	r2, sp, #3
 80132ce:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80132d0:	a801      	add	r0, sp, #4
 80132d2:	f7ff ff0b 	bl	80130ec <sub32>
 80132d6:	68a3      	ldr	r3, [r4, #8]
 80132d8:	f10d 0203 	add.w	r2, sp, #3
 80132dc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80132de:	a801      	add	r0, sp, #4
 80132e0:	f7ff ff04 	bl	80130ec <sub32>
 80132e4:	68a3      	ldr	r3, [r4, #8]
 80132e6:	9a01      	ldr	r2, [sp, #4]
 80132e8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80132ec:	60da      	str	r2, [r3, #12]
 80132ee:	691b      	ldr	r3, [r3, #16]
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	2300      	movs	r3, #0
 80132f4:	4299      	cmp	r1, r3
 80132f6:	f88d 3003 	strb.w	r3, [sp, #3]
 80132fa:	f10d 0203 	add.w	r2, sp, #3
 80132fe:	f280 81ee 	bge.w	80136de <ecp_mod_p384+0x5b4>
 8013302:	4249      	negs	r1, r1
 8013304:	a801      	add	r0, sp, #4
 8013306:	f7ff fef1 	bl	80130ec <sub32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 801330a:	68a3      	ldr	r3, [r4, #8]
 801330c:	f10d 0203 	add.w	r2, sp, #3
 8013310:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013312:	a801      	add	r0, sp, #4
 8013314:	f7ff fee0 	bl	80130d8 <add32>
 8013318:	68a3      	ldr	r3, [r4, #8]
 801331a:	f10d 0203 	add.w	r2, sp, #3
 801331e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013320:	a801      	add	r0, sp, #4
 8013322:	f7ff fed9 	bl	80130d8 <add32>
 8013326:	68a3      	ldr	r3, [r4, #8]
 8013328:	f10d 0203 	add.w	r2, sp, #3
 801332c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801332e:	a801      	add	r0, sp, #4
 8013330:	f7ff fed2 	bl	80130d8 <add32>
 8013334:	68a3      	ldr	r3, [r4, #8]
 8013336:	f10d 0203 	add.w	r2, sp, #3
 801333a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801333c:	a801      	add	r0, sp, #4
 801333e:	f7ff fecb 	bl	80130d8 <add32>
 8013342:	68a3      	ldr	r3, [r4, #8]
 8013344:	f10d 0203 	add.w	r2, sp, #3
 8013348:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801334a:	a801      	add	r0, sp, #4
 801334c:	f7ff fec4 	bl	80130d8 <add32>
 8013350:	68a3      	ldr	r3, [r4, #8]
 8013352:	f10d 0203 	add.w	r2, sp, #3
 8013356:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013358:	a801      	add	r0, sp, #4
 801335a:	f7ff febd 	bl	80130d8 <add32>
 801335e:	68a3      	ldr	r3, [r4, #8]
 8013360:	f10d 0203 	add.w	r2, sp, #3
 8013364:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013366:	a801      	add	r0, sp, #4
 8013368:	f7ff feb6 	bl	80130d8 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 801336c:	68a3      	ldr	r3, [r4, #8]
 801336e:	f10d 0203 	add.w	r2, sp, #3
 8013372:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013374:	a801      	add	r0, sp, #4
 8013376:	f7ff feb9 	bl	80130ec <sub32>
 801337a:	68a3      	ldr	r3, [r4, #8]
 801337c:	f10d 0203 	add.w	r2, sp, #3
 8013380:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013382:	a801      	add	r0, sp, #4
 8013384:	f7ff feb2 	bl	80130ec <sub32>
 8013388:	68a3      	ldr	r3, [r4, #8]
 801338a:	f10d 0203 	add.w	r2, sp, #3
 801338e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013390:	a801      	add	r0, sp, #4
 8013392:	f7ff feab 	bl	80130ec <sub32>
 8013396:	68a3      	ldr	r3, [r4, #8]
 8013398:	9a01      	ldr	r2, [sp, #4]
 801339a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801339e:	611a      	str	r2, [r3, #16]
 80133a0:	695b      	ldr	r3, [r3, #20]
 80133a2:	9301      	str	r3, [sp, #4]
 80133a4:	2300      	movs	r3, #0
 80133a6:	4299      	cmp	r1, r3
 80133a8:	f88d 3003 	strb.w	r3, [sp, #3]
 80133ac:	f10d 0203 	add.w	r2, sp, #3
 80133b0:	f280 8199 	bge.w	80136e6 <ecp_mod_p384+0x5bc>
 80133b4:	4249      	negs	r1, r1
 80133b6:	a801      	add	r0, sp, #4
 80133b8:	f7ff fe98 	bl	80130ec <sub32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 80133bc:	68a3      	ldr	r3, [r4, #8]
 80133be:	f10d 0203 	add.w	r2, sp, #3
 80133c2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80133c4:	a801      	add	r0, sp, #4
 80133c6:	f7ff fe87 	bl	80130d8 <add32>
 80133ca:	68a3      	ldr	r3, [r4, #8]
 80133cc:	f10d 0203 	add.w	r2, sp, #3
 80133d0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80133d2:	a801      	add	r0, sp, #4
 80133d4:	f7ff fe80 	bl	80130d8 <add32>
 80133d8:	68a3      	ldr	r3, [r4, #8]
 80133da:	f10d 0203 	add.w	r2, sp, #3
 80133de:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80133e0:	a801      	add	r0, sp, #4
 80133e2:	f7ff fe79 	bl	80130d8 <add32>
 80133e6:	68a3      	ldr	r3, [r4, #8]
 80133e8:	f10d 0203 	add.w	r2, sp, #3
 80133ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80133ee:	a801      	add	r0, sp, #4
 80133f0:	f7ff fe72 	bl	80130d8 <add32>
 80133f4:	68a3      	ldr	r3, [r4, #8]
 80133f6:	f10d 0203 	add.w	r2, sp, #3
 80133fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80133fc:	a801      	add	r0, sp, #4
 80133fe:	f7ff fe6b 	bl	80130d8 <add32>
 8013402:	68a3      	ldr	r3, [r4, #8]
 8013404:	f10d 0203 	add.w	r2, sp, #3
 8013408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801340a:	a801      	add	r0, sp, #4
 801340c:	f7ff fe64 	bl	80130d8 <add32>
 8013410:	68a3      	ldr	r3, [r4, #8]
 8013412:	f10d 0203 	add.w	r2, sp, #3
 8013416:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013418:	a801      	add	r0, sp, #4
 801341a:	f7ff fe5d 	bl	80130d8 <add32>
    SUB( 16 );                                              NEXT; // A5
 801341e:	68a3      	ldr	r3, [r4, #8]
 8013420:	f10d 0203 	add.w	r2, sp, #3
 8013424:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8013426:	a801      	add	r0, sp, #4
 8013428:	f7ff fe60 	bl	80130ec <sub32>
 801342c:	68a3      	ldr	r3, [r4, #8]
 801342e:	9a01      	ldr	r2, [sp, #4]
 8013430:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013434:	615a      	str	r2, [r3, #20]
 8013436:	699b      	ldr	r3, [r3, #24]
 8013438:	9301      	str	r3, [sp, #4]
 801343a:	2300      	movs	r3, #0
 801343c:	4299      	cmp	r1, r3
 801343e:	f88d 3003 	strb.w	r3, [sp, #3]
 8013442:	f10d 0203 	add.w	r2, sp, #3
 8013446:	f280 8152 	bge.w	80136ee <ecp_mod_p384+0x5c4>
 801344a:	4249      	negs	r1, r1
 801344c:	a801      	add	r0, sp, #4
 801344e:	f7ff fe4d 	bl	80130ec <sub32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 8013452:	68a3      	ldr	r3, [r4, #8]
 8013454:	f10d 0203 	add.w	r2, sp, #3
 8013458:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801345a:	a801      	add	r0, sp, #4
 801345c:	f7ff fe3c 	bl	80130d8 <add32>
 8013460:	68a3      	ldr	r3, [r4, #8]
 8013462:	f10d 0203 	add.w	r2, sp, #3
 8013466:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013468:	a801      	add	r0, sp, #4
 801346a:	f7ff fe35 	bl	80130d8 <add32>
 801346e:	68a3      	ldr	r3, [r4, #8]
 8013470:	f10d 0203 	add.w	r2, sp, #3
 8013474:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8013476:	a801      	add	r0, sp, #4
 8013478:	f7ff fe2e 	bl	80130d8 <add32>
 801347c:	68a3      	ldr	r3, [r4, #8]
 801347e:	f10d 0203 	add.w	r2, sp, #3
 8013482:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013484:	a801      	add	r0, sp, #4
 8013486:	f7ff fe27 	bl	80130d8 <add32>
 801348a:	68a3      	ldr	r3, [r4, #8]
 801348c:	f10d 0203 	add.w	r2, sp, #3
 8013490:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013492:	a801      	add	r0, sp, #4
 8013494:	f7ff fe20 	bl	80130d8 <add32>
 8013498:	68a3      	ldr	r3, [r4, #8]
 801349a:	f10d 0203 	add.w	r2, sp, #3
 801349e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80134a0:	a801      	add	r0, sp, #4
 80134a2:	f7ff fe19 	bl	80130d8 <add32>
    SUB( 17 );                                              NEXT; // A6
 80134a6:	68a3      	ldr	r3, [r4, #8]
 80134a8:	f10d 0203 	add.w	r2, sp, #3
 80134ac:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80134ae:	a801      	add	r0, sp, #4
 80134b0:	f7ff fe1c 	bl	80130ec <sub32>
 80134b4:	68a3      	ldr	r3, [r4, #8]
 80134b6:	9a01      	ldr	r2, [sp, #4]
 80134b8:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80134bc:	619a      	str	r2, [r3, #24]
 80134be:	69db      	ldr	r3, [r3, #28]
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	2300      	movs	r3, #0
 80134c4:	4299      	cmp	r1, r3
 80134c6:	f88d 3003 	strb.w	r3, [sp, #3]
 80134ca:	f10d 0203 	add.w	r2, sp, #3
 80134ce:	f280 8112 	bge.w	80136f6 <ecp_mod_p384+0x5cc>
 80134d2:	4249      	negs	r1, r1
 80134d4:	a801      	add	r0, sp, #4
 80134d6:	f7ff fe09 	bl	80130ec <sub32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 80134da:	68a3      	ldr	r3, [r4, #8]
 80134dc:	f10d 0203 	add.w	r2, sp, #3
 80134e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80134e2:	a801      	add	r0, sp, #4
 80134e4:	f7ff fdf8 	bl	80130d8 <add32>
 80134e8:	68a3      	ldr	r3, [r4, #8]
 80134ea:	f10d 0203 	add.w	r2, sp, #3
 80134ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80134f0:	a801      	add	r0, sp, #4
 80134f2:	f7ff fdf1 	bl	80130d8 <add32>
 80134f6:	68a3      	ldr	r3, [r4, #8]
 80134f8:	f10d 0203 	add.w	r2, sp, #3
 80134fc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80134fe:	a801      	add	r0, sp, #4
 8013500:	f7ff fdea 	bl	80130d8 <add32>
 8013504:	68a3      	ldr	r3, [r4, #8]
 8013506:	f10d 0203 	add.w	r2, sp, #3
 801350a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801350c:	a801      	add	r0, sp, #4
 801350e:	f7ff fde3 	bl	80130d8 <add32>
    SUB( 18 );                                              NEXT; // A7
 8013512:	68a3      	ldr	r3, [r4, #8]
 8013514:	f10d 0203 	add.w	r2, sp, #3
 8013518:	6c99      	ldr	r1, [r3, #72]	; 0x48
 801351a:	a801      	add	r0, sp, #4
 801351c:	f7ff fde6 	bl	80130ec <sub32>
 8013520:	68a3      	ldr	r3, [r4, #8]
 8013522:	9a01      	ldr	r2, [sp, #4]
 8013524:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013528:	61da      	str	r2, [r3, #28]
 801352a:	6a1b      	ldr	r3, [r3, #32]
 801352c:	9301      	str	r3, [sp, #4]
 801352e:	2300      	movs	r3, #0
 8013530:	4299      	cmp	r1, r3
 8013532:	f88d 3003 	strb.w	r3, [sp, #3]
 8013536:	f10d 0203 	add.w	r2, sp, #3
 801353a:	f280 80e0 	bge.w	80136fe <ecp_mod_p384+0x5d4>
 801353e:	4249      	negs	r1, r1
 8013540:	a801      	add	r0, sp, #4
 8013542:	f7ff fdd3 	bl	80130ec <sub32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 8013546:	68a3      	ldr	r3, [r4, #8]
 8013548:	f10d 0203 	add.w	r2, sp, #3
 801354c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801354e:	a801      	add	r0, sp, #4
 8013550:	f7ff fdc2 	bl	80130d8 <add32>
 8013554:	68a3      	ldr	r3, [r4, #8]
 8013556:	f10d 0203 	add.w	r2, sp, #3
 801355a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801355c:	a801      	add	r0, sp, #4
 801355e:	f7ff fdbb 	bl	80130d8 <add32>
 8013562:	68a3      	ldr	r3, [r4, #8]
 8013564:	f10d 0203 	add.w	r2, sp, #3
 8013568:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801356a:	a801      	add	r0, sp, #4
 801356c:	f7ff fdb4 	bl	80130d8 <add32>
    SUB( 19 );                                              NEXT; // A8
 8013570:	68a3      	ldr	r3, [r4, #8]
 8013572:	f10d 0203 	add.w	r2, sp, #3
 8013576:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013578:	a801      	add	r0, sp, #4
 801357a:	f7ff fdb7 	bl	80130ec <sub32>
 801357e:	68a3      	ldr	r3, [r4, #8]
 8013580:	9a01      	ldr	r2, [sp, #4]
 8013582:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013586:	621a      	str	r2, [r3, #32]
 8013588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801358a:	9301      	str	r3, [sp, #4]
 801358c:	2300      	movs	r3, #0
 801358e:	4299      	cmp	r1, r3
 8013590:	f88d 3003 	strb.w	r3, [sp, #3]
 8013594:	f10d 0203 	add.w	r2, sp, #3
 8013598:	f280 80b5 	bge.w	8013706 <ecp_mod_p384+0x5dc>
 801359c:	4249      	negs	r1, r1
 801359e:	a801      	add	r0, sp, #4
 80135a0:	f7ff fda4 	bl	80130ec <sub32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 80135a4:	68a3      	ldr	r3, [r4, #8]
 80135a6:	f10d 0203 	add.w	r2, sp, #3
 80135aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80135ac:	a801      	add	r0, sp, #4
 80135ae:	f7ff fd93 	bl	80130d8 <add32>
 80135b2:	68a3      	ldr	r3, [r4, #8]
 80135b4:	f10d 0203 	add.w	r2, sp, #3
 80135b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80135ba:	a801      	add	r0, sp, #4
 80135bc:	f7ff fd8c 	bl	80130d8 <add32>
 80135c0:	68a3      	ldr	r3, [r4, #8]
 80135c2:	f10d 0203 	add.w	r2, sp, #3
 80135c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80135c8:	a801      	add	r0, sp, #4
 80135ca:	f7ff fd85 	bl	80130d8 <add32>
    SUB( 20 );                                              NEXT; // A9
 80135ce:	68a3      	ldr	r3, [r4, #8]
 80135d0:	f10d 0203 	add.w	r2, sp, #3
 80135d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80135d6:	a801      	add	r0, sp, #4
 80135d8:	f7ff fd88 	bl	80130ec <sub32>
 80135dc:	68a3      	ldr	r3, [r4, #8]
 80135de:	9a01      	ldr	r2, [sp, #4]
 80135e0:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80135e4:	625a      	str	r2, [r3, #36]	; 0x24
 80135e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135e8:	9301      	str	r3, [sp, #4]
 80135ea:	2300      	movs	r3, #0
 80135ec:	4299      	cmp	r1, r3
 80135ee:	f88d 3003 	strb.w	r3, [sp, #3]
 80135f2:	f10d 0203 	add.w	r2, sp, #3
 80135f6:	f280 808a 	bge.w	801370e <ecp_mod_p384+0x5e4>
 80135fa:	4249      	negs	r1, r1
 80135fc:	a801      	add	r0, sp, #4
 80135fe:	f7ff fd75 	bl	80130ec <sub32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 8013602:	68a3      	ldr	r3, [r4, #8]
 8013604:	f10d 0203 	add.w	r2, sp, #3
 8013608:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801360a:	a801      	add	r0, sp, #4
 801360c:	f7ff fd64 	bl	80130d8 <add32>
 8013610:	68a3      	ldr	r3, [r4, #8]
 8013612:	f10d 0203 	add.w	r2, sp, #3
 8013616:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013618:	a801      	add	r0, sp, #4
 801361a:	f7ff fd5d 	bl	80130d8 <add32>
 801361e:	68a3      	ldr	r3, [r4, #8]
 8013620:	f10d 0203 	add.w	r2, sp, #3
 8013624:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8013626:	a801      	add	r0, sp, #4
 8013628:	f7ff fd56 	bl	80130d8 <add32>
    SUB( 21 );                                              NEXT; // A10
 801362c:	68a3      	ldr	r3, [r4, #8]
 801362e:	f10d 0203 	add.w	r2, sp, #3
 8013632:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013634:	a801      	add	r0, sp, #4
 8013636:	f7ff fd59 	bl	80130ec <sub32>
 801363a:	68a3      	ldr	r3, [r4, #8]
 801363c:	9a01      	ldr	r2, [sp, #4]
 801363e:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013642:	629a      	str	r2, [r3, #40]	; 0x28
 8013644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013646:	9301      	str	r3, [sp, #4]
 8013648:	2300      	movs	r3, #0
 801364a:	4299      	cmp	r1, r3
 801364c:	f88d 3003 	strb.w	r3, [sp, #3]
 8013650:	f10d 0203 	add.w	r2, sp, #3
 8013654:	da5f      	bge.n	8013716 <ecp_mod_p384+0x5ec>
 8013656:	4249      	negs	r1, r1
 8013658:	a801      	add	r0, sp, #4
 801365a:	f7ff fd47 	bl	80130ec <sub32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 801365e:	68a3      	ldr	r3, [r4, #8]
 8013660:	f10d 0203 	add.w	r2, sp, #3
 8013664:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013666:	a801      	add	r0, sp, #4
 8013668:	f7ff fd36 	bl	80130d8 <add32>
 801366c:	68a3      	ldr	r3, [r4, #8]
 801366e:	f10d 0203 	add.w	r2, sp, #3
 8013672:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8013674:	a801      	add	r0, sp, #4
 8013676:	f7ff fd2f 	bl	80130d8 <add32>
 801367a:	68a3      	ldr	r3, [r4, #8]
 801367c:	f10d 0203 	add.w	r2, sp, #3
 8013680:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8013682:	a801      	add	r0, sp, #4
 8013684:	f7ff fd28 	bl	80130d8 <add32>
    SUB( 22 );                                              LAST; // A11
 8013688:	68a3      	ldr	r3, [r4, #8]
 801368a:	f10d 0203 	add.w	r2, sp, #3
 801368e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013690:	a801      	add	r0, sp, #4
 8013692:	f7ff fd2b 	bl	80130ec <sub32>
 8013696:	68a2      	ldr	r2, [r4, #8]
 8013698:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801369c:	9b01      	ldr	r3, [sp, #4]
 801369e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80136a0:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 80136a4:	6313      	str	r3, [r2, #48]	; 0x30
 80136a6:	6860      	ldr	r0, [r4, #4]
 80136a8:	2300      	movs	r3, #0
 80136aa:	9301      	str	r3, [sp, #4]
 80136ac:	230c      	movs	r3, #12
 80136ae:	3301      	adds	r3, #1
 80136b0:	4298      	cmp	r0, r3
 80136b2:	d834      	bhi.n	801371e <ecp_mod_p384+0x5f4>
 80136b4:	2900      	cmp	r1, #0
 80136b6:	da03      	bge.n	80136c0 <ecp_mod_p384+0x596>
 80136b8:	aa02      	add	r2, sp, #8
 80136ba:	4620      	mov	r0, r4
 80136bc:	f7ff fd21 	bl	8013102 <fix_negative.isra.0>

cleanup:
    return( ret );
}
 80136c0:	4628      	mov	r0, r5
 80136c2:	b012      	add	sp, #72	; 0x48
 80136c4:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 23 );                                              NEXT; // A0
 80136c6:	a801      	add	r0, sp, #4
 80136c8:	f7ff fd06 	bl	80130d8 <add32>
 80136cc:	e574      	b.n	80131b8 <ecp_mod_p384+0x8e>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 80136ce:	a801      	add	r0, sp, #4
 80136d0:	f7ff fd02 	bl	80130d8 <add32>
 80136d4:	e5a6      	b.n	8013224 <ecp_mod_p384+0xfa>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 80136d6:	a801      	add	r0, sp, #4
 80136d8:	f7ff fcfe 	bl	80130d8 <add32>
 80136dc:	e5d1      	b.n	8013282 <ecp_mod_p384+0x158>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 80136de:	a801      	add	r0, sp, #4
 80136e0:	f7ff fcfa 	bl	80130d8 <add32>
 80136e4:	e611      	b.n	801330a <ecp_mod_p384+0x1e0>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 80136e6:	a801      	add	r0, sp, #4
 80136e8:	f7ff fcf6 	bl	80130d8 <add32>
 80136ec:	e666      	b.n	80133bc <ecp_mod_p384+0x292>
    SUB( 16 );                                              NEXT; // A5
 80136ee:	a801      	add	r0, sp, #4
 80136f0:	f7ff fcf2 	bl	80130d8 <add32>
 80136f4:	e6ad      	b.n	8013452 <ecp_mod_p384+0x328>
    SUB( 17 );                                              NEXT; // A6
 80136f6:	a801      	add	r0, sp, #4
 80136f8:	f7ff fcee 	bl	80130d8 <add32>
 80136fc:	e6ed      	b.n	80134da <ecp_mod_p384+0x3b0>
    SUB( 18 );                                              NEXT; // A7
 80136fe:	a801      	add	r0, sp, #4
 8013700:	f7ff fcea 	bl	80130d8 <add32>
 8013704:	e71f      	b.n	8013546 <ecp_mod_p384+0x41c>
    SUB( 19 );                                              NEXT; // A8
 8013706:	a801      	add	r0, sp, #4
 8013708:	f7ff fce6 	bl	80130d8 <add32>
 801370c:	e74a      	b.n	80135a4 <ecp_mod_p384+0x47a>
    SUB( 20 );                                              NEXT; // A9
 801370e:	a801      	add	r0, sp, #4
 8013710:	f7ff fce2 	bl	80130d8 <add32>
 8013714:	e775      	b.n	8013602 <ecp_mod_p384+0x4d8>
    SUB( 21 );                                              NEXT; // A10
 8013716:	a801      	add	r0, sp, #4
 8013718:	f7ff fcde 	bl	80130d8 <add32>
 801371c:	e79f      	b.n	801365e <ecp_mod_p384+0x534>
    SUB( 22 );                                              LAST; // A11
 801371e:	9e01      	ldr	r6, [sp, #4]
 8013720:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8013724:	e7c3      	b.n	80136ae <ecp_mod_p384+0x584>

08013726 <ecp_mod_p256>:
{
 8013726:	b570      	push	{r4, r5, r6, lr}
    INIT( 256 );
 8013728:	2309      	movs	r3, #9
{
 801372a:	b08e      	sub	sp, #56	; 0x38
    INIT( 256 );
 801372c:	2201      	movs	r2, #1
 801372e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013732:	2100      	movs	r1, #0
{
 8013734:	4604      	mov	r4, r0
    INIT( 256 );
 8013736:	2224      	movs	r2, #36	; 0x24
 8013738:	a805      	add	r0, sp, #20
 801373a:	f88d 1003 	strb.w	r1, [sp, #3]
 801373e:	9004      	str	r0, [sp, #16]
 8013740:	f00e fe7a 	bl	8022438 <memset>
 8013744:	2110      	movs	r1, #16
 8013746:	4620      	mov	r0, r4
 8013748:	f7fb f930 	bl	800e9ac <mbedtls_mpi_grow>
 801374c:	4605      	mov	r5, r0
 801374e:	2800      	cmp	r0, #0
 8013750:	f040 821b 	bne.w	8013b8a <ecp_mod_p256+0x464>
 8013754:	68a3      	ldr	r3, [r4, #8]
 8013756:	681a      	ldr	r2, [r3, #0]
    ADD(  8 ); ADD(  9 );
 8013758:	6a19      	ldr	r1, [r3, #32]
    INIT( 256 );
 801375a:	9201      	str	r2, [sp, #4]
    ADD(  8 ); ADD(  9 );
 801375c:	a801      	add	r0, sp, #4
 801375e:	f10d 0203 	add.w	r2, sp, #3
 8013762:	f7ff fcb9 	bl	80130d8 <add32>
 8013766:	68a3      	ldr	r3, [r4, #8]
 8013768:	f10d 0203 	add.w	r2, sp, #3
 801376c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801376e:	a801      	add	r0, sp, #4
 8013770:	f7ff fcb2 	bl	80130d8 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013774:	68a3      	ldr	r3, [r4, #8]
 8013776:	f10d 0203 	add.w	r2, sp, #3
 801377a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801377c:	a801      	add	r0, sp, #4
 801377e:	f7ff fcb5 	bl	80130ec <sub32>
 8013782:	68a3      	ldr	r3, [r4, #8]
 8013784:	f10d 0203 	add.w	r2, sp, #3
 8013788:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801378a:	a801      	add	r0, sp, #4
 801378c:	f7ff fcae 	bl	80130ec <sub32>
 8013790:	68a3      	ldr	r3, [r4, #8]
 8013792:	f10d 0203 	add.w	r2, sp, #3
 8013796:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013798:	a801      	add	r0, sp, #4
 801379a:	f7ff fca7 	bl	80130ec <sub32>
 801379e:	68a3      	ldr	r3, [r4, #8]
 80137a0:	f10d 0203 	add.w	r2, sp, #3
 80137a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80137a6:	a801      	add	r0, sp, #4
 80137a8:	f7ff fca0 	bl	80130ec <sub32>
 80137ac:	68a3      	ldr	r3, [r4, #8]
 80137ae:	9a01      	ldr	r2, [sp, #4]
 80137b0:	601a      	str	r2, [r3, #0]
 80137b2:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	2900      	cmp	r1, #0
 80137bc:	f88d 5003 	strb.w	r5, [sp, #3]
 80137c0:	f10d 0203 	add.w	r2, sp, #3
 80137c4:	f280 81e4 	bge.w	8013b90 <ecp_mod_p256+0x46a>
 80137c8:	4249      	negs	r1, r1
 80137ca:	a801      	add	r0, sp, #4
 80137cc:	f7ff fc8e 	bl	80130ec <sub32>
    ADD(  9 ); ADD( 10 );
 80137d0:	68a3      	ldr	r3, [r4, #8]
 80137d2:	f10d 0203 	add.w	r2, sp, #3
 80137d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80137d8:	a801      	add	r0, sp, #4
 80137da:	f7ff fc7d 	bl	80130d8 <add32>
 80137de:	68a3      	ldr	r3, [r4, #8]
 80137e0:	f10d 0203 	add.w	r2, sp, #3
 80137e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80137e6:	a801      	add	r0, sp, #4
 80137e8:	f7ff fc76 	bl	80130d8 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 80137ec:	68a3      	ldr	r3, [r4, #8]
 80137ee:	f10d 0203 	add.w	r2, sp, #3
 80137f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80137f4:	a801      	add	r0, sp, #4
 80137f6:	f7ff fc79 	bl	80130ec <sub32>
 80137fa:	68a3      	ldr	r3, [r4, #8]
 80137fc:	f10d 0203 	add.w	r2, sp, #3
 8013800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013802:	a801      	add	r0, sp, #4
 8013804:	f7ff fc72 	bl	80130ec <sub32>
 8013808:	68a3      	ldr	r3, [r4, #8]
 801380a:	f10d 0203 	add.w	r2, sp, #3
 801380e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013810:	a801      	add	r0, sp, #4
 8013812:	f7ff fc6b 	bl	80130ec <sub32>
 8013816:	68a3      	ldr	r3, [r4, #8]
 8013818:	f10d 0203 	add.w	r2, sp, #3
 801381c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801381e:	a801      	add	r0, sp, #4
 8013820:	f7ff fc64 	bl	80130ec <sub32>
 8013824:	68a3      	ldr	r3, [r4, #8]
 8013826:	9a01      	ldr	r2, [sp, #4]
 8013828:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801382c:	605a      	str	r2, [r3, #4]
 801382e:	689b      	ldr	r3, [r3, #8]
 8013830:	9301      	str	r3, [sp, #4]
 8013832:	2300      	movs	r3, #0
 8013834:	4299      	cmp	r1, r3
 8013836:	f88d 3003 	strb.w	r3, [sp, #3]
 801383a:	f10d 0203 	add.w	r2, sp, #3
 801383e:	f280 81ab 	bge.w	8013b98 <ecp_mod_p256+0x472>
 8013842:	4249      	negs	r1, r1
 8013844:	a801      	add	r0, sp, #4
 8013846:	f7ff fc51 	bl	80130ec <sub32>
    ADD( 10 ); ADD( 11 );
 801384a:	68a3      	ldr	r3, [r4, #8]
 801384c:	f10d 0203 	add.w	r2, sp, #3
 8013850:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013852:	a801      	add	r0, sp, #4
 8013854:	f7ff fc40 	bl	80130d8 <add32>
 8013858:	68a3      	ldr	r3, [r4, #8]
 801385a:	f10d 0203 	add.w	r2, sp, #3
 801385e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013860:	a801      	add	r0, sp, #4
 8013862:	f7ff fc39 	bl	80130d8 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8013866:	68a3      	ldr	r3, [r4, #8]
 8013868:	f10d 0203 	add.w	r2, sp, #3
 801386c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801386e:	a801      	add	r0, sp, #4
 8013870:	f7ff fc3c 	bl	80130ec <sub32>
 8013874:	68a3      	ldr	r3, [r4, #8]
 8013876:	f10d 0203 	add.w	r2, sp, #3
 801387a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801387c:	a801      	add	r0, sp, #4
 801387e:	f7ff fc35 	bl	80130ec <sub32>
 8013882:	68a3      	ldr	r3, [r4, #8]
 8013884:	f10d 0203 	add.w	r2, sp, #3
 8013888:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801388a:	a801      	add	r0, sp, #4
 801388c:	f7ff fc2e 	bl	80130ec <sub32>
 8013890:	68a3      	ldr	r3, [r4, #8]
 8013892:	9a01      	ldr	r2, [sp, #4]
 8013894:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013898:	609a      	str	r2, [r3, #8]
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	2300      	movs	r3, #0
 80138a0:	4299      	cmp	r1, r3
 80138a2:	f88d 3003 	strb.w	r3, [sp, #3]
 80138a6:	f10d 0203 	add.w	r2, sp, #3
 80138aa:	f280 8179 	bge.w	8013ba0 <ecp_mod_p256+0x47a>
 80138ae:	4249      	negs	r1, r1
 80138b0:	a801      	add	r0, sp, #4
 80138b2:	f7ff fc1b 	bl	80130ec <sub32>
    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80138b6:	68a3      	ldr	r3, [r4, #8]
 80138b8:	f10d 0203 	add.w	r2, sp, #3
 80138bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80138be:	a801      	add	r0, sp, #4
 80138c0:	f7ff fc0a 	bl	80130d8 <add32>
 80138c4:	68a3      	ldr	r3, [r4, #8]
 80138c6:	f10d 0203 	add.w	r2, sp, #3
 80138ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80138cc:	a801      	add	r0, sp, #4
 80138ce:	f7ff fc03 	bl	80130d8 <add32>
 80138d2:	68a3      	ldr	r3, [r4, #8]
 80138d4:	f10d 0203 	add.w	r2, sp, #3
 80138d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80138da:	a801      	add	r0, sp, #4
 80138dc:	f7ff fbfc 	bl	80130d8 <add32>
 80138e0:	68a3      	ldr	r3, [r4, #8]
 80138e2:	f10d 0203 	add.w	r2, sp, #3
 80138e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80138e8:	a801      	add	r0, sp, #4
 80138ea:	f7ff fbf5 	bl	80130d8 <add32>
 80138ee:	68a3      	ldr	r3, [r4, #8]
 80138f0:	f10d 0203 	add.w	r2, sp, #3
 80138f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80138f6:	a801      	add	r0, sp, #4
 80138f8:	f7ff fbee 	bl	80130d8 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80138fc:	68a3      	ldr	r3, [r4, #8]
 80138fe:	f10d 0203 	add.w	r2, sp, #3
 8013902:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013904:	a801      	add	r0, sp, #4
 8013906:	f7ff fbf1 	bl	80130ec <sub32>
 801390a:	68a3      	ldr	r3, [r4, #8]
 801390c:	f10d 0203 	add.w	r2, sp, #3
 8013910:	6a19      	ldr	r1, [r3, #32]
 8013912:	a801      	add	r0, sp, #4
 8013914:	f7ff fbea 	bl	80130ec <sub32>
 8013918:	68a3      	ldr	r3, [r4, #8]
 801391a:	f10d 0203 	add.w	r2, sp, #3
 801391e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013920:	a801      	add	r0, sp, #4
 8013922:	f7ff fbe3 	bl	80130ec <sub32>
 8013926:	68a3      	ldr	r3, [r4, #8]
 8013928:	9a01      	ldr	r2, [sp, #4]
 801392a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 801392e:	60da      	str	r2, [r3, #12]
 8013930:	691b      	ldr	r3, [r3, #16]
 8013932:	9301      	str	r3, [sp, #4]
 8013934:	2300      	movs	r3, #0
 8013936:	4299      	cmp	r1, r3
 8013938:	f88d 3003 	strb.w	r3, [sp, #3]
 801393c:	f10d 0203 	add.w	r2, sp, #3
 8013940:	f280 8132 	bge.w	8013ba8 <ecp_mod_p256+0x482>
 8013944:	4249      	negs	r1, r1
 8013946:	a801      	add	r0, sp, #4
 8013948:	f7ff fbd0 	bl	80130ec <sub32>
    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 801394c:	68a3      	ldr	r3, [r4, #8]
 801394e:	f10d 0203 	add.w	r2, sp, #3
 8013952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013954:	a801      	add	r0, sp, #4
 8013956:	f7ff fbbf 	bl	80130d8 <add32>
 801395a:	68a3      	ldr	r3, [r4, #8]
 801395c:	f10d 0203 	add.w	r2, sp, #3
 8013960:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013962:	a801      	add	r0, sp, #4
 8013964:	f7ff fbb8 	bl	80130d8 <add32>
 8013968:	68a3      	ldr	r3, [r4, #8]
 801396a:	f10d 0203 	add.w	r2, sp, #3
 801396e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013970:	a801      	add	r0, sp, #4
 8013972:	f7ff fbb1 	bl	80130d8 <add32>
 8013976:	68a3      	ldr	r3, [r4, #8]
 8013978:	f10d 0203 	add.w	r2, sp, #3
 801397c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 801397e:	a801      	add	r0, sp, #4
 8013980:	f7ff fbaa 	bl	80130d8 <add32>
 8013984:	68a3      	ldr	r3, [r4, #8]
 8013986:	f10d 0203 	add.w	r2, sp, #3
 801398a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801398c:	a801      	add	r0, sp, #4
 801398e:	f7ff fba3 	bl	80130d8 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013992:	68a3      	ldr	r3, [r4, #8]
 8013994:	f10d 0203 	add.w	r2, sp, #3
 8013998:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801399a:	a801      	add	r0, sp, #4
 801399c:	f7ff fba6 	bl	80130ec <sub32>
 80139a0:	68a3      	ldr	r3, [r4, #8]
 80139a2:	f10d 0203 	add.w	r2, sp, #3
 80139a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80139a8:	a801      	add	r0, sp, #4
 80139aa:	f7ff fb9f 	bl	80130ec <sub32>
 80139ae:	68a3      	ldr	r3, [r4, #8]
 80139b0:	9a01      	ldr	r2, [sp, #4]
 80139b2:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 80139b6:	611a      	str	r2, [r3, #16]
 80139b8:	695b      	ldr	r3, [r3, #20]
 80139ba:	9301      	str	r3, [sp, #4]
 80139bc:	2300      	movs	r3, #0
 80139be:	4299      	cmp	r1, r3
 80139c0:	f88d 3003 	strb.w	r3, [sp, #3]
 80139c4:	f10d 0203 	add.w	r2, sp, #3
 80139c8:	f280 80f2 	bge.w	8013bb0 <ecp_mod_p256+0x48a>
 80139cc:	4249      	negs	r1, r1
 80139ce:	a801      	add	r0, sp, #4
 80139d0:	f7ff fb8c 	bl	80130ec <sub32>
    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80139d4:	68a3      	ldr	r3, [r4, #8]
 80139d6:	f10d 0203 	add.w	r2, sp, #3
 80139da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80139dc:	a801      	add	r0, sp, #4
 80139de:	f7ff fb7b 	bl	80130d8 <add32>
 80139e2:	68a3      	ldr	r3, [r4, #8]
 80139e4:	f10d 0203 	add.w	r2, sp, #3
 80139e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80139ea:	a801      	add	r0, sp, #4
 80139ec:	f7ff fb74 	bl	80130d8 <add32>
 80139f0:	68a3      	ldr	r3, [r4, #8]
 80139f2:	f10d 0203 	add.w	r2, sp, #3
 80139f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80139f8:	a801      	add	r0, sp, #4
 80139fa:	f7ff fb6d 	bl	80130d8 <add32>
 80139fe:	68a3      	ldr	r3, [r4, #8]
 8013a00:	f10d 0203 	add.w	r2, sp, #3
 8013a04:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a06:	a801      	add	r0, sp, #4
 8013a08:	f7ff fb66 	bl	80130d8 <add32>
 8013a0c:	68a3      	ldr	r3, [r4, #8]
 8013a0e:	f10d 0203 	add.w	r2, sp, #3
 8013a12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013a14:	a801      	add	r0, sp, #4
 8013a16:	f7ff fb5f 	bl	80130d8 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8013a1a:	68a3      	ldr	r3, [r4, #8]
 8013a1c:	f10d 0203 	add.w	r2, sp, #3
 8013a20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013a22:	a801      	add	r0, sp, #4
 8013a24:	f7ff fb62 	bl	80130ec <sub32>
 8013a28:	68a3      	ldr	r3, [r4, #8]
 8013a2a:	f10d 0203 	add.w	r2, sp, #3
 8013a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013a30:	a801      	add	r0, sp, #4
 8013a32:	f7ff fb5b 	bl	80130ec <sub32>
 8013a36:	68a3      	ldr	r3, [r4, #8]
 8013a38:	9a01      	ldr	r2, [sp, #4]
 8013a3a:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013a3e:	615a      	str	r2, [r3, #20]
 8013a40:	699b      	ldr	r3, [r3, #24]
 8013a42:	9301      	str	r3, [sp, #4]
 8013a44:	2300      	movs	r3, #0
 8013a46:	4299      	cmp	r1, r3
 8013a48:	f88d 3003 	strb.w	r3, [sp, #3]
 8013a4c:	f10d 0203 	add.w	r2, sp, #3
 8013a50:	f280 80b2 	bge.w	8013bb8 <ecp_mod_p256+0x492>
 8013a54:	4249      	negs	r1, r1
 8013a56:	a801      	add	r0, sp, #4
 8013a58:	f7ff fb48 	bl	80130ec <sub32>
    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 8013a5c:	68a3      	ldr	r3, [r4, #8]
 8013a5e:	f10d 0203 	add.w	r2, sp, #3
 8013a62:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a64:	a801      	add	r0, sp, #4
 8013a66:	f7ff fb37 	bl	80130d8 <add32>
 8013a6a:	68a3      	ldr	r3, [r4, #8]
 8013a6c:	f10d 0203 	add.w	r2, sp, #3
 8013a70:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a72:	a801      	add	r0, sp, #4
 8013a74:	f7ff fb30 	bl	80130d8 <add32>
 8013a78:	68a3      	ldr	r3, [r4, #8]
 8013a7a:	f10d 0203 	add.w	r2, sp, #3
 8013a7e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013a80:	a801      	add	r0, sp, #4
 8013a82:	f7ff fb29 	bl	80130d8 <add32>
 8013a86:	68a3      	ldr	r3, [r4, #8]
 8013a88:	f10d 0203 	add.w	r2, sp, #3
 8013a8c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013a8e:	a801      	add	r0, sp, #4
 8013a90:	f7ff fb22 	bl	80130d8 <add32>
 8013a94:	68a3      	ldr	r3, [r4, #8]
 8013a96:	f10d 0203 	add.w	r2, sp, #3
 8013a9a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8013a9c:	a801      	add	r0, sp, #4
 8013a9e:	f7ff fb1b 	bl	80130d8 <add32>
 8013aa2:	68a3      	ldr	r3, [r4, #8]
 8013aa4:	f10d 0203 	add.w	r2, sp, #3
 8013aa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013aaa:	a801      	add	r0, sp, #4
 8013aac:	f7ff fb14 	bl	80130d8 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8013ab0:	68a3      	ldr	r3, [r4, #8]
 8013ab2:	f10d 0203 	add.w	r2, sp, #3
 8013ab6:	6a19      	ldr	r1, [r3, #32]
 8013ab8:	a801      	add	r0, sp, #4
 8013aba:	f7ff fb17 	bl	80130ec <sub32>
 8013abe:	68a3      	ldr	r3, [r4, #8]
 8013ac0:	f10d 0203 	add.w	r2, sp, #3
 8013ac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8013ac6:	a801      	add	r0, sp, #4
 8013ac8:	f7ff fb10 	bl	80130ec <sub32>
 8013acc:	68a3      	ldr	r3, [r4, #8]
 8013ace:	9a01      	ldr	r2, [sp, #4]
 8013ad0:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013ad4:	619a      	str	r2, [r3, #24]
 8013ad6:	69db      	ldr	r3, [r3, #28]
 8013ad8:	9301      	str	r3, [sp, #4]
 8013ada:	2300      	movs	r3, #0
 8013adc:	4299      	cmp	r1, r3
 8013ade:	f88d 3003 	strb.w	r3, [sp, #3]
 8013ae2:	f10d 0203 	add.w	r2, sp, #3
 8013ae6:	da6b      	bge.n	8013bc0 <ecp_mod_p256+0x49a>
 8013ae8:	4249      	negs	r1, r1
 8013aea:	a801      	add	r0, sp, #4
 8013aec:	f7ff fafe 	bl	80130ec <sub32>
    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 8013af0:	68a3      	ldr	r3, [r4, #8]
 8013af2:	f10d 0203 	add.w	r2, sp, #3
 8013af6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013af8:	a801      	add	r0, sp, #4
 8013afa:	f7ff faed 	bl	80130d8 <add32>
 8013afe:	68a3      	ldr	r3, [r4, #8]
 8013b00:	f10d 0203 	add.w	r2, sp, #3
 8013b04:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013b06:	a801      	add	r0, sp, #4
 8013b08:	f7ff fae6 	bl	80130d8 <add32>
 8013b0c:	68a3      	ldr	r3, [r4, #8]
 8013b0e:	f10d 0203 	add.w	r2, sp, #3
 8013b12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8013b14:	a801      	add	r0, sp, #4
 8013b16:	f7ff fadf 	bl	80130d8 <add32>
 8013b1a:	68a3      	ldr	r3, [r4, #8]
 8013b1c:	f10d 0203 	add.w	r2, sp, #3
 8013b20:	6a19      	ldr	r1, [r3, #32]
 8013b22:	a801      	add	r0, sp, #4
 8013b24:	f7ff fad8 	bl	80130d8 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8013b28:	68a3      	ldr	r3, [r4, #8]
 8013b2a:	f10d 0203 	add.w	r2, sp, #3
 8013b2e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8013b30:	a801      	add	r0, sp, #4
 8013b32:	f7ff fadb 	bl	80130ec <sub32>
 8013b36:	68a3      	ldr	r3, [r4, #8]
 8013b38:	f10d 0203 	add.w	r2, sp, #3
 8013b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013b3e:	a801      	add	r0, sp, #4
 8013b40:	f7ff fad4 	bl	80130ec <sub32>
 8013b44:	68a3      	ldr	r3, [r4, #8]
 8013b46:	f10d 0203 	add.w	r2, sp, #3
 8013b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013b4c:	a801      	add	r0, sp, #4
 8013b4e:	f7ff facd 	bl	80130ec <sub32>
 8013b52:	68a3      	ldr	r3, [r4, #8]
 8013b54:	f10d 0203 	add.w	r2, sp, #3
 8013b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013b5a:	a801      	add	r0, sp, #4
 8013b5c:	f7ff fac6 	bl	80130ec <sub32>
 8013b60:	68a2      	ldr	r2, [r4, #8]
 8013b62:	f99d 1003 	ldrsb.w	r1, [sp, #3]
 8013b66:	9b01      	ldr	r3, [sp, #4]
 8013b68:	61d3      	str	r3, [r2, #28]
 8013b6a:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8013b6e:	6213      	str	r3, [r2, #32]
 8013b70:	6860      	ldr	r0, [r4, #4]
 8013b72:	2300      	movs	r3, #0
 8013b74:	9301      	str	r3, [sp, #4]
 8013b76:	2308      	movs	r3, #8
 8013b78:	3301      	adds	r3, #1
 8013b7a:	4298      	cmp	r0, r3
 8013b7c:	d824      	bhi.n	8013bc8 <ecp_mod_p256+0x4a2>
 8013b7e:	2900      	cmp	r1, #0
 8013b80:	da03      	bge.n	8013b8a <ecp_mod_p256+0x464>
 8013b82:	aa02      	add	r2, sp, #8
 8013b84:	4620      	mov	r0, r4
 8013b86:	f7ff fabc 	bl	8013102 <fix_negative.isra.0>
}
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	b00e      	add	sp, #56	; 0x38
 8013b8e:	bd70      	pop	{r4, r5, r6, pc}
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8013b90:	a801      	add	r0, sp, #4
 8013b92:	f7ff faa1 	bl	80130d8 <add32>
 8013b96:	e61b      	b.n	80137d0 <ecp_mod_p256+0xaa>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8013b98:	a801      	add	r0, sp, #4
 8013b9a:	f7ff fa9d 	bl	80130d8 <add32>
 8013b9e:	e654      	b.n	801384a <ecp_mod_p256+0x124>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8013ba0:	a801      	add	r0, sp, #4
 8013ba2:	f7ff fa99 	bl	80130d8 <add32>
 8013ba6:	e686      	b.n	80138b6 <ecp_mod_p256+0x190>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 8013ba8:	a801      	add	r0, sp, #4
 8013baa:	f7ff fa95 	bl	80130d8 <add32>
 8013bae:	e6cd      	b.n	801394c <ecp_mod_p256+0x226>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8013bb0:	a801      	add	r0, sp, #4
 8013bb2:	f7ff fa91 	bl	80130d8 <add32>
 8013bb6:	e70d      	b.n	80139d4 <ecp_mod_p256+0x2ae>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8013bb8:	a801      	add	r0, sp, #4
 8013bba:	f7ff fa8d 	bl	80130d8 <add32>
 8013bbe:	e74d      	b.n	8013a5c <ecp_mod_p256+0x336>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8013bc0:	a801      	add	r0, sp, #4
 8013bc2:	f7ff fa89 	bl	80130d8 <add32>
 8013bc6:	e793      	b.n	8013af0 <ecp_mod_p256+0x3ca>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8013bc8:	9e01      	ldr	r6, [sp, #4]
 8013bca:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
 8013bce:	e7d3      	b.n	8013b78 <ecp_mod_p256+0x452>

08013bd0 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 8013bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( N->n < p_limbs )
 8013bd4:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013bd8:	f1b9 0f07 	cmp.w	r9, #7
{
 8013bdc:	b093      	sub	sp, #76	; 0x4c
 8013bde:	4604      	mov	r4, r0
    if( N->n < p_limbs )
 8013be0:	d966      	bls.n	8013cb0 <ecp_mod_p256k1+0xe0>
    R.s = 1;
 8013be2:	2301      	movs	r3, #1
    R.p = Rp;
 8013be4:	4a33      	ldr	r2, [pc, #204]	; (8013cb4 <ecp_mod_p256k1+0xe4>)
    R.s = 1;
 8013be6:	9304      	str	r3, [sp, #16]
    M.s = 1;
 8013be8:	9301      	str	r3, [sp, #4]
    M.n = N->n - ( p_limbs - adjust );
 8013bea:	f1a9 0308 	sub.w	r3, r9, #8
    if( M.n > p_limbs + adjust )
 8013bee:	2b08      	cmp	r3, #8
    M.p = Mp;
 8013bf0:	ae07      	add	r6, sp, #28
    R.p = Rp;
 8013bf2:	9206      	str	r2, [sp, #24]
    R.n = P_KOBLITZ_R;
 8013bf4:	f04f 0202 	mov.w	r2, #2
        M.n = p_limbs + adjust;
 8013bf8:	bf88      	it	hi
 8013bfa:	2308      	movhi	r3, #8
    R.n = P_KOBLITZ_R;
 8013bfc:	9205      	str	r2, [sp, #20]
    memset( Mp, 0, sizeof Mp );
 8013bfe:	2100      	movs	r1, #0
 8013c00:	222c      	movs	r2, #44	; 0x2c
 8013c02:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 8013c04:	9302      	str	r3, [sp, #8]
    M.p = Mp;
 8013c06:	9603      	str	r6, [sp, #12]
    memset( Mp, 0, sizeof Mp );
 8013c08:	f00e fc16 	bl	8022438 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013c0c:	68a7      	ldr	r7, [r4, #8]
 8013c0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013c12:	f107 0520 	add.w	r5, r7, #32
 8013c16:	4629      	mov	r1, r5
 8013c18:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f00e fbe3 	bl	80223e8 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 8013c22:	f108 0302 	add.w	r3, r8, #2
 8013c26:	9302      	str	r3, [sp, #8]
    if( mask != 0 )
 8013c28:	4629      	mov	r1, r5
 8013c2a:	eb07 0789 	add.w	r7, r7, r9, lsl #2
        N->p[i] = 0;
 8013c2e:	2300      	movs	r3, #0
    for( i = p_limbs; i < N->n; i++ )
 8013c30:	42b9      	cmp	r1, r7
 8013c32:	d136      	bne.n	8013ca2 <ecp_mod_p256k1+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013c34:	a901      	add	r1, sp, #4
 8013c36:	aa04      	add	r2, sp, #16
 8013c38:	4608      	mov	r0, r1
 8013c3a:	f7fb faa8 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8013c3e:	bb68      	cbnz	r0, 8013c9c <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013c40:	aa01      	add	r2, sp, #4
 8013c42:	4621      	mov	r1, r4
 8013c44:	4620      	mov	r0, r4
 8013c46:	f7fb f9b1 	bl	800efac <mbedtls_mpi_add_abs>
 8013c4a:	bb38      	cbnz	r0, 8013c9c <ecp_mod_p256k1+0xcc>
    M.n = N->n - ( p_limbs - adjust );
 8013c4c:	6865      	ldr	r5, [r4, #4]
 8013c4e:	f1a5 0308 	sub.w	r3, r5, #8
    if( M.n > p_limbs + adjust )
 8013c52:	2b08      	cmp	r3, #8
        M.n = p_limbs + adjust;
 8013c54:	bf88      	it	hi
 8013c56:	2308      	movhi	r3, #8
    memset( Mp, 0, sizeof Mp );
 8013c58:	222c      	movs	r2, #44	; 0x2c
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	4630      	mov	r0, r6
        M.n = p_limbs + adjust;
 8013c5e:	9302      	str	r3, [sp, #8]
    memset( Mp, 0, sizeof Mp );
 8013c60:	f00e fbea 	bl	8022438 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013c64:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013c68:	68a7      	ldr	r7, [r4, #8]
 8013c6a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013c6e:	f107 0120 	add.w	r1, r7, #32
 8013c72:	4630      	mov	r0, r6
 8013c74:	f00e fbb8 	bl	80223e8 <memcpy>
    M.n += R.n; /* Make room for multiplication by R */
 8013c78:	9b05      	ldr	r3, [sp, #20]
 8013c7a:	4443      	add	r3, r8
 8013c7c:	9302      	str	r3, [sp, #8]
        N->p[i] = 0;
 8013c7e:	2200      	movs	r2, #0
    M.n += R.n; /* Make room for multiplication by R */
 8013c80:	2308      	movs	r3, #8
    for( i = p_limbs; i < N->n; i++ )
 8013c82:	429d      	cmp	r5, r3
 8013c84:	d810      	bhi.n	8013ca8 <ecp_mod_p256k1+0xd8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013c86:	a901      	add	r1, sp, #4
 8013c88:	aa04      	add	r2, sp, #16
 8013c8a:	4608      	mov	r0, r1
 8013c8c:	f7fb fa7f 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8013c90:	b920      	cbnz	r0, 8013c9c <ecp_mod_p256k1+0xcc>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013c92:	aa01      	add	r2, sp, #4
 8013c94:	4621      	mov	r1, r4
 8013c96:	4620      	mov	r0, r4
 8013c98:	f7fb f988 	bl	800efac <mbedtls_mpi_add_abs>
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
}
 8013c9c:	b013      	add	sp, #76	; 0x4c
 8013c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        N->p[i] = 0;
 8013ca2:	f841 3b04 	str.w	r3, [r1], #4
    for( i = p_limbs; i < N->n; i++ )
 8013ca6:	e7c3      	b.n	8013c30 <ecp_mod_p256k1+0x60>
        N->p[i] = 0;
 8013ca8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    for( i = p_limbs; i < N->n; i++ )
 8013cac:	3301      	adds	r3, #1
 8013cae:	e7e8      	b.n	8013c82 <ecp_mod_p256k1+0xb2>
        return( 0 );
 8013cb0:	2000      	movs	r0, #0
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013cb2:	e7f3      	b.n	8013c9c <ecp_mod_p256k1+0xcc>
 8013cb4:	20000594 	.word	0x20000594

08013cb8 <mbedtls_ecp_group_load>:
{
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4604      	mov	r4, r0
 8013cbc:	460d      	mov	r5, r1
    mbedtls_ecp_group_free( grp );
 8013cbe:	f7fe f9d3 	bl	8012068 <mbedtls_ecp_group_free>
    grp->id = id;
 8013cc2:	7025      	strb	r5, [r4, #0]
    switch( id )
 8013cc4:	3d03      	subs	r5, #3
 8013cc6:	2d09      	cmp	r5, #9
 8013cc8:	f200 80a9 	bhi.w	8013e1e <mbedtls_ecp_group_load+0x166>
 8013ccc:	e8df f005 	tbb	[pc, r5]
 8013cd0:	6ba73005 	.word	0x6ba73005
 8013cd4:	a7a7a789 	.word	0xa7a7a789
 8013cd8:	4ba7      	.short	0x4ba7
            NIST_MODP( p256 );
 8013cda:	4b53      	ldr	r3, [pc, #332]	; (8013e28 <mbedtls_ecp_group_load+0x170>)
 8013cdc:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013cde:	4b53      	ldr	r3, [pc, #332]	; (8013e2c <mbedtls_ecp_group_load+0x174>)
 8013ce0:	60e3      	str	r3, [r4, #12]
 8013ce2:	f103 0120 	add.w	r1, r3, #32
 8013ce6:	6261      	str	r1, [r4, #36]	; 0x24
 8013ce8:	f103 0140 	add.w	r1, r3, #64	; 0x40
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013cec:	2501      	movs	r5, #1
 8013cee:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013cf0:	6561      	str	r1, [r4, #84]	; 0x54
 8013cf2:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013cf6:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013cfa:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013cfe:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013d02:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013d06:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d0a:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013d0c:	3380      	adds	r3, #128	; 0x80
    X->s = 1;
 8013d0e:	e9c4 350f 	strd	r3, r5, [r4, #60]	; 0x3c
    X->p = one;
 8013d12:	4b47      	ldr	r3, [pc, #284]	; (8013e30 <mbedtls_ecp_group_load+0x178>)
 8013d14:	64a3      	str	r3, [r4, #72]	; 0x48
    X->n = 1;
 8013d16:	6465      	str	r5, [r4, #68]	; 0x44
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8013d18:	1d20      	adds	r0, r4, #4
 8013d1a:	f7fa ff54 	bl	800ebc6 <mbedtls_mpi_bitlen>
 8013d1e:	65a0      	str	r0, [r4, #88]	; 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 8013d20:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013d24:	f7fa ff4f 	bl	800ebc6 <mbedtls_mpi_bitlen>
    grp->h = 1;
 8013d28:	e9c4 0517 	strd	r0, r5, [r4, #92]	; 0x5c
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8013d2c:	2000      	movs	r0, #0
}
 8013d2e:	bd38      	pop	{r3, r4, r5, pc}
            NIST_MODP( p384 );
 8013d30:	4b40      	ldr	r3, [pc, #256]	; (8013e34 <mbedtls_ecp_group_load+0x17c>)
 8013d32:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013d34:	4b40      	ldr	r3, [pc, #256]	; (8013e38 <mbedtls_ecp_group_load+0x180>)
 8013d36:	60e3      	str	r3, [r4, #12]
 8013d38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d3c:	6261      	str	r1, [r4, #36]	; 0x24
 8013d3e:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d42:	2501      	movs	r5, #1
 8013d44:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 8013d46:	6561      	str	r1, [r4, #84]	; 0x54
 8013d48:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d4c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013d50:	e9c4 5207 	strd	r5, r2, [r4, #28]
 8013d54:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013d58:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013d5c:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d60:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013d62:	33c0      	adds	r3, #192	; 0xc0
 8013d64:	e7d3      	b.n	8013d0e <mbedtls_ecp_group_load+0x56>
            grp->modp = ecp_mod_p256k1;
 8013d66:	4b35      	ldr	r3, [pc, #212]	; (8013e3c <mbedtls_ecp_group_load+0x184>)
 8013d68:	6663      	str	r3, [r4, #100]	; 0x64
    X->p = (mbedtls_mpi_uint *) p;
 8013d6a:	4b35      	ldr	r3, [pc, #212]	; (8013e40 <mbedtls_ecp_group_load+0x188>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d6c:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013d6e:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013d72:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013d76:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8013d7a:	6261      	str	r1, [r4, #36]	; 0x24
 8013d7c:	f103 0128 	add.w	r1, r3, #40	; 0x28
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d80:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013d82:	6561      	str	r1, [r4, #84]	; 0x54
 8013d84:	f103 0148 	add.w	r1, r3, #72	; 0x48
    X->s = 1;
 8013d88:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d8c:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013d90:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013d94:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013d98:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013d9c:	6165      	str	r5, [r4, #20]
 8013d9e:	6225      	str	r5, [r4, #32]
 8013da0:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013da2:	3368      	adds	r3, #104	; 0x68
 8013da4:	e7b3      	b.n	8013d0e <mbedtls_ecp_group_load+0x56>
 8013da6:	4b27      	ldr	r3, [pc, #156]	; (8013e44 <mbedtls_ecp_group_load+0x18c>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013da8:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013daa:	f103 0120 	add.w	r1, r3, #32
    X->s = 1;
 8013dae:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013db2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8013db6:	6261      	str	r1, [r4, #36]	; 0x24
 8013db8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013dbc:	2208      	movs	r2, #8
    X->p = (mbedtls_mpi_uint *) p;
 8013dbe:	6561      	str	r1, [r4, #84]	; 0x54
 8013dc0:	f103 0180 	add.w	r1, r3, #128	; 0x80
    X->s = 1;
 8013dc4:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013dc8:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013dcc:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013dd0:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013dd4:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013dd8:	6162      	str	r2, [r4, #20]
 8013dda:	6222      	str	r2, [r4, #32]
 8013ddc:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013dde:	33a0      	adds	r3, #160	; 0xa0
 8013de0:	e795      	b.n	8013d0e <mbedtls_ecp_group_load+0x56>
 8013de2:	4b19      	ldr	r3, [pc, #100]	; (8013e48 <mbedtls_ecp_group_load+0x190>)
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013de4:	2501      	movs	r5, #1
    X->p = (mbedtls_mpi_uint *) p;
 8013de6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    X->s = 1;
 8013dea:	e9c4 1506 	strd	r1, r5, [r4, #24]
    X->p = (mbedtls_mpi_uint *) p;
 8013dee:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8013df2:	6261      	str	r1, [r4, #36]	; 0x24
 8013df4:	f103 0190 	add.w	r1, r3, #144	; 0x90
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013df8:	220c      	movs	r2, #12
    X->p = (mbedtls_mpi_uint *) p;
 8013dfa:	6561      	str	r1, [r4, #84]	; 0x54
 8013dfc:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
    X->s = 1;
 8013e00:	e9c4 3503 	strd	r3, r5, [r4, #12]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e04:	e9c4 5201 	strd	r5, r2, [r4, #4]
 8013e08:	e9c4 5213 	strd	r5, r2, [r4, #76]	; 0x4c
 8013e0c:	e9c4 520a 	strd	r5, r2, [r4, #40]	; 0x28
    X->s = 1;
 8013e10:	e9c4 150c 	strd	r1, r5, [r4, #48]	; 0x30
    X->n = len / sizeof( mbedtls_mpi_uint );
 8013e14:	6162      	str	r2, [r4, #20]
 8013e16:	6222      	str	r2, [r4, #32]
 8013e18:	63a2      	str	r2, [r4, #56]	; 0x38
    X->p = (mbedtls_mpi_uint *) p;
 8013e1a:	33f0      	adds	r3, #240	; 0xf0
 8013e1c:	e777      	b.n	8013d0e <mbedtls_ecp_group_load+0x56>
            mbedtls_ecp_group_free( grp );
 8013e1e:	4620      	mov	r0, r4
 8013e20:	f7fe f922 	bl	8012068 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8013e24:	4809      	ldr	r0, [pc, #36]	; (8013e4c <mbedtls_ecp_group_load+0x194>)
 8013e26:	e782      	b.n	8013d2e <mbedtls_ecp_group_load+0x76>
 8013e28:	08013727 	.word	0x08013727
 8013e2c:	0802ac98 	.word	0x0802ac98
 8013e30:	2000059c 	.word	0x2000059c
 8013e34:	0801312b 	.word	0x0801312b
 8013e38:	0802ad38 	.word	0x0802ad38
 8013e3c:	08013bd1 	.word	0x08013bd1
 8013e40:	0802ae28 	.word	0x0802ae28
 8013e44:	0802aeb0 	.word	0x0802aeb0
 8013e48:	0802af70 	.word	0x0802af70
 8013e4c:	ffffb180 	.word	0xffffb180

08013e50 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 8013e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
    const unsigned char *p = data;

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013e52:	2b40      	cmp	r3, #64	; 0x40
{
 8013e54:	b093      	sub	sp, #76	; 0x4c
 8013e56:	4606      	mov	r6, r0
 8013e58:	460f      	mov	r7, r1
 8013e5a:	4615      	mov	r5, r2
 8013e5c:	461c      	mov	r4, r3
    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013e5e:	d907      	bls.n	8013e70 <entropy_update+0x20>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        mbedtls_sha512( data, len, tmp, 0 );
 8013e60:	4621      	mov	r1, r4
 8013e62:	4628      	mov	r0, r5
 8013e64:	2300      	movs	r3, #0
 8013e66:	aa02      	add	r2, sp, #8
 8013e68:	f006 f986 	bl	801a178 <mbedtls_sha512>
#else
        mbedtls_sha256( data, len, tmp, 0 );
#endif
        p = tmp;
 8013e6c:	ad02      	add	r5, sp, #8
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8013e6e:	2440      	movs	r4, #64	; 0x40

    header[0] = source_id;
    header[1] = use_len & 0xFF;

#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013e70:	a901      	add	r1, sp, #4
 8013e72:	4630      	mov	r0, r6
 8013e74:	2202      	movs	r2, #2
    header[0] = source_id;
 8013e76:	f88d 7004 	strb.w	r7, [sp, #4]
    header[1] = use_len & 0xFF;
 8013e7a:	f88d 4005 	strb.w	r4, [sp, #5]
    mbedtls_sha512_update( &ctx->accumulator, header, 2 );
 8013e7e:	f006 f870 	bl	8019f62 <mbedtls_sha512_update>
    mbedtls_sha512_update( &ctx->accumulator, p, use_len );
 8013e82:	4630      	mov	r0, r6
 8013e84:	4622      	mov	r2, r4
 8013e86:	4629      	mov	r1, r5
 8013e88:	f006 f86b 	bl	8019f62 <mbedtls_sha512_update>
    mbedtls_sha256_update( &ctx->accumulator, header, 2 );
    mbedtls_sha256_update( &ctx->accumulator, p, use_len );
#endif

    return( 0 );
}
 8013e8c:	2000      	movs	r0, #0
 8013e8e:	b013      	add	sp, #76	; 0x4c
 8013e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e92 <entropy_gather_internal.part.0>:
}

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013e92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
{
    int ret, i, have_one_strong = 0;
 8013e96:	2500      	movs	r5, #0
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
 8013e98:	b0a3      	sub	sp, #140	; 0x8c
 8013e9a:	4606      	mov	r6, r0
 8013e9c:	4604      	mov	r4, r0
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8013e9e:	46a8      	mov	r8, r5
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
            have_one_strong = 1;

        olen = 0;
 8013ea0:	46a9      	mov	r9, r5
    for( i = 0; i < ctx->source_count; i++ )
 8013ea2:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
 8013ea6:	4598      	cmp	r8, r3
 8013ea8:	db07      	blt.n	8013eba <entropy_gather_internal.part.0+0x28>
            ctx->source[i].size += olen;
        }
    }

    if( have_one_strong == 0 )
        return( MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE );
 8013eaa:	2d00      	cmp	r5, #0
 8013eac:	bf14      	ite	ne
 8013eae:	2000      	movne	r0, #0
 8013eb0:	f06f 003c 	mvneq.w	r0, #60	; 0x3c

    return( 0 );
}
 8013eb4:	b023      	add	sp, #140	; 0x8c
 8013eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8013eba:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
        olen = 0;
 8013ebe:	f8cd 9004 	str.w	r9, [sp, #4]
            have_one_strong = 1;
 8013ec2:	2b01      	cmp	r3, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8013ec4:	e9d4 7037 	ldrd	r7, r0, [r4, #220]	; 0xdc
 8013ec8:	ab01      	add	r3, sp, #4
 8013eca:	f04f 0280 	mov.w	r2, #128	; 0x80
 8013ece:	a902      	add	r1, sp, #8
            have_one_strong = 1;
 8013ed0:	bf08      	it	eq
 8013ed2:	2501      	moveq	r5, #1
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8013ed4:	47b8      	blx	r7
 8013ed6:	2800      	cmp	r0, #0
 8013ed8:	d1ec      	bne.n	8013eb4 <entropy_gather_internal.part.0+0x22>
        if( olen > 0 )
 8013eda:	9b01      	ldr	r3, [sp, #4]
 8013edc:	b15b      	cbz	r3, 8013ef6 <entropy_gather_internal.part.0+0x64>
            entropy_update( ctx, (unsigned char) i, buf, olen );
 8013ede:	aa02      	add	r2, sp, #8
 8013ee0:	fa5f f188 	uxtb.w	r1, r8
 8013ee4:	4630      	mov	r0, r6
 8013ee6:	f7ff ffb3 	bl	8013e50 <entropy_update>
            ctx->source[i].size += olen;
 8013eea:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8013eee:	9a01      	ldr	r2, [sp, #4]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
    for( i = 0; i < ctx->source_count; i++ )
 8013ef6:	f108 0801 	add.w	r8, r8, #1
 8013efa:	3414      	adds	r4, #20
 8013efc:	e7d1      	b.n	8013ea2 <entropy_gather_internal.part.0+0x10>
	...

08013f00 <mbedtls_entropy_init>:
{
 8013f00:	b510      	push	{r4, lr}
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 8013f02:	f44f 7284 	mov.w	r2, #264	; 0x108
{
 8013f06:	4604      	mov	r4, r0
    memset( ctx, 0, sizeof(mbedtls_entropy_context) );
 8013f08:	2100      	movs	r1, #0
 8013f0a:	f00e fa95 	bl	8022438 <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8013f0e:	2100      	movs	r1, #0
 8013f10:	4620      	mov	r0, r4
 8013f12:	f005 f9cd 	bl	80192b0 <mbedtls_sha512_starts>
    idx = ctx->source_count;
 8013f16:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013f1a:	2a01      	cmp	r2, #1
 8013f1c:	dc10      	bgt.n	8013f40 <mbedtls_entropy_init+0x40>
    ctx->source[idx].f_source  = f_source;
 8013f1e:	2314      	movs	r3, #20
 8013f20:	fb03 4302 	mla	r3, r3, r2, r4
 8013f24:	4907      	ldr	r1, [pc, #28]	; (8013f44 <mbedtls_entropy_init+0x44>)
 8013f26:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    ctx->source[idx].p_source  = p_source;
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
    ctx->source[idx].strong    = strong;
 8013f30:	2101      	movs	r1, #1
 8013f32:	f04f 0c20 	mov.w	ip, #32
    ctx->source_count++;
 8013f36:	440a      	add	r2, r1
    ctx->source[idx].strong    = strong;
 8013f38:	e9c3 c13a 	strd	ip, r1, [r3, #232]	; 0xe8
    ctx->source_count++;
 8013f3c:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
}
 8013f40:	bd10      	pop	{r4, pc}
 8013f42:	bf00      	nop
 8013f44:	080012e1 	.word	0x080012e1

08013f48 <mbedtls_entropy_free>:
static void mbedtls_zeroize( void *v, size_t n ) {
 8013f48:	f500 7384 	add.w	r3, r0, #264	; 0x108
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	4298      	cmp	r0, r3
 8013f50:	d100      	bne.n	8013f54 <mbedtls_entropy_free+0xc>
}
 8013f52:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8013f54:	f800 2b01 	strb.w	r2, [r0], #1
 8013f58:	e7f9      	b.n	8013f4e <mbedtls_entropy_free+0x6>

08013f5a <mbedtls_entropy_add_source>:
{
 8013f5a:	b530      	push	{r4, r5, lr}
    idx = ctx->source_count;
 8013f5c:	f8d0 50d8 	ldr.w	r5, [r0, #216]	; 0xd8
    if( idx >= MBEDTLS_ENTROPY_MAX_SOURCES )
 8013f60:	2d01      	cmp	r5, #1
 8013f62:	dc0e      	bgt.n	8013f82 <mbedtls_entropy_add_source+0x28>
    ctx->source[idx].f_source  = f_source;
 8013f64:	2414      	movs	r4, #20
 8013f66:	fb04 0405 	mla	r4, r4, r5, r0
    ctx->source_count++;
 8013f6a:	3501      	adds	r5, #1
    ctx->source[idx].threshold = threshold;
 8013f6c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    ctx->source[idx].strong    = strong;
 8013f70:	9b03      	ldr	r3, [sp, #12]
 8013f72:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    ctx->source[idx].p_source  = p_source;
 8013f76:	e9c4 1237 	strd	r1, r2, [r4, #220]	; 0xdc
    ctx->source_count++;
 8013f7a:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    int idx, ret = 0;
 8013f7e:	2000      	movs	r0, #0
}
 8013f80:	bd30      	pop	{r4, r5, pc}
        ret = MBEDTLS_ERR_ENTROPY_MAX_SOURCES;
 8013f82:	f06f 003d 	mvn.w	r0, #61	; 0x3d
    return( ret );
 8013f86:	e7fb      	b.n	8013f80 <mbedtls_entropy_add_source+0x26>

08013f88 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8013f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int ret, count = 0, i, done;
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013f8c:	2a40      	cmp	r2, #64	; 0x40
{
 8013f8e:	b090      	sub	sp, #64	; 0x40
 8013f90:	4604      	mov	r4, r0
 8013f92:	460f      	mov	r7, r1
 8013f94:	4616      	mov	r6, r2
    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8013f96:	d905      	bls.n	8013fa4 <mbedtls_entropy_func+0x1c>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8013f98:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
}
 8013f9c:	4628      	mov	r0, r5
 8013f9e:	b010      	add	sp, #64	; 0x40
 8013fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fa4:	f44f 7881 	mov.w	r8, #258	; 0x102
        if( count++ > ENTROPY_MAX_LOOP )
 8013fa8:	f1b8 0801 	subs.w	r8, r8, #1
 8013fac:	d0f4      	beq.n	8013f98 <mbedtls_entropy_func+0x10>
    if( ctx->source_count == 0 )
 8013fae:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d048      	beq.n	8014048 <mbedtls_entropy_func+0xc0>
 8013fb6:	4620      	mov	r0, r4
 8013fb8:	f7ff ff6b 	bl	8013e92 <entropy_gather_internal.part.0>
        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8013fbc:	4605      	mov	r5, r0
 8013fbe:	2800      	cmp	r0, #0
 8013fc0:	d1ec      	bne.n	8013f9c <mbedtls_entropy_func+0x14>
        for( i = 0; i < ctx->source_count; i++ )
 8013fc2:	f8d4 e0d8 	ldr.w	lr, [r4, #216]	; 0xd8
 8013fc6:	4623      	mov	r3, r4
 8013fc8:	4684      	mov	ip, r0
        done = 1;
 8013fca:	2201      	movs	r2, #1
        for( i = 0; i < ctx->source_count; i++ )
 8013fcc:	45e6      	cmp	lr, ip
 8013fce:	dc2c      	bgt.n	801402a <mbedtls_entropy_func+0xa2>
    while( ! done );
 8013fd0:	2a00      	cmp	r2, #0
 8013fd2:	d0e9      	beq.n	8013fa8 <mbedtls_entropy_func+0x20>
    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8013fd4:	2240      	movs	r2, #64	; 0x40
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	4668      	mov	r0, sp
 8013fda:	f00e fa2d 	bl	8022438 <memset>
    mbedtls_sha512_finish( &ctx->accumulator, buf );
 8013fde:	4620      	mov	r0, r4
 8013fe0:	4669      	mov	r1, sp
 8013fe2:	f005 ffc3 	bl	8019f6c <mbedtls_sha512_finish>
    memset( &ctx->accumulator, 0, sizeof( mbedtls_sha512_context ) );
 8013fe6:	22d8      	movs	r2, #216	; 0xd8
 8013fe8:	2100      	movs	r1, #0
 8013fea:	4620      	mov	r0, r4
 8013fec:	f00e fa24 	bl	8022438 <memset>
    mbedtls_sha512_starts( &ctx->accumulator, 0 );
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	f005 f95c 	bl	80192b0 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx->accumulator, buf, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	2240      	movs	r2, #64	; 0x40
 8013ffc:	4669      	mov	r1, sp
 8013ffe:	f005 ffb0 	bl	8019f62 <mbedtls_sha512_update>
    mbedtls_sha512( buf, MBEDTLS_ENTROPY_BLOCK_SIZE, buf, 0 );
 8014002:	2300      	movs	r3, #0
 8014004:	466a      	mov	r2, sp
 8014006:	2140      	movs	r1, #64	; 0x40
 8014008:	4668      	mov	r0, sp
 801400a:	f006 f8b5 	bl	801a178 <mbedtls_sha512>
    for( i = 0; i < ctx->source_count; i++ )
 801400e:	2300      	movs	r3, #0
 8014010:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
        ctx->source[i].size = 0;
 8014014:	2114      	movs	r1, #20
 8014016:	34e4      	adds	r4, #228	; 0xe4
 8014018:	4618      	mov	r0, r3
    for( i = 0; i < ctx->source_count; i++ )
 801401a:	4293      	cmp	r3, r2
 801401c:	db0e      	blt.n	801403c <mbedtls_entropy_func+0xb4>
    memcpy( output, buf, len );
 801401e:	4632      	mov	r2, r6
 8014020:	4669      	mov	r1, sp
 8014022:	4638      	mov	r0, r7
 8014024:	f00e f9e0 	bl	80223e8 <memcpy>
    ret = 0;
 8014028:	e7b8      	b.n	8013f9c <mbedtls_entropy_func+0x14>
                done = 0;
 801402a:	e9d3 1039 	ldrd	r1, r0, [r3, #228]	; 0xe4
        for( i = 0; i < ctx->source_count; i++ )
 801402e:	f10c 0c01 	add.w	ip, ip, #1
                done = 0;
 8014032:	4281      	cmp	r1, r0
 8014034:	bf38      	it	cc
 8014036:	2200      	movcc	r2, #0
        for( i = 0; i < ctx->source_count; i++ )
 8014038:	3314      	adds	r3, #20
 801403a:	e7c7      	b.n	8013fcc <mbedtls_entropy_func+0x44>
        ctx->source[i].size = 0;
 801403c:	fb01 fc03 	mul.w	ip, r1, r3
    for( i = 0; i < ctx->source_count; i++ )
 8014040:	3301      	adds	r3, #1
        ctx->source[i].size = 0;
 8014042:	f844 000c 	str.w	r0, [r4, ip]
    for( i = 0; i < ctx->source_count; i++ )
 8014046:	e7e8      	b.n	801401a <mbedtls_entropy_func+0x92>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8014048:	f06f 053f 	mvn.w	r5, #63	; 0x3f
 801404c:	e7a6      	b.n	8013f9c <mbedtls_entropy_func+0x14>
	...

08014050 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8014050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8014054:	7bcc      	ldrb	r4, [r1, #15]
 8014056:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 801414c <gcm_mult+0xfc>
{
 801405a:	9100      	str	r1, [sp, #0]
 801405c:	f004 040f 	and.w	r4, r4, #15
 8014060:	eb00 04c4 	add.w	r4, r0, r4, lsl #3

    zh = ctx->HH[lo];
 8014064:	e9d4 a530 	ldrd	sl, r5, [r4, #192]	; 0xc0
    zl = ctx->HL[lo];
 8014068:	e9d4 3410 	ldrd	r3, r4, [r4, #64]	; 0x40

    for( i = 15; i >= 0; i-- )
 801406c:	260f      	movs	r6, #15
    {
        lo = x[i] & 0xf;
 801406e:	9900      	ldr	r1, [sp, #0]
 8014070:	5d8f      	ldrb	r7, [r1, r6]
        hi = x[i] >> 4;
 8014072:	0939      	lsrs	r1, r7, #4
        lo = x[i] & 0xf;
 8014074:	f007 0b0f 	and.w	fp, r7, #15
        hi = x[i] >> 4;
 8014078:	f003 070f 	and.w	r7, r3, #15
 801407c:	9101      	str	r1, [sp, #4]

        if( i != 15 )
 801407e:	f85e 7037 	ldr.w	r7, [lr, r7, lsl #3]
 8014082:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 8014086:	0439      	lsls	r1, r7, #16
 8014088:	ea4f 181a 	mov.w	r8, sl, lsr #4
 801408c:	0927      	lsrs	r7, r4, #4
 801408e:	2e0f      	cmp	r6, #15
 8014090:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
 8014094:	ea47 770a 	orr.w	r7, r7, sl, lsl #28
 8014098:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
 801409c:	ea4f 1915 	mov.w	r9, r5, lsr #4
 80140a0:	d00d      	beq.n	80140be <gcm_mult+0x6e>
        {
            rem = (unsigned char) zl & 0xf;
            zl = ( zh << 60 ) | ( zl >> 4 );
            zh = ( zh >> 4 );
            zh ^= (uint64_t) last4[rem] << 48;
            zh ^= ctx->HH[lo];
 80140a2:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 80140a6:	e9d4 3530 	ldrd	r3, r5, [r4, #192]	; 0xc0
 80140aa:	ea83 0a08 	eor.w	sl, r3, r8
            zl ^= ctx->HL[lo];
 80140ae:	e9d4 3410 	ldrd	r3, r4, [r4, #64]	; 0x40
            zh ^= ctx->HH[lo];
 80140b2:	4069      	eors	r1, r5
 80140b4:	ea81 0509 	eor.w	r5, r1, r9
            zl ^= ctx->HL[lo];
 80140b8:	ea8c 0303 	eor.w	r3, ip, r3
 80140bc:	407c      	eors	r4, r7

        }

        rem = (unsigned char) zl & 0xf;
        zl = ( zh << 60 ) | ( zl >> 4 );
 80140be:	9901      	ldr	r1, [sp, #4]
 80140c0:	ea4f 770a 	mov.w	r7, sl, lsl #28
 80140c4:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 80140c8:	eb00 08c1 	add.w	r8, r0, r1, lsl #3
 80140cc:	ea4c 7c04 	orr.w	ip, ip, r4, lsl #28
 80140d0:	ea47 1414 	orr.w	r4, r7, r4, lsr #4
        zh = ( zh >> 4 );
        zh ^= (uint64_t) last4[rem] << 48;
        zh ^= ctx->HH[hi];
 80140d4:	e9d8 7130 	ldrd	r7, r1, [r8, #192]	; 0xc0
        zh = ( zh >> 4 );
 80140d8:	ea4f 1a1a 	mov.w	sl, sl, lsr #4
 80140dc:	ea4a 7a05 	orr.w	sl, sl, r5, lsl #28
        zh ^= (uint64_t) last4[rem] << 48;
 80140e0:	f003 030f 	and.w	r3, r3, #15
 80140e4:	ea81 1515 	eor.w	r5, r1, r5, lsr #4
 80140e8:	4918      	ldr	r1, [pc, #96]	; (801414c <gcm_mult+0xfc>)
 80140ea:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
        zh ^= ctx->HH[hi];
 80140ee:	ea8a 0a07 	eor.w	sl, sl, r7
 80140f2:	ea85 4503 	eor.w	r5, r5, r3, lsl #16
        zl ^= ctx->HL[hi];
 80140f6:	e9d8 3710 	ldrd	r3, r7, [r8, #64]	; 0x40
    for( i = 15; i >= 0; i-- )
 80140fa:	3e01      	subs	r6, #1
        zl ^= ctx->HL[hi];
 80140fc:	ea8c 0303 	eor.w	r3, ip, r3
 8014100:	ea84 0407 	eor.w	r4, r4, r7
    for( i = 15; i >= 0; i-- )
 8014104:	d2b3      	bcs.n	801406e <gcm_mult+0x1e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8014106:	0e29      	lsrs	r1, r5, #24
 8014108:	7011      	strb	r1, [r2, #0]
 801410a:	0c29      	lsrs	r1, r5, #16
 801410c:	7051      	strb	r1, [r2, #1]
 801410e:	0a29      	lsrs	r1, r5, #8
 8014110:	7091      	strb	r1, [r2, #2]
    PUT_UINT32_BE( zh, output, 4 );
 8014112:	ea4f 611a 	mov.w	r1, sl, lsr #24
 8014116:	7111      	strb	r1, [r2, #4]
 8014118:	ea4f 411a 	mov.w	r1, sl, lsr #16
 801411c:	7151      	strb	r1, [r2, #5]
 801411e:	ea4f 211a 	mov.w	r1, sl, lsr #8
 8014122:	7191      	strb	r1, [r2, #6]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8014124:	0e21      	lsrs	r1, r4, #24
 8014126:	7211      	strb	r1, [r2, #8]
 8014128:	0c21      	lsrs	r1, r4, #16
 801412a:	7251      	strb	r1, [r2, #9]
 801412c:	0a21      	lsrs	r1, r4, #8
 801412e:	7291      	strb	r1, [r2, #10]
    PUT_UINT32_BE( zl, output, 12 );
 8014130:	0e19      	lsrs	r1, r3, #24
 8014132:	7311      	strb	r1, [r2, #12]
 8014134:	0c19      	lsrs	r1, r3, #16
 8014136:	7351      	strb	r1, [r2, #13]
 8014138:	0a19      	lsrs	r1, r3, #8
    PUT_UINT32_BE( zh >> 32, output, 0 );
 801413a:	70d5      	strb	r5, [r2, #3]
    PUT_UINT32_BE( zh, output, 4 );
 801413c:	f882 a007 	strb.w	sl, [r2, #7]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8014140:	72d4      	strb	r4, [r2, #11]
    PUT_UINT32_BE( zl, output, 12 );
 8014142:	7391      	strb	r1, [r2, #14]
 8014144:	73d3      	strb	r3, [r2, #15]
}
 8014146:	b003      	add	sp, #12
 8014148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801414c:	0802b090 	.word	0x0802b090

08014150 <mbedtls_gcm_init>:
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8014150:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8014154:	2100      	movs	r1, #0
 8014156:	f00e b96f 	b.w	8022438 <memset>

0801415a <mbedtls_gcm_setkey>:
{
 801415a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415e:	4604      	mov	r4, r0
 8014160:	b08d      	sub	sp, #52	; 0x34
 8014162:	4608      	mov	r0, r1
 8014164:	4690      	mov	r8, r2
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8014166:	4619      	mov	r1, r3
 8014168:	2201      	movs	r2, #1
{
 801416a:	461e      	mov	r6, r3
    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 801416c:	f7fb ff82 	bl	8010074 <mbedtls_cipher_info_from_values>
    if( cipher_info == NULL )
 8014170:	4605      	mov	r5, r0
 8014172:	2800      	cmp	r0, #0
 8014174:	f000 8096 	beq.w	80142a4 <mbedtls_gcm_setkey+0x14a>
    if( cipher_info->block_size != 16 )
 8014178:	6947      	ldr	r7, [r0, #20]
 801417a:	2f10      	cmp	r7, #16
 801417c:	f040 8092 	bne.w	80142a4 <mbedtls_gcm_setkey+0x14a>
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8014180:	4620      	mov	r0, r4
 8014182:	f7fb ff8f 	bl	80100a4 <mbedtls_cipher_free>
    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8014186:	4629      	mov	r1, r5
 8014188:	4620      	mov	r0, r4
 801418a:	f7fc f961 	bl	8010450 <mbedtls_cipher_setup>
 801418e:	2800      	cmp	r0, #0
 8014190:	f040 8085 	bne.w	801429e <mbedtls_gcm_setkey+0x144>
    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8014194:	2301      	movs	r3, #1
 8014196:	4632      	mov	r2, r6
 8014198:	4641      	mov	r1, r8
 801419a:	4620      	mov	r0, r4
 801419c:	f7fb ff94 	bl	80100c8 <mbedtls_cipher_setkey>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d17c      	bne.n	801429e <mbedtls_gcm_setkey+0x144>
    memset( h, 0, 16 );
 80141a4:	4601      	mov	r1, r0
    size_t olen = 0;
 80141a6:	9007      	str	r0, [sp, #28]
    memset( h, 0, 16 );
 80141a8:	463a      	mov	r2, r7
 80141aa:	a808      	add	r0, sp, #32
 80141ac:	f00e f944 	bl	8022438 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80141b0:	ab07      	add	r3, sp, #28
 80141b2:	9300      	str	r3, [sp, #0]
 80141b4:	ab08      	add	r3, sp, #32
 80141b6:	463a      	mov	r2, r7
 80141b8:	4619      	mov	r1, r3
 80141ba:	4620      	mov	r0, r4
 80141bc:	f7fb ffd2 	bl	8010164 <mbedtls_cipher_update>
 80141c0:	2800      	cmp	r0, #0
 80141c2:	d16c      	bne.n	801429e <mbedtls_gcm_setkey+0x144>
    GET_UINT32_BE( lo, h,  4  );
 80141c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141c6:	9f08      	ldr	r7, [sp, #32]
 80141c8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80141ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141cc:	ba1b      	rev	r3, r3
 80141ce:	ba3f      	rev	r7, r7
    GET_UINT32_BE( lo, h,  12 );
 80141d0:	ba36      	rev	r6, r6
 80141d2:	fa92 fc82 	rev.w	ip, r2
    ctx->HL[8] = vl;
 80141d6:	e9c4 6c20 	strd	r6, ip, [r4, #128]	; 0x80
    ctx->HH[8] = vh;
 80141da:	e9c4 3740 	strd	r3, r7, [r4, #256]	; 0x100
    ctx->HH[0] = 0;
 80141de:	f04f 0800 	mov.w	r8, #0
 80141e2:	f04f 0900 	mov.w	r9, #0
 80141e6:	e9c4 8930 	strd	r8, r9, [r4, #192]	; 0xc0
    ctx->HL[0] = 0;
 80141ea:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
 80141ee:	2103      	movs	r1, #3
    for( i = 4; i > 0; i >>= 1 )
 80141f0:	2504      	movs	r5, #4
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 80141f2:	f04f 4861 	mov.w	r8, #3774873600	; 0xe1000000
 80141f6:	f006 0201 	and.w	r2, r6, #1
 80141fa:	fb08 f202 	mul.w	r2, r8, r2
        vl  = ( vh << 63 ) | ( vl >> 1 );
 80141fe:	ea4f 7ec3 	mov.w	lr, r3, lsl #31
 8014202:	0876      	lsrs	r6, r6, #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8014204:	085b      	lsrs	r3, r3, #1
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8014206:	ea46 76cc 	orr.w	r6, r6, ip, lsl #31
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 801420a:	ea43 73c7 	orr.w	r3, r3, r7, lsl #31
        vl  = ( vh << 63 ) | ( vl >> 1 );
 801420e:	ea4e 0c5c 	orr.w	ip, lr, ip, lsr #1
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8014212:	ea82 0757 	eor.w	r7, r2, r7, lsr #1
    for( i = 4; i > 0; i >>= 1 )
 8014216:	3901      	subs	r1, #1
 8014218:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
        ctx->HL[i] = vl;
 801421c:	e9c2 6c10 	strd	r6, ip, [r2, #64]	; 0x40
        ctx->HH[i] = vh;
 8014220:	e9c2 3730 	strd	r3, r7, [r2, #192]	; 0xc0
    for( i = 4; i > 0; i >>= 1 )
 8014224:	ea4f 0565 	mov.w	r5, r5, asr #1
 8014228:	d1e5      	bne.n	80141f6 <mbedtls_gcm_setkey+0x9c>
 801422a:	f04f 0e03 	mov.w	lr, #3
    for( i = 2; i <= 8; i *= 2 )
 801422e:	2202      	movs	r2, #2
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8014230:	f104 0840 	add.w	r8, r4, #64	; 0x40
 8014234:	f104 09c0 	add.w	r9, r4, #192	; 0xc0
 8014238:	eb09 06c2 	add.w	r6, r9, r2, lsl #3
 801423c:	eb08 03c2 	add.w	r3, r8, r2, lsl #3
        vh = *HiH;
 8014240:	6871      	ldr	r1, [r6, #4]
 8014242:	9103      	str	r1, [sp, #12]
        vl = *HiL;
 8014244:	f858 1032 	ldr.w	r1, [r8, r2, lsl #3]
 8014248:	9104      	str	r1, [sp, #16]
        vh = *HiH;
 801424a:	f859 b032 	ldr.w	fp, [r9, r2, lsl #3]
        vl = *HiL;
 801424e:	6859      	ldr	r1, [r3, #4]
 8014250:	9105      	str	r1, [sp, #20]
        for( j = 1; j < i; j++ )
 8014252:	f104 0548 	add.w	r5, r4, #72	; 0x48
 8014256:	f106 0108 	add.w	r1, r6, #8
 801425a:	9302      	str	r3, [sp, #8]
 801425c:	eb06 0ac2 	add.w	sl, r6, r2, lsl #3
            HiH[j] = vh ^ ctx->HH[j];
 8014260:	e9d5 7620 	ldrd	r7, r6, [r5, #128]	; 0x80
 8014264:	9b03      	ldr	r3, [sp, #12]
 8014266:	ea87 070b 	eor.w	r7, r7, fp
 801426a:	405e      	eors	r6, r3
 801426c:	e9c1 7600 	strd	r7, r6, [r1]
            HiL[j] = vl ^ ctx->HL[j];
 8014270:	9b04      	ldr	r3, [sp, #16]
 8014272:	682e      	ldr	r6, [r5, #0]
 8014274:	46ac      	mov	ip, r5
 8014276:	405e      	eors	r6, r3
 8014278:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801427c:	9b05      	ldr	r3, [sp, #20]
 801427e:	405f      	eors	r7, r3
 8014280:	9b02      	ldr	r3, [sp, #8]
 8014282:	3108      	adds	r1, #8
 8014284:	f843 6f08 	str.w	r6, [r3, #8]!
        for( j = 1; j < i; j++ )
 8014288:	4551      	cmp	r1, sl
            HiL[j] = vl ^ ctx->HL[j];
 801428a:	f105 0508 	add.w	r5, r5, #8
 801428e:	9302      	str	r3, [sp, #8]
 8014290:	605f      	str	r7, [r3, #4]
        for( j = 1; j < i; j++ )
 8014292:	d1e5      	bne.n	8014260 <mbedtls_gcm_setkey+0x106>
    for( i = 2; i <= 8; i *= 2 )
 8014294:	f1be 0e01 	subs.w	lr, lr, #1
 8014298:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801429c:	d1cc      	bne.n	8014238 <mbedtls_gcm_setkey+0xde>
}
 801429e:	b00d      	add	sp, #52	; 0x34
 80142a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80142a4:	f06f 0013 	mvn.w	r0, #19
 80142a8:	e7f9      	b.n	801429e <mbedtls_gcm_setkey+0x144>

080142aa <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80142aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ae:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80142b0:	f04f 0800 	mov.w	r8, #0
{
 80142b4:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    size_t use_len, olen = 0;
 80142b8:	f8cd 800c 	str.w	r8, [sp, #12]
{
 80142bc:	4604      	mov	r4, r0
 80142be:	468b      	mov	fp, r1
 80142c0:	4616      	mov	r6, r2

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80142c2:	461d      	mov	r5, r3
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	f000 8092 	beq.w	80143ee <mbedtls_gcm_starts+0x144>
      ( (uint64_t) add_len ) >> 61 != 0 )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80142ca:	f500 77b0 	add.w	r7, r0, #352	; 0x160
 80142ce:	2210      	movs	r2, #16
 80142d0:	4641      	mov	r1, r8
 80142d2:	4638      	mov	r0, r7
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80142d4:	f504 7ab8 	add.w	sl, r4, #368	; 0x170
    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80142d8:	f00e f8ae 	bl	8022438 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80142dc:	2210      	movs	r2, #16
 80142de:	4641      	mov	r1, r8
 80142e0:	4650      	mov	r0, sl
 80142e2:	f00e f8a9 	bl	8022438 <memset>

    ctx->mode = mode;
    ctx->len = 0;
 80142e6:	2200      	movs	r2, #0
 80142e8:	2300      	movs	r3, #0
    ctx->add_len = 0;

    if( iv_len == 12 )
 80142ea:	2d0c      	cmp	r5, #12
    ctx->len = 0;
 80142ec:	e9c4 2350 	strd	r2, r3, [r4, #320]	; 0x140
    ctx->add_len = 0;
 80142f0:	e9c4 2352 	strd	r2, r3, [r4, #328]	; 0x148
    ctx->mode = mode;
 80142f4:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
    if( iv_len == 12 )
 80142f8:	d11d      	bne.n	8014336 <mbedtls_gcm_starts+0x8c>
    {
        memcpy( ctx->y, iv, iv_len );
 80142fa:	6833      	ldr	r3, [r6, #0]
 80142fc:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
 8014300:	6873      	ldr	r3, [r6, #4]
 8014302:	607b      	str	r3, [r7, #4]
 8014304:	68b3      	ldr	r3, [r6, #8]
 8014306:	60bb      	str	r3, [r7, #8]
        ctx->y[15] = 1;
 8014308:	2301      	movs	r3, #1
 801430a:	f884 316f 	strb.w	r3, [r4, #367]	; 0x16f
            ctx->y[i] ^= work_buf[i];

        gcm_mult( ctx, ctx->y, ctx->y );
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 801430e:	ab03      	add	r3, sp, #12
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	2210      	movs	r2, #16
 8014314:	f504 73a8 	add.w	r3, r4, #336	; 0x150
 8014318:	4639      	mov	r1, r7
 801431a:	4620      	mov	r0, r4
 801431c:	f7fb ff22 	bl	8010164 <mbedtls_cipher_update>
 8014320:	4605      	mov	r5, r0
 8014322:	b920      	cbnz	r0, 801432e <mbedtls_gcm_starts+0x84>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8014324:	e9c4 9052 	strd	r9, r0, [r4, #328]	; 0x148
        return( ret );
    }

    ctx->add_len = add_len;
    p = add;
    while( add_len > 0 )
 8014328:	f1b9 0f00 	cmp.w	r9, #0
 801432c:	d145      	bne.n	80143ba <mbedtls_gcm_starts+0x110>
        add_len -= use_len;
        p += use_len;
    }

    return( 0 );
}
 801432e:	4628      	mov	r0, r5
 8014330:	b009      	add	sp, #36	; 0x24
 8014332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8014336:	f3c5 5247 	ubfx	r2, r5, #21, #8
 801433a:	f88d 201c 	strb.w	r2, [sp, #28]
        memset( work_buf, 0x00, 16 );
 801433e:	e9cd 8804 	strd	r8, r8, [sp, #16]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8014342:	f3c5 324f 	ubfx	r2, r5, #13, #16
 8014346:	00eb      	lsls	r3, r5, #3
 8014348:	f88d 201d 	strb.w	r2, [sp, #29]
 801434c:	f3c5 1257 	ubfx	r2, r5, #5, #24
        memset( work_buf, 0x00, 16 );
 8014350:	f8cd 8018 	str.w	r8, [sp, #24]
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8014354:	f88d 201e 	strb.w	r2, [sp, #30]
 8014358:	f88d 301f 	strb.w	r3, [sp, #31]
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 801435c:	2d10      	cmp	r5, #16
 801435e:	46ab      	mov	fp, r5
 8014360:	f504 78b0 	add.w	r8, r4, #352	; 0x160
 8014364:	bf28      	it	cs
 8014366:	f04f 0b10 	movcs.w	fp, #16
            for( i = 0; i < use_len; i++ )
 801436a:	4633      	mov	r3, r6
 801436c:	eb0b 0006 	add.w	r0, fp, r6
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8014370:	4642      	mov	r2, r8
                ctx->y[i] ^= p[i];
 8014372:	f813 cb01 	ldrb.w	ip, [r3], #1
 8014376:	7811      	ldrb	r1, [r2, #0]
            for( i = 0; i < use_len; i++ )
 8014378:	4283      	cmp	r3, r0
                ctx->y[i] ^= p[i];
 801437a:	ea81 010c 	eor.w	r1, r1, ip
 801437e:	f802 1b01 	strb.w	r1, [r2], #1
            for( i = 0; i < use_len; i++ )
 8014382:	d1f6      	bne.n	8014372 <mbedtls_gcm_starts+0xc8>
            gcm_mult( ctx, ctx->y, ctx->y );
 8014384:	463a      	mov	r2, r7
 8014386:	4639      	mov	r1, r7
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff fe61 	bl	8014050 <gcm_mult>
        while( iv_len > 0 )
 801438e:	ebb5 050b 	subs.w	r5, r5, fp
            p += use_len;
 8014392:	445e      	add	r6, fp
        while( iv_len > 0 )
 8014394:	d1e2      	bne.n	801435c <mbedtls_gcm_starts+0xb2>
 8014396:	aa04      	add	r2, sp, #16
 8014398:	f504 71b8 	add.w	r1, r4, #368	; 0x170
            ctx->y[i] ^= work_buf[i];
 801439c:	f898 3000 	ldrb.w	r3, [r8]
 80143a0:	f812 0b01 	ldrb.w	r0, [r2], #1
 80143a4:	4043      	eors	r3, r0
 80143a6:	f808 3b01 	strb.w	r3, [r8], #1
        for( i = 0; i < 16; i++ )
 80143aa:	4588      	cmp	r8, r1
 80143ac:	d1f6      	bne.n	801439c <mbedtls_gcm_starts+0xf2>
        gcm_mult( ctx, ctx->y, ctx->y );
 80143ae:	463a      	mov	r2, r7
 80143b0:	4639      	mov	r1, r7
 80143b2:	4620      	mov	r0, r4
 80143b4:	f7ff fe4c 	bl	8014050 <gcm_mult>
 80143b8:	e7a9      	b.n	801430e <mbedtls_gcm_starts+0x64>
        use_len = ( add_len < 16 ) ? add_len : 16;
 80143ba:	464f      	mov	r7, r9
 80143bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80143be:	2f10      	cmp	r7, #16
 80143c0:	bf28      	it	cs
 80143c2:	2710      	movcs	r7, #16
        for( i = 0; i < use_len; i++ )
 80143c4:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 80143c8:	19de      	adds	r6, r3, r7
            ctx->buf[i] ^= p[i];
 80143ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 80143ce:	7811      	ldrb	r1, [r2, #0]
        for( i = 0; i < use_len; i++ )
 80143d0:	429e      	cmp	r6, r3
            ctx->buf[i] ^= p[i];
 80143d2:	ea81 0100 	eor.w	r1, r1, r0
 80143d6:	f802 1b01 	strb.w	r1, [r2], #1
        for( i = 0; i < use_len; i++ )
 80143da:	d1f6      	bne.n	80143ca <mbedtls_gcm_starts+0x120>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 80143dc:	4652      	mov	r2, sl
 80143de:	4651      	mov	r1, sl
 80143e0:	4620      	mov	r0, r4
 80143e2:	f7ff fe35 	bl	8014050 <gcm_mult>
        add_len -= use_len;
 80143e6:	eba9 0907 	sub.w	r9, r9, r7
        p += use_len;
 80143ea:	9612      	str	r6, [sp, #72]	; 0x48
 80143ec:	e79c      	b.n	8014328 <mbedtls_gcm_starts+0x7e>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80143ee:	f06f 0513 	mvn.w	r5, #19
 80143f2:	e79c      	b.n	801432e <mbedtls_gcm_starts+0x84>

080143f4 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80143f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f8:	461f      	mov	r7, r3
 80143fa:	b089      	sub	sp, #36	; 0x24
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
    size_t use_len, olen = 0;
 80143fc:	2300      	movs	r3, #0

    if( output > input && (size_t) ( output - input ) < length )
 80143fe:	4297      	cmp	r7, r2
{
 8014400:	4604      	mov	r4, r0
 8014402:	460d      	mov	r5, r1
 8014404:	4616      	mov	r6, r2
    size_t use_len, olen = 0;
 8014406:	9303      	str	r3, [sp, #12]
    if( output > input && (size_t) ( output - input ) < length )
 8014408:	d902      	bls.n	8014410 <mbedtls_gcm_update+0x1c>
 801440a:	1abb      	subs	r3, r7, r2
 801440c:	428b      	cmp	r3, r1
 801440e:	d36a      	bcc.n	80144e6 <mbedtls_gcm_update+0xf2>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8014410:	e9d4 ab50 	ldrd	sl, fp, [r4, #320]	; 0x140
 8014414:	2300      	movs	r3, #0
 8014416:	eb1a 0805 	adds.w	r8, sl, r5
 801441a:	eb5b 0903 	adcs.w	r9, fp, r3
 801441e:	f04f 0000 	mov.w	r0, #0
 8014422:	f04f 0100 	mov.w	r1, #0
 8014426:	bf24      	itt	cs
 8014428:	2001      	movcs	r0, #1
 801442a:	2100      	movcs	r1, #0
 801442c:	ea50 0301 	orrs.w	r3, r0, r1
 8014430:	d159      	bne.n	80144e6 <mbedtls_gcm_update+0xf2>
 8014432:	230f      	movs	r3, #15
 8014434:	f06f 021f 	mvn.w	r2, #31
 8014438:	454b      	cmp	r3, r9
 801443a:	bf08      	it	eq
 801443c:	4542      	cmpeq	r2, r8
 801443e:	d352      	bcc.n	80144e6 <mbedtls_gcm_update+0xf2>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
    }

    ctx->len += length;
 8014440:	e9c4 8950 	strd	r8, r9, [r4, #320]	; 0x140

        for( i = 16; i > 12; i-- )
            if( ++ctx->y[i - 1] != 0 )
                break;

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8014444:	f504 7ab0 	add.w	sl, r4, #352	; 0x160
 8014448:	f204 196b 	addw	r9, r4, #363	; 0x16b
    while( length > 0 )
 801444c:	b91d      	cbnz	r5, 8014456 <mbedtls_gcm_update+0x62>
        length -= use_len;
        p += use_len;
        out_p += use_len;
    }

    return( 0 );
 801444e:	4628      	mov	r0, r5
}
 8014450:	b009      	add	sp, #36	; 0x24
 8014452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        use_len = ( length < 16 ) ? length : 16;
 8014456:	2d10      	cmp	r5, #16
 8014458:	46a8      	mov	r8, r5
 801445a:	f204 126f 	addw	r2, r4, #367	; 0x16f
 801445e:	bf28      	it	cs
 8014460:	f04f 0810 	movcs.w	r8, #16
            if( ++ctx->y[i - 1] != 0 )
 8014464:	7813      	ldrb	r3, [r2, #0]
 8014466:	3301      	adds	r3, #1
 8014468:	b2db      	uxtb	r3, r3
 801446a:	f802 3901 	strb.w	r3, [r2], #-1
 801446e:	b90b      	cbnz	r3, 8014474 <mbedtls_gcm_update+0x80>
        for( i = 16; i > 12; i-- )
 8014470:	454a      	cmp	r2, r9
 8014472:	d1f7      	bne.n	8014464 <mbedtls_gcm_update+0x70>
        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8014474:	ab03      	add	r3, sp, #12
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	2210      	movs	r2, #16
 801447a:	ab04      	add	r3, sp, #16
 801447c:	4651      	mov	r1, sl
 801447e:	4620      	mov	r0, r4
 8014480:	f7fb fe70 	bl	8010164 <mbedtls_cipher_update>
 8014484:	2800      	cmp	r0, #0
 8014486:	d1e3      	bne.n	8014450 <mbedtls_gcm_update+0x5c>
 8014488:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 801448c:	4631      	mov	r1, r6
 801448e:	f10d 0c10 	add.w	ip, sp, #16
 8014492:	f107 3eff 	add.w	lr, r7, #4294967295
 8014496:	4446      	add	r6, r8
 8014498:	461a      	mov	r2, r3
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 801449a:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 801449e:	b928      	cbnz	r0, 80144ac <mbedtls_gcm_update+0xb8>
                ctx->buf[i] ^= p[i];
 80144a0:	7818      	ldrb	r0, [r3, #0]
 80144a2:	f891 b000 	ldrb.w	fp, [r1]
 80144a6:	ea80 000b 	eor.w	r0, r0, fp
 80144aa:	7018      	strb	r0, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 80144ac:	f811 0b01 	ldrb.w	r0, [r1], #1
 80144b0:	f81c bb01 	ldrb.w	fp, [ip], #1
 80144b4:	ea8b 0b00 	eor.w	fp, fp, r0
 80144b8:	f80e bf01 	strb.w	fp, [lr, #1]!
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 80144bc:	f8d4 0180 	ldr.w	r0, [r4, #384]	; 0x180
 80144c0:	2801      	cmp	r0, #1
                ctx->buf[i] ^= out_p[i];
 80144c2:	bf02      	ittt	eq
 80144c4:	7818      	ldrbeq	r0, [r3, #0]
 80144c6:	ea8b 0b00 	eoreq.w	fp, fp, r0
 80144ca:	f883 b000 	strbeq.w	fp, [r3]
        for( i = 0; i < use_len; i++ )
 80144ce:	428e      	cmp	r6, r1
 80144d0:	f103 0301 	add.w	r3, r3, #1
 80144d4:	d1e1      	bne.n	801449a <mbedtls_gcm_update+0xa6>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 80144d6:	4611      	mov	r1, r2
 80144d8:	4620      	mov	r0, r4
 80144da:	f7ff fdb9 	bl	8014050 <gcm_mult>
        length -= use_len;
 80144de:	eba5 0508 	sub.w	r5, r5, r8
        out_p += use_len;
 80144e2:	4447      	add	r7, r8
 80144e4:	e7b2      	b.n	801444c <mbedtls_gcm_update+0x58>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80144e6:	f06f 0013 	mvn.w	r0, #19
 80144ea:	e7b1      	b.n	8014450 <mbedtls_gcm_update+0x5c>

080144ec <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80144ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    unsigned char work_buf[16];
    size_t i;
    uint64_t orig_len = ctx->len * 8;
 80144f0:	e9d0 3550 	ldrd	r3, r5, [r0, #320]	; 0x140
 80144f4:	00ed      	lsls	r5, r5, #3
 80144f6:	ea45 7553 	orr.w	r5, r5, r3, lsr #29
 80144fa:	ea4f 08c3 	mov.w	r8, r3, lsl #3
    uint64_t orig_add_len = ctx->add_len * 8;
 80144fe:	e9d0 3652 	ldrd	r3, r6, [r0, #328]	; 0x148
 8014502:	00f6      	lsls	r6, r6, #3
 8014504:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8014508:	ea4f 09c3 	mov.w	r9, r3, lsl #3

    if( tag_len > 16 || tag_len < 4 )
 801450c:	1f13      	subs	r3, r2, #4
 801450e:	2b0c      	cmp	r3, #12
{
 8014510:	4604      	mov	r4, r0
 8014512:	460f      	mov	r7, r1
 8014514:	4692      	mov	sl, r2
    if( tag_len > 16 || tag_len < 4 )
 8014516:	d847      	bhi.n	80145a8 <mbedtls_gcm_finish+0xbc>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );

    memcpy( tag, ctx->base_ectr, tag_len );
 8014518:	f500 71a8 	add.w	r1, r0, #336	; 0x150
 801451c:	4638      	mov	r0, r7
 801451e:	f00d ff63 	bl	80223e8 <memcpy>

    if( orig_len || orig_add_len )
 8014522:	ea48 0209 	orr.w	r2, r8, r9
 8014526:	ea45 0306 	orr.w	r3, r5, r6
 801452a:	4313      	orrs	r3, r2
 801452c:	d103      	bne.n	8014536 <mbedtls_gcm_finish+0x4a>

        for( i = 0; i < tag_len; i++ )
            tag[i] ^= ctx->buf[i];
    }

    return( 0 );
 801452e:	2000      	movs	r0, #0
}
 8014530:	b004      	add	sp, #16
 8014532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8014536:	0e33      	lsrs	r3, r6, #24
 8014538:	f88d 3000 	strb.w	r3, [sp]
 801453c:	0c33      	lsrs	r3, r6, #16
 801453e:	f88d 3001 	strb.w	r3, [sp, #1]
 8014542:	0a33      	lsrs	r3, r6, #8
 8014544:	f88d 3002 	strb.w	r3, [sp, #2]
 8014548:	fa99 f389 	rev.w	r3, r9
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 801454c:	9301      	str	r3, [sp, #4]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 801454e:	0e2b      	lsrs	r3, r5, #24
 8014550:	f88d 3008 	strb.w	r3, [sp, #8]
 8014554:	0c2b      	lsrs	r3, r5, #16
 8014556:	f88d 3009 	strb.w	r3, [sp, #9]
 801455a:	0a2b      	lsrs	r3, r5, #8
 801455c:	f88d 300a 	strb.w	r3, [sp, #10]
 8014560:	f504 72b8 	add.w	r2, r4, #368	; 0x170
 8014564:	fa98 f388 	rev.w	r3, r8
 8014568:	f88d 500b 	strb.w	r5, [sp, #11]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 801456c:	9303      	str	r3, [sp, #12]
        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 801456e:	f88d 6003 	strb.w	r6, [sp, #3]
        for( i = 0; i < 16; i++ )
 8014572:	4668      	mov	r0, sp
 8014574:	f504 75c0 	add.w	r5, r4, #384	; 0x180
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8014578:	4613      	mov	r3, r2
            ctx->buf[i] ^= work_buf[i];
 801457a:	7819      	ldrb	r1, [r3, #0]
 801457c:	f810 6b01 	ldrb.w	r6, [r0], #1
 8014580:	4071      	eors	r1, r6
 8014582:	f803 1b01 	strb.w	r1, [r3], #1
        for( i = 0; i < 16; i++ )
 8014586:	42ab      	cmp	r3, r5
 8014588:	d1f7      	bne.n	801457a <mbedtls_gcm_finish+0x8e>
        gcm_mult( ctx, ctx->buf, ctx->buf );
 801458a:	4620      	mov	r0, r4
 801458c:	4611      	mov	r1, r2
 801458e:	f7ff fd5f 	bl	8014050 <gcm_mult>
        for( i = 0; i < tag_len; i++ )
 8014592:	44ba      	add	sl, r7
 8014594:	4638      	mov	r0, r7
            tag[i] ^= ctx->buf[i];
 8014596:	7803      	ldrb	r3, [r0, #0]
 8014598:	f812 1b01 	ldrb.w	r1, [r2], #1
 801459c:	404b      	eors	r3, r1
 801459e:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < tag_len; i++ )
 80145a2:	4582      	cmp	sl, r0
 80145a4:	d1f7      	bne.n	8014596 <mbedtls_gcm_finish+0xaa>
 80145a6:	e7c2      	b.n	801452e <mbedtls_gcm_finish+0x42>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80145a8:	f06f 0013 	mvn.w	r0, #19
 80145ac:	e7c0      	b.n	8014530 <mbedtls_gcm_finish+0x44>

080145ae <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80145ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145b2:	4615      	mov	r5, r2
 80145b4:	461a      	mov	r2, r3
    int ret;

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80145b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145b8:	9301      	str	r3, [sp, #4]
 80145ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145bc:	9300      	str	r3, [sp, #0]
 80145be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 80145c0:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
 80145c4:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 80145c8:	4604      	mov	r4, r0
    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 80145ca:	f7ff fe6e 	bl	80142aa <mbedtls_gcm_starts>
 80145ce:	b970      	cbnz	r0, 80145ee <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 80145d0:	464b      	mov	r3, r9
 80145d2:	4642      	mov	r2, r8
 80145d4:	4629      	mov	r1, r5
 80145d6:	4620      	mov	r0, r4
 80145d8:	f7ff ff0c 	bl	80143f4 <mbedtls_gcm_update>
 80145dc:	b938      	cbnz	r0, 80145ee <mbedtls_gcm_crypt_and_tag+0x40>
        return( ret );

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80145de:	463a      	mov	r2, r7
 80145e0:	4631      	mov	r1, r6
 80145e2:	4620      	mov	r0, r4
        return( ret );

    return( 0 );
}
 80145e4:	b003      	add	sp, #12
 80145e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 80145ea:	f7ff bf7f 	b.w	80144ec <mbedtls_gcm_finish>
}
 80145ee:	b003      	add	sp, #12
 80145f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080145f4 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 80145f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145f6:	b08d      	sub	sp, #52	; 0x34
 80145f8:	460e      	mov	r6, r1
    int ret;
    unsigned char check_tag[16];
    size_t i;
    int diff;

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 80145fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80145fc:	9103      	str	r1, [sp, #12]
 80145fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
{
 8014600:	9f15      	ldr	r7, [sp, #84]	; 0x54
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8014602:	9102      	str	r1, [sp, #8]
 8014604:	9912      	ldr	r1, [sp, #72]	; 0x48
{
 8014606:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8014608:	9404      	str	r4, [sp, #16]
 801460a:	ad08      	add	r5, sp, #32
 801460c:	e9cd 3100 	strd	r3, r1, [sp]
 8014610:	e9cd 7505 	strd	r7, r5, [sp, #20]
 8014614:	4613      	mov	r3, r2
 8014616:	2100      	movs	r1, #0
 8014618:	4632      	mov	r2, r6
 801461a:	f7ff ffc8 	bl	80145ae <mbedtls_gcm_crypt_and_tag>
 801461e:	b948      	cbnz	r0, 8014634 <mbedtls_gcm_auth_decrypt+0x40>
    {
        return( ret );
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8014620:	4603      	mov	r3, r0
 8014622:	42bb      	cmp	r3, r7
 8014624:	d108      	bne.n	8014638 <mbedtls_gcm_auth_decrypt+0x44>
        diff |= tag[i] ^ check_tag[i];

    if( diff != 0 )
 8014626:	b128      	cbz	r0, 8014634 <mbedtls_gcm_auth_decrypt+0x40>
 8014628:	4426      	add	r6, r4
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801462a:	2300      	movs	r3, #0
 801462c:	42b4      	cmp	r4, r6
 801462e:	d10a      	bne.n	8014646 <mbedtls_gcm_auth_decrypt+0x52>
    {
        mbedtls_zeroize( output, length );
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8014630:	f06f 0011 	mvn.w	r0, #17
    }

    return( 0 );
}
 8014634:	b00d      	add	sp, #52	; 0x34
 8014636:	bdf0      	pop	{r4, r5, r6, r7, pc}
        diff |= tag[i] ^ check_tag[i];
 8014638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801463a:	5ce9      	ldrb	r1, [r5, r3]
 801463c:	5cd2      	ldrb	r2, [r2, r3]
 801463e:	404a      	eors	r2, r1
 8014640:	4310      	orrs	r0, r2
    for( diff = 0, i = 0; i < tag_len; i++ )
 8014642:	3301      	adds	r3, #1
 8014644:	e7ed      	b.n	8014622 <mbedtls_gcm_auth_decrypt+0x2e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014646:	f804 3b01 	strb.w	r3, [r4], #1
 801464a:	e7ef      	b.n	801462c <mbedtls_gcm_auth_decrypt+0x38>

0801464c <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 801464c:	b510      	push	{r4, lr}
 801464e:	4604      	mov	r4, r0
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8014650:	f7fb fd28 	bl	80100a4 <mbedtls_cipher_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014654:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8014658:	2200      	movs	r2, #0
 801465a:	429c      	cmp	r4, r3
 801465c:	d100      	bne.n	8014660 <mbedtls_gcm_free+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
}
 801465e:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014660:	f804 2b01 	strb.w	r2, [r4], #1
 8014664:	e7f9      	b.n	801465a <mbedtls_gcm_free+0xe>

08014666 <mbedtls_hmac_drbg_free.part.0>:
}

/*
 * Free an HMAC_DRBG context
 */
void mbedtls_hmac_drbg_free( mbedtls_hmac_drbg_context *ctx )
 8014666:	b510      	push	{r4, lr}
 8014668:	4604      	mov	r4, r0
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_md_free( &ctx->md_ctx );
 801466a:	f000 f92d 	bl	80148c8 <mbedtls_md_free>
static void mbedtls_zeroize( void *v, size_t n ) {
 801466e:	f104 0364 	add.w	r3, r4, #100	; 0x64
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014672:	2200      	movs	r2, #0
 8014674:	429c      	cmp	r4, r3
 8014676:	d100      	bne.n	801467a <mbedtls_hmac_drbg_free.part.0+0x14>
    mbedtls_zeroize( ctx, sizeof( mbedtls_hmac_drbg_context ) );
}
 8014678:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801467a:	f804 2b01 	strb.w	r2, [r4], #1
 801467e:	e7f9      	b.n	8014674 <mbedtls_hmac_drbg_free.part.0+0xe>

08014680 <mbedtls_hmac_drbg_init>:
    memset( ctx, 0, sizeof( mbedtls_hmac_drbg_context ) );
 8014680:	2264      	movs	r2, #100	; 0x64
 8014682:	2100      	movs	r1, #0
 8014684:	f00d bed8 	b.w	8022438 <memset>

08014688 <mbedtls_hmac_drbg_update>:
{
 8014688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801468c:	4604      	mov	r4, r0
 801468e:	b093      	sub	sp, #76	; 0x4c
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014690:	6800      	ldr	r0, [r0, #0]
{
 8014692:	460e      	mov	r6, r1
 8014694:	4617      	mov	r7, r2
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 8014696:	f000 fa55 	bl	8014b44 <mbedtls_md_get_size>
 801469a:	4605      	mov	r5, r0
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 801469c:	2e00      	cmp	r6, #0
 801469e:	d03c      	beq.n	801471a <mbedtls_hmac_drbg_update+0x92>
 80146a0:	2f00      	cmp	r7, #0
 80146a2:	bf14      	ite	ne
 80146a4:	f04f 0802 	movne.w	r8, #2
 80146a8:	f04f 0801 	moveq.w	r8, #1
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 80146ac:	2300      	movs	r3, #0
 80146ae:	f88d 3004 	strb.w	r3, [sp, #4]
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80146b2:	f104 090c 	add.w	r9, r4, #12
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 80146b6:	4620      	mov	r0, r4
 80146b8:	f000 fa20 	bl	8014afc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80146bc:	462a      	mov	r2, r5
 80146be:	4649      	mov	r1, r9
 80146c0:	4620      	mov	r0, r4
 80146c2:	f000 f9df 	bl	8014a84 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_update( &ctx->md_ctx, sep, 1 );
 80146c6:	2201      	movs	r2, #1
 80146c8:	a901      	add	r1, sp, #4
 80146ca:	4620      	mov	r0, r4
 80146cc:	f000 f9da 	bl	8014a84 <mbedtls_md_hmac_update>
        if( rounds == 2 )
 80146d0:	f1b8 0f02 	cmp.w	r8, #2
 80146d4:	d104      	bne.n	80146e0 <mbedtls_hmac_drbg_update+0x58>
            mbedtls_md_hmac_update( &ctx->md_ctx, additional, add_len );
 80146d6:	463a      	mov	r2, r7
 80146d8:	4631      	mov	r1, r6
 80146da:	4620      	mov	r0, r4
 80146dc:	f000 f9d2 	bl	8014a84 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, K );
 80146e0:	a902      	add	r1, sp, #8
 80146e2:	4620      	mov	r0, r4
 80146e4:	f000 f9de 	bl	8014aa4 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_starts( &ctx->md_ctx, K, md_len );
 80146e8:	462a      	mov	r2, r5
 80146ea:	a902      	add	r1, sp, #8
 80146ec:	4620      	mov	r0, r4
 80146ee:	f000 f969 	bl	80149c4 <mbedtls_md_hmac_starts>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 80146f2:	462a      	mov	r2, r5
 80146f4:	4649      	mov	r1, r9
 80146f6:	4620      	mov	r0, r4
 80146f8:	f000 f9c4 	bl	8014a84 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 80146fc:	4649      	mov	r1, r9
 80146fe:	4620      	mov	r0, r4
 8014700:	f000 f9d0 	bl	8014aa4 <mbedtls_md_hmac_finish>
    for( sep[0] = 0; sep[0] < rounds; sep[0]++ )
 8014704:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014708:	3301      	adds	r3, #1
 801470a:	b2db      	uxtb	r3, r3
 801470c:	4543      	cmp	r3, r8
 801470e:	f88d 3004 	strb.w	r3, [sp, #4]
 8014712:	d3d0      	bcc.n	80146b6 <mbedtls_hmac_drbg_update+0x2e>
}
 8014714:	b013      	add	sp, #76	; 0x4c
 8014716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    unsigned char rounds = ( additional != NULL && add_len != 0 ) ? 2 : 1;
 801471a:	f04f 0801 	mov.w	r8, #1
 801471e:	e7c5      	b.n	80146ac <mbedtls_hmac_drbg_update+0x24>

08014720 <mbedtls_hmac_drbg_seed_buf>:
{
 8014720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014724:	4617      	mov	r7, r2
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 8014726:	2201      	movs	r2, #1
{
 8014728:	4604      	mov	r4, r0
 801472a:	460e      	mov	r6, r1
 801472c:	4698      	mov	r8, r3
    if( ( ret = mbedtls_md_setup( &ctx->md_ctx, md_info, 1 ) ) != 0 )
 801472e:	f000 f8ef 	bl	8014910 <mbedtls_md_setup>
 8014732:	4605      	mov	r5, r0
 8014734:	b9b0      	cbnz	r0, 8014764 <mbedtls_hmac_drbg_seed_buf+0x44>
    mbedtls_md_hmac_starts( &ctx->md_ctx, ctx->V, mbedtls_md_get_size( md_info ) );
 8014736:	4630      	mov	r0, r6
 8014738:	f000 fa04 	bl	8014b44 <mbedtls_md_get_size>
 801473c:	f104 090c 	add.w	r9, r4, #12
 8014740:	4602      	mov	r2, r0
 8014742:	4649      	mov	r1, r9
 8014744:	4620      	mov	r0, r4
 8014746:	f000 f93d 	bl	80149c4 <mbedtls_md_hmac_starts>
    memset( ctx->V, 0x01, mbedtls_md_get_size( md_info ) );
 801474a:	4630      	mov	r0, r6
 801474c:	f000 f9fa 	bl	8014b44 <mbedtls_md_get_size>
 8014750:	2101      	movs	r1, #1
 8014752:	4602      	mov	r2, r0
 8014754:	4648      	mov	r0, r9
 8014756:	f00d fe6f 	bl	8022438 <memset>
    mbedtls_hmac_drbg_update( ctx, data, data_len );
 801475a:	4642      	mov	r2, r8
 801475c:	4639      	mov	r1, r7
 801475e:	4620      	mov	r0, r4
 8014760:	f7ff ff92 	bl	8014688 <mbedtls_hmac_drbg_update>
}
 8014764:	4628      	mov	r0, r5
 8014766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801476a <mbedtls_hmac_drbg_reseed>:
{
 801476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 801476e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
{
 8014772:	b0e0      	sub	sp, #384	; 0x180
 8014774:	4604      	mov	r4, r0
 8014776:	4688      	mov	r8, r1
 8014778:	4616      	mov	r6, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 801477a:	d828      	bhi.n	80147ce <mbedtls_hmac_drbg_reseed+0x64>
        ctx->entropy_len + len > MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT )
 801477c:	6d05      	ldr	r5, [r0, #80]	; 0x50
 801477e:	18ab      	adds	r3, r5, r2
    if( len > MBEDTLS_HMAC_DRBG_MAX_INPUT ||
 8014780:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8014784:	d823      	bhi.n	80147ce <mbedtls_hmac_drbg_reseed+0x64>
    memset( seed, 0, MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT );
 8014786:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801478a:	2100      	movs	r1, #0
 801478c:	4668      	mov	r0, sp
 801478e:	f00d fe53 	bl	8022438 <memset>
    if( ctx->f_entropy( ctx->p_entropy, seed, ctx->entropy_len ) != 0 )
 8014792:	462a      	mov	r2, r5
 8014794:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8014796:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8014798:	4669      	mov	r1, sp
 801479a:	4798      	blx	r3
 801479c:	4605      	mov	r5, r0
 801479e:	b9c8      	cbnz	r0, 80147d4 <mbedtls_hmac_drbg_reseed+0x6a>
    seedlen = ctx->entropy_len;
 80147a0:	6d27      	ldr	r7, [r4, #80]	; 0x50
    if( additional != NULL && len != 0 )
 80147a2:	f1b8 0f00 	cmp.w	r8, #0
 80147a6:	d007      	beq.n	80147b8 <mbedtls_hmac_drbg_reseed+0x4e>
 80147a8:	b136      	cbz	r6, 80147b8 <mbedtls_hmac_drbg_reseed+0x4e>
        memcpy( seed + seedlen, additional, len );
 80147aa:	eb0d 0007 	add.w	r0, sp, r7
 80147ae:	4632      	mov	r2, r6
 80147b0:	4641      	mov	r1, r8
 80147b2:	f00d fe19 	bl	80223e8 <memcpy>
        seedlen += len;
 80147b6:	4437      	add	r7, r6
    mbedtls_hmac_drbg_update( ctx, seed, seedlen );
 80147b8:	463a      	mov	r2, r7
 80147ba:	4669      	mov	r1, sp
 80147bc:	4620      	mov	r0, r4
 80147be:	f7ff ff63 	bl	8014688 <mbedtls_hmac_drbg_update>
    ctx->reseed_counter = 1;
 80147c2:	2301      	movs	r3, #1
 80147c4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80147c6:	4628      	mov	r0, r5
 80147c8:	b060      	add	sp, #384	; 0x180
 80147ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 80147ce:	f06f 0504 	mvn.w	r5, #4
 80147d2:	e7f8      	b.n	80147c6 <mbedtls_hmac_drbg_reseed+0x5c>
        return( MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED );
 80147d4:	f06f 0508 	mvn.w	r5, #8
 80147d8:	e7f5      	b.n	80147c6 <mbedtls_hmac_drbg_reseed+0x5c>

080147da <mbedtls_hmac_drbg_random_with_add>:
{
 80147da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147de:	4604      	mov	r4, r0
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80147e0:	6800      	ldr	r0, [r0, #0]
{
 80147e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80147e4:	4616      	mov	r6, r2
 80147e6:	4688      	mov	r8, r1
 80147e8:	461f      	mov	r7, r3
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80147ea:	f000 f9ab 	bl	8014b44 <mbedtls_md_get_size>
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80147ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    size_t md_len = mbedtls_md_get_size( ctx->md_ctx.md_info );
 80147f2:	4681      	mov	r9, r0
    if( out_len > MBEDTLS_HMAC_DRBG_MAX_REQUEST )
 80147f4:	d843      	bhi.n	801487e <mbedtls_hmac_drbg_random_with_add+0xa4>
    if( add_len > MBEDTLS_HMAC_DRBG_MAX_INPUT )
 80147f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80147fa:	d843      	bhi.n	8014884 <mbedtls_hmac_drbg_random_with_add+0xaa>
    if( ctx->f_entropy != NULL && /* For no-reseeding instances */
 80147fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80147fe:	b1db      	cbz	r3, 8014838 <mbedtls_hmac_drbg_random_with_add+0x5e>
 8014800:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8014802:	2b01      	cmp	r3, #1
 8014804:	d003      	beq.n	801480e <mbedtls_hmac_drbg_random_with_add+0x34>
        ( ctx->prediction_resistance == MBEDTLS_HMAC_DRBG_PR_ON ||
 8014806:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8014808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801480a:	429a      	cmp	r2, r3
 801480c:	dd14      	ble.n	8014838 <mbedtls_hmac_drbg_random_with_add+0x5e>
        if( ( ret = mbedtls_hmac_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 801480e:	462a      	mov	r2, r5
 8014810:	4639      	mov	r1, r7
 8014812:	4620      	mov	r0, r4
 8014814:	f7ff ffa9 	bl	801476a <mbedtls_hmac_drbg_reseed>
 8014818:	b960      	cbnz	r0, 8014834 <mbedtls_hmac_drbg_random_with_add+0x5a>
        add_len = 0; /* VII.4 */
 801481a:	4605      	mov	r5, r0
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801481c:	f104 0a0c 	add.w	sl, r4, #12
    while( left != 0 )
 8014820:	b9a6      	cbnz	r6, 801484c <mbedtls_hmac_drbg_random_with_add+0x72>
    mbedtls_hmac_drbg_update( ctx, additional, add_len );
 8014822:	4620      	mov	r0, r4
 8014824:	462a      	mov	r2, r5
 8014826:	4639      	mov	r1, r7
 8014828:	f7ff ff2e 	bl	8014688 <mbedtls_hmac_drbg_update>
    ctx->reseed_counter++;
 801482c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801482e:	3301      	adds	r3, #1
 8014830:	64e3      	str	r3, [r4, #76]	; 0x4c
    return( 0 );
 8014832:	4630      	mov	r0, r6
}
 8014834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( additional != NULL && add_len != 0 )
 8014838:	2f00      	cmp	r7, #0
 801483a:	d0ef      	beq.n	801481c <mbedtls_hmac_drbg_random_with_add+0x42>
 801483c:	2d00      	cmp	r5, #0
 801483e:	d0ed      	beq.n	801481c <mbedtls_hmac_drbg_random_with_add+0x42>
        mbedtls_hmac_drbg_update( ctx, additional, add_len );
 8014840:	462a      	mov	r2, r5
 8014842:	4639      	mov	r1, r7
 8014844:	4620      	mov	r0, r4
 8014846:	f7ff ff1f 	bl	8014688 <mbedtls_hmac_drbg_update>
 801484a:	e7e7      	b.n	801481c <mbedtls_hmac_drbg_random_with_add+0x42>
        size_t use_len = left > md_len ? md_len : left;
 801484c:	454e      	cmp	r6, r9
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 801484e:	4620      	mov	r0, r4
        size_t use_len = left > md_len ? md_len : left;
 8014850:	46b3      	mov	fp, r6
 8014852:	bf28      	it	cs
 8014854:	46cb      	movcs	fp, r9
        mbedtls_md_hmac_reset( &ctx->md_ctx );
 8014856:	f000 f951 	bl	8014afc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &ctx->md_ctx, ctx->V, md_len );
 801485a:	464a      	mov	r2, r9
 801485c:	4651      	mov	r1, sl
 801485e:	4620      	mov	r0, r4
 8014860:	f000 f910 	bl	8014a84 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &ctx->md_ctx, ctx->V );
 8014864:	4651      	mov	r1, sl
 8014866:	4620      	mov	r0, r4
 8014868:	f000 f91c 	bl	8014aa4 <mbedtls_md_hmac_finish>
        memcpy( out, ctx->V, use_len );
 801486c:	4640      	mov	r0, r8
 801486e:	465a      	mov	r2, fp
 8014870:	4651      	mov	r1, sl
 8014872:	f00d fdb9 	bl	80223e8 <memcpy>
        out += use_len;
 8014876:	44d8      	add	r8, fp
        left -= use_len;
 8014878:	eba6 060b 	sub.w	r6, r6, fp
 801487c:	e7d0      	b.n	8014820 <mbedtls_hmac_drbg_random_with_add+0x46>
        return( MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG );
 801487e:	f06f 0002 	mvn.w	r0, #2
 8014882:	e7d7      	b.n	8014834 <mbedtls_hmac_drbg_random_with_add+0x5a>
        return( MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG );
 8014884:	f06f 0004 	mvn.w	r0, #4
 8014888:	e7d4      	b.n	8014834 <mbedtls_hmac_drbg_random_with_add+0x5a>

0801488a <mbedtls_hmac_drbg_random>:
{
 801488a:	b507      	push	{r0, r1, r2, lr}
    ret = mbedtls_hmac_drbg_random_with_add( ctx, output, out_len, NULL, 0 );
 801488c:	2300      	movs	r3, #0
 801488e:	9300      	str	r3, [sp, #0]
 8014890:	f7ff ffa3 	bl	80147da <mbedtls_hmac_drbg_random_with_add>
}
 8014894:	b003      	add	sp, #12
 8014896:	f85d fb04 	ldr.w	pc, [sp], #4

0801489a <mbedtls_hmac_drbg_free>:
    if( ctx == NULL )
 801489a:	b108      	cbz	r0, 80148a0 <mbedtls_hmac_drbg_free+0x6>
 801489c:	f7ff bee3 	b.w	8014666 <mbedtls_hmac_drbg_free.part.0>
}
 80148a0:	4770      	bx	lr
	...

080148a4 <mbedtls_md_info_from_type>:
    return( NULL );
}

const mbedtls_md_info_t *mbedtls_md_info_from_type( mbedtls_md_type_t md_type )
{
    switch( md_type )
 80148a4:	3803      	subs	r0, #3
 80148a6:	b2c0      	uxtb	r0, r0
 80148a8:	2805      	cmp	r0, #5
 80148aa:	bf9d      	ittte	ls
 80148ac:	4b02      	ldrls	r3, [pc, #8]	; (80148b8 <mbedtls_md_info_from_type+0x14>)
 80148ae:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
 80148b2:	69c0      	ldrls	r0, [r0, #28]
{
 80148b4:	2000      	movhi	r0, #0
            return( &mbedtls_sha512_info );
#endif
        default:
            return( NULL );
    }
}
 80148b6:	4770      	bx	lr
 80148b8:	0802bc80 	.word	0x0802bc80

080148bc <mbedtls_md_init>:

void mbedtls_md_init( mbedtls_md_context_t *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md_context_t ) );
 80148bc:	2300      	movs	r3, #0
 80148be:	6003      	str	r3, [r0, #0]
 80148c0:	6043      	str	r3, [r0, #4]
 80148c2:	6083      	str	r3, [r0, #8]
}
 80148c4:	4770      	bx	lr
	...

080148c8 <mbedtls_md_free>:

void mbedtls_md_free( mbedtls_md_context_t *ctx )
{
 80148c8:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 80148ca:	4604      	mov	r4, r0
 80148cc:	b1b8      	cbz	r0, 80148fe <mbedtls_md_free+0x36>
 80148ce:	6803      	ldr	r3, [r0, #0]
 80148d0:	b1ab      	cbz	r3, 80148fe <mbedtls_md_free+0x36>
        return;

    if( ctx->md_ctx != NULL )
 80148d2:	6840      	ldr	r0, [r0, #4]
 80148d4:	b108      	cbz	r0, 80148da <mbedtls_md_free+0x12>
        ctx->md_info->ctx_free_func( ctx->md_ctx );
 80148d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d8:	4798      	blx	r3

    if( ctx->hmac_ctx != NULL )
 80148da:	68a3      	ldr	r3, [r4, #8]
 80148dc:	b153      	cbz	r3, 80148f4 <mbedtls_md_free+0x2c>
    {
        mbedtls_zeroize( ctx->hmac_ctx, 2 * ctx->md_info->block_size );
 80148de:	6822      	ldr	r2, [r4, #0]
 80148e0:	68d2      	ldr	r2, [r2, #12]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80148e2:	2100      	movs	r1, #0
 80148e4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d109      	bne.n	8014900 <mbedtls_md_free+0x38>
        mbedtls_free( ctx->hmac_ctx );
 80148ec:	4b07      	ldr	r3, [pc, #28]	; (801490c <mbedtls_md_free+0x44>)
 80148ee:	68a0      	ldr	r0, [r4, #8]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	4798      	blx	r3
 80148f4:	f104 030c 	add.w	r3, r4, #12
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80148f8:	2200      	movs	r2, #0
 80148fa:	429c      	cmp	r4, r3
 80148fc:	d103      	bne.n	8014906 <mbedtls_md_free+0x3e>
    }

    mbedtls_zeroize( ctx, sizeof( mbedtls_md_context_t ) );
}
 80148fe:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014900:	f803 1b01 	strb.w	r1, [r3], #1
 8014904:	e7f0      	b.n	80148e8 <mbedtls_md_free+0x20>
 8014906:	f804 2b01 	strb.w	r2, [r4], #1
 801490a:	e7f6      	b.n	80148fa <mbedtls_md_free+0x32>
 801490c:	200005a4 	.word	0x200005a4

08014910 <mbedtls_md_setup>:
    return mbedtls_md_setup( ctx, md_info, 1 );
}
#endif

int mbedtls_md_setup( mbedtls_md_context_t *ctx, const mbedtls_md_info_t *md_info, int hmac )
{
 8014910:	b570      	push	{r4, r5, r6, lr}
 8014912:	4604      	mov	r4, r0
 8014914:	4616      	mov	r6, r2
    if( md_info == NULL || ctx == NULL )
 8014916:	460d      	mov	r5, r1
 8014918:	b1a1      	cbz	r1, 8014944 <mbedtls_md_setup+0x34>
 801491a:	b198      	cbz	r0, 8014944 <mbedtls_md_setup+0x34>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( ( ctx->md_ctx = md_info->ctx_alloc_func() ) == NULL )
 801491c:	6a0b      	ldr	r3, [r1, #32]
 801491e:	4798      	blx	r3
 8014920:	6060      	str	r0, [r4, #4]
 8014922:	b150      	cbz	r0, 801493a <mbedtls_md_setup+0x2a>
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );

    if( hmac != 0 )
 8014924:	b15e      	cbz	r6, 801493e <mbedtls_md_setup+0x2e>
    {
        ctx->hmac_ctx = mbedtls_calloc( 2, md_info->block_size );
 8014926:	4b08      	ldr	r3, [pc, #32]	; (8014948 <mbedtls_md_setup+0x38>)
 8014928:	68e9      	ldr	r1, [r5, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2002      	movs	r0, #2
 801492e:	4798      	blx	r3
 8014930:	60a0      	str	r0, [r4, #8]
        if( ctx->hmac_ctx == NULL )
 8014932:	b920      	cbnz	r0, 801493e <mbedtls_md_setup+0x2e>
        {
            md_info->ctx_free_func( ctx->md_ctx );
 8014934:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014936:	6860      	ldr	r0, [r4, #4]
 8014938:	4798      	blx	r3
        return( MBEDTLS_ERR_MD_ALLOC_FAILED );
 801493a:	4804      	ldr	r0, [pc, #16]	; (801494c <mbedtls_md_setup+0x3c>)
 801493c:	e001      	b.n	8014942 <mbedtls_md_setup+0x32>
            return( MBEDTLS_ERR_MD_ALLOC_FAILED );
        }
    }

    ctx->md_info = md_info;
 801493e:	6025      	str	r5, [r4, #0]

    return( 0 );
 8014940:	2000      	movs	r0, #0
}
 8014942:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014944:	4802      	ldr	r0, [pc, #8]	; (8014950 <mbedtls_md_setup+0x40>)
 8014946:	e7fc      	b.n	8014942 <mbedtls_md_setup+0x32>
 8014948:	200005a0 	.word	0x200005a0
 801494c:	ffffae80 	.word	0xffffae80
 8014950:	ffffaf00 	.word	0xffffaf00

08014954 <mbedtls_md_starts>:

int mbedtls_md_starts( mbedtls_md_context_t *ctx )
{
 8014954:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014956:	b130      	cbz	r0, 8014966 <mbedtls_md_starts+0x12>
 8014958:	6803      	ldr	r3, [r0, #0]
 801495a:	b123      	cbz	r3, 8014966 <mbedtls_md_starts+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->starts_func( ctx->md_ctx );
 801495c:	6840      	ldr	r0, [r0, #4]
 801495e:	691b      	ldr	r3, [r3, #16]
 8014960:	4798      	blx	r3

    return( 0 );
 8014962:	2000      	movs	r0, #0
}
 8014964:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014966:	4801      	ldr	r0, [pc, #4]	; (801496c <mbedtls_md_starts+0x18>)
 8014968:	e7fc      	b.n	8014964 <mbedtls_md_starts+0x10>
 801496a:	bf00      	nop
 801496c:	ffffaf00 	.word	0xffffaf00

08014970 <mbedtls_md_update>:

int mbedtls_md_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014970:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014972:	b130      	cbz	r0, 8014982 <mbedtls_md_update+0x12>
 8014974:	6803      	ldr	r3, [r0, #0]
 8014976:	b123      	cbz	r3, 8014982 <mbedtls_md_update+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014978:	6840      	ldr	r0, [r0, #4]
 801497a:	695b      	ldr	r3, [r3, #20]
 801497c:	4798      	blx	r3

    return( 0 );
 801497e:	2000      	movs	r0, #0
}
 8014980:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014982:	4801      	ldr	r0, [pc, #4]	; (8014988 <mbedtls_md_update+0x18>)
 8014984:	e7fc      	b.n	8014980 <mbedtls_md_update+0x10>
 8014986:	bf00      	nop
 8014988:	ffffaf00 	.word	0xffffaf00

0801498c <mbedtls_md_finish>:

int mbedtls_md_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 801498c:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 801498e:	b130      	cbz	r0, 801499e <mbedtls_md_finish+0x12>
 8014990:	6803      	ldr	r3, [r0, #0]
 8014992:	b123      	cbz	r3, 801499e <mbedtls_md_finish+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->finish_func( ctx->md_ctx, output );
 8014994:	6840      	ldr	r0, [r0, #4]
 8014996:	699b      	ldr	r3, [r3, #24]
 8014998:	4798      	blx	r3

    return( 0 );
 801499a:	2000      	movs	r0, #0
}
 801499c:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 801499e:	4801      	ldr	r0, [pc, #4]	; (80149a4 <mbedtls_md_finish+0x18>)
 80149a0:	e7fc      	b.n	801499c <mbedtls_md_finish+0x10>
 80149a2:	bf00      	nop
 80149a4:	ffffaf00 	.word	0xffffaf00

080149a8 <mbedtls_md>:

int mbedtls_md( const mbedtls_md_info_t *md_info, const unsigned char *input, size_t ilen,
            unsigned char *output )
{
 80149a8:	b510      	push	{r4, lr}
 80149aa:	4604      	mov	r4, r0
 80149ac:	4608      	mov	r0, r1
 80149ae:	4611      	mov	r1, r2
 80149b0:	461a      	mov	r2, r3
    if( md_info == NULL )
 80149b2:	b11c      	cbz	r4, 80149bc <mbedtls_md+0x14>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    md_info->digest_func( input, ilen, output );
 80149b4:	69e3      	ldr	r3, [r4, #28]
 80149b6:	4798      	blx	r3

    return( 0 );
 80149b8:	2000      	movs	r0, #0
}
 80149ba:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 80149bc:	4800      	ldr	r0, [pc, #0]	; (80149c0 <mbedtls_md+0x18>)
 80149be:	e7fc      	b.n	80149ba <mbedtls_md+0x12>
 80149c0:	ffffaf00 	.word	0xffffaf00

080149c4 <mbedtls_md_hmac_starts>:
    return( ret );
}
#endif /* MBEDTLS_FS_IO */

int mbedtls_md_hmac_starts( mbedtls_md_context_t *ctx, const unsigned char *key, size_t keylen )
{
 80149c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c8:	460d      	mov	r5, r1
 80149ca:	b090      	sub	sp, #64	; 0x40
 80149cc:	4616      	mov	r6, r2
    unsigned char sum[MBEDTLS_MD_MAX_SIZE];
    unsigned char *ipad, *opad;
    size_t i;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 80149ce:	4604      	mov	r4, r0
 80149d0:	2800      	cmp	r0, #0
 80149d2:	d052      	beq.n	8014a7a <mbedtls_md_hmac_starts+0xb6>
 80149d4:	6803      	ldr	r3, [r0, #0]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d04f      	beq.n	8014a7a <mbedtls_md_hmac_starts+0xb6>
 80149da:	6882      	ldr	r2, [r0, #8]
 80149dc:	2a00      	cmp	r2, #0
 80149de:	d04c      	beq.n	8014a7a <mbedtls_md_hmac_starts+0xb6>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    if( keylen > (size_t) ctx->md_info->block_size )
 80149e0:	68da      	ldr	r2, [r3, #12]
 80149e2:	42b2      	cmp	r2, r6
 80149e4:	d210      	bcs.n	8014a08 <mbedtls_md_hmac_starts+0x44>
    {
        ctx->md_info->starts_func( ctx->md_ctx );
 80149e6:	691b      	ldr	r3, [r3, #16]
 80149e8:	6840      	ldr	r0, [r0, #4]
 80149ea:	4798      	blx	r3
        ctx->md_info->update_func( ctx->md_ctx, key, keylen );
 80149ec:	6823      	ldr	r3, [r4, #0]
 80149ee:	6860      	ldr	r0, [r4, #4]
 80149f0:	695b      	ldr	r3, [r3, #20]
 80149f2:	4632      	mov	r2, r6
 80149f4:	4629      	mov	r1, r5
 80149f6:	4798      	blx	r3
        ctx->md_info->finish_func( ctx->md_ctx, sum );
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	6860      	ldr	r0, [r4, #4]
 80149fc:	699b      	ldr	r3, [r3, #24]
 80149fe:	4669      	mov	r1, sp
 8014a00:	4798      	blx	r3

        keylen = ctx->md_info->size;
 8014a02:	6823      	ldr	r3, [r4, #0]
 8014a04:	689e      	ldr	r6, [r3, #8]
        key = sum;
 8014a06:	466d      	mov	r5, sp
    }

    ipad = (unsigned char *) ctx->hmac_ctx;
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014a08:	6823      	ldr	r3, [r4, #0]
    ipad = (unsigned char *) ctx->hmac_ctx;
 8014a0a:	f8d4 8008 	ldr.w	r8, [r4, #8]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014a0e:	68da      	ldr	r2, [r3, #12]

    memset( ipad, 0x36, ctx->md_info->block_size );
 8014a10:	2136      	movs	r1, #54	; 0x36
 8014a12:	4640      	mov	r0, r8
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014a14:	eb08 0702 	add.w	r7, r8, r2
    memset( ipad, 0x36, ctx->md_info->block_size );
 8014a18:	f00d fd0e 	bl	8022438 <memset>
    memset( opad, 0x5C, ctx->md_info->block_size );
 8014a1c:	6823      	ldr	r3, [r4, #0]
 8014a1e:	215c      	movs	r1, #92	; 0x5c
 8014a20:	68da      	ldr	r2, [r3, #12]
 8014a22:	4638      	mov	r0, r7
 8014a24:	f00d fd08 	bl	8022438 <memset>

    for( i = 0; i < keylen; i++ )
 8014a28:	3d01      	subs	r5, #1
 8014a2a:	4643      	mov	r3, r8
 8014a2c:	1e78      	subs	r0, r7, #1
 8014a2e:	4446      	add	r6, r8
 8014a30:	42b3      	cmp	r3, r6
 8014a32:	d114      	bne.n	8014a5e <mbedtls_md_hmac_starts+0x9a>
 8014a34:	2300      	movs	r3, #0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014a36:	4619      	mov	r1, r3
 8014a38:	eb0d 0203 	add.w	r2, sp, r3
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	2b41      	cmp	r3, #65	; 0x41
 8014a40:	d119      	bne.n	8014a76 <mbedtls_md_hmac_starts+0xb2>
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
    }

    mbedtls_zeroize( sum, sizeof( sum ) );

    ctx->md_info->starts_func( ctx->md_ctx );
 8014a42:	6823      	ldr	r3, [r4, #0]
 8014a44:	6860      	ldr	r0, [r4, #4]
 8014a46:	691b      	ldr	r3, [r3, #16]
 8014a48:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 8014a4a:	6823      	ldr	r3, [r4, #0]
 8014a4c:	6860      	ldr	r0, [r4, #4]
 8014a4e:	695d      	ldr	r5, [r3, #20]
 8014a50:	68da      	ldr	r2, [r3, #12]
 8014a52:	4641      	mov	r1, r8
 8014a54:	47a8      	blx	r5

    return( 0 );
 8014a56:	2000      	movs	r0, #0
}
 8014a58:	b010      	add	sp, #64	; 0x40
 8014a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ipad[i] = (unsigned char)( ipad[i] ^ key[i] );
 8014a5e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8014a62:	781a      	ldrb	r2, [r3, #0]
 8014a64:	404a      	eors	r2, r1
 8014a66:	f803 2b01 	strb.w	r2, [r3], #1
        opad[i] = (unsigned char)( opad[i] ^ key[i] );
 8014a6a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8014a6e:	7829      	ldrb	r1, [r5, #0]
 8014a70:	404a      	eors	r2, r1
 8014a72:	7002      	strb	r2, [r0, #0]
    for( i = 0; i < keylen; i++ )
 8014a74:	e7dc      	b.n	8014a30 <mbedtls_md_hmac_starts+0x6c>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014a76:	7011      	strb	r1, [r2, #0]
 8014a78:	e7de      	b.n	8014a38 <mbedtls_md_hmac_starts+0x74>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014a7a:	4801      	ldr	r0, [pc, #4]	; (8014a80 <mbedtls_md_hmac_starts+0xbc>)
 8014a7c:	e7ec      	b.n	8014a58 <mbedtls_md_hmac_starts+0x94>
 8014a7e:	bf00      	nop
 8014a80:	ffffaf00 	.word	0xffffaf00

08014a84 <mbedtls_md_hmac_update>:

int mbedtls_md_hmac_update( mbedtls_md_context_t *ctx, const unsigned char *input, size_t ilen )
{
 8014a84:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014a86:	b140      	cbz	r0, 8014a9a <mbedtls_md_hmac_update+0x16>
 8014a88:	6803      	ldr	r3, [r0, #0]
 8014a8a:	b133      	cbz	r3, 8014a9a <mbedtls_md_hmac_update+0x16>
 8014a8c:	6884      	ldr	r4, [r0, #8]
 8014a8e:	b124      	cbz	r4, 8014a9a <mbedtls_md_hmac_update+0x16>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->update_func( ctx->md_ctx, input, ilen );
 8014a90:	6840      	ldr	r0, [r0, #4]
 8014a92:	695b      	ldr	r3, [r3, #20]
 8014a94:	4798      	blx	r3

    return( 0 );
 8014a96:	2000      	movs	r0, #0
}
 8014a98:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014a9a:	4801      	ldr	r0, [pc, #4]	; (8014aa0 <mbedtls_md_hmac_update+0x1c>)
 8014a9c:	e7fc      	b.n	8014a98 <mbedtls_md_hmac_update+0x14>
 8014a9e:	bf00      	nop
 8014aa0:	ffffaf00 	.word	0xffffaf00

08014aa4 <mbedtls_md_hmac_finish>:

int mbedtls_md_hmac_finish( mbedtls_md_context_t *ctx, unsigned char *output )
{
 8014aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aa6:	460e      	mov	r6, r1
 8014aa8:	b091      	sub	sp, #68	; 0x44
    unsigned char tmp[MBEDTLS_MD_MAX_SIZE];
    unsigned char *opad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014aaa:	4604      	mov	r4, r0
 8014aac:	b308      	cbz	r0, 8014af2 <mbedtls_md_hmac_finish+0x4e>
 8014aae:	6802      	ldr	r2, [r0, #0]
 8014ab0:	b1fa      	cbz	r2, 8014af2 <mbedtls_md_hmac_finish+0x4e>
 8014ab2:	6883      	ldr	r3, [r0, #8]
 8014ab4:	b1eb      	cbz	r3, 8014af2 <mbedtls_md_hmac_finish+0x4e>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014ab6:	68d5      	ldr	r5, [r2, #12]

    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014ab8:	6840      	ldr	r0, [r0, #4]
    opad = (unsigned char *) ctx->hmac_ctx + ctx->md_info->block_size;
 8014aba:	441d      	add	r5, r3
    ctx->md_info->finish_func( ctx->md_ctx, tmp );
 8014abc:	4669      	mov	r1, sp
 8014abe:	6993      	ldr	r3, [r2, #24]
 8014ac0:	4798      	blx	r3
    ctx->md_info->starts_func( ctx->md_ctx );
 8014ac2:	6823      	ldr	r3, [r4, #0]
 8014ac4:	6860      	ldr	r0, [r4, #4]
 8014ac6:	691b      	ldr	r3, [r3, #16]
 8014ac8:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, opad, ctx->md_info->block_size );
 8014aca:	6823      	ldr	r3, [r4, #0]
 8014acc:	6860      	ldr	r0, [r4, #4]
 8014ace:	68da      	ldr	r2, [r3, #12]
 8014ad0:	695f      	ldr	r7, [r3, #20]
 8014ad2:	4629      	mov	r1, r5
 8014ad4:	47b8      	blx	r7
    ctx->md_info->update_func( ctx->md_ctx, tmp, ctx->md_info->size );
 8014ad6:	6823      	ldr	r3, [r4, #0]
 8014ad8:	6860      	ldr	r0, [r4, #4]
 8014ada:	689a      	ldr	r2, [r3, #8]
 8014adc:	695d      	ldr	r5, [r3, #20]
 8014ade:	4669      	mov	r1, sp
 8014ae0:	47a8      	blx	r5
    ctx->md_info->finish_func( ctx->md_ctx, output );
 8014ae2:	6823      	ldr	r3, [r4, #0]
 8014ae4:	6860      	ldr	r0, [r4, #4]
 8014ae6:	699b      	ldr	r3, [r3, #24]
 8014ae8:	4631      	mov	r1, r6
 8014aea:	4798      	blx	r3

    return( 0 );
 8014aec:	2000      	movs	r0, #0
}
 8014aee:	b011      	add	sp, #68	; 0x44
 8014af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014af2:	4801      	ldr	r0, [pc, #4]	; (8014af8 <mbedtls_md_hmac_finish+0x54>)
 8014af4:	e7fb      	b.n	8014aee <mbedtls_md_hmac_finish+0x4a>
 8014af6:	bf00      	nop
 8014af8:	ffffaf00 	.word	0xffffaf00

08014afc <mbedtls_md_hmac_reset>:

int mbedtls_md_hmac_reset( mbedtls_md_context_t *ctx )
{
 8014afc:	b570      	push	{r4, r5, r6, lr}
    unsigned char *ipad;

    if( ctx == NULL || ctx->md_info == NULL || ctx->hmac_ctx == NULL )
 8014afe:	4604      	mov	r4, r0
 8014b00:	b170      	cbz	r0, 8014b20 <mbedtls_md_hmac_reset+0x24>
 8014b02:	6803      	ldr	r3, [r0, #0]
 8014b04:	b163      	cbz	r3, 8014b20 <mbedtls_md_hmac_reset+0x24>
 8014b06:	6885      	ldr	r5, [r0, #8]
 8014b08:	b155      	cbz	r5, 8014b20 <mbedtls_md_hmac_reset+0x24>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ipad = (unsigned char *) ctx->hmac_ctx;

    ctx->md_info->starts_func( ctx->md_ctx );
 8014b0a:	691b      	ldr	r3, [r3, #16]
 8014b0c:	6840      	ldr	r0, [r0, #4]
 8014b0e:	4798      	blx	r3
    ctx->md_info->update_func( ctx->md_ctx, ipad, ctx->md_info->block_size );
 8014b10:	6823      	ldr	r3, [r4, #0]
 8014b12:	6860      	ldr	r0, [r4, #4]
 8014b14:	695e      	ldr	r6, [r3, #20]
 8014b16:	68da      	ldr	r2, [r3, #12]
 8014b18:	4629      	mov	r1, r5
 8014b1a:	47b0      	blx	r6

    return( 0 );
 8014b1c:	2000      	movs	r0, #0
}
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014b20:	4800      	ldr	r0, [pc, #0]	; (8014b24 <mbedtls_md_hmac_reset+0x28>)
 8014b22:	e7fc      	b.n	8014b1e <mbedtls_md_hmac_reset+0x22>
 8014b24:	ffffaf00 	.word	0xffffaf00

08014b28 <mbedtls_md_process>:

    return( 0 );
}

int mbedtls_md_process( mbedtls_md_context_t *ctx, const unsigned char *data )
{
 8014b28:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->md_info == NULL )
 8014b2a:	b130      	cbz	r0, 8014b3a <mbedtls_md_process+0x12>
 8014b2c:	6803      	ldr	r3, [r0, #0]
 8014b2e:	b123      	cbz	r3, 8014b3a <mbedtls_md_process+0x12>
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );

    ctx->md_info->process_func( ctx->md_ctx, data );
 8014b30:	6840      	ldr	r0, [r0, #4]
 8014b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b34:	4798      	blx	r3

    return( 0 );
 8014b36:	2000      	movs	r0, #0
}
 8014b38:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_MD_BAD_INPUT_DATA );
 8014b3a:	4801      	ldr	r0, [pc, #4]	; (8014b40 <mbedtls_md_process+0x18>)
 8014b3c:	e7fc      	b.n	8014b38 <mbedtls_md_process+0x10>
 8014b3e:	bf00      	nop
 8014b40:	ffffaf00 	.word	0xffffaf00

08014b44 <mbedtls_md_get_size>:

unsigned char mbedtls_md_get_size( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8014b44:	b100      	cbz	r0, 8014b48 <mbedtls_md_get_size+0x4>
        return( 0 );

    return md_info->size;
 8014b46:	7a00      	ldrb	r0, [r0, #8]
}
 8014b48:	4770      	bx	lr

08014b4a <mbedtls_md_get_name>:
    return md_info->type;
}

const char *mbedtls_md_get_name( const mbedtls_md_info_t *md_info )
{
    if( md_info == NULL )
 8014b4a:	b100      	cbz	r0, 8014b4e <mbedtls_md_get_name+0x4>
        return( NULL );

    return md_info->name;
 8014b4c:	6840      	ldr	r0, [r0, #4]
}
 8014b4e:	4770      	bx	lr

08014b50 <mbedtls_md5_init>:
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 8014b50:	2258      	movs	r2, #88	; 0x58
 8014b52:	2100      	movs	r1, #0
 8014b54:	f00d bc70 	b.w	8022438 <memset>

08014b58 <mbedtls_md5_free>:
}

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
    if( ctx == NULL )
 8014b58:	b120      	cbz	r0, 8014b64 <mbedtls_md5_free+0xc>
 8014b5a:	f100 0358 	add.w	r3, r0, #88	; 0x58
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014b5e:	2200      	movs	r2, #0
 8014b60:	4298      	cmp	r0, r3
 8014b62:	d100      	bne.n	8014b66 <mbedtls_md5_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_md5_context ) );
}
 8014b64:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8014b66:	f800 2b01 	strb.w	r2, [r0], #1
 8014b6a:	e7f9      	b.n	8014b60 <mbedtls_md5_free+0x8>

08014b6c <mbedtls_md5_clone>:

void mbedtls_md5_clone( mbedtls_md5_context *dst,
                        const mbedtls_md5_context *src )
{
 8014b6c:	b508      	push	{r3, lr}
    *dst = *src;
 8014b6e:	2258      	movs	r2, #88	; 0x58
 8014b70:	f00d fc3a 	bl	80223e8 <memcpy>
}
 8014b74:	bd08      	pop	{r3, pc}
	...

08014b78 <mbedtls_md5_starts>:
/*
 * MD5 context setup
 */
void mbedtls_md5_starts( mbedtls_md5_context *ctx )
{
    ctx->total[0] = 0;
 8014b78:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 8014b7a:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 8014b7e:	4b08      	ldr	r3, [pc, #32]	; (8014ba0 <mbedtls_md5_starts+0x28>)
 8014b80:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 8014b82:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 8014b86:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 8014b88:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 8014b8c:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 8014b90:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 8014b94:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 8014b96:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 8014b9a:	6143      	str	r3, [r0, #20]
}
 8014b9c:	4770      	bx	lr
 8014b9e:	bf00      	nop
 8014ba0:	67452301 	.word	0x67452301

08014ba4 <mbedtls_md5_process>:

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
void mbedtls_md5_process( mbedtls_md5_context *ctx, const unsigned char data[64] )
{
 8014ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba8:	b08d      	sub	sp, #52	; 0x34
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
    GET_UINT32_LE( X[ 1], data,  4 );
 8014baa:	684b      	ldr	r3, [r1, #4]
 8014bac:	9301      	str	r3, [sp, #4]
    GET_UINT32_LE( X[ 2], data,  8 );
 8014bae:	688b      	ldr	r3, [r1, #8]
 8014bb0:	9302      	str	r3, [sp, #8]
    GET_UINT32_LE( X[ 3], data, 12 );
 8014bb2:	68cb      	ldr	r3, [r1, #12]
 8014bb4:	9303      	str	r3, [sp, #12]
    GET_UINT32_LE( X[ 4], data, 16 );
 8014bb6:	690b      	ldr	r3, [r1, #16]
 8014bb8:	9304      	str	r3, [sp, #16]
    GET_UINT32_LE( X[ 5], data, 20 );
    GET_UINT32_LE( X[ 6], data, 24 );
 8014bba:	698b      	ldr	r3, [r1, #24]
 8014bbc:	9305      	str	r3, [sp, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
    GET_UINT32_LE( X[ 8], data, 32 );
 8014bbe:	6a0b      	ldr	r3, [r1, #32]
 8014bc0:	9306      	str	r3, [sp, #24]
    GET_UINT32_LE( X[ 9], data, 36 );
 8014bc2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8014bc4:	9307      	str	r3, [sp, #28]
    GET_UINT32_LE( X[10], data, 40 );
 8014bc6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014bc8:	9308      	str	r3, [sp, #32]
    GET_UINT32_LE( X[11], data, 44 );
 8014bca:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014bcc:	9309      	str	r3, [sp, #36]	; 0x24
    GET_UINT32_LE( X[12], data, 48 );
    GET_UINT32_LE( X[13], data, 52 );
 8014bce:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014bd0:	930a      	str	r3, [sp, #40]	; 0x28
    GET_UINT32_LE( X[14], data, 56 );
    GET_UINT32_LE( X[15], data, 60 );
 8014bd2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8014bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bd6:	4adb      	ldr	r2, [pc, #876]	; (8014f44 <mbedtls_md5_process+0x3a0>)
 8014bd8:	6883      	ldr	r3, [r0, #8]
    GET_UINT32_LE( X[ 0], data,  0 );
 8014bda:	f8d1 a000 	ldr.w	sl, [r1]
    GET_UINT32_LE( X[ 5], data, 20 );
 8014bde:	f8d1 e014 	ldr.w	lr, [r1, #20]
    GET_UINT32_LE( X[ 7], data, 28 );
 8014be2:	f8d1 901c 	ldr.w	r9, [r1, #28]
    GET_UINT32_LE( X[12], data, 48 );
 8014be6:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
    GET_UINT32_LE( X[14], data, 56 );
 8014bea:	f8d1 8038 	ldr.w	r8, [r1, #56]	; 0x38
{                                                       \
    a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
}

    A = ctx->state[0];
    B = ctx->state[1];
 8014bee:	68c6      	ldr	r6, [r0, #12]
    C = ctx->state[2];
    D = ctx->state[3];

#define F(x,y,z) (z ^ (x & (y ^ z)))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8014bf0:	4dd5      	ldr	r5, [pc, #852]	; (8014f48 <mbedtls_md5_process+0x3a4>)
 8014bf2:	f8df b3e8 	ldr.w	fp, [pc, #1000]	; 8014fdc <mbedtls_md5_process+0x438>
 8014bf6:	441a      	add	r2, r3
 8014bf8:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
 8014bfc:	404b      	eors	r3, r1
 8014bfe:	4033      	ands	r3, r6
 8014c00:	4452      	add	r2, sl
 8014c02:	404b      	eors	r3, r1
 8014c04:	4413      	add	r3, r2
 8014c06:	4ad1      	ldr	r2, [pc, #836]	; (8014f4c <mbedtls_md5_process+0x3a8>)
 8014c08:	440a      	add	r2, r1
 8014c0a:	9901      	ldr	r1, [sp, #4]
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8014c0c:	6904      	ldr	r4, [r0, #16]
 8014c0e:	9f04      	ldr	r7, [sp, #16]
 8014c10:	440a      	add	r2, r1
 8014c12:	6901      	ldr	r1, [r0, #16]
    P( A, B, C, D,  0,  7, 0xD76AA478 );
 8014c14:	eb06 6373 	add.w	r3, r6, r3, ror #25
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 8014c18:	4071      	eors	r1, r6
 8014c1a:	4019      	ands	r1, r3
 8014c1c:	4061      	eors	r1, r4
 8014c1e:	4411      	add	r1, r2
 8014c20:	4acb      	ldr	r2, [pc, #812]	; (8014f50 <mbedtls_md5_process+0x3ac>)
 8014c22:	4422      	add	r2, r4
 8014c24:	9c02      	ldr	r4, [sp, #8]
 8014c26:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  2, 17, 0x242070DB );
 8014c2a:	4422      	add	r2, r4
 8014c2c:	ea86 0403 	eor.w	r4, r6, r3
 8014c30:	400c      	ands	r4, r1
 8014c32:	4074      	eors	r4, r6
 8014c34:	4414      	add	r4, r2
 8014c36:	9a03      	ldr	r2, [sp, #12]
 8014c38:	4435      	add	r5, r6
 8014c3a:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 8014c3e:	4415      	add	r5, r2
 8014c40:	ea83 0201 	eor.w	r2, r3, r1
 8014c44:	4022      	ands	r2, r4
 8014c46:	405a      	eors	r2, r3
 8014c48:	442a      	add	r2, r5
 8014c4a:	4dc2      	ldr	r5, [pc, #776]	; (8014f54 <mbedtls_md5_process+0x3b0>)
 8014c4c:	443d      	add	r5, r7
 8014c4e:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 8014c52:	441d      	add	r5, r3
 8014c54:	ea81 0304 	eor.w	r3, r1, r4
 8014c58:	4013      	ands	r3, r2
 8014c5a:	404b      	eors	r3, r1
 8014c5c:	442b      	add	r3, r5
 8014c5e:	4dbe      	ldr	r5, [pc, #760]	; (8014f58 <mbedtls_md5_process+0x3b4>)
 8014c60:	9f05      	ldr	r7, [sp, #20]
 8014c62:	4475      	add	r5, lr
 8014c64:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  5, 12, 0x4787C62A );
 8014c68:	440d      	add	r5, r1
 8014c6a:	ea84 0102 	eor.w	r1, r4, r2
 8014c6e:	4019      	ands	r1, r3
 8014c70:	4061      	eors	r1, r4
 8014c72:	4429      	add	r1, r5
 8014c74:	4db9      	ldr	r5, [pc, #740]	; (8014f5c <mbedtls_md5_process+0x3b8>)
 8014c76:	443d      	add	r5, r7
 8014c78:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B,  6, 17, 0xA8304613 );
 8014c7c:	4425      	add	r5, r4
 8014c7e:	ea82 0403 	eor.w	r4, r2, r3
 8014c82:	400c      	ands	r4, r1
 8014c84:	4054      	eors	r4, r2
 8014c86:	442c      	add	r4, r5
 8014c88:	4db5      	ldr	r5, [pc, #724]	; (8014f60 <mbedtls_md5_process+0x3bc>)
 8014c8a:	9f06      	ldr	r7, [sp, #24]
 8014c8c:	444d      	add	r5, r9
 8014c8e:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A,  7, 22, 0xFD469501 );
 8014c92:	4415      	add	r5, r2
 8014c94:	ea83 0201 	eor.w	r2, r3, r1
 8014c98:	4022      	ands	r2, r4
 8014c9a:	405a      	eors	r2, r3
 8014c9c:	442a      	add	r2, r5
 8014c9e:	4db1      	ldr	r5, [pc, #708]	; (8014f64 <mbedtls_md5_process+0x3c0>)
 8014ca0:	443d      	add	r5, r7
 8014ca2:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D,  8,  7, 0x698098D8 );
 8014ca6:	441d      	add	r5, r3
 8014ca8:	ea81 0304 	eor.w	r3, r1, r4
 8014cac:	4013      	ands	r3, r2
 8014cae:	404b      	eors	r3, r1
 8014cb0:	9f07      	ldr	r7, [sp, #28]
 8014cb2:	442b      	add	r3, r5
 8014cb4:	4dac      	ldr	r5, [pc, #688]	; (8014f68 <mbedtls_md5_process+0x3c4>)
 8014cb6:	443d      	add	r5, r7
 8014cb8:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 8014cbc:	440d      	add	r5, r1
 8014cbe:	ea84 0102 	eor.w	r1, r4, r2
 8014cc2:	4019      	ands	r1, r3
 8014cc4:	4061      	eors	r1, r4
 8014cc6:	4429      	add	r1, r5
 8014cc8:	9d08      	ldr	r5, [sp, #32]
 8014cca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014ccc:	f5a5 4524 	sub.w	r5, r5, #41984	; 0xa400
 8014cd0:	3d4f      	subs	r5, #79	; 0x4f
 8014cd2:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 8014cd6:	4425      	add	r5, r4
 8014cd8:	ea82 0403 	eor.w	r4, r2, r3
 8014cdc:	400c      	ands	r4, r1
 8014cde:	4054      	eors	r4, r2
 8014ce0:	442c      	add	r4, r5
 8014ce2:	4da2      	ldr	r5, [pc, #648]	; (8014f6c <mbedtls_md5_process+0x3c8>)
 8014ce4:	443d      	add	r5, r7
 8014ce6:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 8014cea:	4415      	add	r5, r2
 8014cec:	ea83 0201 	eor.w	r2, r3, r1
 8014cf0:	4022      	ands	r2, r4
 8014cf2:	405a      	eors	r2, r3
 8014cf4:	442a      	add	r2, r5
 8014cf6:	4d9e      	ldr	r5, [pc, #632]	; (8014f70 <mbedtls_md5_process+0x3cc>)
 8014cf8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014cfa:	4465      	add	r5, ip
 8014cfc:	eb04 22b2 	add.w	r2, r4, r2, ror #10
    P( A, B, C, D, 12,  7, 0x6B901122 );
 8014d00:	441d      	add	r5, r3
 8014d02:	ea81 0304 	eor.w	r3, r1, r4
 8014d06:	4013      	ands	r3, r2
 8014d08:	404b      	eors	r3, r1
 8014d0a:	442b      	add	r3, r5
 8014d0c:	4d99      	ldr	r5, [pc, #612]	; (8014f74 <mbedtls_md5_process+0x3d0>)
 8014d0e:	443d      	add	r5, r7
 8014d10:	eb02 6373 	add.w	r3, r2, r3, ror #25
    P( D, A, B, C, 13, 12, 0xFD987193 );
 8014d14:	440d      	add	r5, r1
 8014d16:	ea84 0102 	eor.w	r1, r4, r2
 8014d1a:	4019      	ands	r1, r3
 8014d1c:	4061      	eors	r1, r4
 8014d1e:	4429      	add	r1, r5
 8014d20:	4d95      	ldr	r5, [pc, #596]	; (8014f78 <mbedtls_md5_process+0x3d4>)
 8014d22:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014d24:	4445      	add	r5, r8
 8014d26:	eb03 5131 	add.w	r1, r3, r1, ror #20
    P( C, D, A, B, 14, 17, 0xA679438E );
 8014d2a:	4425      	add	r5, r4
 8014d2c:	ea82 0403 	eor.w	r4, r2, r3
 8014d30:	400c      	ands	r4, r1
 8014d32:	4054      	eors	r4, r2
 8014d34:	442c      	add	r4, r5
 8014d36:	4d91      	ldr	r5, [pc, #580]	; (8014f7c <mbedtls_md5_process+0x3d8>)
 8014d38:	443d      	add	r5, r7
 8014d3a:	eb01 34f4 	add.w	r4, r1, r4, ror #15
    P( B, C, D, A, 15, 22, 0x49B40821 );
 8014d3e:	4415      	add	r5, r2
 8014d40:	ea83 0201 	eor.w	r2, r3, r1
 8014d44:	4022      	ands	r2, r4
 8014d46:	405a      	eors	r2, r3
 8014d48:	9f01      	ldr	r7, [sp, #4]
 8014d4a:	442a      	add	r2, r5
 8014d4c:	4d8c      	ldr	r5, [pc, #560]	; (8014f80 <mbedtls_md5_process+0x3dc>)
 8014d4e:	eb04 22b2 	add.w	r2, r4, r2, ror #10

#undef F

#define F(x,y,z) (y ^ (z & (x ^ y)))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 8014d52:	443d      	add	r5, r7
 8014d54:	441d      	add	r5, r3
 8014d56:	ea84 0302 	eor.w	r3, r4, r2
 8014d5a:	400b      	ands	r3, r1
 8014d5c:	4063      	eors	r3, r4
 8014d5e:	9f05      	ldr	r7, [sp, #20]
 8014d60:	442b      	add	r3, r5
 8014d62:	4d88      	ldr	r5, [pc, #544]	; (8014f84 <mbedtls_md5_process+0x3e0>)
 8014d64:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  6,  9, 0xC040B340 );
 8014d68:	443d      	add	r5, r7
 8014d6a:	440d      	add	r5, r1
 8014d6c:	ea82 0103 	eor.w	r1, r2, r3
 8014d70:	4021      	ands	r1, r4
 8014d72:	4051      	eors	r1, r2
 8014d74:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014d76:	4429      	add	r1, r5
 8014d78:	4d83      	ldr	r5, [pc, #524]	; (8014f88 <mbedtls_md5_process+0x3e4>)
 8014d7a:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 8014d7e:	443d      	add	r5, r7
 8014d80:	4425      	add	r5, r4
 8014d82:	ea83 0401 	eor.w	r4, r3, r1
 8014d86:	4014      	ands	r4, r2
 8014d88:	405c      	eors	r4, r3
 8014d8a:	442c      	add	r4, r5
 8014d8c:	4d7f      	ldr	r5, [pc, #508]	; (8014f8c <mbedtls_md5_process+0x3e8>)
 8014d8e:	9f08      	ldr	r7, [sp, #32]
 8014d90:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 8014d94:	4455      	add	r5, sl
 8014d96:	4415      	add	r5, r2
 8014d98:	ea81 0204 	eor.w	r2, r1, r4
 8014d9c:	401a      	ands	r2, r3
 8014d9e:	404a      	eors	r2, r1
 8014da0:	442a      	add	r2, r5
 8014da2:	4d7b      	ldr	r5, [pc, #492]	; (8014f90 <mbedtls_md5_process+0x3ec>)
 8014da4:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  5,  5, 0xD62F105D );
 8014da8:	4475      	add	r5, lr
 8014daa:	441d      	add	r5, r3
 8014dac:	ea84 0302 	eor.w	r3, r4, r2
 8014db0:	400b      	ands	r3, r1
 8014db2:	4063      	eors	r3, r4
 8014db4:	442b      	add	r3, r5
 8014db6:	4d77      	ldr	r5, [pc, #476]	; (8014f94 <mbedtls_md5_process+0x3f0>)
 8014db8:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 10,  9, 0x02441453 );
 8014dbc:	443d      	add	r5, r7
 8014dbe:	440d      	add	r5, r1
 8014dc0:	ea82 0103 	eor.w	r1, r2, r3
 8014dc4:	4021      	ands	r1, r4
 8014dc6:	4051      	eors	r1, r2
 8014dc8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8014dca:	4429      	add	r1, r5
 8014dcc:	4d72      	ldr	r5, [pc, #456]	; (8014f98 <mbedtls_md5_process+0x3f4>)
 8014dce:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 8014dd2:	443d      	add	r5, r7
 8014dd4:	4425      	add	r5, r4
 8014dd6:	ea83 0401 	eor.w	r4, r3, r1
 8014dda:	4014      	ands	r4, r2
 8014ddc:	405c      	eors	r4, r3
 8014dde:	9f04      	ldr	r7, [sp, #16]
 8014de0:	442c      	add	r4, r5
 8014de2:	4d6e      	ldr	r5, [pc, #440]	; (8014f9c <mbedtls_md5_process+0x3f8>)
 8014de4:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 8014de8:	443d      	add	r5, r7
 8014dea:	4415      	add	r5, r2
 8014dec:	ea81 0204 	eor.w	r2, r1, r4
 8014df0:	401a      	ands	r2, r3
 8014df2:	404a      	eors	r2, r1
 8014df4:	9f07      	ldr	r7, [sp, #28]
 8014df6:	442a      	add	r2, r5
 8014df8:	4d69      	ldr	r5, [pc, #420]	; (8014fa0 <mbedtls_md5_process+0x3fc>)
 8014dfa:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 8014dfe:	443d      	add	r5, r7
 8014e00:	441d      	add	r5, r3
 8014e02:	ea84 0302 	eor.w	r3, r4, r2
 8014e06:	400b      	ands	r3, r1
 8014e08:	4063      	eors	r3, r4
 8014e0a:	442b      	add	r3, r5
 8014e0c:	4d65      	ldr	r5, [pc, #404]	; (8014fa4 <mbedtls_md5_process+0x400>)
 8014e0e:	9f03      	ldr	r7, [sp, #12]
 8014e10:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 8014e14:	4445      	add	r5, r8
 8014e16:	440d      	add	r5, r1
 8014e18:	ea82 0103 	eor.w	r1, r2, r3
 8014e1c:	4021      	ands	r1, r4
 8014e1e:	4051      	eors	r1, r2
 8014e20:	4429      	add	r1, r5
 8014e22:	4d61      	ldr	r5, [pc, #388]	; (8014fa8 <mbedtls_md5_process+0x404>)
 8014e24:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 8014e28:	443d      	add	r5, r7
 8014e2a:	442c      	add	r4, r5
 8014e2c:	ea83 0501 	eor.w	r5, r3, r1
 8014e30:	4015      	ands	r5, r2
 8014e32:	405d      	eors	r5, r3
 8014e34:	9f06      	ldr	r7, [sp, #24]
 8014e36:	442c      	add	r4, r5
 8014e38:	4d5c      	ldr	r5, [pc, #368]	; (8014fac <mbedtls_md5_process+0x408>)
 8014e3a:	eb01 44b4 	add.w	r4, r1, r4, ror #18
    P( B, C, D, A,  8, 20, 0x455A14ED );
 8014e3e:	443d      	add	r5, r7
 8014e40:	442a      	add	r2, r5
 8014e42:	ea81 0504 	eor.w	r5, r1, r4
 8014e46:	401d      	ands	r5, r3
 8014e48:	404d      	eors	r5, r1
 8014e4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014e4c:	442a      	add	r2, r5
 8014e4e:	4d58      	ldr	r5, [pc, #352]	; (8014fb0 <mbedtls_md5_process+0x40c>)
 8014e50:	eb04 3232 	add.w	r2, r4, r2, ror #12
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 8014e54:	443d      	add	r5, r7
 8014e56:	442b      	add	r3, r5
 8014e58:	ea84 0502 	eor.w	r5, r4, r2
 8014e5c:	400d      	ands	r5, r1
 8014e5e:	4065      	eors	r5, r4
 8014e60:	9f02      	ldr	r7, [sp, #8]
 8014e62:	442b      	add	r3, r5
 8014e64:	4d53      	ldr	r5, [pc, #332]	; (8014fb4 <mbedtls_md5_process+0x410>)
 8014e66:	eb02 63f3 	add.w	r3, r2, r3, ror #27
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 8014e6a:	443d      	add	r5, r7
 8014e6c:	4429      	add	r1, r5
 8014e6e:	ea82 0503 	eor.w	r5, r2, r3
 8014e72:	4025      	ands	r5, r4
 8014e74:	4055      	eors	r5, r2
 8014e76:	4429      	add	r1, r5
 8014e78:	4d4f      	ldr	r5, [pc, #316]	; (8014fb8 <mbedtls_md5_process+0x414>)
 8014e7a:	9f06      	ldr	r7, [sp, #24]
 8014e7c:	eb03 51f1 	add.w	r1, r3, r1, ror #23
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 8014e80:	444d      	add	r5, r9
 8014e82:	442c      	add	r4, r5
 8014e84:	ea83 0501 	eor.w	r5, r3, r1
 8014e88:	4015      	ands	r5, r2
 8014e8a:	405d      	eors	r5, r3
 8014e8c:	4425      	add	r5, r4
 8014e8e:	eb01 45b5 	add.w	r5, r1, r5, ror #18
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 8014e92:	ea81 0405 	eor.w	r4, r1, r5
 8014e96:	44e3      	add	fp, ip
 8014e98:	4493      	add	fp, r2
 8014e9a:	ea04 0203 	and.w	r2, r4, r3
 8014e9e:	404a      	eors	r2, r1
 8014ea0:	445a      	add	r2, fp
 8014ea2:	f5ae 2bb8 	sub.w	fp, lr, #376832	; 0x5c000
 8014ea6:	eb05 3232 	add.w	r2, r5, r2, ror #12

#undef F

#define F(x,y,z) (x ^ y ^ z)

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 8014eaa:	f2ab 6bbe 	subw	fp, fp, #1726	; 0x6be
 8014eae:	4054      	eors	r4, r2
 8014eb0:	445b      	add	r3, fp
 8014eb2:	4423      	add	r3, r4
 8014eb4:	4c41      	ldr	r4, [pc, #260]	; (8014fbc <mbedtls_md5_process+0x418>)
 8014eb6:	443c      	add	r4, r7
 8014eb8:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  8, 11, 0x8771F681 );
 8014ebc:	440c      	add	r4, r1
 8014ebe:	ea85 0102 	eor.w	r1, r5, r2
 8014ec2:	4059      	eors	r1, r3
 8014ec4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014ec6:	4421      	add	r1, r4
 8014ec8:	4c3d      	ldr	r4, [pc, #244]	; (8014fc0 <mbedtls_md5_process+0x41c>)
 8014eca:	443c      	add	r4, r7
 8014ecc:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 8014ed0:	4425      	add	r5, r4
 8014ed2:	ea82 0403 	eor.w	r4, r2, r3
 8014ed6:	404c      	eors	r4, r1
 8014ed8:	4425      	add	r5, r4
 8014eda:	4c3a      	ldr	r4, [pc, #232]	; (8014fc4 <mbedtls_md5_process+0x420>)
 8014edc:	9f01      	ldr	r7, [sp, #4]
 8014ede:	4444      	add	r4, r8
 8014ee0:	eb01 4535 	add.w	r5, r1, r5, ror #16
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 8014ee4:	4414      	add	r4, r2
 8014ee6:	ea83 0201 	eor.w	r2, r3, r1
 8014eea:	406a      	eors	r2, r5
 8014eec:	4422      	add	r2, r4
 8014eee:	4c36      	ldr	r4, [pc, #216]	; (8014fc8 <mbedtls_md5_process+0x424>)
 8014ef0:	443c      	add	r4, r7
 8014ef2:	eb05 2272 	add.w	r2, r5, r2, ror #9
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 8014ef6:	441c      	add	r4, r3
 8014ef8:	ea81 0305 	eor.w	r3, r1, r5
 8014efc:	4053      	eors	r3, r2
 8014efe:	9f04      	ldr	r7, [sp, #16]
 8014f00:	4423      	add	r3, r4
 8014f02:	4c32      	ldr	r4, [pc, #200]	; (8014fcc <mbedtls_md5_process+0x428>)
 8014f04:	443c      	add	r4, r7
 8014f06:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 8014f0a:	440c      	add	r4, r1
 8014f0c:	ea85 0102 	eor.w	r1, r5, r2
 8014f10:	4059      	eors	r1, r3
 8014f12:	4421      	add	r1, r4
 8014f14:	4c2e      	ldr	r4, [pc, #184]	; (8014fd0 <mbedtls_md5_process+0x42c>)
 8014f16:	9f08      	ldr	r7, [sp, #32]
 8014f18:	444c      	add	r4, r9
 8014f1a:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 8014f1e:	4425      	add	r5, r4
 8014f20:	ea82 0403 	eor.w	r4, r2, r3
 8014f24:	404c      	eors	r4, r1
 8014f26:	442c      	add	r4, r5
 8014f28:	4d2a      	ldr	r5, [pc, #168]	; (8014fd4 <mbedtls_md5_process+0x430>)
 8014f2a:	443d      	add	r5, r7
 8014f2c:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 8014f30:	4415      	add	r5, r2
 8014f32:	ea83 0201 	eor.w	r2, r3, r1
 8014f36:	4062      	eors	r2, r4
 8014f38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8014f3a:	442a      	add	r2, r5
 8014f3c:	4d26      	ldr	r5, [pc, #152]	; (8014fd8 <mbedtls_md5_process+0x434>)
 8014f3e:	443d      	add	r5, r7
 8014f40:	e04e      	b.n	8014fe0 <mbedtls_md5_process+0x43c>
 8014f42:	bf00      	nop
 8014f44:	d76aa478 	.word	0xd76aa478
 8014f48:	c1bdceee 	.word	0xc1bdceee
 8014f4c:	e8c7b756 	.word	0xe8c7b756
 8014f50:	242070db 	.word	0x242070db
 8014f54:	f57c0faf 	.word	0xf57c0faf
 8014f58:	4787c62a 	.word	0x4787c62a
 8014f5c:	a8304613 	.word	0xa8304613
 8014f60:	fd469501 	.word	0xfd469501
 8014f64:	698098d8 	.word	0x698098d8
 8014f68:	8b44f7af 	.word	0x8b44f7af
 8014f6c:	895cd7be 	.word	0x895cd7be
 8014f70:	6b901122 	.word	0x6b901122
 8014f74:	fd987193 	.word	0xfd987193
 8014f78:	a679438e 	.word	0xa679438e
 8014f7c:	49b40821 	.word	0x49b40821
 8014f80:	f61e2562 	.word	0xf61e2562
 8014f84:	c040b340 	.word	0xc040b340
 8014f88:	265e5a51 	.word	0x265e5a51
 8014f8c:	e9b6c7aa 	.word	0xe9b6c7aa
 8014f90:	d62f105d 	.word	0xd62f105d
 8014f94:	02441453 	.word	0x02441453
 8014f98:	d8a1e681 	.word	0xd8a1e681
 8014f9c:	e7d3fbc8 	.word	0xe7d3fbc8
 8014fa0:	21e1cde6 	.word	0x21e1cde6
 8014fa4:	c33707d6 	.word	0xc33707d6
 8014fa8:	f4d50d87 	.word	0xf4d50d87
 8014fac:	455a14ed 	.word	0x455a14ed
 8014fb0:	a9e3e905 	.word	0xa9e3e905
 8014fb4:	fcefa3f8 	.word	0xfcefa3f8
 8014fb8:	676f02d9 	.word	0x676f02d9
 8014fbc:	8771f681 	.word	0x8771f681
 8014fc0:	6d9d6122 	.word	0x6d9d6122
 8014fc4:	fde5380c 	.word	0xfde5380c
 8014fc8:	a4beea44 	.word	0xa4beea44
 8014fcc:	4bdecfa9 	.word	0x4bdecfa9
 8014fd0:	f6bb4b60 	.word	0xf6bb4b60
 8014fd4:	bebfbc70 	.word	0xbebfbc70
 8014fd8:	289b7ec6 	.word	0x289b7ec6
 8014fdc:	8d2a4c8a 	.word	0x8d2a4c8a
 8014fe0:	eb04 2272 	add.w	r2, r4, r2, ror #9
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 8014fe4:	441d      	add	r5, r3
 8014fe6:	ea81 0304 	eor.w	r3, r1, r4
 8014fea:	4053      	eors	r3, r2
 8014fec:	442b      	add	r3, r5
 8014fee:	4d7b      	ldr	r5, [pc, #492]	; (80151dc <mbedtls_md5_process+0x638>)
 8014ff0:	9f03      	ldr	r7, [sp, #12]
 8014ff2:	4455      	add	r5, sl
 8014ff4:	eb02 7333 	add.w	r3, r2, r3, ror #28
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 8014ff8:	4429      	add	r1, r5
 8014ffa:	ea84 0502 	eor.w	r5, r4, r2
 8014ffe:	405d      	eors	r5, r3
 8015000:	4429      	add	r1, r5
 8015002:	4d77      	ldr	r5, [pc, #476]	; (80151e0 <mbedtls_md5_process+0x63c>)
 8015004:	443d      	add	r5, r7
 8015006:	eb03 5171 	add.w	r1, r3, r1, ror #21
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 801500a:	4425      	add	r5, r4
 801500c:	ea82 0403 	eor.w	r4, r2, r3
 8015010:	404c      	eors	r4, r1
 8015012:	9f05      	ldr	r7, [sp, #20]
 8015014:	442c      	add	r4, r5
 8015016:	4d73      	ldr	r5, [pc, #460]	; (80151e4 <mbedtls_md5_process+0x640>)
 8015018:	443d      	add	r5, r7
 801501a:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A,  6, 23, 0x04881D05 );
 801501e:	442a      	add	r2, r5
 8015020:	ea83 0501 	eor.w	r5, r3, r1
 8015024:	4065      	eors	r5, r4
 8015026:	9f07      	ldr	r7, [sp, #28]
 8015028:	4415      	add	r5, r2
 801502a:	4a6f      	ldr	r2, [pc, #444]	; (80151e8 <mbedtls_md5_process+0x644>)
 801502c:	443a      	add	r2, r7
 801502e:	eb04 2575 	add.w	r5, r4, r5, ror #9
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 8015032:	4413      	add	r3, r2
 8015034:	ea81 0204 	eor.w	r2, r1, r4
 8015038:	406a      	eors	r2, r5
 801503a:	441a      	add	r2, r3
 801503c:	4b6b      	ldr	r3, [pc, #428]	; (80151ec <mbedtls_md5_process+0x648>)
 801503e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8015040:	4463      	add	r3, ip
 8015042:	eb05 7232 	add.w	r2, r5, r2, ror #28
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 8015046:	440b      	add	r3, r1
 8015048:	ea84 0105 	eor.w	r1, r4, r5
 801504c:	4051      	eors	r1, r2
 801504e:	4419      	add	r1, r3
 8015050:	4b67      	ldr	r3, [pc, #412]	; (80151f0 <mbedtls_md5_process+0x64c>)
 8015052:	443b      	add	r3, r7
 8015054:	eb02 5171 	add.w	r1, r2, r1, ror #21
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 8015058:	441c      	add	r4, r3
 801505a:	ea85 0302 	eor.w	r3, r5, r2
 801505e:	404b      	eors	r3, r1
 8015060:	9f02      	ldr	r7, [sp, #8]
 8015062:	441c      	add	r4, r3
 8015064:	4b63      	ldr	r3, [pc, #396]	; (80151f4 <mbedtls_md5_process+0x650>)
 8015066:	443b      	add	r3, r7
 8015068:	eb01 4434 	add.w	r4, r1, r4, ror #16
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 801506c:	441d      	add	r5, r3
 801506e:	ea82 0301 	eor.w	r3, r2, r1
 8015072:	4063      	eors	r3, r4
 8015074:	442b      	add	r3, r5
 8015076:	4d60      	ldr	r5, [pc, #384]	; (80151f8 <mbedtls_md5_process+0x654>)
 8015078:	9f03      	ldr	r7, [sp, #12]
 801507a:	eb04 2373 	add.w	r3, r4, r3, ror #9

#undef F

#define F(x,y,z) (y ^ (x | ~z))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 801507e:	4455      	add	r5, sl
 8015080:	ea63 0a01 	orn	sl, r3, r1
 8015084:	ea8a 0a04 	eor.w	sl, sl, r4
 8015088:	442a      	add	r2, r5
 801508a:	4452      	add	r2, sl
 801508c:	4d5b      	ldr	r5, [pc, #364]	; (80151fc <mbedtls_md5_process+0x658>)
 801508e:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 8015092:	444d      	add	r5, r9
 8015094:	ea62 0904 	orn	r9, r2, r4
 8015098:	ea89 0903 	eor.w	r9, r9, r3
 801509c:	4429      	add	r1, r5
 801509e:	4449      	add	r1, r9
 80150a0:	4d57      	ldr	r5, [pc, #348]	; (8015200 <mbedtls_md5_process+0x65c>)
 80150a2:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 80150a6:	4445      	add	r5, r8
 80150a8:	ea61 0803 	orn	r8, r1, r3
 80150ac:	ea88 0802 	eor.w	r8, r8, r2
 80150b0:	442c      	add	r4, r5
 80150b2:	4444      	add	r4, r8
 80150b4:	4d53      	ldr	r5, [pc, #332]	; (8015204 <mbedtls_md5_process+0x660>)
 80150b6:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 80150ba:	4475      	add	r5, lr
 80150bc:	ea64 0e02 	orn	lr, r4, r2
 80150c0:	ea8e 0e01 	eor.w	lr, lr, r1
 80150c4:	442b      	add	r3, r5
 80150c6:	4473      	add	r3, lr
 80150c8:	4d4f      	ldr	r5, [pc, #316]	; (8015208 <mbedtls_md5_process+0x664>)
 80150ca:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 80150ce:	4465      	add	r5, ip
 80150d0:	ea63 0c01 	orn	ip, r3, r1
 80150d4:	ea8c 0c04 	eor.w	ip, ip, r4
 80150d8:	442a      	add	r2, r5
 80150da:	4d4c      	ldr	r5, [pc, #304]	; (801520c <mbedtls_md5_process+0x668>)
 80150dc:	4462      	add	r2, ip
 80150de:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 80150e2:	443d      	add	r5, r7
 80150e4:	4429      	add	r1, r5
 80150e6:	ea62 0704 	orn	r7, r2, r4
 80150ea:	9d08      	ldr	r5, [sp, #32]
 80150ec:	405f      	eors	r7, r3
 80150ee:	4439      	add	r1, r7
 80150f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80150f4:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 80150f8:	f6a5 3583 	subw	r5, r5, #2947	; 0xb83
 80150fc:	4425      	add	r5, r4
 80150fe:	ea61 0403 	orn	r4, r1, r3
 8015102:	4054      	eors	r4, r2
 8015104:	9f01      	ldr	r7, [sp, #4]
 8015106:	442c      	add	r4, r5
 8015108:	4d41      	ldr	r5, [pc, #260]	; (8015210 <mbedtls_md5_process+0x66c>)
 801510a:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 801510e:	443d      	add	r5, r7
 8015110:	ea64 0702 	orn	r7, r4, r2
 8015114:	404f      	eors	r7, r1
 8015116:	442b      	add	r3, r5
 8015118:	443b      	add	r3, r7
 801511a:	4d3e      	ldr	r5, [pc, #248]	; (8015214 <mbedtls_md5_process+0x670>)
 801511c:	9f06      	ldr	r7, [sp, #24]
 801511e:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 8015122:	443d      	add	r5, r7
 8015124:	ea63 0701 	orn	r7, r3, r1
 8015128:	4067      	eors	r7, r4
 801512a:	442a      	add	r2, r5
 801512c:	443a      	add	r2, r7
 801512e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015130:	4f39      	ldr	r7, [pc, #228]	; (8015218 <mbedtls_md5_process+0x674>)
 8015132:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 8015136:	442f      	add	r7, r5
 8015138:	ea62 0c04 	orn	ip, r2, r4
 801513c:	ea8c 0c03 	eor.w	ip, ip, r3
 8015140:	4439      	add	r1, r7
 8015142:	4461      	add	r1, ip
 8015144:	9f05      	ldr	r7, [sp, #20]
 8015146:	4d35      	ldr	r5, [pc, #212]	; (801521c <mbedtls_md5_process+0x678>)
 8015148:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  6, 15, 0xA3014314 );
 801514c:	443d      	add	r5, r7
 801514e:	ea61 0703 	orn	r7, r1, r3
 8015152:	4057      	eors	r7, r2
 8015154:	442c      	add	r4, r5
 8015156:	443c      	add	r4, r7
 8015158:	4d31      	ldr	r5, [pc, #196]	; (8015220 <mbedtls_md5_process+0x67c>)
 801515a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801515c:	eb01 4474 	add.w	r4, r1, r4, ror #17
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 8015160:	443d      	add	r5, r7
 8015162:	441d      	add	r5, r3
 8015164:	ea64 0302 	orn	r3, r4, r2
 8015168:	404b      	eors	r3, r1
 801516a:	9f04      	ldr	r7, [sp, #16]
 801516c:	442b      	add	r3, r5
 801516e:	4d2d      	ldr	r5, [pc, #180]	; (8015224 <mbedtls_md5_process+0x680>)
 8015170:	eb04 23f3 	add.w	r3, r4, r3, ror #11
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 8015174:	443d      	add	r5, r7
 8015176:	4415      	add	r5, r2
 8015178:	ea63 0201 	orn	r2, r3, r1
 801517c:	4062      	eors	r2, r4
 801517e:	442a      	add	r2, r5
 8015180:	4f29      	ldr	r7, [pc, #164]	; (8015228 <mbedtls_md5_process+0x684>)
 8015182:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015184:	eb03 62b2 	add.w	r2, r3, r2, ror #26
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 8015188:	442f      	add	r7, r5
 801518a:	440f      	add	r7, r1
 801518c:	ea62 0104 	orn	r1, r2, r4
 8015190:	4059      	eors	r1, r3
 8015192:	4439      	add	r1, r7
 8015194:	4d25      	ldr	r5, [pc, #148]	; (801522c <mbedtls_md5_process+0x688>)
 8015196:	9f02      	ldr	r7, [sp, #8]
 8015198:	eb02 51b1 	add.w	r1, r2, r1, ror #22
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 801519c:	443d      	add	r5, r7
 801519e:	4425      	add	r5, r4
 80151a0:	ea61 0403 	orn	r4, r1, r3
 80151a4:	4054      	eors	r4, r2
 80151a6:	9f07      	ldr	r7, [sp, #28]
 80151a8:	442c      	add	r4, r5
 80151aa:	4d21      	ldr	r5, [pc, #132]	; (8015230 <mbedtls_md5_process+0x68c>)
 80151ac:	443d      	add	r5, r7
 80151ae:	442b      	add	r3, r5
    P( B, C, D, A,  9, 21, 0xEB86D391 );

#undef F

    ctx->state[0] += A;
 80151b0:	6885      	ldr	r5, [r0, #8]
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 80151b2:	eb01 4474 	add.w	r4, r1, r4, ror #17
    ctx->state[0] += A;
 80151b6:	4415      	add	r5, r2
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 80151b8:	ea64 0202 	orn	r2, r4, r2
 80151bc:	404a      	eors	r2, r1
 80151be:	441a      	add	r2, r3
    ctx->state[1] += B;
    ctx->state[2] += C;
 80151c0:	6903      	ldr	r3, [r0, #16]
    ctx->state[0] += A;
 80151c2:	6085      	str	r5, [r0, #8]
    ctx->state[1] += B;
 80151c4:	4426      	add	r6, r4
    ctx->state[2] += C;
 80151c6:	441c      	add	r4, r3
    ctx->state[3] += D;
 80151c8:	6943      	ldr	r3, [r0, #20]
    ctx->state[2] += C;
 80151ca:	6104      	str	r4, [r0, #16]
    ctx->state[1] += B;
 80151cc:	eb06 26f2 	add.w	r6, r6, r2, ror #11
    ctx->state[3] += D;
 80151d0:	4419      	add	r1, r3
    ctx->state[1] += B;
 80151d2:	60c6      	str	r6, [r0, #12]
    ctx->state[3] += D;
 80151d4:	6141      	str	r1, [r0, #20]
}
 80151d6:	b00d      	add	sp, #52	; 0x34
 80151d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151dc:	eaa127fa 	.word	0xeaa127fa
 80151e0:	d4ef3085 	.word	0xd4ef3085
 80151e4:	04881d05 	.word	0x04881d05
 80151e8:	d9d4d039 	.word	0xd9d4d039
 80151ec:	e6db99e5 	.word	0xe6db99e5
 80151f0:	1fa27cf8 	.word	0x1fa27cf8
 80151f4:	c4ac5665 	.word	0xc4ac5665
 80151f8:	f4292244 	.word	0xf4292244
 80151fc:	432aff97 	.word	0x432aff97
 8015200:	ab9423a7 	.word	0xab9423a7
 8015204:	fc93a039 	.word	0xfc93a039
 8015208:	655b59c3 	.word	0x655b59c3
 801520c:	8f0ccc92 	.word	0x8f0ccc92
 8015210:	85845dd1 	.word	0x85845dd1
 8015214:	6fa87e4f 	.word	0x6fa87e4f
 8015218:	fe2ce6e0 	.word	0xfe2ce6e0
 801521c:	a3014314 	.word	0xa3014314
 8015220:	4e0811a1 	.word	0x4e0811a1
 8015224:	f7537e82 	.word	0xf7537e82
 8015228:	bd3af235 	.word	0xbd3af235
 801522c:	2ad7d2bb 	.word	0x2ad7d2bb
 8015230:	eb86d391 	.word	0xeb86d391

08015234 <mbedtls_md5_update.part.0>:
#endif /* !MBEDTLS_MD5_PROCESS_ALT */

/*
 * MD5 process buffer
 */
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 8015234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 8015238:	6803      	ldr	r3, [r0, #0]
 801523a:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 801523e:	189b      	adds	r3, r3, r2
 8015240:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8015242:	bf24      	itt	cs
 8015244:	6843      	ldrcs	r3, [r0, #4]
 8015246:	3301      	addcs	r3, #1
void mbedtls_md5_update( mbedtls_md5_context *ctx, const unsigned char *input, size_t ilen )
 8015248:	4605      	mov	r5, r0
 801524a:	460e      	mov	r6, r1
 801524c:	4614      	mov	r4, r2
        ctx->total[1]++;
 801524e:	bf28      	it	cs
 8015250:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8015252:	b197      	cbz	r7, 801527a <mbedtls_md5_update.part.0+0x46>
    fill = 64 - left;
 8015254:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 8015258:	4591      	cmp	r9, r2
 801525a:	d80e      	bhi.n	801527a <mbedtls_md5_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801525c:	f100 0818 	add.w	r8, r0, #24
 8015260:	464a      	mov	r2, r9
 8015262:	eb08 0007 	add.w	r0, r8, r7
 8015266:	f00d f8bf 	bl	80223e8 <memcpy>
        mbedtls_md5_process( ctx, ctx->buffer );
 801526a:	4641      	mov	r1, r8
 801526c:	4628      	mov	r0, r5
 801526e:	f7ff fc99 	bl	8014ba4 <mbedtls_md5_process>
        input += fill;
 8015272:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 8015274:	443c      	add	r4, r7
        input += fill;
 8015276:	444e      	add	r6, r9
        left = 0;
 8015278:	2700      	movs	r7, #0
 801527a:	46a0      	mov	r8, r4
 801527c:	eb06 0904 	add.w	r9, r6, r4
 8015280:	e004      	b.n	801528c <mbedtls_md5_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_md5_process( ctx, input );
 8015282:	4628      	mov	r0, r5
 8015284:	f7ff fc8e 	bl	8014ba4 <mbedtls_md5_process>
        input += 64;
        ilen  -= 64;
 8015288:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 801528c:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8015290:	eba9 0108 	sub.w	r1, r9, r8
 8015294:	d8f5      	bhi.n	8015282 <mbedtls_md5_update.part.0+0x4e>
 8015296:	09a2      	lsrs	r2, r4, #6
 8015298:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 801529c:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 80152a0:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 80152a4:	4431      	add	r1, r6
 80152a6:	b132      	cbz	r2, 80152b6 <mbedtls_md5_update.part.0+0x82>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80152a8:	f105 0018 	add.w	r0, r5, #24
 80152ac:	4438      	add	r0, r7
    }
}
 80152ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80152b2:	f00d b899 	b.w	80223e8 <memcpy>
}
 80152b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080152ba <mbedtls_md5_update>:
    if( ilen == 0 )
 80152ba:	b10a      	cbz	r2, 80152c0 <mbedtls_md5_update+0x6>
 80152bc:	f7ff bfba 	b.w	8015234 <mbedtls_md5_update.part.0>
}
 80152c0:	4770      	bx	lr
	...

080152c4 <mbedtls_md5_finish>:

/*
 * MD5 final digest
 */
void mbedtls_md5_finish( mbedtls_md5_context *ctx, unsigned char output[16] )
{
 80152c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152c6:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 80152c8:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 80152cc:	0f53      	lsrs	r3, r2, #29
 80152ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
 80152d2:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_LE( low,  msglen, 0 );
    PUT_UINT32_LE( high, msglen, 4 );

    last = ctx->total[0] & 0x3F;
 80152d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80152d8:	2a37      	cmp	r2, #55	; 0x37
{
 80152da:	4604      	mov	r4, r0
    PUT_UINT32_LE( high, msglen, 4 );
 80152dc:	e9cd 1300 	strd	r1, r3, [sp]
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80152e0:	bf94      	ite	ls
 80152e2:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 80152e6:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_md5_update( ctx, md5_padding, padn );
 80152ea:	4917      	ldr	r1, [pc, #92]	; (8015348 <mbedtls_md5_finish+0x84>)
 80152ec:	f7ff ffe5 	bl	80152ba <mbedtls_md5_update>
    if( ilen == 0 )
 80152f0:	2208      	movs	r2, #8
 80152f2:	4669      	mov	r1, sp
 80152f4:	4620      	mov	r0, r4
 80152f6:	f7ff ff9d 	bl	8015234 <mbedtls_md5_update.part.0>
    mbedtls_md5_update( ctx, msglen, 8 );

    PUT_UINT32_LE( ctx->state[0], output,  0 );
 80152fa:	68a3      	ldr	r3, [r4, #8]
 80152fc:	702b      	strb	r3, [r5, #0]
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	0a1b      	lsrs	r3, r3, #8
 8015302:	706b      	strb	r3, [r5, #1]
 8015304:	8963      	ldrh	r3, [r4, #10]
 8015306:	70ab      	strb	r3, [r5, #2]
 8015308:	7ae3      	ldrb	r3, [r4, #11]
 801530a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 801530c:	68e3      	ldr	r3, [r4, #12]
 801530e:	712b      	strb	r3, [r5, #4]
 8015310:	68e3      	ldr	r3, [r4, #12]
 8015312:	0a1b      	lsrs	r3, r3, #8
 8015314:	716b      	strb	r3, [r5, #5]
 8015316:	89e3      	ldrh	r3, [r4, #14]
 8015318:	71ab      	strb	r3, [r5, #6]
 801531a:	7be3      	ldrb	r3, [r4, #15]
 801531c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 801531e:	6923      	ldr	r3, [r4, #16]
 8015320:	722b      	strb	r3, [r5, #8]
 8015322:	6923      	ldr	r3, [r4, #16]
 8015324:	0a1b      	lsrs	r3, r3, #8
 8015326:	726b      	strb	r3, [r5, #9]
 8015328:	8a63      	ldrh	r3, [r4, #18]
 801532a:	72ab      	strb	r3, [r5, #10]
 801532c:	7ce3      	ldrb	r3, [r4, #19]
 801532e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 8015330:	6963      	ldr	r3, [r4, #20]
 8015332:	732b      	strb	r3, [r5, #12]
 8015334:	6963      	ldr	r3, [r4, #20]
 8015336:	0a1b      	lsrs	r3, r3, #8
 8015338:	736b      	strb	r3, [r5, #13]
 801533a:	8ae3      	ldrh	r3, [r4, #22]
 801533c:	73ab      	strb	r3, [r5, #14]
 801533e:	7de3      	ldrb	r3, [r4, #23]
 8015340:	73eb      	strb	r3, [r5, #15]
}
 8015342:	b003      	add	sp, #12
 8015344:	bd30      	pop	{r4, r5, pc}
 8015346:	bf00      	nop
 8015348:	0802bcb4 	.word	0x0802bcb4

0801534c <mbedtls_md5>:

/*
 * output = MD5( input buffer )
 */
void mbedtls_md5( const unsigned char *input, size_t ilen, unsigned char output[16] )
{
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	b096      	sub	sp, #88	; 0x58
 8015350:	4605      	mov	r5, r0
    mbedtls_md5_context ctx;

    mbedtls_md5_init( &ctx );
 8015352:	4668      	mov	r0, sp
{
 8015354:	460e      	mov	r6, r1
 8015356:	4614      	mov	r4, r2
    mbedtls_md5_init( &ctx );
 8015358:	f7ff fbfa 	bl	8014b50 <mbedtls_md5_init>
    mbedtls_md5_starts( &ctx );
 801535c:	4668      	mov	r0, sp
 801535e:	f7ff fc0b 	bl	8014b78 <mbedtls_md5_starts>
    mbedtls_md5_update( &ctx, input, ilen );
 8015362:	4632      	mov	r2, r6
 8015364:	4629      	mov	r1, r5
 8015366:	4668      	mov	r0, sp
 8015368:	f7ff ffa7 	bl	80152ba <mbedtls_md5_update>
    mbedtls_md5_finish( &ctx, output );
 801536c:	4621      	mov	r1, r4
 801536e:	4668      	mov	r0, sp
 8015370:	f7ff ffa8 	bl	80152c4 <mbedtls_md5_finish>
    mbedtls_md5_free( &ctx );
 8015374:	4668      	mov	r0, sp
 8015376:	f7ff fbef 	bl	8014b58 <mbedtls_md5_free>
}
 801537a:	b016      	add	sp, #88	; 0x58
 801537c:	bd70      	pop	{r4, r5, r6, pc}

0801537e <md5_process_wrap>:
                 (const mbedtls_md5_context *) src );
}

static void md5_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_md5_process( (mbedtls_md5_context *) ctx, data );
 801537e:	f7ff bc11 	b.w	8014ba4 <mbedtls_md5_process>

08015382 <md5_clone_wrap>:
    mbedtls_md5_clone( (mbedtls_md5_context *) dst,
 8015382:	f7ff bbf3 	b.w	8014b6c <mbedtls_md5_clone>
	...

08015388 <md5_ctx_free>:
{
 8015388:	b510      	push	{r4, lr}
 801538a:	4604      	mov	r4, r0
    mbedtls_md5_free( (mbedtls_md5_context *) ctx );
 801538c:	f7ff fbe4 	bl	8014b58 <mbedtls_md5_free>
    mbedtls_free( ctx );
 8015390:	4b02      	ldr	r3, [pc, #8]	; (801539c <md5_ctx_free+0x14>)
 8015392:	4620      	mov	r0, r4
 8015394:	681b      	ldr	r3, [r3, #0]
}
 8015396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801539a:	4718      	bx	r3
 801539c:	200005a4 	.word	0x200005a4

080153a0 <md5_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 80153a0:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <md5_ctx_alloc+0x18>)
{
 80153a2:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_md5_context ) );
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	2158      	movs	r1, #88	; 0x58
 80153a8:	2001      	movs	r0, #1
 80153aa:	4798      	blx	r3
    if( ctx != NULL )
 80153ac:	4604      	mov	r4, r0
 80153ae:	b108      	cbz	r0, 80153b4 <md5_ctx_alloc+0x14>
        mbedtls_md5_init( (mbedtls_md5_context *) ctx );
 80153b0:	f7ff fbce 	bl	8014b50 <mbedtls_md5_init>
}
 80153b4:	4620      	mov	r0, r4
 80153b6:	bd10      	pop	{r4, pc}
 80153b8:	200005a0 	.word	0x200005a0

080153bc <md5_finish_wrap>:
    mbedtls_md5_finish( (mbedtls_md5_context *) ctx, output );
 80153bc:	f7ff bf82 	b.w	80152c4 <mbedtls_md5_finish>

080153c0 <md5_update_wrap>:
    mbedtls_md5_update( (mbedtls_md5_context *) ctx, input, ilen );
 80153c0:	f7ff bf7b 	b.w	80152ba <mbedtls_md5_update>

080153c4 <md5_starts_wrap>:
    mbedtls_md5_starts( (mbedtls_md5_context *) ctx );
 80153c4:	f7ff bbd8 	b.w	8014b78 <mbedtls_md5_starts>

080153c8 <sha1_process_wrap>:
    mbedtls_free( ctx );
}

static void sha1_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha1_process( (mbedtls_sha1_context *) ctx, data );
 80153c8:	f002 bb1e 	b.w	8017a08 <mbedtls_sha1_process>

080153cc <sha1_clone_wrap>:
    mbedtls_sha1_clone( (mbedtls_sha1_context *) dst,
 80153cc:	f002 bafd 	b.w	80179ca <mbedtls_sha1_clone>

080153d0 <sha1_ctx_free>:
{
 80153d0:	b510      	push	{r4, lr}
 80153d2:	4604      	mov	r4, r0
    mbedtls_sha1_free( (mbedtls_sha1_context *) ctx );
 80153d4:	f002 faef 	bl	80179b6 <mbedtls_sha1_free>
    mbedtls_free( ctx );
 80153d8:	4b02      	ldr	r3, [pc, #8]	; (80153e4 <sha1_ctx_free+0x14>)
 80153da:	4620      	mov	r0, r4
 80153dc:	681b      	ldr	r3, [r3, #0]
}
 80153de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 80153e2:	4718      	bx	r3
 80153e4:	200005a4 	.word	0x200005a4

080153e8 <sha1_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80153e8:	4b05      	ldr	r3, [pc, #20]	; (8015400 <sha1_ctx_alloc+0x18>)
{
 80153ea:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha1_context ) );
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	215c      	movs	r1, #92	; 0x5c
 80153f0:	2001      	movs	r0, #1
 80153f2:	4798      	blx	r3
    if( ctx != NULL )
 80153f4:	4604      	mov	r4, r0
 80153f6:	b108      	cbz	r0, 80153fc <sha1_ctx_alloc+0x14>
        mbedtls_sha1_init( (mbedtls_sha1_context *) ctx );
 80153f8:	f002 fad9 	bl	80179ae <mbedtls_sha1_init>
}
 80153fc:	4620      	mov	r0, r4
 80153fe:	bd10      	pop	{r4, pc}
 8015400:	200005a0 	.word	0x200005a0

08015404 <sha1_finish_wrap>:
    mbedtls_sha1_finish( (mbedtls_sha1_context *) ctx, output );
 8015404:	f003 ba48 	b.w	8018898 <mbedtls_sha1_finish>

08015408 <sha1_update_wrap>:
    mbedtls_sha1_update( (mbedtls_sha1_context *) ctx, input, ilen );
 8015408:	f003 ba41 	b.w	801888e <mbedtls_sha1_update>

0801540c <sha1_starts_wrap>:
    mbedtls_sha1_starts( (mbedtls_sha1_context *) ctx );
 801540c:	f002 bae2 	b.w	80179d4 <mbedtls_sha1_starts>

08015410 <sha224_process_wrap>:
                    (const mbedtls_sha256_context *) src );
}

static void sha224_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha256_process( (mbedtls_sha256_context *) ctx, data );
 8015410:	f003 bb0e 	b.w	8018a30 <mbedtls_sha256_process>

08015414 <sha224_clone_wrap>:
    mbedtls_sha256_clone( (mbedtls_sha256_context *) dst,
 8015414:	f003 bab5 	b.w	8018982 <mbedtls_sha256_clone>

08015418 <sha224_ctx_free>:
{
 8015418:	b510      	push	{r4, lr}
 801541a:	4604      	mov	r4, r0
    mbedtls_sha256_free( (mbedtls_sha256_context *) ctx );
 801541c:	f003 faa7 	bl	801896e <mbedtls_sha256_free>
    mbedtls_free( ctx );
 8015420:	4b02      	ldr	r3, [pc, #8]	; (801542c <sha224_ctx_free+0x14>)
 8015422:	4620      	mov	r0, r4
 8015424:	681b      	ldr	r3, [r3, #0]
}
 8015426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 801542a:	4718      	bx	r3
 801542c:	200005a4 	.word	0x200005a4

08015430 <sha224_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8015430:	4b05      	ldr	r3, [pc, #20]	; (8015448 <sha224_ctx_alloc+0x18>)
{
 8015432:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha256_context ) );
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	216c      	movs	r1, #108	; 0x6c
 8015438:	2001      	movs	r0, #1
 801543a:	4798      	blx	r3
    if( ctx != NULL )
 801543c:	4604      	mov	r4, r0
 801543e:	b108      	cbz	r0, 8015444 <sha224_ctx_alloc+0x14>
        mbedtls_sha256_init( (mbedtls_sha256_context *) ctx );
 8015440:	f003 fa91 	bl	8018966 <mbedtls_sha256_init>
}
 8015444:	4620      	mov	r0, r4
 8015446:	bd10      	pop	{r4, pc}
 8015448:	200005a0 	.word	0x200005a0

0801544c <sha224_wrap>:
    mbedtls_sha256( input, ilen, output, 1 );
 801544c:	2301      	movs	r3, #1
 801544e:	f003 bf01 	b.w	8019254 <mbedtls_sha256>

08015452 <sha256_wrap>:
}

static void sha256_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha256( input, ilen, output, 0 );
 8015452:	2300      	movs	r3, #0
 8015454:	f003 befe 	b.w	8019254 <mbedtls_sha256>

08015458 <sha224_finish_wrap>:
    mbedtls_sha256_finish( (mbedtls_sha256_context *) ctx, output );
 8015458:	f003 be8e 	b.w	8019178 <mbedtls_sha256_finish>

0801545c <sha224_update_wrap>:
    mbedtls_sha256_update( (mbedtls_sha256_context *) ctx, input, ilen );
 801545c:	f003 be87 	b.w	801916e <mbedtls_sha256_update>

08015460 <sha224_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 1 );
 8015460:	2101      	movs	r1, #1
 8015462:	f003 ba93 	b.w	801898c <mbedtls_sha256_starts>

08015466 <sha256_starts_wrap>:
    mbedtls_sha256_starts( (mbedtls_sha256_context *) ctx, 0 );
 8015466:	2100      	movs	r1, #0
 8015468:	f003 ba90 	b.w	801898c <mbedtls_sha256_starts>

0801546c <sha384_process_wrap>:
                    (const mbedtls_sha512_context *) src );
}

static void sha384_process_wrap( void *ctx, const unsigned char *data )
{
    mbedtls_sha512_process( (mbedtls_sha512_context *) ctx, data );
 801546c:	f003 bfbc 	b.w	80193e8 <mbedtls_sha512_process>

08015470 <sha384_clone_wrap>:
    mbedtls_sha512_clone( (mbedtls_sha512_context *) dst,
 8015470:	f003 bf19 	b.w	80192a6 <mbedtls_sha512_clone>

08015474 <sha384_ctx_free>:
{
 8015474:	b510      	push	{r4, lr}
 8015476:	4604      	mov	r4, r0
    mbedtls_sha512_free( (mbedtls_sha512_context *) ctx );
 8015478:	f003 ff0b 	bl	8019292 <mbedtls_sha512_free>
    mbedtls_free( ctx );
 801547c:	4b02      	ldr	r3, [pc, #8]	; (8015488 <sha384_ctx_free+0x14>)
 801547e:	4620      	mov	r0, r4
 8015480:	681b      	ldr	r3, [r3, #0]
}
 8015482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015486:	4718      	bx	r3
 8015488:	200005a4 	.word	0x200005a4

0801548c <sha384_ctx_alloc>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 801548c:	4b05      	ldr	r3, [pc, #20]	; (80154a4 <sha384_ctx_alloc+0x18>)
{
 801548e:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_sha512_context ) );
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	21d8      	movs	r1, #216	; 0xd8
 8015494:	2001      	movs	r0, #1
 8015496:	4798      	blx	r3
    if( ctx != NULL )
 8015498:	4604      	mov	r4, r0
 801549a:	b108      	cbz	r0, 80154a0 <sha384_ctx_alloc+0x14>
        mbedtls_sha512_init( (mbedtls_sha512_context *) ctx );
 801549c:	f003 fef5 	bl	801928a <mbedtls_sha512_init>
}
 80154a0:	4620      	mov	r0, r4
 80154a2:	bd10      	pop	{r4, pc}
 80154a4:	200005a0 	.word	0x200005a0

080154a8 <sha384_wrap>:
    mbedtls_sha512( input, ilen, output, 1 );
 80154a8:	2301      	movs	r3, #1
 80154aa:	f004 be65 	b.w	801a178 <mbedtls_sha512>

080154ae <sha512_wrap>:
}

static void sha512_wrap( const unsigned char *input, size_t ilen,
                    unsigned char *output )
{
    mbedtls_sha512( input, ilen, output, 0 );
 80154ae:	2300      	movs	r3, #0
 80154b0:	f004 be62 	b.w	801a178 <mbedtls_sha512>

080154b4 <sha384_finish_wrap>:
    mbedtls_sha512_finish( (mbedtls_sha512_context *) ctx, output );
 80154b4:	f004 bd5a 	b.w	8019f6c <mbedtls_sha512_finish>

080154b8 <sha384_update_wrap>:
    mbedtls_sha512_update( (mbedtls_sha512_context *) ctx, input, ilen );
 80154b8:	f004 bd53 	b.w	8019f62 <mbedtls_sha512_update>

080154bc <sha384_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 1 );
 80154bc:	2101      	movs	r1, #1
 80154be:	f003 bef7 	b.w	80192b0 <mbedtls_sha512_starts>

080154c2 <sha512_starts_wrap>:
    mbedtls_sha512_starts( (mbedtls_sha512_context *) ctx, 0 );
 80154c2:	2100      	movs	r1, #0
 80154c4:	f003 bef4 	b.w	80192b0 <mbedtls_sha512_starts>

080154c8 <oid_sig_alg_from_asn1.part.0>:
        { NULL, 0, NULL, NULL },
        MBEDTLS_MD_NONE, MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80154c8:	b538      	push	{r3, r4, r5, lr}
 80154ca:	4c09      	ldr	r4, [pc, #36]	; (80154f0 <oid_sig_alg_from_asn1.part.0+0x28>)
 80154cc:	4605      	mov	r5, r0
 80154ce:	6820      	ldr	r0, [r4, #0]
 80154d0:	b910      	cbnz	r0, 80154d8 <oid_sig_alg_from_asn1.part.0+0x10>
 80154d2:	4604      	mov	r4, r0
 80154d4:	4620      	mov	r0, r4
 80154d6:	bd38      	pop	{r3, r4, r5, pc}
 80154d8:	686b      	ldr	r3, [r5, #4]
 80154da:	6862      	ldr	r2, [r4, #4]
 80154dc:	429a      	cmp	r2, r3
 80154de:	d104      	bne.n	80154ea <oid_sig_alg_from_asn1.part.0+0x22>
 80154e0:	68a9      	ldr	r1, [r5, #8]
 80154e2:	f00c ff73 	bl	80223cc <memcmp>
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d0f4      	beq.n	80154d4 <oid_sig_alg_from_asn1.part.0+0xc>
 80154ea:	3414      	adds	r4, #20
 80154ec:	e7ef      	b.n	80154ce <oid_sig_alg_from_asn1.part.0+0x6>
 80154ee:	bf00      	nop
 80154f0:	0802c0d8 	.word	0x0802c0d8

080154f4 <mbedtls_oid_get_attr_short_name>:
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 80154f4:	b570      	push	{r4, r5, r6, lr}
 80154f6:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 80154f8:	4605      	mov	r5, r0
 80154fa:	b110      	cbz	r0, 8015502 <mbedtls_oid_get_attr_short_name+0xe>
 80154fc:	4c09      	ldr	r4, [pc, #36]	; (8015524 <mbedtls_oid_get_attr_short_name+0x30>)
 80154fe:	6820      	ldr	r0, [r4, #0]
 8015500:	b910      	cbnz	r0, 8015508 <mbedtls_oid_get_attr_short_name+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 8015502:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015506:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x520_attr_t, x520_attr, oid_x520_attr_type)
 8015508:	686b      	ldr	r3, [r5, #4]
 801550a:	6862      	ldr	r2, [r4, #4]
 801550c:	429a      	cmp	r2, r3
 801550e:	d103      	bne.n	8015518 <mbedtls_oid_get_attr_short_name+0x24>
 8015510:	68a9      	ldr	r1, [r5, #8]
 8015512:	f00c ff5b 	bl	80223cc <memcmp>
 8015516:	b108      	cbz	r0, 801551c <mbedtls_oid_get_attr_short_name+0x28>
 8015518:	3414      	adds	r4, #20
 801551a:	e7f0      	b.n	80154fe <mbedtls_oid_get_attr_short_name+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_attr_short_name, oid_x520_attr_t, x520_attr, const char *, short_name)
 801551c:	6923      	ldr	r3, [r4, #16]
 801551e:	6033      	str	r3, [r6, #0]
 8015520:	e7f1      	b.n	8015506 <mbedtls_oid_get_attr_short_name+0x12>
 8015522:	bf00      	nop
 8015524:	0802c1f0 	.word	0x0802c1f0

08015528 <mbedtls_oid_get_x509_ext_type>:
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8015528:	b570      	push	{r4, r5, r6, lr}
 801552a:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 801552c:	4605      	mov	r5, r0
 801552e:	b110      	cbz	r0, 8015536 <mbedtls_oid_get_x509_ext_type+0xe>
 8015530:	4c09      	ldr	r4, [pc, #36]	; (8015558 <mbedtls_oid_get_x509_ext_type+0x30>)
 8015532:	6820      	ldr	r0, [r4, #0]
 8015534:	b910      	cbnz	r0, 801553c <mbedtls_oid_get_x509_ext_type+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8015536:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801553a:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_x509_ext_t, x509_ext, oid_x509_ext)
 801553c:	686b      	ldr	r3, [r5, #4]
 801553e:	6862      	ldr	r2, [r4, #4]
 8015540:	429a      	cmp	r2, r3
 8015542:	d103      	bne.n	801554c <mbedtls_oid_get_x509_ext_type+0x24>
 8015544:	68a9      	ldr	r1, [r5, #8]
 8015546:	f00c ff41 	bl	80223cc <memcmp>
 801554a:	b108      	cbz	r0, 8015550 <mbedtls_oid_get_x509_ext_type+0x28>
 801554c:	3414      	adds	r4, #20
 801554e:	e7f0      	b.n	8015532 <mbedtls_oid_get_x509_ext_type+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_x509_ext_type, oid_x509_ext_t, x509_ext, int, ext_type)
 8015550:	6923      	ldr	r3, [r4, #16]
 8015552:	6033      	str	r3, [r6, #0]
 8015554:	e7f1      	b.n	801553a <mbedtls_oid_get_x509_ext_type+0x12>
 8015556:	bf00      	nop
 8015558:	0802c380 	.word	0x0802c380

0801555c <mbedtls_oid_get_extended_key_usage>:
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 801555c:	b570      	push	{r4, r5, r6, lr}
 801555e:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015560:	4605      	mov	r5, r0
 8015562:	b110      	cbz	r0, 801556a <mbedtls_oid_get_extended_key_usage+0xe>
 8015564:	4c09      	ldr	r4, [pc, #36]	; (801558c <mbedtls_oid_get_extended_key_usage+0x30>)
 8015566:	6820      	ldr	r0, [r4, #0]
 8015568:	b910      	cbnz	r0, 8015570 <mbedtls_oid_get_extended_key_usage+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 801556a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 801556e:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(mbedtls_oid_descriptor_t, ext_key_usage, oid_ext_key_usage)
 8015570:	686b      	ldr	r3, [r5, #4]
 8015572:	6862      	ldr	r2, [r4, #4]
 8015574:	429a      	cmp	r2, r3
 8015576:	d103      	bne.n	8015580 <mbedtls_oid_get_extended_key_usage+0x24>
 8015578:	68a9      	ldr	r1, [r5, #8]
 801557a:	f00c ff27 	bl	80223cc <memcmp>
 801557e:	b108      	cbz	r0, 8015584 <mbedtls_oid_get_extended_key_usage+0x28>
 8015580:	3410      	adds	r4, #16
 8015582:	e7f0      	b.n	8015566 <mbedtls_oid_get_extended_key_usage+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_extended_key_usage, mbedtls_oid_descriptor_t, ext_key_usage, const char *, description)
 8015584:	68e3      	ldr	r3, [r4, #12]
 8015586:	6033      	str	r3, [r6, #0]
 8015588:	e7f1      	b.n	801556e <mbedtls_oid_get_extended_key_usage+0x12>
 801558a:	bf00      	nop
 801558c:	0802c3f8 	.word	0x0802c3f8

08015590 <mbedtls_oid_get_sig_alg_desc>:
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 8015590:	b510      	push	{r4, lr}
 8015592:	460c      	mov	r4, r1
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 8015594:	b130      	cbz	r0, 80155a4 <mbedtls_oid_get_sig_alg_desc+0x14>
 8015596:	f7ff ff97 	bl	80154c8 <oid_sig_alg_from_asn1.part.0>
FN_OID_GET_DESCRIPTOR_ATTR1(mbedtls_oid_get_sig_alg_desc, oid_sig_alg_t, sig_alg, const char *, description)
 801559a:	b118      	cbz	r0, 80155a4 <mbedtls_oid_get_sig_alg_desc+0x14>
 801559c:	68c3      	ldr	r3, [r0, #12]
 801559e:	6023      	str	r3, [r4, #0]
 80155a0:	2000      	movs	r0, #0
 80155a2:	bd10      	pop	{r4, pc}
 80155a4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80155a8:	e7fb      	b.n	80155a2 <mbedtls_oid_get_sig_alg_desc+0x12>

080155aa <mbedtls_oid_get_sig_alg>:
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80155aa:	b538      	push	{r3, r4, r5, lr}
 80155ac:	460d      	mov	r5, r1
 80155ae:	4614      	mov	r4, r2
FN_OID_TYPED_FROM_ASN1(oid_sig_alg_t, sig_alg, oid_sig_alg)
 80155b0:	b140      	cbz	r0, 80155c4 <mbedtls_oid_get_sig_alg+0x1a>
 80155b2:	f7ff ff89 	bl	80154c8 <oid_sig_alg_from_asn1.part.0>
FN_OID_GET_ATTR2(mbedtls_oid_get_sig_alg, oid_sig_alg_t, sig_alg, mbedtls_md_type_t, md_alg, mbedtls_pk_type_t, pk_alg)
 80155b6:	b128      	cbz	r0, 80155c4 <mbedtls_oid_get_sig_alg+0x1a>
 80155b8:	7c03      	ldrb	r3, [r0, #16]
 80155ba:	702b      	strb	r3, [r5, #0]
 80155bc:	7c43      	ldrb	r3, [r0, #17]
 80155be:	7023      	strb	r3, [r4, #0]
 80155c0:	2000      	movs	r0, #0
 80155c2:	bd38      	pop	{r3, r4, r5, pc}
 80155c4:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80155c8:	e7fb      	b.n	80155c2 <mbedtls_oid_get_sig_alg+0x18>
	...

080155cc <mbedtls_oid_get_pk_alg>:
        MBEDTLS_PK_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80155cc:	b570      	push	{r4, r5, r6, lr}
 80155ce:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80155d0:	4605      	mov	r5, r0
 80155d2:	b110      	cbz	r0, 80155da <mbedtls_oid_get_pk_alg+0xe>
 80155d4:	4c09      	ldr	r4, [pc, #36]	; (80155fc <mbedtls_oid_get_pk_alg+0x30>)
 80155d6:	6820      	ldr	r0, [r4, #0]
 80155d8:	b910      	cbnz	r0, 80155e0 <mbedtls_oid_get_pk_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80155da:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80155de:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_pk_alg_t, pk_alg, oid_pk_alg)
 80155e0:	686b      	ldr	r3, [r5, #4]
 80155e2:	6862      	ldr	r2, [r4, #4]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d103      	bne.n	80155f0 <mbedtls_oid_get_pk_alg+0x24>
 80155e8:	68a9      	ldr	r1, [r5, #8]
 80155ea:	f00c feef 	bl	80223cc <memcmp>
 80155ee:	b108      	cbz	r0, 80155f4 <mbedtls_oid_get_pk_alg+0x28>
 80155f0:	3414      	adds	r4, #20
 80155f2:	e7f0      	b.n	80155d6 <mbedtls_oid_get_pk_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_pk_alg, oid_pk_alg_t, pk_alg, mbedtls_pk_type_t, pk_alg)
 80155f4:	7c23      	ldrb	r3, [r4, #16]
 80155f6:	7033      	strb	r3, [r6, #0]
 80155f8:	e7f1      	b.n	80155de <mbedtls_oid_get_pk_alg+0x12>
 80155fa:	bf00      	nop
 80155fc:	0802c468 	.word	0x0802c468

08015600 <mbedtls_oid_get_ec_grp>:
        MBEDTLS_ECP_DP_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8015600:	b570      	push	{r4, r5, r6, lr}
 8015602:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 8015604:	4605      	mov	r5, r0
 8015606:	b110      	cbz	r0, 801560e <mbedtls_oid_get_ec_grp+0xe>
 8015608:	4c09      	ldr	r4, [pc, #36]	; (8015630 <mbedtls_oid_get_ec_grp+0x30>)
 801560a:	6820      	ldr	r0, [r4, #0]
 801560c:	b910      	cbnz	r0, 8015614 <mbedtls_oid_get_ec_grp+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 801560e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015612:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_ecp_grp_t, grp_id, oid_ecp_grp)
 8015614:	686b      	ldr	r3, [r5, #4]
 8015616:	6862      	ldr	r2, [r4, #4]
 8015618:	429a      	cmp	r2, r3
 801561a:	d103      	bne.n	8015624 <mbedtls_oid_get_ec_grp+0x24>
 801561c:	68a9      	ldr	r1, [r5, #8]
 801561e:	f00c fed5 	bl	80223cc <memcmp>
 8015622:	b108      	cbz	r0, 8015628 <mbedtls_oid_get_ec_grp+0x28>
 8015624:	3414      	adds	r4, #20
 8015626:	e7f0      	b.n	801560a <mbedtls_oid_get_ec_grp+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_ec_grp, oid_ecp_grp_t, grp_id, mbedtls_ecp_group_id, grp_id)
 8015628:	7c23      	ldrb	r3, [r4, #16]
 801562a:	7033      	strb	r3, [r6, #0]
 801562c:	e7f1      	b.n	8015612 <mbedtls_oid_get_ec_grp+0x12>
 801562e:	bf00      	nop
 8015630:	0802c4b8 	.word	0x0802c4b8

08015634 <mbedtls_oid_get_md_alg>:
        MBEDTLS_MD_NONE,
    },
};

FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 8015634:	b570      	push	{r4, r5, r6, lr}
 8015636:	460e      	mov	r6, r1
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 8015638:	4605      	mov	r5, r0
 801563a:	b110      	cbz	r0, 8015642 <mbedtls_oid_get_md_alg+0xe>
 801563c:	4c09      	ldr	r4, [pc, #36]	; (8015664 <mbedtls_oid_get_md_alg+0x30>)
 801563e:	6820      	ldr	r0, [r4, #0]
 8015640:	b910      	cbnz	r0, 8015648 <mbedtls_oid_get_md_alg+0x14>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 8015642:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015646:	bd70      	pop	{r4, r5, r6, pc}
FN_OID_TYPED_FROM_ASN1(oid_md_alg_t, md_alg, oid_md_alg)
 8015648:	686b      	ldr	r3, [r5, #4]
 801564a:	6862      	ldr	r2, [r4, #4]
 801564c:	429a      	cmp	r2, r3
 801564e:	d103      	bne.n	8015658 <mbedtls_oid_get_md_alg+0x24>
 8015650:	68a9      	ldr	r1, [r5, #8]
 8015652:	f00c febb 	bl	80223cc <memcmp>
 8015656:	b108      	cbz	r0, 801565c <mbedtls_oid_get_md_alg+0x28>
 8015658:	3414      	adds	r4, #20
 801565a:	e7f0      	b.n	801563e <mbedtls_oid_get_md_alg+0xa>
FN_OID_GET_ATTR1(mbedtls_oid_get_md_alg, oid_md_alg_t, md_alg, mbedtls_md_type_t, md_alg)
 801565c:	7c23      	ldrb	r3, [r4, #16]
 801565e:	7033      	strb	r3, [r6, #0]
 8015660:	e7f1      	b.n	8015646 <mbedtls_oid_get_md_alg+0x12>
 8015662:	bf00      	nop
 8015664:	0802c56c 	.word	0x0802c56c

08015668 <mbedtls_oid_get_oid_by_md>:
FN_OID_GET_OID_BY_ATTR1(mbedtls_oid_get_oid_by_md, oid_md_alg_t, oid_md_alg, mbedtls_md_type_t, md_alg)
 8015668:	b530      	push	{r4, r5, lr}
 801566a:	4b08      	ldr	r3, [pc, #32]	; (801568c <mbedtls_oid_get_oid_by_md+0x24>)
 801566c:	681c      	ldr	r4, [r3, #0]
 801566e:	b914      	cbnz	r4, 8015676 <mbedtls_oid_get_oid_by_md+0xe>
 8015670:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8015674:	e006      	b.n	8015684 <mbedtls_oid_get_oid_by_md+0x1c>
 8015676:	7c1d      	ldrb	r5, [r3, #16]
 8015678:	4285      	cmp	r5, r0
 801567a:	d104      	bne.n	8015686 <mbedtls_oid_get_oid_by_md+0x1e>
 801567c:	685b      	ldr	r3, [r3, #4]
 801567e:	600c      	str	r4, [r1, #0]
 8015680:	2000      	movs	r0, #0
 8015682:	6013      	str	r3, [r2, #0]
 8015684:	bd30      	pop	{r4, r5, pc}
 8015686:	3314      	adds	r3, #20
 8015688:	e7f0      	b.n	801566c <mbedtls_oid_get_oid_by_md+0x4>
 801568a:	bf00      	nop
 801568c:	0802c56c 	.word	0x0802c56c

08015690 <pem_aes_decrypt>:
 * Decrypt with AES-XXX-CBC, using PBKDF1 for key derivation
 */
static void pem_aes_decrypt( unsigned char aes_iv[16], unsigned int keylen,
                               unsigned char *buf, size_t buflen,
                               const unsigned char *pwd, size_t pwdlen )
{
 8015690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015694:	b0eb      	sub	sp, #428	; 0x1ac
 8015696:	e9dd ab74 	ldrd	sl, fp, [sp, #464]	; 0x1d0
 801569a:	4607      	mov	r7, r0
    mbedtls_aes_context aes_ctx;
    unsigned char aes_key[32];

    mbedtls_aes_init( &aes_ctx );
 801569c:	a824      	add	r0, sp, #144	; 0x90
{
 801569e:	4699      	mov	r9, r3
 80156a0:	460d      	mov	r5, r1
 80156a2:	4690      	mov	r8, r2
    mbedtls_aes_init( &aes_ctx );
 80156a4:	f7f7 ff80 	bl	800d5a8 <mbedtls_aes_init>
    mbedtls_md5_init( &md5_ctx );
 80156a8:	a80e      	add	r0, sp, #56	; 0x38
 80156aa:	f7ff fa51 	bl	8014b50 <mbedtls_md5_init>
    mbedtls_md5_starts( &md5_ctx );
 80156ae:	a80e      	add	r0, sp, #56	; 0x38
 80156b0:	f7ff fa62 	bl	8014b78 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 80156b4:	465a      	mov	r2, fp
 80156b6:	4651      	mov	r1, sl
 80156b8:	a80e      	add	r0, sp, #56	; 0x38
 80156ba:	f7ff fdfe 	bl	80152ba <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 80156be:	ac02      	add	r4, sp, #8
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 80156c0:	2208      	movs	r2, #8
 80156c2:	4639      	mov	r1, r7
 80156c4:	a80e      	add	r0, sp, #56	; 0x38
 80156c6:	f7ff fdf8 	bl	80152ba <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 80156ca:	4621      	mov	r1, r4
 80156cc:	a80e      	add	r0, sp, #56	; 0x38
 80156ce:	f7ff fdf9 	bl	80152c4 <mbedtls_md5_finish>
        memcpy( key, md5sum, keylen );
 80156d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80156d6:	ae06      	add	r6, sp, #24
    if( keylen <= 16 )
 80156d8:	2d10      	cmp	r5, #16
        memcpy( key, md5sum, keylen );
 80156da:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
        mbedtls_md5_free( &md5_ctx );
 80156de:	a80e      	add	r0, sp, #56	; 0x38
    if( keylen <= 16 )
 80156e0:	d120      	bne.n	8015724 <pem_aes_decrypt+0x94>
        mbedtls_md5_free( &md5_ctx );
 80156e2:	f7ff fa39 	bl	8014b58 <mbedtls_md5_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80156e6:	2100      	movs	r1, #0
 80156e8:	460a      	mov	r2, r1
 80156ea:	1863      	adds	r3, r4, r1
 80156ec:	3101      	adds	r1, #1
 80156ee:	2911      	cmp	r1, #17
 80156f0:	d116      	bne.n	8015720 <pem_aes_decrypt+0x90>

    pem_pbkdf1( aes_key, keylen, aes_iv, pwd, pwdlen );

    mbedtls_aes_setkey_dec( &aes_ctx, aes_key, keylen * 8 );
 80156f2:	00ea      	lsls	r2, r5, #3
 80156f4:	a906      	add	r1, sp, #24
 80156f6:	a824      	add	r0, sp, #144	; 0x90
 80156f8:	f7f8 f85a 	bl	800d7b0 <mbedtls_aes_setkey_dec>
    mbedtls_aes_crypt_cbc( &aes_ctx, MBEDTLS_AES_DECRYPT, buflen,
 80156fc:	463b      	mov	r3, r7
 80156fe:	464a      	mov	r2, r9
 8015700:	2100      	movs	r1, #0
 8015702:	e9cd 8800 	strd	r8, r8, [sp]
 8015706:	a824      	add	r0, sp, #144	; 0x90
 8015708:	f7f8 fc73 	bl	800dff2 <mbedtls_aes_crypt_cbc>
                     aes_iv, buf, buf );

    mbedtls_aes_free( &aes_ctx );
 801570c:	a824      	add	r0, sp, #144	; 0x90
 801570e:	f7f7 ff50 	bl	800d5b2 <mbedtls_aes_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015712:	ab06      	add	r3, sp, #24
 8015714:	2200      	movs	r2, #0
 8015716:	3d01      	subs	r5, #1
 8015718:	d22e      	bcs.n	8015778 <pem_aes_decrypt+0xe8>
    mbedtls_zeroize( aes_key, keylen );
}
 801571a:	b06b      	add	sp, #428	; 0x1ac
 801571c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015720:	701a      	strb	r2, [r3, #0]
 8015722:	e7e2      	b.n	80156ea <pem_aes_decrypt+0x5a>
    mbedtls_md5_starts( &md5_ctx );
 8015724:	f7ff fa28 	bl	8014b78 <mbedtls_md5_starts>
    mbedtls_md5_update( &md5_ctx, md5sum,  16 );
 8015728:	2210      	movs	r2, #16
 801572a:	4621      	mov	r1, r4
 801572c:	a80e      	add	r0, sp, #56	; 0x38
 801572e:	f7ff fdc4 	bl	80152ba <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, pwd, pwdlen );
 8015732:	465a      	mov	r2, fp
 8015734:	4651      	mov	r1, sl
 8015736:	a80e      	add	r0, sp, #56	; 0x38
 8015738:	f7ff fdbf 	bl	80152ba <mbedtls_md5_update>
    mbedtls_md5_update( &md5_ctx, iv,  8 );
 801573c:	2208      	movs	r2, #8
 801573e:	4639      	mov	r1, r7
 8015740:	a80e      	add	r0, sp, #56	; 0x38
 8015742:	f7ff fdba 	bl	80152ba <mbedtls_md5_update>
    mbedtls_md5_finish( &md5_ctx, md5sum );
 8015746:	4621      	mov	r1, r4
 8015748:	a80e      	add	r0, sp, #56	; 0x38
 801574a:	f7ff fdbb 	bl	80152c4 <mbedtls_md5_finish>
    if( keylen < 32 )
 801574e:	2d20      	cmp	r5, #32
        use_len = keylen - 16;
 8015750:	bf14      	ite	ne
 8015752:	f1a5 0210 	subne.w	r2, r5, #16
    use_len = 16;
 8015756:	2210      	moveq	r2, #16
    memcpy( key + 16, md5sum, use_len );
 8015758:	a902      	add	r1, sp, #8
 801575a:	a80a      	add	r0, sp, #40	; 0x28
 801575c:	f00c fe44 	bl	80223e8 <memcpy>
    mbedtls_md5_free( &md5_ctx );
 8015760:	a80e      	add	r0, sp, #56	; 0x38
 8015762:	f7ff f9f9 	bl	8014b58 <mbedtls_md5_free>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015766:	2100      	movs	r1, #0
 8015768:	460a      	mov	r2, r1
 801576a:	ab02      	add	r3, sp, #8
 801576c:	440b      	add	r3, r1
 801576e:	3101      	adds	r1, #1
 8015770:	2911      	cmp	r1, #17
 8015772:	d0be      	beq.n	80156f2 <pem_aes_decrypt+0x62>
 8015774:	701a      	strb	r2, [r3, #0]
 8015776:	e7f8      	b.n	801576a <pem_aes_decrypt+0xda>
 8015778:	f803 2b01 	strb.w	r2, [r3], #1
 801577c:	e7cb      	b.n	8015716 <pem_aes_decrypt+0x86>

0801577e <mbedtls_pem_init>:
    memset( ctx, 0, sizeof( mbedtls_pem_context ) );
 801577e:	2300      	movs	r3, #0
 8015780:	6003      	str	r3, [r0, #0]
 8015782:	6043      	str	r3, [r0, #4]
 8015784:	6083      	str	r3, [r0, #8]
}
 8015786:	4770      	bx	lr

08015788 <mbedtls_pem_read_buffer>:
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

int mbedtls_pem_read_buffer( mbedtls_pem_context *ctx, const char *header, const char *footer,
                     const unsigned char *data, const unsigned char *pwd,
                     size_t pwdlen, size_t *use_len )
{
 8015788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801578c:	b089      	sub	sp, #36	; 0x24
 801578e:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
 8015792:	460d      	mov	r5, r1
 8015794:	4693      	mov	fp, r2
 8015796:	469a      	mov	sl, r3
    ((void) pwd);
    ((void) pwdlen);
#endif /* MBEDTLS_MD5_C && MBEDTLS_CIPHER_MODE_CBC &&
          ( MBEDTLS_AES_C || MBEDTLS_DES_C ) */

    if( ctx == NULL )
 8015798:	4606      	mov	r6, r0
 801579a:	2800      	cmp	r0, #0
 801579c:	f000 8126 	beq.w	80159ec <mbedtls_pem_read_buffer+0x264>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );

    s1 = (unsigned char *) strstr( (const char *) data, header );
 80157a0:	4618      	mov	r0, r3
 80157a2:	f00e f936 	bl	8023a12 <strstr>

    if( s1 == NULL )
 80157a6:	4604      	mov	r4, r0
 80157a8:	2800      	cmp	r0, #0
 80157aa:	f000 8121 	beq.w	80159f0 <mbedtls_pem_read_buffer+0x268>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s2 = (unsigned char *) strstr( (const char *) data, footer );
 80157ae:	4659      	mov	r1, fp
 80157b0:	4650      	mov	r0, sl
 80157b2:	f00e f92e 	bl	8023a12 <strstr>

    if( s2 == NULL || s2 <= s1 )
 80157b6:	4681      	mov	r9, r0
 80157b8:	2800      	cmp	r0, #0
 80157ba:	f000 8119 	beq.w	80159f0 <mbedtls_pem_read_buffer+0x268>
 80157be:	4284      	cmp	r4, r0
 80157c0:	f080 8116 	bcs.w	80159f0 <mbedtls_pem_read_buffer+0x268>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    s1 += strlen( header );
 80157c4:	4628      	mov	r0, r5
 80157c6:	f7ea fd0d 	bl	80001e4 <strlen>
    if( *s1 == ' '  ) s1++;
 80157ca:	5c23      	ldrb	r3, [r4, r0]
    s1 += strlen( header );
 80157cc:	1825      	adds	r5, r4, r0
    if( *s1 == ' '  ) s1++;
 80157ce:	2b20      	cmp	r3, #32
 80157d0:	bf08      	it	eq
 80157d2:	3501      	addeq	r5, #1
    if( *s1 == '\r' ) s1++;
 80157d4:	782b      	ldrb	r3, [r5, #0]
 80157d6:	2b0d      	cmp	r3, #13
 80157d8:	bf08      	it	eq
 80157da:	3501      	addeq	r5, #1
    if( *s1 == '\n' ) s1++;
 80157dc:	782b      	ldrb	r3, [r5, #0]
 80157de:	2b0a      	cmp	r3, #10
 80157e0:	f040 8106 	bne.w	80159f0 <mbedtls_pem_read_buffer+0x268>
    else return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );

    end = s2;
    end += strlen( footer );
 80157e4:	4658      	mov	r0, fp
 80157e6:	f7ea fcfd 	bl	80001e4 <strlen>
    if( *end == ' '  ) end++;
 80157ea:	f819 3000 	ldrb.w	r3, [r9, r0]
    end += strlen( footer );
 80157ee:	eb09 0200 	add.w	r2, r9, r0
    if( *end == ' '  ) end++;
 80157f2:	2b20      	cmp	r3, #32
 80157f4:	bf08      	it	eq
 80157f6:	3201      	addeq	r2, #1
    if( *s1 == '\n' ) s1++;
 80157f8:	1c6c      	adds	r4, r5, #1
    if( *end == '\r' ) end++;
 80157fa:	7813      	ldrb	r3, [r2, #0]
 80157fc:	2b0d      	cmp	r3, #13
 80157fe:	bf08      	it	eq
 8015800:	3201      	addeq	r2, #1
    if( *end == '\n' ) end++;
 8015802:	7813      	ldrb	r3, [r2, #0]
 8015804:	2b0a      	cmp	r3, #10
 8015806:	bf08      	it	eq
 8015808:	3201      	addeq	r2, #1
    *use_len = end - data;
 801580a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801580c:	eba2 020a 	sub.w	r2, r2, sl
 8015810:	601a      	str	r2, [r3, #0]

    enc = 0;

    if( s2 - s1 >= 22 && memcmp( s1, "Proc-Type: 4,ENCRYPTED", 22 ) == 0 )
 8015812:	eba9 0304 	sub.w	r3, r9, r4
 8015816:	2b15      	cmp	r3, #21
 8015818:	f340 80ab 	ble.w	8015972 <mbedtls_pem_read_buffer+0x1ea>
 801581c:	4978      	ldr	r1, [pc, #480]	; (8015a00 <mbedtls_pem_read_buffer+0x278>)
 801581e:	2216      	movs	r2, #22
 8015820:	4620      	mov	r0, r4
 8015822:	f00c fdd3 	bl	80223cc <memcmp>
 8015826:	2800      	cmp	r0, #0
 8015828:	f040 80a3 	bne.w	8015972 <mbedtls_pem_read_buffer+0x1ea>
#if defined(MBEDTLS_MD5_C) && defined(MBEDTLS_CIPHER_MODE_CBC) &&         \
    ( defined(MBEDTLS_DES_C) || defined(MBEDTLS_AES_C) )
        enc++;

        s1 += 22;
        if( *s1 == '\r' ) s1++;
 801582c:	7deb      	ldrb	r3, [r5, #23]
 801582e:	2b0d      	cmp	r3, #13
 8015830:	bf0a      	itet	eq
 8015832:	7e2b      	ldrbeq	r3, [r5, #24]
        s1 += 22;
 8015834:	f105 0417 	addne.w	r4, r5, #23
        if( *s1 == '\r' ) s1++;
 8015838:	f105 0418 	addeq.w	r4, r5, #24
        if( *s1 == '\n' ) s1++;
 801583c:	2b0a      	cmp	r3, #10
 801583e:	d004      	beq.n	801584a <mbedtls_pem_read_buffer+0xc2>
        else return( MBEDTLS_ERR_PEM_INVALID_DATA );
 8015840:	4c70      	ldr	r4, [pc, #448]	; (8015a04 <mbedtls_pem_read_buffer+0x27c>)

    ctx->buf = buf;
    ctx->buflen = len;

    return( 0 );
}
 8015842:	4620      	mov	r0, r4
 8015844:	b009      	add	sp, #36	; 0x24
 8015846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( *s1 == '\n' ) s1++;
 801584a:	1c65      	adds	r5, r4, #1
        if( s2 - s1 >= 14 && memcmp( s1, "DEK-Info: AES-", 14 ) == 0 )
 801584c:	eba9 0a05 	sub.w	sl, r9, r5
 8015850:	f1ba 0f0d 	cmp.w	sl, #13
 8015854:	f340 80ce 	ble.w	80159f4 <mbedtls_pem_read_buffer+0x26c>
 8015858:	496b      	ldr	r1, [pc, #428]	; (8015a08 <mbedtls_pem_read_buffer+0x280>)
 801585a:	220e      	movs	r2, #14
 801585c:	4628      	mov	r0, r5
 801585e:	f00c fdb5 	bl	80223cc <memcmp>
 8015862:	2800      	cmp	r0, #0
 8015864:	f040 80c6 	bne.w	80159f4 <mbedtls_pem_read_buffer+0x26c>
            if( s2 - s1 < 22 )
 8015868:	f1ba 0f15 	cmp.w	sl, #21
 801586c:	f340 80c2 	ble.w	80159f4 <mbedtls_pem_read_buffer+0x26c>
            else if( memcmp( s1, "DEK-Info: AES-128-CBC,", 22 ) == 0 )
 8015870:	4966      	ldr	r1, [pc, #408]	; (8015a0c <mbedtls_pem_read_buffer+0x284>)
 8015872:	2216      	movs	r2, #22
 8015874:	4628      	mov	r0, r5
 8015876:	f00c fda9 	bl	80223cc <memcmp>
 801587a:	b1b0      	cbz	r0, 80158aa <mbedtls_pem_read_buffer+0x122>
            else if( memcmp( s1, "DEK-Info: AES-192-CBC,", 22 ) == 0 )
 801587c:	4964      	ldr	r1, [pc, #400]	; (8015a10 <mbedtls_pem_read_buffer+0x288>)
 801587e:	2216      	movs	r2, #22
 8015880:	4628      	mov	r0, r5
 8015882:	f00c fda3 	bl	80223cc <memcmp>
 8015886:	b190      	cbz	r0, 80158ae <mbedtls_pem_read_buffer+0x126>
            else if( memcmp( s1, "DEK-Info: AES-256-CBC,", 22 ) == 0 )
 8015888:	4962      	ldr	r1, [pc, #392]	; (8015a14 <mbedtls_pem_read_buffer+0x28c>)
 801588a:	2216      	movs	r2, #22
 801588c:	4628      	mov	r0, r5
 801588e:	f00c fd9d 	bl	80223cc <memcmp>
 8015892:	2800      	cmp	r0, #0
 8015894:	f040 80ae 	bne.w	80159f4 <mbedtls_pem_read_buffer+0x26c>
                enc_alg = MBEDTLS_CIPHER_AES_256_CBC;
 8015898:	2507      	movs	r5, #7
            s1 += 22;
 801589a:	f104 0317 	add.w	r3, r4, #23
            if( s2 - s1 < 32 || pem_get_iv( s1, pem_iv, 16 ) != 0 )
 801589e:	eba9 0303 	sub.w	r3, r9, r3
 80158a2:	2b1f      	cmp	r3, #31
 80158a4:	dc05      	bgt.n	80158b2 <mbedtls_pem_read_buffer+0x12a>
                return( MBEDTLS_ERR_PEM_INVALID_ENC_IV );
 80158a6:	4c5c      	ldr	r4, [pc, #368]	; (8015a18 <mbedtls_pem_read_buffer+0x290>)
 80158a8:	e7cb      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
                enc_alg = MBEDTLS_CIPHER_AES_128_CBC;
 80158aa:	2505      	movs	r5, #5
 80158ac:	e7f5      	b.n	801589a <mbedtls_pem_read_buffer+0x112>
                enc_alg = MBEDTLS_CIPHER_AES_192_CBC;
 80158ae:	2506      	movs	r5, #6
 80158b0:	e7f3      	b.n	801589a <mbedtls_pem_read_buffer+0x112>
    memset( iv, 0, iv_len );
 80158b2:	f10d 0a10 	add.w	sl, sp, #16
 80158b6:	2210      	movs	r2, #16
 80158b8:	2100      	movs	r1, #0
 80158ba:	4650      	mov	r0, sl
 80158bc:	f00c fdbc 	bl	8022438 <memset>
    for( i = 0; i < iv_len * 2; i++, s++ )
 80158c0:	f104 0016 	add.w	r0, r4, #22
 80158c4:	2200      	movs	r2, #0
        if( *s >= '0' && *s <= '9' ) j = *s - '0'; else
 80158c6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80158ca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80158ce:	fa5f fc83 	uxtb.w	ip, r3
 80158d2:	f1bc 0f09 	cmp.w	ip, #9
 80158d6:	d905      	bls.n	80158e4 <mbedtls_pem_read_buffer+0x15c>
        if( *s >= 'A' && *s <= 'F' ) j = *s - '7'; else
 80158d8:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80158dc:	2b05      	cmp	r3, #5
 80158de:	d814      	bhi.n	801590a <mbedtls_pem_read_buffer+0x182>
 80158e0:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80158e4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 80158e8:	07d1      	lsls	r1, r2, #31
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80158ea:	f81a 100c 	ldrb.w	r1, [sl, ip]
        k = ( ( i & 1 ) != 0 ) ? j : j << 4;
 80158ee:	bf58      	it	pl
 80158f0:	011b      	lslpl	r3, r3, #4
    for( i = 0; i < iv_len * 2; i++, s++ )
 80158f2:	3201      	adds	r2, #1
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80158f4:	430b      	orrs	r3, r1
    for( i = 0; i < iv_len * 2; i++, s++ )
 80158f6:	2a20      	cmp	r2, #32
        iv[i >> 1] = (unsigned char)( iv[i >> 1] | k );
 80158f8:	f80a 300c 	strb.w	r3, [sl, ip]
    for( i = 0; i < iv_len * 2; i++, s++ )
 80158fc:	d1e3      	bne.n	80158c6 <mbedtls_pem_read_buffer+0x13e>
        if( *s1 == '\r' ) s1++;
 80158fe:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8015902:	2b0d      	cmp	r3, #13
 8015904:	d008      	beq.n	8015918 <mbedtls_pem_read_buffer+0x190>
            s1 += 32;
 8015906:	3437      	adds	r4, #55	; 0x37
 8015908:	e007      	b.n	801591a <mbedtls_pem_read_buffer+0x192>
        if( *s >= 'a' && *s <= 'f' ) j = *s - 'W'; else
 801590a:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 801590e:	2b05      	cmp	r3, #5
 8015910:	d8c9      	bhi.n	80158a6 <mbedtls_pem_read_buffer+0x11e>
 8015912:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 8015916:	e7e5      	b.n	80158e4 <mbedtls_pem_read_buffer+0x15c>
        if( *s1 == '\r' ) s1++;
 8015918:	3438      	adds	r4, #56	; 0x38
        if( *s1 == '\n' ) s1++;
 801591a:	7823      	ldrb	r3, [r4, #0]
 801591c:	2b0a      	cmp	r3, #10
 801591e:	d18f      	bne.n	8015840 <mbedtls_pem_read_buffer+0xb8>
 8015920:	3401      	adds	r4, #1
        enc++;
 8015922:	f04f 0a01 	mov.w	sl, #1
    if( s1 >= s2 )
 8015926:	454c      	cmp	r4, r9
 8015928:	d28a      	bcs.n	8015840 <mbedtls_pem_read_buffer+0xb8>
    ret = mbedtls_base64_decode( NULL, 0, &len, s1, s2 - s1 );
 801592a:	2100      	movs	r1, #0
 801592c:	eba9 0904 	sub.w	r9, r9, r4
 8015930:	f8cd 9000 	str.w	r9, [sp]
 8015934:	4623      	mov	r3, r4
 8015936:	aa03      	add	r2, sp, #12
 8015938:	4608      	mov	r0, r1
 801593a:	f7f8 fddf 	bl	800e4fc <mbedtls_base64_decode>
    if( ret == MBEDTLS_ERR_BASE64_INVALID_CHARACTER )
 801593e:	302c      	adds	r0, #44	; 0x2c
 8015940:	d05a      	beq.n	80159f8 <mbedtls_pem_read_buffer+0x270>
    if( ( buf = mbedtls_calloc( 1, len ) ) == NULL )
 8015942:	4b36      	ldr	r3, [pc, #216]	; (8015a1c <mbedtls_pem_read_buffer+0x294>)
 8015944:	9903      	ldr	r1, [sp, #12]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2001      	movs	r0, #1
 801594a:	4798      	blx	r3
 801594c:	4683      	mov	fp, r0
 801594e:	2800      	cmp	r0, #0
 8015950:	d054      	beq.n	80159fc <mbedtls_pem_read_buffer+0x274>
    if( ( ret = mbedtls_base64_decode( buf, len, &len, s1, s2 - s1 ) ) != 0 )
 8015952:	4623      	mov	r3, r4
 8015954:	9903      	ldr	r1, [sp, #12]
 8015956:	f8cd 9000 	str.w	r9, [sp]
 801595a:	aa03      	add	r2, sp, #12
 801595c:	f7f8 fdce 	bl	800e4fc <mbedtls_base64_decode>
 8015960:	4604      	mov	r4, r0
 8015962:	b148      	cbz	r0, 8015978 <mbedtls_pem_read_buffer+0x1f0>
        mbedtls_free( buf );
 8015964:	4b2e      	ldr	r3, [pc, #184]	; (8015a20 <mbedtls_pem_read_buffer+0x298>)
 8015966:	4658      	mov	r0, fp
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	4798      	blx	r3
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 801596c:	f5a4 5488 	sub.w	r4, r4, #4352	; 0x1100
 8015970:	e767      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
    mbedtls_cipher_type_t enc_alg = MBEDTLS_CIPHER_NONE;
 8015972:	2500      	movs	r5, #0
    enc = 0;
 8015974:	46aa      	mov	sl, r5
 8015976:	e7d6      	b.n	8015926 <mbedtls_pem_read_buffer+0x19e>
    if( enc != 0 )
 8015978:	f1ba 0f00 	cmp.w	sl, #0
 801597c:	d031      	beq.n	80159e2 <mbedtls_pem_read_buffer+0x25a>
        if( pwd == NULL )
 801597e:	b92f      	cbnz	r7, 801598c <mbedtls_pem_read_buffer+0x204>
            mbedtls_free( buf );
 8015980:	4b27      	ldr	r3, [pc, #156]	; (8015a20 <mbedtls_pem_read_buffer+0x298>)
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 8015982:	4c28      	ldr	r4, [pc, #160]	; (8015a24 <mbedtls_pem_read_buffer+0x29c>)
            mbedtls_free( buf );
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	4658      	mov	r0, fp
 8015988:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_REQUIRED );
 801598a:	e75a      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
        if( enc_alg == MBEDTLS_CIPHER_AES_128_CBC )
 801598c:	2d05      	cmp	r5, #5
 801598e:	9b03      	ldr	r3, [sp, #12]
 8015990:	d118      	bne.n	80159c4 <mbedtls_pem_read_buffer+0x23c>
            pem_aes_decrypt( pem_iv, 16, buf, len, pwd, pwdlen );
 8015992:	e9cd 7800 	strd	r7, r8, [sp]
 8015996:	2110      	movs	r1, #16
 8015998:	465a      	mov	r2, fp
 801599a:	eb0d 0001 	add.w	r0, sp, r1
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 801599e:	f7ff fe77 	bl	8015690 <pem_aes_decrypt>
        if( len <= 2 || buf[0] != 0x30 || buf[1] > 0x83 )
 80159a2:	9b03      	ldr	r3, [sp, #12]
 80159a4:	2b02      	cmp	r3, #2
 80159a6:	d907      	bls.n	80159b8 <mbedtls_pem_read_buffer+0x230>
 80159a8:	f89b 3000 	ldrb.w	r3, [fp]
 80159ac:	2b30      	cmp	r3, #48	; 0x30
 80159ae:	d103      	bne.n	80159b8 <mbedtls_pem_read_buffer+0x230>
 80159b0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80159b4:	2b83      	cmp	r3, #131	; 0x83
 80159b6:	d914      	bls.n	80159e2 <mbedtls_pem_read_buffer+0x25a>
            mbedtls_free( buf );
 80159b8:	4b19      	ldr	r3, [pc, #100]	; (8015a20 <mbedtls_pem_read_buffer+0x298>)
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 80159ba:	4c1b      	ldr	r4, [pc, #108]	; (8015a28 <mbedtls_pem_read_buffer+0x2a0>)
            mbedtls_free( buf );
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	4658      	mov	r0, fp
 80159c0:	4798      	blx	r3
            return( MBEDTLS_ERR_PEM_PASSWORD_MISMATCH );
 80159c2:	e73e      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
        else if( enc_alg == MBEDTLS_CIPHER_AES_192_CBC )
 80159c4:	2d06      	cmp	r5, #6
 80159c6:	d105      	bne.n	80159d4 <mbedtls_pem_read_buffer+0x24c>
            pem_aes_decrypt( pem_iv, 24, buf, len, pwd, pwdlen );
 80159c8:	e9cd 7800 	strd	r7, r8, [sp]
 80159cc:	465a      	mov	r2, fp
 80159ce:	2118      	movs	r1, #24
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 80159d0:	a804      	add	r0, sp, #16
 80159d2:	e7e4      	b.n	801599e <mbedtls_pem_read_buffer+0x216>
        else if( enc_alg == MBEDTLS_CIPHER_AES_256_CBC )
 80159d4:	2d07      	cmp	r5, #7
 80159d6:	d1e4      	bne.n	80159a2 <mbedtls_pem_read_buffer+0x21a>
            pem_aes_decrypt( pem_iv, 32, buf, len, pwd, pwdlen );
 80159d8:	e9cd 7800 	strd	r7, r8, [sp]
 80159dc:	465a      	mov	r2, fp
 80159de:	2120      	movs	r1, #32
 80159e0:	e7f6      	b.n	80159d0 <mbedtls_pem_read_buffer+0x248>
    ctx->buflen = len;
 80159e2:	9b03      	ldr	r3, [sp, #12]
    ctx->buf = buf;
 80159e4:	f8c6 b000 	str.w	fp, [r6]
    ctx->buflen = len;
 80159e8:	6073      	str	r3, [r6, #4]
    return( 0 );
 80159ea:	e72a      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_BAD_INPUT_DATA );
 80159ec:	4c0f      	ldr	r4, [pc, #60]	; (8015a2c <mbedtls_pem_read_buffer+0x2a4>)
 80159ee:	e728      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT );
 80159f0:	4c0f      	ldr	r4, [pc, #60]	; (8015a30 <mbedtls_pem_read_buffer+0x2a8>)
 80159f2:	e726      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
            return( MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG );
 80159f4:	4c0f      	ldr	r4, [pc, #60]	; (8015a34 <mbedtls_pem_read_buffer+0x2ac>)
 80159f6:	e724      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_INVALID_DATA + ret );
 80159f8:	4c0f      	ldr	r4, [pc, #60]	; (8015a38 <mbedtls_pem_read_buffer+0x2b0>)
 80159fa:	e722      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
        return( MBEDTLS_ERR_PEM_ALLOC_FAILED );
 80159fc:	4c0f      	ldr	r4, [pc, #60]	; (8015a3c <mbedtls_pem_read_buffer+0x2b4>)
 80159fe:	e720      	b.n	8015842 <mbedtls_pem_read_buffer+0xba>
 8015a00:	08030aed 	.word	0x08030aed
 8015a04:	ffffef00 	.word	0xffffef00
 8015a08:	08030b04 	.word	0x08030b04
 8015a0c:	08030b13 	.word	0x08030b13
 8015a10:	08030b2a 	.word	0x08030b2a
 8015a14:	08030b41 	.word	0x08030b41
 8015a18:	ffffee00 	.word	0xffffee00
 8015a1c:	200005a0 	.word	0x200005a0
 8015a20:	200005a4 	.word	0x200005a4
 8015a24:	ffffed00 	.word	0xffffed00
 8015a28:	ffffec80 	.word	0xffffec80
 8015a2c:	ffffeb80 	.word	0xffffeb80
 8015a30:	ffffef80 	.word	0xffffef80
 8015a34:	ffffed80 	.word	0xffffed80
 8015a38:	ffffeed4 	.word	0xffffeed4
 8015a3c:	ffffee80 	.word	0xffffee80

08015a40 <mbedtls_pem_free>:

void mbedtls_pem_free( mbedtls_pem_context *ctx )
{
 8015a40:	b538      	push	{r3, r4, r5, lr}
    mbedtls_free( ctx->buf );
 8015a42:	4d08      	ldr	r5, [pc, #32]	; (8015a64 <mbedtls_pem_free+0x24>)
{
 8015a44:	4604      	mov	r4, r0
    mbedtls_free( ctx->buf );
 8015a46:	682b      	ldr	r3, [r5, #0]
 8015a48:	6800      	ldr	r0, [r0, #0]
 8015a4a:	4798      	blx	r3
    mbedtls_free( ctx->info );
 8015a4c:	682b      	ldr	r3, [r5, #0]
 8015a4e:	68a0      	ldr	r0, [r4, #8]
 8015a50:	4798      	blx	r3
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015a52:	f104 030c 	add.w	r3, r4, #12
 8015a56:	2200      	movs	r2, #0
 8015a58:	429c      	cmp	r4, r3
 8015a5a:	d100      	bne.n	8015a5e <mbedtls_pem_free+0x1e>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pem_context ) );
}
 8015a5c:	bd38      	pop	{r3, r4, r5, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015a5e:	f804 2b01 	strb.w	r2, [r4], #1
 8015a62:	e7f9      	b.n	8015a58 <mbedtls_pem_free+0x18>
 8015a64:	200005a4 	.word	0x200005a4

08015a68 <mbedtls_pk_init>:
/*
 * Initialise a mbedtls_pk_context
 */
void mbedtls_pk_init( mbedtls_pk_context *ctx )
{
    if( ctx == NULL )
 8015a68:	b110      	cbz	r0, 8015a70 <mbedtls_pk_init+0x8>
        return;

    ctx->pk_info = NULL;
 8015a6a:	2300      	movs	r3, #0
    ctx->pk_ctx = NULL;
 8015a6c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8015a70:	4770      	bx	lr

08015a72 <mbedtls_pk_free>:

/*
 * Free (the components of) a mbedtls_pk_context
 */
void mbedtls_pk_free( mbedtls_pk_context *ctx )
{
 8015a72:	b510      	push	{r4, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015a74:	4604      	mov	r4, r0
 8015a76:	b148      	cbz	r0, 8015a8c <mbedtls_pk_free+0x1a>
 8015a78:	6803      	ldr	r3, [r0, #0]
 8015a7a:	b13b      	cbz	r3, 8015a8c <mbedtls_pk_free+0x1a>
        return;

    ctx->pk_info->ctx_free_func( ctx->pk_ctx );
 8015a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a7e:	6840      	ldr	r0, [r0, #4]
 8015a80:	4798      	blx	r3
static void mbedtls_zeroize( void *v, size_t n ) {
 8015a82:	f104 0308 	add.w	r3, r4, #8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015a86:	2200      	movs	r2, #0
 8015a88:	429c      	cmp	r4, r3
 8015a8a:	d100      	bne.n	8015a8e <mbedtls_pk_free+0x1c>

    mbedtls_zeroize( ctx, sizeof( mbedtls_pk_context ) );
}
 8015a8c:	bd10      	pop	{r4, pc}
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8015a8e:	f804 2b01 	strb.w	r2, [r4], #1
 8015a92:	e7f9      	b.n	8015a88 <mbedtls_pk_free+0x16>

08015a94 <mbedtls_pk_info_from_type>:
/*
 * Get pk_info structure from type
 */
const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
{
    switch( pk_type ) {
 8015a94:	3801      	subs	r0, #1
 8015a96:	b2c0      	uxtb	r0, r0
 8015a98:	2803      	cmp	r0, #3
 8015a9a:	bf9a      	itte	ls
 8015a9c:	4b02      	ldrls	r3, [pc, #8]	; (8015aa8 <mbedtls_pk_info_from_type+0x14>)
 8015a9e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
{
 8015aa2:	2000      	movhi	r0, #0
#endif
        /* MBEDTLS_PK_RSA_ALT omitted on purpose */
        default:
            return( NULL );
    }
}
 8015aa4:	4770      	bx	lr
 8015aa6:	bf00      	nop
 8015aa8:	0802c604 	.word	0x0802c604

08015aac <mbedtls_pk_setup>:

/*
 * Initialise context
 */
int mbedtls_pk_setup( mbedtls_pk_context *ctx, const mbedtls_pk_info_t *info )
{
 8015aac:	b570      	push	{r4, r5, r6, lr}
 8015aae:	460e      	mov	r6, r1
    if( ctx == NULL || info == NULL || ctx->pk_info != NULL )
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	b148      	cbz	r0, 8015ac8 <mbedtls_pk_setup+0x1c>
 8015ab4:	b141      	cbz	r1, 8015ac8 <mbedtls_pk_setup+0x1c>
 8015ab6:	6804      	ldr	r4, [r0, #0]
 8015ab8:	b934      	cbnz	r4, 8015ac8 <mbedtls_pk_setup+0x1c>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ( ctx->pk_ctx = info->ctx_alloc_func() ) == NULL )
 8015aba:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8015abc:	4798      	blx	r3
 8015abe:	6068      	str	r0, [r5, #4]
 8015ac0:	b120      	cbz	r0, 8015acc <mbedtls_pk_setup+0x20>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );

    ctx->pk_info = info;
 8015ac2:	602e      	str	r6, [r5, #0]

    return( 0 );
 8015ac4:	4620      	mov	r0, r4
}
 8015ac6:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015ac8:	4801      	ldr	r0, [pc, #4]	; (8015ad0 <mbedtls_pk_setup+0x24>)
 8015aca:	e7fc      	b.n	8015ac6 <mbedtls_pk_setup+0x1a>
        return( MBEDTLS_ERR_PK_ALLOC_FAILED );
 8015acc:	4801      	ldr	r0, [pc, #4]	; (8015ad4 <mbedtls_pk_setup+0x28>)
 8015ace:	e7fa      	b.n	8015ac6 <mbedtls_pk_setup+0x1a>
 8015ad0:	ffffc180 	.word	0xffffc180
 8015ad4:	ffffc080 	.word	0xffffc080

08015ad8 <mbedtls_pk_can_do>:

/*
 * Tell if a PK can do the operations of the given type
 */
int mbedtls_pk_can_do( const mbedtls_pk_context *ctx, mbedtls_pk_type_t type )
{
 8015ad8:	4603      	mov	r3, r0
 8015ada:	4608      	mov	r0, r1
    /* null or NONE context can't do anything */
    if( ctx == NULL || ctx->pk_info == NULL )
 8015adc:	b11b      	cbz	r3, 8015ae6 <mbedtls_pk_can_do+0xe>
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	b10b      	cbz	r3, 8015ae6 <mbedtls_pk_can_do+0xe>
        return( 0 );

    return( ctx->pk_info->can_do( type ) );
 8015ae2:	68db      	ldr	r3, [r3, #12]
 8015ae4:	4718      	bx	r3
}
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	4770      	bx	lr
	...

08015aec <mbedtls_pk_verify>:
 * Verify a signature
 */
int mbedtls_pk_verify( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
               const unsigned char *hash, size_t hash_len,
               const unsigned char *sig, size_t sig_len )
{
 8015aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015af0:	460d      	mov	r5, r1
 8015af2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8015af6:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015af8:	4604      	mov	r4, r0
 8015afa:	b910      	cbnz	r0, 8015b02 <mbedtls_pk_verify+0x16>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015afc:	480e      	ldr	r0, [pc, #56]	; (8015b38 <mbedtls_pk_verify+0x4c>)
    if( ctx->pk_info->verify_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                       sig, sig_len ) );
}
 8015afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015b02:	6802      	ldr	r2, [r0, #0]
 8015b04:	2a00      	cmp	r2, #0
 8015b06:	d0f9      	beq.n	8015afc <mbedtls_pk_verify+0x10>
    if( *hash_len != 0 )
 8015b08:	b93b      	cbnz	r3, 8015b1a <mbedtls_pk_verify+0x2e>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8015b0a:	4608      	mov	r0, r1
 8015b0c:	f7fe feca 	bl	80148a4 <mbedtls_md_info_from_type>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	d0f3      	beq.n	8015afc <mbedtls_pk_verify+0x10>
    *hash_len = mbedtls_md_get_size( md_info );
 8015b14:	f7ff f816 	bl	8014b44 <mbedtls_md_get_size>
 8015b18:	4603      	mov	r3, r0
    if( ctx->pk_info->verify_func == NULL )
 8015b1a:	6822      	ldr	r2, [r4, #0]
 8015b1c:	6917      	ldr	r7, [r2, #16]
 8015b1e:	b147      	cbz	r7, 8015b32 <mbedtls_pk_verify+0x46>
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015b20:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8015b24:	4632      	mov	r2, r6
 8015b26:	6860      	ldr	r0, [r4, #4]
 8015b28:	4629      	mov	r1, r5
 8015b2a:	46bc      	mov	ip, r7
}
 8015b2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->verify_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015b30:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015b32:	4802      	ldr	r0, [pc, #8]	; (8015b3c <mbedtls_pk_verify+0x50>)
 8015b34:	e7e3      	b.n	8015afe <mbedtls_pk_verify+0x12>
 8015b36:	bf00      	nop
 8015b38:	ffffc180 	.word	0xffffc180
 8015b3c:	ffffc100 	.word	0xffffc100

08015b40 <mbedtls_pk_sign>:
 */
int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
             const unsigned char *hash, size_t hash_len,
             unsigned char *sig, size_t *sig_len,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b44:	460d      	mov	r5, r1
 8015b46:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
 8015b4a:	e9dd 9a0a 	ldrd	r9, sl, [sp, #40]	; 0x28
 8015b4e:	4616      	mov	r6, r2
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015b50:	4604      	mov	r4, r0
 8015b52:	b910      	cbnz	r0, 8015b5a <mbedtls_pk_sign+0x1a>
        pk_hashlen_helper( md_alg, &hash_len ) != 0 )
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015b54:	4810      	ldr	r0, [pc, #64]	; (8015b98 <mbedtls_pk_sign+0x58>)
    if( ctx->pk_info->sign_func == NULL )
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                     sig, sig_len, f_rng, p_rng ) );
}
 8015b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ctx == NULL || ctx->pk_info == NULL ||
 8015b5a:	6802      	ldr	r2, [r0, #0]
 8015b5c:	2a00      	cmp	r2, #0
 8015b5e:	d0f9      	beq.n	8015b54 <mbedtls_pk_sign+0x14>
    if( *hash_len != 0 )
 8015b60:	b93b      	cbnz	r3, 8015b72 <mbedtls_pk_sign+0x32>
    if( ( md_info = mbedtls_md_info_from_type( md_alg ) ) == NULL )
 8015b62:	4608      	mov	r0, r1
 8015b64:	f7fe fe9e 	bl	80148a4 <mbedtls_md_info_from_type>
 8015b68:	2800      	cmp	r0, #0
 8015b6a:	d0f3      	beq.n	8015b54 <mbedtls_pk_sign+0x14>
    *hash_len = mbedtls_md_get_size( md_info );
 8015b6c:	f7fe ffea 	bl	8014b44 <mbedtls_md_get_size>
 8015b70:	4603      	mov	r3, r0
    if( ctx->pk_info->sign_func == NULL )
 8015b72:	6822      	ldr	r2, [r4, #0]
 8015b74:	f8d2 e014 	ldr.w	lr, [r2, #20]
 8015b78:	f1be 0f00 	cmp.w	lr, #0
 8015b7c:	d00a      	beq.n	8015b94 <mbedtls_pk_sign+0x54>
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015b7e:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8015b82:	e9cd 7808 	strd	r7, r8, [sp, #32]
 8015b86:	4632      	mov	r2, r6
 8015b88:	6860      	ldr	r0, [r4, #4]
 8015b8a:	4629      	mov	r1, r5
 8015b8c:	46f4      	mov	ip, lr
}
 8015b8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
 8015b92:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015b94:	4801      	ldr	r0, [pc, #4]	; (8015b9c <mbedtls_pk_sign+0x5c>)
 8015b96:	e7de      	b.n	8015b56 <mbedtls_pk_sign+0x16>
 8015b98:	ffffc180 	.word	0xffffc180
 8015b9c:	ffffc100 	.word	0xffffc100

08015ba0 <mbedtls_pk_encrypt>:
 */
int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
                const unsigned char *input, size_t ilen,
                unsigned char *output, size_t *olen, size_t osize,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8015ba0:	b410      	push	{r4}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015ba2:	b140      	cbz	r0, 8015bb6 <mbedtls_pk_encrypt+0x16>
 8015ba4:	6804      	ldr	r4, [r0, #0]
 8015ba6:	b134      	cbz	r4, 8015bb6 <mbedtls_pk_encrypt+0x16>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->encrypt_func == NULL )
 8015ba8:	69e4      	ldr	r4, [r4, #28]
 8015baa:	b144      	cbz	r4, 8015bbe <mbedtls_pk_encrypt+0x1e>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8015bac:	46a4      	mov	ip, r4
 8015bae:	6840      	ldr	r0, [r0, #4]
                output, olen, osize, f_rng, p_rng ) );
}
 8015bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
    return( ctx->pk_info->encrypt_func( ctx->pk_ctx, input, ilen,
 8015bb4:	4760      	bx	ip
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015bb6:	4803      	ldr	r0, [pc, #12]	; (8015bc4 <mbedtls_pk_encrypt+0x24>)
}
 8015bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015bbc:	4770      	bx	lr
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015bbe:	4802      	ldr	r0, [pc, #8]	; (8015bc8 <mbedtls_pk_encrypt+0x28>)
 8015bc0:	e7fa      	b.n	8015bb8 <mbedtls_pk_encrypt+0x18>
 8015bc2:	bf00      	nop
 8015bc4:	ffffc180 	.word	0xffffc180
 8015bc8:	ffffc100 	.word	0xffffc100

08015bcc <mbedtls_pk_get_bitlen>:
/*
 * Get key size in bits
 */
size_t mbedtls_pk_get_bitlen( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015bcc:	b120      	cbz	r0, 8015bd8 <mbedtls_pk_get_bitlen+0xc>
 8015bce:	6803      	ldr	r3, [r0, #0]
 8015bd0:	b113      	cbz	r3, 8015bd8 <mbedtls_pk_get_bitlen+0xc>
        return( 0 );

    return( ctx->pk_info->get_bitlen( ctx->pk_ctx ) );
 8015bd2:	689b      	ldr	r3, [r3, #8]
 8015bd4:	6840      	ldr	r0, [r0, #4]
 8015bd6:	4718      	bx	r3
}
 8015bd8:	2000      	movs	r0, #0
 8015bda:	4770      	bx	lr

08015bdc <mbedtls_pk_verify_ext>:
{
 8015bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be0:	b087      	sub	sp, #28
 8015be2:	e9dd 9b10 	ldrd	r9, fp, [sp, #64]	; 0x40
 8015be6:	e9dd a812 	ldrd	sl, r8, [sp, #72]	; 0x48
 8015bea:	4607      	mov	r7, r0
 8015bec:	460c      	mov	r4, r1
 8015bee:	461e      	mov	r6, r3
    if( ctx == NULL || ctx->pk_info == NULL )
 8015bf0:	4615      	mov	r5, r2
 8015bf2:	b922      	cbnz	r2, 8015bfe <mbedtls_pk_verify_ext+0x22>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015bf4:	4c22      	ldr	r4, [pc, #136]	; (8015c80 <mbedtls_pk_verify_ext+0xa4>)
}
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	b007      	add	sp, #28
 8015bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015bfe:	6813      	ldr	r3, [r2, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d0f7      	beq.n	8015bf4 <mbedtls_pk_verify_ext+0x18>
    if( ! mbedtls_pk_can_do( ctx, type ) )
 8015c04:	4601      	mov	r1, r0
 8015c06:	4610      	mov	r0, r2
 8015c08:	f7ff ff66 	bl	8015ad8 <mbedtls_pk_can_do>
 8015c0c:	b398      	cbz	r0, 8015c76 <mbedtls_pk_verify_ext+0x9a>
    if( type == MBEDTLS_PK_RSASSA_PSS )
 8015c0e:	2f06      	cmp	r7, #6
 8015c10:	d124      	bne.n	8015c5c <mbedtls_pk_verify_ext+0x80>
        if( options == NULL )
 8015c12:	2c00      	cmp	r4, #0
 8015c14:	d0ee      	beq.n	8015bf4 <mbedtls_pk_verify_ext+0x18>
 *
 * \return          Key length in bytes, or 0 on error
 */
static inline size_t mbedtls_pk_get_len( const mbedtls_pk_context *ctx )
{
    return( ( mbedtls_pk_get_bitlen( ctx ) + 7 ) / 8 );
 8015c16:	4628      	mov	r0, r5
 8015c18:	f7ff ffd8 	bl	8015bcc <mbedtls_pk_get_bitlen>
 8015c1c:	3007      	adds	r0, #7
        if( sig_len < mbedtls_pk_get_len( ctx ) )
 8015c1e:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
 8015c22:	d32a      	bcc.n	8015c7a <mbedtls_pk_verify_ext+0x9e>
        ret = mbedtls_rsa_rsassa_pss_verify_ext( mbedtls_pk_rsa( *ctx ),
 8015c24:	f8cd a014 	str.w	sl, [sp, #20]
 8015c28:	6863      	ldr	r3, [r4, #4]
 8015c2a:	9304      	str	r3, [sp, #16]
 8015c2c:	7823      	ldrb	r3, [r4, #0]
 8015c2e:	e9cd 6b00 	strd	r6, fp, [sp]
 8015c32:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8015c36:	2300      	movs	r3, #0
 8015c38:	6868      	ldr	r0, [r5, #4]
 8015c3a:	461a      	mov	r2, r3
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	f001 fcb3 	bl	80175a8 <mbedtls_rsa_rsassa_pss_verify_ext>
        if( ret != 0 )
 8015c42:	4604      	mov	r4, r0
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d1d6      	bne.n	8015bf6 <mbedtls_pk_verify_ext+0x1a>
 8015c48:	4628      	mov	r0, r5
 8015c4a:	f7ff ffbf 	bl	8015bcc <mbedtls_pk_get_bitlen>
            return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015c4e:	4b0d      	ldr	r3, [pc, #52]	; (8015c84 <mbedtls_pk_verify_ext+0xa8>)
 8015c50:	3007      	adds	r0, #7
 8015c52:	ebb8 0fd0 	cmp.w	r8, r0, lsr #3
 8015c56:	bf88      	it	hi
 8015c58:	461c      	movhi	r4, r3
 8015c5a:	e7cc      	b.n	8015bf6 <mbedtls_pk_verify_ext+0x1a>
    if( options != NULL )
 8015c5c:	2c00      	cmp	r4, #0
 8015c5e:	d1c9      	bne.n	8015bf4 <mbedtls_pk_verify_ext+0x18>
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015c60:	465b      	mov	r3, fp
 8015c62:	464a      	mov	r2, r9
 8015c64:	4631      	mov	r1, r6
 8015c66:	4628      	mov	r0, r5
 8015c68:	e9cd a810 	strd	sl, r8, [sp, #64]	; 0x40
}
 8015c6c:	b007      	add	sp, #28
 8015c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return( mbedtls_pk_verify( ctx, md_alg, hash, hash_len, sig, sig_len ) );
 8015c72:	f7ff bf3b 	b.w	8015aec <mbedtls_pk_verify>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015c76:	4c04      	ldr	r4, [pc, #16]	; (8015c88 <mbedtls_pk_verify_ext+0xac>)
 8015c78:	e7bd      	b.n	8015bf6 <mbedtls_pk_verify_ext+0x1a>
            return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015c7a:	4c04      	ldr	r4, [pc, #16]	; (8015c8c <mbedtls_pk_verify_ext+0xb0>)
 8015c7c:	e7bb      	b.n	8015bf6 <mbedtls_pk_verify_ext+0x1a>
 8015c7e:	bf00      	nop
 8015c80:	ffffc180 	.word	0xffffc180
 8015c84:	ffffc700 	.word	0xffffc700
 8015c88:	ffffc100 	.word	0xffffc100
 8015c8c:	ffffbc80 	.word	0xffffbc80

08015c90 <mbedtls_pk_debug>:

/*
 * Export debug information
 */
int mbedtls_pk_debug( const mbedtls_pk_context *ctx, mbedtls_pk_debug_item *items )
{
 8015c90:	b508      	push	{r3, lr}
    if( ctx == NULL || ctx->pk_info == NULL )
 8015c92:	b138      	cbz	r0, 8015ca4 <mbedtls_pk_debug+0x14>
 8015c94:	6803      	ldr	r3, [r0, #0]
 8015c96:	b12b      	cbz	r3, 8015ca4 <mbedtls_pk_debug+0x14>
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );

    if( ctx->pk_info->debug_func == NULL )
 8015c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c9a:	b12b      	cbz	r3, 8015ca8 <mbedtls_pk_debug+0x18>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );

    ctx->pk_info->debug_func( ctx->pk_ctx, items );
 8015c9c:	6840      	ldr	r0, [r0, #4]
 8015c9e:	4798      	blx	r3
    return( 0 );
 8015ca0:	2000      	movs	r0, #0
}
 8015ca2:	bd08      	pop	{r3, pc}
        return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 8015ca4:	4801      	ldr	r0, [pc, #4]	; (8015cac <mbedtls_pk_debug+0x1c>)
 8015ca6:	e7fc      	b.n	8015ca2 <mbedtls_pk_debug+0x12>
        return( MBEDTLS_ERR_PK_TYPE_MISMATCH );
 8015ca8:	4801      	ldr	r0, [pc, #4]	; (8015cb0 <mbedtls_pk_debug+0x20>)
 8015caa:	e7fa      	b.n	8015ca2 <mbedtls_pk_debug+0x12>
 8015cac:	ffffc180 	.word	0xffffc180
 8015cb0:	ffffc100 	.word	0xffffc100

08015cb4 <mbedtls_pk_get_name>:
/*
 * Access the PK type name
 */
const char *mbedtls_pk_get_name( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015cb4:	b118      	cbz	r0, 8015cbe <mbedtls_pk_get_name+0xa>
 8015cb6:	6803      	ldr	r3, [r0, #0]
 8015cb8:	b10b      	cbz	r3, 8015cbe <mbedtls_pk_get_name+0xa>
        return( "invalid PK" );

    return( ctx->pk_info->name );
 8015cba:	6858      	ldr	r0, [r3, #4]
 8015cbc:	4770      	bx	lr
        return( "invalid PK" );
 8015cbe:	4801      	ldr	r0, [pc, #4]	; (8015cc4 <mbedtls_pk_get_name+0x10>)
}
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	08030b58 	.word	0x08030b58

08015cc8 <mbedtls_pk_get_type>:
/*
 * Access the PK type
 */
mbedtls_pk_type_t mbedtls_pk_get_type( const mbedtls_pk_context *ctx )
{
    if( ctx == NULL || ctx->pk_info == NULL )
 8015cc8:	b110      	cbz	r0, 8015cd0 <mbedtls_pk_get_type+0x8>
 8015cca:	6800      	ldr	r0, [r0, #0]
 8015ccc:	b100      	cbz	r0, 8015cd0 <mbedtls_pk_get_type+0x8>
        return( MBEDTLS_PK_NONE );

    return( ctx->pk_info->type );
 8015cce:	7800      	ldrb	r0, [r0, #0]
}
 8015cd0:	4770      	bx	lr

08015cd2 <rsa_can_do>:
#endif

#if defined(MBEDTLS_RSA_C)
static int rsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_RSA ||
 8015cd2:	2801      	cmp	r0, #1
 8015cd4:	d002      	beq.n	8015cdc <rsa_can_do+0xa>
 8015cd6:	1f83      	subs	r3, r0, #6
 8015cd8:	4258      	negs	r0, r3
 8015cda:	4158      	adcs	r0, r3
            type == MBEDTLS_PK_RSASSA_PSS );
}
 8015cdc:	4770      	bx	lr

08015cde <rsa_get_bitlen>:

static size_t rsa_get_bitlen( const void *ctx )
{
    return( 8 * ((const mbedtls_rsa_context *) ctx)->len );
 8015cde:	6840      	ldr	r0, [r0, #4]
}
 8015ce0:	00c0      	lsls	r0, r0, #3
 8015ce2:	4770      	bx	lr

08015ce4 <rsa_debug>:
    mbedtls_free( ctx );
}

static void rsa_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015ce4:	2301      	movs	r3, #1
    items->name = "rsa.N";
 8015ce6:	4a06      	ldr	r2, [pc, #24]	; (8015d00 <rsa_debug+0x1c>)
    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015ce8:	700b      	strb	r3, [r1, #0]
    items->name = "rsa.N";
 8015cea:	604a      	str	r2, [r1, #4]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );

    items++;

    items->type = MBEDTLS_PK_DEBUG_MPI;
 8015cec:	730b      	strb	r3, [r1, #12]
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8015cee:	f100 0208 	add.w	r2, r0, #8
    items->name = "rsa.E";
 8015cf2:	4b04      	ldr	r3, [pc, #16]	; (8015d04 <rsa_debug+0x20>)
    items->value = &( ((mbedtls_rsa_context *) ctx)->N );
 8015cf4:	608a      	str	r2, [r1, #8]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8015cf6:	3014      	adds	r0, #20
    items->name = "rsa.E";
 8015cf8:	610b      	str	r3, [r1, #16]
    items->value = &( ((mbedtls_rsa_context *) ctx)->E );
 8015cfa:	6148      	str	r0, [r1, #20]
}
 8015cfc:	4770      	bx	lr
 8015cfe:	bf00      	nop
 8015d00:	08030b63 	.word	0x08030b63
 8015d04:	08030b69 	.word	0x08030b69

08015d08 <eckey_can_do>:
 * Generic EC key
 */
static int eckey_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
            type == MBEDTLS_PK_ECKEY_DH ||
 8015d08:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECDSA );
}
 8015d0a:	2802      	cmp	r0, #2
 8015d0c:	bf8c      	ite	hi
 8015d0e:	2000      	movhi	r0, #0
 8015d10:	2001      	movls	r0, #1
 8015d12:	4770      	bx	lr

08015d14 <eckey_get_bitlen>:

static size_t eckey_get_bitlen( const void *ctx )
{
    return( ((mbedtls_ecp_keypair *) ctx)->grp.pbits );
}
 8015d14:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8015d16:	4770      	bx	lr

08015d18 <eckey_debug>:
    mbedtls_free( ctx );
}

static void eckey_debug( const void *ctx, mbedtls_pk_debug_item *items )
{
    items->type = MBEDTLS_PK_DEBUG_ECP;
 8015d18:	2302      	movs	r3, #2
 8015d1a:	700b      	strb	r3, [r1, #0]
    items->name = "eckey.Q";
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015d1c:	3088      	adds	r0, #136	; 0x88
    items->name = "eckey.Q";
 8015d1e:	4b02      	ldr	r3, [pc, #8]	; (8015d28 <eckey_debug+0x10>)
 8015d20:	604b      	str	r3, [r1, #4]
    items->value = &( ((mbedtls_ecp_keypair *) ctx)->Q );
 8015d22:	6088      	str	r0, [r1, #8]
}
 8015d24:	4770      	bx	lr
 8015d26:	bf00      	nop
 8015d28:	08030b6f 	.word	0x08030b6f

08015d2c <eckeydh_can_do>:
/*
 * EC key restricted to ECDH
 */
static int eckeydh_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECKEY ||
 8015d2c:	3802      	subs	r0, #2
            type == MBEDTLS_PK_ECKEY_DH );
}
 8015d2e:	2801      	cmp	r0, #1
 8015d30:	bf8c      	ite	hi
 8015d32:	2000      	movhi	r0, #0
 8015d34:	2001      	movls	r0, #1
 8015d36:	4770      	bx	lr

08015d38 <ecdsa_can_do>:

#if defined(MBEDTLS_ECDSA_C)
static int ecdsa_can_do( mbedtls_pk_type_t type )
{
    return( type == MBEDTLS_PK_ECDSA );
}
 8015d38:	1f03      	subs	r3, r0, #4
 8015d3a:	4258      	negs	r0, r3
 8015d3c:	4158      	adcs	r0, r3
 8015d3e:	4770      	bx	lr

08015d40 <rsa_free_wrap>:
{
 8015d40:	b510      	push	{r4, lr}
 8015d42:	4604      	mov	r4, r0
    mbedtls_rsa_free( (mbedtls_rsa_context *) ctx );
 8015d44:	f001 fdfc 	bl	8017940 <mbedtls_rsa_free>
    mbedtls_free( ctx );
 8015d48:	4b02      	ldr	r3, [pc, #8]	; (8015d54 <rsa_free_wrap+0x14>)
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	681b      	ldr	r3, [r3, #0]
}
 8015d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015d52:	4718      	bx	r3
 8015d54:	200005a4 	.word	0x200005a4

08015d58 <rsa_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015d58:	4b06      	ldr	r3, [pc, #24]	; (8015d74 <rsa_alloc_wrap+0x1c>)
{
 8015d5a:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_rsa_context ) );
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	21ac      	movs	r1, #172	; 0xac
 8015d60:	2001      	movs	r0, #1
 8015d62:	4798      	blx	r3
    if( ctx != NULL )
 8015d64:	4604      	mov	r4, r0
 8015d66:	b118      	cbz	r0, 8015d70 <rsa_alloc_wrap+0x18>
        mbedtls_rsa_init( (mbedtls_rsa_context *) ctx, 0, 0 );
 8015d68:	2200      	movs	r2, #0
 8015d6a:	4611      	mov	r1, r2
 8015d6c:	f000 fcc2 	bl	80166f4 <mbedtls_rsa_init>
}
 8015d70:	4620      	mov	r0, r4
 8015d72:	bd10      	pop	{r4, pc}
 8015d74:	200005a0 	.word	0x200005a0

08015d78 <rsa_check_pair_wrap>:
    return( mbedtls_rsa_check_pub_priv( (const mbedtls_rsa_context *) pub,
 8015d78:	f000 bdfc 	b.w	8016974 <mbedtls_rsa_check_pub_priv>

08015d7c <rsa_encrypt_wrap>:
{
 8015d7c:	b4f0      	push	{r4, r5, r6, r7}
    *olen = ((mbedtls_rsa_context *) ctx)->len;
 8015d7e:	9f04      	ldr	r7, [sp, #16]
 8015d80:	6846      	ldr	r6, [r0, #4]
 8015d82:	603e      	str	r6, [r7, #0]
    if( *olen > osize )
 8015d84:	9f05      	ldr	r7, [sp, #20]
 8015d86:	42be      	cmp	r6, r7
{
 8015d88:	460d      	mov	r5, r1
 8015d8a:	4614      	mov	r4, r2
 8015d8c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    if( *olen > osize )
 8015d90:	d806      	bhi.n	8015da0 <rsa_encrypt_wrap+0x24>
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015d92:	e9cd 5305 	strd	r5, r3, [sp, #20]
 8015d96:	9404      	str	r4, [sp, #16]
 8015d98:	2300      	movs	r3, #0
}
 8015d9a:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_encrypt( (mbedtls_rsa_context *) ctx,
 8015d9c:	f001 b8d2 	b.w	8016f44 <mbedtls_rsa_pkcs1_encrypt>
}
 8015da0:	4801      	ldr	r0, [pc, #4]	; (8015da8 <rsa_encrypt_wrap+0x2c>)
 8015da2:	bcf0      	pop	{r4, r5, r6, r7}
 8015da4:	4770      	bx	lr
 8015da6:	bf00      	nop
 8015da8:	ffffbc00 	.word	0xffffbc00

08015dac <rsa_decrypt_wrap>:
{
 8015dac:	b4f0      	push	{r4, r5, r6, r7}
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015dae:	6847      	ldr	r7, [r0, #4]
{
 8015db0:	4616      	mov	r6, r2
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015db2:	42b7      	cmp	r7, r6
{
 8015db4:	460c      	mov	r4, r1
 8015db6:	9a07      	ldr	r2, [sp, #28]
 8015db8:	e9dd 5105 	ldrd	r5, r1, [sp, #20]
    if( ilen != ((mbedtls_rsa_context *) ctx)->len )
 8015dbc:	d106      	bne.n	8015dcc <rsa_decrypt_wrap+0x20>
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 8015dbe:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8015dc2:	9405      	str	r4, [sp, #20]
 8015dc4:	2301      	movs	r3, #1
}
 8015dc6:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_decrypt( (mbedtls_rsa_context *) ctx, f_rng, p_rng,
 8015dc8:	f001 ba2a 	b.w	8017220 <mbedtls_rsa_pkcs1_decrypt>
}
 8015dcc:	4801      	ldr	r0, [pc, #4]	; (8015dd4 <rsa_decrypt_wrap+0x28>)
 8015dce:	bcf0      	pop	{r4, r5, r6, r7}
 8015dd0:	4770      	bx	lr
 8015dd2:	bf00      	nop
 8015dd4:	ffffbf80 	.word	0xffffbf80

08015dd8 <rsa_sign_wrap>:
{
 8015dd8:	b4f0      	push	{r4, r5, r6, r7}
    *sig_len = ((mbedtls_rsa_context *) ctx)->len;
 8015dda:	9e05      	ldr	r6, [sp, #20]
 8015ddc:	6847      	ldr	r7, [r0, #4]
 8015dde:	6037      	str	r7, [r6, #0]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015de0:	9e04      	ldr	r6, [sp, #16]
{
 8015de2:	460c      	mov	r4, r1
 8015de4:	4615      	mov	r5, r2
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015de6:	e9cd 4304 	strd	r4, r3, [sp, #16]
{
 8015dea:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015dee:	2301      	movs	r3, #1
 8015df0:	e9cd 5606 	strd	r5, r6, [sp, #24]
}
 8015df4:	bcf0      	pop	{r4, r5, r6, r7}
    return( mbedtls_rsa_pkcs1_sign( (mbedtls_rsa_context *) ctx, f_rng, p_rng, MBEDTLS_RSA_PRIVATE,
 8015df6:	f001 bbc1 	b.w	801757c <mbedtls_rsa_pkcs1_sign>
	...

08015dfc <rsa_verify_wrap>:
{
 8015dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8015dfe:	9d09      	ldr	r5, [sp, #36]	; 0x24
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 8015e00:	6846      	ldr	r6, [r0, #4]
 8015e02:	42ae      	cmp	r6, r5
{
 8015e04:	4604      	mov	r4, r0
    if( sig_len < ((mbedtls_rsa_context *) ctx)->len )
 8015e06:	d811      	bhi.n	8015e2c <rsa_verify_wrap+0x30>
    if( ( ret = mbedtls_rsa_pkcs1_verify( (mbedtls_rsa_context *) ctx, NULL, NULL,
 8015e08:	9e08      	ldr	r6, [sp, #32]
 8015e0a:	e9cd 1300 	strd	r1, r3, [sp]
 8015e0e:	2300      	movs	r3, #0
 8015e10:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8015e14:	4619      	mov	r1, r3
 8015e16:	461a      	mov	r2, r3
 8015e18:	f001 fd7c 	bl	8017914 <mbedtls_rsa_pkcs1_verify>
 8015e1c:	b920      	cbnz	r0, 8015e28 <rsa_verify_wrap+0x2c>
    if( sig_len > ((mbedtls_rsa_context *) ctx)->len )
 8015e1e:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015e20:	4b03      	ldr	r3, [pc, #12]	; (8015e30 <rsa_verify_wrap+0x34>)
 8015e22:	42aa      	cmp	r2, r5
 8015e24:	bf38      	it	cc
 8015e26:	4618      	movcc	r0, r3
}
 8015e28:	b004      	add	sp, #16
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 8015e2c:	4801      	ldr	r0, [pc, #4]	; (8015e34 <rsa_verify_wrap+0x38>)
 8015e2e:	e7fb      	b.n	8015e28 <rsa_verify_wrap+0x2c>
 8015e30:	ffffc700 	.word	0xffffc700
 8015e34:	ffffbc80 	.word	0xffffbc80

08015e38 <eckey_free_wrap>:
{
 8015e38:	b510      	push	{r4, lr}
 8015e3a:	4604      	mov	r4, r0
    mbedtls_ecp_keypair_free( (mbedtls_ecp_keypair *) ctx );
 8015e3c:	f7fc f94a 	bl	80120d4 <mbedtls_ecp_keypair_free>
    mbedtls_free( ctx );
 8015e40:	4b02      	ldr	r3, [pc, #8]	; (8015e4c <eckey_free_wrap+0x14>)
 8015e42:	4620      	mov	r0, r4
 8015e44:	681b      	ldr	r3, [r3, #0]
}
 8015e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015e4a:	4718      	bx	r3
 8015e4c:	200005a4 	.word	0x200005a4

08015e50 <eckey_alloc_wrap>:
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015e50:	4b05      	ldr	r3, [pc, #20]	; (8015e68 <eckey_alloc_wrap+0x18>)
{
 8015e52:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecp_keypair ) );
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	21ac      	movs	r1, #172	; 0xac
 8015e58:	2001      	movs	r0, #1
 8015e5a:	4798      	blx	r3
    if( ctx != NULL )
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	b108      	cbz	r0, 8015e64 <eckey_alloc_wrap+0x14>
        mbedtls_ecp_keypair_init( ctx );
 8015e60:	f7fc f8ee 	bl	8012040 <mbedtls_ecp_keypair_init>
}
 8015e64:	4620      	mov	r0, r4
 8015e66:	bd10      	pop	{r4, pc}
 8015e68:	200005a0 	.word	0x200005a0

08015e6c <eckey_check_pair>:
    return( mbedtls_ecp_check_pub_priv( (const mbedtls_ecp_keypair *) pub,
 8015e6c:	f7fd b8d8 	b.w	8013020 <mbedtls_ecp_check_pub_priv>

08015e70 <ecdsa_alloc_wrap>:
                md_alg, hash, hash_len, sig, sig_len, f_rng, p_rng ) );
}

static void *ecdsa_alloc_wrap( void )
{
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015e70:	4b05      	ldr	r3, [pc, #20]	; (8015e88 <ecdsa_alloc_wrap+0x18>)
{
 8015e72:	b510      	push	{r4, lr}
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_ecdsa_context ) );
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	21ac      	movs	r1, #172	; 0xac
 8015e78:	2001      	movs	r0, #1
 8015e7a:	4798      	blx	r3

    if( ctx != NULL )
 8015e7c:	4604      	mov	r4, r0
 8015e7e:	b108      	cbz	r0, 8015e84 <ecdsa_alloc_wrap+0x14>
        mbedtls_ecdsa_init( (mbedtls_ecdsa_context *) ctx );
 8015e80:	f7fb fbb0 	bl	80115e4 <mbedtls_ecdsa_init>

    return( ctx );
}
 8015e84:	4620      	mov	r0, r4
 8015e86:	bd10      	pop	{r4, pc}
 8015e88:	200005a0 	.word	0x200005a0

08015e8c <ecdsa_free_wrap>:

static void ecdsa_free_wrap( void *ctx )
{
 8015e8c:	b510      	push	{r4, lr}
 8015e8e:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( (mbedtls_ecdsa_context *) ctx );
 8015e90:	f7fb fbaa 	bl	80115e8 <mbedtls_ecdsa_free>
    mbedtls_free( ctx );
 8015e94:	4b02      	ldr	r3, [pc, #8]	; (8015ea0 <ecdsa_free_wrap+0x14>)
 8015e96:	4620      	mov	r0, r4
 8015e98:	681b      	ldr	r3, [r3, #0]
}
 8015e9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_free( ctx );
 8015e9e:	4718      	bx	r3
 8015ea0:	200005a4 	.word	0x200005a4

08015ea4 <ecdsa_sign_wrap>:
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015ea4:	f7fb bae0 	b.w	8011468 <mbedtls_ecdsa_write_signature>

08015ea8 <eckey_sign_wrap>:
{
 8015ea8:	b530      	push	{r4, r5, lr}
 8015eaa:	b0b3      	sub	sp, #204	; 0xcc
 8015eac:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015eae:	a807      	add	r0, sp, #28
{
 8015eb0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8015eb4:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
 8015eb6:	f7fb fb95 	bl	80115e4 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015eba:	4621      	mov	r1, r4
 8015ebc:	a807      	add	r0, sp, #28
 8015ebe:	f7fb fb75 	bl	80115ac <mbedtls_ecdsa_from_keypair>
 8015ec2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	b960      	cbnz	r0, 8015ee4 <eckey_sign_wrap+0x3c>
    return( mbedtls_ecdsa_write_signature( (mbedtls_ecdsa_context *) ctx,
 8015eca:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8015ecc:	9103      	str	r1, [sp, #12]
 8015ece:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8015ed0:	9102      	str	r1, [sp, #8]
 8015ed2:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8015ed4:	9101      	str	r1, [sp, #4]
 8015ed6:	9936      	ldr	r1, [sp, #216]	; 0xd8
 8015ed8:	9100      	str	r1, [sp, #0]
 8015eda:	a807      	add	r0, sp, #28
 8015edc:	4629      	mov	r1, r5
 8015ede:	f7fb fac3 	bl	8011468 <mbedtls_ecdsa_write_signature>
 8015ee2:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015ee4:	a807      	add	r0, sp, #28
 8015ee6:	f7fb fb7f 	bl	80115e8 <mbedtls_ecdsa_free>
}
 8015eea:	4620      	mov	r0, r4
 8015eec:	b033      	add	sp, #204	; 0xcc
 8015eee:	bd30      	pop	{r4, r5, pc}

08015ef0 <ecdsa_verify_wrap>:
{
 8015ef0:	b507      	push	{r0, r1, r2, lr}
 8015ef2:	4611      	mov	r1, r2
 8015ef4:	461a      	mov	r2, r3
    ret = mbedtls_ecdsa_read_signature( (mbedtls_ecdsa_context *) ctx,
 8015ef6:	9b05      	ldr	r3, [sp, #20]
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	9b04      	ldr	r3, [sp, #16]
 8015efc:	f7fb fb06 	bl	801150c <mbedtls_ecdsa_read_signature>
    if( ret == MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH )
 8015f00:	f510 4f98 	cmn.w	r0, #19456	; 0x4c00
        return( MBEDTLS_ERR_PK_SIG_LEN_MISMATCH );
 8015f04:	bf08      	it	eq
 8015f06:	f500 5098 	addeq.w	r0, r0, #4864	; 0x1300
}
 8015f0a:	b003      	add	sp, #12
 8015f0c:	f85d fb04 	ldr.w	pc, [sp], #4

08015f10 <eckey_verify_wrap>:
{
 8015f10:	b530      	push	{r4, r5, lr}
 8015f12:	b0b1      	sub	sp, #196	; 0xc4
 8015f14:	4604      	mov	r4, r0
    mbedtls_ecdsa_init( &ecdsa );
 8015f16:	a805      	add	r0, sp, #20
{
 8015f18:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015f1c:	460d      	mov	r5, r1
    mbedtls_ecdsa_init( &ecdsa );
 8015f1e:	f7fb fb61 	bl	80115e4 <mbedtls_ecdsa_init>
    if( ( ret = mbedtls_ecdsa_from_keypair( &ecdsa, ctx ) ) == 0 )
 8015f22:	4621      	mov	r1, r4
 8015f24:	a805      	add	r0, sp, #20
 8015f26:	f7fb fb41 	bl	80115ac <mbedtls_ecdsa_from_keypair>
 8015f2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015f2e:	4604      	mov	r4, r0
 8015f30:	b940      	cbnz	r0, 8015f44 <eckey_verify_wrap+0x34>
        ret = ecdsa_verify_wrap( &ecdsa, md_alg, hash, hash_len, sig, sig_len );
 8015f32:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8015f34:	9101      	str	r1, [sp, #4]
 8015f36:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8015f38:	9100      	str	r1, [sp, #0]
 8015f3a:	a805      	add	r0, sp, #20
 8015f3c:	4629      	mov	r1, r5
 8015f3e:	f7ff ffd7 	bl	8015ef0 <ecdsa_verify_wrap>
 8015f42:	4604      	mov	r4, r0
    mbedtls_ecdsa_free( &ecdsa );
 8015f44:	a805      	add	r0, sp, #20
 8015f46:	f7fb fb4f 	bl	80115e8 <mbedtls_ecdsa_free>
}
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	b031      	add	sp, #196	; 0xc4
 8015f4e:	bd30      	pop	{r4, r5, pc}

08015f50 <pk_use_ecparams>:
static int pk_use_ecparams( const mbedtls_asn1_buf *params, mbedtls_ecp_group *grp )
{
    int ret;
    mbedtls_ecp_group_id grp_id;

    if( params->tag == MBEDTLS_ASN1_OID )
 8015f50:	6803      	ldr	r3, [r0, #0]
 8015f52:	2b06      	cmp	r3, #6
{
 8015f54:	b513      	push	{r0, r1, r4, lr}
 8015f56:	460c      	mov	r4, r1
    if( params->tag == MBEDTLS_ASN1_OID )
 8015f58:	d002      	beq.n	8015f60 <pk_use_ecparams+0x10>
    {
#if defined(MBEDTLS_PK_PARSE_EC_EXTENDED)
        if( ( ret = pk_group_id_from_specified( params, &grp_id ) ) != 0 )
            return( ret );
#else
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8015f5a:	480a      	ldr	r0, [pc, #40]	; (8015f84 <pk_use_ecparams+0x34>)

    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
        return( ret );

    return( 0 );
}
 8015f5c:	b002      	add	sp, #8
 8015f5e:	bd10      	pop	{r4, pc}
        if( mbedtls_oid_get_ec_grp( params, &grp_id ) != 0 )
 8015f60:	f10d 0107 	add.w	r1, sp, #7
 8015f64:	f7ff fb4c 	bl	8015600 <mbedtls_oid_get_ec_grp>
 8015f68:	b948      	cbnz	r0, 8015f7e <pk_use_ecparams+0x2e>
    if( grp->id != MBEDTLS_ECP_DP_NONE && grp->id != grp_id )
 8015f6a:	7823      	ldrb	r3, [r4, #0]
 8015f6c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015f70:	b10b      	cbz	r3, 8015f76 <pk_use_ecparams+0x26>
 8015f72:	428b      	cmp	r3, r1
 8015f74:	d1f1      	bne.n	8015f5a <pk_use_ecparams+0xa>
    if( ( ret = mbedtls_ecp_group_load( grp, grp_id ) ) != 0 )
 8015f76:	4620      	mov	r0, r4
 8015f78:	f7fd fe9e 	bl	8013cb8 <mbedtls_ecp_group_load>
 8015f7c:	e7ee      	b.n	8015f5c <pk_use_ecparams+0xc>
            return( MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE );
 8015f7e:	4802      	ldr	r0, [pc, #8]	; (8015f88 <pk_use_ecparams+0x38>)
 8015f80:	e7ec      	b.n	8015f5c <pk_use_ecparams+0xc>
 8015f82:	bf00      	nop
 8015f84:	ffffc300 	.word	0xffffc300
 8015f88:	ffffc600 	.word	0xffffc600

08015f8c <pk_parse_key_pkcs1_der>:
 * Parse a PKCS#1 encoded private RSA key
 */
static int pk_parse_key_pkcs1_der( mbedtls_rsa_context *rsa,
                                   const unsigned char *key,
                                   size_t keylen )
{
 8015f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f8e:	4605      	mov	r5, r0
 8015f90:	4610      	mov	r0, r2
    int ret;
    size_t len;
    unsigned char *p, *end;

    p = (unsigned char *) key;
 8015f92:	9101      	str	r1, [sp, #4]
     *      exponent2         INTEGER,  -- d mod (q-1)
     *      coefficient       INTEGER,  -- (inverse of q) mod p
     *      otherPrimeInfos   OtherPrimeInfos OPTIONAL
     *  }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8015f94:	2330      	movs	r3, #48	; 0x30
 8015f96:	4401      	add	r1, r0
 8015f98:	466a      	mov	r2, sp
 8015f9a:	a801      	add	r0, sp, #4
 8015f9c:	f7f8 f8ac 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	b120      	cbz	r0, 8015fae <pk_parse_key_pkcs1_der+0x22>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->QP ) ) != 0 )
    {
        mbedtls_rsa_free( rsa );
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8015fa4:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
        mbedtls_rsa_free( rsa );
        return( ret );
    }

    return( 0 );
}
 8015fa8:	4620      	mov	r0, r4
 8015faa:	b003      	add	sp, #12
 8015fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 8015fae:	e9dd 1600 	ldrd	r1, r6, [sp]
 8015fb2:	440e      	add	r6, r1
    if( ( ret = mbedtls_asn1_get_int( &p, end, &rsa->ver ) ) != 0 )
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	4631      	mov	r1, r6
 8015fb8:	a801      	add	r0, sp, #4
 8015fba:	f7f8 f8c9 	bl	800e150 <mbedtls_asn1_get_int>
 8015fbe:	4604      	mov	r4, r0
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	d1ef      	bne.n	8015fa4 <pk_parse_key_pkcs1_der+0x18>
    if( rsa->ver != 0 )
 8015fc4:	682b      	ldr	r3, [r5, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d159      	bne.n	801607e <pk_parse_key_pkcs1_der+0xf2>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8015fca:	f105 0708 	add.w	r7, r5, #8
 8015fce:	463a      	mov	r2, r7
 8015fd0:	4631      	mov	r1, r6
 8015fd2:	a801      	add	r0, sp, #4
 8015fd4:	f7f8 f8e0 	bl	800e198 <mbedtls_asn1_get_mpi>
 8015fd8:	4604      	mov	r4, r0
 8015fda:	bbb8      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8015fdc:	f105 0214 	add.w	r2, r5, #20
 8015fe0:	4631      	mov	r1, r6
 8015fe2:	a801      	add	r0, sp, #4
 8015fe4:	f7f8 f8d8 	bl	800e198 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->N  ) ) != 0 ||
 8015fe8:	4604      	mov	r4, r0
 8015fea:	bb78      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 8015fec:	f105 0220 	add.w	r2, r5, #32
 8015ff0:	4631      	mov	r1, r6
 8015ff2:	a801      	add	r0, sp, #4
 8015ff4:	f7f8 f8d0 	bl	800e198 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->E  ) ) != 0 ||
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	bb38      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 8015ffc:	f105 022c 	add.w	r2, r5, #44	; 0x2c
 8016000:	4631      	mov	r1, r6
 8016002:	a801      	add	r0, sp, #4
 8016004:	f7f8 f8c8 	bl	800e198 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->D  ) ) != 0 ||
 8016008:	4604      	mov	r4, r0
 801600a:	b9f8      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 801600c:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8016010:	4631      	mov	r1, r6
 8016012:	a801      	add	r0, sp, #4
 8016014:	f7f8 f8c0 	bl	800e198 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->P  ) ) != 0 ||
 8016018:	4604      	mov	r4, r0
 801601a:	b9b8      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 801601c:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8016020:	4631      	mov	r1, r6
 8016022:	a801      	add	r0, sp, #4
 8016024:	f7f8 f8b8 	bl	800e198 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->Q  ) ) != 0 ||
 8016028:	4604      	mov	r4, r0
 801602a:	b978      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 801602c:	f105 0250 	add.w	r2, r5, #80	; 0x50
 8016030:	4631      	mov	r1, r6
 8016032:	a801      	add	r0, sp, #4
 8016034:	f7f8 f8b0 	bl	800e198 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DP ) ) != 0 ||
 8016038:	4604      	mov	r4, r0
 801603a:	b938      	cbnz	r0, 801604c <pk_parse_key_pkcs1_der+0xc0>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->QP ) ) != 0 )
 801603c:	f105 025c 	add.w	r2, r5, #92	; 0x5c
 8016040:	4631      	mov	r1, r6
 8016042:	a801      	add	r0, sp, #4
 8016044:	f7f8 f8a8 	bl	800e198 <mbedtls_asn1_get_mpi>
        ( ret = mbedtls_asn1_get_mpi( &p, end, &rsa->DQ ) ) != 0 ||
 8016048:	4604      	mov	r4, r0
 801604a:	b118      	cbz	r0, 8016054 <pk_parse_key_pkcs1_der+0xc8>
        mbedtls_rsa_free( rsa );
 801604c:	4628      	mov	r0, r5
 801604e:	f001 fc77 	bl	8017940 <mbedtls_rsa_free>
 8016052:	e7a7      	b.n	8015fa4 <pk_parse_key_pkcs1_der+0x18>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8016054:	4638      	mov	r0, r7
 8016056:	f7f8 fdd2 	bl	800ebfe <mbedtls_mpi_size>
    if( p != end )
 801605a:	9b01      	ldr	r3, [sp, #4]
    rsa->len = mbedtls_mpi_size( &rsa->N );
 801605c:	6068      	str	r0, [r5, #4]
    if( p != end )
 801605e:	42b3      	cmp	r3, r6
        mbedtls_rsa_free( rsa );
 8016060:	4628      	mov	r0, r5
    if( p != end )
 8016062:	d003      	beq.n	801606c <pk_parse_key_pkcs1_der+0xe0>
        mbedtls_rsa_free( rsa );
 8016064:	f001 fc6c 	bl	8017940 <mbedtls_rsa_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8016068:	4c06      	ldr	r4, [pc, #24]	; (8016084 <pk_parse_key_pkcs1_der+0xf8>)
 801606a:	e79d      	b.n	8015fa8 <pk_parse_key_pkcs1_der+0x1c>
    if( ( ret = mbedtls_rsa_check_privkey( rsa ) ) != 0 )
 801606c:	f000 fb7a 	bl	8016764 <mbedtls_rsa_check_privkey>
 8016070:	4604      	mov	r4, r0
 8016072:	2800      	cmp	r0, #0
 8016074:	d098      	beq.n	8015fa8 <pk_parse_key_pkcs1_der+0x1c>
        mbedtls_rsa_free( rsa );
 8016076:	4628      	mov	r0, r5
 8016078:	f001 fc62 	bl	8017940 <mbedtls_rsa_free>
        return( ret );
 801607c:	e794      	b.n	8015fa8 <pk_parse_key_pkcs1_der+0x1c>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 801607e:	4c02      	ldr	r4, [pc, #8]	; (8016088 <pk_parse_key_pkcs1_der+0xfc>)
 8016080:	e792      	b.n	8015fa8 <pk_parse_key_pkcs1_der+0x1c>
 8016082:	bf00      	nop
 8016084:	ffffc29a 	.word	0xffffc29a
 8016088:	ffffc280 	.word	0xffffc280

0801608c <pk_parse_key_sec1_der>:
 * Parse a SEC1 encoded private EC key
 */
static int pk_parse_key_sec1_der( mbedtls_ecp_keypair *eck,
                                  const unsigned char *key,
                                  size_t keylen )
{
 801608c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801608e:	b08b      	sub	sp, #44	; 0x2c
 8016090:	4605      	mov	r5, r0
 8016092:	4610      	mov	r0, r2
    int ret;
    int version, pubkey_done;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
 8016094:	9106      	str	r1, [sp, #24]
     *      privateKey     OCTET STRING,
     *      parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
     *      publicKey  [1] BIT STRING OPTIONAL
     *    }
     */
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8016096:	2330      	movs	r3, #48	; 0x30
 8016098:	4401      	add	r1, r0
 801609a:	aa05      	add	r2, sp, #20
 801609c:	a806      	add	r0, sp, #24
 801609e:	f7f8 f82b 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80160a2:	b120      	cbz	r0, 80160ae <pk_parse_key_sec1_der+0x22>
                        MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_CONSTRUCTED | 1 ) ) == 0 )
        {
            end2 = p + len;

            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80160a4:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
        mbedtls_ecp_keypair_free( eck );
        return( ret );
    }

    return( 0 );
}
 80160a8:	4620      	mov	r0, r4
 80160aa:	b00b      	add	sp, #44	; 0x2c
 80160ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    end = p + len;
 80160ae:	e9dd 3705 	ldrd	r3, r7, [sp, #20]
 80160b2:	441f      	add	r7, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 80160b4:	aa04      	add	r2, sp, #16
 80160b6:	4639      	mov	r1, r7
 80160b8:	a806      	add	r0, sp, #24
 80160ba:	f7f8 f849 	bl	800e150 <mbedtls_asn1_get_int>
 80160be:	2800      	cmp	r0, #0
 80160c0:	d1f0      	bne.n	80160a4 <pk_parse_key_sec1_der+0x18>
    if( version != 1 )
 80160c2:	9b04      	ldr	r3, [sp, #16]
 80160c4:	2b01      	cmp	r3, #1
 80160c6:	f040 8091 	bne.w	80161ec <pk_parse_key_sec1_der+0x160>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80160ca:	2304      	movs	r3, #4
 80160cc:	aa05      	add	r2, sp, #20
 80160ce:	4639      	mov	r1, r7
 80160d0:	a806      	add	r0, sp, #24
 80160d2:	f7f8 f811 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80160d6:	2800      	cmp	r0, #0
 80160d8:	d1e4      	bne.n	80160a4 <pk_parse_key_sec1_der+0x18>
    if( ( ret = mbedtls_mpi_read_binary( &eck->d, p, len ) ) != 0 )
 80160da:	f105 067c 	add.w	r6, r5, #124	; 0x7c
 80160de:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80160e2:	4630      	mov	r0, r6
 80160e4:	f7f8 fd91 	bl	800ec0a <mbedtls_mpi_read_binary>
 80160e8:	4604      	mov	r4, r0
 80160ea:	b128      	cbz	r0, 80160f8 <pk_parse_key_sec1_der+0x6c>
        mbedtls_ecp_keypair_free( eck );
 80160ec:	4628      	mov	r0, r5
 80160ee:	f7fb fff1 	bl	80120d4 <mbedtls_ecp_keypair_free>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 80160f2:	f5a4 5474 	sub.w	r4, r4, #15616	; 0x3d00
 80160f6:	e7d7      	b.n	80160a8 <pk_parse_key_sec1_der+0x1c>
    p += len;
 80160f8:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 80160fc:	4413      	add	r3, r2
    if( p != end )
 80160fe:	42bb      	cmp	r3, r7
    p += len;
 8016100:	9306      	str	r3, [sp, #24]
    if( p != end )
 8016102:	d05c      	beq.n	80161be <pk_parse_key_sec1_der+0x132>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8016104:	23a0      	movs	r3, #160	; 0xa0
 8016106:	aa05      	add	r2, sp, #20
 8016108:	4639      	mov	r1, r7
 801610a:	a806      	add	r0, sp, #24
 801610c:	f7f7 fff4 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8016110:	4604      	mov	r4, r0
 8016112:	bb20      	cbnz	r0, 801615e <pk_parse_key_sec1_der+0xd2>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 8016114:	e9dd 4305 	ldrd	r4, r3, [sp, #20]
 8016118:	441c      	add	r4, r3
    params->tag = **p;
 801611a:	781b      	ldrb	r3, [r3, #0]
 801611c:	9307      	str	r3, [sp, #28]
    if( params->tag != MBEDTLS_ASN1_OID
 801611e:	2b06      	cmp	r3, #6
 8016120:	d11b      	bne.n	801615a <pk_parse_key_sec1_der+0xce>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &params->len, params->tag ) ) != 0 )
 8016122:	aa08      	add	r2, sp, #32
 8016124:	4621      	mov	r1, r4
 8016126:	a806      	add	r0, sp, #24
 8016128:	f7f7 ffe6 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801612c:	b160      	cbz	r0, 8016148 <pk_parse_key_sec1_der+0xbc>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 801612e:	f5b0 5474 	subs.w	r4, r0, #15616	; 0x3d00
 8016132:	d105      	bne.n	8016140 <pk_parse_key_sec1_der+0xb4>
                ( ret = pk_use_ecparams( &params, &eck->grp )  ) != 0 )
 8016134:	4629      	mov	r1, r5
 8016136:	a807      	add	r0, sp, #28
 8016138:	f7ff ff0a 	bl	8015f50 <pk_use_ecparams>
            if( ( ret = pk_get_ecparams( &p, p + len, &params) ) != 0 ||
 801613c:	4604      	mov	r4, r0
 801613e:	b188      	cbz	r0, 8016164 <pk_parse_key_sec1_der+0xd8>
        mbedtls_ecp_keypair_free( eck );
 8016140:	4628      	mov	r0, r5
 8016142:	f7fb ffc7 	bl	80120d4 <mbedtls_ecp_keypair_free>
        return( ret );
 8016146:	e7af      	b.n	80160a8 <pk_parse_key_sec1_der+0x1c>
    params->p = *p;
 8016148:	9b06      	ldr	r3, [sp, #24]
    *p += params->len;
 801614a:	9a08      	ldr	r2, [sp, #32]
    params->p = *p;
 801614c:	9309      	str	r3, [sp, #36]	; 0x24
    *p += params->len;
 801614e:	4413      	add	r3, r2
    if( *p != end )
 8016150:	429c      	cmp	r4, r3
    *p += params->len;
 8016152:	9306      	str	r3, [sp, #24]
    if( *p != end )
 8016154:	d0ee      	beq.n	8016134 <pk_parse_key_sec1_der+0xa8>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8016156:	4c27      	ldr	r4, [pc, #156]	; (80161f4 <pk_parse_key_sec1_der+0x168>)
 8016158:	e7f2      	b.n	8016140 <pk_parse_key_sec1_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 801615a:	4c27      	ldr	r4, [pc, #156]	; (80161f8 <pk_parse_key_sec1_der+0x16c>)
                mbedtls_ecp_keypair_free( eck );
 801615c:	e7f0      	b.n	8016140 <pk_parse_key_sec1_der+0xb4>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801615e:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8016162:	d1c3      	bne.n	80160ec <pk_parse_key_sec1_der+0x60>
        if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8016164:	23a1      	movs	r3, #161	; 0xa1
 8016166:	aa05      	add	r2, sp, #20
 8016168:	4639      	mov	r1, r7
 801616a:	a806      	add	r0, sp, #24
 801616c:	f7f7 ffc4 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8016170:	4604      	mov	r4, r0
 8016172:	bb08      	cbnz	r0, 80161b8 <pk_parse_key_sec1_der+0x12c>
            end2 = p + len;
 8016174:	e9dd 3405 	ldrd	r3, r4, [sp, #20]
 8016178:	441c      	add	r4, r3
            if( ( ret = mbedtls_asn1_get_bitstring_null( &p, end2, &len ) ) != 0 )
 801617a:	aa05      	add	r2, sp, #20
 801617c:	4621      	mov	r1, r4
 801617e:	a806      	add	r0, sp, #24
 8016180:	f7f8 f83e 	bl	800e200 <mbedtls_asn1_get_bitstring_null>
 8016184:	2800      	cmp	r0, #0
 8016186:	d18d      	bne.n	80160a4 <pk_parse_key_sec1_der+0x18>
            if( p + len != end2 )
 8016188:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801618c:	4413      	add	r3, r2
 801618e:	429c      	cmp	r4, r3
 8016190:	d12e      	bne.n	80161f0 <pk_parse_key_sec1_der+0x164>
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8016192:	f105 0188 	add.w	r1, r5, #136	; 0x88
 8016196:	1aa3      	subs	r3, r4, r2
 8016198:	4628      	mov	r0, r5
 801619a:	9103      	str	r1, [sp, #12]
 801619c:	f7fc fcda 	bl	8012b54 <mbedtls_ecp_point_read_binary>
 80161a0:	9903      	ldr	r1, [sp, #12]
 80161a2:	b910      	cbnz	r0, 80161aa <pk_parse_key_sec1_der+0x11e>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 80161a4:	4628      	mov	r0, r5
 80161a6:	f7fc fd61 	bl	8012c6c <mbedtls_ecp_check_pubkey>
    *p = (unsigned char *) end;
 80161aa:	9406      	str	r4, [sp, #24]
            if( ( ret = pk_get_ecpubkey( &p, end2, eck ) ) == 0 )
 80161ac:	b1a8      	cbz	r0, 80161da <pk_parse_key_sec1_der+0x14e>
                if( ret != MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE )
 80161ae:	f510 4f9d 	cmn.w	r0, #20096	; 0x4e80
 80161b2:	d004      	beq.n	80161be <pk_parse_key_sec1_der+0x132>
                    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 80161b4:	4c11      	ldr	r4, [pc, #68]	; (80161fc <pk_parse_key_sec1_der+0x170>)
 80161b6:	e777      	b.n	80160a8 <pk_parse_key_sec1_der+0x1c>
        else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80161b8:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80161bc:	d196      	bne.n	80160ec <pk_parse_key_sec1_der+0x60>
        ( ret = mbedtls_ecp_mul( &eck->grp, &eck->Q, &eck->d, &eck->grp.G,
 80161be:	2300      	movs	r3, #0
 80161c0:	e9cd 3300 	strd	r3, r3, [sp]
 80161c4:	4632      	mov	r2, r6
 80161c6:	f105 0328 	add.w	r3, r5, #40	; 0x28
 80161ca:	f105 0188 	add.w	r1, r5, #136	; 0x88
 80161ce:	4628      	mov	r0, r5
 80161d0:	f7fc fe30 	bl	8012e34 <mbedtls_ecp_mul>
    if( ! pubkey_done &&
 80161d4:	4604      	mov	r4, r0
 80161d6:	2800      	cmp	r0, #0
 80161d8:	d188      	bne.n	80160ec <pk_parse_key_sec1_der+0x60>
    if( ( ret = mbedtls_ecp_check_privkey( &eck->grp, &eck->d ) ) != 0 )
 80161da:	4631      	mov	r1, r6
 80161dc:	4628      	mov	r0, r5
 80161de:	f7fc fe0b 	bl	8012df8 <mbedtls_ecp_check_privkey>
 80161e2:	4604      	mov	r4, r0
 80161e4:	2800      	cmp	r0, #0
 80161e6:	f43f af5f 	beq.w	80160a8 <pk_parse_key_sec1_der+0x1c>
 80161ea:	e7a9      	b.n	8016140 <pk_parse_key_sec1_der+0xb4>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION );
 80161ec:	4c04      	ldr	r4, [pc, #16]	; (8016200 <pk_parse_key_sec1_der+0x174>)
 80161ee:	e75b      	b.n	80160a8 <pk_parse_key_sec1_der+0x1c>
                return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 80161f0:	4c00      	ldr	r4, [pc, #0]	; (80161f4 <pk_parse_key_sec1_der+0x168>)
 80161f2:	e759      	b.n	80160a8 <pk_parse_key_sec1_der+0x1c>
 80161f4:	ffffc29a 	.word	0xffffc29a
 80161f8:	ffffc29e 	.word	0xffffc29e
 80161fc:	ffffc300 	.word	0xffffc300
 8016200:	ffffc280 	.word	0xffffc280

08016204 <pk_get_pk_alg>:
{
 8016204:	b530      	push	{r4, r5, lr}
 8016206:	4615      	mov	r5, r2
 8016208:	b085      	sub	sp, #20
    memset( params, 0, sizeof(mbedtls_asn1_buf) );
 801620a:	2200      	movs	r2, #0
 801620c:	e9c3 2200 	strd	r2, r2, [r3]
 8016210:	609a      	str	r2, [r3, #8]
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8016212:	aa01      	add	r2, sp, #4
{
 8016214:	461c      	mov	r4, r3
    if( ( ret = mbedtls_asn1_get_alg( p, end, &alg_oid, params ) ) != 0 )
 8016216:	f7f8 f847 	bl	800e2a8 <mbedtls_asn1_get_alg>
 801621a:	b118      	cbz	r0, 8016224 <pk_get_pk_alg+0x20>
        return( MBEDTLS_ERR_PK_INVALID_ALG + ret );
 801621c:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
}
 8016220:	b005      	add	sp, #20
 8016222:	bd30      	pop	{r4, r5, pc}
    if( mbedtls_oid_get_pk_alg( &alg_oid, pk_alg ) != 0 )
 8016224:	4629      	mov	r1, r5
 8016226:	a801      	add	r0, sp, #4
 8016228:	f7ff f9d0 	bl	80155cc <mbedtls_oid_get_pk_alg>
 801622c:	b960      	cbnz	r0, 8016248 <pk_get_pk_alg+0x44>
    if( *pk_alg == MBEDTLS_PK_RSA &&
 801622e:	782b      	ldrb	r3, [r5, #0]
 8016230:	2b01      	cmp	r3, #1
 8016232:	d1f5      	bne.n	8016220 <pk_get_pk_alg+0x1c>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 8016234:	6823      	ldr	r3, [r4, #0]
    if( *pk_alg == MBEDTLS_PK_RSA &&
 8016236:	2b05      	cmp	r3, #5
 8016238:	d000      	beq.n	801623c <pk_get_pk_alg+0x38>
            ( ( params->tag != MBEDTLS_ASN1_NULL && params->tag != 0 ) ||
 801623a:	b93b      	cbnz	r3, 801624c <pk_get_pk_alg+0x48>
 801623c:	6862      	ldr	r2, [r4, #4]
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 801623e:	4b04      	ldr	r3, [pc, #16]	; (8016250 <pk_get_pk_alg+0x4c>)
 8016240:	2a00      	cmp	r2, #0
 8016242:	bf18      	it	ne
 8016244:	4618      	movne	r0, r3
 8016246:	e7eb      	b.n	8016220 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016248:	4802      	ldr	r0, [pc, #8]	; (8016254 <pk_get_pk_alg+0x50>)
 801624a:	e7e9      	b.n	8016220 <pk_get_pk_alg+0x1c>
        return( MBEDTLS_ERR_PK_INVALID_ALG );
 801624c:	4800      	ldr	r0, [pc, #0]	; (8016250 <pk_get_pk_alg+0x4c>)
 801624e:	e7e7      	b.n	8016220 <pk_get_pk_alg+0x1c>
 8016250:	ffffc580 	.word	0xffffc580
 8016254:	ffffc380 	.word	0xffffc380

08016258 <pk_parse_key_pkcs8_unencrypted_der>:
 */
static int pk_parse_key_pkcs8_unencrypted_der(
                                    mbedtls_pk_context *pk,
                                    const unsigned char* key,
                                    size_t keylen )
{
 8016258:	b530      	push	{r4, r5, lr}
 801625a:	b08b      	sub	sp, #44	; 0x2c
    int ret, version;
    size_t len;
    mbedtls_asn1_buf params;
    unsigned char *p = (unsigned char *) key;
    unsigned char *end = p + keylen;
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801625c:	2300      	movs	r3, #0
{
 801625e:	4605      	mov	r5, r0
 8016260:	4610      	mov	r0, r2
    unsigned char *p = (unsigned char *) key;
 8016262:	9106      	str	r1, [sp, #24]
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 8016264:	f88d 300f 	strb.w	r3, [sp, #15]
     *    PrivateKey ::= OCTET STRING
     *
     *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
     */

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8016268:	4401      	add	r1, r0
 801626a:	2330      	movs	r3, #48	; 0x30
 801626c:	aa05      	add	r2, sp, #20
 801626e:	a806      	add	r0, sp, #24
 8016270:	f7f7 ff42 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8016274:	b120      	cbz	r0, 8016280 <pk_parse_key_pkcs8_unencrypted_der+0x28>

    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );

    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 8016276:	f5a0 5474 	sub.w	r4, r0, #15616	; 0x3d00
    } else
#endif /* MBEDTLS_ECP_C */
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    return( 0 );
}
 801627a:	4620      	mov	r0, r4
 801627c:	b00b      	add	sp, #44	; 0x2c
 801627e:	bd30      	pop	{r4, r5, pc}
    end = p + len;
 8016280:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8016284:	aa04      	add	r2, sp, #16
    end = p + len;
 8016286:	4419      	add	r1, r3
    if( ( ret = mbedtls_asn1_get_int( &p, end, &version ) ) != 0 )
 8016288:	a806      	add	r0, sp, #24
 801628a:	9101      	str	r1, [sp, #4]
 801628c:	f7f7 ff60 	bl	800e150 <mbedtls_asn1_get_int>
 8016290:	9901      	ldr	r1, [sp, #4]
 8016292:	2800      	cmp	r0, #0
 8016294:	d1ef      	bne.n	8016276 <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( version != 0 )
 8016296:	9b04      	ldr	r3, [sp, #16]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d140      	bne.n	801631e <pk_parse_key_pkcs8_unencrypted_der+0xc6>
    if( ( ret = pk_get_pk_alg( &p, end, &pk_alg, &params ) ) != 0 )
 801629c:	ab07      	add	r3, sp, #28
 801629e:	f10d 020f 	add.w	r2, sp, #15
 80162a2:	a806      	add	r0, sp, #24
 80162a4:	9101      	str	r1, [sp, #4]
 80162a6:	f7ff ffad 	bl	8016204 <pk_get_pk_alg>
 80162aa:	9901      	ldr	r1, [sp, #4]
 80162ac:	2800      	cmp	r0, #0
 80162ae:	d1e2      	bne.n	8016276 <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80162b0:	2304      	movs	r3, #4
 80162b2:	aa05      	add	r2, sp, #20
 80162b4:	a806      	add	r0, sp, #24
 80162b6:	f7f7 ff1f 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d1db      	bne.n	8016276 <pk_parse_key_pkcs8_unencrypted_der+0x1e>
    if( len < 1 )
 80162be:	9b05      	ldr	r3, [sp, #20]
 80162c0:	b37b      	cbz	r3, 8016322 <pk_parse_key_pkcs8_unencrypted_der+0xca>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 80162c2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80162c6:	f7ff fbe5 	bl	8015a94 <mbedtls_pk_info_from_type>
 80162ca:	4601      	mov	r1, r0
 80162cc:	b908      	cbnz	r0, 80162d2 <pk_parse_key_pkcs8_unencrypted_der+0x7a>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 80162ce:	4c16      	ldr	r4, [pc, #88]	; (8016328 <pk_parse_key_pkcs8_unencrypted_der+0xd0>)
 80162d0:	e7d3      	b.n	801627a <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 80162d2:	4628      	mov	r0, r5
 80162d4:	f7ff fbea 	bl	8015aac <mbedtls_pk_setup>
 80162d8:	4604      	mov	r4, r0
 80162da:	2800      	cmp	r0, #0
 80162dc:	d1cd      	bne.n	801627a <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_RSA )
 80162de:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80162e2:	2b01      	cmp	r3, #1
 80162e4:	d10b      	bne.n	80162fe <pk_parse_key_pkcs8_unencrypted_der+0xa6>
        if( ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), p, len ) ) != 0 )
 80162e6:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 80162ea:	6868      	ldr	r0, [r5, #4]
 80162ec:	f7ff fe4e 	bl	8015f8c <pk_parse_key_pkcs1_der>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 80162f0:	4604      	mov	r4, r0
 80162f2:	2800      	cmp	r0, #0
 80162f4:	d0c1      	beq.n	801627a <pk_parse_key_pkcs8_unencrypted_der+0x22>
            mbedtls_pk_free( pk );
 80162f6:	4628      	mov	r0, r5
 80162f8:	f7ff fbbb 	bl	8015a72 <mbedtls_pk_free>
            return( ret );
 80162fc:	e7bd      	b.n	801627a <pk_parse_key_pkcs8_unencrypted_der+0x22>
    if( pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH )
 80162fe:	3b02      	subs	r3, #2
 8016300:	2b01      	cmp	r3, #1
 8016302:	d8e4      	bhi.n	80162ce <pk_parse_key_pkcs8_unencrypted_der+0x76>
        if( ( ret = pk_use_ecparams( &params, &mbedtls_pk_ec( *pk )->grp ) ) != 0 ||
 8016304:	6869      	ldr	r1, [r5, #4]
 8016306:	a807      	add	r0, sp, #28
 8016308:	f7ff fe22 	bl	8015f50 <pk_use_ecparams>
 801630c:	4604      	mov	r4, r0
 801630e:	2800      	cmp	r0, #0
 8016310:	d1f1      	bne.n	80162f6 <pk_parse_key_pkcs8_unencrypted_der+0x9e>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), p, len )  ) != 0 )
 8016312:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
 8016316:	6868      	ldr	r0, [r5, #4]
 8016318:	f7ff feb8 	bl	801608c <pk_parse_key_sec1_der>
 801631c:	e7e8      	b.n	80162f0 <pk_parse_key_pkcs8_unencrypted_der+0x98>
        return( MBEDTLS_ERR_PK_KEY_INVALID_VERSION + ret );
 801631e:	4c03      	ldr	r4, [pc, #12]	; (801632c <pk_parse_key_pkcs8_unencrypted_der+0xd4>)
 8016320:	e7ab      	b.n	801627a <pk_parse_key_pkcs8_unencrypted_der+0x22>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT +
 8016322:	4c03      	ldr	r4, [pc, #12]	; (8016330 <pk_parse_key_pkcs8_unencrypted_der+0xd8>)
 8016324:	e7a9      	b.n	801627a <pk_parse_key_pkcs8_unencrypted_der+0x22>
 8016326:	bf00      	nop
 8016328:	ffffc380 	.word	0xffffc380
 801632c:	ffffc280 	.word	0xffffc280
 8016330:	ffffc2a0 	.word	0xffffc2a0

08016334 <mbedtls_pk_parse_subpubkey>:
{
 8016334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016338:	b088      	sub	sp, #32
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801633a:	2300      	movs	r3, #0
{
 801633c:	4690      	mov	r8, r2
    mbedtls_pk_type_t pk_alg = MBEDTLS_PK_NONE;
 801633e:	f88d 300b 	strb.w	r3, [sp, #11]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8016342:	aa03      	add	r2, sp, #12
 8016344:	2330      	movs	r3, #48	; 0x30
{
 8016346:	4606      	mov	r6, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8016348:	f7f7 fed6 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801634c:	b128      	cbz	r0, 801635a <mbedtls_pk_parse_subpubkey+0x26>
        return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT + ret );
 801634e:	f5a0 5574 	sub.w	r5, r0, #15616	; 0x3d00
}
 8016352:	4628      	mov	r0, r5
 8016354:	b008      	add	sp, #32
 8016356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    end = *p + len;
 801635a:	9b03      	ldr	r3, [sp, #12]
 801635c:	6837      	ldr	r7, [r6, #0]
 801635e:	441f      	add	r7, r3
    if( ( ret = pk_get_pk_alg( p, end, &pk_alg, &alg_params ) ) != 0 )
 8016360:	f10d 020b 	add.w	r2, sp, #11
 8016364:	ab05      	add	r3, sp, #20
 8016366:	4639      	mov	r1, r7
 8016368:	4630      	mov	r0, r6
 801636a:	f7ff ff4b 	bl	8016204 <pk_get_pk_alg>
 801636e:	4605      	mov	r5, r0
 8016370:	2800      	cmp	r0, #0
 8016372:	d1ee      	bne.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 8016374:	aa03      	add	r2, sp, #12
 8016376:	4639      	mov	r1, r7
 8016378:	4630      	mov	r0, r6
 801637a:	f7f7 ff41 	bl	800e200 <mbedtls_asn1_get_bitstring_null>
 801637e:	b110      	cbz	r0, 8016386 <mbedtls_pk_parse_subpubkey+0x52>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 8016380:	f5a0 556c 	sub.w	r5, r0, #15104	; 0x3b00
 8016384:	e7e5      	b.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 8016386:	6833      	ldr	r3, [r6, #0]
 8016388:	9a03      	ldr	r2, [sp, #12]
 801638a:	4413      	add	r3, r2
 801638c:	429f      	cmp	r7, r3
 801638e:	d16e      	bne.n	801646e <mbedtls_pk_parse_subpubkey+0x13a>
    if( ( pk_info = mbedtls_pk_info_from_type( pk_alg ) ) == NULL )
 8016390:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8016394:	f7ff fb7e 	bl	8015a94 <mbedtls_pk_info_from_type>
 8016398:	4601      	mov	r1, r0
 801639a:	2800      	cmp	r0, #0
 801639c:	d069      	beq.n	8016472 <mbedtls_pk_parse_subpubkey+0x13e>
    if( ( ret = mbedtls_pk_setup( pk, pk_info ) ) != 0 )
 801639e:	4640      	mov	r0, r8
 80163a0:	f7ff fb84 	bl	8015aac <mbedtls_pk_setup>
 80163a4:	4605      	mov	r5, r0
 80163a6:	2800      	cmp	r0, #0
 80163a8:	d1d3      	bne.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
    if( pk_alg == MBEDTLS_PK_RSA )
 80163aa:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d13a      	bne.n	8016428 <mbedtls_pk_parse_subpubkey+0xf4>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80163b2:	2330      	movs	r3, #48	; 0x30
 80163b4:	aa04      	add	r2, sp, #16
 80163b6:	4639      	mov	r1, r7
 80163b8:	4630      	mov	r0, r6
        ret = pk_get_rsapubkey( p, end, mbedtls_pk_rsa( *pk ) );
 80163ba:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80163be:	f7f7 fe9b 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80163c2:	b138      	cbz	r0, 80163d4 <mbedtls_pk_parse_subpubkey+0xa0>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY + ret );
 80163c4:	f5a0 546c 	sub.w	r4, r0, #15104	; 0x3b00
    if( ret == 0 && *p != end )
 80163c8:	b344      	cbz	r4, 801641c <mbedtls_pk_parse_subpubkey+0xe8>
        mbedtls_pk_free( pk );
 80163ca:	4640      	mov	r0, r8
 80163cc:	f7ff fb51 	bl	8015a72 <mbedtls_pk_free>
 80163d0:	4625      	mov	r5, r4
 80163d2:	e7be      	b.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
    if( *p + len != end )
 80163d4:	6833      	ldr	r3, [r6, #0]
 80163d6:	9a04      	ldr	r2, [sp, #16]
 80163d8:	4413      	add	r3, r2
 80163da:	429f      	cmp	r7, r3
 80163dc:	d001      	beq.n	80163e2 <mbedtls_pk_parse_subpubkey+0xae>
        ret = MBEDTLS_ERR_PK_INVALID_PUBKEY
 80163de:	4c26      	ldr	r4, [pc, #152]	; (8016478 <mbedtls_pk_parse_subpubkey+0x144>)
 80163e0:	e7f3      	b.n	80163ca <mbedtls_pk_parse_subpubkey+0x96>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 80163e2:	f109 0a08 	add.w	sl, r9, #8
 80163e6:	4652      	mov	r2, sl
 80163e8:	4639      	mov	r1, r7
 80163ea:	4630      	mov	r0, r6
 80163ec:	f7f7 fed4 	bl	800e198 <mbedtls_asn1_get_mpi>
 80163f0:	2800      	cmp	r0, #0
 80163f2:	d1e7      	bne.n	80163c4 <mbedtls_pk_parse_subpubkey+0x90>
        ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->E ) ) != 0 )
 80163f4:	f109 0214 	add.w	r2, r9, #20
 80163f8:	4639      	mov	r1, r7
 80163fa:	4630      	mov	r0, r6
 80163fc:	f7f7 fecc 	bl	800e198 <mbedtls_asn1_get_mpi>
    if( ( ret = mbedtls_asn1_get_mpi( p, end, &rsa->N ) ) != 0 ||
 8016400:	2800      	cmp	r0, #0
 8016402:	d1df      	bne.n	80163c4 <mbedtls_pk_parse_subpubkey+0x90>
    if( *p != end )
 8016404:	6833      	ldr	r3, [r6, #0]
 8016406:	429f      	cmp	r7, r3
 8016408:	d1e9      	bne.n	80163de <mbedtls_pk_parse_subpubkey+0xaa>
    if( ( ret = mbedtls_rsa_check_pubkey( rsa ) ) != 0 )
 801640a:	4648      	mov	r0, r9
 801640c:	f000 f97e 	bl	801670c <mbedtls_rsa_check_pubkey>
 8016410:	b940      	cbnz	r0, 8016424 <mbedtls_pk_parse_subpubkey+0xf0>
    rsa->len = mbedtls_mpi_size( &rsa->N );
 8016412:	4650      	mov	r0, sl
 8016414:	f7f8 fbf3 	bl	800ebfe <mbedtls_mpi_size>
 8016418:	f8c9 0004 	str.w	r0, [r9, #4]
    if( ret == 0 && *p != end )
 801641c:	6833      	ldr	r3, [r6, #0]
 801641e:	42bb      	cmp	r3, r7
 8016420:	d1dd      	bne.n	80163de <mbedtls_pk_parse_subpubkey+0xaa>
 8016422:	e796      	b.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY );
 8016424:	4c15      	ldr	r4, [pc, #84]	; (801647c <mbedtls_pk_parse_subpubkey+0x148>)
 8016426:	e7d0      	b.n	80163ca <mbedtls_pk_parse_subpubkey+0x96>
    if( pk_alg == MBEDTLS_PK_ECKEY_DH || pk_alg == MBEDTLS_PK_ECKEY )
 8016428:	3b02      	subs	r3, #2
 801642a:	2b01      	cmp	r3, #1
 801642c:	d81d      	bhi.n	801646a <mbedtls_pk_parse_subpubkey+0x136>
        ret = pk_use_ecparams( &alg_params, &mbedtls_pk_ec( *pk )->grp );
 801642e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016432:	a805      	add	r0, sp, #20
 8016434:	f7ff fd8c 	bl	8015f50 <pk_use_ecparams>
        if( ret == 0 )
 8016438:	4604      	mov	r4, r0
 801643a:	2800      	cmp	r0, #0
 801643c:	d1c5      	bne.n	80163ca <mbedtls_pk_parse_subpubkey+0x96>
            ret = pk_get_ecpubkey( p, end, mbedtls_pk_ec( *pk ) );
 801643e:	f8d8 9004 	ldr.w	r9, [r8, #4]
    if( ( ret = mbedtls_ecp_point_read_binary( &key->grp, &key->Q,
 8016442:	6832      	ldr	r2, [r6, #0]
 8016444:	f109 0188 	add.w	r1, r9, #136	; 0x88
 8016448:	1abb      	subs	r3, r7, r2
 801644a:	4648      	mov	r0, r9
 801644c:	9101      	str	r1, [sp, #4]
 801644e:	f7fc fb81 	bl	8012b54 <mbedtls_ecp_point_read_binary>
 8016452:	9901      	ldr	r1, [sp, #4]
 8016454:	4604      	mov	r4, r0
 8016456:	b918      	cbnz	r0, 8016460 <mbedtls_pk_parse_subpubkey+0x12c>
        ret = mbedtls_ecp_check_pubkey( &key->grp, &key->Q );
 8016458:	4648      	mov	r0, r9
 801645a:	f7fc fc07 	bl	8012c6c <mbedtls_ecp_check_pubkey>
 801645e:	4604      	mov	r4, r0
    *p = (unsigned char *) end;
 8016460:	6037      	str	r7, [r6, #0]
    if( ret == 0 && *p != end )
 8016462:	2c00      	cmp	r4, #0
 8016464:	f43f af75 	beq.w	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
 8016468:	e7af      	b.n	80163ca <mbedtls_pk_parse_subpubkey+0x96>
        ret = MBEDTLS_ERR_PK_UNKNOWN_PK_ALG;
 801646a:	4c05      	ldr	r4, [pc, #20]	; (8016480 <mbedtls_pk_parse_subpubkey+0x14c>)
 801646c:	e7ad      	b.n	80163ca <mbedtls_pk_parse_subpubkey+0x96>
        return( MBEDTLS_ERR_PK_INVALID_PUBKEY +
 801646e:	4d02      	ldr	r5, [pc, #8]	; (8016478 <mbedtls_pk_parse_subpubkey+0x144>)
 8016470:	e76f      	b.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016472:	4d03      	ldr	r5, [pc, #12]	; (8016480 <mbedtls_pk_parse_subpubkey+0x14c>)
 8016474:	e76d      	b.n	8016352 <mbedtls_pk_parse_subpubkey+0x1e>
 8016476:	bf00      	nop
 8016478:	ffffc49a 	.word	0xffffc49a
 801647c:	ffffc500 	.word	0xffffc500
 8016480:	ffffc380 	.word	0xffffc380

08016484 <mbedtls_pk_parse_key>:
 * Parse a private key
 */
int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
                  const unsigned char *key, size_t keylen,
                  const unsigned char *pwd, size_t pwdlen )
{
 8016484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016488:	b089      	sub	sp, #36	; 0x24
 801648a:	4605      	mov	r5, r0
 801648c:	4617      	mov	r7, r2

#if defined(MBEDTLS_PEM_PARSE_C)
    size_t len;
    mbedtls_pem_context pem;

    mbedtls_pem_init( &pem );
 801648e:	a805      	add	r0, sp, #20
{
 8016490:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 8016494:	460e      	mov	r6, r1
 8016496:	4698      	mov	r8, r3
    mbedtls_pem_init( &pem );
 8016498:	f7ff f971 	bl	801577e <mbedtls_pem_init>

#if defined(MBEDTLS_RSA_C)
    /* Avoid calling mbedtls_pem_read_buffer() on non-null-terminated string */
    if( keylen == 0 || key[keylen - 1] != '\0' )
 801649c:	2f00      	cmp	r7, #0
 801649e:	d139      	bne.n	8016514 <mbedtls_pk_parse_key+0x90>
    {
        return( ret );
    }
#endif /* MBEDTLS_PKCS12_C || MBEDTLS_PKCS5_C */

    if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk, key, keylen ) ) == 0 )
 80164a0:	463a      	mov	r2, r7
 80164a2:	4631      	mov	r1, r6
 80164a4:	4628      	mov	r0, r5
 80164a6:	f7ff fed7 	bl	8016258 <pk_parse_key_pkcs8_unencrypted_der>
 80164aa:	2800      	cmp	r0, #0
 80164ac:	f000 80b5 	beq.w	801661a <mbedtls_pk_parse_key+0x196>
        return( 0 );

    mbedtls_pk_free( pk );
 80164b0:	4628      	mov	r0, r5
 80164b2:	f7ff fade 	bl	8015a72 <mbedtls_pk_free>

#if defined(MBEDTLS_RSA_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 80164b6:	2001      	movs	r0, #1
 80164b8:	f7ff faec 	bl	8015a94 <mbedtls_pk_info_from_type>
 80164bc:	4601      	mov	r1, r0
 80164be:	2800      	cmp	r0, #0
 80164c0:	d041      	beq.n	8016546 <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 80164c2:	4628      	mov	r0, r5
 80164c4:	f7ff faf2 	bl	8015aac <mbedtls_pk_setup>
 80164c8:	2800      	cmp	r0, #0
 80164ca:	f040 80a6 	bne.w	801661a <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ), key, keylen ) ) == 0 )
 80164ce:	6868      	ldr	r0, [r5, #4]
 80164d0:	463a      	mov	r2, r7
 80164d2:	4631      	mov	r1, r6
 80164d4:	f7ff fd5a 	bl	8015f8c <pk_parse_key_pkcs1_der>
    if( ( ret = mbedtls_pk_setup( pk, pk_info                           ) ) != 0 ||
 80164d8:	2800      	cmp	r0, #0
 80164da:	f000 809e 	beq.w	801661a <mbedtls_pk_parse_key+0x196>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 80164de:	4628      	mov	r0, r5
 80164e0:	f7ff fac7 	bl	8015a72 <mbedtls_pk_free>
#endif /* MBEDTLS_RSA_C */

#if defined(MBEDTLS_ECP_C)
    if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 80164e4:	2002      	movs	r0, #2
 80164e6:	f7ff fad5 	bl	8015a94 <mbedtls_pk_info_from_type>
 80164ea:	4601      	mov	r1, r0
 80164ec:	b358      	cbz	r0, 8016546 <mbedtls_pk_parse_key+0xc2>
        return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );

    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 80164ee:	4628      	mov	r0, r5
 80164f0:	f7ff fadc 	bl	8015aac <mbedtls_pk_setup>
 80164f4:	2800      	cmp	r0, #0
 80164f6:	f040 8090 	bne.w	801661a <mbedtls_pk_parse_key+0x196>
        ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ), key, keylen ) ) == 0 )
 80164fa:	6868      	ldr	r0, [r5, #4]
 80164fc:	463a      	mov	r2, r7
 80164fe:	4631      	mov	r1, r6
 8016500:	f7ff fdc4 	bl	801608c <pk_parse_key_sec1_der>
    if( ( ret = mbedtls_pk_setup( pk, pk_info                         ) ) != 0 ||
 8016504:	2800      	cmp	r0, #0
 8016506:	f000 8088 	beq.w	801661a <mbedtls_pk_parse_key+0x196>
    {
        return( 0 );
    }

    mbedtls_pk_free( pk );
 801650a:	4628      	mov	r0, r5
 801650c:	f7ff fab1 	bl	8015a72 <mbedtls_pk_free>
#endif /* MBEDTLS_ECP_C */

    return( MBEDTLS_ERR_PK_KEY_INVALID_FORMAT );
 8016510:	4c43      	ldr	r4, [pc, #268]	; (8016620 <mbedtls_pk_parse_key+0x19c>)
 8016512:	e019      	b.n	8016548 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016514:	f107 39ff 	add.w	r9, r7, #4294967295
 8016518:	f816 3009 	ldrb.w	r3, [r6, r9]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d1bf      	bne.n	80164a0 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 8016520:	f10d 0a10 	add.w	sl, sp, #16
 8016524:	e9cd ba01 	strd	fp, sl, [sp, #4]
 8016528:	4a3e      	ldr	r2, [pc, #248]	; (8016624 <mbedtls_pk_parse_key+0x1a0>)
 801652a:	493f      	ldr	r1, [pc, #252]	; (8016628 <mbedtls_pk_parse_key+0x1a4>)
 801652c:	f8cd 8000 	str.w	r8, [sp]
 8016530:	4633      	mov	r3, r6
 8016532:	a805      	add	r0, sp, #20
 8016534:	f7ff f928 	bl	8015788 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8016538:	4604      	mov	r4, r0
 801653a:	b9e0      	cbnz	r0, 8016576 <mbedtls_pk_parse_key+0xf2>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_RSA ) ) == NULL )
 801653c:	2001      	movs	r0, #1
 801653e:	f7ff faa9 	bl	8015a94 <mbedtls_pk_info_from_type>
 8016542:	4601      	mov	r1, r0
 8016544:	b920      	cbnz	r0, 8016550 <mbedtls_pk_parse_key+0xcc>
            return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 8016546:	4c39      	ldr	r4, [pc, #228]	; (801662c <mbedtls_pk_parse_key+0x1a8>)
}
 8016548:	4620      	mov	r0, r4
 801654a:	b009      	add	sp, #36	; 0x24
 801654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( ( ret = mbedtls_pk_setup( pk, pk_info                    ) ) != 0 ||
 8016550:	4628      	mov	r0, r5
 8016552:	f7ff faab 	bl	8015aac <mbedtls_pk_setup>
 8016556:	4604      	mov	r4, r0
 8016558:	b930      	cbnz	r0, 8016568 <mbedtls_pk_parse_key+0xe4>
            ( ret = pk_parse_key_pkcs1_der( mbedtls_pk_rsa( *pk ),
 801655a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801655e:	6868      	ldr	r0, [r5, #4]
 8016560:	f7ff fd14 	bl	8015f8c <pk_parse_key_pkcs1_der>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8016564:	4604      	mov	r4, r0
 8016566:	b110      	cbz	r0, 801656e <mbedtls_pk_parse_key+0xea>
            mbedtls_pk_free( pk );
 8016568:	4628      	mov	r0, r5
 801656a:	f7ff fa82 	bl	8015a72 <mbedtls_pk_free>
        mbedtls_pem_free( &pem );
 801656e:	a805      	add	r0, sp, #20
 8016570:	f7ff fa66 	bl	8015a40 <mbedtls_pem_free>
        return( ret );
 8016574:	e7e8      	b.n	8016548 <mbedtls_pk_parse_key+0xc4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 8016576:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 801657a:	d101      	bne.n	8016580 <mbedtls_pk_parse_key+0xfc>
        return( MBEDTLS_ERR_PK_PASSWORD_MISMATCH );
 801657c:	4c2c      	ldr	r4, [pc, #176]	; (8016630 <mbedtls_pk_parse_key+0x1ac>)
 801657e:	e7e3      	b.n	8016548 <mbedtls_pk_parse_key+0xc4>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 8016580:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 8016584:	d101      	bne.n	801658a <mbedtls_pk_parse_key+0x106>
        return( MBEDTLS_ERR_PK_PASSWORD_REQUIRED );
 8016586:	4c2b      	ldr	r4, [pc, #172]	; (8016634 <mbedtls_pk_parse_key+0x1b0>)
 8016588:	e7de      	b.n	8016548 <mbedtls_pk_parse_key+0xc4>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 801658a:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 801658e:	d1db      	bne.n	8016548 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 8016590:	f816 3009 	ldrb.w	r3, [r6, r9]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d183      	bne.n	80164a0 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 8016598:	e9cd ba01 	strd	fp, sl, [sp, #4]
 801659c:	4a26      	ldr	r2, [pc, #152]	; (8016638 <mbedtls_pk_parse_key+0x1b4>)
 801659e:	4927      	ldr	r1, [pc, #156]	; (801663c <mbedtls_pk_parse_key+0x1b8>)
 80165a0:	f8cd 8000 	str.w	r8, [sp]
 80165a4:	4633      	mov	r3, r6
 80165a6:	a805      	add	r0, sp, #20
 80165a8:	f7ff f8ee 	bl	8015788 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 80165ac:	4604      	mov	r4, r0
 80165ae:	b988      	cbnz	r0, 80165d4 <mbedtls_pk_parse_key+0x150>
        if( ( pk_info = mbedtls_pk_info_from_type( MBEDTLS_PK_ECKEY ) ) == NULL )
 80165b0:	2002      	movs	r0, #2
 80165b2:	f7ff fa6f 	bl	8015a94 <mbedtls_pk_info_from_type>
 80165b6:	4601      	mov	r1, r0
 80165b8:	2800      	cmp	r0, #0
 80165ba:	d0c4      	beq.n	8016546 <mbedtls_pk_parse_key+0xc2>
        if( ( ret = mbedtls_pk_setup( pk, pk_info                   ) ) != 0 ||
 80165bc:	4628      	mov	r0, r5
 80165be:	f7ff fa75 	bl	8015aac <mbedtls_pk_setup>
 80165c2:	4604      	mov	r4, r0
 80165c4:	2800      	cmp	r0, #0
 80165c6:	d1cf      	bne.n	8016568 <mbedtls_pk_parse_key+0xe4>
            ( ret = pk_parse_key_sec1_der( mbedtls_pk_ec( *pk ),
 80165c8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80165cc:	6868      	ldr	r0, [r5, #4]
 80165ce:	f7ff fd5d 	bl	801608c <pk_parse_key_sec1_der>
 80165d2:	e7c7      	b.n	8016564 <mbedtls_pk_parse_key+0xe0>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_MISMATCH )
 80165d4:	f510 5f9c 	cmn.w	r0, #4992	; 0x1380
 80165d8:	d0d0      	beq.n	801657c <mbedtls_pk_parse_key+0xf8>
    else if( ret == MBEDTLS_ERR_PEM_PASSWORD_REQUIRED )
 80165da:	f510 5f98 	cmn.w	r0, #4864	; 0x1300
 80165de:	d0d2      	beq.n	8016586 <mbedtls_pk_parse_key+0x102>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80165e0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80165e4:	d1b0      	bne.n	8016548 <mbedtls_pk_parse_key+0xc4>
    if( keylen == 0 || key[keylen - 1] != '\0' )
 80165e6:	f816 3009 	ldrb.w	r3, [r6, r9]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	f47f af58 	bne.w	80164a0 <mbedtls_pk_parse_key+0x1c>
        ret = mbedtls_pem_read_buffer( &pem,
 80165f0:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80165f4:	9300      	str	r3, [sp, #0]
 80165f6:	4a12      	ldr	r2, [pc, #72]	; (8016640 <mbedtls_pk_parse_key+0x1bc>)
 80165f8:	4912      	ldr	r1, [pc, #72]	; (8016644 <mbedtls_pk_parse_key+0x1c0>)
 80165fa:	4633      	mov	r3, r6
 80165fc:	a805      	add	r0, sp, #20
 80165fe:	f7ff f8c3 	bl	8015788 <mbedtls_pem_read_buffer>
    if( ret == 0 )
 8016602:	4604      	mov	r4, r0
 8016604:	b928      	cbnz	r0, 8016612 <mbedtls_pk_parse_key+0x18e>
        if( ( ret = pk_parse_key_pkcs8_unencrypted_der( pk,
 8016606:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 801660a:	4628      	mov	r0, r5
 801660c:	f7ff fe24 	bl	8016258 <pk_parse_key_pkcs8_unencrypted_der>
 8016610:	e7a8      	b.n	8016564 <mbedtls_pk_parse_key+0xe0>
    else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 8016612:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 8016616:	d197      	bne.n	8016548 <mbedtls_pk_parse_key+0xc4>
 8016618:	e742      	b.n	80164a0 <mbedtls_pk_parse_key+0x1c>
        return( 0 );
 801661a:	2400      	movs	r4, #0
 801661c:	e794      	b.n	8016548 <mbedtls_pk_parse_key+0xc4>
 801661e:	bf00      	nop
 8016620:	ffffc300 	.word	0xffffc300
 8016624:	08030b86 	.word	0x08030b86
 8016628:	08030ba4 	.word	0x08030ba4
 801662c:	ffffc380 	.word	0xffffc380
 8016630:	ffffc480 	.word	0xffffc480
 8016634:	ffffc400 	.word	0xffffc400
 8016638:	08030bc4 	.word	0x08030bc4
 801663c:	08030be1 	.word	0x08030be1
 8016640:	08030c00 	.word	0x08030c00
 8016644:	08030c1a 	.word	0x08030c1a

08016648 <mbedtls_platform_set_calloc_free>:
void (*mbedtls_free)( void * )     = MBEDTLS_PLATFORM_STD_FREE;

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc = calloc_func;
 8016648:	4b02      	ldr	r3, [pc, #8]	; (8016654 <mbedtls_platform_set_calloc_free+0xc>)
    mbedtls_free = free_func;
 801664a:	e9c3 0100 	strd	r0, r1, [r3]
    return( 0 );
}
 801664e:	2000      	movs	r0, #0
 8016650:	4770      	bx	lr
 8016652:	bf00      	nop
 8016654:	200005a0 	.word	0x200005a0

08016658 <mbedtls_zeroize>:
#define mbedtls_free   free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8016658:	4401      	add	r1, r0
 801665a:	2300      	movs	r3, #0
 801665c:	4288      	cmp	r0, r1
 801665e:	d100      	bne.n	8016662 <mbedtls_zeroize+0xa>
}
 8016660:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 8016662:	f800 3b01 	strb.w	r3, [r0], #1
 8016666:	e7f9      	b.n	801665c <mbedtls_zeroize+0x4>

08016668 <mgf_mask>:
 * \param slen      length of the source buffer
 * \param md_ctx    message digest context to use
 */
static void mgf_mask( unsigned char *dst, size_t dlen, unsigned char *src,
                      size_t slen, mbedtls_md_context_t *md_ctx )
{
 8016668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801666c:	b092      	sub	sp, #72	; 0x48
 801666e:	4604      	mov	r4, r0
 8016670:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016672:	460d      	mov	r5, r1
 8016674:	4617      	mov	r7, r2
    unsigned char counter[4];
    unsigned char *p;
    unsigned int hlen;
    size_t i, use_len;

    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 8016676:	2100      	movs	r1, #0
 8016678:	2240      	movs	r2, #64	; 0x40
 801667a:	a802      	add	r0, sp, #8
{
 801667c:	4698      	mov	r8, r3
    memset( mask, 0, MBEDTLS_MD_MAX_SIZE );
 801667e:	f00b fedb 	bl	8022438 <memset>
    memset( counter, 0, 4 );
 8016682:	2300      	movs	r3, #0

    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8016684:	6830      	ldr	r0, [r6, #0]
    memset( counter, 0, 4 );
 8016686:	9301      	str	r3, [sp, #4]
    hlen = mbedtls_md_get_size( md_ctx->md_info );
 8016688:	f7fe fa5c 	bl	8014b44 <mbedtls_md_get_size>
 801668c:	4681      	mov	r9, r0

    /* Generate and apply dbMask */
    p = dst;

    while( dlen > 0 )
 801668e:	b935      	cbnz	r5, 801669e <mgf_mask+0x36>
        counter[3]++;

        dlen -= use_len;
    }

    mbedtls_zeroize( mask, sizeof( mask ) );
 8016690:	2140      	movs	r1, #64	; 0x40
 8016692:	a802      	add	r0, sp, #8
 8016694:	f7ff ffe0 	bl	8016658 <mbedtls_zeroize>
}
 8016698:	b012      	add	sp, #72	; 0x48
 801669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( dlen < hlen )
 801669e:	454d      	cmp	r5, r9
        mbedtls_md_starts( md_ctx );
 80166a0:	4630      	mov	r0, r6
 80166a2:	46aa      	mov	sl, r5
 80166a4:	bf28      	it	cs
 80166a6:	46ca      	movcs	sl, r9
 80166a8:	f7fe f954 	bl	8014954 <mbedtls_md_starts>
        mbedtls_md_update( md_ctx, src, slen );
 80166ac:	4642      	mov	r2, r8
 80166ae:	4639      	mov	r1, r7
 80166b0:	4630      	mov	r0, r6
 80166b2:	f7fe f95d 	bl	8014970 <mbedtls_md_update>
        mbedtls_md_update( md_ctx, counter, 4 );
 80166b6:	2204      	movs	r2, #4
 80166b8:	eb0d 0102 	add.w	r1, sp, r2
 80166bc:	4630      	mov	r0, r6
 80166be:	f7fe f957 	bl	8014970 <mbedtls_md_update>
        mbedtls_md_finish( md_ctx, mask );
 80166c2:	a902      	add	r1, sp, #8
 80166c4:	4630      	mov	r0, r6
 80166c6:	f7fe f961 	bl	801498c <mbedtls_md_finish>
        for( i = 0; i < use_len; ++i )
 80166ca:	aa02      	add	r2, sp, #8
 80166cc:	eb04 010a 	add.w	r1, r4, sl
 80166d0:	428c      	cmp	r4, r1
 80166d2:	d107      	bne.n	80166e4 <mgf_mask+0x7c>
        counter[3]++;
 80166d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80166d8:	3301      	adds	r3, #1
 80166da:	f88d 3007 	strb.w	r3, [sp, #7]
        dlen -= use_len;
 80166de:	eba5 050a 	sub.w	r5, r5, sl
 80166e2:	e7d4      	b.n	801668e <mgf_mask+0x26>
            *p++ ^= mask[i];
 80166e4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80166e8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80166ec:	4043      	eors	r3, r0
 80166ee:	f804 3c01 	strb.w	r3, [r4, #-1]
        for( i = 0; i < use_len; ++i )
 80166f2:	e7ed      	b.n	80166d0 <mgf_mask+0x68>

080166f4 <mbedtls_rsa_init>:
{
 80166f4:	b570      	push	{r4, r5, r6, lr}
 80166f6:	4604      	mov	r4, r0
 80166f8:	460e      	mov	r6, r1
 80166fa:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
 80166fc:	2100      	movs	r1, #0
 80166fe:	22ac      	movs	r2, #172	; 0xac
 8016700:	f00b fe9a 	bl	8022438 <memset>
    ctx->hash_id = hash_id;
 8016704:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
 8016708:	bd70      	pop	{r4, r5, r6, pc}
	...

0801670c <mbedtls_rsa_check_pubkey>:
    if( !ctx->N.p || !ctx->E.p )
 801670c:	6902      	ldr	r2, [r0, #16]
{
 801670e:	b538      	push	{r3, r4, r5, lr}
 8016710:	4604      	mov	r4, r0
    if( !ctx->N.p || !ctx->E.p )
 8016712:	b302      	cbz	r2, 8016756 <mbedtls_rsa_check_pubkey+0x4a>
 8016714:	69c3      	ldr	r3, [r0, #28]
 8016716:	b1f3      	cbz	r3, 8016756 <mbedtls_rsa_check_pubkey+0x4a>
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 8016718:	6812      	ldr	r2, [r2, #0]
 801671a:	07d2      	lsls	r2, r2, #31
 801671c:	d51b      	bpl.n	8016756 <mbedtls_rsa_check_pubkey+0x4a>
        ( ctx->E.p[0] & 1 ) == 0 )
 801671e:	681b      	ldr	r3, [r3, #0]
    if( ( ctx->N.p[0] & 1 ) == 0 ||
 8016720:	07db      	lsls	r3, r3, #31
 8016722:	d518      	bpl.n	8016756 <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 8016724:	f100 0508 	add.w	r5, r0, #8
 8016728:	4628      	mov	r0, r5
 801672a:	f7f8 fa4c 	bl	800ebc6 <mbedtls_mpi_bitlen>
 801672e:	287f      	cmp	r0, #127	; 0x7f
 8016730:	d911      	bls.n	8016756 <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_bitlen( &ctx->N ) > MBEDTLS_MPI_MAX_BITS )
 8016732:	4628      	mov	r0, r5
 8016734:	f7f8 fa47 	bl	800ebc6 <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 ||
 8016738:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 801673c:	d80b      	bhi.n	8016756 <mbedtls_rsa_check_pubkey+0x4a>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 801673e:	3414      	adds	r4, #20
 8016740:	4620      	mov	r0, r4
 8016742:	f7f8 fa40 	bl	800ebc6 <mbedtls_mpi_bitlen>
 8016746:	2801      	cmp	r0, #1
 8016748:	d905      	bls.n	8016756 <mbedtls_rsa_check_pubkey+0x4a>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
 801674a:	4629      	mov	r1, r5
 801674c:	4620      	mov	r0, r4
 801674e:	f7f8 fbd4 	bl	800eefa <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_bitlen( &ctx->E ) < 2 ||
 8016752:	2800      	cmp	r0, #0
 8016754:	db01      	blt.n	801675a <mbedtls_rsa_check_pubkey+0x4e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 8016756:	4802      	ldr	r0, [pc, #8]	; (8016760 <mbedtls_rsa_check_pubkey+0x54>)
}
 8016758:	bd38      	pop	{r3, r4, r5, pc}
    return( 0 );
 801675a:	2000      	movs	r0, #0
 801675c:	e7fc      	b.n	8016758 <mbedtls_rsa_check_pubkey+0x4c>
 801675e:	bf00      	nop
 8016760:	ffffbe00 	.word	0xffffbe00

08016764 <mbedtls_rsa_check_privkey>:
{
 8016764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016768:	b0a9      	sub	sp, #164	; 0xa4
 801676a:	4605      	mov	r5, r0
    if( ( ret = mbedtls_rsa_check_pubkey( ctx ) ) != 0 )
 801676c:	f7ff ffce 	bl	801670c <mbedtls_rsa_check_pubkey>
 8016770:	4604      	mov	r4, r0
 8016772:	2800      	cmp	r0, #0
 8016774:	f040 80cb 	bne.w	801690e <mbedtls_rsa_check_privkey+0x1aa>
    if( !ctx->P.p || !ctx->Q.p || !ctx->D.p )
 8016778:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801677a:	2b00      	cmp	r3, #0
 801677c:	f000 80f5 	beq.w	801696a <mbedtls_rsa_check_privkey+0x206>
 8016780:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8016782:	2b00      	cmp	r3, #0
 8016784:	f000 80f1 	beq.w	801696a <mbedtls_rsa_check_privkey+0x206>
 8016788:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801678a:	2b00      	cmp	r3, #0
 801678c:	f000 80ed 	beq.w	801696a <mbedtls_rsa_check_privkey+0x206>
    mbedtls_mpi_init( &PQ ); mbedtls_mpi_init( &DE ); mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 );
 8016790:	a801      	add	r0, sp, #4
 8016792:	f7f8 f8ec 	bl	800e96e <mbedtls_mpi_init>
 8016796:	a804      	add	r0, sp, #16
 8016798:	f7f8 f8e9 	bl	800e96e <mbedtls_mpi_init>
 801679c:	a807      	add	r0, sp, #28
 801679e:	f7f8 f8e6 	bl	800e96e <mbedtls_mpi_init>
 80167a2:	a80a      	add	r0, sp, #40	; 0x28
 80167a4:	f7f8 f8e3 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &H  ); mbedtls_mpi_init( &I  ); mbedtls_mpi_init( &G  ); mbedtls_mpi_init( &G2 );
 80167a8:	a80d      	add	r0, sp, #52	; 0x34
 80167aa:	f7f8 f8e0 	bl	800e96e <mbedtls_mpi_init>
 80167ae:	a810      	add	r0, sp, #64	; 0x40
 80167b0:	f7f8 f8dd 	bl	800e96e <mbedtls_mpi_init>
 80167b4:	a813      	add	r0, sp, #76	; 0x4c
 80167b6:	f7f8 f8da 	bl	800e96e <mbedtls_mpi_init>
 80167ba:	a816      	add	r0, sp, #88	; 0x58
 80167bc:	f7f8 f8d7 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &L1 ); mbedtls_mpi_init( &L2 ); mbedtls_mpi_init( &DP ); mbedtls_mpi_init( &DQ );
 80167c0:	a819      	add	r0, sp, #100	; 0x64
 80167c2:	f7f8 f8d4 	bl	800e96e <mbedtls_mpi_init>
 80167c6:	a81c      	add	r0, sp, #112	; 0x70
 80167c8:	f7f8 f8d1 	bl	800e96e <mbedtls_mpi_init>
 80167cc:	a81f      	add	r0, sp, #124	; 0x7c
 80167ce:	f7f8 f8ce 	bl	800e96e <mbedtls_mpi_init>
 80167d2:	a822      	add	r0, sp, #136	; 0x88
 80167d4:	f7f8 f8cb 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80167d8:	f105 072c 	add.w	r7, r5, #44	; 0x2c
    mbedtls_mpi_init( &QP );
 80167dc:	a825      	add	r0, sp, #148	; 0x94
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80167de:	f105 0638 	add.w	r6, r5, #56	; 0x38
    mbedtls_mpi_init( &QP );
 80167e2:	f7f8 f8c4 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &PQ, &ctx->P, &ctx->Q ) );
 80167e6:	4632      	mov	r2, r6
 80167e8:	4639      	mov	r1, r7
 80167ea:	a801      	add	r0, sp, #4
 80167ec:	f7f8 fccf 	bl	800f18e <mbedtls_mpi_mul_mpi>
 80167f0:	4604      	mov	r4, r0
 80167f2:	2800      	cmp	r0, #0
 80167f4:	d15e      	bne.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DE, &ctx->D, &ctx->E ) );
 80167f6:	f105 0820 	add.w	r8, r5, #32
 80167fa:	f105 0914 	add.w	r9, r5, #20
 80167fe:	464a      	mov	r2, r9
 8016800:	4641      	mov	r1, r8
 8016802:	a804      	add	r0, sp, #16
 8016804:	f7f8 fcc3 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016808:	4604      	mov	r4, r0
 801680a:	2800      	cmp	r0, #0
 801680c:	d152      	bne.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 801680e:	2201      	movs	r2, #1
 8016810:	4639      	mov	r1, r7
 8016812:	a807      	add	r0, sp, #28
 8016814:	f7f8 fca5 	bl	800f162 <mbedtls_mpi_sub_int>
 8016818:	4604      	mov	r4, r0
 801681a:	2800      	cmp	r0, #0
 801681c:	d14a      	bne.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 801681e:	2201      	movs	r2, #1
 8016820:	4631      	mov	r1, r6
 8016822:	a80a      	add	r0, sp, #40	; 0x28
 8016824:	f7f8 fc9d 	bl	800f162 <mbedtls_mpi_sub_int>
 8016828:	4604      	mov	r4, r0
 801682a:	2800      	cmp	r0, #0
 801682c:	d142      	bne.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &H, &P1, &Q1 ) );
 801682e:	aa0a      	add	r2, sp, #40	; 0x28
 8016830:	a907      	add	r1, sp, #28
 8016832:	a80d      	add	r0, sp, #52	; 0x34
 8016834:	f7f8 fcab 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016838:	4604      	mov	r4, r0
 801683a:	2800      	cmp	r0, #0
 801683c:	d13a      	bne.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, &ctx->E, &H  ) );
 801683e:	aa0d      	add	r2, sp, #52	; 0x34
 8016840:	4649      	mov	r1, r9
 8016842:	a813      	add	r0, sp, #76	; 0x4c
 8016844:	f7f9 f931 	bl	800faaa <mbedtls_mpi_gcd>
 8016848:	4604      	mov	r4, r0
 801684a:	2800      	cmp	r0, #0
 801684c:	d132      	bne.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G2, &P1, &Q1 ) );
 801684e:	aa0a      	add	r2, sp, #40	; 0x28
 8016850:	a907      	add	r1, sp, #28
 8016852:	a816      	add	r0, sp, #88	; 0x58
 8016854:	f7f9 f929 	bl	800faaa <mbedtls_mpi_gcd>
 8016858:	4604      	mov	r4, r0
 801685a:	bb58      	cbnz	r0, 80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( &L1, &L2, &H, &G2 ) );
 801685c:	ab16      	add	r3, sp, #88	; 0x58
 801685e:	aa0d      	add	r2, sp, #52	; 0x34
 8016860:	a91c      	add	r1, sp, #112	; 0x70
 8016862:	a819      	add	r0, sp, #100	; 0x64
 8016864:	f7f8 fd04 	bl	800f270 <mbedtls_mpi_div_mpi>
 8016868:	4604      	mov	r4, r0
 801686a:	bb18      	cbnz	r0, 80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &I, &DE, &L1  ) );
 801686c:	aa19      	add	r2, sp, #100	; 0x64
 801686e:	a904      	add	r1, sp, #16
 8016870:	a810      	add	r0, sp, #64	; 0x40
 8016872:	f7f8 feba 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016876:	4604      	mov	r4, r0
 8016878:	b9e0      	cbnz	r0, 80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DP, &ctx->D, &P1 ) );
 801687a:	aa07      	add	r2, sp, #28
 801687c:	4641      	mov	r1, r8
 801687e:	a81f      	add	r0, sp, #124	; 0x7c
 8016880:	f7f8 feb3 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016884:	4604      	mov	r4, r0
 8016886:	b9a8      	cbnz	r0, 80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &DQ, &ctx->D, &Q1 ) );
 8016888:	aa0a      	add	r2, sp, #40	; 0x28
 801688a:	4641      	mov	r1, r8
 801688c:	a822      	add	r0, sp, #136	; 0x88
 801688e:	f7f8 feac 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016892:	4604      	mov	r4, r0
 8016894:	b970      	cbnz	r0, 80168b4 <mbedtls_rsa_check_privkey+0x150>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &QP, &ctx->Q, &ctx->P ) );
 8016896:	463a      	mov	r2, r7
 8016898:	4631      	mov	r1, r6
 801689a:	a825      	add	r0, sp, #148	; 0x94
 801689c:	f7f9 f9a2 	bl	800fbe4 <mbedtls_mpi_inv_mod>
 80168a0:	4604      	mov	r4, r0
 80168a2:	b938      	cbnz	r0, 80168b4 <mbedtls_rsa_check_privkey+0x150>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 80168a4:	f105 0108 	add.w	r1, r5, #8
 80168a8:	a801      	add	r0, sp, #4
 80168aa:	f7f8 fb26 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80168ae:	2800      	cmp	r0, #0
 80168b0:	d031      	beq.n	8016916 <mbedtls_rsa_check_privkey+0x1b2>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 80168b2:	4c2f      	ldr	r4, [pc, #188]	; (8016970 <mbedtls_rsa_check_privkey+0x20c>)
    mbedtls_mpi_free( &PQ ); mbedtls_mpi_free( &DE ); mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 );
 80168b4:	a801      	add	r0, sp, #4
 80168b6:	f7f8 f861 	bl	800e97c <mbedtls_mpi_free>
 80168ba:	a804      	add	r0, sp, #16
 80168bc:	f7f8 f85e 	bl	800e97c <mbedtls_mpi_free>
 80168c0:	a807      	add	r0, sp, #28
 80168c2:	f7f8 f85b 	bl	800e97c <mbedtls_mpi_free>
 80168c6:	a80a      	add	r0, sp, #40	; 0x28
 80168c8:	f7f8 f858 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &H  ); mbedtls_mpi_free( &I  ); mbedtls_mpi_free( &G  ); mbedtls_mpi_free( &G2 );
 80168cc:	a80d      	add	r0, sp, #52	; 0x34
 80168ce:	f7f8 f855 	bl	800e97c <mbedtls_mpi_free>
 80168d2:	a810      	add	r0, sp, #64	; 0x40
 80168d4:	f7f8 f852 	bl	800e97c <mbedtls_mpi_free>
 80168d8:	a813      	add	r0, sp, #76	; 0x4c
 80168da:	f7f8 f84f 	bl	800e97c <mbedtls_mpi_free>
 80168de:	a816      	add	r0, sp, #88	; 0x58
 80168e0:	f7f8 f84c 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &L1 ); mbedtls_mpi_free( &L2 ); mbedtls_mpi_free( &DP ); mbedtls_mpi_free( &DQ );
 80168e4:	a819      	add	r0, sp, #100	; 0x64
 80168e6:	f7f8 f849 	bl	800e97c <mbedtls_mpi_free>
 80168ea:	a81c      	add	r0, sp, #112	; 0x70
 80168ec:	f7f8 f846 	bl	800e97c <mbedtls_mpi_free>
 80168f0:	a81f      	add	r0, sp, #124	; 0x7c
 80168f2:	f7f8 f843 	bl	800e97c <mbedtls_mpi_free>
 80168f6:	a822      	add	r0, sp, #136	; 0x88
 80168f8:	f7f8 f840 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &QP );
 80168fc:	a825      	add	r0, sp, #148	; 0x94
 80168fe:	f7f8 f83d 	bl	800e97c <mbedtls_mpi_free>
    if( ret == MBEDTLS_ERR_RSA_KEY_CHECK_FAILED )
 8016902:	f514 4f84 	cmn.w	r4, #16896	; 0x4200
 8016906:	d002      	beq.n	801690e <mbedtls_rsa_check_privkey+0x1aa>
    if( ret != 0 )
 8016908:	b10c      	cbz	r4, 801690e <mbedtls_rsa_check_privkey+0x1aa>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED + ret );
 801690a:	f5a4 4484 	sub.w	r4, r4, #16896	; 0x4200
}
 801690e:	4620      	mov	r0, r4
 8016910:	b029      	add	sp, #164	; 0xa4
 8016912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 8016916:	f105 0144 	add.w	r1, r5, #68	; 0x44
 801691a:	a81f      	add	r0, sp, #124	; 0x7c
 801691c:	f7f8 faed 	bl	800eefa <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &PQ, &ctx->N ) != 0 ||
 8016920:	2800      	cmp	r0, #0
 8016922:	d1c6      	bne.n	80168b2 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 8016924:	f105 0150 	add.w	r1, r5, #80	; 0x50
 8016928:	a822      	add	r0, sp, #136	; 0x88
 801692a:	f7f8 fae6 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DP, &ctx->DP ) != 0 ||
 801692e:	2800      	cmp	r0, #0
 8016930:	d1bf      	bne.n	80168b2 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 8016932:	f105 015c 	add.w	r1, r5, #92	; 0x5c
 8016936:	a825      	add	r0, sp, #148	; 0x94
 8016938:	f7f8 fadf 	bl	800eefa <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_cmp_mpi( &DQ, &ctx->DQ ) != 0 ||
 801693c:	2800      	cmp	r0, #0
 801693e:	d1b8      	bne.n	80168b2 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 8016940:	2100      	movs	r1, #0
 8016942:	a81c      	add	r0, sp, #112	; 0x70
 8016944:	f7f8 fb1c 	bl	800ef80 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_mpi( &QP, &ctx->QP ) != 0 ||
 8016948:	2800      	cmp	r0, #0
 801694a:	d1b2      	bne.n	80168b2 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &I, 1 ) != 0 ||
 801694c:	2101      	movs	r1, #1
 801694e:	a810      	add	r0, sp, #64	; 0x40
 8016950:	f7f8 fb16 	bl	800ef80 <mbedtls_mpi_cmp_int>
        mbedtls_mpi_cmp_int( &L2, 0 ) != 0 ||
 8016954:	2800      	cmp	r0, #0
 8016956:	d1ac      	bne.n	80168b2 <mbedtls_rsa_check_privkey+0x14e>
        mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 8016958:	2101      	movs	r1, #1
 801695a:	a813      	add	r0, sp, #76	; 0x4c
 801695c:	f7f8 fb10 	bl	800ef80 <mbedtls_mpi_cmp_int>
        ret = MBEDTLS_ERR_RSA_KEY_CHECK_FAILED;
 8016960:	4b03      	ldr	r3, [pc, #12]	; (8016970 <mbedtls_rsa_check_privkey+0x20c>)
 8016962:	1e04      	subs	r4, r0, #0
 8016964:	bf18      	it	ne
 8016966:	461c      	movne	r4, r3
 8016968:	e7a4      	b.n	80168b4 <mbedtls_rsa_check_privkey+0x150>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 801696a:	4c01      	ldr	r4, [pc, #4]	; (8016970 <mbedtls_rsa_check_privkey+0x20c>)
 801696c:	e7cf      	b.n	801690e <mbedtls_rsa_check_privkey+0x1aa>
 801696e:	bf00      	nop
 8016970:	ffffbe00 	.word	0xffffbe00

08016974 <mbedtls_rsa_check_pub_priv>:
{
 8016974:	b538      	push	{r3, r4, r5, lr}
 8016976:	4605      	mov	r5, r0
 8016978:	460c      	mov	r4, r1
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 801697a:	f7ff fec7 	bl	801670c <mbedtls_rsa_check_pubkey>
 801697e:	b988      	cbnz	r0, 80169a4 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_rsa_check_privkey( prv ) != 0 )
 8016980:	4620      	mov	r0, r4
 8016982:	f7ff feef 	bl	8016764 <mbedtls_rsa_check_privkey>
    if( mbedtls_rsa_check_pubkey( pub ) != 0 ||
 8016986:	b968      	cbnz	r0, 80169a4 <mbedtls_rsa_check_pub_priv+0x30>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 8016988:	f104 0108 	add.w	r1, r4, #8
 801698c:	f105 0008 	add.w	r0, r5, #8
 8016990:	f7f8 fab3 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8016994:	b930      	cbnz	r0, 80169a4 <mbedtls_rsa_check_pub_priv+0x30>
        mbedtls_mpi_cmp_mpi( &pub->E, &prv->E ) != 0 )
 8016996:	f104 0114 	add.w	r1, r4, #20
 801699a:	f105 0014 	add.w	r0, r5, #20
 801699e:	f7f8 faac 	bl	800eefa <mbedtls_mpi_cmp_mpi>
    if( mbedtls_mpi_cmp_mpi( &pub->N, &prv->N ) != 0 ||
 80169a2:	b100      	cbz	r0, 80169a6 <mbedtls_rsa_check_pub_priv+0x32>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
 80169a4:	4800      	ldr	r0, [pc, #0]	; (80169a8 <mbedtls_rsa_check_pub_priv+0x34>)
}
 80169a6:	bd38      	pop	{r3, r4, r5, pc}
 80169a8:	ffffbe00 	.word	0xffffbe00

080169ac <mbedtls_rsa_public>:
{
 80169ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169ae:	4605      	mov	r5, r0
 80169b0:	b089      	sub	sp, #36	; 0x24
    mbedtls_mpi_init( &T );
 80169b2:	a805      	add	r0, sp, #20
{
 80169b4:	9103      	str	r1, [sp, #12]
 80169b6:	4616      	mov	r6, r2
    mbedtls_mpi_init( &T );
 80169b8:	f7f7 ffd9 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 80169bc:	686a      	ldr	r2, [r5, #4]
 80169be:	9903      	ldr	r1, [sp, #12]
 80169c0:	a805      	add	r0, sp, #20
 80169c2:	f7f8 f922 	bl	800ec0a <mbedtls_mpi_read_binary>
 80169c6:	4604      	mov	r4, r0
 80169c8:	b9d8      	cbnz	r0, 8016a02 <mbedtls_rsa_public+0x56>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 80169ca:	f105 0308 	add.w	r3, r5, #8
 80169ce:	4619      	mov	r1, r3
 80169d0:	a805      	add	r0, sp, #20
 80169d2:	9303      	str	r3, [sp, #12]
 80169d4:	f7f8 fa91 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 80169d8:	2800      	cmp	r0, #0
 80169da:	9b03      	ldr	r3, [sp, #12]
 80169dc:	da1a      	bge.n	8016a14 <mbedtls_rsa_public+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80169de:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80169e2:	a905      	add	r1, sp, #20
 80169e4:	9200      	str	r2, [sp, #0]
 80169e6:	4608      	mov	r0, r1
 80169e8:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
 80169ec:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
 80169ee:	f7f8 fe2e 	bl	800f64e <mbedtls_mpi_exp_mod>
 80169f2:	4604      	mov	r4, r0
 80169f4:	b928      	cbnz	r0, 8016a02 <mbedtls_rsa_public+0x56>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 80169f6:	463a      	mov	r2, r7
 80169f8:	4631      	mov	r1, r6
 80169fa:	a805      	add	r0, sp, #20
 80169fc:	f7f8 f938 	bl	800ec70 <mbedtls_mpi_write_binary>
 8016a00:	4604      	mov	r4, r0
    mbedtls_mpi_free( &T );
 8016a02:	a805      	add	r0, sp, #20
 8016a04:	f7f7 ffba 	bl	800e97c <mbedtls_mpi_free>
    if( ret != 0 )
 8016a08:	b10c      	cbz	r4, 8016a0e <mbedtls_rsa_public+0x62>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
 8016a0a:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280
}
 8016a0e:	4620      	mov	r0, r4
 8016a10:	b009      	add	sp, #36	; 0x24
 8016a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8016a14:	f06f 0403 	mvn.w	r4, #3
 8016a18:	e7f3      	b.n	8016a02 <mbedtls_rsa_public+0x56>
	...

08016a1c <mbedtls_rsa_private>:
{
 8016a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a20:	461e      	mov	r6, r3
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 8016a22:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8016a24:	b09d      	sub	sp, #116	; 0x74
 8016a26:	4604      	mov	r4, r0
 8016a28:	460d      	mov	r5, r1
 8016a2a:	4617      	mov	r7, r2
    if( ctx->P.p == NULL || ctx->Q.p == NULL || ctx->D.p == NULL )
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	f000 8179 	beq.w	8016d24 <mbedtls_rsa_private+0x308>
 8016a32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	f000 8175 	beq.w	8016d24 <mbedtls_rsa_private+0x308>
 8016a3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	f000 8171 	beq.w	8016d24 <mbedtls_rsa_private+0x308>
    mbedtls_mpi_init( &T ); mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 8016a42:	a804      	add	r0, sp, #16
 8016a44:	f7f7 ff93 	bl	800e96e <mbedtls_mpi_init>
 8016a48:	a807      	add	r0, sp, #28
 8016a4a:	f7f7 ff90 	bl	800e96e <mbedtls_mpi_init>
 8016a4e:	a80a      	add	r0, sp, #40	; 0x28
 8016a50:	f7f7 ff8d 	bl	800e96e <mbedtls_mpi_init>
    mbedtls_mpi_init( &P1 ); mbedtls_mpi_init( &Q1 ); mbedtls_mpi_init( &R );
 8016a54:	a80d      	add	r0, sp, #52	; 0x34
 8016a56:	f7f7 ff8a 	bl	800e96e <mbedtls_mpi_init>
 8016a5a:	a810      	add	r0, sp, #64	; 0x40
 8016a5c:	f7f7 ff87 	bl	800e96e <mbedtls_mpi_init>
 8016a60:	a813      	add	r0, sp, #76	; 0x4c
 8016a62:	f7f7 ff84 	bl	800e96e <mbedtls_mpi_init>
    if( f_rng != NULL )
 8016a66:	b12d      	cbz	r5, 8016a74 <mbedtls_rsa_private+0x58>
        mbedtls_mpi_init( &DP_blind );
 8016a68:	a816      	add	r0, sp, #88	; 0x58
 8016a6a:	f7f7 ff80 	bl	800e96e <mbedtls_mpi_init>
        mbedtls_mpi_init( &DQ_blind );
 8016a6e:	a819      	add	r0, sp, #100	; 0x64
 8016a70:	f7f7 ff7d 	bl	800e96e <mbedtls_mpi_init>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
 8016a74:	6862      	ldr	r2, [r4, #4]
 8016a76:	4631      	mov	r1, r6
 8016a78:	a804      	add	r0, sp, #16
 8016a7a:	f7f8 f8c6 	bl	800ec0a <mbedtls_mpi_read_binary>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	2800      	cmp	r0, #0
 8016a82:	f040 80e0 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
 8016a86:	f104 0608 	add.w	r6, r4, #8
 8016a8a:	4631      	mov	r1, r6
 8016a8c:	a804      	add	r0, sp, #16
 8016a8e:	f7f8 fa34 	bl	800eefa <mbedtls_mpi_cmp_mpi>
 8016a92:	2800      	cmp	r0, #0
 8016a94:	f280 8141 	bge.w	8016d1a <mbedtls_rsa_private+0x2fe>
    mbedtls_mpi *DP = &ctx->DP;
 8016a98:	f104 0a44 	add.w	sl, r4, #68	; 0x44
    mbedtls_mpi *DQ = &ctx->DQ;
 8016a9c:	f104 0950 	add.w	r9, r4, #80	; 0x50
    if( f_rng != NULL )
 8016aa0:	2d00      	cmp	r5, #0
 8016aa2:	f000 8089 	beq.w	8016bb8 <mbedtls_rsa_private+0x19c>
    if( ctx->Vf.p != NULL )
 8016aa6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	f000 80ee 	beq.w	8016c8c <mbedtls_rsa_private+0x270>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vi, &ctx->Vi, &ctx->Vi ) );
 8016ab0:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8016ab4:	460a      	mov	r2, r1
 8016ab6:	4608      	mov	r0, r1
 8016ab8:	9103      	str	r1, [sp, #12]
 8016aba:	f7f8 fb68 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	f040 80c0 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vi, &ctx->Vi, &ctx->N ) );
 8016ac6:	9903      	ldr	r1, [sp, #12]
 8016ac8:	4632      	mov	r2, r6
 8016aca:	4608      	mov	r0, r1
 8016acc:	f7f8 fd8d 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	f040 80b7 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ctx->Vf, &ctx->Vf, &ctx->Vf ) );
 8016ad8:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8016adc:	460a      	mov	r2, r1
 8016ade:	4608      	mov	r0, r1
 8016ae0:	9103      	str	r1, [sp, #12]
 8016ae2:	f7f8 fb54 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	f040 80ac 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &ctx->Vf, &ctx->Vf, &ctx->N ) );
 8016aee:	9903      	ldr	r1, [sp, #12]
 8016af0:	4632      	mov	r2, r6
 8016af2:	4608      	mov	r0, r1
 8016af4:	f7f8 fd79 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016af8:	4603      	mov	r3, r0
 8016afa:	2800      	cmp	r0, #0
 8016afc:	f040 80a3 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vi ) );
 8016b00:	a904      	add	r1, sp, #16
 8016b02:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8016b06:	4608      	mov	r0, r1
 8016b08:	f7f8 fb41 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	2800      	cmp	r0, #0
 8016b10:	f040 8099 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8016b14:	a904      	add	r1, sp, #16
 8016b16:	4632      	mov	r2, r6
 8016b18:	4608      	mov	r0, r1
 8016b1a:	f7f8 fd66 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016b1e:	4603      	mov	r3, r0
 8016b20:	2800      	cmp	r0, #0
 8016b22:	f040 8090 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &P1, &ctx->P, 1 ) );
 8016b26:	2201      	movs	r2, #1
 8016b28:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8016b2c:	a80d      	add	r0, sp, #52	; 0x34
 8016b2e:	f7f8 fb18 	bl	800f162 <mbedtls_mpi_sub_int>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2800      	cmp	r0, #0
 8016b36:	f040 8086 	bne.w	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &Q1, &ctx->Q, 1 ) );
 8016b3a:	2201      	movs	r2, #1
 8016b3c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8016b40:	a810      	add	r0, sp, #64	; 0x40
 8016b42:	f7f8 fb0e 	bl	800f162 <mbedtls_mpi_sub_int>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	d17c      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8016b4c:	463b      	mov	r3, r7
 8016b4e:	462a      	mov	r2, r5
 8016b50:	211c      	movs	r1, #28
 8016b52:	a813      	add	r0, sp, #76	; 0x4c
 8016b54:	f7f9 f82d 	bl	800fbb2 <mbedtls_mpi_fill_random>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	2800      	cmp	r0, #0
 8016b5c:	d173      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DP_blind, &P1, &R ) );
 8016b5e:	aa13      	add	r2, sp, #76	; 0x4c
 8016b60:	a90d      	add	r1, sp, #52	; 0x34
 8016b62:	a816      	add	r0, sp, #88	; 0x58
 8016b64:	f7f8 fb13 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	2800      	cmp	r0, #0
 8016b6c:	d16b      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DP_blind, &DP_blind,
 8016b6e:	a916      	add	r1, sp, #88	; 0x58
 8016b70:	4652      	mov	r2, sl
 8016b72:	4608      	mov	r0, r1
 8016b74:	f7f8 fab0 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d163      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &R, RSA_EXPONENT_BLINDING,
 8016b7e:	463b      	mov	r3, r7
 8016b80:	462a      	mov	r2, r5
 8016b82:	211c      	movs	r1, #28
 8016b84:	a813      	add	r0, sp, #76	; 0x4c
 8016b86:	f7f9 f814 	bl	800fbb2 <mbedtls_mpi_fill_random>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	d15a      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DQ_blind, &Q1, &R ) );
 8016b90:	aa13      	add	r2, sp, #76	; 0x4c
 8016b92:	a910      	add	r1, sp, #64	; 0x40
 8016b94:	a819      	add	r0, sp, #100	; 0x64
 8016b96:	f7f8 fafa 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2800      	cmp	r0, #0
 8016b9e:	d152      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &DQ_blind, &DQ_blind,
 8016ba0:	a919      	add	r1, sp, #100	; 0x64
 8016ba2:	464a      	mov	r2, r9
 8016ba4:	4608      	mov	r0, r1
 8016ba6:	f7f8 fa97 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2800      	cmp	r0, #0
 8016bae:	d14a      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        DQ = &DQ_blind;
 8016bb0:	f10d 0964 	add.w	r9, sp, #100	; 0x64
        DP = &DP_blind;
 8016bb4:	f10d 0a58 	add.w	sl, sp, #88	; 0x58
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T1, &T, DP, &ctx->P, &ctx->RP ) );
 8016bb8:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8016bbc:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8016bc0:	9300      	str	r3, [sp, #0]
 8016bc2:	4652      	mov	r2, sl
 8016bc4:	4643      	mov	r3, r8
 8016bc6:	a904      	add	r1, sp, #16
 8016bc8:	a807      	add	r0, sp, #28
 8016bca:	f7f8 fd40 	bl	800f64e <mbedtls_mpi_exp_mod>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	2800      	cmp	r0, #0
 8016bd2:	d138      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T2, &T, DQ, &ctx->Q, &ctx->RQ ) );
 8016bd4:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8016bd8:	f104 0738 	add.w	r7, r4, #56	; 0x38
 8016bdc:	9300      	str	r3, [sp, #0]
 8016bde:	464a      	mov	r2, r9
 8016be0:	463b      	mov	r3, r7
 8016be2:	a904      	add	r1, sp, #16
 8016be4:	a80a      	add	r0, sp, #40	; 0x28
 8016be6:	f7f8 fd32 	bl	800f64e <mbedtls_mpi_exp_mod>
 8016bea:	4603      	mov	r3, r0
 8016bec:	bb58      	cbnz	r0, 8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T, &T1, &T2 ) );
 8016bee:	aa0a      	add	r2, sp, #40	; 0x28
 8016bf0:	a907      	add	r1, sp, #28
 8016bf2:	a804      	add	r0, sp, #16
 8016bf4:	f7f8 fa92 	bl	800f11c <mbedtls_mpi_sub_mpi>
 8016bf8:	4603      	mov	r3, r0
 8016bfa:	bb20      	cbnz	r0, 8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->QP ) );
 8016bfc:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8016c00:	a904      	add	r1, sp, #16
 8016c02:	a807      	add	r0, sp, #28
 8016c04:	f7f8 fac3 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	b9e0      	cbnz	r0, 8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T1, &ctx->P ) );
 8016c0c:	4642      	mov	r2, r8
 8016c0e:	a907      	add	r1, sp, #28
 8016c10:	a804      	add	r0, sp, #16
 8016c12:	f7f8 fcea 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016c16:	4603      	mov	r3, r0
 8016c18:	b9a8      	cbnz	r0, 8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1, &T, &ctx->Q ) );
 8016c1a:	463a      	mov	r2, r7
 8016c1c:	a904      	add	r1, sp, #16
 8016c1e:	a807      	add	r0, sp, #28
 8016c20:	f7f8 fab5 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016c24:	4603      	mov	r3, r0
 8016c26:	b970      	cbnz	r0, 8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T, &T2, &T1 ) );
 8016c28:	aa07      	add	r2, sp, #28
 8016c2a:	a90a      	add	r1, sp, #40	; 0x28
 8016c2c:	a804      	add	r0, sp, #16
 8016c2e:	f7f8 fa53 	bl	800f0d8 <mbedtls_mpi_add_mpi>
 8016c32:	4603      	mov	r3, r0
 8016c34:	b938      	cbnz	r0, 8016c46 <mbedtls_rsa_private+0x22a>
    if( f_rng != NULL )
 8016c36:	2d00      	cmp	r5, #0
 8016c38:	d15d      	bne.n	8016cf6 <mbedtls_rsa_private+0x2da>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
 8016c3a:	6862      	ldr	r2, [r4, #4]
 8016c3c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016c3e:	a804      	add	r0, sp, #16
 8016c40:	f7f8 f816 	bl	800ec70 <mbedtls_mpi_write_binary>
 8016c44:	4603      	mov	r3, r0
    mbedtls_mpi_free( &T ); mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 8016c46:	a804      	add	r0, sp, #16
 8016c48:	9303      	str	r3, [sp, #12]
 8016c4a:	f7f7 fe97 	bl	800e97c <mbedtls_mpi_free>
 8016c4e:	a807      	add	r0, sp, #28
 8016c50:	f7f7 fe94 	bl	800e97c <mbedtls_mpi_free>
 8016c54:	a80a      	add	r0, sp, #40	; 0x28
 8016c56:	f7f7 fe91 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &P1 ); mbedtls_mpi_free( &Q1 ); mbedtls_mpi_free( &R );
 8016c5a:	a80d      	add	r0, sp, #52	; 0x34
 8016c5c:	f7f7 fe8e 	bl	800e97c <mbedtls_mpi_free>
 8016c60:	a810      	add	r0, sp, #64	; 0x40
 8016c62:	f7f7 fe8b 	bl	800e97c <mbedtls_mpi_free>
 8016c66:	a813      	add	r0, sp, #76	; 0x4c
 8016c68:	f7f7 fe88 	bl	800e97c <mbedtls_mpi_free>
    if( f_rng != NULL )
 8016c6c:	9b03      	ldr	r3, [sp, #12]
 8016c6e:	b135      	cbz	r5, 8016c7e <mbedtls_rsa_private+0x262>
        mbedtls_mpi_free( &DP_blind );
 8016c70:	a816      	add	r0, sp, #88	; 0x58
 8016c72:	f7f7 fe83 	bl	800e97c <mbedtls_mpi_free>
        mbedtls_mpi_free( &DQ_blind );
 8016c76:	a819      	add	r0, sp, #100	; 0x64
 8016c78:	f7f7 fe80 	bl	800e97c <mbedtls_mpi_free>
 8016c7c:	9b03      	ldr	r3, [sp, #12]
    if( ret != 0 )
 8016c7e:	b10b      	cbz	r3, 8016c84 <mbedtls_rsa_private+0x268>
        return( MBEDTLS_ERR_RSA_PRIVATE_FAILED + ret );
 8016c80:	f5a3 4386 	sub.w	r3, r3, #17152	; 0x4300
}
 8016c84:	4618      	mov	r0, r3
 8016c86:	b01d      	add	sp, #116	; 0x74
 8016c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8c:	230c      	movs	r3, #12
 8016c8e:	9303      	str	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016c90:	f104 0b98 	add.w	fp, r4, #152	; 0x98
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016c94:	f104 088c 	add.w	r8, r4, #140	; 0x8c
        if( count++ > 10 )
 8016c98:	9b03      	ldr	r3, [sp, #12]
 8016c9a:	3b01      	subs	r3, #1
 8016c9c:	9303      	str	r3, [sp, #12]
 8016c9e:	d03f      	beq.n	8016d20 <mbedtls_rsa_private+0x304>
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &ctx->Vf, ctx->len - 1, f_rng, p_rng ) );
 8016ca0:	6861      	ldr	r1, [r4, #4]
 8016ca2:	463b      	mov	r3, r7
 8016ca4:	462a      	mov	r2, r5
 8016ca6:	3901      	subs	r1, #1
 8016ca8:	4658      	mov	r0, fp
 8016caa:	f7f8 ff82 	bl	800fbb2 <mbedtls_mpi_fill_random>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	2800      	cmp	r0, #0
 8016cb2:	d1c8      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016cb4:	4632      	mov	r2, r6
 8016cb6:	4659      	mov	r1, fp
 8016cb8:	4640      	mov	r0, r8
 8016cba:	f7f8 fef6 	bl	800faaa <mbedtls_mpi_gcd>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	2800      	cmp	r0, #0
 8016cc2:	d1c0      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
    } while( mbedtls_mpi_cmp_int( &ctx->Vi, 1 ) != 0 );
 8016cc4:	2101      	movs	r1, #1
 8016cc6:	4640      	mov	r0, r8
 8016cc8:	f7f8 f95a 	bl	800ef80 <mbedtls_mpi_cmp_int>
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	d1e3      	bne.n	8016c98 <mbedtls_rsa_private+0x27c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &ctx->Vi, &ctx->Vf, &ctx->N ) );
 8016cd0:	4632      	mov	r2, r6
 8016cd2:	4659      	mov	r1, fp
 8016cd4:	4640      	mov	r0, r8
 8016cd6:	f7f8 ff85 	bl	800fbe4 <mbedtls_mpi_inv_mod>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d1b2      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &ctx->Vi, &ctx->Vi, &ctx->E, &ctx->N, &ctx->RN ) );
 8016ce0:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8016ce4:	9300      	str	r3, [sp, #0]
 8016ce6:	f104 0214 	add.w	r2, r4, #20
 8016cea:	4633      	mov	r3, r6
 8016cec:	4641      	mov	r1, r8
 8016cee:	4640      	mov	r0, r8
 8016cf0:	f7f8 fcad 	bl	800f64e <mbedtls_mpi_exp_mod>
 8016cf4:	e700      	b.n	8016af8 <mbedtls_rsa_private+0xdc>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T, &T, &ctx->Vf ) );
 8016cf6:	a904      	add	r1, sp, #16
 8016cf8:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8016cfc:	4608      	mov	r0, r1
 8016cfe:	f7f8 fa46 	bl	800f18e <mbedtls_mpi_mul_mpi>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2800      	cmp	r0, #0
 8016d06:	d19e      	bne.n	8016c46 <mbedtls_rsa_private+0x22a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &T, &T, &ctx->N ) );
 8016d08:	a904      	add	r1, sp, #16
 8016d0a:	4632      	mov	r2, r6
 8016d0c:	4608      	mov	r0, r1
 8016d0e:	f7f8 fc6c 	bl	800f5ea <mbedtls_mpi_mod_mpi>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2800      	cmp	r0, #0
 8016d16:	d090      	beq.n	8016c3a <mbedtls_rsa_private+0x21e>
 8016d18:	e795      	b.n	8016c46 <mbedtls_rsa_private+0x22a>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8016d1a:	f06f 0303 	mvn.w	r3, #3
 8016d1e:	e792      	b.n	8016c46 <mbedtls_rsa_private+0x22a>
            return( MBEDTLS_ERR_RSA_RNG_FAILED );
 8016d20:	4b01      	ldr	r3, [pc, #4]	; (8016d28 <mbedtls_rsa_private+0x30c>)
 8016d22:	e790      	b.n	8016c46 <mbedtls_rsa_private+0x22a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016d24:	4b01      	ldr	r3, [pc, #4]	; (8016d2c <mbedtls_rsa_private+0x310>)
 8016d26:	e7ad      	b.n	8016c84 <mbedtls_rsa_private+0x268>
 8016d28:	ffffbb80 	.word	0xffffbb80
 8016d2c:	ffffbf80 	.word	0xffffbf80

08016d30 <mbedtls_rsa_rsaes_oaep_encrypt>:
                            int mode,
                            const unsigned char *label, size_t label_len,
                            size_t ilen,
                            const unsigned char *input,
                            unsigned char *output )
{
 8016d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d34:	b08b      	sub	sp, #44	; 0x2c
    unsigned char *p = output;
    unsigned int hlen;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016d36:	2b01      	cmp	r3, #1
{
 8016d38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016d3c:	9102      	str	r1, [sp, #8]
 8016d3e:	4607      	mov	r7, r0
 8016d40:	4693      	mov	fp, r2
 8016d42:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016d44:	d108      	bne.n	8016d58 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
 8016d46:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016d4a:	2b01      	cmp	r3, #1
 8016d4c:	d004      	beq.n	8016d58 <mbedtls_rsa_rsaes_oaep_encrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016d4e:	4c40      	ldr	r4, [pc, #256]	; (8016e50 <mbedtls_rsa_rsaes_oaep_encrypt+0x120>)
    mbedtls_md_free( &md_ctx );

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
}
 8016d50:	4620      	mov	r0, r4
 8016d52:	b00b      	add	sp, #44	; 0x2c
 8016d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8016d58:	9b02      	ldr	r3, [sp, #8]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d0f7      	beq.n	8016d4e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016d5e:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 8016d62:	f7fd fd9f 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016d66:	4682      	mov	sl, r0
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	d0f0      	beq.n	8016d4e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    olen = ctx->len;
 8016d6c:	687e      	ldr	r6, [r7, #4]
    hlen = mbedtls_md_get_size( md_info );
 8016d6e:	f7fd fee9 	bl	8014b44 <mbedtls_md_get_size>
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016d72:	b202      	sxth	r2, r0
 8016d74:	0053      	lsls	r3, r2, #1
 8016d76:	9304      	str	r3, [sp, #16]
 8016d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016d7a:	3302      	adds	r3, #2
 8016d7c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016d80:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d82:	4293      	cmp	r3, r2
    hlen = mbedtls_md_get_size( md_info );
 8016d84:	4605      	mov	r5, r0
    if( ilen + 2 * hlen + 2 < ilen || olen < ilen + 2 * hlen + 2 )
 8016d86:	d3e2      	bcc.n	8016d4e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
 8016d88:	42b3      	cmp	r3, r6
 8016d8a:	d8e0      	bhi.n	8016d4e <mbedtls_rsa_rsaes_oaep_encrypt+0x1e>
    memset( output, 0, olen );
 8016d8c:	4632      	mov	r2, r6
 8016d8e:	2100      	movs	r1, #0
    *p++ = 0;
 8016d90:	46c1      	mov	r9, r8
    memset( output, 0, olen );
 8016d92:	4640      	mov	r0, r8
 8016d94:	f00b fb50 	bl	8022438 <memset>
    *p++ = 0;
 8016d98:	2300      	movs	r3, #0
 8016d9a:	f809 3b01 	strb.w	r3, [r9], #1
    if( ( ret = f_rng( p_rng, p, hlen ) ) != 0 )
 8016d9e:	462a      	mov	r2, r5
 8016da0:	9b02      	ldr	r3, [sp, #8]
 8016da2:	4649      	mov	r1, r9
 8016da4:	4658      	mov	r0, fp
 8016da6:	4798      	blx	r3
 8016da8:	4604      	mov	r4, r0
 8016daa:	b110      	cbz	r0, 8016db2 <mbedtls_rsa_rsaes_oaep_encrypt+0x82>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016dac:	f5a0 4489 	sub.w	r4, r0, #17536	; 0x4480
 8016db0:	e7ce      	b.n	8016d50 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mbedtls_md( md_info, label, label_len, p );
 8016db2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    p += hlen;
 8016db6:	eb09 0305 	add.w	r3, r9, r5
    mbedtls_md( md_info, label, label_len, p );
 8016dba:	4650      	mov	r0, sl
 8016dbc:	9305      	str	r3, [sp, #20]
 8016dbe:	f7fd fdf3 	bl	80149a8 <mbedtls_md>
    p += olen - 2 * hlen - 2 - ilen;
 8016dc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016dc4:	1af2      	subs	r2, r6, r3
 8016dc6:	3a02      	subs	r2, #2
 8016dc8:	9b04      	ldr	r3, [sp, #16]
 8016dca:	442a      	add	r2, r5
 8016dcc:	1ad2      	subs	r2, r2, r3
 8016dce:	9b05      	ldr	r3, [sp, #20]
    *p++ = 1;
 8016dd0:	2101      	movs	r1, #1
    p += olen - 2 * hlen - 2 - ilen;
 8016dd2:	1898      	adds	r0, r3, r2
    *p++ = 1;
 8016dd4:	5499      	strb	r1, [r3, r2]
    memcpy( p, input, ilen );
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	e9dd 2116 	ldrd	r2, r1, [sp, #88]	; 0x58
 8016ddc:	f00b fb04 	bl	80223e8 <memcpy>
    mbedtls_md_init( &md_ctx );
 8016de0:	a807      	add	r0, sp, #28
 8016de2:	f7fd fd6b 	bl	80148bc <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016de6:	4622      	mov	r2, r4
 8016de8:	4651      	mov	r1, sl
 8016dea:	a807      	add	r0, sp, #28
 8016dec:	f7fd fd90 	bl	8014910 <mbedtls_md_setup>
 8016df0:	4604      	mov	r4, r0
 8016df2:	b118      	cbz	r0, 8016dfc <mbedtls_rsa_rsaes_oaep_encrypt+0xcc>
        mbedtls_md_free( &md_ctx );
 8016df4:	a807      	add	r0, sp, #28
 8016df6:	f7fd fd67 	bl	80148c8 <mbedtls_md_free>
        return( ret );
 8016dfa:	e7a9      	b.n	8016d50 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
    mgf_mask( output + hlen + 1, olen - hlen - 1, output + 1, hlen,
 8016dfc:	1c6c      	adds	r4, r5, #1
 8016dfe:	3e01      	subs	r6, #1
 8016e00:	4444      	add	r4, r8
 8016e02:	1b76      	subs	r6, r6, r5
 8016e04:	ab07      	add	r3, sp, #28
 8016e06:	9300      	str	r3, [sp, #0]
 8016e08:	464a      	mov	r2, r9
 8016e0a:	462b      	mov	r3, r5
 8016e0c:	4631      	mov	r1, r6
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f7ff fc2a 	bl	8016668 <mgf_mask>
    mgf_mask( output + 1, hlen, output + hlen + 1, olen - hlen - 1,
 8016e14:	ab07      	add	r3, sp, #28
 8016e16:	9300      	str	r3, [sp, #0]
 8016e18:	4622      	mov	r2, r4
 8016e1a:	4633      	mov	r3, r6
 8016e1c:	4629      	mov	r1, r5
 8016e1e:	4648      	mov	r0, r9
 8016e20:	f7ff fc22 	bl	8016668 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8016e24:	a807      	add	r0, sp, #28
 8016e26:	f7fd fd4f 	bl	80148c8 <mbedtls_md_free>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016e2a:	9b03      	ldr	r3, [sp, #12]
 8016e2c:	b933      	cbnz	r3, 8016e3c <mbedtls_rsa_rsaes_oaep_encrypt+0x10c>
            ? mbedtls_rsa_public(  ctx, output, output )
 8016e2e:	4642      	mov	r2, r8
 8016e30:	4641      	mov	r1, r8
 8016e32:	4638      	mov	r0, r7
 8016e34:	f7ff fdba 	bl	80169ac <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016e38:	4604      	mov	r4, r0
 8016e3a:	e789      	b.n	8016d50 <mbedtls_rsa_rsaes_oaep_encrypt+0x20>
 8016e3c:	9902      	ldr	r1, [sp, #8]
 8016e3e:	f8cd 8000 	str.w	r8, [sp]
 8016e42:	4643      	mov	r3, r8
 8016e44:	465a      	mov	r2, fp
 8016e46:	4638      	mov	r0, r7
 8016e48:	f7ff fde8 	bl	8016a1c <mbedtls_rsa_private>
 8016e4c:	e7f4      	b.n	8016e38 <mbedtls_rsa_rsaes_oaep_encrypt+0x108>
 8016e4e:	bf00      	nop
 8016e50:	ffffbf80 	.word	0xffffbf80

08016e54 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>:
                                 int (*f_rng)(void *, unsigned char *, size_t),
                                 void *p_rng,
                                 int mode, size_t ilen,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8016e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e58:	4698      	mov	r8, r3
    size_t nb_pad, olen;
    int ret;
    unsigned char *p = output;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016e5a:	f1b8 0f01 	cmp.w	r8, #1
{
 8016e5e:	e9dd a30c 	ldrd	sl, r3, [sp, #48]	; 0x30
 8016e62:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016e64:	4606      	mov	r6, r0
 8016e66:	460f      	mov	r7, r1
 8016e68:	4691      	mov	r9, r2
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8016e6a:	d103      	bne.n	8016e74 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x20>
 8016e6c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 8016e70:	2a00      	cmp	r2, #0
 8016e72:	d15e      	bne.n	8016f32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    // We don't check p_rng because it won't be dereferenced here
    if( f_rng == NULL || input == NULL || output == NULL )
 8016e74:	2f00      	cmp	r7, #0
 8016e76:	d05c      	beq.n	8016f32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d05a      	beq.n	8016f32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016e7c:	2d00      	cmp	r5, #0
 8016e7e:	d058      	beq.n	8016f32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    olen = ctx->len;

    /* first comparison checks for overflow */
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016e80:	f11a 0f0c 	cmn.w	sl, #12
    olen = ctx->len;
 8016e84:	6874      	ldr	r4, [r6, #4]
    if( ilen + 11 < ilen || olen < ilen + 11 )
 8016e86:	d854      	bhi.n	8016f32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
 8016e88:	f10a 020b 	add.w	r2, sl, #11
 8016e8c:	42a2      	cmp	r2, r4
 8016e8e:	d850      	bhi.n	8016f32 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xde>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    nb_pad = olen - 3 - ilen;

    *p++ = 0;
 8016e90:	4629      	mov	r1, r5
    nb_pad = olen - 3 - ilen;
 8016e92:	eba4 040a 	sub.w	r4, r4, sl
    *p++ = 0;
 8016e96:	2200      	movs	r2, #0
 8016e98:	f801 2b02 	strb.w	r2, [r1], #2
    nb_pad = olen - 3 - ilen;
 8016e9c:	3c03      	subs	r4, #3
    if( mode == MBEDTLS_RSA_PUBLIC )
 8016e9e:	f1b8 0f00 	cmp.w	r8, #0
 8016ea2:	d12d      	bne.n	8016f00 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xac>
    {
        *p++ = MBEDTLS_RSA_CRYPT;
 8016ea4:	2202      	movs	r2, #2
 8016ea6:	4414      	add	r4, r2
 8016ea8:	706a      	strb	r2, [r5, #1]

        while( nb_pad-- > 0 )
 8016eaa:	442c      	add	r4, r5
 8016eac:	428c      	cmp	r4, r1
 8016eae:	d112      	bne.n	8016ed6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x82>

        while( nb_pad-- > 0 )
            *p++ = 0xFF;
    }

    *p++ = 0;
 8016eb0:	4608      	mov	r0, r1
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	f800 2b01 	strb.w	r2, [r0], #1
    memcpy( p, input, ilen );
 8016eb8:	4619      	mov	r1, r3
 8016eba:	4652      	mov	r2, sl
 8016ebc:	f00b fa94 	bl	80223e8 <memcpy>

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, output, output )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016ec0:	f1b8 0f00 	cmp.w	r8, #0
 8016ec4:	d12b      	bne.n	8016f1e <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xca>
            ? mbedtls_rsa_public(  ctx, output, output )
 8016ec6:	462a      	mov	r2, r5
 8016ec8:	4629      	mov	r1, r5
 8016eca:	4630      	mov	r0, r6
}
 8016ecc:	b003      	add	sp, #12
 8016ece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            ? mbedtls_rsa_public(  ctx, output, output )
 8016ed2:	f7ff bd6b 	b.w	80169ac <mbedtls_rsa_public>
 8016ed6:	f04f 0b64 	mov.w	fp, #100	; 0x64
                ret = f_rng( p_rng, p, 1 );
 8016eda:	2201      	movs	r2, #1
 8016edc:	4648      	mov	r0, r9
 8016ede:	9301      	str	r3, [sp, #4]
 8016ee0:	9100      	str	r1, [sp, #0]
 8016ee2:	47b8      	blx	r7
            } while( *p == 0 && --rng_dl && ret == 0 );
 8016ee4:	9900      	ldr	r1, [sp, #0]
 8016ee6:	9b01      	ldr	r3, [sp, #4]
 8016ee8:	780a      	ldrb	r2, [r1, #0]
 8016eea:	bb22      	cbnz	r2, 8016f36 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xe2>
 8016eec:	f1bb 0b01 	subs.w	fp, fp, #1
 8016ef0:	d001      	beq.n	8016ef6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	d0f1      	beq.n	8016eda <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x86>
                return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 8016ef6:	f5a0 4089 	sub.w	r0, r0, #17536	; 0x4480
}
 8016efa:	b003      	add	sp, #12
 8016efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *p++ = MBEDTLS_RSA_SIGN;
 8016f00:	462a      	mov	r2, r5
 8016f02:	2001      	movs	r0, #1
 8016f04:	f802 0f01 	strb.w	r0, [r2, #1]!
        while( nb_pad-- > 0 )
 8016f08:	1820      	adds	r0, r4, r0
 8016f0a:	4428      	add	r0, r5
            *p++ = 0xFF;
 8016f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        while( nb_pad-- > 0 )
 8016f10:	4282      	cmp	r2, r0
 8016f12:	d101      	bne.n	8016f18 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xc4>
 8016f14:	4421      	add	r1, r4
 8016f16:	e7cb      	b.n	8016eb0 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x5c>
            *p++ = 0xFF;
 8016f18:	f802 cf01 	strb.w	ip, [r2, #1]!
 8016f1c:	e7f8      	b.n	8016f10 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xbc>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016f1e:	462b      	mov	r3, r5
 8016f20:	464a      	mov	r2, r9
 8016f22:	4639      	mov	r1, r7
 8016f24:	4630      	mov	r0, r6
 8016f26:	950c      	str	r5, [sp, #48]	; 0x30
}
 8016f28:	b003      	add	sp, #12
 8016f2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            : mbedtls_rsa_private( ctx, f_rng, p_rng, output, output ) );
 8016f2e:	f7ff bd75 	b.w	8016a1c <mbedtls_rsa_private>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016f32:	4803      	ldr	r0, [pc, #12]	; (8016f40 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xec>)
 8016f34:	e7e1      	b.n	8016efa <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa6>
            if( rng_dl == 0 || ret != 0 )
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d1dd      	bne.n	8016ef6 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0xa2>
            p++;
 8016f3a:	3101      	adds	r1, #1
 8016f3c:	e7b6      	b.n	8016eac <mbedtls_rsa_rsaes_pkcs1_v15_encrypt+0x58>
 8016f3e:	bf00      	nop
 8016f40:	ffffbf80 	.word	0xffffbf80

08016f44 <mbedtls_rsa_pkcs1_encrypt>:
                       int (*f_rng)(void *, unsigned char *, size_t),
                       void *p_rng,
                       int mode, size_t ilen,
                       const unsigned char *input,
                       unsigned char *output )
{
 8016f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8016f46:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8016f4a:	b087      	sub	sp, #28
 8016f4c:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016f50:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    switch( ctx->padding )
 8016f52:	b124      	cbz	r4, 8016f5e <mbedtls_rsa_pkcs1_encrypt+0x1a>
 8016f54:	2c01      	cmp	r4, #1
 8016f56:	d007      	beq.n	8016f68 <mbedtls_rsa_pkcs1_encrypt+0x24>
 8016f58:	4808      	ldr	r0, [pc, #32]	; (8016f7c <mbedtls_rsa_pkcs1_encrypt+0x38>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8016f5a:	b007      	add	sp, #28
 8016f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f5e:	b007      	add	sp, #28
 8016f60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_encrypt( ctx, f_rng, p_rng, mode, ilen,
 8016f64:	f7ff bf76 	b.w	8016e54 <mbedtls_rsa_rsaes_pkcs1_v15_encrypt>
            return mbedtls_rsa_rsaes_oaep_encrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8016f68:	2400      	movs	r4, #0
 8016f6a:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8016f6e:	e9cd 4400 	strd	r4, r4, [sp]
 8016f72:	9502      	str	r5, [sp, #8]
 8016f74:	f7ff fedc 	bl	8016d30 <mbedtls_rsa_rsaes_oaep_encrypt>
 8016f78:	e7ef      	b.n	8016f5a <mbedtls_rsa_pkcs1_encrypt+0x16>
 8016f7a:	bf00      	nop
 8016f7c:	ffffbf00 	.word	0xffffbf00

08016f80 <mbedtls_rsa_rsaes_oaep_decrypt>:
                            const unsigned char *label, size_t label_len,
                            size_t *olen,
                            const unsigned char *input,
                            unsigned char *output,
                            size_t output_max_len )
{
 8016f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f84:	f2ad 4d64 	subw	sp, sp, #1124	; 0x464
    mbedtls_md_context_t md_ctx;

    /*
     * Parameters sanity checks
     */
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016f88:	2b01      	cmp	r3, #1
{
 8016f8a:	f8dd b494 	ldr.w	fp, [sp, #1172]	; 0x494
 8016f8e:	4604      	mov	r4, r0
 8016f90:	4699      	mov	r9, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 8016f92:	d109      	bne.n	8016fa8 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
 8016f94:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016f98:	2b01      	cmp	r3, #1
 8016f9a:	d005      	beq.n	8016fa8 <mbedtls_rsa_rsaes_oaep_decrypt+0x28>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8016f9c:	4c57      	ldr	r4, [pc, #348]	; (80170fc <mbedtls_rsa_rsaes_oaep_decrypt+0x17c>)
cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
    mbedtls_zeroize( lhash, sizeof( lhash ) );

    return( ret );
}
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	f20d 4d64 	addw	sp, sp, #1124	; 0x464
 8016fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ilen = ctx->len;
 8016fa8:	6865      	ldr	r5, [r4, #4]
    if( ilen < 16 || ilen > sizeof( buf ) )
 8016faa:	f1a5 0310 	sub.w	r3, r5, #16
 8016fae:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8016fb2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8016fb6:	d8f1      	bhi.n	8016f9c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 8016fb8:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
 8016fbc:	f7fd fc72 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8016fc0:	4607      	mov	r7, r0
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d0ea      	beq.n	8016f9c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
    hlen = mbedtls_md_get_size( md_info );
 8016fc6:	f7fd fdbd 	bl	8014b44 <mbedtls_md_get_size>
    if( 2 * hlen + 2 > ilen )
 8016fca:	f100 0a01 	add.w	sl, r0, #1
 8016fce:	ebb5 0f4a 	cmp.w	r5, sl, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 8016fd2:	4606      	mov	r6, r0
    if( 2 * hlen + 2 > ilen )
 8016fd4:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8016fd8:	d3e0      	bcc.n	8016f9c <mbedtls_rsa_rsaes_oaep_decrypt+0x1c>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016fda:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8016fde:	ab18      	add	r3, sp, #96	; 0x60
 8016fe0:	f1b9 0f00 	cmp.w	r9, #0
 8016fe4:	d11d      	bne.n	8017022 <mbedtls_rsa_rsaes_oaep_decrypt+0xa2>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	4659      	mov	r1, fp
 8016fea:	4620      	mov	r0, r4
 8016fec:	f7ff fcde 	bl	80169ac <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8016ff0:	4604      	mov	r4, r0
    if( ret != 0 )
 8016ff2:	b960      	cbnz	r0, 801700e <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
    mbedtls_md_init( &md_ctx );
 8016ff4:	a805      	add	r0, sp, #20
 8016ff6:	f7fd fc61 	bl	80148bc <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	a805      	add	r0, sp, #20
 8017000:	f7fd fc86 	bl	8014910 <mbedtls_md_setup>
 8017004:	4604      	mov	r4, r0
 8017006:	b190      	cbz	r0, 801702e <mbedtls_rsa_rsaes_oaep_decrypt+0xae>
        mbedtls_md_free( &md_ctx );
 8017008:	a805      	add	r0, sp, #20
 801700a:	f7fd fc5d 	bl	80148c8 <mbedtls_md_free>
    mbedtls_zeroize( buf, sizeof( buf ) );
 801700e:	a818      	add	r0, sp, #96	; 0x60
 8017010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017014:	f7ff fb20 	bl	8016658 <mbedtls_zeroize>
    mbedtls_zeroize( lhash, sizeof( lhash ) );
 8017018:	2140      	movs	r1, #64	; 0x40
 801701a:	a808      	add	r0, sp, #32
 801701c:	f7ff fb1c 	bl	8016658 <mbedtls_zeroize>
    return( ret );
 8017020:	e7bd      	b.n	8016f9e <mbedtls_rsa_rsaes_oaep_decrypt+0x1e>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8017022:	9300      	str	r3, [sp, #0]
 8017024:	4620      	mov	r0, r4
 8017026:	465b      	mov	r3, fp
 8017028:	f7ff fcf8 	bl	8016a1c <mbedtls_rsa_private>
 801702c:	e7e0      	b.n	8016ff0 <mbedtls_rsa_rsaes_oaep_decrypt+0x70>
    mbedtls_md( md_info, label, label_len, lhash );
 801702e:	f10d 0920 	add.w	r9, sp, #32
 8017032:	4638      	mov	r0, r7
 8017034:	f8dd 248c 	ldr.w	r2, [sp, #1164]	; 0x48c
 8017038:	f8dd 1488 	ldr.w	r1, [sp, #1160]	; 0x488
 801703c:	464b      	mov	r3, r9
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 801703e:	af18      	add	r7, sp, #96	; 0x60
 8017040:	f105 3bff 	add.w	fp, r5, #4294967295
    mbedtls_md( md_info, label, label_len, lhash );
 8017044:	f7fd fcb0 	bl	80149a8 <mbedtls_md>
    mgf_mask( buf + 1, hlen, buf + hlen + 1, ilen - hlen - 1,
 8017048:	44ba      	add	sl, r7
 801704a:	ebab 0b06 	sub.w	fp, fp, r6
 801704e:	ab05      	add	r3, sp, #20
 8017050:	9300      	str	r3, [sp, #0]
 8017052:	4652      	mov	r2, sl
 8017054:	465b      	mov	r3, fp
 8017056:	4631      	mov	r1, r6
 8017058:	f10d 0061 	add.w	r0, sp, #97	; 0x61
 801705c:	f7ff fb04 	bl	8016668 <mgf_mask>
    mgf_mask( buf + hlen + 1, ilen - hlen - 1, buf + 1, hlen,
 8017060:	ab05      	add	r3, sp, #20
 8017062:	f10d 0261 	add.w	r2, sp, #97	; 0x61
 8017066:	9300      	str	r3, [sp, #0]
 8017068:	4659      	mov	r1, fp
 801706a:	4633      	mov	r3, r6
 801706c:	4650      	mov	r0, sl
 801706e:	f7ff fafb 	bl	8016668 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 8017072:	a805      	add	r0, sp, #20
 8017074:	f7fd fc28 	bl	80148c8 <mbedtls_md_free>
    p += hlen; /* Skip seed */
 8017078:	f10d 0261 	add.w	r2, sp, #97	; 0x61
    bad |= *p++; /* First byte must be 0 */
 801707c:	783b      	ldrb	r3, [r7, #0]
    p += hlen; /* Skip seed */
 801707e:	1990      	adds	r0, r2, r6
    for( i = 0; i < hlen; i++ )
 8017080:	4622      	mov	r2, r4
 8017082:	42b2      	cmp	r2, r6
 8017084:	fa4f fc83 	sxtb.w	ip, r3
 8017088:	d320      	bcc.n	80170cc <mbedtls_rsa_rsaes_oaep_decrypt+0x14c>
 801708a:	4430      	add	r0, r6
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 801708c:	eba5 0808 	sub.w	r8, r5, r8
    pad_done = 0;
 8017090:	2600      	movs	r6, #0
 8017092:	4603      	mov	r3, r0
 8017094:	4480      	add	r8, r0
    pad_len = 0;
 8017096:	4631      	mov	r1, r6
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 8017098:	4598      	cmp	r8, r3
 801709a:	d120      	bne.n	80170de <mbedtls_rsa_rsaes_oaep_decrypt+0x15e>
    bad |= *p++ ^ 0x01;
 801709c:	5c43      	ldrb	r3, [r0, r1]
 801709e:	f083 0301 	eor.w	r3, r3, #1
 80170a2:	ea4c 0303 	orr.w	r3, ip, r3
    if( bad != 0 )
 80170a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80170aa:	d123      	bne.n	80170f4 <mbedtls_rsa_rsaes_oaep_decrypt+0x174>
    bad |= *p++ ^ 0x01;
 80170ac:	3101      	adds	r1, #1
 80170ae:	4401      	add	r1, r0
    if( ilen - ( p - buf ) > output_max_len )
 80170b0:	f8dd 349c 	ldr.w	r3, [sp, #1180]	; 0x49c
 80170b4:	1bca      	subs	r2, r1, r7
 80170b6:	1aaa      	subs	r2, r5, r2
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d81d      	bhi.n	80170f8 <mbedtls_rsa_rsaes_oaep_decrypt+0x178>
    *olen = ilen - (p - buf);
 80170bc:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    memcpy( output, p, *olen );
 80170c0:	f8dd 0498 	ldr.w	r0, [sp, #1176]	; 0x498
    *olen = ilen - (p - buf);
 80170c4:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 80170c6:	f00b f98f 	bl	80223e8 <memcpy>
    ret = 0;
 80170ca:	e7a0      	b.n	801700e <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
        bad |= lhash[i] ^ *p++;
 80170cc:	f819 3002 	ldrb.w	r3, [r9, r2]
 80170d0:	5c81      	ldrb	r1, [r0, r2]
 80170d2:	404b      	eors	r3, r1
 80170d4:	ea4c 0303 	orr.w	r3, ip, r3
 80170d8:	b2db      	uxtb	r3, r3
    for( i = 0; i < hlen; i++ )
 80170da:	3201      	adds	r2, #1
 80170dc:	e7d1      	b.n	8017082 <mbedtls_rsa_rsaes_oaep_decrypt+0x102>
        pad_done |= p[i];
 80170de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170e2:	4316      	orrs	r6, r2
        pad_len += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 80170e4:	4272      	negs	r2, r6
 80170e6:	4332      	orrs	r2, r6
 80170e8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80170ec:	f082 0201 	eor.w	r2, r2, #1
 80170f0:	4411      	add	r1, r2
    for( i = 0; i < ilen - 2 * hlen - 2; i++ )
 80170f2:	e7d1      	b.n	8017098 <mbedtls_rsa_rsaes_oaep_decrypt+0x118>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 80170f4:	4c02      	ldr	r4, [pc, #8]	; (8017100 <mbedtls_rsa_rsaes_oaep_decrypt+0x180>)
 80170f6:	e78a      	b.n	801700e <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 80170f8:	4c02      	ldr	r4, [pc, #8]	; (8017104 <mbedtls_rsa_rsaes_oaep_decrypt+0x184>)
 80170fa:	e788      	b.n	801700e <mbedtls_rsa_rsaes_oaep_decrypt+0x8e>
 80170fc:	ffffbf80 	.word	0xffffbf80
 8017100:	ffffbf00 	.word	0xffffbf00
 8017104:	ffffbc00 	.word	0xffffbc00

08017108 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>:
                                 void *p_rng,
                                 int mode, size_t *olen,
                                 const unsigned char *input,
                                 unsigned char *output,
                                 size_t output_max_len)
{
 8017108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801710c:	461f      	mov	r7, r3
 801710e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
    int ret;
    size_t ilen, pad_count = 0, i;
    unsigned char *p, bad, pad_done = 0;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017112:	2f01      	cmp	r7, #1
{
 8017114:	f8dd 3424 	ldr.w	r3, [sp, #1060]	; 0x424
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017118:	d103      	bne.n	8017122 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x1a>
 801711a:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 801711e:	2c00      	cmp	r4, #0
 8017120:	d175      	bne.n	801720e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ilen = ctx->len;
 8017122:	6845      	ldr	r5, [r0, #4]

    if( ilen < 16 || ilen > sizeof( buf ) )
 8017124:	f1a5 0410 	sub.w	r4, r5, #16
 8017128:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 801712c:	d86f      	bhi.n	801720e <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x106>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 801712e:	ae02      	add	r6, sp, #8
          ? mbedtls_rsa_public(  ctx, input, buf )
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 8017130:	2f00      	cmp	r7, #0
 8017132:	d14d      	bne.n	80171d0 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xc8>
          ? mbedtls_rsa_public(  ctx, input, buf )
 8017134:	4632      	mov	r2, r6
 8017136:	4619      	mov	r1, r3
 8017138:	f7ff fc38 	bl	80169ac <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 801713c:	4604      	mov	r4, r0

    if( ret != 0 )
 801713e:	2800      	cmp	r0, #0
 8017140:	d13c      	bne.n	80171bc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
     * Check and get padding len in "constant-time"
     */
    bad |= *p++; /* First byte must be 0 */

    /* This test does not depend on secret data */
    if( mode == MBEDTLS_RSA_PRIVATE )
 8017142:	2f01      	cmp	r7, #1
 8017144:	7871      	ldrb	r1, [r6, #1]
 8017146:	f996 2000 	ldrsb.w	r2, [r6]
 801714a:	f1a5 0e03 	sub.w	lr, r5, #3
 801714e:	d143      	bne.n	80171d8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xd0>
    {
        bad |= *p++ ^ MBEDTLS_RSA_CRYPT;
 8017150:	f081 0302 	eor.w	r3, r1, #2
 8017154:	4313      	orrs	r3, r2
 8017156:	b2db      	uxtb	r3, r3

        /* Get padding len, but always read till end of buffer
         * (minus one, for the 00 byte) */
        for( i = 0; i < ilen - 3; i++ )
 8017158:	f10d 0109 	add.w	r1, sp, #9
    unsigned char *p, bad, pad_done = 0;
 801715c:	4607      	mov	r7, r0
        for( i = 0; i < ilen - 3; i++ )
 801715e:	4684      	mov	ip, r0
        {
            pad_done  |= ((p[i] | (unsigned char)-p[i]) >> 7) ^ 1;
 8017160:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017164:	f1c2 0800 	rsb	r8, r2, #0
 8017168:	ea42 0208 	orr.w	r2, r2, r8
 801716c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8017170:	f082 0201 	eor.w	r2, r2, #1
 8017174:	4317      	orrs	r7, r2
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8017176:	427a      	negs	r2, r7
 8017178:	433a      	orrs	r2, r7
 801717a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        for( i = 0; i < ilen - 3; i++ )
 801717e:	f10c 0c01 	add.w	ip, ip, #1
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8017182:	f082 0201 	eor.w	r2, r2, #1
        for( i = 0; i < ilen - 3; i++ )
 8017186:	45e6      	cmp	lr, ip
            pad_count += ((pad_done | (unsigned char)-pad_done) >> 7) ^ 1;
 8017188:	4410      	add	r0, r2
        for( i = 0; i < ilen - 3; i++ )
 801718a:	d8e9      	bhi.n	8017160 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x58>
            pad_done |= ( p[i] != 0xFF );
            pad_count += ( pad_done == 0 );
        }

        p += pad_count;
        bad |= *p++; /* Must be zero */
 801718c:	f10d 020a 	add.w	r2, sp, #10
 8017190:	1c41      	adds	r1, r0, #1
 8017192:	4411      	add	r1, r2
 8017194:	5c12      	ldrb	r2, [r2, r0]
 8017196:	4313      	orrs	r3, r2
    }

    bad |= ( pad_count < 8 );
 8017198:	2807      	cmp	r0, #7
 801719a:	bf98      	it	ls
 801719c:	f043 0301 	orrls.w	r3, r3, #1

    if( bad )
 80171a0:	bb8b      	cbnz	r3, 8017206 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xfe>
    {
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
        goto cleanup;
    }

    if( ilen - ( p - buf ) > output_max_len )
 80171a2:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
 80171a6:	1b8a      	subs	r2, r1, r6
 80171a8:	1aaa      	subs	r2, r5, r2
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d82d      	bhi.n	801720a <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x102>
    {
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
        goto cleanup;
    }

    *olen = ilen - (p - buf);
 80171ae:	f8dd 3420 	ldr.w	r3, [sp, #1056]	; 0x420
    memcpy( output, p, *olen );
 80171b2:	f8dd 0428 	ldr.w	r0, [sp, #1064]	; 0x428
    *olen = ilen - (p - buf);
 80171b6:	601a      	str	r2, [r3, #0]
    memcpy( output, p, *olen );
 80171b8:	f00b f916 	bl	80223e8 <memcpy>
    ret = 0;

cleanup:
    mbedtls_zeroize( buf, sizeof( buf ) );
 80171bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80171c0:	4630      	mov	r0, r6
 80171c2:	f7ff fa49 	bl	8016658 <mbedtls_zeroize>

    return( ret );
}
 80171c6:	4620      	mov	r0, r4
 80171c8:	f50d 6d81 	add.w	sp, sp, #1032	; 0x408
 80171cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          : mbedtls_rsa_private( ctx, f_rng, p_rng, input, buf );
 80171d0:	9600      	str	r6, [sp, #0]
 80171d2:	f7ff fc23 	bl	8016a1c <mbedtls_rsa_private>
 80171d6:	e7b1      	b.n	801713c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x34>
        bad |= *p++ ^ MBEDTLS_RSA_SIGN;
 80171d8:	f081 0301 	eor.w	r3, r1, #1
 80171dc:	4313      	orrs	r3, r2
 80171de:	b2db      	uxtb	r3, r3
        for( i = 0; i < ilen - 3; i++ )
 80171e0:	f10d 0209 	add.w	r2, sp, #9
    unsigned char *p, bad, pad_done = 0;
 80171e4:	4607      	mov	r7, r0
        for( i = 0; i < ilen - 3; i++ )
 80171e6:	4601      	mov	r1, r0
            pad_done |= ( p[i] != 0xFF );
 80171e8:	f812 cf01 	ldrb.w	ip, [r2, #1]!
        for( i = 0; i < ilen - 3; i++ )
 80171ec:	3101      	adds	r1, #1
            pad_done |= ( p[i] != 0xFF );
 80171ee:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80171f2:	bf18      	it	ne
 80171f4:	f047 0701 	orrne.w	r7, r7, #1
            pad_count += ( pad_done == 0 );
 80171f8:	f087 0c01 	eor.w	ip, r7, #1
        for( i = 0; i < ilen - 3; i++ )
 80171fc:	458e      	cmp	lr, r1
            pad_count += ( pad_done == 0 );
 80171fe:	fa50 f08c 	uxtab	r0, r0, ip
        for( i = 0; i < ilen - 3; i++ )
 8017202:	d8f1      	bhi.n	80171e8 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xe0>
 8017204:	e7c2      	b.n	801718c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x84>
        ret = MBEDTLS_ERR_RSA_INVALID_PADDING;
 8017206:	4c03      	ldr	r4, [pc, #12]	; (8017214 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x10c>)
 8017208:	e7d8      	b.n	80171bc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
        ret = MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE;
 801720a:	4c03      	ldr	r4, [pc, #12]	; (8017218 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x110>)
 801720c:	e7d6      	b.n	80171bc <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xb4>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801720e:	4c03      	ldr	r4, [pc, #12]	; (801721c <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0x114>)
 8017210:	e7d9      	b.n	80171c6 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt+0xbe>
 8017212:	bf00      	nop
 8017214:	ffffbf00 	.word	0xffffbf00
 8017218:	ffffbc00 	.word	0xffffbc00
 801721c:	ffffbf80 	.word	0xffffbf80

08017220 <mbedtls_rsa_pkcs1_decrypt>:
                       void *p_rng,
                       int mode, size_t *olen,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t output_max_len)
{
 8017220:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch( ctx->padding )
 8017222:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
{
 8017226:	b087      	sub	sp, #28
 8017228:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 801722c:	e9dd 7c0e 	ldrd	r7, ip, [sp, #56]	; 0x38
    switch( ctx->padding )
 8017230:	b124      	cbz	r4, 801723c <mbedtls_rsa_pkcs1_decrypt+0x1c>
 8017232:	2c01      	cmp	r4, #1
 8017234:	d007      	beq.n	8017246 <mbedtls_rsa_pkcs1_decrypt+0x26>
 8017236:	4809      	ldr	r0, [pc, #36]	; (801725c <mbedtls_rsa_pkcs1_decrypt+0x3c>)
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8017238:	b007      	add	sp, #28
 801723a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801723c:	b007      	add	sp, #28
 801723e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return mbedtls_rsa_rsaes_pkcs1_v15_decrypt( ctx, f_rng, p_rng, mode, olen,
 8017242:	f7ff bf61 	b.w	8017108 <mbedtls_rsa_rsaes_pkcs1_v15_decrypt>
            return mbedtls_rsa_rsaes_oaep_decrypt( ctx, f_rng, p_rng, mode, NULL, 0,
 8017246:	2400      	movs	r4, #0
 8017248:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801724c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8017250:	e9cd 4400 	strd	r4, r4, [sp]
 8017254:	f7ff fe94 	bl	8016f80 <mbedtls_rsa_rsaes_oaep_decrypt>
 8017258:	e7ee      	b.n	8017238 <mbedtls_rsa_pkcs1_decrypt+0x18>
 801725a:	bf00      	nop
 801725c:	ffffbf00 	.word	0xffffbf00

08017260 <mbedtls_rsa_rsassa_pss_sign>:
                         int mode,
                         mbedtls_md_type_t md_alg,
                         unsigned int hashlen,
                         const unsigned char *hash,
                         unsigned char *sig )
{
 8017260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017264:	ed2d 8b02 	vpush	{d8}
 8017268:	b09b      	sub	sp, #108	; 0x6c
    int ret;
    size_t msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801726a:	2b01      	cmp	r3, #1
{
 801726c:	4607      	mov	r7, r0
 801726e:	ee08 2a10 	vmov	s16, r2
 8017272:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
 8017276:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8017278:	9102      	str	r1, [sp, #8]
 801727a:	9303      	str	r3, [sp, #12]
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 801727c:	d10b      	bne.n	8017296 <mbedtls_rsa_rsassa_pss_sign+0x36>
 801727e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017282:	2b01      	cmp	r3, #1
 8017284:	d007      	beq.n	8017296 <mbedtls_rsa_rsassa_pss_sign+0x36>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017286:	f8df a154 	ldr.w	sl, [pc, #340]	; 80173dc <mbedtls_rsa_rsassa_pss_sign+0x17c>
    *p++ = 0xBC;

    return( ( mode == MBEDTLS_RSA_PUBLIC )
            ? mbedtls_rsa_public(  ctx, sig, sig )
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
}
 801728a:	4650      	mov	r0, sl
 801728c:	b01b      	add	sp, #108	; 0x6c
 801728e:	ecbd 8b02 	vpop	{d8}
 8017292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( f_rng == NULL )
 8017296:	9b02      	ldr	r3, [sp, #8]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d0f4      	beq.n	8017286 <mbedtls_rsa_rsassa_pss_sign+0x26>
    olen = ctx->len;
 801729c:	f8d7 8004 	ldr.w	r8, [r7, #4]
    if( md_alg != MBEDTLS_MD_NONE )
 80172a0:	b130      	cbz	r0, 80172b0 <mbedtls_rsa_rsassa_pss_sign+0x50>
        md_info = mbedtls_md_info_from_type( md_alg );
 80172a2:	f7fd faff 	bl	80148a4 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 80172a6:	2800      	cmp	r0, #0
 80172a8:	d0ed      	beq.n	8017286 <mbedtls_rsa_rsassa_pss_sign+0x26>
        hashlen = mbedtls_md_get_size( md_info );
 80172aa:	f7fd fc4b 	bl	8014b44 <mbedtls_md_get_size>
 80172ae:	9027      	str	r0, [sp, #156]	; 0x9c
    md_info = mbedtls_md_info_from_type( (mbedtls_md_type_t) ctx->hash_id );
 80172b0:	f897 00a8 	ldrb.w	r0, [r7, #168]	; 0xa8
 80172b4:	f7fd faf6 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 80172b8:	4682      	mov	sl, r0
 80172ba:	2800      	cmp	r0, #0
 80172bc:	d0e3      	beq.n	8017286 <mbedtls_rsa_rsassa_pss_sign+0x26>
    hlen = mbedtls_md_get_size( md_info );
 80172be:	f7fd fc41 	bl	8014b44 <mbedtls_md_get_size>
    if( olen < hlen + slen + 2 )
 80172c2:	1c43      	adds	r3, r0, #1
 80172c4:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
    hlen = mbedtls_md_get_size( md_info );
 80172c8:	4604      	mov	r4, r0
    if( olen < hlen + slen + 2 )
 80172ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80172ce:	d3da      	bcc.n	8017286 <mbedtls_rsa_rsassa_pss_sign+0x26>
    memset( sig, 0, olen );
 80172d0:	4642      	mov	r2, r8
 80172d2:	2100      	movs	r1, #0
 80172d4:	4630      	mov	r0, r6
 80172d6:	f00b f8af 	bl	8022438 <memset>
    if( ( ret = f_rng( p_rng, salt, slen ) ) != 0 )
 80172da:	ee18 0a10 	vmov	r0, s16
 80172de:	9b02      	ldr	r3, [sp, #8]
 80172e0:	4622      	mov	r2, r4
 80172e2:	a90a      	add	r1, sp, #40	; 0x28
 80172e4:	4798      	blx	r3
 80172e6:	b110      	cbz	r0, 80172ee <mbedtls_rsa_rsassa_pss_sign+0x8e>
        return( MBEDTLS_ERR_RSA_RNG_FAILED + ret );
 80172e8:	f5a0 4a89 	sub.w	sl, r0, #17536	; 0x4480
 80172ec:	e7cd      	b.n	801728a <mbedtls_rsa_rsassa_pss_sign+0x2a>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 80172ee:	f107 0b08 	add.w	fp, r7, #8
 80172f2:	9005      	str	r0, [sp, #20]
 80172f4:	4658      	mov	r0, fp
 80172f6:	f7f7 fc66 	bl	800ebc6 <mbedtls_mpi_bitlen>
    p += olen - hlen * 2 - 2;
 80172fa:	eba8 0505 	sub.w	r5, r8, r5
 80172fe:	1972      	adds	r2, r6, r5
    *p++ = 0x01;
 8017300:	f102 0901 	add.w	r9, r2, #1
 8017304:	2201      	movs	r2, #1
 8017306:	5572      	strb	r2, [r6, r5]
    memcpy( p, salt, slen );
 8017308:	a90a      	add	r1, sp, #40	; 0x28
 801730a:	4622      	mov	r2, r4
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801730c:	9004      	str	r0, [sp, #16]
    mbedtls_md_init( &md_ctx );
 801730e:	ad07      	add	r5, sp, #28
    memcpy( p, salt, slen );
 8017310:	4648      	mov	r0, r9
 8017312:	f00b f869 	bl	80223e8 <memcpy>
    mbedtls_md_init( &md_ctx );
 8017316:	4628      	mov	r0, r5
 8017318:	f7fd fad0 	bl	80148bc <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 801731c:	9b05      	ldr	r3, [sp, #20]
 801731e:	4651      	mov	r1, sl
 8017320:	461a      	mov	r2, r3
 8017322:	4628      	mov	r0, r5
 8017324:	f7fd faf4 	bl	8014910 <mbedtls_md_setup>
 8017328:	4682      	mov	sl, r0
 801732a:	b118      	cbz	r0, 8017334 <mbedtls_rsa_rsassa_pss_sign+0xd4>
        mbedtls_md_free( &md_ctx );
 801732c:	4628      	mov	r0, r5
 801732e:	f7fd facb 	bl	80148c8 <mbedtls_md_free>
        return( ret );
 8017332:	e7aa      	b.n	801728a <mbedtls_rsa_rsassa_pss_sign+0x2a>
    p += slen;
 8017334:	eb09 0a04 	add.w	sl, r9, r4
    mbedtls_md_starts( &md_ctx );
 8017338:	4628      	mov	r0, r5
 801733a:	f7fd fb0b 	bl	8014954 <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, p, 8 );
 801733e:	2208      	movs	r2, #8
 8017340:	4651      	mov	r1, sl
 8017342:	4628      	mov	r0, r5
 8017344:	f7fd fb14 	bl	8014970 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 8017348:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 801734c:	4628      	mov	r0, r5
 801734e:	f7fd fb0f 	bl	8014970 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, salt, slen );
 8017352:	4622      	mov	r2, r4
 8017354:	a90a      	add	r1, sp, #40	; 0x28
 8017356:	4628      	mov	r0, r5
 8017358:	f7fd fb0a 	bl	8014970 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, p );
 801735c:	4651      	mov	r1, sl
 801735e:	4628      	mov	r0, r5
 8017360:	f7fd fb14 	bl	801498c <mbedtls_md_finish>
    mbedtls_zeroize( salt, sizeof( salt ) );
 8017364:	2140      	movs	r1, #64	; 0x40
 8017366:	a80a      	add	r0, sp, #40	; 0x28
 8017368:	f7ff f976 	bl	8016658 <mbedtls_zeroize>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801736c:	9b04      	ldr	r3, [sp, #16]
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 801736e:	9500      	str	r5, [sp, #0]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017370:	1e58      	subs	r0, r3, #1
    if( msb % 8 == 0 )
 8017372:	f010 0f07 	tst.w	r0, #7
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8017376:	f108 31ff 	add.w	r1, r8, #4294967295
    if( msb % 8 == 0 )
 801737a:	bf0c      	ite	eq
 801737c:	2001      	moveq	r0, #1
 801737e:	2000      	movne	r0, #0
    mgf_mask( sig + offset, olen - hlen - 1 - offset, p, hlen, &md_ctx );
 8017380:	1b09      	subs	r1, r1, r4
 8017382:	4623      	mov	r3, r4
 8017384:	1a09      	subs	r1, r1, r0
 8017386:	4652      	mov	r2, sl
 8017388:	4430      	add	r0, r6
 801738a:	f7ff f96d 	bl	8016668 <mgf_mask>
    mbedtls_md_free( &md_ctx );
 801738e:	4628      	mov	r0, r5
 8017390:	f7fd fa9a 	bl	80148c8 <mbedtls_md_free>
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017394:	4658      	mov	r0, fp
 8017396:	f7f7 fc16 	bl	800ebc6 <mbedtls_mpi_bitlen>
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 801739a:	ebc0 00c8 	rsb	r0, r0, r8, lsl #3
 801739e:	7833      	ldrb	r3, [r6, #0]
 80173a0:	3001      	adds	r0, #1
 80173a2:	f04f 08ff 	mov.w	r8, #255	; 0xff
 80173a6:	fa48 f800 	asr.w	r8, r8, r0
 80173aa:	ea08 0803 	and.w	r8, r8, r3
    *p++ = 0xBC;
 80173ae:	23bc      	movs	r3, #188	; 0xbc
    sig[0] &= 0xFF >> ( olen * 8 - msb );
 80173b0:	f886 8000 	strb.w	r8, [r6]
    *p++ = 0xBC;
 80173b4:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80173b8:	9b03      	ldr	r3, [sp, #12]
 80173ba:	b933      	cbnz	r3, 80173ca <mbedtls_rsa_rsassa_pss_sign+0x16a>
            ? mbedtls_rsa_public(  ctx, sig, sig )
 80173bc:	4632      	mov	r2, r6
 80173be:	4631      	mov	r1, r6
 80173c0:	4638      	mov	r0, r7
 80173c2:	f7ff faf3 	bl	80169ac <mbedtls_rsa_public>
            : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig ) );
 80173c6:	4682      	mov	sl, r0
 80173c8:	e75f      	b.n	801728a <mbedtls_rsa_rsassa_pss_sign+0x2a>
 80173ca:	ee18 2a10 	vmov	r2, s16
 80173ce:	9902      	ldr	r1, [sp, #8]
 80173d0:	9600      	str	r6, [sp, #0]
 80173d2:	4633      	mov	r3, r6
 80173d4:	4638      	mov	r0, r7
 80173d6:	f7ff fb21 	bl	8016a1c <mbedtls_rsa_private>
 80173da:	e7f4      	b.n	80173c6 <mbedtls_rsa_rsassa_pss_sign+0x166>
 80173dc:	ffffbf80 	.word	0xffffbf80

080173e0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>:
                               int mode,
                               mbedtls_md_type_t md_alg,
                               unsigned int hashlen,
                               const unsigned char *hash,
                               unsigned char *sig )
{
 80173e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e4:	ed2d 8b02 	vpush	{d8}
 80173e8:	b089      	sub	sp, #36	; 0x24
 80173ea:	4691      	mov	r9, r2
    size_t i;
    unsigned char diff;
    volatile unsigned char diff_no_optimize;
    int ret;

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 80173ec:	2b01      	cmp	r3, #1
    size_t nb_pad, olen, oid_size = 0;
 80173ee:	f04f 0200 	mov.w	r2, #0
    const char *oid = NULL;
 80173f2:	e9cd 2206 	strd	r2, r2, [sp, #24]
{
 80173f6:	ee08 1a10 	vmov	s16, r1
 80173fa:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 80173fe:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 8017402:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8017404:	4604      	mov	r4, r0
 8017406:	469a      	mov	sl, r3
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017408:	d109      	bne.n	801741e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
 801740a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 801740e:	b132      	cbz	r2, 801741e <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x3e>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 8017410:	4d56      	ldr	r5, [pc, #344]	; (801756c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x18c>)
cleanup:
    mbedtls_free( sig_try );
    mbedtls_free( verif );

    return( ret );
}
 8017412:	4628      	mov	r0, r5
 8017414:	b009      	add	sp, #36	; 0x24
 8017416:	ecbd 8b02 	vpop	{d8}
 801741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    olen = ctx->len;
 801741e:	f8d4 b004 	ldr.w	fp, [r4, #4]
    nb_pad = olen - 3;
 8017422:	f1ab 0503 	sub.w	r5, fp, #3
    if( md_alg != MBEDTLS_MD_NONE )
 8017426:	b19f      	cbz	r7, 8017450 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x70>
        const mbedtls_md_info_t *md_info = mbedtls_md_info_from_type( md_alg );
 8017428:	4638      	mov	r0, r7
 801742a:	f7fd fa3b 	bl	80148a4 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 801742e:	4680      	mov	r8, r0
 8017430:	2800      	cmp	r0, #0
 8017432:	d0ed      	beq.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
        if( mbedtls_oid_get_oid_by_md( md_alg, &oid, &oid_size ) != 0 )
 8017434:	aa06      	add	r2, sp, #24
 8017436:	a907      	add	r1, sp, #28
 8017438:	4638      	mov	r0, r7
 801743a:	f7fe f915 	bl	8015668 <mbedtls_oid_get_oid_by_md>
 801743e:	2800      	cmp	r0, #0
 8017440:	d1e6      	bne.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
        nb_pad -= 10 + oid_size;
 8017442:	9a06      	ldr	r2, [sp, #24]
        hashlen = mbedtls_md_get_size( md_info );
 8017444:	4640      	mov	r0, r8
        nb_pad -= 10 + oid_size;
 8017446:	1aad      	subs	r5, r5, r2
        hashlen = mbedtls_md_get_size( md_info );
 8017448:	f7fd fb7c 	bl	8014b44 <mbedtls_md_get_size>
        nb_pad -= 10 + oid_size;
 801744c:	3d0a      	subs	r5, #10
        hashlen = mbedtls_md_get_size( md_info );
 801744e:	4680      	mov	r8, r0
    nb_pad -= hashlen;
 8017450:	eba5 0208 	sub.w	r2, r5, r8
    if( ( nb_pad < 8 ) || ( nb_pad > olen ) )
 8017454:	2a07      	cmp	r2, #7
 8017456:	d9db      	bls.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
 8017458:	4593      	cmp	fp, r2
 801745a:	d3d9      	bcc.n	8017410 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x30>
    *p++ = 0;
 801745c:	46b3      	mov	fp, r6
 801745e:	2500      	movs	r5, #0
 8017460:	f80b 5b02 	strb.w	r5, [fp], #2
    *p++ = MBEDTLS_RSA_SIGN;
 8017464:	2101      	movs	r1, #1
 8017466:	7071      	strb	r1, [r6, #1]
    memset( p, 0xFF, nb_pad );
 8017468:	4658      	mov	r0, fp
 801746a:	21ff      	movs	r1, #255	; 0xff
 801746c:	9203      	str	r2, [sp, #12]
 801746e:	f00a ffe3 	bl	8022438 <memset>
    p += nb_pad;
 8017472:	9a03      	ldr	r2, [sp, #12]
    *p++ = 0;
 8017474:	f80b 5002 	strb.w	r5, [fp, r2]
    p += nb_pad;
 8017478:	eb0b 0002 	add.w	r0, fp, r2
    if( md_alg == MBEDTLS_MD_NONE )
 801747c:	b977      	cbnz	r7, 801749c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xbc>
        memcpy( p, hash, hashlen );
 801747e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017480:	4642      	mov	r2, r8
 8017482:	3001      	adds	r0, #1
        memcpy( p, hash, hashlen );
 8017484:	f00a ffb0 	bl	80223e8 <memcpy>
    if( mode == MBEDTLS_RSA_PUBLIC )
 8017488:	f1ba 0f00 	cmp.w	sl, #0
 801748c:	d12a      	bne.n	80174e4 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x104>
        return( mbedtls_rsa_public(  ctx, sig, sig ) );
 801748e:	4632      	mov	r2, r6
 8017490:	4631      	mov	r1, r6
 8017492:	4620      	mov	r0, r4
 8017494:	f7ff fa8a 	bl	80169ac <mbedtls_rsa_public>
 8017498:	4605      	mov	r5, r0
 801749a:	e7ba      	b.n	8017412 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 801749c:	2730      	movs	r7, #48	; 0x30
 801749e:	7047      	strb	r7, [r0, #1]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 80174a0:	9a06      	ldr	r2, [sp, #24]
        *p++ = MBEDTLS_ASN1_SEQUENCE | MBEDTLS_ASN1_CONSTRUCTED;
 80174a2:	70c7      	strb	r7, [r0, #3]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 80174a4:	f102 0108 	add.w	r1, r2, #8
 80174a8:	fa51 f188 	uxtab	r1, r1, r8
 80174ac:	7081      	strb	r1, [r0, #2]
        *p++ = (unsigned char) ( 0x04 + oid_size );
 80174ae:	b2d1      	uxtb	r1, r2
 80174b0:	1d0f      	adds	r7, r1, #4
 80174b2:	7107      	strb	r7, [r0, #4]
        *p++ = MBEDTLS_ASN1_OID;
 80174b4:	2706      	movs	r7, #6
 80174b6:	7147      	strb	r7, [r0, #5]
        *p++ = oid_size & 0xFF;
 80174b8:	1dc7      	adds	r7, r0, #7
 80174ba:	7181      	strb	r1, [r0, #6]
        memcpy( p, oid, oid_size );
 80174bc:	9907      	ldr	r1, [sp, #28]
 80174be:	9203      	str	r2, [sp, #12]
 80174c0:	4638      	mov	r0, r7
 80174c2:	f00a ff91 	bl	80223e8 <memcpy>
        p += oid_size;
 80174c6:	9a03      	ldr	r2, [sp, #12]
        *p++ = MBEDTLS_ASN1_NULL;
 80174c8:	2105      	movs	r1, #5
        p += oid_size;
 80174ca:	18b8      	adds	r0, r7, r2
        *p++ = MBEDTLS_ASN1_NULL;
 80174cc:	54b9      	strb	r1, [r7, r2]
        *p++ = (unsigned char) ( 0x08 + oid_size + hashlen );
 80174ce:	fa5f fb88 	uxtb.w	fp, r8
        *p++ = MBEDTLS_ASN1_OCTET_STRING;
 80174d2:	2204      	movs	r2, #4
 80174d4:	7082      	strb	r2, [r0, #2]
        *p++ = 0x00;
 80174d6:	7045      	strb	r5, [r0, #1]
        *p++ = hashlen;
 80174d8:	f880 b003 	strb.w	fp, [r0, #3]
        memcpy( p, hash, hashlen );
 80174dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80174de:	4642      	mov	r2, r8
 80174e0:	3004      	adds	r0, #4
 80174e2:	e7cf      	b.n	8017484 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0xa4>
    sig_try = mbedtls_calloc( 1, ctx->len );
 80174e4:	4d22      	ldr	r5, [pc, #136]	; (8017570 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x190>)
 80174e6:	6861      	ldr	r1, [r4, #4]
 80174e8:	682b      	ldr	r3, [r5, #0]
 80174ea:	2001      	movs	r0, #1
 80174ec:	4798      	blx	r3
    if( sig_try == NULL )
 80174ee:	4607      	mov	r7, r0
 80174f0:	b148      	cbz	r0, 8017506 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x126>
    verif   = mbedtls_calloc( 1, ctx->len );
 80174f2:	682b      	ldr	r3, [r5, #0]
 80174f4:	6861      	ldr	r1, [r4, #4]
 80174f6:	2001      	movs	r0, #1
 80174f8:	4798      	blx	r3
    if( verif == NULL )
 80174fa:	4682      	mov	sl, r0
 80174fc:	b930      	cbnz	r0, 801750c <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x12c>
        mbedtls_free( sig_try );
 80174fe:	4b1d      	ldr	r3, [pc, #116]	; (8017574 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x194>)
 8017500:	4638      	mov	r0, r7
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	4798      	blx	r3
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 8017506:	f06f 050f 	mvn.w	r5, #15
 801750a:	e782      	b.n	8017412 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
    MBEDTLS_MPI_CHK( mbedtls_rsa_private( ctx, f_rng, p_rng, sig, sig_try ) );
 801750c:	ee18 1a10 	vmov	r1, s16
 8017510:	9700      	str	r7, [sp, #0]
 8017512:	4633      	mov	r3, r6
 8017514:	464a      	mov	r2, r9
 8017516:	4620      	mov	r0, r4
 8017518:	f7ff fa80 	bl	8016a1c <mbedtls_rsa_private>
 801751c:	4605      	mov	r5, r0
 801751e:	b9a0      	cbnz	r0, 801754a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
    MBEDTLS_MPI_CHK( mbedtls_rsa_public( ctx, sig_try, verif ) );
 8017520:	4652      	mov	r2, sl
 8017522:	4639      	mov	r1, r7
 8017524:	4620      	mov	r0, r4
 8017526:	f7ff fa41 	bl	80169ac <mbedtls_rsa_public>
 801752a:	4605      	mov	r5, r0
 801752c:	b968      	cbnz	r0, 801754a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
    for( diff = 0, i = 0; i < ctx->len; i++ )
 801752e:	6862      	ldr	r2, [r4, #4]
 8017530:	4601      	mov	r1, r0
 8017532:	4603      	mov	r3, r0
 8017534:	429a      	cmp	r2, r3
 8017536:	d110      	bne.n	801755a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x17a>
    diff_no_optimize = diff;
 8017538:	f88d 1017 	strb.w	r1, [sp, #23]
    if( diff_no_optimize != 0 )
 801753c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8017540:	b993      	cbnz	r3, 8017568 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x188>
    memcpy( sig, sig_try, ctx->len );
 8017542:	4639      	mov	r1, r7
 8017544:	4630      	mov	r0, r6
 8017546:	f00a ff4f 	bl	80223e8 <memcpy>
    mbedtls_free( sig_try );
 801754a:	4c0a      	ldr	r4, [pc, #40]	; (8017574 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x194>)
 801754c:	4638      	mov	r0, r7
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	4798      	blx	r3
    mbedtls_free( verif );
 8017552:	6823      	ldr	r3, [r4, #0]
 8017554:	4650      	mov	r0, sl
 8017556:	4798      	blx	r3
    return( ret );
 8017558:	e75b      	b.n	8017412 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x32>
        diff |= verif[i] ^ sig[i];
 801755a:	f81a 0003 	ldrb.w	r0, [sl, r3]
 801755e:	5cf4      	ldrb	r4, [r6, r3]
 8017560:	4060      	eors	r0, r4
 8017562:	4301      	orrs	r1, r0
    for( diff = 0, i = 0; i < ctx->len; i++ )
 8017564:	3301      	adds	r3, #1
 8017566:	e7e5      	b.n	8017534 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x154>
        ret = MBEDTLS_ERR_RSA_PRIVATE_FAILED;
 8017568:	4d03      	ldr	r5, [pc, #12]	; (8017578 <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x198>)
 801756a:	e7ee      	b.n	801754a <mbedtls_rsa_rsassa_pkcs1_v15_sign+0x16a>
 801756c:	ffffbf80 	.word	0xffffbf80
 8017570:	200005a0 	.word	0x200005a0
 8017574:	200005a4 	.word	0x200005a4
 8017578:	ffffbd00 	.word	0xffffbd00

0801757c <mbedtls_rsa_pkcs1_sign>:
                    int mode,
                    mbedtls_md_type_t md_alg,
                    unsigned int hashlen,
                    const unsigned char *hash,
                    unsigned char *sig )
{
 801757c:	b430      	push	{r4, r5}
    switch( ctx->padding )
 801757e:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 8017582:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 8017586:	b125      	cbz	r5, 8017592 <mbedtls_rsa_pkcs1_sign+0x16>
 8017588:	2d01      	cmp	r5, #1
 801758a:	d006      	beq.n	801759a <mbedtls_rsa_pkcs1_sign+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 801758c:	4805      	ldr	r0, [pc, #20]	; (80175a4 <mbedtls_rsa_pkcs1_sign+0x28>)
 801758e:	bc30      	pop	{r4, r5}
 8017590:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017592:	9402      	str	r4, [sp, #8]
}
 8017594:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_sign( ctx, f_rng, p_rng, mode, md_alg,
 8017596:	f7ff bf23 	b.w	80173e0 <mbedtls_rsa_rsassa_pkcs1_v15_sign>
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801759a:	9402      	str	r4, [sp, #8]
}
 801759c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_sign( ctx, f_rng, p_rng, mode, md_alg,
 801759e:	f7ff be5f 	b.w	8017260 <mbedtls_rsa_rsassa_pss_sign>
 80175a2:	bf00      	nop
 80175a4:	ffffbf00 	.word	0xffffbf00

080175a8 <mbedtls_rsa_rsassa_pss_verify_ext>:
                               unsigned int hashlen,
                               const unsigned char *hash,
                               mbedtls_md_type_t mgf1_hash_id,
                               int expected_salt_len,
                               const unsigned char *sig )
{
 80175a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175ac:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
    size_t slen, msb;
    const mbedtls_md_info_t *md_info;
    mbedtls_md_context_t md_ctx;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80175b0:	2b01      	cmp	r3, #1
{
 80175b2:	4604      	mov	r4, r0
 80175b4:	f89d 5490 	ldrb.w	r5, [sp, #1168]	; 0x490
 80175b8:	f8dd 04a4 	ldr.w	r0, [sp, #1188]	; 0x4a4
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V21 )
 80175bc:	d109      	bne.n	80175d2 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
 80175be:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
 80175c2:	2e01      	cmp	r6, #1
 80175c4:	d005      	beq.n	80175d2 <mbedtls_rsa_rsassa_pss_verify_ext+0x2a>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 80175c6:	4b5c      	ldr	r3, [pc, #368]	; (8017738 <mbedtls_rsa_rsassa_pss_verify_ext+0x190>)

    if( memcmp( p + slen, result, hlen ) == 0 )
        return( 0 );
    else
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80175ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    siglen = ctx->len;
 80175d2:	f8d4 8004 	ldr.w	r8, [r4, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 80175d6:	f1a8 0610 	sub.w	r6, r8, #16
 80175da:	f5b6 7f7c 	cmp.w	r6, #1008	; 0x3f0
 80175de:	d8f2      	bhi.n	80175c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 80175e0:	ae1a      	add	r6, sp, #104	; 0x68
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d14a      	bne.n	801767c <mbedtls_rsa_rsassa_pss_verify_ext+0xd4>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 80175e6:	4601      	mov	r1, r0
 80175e8:	4632      	mov	r2, r6
 80175ea:	4620      	mov	r0, r4
 80175ec:	f7ff f9de 	bl	80169ac <mbedtls_rsa_public>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80175f0:	4603      	mov	r3, r0
    if( ret != 0 )
 80175f2:	2800      	cmp	r0, #0
 80175f4:	d1e8      	bne.n	80175c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
    if( buf[siglen - 1] != 0xBC )
 80175f6:	f108 37ff 	add.w	r7, r8, #4294967295
 80175fa:	5df3      	ldrb	r3, [r6, r7]
 80175fc:	2bbc      	cmp	r3, #188	; 0xbc
 80175fe:	f040 8098 	bne.w	8017732 <mbedtls_rsa_rsassa_pss_verify_ext+0x18a>
    if( md_alg != MBEDTLS_MD_NONE )
 8017602:	b145      	cbz	r5, 8017616 <mbedtls_rsa_rsassa_pss_verify_ext+0x6e>
        md_info = mbedtls_md_info_from_type( md_alg );
 8017604:	4628      	mov	r0, r5
 8017606:	f7fd f94d 	bl	80148a4 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 801760a:	2800      	cmp	r0, #0
 801760c:	d0db      	beq.n	80175c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
        hashlen = mbedtls_md_get_size( md_info );
 801760e:	f7fd fa99 	bl	8014b44 <mbedtls_md_get_size>
 8017612:	f8cd 0494 	str.w	r0, [sp, #1172]	; 0x494
    md_info = mbedtls_md_info_from_type( mgf1_hash_id );
 8017616:	f89d 049c 	ldrb.w	r0, [sp, #1180]	; 0x49c
 801761a:	f7fd f943 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801761e:	4683      	mov	fp, r0
 8017620:	2800      	cmp	r0, #0
 8017622:	d0d0      	beq.n	80175c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    hlen = mbedtls_md_get_size( md_info );
 8017624:	f7fd fa8e 	bl	8014b44 <mbedtls_md_get_size>
    memset( zeros, 0, 8 );
 8017628:	2300      	movs	r3, #0
    hlen = mbedtls_md_get_size( md_info );
 801762a:	4682      	mov	sl, r0
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 801762c:	f104 0008 	add.w	r0, r4, #8
    memset( zeros, 0, 8 );
 8017630:	e9cd 3305 	strd	r3, r3, [sp, #20]
    msb = mbedtls_mpi_bitlen( &ctx->N ) - 1;
 8017634:	f7f7 fac7 	bl	800ebc6 <mbedtls_mpi_bitlen>
 8017638:	f100 39ff 	add.w	r9, r0, #4294967295
    if( msb % 8 == 0 )
 801763c:	f019 0f07 	tst.w	r9, #7
        siglen -= 1;
 8017640:	bf08      	it	eq
 8017642:	46b8      	moveq	r8, r7
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8017644:	7832      	ldrb	r2, [r6, #0]
 8017646:	f1c8 0301 	rsb	r3, r8, #1
 801764a:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
        p++;
 801764e:	bf0c      	ite	eq
 8017650:	f10d 0469 	addeq.w	r4, sp, #105	; 0x69
    p = buf;
 8017654:	4634      	movne	r4, r6
    if( buf[0] >> ( 8 - siglen * 8 + msb ) )
 8017656:	411a      	asrs	r2, r3
 8017658:	9203      	str	r2, [sp, #12]
 801765a:	d1b4      	bne.n	80175c6 <mbedtls_rsa_rsassa_pss_verify_ext+0x1e>
    mbedtls_md_init( &md_ctx );
 801765c:	ad07      	add	r5, sp, #28
 801765e:	4628      	mov	r0, r5
 8017660:	f7fd f92c 	bl	80148bc <mbedtls_md_init>
    if( ( ret = mbedtls_md_setup( &md_ctx, md_info, 0 ) ) != 0 )
 8017664:	9a03      	ldr	r2, [sp, #12]
 8017666:	4659      	mov	r1, fp
 8017668:	4628      	mov	r0, r5
 801766a:	f7fd f951 	bl	8014910 <mbedtls_md_setup>
 801766e:	b158      	cbz	r0, 8017688 <mbedtls_rsa_rsassa_pss_verify_ext+0xe0>
 8017670:	9003      	str	r0, [sp, #12]
        mbedtls_md_free( &md_ctx );
 8017672:	4628      	mov	r0, r5
 8017674:	f7fd f928 	bl	80148c8 <mbedtls_md_free>
        return( ret );
 8017678:	9b03      	ldr	r3, [sp, #12]
 801767a:	e7a5      	b.n	80175c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 801767c:	4603      	mov	r3, r0
 801767e:	9600      	str	r6, [sp, #0]
 8017680:	4620      	mov	r0, r4
 8017682:	f7ff f9cb 	bl	8016a1c <mbedtls_rsa_private>
 8017686:	e7b3      	b.n	80175f0 <mbedtls_rsa_rsassa_pss_verify_ext+0x48>
    mgf_mask( p, siglen - hlen - 1, p + siglen - hlen - 1, hlen, &md_ctx );
 8017688:	ea6f 010a 	mvn.w	r1, sl
 801768c:	4441      	add	r1, r8
 801768e:	4653      	mov	r3, sl
 8017690:	4620      	mov	r0, r4
 8017692:	9500      	str	r5, [sp, #0]
 8017694:	1862      	adds	r2, r4, r1
 8017696:	f7fe ffe7 	bl	8016668 <mgf_mask>
    buf[0] &= 0xFF >> ( siglen * 8 - msb );
 801769a:	ebc9 00c8 	rsb	r0, r9, r8, lsl #3
 801769e:	7833      	ldrb	r3, [r6, #0]
 80176a0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80176a4:	fa49 f900 	asr.w	r9, r9, r0
 80176a8:	ea09 0903 	and.w	r9, r9, r3
 80176ac:	f886 9000 	strb.w	r9, [r6]
    while( p < buf + siglen && *p == 0 )
 80176b0:	44b0      	add	r8, r6
 80176b2:	45a0      	cmp	r8, r4
 80176b4:	d939      	bls.n	801772a <mbedtls_rsa_rsassa_pss_verify_ext+0x182>
 80176b6:	4623      	mov	r3, r4
 80176b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176bc:	b39a      	cbz	r2, 8017726 <mbedtls_rsa_rsassa_pss_verify_ext+0x17e>
    if( p == buf + siglen ||
 80176be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80176c2:	2b01      	cmp	r3, #1
 80176c4:	d132      	bne.n	801772c <mbedtls_rsa_rsassa_pss_verify_ext+0x184>
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80176c6:	f8dd 34a0 	ldr.w	r3, [sp, #1184]	; 0x4a0
    slen = siglen - hlen - 1; /* Currently length of salt + padding */
 80176ca:	eba7 070a 	sub.w	r7, r7, sl
    slen -= p - buf;
 80176ce:	1ba6      	subs	r6, r4, r6
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80176d0:	1c5a      	adds	r2, r3, #1
    slen -= p - buf;
 80176d2:	eba7 0606 	sub.w	r6, r7, r6
    if( expected_salt_len != MBEDTLS_RSA_SALT_LEN_ANY &&
 80176d6:	d001      	beq.n	80176dc <mbedtls_rsa_rsassa_pss_verify_ext+0x134>
 80176d8:	42b3      	cmp	r3, r6
 80176da:	d127      	bne.n	801772c <mbedtls_rsa_rsassa_pss_verify_ext+0x184>
    mbedtls_md_starts( &md_ctx );
 80176dc:	4628      	mov	r0, r5
 80176de:	f7fd f939 	bl	8014954 <mbedtls_md_starts>
    mbedtls_md_update( &md_ctx, zeros, 8 );
 80176e2:	2208      	movs	r2, #8
 80176e4:	a905      	add	r1, sp, #20
 80176e6:	4628      	mov	r0, r5
 80176e8:	f7fd f942 	bl	8014970 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, hash, hashlen );
 80176ec:	f8dd 2494 	ldr.w	r2, [sp, #1172]	; 0x494
 80176f0:	f8dd 1498 	ldr.w	r1, [sp, #1176]	; 0x498
 80176f4:	4628      	mov	r0, r5
 80176f6:	f7fd f93b 	bl	8014970 <mbedtls_md_update>
    mbedtls_md_update( &md_ctx, p, slen );
 80176fa:	4632      	mov	r2, r6
 80176fc:	4621      	mov	r1, r4
 80176fe:	4628      	mov	r0, r5
 8017700:	f7fd f936 	bl	8014970 <mbedtls_md_update>
    mbedtls_md_finish( &md_ctx, result );
 8017704:	a90a      	add	r1, sp, #40	; 0x28
 8017706:	4628      	mov	r0, r5
 8017708:	f7fd f940 	bl	801498c <mbedtls_md_finish>
    mbedtls_md_free( &md_ctx );
 801770c:	4628      	mov	r0, r5
 801770e:	f7fd f8db 	bl	80148c8 <mbedtls_md_free>
    if( memcmp( p + slen, result, hlen ) == 0 )
 8017712:	4652      	mov	r2, sl
 8017714:	a90a      	add	r1, sp, #40	; 0x28
 8017716:	19a0      	adds	r0, r4, r6
 8017718:	f00a fe58 	bl	80223cc <memcmp>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 801771c:	4a07      	ldr	r2, [pc, #28]	; (801773c <mbedtls_rsa_rsassa_pss_verify_ext+0x194>)
 801771e:	1e03      	subs	r3, r0, #0
 8017720:	bf18      	it	ne
 8017722:	4613      	movne	r3, r2
 8017724:	e750      	b.n	80175c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
        p++;
 8017726:	461c      	mov	r4, r3
 8017728:	e7c3      	b.n	80176b2 <mbedtls_rsa_rsassa_pss_verify_ext+0x10a>
    if( p == buf + siglen ||
 801772a:	d1c8      	bne.n	80176be <mbedtls_rsa_rsassa_pss_verify_ext+0x116>
        mbedtls_md_free( &md_ctx );
 801772c:	4628      	mov	r0, r5
 801772e:	f7fd f8cb 	bl	80148c8 <mbedtls_md_free>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 8017732:	4b03      	ldr	r3, [pc, #12]	; (8017740 <mbedtls_rsa_rsassa_pss_verify_ext+0x198>)
 8017734:	e748      	b.n	80175c8 <mbedtls_rsa_rsassa_pss_verify_ext+0x20>
 8017736:	bf00      	nop
 8017738:	ffffbf80 	.word	0xffffbf80
 801773c:	ffffbc80 	.word	0xffffbc80
 8017740:	ffffbf00 	.word	0xffffbf00

08017744 <mbedtls_rsa_rsassa_pss_verify>:
                           int mode,
                           mbedtls_md_type_t md_alg,
                           unsigned int hashlen,
                           const unsigned char *hash,
                           const unsigned char *sig )
{
 8017744:	b570      	push	{r4, r5, r6, lr}
    mbedtls_md_type_t mgf1_hash_id = ( ctx->hash_id != MBEDTLS_MD_NONE )
 8017746:	f8d0 40a8 	ldr.w	r4, [r0, #168]	; 0xa8
{
 801774a:	b086      	sub	sp, #24
 801774c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
                             ? (mbedtls_md_type_t) ctx->hash_id
                             : md_alg;
 8017750:	b17c      	cbz	r4, 8017772 <mbedtls_rsa_rsassa_pss_verify+0x2e>
 8017752:	b2e4      	uxtb	r4, r4

    return( mbedtls_rsa_rsassa_pss_verify_ext( ctx, f_rng, p_rng, mode,
 8017754:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017756:	9605      	str	r6, [sp, #20]
 8017758:	f04f 36ff 	mov.w	r6, #4294967295
 801775c:	e9cd 4603 	strd	r4, r6, [sp, #12]
 8017760:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017762:	9402      	str	r4, [sp, #8]
 8017764:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017766:	e9cd 5400 	strd	r5, r4, [sp]
 801776a:	f7ff ff1d 	bl	80175a8 <mbedtls_rsa_rsassa_pss_verify_ext>
                                       md_alg, hashlen, hash,
                                       mgf1_hash_id, MBEDTLS_RSA_SALT_LEN_ANY,
                                       sig ) );

}
 801776e:	b006      	add	sp, #24
 8017770:	bd70      	pop	{r4, r5, r6, pc}
                             : md_alg;
 8017772:	462c      	mov	r4, r5
 8017774:	e7ee      	b.n	8017754 <mbedtls_rsa_rsassa_pss_verify+0x10>
	...

08017778 <mbedtls_rsa_rsassa_pkcs1_v15_verify>:
                                 int mode,
                                 mbedtls_md_type_t md_alg,
                                 unsigned int hashlen,
                                 const unsigned char *hash,
                                 const unsigned char *sig )
{
 8017778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801777c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
    mbedtls_md_type_t msg_md_alg;
    const mbedtls_md_info_t *md_info;
    mbedtls_asn1_buf oid;
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];

    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017780:	2b01      	cmp	r3, #1
{
 8017782:	f89d 5440 	ldrb.w	r5, [sp, #1088]	; 0x440
 8017786:	f8dd 7444 	ldr.w	r7, [sp, #1092]	; 0x444
 801778a:	f8dd 6448 	ldr.w	r6, [sp, #1096]	; 0x448
 801778e:	f8dd c44c 	ldr.w	ip, [sp, #1100]	; 0x44c
    if( mode == MBEDTLS_RSA_PRIVATE && ctx->padding != MBEDTLS_RSA_PKCS_V15 )
 8017792:	d107      	bne.n	80177a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x2c>
 8017794:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 8017798:	b124      	cbz	r4, 80177a4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x2c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
 801779a:	485b      	ldr	r0, [pc, #364]	; (8017908 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x190>)

    if( p != end )
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );

    return( 0 );
}
 801779c:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
 80177a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    siglen = ctx->len;
 80177a4:	f8d0 8004 	ldr.w	r8, [r0, #4]
    if( siglen < 16 || siglen > sizeof( buf ) )
 80177a8:	f1a8 0410 	sub.w	r4, r8, #16
 80177ac:	f5b4 7f7c 	cmp.w	r4, #1008	; 0x3f0
 80177b0:	d8f3      	bhi.n	801779a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
    ret = ( mode == MBEDTLS_RSA_PUBLIC )
 80177b2:	ac08      	add	r4, sp, #32
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80177b4:	b94b      	cbnz	r3, 80177ca <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x52>
          ? mbedtls_rsa_public(  ctx, sig, buf )
 80177b6:	4622      	mov	r2, r4
 80177b8:	4661      	mov	r1, ip
 80177ba:	f7ff f8f7 	bl	80169ac <mbedtls_rsa_public>
    if( ret != 0 )
 80177be:	2800      	cmp	r0, #0
 80177c0:	d1ec      	bne.n	801779c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 80177c2:	7823      	ldrb	r3, [r4, #0]
 80177c4:	b133      	cbz	r3, 80177d4 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x5c>
        return( MBEDTLS_ERR_RSA_INVALID_PADDING );
 80177c6:	4851      	ldr	r0, [pc, #324]	; (801790c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x194>)
 80177c8:	e7e8      	b.n	801779c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
          : mbedtls_rsa_private( ctx, f_rng, p_rng, sig, buf );
 80177ca:	9400      	str	r4, [sp, #0]
 80177cc:	4663      	mov	r3, ip
 80177ce:	f7ff f925 	bl	8016a1c <mbedtls_rsa_private>
 80177d2:	e7f4      	b.n	80177be <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x46>
    if( *p++ != 0 || *p++ != MBEDTLS_RSA_SIGN )
 80177d4:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80177d8:	9304      	str	r3, [sp, #16]
 80177da:	7863      	ldrb	r3, [r4, #1]
 80177dc:	2b01      	cmp	r3, #1
 80177de:	d1f2      	bne.n	80177c6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 80177e0:	f108 33ff 	add.w	r3, r8, #4294967295
 80177e4:	4423      	add	r3, r4
    while( *p != 0 )
 80177e6:	9804      	ldr	r0, [sp, #16]
 80177e8:	7802      	ldrb	r2, [r0, #0]
 80177ea:	b98a      	cbnz	r2, 8017810 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x98>
    p++; /* skip 00 byte */
 80177ec:	3001      	adds	r0, #1
    if( p - buf < 11 )
 80177ee:	1b04      	subs	r4, r0, r4
 80177f0:	2c0a      	cmp	r4, #10
    p++; /* skip 00 byte */
 80177f2:	9004      	str	r0, [sp, #16]
    if( p - buf < 11 )
 80177f4:	dde7      	ble.n	80177c6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
    len = siglen - ( p - buf );
 80177f6:	eba8 0404 	sub.w	r4, r8, r4
    if( len == hashlen && md_alg == MBEDTLS_MD_NONE )
 80177fa:	42bc      	cmp	r4, r7
 80177fc:	d10f      	bne.n	801781e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa6>
 80177fe:	b975      	cbnz	r5, 801781e <mbedtls_rsa_rsassa_pkcs1_v15_verify+0xa6>
        if( memcmp( p, hash, hashlen ) == 0 )
 8017800:	463a      	mov	r2, r7
 8017802:	4631      	mov	r1, r6
 8017804:	f00a fde2 	bl	80223cc <memcmp>
 8017808:	2800      	cmp	r0, #0
 801780a:	d0c7      	beq.n	801779c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
        return( MBEDTLS_ERR_RSA_VERIFY_FAILED );
 801780c:	4840      	ldr	r0, [pc, #256]	; (8017910 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x198>)
 801780e:	e7c5      	b.n	801779c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
        if( p >= buf + siglen - 1 || *p != 0xFF )
 8017810:	4298      	cmp	r0, r3
 8017812:	d2d8      	bcs.n	80177c6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
 8017814:	2aff      	cmp	r2, #255	; 0xff
 8017816:	d1d6      	bne.n	80177c6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x4e>
        p++;
 8017818:	3001      	adds	r0, #1
 801781a:	9004      	str	r0, [sp, #16]
 801781c:	e7e3      	b.n	80177e6 <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x6e>
    md_info = mbedtls_md_info_from_type( md_alg );
 801781e:	4628      	mov	r0, r5
 8017820:	f7fd f840 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8017824:	2800      	cmp	r0, #0
 8017826:	d0b8      	beq.n	801779a <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x22>
    hashlen = mbedtls_md_get_size( md_info );
 8017828:	f7fd f98c 	bl	8014b44 <mbedtls_md_get_size>
    end = p + len;
 801782c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017830:	eb09 0704 	add.w	r7, r9, r4
    hashlen = mbedtls_md_get_size( md_info );
 8017834:	4680      	mov	r8, r0
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 8017836:	2330      	movs	r3, #48	; 0x30
 8017838:	aa03      	add	r2, sp, #12
 801783a:	4639      	mov	r1, r7
 801783c:	a804      	add	r0, sp, #16
 801783e:	f7f6 fc5b 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8017842:	2800      	cmp	r0, #0
 8017844:	d1e2      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len + 2 != len )
 8017846:	f8dd a010 	ldr.w	sl, [sp, #16]
 801784a:	f109 0902 	add.w	r9, r9, #2
 801784e:	45ca      	cmp	sl, r9
 8017850:	d1dc      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8017852:	9b03      	ldr	r3, [sp, #12]
 8017854:	3302      	adds	r3, #2
 8017856:	42a3      	cmp	r3, r4
 8017858:	d1d8      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len,
 801785a:	2330      	movs	r3, #48	; 0x30
 801785c:	aa03      	add	r2, sp, #12
 801785e:	4639      	mov	r1, r7
 8017860:	a804      	add	r0, sp, #16
 8017862:	f7f6 fc49 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8017866:	2800      	cmp	r0, #0
 8017868:	d1d0      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len + 6 + hashlen != len )
 801786a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801786e:	f10a 0a02 	add.w	sl, sl, #2
 8017872:	45d1      	cmp	r9, sl
 8017874:	d1ca      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8017876:	9b03      	ldr	r3, [sp, #12]
 8017878:	3306      	adds	r3, #6
 801787a:	4443      	add	r3, r8
 801787c:	42a3      	cmp	r3, r4
 801787e:	d1c5      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8017880:	2306      	movs	r3, #6
 8017882:	aa06      	add	r2, sp, #24
 8017884:	4639      	mov	r1, r7
 8017886:	a804      	add	r0, sp, #16
 8017888:	f7f6 fc36 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801788c:	2800      	cmp	r0, #0
 801788e:	d1bd      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 )
 8017890:	9b04      	ldr	r3, [sp, #16]
 8017892:	f109 0902 	add.w	r9, r9, #2
 8017896:	454b      	cmp	r3, r9
 8017898:	d1b8      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    p += oid.len;
 801789a:	9a06      	ldr	r2, [sp, #24]
    oid.p = p;
 801789c:	9307      	str	r3, [sp, #28]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 801789e:	f10d 010b 	add.w	r1, sp, #11
    p += oid.len;
 80178a2:	4413      	add	r3, r2
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 80178a4:	a805      	add	r0, sp, #20
    p += oid.len;
 80178a6:	9304      	str	r3, [sp, #16]
    if( mbedtls_oid_get_md_alg( &oid, &msg_md_alg ) != 0 )
 80178a8:	f7fd fec4 	bl	8015634 <mbedtls_oid_get_md_alg>
 80178ac:	2800      	cmp	r0, #0
 80178ae:	d1ad      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( md_alg != msg_md_alg )
 80178b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80178b4:	42ab      	cmp	r3, r5
 80178b6:	d1a9      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 80178b8:	2305      	movs	r3, #5
 80178ba:	aa03      	add	r2, sp, #12
 80178bc:	4639      	mov	r1, r7
 80178be:	a804      	add	r0, sp, #16
    p0 = p;
 80178c0:	9c04      	ldr	r4, [sp, #16]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_NULL ) ) != 0 )
 80178c2:	f7f6 fc19 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80178c6:	2800      	cmp	r0, #0
 80178c8:	d1a0      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 )
 80178ca:	9d04      	ldr	r5, [sp, #16]
 80178cc:	3402      	adds	r4, #2
 80178ce:	42a5      	cmp	r5, r4
 80178d0:	d19c      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &asn1_len, MBEDTLS_ASN1_OCTET_STRING ) ) != 0 )
 80178d2:	2304      	movs	r3, #4
 80178d4:	aa03      	add	r2, sp, #12
 80178d6:	4639      	mov	r1, r7
 80178d8:	a804      	add	r0, sp, #16
 80178da:	f7f6 fc0d 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80178de:	2800      	cmp	r0, #0
 80178e0:	d194      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( p != p0 + 2 || asn1_len != hashlen )
 80178e2:	9c04      	ldr	r4, [sp, #16]
 80178e4:	3502      	adds	r5, #2
 80178e6:	42ac      	cmp	r4, r5
 80178e8:	d190      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 80178ea:	9b03      	ldr	r3, [sp, #12]
 80178ec:	4543      	cmp	r3, r8
 80178ee:	d18d      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    if( memcmp( p, hash, hashlen ) != 0 )
 80178f0:	4642      	mov	r2, r8
 80178f2:	4631      	mov	r1, r6
 80178f4:	4620      	mov	r0, r4
 80178f6:	f00a fd69 	bl	80223cc <memcmp>
 80178fa:	2800      	cmp	r0, #0
 80178fc:	d186      	bne.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
    p += hashlen;
 80178fe:	44a0      	add	r8, r4
    if( p != end )
 8017900:	4547      	cmp	r7, r8
 8017902:	f43f af4b 	beq.w	801779c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x24>
 8017906:	e781      	b.n	801780c <mbedtls_rsa_rsassa_pkcs1_v15_verify+0x94>
 8017908:	ffffbf80 	.word	0xffffbf80
 801790c:	ffffbf00 	.word	0xffffbf00
 8017910:	ffffbc80 	.word	0xffffbc80

08017914 <mbedtls_rsa_pkcs1_verify>:
                      int mode,
                      mbedtls_md_type_t md_alg,
                      unsigned int hashlen,
                      const unsigned char *hash,
                      const unsigned char *sig )
{
 8017914:	b430      	push	{r4, r5}
    switch( ctx->padding )
 8017916:	f8d0 50a4 	ldr.w	r5, [r0, #164]	; 0xa4
{
 801791a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    switch( ctx->padding )
 801791e:	b125      	cbz	r5, 801792a <mbedtls_rsa_pkcs1_verify+0x16>
 8017920:	2d01      	cmp	r5, #1
 8017922:	d006      	beq.n	8017932 <mbedtls_rsa_pkcs1_verify+0x1e>
#endif

        default:
            return( MBEDTLS_ERR_RSA_INVALID_PADDING );
    }
}
 8017924:	4805      	ldr	r0, [pc, #20]	; (801793c <mbedtls_rsa_pkcs1_verify+0x28>)
 8017926:	bc30      	pop	{r4, r5}
 8017928:	4770      	bx	lr
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 801792a:	9402      	str	r4, [sp, #8]
}
 801792c:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pkcs1_v15_verify( ctx, f_rng, p_rng, mode, md_alg,
 801792e:	f7ff bf23 	b.w	8017778 <mbedtls_rsa_rsassa_pkcs1_v15_verify>
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 8017932:	9402      	str	r4, [sp, #8]
}
 8017934:	bc30      	pop	{r4, r5}
            return mbedtls_rsa_rsassa_pss_verify( ctx, f_rng, p_rng, mode, md_alg,
 8017936:	f7ff bf05 	b.w	8017744 <mbedtls_rsa_rsassa_pss_verify>
 801793a:	bf00      	nop
 801793c:	ffffbf00 	.word	0xffffbf00

08017940 <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
 8017940:	b510      	push	{r4, lr}
 8017942:	4604      	mov	r4, r0
    mbedtls_mpi_free( &ctx->Vi ); mbedtls_mpi_free( &ctx->Vf );
 8017944:	308c      	adds	r0, #140	; 0x8c
 8017946:	f7f7 f819 	bl	800e97c <mbedtls_mpi_free>
 801794a:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801794e:	f7f7 f815 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RQ ); mbedtls_mpi_free( &ctx->RP ); mbedtls_mpi_free( &ctx->RN );
 8017952:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8017956:	f7f7 f811 	bl	800e97c <mbedtls_mpi_free>
 801795a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801795e:	f7f7 f80d 	bl	800e97c <mbedtls_mpi_free>
 8017962:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017966:	f7f7 f809 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP ); mbedtls_mpi_free( &ctx->DQ ); mbedtls_mpi_free( &ctx->DP );
 801796a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801796e:	f7f7 f805 	bl	800e97c <mbedtls_mpi_free>
 8017972:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017976:	f7f7 f801 	bl	800e97c <mbedtls_mpi_free>
 801797a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801797e:	f7f6 fffd 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  ); mbedtls_mpi_free( &ctx->P  ); mbedtls_mpi_free( &ctx->D );
 8017982:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8017986:	f7f6 fff9 	bl	800e97c <mbedtls_mpi_free>
 801798a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801798e:	f7f6 fff5 	bl	800e97c <mbedtls_mpi_free>
 8017992:	f104 0020 	add.w	r0, r4, #32
 8017996:	f7f6 fff1 	bl	800e97c <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 801799a:	f104 0014 	add.w	r0, r4, #20
 801799e:	f7f6 ffed 	bl	800e97c <mbedtls_mpi_free>
 80179a2:	f104 0008 	add.w	r0, r4, #8

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
 80179a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->E  ); mbedtls_mpi_free( &ctx->N  );
 80179aa:	f7f6 bfe7 	b.w	800e97c <mbedtls_mpi_free>

080179ae <mbedtls_sha1_init>:
}
#endif

void mbedtls_sha1_init( mbedtls_sha1_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha1_context ) );
 80179ae:	225c      	movs	r2, #92	; 0x5c
 80179b0:	2100      	movs	r1, #0
 80179b2:	f00a bd41 	b.w	8022438 <memset>

080179b6 <mbedtls_sha1_free>:
}

void mbedtls_sha1_free( mbedtls_sha1_context *ctx )
{
    if( ctx == NULL )
 80179b6:	b120      	cbz	r0, 80179c2 <mbedtls_sha1_free+0xc>
 80179b8:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80179bc:	2200      	movs	r2, #0
 80179be:	4298      	cmp	r0, r3
 80179c0:	d100      	bne.n	80179c4 <mbedtls_sha1_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha1_context ) );
}
 80179c2:	4770      	bx	lr
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
 80179c4:	f800 2b01 	strb.w	r2, [r0], #1
 80179c8:	e7f9      	b.n	80179be <mbedtls_sha1_free+0x8>

080179ca <mbedtls_sha1_clone>:

void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src )
{
 80179ca:	b508      	push	{r3, lr}
    *dst = *src;
 80179cc:	225c      	movs	r2, #92	; 0x5c
 80179ce:	f00a fd0b 	bl	80223e8 <memcpy>
}
 80179d2:	bd08      	pop	{r3, pc}

080179d4 <mbedtls_sha1_starts>:
/*
 * SHA-1 context setup
 */
void mbedtls_sha1_starts( mbedtls_sha1_context *ctx )
{
    ctx->total[0] = 0;
 80179d4:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 80179d6:	e9c0 3300 	strd	r3, r3, [r0]

    ctx->state[0] = 0x67452301;
 80179da:	4b09      	ldr	r3, [pc, #36]	; (8017a00 <mbedtls_sha1_starts+0x2c>)
 80179dc:	6083      	str	r3, [r0, #8]
    ctx->state[1] = 0xEFCDAB89;
 80179de:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80179e2:	60c3      	str	r3, [r0, #12]
    ctx->state[2] = 0x98BADCFE;
 80179e4:	f103 4329 	add.w	r3, r3, #2835349504	; 0xa9000000
 80179e8:	f5a3 1396 	sub.w	r3, r3, #1228800	; 0x12c000
 80179ec:	f6a3 638b 	subw	r3, r3, #3723	; 0xe8b
 80179f0:	6103      	str	r3, [r0, #16]
    ctx->state[3] = 0x10325476;
 80179f2:	f1a3 3388 	sub.w	r3, r3, #2290649224	; 0x88888888
 80179f6:	6143      	str	r3, [r0, #20]
    ctx->state[4] = 0xC3D2E1F0;
 80179f8:	4b02      	ldr	r3, [pc, #8]	; (8017a04 <mbedtls_sha1_starts+0x30>)
 80179fa:	6183      	str	r3, [r0, #24]
}
 80179fc:	4770      	bx	lr
 80179fe:	bf00      	nop
 8017a00:	67452301 	.word	0x67452301
 8017a04:	c3d2e1f0 	.word	0xc3d2e1f0

08017a08 <mbedtls_sha1_process>:

#if !defined(MBEDTLS_SHA1_PROCESS_ALT)
void mbedtls_sha1_process( mbedtls_sha1_context *ctx, const unsigned char data[64] )
{
 8017a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a0c:	680d      	ldr	r5, [r1, #0]
 8017a0e:	684a      	ldr	r2, [r1, #4]
 8017a10:	698f      	ldr	r7, [r1, #24]
 8017a12:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8017a14:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8017a18:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8017a1c:	68ce      	ldr	r6, [r1, #12]
 8017a1e:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8017a22:	b099      	sub	sp, #100	; 0x64
 8017a24:	ba2b      	rev	r3, r5
 8017a26:	9306      	str	r3, [sp, #24]
 8017a28:	ba13      	rev	r3, r2
 8017a2a:	9307      	str	r3, [sp, #28]
 8017a2c:	694b      	ldr	r3, [r1, #20]
 8017a2e:	9000      	str	r0, [sp, #0]
    uint32_t temp, W[16], A, B, C, D, E;

    GET_UINT32_BE( W[ 0], data,  0 );
    GET_UINT32_BE( W[ 1], data,  4 );
    GET_UINT32_BE( W[ 2], data,  8 );
 8017a30:	ba1b      	rev	r3, r3
 8017a32:	9309      	str	r3, [sp, #36]	; 0x24
 8017a34:	ba3b      	rev	r3, r7
 8017a36:	9310      	str	r3, [sp, #64]	; 0x40
 8017a38:	69cb      	ldr	r3, [r1, #28]
 8017a3a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8017a3c:	6a0a      	ldr	r2, [r1, #32]
 8017a3e:	ba1b      	rev	r3, r3
 8017a40:	9311      	str	r3, [sp, #68]	; 0x44
 8017a42:	ba03      	rev	r3, r0
 8017a44:	930a      	str	r3, [sp, #40]	; 0x28
 8017a46:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8017a48:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 8017a4a:	ba1b      	rev	r3, r3
 8017a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a4e:	ba23      	rev	r3, r4
 8017a50:	930c      	str	r3, [sp, #48]	; 0x30
 8017a52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8017a54:	ba1b      	rev	r3, r3
 8017a56:	930d      	str	r3, [sp, #52]	; 0x34
 8017a58:	fa9e f38e 	rev.w	r3, lr
 8017a5c:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
 8017a60:	9302      	str	r3, [sp, #8]
 8017a62:	fa9e f38e 	rev.w	r3, lr
 8017a66:	9303      	str	r3, [sp, #12]
 8017a68:	ba03      	rev	r3, r0
 8017a6a:	9304      	str	r3, [sp, #16]
#define P(a,b,c,d,e,x)                                  \
{                                                       \
    e += S(a,5) + F(b,c,d) + K + x; b = S(b,30);        \
}

    A = ctx->state[0];
 8017a6c:	9b00      	ldr	r3, [sp, #0]
 8017a6e:	689b      	ldr	r3, [r3, #8]
 8017a70:	930e      	str	r3, [sp, #56]	; 0x38
    B = ctx->state[1];
 8017a72:	9b00      	ldr	r3, [sp, #0]
 8017a74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017a76:	68db      	ldr	r3, [r3, #12]
 8017a78:	9301      	str	r3, [sp, #4]
    C = ctx->state[2];
 8017a7a:	9b00      	ldr	r3, [sp, #0]
#define F(x,y,z) (z ^ (x & (y ^ z)))
#define K 0x5A827999

    P( A, B, C, D, E, W[0]  );
    P( E, A, B, C, D, W[1]  );
    P( D, E, A, B, C, W[2]  );
 8017a7c:	9801      	ldr	r0, [sp, #4]
    C = ctx->state[2];
 8017a7e:	691b      	ldr	r3, [r3, #16]
 8017a80:	9305      	str	r3, [sp, #20]
    D = ctx->state[3];
 8017a82:	9b00      	ldr	r3, [sp, #0]
 8017a84:	9f01      	ldr	r7, [sp, #4]
 8017a86:	695b      	ldr	r3, [r3, #20]
 8017a88:	930f      	str	r3, [sp, #60]	; 0x3c
    E = ctx->state[4];
 8017a8a:	9b00      	ldr	r3, [sp, #0]
 8017a8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017a8e:	699b      	ldr	r3, [r3, #24]
 8017a90:	9317      	str	r3, [sp, #92]	; 0x5c
 8017a92:	fa92 f982 	rev.w	r9, r2
    P( A, B, C, D, E, W[0]  );
 8017a96:	9b05      	ldr	r3, [sp, #20]
 8017a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017a9a:	ea83 0c02 	eor.w	ip, r3, r2
 8017a9e:	9b01      	ldr	r3, [sp, #4]
 8017aa0:	ea0c 0c03 	and.w	ip, ip, r3
 8017aa4:	ea8c 0c02 	eor.w	ip, ip, r2
 8017aa8:	4bde      	ldr	r3, [pc, #888]	; (8017e24 <mbedtls_sha1_process+0x41c>)
 8017aaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017aac:	441a      	add	r2, r3
 8017aae:	eb02 62f1 	add.w	r2, r2, r1, ror #27
 8017ab2:	4494      	add	ip, r2
 8017ab4:	9a06      	ldr	r2, [sp, #24]
    P( E, A, B, C, D, W[1]  );
 8017ab6:	9901      	ldr	r1, [sp, #4]
    P( A, B, C, D, E, W[0]  );
 8017ab8:	4494      	add	ip, r2
    P( E, A, B, C, D, W[1]  );
 8017aba:	9a05      	ldr	r2, [sp, #20]
 8017abc:	ea82 02b1 	eor.w	r2, r2, r1, ror #2
 8017ac0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017ac2:	400a      	ands	r2, r1
 8017ac4:	9905      	ldr	r1, [sp, #20]
 8017ac6:	404a      	eors	r2, r1
 8017ac8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017aca:	4419      	add	r1, r3
 8017acc:	440a      	add	r2, r1
 8017ace:	9907      	ldr	r1, [sp, #28]
 8017ad0:	440a      	add	r2, r1
 8017ad2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017ad4:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, W[2]  );
 8017ad8:	ea81 04b0 	eor.w	r4, r1, r0, ror #2
 8017adc:	ea04 040c 	and.w	r4, r4, ip
 8017ae0:	ea84 04b0 	eor.w	r4, r4, r0, ror #2
 8017ae4:	9805      	ldr	r0, [sp, #20]
 8017ae6:	fa9a fa8a 	rev.w	sl, sl
    GET_UINT32_BE( W[ 3], data, 12 );
 8017aea:	4418      	add	r0, r3
 8017aec:	4450      	add	r0, sl
    P( E, A, B, C, D, W[1]  );
 8017aee:	eb02 62fc 	add.w	r2, r2, ip, ror #27
 8017af2:	4404      	add	r4, r0
    P( C, D, E, A, B, W[3]  );
 8017af4:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
 8017af8:	ba36      	rev	r6, r6
 8017afa:	4010      	ands	r0, r2
 8017afc:	eb03 07b7 	add.w	r7, r3, r7, ror #2
    P( D, E, A, B, C, W[2]  );
 8017b00:	eb04 64f2 	add.w	r4, r4, r2, ror #27
 8017b04:	4437      	add	r7, r6
    P( C, D, E, A, B, W[3]  );
 8017b06:	ea4f 02b2 	mov.w	r2, r2, ror #2
 8017b0a:	4048      	eors	r0, r1
 8017b0c:	4438      	add	r0, r7
    P( B, C, D, E, A, W[4]  );
 8017b0e:	ea82 07bc 	eor.w	r7, r2, ip, ror #2
 8017b12:	fa98 f888 	rev.w	r8, r8
 8017b16:	4027      	ands	r7, r4
 8017b18:	4419      	add	r1, r3
 8017b1a:	4441      	add	r1, r8
 8017b1c:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
    P( C, D, E, A, B, W[3]  );
 8017b20:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, W[4]  );
 8017b24:	440f      	add	r7, r1
    P( A, B, C, D, E, W[5]  );
 8017b26:	ea82 01b4 	eor.w	r1, r2, r4, ror #2
 8017b2a:	eb05 0e03 	add.w	lr, r5, r3
 8017b2e:	4001      	ands	r1, r0
    P( B, C, D, E, A, W[4]  );
 8017b30:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( A, B, C, D, E, W[5]  );
 8017b34:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8017b36:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017b3a:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
 8017b3e:	4051      	eors	r1, r2
 8017b40:	4461      	add	r1, ip
    P( E, A, B, C, D, W[6]  );
 8017b42:	ea80 0cb4 	eor.w	ip, r0, r4, ror #2
 8017b46:	eb05 0e03 	add.w	lr, r5, r3
 8017b4a:	ea0c 0c07 	and.w	ip, ip, r7
 8017b4e:	4472      	add	r2, lr
 8017b50:	ea8c 0cb4 	eor.w	ip, ip, r4, ror #2
 8017b54:	4494      	add	ip, r2
 8017b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
    P( A, B, C, D, E, W[5]  );
 8017b58:	eb01 61f7 	add.w	r1, r1, r7, ror #27
    P( D, E, A, B, C, W[7]  );
 8017b5c:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
    P( E, A, B, C, D, W[6]  );
 8017b60:	eb0c 6cf1 	add.w	ip, ip, r1, ror #27
    P( D, E, A, B, C, W[7]  );
 8017b64:	441a      	add	r2, r3
 8017b66:	ea0e 0e01 	and.w	lr, lr, r1
 8017b6a:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8017b6e:	eb02 04b4 	add.w	r4, r2, r4, ror #2
 8017b72:	ea8e 0e00 	eor.w	lr, lr, r0
    P( C, D, E, A, B, W[8]  );
 8017b76:	ea81 02b7 	eor.w	r2, r1, r7, ror #2
 8017b7a:	44a6      	add	lr, r4
 8017b7c:	ea02 020c 	and.w	r2, r2, ip
 8017b80:	eb09 0403 	add.w	r4, r9, r3
 8017b84:	4420      	add	r0, r4
 8017b86:	ea82 02b7 	eor.w	r2, r2, r7, ror #2
 8017b8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    P( D, E, A, B, C, W[7]  );
 8017b8c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, W[8]  );
 8017b90:	4402      	add	r2, r0
    P( B, C, D, E, A, W[9]  );
 8017b92:	ea81 00bc 	eor.w	r0, r1, ip, ror #2
 8017b96:	441c      	add	r4, r3
 8017b98:	ea00 000e 	and.w	r0, r0, lr
    P( C, D, E, A, B, W[8]  );
 8017b9c:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( B, C, D, E, A, W[9]  );
 8017ba0:	eb04 07b7 	add.w	r7, r4, r7, ror #2
 8017ba4:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017ba8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017baa:	4048      	eors	r0, r1
 8017bac:	4438      	add	r0, r7
    P( A, B, C, D, E, W[10] );
 8017bae:	ea8e 07bc 	eor.w	r7, lr, ip, ror #2
 8017bb2:	441c      	add	r4, r3
 8017bb4:	4017      	ands	r7, r2
 8017bb6:	4421      	add	r1, r4
 8017bb8:	ea87 07bc 	eor.w	r7, r7, ip, ror #2
 8017bbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    P( B, C, D, E, A, W[9]  );
 8017bbe:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, W[10] );
 8017bc2:	440f      	add	r7, r1
    P( E, A, B, C, D, W[11] );
 8017bc4:	ea8e 01b2 	eor.w	r1, lr, r2, ror #2
 8017bc8:	441c      	add	r4, r3
 8017bca:	4001      	ands	r1, r0
 8017bcc:	ea81 010e 	eor.w	r1, r1, lr
 8017bd0:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
    P( A, B, C, D, E, W[10] );
 8017bd4:	eb07 67f0 	add.w	r7, r7, r0, ror #27
    P( E, A, B, C, D, W[11] );
 8017bd8:	448c      	add	ip, r1
 8017bda:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017bde:	990d      	ldr	r1, [sp, #52]	; 0x34
    P( D, E, A, B, C, W[12] );
 8017be0:	ea80 04b2 	eor.w	r4, r0, r2, ror #2
 8017be4:	4419      	add	r1, r3
 8017be6:	403c      	ands	r4, r7
 8017be8:	448e      	add	lr, r1
 8017bea:	ea84 04b2 	eor.w	r4, r4, r2, ror #2
 8017bee:	9902      	ldr	r1, [sp, #8]
    P( E, A, B, C, D, W[11] );
 8017bf0:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( D, E, A, B, C, W[12] );
 8017bf4:	4474      	add	r4, lr
    P( C, D, E, A, B, W[13] );
 8017bf6:	ea80 0eb7 	eor.w	lr, r0, r7, ror #2
 8017bfa:	4419      	add	r1, r3
 8017bfc:	ea0e 0e0c 	and.w	lr, lr, ip
 8017c00:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 8017c04:	ea8e 0e00 	eor.w	lr, lr, r0
 8017c08:	4496      	add	lr, r2
 8017c0a:	9a03      	ldr	r2, [sp, #12]
 8017c0c:	441a      	add	r2, r3
    P( D, E, A, B, C, W[12] );
 8017c0e:	eb04 64fc 	add.w	r4, r4, ip, ror #27
    P( C, D, E, A, B, W[13] );
 8017c12:	4410      	add	r0, r2
 8017c14:	ea4f 0cbc 	mov.w	ip, ip, ror #2
 8017c18:	9a04      	ldr	r2, [sp, #16]
    P( B, C, D, E, A, W[14] );
 8017c1a:	ea8c 0bb7 	eor.w	fp, ip, r7, ror #2
 8017c1e:	441a      	add	r2, r3
 8017c20:	ea0b 0b04 	and.w	fp, fp, r4
 8017c24:	ea8b 0bb7 	eor.w	fp, fp, r7, ror #2
 8017c28:	eb02 07b7 	add.w	r7, r2, r7, ror #2
    P( A, B, C, D, E, W[15] );
    P( E, A, B, C, D, R(16) );
 8017c2c:	9a06      	ldr	r2, [sp, #24]
 8017c2e:	ea82 050a 	eor.w	r5, r2, sl
 8017c32:	9a02      	ldr	r2, [sp, #8]
 8017c34:	ea85 0509 	eor.w	r5, r5, r9
    P( C, D, E, A, B, W[13] );
 8017c38:	eb0e 6ef4 	add.w	lr, lr, r4, ror #27
    P( A, B, C, D, E, W[15] );
 8017c3c:	ea8c 01b4 	eor.w	r1, ip, r4, ror #2
    P( E, A, B, C, D, R(16) );
 8017c40:	406a      	eors	r2, r5
 8017c42:	9206      	str	r2, [sp, #24]
    P( A, B, C, D, E, W[15] );
 8017c44:	ea01 010e 	and.w	r1, r1, lr
 8017c48:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017c4c:	ea81 010c 	eor.w	r1, r1, ip
 8017c50:	4494      	add	ip, r2
    P( D, E, A, B, C, R(17) );
 8017c52:	9a07      	ldr	r2, [sp, #28]
 8017c54:	4483      	add	fp, r0
 8017c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017c58:	4072      	eors	r2, r6
 8017c5a:	4042      	eors	r2, r0
 8017c5c:	9803      	ldr	r0, [sp, #12]
    P( B, C, D, E, A, W[14] );
 8017c5e:	eb0b 6bfe 	add.w	fp, fp, lr, ror #27
    P( A, B, C, D, E, W[15] );
 8017c62:	ea4f 0ebe 	mov.w	lr, lr, ror #2
    P( D, E, A, B, C, R(17) );
 8017c66:	4042      	eors	r2, r0
 8017c68:	4439      	add	r1, r7
    P( E, A, B, C, D, R(16) );
 8017c6a:	ea8e 07b4 	eor.w	r7, lr, r4, ror #2
    P( D, E, A, B, C, R(17) );
 8017c6e:	9207      	str	r2, [sp, #28]
    P( E, A, B, C, D, R(16) );
 8017c70:	ea07 070b 	and.w	r7, r7, fp
 8017c74:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8017c78:	ea87 07b4 	eor.w	r7, r7, r4, ror #2
 8017c7c:	eb02 04b4 	add.w	r4, r2, r4, ror #2
    P( C, D, E, A, B, R(18) );
 8017c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017c82:	ea8a 0a08 	eor.w	sl, sl, r8
 8017c86:	ea8a 0a02 	eor.w	sl, sl, r2
 8017c8a:	9a04      	ldr	r2, [sp, #16]
    P( A, B, C, D, E, W[15] );
 8017c8c:	eb01 61fb 	add.w	r1, r1, fp, ror #27
    P( C, D, E, A, B, R(18) );
 8017c90:	ea8a 0a02 	eor.w	sl, sl, r2
 8017c94:	4467      	add	r7, ip
    P( D, E, A, B, C, R(17) );
 8017c96:	ea8e 0cbb 	eor.w	ip, lr, fp, ror #2
 8017c9a:	eb03 70fa 	add.w	r0, r3, sl, ror #31
 8017c9e:	ea0c 0c01 	and.w	ip, ip, r1
 8017ca2:	ea8c 0c0e 	eor.w	ip, ip, lr
 8017ca6:	4486      	add	lr, r0
    P( B, C, D, E, A, R(19) );
 8017ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017caa:	44a4      	add	ip, r4
 8017cac:	ea86 0400 	eor.w	r4, r6, r0
 8017cb0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017cb2:	4044      	eors	r4, r0
 8017cb4:	9806      	ldr	r0, [sp, #24]
 8017cb6:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( E, A, B, C, D, R(16) );
 8017cba:	eb07 67f1 	add.w	r7, r7, r1, ror #27
    P( B, C, D, E, A, R(19) );
 8017cbe:	ea4f 70f4 	mov.w	r0, r4, ror #31
    P( D, E, A, B, C, R(17) );
 8017cc2:	ea4f 01b1 	mov.w	r1, r1, ror #2
 8017cc6:	eb0c 6cf7 	add.w	ip, ip, r7, ror #27
    P( B, C, D, E, A, R(19) );
 8017cca:	9013      	str	r0, [sp, #76]	; 0x4c
 8017ccc:	ea81 00b7 	eor.w	r0, r1, r7, ror #2
 8017cd0:	ea00 000c 	and.w	r0, r0, ip
 8017cd4:	eb03 73f4 	add.w	r3, r3, r4, ror #31
 8017cd8:	eb03 03bb 	add.w	r3, r3, fp, ror #2
 8017cdc:	4048      	eors	r0, r1
 8017cde:	4418      	add	r0, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0x6ED9EBA1

    P( A, B, C, D, E, R(20) );
 8017ce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ce2:	ea88 0803 	eor.w	r8, r8, r3
 8017ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    P( C, D, E, A, B, R(18) );
 8017ce8:	ea4f 72fa 	mov.w	r2, sl, ror #31
    P( A, B, C, D, E, R(20) );
 8017cec:	ea88 0803 	eor.w	r8, r8, r3
 8017cf0:	9b07      	ldr	r3, [sp, #28]
    P( C, D, E, A, B, R(18) );
 8017cf2:	9212      	str	r2, [sp, #72]	; 0x48
 8017cf4:	ea81 02bb 	eor.w	r2, r1, fp, ror #2
    P( A, B, C, D, E, R(20) );
 8017cf8:	ea88 73f3 	eor.w	r3, r8, r3, ror #31
    P( C, D, E, A, B, R(18) );
 8017cfc:	403a      	ands	r2, r7
    P( A, B, C, D, E, R(20) );
 8017cfe:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(18) );
 8017d00:	ea82 02bb 	eor.w	r2, r2, fp, ror #2
 8017d04:	4b48      	ldr	r3, [pc, #288]	; (8017e28 <mbedtls_sha1_process+0x420>)
 8017d06:	9e08      	ldr	r6, [sp, #32]
 8017d08:	4472      	add	r2, lr
 8017d0a:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( B, C, D, E, A, R(19) );
 8017d0e:	ea4f 0cbc 	mov.w	ip, ip, ror #2
    P( A, B, C, D, E, R(20) );
 8017d12:	ea8c 05b7 	eor.w	r5, ip, r7, ror #2
 8017d16:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 8017d1a:	4431      	add	r1, r6
 8017d1c:	4055      	eors	r5, r2
    P( E, A, B, C, D, R(21) );
 8017d1e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017d20:	440d      	add	r5, r1
 8017d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d24:	4071      	eors	r1, r6
 8017d26:	9e02      	ldr	r6, [sp, #8]
 8017d28:	4071      	eors	r1, r6
 8017d2a:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
    P( B, C, D, E, A, R(19) );
 8017d2e:	eb00 60f2 	add.w	r0, r0, r2, ror #27
    P( A, B, C, D, E, R(20) );
 8017d32:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
    P( E, A, B, C, D, R(21) );
 8017d36:	ea8c 06b2 	eor.w	r6, ip, r2, ror #2
 8017d3a:	eb0e 07b7 	add.w	r7, lr, r7, ror #2
 8017d3e:	4046      	eors	r6, r0
 8017d40:	443e      	add	r6, r7
    P( D, E, A, B, C, R(22) );
 8017d42:	9f10      	ldr	r7, [sp, #64]	; 0x40
    P( E, A, B, C, D, R(21) );
 8017d44:	9109      	str	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
 8017d46:	9903      	ldr	r1, [sp, #12]
 8017d48:	ea87 0709 	eor.w	r7, r7, r9
 8017d4c:	404f      	eors	r7, r1
 8017d4e:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( A, B, C, D, E, R(20) );
 8017d52:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( D, E, A, B, C, R(22) );
 8017d56:	ea4f 71f7 	mov.w	r1, r7, ror #31
    P( E, A, B, C, D, R(21) );
 8017d5a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017d5e:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
    P( D, E, A, B, C, R(22) );
 8017d62:	ea80 0bb2 	eor.w	fp, r0, r2, ror #2
 8017d66:	9110      	str	r1, [sp, #64]	; 0x40
    P( C, D, E, A, B, R(23) );
 8017d68:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017d6a:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(22) );
 8017d6c:	ea8b 0b05 	eor.w	fp, fp, r5
 8017d70:	44e3      	add	fp, ip
    P( C, D, E, A, B, R(23) );
 8017d72:	468c      	mov	ip, r1
 8017d74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017d76:	ea8c 0801 	eor.w	r8, ip, r1
 8017d7a:	9904      	ldr	r1, [sp, #16]
 8017d7c:	ea88 0801 	eor.w	r8, r8, r1
 8017d80:	9908      	ldr	r1, [sp, #32]
 8017d82:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
    P( E, A, B, C, D, R(21) );
 8017d86:	eb06 66f5 	add.w	r6, r6, r5, ror #27
    P( D, E, A, B, C, R(22) );
 8017d8a:	eb03 7cf8 	add.w	ip, r3, r8, ror #31
    P( C, D, E, A, B, R(23) );
 8017d8e:	ea80 0eb5 	eor.w	lr, r0, r5, ror #2
 8017d92:	eb0c 02b2 	add.w	r2, ip, r2, ror #2
 8017d96:	ea8e 0e06 	eor.w	lr, lr, r6
 8017d9a:	ea4f 71f8 	mov.w	r1, r8, ror #31
 8017d9e:	4496      	add	lr, r2
    P( B, C, D, E, A, R(24) );
 8017da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P( C, D, E, A, B, R(23) );
 8017da2:	9111      	str	r1, [sp, #68]	; 0x44
    P( B, C, D, E, A, R(24) );
 8017da4:	9906      	ldr	r1, [sp, #24]
 8017da6:	ea89 0202 	eor.w	r2, r9, r2
 8017daa:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 8017dae:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(22) );
 8017db0:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( B, C, D, E, A, R(24) );
 8017db4:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
    P( C, D, E, A, B, R(23) );
 8017db8:	ea4f 06b6 	mov.w	r6, r6, ror #2
 8017dbc:	eb03 79f2 	add.w	r9, r3, r2, ror #31
    P( B, C, D, E, A, R(24) );
 8017dc0:	ea86 0cb5 	eor.w	ip, r6, r5, ror #2
 8017dc4:	4448      	add	r0, r9
 8017dc6:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( A, B, C, D, E, R(25) );
 8017dca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017dcc:	4484      	add	ip, r0
 8017dce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017dd0:	4048      	eors	r0, r1
 8017dd2:	9907      	ldr	r1, [sp, #28]
 8017dd4:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
 8017dd8:	ea80 71f7 	eor.w	r1, r0, r7, ror #31
    P( C, D, E, A, B, R(23) );
 8017ddc:	eb0e 6efb 	add.w	lr, lr, fp, ror #27
    P( B, C, D, E, A, R(24) );
 8017de0:	eb03 79f1 	add.w	r9, r3, r1, ror #31
    P( A, B, C, D, E, R(25) );
 8017de4:	ea86 00bb 	eor.w	r0, r6, fp, ror #2
 8017de8:	eb09 05b5 	add.w	r5, r9, r5, ror #2
 8017dec:	ea80 000e 	eor.w	r0, r0, lr
 8017df0:	910a      	str	r1, [sp, #40]	; 0x28
 8017df2:	4428      	add	r0, r5
    P( E, A, B, C, D, R(26) );
 8017df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017df6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8017df8:	404d      	eors	r5, r1
 8017dfa:	ea85 7afa 	eor.w	sl, r5, sl, ror #31
    P( B, C, D, E, A, R(24) );
 8017dfe:	eb0c 6cfe 	add.w	ip, ip, lr, ror #27
    P( E, A, B, C, D, R(26) );
 8017e02:	ea8a 7af8 	eor.w	sl, sl, r8, ror #31
    P( A, B, C, D, E, R(25) );
 8017e06:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017e0a:	eb03 79fa 	add.w	r9, r3, sl, ror #31
    P( E, A, B, C, D, R(26) );
 8017e0e:	ea8e 05bb 	eor.w	r5, lr, fp, ror #2
 8017e12:	ea4f 71fa 	mov.w	r1, sl, ror #31
 8017e16:	444e      	add	r6, r9
 8017e18:	ea85 050c 	eor.w	r5, r5, ip
 8017e1c:	9114      	str	r1, [sp, #80]	; 0x50
 8017e1e:	4435      	add	r5, r6
    P( D, E, A, B, C, R(27) );
 8017e20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017e22:	e003      	b.n	8017e2c <mbedtls_sha1_process+0x424>
 8017e24:	5a827999 	.word	0x5a827999
 8017e28:	6ed9eba1 	.word	0x6ed9eba1
 8017e2c:	9e02      	ldr	r6, [sp, #8]
 8017e2e:	ea81 0906 	eor.w	r9, r1, r6
 8017e32:	ea89 74f4 	eor.w	r4, r9, r4, ror #31
 8017e36:	ea84 74f2 	eor.w	r4, r4, r2, ror #31
    P( A, B, C, D, E, R(25) );
 8017e3a:	eb00 60fc 	add.w	r0, r0, ip, ror #27
    P( E, A, B, C, D, R(26) );
 8017e3e:	eb03 79f4 	add.w	r9, r3, r4, ror #31
    P( D, E, A, B, C, R(27) );
 8017e42:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
 8017e46:	ea4f 71f4 	mov.w	r1, r4, ror #31
 8017e4a:	4046      	eors	r6, r0
 8017e4c:	eb09 0bbb 	add.w	fp, r9, fp, ror #2
 8017e50:	9115      	str	r1, [sp, #84]	; 0x54
 8017e52:	44b3      	add	fp, r6
    P( C, D, E, A, B, R(28) );
 8017e54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017e56:	9e03      	ldr	r6, [sp, #12]
 8017e58:	404e      	eors	r6, r1
 8017e5a:	9908      	ldr	r1, [sp, #32]
 8017e5c:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 8017e60:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( E, A, B, C, D, R(26) );
 8017e62:	eb05 65f0 	add.w	r5, r5, r0, ror #27
    P( C, D, E, A, B, R(28) );
 8017e66:	ea86 71f1 	eor.w	r1, r6, r1, ror #31
    P( D, E, A, B, C, R(27) );
 8017e6a:	ea4f 00b0 	mov.w	r0, r0, ror #2
 8017e6e:	eb03 79f1 	add.w	r9, r3, r1, ror #31
    P( C, D, E, A, B, R(28) );
 8017e72:	910b      	str	r1, [sp, #44]	; 0x2c
 8017e74:	ea80 06bc 	eor.w	r6, r0, ip, ror #2
    P( B, C, D, E, A, R(29) );
 8017e78:	9902      	ldr	r1, [sp, #8]
 8017e7a:	44ce      	add	lr, r9
    P( C, D, E, A, B, R(28) );
 8017e7c:	406e      	eors	r6, r5
 8017e7e:	4476      	add	r6, lr
    P( B, C, D, E, A, R(29) );
 8017e80:	468e      	mov	lr, r1
 8017e82:	9904      	ldr	r1, [sp, #16]
 8017e84:	ea8e 0e01 	eor.w	lr, lr, r1
 8017e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e8a:	ea8e 7ef1 	eor.w	lr, lr, r1, ror #31
 8017e8e:	ea8e 71fa 	eor.w	r1, lr, sl, ror #31
    P( D, E, A, B, C, R(27) );
 8017e92:	eb0b 6bf5 	add.w	fp, fp, r5, ror #27
    P( C, D, E, A, B, R(28) );
 8017e96:	eb03 7ef1 	add.w	lr, r3, r1, ror #31
    P( B, C, D, E, A, R(29) );
 8017e9a:	9102      	str	r1, [sp, #8]
 8017e9c:	ea80 09b5 	eor.w	r9, r0, r5, ror #2
    P( A, B, C, D, E, R(30) );
 8017ea0:	9903      	ldr	r1, [sp, #12]
 8017ea2:	eb0e 0cbc 	add.w	ip, lr, ip, ror #2
    P( B, C, D, E, A, R(29) );
 8017ea6:	ea89 090b 	eor.w	r9, r9, fp
 8017eaa:	44e1      	add	r9, ip
    P( A, B, C, D, E, R(30) );
 8017eac:	468c      	mov	ip, r1
 8017eae:	9906      	ldr	r1, [sp, #24]
 8017eb0:	ea8c 7ef1 	eor.w	lr, ip, r1, ror #31
 8017eb4:	ea8e 77f7 	eor.w	r7, lr, r7, ror #31
    P( C, D, E, A, B, R(28) );
 8017eb8:	eb06 66fb 	add.w	r6, r6, fp, ror #27
    P( A, B, C, D, E, R(30) );
 8017ebc:	ea87 77f4 	eor.w	r7, r7, r4, ror #31
    P( B, C, D, E, A, R(29) );
 8017ec0:	ea4f 0bbb 	mov.w	fp, fp, ror #2
 8017ec4:	eb03 7ef7 	add.w	lr, r3, r7, ror #31
    P( A, B, C, D, E, R(30) );
 8017ec8:	ea8b 0cb5 	eor.w	ip, fp, r5, ror #2
 8017ecc:	ea4f 71f7 	mov.w	r1, r7, ror #31
 8017ed0:	4470      	add	r0, lr
 8017ed2:	ea8c 0c06 	eor.w	ip, ip, r6
 8017ed6:	910d      	str	r1, [sp, #52]	; 0x34
 8017ed8:	4484      	add	ip, r0
    P( E, A, B, C, D, R(31) );
 8017eda:	9904      	ldr	r1, [sp, #16]
 8017edc:	9807      	ldr	r0, [sp, #28]
 8017ede:	ea81 70f0 	eor.w	r0, r1, r0, ror #31
 8017ee2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ee4:	ea80 70f8 	eor.w	r0, r0, r8, ror #31
 8017ee8:	ea80 71f1 	eor.w	r1, r0, r1, ror #31
 8017eec:	910c      	str	r1, [sp, #48]	; 0x30
 8017eee:	ea4f 71f1 	mov.w	r1, r1, ror #31
 8017ef2:	9116      	str	r1, [sp, #88]	; 0x58
 8017ef4:	990c      	ldr	r1, [sp, #48]	; 0x30
    P( D, E, A, B, C, R(32) );
    P( C, D, E, A, B, R(33) );
    P( B, C, D, E, A, R(34) );
    P( A, B, C, D, E, R(35) );
 8017ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
    P( B, C, D, E, A, R(29) );
 8017ef8:	eb09 69f6 	add.w	r9, r9, r6, ror #27
    P( A, B, C, D, E, R(30) );
 8017efc:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( E, A, B, C, D, R(31) );
 8017f00:	ea8b 0eb6 	eor.w	lr, fp, r6, ror #2
 8017f04:	eb08 05b5 	add.w	r5, r8, r5, ror #2
 8017f08:	ea8e 0e09 	eor.w	lr, lr, r9
    P( D, E, A, B, C, R(32) );
 8017f0c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f0e:	44ae      	add	lr, r5
 8017f10:	9d06      	ldr	r5, [sp, #24]
 8017f12:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
 8017f16:	9902      	ldr	r1, [sp, #8]
 8017f18:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 8017f1c:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
 8017f20:	9103      	str	r1, [sp, #12]
 8017f22:	eb03 78f1 	add.w	r8, r3, r1, ror #31
    P( C, D, E, A, B, R(33) );
 8017f26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017f28:	44c3      	add	fp, r8
 8017f2a:	4688      	mov	r8, r1
 8017f2c:	9907      	ldr	r1, [sp, #28]
 8017f2e:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
 8017f32:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( A, B, C, D, E, R(30) );
 8017f34:	eb0c 6cf9 	add.w	ip, ip, r9, ror #27
    P( E, A, B, C, D, R(31) );
 8017f38:	ea4f 09b9 	mov.w	r9, r9, ror #2
    P( D, E, A, B, C, R(32) );
 8017f3c:	ea89 05b6 	eor.w	r5, r9, r6, ror #2
    P( C, D, E, A, B, R(33) );
 8017f40:	ea88 78f1 	eor.w	r8, r8, r1, ror #31
 8017f44:	ea88 71f7 	eor.w	r1, r8, r7, ror #31
    P( D, E, A, B, C, R(32) );
 8017f48:	ea85 050c 	eor.w	r5, r5, ip
    P( E, A, B, C, D, R(31) );
 8017f4c:	eb0e 6efc 	add.w	lr, lr, ip, ror #27
    P( C, D, E, A, B, R(33) );
 8017f50:	ea89 08bc 	eor.w	r8, r9, ip, ror #2
 8017f54:	445d      	add	r5, fp
 8017f56:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 8017f5a:	eb0b 06b6 	add.w	r6, fp, r6, ror #2
 8017f5e:	ea88 080e 	eor.w	r8, r8, lr
 8017f62:	9104      	str	r1, [sp, #16]
 8017f64:	44b0      	add	r8, r6
    P( B, C, D, E, A, R(34) );
 8017f66:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017f68:	9e08      	ldr	r6, [sp, #32]
 8017f6a:	ea81 76f6 	eor.w	r6, r1, r6, ror #31
 8017f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017f70:	ea86 7afa 	eor.w	sl, r6, sl, ror #31
 8017f74:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
    P( D, E, A, B, C, R(32) );
 8017f78:	eb05 65fe 	add.w	r5, r5, lr, ror #27
    P( B, C, D, E, A, R(34) );
 8017f7c:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(33) );
 8017f80:	ea4f 0ebe 	mov.w	lr, lr, ror #2
 8017f84:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
    P( B, C, D, E, A, R(34) );
 8017f88:	9112      	str	r1, [sp, #72]	; 0x48
 8017f8a:	ea8e 06bc 	eor.w	r6, lr, ip, ror #2
    P( A, B, C, D, E, R(35) );
 8017f8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017f90:	44d9      	add	r9, fp
    P( B, C, D, E, A, R(34) );
 8017f92:	406e      	eors	r6, r5
 8017f94:	444e      	add	r6, r9
    P( A, B, C, D, E, R(35) );
 8017f96:	ea81 79f0 	eor.w	r9, r1, r0, ror #31
 8017f9a:	9903      	ldr	r1, [sp, #12]
 8017f9c:	ea89 79f4 	eor.w	r9, r9, r4, ror #31
 8017fa0:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 8017fa4:	ea4f 71f9 	mov.w	r1, r9, ror #31
    P( C, D, E, A, B, R(33) );
 8017fa8:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( B, C, D, E, A, R(34) );
 8017fac:	eb03 7bf9 	add.w	fp, r3, r9, ror #31
    P( A, B, C, D, E, R(35) );
 8017fb0:	9113      	str	r1, [sp, #76]	; 0x4c
 8017fb2:	ea8e 04b5 	eor.w	r4, lr, r5, ror #2
    P( E, A, B, C, D, R(36) );
 8017fb6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017fb8:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
    P( A, B, C, D, E, R(35) );
 8017fbc:	ea84 0408 	eor.w	r4, r4, r8
 8017fc0:	4464      	add	r4, ip
    P( E, A, B, C, D, R(36) );
 8017fc2:	468c      	mov	ip, r1
 8017fc4:	9908      	ldr	r1, [sp, #32]
 8017fc6:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
 8017fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017fcc:	ea8c 7cf1 	eor.w	ip, ip, r1, ror #31
 8017fd0:	9904      	ldr	r1, [sp, #16]
    P( B, C, D, E, A, R(34) );
 8017fd2:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( E, A, B, C, D, R(36) );
 8017fd6:	ea8c 71f1 	eor.w	r1, ip, r1, ror #31
    P( A, B, C, D, E, R(35) );
 8017fda:	ea4f 08b8 	mov.w	r8, r8, ror #2
 8017fde:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
    P( E, A, B, C, D, R(36) );
 8017fe2:	9106      	str	r1, [sp, #24]
 8017fe4:	ea88 0cb5 	eor.w	ip, r8, r5, ror #2
    P( D, E, A, B, C, R(37) );
 8017fe8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017fea:	44de      	add	lr, fp
    P( E, A, B, C, D, R(36) );
 8017fec:	ea8c 0c06 	eor.w	ip, ip, r6
 8017ff0:	44f4      	add	ip, lr
    P( D, E, A, B, C, R(37) );
 8017ff2:	ea81 7ef0 	eor.w	lr, r1, r0, ror #31
 8017ff6:	9902      	ldr	r1, [sp, #8]
 8017ff8:	ea8e 71f1 	eor.w	r1, lr, r1, ror #31
 8017ffc:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 8018000:	9107      	str	r1, [sp, #28]
 8018002:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 8018006:	eb01 05b5 	add.w	r5, r1, r5, ror #2
    P( C, D, E, A, B, R(38) );
 801800a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801800c:	ea81 7ef2 	eor.w	lr, r1, r2, ror #31
 8018010:	ea8e 7ef7 	eor.w	lr, lr, r7, ror #31
 8018014:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8018018:	ea4f 71fe 	mov.w	r1, lr, ror #31
 801801c:	9110      	str	r1, [sp, #64]	; 0x40
 801801e:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( B, C, D, E, A, R(39) );
 8018022:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    P( D, E, A, B, C, R(37) );
 8018024:	ea88 0bb6 	eor.w	fp, r8, r6, ror #2
 8018028:	4488      	add	r8, r1
    P( B, C, D, E, A, R(39) );
 801802a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801802c:	ea81 77f7 	eor.w	r7, r1, r7, ror #31
 8018030:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018032:	ea87 70f1 	eor.w	r0, r7, r1, ror #31
 8018036:	9906      	ldr	r1, [sp, #24]
#define F(x,y,z) ((x & y) | (z & (x | y)))
#define K 0x8F1BBCDC

    P( A, B, C, D, E, R(40) );
    P( E, A, B, C, D, R(41) );
    P( D, E, A, B, C, R(42) );
 8018038:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    P( A, B, C, D, E, R(35) );
 801803a:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( B, C, D, E, A, R(39) );
 801803e:	ea80 70f1 	eor.w	r0, r0, r1, ror #31
    P( D, E, A, B, C, R(37) );
 8018042:	ea8b 0b04 	eor.w	fp, fp, r4
    P( E, A, B, C, D, R(36) );
 8018046:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(39) );
 801804a:	ea4f 71f0 	mov.w	r1, r0, ror #31
    P( D, E, A, B, C, R(37) );
 801804e:	ea4f 04b4 	mov.w	r4, r4, ror #2
 8018052:	44ab      	add	fp, r5
 8018054:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( B, C, D, E, A, R(39) );
 8018058:	910c      	str	r1, [sp, #48]	; 0x30
 801805a:	eb03 73f0 	add.w	r3, r3, r0, ror #31
 801805e:	ea84 01bc 	eor.w	r1, r4, ip, ror #2
 8018062:	eb03 03b6 	add.w	r3, r3, r6, ror #2
 8018066:	ea81 010b 	eor.w	r1, r1, fp
 801806a:	4419      	add	r1, r3
    P( A, B, C, D, E, R(40) );
 801806c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801806e:	ea83 72f2 	eor.w	r2, r3, r2, ror #31
 8018072:	9b03      	ldr	r3, [sp, #12]
 8018074:	ea82 72f3 	eor.w	r2, r2, r3, ror #31
 8018078:	9b07      	ldr	r3, [sp, #28]
 801807a:	ea82 73f3 	eor.w	r3, r2, r3, ror #31
 801807e:	9308      	str	r3, [sp, #32]
    P( C, D, E, A, B, R(38) );
 8018080:	ea84 05b6 	eor.w	r5, r4, r6, ror #2
 8018084:	4bda      	ldr	r3, [pc, #872]	; (80183f0 <mbedtls_sha1_process+0x9e8>)
 8018086:	9a08      	ldr	r2, [sp, #32]
 8018088:	ea85 050c 	eor.w	r5, r5, ip
 801808c:	4445      	add	r5, r8
 801808e:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( B, C, D, E, A, R(39) );
 8018092:	eb03 76f2 	add.w	r6, r3, r2, ror #31
 8018096:	4434      	add	r4, r6
    P( A, B, C, D, E, R(40) );
 8018098:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
    P( B, C, D, E, A, R(39) );
 801809c:	eb01 61f5 	add.w	r1, r1, r5, ror #27
    P( A, B, C, D, E, R(40) );
 80180a0:	ea05 02bb 	and.w	r2, r5, fp, ror #2
 80180a4:	ea06 06bc 	and.w	r6, r6, ip, ror #2
 80180a8:	eb04 64f1 	add.w	r4, r4, r1, ror #27
 80180ac:	4316      	orrs	r6, r2
 80180ae:	4426      	add	r6, r4
    P( E, A, B, C, D, R(41) );
 80180b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80180b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80180b4:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 80180b8:	9c04      	ldr	r4, [sp, #16]
 80180ba:	ea82 72f4 	eor.w	r2, r2, r4, ror #31
 80180be:	ea82 72fe 	eor.w	r2, r2, lr, ror #31
 80180c2:	ea41 04b5 	orr.w	r4, r1, r5, ror #2
 80180c6:	9209      	str	r2, [sp, #36]	; 0x24
 80180c8:	ea04 02bb 	and.w	r2, r4, fp, ror #2
 80180cc:	ea01 04b5 	and.w	r4, r1, r5, ror #2
 80180d0:	4314      	orrs	r4, r2
 80180d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180d4:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 80180d8:	eb02 0cbc 	add.w	ip, r2, ip, ror #2
    P( D, E, A, B, C, R(42) );
 80180dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80180de:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 80180e2:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 80180e6:	ea8a 7af0 	eor.w	sl, sl, r0, ror #31
 80180ea:	ea4f 72fa 	mov.w	r2, sl, ror #31
 80180ee:	9211      	str	r2, [sp, #68]	; 0x44
 80180f0:	4464      	add	r4, ip
 80180f2:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( E, A, B, C, D, R(41) );
 80180f6:	eb04 64f6 	add.w	r4, r4, r6, ror #27
    P( D, E, A, B, C, R(42) );
 80180fa:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
 80180fe:	eb0b 62f4 	add.w	r2, fp, r4, ror #27
 8018102:	ea46 0bb1 	orr.w	fp, r6, r1, ror #2
 8018106:	ea06 07b1 	and.w	r7, r6, r1, ror #2
 801810a:	ea0b 0bb5 	and.w	fp, fp, r5, ror #2
 801810e:	ea4b 0b07 	orr.w	fp, fp, r7
 8018112:	4493      	add	fp, r2
    P( C, D, E, A, B, R(43) );
 8018114:	9f02      	ldr	r7, [sp, #8]
 8018116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8018118:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 801811c:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 8018120:	9a08      	ldr	r2, [sp, #32]
 8018122:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 8018126:	ea44 08b6 	orr.w	r8, r4, r6, ror #2
 801812a:	ea4f 72f9 	mov.w	r2, r9, ror #31
 801812e:	9214      	str	r2, [sp, #80]	; 0x50
 8018130:	ea08 02b1 	and.w	r2, r8, r1, ror #2
 8018134:	ea04 08b6 	and.w	r8, r4, r6, ror #2
 8018138:	ea42 0808 	orr.w	r8, r2, r8
 801813c:	eb03 72f9 	add.w	r2, r3, r9, ror #31
 8018140:	eb02 05b5 	add.w	r5, r2, r5, ror #2
 8018144:	44a8      	add	r8, r5
    P( B, C, D, E, A, R(44) );
 8018146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018148:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801814a:	ea82 75f5 	eor.w	r5, r2, r5, ror #31
 801814e:	9a06      	ldr	r2, [sp, #24]
 8018150:	ea85 75f2 	eor.w	r5, r5, r2, ror #31
 8018154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018156:	ea85 72f2 	eor.w	r2, r5, r2, ror #31
 801815a:	eb03 7cf2 	add.w	ip, r3, r2, ror #31
 801815e:	eb0c 01b1 	add.w	r1, ip, r1, ror #2
 8018162:	ea4b 0cb4 	orr.w	ip, fp, r4, ror #2
    P( C, D, E, A, B, R(43) );
 8018166:	eb08 68fb 	add.w	r8, r8, fp, ror #27
    P( B, C, D, E, A, R(44) );
 801816a:	ea0b 05b4 	and.w	r5, fp, r4, ror #2
 801816e:	ea0c 0cb6 	and.w	ip, ip, r6, ror #2
 8018172:	920a      	str	r2, [sp, #40]	; 0x28
 8018174:	eb01 61f8 	add.w	r1, r1, r8, ror #27
    P( A, B, C, D, E, R(45) );
 8018178:	9a16      	ldr	r2, [sp, #88]	; 0x58
    P( B, C, D, E, A, R(44) );
 801817a:	ea4c 0c05 	orr.w	ip, ip, r5
 801817e:	448c      	add	ip, r1
    P( A, B, C, D, E, R(45) );
 8018180:	9907      	ldr	r1, [sp, #28]
    P( E, A, B, C, D, R(46) );
 8018182:	9d03      	ldr	r5, [sp, #12]
    P( A, B, C, D, E, R(45) );
 8018184:	ea82 72f7 	eor.w	r2, r2, r7, ror #31
 8018188:	ea82 72f1 	eor.w	r2, r2, r1, ror #31
 801818c:	ea82 72fa 	eor.w	r2, r2, sl, ror #31
 8018190:	9202      	str	r2, [sp, #8]
 8018192:	ea48 02bb 	orr.w	r2, r8, fp, ror #2
 8018196:	ea02 01b4 	and.w	r1, r2, r4, ror #2
 801819a:	ea08 02bb 	and.w	r2, r8, fp, ror #2
 801819e:	430a      	orrs	r2, r1
 80181a0:	9902      	ldr	r1, [sp, #8]
 80181a2:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 80181a6:	eb01 06b6 	add.w	r6, r1, r6, ror #2
    P( E, A, B, C, D, R(46) );
 80181aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80181ac:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 80181b0:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 80181b4:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 80181b8:	ea4f 71fe 	mov.w	r1, lr, ror #31
 80181bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80181be:	4432      	add	r2, r6
 80181c0:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( A, B, C, D, E, R(45) );
 80181c4:	eb02 62fc 	add.w	r2, r2, ip, ror #27
    P( E, A, B, C, D, R(46) );
 80181c8:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 80181cc:	eb04 61f2 	add.w	r1, r4, r2, ror #27
 80181d0:	ea4c 04b8 	orr.w	r4, ip, r8, ror #2
 80181d4:	ea0c 06b8 	and.w	r6, ip, r8, ror #2
 80181d8:	ea04 04bb 	and.w	r4, r4, fp, ror #2
 80181dc:	4334      	orrs	r4, r6
 80181de:	440c      	add	r4, r1
    P( D, E, A, B, C, R(47) );
 80181e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80181e2:	9d04      	ldr	r5, [sp, #16]
 80181e4:	ea81 77f5 	eor.w	r7, r1, r5, ror #31
 80181e8:	990a      	ldr	r1, [sp, #40]	; 0x28
    P( C, D, E, A, B, R(48) );
 80181ea:	9d03      	ldr	r5, [sp, #12]
    P( D, E, A, B, C, R(47) );
 80181ec:	ea87 77f0 	eor.w	r7, r7, r0, ror #31
 80181f0:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 80181f4:	ea42 00bc 	orr.w	r0, r2, ip, ror #2
 80181f8:	ea4f 71f7 	mov.w	r1, r7, ror #31
 80181fc:	910d      	str	r1, [sp, #52]	; 0x34
 80181fe:	ea00 01b8 	and.w	r1, r0, r8, ror #2
 8018202:	ea02 00bc 	and.w	r0, r2, ip, ror #2
 8018206:	4308      	orrs	r0, r1
 8018208:	eb03 71f7 	add.w	r1, r3, r7, ror #31
 801820c:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( C, D, E, A, B, R(48) );
 8018210:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018212:	ea81 75f5 	eor.w	r5, r1, r5, ror #31
 8018216:	9908      	ldr	r1, [sp, #32]
 8018218:	ea85 75f1 	eor.w	r5, r5, r1, ror #31
 801821c:	9902      	ldr	r1, [sp, #8]
 801821e:	ea85 71f1 	eor.w	r1, r5, r1, ror #31
 8018222:	4458      	add	r0, fp
 8018224:	eb03 7bf1 	add.w	fp, r3, r1, ror #31
 8018228:	eb0b 08b8 	add.w	r8, fp, r8, ror #2
 801822c:	ea44 0bb2 	orr.w	fp, r4, r2, ror #2
 8018230:	9103      	str	r1, [sp, #12]
 8018232:	ea0b 0bbc 	and.w	fp, fp, ip, ror #2
 8018236:	ea04 01b2 	and.w	r1, r4, r2, ror #2
    P( B, C, D, E, A, R(49) );
 801823a:	9d04      	ldr	r5, [sp, #16]
    P( C, D, E, A, B, R(48) );
 801823c:	ea4b 0b01 	orr.w	fp, fp, r1
    P( B, C, D, E, A, R(49) );
 8018240:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8018242:	ea81 76f5 	eor.w	r6, r1, r5, ror #31
 8018246:	9909      	ldr	r1, [sp, #36]	; 0x24
    P( D, E, A, B, C, R(47) );
 8018248:	eb00 60f4 	add.w	r0, r0, r4, ror #27
    P( B, C, D, E, A, R(49) );
 801824c:	ea86 76f1 	eor.w	r6, r6, r1, ror #31
 8018250:	ea86 71fe 	eor.w	r1, r6, lr, ror #31
 8018254:	ea40 05b4 	orr.w	r5, r0, r4, ror #2
 8018258:	9104      	str	r1, [sp, #16]
 801825a:	ea05 01b2 	and.w	r1, r5, r2, ror #2
 801825e:	ea00 05b4 	and.w	r5, r0, r4, ror #2
 8018262:	430d      	orrs	r5, r1
 8018264:	9904      	ldr	r1, [sp, #16]
    P( A, B, C, D, E, R(50) );
 8018266:	9e06      	ldr	r6, [sp, #24]
 8018268:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801826c:	eb01 0cbc 	add.w	ip, r1, ip, ror #2
 8018270:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018272:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
 8018276:	ea81 7afa 	eor.w	sl, r1, sl, ror #31
 801827a:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 801827e:	eb08 68f0 	add.w	r8, r8, r0, ror #27
 8018282:	ea4f 71fa 	mov.w	r1, sl, ror #31
    P( C, D, E, A, B, R(48) );
 8018286:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(50) );
 8018288:	9112      	str	r1, [sp, #72]	; 0x48
 801828a:	4465      	add	r5, ip
 801828c:	eb03 71fa 	add.w	r1, r3, sl, ror #31
    P( B, C, D, E, A, R(49) );
 8018290:	eb05 65fb 	add.w	r5, r5, fp, ror #27
    P( A, B, C, D, E, R(50) );
 8018294:	eb01 02b2 	add.w	r2, r1, r2, ror #2
 8018298:	eb02 61f5 	add.w	r1, r2, r5, ror #27
 801829c:	ea4b 02b0 	orr.w	r2, fp, r0, ror #2
 80182a0:	ea0b 0cb0 	and.w	ip, fp, r0, ror #2
 80182a4:	ea02 02b4 	and.w	r2, r2, r4, ror #2
 80182a8:	ea42 020c 	orr.w	r2, r2, ip
 80182ac:	440a      	add	r2, r1
    P( E, A, B, C, D, R(51) );
 80182ae:	9e07      	ldr	r6, [sp, #28]
 80182b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80182b2:	ea81 71f6 	eor.w	r1, r1, r6, ror #31
 80182b6:	ea81 79f9 	eor.w	r9, r1, r9, ror #31
 80182ba:	9903      	ldr	r1, [sp, #12]
 80182bc:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
 80182c0:	ea45 06bb 	orr.w	r6, r5, fp, ror #2
 80182c4:	ea4f 71f9 	mov.w	r1, r9, ror #31
 80182c8:	9113      	str	r1, [sp, #76]	; 0x4c
 80182ca:	ea06 01b0 	and.w	r1, r6, r0, ror #2
 80182ce:	ea05 06bb 	and.w	r6, r5, fp, ror #2
 80182d2:	430e      	orrs	r6, r1
 80182d4:	eb03 71f9 	add.w	r1, r3, r9, ror #31
 80182d8:	eb01 04b4 	add.w	r4, r1, r4, ror #2
 80182dc:	4426      	add	r6, r4
    P( D, E, A, B, C, R(52) );
 80182de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80182e0:	9c06      	ldr	r4, [sp, #24]
 80182e2:	ea81 74f4 	eor.w	r4, r1, r4, ror #31
 80182e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80182e8:	ea84 74f1 	eor.w	r4, r4, r1, ror #31
 80182ec:	9904      	ldr	r1, [sp, #16]
 80182ee:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 80182f2:	9106      	str	r1, [sp, #24]
 80182f4:	eb03 71f1 	add.w	r1, r3, r1, ror #31
    P( E, A, B, C, D, R(51) );
 80182f8:	eb06 66f2 	add.w	r6, r6, r2, ror #27
    P( D, E, A, B, C, R(52) );
 80182fc:	eb01 00b0 	add.w	r0, r1, r0, ror #2
 8018300:	eb00 61f6 	add.w	r1, r0, r6, ror #27
 8018304:	ea42 00b5 	orr.w	r0, r2, r5, ror #2
 8018308:	ea02 04b5 	and.w	r4, r2, r5, ror #2
 801830c:	ea00 00bb 	and.w	r0, r0, fp, ror #2
 8018310:	4320      	orrs	r0, r4
 8018312:	4408      	add	r0, r1
    P( C, D, E, A, B, R(53) );
 8018314:	9c07      	ldr	r4, [sp, #28]
 8018316:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018318:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801831c:	9c02      	ldr	r4, [sp, #8]
 801831e:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018322:	ea46 08b2 	orr.w	r8, r6, r2, ror #2
 8018326:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 801832a:	9107      	str	r1, [sp, #28]
 801832c:	ea08 01b5 	and.w	r1, r8, r5, ror #2
 8018330:	ea06 08b2 	and.w	r8, r6, r2, ror #2
 8018334:	ea41 0808 	orr.w	r8, r1, r8
 8018338:	9907      	ldr	r1, [sp, #28]
 801833a:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801833e:	eb01 0bbb 	add.w	fp, r1, fp, ror #2
    P( B, C, D, E, A, R(54) );
 8018342:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018344:	9c08      	ldr	r4, [sp, #32]
 8018346:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801834a:	ea81 7efe 	eor.w	lr, r1, lr, ror #31
 801834e:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
 8018352:	ea4f 71fe 	mov.w	r1, lr, ror #31
 8018356:	9110      	str	r1, [sp, #64]	; 0x40
 8018358:	44d8      	add	r8, fp
 801835a:	eb03 71fe 	add.w	r1, r3, lr, ror #31
    P( C, D, E, A, B, R(53) );
 801835e:	eb08 68f0 	add.w	r8, r8, r0, ror #27
    P( B, C, D, E, A, R(54) );
 8018362:	eb01 05b5 	add.w	r5, r1, r5, ror #2
 8018366:	eb05 61f8 	add.w	r1, r5, r8, ror #27
 801836a:	ea40 05b6 	orr.w	r5, r0, r6, ror #2
 801836e:	ea00 04b6 	and.w	r4, r0, r6, ror #2
 8018372:	ea05 05b2 	and.w	r5, r5, r2, ror #2
 8018376:	4325      	orrs	r5, r4
 8018378:	440d      	add	r5, r1
    P( A, B, C, D, E, R(55) );
 801837a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801837c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801837e:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018382:	9c06      	ldr	r4, [sp, #24]
 8018384:	ea81 71f7 	eor.w	r1, r1, r7, ror #31
 8018388:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801838c:	ea48 0cb0 	orr.w	ip, r8, r0, ror #2
 8018390:	ea4f 74f1 	mov.w	r4, r1, ror #31
 8018394:	940c      	str	r4, [sp, #48]	; 0x30
 8018396:	ea0c 04b6 	and.w	r4, ip, r6, ror #2
 801839a:	ea08 0cb0 	and.w	ip, r8, r0, ror #2
 801839e:	ea44 0c0c 	orr.w	ip, r4, ip
 80183a2:	eb03 74f1 	add.w	r4, r3, r1, ror #31
 80183a6:	eb04 02b2 	add.w	r2, r4, r2, ror #2
 80183aa:	4494      	add	ip, r2
    P( E, A, B, C, D, R(56) );
 80183ac:	9c08      	ldr	r4, [sp, #32]
 80183ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80183b0:	ea82 77f4 	eor.w	r7, r2, r4, ror #31
 80183b4:	9a03      	ldr	r2, [sp, #12]
 80183b6:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 80183ba:	9a07      	ldr	r2, [sp, #28]
 80183bc:	ea87 72f2 	eor.w	r2, r7, r2, ror #31
 80183c0:	eb03 77f2 	add.w	r7, r3, r2, ror #31
 80183c4:	eb07 06b6 	add.w	r6, r7, r6, ror #2
 80183c8:	ea45 07b8 	orr.w	r7, r5, r8, ror #2
 80183cc:	ea05 04b8 	and.w	r4, r5, r8, ror #2
 80183d0:	ea07 07b0 	and.w	r7, r7, r0, ror #2
    P( A, B, C, D, E, R(55) );
 80183d4:	eb0c 6cf5 	add.w	ip, ip, r5, ror #27
    P( E, A, B, C, D, R(56) );
 80183d8:	9208      	str	r2, [sp, #32]
 80183da:	4327      	orrs	r7, r4
    P( D, E, A, B, C, R(57) );
 80183dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80183e0:	eb06 66fc 	add.w	r6, r6, ip, ror #27
    P( E, A, B, C, D, R(56) );
 80183e4:	4437      	add	r7, r6
    P( D, E, A, B, C, R(57) );
 80183e6:	ea82 76f4 	eor.w	r6, r2, r4, ror #31
 80183ea:	9a04      	ldr	r2, [sp, #16]
 80183ec:	e002      	b.n	80183f4 <mbedtls_sha1_process+0x9ec>
 80183ee:	bf00      	nop
 80183f0:	8f1bbcdc 	.word	0x8f1bbcdc
 80183f4:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 80183f8:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
 80183fc:	9209      	str	r2, [sp, #36]	; 0x24
 80183fe:	ea4c 02b5 	orr.w	r2, ip, r5, ror #2
 8018402:	ea02 04b8 	and.w	r4, r2, r8, ror #2
 8018406:	ea0c 02b5 	and.w	r2, ip, r5, ror #2
 801840a:	4322      	orrs	r2, r4
 801840c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801840e:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 8018412:	eb04 00b0 	add.w	r0, r4, r0, ror #2
 8018416:	4402      	add	r2, r0
    P( C, D, E, A, B, R(58) );
 8018418:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801841a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801841c:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8018420:	ea80 7afa 	eor.w	sl, r0, sl, ror #31
 8018424:	ea8a 7af1 	eor.w	sl, sl, r1, ror #31
 8018428:	ea4f 70fa 	mov.w	r0, sl, ror #31
 801842c:	9011      	str	r0, [sp, #68]	; 0x44
 801842e:	eb03 70fa 	add.w	r0, r3, sl, ror #31
    P( D, E, A, B, C, R(57) );
 8018432:	eb02 62f7 	add.w	r2, r2, r7, ror #27
    P( C, D, E, A, B, R(58) );
 8018436:	eb00 08b8 	add.w	r8, r0, r8, ror #2
 801843a:	eb08 60f2 	add.w	r0, r8, r2, ror #27
 801843e:	ea47 08bc 	orr.w	r8, r7, ip, ror #2
 8018442:	ea07 04bc 	and.w	r4, r7, ip, ror #2
 8018446:	ea08 08b5 	and.w	r8, r8, r5, ror #2
 801844a:	ea48 0804 	orr.w	r8, r8, r4
 801844e:	4480      	add	r8, r0
    P( B, C, D, E, A, R(59) );
 8018450:	9c02      	ldr	r4, [sp, #8]
 8018452:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018454:	ea80 70f4 	eor.w	r0, r0, r4, ror #31
 8018458:	ea80 79f9 	eor.w	r9, r0, r9, ror #31
 801845c:	9808      	ldr	r0, [sp, #32]
 801845e:	ea89 79f0 	eor.w	r9, r9, r0, ror #31
 8018462:	ea4f 70f9 	mov.w	r0, r9, ror #31
 8018466:	ea42 04b7 	orr.w	r4, r2, r7, ror #2
 801846a:	9014      	str	r0, [sp, #80]	; 0x50
 801846c:	ea04 04bc 	and.w	r4, r4, ip, ror #2
 8018470:	ea02 00b7 	and.w	r0, r2, r7, ror #2
 8018474:	eb03 73f9 	add.w	r3, r3, r9, ror #31
 8018478:	eb03 03b5 	add.w	r3, r3, r5, ror #2
 801847c:	4320      	orrs	r0, r4
 801847e:	4418      	add	r0, r3
#undef F

#define F(x,y,z) (x ^ y ^ z)
#define K 0xCA62C1D6

    P( A, B, C, D, E, R(60) );
 8018480:	e9dd 430a 	ldrd	r4, r3, [sp, #40]	; 0x28
 8018484:	ea83 75f4 	eor.w	r5, r3, r4, ror #31
 8018488:	9b06      	ldr	r3, [sp, #24]
 801848a:	ea85 75f3 	eor.w	r5, r5, r3, ror #31
 801848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018490:	ea85 73f3 	eor.w	r3, r5, r3, ror #31
 8018494:	930a      	str	r3, [sp, #40]	; 0x28
 8018496:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018498:	4bd8      	ldr	r3, [pc, #864]	; (80187fc <mbedtls_sha1_process+0xdf4>)
    P( E, A, B, C, D, R(61) );
 801849a:	9d02      	ldr	r5, [sp, #8]
 801849c:	eb03 74f4 	add.w	r4, r3, r4, ror #31
 80184a0:	eb04 0cbc 	add.w	ip, r4, ip, ror #2
 80184a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80184a6:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 80184aa:	9d07      	ldr	r5, [sp, #28]
 80184ac:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 80184b0:	ea84 74fa 	eor.w	r4, r4, sl, ror #31
 80184b4:	9402      	str	r4, [sp, #8]
 80184b6:	9d02      	ldr	r5, [sp, #8]
    P( D, E, A, B, C, R(62) );
 80184b8:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(59) );
 80184ba:	ea4f 02b2 	mov.w	r2, r2, ror #2
 80184be:	eb03 75f5 	add.w	r5, r3, r5, ror #31
    P( A, B, C, D, E, R(60) );
 80184c2:	ea82 0bb7 	eor.w	fp, r2, r7, ror #2
 80184c6:	eb05 07b7 	add.w	r7, r5, r7, ror #2
    P( D, E, A, B, C, R(62) );
 80184ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80184cc:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
    P( A, B, C, D, E, R(60) );
 80184d0:	ea8b 0b08 	eor.w	fp, fp, r8
    P( D, E, A, B, C, R(62) );
 80184d4:	ea85 7efe 	eor.w	lr, r5, lr, ror #31
 80184d8:	ea8e 7ef9 	eor.w	lr, lr, r9, ror #31
    P( B, C, D, E, A, R(59) );
 80184dc:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( E, A, B, C, D, R(61) );
 80184e0:	ea82 04b8 	eor.w	r4, r2, r8, ror #2
 80184e4:	44e3      	add	fp, ip
    P( A, B, C, D, E, R(60) );
 80184e6:	eb0b 6bf0 	add.w	fp, fp, r0, ror #27
    P( D, E, A, B, C, R(62) );
 80184ea:	ea4f 75fe 	mov.w	r5, lr, ror #31
    P( E, A, B, C, D, R(61) );
 80184ee:	4044      	eors	r4, r0
 80184f0:	ea4f 00b0 	mov.w	r0, r0, ror #2
    P( D, E, A, B, C, R(62) );
 80184f4:	950b      	str	r5, [sp, #44]	; 0x2c
 80184f6:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 80184fa:	eb03 75fe 	add.w	r5, r3, lr, ror #31
 80184fe:	442a      	add	r2, r5
 8018500:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( C, D, E, A, B, R(63) );
 8018504:	9d04      	ldr	r5, [sp, #16]
 8018506:	4494      	add	ip, r2
 8018508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801850a:	443c      	add	r4, r7
 801850c:	ea82 77f5 	eor.w	r7, r2, r5, ror #31
 8018510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    P( B, C, D, E, A, R(64) );
 8018512:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(63) );
 8018514:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
 8018518:	ea87 77f2 	eor.w	r7, r7, r2, ror #31
 801851c:	ea4f 72f7 	mov.w	r2, r7, ror #31
 8018520:	920d      	str	r2, [sp, #52]	; 0x34
 8018522:	eb03 72f7 	add.w	r2, r3, r7, ror #31
 8018526:	eb02 08b8 	add.w	r8, r2, r8, ror #2
    P( B, C, D, E, A, R(64) );
 801852a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801852c:	ea82 72f6 	eor.w	r2, r2, r6, ror #31
 8018530:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
 8018534:	9d02      	ldr	r5, [sp, #8]
    P( E, A, B, C, D, R(61) );
 8018536:	eb04 64fb 	add.w	r4, r4, fp, ror #27
    P( C, D, E, A, B, R(63) );
 801853a:	ea80 01bb 	eor.w	r1, r0, fp, ror #2
    P( D, E, A, B, C, R(62) );
 801853e:	eb0c 6cf4 	add.w	ip, ip, r4, ror #27
    P( B, C, D, E, A, R(64) );
 8018542:	ea82 72f5 	eor.w	r2, r2, r5, ror #31
    P( C, D, E, A, B, R(63) );
 8018546:	4061      	eors	r1, r4
 8018548:	ea4f 04b4 	mov.w	r4, r4, ror #2
    P( B, C, D, E, A, R(64) );
 801854c:	9203      	str	r2, [sp, #12]
 801854e:	4441      	add	r1, r8
 8018550:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 8018554:	ea84 08bb 	eor.w	r8, r4, fp, ror #2
 8018558:	4410      	add	r0, r2
 801855a:	ea88 080c 	eor.w	r8, r8, ip
    P( A, B, C, D, E, R(65) );
 801855e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018560:	4480      	add	r8, r0
 8018562:	9804      	ldr	r0, [sp, #16]
 8018564:	ea82 76f0 	eor.w	r6, r2, r0, ror #31
 8018568:	9a09      	ldr	r2, [sp, #36]	; 0x24
    P( E, A, B, C, D, R(66) );
 801856a:	9806      	ldr	r0, [sp, #24]
    P( A, B, C, D, E, R(65) );
 801856c:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 8018570:	ea86 72fe 	eor.w	r2, r6, lr, ror #31
 8018574:	9204      	str	r2, [sp, #16]
 8018576:	eb03 72f2 	add.w	r2, r3, r2, ror #31
 801857a:	eb02 0bbb 	add.w	fp, r2, fp, ror #2
    P( E, A, B, C, D, R(66) );
 801857e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018580:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
 8018584:	ea82 7afa 	eor.w	sl, r2, sl, ror #31
 8018588:	ea8a 7af7 	eor.w	sl, sl, r7, ror #31
 801858c:	eb03 72fa 	add.w	r2, r3, sl, ror #31
    P( D, E, A, B, C, R(67) );
 8018590:	9807      	ldr	r0, [sp, #28]
    P( A, B, C, D, E, R(65) );
 8018592:	ea84 06bc 	eor.w	r6, r4, ip, ror #2
 8018596:	4414      	add	r4, r2
    P( D, E, A, B, C, R(67) );
 8018598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801859a:	ea82 72f0 	eor.w	r2, r2, r0, ror #31
    P( C, D, E, A, B, R(63) );
 801859e:	eb01 61fc 	add.w	r1, r1, ip, ror #27
    P( D, E, A, B, C, R(67) );
 80185a2:	ea82 79f9 	eor.w	r9, r2, r9, ror #31
 80185a6:	9a03      	ldr	r2, [sp, #12]
    P( B, C, D, E, A, R(64) );
 80185a8:	eb08 68f1 	add.w	r8, r8, r1, ror #27
    P( A, B, C, D, E, R(65) );
 80185ac:	404e      	eors	r6, r1
 80185ae:	ea4f 01b1 	mov.w	r1, r1, ror #2
    P( D, E, A, B, C, R(67) );
 80185b2:	ea89 79f2 	eor.w	r9, r9, r2, ror #31
 80185b6:	445e      	add	r6, fp
    P( E, A, B, C, D, R(66) );
 80185b8:	ea81 0bbc 	eor.w	fp, r1, ip, ror #2
 80185bc:	eb03 70f9 	add.w	r0, r3, r9, ror #31
 80185c0:	ea8b 0b08 	eor.w	fp, fp, r8
 80185c4:	eb00 0cbc 	add.w	ip, r0, ip, ror #2
 80185c8:	44a3      	add	fp, r4
    P( C, D, E, A, B, R(68) );
 80185ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80185cc:	9c06      	ldr	r4, [sp, #24]
 80185ce:	ea80 74f4 	eor.w	r4, r0, r4, ror #31
 80185d2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80185d4:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
 80185d8:	9804      	ldr	r0, [sp, #16]
    P( A, B, C, D, E, R(65) );
 80185da:	eb06 66f8 	add.w	r6, r6, r8, ror #27
    P( D, E, A, B, C, R(67) );
 80185de:	ea81 02b8 	eor.w	r2, r1, r8, ror #2
    P( E, A, B, C, D, R(66) );
 80185e2:	eb0b 6bf6 	add.w	fp, fp, r6, ror #27
    P( C, D, E, A, B, R(68) );
 80185e6:	ea84 74f0 	eor.w	r4, r4, r0, ror #31
    P( D, E, A, B, C, R(67) );
 80185ea:	4072      	eors	r2, r6
 80185ec:	ea4f 06b6 	mov.w	r6, r6, ror #2
 80185f0:	eb03 70f4 	add.w	r0, r3, r4, ror #31
 80185f4:	4462      	add	r2, ip
    P( C, D, E, A, B, R(68) );
 80185f6:	ea86 0cb8 	eor.w	ip, r6, r8, ror #2
 80185fa:	4401      	add	r1, r0
 80185fc:	ea8c 0c0b 	eor.w	ip, ip, fp
    P( B, C, D, E, A, R(69) );
 8018600:	9807      	ldr	r0, [sp, #28]
 8018602:	448c      	add	ip, r1
 8018604:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018606:	ea81 71f0 	eor.w	r1, r1, r0, ror #31
 801860a:	ea81 71f5 	eor.w	r1, r1, r5, ror #31
 801860e:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 8018612:	eb03 70f1 	add.w	r0, r3, r1, ror #31
    P( D, E, A, B, C, R(67) );
 8018616:	eb02 62fb 	add.w	r2, r2, fp, ror #27
    P( B, C, D, E, A, R(69) );
 801861a:	ea86 05bb 	eor.w	r5, r6, fp, ror #2
 801861e:	eb00 08b8 	add.w	r8, r0, r8, ror #2
    P( A, B, C, D, E, R(70) );
 8018622:	9810      	ldr	r0, [sp, #64]	; 0x40
    P( B, C, D, E, A, R(69) );
 8018624:	4055      	eors	r5, r2
 8018626:	4445      	add	r5, r8
    P( A, B, C, D, E, R(70) );
 8018628:	4680      	mov	r8, r0
 801862a:	9808      	ldr	r0, [sp, #32]
 801862c:	ea88 70f0 	eor.w	r0, r8, r0, ror #31
 8018630:	ea80 7efe 	eor.w	lr, r0, lr, ror #31
    P( C, D, E, A, B, R(68) );
 8018634:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( A, B, C, D, E, R(70) );
 8018638:	ea8e 70f9 	eor.w	r0, lr, r9, ror #31
    P( B, C, D, E, A, R(69) );
 801863c:	ea4f 02b2 	mov.w	r2, r2, ror #2
    P( A, B, C, D, E, R(70) );
 8018640:	9006      	str	r0, [sp, #24]
 8018642:	ea82 08bb 	eor.w	r8, r2, fp, ror #2
 8018646:	eb03 70f0 	add.w	r0, r3, r0, ror #31
 801864a:	4406      	add	r6, r0
 801864c:	ea88 080c 	eor.w	r8, r8, ip
    P( E, A, B, C, D, R(71) );
 8018650:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018652:	44b0      	add	r8, r6
 8018654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018656:	ea80 70f6 	eor.w	r0, r0, r6, ror #31
 801865a:	ea80 77f7 	eor.w	r7, r0, r7, ror #31
 801865e:	ea87 70f4 	eor.w	r0, r7, r4, ror #31
 8018662:	9007      	str	r0, [sp, #28]
 8018664:	9e07      	ldr	r6, [sp, #28]
    P( D, E, A, B, C, R(72) );
 8018666:	9f08      	ldr	r7, [sp, #32]
 8018668:	eb03 76f6 	add.w	r6, r3, r6, ror #31
 801866c:	eb06 0bbb 	add.w	fp, r6, fp, ror #2
 8018670:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018672:	ea86 77f7 	eor.w	r7, r6, r7, ror #31
 8018676:	9e03      	ldr	r6, [sp, #12]
    P( B, C, D, E, A, R(69) );
 8018678:	eb05 65fc 	add.w	r5, r5, ip, ror #27
    P( E, A, B, C, D, R(71) );
 801867c:	ea82 00bc 	eor.w	r0, r2, ip, ror #2
    P( D, E, A, B, C, R(72) );
 8018680:	ea87 77f6 	eor.w	r7, r7, r6, ror #31
    P( A, B, C, D, E, R(70) );
 8018684:	eb08 68f5 	add.w	r8, r8, r5, ror #27
    P( D, E, A, B, C, R(72) );
 8018688:	ea87 77f1 	eor.w	r7, r7, r1, ror #31
    P( E, A, B, C, D, R(71) );
 801868c:	4068      	eors	r0, r5
 801868e:	ea4f 05b5 	mov.w	r5, r5, ror #2
 8018692:	eb03 76f7 	add.w	r6, r3, r7, ror #31
    P( D, E, A, B, C, R(72) );
 8018696:	ea85 0ebc 	eor.w	lr, r5, ip, ror #2
 801869a:	4432      	add	r2, r6
 801869c:	ea8e 0e08 	eor.w	lr, lr, r8
    P( C, D, E, A, B, R(73) );
 80186a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80186a2:	4496      	add	lr, r2
 80186a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186a6:	ea82 76f6 	eor.w	r6, r2, r6, ror #31
 80186aa:	9a04      	ldr	r2, [sp, #16]
 80186ac:	ea86 76f2 	eor.w	r6, r6, r2, ror #31
 80186b0:	9a06      	ldr	r2, [sp, #24]
 80186b2:	ea86 72f2 	eor.w	r2, r6, r2, ror #31
 80186b6:	9208      	str	r2, [sp, #32]
 80186b8:	9e08      	ldr	r6, [sp, #32]
 80186ba:	4458      	add	r0, fp
    P( E, A, B, C, D, R(71) );
 80186bc:	eb00 60f8 	add.w	r0, r0, r8, ror #27
    P( D, E, A, B, C, R(72) );
 80186c0:	eb03 7bf6 	add.w	fp, r3, r6, ror #31
    P( C, D, E, A, B, R(73) );
 80186c4:	ea85 02b8 	eor.w	r2, r5, r8, ror #2
    P( B, C, D, E, A, R(74) );
 80186c8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80186ca:	eb0b 0cbc 	add.w	ip, fp, ip, ror #2
    P( C, D, E, A, B, R(73) );
 80186ce:	4042      	eors	r2, r0
 80186d0:	4462      	add	r2, ip
    P( B, C, D, E, A, R(74) );
 80186d2:	46b4      	mov	ip, r6
 80186d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80186d6:	ea8c 7cf6 	eor.w	ip, ip, r6, ror #31
 80186da:	9e07      	ldr	r6, [sp, #28]
 80186dc:	ea8c 7afa 	eor.w	sl, ip, sl, ror #31
    P( D, E, A, B, C, R(72) );
 80186e0:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( B, C, D, E, A, R(74) );
 80186e4:	ea8a 7af6 	eor.w	sl, sl, r6, ror #31
    P( C, D, E, A, B, R(73) );
 80186e8:	ea4f 00b0 	mov.w	r0, r0, ror #2
 80186ec:	eb03 7bfa 	add.w	fp, r3, sl, ror #31
    P( B, C, D, E, A, R(74) );
 80186f0:	ea80 0cb8 	eor.w	ip, r0, r8, ror #2
 80186f4:	445d      	add	r5, fp
 80186f6:	ea8c 0c0e 	eor.w	ip, ip, lr
    P( A, B, C, D, E, R(75) );
 80186fa:	9e02      	ldr	r6, [sp, #8]
 80186fc:	44ac      	add	ip, r5
 80186fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018700:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
 8018704:	ea85 79f9 	eor.w	r9, r5, r9, ror #31
 8018708:	ea89 77f7 	eor.w	r7, r9, r7, ror #31
 801870c:	eb03 75f7 	add.w	r5, r3, r7, ror #31
 8018710:	eb05 08b8 	add.w	r8, r5, r8, ror #2
    P( E, A, B, C, D, R(76) );
 8018714:	e9dd 650a 	ldrd	r6, r5, [sp, #40]	; 0x28
 8018718:	ea85 75f6 	eor.w	r5, r5, r6, ror #31
 801871c:	ea85 74f4 	eor.w	r4, r5, r4, ror #31
 8018720:	9d08      	ldr	r5, [sp, #32]
    P( C, D, E, A, B, R(73) );
 8018722:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    P( A, B, C, D, E, R(75) );
 8018726:	ea80 0bbe 	eor.w	fp, r0, lr, ror #2
    P( B, C, D, E, A, R(74) );
 801872a:	eb0c 6cf2 	add.w	ip, ip, r2, ror #27
    P( E, A, B, C, D, R(76) );
 801872e:	ea84 76f5 	eor.w	r6, r4, r5, ror #31
    P( A, B, C, D, E, R(75) );
 8018732:	ea8b 0b02 	eor.w	fp, fp, r2
 8018736:	ea4f 02b2 	mov.w	r2, r2, ror #2
 801873a:	eb03 75f6 	add.w	r5, r3, r6, ror #31
    P( E, A, B, C, D, R(76) );
 801873e:	ea82 04be 	eor.w	r4, r2, lr, ror #2
 8018742:	ea84 040c 	eor.w	r4, r4, ip
 8018746:	4428      	add	r0, r5
 8018748:	4420      	add	r0, r4
    P( D, E, A, B, C, R(77) );
 801874a:	9d02      	ldr	r5, [sp, #8]
 801874c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801874e:	ea84 74f5 	eor.w	r4, r4, r5, ror #31
 8018752:	ea84 71f1 	eor.w	r1, r4, r1, ror #31
 8018756:	ea81 71fa 	eor.w	r1, r1, sl, ror #31
 801875a:	eb03 71f1 	add.w	r1, r3, r1, ror #31
 801875e:	44c3      	add	fp, r8
    P( A, B, C, D, E, R(75) );
 8018760:	eb0b 6bfc 	add.w	fp, fp, ip, ror #27
    P( E, A, B, C, D, R(76) );
 8018764:	eb01 0ebe 	add.w	lr, r1, lr, ror #2
    P( D, E, A, B, C, R(77) );
 8018768:	ea82 01bc 	eor.w	r1, r2, ip, ror #2
 801876c:	ea81 010b 	eor.w	r1, r1, fp
    P( C, D, E, A, B, R(78) );
 8018770:	9c03      	ldr	r4, [sp, #12]
 8018772:	448e      	add	lr, r1
 8018774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018776:	ea81 79f4 	eor.w	r9, r1, r4, ror #31
 801877a:	9906      	ldr	r1, [sp, #24]
    P( B, C, D, E, A, R(79) );
 801877c:	9c04      	ldr	r4, [sp, #16]
    P( C, D, E, A, B, R(78) );
 801877e:	ea89 79f1 	eor.w	r9, r9, r1, ror #31
    P( B, C, D, E, A, R(79) );
 8018782:	990d      	ldr	r1, [sp, #52]	; 0x34
 8018784:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 8018788:	9c07      	ldr	r4, [sp, #28]
 801878a:	ea81 71f4 	eor.w	r1, r1, r4, ror #31
 801878e:	ea81 76f6 	eor.w	r6, r1, r6, ror #31

#undef K
#undef F

    ctx->state[0] += A;
 8018792:	990e      	ldr	r1, [sp, #56]	; 0x38
    P( C, D, E, A, B, R(78) );
 8018794:	ea89 79f7 	eor.w	r9, r9, r7, ror #31
    P( E, A, B, C, D, R(76) );
 8018798:	eb00 60fb 	add.w	r0, r0, fp, ror #27
    P( D, E, A, B, C, R(77) );
 801879c:	eb03 79f9 	add.w	r9, r3, r9, ror #31
 80187a0:	ea4f 0bbb 	mov.w	fp, fp, ror #2
    ctx->state[0] += A;
 80187a4:	440b      	add	r3, r1
 80187a6:	eb03 73f6 	add.w	r3, r3, r6, ror #31
 80187aa:	444a      	add	r2, r9
    P( C, D, E, A, B, R(78) );
 80187ac:	ea8b 09bc 	eor.w	r9, fp, ip, ror #2
    P( D, E, A, B, C, R(77) );
 80187b0:	eb0e 6ef0 	add.w	lr, lr, r0, ror #27
    P( C, D, E, A, B, R(78) );
 80187b4:	ea89 0900 	eor.w	r9, r9, r0
    ctx->state[0] += A;
 80187b8:	eb03 0cbc 	add.w	ip, r3, ip, ror #2
    P( B, C, D, E, A, R(79) );
 80187bc:	ea8b 03b0 	eor.w	r3, fp, r0, ror #2
 80187c0:	444a      	add	r2, r9
 80187c2:	ea83 030e 	eor.w	r3, r3, lr
    ctx->state[0] += A;
 80187c6:	9900      	ldr	r1, [sp, #0]
    P( C, D, E, A, B, R(78) );
 80187c8:	eb02 62fe 	add.w	r2, r2, lr, ror #27
    ctx->state[0] += A;
 80187cc:	4463      	add	r3, ip
 80187ce:	eb03 63f2 	add.w	r3, r3, r2, ror #27
 80187d2:	608b      	str	r3, [r1, #8]
    ctx->state[1] += B;
 80187d4:	9b01      	ldr	r3, [sp, #4]
 80187d6:	441a      	add	r2, r3
    ctx->state[2] += C;
 80187d8:	9b05      	ldr	r3, [sp, #20]
    ctx->state[1] += B;
 80187da:	60ca      	str	r2, [r1, #12]
    ctx->state[2] += C;
 80187dc:	eb03 01be 	add.w	r1, r3, lr, ror #2
 80187e0:	9b00      	ldr	r3, [sp, #0]
 80187e2:	6119      	str	r1, [r3, #16]
    ctx->state[3] += D;
 80187e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80187e6:	eb03 00b0 	add.w	r0, r3, r0, ror #2
 80187ea:	9b00      	ldr	r3, [sp, #0]
 80187ec:	6158      	str	r0, [r3, #20]
    ctx->state[4] += E;
 80187ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80187f0:	eb03 050b 	add.w	r5, r3, fp
 80187f4:	9b00      	ldr	r3, [sp, #0]
 80187f6:	619d      	str	r5, [r3, #24]
}
 80187f8:	e002      	b.n	8018800 <mbedtls_sha1_process+0xdf8>
 80187fa:	bf00      	nop
 80187fc:	ca62c1d6 	.word	0xca62c1d6
 8018800:	b019      	add	sp, #100	; 0x64
 8018802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018806:	bf00      	nop

08018808 <mbedtls_sha1_update.part.0>:
#endif /* !MBEDTLS_SHA1_PROCESS_ALT */

/*
 * SHA-1 process buffer
 */
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 8018808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 801880c:	6803      	ldr	r3, [r0, #0]
 801880e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 8018812:	189b      	adds	r3, r3, r2
 8018814:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 8018816:	bf24      	itt	cs
 8018818:	6843      	ldrcs	r3, [r0, #4]
 801881a:	3301      	addcs	r3, #1
void mbedtls_sha1_update( mbedtls_sha1_context *ctx, const unsigned char *input, size_t ilen )
 801881c:	4605      	mov	r5, r0
 801881e:	460e      	mov	r6, r1
 8018820:	4614      	mov	r4, r2
        ctx->total[1]++;
 8018822:	bf28      	it	cs
 8018824:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8018826:	b197      	cbz	r7, 801884e <mbedtls_sha1_update.part.0+0x46>
    fill = 64 - left;
 8018828:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 801882c:	4591      	cmp	r9, r2
 801882e:	d80e      	bhi.n	801884e <mbedtls_sha1_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8018830:	f100 081c 	add.w	r8, r0, #28
 8018834:	464a      	mov	r2, r9
 8018836:	eb08 0007 	add.w	r0, r8, r7
 801883a:	f009 fdd5 	bl	80223e8 <memcpy>
        mbedtls_sha1_process( ctx, ctx->buffer );
 801883e:	4641      	mov	r1, r8
 8018840:	4628      	mov	r0, r5
 8018842:	f7ff f8e1 	bl	8017a08 <mbedtls_sha1_process>
        input += fill;
 8018846:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 8018848:	443c      	add	r4, r7
        input += fill;
 801884a:	444e      	add	r6, r9
        left = 0;
 801884c:	2700      	movs	r7, #0
 801884e:	46a0      	mov	r8, r4
 8018850:	eb06 0904 	add.w	r9, r6, r4
 8018854:	e004      	b.n	8018860 <mbedtls_sha1_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha1_process( ctx, input );
 8018856:	4628      	mov	r0, r5
 8018858:	f7ff f8d6 	bl	8017a08 <mbedtls_sha1_process>
        input += 64;
        ilen  -= 64;
 801885c:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8018860:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8018864:	eba9 0108 	sub.w	r1, r9, r8
 8018868:	d8f5      	bhi.n	8018856 <mbedtls_sha1_update.part.0+0x4e>
 801886a:	09a2      	lsrs	r2, r4, #6
 801886c:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8018870:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8018874:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 8018878:	4431      	add	r1, r6
 801887a:	b132      	cbz	r2, 801888a <mbedtls_sha1_update.part.0+0x82>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801887c:	f105 001c 	add.w	r0, r5, #28
 8018880:	4438      	add	r0, r7
}
 8018882:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8018886:	f009 bdaf 	b.w	80223e8 <memcpy>
}
 801888a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801888e <mbedtls_sha1_update>:
    if( ilen == 0 )
 801888e:	b10a      	cbz	r2, 8018894 <mbedtls_sha1_update+0x6>
 8018890:	f7ff bfba 	b.w	8018808 <mbedtls_sha1_update.part.0>
}
 8018894:	4770      	bx	lr
	...

08018898 <mbedtls_sha1_finish>:

/*
 * SHA-1 final digest
 */
void mbedtls_sha1_finish( mbedtls_sha1_context *ctx, unsigned char output[20] )
{
 8018898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801889a:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 801889c:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 80188a0:	0f53      	lsrs	r3, r2, #29
 80188a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80188a6:	ba1b      	rev	r3, r3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 80188a8:	9300      	str	r3, [sp, #0]
    low  = ( ctx->total[0] <<  3 );
 80188aa:	00d3      	lsls	r3, r2, #3
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 80188ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80188b0:	2a37      	cmp	r2, #55	; 0x37
{
 80188b2:	4604      	mov	r4, r0
 80188b4:	ba1b      	rev	r3, r3
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 80188b6:	bf94      	ite	ls
 80188b8:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 80188bc:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_sha1_update( ctx, sha1_padding, padn );
 80188c0:	491b      	ldr	r1, [pc, #108]	; (8018930 <mbedtls_sha1_finish+0x98>)
    PUT_UINT32_BE( low,  msglen, 4 );
 80188c2:	9301      	str	r3, [sp, #4]
    mbedtls_sha1_update( ctx, sha1_padding, padn );
 80188c4:	f7ff ffe3 	bl	801888e <mbedtls_sha1_update>
    if( ilen == 0 )
 80188c8:	2208      	movs	r2, #8
 80188ca:	4669      	mov	r1, sp
 80188cc:	4620      	mov	r0, r4
 80188ce:	f7ff ff9b 	bl	8018808 <mbedtls_sha1_update.part.0>
    mbedtls_sha1_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80188d2:	7ae3      	ldrb	r3, [r4, #11]
 80188d4:	702b      	strb	r3, [r5, #0]
 80188d6:	8963      	ldrh	r3, [r4, #10]
 80188d8:	706b      	strb	r3, [r5, #1]
 80188da:	68a3      	ldr	r3, [r4, #8]
 80188dc:	0a1b      	lsrs	r3, r3, #8
 80188de:	70ab      	strb	r3, [r5, #2]
 80188e0:	68a3      	ldr	r3, [r4, #8]
 80188e2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80188e4:	7be3      	ldrb	r3, [r4, #15]
 80188e6:	712b      	strb	r3, [r5, #4]
 80188e8:	89e3      	ldrh	r3, [r4, #14]
 80188ea:	716b      	strb	r3, [r5, #5]
 80188ec:	68e3      	ldr	r3, [r4, #12]
 80188ee:	0a1b      	lsrs	r3, r3, #8
 80188f0:	71ab      	strb	r3, [r5, #6]
 80188f2:	68e3      	ldr	r3, [r4, #12]
 80188f4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80188f6:	7ce3      	ldrb	r3, [r4, #19]
 80188f8:	722b      	strb	r3, [r5, #8]
 80188fa:	8a63      	ldrh	r3, [r4, #18]
 80188fc:	726b      	strb	r3, [r5, #9]
 80188fe:	6923      	ldr	r3, [r4, #16]
 8018900:	0a1b      	lsrs	r3, r3, #8
 8018902:	72ab      	strb	r3, [r5, #10]
 8018904:	6923      	ldr	r3, [r4, #16]
 8018906:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8018908:	7de3      	ldrb	r3, [r4, #23]
 801890a:	732b      	strb	r3, [r5, #12]
 801890c:	8ae3      	ldrh	r3, [r4, #22]
 801890e:	736b      	strb	r3, [r5, #13]
 8018910:	6963      	ldr	r3, [r4, #20]
 8018912:	0a1b      	lsrs	r3, r3, #8
 8018914:	73ab      	strb	r3, [r5, #14]
 8018916:	6963      	ldr	r3, [r4, #20]
 8018918:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 801891a:	7ee3      	ldrb	r3, [r4, #27]
 801891c:	742b      	strb	r3, [r5, #16]
 801891e:	8b63      	ldrh	r3, [r4, #26]
 8018920:	746b      	strb	r3, [r5, #17]
 8018922:	69a3      	ldr	r3, [r4, #24]
 8018924:	0a1b      	lsrs	r3, r3, #8
 8018926:	74ab      	strb	r3, [r5, #18]
 8018928:	69a3      	ldr	r3, [r4, #24]
 801892a:	74eb      	strb	r3, [r5, #19]
}
 801892c:	b003      	add	sp, #12
 801892e:	bd30      	pop	{r4, r5, pc}
 8018930:	0802c6d4 	.word	0x0802c6d4

08018934 <mbedtls_sha1>:

/*
 * output = SHA-1( input buffer )
 */
void mbedtls_sha1( const unsigned char *input, size_t ilen, unsigned char output[20] )
{
 8018934:	b570      	push	{r4, r5, r6, lr}
 8018936:	b098      	sub	sp, #96	; 0x60
 8018938:	4605      	mov	r5, r0
    mbedtls_sha1_context ctx;

    mbedtls_sha1_init( &ctx );
 801893a:	a801      	add	r0, sp, #4
{
 801893c:	460e      	mov	r6, r1
 801893e:	4614      	mov	r4, r2
    mbedtls_sha1_init( &ctx );
 8018940:	f7ff f835 	bl	80179ae <mbedtls_sha1_init>
    mbedtls_sha1_starts( &ctx );
 8018944:	a801      	add	r0, sp, #4
 8018946:	f7ff f845 	bl	80179d4 <mbedtls_sha1_starts>
    mbedtls_sha1_update( &ctx, input, ilen );
 801894a:	4632      	mov	r2, r6
 801894c:	4629      	mov	r1, r5
 801894e:	a801      	add	r0, sp, #4
 8018950:	f7ff ff9d 	bl	801888e <mbedtls_sha1_update>
    mbedtls_sha1_finish( &ctx, output );
 8018954:	4621      	mov	r1, r4
 8018956:	a801      	add	r0, sp, #4
 8018958:	f7ff ff9e 	bl	8018898 <mbedtls_sha1_finish>
    mbedtls_sha1_free( &ctx );
 801895c:	a801      	add	r0, sp, #4
 801895e:	f7ff f82a 	bl	80179b6 <mbedtls_sha1_free>
}
 8018962:	b018      	add	sp, #96	; 0x60
 8018964:	bd70      	pop	{r4, r5, r6, pc}

08018966 <mbedtls_sha256_init>:
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8018966:	226c      	movs	r2, #108	; 0x6c
 8018968:	2100      	movs	r1, #0
 801896a:	f009 bd65 	b.w	8022438 <memset>

0801896e <mbedtls_sha256_free>:
}

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
    if( ctx == NULL )
 801896e:	b120      	cbz	r0, 801897a <mbedtls_sha256_free+0xc>
 8018970:	f100 036c 	add.w	r3, r0, #108	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8018974:	2200      	movs	r2, #0
 8018976:	4298      	cmp	r0, r3
 8018978:	d100      	bne.n	801897c <mbedtls_sha256_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
}
 801897a:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801897c:	f800 2b01 	strb.w	r2, [r0], #1
 8018980:	e7f9      	b.n	8018976 <mbedtls_sha256_free+0x8>

08018982 <mbedtls_sha256_clone>:

void mbedtls_sha256_clone( mbedtls_sha256_context *dst,
                           const mbedtls_sha256_context *src )
{
 8018982:	b508      	push	{r3, lr}
    *dst = *src;
 8018984:	226c      	movs	r2, #108	; 0x6c
 8018986:	f009 fd2f 	bl	80223e8 <memcpy>
}
 801898a:	bd08      	pop	{r3, pc}

0801898c <mbedtls_sha256_starts>:
/*
 * SHA-256 context setup
 */
void mbedtls_sha256_starts( mbedtls_sha256_context *ctx, int is224 )
{
    ctx->total[0] = 0;
 801898c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
 801898e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
 8018992:	b9b9      	cbnz	r1, 80189c4 <mbedtls_sha256_starts+0x38>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
 8018994:	4a19      	ldr	r2, [pc, #100]	; (80189fc <mbedtls_sha256_starts+0x70>)
 8018996:	4b1a      	ldr	r3, [pc, #104]	; (8018a00 <mbedtls_sha256_starts+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
 8018998:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8018a28 <mbedtls_sha256_starts+0x9c>
        ctx->state[1] = 0xBB67AE85;
 801899c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
 80189a0:	4b18      	ldr	r3, [pc, #96]	; (8018a04 <mbedtls_sha256_starts+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
 80189a2:	4a19      	ldr	r2, [pc, #100]	; (8018a08 <mbedtls_sha256_starts+0x7c>)
        ctx->state[3] = 0xA54FF53A;
 80189a4:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
 80189a8:	4b18      	ldr	r3, [pc, #96]	; (8018a0c <mbedtls_sha256_starts+0x80>)
 80189aa:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
 80189ae:	4b18      	ldr	r3, [pc, #96]	; (8018a10 <mbedtls_sha256_starts+0x84>)
 80189b0:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
 80189b2:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 80189b6:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 80189ba:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
 80189be:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
 80189c0:	6681      	str	r1, [r0, #104]	; 0x68
}
 80189c2:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
 80189c4:	4b13      	ldr	r3, [pc, #76]	; (8018a14 <mbedtls_sha256_starts+0x88>)
 80189c6:	4a14      	ldr	r2, [pc, #80]	; (8018a18 <mbedtls_sha256_starts+0x8c>)
        ctx->state[4] = 0xFFC00B31;
 80189c8:	f8df c060 	ldr.w	ip, [pc, #96]	; 8018a2c <mbedtls_sha256_starts+0xa0>
        ctx->state[1] = 0x367CD507;
 80189cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
 80189d0:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
 80189d4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80189d8:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80189dc:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
 80189de:	4b0f      	ldr	r3, [pc, #60]	; (8018a1c <mbedtls_sha256_starts+0x90>)
 80189e0:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
 80189e4:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
 80189e8:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
 80189ec:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
 80189f0:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
 80189f2:	4b0b      	ldr	r3, [pc, #44]	; (8018a20 <mbedtls_sha256_starts+0x94>)
 80189f4:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80189f6:	4b0b      	ldr	r3, [pc, #44]	; (8018a24 <mbedtls_sha256_starts+0x98>)
 80189f8:	e7e1      	b.n	80189be <mbedtls_sha256_starts+0x32>
 80189fa:	bf00      	nop
 80189fc:	6a09e667 	.word	0x6a09e667
 8018a00:	bb67ae85 	.word	0xbb67ae85
 8018a04:	a54ff53a 	.word	0xa54ff53a
 8018a08:	510e527f 	.word	0x510e527f
 8018a0c:	9b05688c 	.word	0x9b05688c
 8018a10:	1f83d9ab 	.word	0x1f83d9ab
 8018a14:	367cd507 	.word	0x367cd507
 8018a18:	c1059ed8 	.word	0xc1059ed8
 8018a1c:	ffc00b31 	.word	0xffc00b31
 8018a20:	64f98fa7 	.word	0x64f98fa7
 8018a24:	befa4fa4 	.word	0xbefa4fa4
 8018a28:	3c6ef372 	.word	0x3c6ef372
 8018a2c:	f70e5939 	.word	0xf70e5939

08018a30 <mbedtls_sha256_process>:
    temp2 = S2(a) + F0(a,b,c);                  \
    d += temp1; h = temp1 + temp2;              \
}

void mbedtls_sha256_process( mbedtls_sha256_context *ctx, const unsigned char data[64] )
{
 8018a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a34:	b0d1      	sub	sp, #324	; 0x144
 8018a36:	f100 0308 	add.w	r3, r0, #8
 8018a3a:	9305      	str	r3, [sp, #20]
 8018a3c:	ab08      	add	r3, sp, #32
 8018a3e:	9300      	str	r3, [sp, #0]
 8018a40:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8018a44:	9306      	str	r3, [sp, #24]
 8018a46:	9a00      	ldr	r2, [sp, #0]
 8018a48:	9b05      	ldr	r3, [sp, #20]
    uint32_t temp1, temp2, W[64];
    uint32_t A[8];
    unsigned int i;

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
 8018a4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018a4e:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
 8018a52:	9806      	ldr	r0, [sp, #24]
 8018a54:	4298      	cmp	r0, r3
 8018a56:	d1f8      	bne.n	8018a4a <mbedtls_sha256_process+0x1a>
 8018a58:	f10d 0940 	add.w	r9, sp, #64	; 0x40
 8018a5c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8018a60:	464a      	mov	r2, r9
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
 8018a62:	784b      	ldrb	r3, [r1, #1]
 8018a64:	780c      	ldrb	r4, [r1, #0]
 8018a66:	041b      	lsls	r3, r3, #16
 8018a68:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8018a6c:	78cc      	ldrb	r4, [r1, #3]
 8018a6e:	4323      	orrs	r3, r4
 8018a70:	788c      	ldrb	r4, [r1, #2]
 8018a72:	3104      	adds	r1, #4
 8018a74:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    for( i = 0; i < 16; i++ )
 8018a78:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
 8018a7a:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
 8018a7e:	d1f0      	bne.n	8018a62 <mbedtls_sha256_process+0x32>
 8018a80:	9b00      	ldr	r3, [sp, #0]
 8018a82:	9900      	ldr	r1, [sp, #0]
 8018a84:	489b      	ldr	r0, [pc, #620]	; (8018cf4 <mbedtls_sha256_process+0x2c4>)
 8018a86:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8018a8a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8018a8e:	68c9      	ldr	r1, [r1, #12]
 8018a90:	9001      	str	r0, [sp, #4]
 8018a92:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
 8018a96:	e9d3 7200 	ldrd	r7, r2, [r3]
 8018a9a:	689b      	ldr	r3, [r3, #8]
 8018a9c:	46ca      	mov	sl, r9
 8018a9e:	4686      	mov	lr, r0

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018aa0:	f8de 0000 	ldr.w	r0, [lr]
 8018aa4:	f8da 4000 	ldr.w	r4, [sl]
 8018aa8:	ea4f 25f8 	mov.w	r5, r8, ror #11
 8018aac:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
 8018ab0:	4420      	add	r0, r4
 8018ab2:	ea85 6578 	eor.w	r5, r5, r8, ror #25
 8018ab6:	4405      	add	r5, r0
 8018ab8:	ea8b 0006 	eor.w	r0, fp, r6
 8018abc:	ea00 0008 	and.w	r0, r0, r8
 8018ac0:	ea80 000b 	eor.w	r0, r0, fp
 8018ac4:	4405      	add	r5, r0
 8018ac6:	ea47 0402 	orr.w	r4, r7, r2
 8018aca:	ea4f 3077 	mov.w	r0, r7, ror #13
 8018ace:	44ac      	add	ip, r5
 8018ad0:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
 8018ad4:	ea07 0502 	and.w	r5, r7, r2
 8018ad8:	401c      	ands	r4, r3
 8018ada:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
 8018ade:	432c      	orrs	r4, r5
 8018ae0:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018ae2:	f8de 5004 	ldr.w	r5, [lr, #4]
 8018ae6:	f8da 0004 	ldr.w	r0, [sl, #4]
 8018aea:	4405      	add	r5, r0
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018aec:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018aee:	44ab      	add	fp, r5
 8018af0:	ea88 0506 	eor.w	r5, r8, r6
 8018af4:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8018af6:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018af8:	ea85 0406 	eor.w	r4, r5, r6
 8018afc:	eb0b 0504 	add.w	r5, fp, r4
 8018b00:	ea4f 2bf1 	mov.w	fp, r1, ror #11
 8018b04:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
 8018b08:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
 8018b0c:	44ab      	add	fp, r5
 8018b0e:	ea4c 0007 	orr.w	r0, ip, r7
 8018b12:	ea4f 357c 	mov.w	r5, ip, ror #13
 8018b16:	ea0c 0407 	and.w	r4, ip, r7
 8018b1a:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8018b1e:	4010      	ands	r0, r2
 8018b20:	4320      	orrs	r0, r4
 8018b22:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018b26:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018b2a:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018b2c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8018b30:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018b32:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018b34:	4426      	add	r6, r4
 8018b36:	ea81 0408 	eor.w	r4, r1, r8
 8018b3a:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8018b3c:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8018b3e:	ea84 0b08 	eor.w	fp, r4, r8
 8018b42:	eb06 040b 	add.w	r4, r6, fp
 8018b46:	ea4f 26f3 	mov.w	r6, r3, ror #11
 8018b4a:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
 8018b4e:	ea86 6673 	eor.w	r6, r6, r3, ror #25
 8018b52:	4426      	add	r6, r4
 8018b54:	ea4c 0005 	orr.w	r0, ip, r5
 8018b58:	ea4f 3475 	mov.w	r4, r5, ror #13
 8018b5c:	ea0c 0b05 	and.w	fp, ip, r5
 8018b60:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
 8018b64:	4038      	ands	r0, r7
 8018b66:	ea40 000b 	orr.w	r0, r0, fp
 8018b6a:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
 8018b6e:	4404      	add	r4, r0
 8018b70:	4434      	add	r4, r6
 8018b72:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8018b74:	f8de 000c 	ldr.w	r0, [lr, #12]
 8018b78:	f8da 600c 	ldr.w	r6, [sl, #12]
 8018b7c:	ea81 0b03 	eor.w	fp, r1, r3
 8018b80:	4430      	add	r0, r6
 8018b82:	ea0b 0b02 	and.w	fp, fp, r2
 8018b86:	ea4f 26f2 	mov.w	r6, r2, ror #11
 8018b8a:	ea8b 0b01 	eor.w	fp, fp, r1
 8018b8e:	4440      	add	r0, r8
 8018b90:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
 8018b94:	4458      	add	r0, fp
 8018b96:	ea86 6672 	eor.w	r6, r6, r2, ror #25
 8018b9a:	4406      	add	r6, r0
 8018b9c:	eb07 0806 	add.w	r8, r7, r6
 8018ba0:	ea4f 3074 	mov.w	r0, r4, ror #13
 8018ba4:	ea45 0704 	orr.w	r7, r5, r4
 8018ba8:	ea05 0b04 	and.w	fp, r5, r4
 8018bac:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
 8018bb0:	ea07 070c 	and.w	r7, r7, ip
 8018bb4:	ea47 070b 	orr.w	r7, r7, fp
 8018bb8:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
 8018bbc:	4438      	add	r0, r7
 8018bbe:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8018bc0:	f8da 7010 	ldr.w	r7, [sl, #16]
 8018bc4:	f8de 6010 	ldr.w	r6, [lr, #16]
 8018bc8:	ea83 0b02 	eor.w	fp, r3, r2
 8018bcc:	443e      	add	r6, r7
 8018bce:	4431      	add	r1, r6
 8018bd0:	ea0b 0b08 	and.w	fp, fp, r8
 8018bd4:	ea4f 26f8 	mov.w	r6, r8, ror #11
 8018bd8:	ea8b 0b03 	eor.w	fp, fp, r3
 8018bdc:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
 8018be0:	4459      	add	r1, fp
 8018be2:	ea86 6678 	eor.w	r6, r6, r8, ror #25
 8018be6:	440e      	add	r6, r1
 8018be8:	ea44 0700 	orr.w	r7, r4, r0
 8018bec:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018bf0:	ea04 0b00 	and.w	fp, r4, r0
 8018bf4:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8018bf8:	402f      	ands	r7, r5
 8018bfa:	ea47 070b 	orr.w	r7, r7, fp
 8018bfe:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018c02:	4439      	add	r1, r7
 8018c04:	4431      	add	r1, r6
 8018c06:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8018c08:	f8da 7014 	ldr.w	r7, [sl, #20]
 8018c0c:	f8de 6014 	ldr.w	r6, [lr, #20]
 8018c10:	ea82 0b08 	eor.w	fp, r2, r8
 8018c14:	443e      	add	r6, r7
 8018c16:	4433      	add	r3, r6
 8018c18:	ea0b 0b0c 	and.w	fp, fp, ip
 8018c1c:	ea4f 26fc 	mov.w	r6, ip, ror #11
 8018c20:	ea8b 0b02 	eor.w	fp, fp, r2
 8018c24:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
 8018c28:	445b      	add	r3, fp
 8018c2a:	ea86 667c 	eor.w	r6, r6, ip, ror #25
 8018c2e:	441e      	add	r6, r3
 8018c30:	eb05 0b06 	add.w	fp, r5, r6
 8018c34:	ea4f 3371 	mov.w	r3, r1, ror #13
 8018c38:	ea40 0501 	orr.w	r5, r0, r1
 8018c3c:	ea00 0701 	and.w	r7, r0, r1
 8018c40:	4025      	ands	r5, r4
 8018c42:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 8018c46:	433d      	orrs	r5, r7
 8018c48:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8018c4c:	442b      	add	r3, r5
 8018c4e:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8018c50:	f8de 5018 	ldr.w	r5, [lr, #24]
 8018c54:	f8da 6018 	ldr.w	r6, [sl, #24]
 8018c58:	4435      	add	r5, r6
 8018c5a:	4415      	add	r5, r2
 8018c5c:	ea88 020c 	eor.w	r2, r8, ip
 8018c60:	ea02 020b 	and.w	r2, r2, fp
 8018c64:	ea82 0708 	eor.w	r7, r2, r8
 8018c68:	19ea      	adds	r2, r5, r7
 8018c6a:	ea4f 25fb 	mov.w	r5, fp, ror #11
 8018c6e:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
 8018c72:	ea85 657b 	eor.w	r5, r5, fp, ror #25
 8018c76:	4415      	add	r5, r2
 8018c78:	1966      	adds	r6, r4, r5
 8018c7a:	ea4f 3273 	mov.w	r2, r3, ror #13
 8018c7e:	ea41 0403 	orr.w	r4, r1, r3
 8018c82:	4004      	ands	r4, r0
 8018c84:	ea01 0703 	and.w	r7, r1, r3
 8018c88:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8018c8c:	433c      	orrs	r4, r7
 8018c8e:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8018c92:	4422      	add	r2, r4
 8018c94:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8018c96:	f8de 401c 	ldr.w	r4, [lr, #28]
 8018c9a:	f8da 501c 	ldr.w	r5, [sl, #28]
 8018c9e:	1967      	adds	r7, r4, r5
 8018ca0:	44b8      	add	r8, r7
 8018ca2:	ea8c 070b 	eor.w	r7, ip, fp
 8018ca6:	4037      	ands	r7, r6
 8018ca8:	ea87 070c 	eor.w	r7, r7, ip
 8018cac:	4447      	add	r7, r8
 8018cae:	ea4f 28f6 	mov.w	r8, r6, ror #11
 8018cb2:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
 8018cb6:	ea88 6876 	eor.w	r8, r8, r6, ror #25
 8018cba:	4447      	add	r7, r8
 8018cbc:	eb00 0807 	add.w	r8, r0, r7
 8018cc0:	ea43 0402 	orr.w	r4, r3, r2
 8018cc4:	ea4f 3072 	mov.w	r0, r2, ror #13
 8018cc8:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8018ccc:	400c      	ands	r4, r1
 8018cce:	ea03 0502 	and.w	r5, r3, r2
 8018cd2:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
 8018cd6:	432c      	orrs	r4, r5
 8018cd8:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
 8018cda:	4807      	ldr	r0, [pc, #28]	; (8018cf8 <mbedtls_sha256_process+0x2c8>)
 8018cdc:	f10e 0e20 	add.w	lr, lr, #32
 8018ce0:	4570      	cmp	r0, lr
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8018ce2:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
 8018ce4:	f10a 0a20 	add.w	sl, sl, #32
 8018ce8:	f47f aeda 	bne.w	8018aa0 <mbedtls_sha256_process+0x70>
 8018cec:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
 8018cf0:	9007      	str	r0, [sp, #28]
 8018cf2:	e003      	b.n	8018cfc <mbedtls_sha256_process+0x2cc>
 8018cf4:	0802c808 	.word	0x0802c808
 8018cf8:	0802c848 	.word	0x0802c848
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8018cfc:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
 8018d00:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8018d04:	f8d9 4000 	ldr.w	r4, [r9]
 8018d08:	ea4f 4ef0 	mov.w	lr, r0, ror #19
 8018d0c:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
 8018d10:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
 8018d14:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
 8018d18:	ea4f 4ab5 	mov.w	sl, r5, ror #18
 8018d1c:	4420      	add	r0, r4
 8018d1e:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
 8018d22:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
 8018d26:	4486      	add	lr, r0
 8018d28:	ea4f 24f8 	mov.w	r4, r8, ror #11
 8018d2c:	eb0e 000a 	add.w	r0, lr, sl
 8018d30:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
 8018d34:	9004      	str	r0, [sp, #16]
 8018d36:	ea84 6078 	eor.w	r0, r4, r8, ror #25
 8018d3a:	ea8b 0406 	eor.w	r4, fp, r6
 8018d3e:	ea04 0408 	and.w	r4, r4, r8
 8018d42:	ea84 040b 	eor.w	r4, r4, fp
 8018d46:	4404      	add	r4, r0
 8018d48:	9801      	ldr	r0, [sp, #4]
 8018d4a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018d4c:	4420      	add	r0, r4
 8018d4e:	9c04      	ldr	r4, [sp, #16]
 8018d50:	f8c9 4040 	str.w	r4, [r9, #64]	; 0x40
 8018d54:	4420      	add	r0, r4
 8018d56:	4484      	add	ip, r0
 8018d58:	4461      	add	r1, ip
 8018d5a:	9102      	str	r1, [sp, #8]
 8018d5c:	ea47 0002 	orr.w	r0, r7, r2
 8018d60:	ea4f 3177 	mov.w	r1, r7, ror #13
 8018d64:	ea07 0402 	and.w	r4, r7, r2
 8018d68:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
 8018d6c:	4018      	ands	r0, r3
 8018d6e:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
 8018d72:	4320      	orrs	r0, r4
 8018d74:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018d76:	f8d9 103c 	ldr.w	r1, [r9, #60]	; 0x3c
 8018d7a:	f8d9 4008 	ldr.w	r4, [r9, #8]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8018d7e:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018d80:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8018d84:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8018d88:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
 8018d8c:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8018d90:	4429      	add	r1, r5
 8018d92:	4401      	add	r1, r0
 8018d94:	9802      	ldr	r0, [sp, #8]
 8018d96:	ea88 0e06 	eor.w	lr, r8, r6
 8018d9a:	ea0e 0e00 	and.w	lr, lr, r0
 8018d9e:	9801      	ldr	r0, [sp, #4]
 8018da0:	ea4f 45b4 	mov.w	r5, r4, ror #18
 8018da4:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8018da6:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
 8018daa:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
 8018dae:	4429      	add	r1, r5
 8018db0:	4458      	add	r0, fp
 8018db2:	4408      	add	r0, r1
 8018db4:	ea8e 0e06 	eor.w	lr, lr, r6
 8018db8:	4486      	add	lr, r0
 8018dba:	9802      	ldr	r0, [sp, #8]
 8018dbc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8018dc0:	ea4f 25f0 	mov.w	r5, r0, ror #11
 8018dc4:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
 8018dc8:	ea85 6570 	eor.w	r5, r5, r0, ror #25
 8018dcc:	eb05 000e 	add.w	r0, r5, lr
 8018dd0:	eb03 0b00 	add.w	fp, r3, r0
 8018dd4:	ea4f 357c 	mov.w	r5, ip, ror #13
 8018dd8:	ea47 030c 	orr.w	r3, r7, ip
 8018ddc:	ea07 0e0c 	and.w	lr, r7, ip
 8018de0:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
 8018de4:	4013      	ands	r3, r2
 8018de6:	ea43 030e 	orr.w	r3, r3, lr
 8018dea:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
 8018dee:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018df0:	9b04      	ldr	r3, [sp, #16]
 8018df2:	f8d9 e00c 	ldr.w	lr, [r9, #12]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8018df6:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018df8:	ea4f 40f3 	mov.w	r0, r3, ror #19
 8018dfc:	ea80 4073 	eor.w	r0, r0, r3, ror #17
 8018e00:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
 8018e04:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8018e08:	4423      	add	r3, r4
 8018e0a:	4403      	add	r3, r0
 8018e0c:	9802      	ldr	r0, [sp, #8]
 8018e0e:	ea88 0a00 	eor.w	sl, r8, r0
 8018e12:	9801      	ldr	r0, [sp, #4]
 8018e14:	ea4f 44be 	mov.w	r4, lr, ror #18
 8018e18:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8018e1a:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
 8018e1e:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
 8018e22:	4423      	add	r3, r4
 8018e24:	ea0a 0a0b 	and.w	sl, sl, fp
 8018e28:	4430      	add	r0, r6
 8018e2a:	ea4f 24fb 	mov.w	r4, fp, ror #11
 8018e2e:	4418      	add	r0, r3
 8018e30:	ea8a 0a08 	eor.w	sl, sl, r8
 8018e34:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
 8018e38:	ea84 647b 	eor.w	r4, r4, fp, ror #25
 8018e3c:	4482      	add	sl, r0
 8018e3e:	eb04 000a 	add.w	r0, r4, sl
 8018e42:	4402      	add	r2, r0
 8018e44:	ea4c 0405 	orr.w	r4, ip, r5
 8018e48:	ea4f 3675 	mov.w	r6, r5, ror #13
 8018e4c:	9203      	str	r2, [sp, #12]
 8018e4e:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
 8018e52:	ea0c 0205 	and.w	r2, ip, r5
 8018e56:	403c      	ands	r4, r7
 8018e58:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
 8018e5c:	4314      	orrs	r4, r2
 8018e5e:	4434      	add	r4, r6
 8018e60:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018e62:	ea4f 40f1 	mov.w	r0, r1, ror #19
 8018e66:	ea80 4071 	eor.w	r0, r0, r1, ror #17
 8018e6a:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
 8018e6e:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8018e72:	f8d9 2010 	ldr.w	r2, [r9, #16]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8018e76:	f8c9 3048 	str.w	r3, [r9, #72]	; 0x48
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018e7a:	4486      	add	lr, r0
 8018e7c:	4471      	add	r1, lr
 8018e7e:	ea4f 4eb2 	mov.w	lr, r2, ror #18
 8018e82:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
 8018e86:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
 8018e8a:	448e      	add	lr, r1
 8018e8c:	9902      	ldr	r1, [sp, #8]
 8018e8e:	9803      	ldr	r0, [sp, #12]
 8018e90:	ea81 010b 	eor.w	r1, r1, fp
 8018e94:	4001      	ands	r1, r0
 8018e96:	9802      	ldr	r0, [sp, #8]
 8018e98:	4041      	eors	r1, r0
 8018e9a:	9801      	ldr	r0, [sp, #4]
 8018e9c:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8018e9e:	9803      	ldr	r0, [sp, #12]
 8018ea0:	f8c9 e04c 	str.w	lr, [r9, #76]	; 0x4c
 8018ea4:	4446      	add	r6, r8
 8018ea6:	4476      	add	r6, lr
 8018ea8:	4431      	add	r1, r6
 8018eaa:	9e03      	ldr	r6, [sp, #12]
 8018eac:	ea4f 20f0 	mov.w	r0, r0, ror #11
 8018eb0:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
 8018eb4:	ea80 6076 	eor.w	r0, r0, r6, ror #25
 8018eb8:	1846      	adds	r6, r0, r1
 8018eba:	ea45 0004 	orr.w	r0, r5, r4
 8018ebe:	ea05 0104 	and.w	r1, r5, r4
 8018ec2:	ea4f 3874 	mov.w	r8, r4, ror #13
 8018ec6:	ea00 000c 	and.w	r0, r0, ip
 8018eca:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
 8018ece:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018ed0:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ed4:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018ed8:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018edc:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018ede:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
 8018ee2:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8018ee6:	4430      	add	r0, r6
 8018ee8:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8018eec:	f8d9 6014 	ldr.w	r6, [r9, #20]
 8018ef0:	440a      	add	r2, r1
 8018ef2:	4413      	add	r3, r2
 8018ef4:	ea4f 42b6 	mov.w	r2, r6, ror #18
 8018ef8:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
 8018efc:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
 8018f00:	441a      	add	r2, r3
 8018f02:	9b03      	ldr	r3, [sp, #12]
 8018f04:	9902      	ldr	r1, [sp, #8]
 8018f06:	f8c9 2050 	str.w	r2, [r9, #80]	; 0x50
 8018f0a:	ea8b 0703 	eor.w	r7, fp, r3
 8018f0e:	9b01      	ldr	r3, [sp, #4]
 8018f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f12:	4413      	add	r3, r2
 8018f14:	440b      	add	r3, r1
 8018f16:	ea07 070a 	and.w	r7, r7, sl
 8018f1a:	ea4f 21fa 	mov.w	r1, sl, ror #11
 8018f1e:	ea87 070b 	eor.w	r7, r7, fp
 8018f22:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
 8018f26:	441f      	add	r7, r3
 8018f28:	ea81 617a 	eor.w	r1, r1, sl, ror #25
 8018f2c:	19cb      	adds	r3, r1, r7
 8018f2e:	ea44 0700 	orr.w	r7, r4, r0
 8018f32:	ea4f 3170 	mov.w	r1, r0, ror #13
 8018f36:	ea04 0800 	and.w	r8, r4, r0
 8018f3a:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
 8018f3e:	402f      	ands	r7, r5
 8018f40:	ea47 0708 	orr.w	r7, r7, r8
 8018f44:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
 8018f48:	4439      	add	r1, r7
 8018f4a:	4419      	add	r1, r3
 8018f4c:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8018f4e:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8018f52:	f8d9 3038 	ldr.w	r3, [r9, #56]	; 0x38
 8018f56:	ea4f 47fe 	mov.w	r7, lr, ror #19
 8018f5a:	ea87 477e 	eor.w	r7, r7, lr, ror #17
 8018f5e:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
 8018f62:	199f      	adds	r7, r3, r6
 8018f64:	ea4f 43b8 	mov.w	r3, r8, ror #18
 8018f68:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
 8018f6c:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
 8018f70:	4477      	add	r7, lr
 8018f72:	441f      	add	r7, r3
 8018f74:	9b03      	ldr	r3, [sp, #12]
 8018f76:	f8c9 7054 	str.w	r7, [r9, #84]	; 0x54
 8018f7a:	ea83 0e0a 	eor.w	lr, r3, sl
 8018f7e:	ea0e 0e0c 	and.w	lr, lr, ip
 8018f82:	ea8e 0e03 	eor.w	lr, lr, r3
 8018f86:	9b01      	ldr	r3, [sp, #4]
 8018f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018f8a:	443b      	add	r3, r7
 8018f8c:	445b      	add	r3, fp
 8018f8e:	449e      	add	lr, r3
 8018f90:	ea4f 23fc 	mov.w	r3, ip, ror #11
 8018f94:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
 8018f98:	ea83 637c 	eor.w	r3, r3, ip, ror #25
 8018f9c:	eb03 060e 	add.w	r6, r3, lr
 8018fa0:	eb05 0b06 	add.w	fp, r5, r6
 8018fa4:	ea4f 3371 	mov.w	r3, r1, ror #13
 8018fa8:	ea40 0501 	orr.w	r5, r0, r1
 8018fac:	ea00 0e01 	and.w	lr, r0, r1
 8018fb0:	4025      	ands	r5, r4
 8018fb2:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
 8018fb6:	ea45 050e 	orr.w	r5, r5, lr
 8018fba:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
 8018fbe:	442b      	add	r3, r5
 8018fc0:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8018fc2:	f8d9 503c 	ldr.w	r5, [r9, #60]	; 0x3c
 8018fc6:	f8d9 e01c 	ldr.w	lr, [r9, #28]
 8018fca:	ea4f 46f2 	mov.w	r6, r2, ror #19
 8018fce:	ea86 4672 	eor.w	r6, r6, r2, ror #17
 8018fd2:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
 8018fd6:	eb05 0608 	add.w	r6, r5, r8
 8018fda:	4416      	add	r6, r2
 8018fdc:	ea4f 42be 	mov.w	r2, lr, ror #18
 8018fe0:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
 8018fe4:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
 8018fe8:	4416      	add	r6, r2
 8018fea:	9a01      	ldr	r2, [sp, #4]
 8018fec:	f8c9 6058 	str.w	r6, [r9, #88]	; 0x58
 8018ff0:	6d95      	ldr	r5, [r2, #88]	; 0x58
 8018ff2:	9a03      	ldr	r2, [sp, #12]
 8018ff4:	4435      	add	r5, r6
 8018ff6:	ea8a 080c 	eor.w	r8, sl, ip
 8018ffa:	4415      	add	r5, r2
 8018ffc:	ea08 080b 	and.w	r8, r8, fp
 8019000:	ea4f 22fb 	mov.w	r2, fp, ror #11
 8019004:	ea88 080a 	eor.w	r8, r8, sl
 8019008:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
 801900c:	4445      	add	r5, r8
 801900e:	ea82 627b 	eor.w	r2, r2, fp, ror #25
 8019012:	4415      	add	r5, r2
 8019014:	1966      	adds	r6, r4, r5
 8019016:	ea4f 3273 	mov.w	r2, r3, ror #13
 801901a:	ea41 0403 	orr.w	r4, r1, r3
 801901e:	4004      	ands	r4, r0
 8019020:	ea01 0803 	and.w	r8, r1, r3
 8019024:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
 8019028:	ea44 0408 	orr.w	r4, r4, r8
 801902c:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
 8019030:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8019032:	ea4f 44f7 	mov.w	r4, r7, ror #19
 8019036:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 801903a:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 801903c:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
 8019040:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8019044:	9c04      	ldr	r4, [sp, #16]
 8019046:	44a6      	add	lr, r4
 8019048:	ea4f 44b5 	mov.w	r4, r5, ror #18
 801904c:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
 8019050:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
 8019054:	9c01      	ldr	r4, [sp, #4]
 8019056:	4477      	add	r7, lr
 8019058:	6de4      	ldr	r4, [r4, #92]	; 0x5c
 801905a:	443d      	add	r5, r7
 801905c:	ea8c 0e0b 	eor.w	lr, ip, fp
 8019060:	442c      	add	r4, r5
 8019062:	ea0e 0e06 	and.w	lr, lr, r6
 8019066:	ea4f 27f6 	mov.w	r7, r6, ror #11
 801906a:	ea8e 0e0c 	eor.w	lr, lr, ip
 801906e:	4454      	add	r4, sl
 8019070:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
 8019074:	4474      	add	r4, lr
 8019076:	ea87 6776 	eor.w	r7, r7, r6, ror #25
 801907a:	4427      	add	r7, r4
 801907c:	eb00 0807 	add.w	r8, r0, r7
 8019080:	ea43 0402 	orr.w	r4, r3, r2
 8019084:	ea4f 3072 	mov.w	r0, r2, ror #13
 8019088:	f8c9 505c 	str.w	r5, [r9, #92]	; 0x5c
 801908c:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
 8019090:	400c      	ands	r4, r1
 8019092:	ea03 0502 	and.w	r5, r3, r2
 8019096:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
 801909a:	432c      	orrs	r4, r5
 801909c:	4404      	add	r4, r0
 801909e:	9801      	ldr	r0, [sp, #4]
 80190a0:	3020      	adds	r0, #32
 80190a2:	9001      	str	r0, [sp, #4]
    for( i = 16; i < 64; i += 8 )
 80190a4:	9807      	ldr	r0, [sp, #28]
 80190a6:	f109 0920 	add.w	r9, r9, #32
 80190aa:	4548      	cmp	r0, r9
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80190ac:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
 80190ae:	f47f ae25 	bne.w	8018cfc <mbedtls_sha256_process+0x2cc>
 80190b2:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
 80190b6:	e9cd 7208 	strd	r7, r2, [sp, #32]
 80190ba:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
 80190be:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80190c2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
 80190c6:	9b05      	ldr	r3, [sp, #20]
 80190c8:	9900      	ldr	r1, [sp, #0]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	f851 2b04 	ldr.w	r2, [r1], #4
 80190d0:	9100      	str	r1, [sp, #0]
 80190d2:	4413      	add	r3, r2
 80190d4:	9a05      	ldr	r2, [sp, #20]
 80190d6:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
 80190da:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
 80190dc:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
 80190de:	4293      	cmp	r3, r2
 80190e0:	d1f1      	bne.n	80190c6 <mbedtls_sha256_process+0x696>
}
 80190e2:	b051      	add	sp, #324	; 0x144
 80190e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190e8 <mbedtls_sha256_update.part.0>:
#endif /* !MBEDTLS_SHA256_PROCESS_ALT */

/*
 * SHA-256 process buffer
 */
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 80190e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    if( ilen == 0 )
        return;

    left = ctx->total[0] & 0x3F;
 80190ec:	6803      	ldr	r3, [r0, #0]
 80190ee:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;

    ctx->total[0] += (uint32_t) ilen;
 80190f2:	189b      	adds	r3, r3, r2
 80190f4:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
        ctx->total[1]++;
 80190f6:	bf24      	itt	cs
 80190f8:	6843      	ldrcs	r3, [r0, #4]
 80190fa:	3301      	addcs	r3, #1
void mbedtls_sha256_update( mbedtls_sha256_context *ctx, const unsigned char *input,
 80190fc:	4605      	mov	r5, r0
 80190fe:	460e      	mov	r6, r1
 8019100:	4614      	mov	r4, r2
        ctx->total[1]++;
 8019102:	bf28      	it	cs
 8019104:	6043      	strcs	r3, [r0, #4]

    if( left && ilen >= fill )
 8019106:	b197      	cbz	r7, 801912e <mbedtls_sha256_update.part.0+0x46>
    fill = 64 - left;
 8019108:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
 801910c:	4591      	cmp	r9, r2
 801910e:	d80e      	bhi.n	801912e <mbedtls_sha256_update.part.0+0x46>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8019110:	f100 0828 	add.w	r8, r0, #40	; 0x28
 8019114:	464a      	mov	r2, r9
 8019116:	eb08 0007 	add.w	r0, r8, r7
 801911a:	f009 f965 	bl	80223e8 <memcpy>
        mbedtls_sha256_process( ctx, ctx->buffer );
 801911e:	4641      	mov	r1, r8
 8019120:	4628      	mov	r0, r5
 8019122:	f7ff fc85 	bl	8018a30 <mbedtls_sha256_process>
        input += fill;
 8019126:	3c40      	subs	r4, #64	; 0x40
        ilen  -= fill;
 8019128:	443c      	add	r4, r7
        input += fill;
 801912a:	444e      	add	r6, r9
        left = 0;
 801912c:	2700      	movs	r7, #0
 801912e:	46a0      	mov	r8, r4
 8019130:	eb06 0904 	add.w	r9, r6, r4
 8019134:	e004      	b.n	8019140 <mbedtls_sha256_update.part.0+0x58>
    }

    while( ilen >= 64 )
    {
        mbedtls_sha256_process( ctx, input );
 8019136:	4628      	mov	r0, r5
 8019138:	f7ff fc7a 	bl	8018a30 <mbedtls_sha256_process>
        input += 64;
        ilen  -= 64;
 801913c:	f1a8 0840 	sub.w	r8, r8, #64	; 0x40
    while( ilen >= 64 )
 8019140:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8019144:	eba9 0108 	sub.w	r1, r9, r8
 8019148:	d8f5      	bhi.n	8019136 <mbedtls_sha256_update.part.0+0x4e>
 801914a:	09a2      	lsrs	r2, r4, #6
 801914c:	f06f 033f 	mvn.w	r3, #63	; 0x3f
 8019150:	f024 013f 	bic.w	r1, r4, #63	; 0x3f
 8019154:	fb03 4202 	mla	r2, r3, r2, r4
    }

    if( ilen > 0 )
 8019158:	4431      	add	r1, r6
 801915a:	b132      	cbz	r2, 801916a <mbedtls_sha256_update.part.0+0x82>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 801915c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019160:	4438      	add	r0, r7
}
 8019162:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019166:	f009 b93f 	b.w	80223e8 <memcpy>
}
 801916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801916e <mbedtls_sha256_update>:
    if( ilen == 0 )
 801916e:	b10a      	cbz	r2, 8019174 <mbedtls_sha256_update+0x6>
 8019170:	f7ff bfba 	b.w	80190e8 <mbedtls_sha256_update.part.0>
}
 8019174:	4770      	bx	lr
	...

08019178 <mbedtls_sha256_finish>:

/*
 * SHA-256 final digest
 */
void mbedtls_sha256_finish( mbedtls_sha256_context *ctx, unsigned char output[32] )
{
 8019178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801917a:	460d      	mov	r5, r1
    uint32_t last, padn;
    uint32_t high, low;
    unsigned char msglen[8];

    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
 801917c:	e9d0 2100 	ldrd	r2, r1, [r0]
    high = ( ctx->total[0] >> 29 )
 8019180:	0f53      	lsrs	r3, r2, #29
 8019182:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8019186:	ba1b      	rev	r3, r3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, msglen, 0 );
 8019188:	9300      	str	r3, [sp, #0]
    low  = ( ctx->total[0] <<  3 );
 801918a:	00d3      	lsls	r3, r2, #3
    PUT_UINT32_BE( low,  msglen, 4 );

    last = ctx->total[0] & 0x3F;
 801918c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8019190:	2a37      	cmp	r2, #55	; 0x37
{
 8019192:	4604      	mov	r4, r0
 8019194:	ba1b      	rev	r3, r3
    padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
 8019196:	bf94      	ite	ls
 8019198:	f1c2 0238 	rsbls	r2, r2, #56	; 0x38
 801919c:	f1c2 0278 	rsbhi	r2, r2, #120	; 0x78

    mbedtls_sha256_update( ctx, sha256_padding, padn );
 80191a0:	492b      	ldr	r1, [pc, #172]	; (8019250 <mbedtls_sha256_finish+0xd8>)
    PUT_UINT32_BE( low,  msglen, 4 );
 80191a2:	9301      	str	r3, [sp, #4]
    mbedtls_sha256_update( ctx, sha256_padding, padn );
 80191a4:	f7ff ffe3 	bl	801916e <mbedtls_sha256_update>
    if( ilen == 0 )
 80191a8:	2208      	movs	r2, #8
 80191aa:	4669      	mov	r1, sp
 80191ac:	4620      	mov	r0, r4
 80191ae:	f7ff ff9b 	bl	80190e8 <mbedtls_sha256_update.part.0>
    mbedtls_sha256_update( ctx, msglen, 8 );

    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80191b2:	7ae3      	ldrb	r3, [r4, #11]
 80191b4:	702b      	strb	r3, [r5, #0]
 80191b6:	8963      	ldrh	r3, [r4, #10]
 80191b8:	706b      	strb	r3, [r5, #1]
 80191ba:	68a3      	ldr	r3, [r4, #8]
 80191bc:	0a1b      	lsrs	r3, r3, #8
 80191be:	70ab      	strb	r3, [r5, #2]
 80191c0:	68a3      	ldr	r3, [r4, #8]
 80191c2:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80191c4:	7be3      	ldrb	r3, [r4, #15]
 80191c6:	712b      	strb	r3, [r5, #4]
 80191c8:	89e3      	ldrh	r3, [r4, #14]
 80191ca:	716b      	strb	r3, [r5, #5]
 80191cc:	68e3      	ldr	r3, [r4, #12]
 80191ce:	0a1b      	lsrs	r3, r3, #8
 80191d0:	71ab      	strb	r3, [r5, #6]
 80191d2:	68e3      	ldr	r3, [r4, #12]
 80191d4:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80191d6:	7ce3      	ldrb	r3, [r4, #19]
 80191d8:	722b      	strb	r3, [r5, #8]
 80191da:	8a63      	ldrh	r3, [r4, #18]
 80191dc:	726b      	strb	r3, [r5, #9]
 80191de:	6923      	ldr	r3, [r4, #16]
 80191e0:	0a1b      	lsrs	r3, r3, #8
 80191e2:	72ab      	strb	r3, [r5, #10]
 80191e4:	6923      	ldr	r3, [r4, #16]
 80191e6:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80191e8:	7de3      	ldrb	r3, [r4, #23]
 80191ea:	732b      	strb	r3, [r5, #12]
 80191ec:	8ae3      	ldrh	r3, [r4, #22]
 80191ee:	736b      	strb	r3, [r5, #13]
 80191f0:	6963      	ldr	r3, [r4, #20]
 80191f2:	0a1b      	lsrs	r3, r3, #8
 80191f4:	73ab      	strb	r3, [r5, #14]
 80191f6:	6963      	ldr	r3, [r4, #20]
 80191f8:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80191fa:	7ee3      	ldrb	r3, [r4, #27]
 80191fc:	742b      	strb	r3, [r5, #16]
 80191fe:	8b63      	ldrh	r3, [r4, #26]
 8019200:	746b      	strb	r3, [r5, #17]
 8019202:	69a3      	ldr	r3, [r4, #24]
 8019204:	0a1b      	lsrs	r3, r3, #8
 8019206:	74ab      	strb	r3, [r5, #18]
 8019208:	69a3      	ldr	r3, [r4, #24]
 801920a:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 801920c:	7fe3      	ldrb	r3, [r4, #31]
 801920e:	752b      	strb	r3, [r5, #20]
 8019210:	8be3      	ldrh	r3, [r4, #30]
 8019212:	756b      	strb	r3, [r5, #21]
 8019214:	69e3      	ldr	r3, [r4, #28]
 8019216:	0a1b      	lsrs	r3, r3, #8
 8019218:	75ab      	strb	r3, [r5, #22]
 801921a:	69e3      	ldr	r3, [r4, #28]
 801921c:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 801921e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8019222:	762b      	strb	r3, [r5, #24]
 8019224:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8019226:	766b      	strb	r3, [r5, #25]
 8019228:	6a23      	ldr	r3, [r4, #32]
 801922a:	0a1b      	lsrs	r3, r3, #8
 801922c:	76ab      	strb	r3, [r5, #26]
 801922e:	6a23      	ldr	r3, [r4, #32]
 8019230:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
 8019232:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8019234:	b94b      	cbnz	r3, 801924a <mbedtls_sha256_finish+0xd2>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8019236:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801923a:	772b      	strb	r3, [r5, #28]
 801923c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801923e:	776b      	strb	r3, [r5, #29]
 8019240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019242:	0a1b      	lsrs	r3, r3, #8
 8019244:	77ab      	strb	r3, [r5, #30]
 8019246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019248:	77eb      	strb	r3, [r5, #31]
}
 801924a:	b003      	add	sp, #12
 801924c:	bd30      	pop	{r4, r5, pc}
 801924e:	bf00      	nop
 8019250:	0802c908 	.word	0x0802c908

08019254 <mbedtls_sha256>:
/*
 * output = SHA-256( input buffer )
 */
void mbedtls_sha256( const unsigned char *input, size_t ilen,
             unsigned char output[32], int is224 )
{
 8019254:	b570      	push	{r4, r5, r6, lr}
 8019256:	b09e      	sub	sp, #120	; 0x78
 8019258:	4605      	mov	r5, r0
    mbedtls_sha256_context ctx;

    mbedtls_sha256_init( &ctx );
 801925a:	a803      	add	r0, sp, #12
{
 801925c:	9301      	str	r3, [sp, #4]
 801925e:	4614      	mov	r4, r2
 8019260:	460e      	mov	r6, r1
    mbedtls_sha256_init( &ctx );
 8019262:	f7ff fb80 	bl	8018966 <mbedtls_sha256_init>
    mbedtls_sha256_starts( &ctx, is224 );
 8019266:	9901      	ldr	r1, [sp, #4]
 8019268:	a803      	add	r0, sp, #12
 801926a:	f7ff fb8f 	bl	801898c <mbedtls_sha256_starts>
    mbedtls_sha256_update( &ctx, input, ilen );
 801926e:	4632      	mov	r2, r6
 8019270:	4629      	mov	r1, r5
 8019272:	a803      	add	r0, sp, #12
 8019274:	f7ff ff7b 	bl	801916e <mbedtls_sha256_update>
    mbedtls_sha256_finish( &ctx, output );
 8019278:	4621      	mov	r1, r4
 801927a:	a803      	add	r0, sp, #12
 801927c:	f7ff ff7c 	bl	8019178 <mbedtls_sha256_finish>
    mbedtls_sha256_free( &ctx );
 8019280:	a803      	add	r0, sp, #12
 8019282:	f7ff fb74 	bl	801896e <mbedtls_sha256_free>
}
 8019286:	b01e      	add	sp, #120	; 0x78
 8019288:	bd70      	pop	{r4, r5, r6, pc}

0801928a <mbedtls_sha512_init>:
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 801928a:	22d8      	movs	r2, #216	; 0xd8
 801928c:	2100      	movs	r1, #0
 801928e:	f009 b8d3 	b.w	8022438 <memset>

08019292 <mbedtls_sha512_free>:
}

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
    if( ctx == NULL )
 8019292:	b120      	cbz	r0, 801929e <mbedtls_sha512_free+0xc>
 8019294:	f100 03d8 	add.w	r3, r0, #216	; 0xd8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 8019298:	2200      	movs	r2, #0
 801929a:	4298      	cmp	r0, r3
 801929c:	d100      	bne.n	80192a0 <mbedtls_sha512_free+0xe>
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
}
 801929e:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80192a0:	f800 2b01 	strb.w	r2, [r0], #1
 80192a4:	e7f9      	b.n	801929a <mbedtls_sha512_free+0x8>

080192a6 <mbedtls_sha512_clone>:

void mbedtls_sha512_clone( mbedtls_sha512_context *dst,
                           const mbedtls_sha512_context *src )
{
 80192a6:	b508      	push	{r3, lr}
    *dst = *src;
 80192a8:	22d8      	movs	r2, #216	; 0xd8
 80192aa:	f009 f89d 	bl	80223e8 <memcpy>
}
 80192ae:	bd08      	pop	{r3, pc}

080192b0 <mbedtls_sha512_starts>:
/*
 * SHA-512 context setup
 */
void mbedtls_sha512_starts( mbedtls_sha512_context *ctx, int is384 )
{
    ctx->total[0] = 0;
 80192b0:	2200      	movs	r2, #0
 80192b2:	2300      	movs	r3, #0
 80192b4:	e9c0 2300 	strd	r2, r3, [r0]
    ctx->total[1] = 0;
 80192b8:	e9c0 2302 	strd	r2, r3, [r0, #8]

    if( is384 == 0 )
 80192bc:	bb51      	cbnz	r1, 8019314 <mbedtls_sha512_starts+0x64>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 80192be:	a32a      	add	r3, pc, #168	; (adr r3, 8019368 <mbedtls_sha512_starts+0xb8>)
 80192c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 80192c8:	a329      	add	r3, pc, #164	; (adr r3, 8019370 <mbedtls_sha512_starts+0xc0>)
 80192ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ce:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 80192d2:	a329      	add	r3, pc, #164	; (adr r3, 8019378 <mbedtls_sha512_starts+0xc8>)
 80192d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192d8:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 80192dc:	a328      	add	r3, pc, #160	; (adr r3, 8019380 <mbedtls_sha512_starts+0xd0>)
 80192de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192e2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 80192e6:	a328      	add	r3, pc, #160	; (adr r3, 8019388 <mbedtls_sha512_starts+0xd8>)
 80192e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ec:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 80192f0:	a327      	add	r3, pc, #156	; (adr r3, 8019390 <mbedtls_sha512_starts+0xe0>)
 80192f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f6:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 80192fa:	a327      	add	r3, pc, #156	; (adr r3, 8019398 <mbedtls_sha512_starts+0xe8>)
 80192fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019300:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 8019304:	a326      	add	r3, pc, #152	; (adr r3, 80193a0 <mbedtls_sha512_starts+0xf0>)
 8019306:	e9d3 2300 	ldrd	r2, r3, [r3]
        ctx->state[2] = UL64(0x9159015A3070DD17);
        ctx->state[3] = UL64(0x152FECD8F70E5939);
        ctx->state[4] = UL64(0x67332667FFC00B31);
        ctx->state[5] = UL64(0x8EB44A8768581511);
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 801930a:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
    }

    ctx->is384 = is384;
 801930e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
}
 8019312:	4770      	bx	lr
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 8019314:	a324      	add	r3, pc, #144	; (adr r3, 80193a8 <mbedtls_sha512_starts+0xf8>)
 8019316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801931a:	e9c0 2304 	strd	r2, r3, [r0, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 801931e:	a324      	add	r3, pc, #144	; (adr r3, 80193b0 <mbedtls_sha512_starts+0x100>)
 8019320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019324:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 8019328:	a323      	add	r3, pc, #140	; (adr r3, 80193b8 <mbedtls_sha512_starts+0x108>)
 801932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801932e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 8019332:	a323      	add	r3, pc, #140	; (adr r3, 80193c0 <mbedtls_sha512_starts+0x110>)
 8019334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019338:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 801933c:	a322      	add	r3, pc, #136	; (adr r3, 80193c8 <mbedtls_sha512_starts+0x118>)
 801933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019342:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8019346:	a322      	add	r3, pc, #136	; (adr r3, 80193d0 <mbedtls_sha512_starts+0x120>)
 8019348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934c:	e9c0 230e 	strd	r2, r3, [r0, #56]	; 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 8019350:	a321      	add	r3, pc, #132	; (adr r3, 80193d8 <mbedtls_sha512_starts+0x128>)
 8019352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019356:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 801935a:	a321      	add	r3, pc, #132	; (adr r3, 80193e0 <mbedtls_sha512_starts+0x130>)
 801935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019360:	e7d3      	b.n	801930a <mbedtls_sha512_starts+0x5a>
 8019362:	bf00      	nop
 8019364:	f3af 8000 	nop.w
 8019368:	f3bcc908 	.word	0xf3bcc908
 801936c:	6a09e667 	.word	0x6a09e667
 8019370:	84caa73b 	.word	0x84caa73b
 8019374:	bb67ae85 	.word	0xbb67ae85
 8019378:	fe94f82b 	.word	0xfe94f82b
 801937c:	3c6ef372 	.word	0x3c6ef372
 8019380:	5f1d36f1 	.word	0x5f1d36f1
 8019384:	a54ff53a 	.word	0xa54ff53a
 8019388:	ade682d1 	.word	0xade682d1
 801938c:	510e527f 	.word	0x510e527f
 8019390:	2b3e6c1f 	.word	0x2b3e6c1f
 8019394:	9b05688c 	.word	0x9b05688c
 8019398:	fb41bd6b 	.word	0xfb41bd6b
 801939c:	1f83d9ab 	.word	0x1f83d9ab
 80193a0:	137e2179 	.word	0x137e2179
 80193a4:	5be0cd19 	.word	0x5be0cd19
 80193a8:	c1059ed8 	.word	0xc1059ed8
 80193ac:	cbbb9d5d 	.word	0xcbbb9d5d
 80193b0:	367cd507 	.word	0x367cd507
 80193b4:	629a292a 	.word	0x629a292a
 80193b8:	3070dd17 	.word	0x3070dd17
 80193bc:	9159015a 	.word	0x9159015a
 80193c0:	f70e5939 	.word	0xf70e5939
 80193c4:	152fecd8 	.word	0x152fecd8
 80193c8:	ffc00b31 	.word	0xffc00b31
 80193cc:	67332667 	.word	0x67332667
 80193d0:	68581511 	.word	0x68581511
 80193d4:	8eb44a87 	.word	0x8eb44a87
 80193d8:	64f98fa7 	.word	0x64f98fa7
 80193dc:	db0c2e0d 	.word	0xdb0c2e0d
 80193e0:	befa4fa4 	.word	0xbefa4fa4
 80193e4:	47b5481d 	.word	0x47b5481d

080193e8 <mbedtls_sha512_process>:
    UL64(0x4CC5D4BECB3E42B6),  UL64(0x597F299CFC657E2A),
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

void mbedtls_sha512_process( mbedtls_sha512_context *ctx, const unsigned char data[128] )
{
 80193e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ec:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80193f0:	f101 0780 	add.w	r7, r1, #128	; 0x80
 80193f4:	9000      	str	r0, [sp, #0]
 80193f6:	a81e      	add	r0, sp, #120	; 0x78
 80193f8:	4606      	mov	r6, r0
    d += temp1; h = temp1 + temp2;              \
}

    for( i = 0; i < 16; i++ )
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 80193fa:	784a      	ldrb	r2, [r1, #1]
 80193fc:	780c      	ldrb	r4, [r1, #0]
 80193fe:	f891 8002 	ldrb.w	r8, [r1, #2]
 8019402:	79cb      	ldrb	r3, [r1, #7]
 8019404:	f891 a004 	ldrb.w	sl, [r1, #4]
 8019408:	0412      	lsls	r2, r2, #16
 801940a:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801940e:	ea42 2508 	orr.w	r5, r2, r8, lsl #8
 8019412:	794a      	ldrb	r2, [r1, #5]
 8019414:	f891 8003 	ldrb.w	r8, [r1, #3]
 8019418:	ea43 640a 	orr.w	r4, r3, sl, lsl #24
 801941c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019420:	798a      	ldrb	r2, [r1, #6]
 8019422:	3108      	adds	r1, #8
 8019424:	ea44 2202 	orr.w	r2, r4, r2, lsl #8
 8019428:	ea45 0508 	orr.w	r5, r5, r8
    for( i = 0; i < 16; i++ )
 801942c:	428f      	cmp	r7, r1
        GET_UINT64_BE( W[i], data, i << 3 );
 801942e:	e9c6 2500 	strd	r2, r5, [r6]
 8019432:	f106 0608 	add.w	r6, r6, #8
    for( i = 0; i < 16; i++ )
 8019436:	d1e0      	bne.n	80193fa <mbedtls_sha512_process+0x12>
 8019438:	4601      	mov	r1, r0
 801943a:	2610      	movs	r6, #16
    }

    for( ; i < 80; i++ )
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 801943c:	e9d1 421c 	ldrd	r4, r2, [r1, #112]	; 0x70
 8019440:	0ce3      	lsrs	r3, r4, #19
 8019442:	ea4f 4cd2 	mov.w	ip, r2, lsr #19
 8019446:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801944a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 801944e:	ea48 7854 	orr.w	r8, r8, r4, lsr #29
 8019452:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8019456:	ea4c 3c44 	orr.w	ip, ip, r4, lsl #13
 801945a:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 801945e:	09a4      	lsrs	r4, r4, #6
 8019460:	468e      	mov	lr, r1
 8019462:	ea8c 0c08 	eor.w	ip, ip, r8
 8019466:	ea44 6482 	orr.w	r4, r4, r2, lsl #26
 801946a:	ea83 0309 	eor.w	r3, r3, r9
 801946e:	4063      	eors	r3, r4
 8019470:	ea8c 1c92 	eor.w	ip, ip, r2, lsr #6
               S0(W[i - 15]) + W[i - 16];
 8019474:	e9de 4212 	ldrd	r4, r2, [lr, #72]	; 0x48
 8019478:	e9de 8e00 	ldrd	r8, lr, [lr]
 801947c:	e9d1 7502 	ldrd	r7, r5, [r1, #8]
 8019480:	eb14 0408 	adds.w	r4, r4, r8
 8019484:	eb42 020e 	adc.w	r2, r2, lr
 8019488:	191b      	adds	r3, r3, r4
 801948a:	eb4c 0c02 	adc.w	ip, ip, r2
 801948e:	087c      	lsrs	r4, r7, #1
 8019490:	0a3a      	lsrs	r2, r7, #8
 8019492:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8019496:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
 801949a:	ea4f 0e55 	mov.w	lr, r5, lsr #1
 801949e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 80194a2:	4054      	eors	r4, r2
 80194a4:	09fa      	lsrs	r2, r7, #7
 80194a6:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80194aa:	ea4e 7ec7 	orr.w	lr, lr, r7, lsl #31
 80194ae:	ea48 6807 	orr.w	r8, r8, r7, lsl #24
 80194b2:	ea8e 0e08 	eor.w	lr, lr, r8
 80194b6:	4062      	eors	r2, r4
 80194b8:	189a      	adds	r2, r3, r2
 80194ba:	ea8e 15d5 	eor.w	r5, lr, r5, lsr #7
    for( ; i < 80; i++ )
 80194be:	f106 0601 	add.w	r6, r6, #1
               S0(W[i - 15]) + W[i - 16];
 80194c2:	eb4c 0505 	adc.w	r5, ip, r5
 80194c6:	3108      	adds	r1, #8
    for( ; i < 80; i++ )
 80194c8:	2e50      	cmp	r6, #80	; 0x50
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80194ca:	e9c1 251e 	strd	r2, r5, [r1, #120]	; 0x78
    for( ; i < 80; i++ )
 80194ce:	d1b5      	bne.n	801943c <mbedtls_sha512_process+0x54>
    }

    A = ctx->state[0];
 80194d0:	9b00      	ldr	r3, [sp, #0]
 80194d2:	4926      	ldr	r1, [pc, #152]	; (801956c <mbedtls_sha512_process+0x184>)
 80194d4:	691b      	ldr	r3, [r3, #16]
 80194d6:	930e      	str	r3, [sp, #56]	; 0x38
 80194d8:	9b00      	ldr	r3, [sp, #0]
 80194da:	695b      	ldr	r3, [r3, #20]
 80194dc:	930f      	str	r3, [sp, #60]	; 0x3c
    B = ctx->state[1];
 80194de:	9b00      	ldr	r3, [sp, #0]
 80194e0:	699b      	ldr	r3, [r3, #24]
 80194e2:	9310      	str	r3, [sp, #64]	; 0x40
 80194e4:	9b00      	ldr	r3, [sp, #0]
 80194e6:	69db      	ldr	r3, [r3, #28]
 80194e8:	9311      	str	r3, [sp, #68]	; 0x44
    C = ctx->state[2];
 80194ea:	9b00      	ldr	r3, [sp, #0]
 80194ec:	6a1b      	ldr	r3, [r3, #32]
 80194ee:	9312      	str	r3, [sp, #72]	; 0x48
 80194f0:	9b00      	ldr	r3, [sp, #0]
 80194f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f4:	9313      	str	r3, [sp, #76]	; 0x4c
    D = ctx->state[3];
 80194f6:	9b00      	ldr	r3, [sp, #0]
 80194f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194fa:	9314      	str	r3, [sp, #80]	; 0x50
 80194fc:	9b00      	ldr	r3, [sp, #0]
 80194fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019500:	9315      	str	r3, [sp, #84]	; 0x54
    E = ctx->state[4];
 8019502:	9b00      	ldr	r3, [sp, #0]
 8019504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019506:	9316      	str	r3, [sp, #88]	; 0x58
 8019508:	9b00      	ldr	r3, [sp, #0]
 801950a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801950c:	9317      	str	r3, [sp, #92]	; 0x5c
    F = ctx->state[5];
 801950e:	9b00      	ldr	r3, [sp, #0]
 8019510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019512:	9318      	str	r3, [sp, #96]	; 0x60
 8019514:	9b00      	ldr	r3, [sp, #0]
 8019516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019518:	9319      	str	r3, [sp, #100]	; 0x64
    G = ctx->state[6];
 801951a:	9b00      	ldr	r3, [sp, #0]
 801951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801951e:	931a      	str	r3, [sp, #104]	; 0x68
 8019520:	9b00      	ldr	r3, [sp, #0]
 8019522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019524:	931b      	str	r3, [sp, #108]	; 0x6c
    H = ctx->state[7];
 8019526:	9b00      	ldr	r3, [sp, #0]
 8019528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801952a:	931c      	str	r3, [sp, #112]	; 0x70
 801952c:	9b00      	ldr	r3, [sp, #0]
 801952e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019530:	931d      	str	r3, [sp, #116]	; 0x74
 8019532:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019534:	930b      	str	r3, [sp, #44]	; 0x2c
 8019536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019538:	930c      	str	r3, [sp, #48]	; 0x30
    G = ctx->state[6];
 801953a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801953c:	9309      	str	r3, [sp, #36]	; 0x24
 801953e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019540:	930a      	str	r3, [sp, #40]	; 0x28
    F = ctx->state[5];
 8019542:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019544:	9307      	str	r3, [sp, #28]
 8019546:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019548:	9308      	str	r3, [sp, #32]
    E = ctx->state[4];
 801954a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801954c:	9305      	str	r3, [sp, #20]
 801954e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019550:	9306      	str	r3, [sp, #24]
    D = ctx->state[3];
 8019552:	e9dd a314 	ldrd	sl, r3, [sp, #80]	; 0x50
 8019556:	9304      	str	r3, [sp, #16]
    C = ctx->state[2];
 8019558:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801955a:	9302      	str	r3, [sp, #8]
    B = ctx->state[1];
 801955c:	e9dd ce10 	ldrd	ip, lr, [sp, #64]	; 0x40
    C = ctx->state[2];
 8019560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019562:	9303      	str	r3, [sp, #12]
    A = ctx->state[0];
 8019564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019568:	9301      	str	r3, [sp, #4]
 801956a:	e001      	b.n	8019570 <mbedtls_sha512_process+0x188>
 801956c:	0802cac0 	.word	0x0802cac0
    i = 0;

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 8019570:	9c05      	ldr	r4, [sp, #20]
 8019572:	9e05      	ldr	r6, [sp, #20]
 8019574:	9b01      	ldr	r3, [sp, #4]
 8019576:	ea4f 3894 	mov.w	r8, r4, lsr #14
 801957a:	9c06      	ldr	r4, [sp, #24]
 801957c:	ea48 4884 	orr.w	r8, r8, r4, lsl #18
 8019580:	ea4f 3994 	mov.w	r9, r4, lsr #14
 8019584:	9c05      	ldr	r4, [sp, #20]
 8019586:	ea49 4984 	orr.w	r9, r9, r4, lsl #18
 801958a:	0ca5      	lsrs	r5, r4, #18
 801958c:	9c06      	ldr	r4, [sp, #24]
 801958e:	ea45 3584 	orr.w	r5, r5, r4, lsl #14
 8019592:	0ca4      	lsrs	r4, r4, #18
 8019594:	ea44 3486 	orr.w	r4, r4, r6, lsl #14
 8019598:	ea89 0904 	eor.w	r9, r9, r4
 801959c:	9c06      	ldr	r4, [sp, #24]
 801959e:	05e4      	lsls	r4, r4, #23
 80195a0:	ea44 2456 	orr.w	r4, r4, r6, lsr #9
 80195a4:	ea88 0805 	eor.w	r8, r8, r5
 80195a8:	05f5      	lsls	r5, r6, #23
 80195aa:	9e06      	ldr	r6, [sp, #24]
 80195ac:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
 80195b0:	ea88 0805 	eor.w	r8, r8, r5
 80195b4:	ea89 0904 	eor.w	r9, r9, r4
 80195b8:	e9d1 5700 	ldrd	r5, r7, [r1]
 80195bc:	e9d0 6400 	ldrd	r6, r4, [r0]
 80195c0:	19ad      	adds	r5, r5, r6
 80195c2:	eb47 0404 	adc.w	r4, r7, r4
 80195c6:	9e07      	ldr	r6, [sp, #28]
 80195c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80195ca:	ea86 0b07 	eor.w	fp, r6, r7
 80195ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80195d0:	9e08      	ldr	r6, [sp, #32]
 80195d2:	407e      	eors	r6, r7
 80195d4:	9f05      	ldr	r7, [sp, #20]
 80195d6:	ea0b 0b07 	and.w	fp, fp, r7
 80195da:	9f06      	ldr	r7, [sp, #24]
 80195dc:	403e      	ands	r6, r7
 80195de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80195e0:	ea8b 0b07 	eor.w	fp, fp, r7
 80195e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80195e6:	eb18 0505 	adds.w	r5, r8, r5
 80195ea:	eb49 0404 	adc.w	r4, r9, r4
 80195ee:	407e      	eors	r6, r7
 80195f0:	eb15 050b 	adds.w	r5, r5, fp
 80195f4:	eb46 0404 	adc.w	r4, r6, r4
 80195f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80195fa:	19ad      	adds	r5, r5, r6
 80195fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80195fe:	eb44 0606 	adc.w	r6, r4, r6
 8019602:	4634      	mov	r4, r6
 8019604:	eb1a 0605 	adds.w	r6, sl, r5
 8019608:	960b      	str	r6, [sp, #44]	; 0x2c
 801960a:	9e04      	ldr	r6, [sp, #16]
 801960c:	eb44 0606 	adc.w	r6, r4, r6
 8019610:	960d      	str	r6, [sp, #52]	; 0x34
 8019612:	ea4f 7913 	mov.w	r9, r3, lsr #28
 8019616:	079e      	lsls	r6, r3, #30
 8019618:	ea46 0692 	orr.w	r6, r6, r2, lsr #2
 801961c:	ea49 1902 	orr.w	r9, r9, r2, lsl #4
 8019620:	ea4f 7812 	mov.w	r8, r2, lsr #28
 8019624:	0797      	lsls	r7, r2, #30
 8019626:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
 801962a:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
 801962e:	ea89 0906 	eor.w	r9, r9, r6
 8019632:	065e      	lsls	r6, r3, #25
 8019634:	ea46 16d2 	orr.w	r6, r6, r2, lsr #7
 8019638:	ea88 0807 	eor.w	r8, r8, r7
 801963c:	0657      	lsls	r7, r2, #25
 801963e:	ea47 17d3 	orr.w	r7, r7, r3, lsr #7
 8019642:	ea89 0906 	eor.w	r9, r9, r6
 8019646:	ea43 060c 	orr.w	r6, r3, ip
 801964a:	9b02      	ldr	r3, [sp, #8]
 801964c:	401e      	ands	r6, r3
 801964e:	9b03      	ldr	r3, [sp, #12]
 8019650:	ea88 0807 	eor.w	r8, r8, r7
 8019654:	ea42 070e 	orr.w	r7, r2, lr
 8019658:	401f      	ands	r7, r3
 801965a:	9b01      	ldr	r3, [sp, #4]
 801965c:	ea03 0b0c 	and.w	fp, r3, ip
 8019660:	ea02 0a0e 	and.w	sl, r2, lr
 8019664:	ea46 060b 	orr.w	r6, r6, fp
 8019668:	eb19 0606 	adds.w	r6, r9, r6
 801966c:	ea47 070a 	orr.w	r7, r7, sl
 8019670:	eb48 0707 	adc.w	r7, r8, r7
 8019674:	1973      	adds	r3, r6, r5
 8019676:	9304      	str	r3, [sp, #16]
 8019678:	eb47 0304 	adc.w	r3, r7, r4
 801967c:	930c      	str	r3, [sp, #48]	; 0x30
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 801967e:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
 8019682:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
 8019686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019688:	19a4      	adds	r4, r4, r6
 801968a:	eb47 0505 	adc.w	r5, r7, r5
 801968e:	18e4      	adds	r4, r4, r3
 8019690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019692:	eb45 0803 	adc.w	r8, r5, r3
 8019696:	9b05      	ldr	r3, [sp, #20]
 8019698:	9d07      	ldr	r5, [sp, #28]
 801969a:	ea83 0a05 	eor.w	sl, r3, r5
 801969e:	9b06      	ldr	r3, [sp, #24]
 80196a0:	9d08      	ldr	r5, [sp, #32]
 80196a2:	405d      	eors	r5, r3
 80196a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196a6:	ea0a 0a03 	and.w	sl, sl, r3
 80196aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196ac:	401d      	ands	r5, r3
 80196ae:	9b07      	ldr	r3, [sp, #28]
 80196b0:	ea8a 0a03 	eor.w	sl, sl, r3
 80196b4:	9b08      	ldr	r3, [sp, #32]
 80196b6:	ea85 0903 	eor.w	r9, r5, r3
 80196ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196bc:	eb14 0a0a 	adds.w	sl, r4, sl
 80196c0:	ea4f 3493 	mov.w	r4, r3, lsr #14
 80196c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196c6:	eb48 0509 	adc.w	r5, r8, r9
 80196ca:	ea4f 3b93 	mov.w	fp, r3, lsr #14
 80196ce:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
 80196d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196d4:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
 80196d8:	0c9c      	lsrs	r4, r3, #18
 80196da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196dc:	ea4f 4b93 	mov.w	fp, r3, lsr #18
 80196e0:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 80196e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196e6:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
 80196ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196ec:	ea88 0b06 	eor.w	fp, r8, r6
 80196f0:	ea4f 58c3 	mov.w	r8, r3, lsl #23
 80196f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80196f6:	ea89 0404 	eor.w	r4, r9, r4
 80196fa:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
 80196fe:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 8019702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019704:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
 8019708:	ea84 0409 	eor.w	r4, r4, r9
 801970c:	9b02      	ldr	r3, [sp, #8]
 801970e:	eb1a 0404 	adds.w	r4, sl, r4
 8019712:	ea8b 0808 	eor.w	r8, fp, r8
 8019716:	eb45 0808 	adc.w	r8, r5, r8
 801971a:	191b      	adds	r3, r3, r4
 801971c:	9309      	str	r3, [sp, #36]	; 0x24
 801971e:	9b03      	ldr	r3, [sp, #12]
 8019720:	eb43 0308 	adc.w	r3, r3, r8
 8019724:	930a      	str	r3, [sp, #40]	; 0x28
 8019726:	9b04      	ldr	r3, [sp, #16]
 8019728:	0f1f      	lsrs	r7, r3, #28
 801972a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801972c:	0f1e      	lsrs	r6, r3, #28
 801972e:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 8019732:	9b04      	ldr	r3, [sp, #16]
 8019734:	ea46 1903 	orr.w	r9, r6, r3, lsl #4
 8019738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801973a:	079e      	lsls	r6, r3, #30
 801973c:	9b04      	ldr	r3, [sp, #16]
 801973e:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 8019742:	079d      	lsls	r5, r3, #30
 8019744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019746:	ea89 0606 	eor.w	r6, r9, r6
 801974a:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
 801974e:	ea4f 6943 	mov.w	r9, r3, lsl #25
 8019752:	9b04      	ldr	r3, [sp, #16]
 8019754:	406f      	eors	r7, r5
 8019756:	ea49 19d3 	orr.w	r9, r9, r3, lsr #7
 801975a:	065d      	lsls	r5, r3, #25
 801975c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801975e:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019762:	406f      	eors	r7, r5
 8019764:	9b04      	ldr	r3, [sp, #16]
 8019766:	9d01      	ldr	r5, [sp, #4]
 8019768:	431d      	orrs	r5, r3
 801976a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801976c:	ea86 0609 	eor.w	r6, r6, r9
 8019770:	ea42 0903 	orr.w	r9, r2, r3
 8019774:	ea05 030c 	and.w	r3, r5, ip
 8019778:	9302      	str	r3, [sp, #8]
 801977a:	9d01      	ldr	r5, [sp, #4]
 801977c:	9b04      	ldr	r3, [sp, #16]
 801977e:	ea05 0b03 	and.w	fp, r5, r3
 8019782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019784:	ea02 0a03 	and.w	sl, r2, r3
 8019788:	9b02      	ldr	r3, [sp, #8]
 801978a:	ea09 090e 	and.w	r9, r9, lr
 801978e:	ea43 050b 	orr.w	r5, r3, fp
 8019792:	197d      	adds	r5, r7, r5
 8019794:	ea49 090a 	orr.w	r9, r9, sl
 8019798:	eb46 0909 	adc.w	r9, r6, r9
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 801979c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80197a0:	192b      	adds	r3, r5, r4
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80197a2:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 80197a6:	9302      	str	r3, [sp, #8]
 80197a8:	eb49 0308 	adc.w	r3, r9, r8
 80197ac:	9303      	str	r3, [sp, #12]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80197ae:	9b07      	ldr	r3, [sp, #28]
 80197b0:	19a4      	adds	r4, r4, r6
 80197b2:	eb47 0505 	adc.w	r5, r7, r5
 80197b6:	18e4      	adds	r4, r4, r3
 80197b8:	9b08      	ldr	r3, [sp, #32]
 80197ba:	eb45 0803 	adc.w	r8, r5, r3
 80197be:	9b05      	ldr	r3, [sp, #20]
 80197c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80197c2:	ea83 0a05 	eor.w	sl, r3, r5
 80197c6:	9b06      	ldr	r3, [sp, #24]
 80197c8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80197ca:	405d      	eors	r5, r3
 80197cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197ce:	ea0a 0a03 	and.w	sl, sl, r3
 80197d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197d4:	401d      	ands	r5, r3
 80197d6:	9b05      	ldr	r3, [sp, #20]
 80197d8:	ea8a 0a03 	eor.w	sl, sl, r3
 80197dc:	9b06      	ldr	r3, [sp, #24]
 80197de:	ea85 0903 	eor.w	r9, r5, r3
 80197e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197e4:	eb14 0a0a 	adds.w	sl, r4, sl
 80197e8:	ea4f 3493 	mov.w	r4, r3, lsr #14
 80197ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197ee:	eb48 0509 	adc.w	r5, r8, r9
 80197f2:	ea4f 3b93 	mov.w	fp, r3, lsr #14
 80197f6:	ea44 4983 	orr.w	r9, r4, r3, lsl #18
 80197fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197fc:	ea4b 4883 	orr.w	r8, fp, r3, lsl #18
 8019800:	0c9c      	lsrs	r4, r3, #18
 8019802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019804:	ea4f 4b93 	mov.w	fp, r3, lsr #18
 8019808:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 801980c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801980e:	ea4b 3683 	orr.w	r6, fp, r3, lsl #14
 8019812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019814:	ea88 0b06 	eor.w	fp, r8, r6
 8019818:	ea4f 58c3 	mov.w	r8, r3, lsl #23
 801981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801981e:	ea89 0404 	eor.w	r4, r9, r4
 8019822:	ea48 2853 	orr.w	r8, r8, r3, lsr #9
 8019826:	ea4f 59c3 	mov.w	r9, r3, lsl #23
 801982a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801982c:	ea49 2953 	orr.w	r9, r9, r3, lsr #9
 8019830:	ea84 0409 	eor.w	r4, r4, r9
 8019834:	eb1a 0404 	adds.w	r4, sl, r4
 8019838:	ea8b 0808 	eor.w	r8, fp, r8
 801983c:	eb45 0808 	adc.w	r8, r5, r8
 8019840:	eb1c 0304 	adds.w	r3, ip, r4
 8019844:	9307      	str	r3, [sp, #28]
 8019846:	eb4e 0308 	adc.w	r3, lr, r8
 801984a:	9308      	str	r3, [sp, #32]
 801984c:	9b02      	ldr	r3, [sp, #8]
 801984e:	0f1f      	lsrs	r7, r3, #28
 8019850:	9b03      	ldr	r3, [sp, #12]
 8019852:	0f1e      	lsrs	r6, r3, #28
 8019854:	ea47 1703 	orr.w	r7, r7, r3, lsl #4
 8019858:	9b02      	ldr	r3, [sp, #8]
 801985a:	ea46 1c03 	orr.w	ip, r6, r3, lsl #4
 801985e:	9b03      	ldr	r3, [sp, #12]
 8019860:	079e      	lsls	r6, r3, #30
 8019862:	9b02      	ldr	r3, [sp, #8]
 8019864:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
 8019868:	079d      	lsls	r5, r3, #30
 801986a:	9b03      	ldr	r3, [sp, #12]
 801986c:	ea8c 0606 	eor.w	r6, ip, r6
 8019870:	ea45 0593 	orr.w	r5, r5, r3, lsr #2
 8019874:	ea4f 6c43 	mov.w	ip, r3, lsl #25
 8019878:	9b02      	ldr	r3, [sp, #8]
 801987a:	406f      	eors	r7, r5
 801987c:	ea4c 1cd3 	orr.w	ip, ip, r3, lsr #7
 8019880:	065d      	lsls	r5, r3, #25
 8019882:	9b03      	ldr	r3, [sp, #12]
 8019884:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019888:	406f      	eors	r7, r5
 801988a:	9b04      	ldr	r3, [sp, #16]
 801988c:	9d02      	ldr	r5, [sp, #8]
 801988e:	431d      	orrs	r5, r3
 8019890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019892:	ea86 060c 	eor.w	r6, r6, ip
 8019896:	469c      	mov	ip, r3
 8019898:	9b03      	ldr	r3, [sp, #12]
 801989a:	ea4c 0c03 	orr.w	ip, ip, r3
 801989e:	9b01      	ldr	r3, [sp, #4]
 80198a0:	401d      	ands	r5, r3
 80198a2:	9b04      	ldr	r3, [sp, #16]
 80198a4:	469e      	mov	lr, r3
 80198a6:	9b02      	ldr	r3, [sp, #8]
 80198a8:	ea0e 0903 	and.w	r9, lr, r3
 80198ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198ae:	469e      	mov	lr, r3
 80198b0:	9b03      	ldr	r3, [sp, #12]
 80198b2:	ea0c 0c02 	and.w	ip, ip, r2
 80198b6:	ea0e 0e03 	and.w	lr, lr, r3
 80198ba:	ea45 0509 	orr.w	r5, r5, r9
 80198be:	197d      	adds	r5, r7, r5
 80198c0:	ea4c 0c0e 	orr.w	ip, ip, lr
 80198c4:	eb46 0c0c 	adc.w	ip, r6, ip
 80198c8:	eb15 0904 	adds.w	r9, r5, r4
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80198cc:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
 80198d0:	e9d1 4506 	ldrd	r4, r5, [r1, #24]
 80198d4:	9b05      	ldr	r3, [sp, #20]
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 80198d6:	eb4c 0b08 	adc.w	fp, ip, r8
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80198da:	19a4      	adds	r4, r4, r6
 80198dc:	eb45 0707 	adc.w	r7, r5, r7
 80198e0:	18e4      	adds	r4, r4, r3
 80198e2:	9b06      	ldr	r3, [sp, #24]
 80198e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80198e6:	eb43 0707 	adc.w	r7, r3, r7
 80198ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198ec:	ea83 0605 	eor.w	r6, r3, r5
 80198f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80198f4:	405d      	eors	r5, r3
 80198f6:	9b07      	ldr	r3, [sp, #28]
 80198f8:	401e      	ands	r6, r3
 80198fa:	9b08      	ldr	r3, [sp, #32]
 80198fc:	401d      	ands	r5, r3
 80198fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019900:	405e      	eors	r6, r3
 8019902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019904:	ea85 0c03 	eor.w	ip, r5, r3
 8019908:	9b07      	ldr	r3, [sp, #28]
 801990a:	19a6      	adds	r6, r4, r6
 801990c:	ea4f 3493 	mov.w	r4, r3, lsr #14
 8019910:	9b08      	ldr	r3, [sp, #32]
 8019912:	eb47 050c 	adc.w	r5, r7, ip
 8019916:	ea4f 3e93 	mov.w	lr, r3, lsr #14
 801991a:	ea44 4c83 	orr.w	ip, r4, r3, lsl #18
 801991e:	9b07      	ldr	r3, [sp, #28]
 8019920:	ea4e 4883 	orr.w	r8, lr, r3, lsl #18
 8019924:	0c9c      	lsrs	r4, r3, #18
 8019926:	9b08      	ldr	r3, [sp, #32]
 8019928:	ea4f 4e93 	mov.w	lr, r3, lsr #18
 801992c:	ea44 3483 	orr.w	r4, r4, r3, lsl #14
 8019930:	9b07      	ldr	r3, [sp, #28]
 8019932:	ea4e 3783 	orr.w	r7, lr, r3, lsl #14
 8019936:	9b08      	ldr	r3, [sp, #32]
 8019938:	ea88 0e07 	eor.w	lr, r8, r7
 801993c:	05df      	lsls	r7, r3, #23
 801993e:	9b07      	ldr	r3, [sp, #28]
 8019940:	ea8c 0404 	eor.w	r4, ip, r4
 8019944:	ea47 2753 	orr.w	r7, r7, r3, lsr #9
 8019948:	ea4f 5cc3 	mov.w	ip, r3, lsl #23
 801994c:	9b08      	ldr	r3, [sp, #32]
 801994e:	ea4c 2c53 	orr.w	ip, ip, r3, lsr #9
 8019952:	ea84 040c 	eor.w	r4, r4, ip
 8019956:	9b01      	ldr	r3, [sp, #4]
 8019958:	1934      	adds	r4, r6, r4
 801995a:	ea8e 0707 	eor.w	r7, lr, r7
 801995e:	eb45 0707 	adc.w	r7, r5, r7
 8019962:	eb13 0804 	adds.w	r8, r3, r4
 8019966:	eb42 0307 	adc.w	r3, r2, r7
 801996a:	9305      	str	r3, [sp, #20]
 801996c:	ea4f 721b 	mov.w	r2, fp, lsr #28
 8019970:	ea4f 7519 	mov.w	r5, r9, lsr #28
 8019974:	ea4f 7389 	mov.w	r3, r9, lsl #30
 8019978:	ea42 1609 	orr.w	r6, r2, r9, lsl #4
 801997c:	ea43 039b 	orr.w	r3, r3, fp, lsr #2
 8019980:	ea45 150b 	orr.w	r5, r5, fp, lsl #4
 8019984:	ea4f 728b 	mov.w	r2, fp, lsl #30
 8019988:	ea42 0299 	orr.w	r2, r2, r9, lsr #2
 801998c:	405d      	eors	r5, r3
 801998e:	ea4f 6349 	mov.w	r3, r9, lsl #25
 8019992:	4072      	eors	r2, r6
 8019994:	ea43 13db 	orr.w	r3, r3, fp, lsr #7
 8019998:	ea4f 664b 	mov.w	r6, fp, lsl #25
 801999c:	ea46 16d9 	orr.w	r6, r6, r9, lsr #7
 80199a0:	405d      	eors	r5, r3
 80199a2:	9b02      	ldr	r3, [sp, #8]
 80199a4:	ea82 0a06 	eor.w	sl, r2, r6
 80199a8:	9a04      	ldr	r2, [sp, #16]
 80199aa:	9e03      	ldr	r6, [sp, #12]
 80199ac:	ea43 0309 	orr.w	r3, r3, r9
 80199b0:	4013      	ands	r3, r2
 80199b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80199b4:	ea46 060b 	orr.w	r6, r6, fp
 80199b8:	4016      	ands	r6, r2
 80199ba:	9a02      	ldr	r2, [sp, #8]
 80199bc:	ea02 0e09 	and.w	lr, r2, r9
 80199c0:	9a03      	ldr	r2, [sp, #12]
 80199c2:	ea43 030e 	orr.w	r3, r3, lr
 80199c6:	ea02 0c0b 	and.w	ip, r2, fp
 80199ca:	18eb      	adds	r3, r5, r3
 80199cc:	ea46 060c 	orr.w	r6, r6, ip
 80199d0:	eb4a 0606 	adc.w	r6, sl, r6
 80199d4:	191b      	adds	r3, r3, r4
 80199d6:	9301      	str	r3, [sp, #4]
 80199d8:	eb46 0307 	adc.w	r3, r6, r7
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80199dc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 80199e0:	9306      	str	r3, [sp, #24]
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 80199e2:	e9d1 3208 	ldrd	r3, r2, [r1, #32]
 80199e6:	191b      	adds	r3, r3, r4
 80199e8:	eb42 0505 	adc.w	r5, r2, r5
 80199ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80199ee:	9c08      	ldr	r4, [sp, #32]
 80199f0:	eb13 0a02 	adds.w	sl, r3, r2
 80199f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80199f6:	9a07      	ldr	r2, [sp, #28]
 80199f8:	eb43 0505 	adc.w	r5, r3, r5
 80199fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199fe:	4053      	eors	r3, r2
 8019a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a02:	4062      	eors	r2, r4
 8019a04:	9c05      	ldr	r4, [sp, #20]
 8019a06:	4022      	ands	r2, r4
 8019a08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019a0a:	ea03 0308 	and.w	r3, r3, r8
 8019a0e:	4063      	eors	r3, r4
 8019a10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019a12:	ea82 0604 	eor.w	r6, r2, r4
 8019a16:	9c05      	ldr	r4, [sp, #20]
 8019a18:	eb1a 0303 	adds.w	r3, sl, r3
 8019a1c:	ea4f 3794 	mov.w	r7, r4, lsr #14
 8019a20:	eb45 0206 	adc.w	r2, r5, r6
 8019a24:	ea4f 3a98 	mov.w	sl, r8, lsr #14
 8019a28:	ea47 4588 	orr.w	r5, r7, r8, lsl #18
 8019a2c:	ea4f 4698 	mov.w	r6, r8, lsr #18
 8019a30:	0ca7      	lsrs	r7, r4, #18
 8019a32:	ea46 3684 	orr.w	r6, r6, r4, lsl #14
 8019a36:	ea4a 4a84 	orr.w	sl, sl, r4, lsl #18
 8019a3a:	ea47 3488 	orr.w	r4, r7, r8, lsl #14
 8019a3e:	ea85 0704 	eor.w	r7, r5, r4
 8019a42:	9c05      	ldr	r4, [sp, #20]
 8019a44:	ea8a 0a06 	eor.w	sl, sl, r6
 8019a48:	ea4f 56c8 	mov.w	r6, r8, lsl #23
 8019a4c:	ea46 2654 	orr.w	r6, r6, r4, lsr #9
 8019a50:	05e5      	lsls	r5, r4, #23
 8019a52:	ea8a 0a06 	eor.w	sl, sl, r6
 8019a56:	eb13 0a0a 	adds.w	sl, r3, sl
 8019a5a:	ea45 2558 	orr.w	r5, r5, r8, lsr #9
 8019a5e:	9b04      	ldr	r3, [sp, #16]
 8019a60:	ea85 0507 	eor.w	r5, r5, r7
 8019a64:	eb42 0505 	adc.w	r5, r2, r5
 8019a68:	eb13 030a 	adds.w	r3, r3, sl
 8019a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a70:	9f06      	ldr	r7, [sp, #24]
 8019a72:	416b      	adcs	r3, r5
 8019a74:	930c      	str	r3, [sp, #48]	; 0x30
 8019a76:	9b01      	ldr	r3, [sp, #4]
 8019a78:	0f1c      	lsrs	r4, r3, #28
 8019a7a:	9b06      	ldr	r3, [sp, #24]
 8019a7c:	0f1a      	lsrs	r2, r3, #28
 8019a7e:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8019a82:	9b01      	ldr	r3, [sp, #4]
 8019a84:	ea42 1603 	orr.w	r6, r2, r3, lsl #4
 8019a88:	9b06      	ldr	r3, [sp, #24]
 8019a8a:	079a      	lsls	r2, r3, #30
 8019a8c:	9b01      	ldr	r3, [sp, #4]
 8019a8e:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019a92:	079b      	lsls	r3, r3, #30
 8019a94:	ea43 0397 	orr.w	r3, r3, r7, lsr #2
 8019a98:	405c      	eors	r4, r3
 8019a9a:	9b01      	ldr	r3, [sp, #4]
 8019a9c:	4072      	eors	r2, r6
 8019a9e:	067e      	lsls	r6, r7, #25
 8019aa0:	ea46 16d3 	orr.w	r6, r6, r3, lsr #7
 8019aa4:	065b      	lsls	r3, r3, #25
 8019aa6:	ea43 13d7 	orr.w	r3, r3, r7, lsr #7
 8019aaa:	405c      	eors	r4, r3
 8019aac:	9b01      	ldr	r3, [sp, #4]
 8019aae:	4072      	eors	r2, r6
 8019ab0:	ea4b 0607 	orr.w	r6, fp, r7
 8019ab4:	9f02      	ldr	r7, [sp, #8]
 8019ab6:	ea49 0303 	orr.w	r3, r9, r3
 8019aba:	403b      	ands	r3, r7
 8019abc:	9f03      	ldr	r7, [sp, #12]
 8019abe:	403e      	ands	r6, r7
 8019ac0:	9f01      	ldr	r7, [sp, #4]
 8019ac2:	ea09 0c07 	and.w	ip, r9, r7
 8019ac6:	9f06      	ldr	r7, [sp, #24]
 8019ac8:	ea43 030c 	orr.w	r3, r3, ip
 8019acc:	ea0b 0707 	and.w	r7, fp, r7
 8019ad0:	18e3      	adds	r3, r4, r3
 8019ad2:	ea46 0607 	orr.w	r6, r6, r7
 8019ad6:	eb42 0606 	adc.w	r6, r2, r6
 8019ada:	eb13 0a0a 	adds.w	sl, r3, sl
 8019ade:	eb46 0305 	adc.w	r3, r6, r5
 8019ae2:	9304      	str	r3, [sp, #16]
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 8019ae4:	e9d0 450a 	ldrd	r4, r5, [r0, #40]	; 0x28
 8019ae8:	e9d1 320a 	ldrd	r3, r2, [r1, #40]	; 0x28
 8019aec:	191b      	adds	r3, r3, r4
 8019aee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019af0:	9e05      	ldr	r6, [sp, #20]
 8019af2:	eb45 0202 	adc.w	r2, r5, r2
 8019af6:	191b      	adds	r3, r3, r4
 8019af8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019afa:	eb42 0504 	adc.w	r5, r2, r4
 8019afe:	9a07      	ldr	r2, [sp, #28]
 8019b00:	ea82 0408 	eor.w	r4, r2, r8
 8019b04:	9a08      	ldr	r2, [sp, #32]
 8019b06:	4072      	eors	r2, r6
 8019b08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019b0a:	4034      	ands	r4, r6
 8019b0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019b0e:	4032      	ands	r2, r6
 8019b10:	9e07      	ldr	r6, [sp, #28]
 8019b12:	4074      	eors	r4, r6
 8019b14:	9e08      	ldr	r6, [sp, #32]
 8019b16:	191c      	adds	r4, r3, r4
 8019b18:	ea82 0606 	eor.w	r6, r2, r6
 8019b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b1e:	eb45 0206 	adc.w	r2, r5, r6
 8019b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019b24:	0b9b      	lsrs	r3, r3, #14
 8019b26:	ea43 4685 	orr.w	r6, r3, r5, lsl #18
 8019b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b2c:	0baf      	lsrs	r7, r5, #14
 8019b2e:	ea47 4c83 	orr.w	ip, r7, r3, lsl #18
 8019b32:	0c9b      	lsrs	r3, r3, #18
 8019b34:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8019b38:	0caf      	lsrs	r7, r5, #18
 8019b3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019b3c:	ea47 3585 	orr.w	r5, r7, r5, lsl #14
 8019b40:	ea8c 0705 	eor.w	r7, ip, r5
 8019b44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019b46:	ea83 0e06 	eor.w	lr, r3, r6
 8019b4a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b4e:	05ed      	lsls	r5, r5, #23
 8019b50:	ea45 2556 	orr.w	r5, r5, r6, lsr #9
 8019b54:	05f6      	lsls	r6, r6, #23
 8019b56:	ea46 2653 	orr.w	r6, r6, r3, lsr #9
 8019b5a:	ea8e 0306 	eor.w	r3, lr, r6
 8019b5e:	18e3      	adds	r3, r4, r3
 8019b60:	ea87 0705 	eor.w	r7, r7, r5
 8019b64:	eb42 0707 	adc.w	r7, r2, r7
 8019b68:	9a02      	ldr	r2, [sp, #8]
 8019b6a:	930d      	str	r3, [sp, #52]	; 0x34
 8019b6c:	18d2      	adds	r2, r2, r3
 8019b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8019b70:	9a03      	ldr	r2, [sp, #12]
 8019b72:	9b04      	ldr	r3, [sp, #16]
 8019b74:	417a      	adcs	r2, r7
 8019b76:	920a      	str	r2, [sp, #40]	; 0x28
 8019b78:	9a04      	ldr	r2, [sp, #16]
 8019b7a:	ea4f 751a 	mov.w	r5, sl, lsr #28
 8019b7e:	0f14      	lsrs	r4, r2, #28
 8019b80:	ea44 160a 	orr.w	r6, r4, sl, lsl #4
 8019b84:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
 8019b88:	0794      	lsls	r4, r2, #30
 8019b8a:	ea4f 728a 	mov.w	r2, sl, lsl #30
 8019b8e:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019b92:	4055      	eors	r5, r2
 8019b94:	ea44 049a 	orr.w	r4, r4, sl, lsr #2
 8019b98:	ea4f 624a 	mov.w	r2, sl, lsl #25
 8019b9c:	ea42 12d3 	orr.w	r2, r2, r3, lsr #7
 8019ba0:	4074      	eors	r4, r6
 8019ba2:	065e      	lsls	r6, r3, #25
 8019ba4:	9b01      	ldr	r3, [sp, #4]
 8019ba6:	ea46 16da 	orr.w	r6, r6, sl, lsr #7
 8019baa:	4055      	eors	r5, r2
 8019bac:	4074      	eors	r4, r6
 8019bae:	ea43 020a 	orr.w	r2, r3, sl
 8019bb2:	9e04      	ldr	r6, [sp, #16]
 8019bb4:	9b06      	ldr	r3, [sp, #24]
 8019bb6:	431e      	orrs	r6, r3
 8019bb8:	9b01      	ldr	r3, [sp, #4]
 8019bba:	ea03 0e0a 	and.w	lr, r3, sl
 8019bbe:	9b06      	ldr	r3, [sp, #24]
 8019bc0:	469c      	mov	ip, r3
 8019bc2:	9b04      	ldr	r3, [sp, #16]
 8019bc4:	ea02 0209 	and.w	r2, r2, r9
 8019bc8:	ea0c 0c03 	and.w	ip, ip, r3
 8019bcc:	ea06 060b 	and.w	r6, r6, fp
 8019bd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bd2:	ea42 020e 	orr.w	r2, r2, lr
 8019bd6:	18aa      	adds	r2, r5, r2
 8019bd8:	ea46 060c 	orr.w	r6, r6, ip
 8019bdc:	eb44 0606 	adc.w	r6, r4, r6
 8019be0:	18d3      	adds	r3, r2, r3
 8019be2:	9302      	str	r3, [sp, #8]
 8019be4:	eb46 0307 	adc.w	r3, r6, r7
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 8019be8:	e9d0 450c 	ldrd	r4, r5, [r0, #48]	; 0x30
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 8019bec:	9303      	str	r3, [sp, #12]
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 8019bee:	e9d1 320c 	ldrd	r3, r2, [r1, #48]	; 0x30
 8019bf2:	eb13 0c04 	adds.w	ip, r3, r4
 8019bf6:	9b07      	ldr	r3, [sp, #28]
 8019bf8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019bfa:	eb42 0e05 	adc.w	lr, r2, r5
 8019bfe:	eb1c 0c03 	adds.w	ip, ip, r3
 8019c02:	9b08      	ldr	r3, [sp, #32]
 8019c04:	9a05      	ldr	r2, [sp, #20]
 8019c06:	eb4e 0e03 	adc.w	lr, lr, r3
 8019c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c0c:	ea82 0604 	eor.w	r6, r2, r4
 8019c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c12:	ea88 0303 	eor.w	r3, r8, r3
 8019c16:	4013      	ands	r3, r2
 8019c18:	ea83 0308 	eor.w	r3, r3, r8
 8019c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c1e:	eb1c 0c03 	adds.w	ip, ip, r3
 8019c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c24:	ea06 0602 	and.w	r6, r6, r2
 8019c28:	9a05      	ldr	r2, [sp, #20]
 8019c2a:	ea4f 3493 	mov.w	r4, r3, lsr #14
 8019c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c30:	ea86 0602 	eor.w	r6, r6, r2
 8019c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c36:	eb4e 0e06 	adc.w	lr, lr, r6
 8019c3a:	ea44 4683 	orr.w	r6, r4, r3, lsl #18
 8019c3e:	0b9b      	lsrs	r3, r3, #14
 8019c40:	ea43 4582 	orr.w	r5, r3, r2, lsl #18
 8019c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c46:	0c94      	lsrs	r4, r2, #18
 8019c48:	ea44 3283 	orr.w	r2, r4, r3, lsl #14
 8019c4c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019c4e:	0c9b      	lsrs	r3, r3, #18
 8019c50:	ea43 3384 	orr.w	r3, r3, r4, lsl #14
 8019c54:	ea86 0402 	eor.w	r4, r6, r2
 8019c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019c5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019c5c:	406b      	eors	r3, r5
 8019c5e:	05d5      	lsls	r5, r2, #23
 8019c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019c62:	ea45 2552 	orr.w	r5, r5, r2, lsr #9
 8019c66:	05d2      	lsls	r2, r2, #23
 8019c68:	ea42 2256 	orr.w	r2, r2, r6, lsr #9
 8019c6c:	4062      	eors	r2, r4
 8019c6e:	eb1c 0c02 	adds.w	ip, ip, r2
 8019c72:	ea83 0305 	eor.w	r3, r3, r5
 8019c76:	eb4e 0e03 	adc.w	lr, lr, r3
 8019c7a:	eb19 030c 	adds.w	r3, r9, ip
 8019c7e:	9307      	str	r3, [sp, #28]
 8019c80:	eb4b 030e 	adc.w	r3, fp, lr
 8019c84:	9308      	str	r3, [sp, #32]
 8019c86:	9b02      	ldr	r3, [sp, #8]
 8019c88:	9e03      	ldr	r6, [sp, #12]
 8019c8a:	0f1c      	lsrs	r4, r3, #28
 8019c8c:	9b03      	ldr	r3, [sp, #12]
 8019c8e:	0f1a      	lsrs	r2, r3, #28
 8019c90:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
 8019c94:	9b02      	ldr	r3, [sp, #8]
 8019c96:	ea42 1503 	orr.w	r5, r2, r3, lsl #4
 8019c9a:	9b03      	ldr	r3, [sp, #12]
 8019c9c:	079a      	lsls	r2, r3, #30
 8019c9e:	9b02      	ldr	r3, [sp, #8]
 8019ca0:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
 8019ca4:	079b      	lsls	r3, r3, #30
 8019ca6:	ea43 0396 	orr.w	r3, r3, r6, lsr #2
 8019caa:	405c      	eors	r4, r3
 8019cac:	9b02      	ldr	r3, [sp, #8]
 8019cae:	406a      	eors	r2, r5
 8019cb0:	0675      	lsls	r5, r6, #25
 8019cb2:	ea45 15d3 	orr.w	r5, r5, r3, lsr #7
 8019cb6:	065b      	lsls	r3, r3, #25
 8019cb8:	ea43 13d6 	orr.w	r3, r3, r6, lsr #7
 8019cbc:	406a      	eors	r2, r5
 8019cbe:	9d04      	ldr	r5, [sp, #16]
 8019cc0:	405c      	eors	r4, r3
 8019cc2:	9b02      	ldr	r3, [sp, #8]
 8019cc4:	4335      	orrs	r5, r6
 8019cc6:	9e01      	ldr	r6, [sp, #4]
 8019cc8:	ea4a 0303 	orr.w	r3, sl, r3
 8019ccc:	4033      	ands	r3, r6
 8019cce:	9e06      	ldr	r6, [sp, #24]
 8019cd0:	4035      	ands	r5, r6
 8019cd2:	9e02      	ldr	r6, [sp, #8]
 8019cd4:	ea0a 0706 	and.w	r7, sl, r6
 8019cd8:	9e04      	ldr	r6, [sp, #16]
 8019cda:	46b1      	mov	r9, r6
 8019cdc:	9e03      	ldr	r6, [sp, #12]
 8019cde:	433b      	orrs	r3, r7
 8019ce0:	ea09 0606 	and.w	r6, r9, r6
 8019ce4:	18e3      	adds	r3, r4, r3
 8019ce6:	ea45 0506 	orr.w	r5, r5, r6
 8019cea:	eb42 0505 	adc.w	r5, r2, r5
 8019cee:	eb13 0c0c 	adds.w	ip, r3, ip
 8019cf2:	eb45 0e0e 	adc.w	lr, r5, lr
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019cf6:	e9d1 320e 	ldrd	r3, r2, [r1, #56]	; 0x38
 8019cfa:	e9d0 450e 	ldrd	r4, r5, [r0, #56]	; 0x38
 8019cfe:	191b      	adds	r3, r3, r4
 8019d00:	9c05      	ldr	r4, [sp, #20]
 8019d02:	eb45 0202 	adc.w	r2, r5, r2
 8019d06:	eb13 0308 	adds.w	r3, r3, r8
 8019d0a:	eb42 0504 	adc.w	r5, r2, r4
 8019d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019d10:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019d12:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8019d14:	4054      	eors	r4, r2
 8019d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019d18:	4072      	eors	r2, r6
 8019d1a:	9e07      	ldr	r6, [sp, #28]
 8019d1c:	4034      	ands	r4, r6
 8019d1e:	9e08      	ldr	r6, [sp, #32]
 8019d20:	4032      	ands	r2, r6
 8019d22:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8019d24:	4074      	eors	r4, r6
 8019d26:	eb13 0b04 	adds.w	fp, r3, r4
 8019d2a:	9c07      	ldr	r4, [sp, #28]
 8019d2c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019d2e:	9b08      	ldr	r3, [sp, #32]
 8019d30:	ea4f 3794 	mov.w	r7, r4, lsr #14
 8019d34:	9c08      	ldr	r4, [sp, #32]
 8019d36:	ea82 0606 	eor.w	r6, r2, r6
 8019d3a:	eb45 0206 	adc.w	r2, r5, r6
 8019d3e:	ea47 4984 	orr.w	r9, r7, r4, lsl #18
 8019d42:	0ba6      	lsrs	r6, r4, #14
 8019d44:	9c07      	ldr	r4, [sp, #28]
 8019d46:	9d08      	ldr	r5, [sp, #32]
 8019d48:	ea46 4884 	orr.w	r8, r6, r4, lsl #18
 8019d4c:	0ca7      	lsrs	r7, r4, #18
 8019d4e:	9c08      	ldr	r4, [sp, #32]
 8019d50:	0cae      	lsrs	r6, r5, #18
 8019d52:	ea47 3484 	orr.w	r4, r7, r4, lsl #14
 8019d56:	9d07      	ldr	r5, [sp, #28]
 8019d58:	ea89 0704 	eor.w	r7, r9, r4
 8019d5c:	9c08      	ldr	r4, [sp, #32]
 8019d5e:	ea46 3585 	orr.w	r5, r6, r5, lsl #14
 8019d62:	ea88 0605 	eor.w	r6, r8, r5
 8019d66:	05e5      	lsls	r5, r4, #23
 8019d68:	9c07      	ldr	r4, [sp, #28]
 8019d6a:	ea45 2554 	orr.w	r5, r5, r4, lsr #9
 8019d6e:	05e4      	lsls	r4, r4, #23
 8019d70:	ea44 2453 	orr.w	r4, r4, r3, lsr #9
 8019d74:	407c      	eors	r4, r7
 8019d76:	9b01      	ldr	r3, [sp, #4]
 8019d78:	eb1b 0404 	adds.w	r4, fp, r4
 8019d7c:	ea85 0506 	eor.w	r5, r5, r6
 8019d80:	eb42 0505 	adc.w	r5, r2, r5
 8019d84:	191b      	adds	r3, r3, r4
 8019d86:	9305      	str	r3, [sp, #20]
 8019d88:	9b06      	ldr	r3, [sp, #24]
 8019d8a:	416b      	adcs	r3, r5
 8019d8c:	9306      	str	r3, [sp, #24]
 8019d8e:	ea4f 771c 	mov.w	r7, ip, lsr #28
 8019d92:	ea4f 738c 	mov.w	r3, ip, lsl #30
 8019d96:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
 8019d9a:	ea47 170e 	orr.w	r7, r7, lr, lsl #4
 8019d9e:	405f      	eors	r7, r3
 8019da0:	ea4f 634c 	mov.w	r3, ip, lsl #25
 8019da4:	ea4f 721e 	mov.w	r2, lr, lsr #28
 8019da8:	ea43 13de 	orr.w	r3, r3, lr, lsr #7
 8019dac:	ea42 180c 	orr.w	r8, r2, ip, lsl #4
 8019db0:	405f      	eors	r7, r3
 8019db2:	ea4f 728e 	mov.w	r2, lr, lsl #30
 8019db6:	9b02      	ldr	r3, [sp, #8]
 8019db8:	ea42 029c 	orr.w	r2, r2, ip, lsr #2
 8019dbc:	ea88 0202 	eor.w	r2, r8, r2
 8019dc0:	ea43 060c 	orr.w	r6, r3, ip
 8019dc4:	ea4f 684e 	mov.w	r8, lr, lsl #25
 8019dc8:	9b03      	ldr	r3, [sp, #12]
 8019dca:	ea48 18dc 	orr.w	r8, r8, ip, lsr #7
 8019dce:	ea82 0208 	eor.w	r2, r2, r8
 8019dd2:	ea43 080e 	orr.w	r8, r3, lr
 8019dd6:	9b04      	ldr	r3, [sp, #16]
 8019dd8:	ea08 0803 	and.w	r8, r8, r3
 8019ddc:	9b02      	ldr	r3, [sp, #8]
 8019dde:	ea03 0b0c 	and.w	fp, r3, ip
 8019de2:	9b03      	ldr	r3, [sp, #12]
 8019de4:	ea06 060a 	and.w	r6, r6, sl
 8019de8:	ea03 090e 	and.w	r9, r3, lr
 8019dec:	ea4b 0306 	orr.w	r3, fp, r6
 8019df0:	18fb      	adds	r3, r7, r3
 8019df2:	ea48 0809 	orr.w	r8, r8, r9
 8019df6:	eb42 0208 	adc.w	r2, r2, r8
 8019dfa:	191b      	adds	r3, r3, r4
 8019dfc:	9301      	str	r3, [sp, #4]
    }
    while( i < 80 );
 8019dfe:	4b2b      	ldr	r3, [pc, #172]	; (8019eac <mbedtls_sha512_process+0xac4>)
 8019e00:	f101 0140 	add.w	r1, r1, #64	; 0x40
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8019e04:	eb45 0202 	adc.w	r2, r5, r2
    while( i < 80 );
 8019e08:	428b      	cmp	r3, r1
 8019e0a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8019e0e:	f47f abaf 	bne.w	8019570 <mbedtls_sha512_process+0x188>

    ctx->state[0] += A;
 8019e12:	9901      	ldr	r1, [sp, #4]
 8019e14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ctx->state[1] += B;
    ctx->state[2] += C;
    ctx->state[3] += D;
    ctx->state[4] += E;
 8019e16:	9f06      	ldr	r7, [sp, #24]
    ctx->state[5] += F;
 8019e18:	9d08      	ldr	r5, [sp, #32]
    ctx->state[0] += A;
 8019e1a:	185b      	adds	r3, r3, r1
 8019e1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019e1e:	eb41 0202 	adc.w	r2, r1, r2
 8019e22:	9900      	ldr	r1, [sp, #0]
 8019e24:	610b      	str	r3, [r1, #16]
    ctx->state[1] += B;
 8019e26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ctx->state[0] += A;
 8019e28:	614a      	str	r2, [r1, #20]
    ctx->state[1] += B;
 8019e2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019e2c:	eb13 030c 	adds.w	r3, r3, ip
 8019e30:	eb42 020e 	adc.w	r2, r2, lr
 8019e34:	618b      	str	r3, [r1, #24]
 8019e36:	61ca      	str	r2, [r1, #28]
    ctx->state[2] += C;
 8019e38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019e3a:	9a02      	ldr	r2, [sp, #8]
 8019e3c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8019e3e:	189b      	adds	r3, r3, r2
 8019e40:	9a03      	ldr	r2, [sp, #12]
 8019e42:	eb41 0202 	adc.w	r2, r1, r2
 8019e46:	9900      	ldr	r1, [sp, #0]
 8019e48:	620b      	str	r3, [r1, #32]
    ctx->state[3] += D;
 8019e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ctx->state[2] += C;
 8019e4c:	624a      	str	r2, [r1, #36]	; 0x24
    ctx->state[3] += D;
 8019e4e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019e50:	9a04      	ldr	r2, [sp, #16]
 8019e52:	eb13 030a 	adds.w	r3, r3, sl
 8019e56:	eb41 0202 	adc.w	r2, r1, r2
 8019e5a:	9900      	ldr	r1, [sp, #0]
 8019e5c:	628b      	str	r3, [r1, #40]	; 0x28
 8019e5e:	62ca      	str	r2, [r1, #44]	; 0x2c
    ctx->state[4] += E;
 8019e60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019e62:	9a05      	ldr	r2, [sp, #20]
 8019e64:	189c      	adds	r4, r3, r2
 8019e66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ctx->state[5] += F;
 8019e68:	9a07      	ldr	r2, [sp, #28]
    ctx->state[4] += E;
 8019e6a:	eb43 0707 	adc.w	r7, r3, r7
    ctx->state[5] += F;
 8019e6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ctx->state[4] += E;
 8019e70:	e9c1 470c 	strd	r4, r7, [r1, #48]	; 0x30
    ctx->state[5] += F;
 8019e74:	189c      	adds	r4, r3, r2
 8019e76:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ctx->state[6] += G;
 8019e78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ctx->state[5] += F;
 8019e7a:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[6] += G;
 8019e7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ctx->state[5] += F;
 8019e80:	e9c1 450e 	strd	r4, r5, [r1, #56]	; 0x38
    ctx->state[6] += G;
 8019e84:	189c      	adds	r4, r3, r2
 8019e86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8019e88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    ctx->state[7] += H;
 8019e8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ctx->state[6] += G;
 8019e8c:	eb43 0505 	adc.w	r5, r3, r5
    ctx->state[7] += H;
 8019e90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ctx->state[6] += G;
 8019e92:	e9c1 4510 	strd	r4, r5, [r1, #64]	; 0x40
    ctx->state[7] += H;
 8019e96:	189d      	adds	r5, r3, r2
 8019e98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019e9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e9c:	eb43 0404 	adc.w	r4, r3, r4
 8019ea0:	e9c1 5412 	strd	r5, r4, [r1, #72]	; 0x48
}
 8019ea4:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
 8019ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eac:	0802cd40 	.word	0x0802cd40

08019eb0 <mbedtls_sha512_update.part.0>:
#endif /* !MBEDTLS_SHA512_PROCESS_ALT */

/*
 * SHA-512 process buffer
 */
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eb4:	4615      	mov	r5, r2
    unsigned int left;

    if( ilen == 0 )
        return;

    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019eb6:	e9d0 2300 	ldrd	r2, r3, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019eba:	4689      	mov	r9, r1
 8019ebc:	1956      	adds	r6, r2, r5
    fill = 128 - left;

    ctx->total[0] += (uint64_t) ilen;
 8019ebe:	f04f 0100 	mov.w	r1, #0
 8019ec2:	eb53 0701 	adcs.w	r7, r3, r1
 8019ec6:	f04f 0a00 	mov.w	sl, #0
 8019eca:	f04f 0b00 	mov.w	fp, #0
 8019ece:	bf24      	itt	cs
 8019ed0:	f04f 0a01 	movcs.w	sl, #1
 8019ed4:	f04f 0b00 	movcs.w	fp, #0

    if( ctx->total[0] < (uint64_t) ilen )
 8019ed8:	ea5a 030b 	orrs.w	r3, sl, fp
    ctx->total[0] += (uint64_t) ilen;
 8019edc:	e9c0 6700 	strd	r6, r7, [r0]
void mbedtls_sha512_update( mbedtls_sha512_context *ctx, const unsigned char *input,
 8019ee0:	4604      	mov	r4, r0
    left = (unsigned int) (ctx->total[0] & 0x7F);
 8019ee2:	f002 087f 	and.w	r8, r2, #127	; 0x7f
    if( ctx->total[0] < (uint64_t) ilen )
 8019ee6:	d006      	beq.n	8019ef6 <mbedtls_sha512_update.part.0+0x46>
        ctx->total[1]++;
 8019ee8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8019eec:	3301      	adds	r3, #1
 8019eee:	f142 0200 	adc.w	r2, r2, #0
 8019ef2:	e9c4 3202 	strd	r3, r2, [r4, #8]

    if( left && ilen >= fill )
 8019ef6:	f1b8 0f00 	cmp.w	r8, #0
 8019efa:	d014      	beq.n	8019f26 <mbedtls_sha512_update.part.0+0x76>
    fill = 128 - left;
 8019efc:	f1c8 0780 	rsb	r7, r8, #128	; 0x80
    if( left && ilen >= fill )
 8019f00:	42af      	cmp	r7, r5
 8019f02:	d810      	bhi.n	8019f26 <mbedtls_sha512_update.part.0+0x76>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8019f04:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8019f08:	4649      	mov	r1, r9
 8019f0a:	463a      	mov	r2, r7
 8019f0c:	eb06 0008 	add.w	r0, r6, r8
 8019f10:	f008 fa6a 	bl	80223e8 <memcpy>
        mbedtls_sha512_process( ctx, ctx->buffer );
 8019f14:	4631      	mov	r1, r6
 8019f16:	4620      	mov	r0, r4
 8019f18:	f7ff fa66 	bl	80193e8 <mbedtls_sha512_process>
        input += fill;
 8019f1c:	3d80      	subs	r5, #128	; 0x80
        ilen  -= fill;
 8019f1e:	4445      	add	r5, r8
        input += fill;
 8019f20:	44b9      	add	r9, r7
        left = 0;
 8019f22:	f04f 0800 	mov.w	r8, #0
 8019f26:	462e      	mov	r6, r5
 8019f28:	eb09 0705 	add.w	r7, r9, r5
 8019f2c:	e003      	b.n	8019f36 <mbedtls_sha512_update.part.0+0x86>
    }

    while( ilen >= 128 )
    {
        mbedtls_sha512_process( ctx, input );
 8019f2e:	4620      	mov	r0, r4
 8019f30:	f7ff fa5a 	bl	80193e8 <mbedtls_sha512_process>
        input += 128;
        ilen  -= 128;
 8019f34:	3e80      	subs	r6, #128	; 0x80
    while( ilen >= 128 )
 8019f36:	2e7f      	cmp	r6, #127	; 0x7f
 8019f38:	eba7 0106 	sub.w	r1, r7, r6
 8019f3c:	d8f7      	bhi.n	8019f2e <mbedtls_sha512_update.part.0+0x7e>
 8019f3e:	09ea      	lsrs	r2, r5, #7
 8019f40:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8019f44:	f025 017f 	bic.w	r1, r5, #127	; 0x7f
 8019f48:	fb03 5202 	mla	r2, r3, r2, r5
    }

    if( ilen > 0 )
 8019f4c:	4449      	add	r1, r9
 8019f4e:	b132      	cbz	r2, 8019f5e <mbedtls_sha512_update.part.0+0xae>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019f54:	4440      	add	r0, r8
}
 8019f56:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8019f5a:	f008 ba45 	b.w	80223e8 <memcpy>
}
 8019f5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f62 <mbedtls_sha512_update>:
    if( ilen == 0 )
 8019f62:	b10a      	cbz	r2, 8019f68 <mbedtls_sha512_update+0x6>
 8019f64:	f7ff bfa4 	b.w	8019eb0 <mbedtls_sha512_update.part.0>
}
 8019f68:	4770      	bx	lr
	...

08019f6c <mbedtls_sha512_finish>:

/*
 * SHA-512 final digest
 */
void mbedtls_sha512_finish( mbedtls_sha512_context *ctx, unsigned char output[64] )
{
 8019f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f6e:	460d      	mov	r5, r1
    size_t last, padn;
    uint64_t high, low;
    unsigned char msglen[16];

    high = ( ctx->total[0] >> 61 )
         | ( ctx->total[1] <<  3 );
 8019f70:	e9d0 6102 	ldrd	r6, r1, [r0, #8]
    high = ( ctx->total[0] >> 61 )
 8019f74:	e9d0 2300 	ldrd	r2, r3, [r0]
         | ( ctx->total[1] <<  3 );
 8019f78:	00c9      	lsls	r1, r1, #3
{
 8019f7a:	b085      	sub	sp, #20
         | ( ctx->total[1] <<  3 );
 8019f7c:	ea41 7156 	orr.w	r1, r1, r6, lsr #29
{
 8019f80:	4604      	mov	r4, r0
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT64_BE( high, msglen, 0 );
 8019f82:	0e0f      	lsrs	r7, r1, #24
    high = ( ctx->total[0] >> 61 )
 8019f84:	0f58      	lsrs	r0, r3, #29
    low  = ( ctx->total[0] <<  3 );
 8019f86:	00db      	lsls	r3, r3, #3
 8019f88:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    PUT_UINT64_BE( high, msglen, 0 );
 8019f8c:	f88d 7000 	strb.w	r7, [sp]
 8019f90:	0c0f      	lsrs	r7, r1, #16
 8019f92:	f88d 7001 	strb.w	r7, [sp, #1]
 8019f96:	f88d 1003 	strb.w	r1, [sp, #3]
 8019f9a:	0a0f      	lsrs	r7, r1, #8
    PUT_UINT64_BE( low,  msglen, 8 );
 8019f9c:	0e19      	lsrs	r1, r3, #24
    high = ( ctx->total[0] >> 61 )
 8019f9e:	ea40 00c6 	orr.w	r0, r0, r6, lsl #3
    PUT_UINT64_BE( low,  msglen, 8 );
 8019fa2:	f88d 1008 	strb.w	r1, [sp, #8]
    low  = ( ctx->total[0] <<  3 );
 8019fa6:	00d6      	lsls	r6, r2, #3
    PUT_UINT64_BE( low,  msglen, 8 );
 8019fa8:	0c19      	lsrs	r1, r3, #16

    last = (size_t)( ctx->total[0] & 0x7F );
 8019faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 8019fae:	2a6f      	cmp	r2, #111	; 0x6f
 8019fb0:	ba00      	rev	r0, r0
    PUT_UINT64_BE( low,  msglen, 8 );
 8019fb2:	f88d 1009 	strb.w	r1, [sp, #9]
 8019fb6:	ea4f 2113 	mov.w	r1, r3, lsr #8
    padn = ( last < 112 ) ? ( 112 - last ) : ( 240 - last );
 8019fba:	bf94      	ite	ls
 8019fbc:	f1c2 0270 	rsbls	r2, r2, #112	; 0x70
 8019fc0:	f1c2 02f0 	rsbhi	r2, r2, #240	; 0xf0
    PUT_UINT64_BE( high, msglen, 0 );
 8019fc4:	9001      	str	r0, [sp, #4]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019fc6:	f88d 100a 	strb.w	r1, [sp, #10]

    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019fca:	4620      	mov	r0, r4
 8019fcc:	4969      	ldr	r1, [pc, #420]	; (801a174 <mbedtls_sha512_finish+0x208>)
    PUT_UINT64_BE( low,  msglen, 8 );
 8019fce:	f88d 300b 	strb.w	r3, [sp, #11]
 8019fd2:	ba36      	rev	r6, r6
    PUT_UINT64_BE( high, msglen, 0 );
 8019fd4:	f88d 7002 	strb.w	r7, [sp, #2]
    PUT_UINT64_BE( low,  msglen, 8 );
 8019fd8:	9603      	str	r6, [sp, #12]
    mbedtls_sha512_update( ctx, sha512_padding, padn );
 8019fda:	f7ff ffc2 	bl	8019f62 <mbedtls_sha512_update>
    if( ilen == 0 )
 8019fde:	2210      	movs	r2, #16
 8019fe0:	4669      	mov	r1, sp
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f7ff ff64 	bl	8019eb0 <mbedtls_sha512_update.part.0>
    mbedtls_sha512_update( ctx, msglen, 16 );

    PUT_UINT64_BE( ctx->state[0], output,  0 );
 8019fe8:	7de3      	ldrb	r3, [r4, #23]
 8019fea:	702b      	strb	r3, [r5, #0]
 8019fec:	8ae3      	ldrh	r3, [r4, #22]
 8019fee:	706b      	strb	r3, [r5, #1]
 8019ff0:	6963      	ldr	r3, [r4, #20]
 8019ff2:	0a1b      	lsrs	r3, r3, #8
 8019ff4:	70ab      	strb	r3, [r5, #2]
 8019ff6:	6963      	ldr	r3, [r4, #20]
 8019ff8:	70eb      	strb	r3, [r5, #3]
 8019ffa:	7ce3      	ldrb	r3, [r4, #19]
 8019ffc:	712b      	strb	r3, [r5, #4]
 8019ffe:	8a63      	ldrh	r3, [r4, #18]
 801a000:	716b      	strb	r3, [r5, #5]
 801a002:	6923      	ldr	r3, [r4, #16]
 801a004:	0a1b      	lsrs	r3, r3, #8
 801a006:	71ab      	strb	r3, [r5, #6]
 801a008:	6923      	ldr	r3, [r4, #16]
 801a00a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 801a00c:	7fe3      	ldrb	r3, [r4, #31]
 801a00e:	722b      	strb	r3, [r5, #8]
 801a010:	8be3      	ldrh	r3, [r4, #30]
 801a012:	726b      	strb	r3, [r5, #9]
 801a014:	69e3      	ldr	r3, [r4, #28]
 801a016:	0a1b      	lsrs	r3, r3, #8
 801a018:	72ab      	strb	r3, [r5, #10]
 801a01a:	69e3      	ldr	r3, [r4, #28]
 801a01c:	72eb      	strb	r3, [r5, #11]
 801a01e:	7ee3      	ldrb	r3, [r4, #27]
 801a020:	732b      	strb	r3, [r5, #12]
 801a022:	8b63      	ldrh	r3, [r4, #26]
 801a024:	736b      	strb	r3, [r5, #13]
 801a026:	69a3      	ldr	r3, [r4, #24]
 801a028:	0a1b      	lsrs	r3, r3, #8
 801a02a:	73ab      	strb	r3, [r5, #14]
 801a02c:	69a3      	ldr	r3, [r4, #24]
 801a02e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 801a030:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 801a034:	742b      	strb	r3, [r5, #16]
 801a036:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 801a038:	746b      	strb	r3, [r5, #17]
 801a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a03c:	0a1b      	lsrs	r3, r3, #8
 801a03e:	74ab      	strb	r3, [r5, #18]
 801a040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a042:	74eb      	strb	r3, [r5, #19]
 801a044:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 801a048:	752b      	strb	r3, [r5, #20]
 801a04a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 801a04c:	756b      	strb	r3, [r5, #21]
 801a04e:	6a23      	ldr	r3, [r4, #32]
 801a050:	0a1b      	lsrs	r3, r3, #8
 801a052:	75ab      	strb	r3, [r5, #22]
 801a054:	6a23      	ldr	r3, [r4, #32]
 801a056:	75eb      	strb	r3, [r5, #23]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 801a058:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 801a05c:	762b      	strb	r3, [r5, #24]
 801a05e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801a060:	766b      	strb	r3, [r5, #25]
 801a062:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a064:	0a1b      	lsrs	r3, r3, #8
 801a066:	76ab      	strb	r3, [r5, #26]
 801a068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a06a:	76eb      	strb	r3, [r5, #27]
 801a06c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 801a070:	772b      	strb	r3, [r5, #28]
 801a072:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801a074:	776b      	strb	r3, [r5, #29]
 801a076:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a078:	0a1b      	lsrs	r3, r3, #8
 801a07a:	77ab      	strb	r3, [r5, #30]
 801a07c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a07e:	77eb      	strb	r3, [r5, #31]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 801a080:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801a084:	f885 3020 	strb.w	r3, [r5, #32]
 801a088:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a08a:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
 801a08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a090:	0a1b      	lsrs	r3, r3, #8
 801a092:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 801a096:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a098:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
 801a09c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 801a0a0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801a0a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801a0a6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801a0aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a0ac:	0a1b      	lsrs	r3, r3, #8
 801a0ae:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 801a0b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a0b4:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 801a0b8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 801a0bc:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 801a0c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 801a0c2:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
 801a0c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a0c8:	0a1b      	lsrs	r3, r3, #8
 801a0ca:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
 801a0ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a0d0:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
 801a0d4:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 801a0d8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 801a0dc:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 801a0de:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
 801a0e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a0e4:	0a1b      	lsrs	r3, r3, #8
 801a0e6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 801a0ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a0ec:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f

    if( ctx->is384 == 0 )
 801a0f0:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d13b      	bne.n	801a170 <mbedtls_sha512_finish+0x204>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 801a0f8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 801a0fc:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801a100:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801a104:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 801a108:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a10a:	0a1b      	lsrs	r3, r3, #8
 801a10c:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 801a110:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a112:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
 801a116:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a11a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 801a11e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801a122:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
 801a126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a128:	0a1b      	lsrs	r3, r3, #8
 801a12a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 801a12e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a130:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 801a134:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 801a138:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801a13c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 801a140:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 801a144:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a146:	0a1b      	lsrs	r3, r3, #8
 801a148:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 801a14c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a14e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
 801a152:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 801a156:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
 801a15a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801a15e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 801a162:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a164:	0a1b      	lsrs	r3, r3, #8
 801a166:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 801a16a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a16c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f
    }
}
 801a170:	b005      	add	sp, #20
 801a172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a174:	0802cd40 	.word	0x0802cd40

0801a178 <mbedtls_sha512>:
/*
 * output = SHA-512( input buffer )
 */
void mbedtls_sha512( const unsigned char *input, size_t ilen,
             unsigned char output[64], int is384 )
{
 801a178:	b570      	push	{r4, r5, r6, lr}
 801a17a:	b0b8      	sub	sp, #224	; 0xe0
 801a17c:	4605      	mov	r5, r0
    mbedtls_sha512_context ctx;

    mbedtls_sha512_init( &ctx );
 801a17e:	a802      	add	r0, sp, #8
{
 801a180:	9301      	str	r3, [sp, #4]
 801a182:	4614      	mov	r4, r2
 801a184:	460e      	mov	r6, r1
    mbedtls_sha512_init( &ctx );
 801a186:	f7ff f880 	bl	801928a <mbedtls_sha512_init>
    mbedtls_sha512_starts( &ctx, is384 );
 801a18a:	9901      	ldr	r1, [sp, #4]
 801a18c:	a802      	add	r0, sp, #8
 801a18e:	f7ff f88f 	bl	80192b0 <mbedtls_sha512_starts>
    mbedtls_sha512_update( &ctx, input, ilen );
 801a192:	4632      	mov	r2, r6
 801a194:	4629      	mov	r1, r5
 801a196:	a802      	add	r0, sp, #8
 801a198:	f7ff fee3 	bl	8019f62 <mbedtls_sha512_update>
    mbedtls_sha512_finish( &ctx, output );
 801a19c:	4621      	mov	r1, r4
 801a19e:	a802      	add	r0, sp, #8
 801a1a0:	f7ff fee4 	bl	8019f6c <mbedtls_sha512_finish>
    mbedtls_sha512_free( &ctx );
 801a1a4:	a802      	add	r0, sp, #8
 801a1a6:	f7ff f874 	bl	8019292 <mbedtls_sha512_free>
}
 801a1aa:	b038      	add	sp, #224	; 0xe0
 801a1ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a1b0 <mbedtls_ssl_ciphersuite_from_id>:

    return( NULL );
}

const mbedtls_ssl_ciphersuite_t *mbedtls_ssl_ciphersuite_from_id( int ciphersuite )
{
 801a1b0:	4602      	mov	r2, r0
    const mbedtls_ssl_ciphersuite_t *cur = ciphersuite_definitions;
 801a1b2:	4804      	ldr	r0, [pc, #16]	; (801a1c4 <mbedtls_ssl_ciphersuite_from_id+0x14>)

    while( cur->id != 0 )
 801a1b4:	6803      	ldr	r3, [r0, #0]
 801a1b6:	b90b      	cbnz	r3, 801a1bc <mbedtls_ssl_ciphersuite_from_id+0xc>
            return( cur );

        cur++;
    }

    return( NULL );
 801a1b8:	4618      	mov	r0, r3
}
 801a1ba:	4770      	bx	lr
        if( cur->id == ciphersuite )
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	d0fc      	beq.n	801a1ba <mbedtls_ssl_ciphersuite_from_id+0xa>
        cur++;
 801a1c0:	3020      	adds	r0, #32
 801a1c2:	e7f7      	b.n	801a1b4 <mbedtls_ssl_ciphersuite_from_id+0x4>
 801a1c4:	0802d0a0 	.word	0x0802d0a0

0801a1c8 <mbedtls_ssl_list_ciphersuites>:
{
 801a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( supported_init == 0 )
 801a1ca:	4c0e      	ldr	r4, [pc, #56]	; (801a204 <mbedtls_ssl_list_ciphersuites+0x3c>)
 801a1cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a1ce:	b953      	cbnz	r3, 801a1e6 <mbedtls_ssl_list_ciphersuites+0x1e>
 801a1d0:	4e0d      	ldr	r6, [pc, #52]	; (801a208 <mbedtls_ssl_list_ciphersuites+0x40>)
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801a1d2:	4621      	mov	r1, r4
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801a1d4:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801a1d8:	f856 5b04 	ldr.w	r5, [r6], #4
        for( p = ciphersuite_preference, q = supported_ciphersuites;
 801a1dc:	b92d      	cbnz	r5, 801a1ea <mbedtls_ssl_list_ciphersuites+0x22>
        *q = 0;
 801a1de:	2300      	movs	r3, #0
 801a1e0:	600b      	str	r3, [r1, #0]
        supported_init = 1;
 801a1e2:	2301      	movs	r3, #1
 801a1e4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 801a1e6:	4807      	ldr	r0, [pc, #28]	; (801a204 <mbedtls_ssl_list_ciphersuites+0x3c>)
 801a1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             *p != 0 && q < supported_ciphersuites + MAX_CIPHERSUITES - 1;
 801a1ea:	42b9      	cmp	r1, r7
 801a1ec:	d2f7      	bcs.n	801a1de <mbedtls_ssl_list_ciphersuites+0x16>
            if( ( cs_info = mbedtls_ssl_ciphersuite_from_id( *p ) ) != NULL &&
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	f7ff ffde 	bl	801a1b0 <mbedtls_ssl_ciphersuite_from_id>
 801a1f4:	2800      	cmp	r0, #0
 801a1f6:	d0ef      	beq.n	801a1d8 <mbedtls_ssl_list_ciphersuites+0x10>
 801a1f8:	7a03      	ldrb	r3, [r0, #8]
 801a1fa:	2b2a      	cmp	r3, #42	; 0x2a
                *(q++) = *p;
 801a1fc:	bf18      	it	ne
 801a1fe:	f841 5b04 	strne.w	r5, [r1], #4
             p++ )
 801a202:	e7e9      	b.n	801a1d8 <mbedtls_ssl_list_ciphersuites+0x10>
 801a204:	200010dc 	.word	0x200010dc
 801a208:	0802d300 	.word	0x0802d300

0801a20c <mbedtls_ssl_get_ciphersuite_name>:

const char *mbedtls_ssl_get_ciphersuite_name( const int ciphersuite_id )
{
 801a20c:	b508      	push	{r3, lr}
    const mbedtls_ssl_ciphersuite_t *cur;

    cur = mbedtls_ssl_ciphersuite_from_id( ciphersuite_id );
 801a20e:	f7ff ffcf 	bl	801a1b0 <mbedtls_ssl_ciphersuite_from_id>

    if( cur == NULL )
 801a212:	b108      	cbz	r0, 801a218 <mbedtls_ssl_get_ciphersuite_name+0xc>
        return( "unknown" );

    return( cur->name );
 801a214:	6840      	ldr	r0, [r0, #4]
}
 801a216:	bd08      	pop	{r3, pc}
        return( "unknown" );
 801a218:	4800      	ldr	r0, [pc, #0]	; (801a21c <mbedtls_ssl_get_ciphersuite_name+0x10>)
 801a21a:	e7fc      	b.n	801a216 <mbedtls_ssl_get_ciphersuite_name+0xa>
 801a21c:	08030c6a 	.word	0x08030c6a

0801a220 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>:
}

#if defined(MBEDTLS_PK_C)
mbedtls_pk_type_t mbedtls_ssl_get_ciphersuite_sig_pk_alg( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801a220:	7a80      	ldrb	r0, [r0, #10]
 801a222:	1e43      	subs	r3, r0, #1
 801a224:	2b09      	cmp	r3, #9
 801a226:	d808      	bhi.n	801a23a <mbedtls_ssl_get_ciphersuite_sig_pk_alg+0x1a>
 801a228:	e8df f003 	tbb	[pc, r3]
 801a22c:	0a090909 	.word	0x0a090909
 801a230:	07090707 	.word	0x07090707
 801a234:	0505      	.short	0x0505
        case MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA:
            return( MBEDTLS_PK_ECDSA );

        case MBEDTLS_KEY_EXCHANGE_ECDH_RSA:
        case MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA:
            return( MBEDTLS_PK_ECKEY );
 801a236:	2002      	movs	r0, #2
 801a238:	4770      	bx	lr

        default:
            return( MBEDTLS_PK_NONE );
 801a23a:	2000      	movs	r0, #0
 801a23c:	4770      	bx	lr
            return( MBEDTLS_PK_RSA );
 801a23e:	2001      	movs	r0, #1
    }
}
 801a240:	4770      	bx	lr

0801a242 <mbedtls_ssl_own_key>:
#if defined(MBEDTLS_X509_CRT_PARSE_C)
static inline mbedtls_pk_context *mbedtls_ssl_own_key( mbedtls_ssl_context *ssl )
{
    mbedtls_ssl_key_cert *key_cert;

    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a242:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 801a244:	4603      	mov	r3, r0
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801a246:	b112      	cbz	r2, 801a24e <mbedtls_ssl_own_key+0xc>
 801a248:	f8d2 013c 	ldr.w	r0, [r2, #316]	; 0x13c
 801a24c:	b910      	cbnz	r0, 801a254 <mbedtls_ssl_own_key+0x12>
        key_cert = ssl->handshake->key_cert;
    else
        key_cert = ssl->conf->key_cert;
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	6c18      	ldr	r0, [r3, #64]	; 0x40

    return( key_cert == NULL ? NULL : key_cert->key );
 801a252:	b100      	cbz	r0, 801a256 <mbedtls_ssl_own_key+0x14>
 801a254:	6840      	ldr	r0, [r0, #4]
}
 801a256:	4770      	bx	lr

0801a258 <ssl_write_client_hello>:

    return( 0 );
}

static int ssl_write_client_hello( mbedtls_ssl_context *ssl )
{
 801a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a25c:	b087      	sub	sp, #28
    unsigned char *p, *q;
    unsigned char offer_compress;
    const int *ciphersuites;
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info;

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a25e:	4bbc      	ldr	r3, [pc, #752]	; (801a550 <ssl_write_client_hello+0x2f8>)
 801a260:	9300      	str	r3, [sp, #0]
{
 801a262:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client hello" ) );
 801a264:	f240 23cf 	movw	r3, #719	; 0x2cf
 801a268:	2102      	movs	r1, #2
 801a26a:	4aba      	ldr	r2, [pc, #744]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a26c:	f7f6 fc2e 	bl	8010acc <mbedtls_debug_print_msg>

    if( ssl->conf->f_rng == NULL )
 801a270:	6821      	ldr	r1, [r4, #0]
 801a272:	698b      	ldr	r3, [r1, #24]
 801a274:	b96b      	cbnz	r3, 801a292 <ssl_write_client_hello+0x3a>
    {
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a276:	4bb8      	ldr	r3, [pc, #736]	; (801a558 <ssl_write_client_hello+0x300>)
 801a278:	9300      	str	r3, [sp, #0]
 801a27a:	4ab6      	ldr	r2, [pc, #728]	; (801a554 <ssl_write_client_hello+0x2fc>)
        return( MBEDTLS_ERR_SSL_NO_RNG );
 801a27c:	4db7      	ldr	r5, [pc, #732]	; (801a55c <ssl_write_client_hello+0x304>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "no RNG provided") );
 801a27e:	f240 23d3 	movw	r3, #723	; 0x2d3
 801a282:	2101      	movs	r1, #1
 801a284:	4620      	mov	r0, r4
 801a286:	f7f6 fc21 	bl	8010acc <mbedtls_debug_print_msg>
    }

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );

    return( 0 );
}
 801a28a:	4628      	mov	r0, r5
 801a28c:	b007      	add	sp, #28
 801a28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a292:	68a3      	ldr	r3, [r4, #8]
 801a294:	b92b      	cbnz	r3, 801a2a2 <ssl_write_client_hello+0x4a>
        ssl->major_ver = ssl->conf->min_major_ver;
 801a296:	f891 306a 	ldrb.w	r3, [r1, #106]	; 0x6a
 801a29a:	6123      	str	r3, [r4, #16]
        ssl->minor_ver = ssl->conf->min_minor_ver;
 801a29c:	f891 306b 	ldrb.w	r3, [r1, #107]	; 0x6b
 801a2a0:	6163      	str	r3, [r4, #20]
    if( ssl->conf->max_major_ver == 0 )
 801a2a2:	f891 0068 	ldrb.w	r0, [r1, #104]	; 0x68
 801a2a6:	b950      	cbnz	r0, 801a2be <ssl_write_client_hello+0x66>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a2a8:	4bad      	ldr	r3, [pc, #692]	; (801a560 <ssl_write_client_hello+0x308>)
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	4aa9      	ldr	r2, [pc, #676]	; (801a554 <ssl_write_client_hello+0x2fc>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a2ae:	4dad      	ldr	r5, [pc, #692]	; (801a564 <ssl_write_client_hello+0x30c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "configured max major version is invalid, "
 801a2b0:	f240 23e1 	movw	r3, #737	; 0x2e1
 801a2b4:	2101      	movs	r1, #1
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	f7f6 fc08 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801a2bc:	e7e5      	b.n	801a28a <ssl_write_client_hello+0x32>
    buf = ssl->out_msg;
 801a2be:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
                       ssl->conf->transport, p );
 801a2c2:	f891 206c 	ldrb.w	r2, [r1, #108]	; 0x6c
    buf = ssl->out_msg;
 801a2c6:	9304      	str	r3, [sp, #16]
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801a2c8:	f891 1069 	ldrb.w	r1, [r1, #105]	; 0x69
 801a2cc:	3304      	adds	r3, #4
 801a2ce:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801a2d2:	f005 f83f 	bl	801f354 <mbedtls_ssl_write_version>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, max version: [%d:%d]",
 801a2d6:	9b04      	ldr	r3, [sp, #16]
 801a2d8:	4a9e      	ldr	r2, [pc, #632]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a2da:	795b      	ldrb	r3, [r3, #5]
 801a2dc:	9302      	str	r3, [sp, #8]
 801a2de:	9b04      	ldr	r3, [sp, #16]
 801a2e0:	791b      	ldrb	r3, [r3, #4]
 801a2e2:	9301      	str	r3, [sp, #4]
 801a2e4:	4ba0      	ldr	r3, [pc, #640]	; (801a568 <ssl_write_client_hello+0x310>)
 801a2e6:	9300      	str	r3, [sp, #0]
 801a2e8:	2103      	movs	r1, #3
 801a2ea:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 801a2ee:	4620      	mov	r0, r4
 801a2f0:	f7f6 fbec 	bl	8010acc <mbedtls_debug_print_msg>
    t = mbedtls_time( NULL );
 801a2f4:	2000      	movs	r0, #0
    unsigned char *p = ssl->handshake->randbytes;
 801a2f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    t = mbedtls_time( NULL );
 801a2f8:	f7e8 ff9c 	bl	8003234 <time>
    *p++ = (unsigned char)( t >> 24 );
 801a2fc:	0e03      	lsrs	r3, r0, #24
 801a2fe:	f885 32ac 	strb.w	r3, [r5, #684]	; 0x2ac
    *p++ = (unsigned char)( t >> 16 );
 801a302:	0c03      	lsrs	r3, r0, #16
 801a304:	f885 32ad 	strb.w	r3, [r5, #685]	; 0x2ad
    *p++ = (unsigned char)( t >>  8 );
 801a308:	0a03      	lsrs	r3, r0, #8
 801a30a:	f885 32ae 	strb.w	r3, [r5, #686]	; 0x2ae
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a30e:	4b97      	ldr	r3, [pc, #604]	; (801a56c <ssl_write_client_hello+0x314>)
    *p++ = (unsigned char)( t       );
 801a310:	f885 02af 	strb.w	r0, [r5, #687]	; 0x2af
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, current time: %lu", t ) );
 801a314:	4a8f      	ldr	r2, [pc, #572]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a316:	9300      	str	r3, [sp, #0]
 801a318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a31c:	f240 23b7 	movw	r3, #695	; 0x2b7
 801a320:	2103      	movs	r1, #3
 801a322:	4620      	mov	r0, r4
 801a324:	f7f6 fbd2 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p, 28 ) ) != 0 )
 801a328:	6823      	ldr	r3, [r4, #0]
 801a32a:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 801a32e:	699e      	ldr	r6, [r3, #24]
 801a330:	69d8      	ldr	r0, [r3, #28]
 801a332:	221c      	movs	r2, #28
 801a334:	47b0      	blx	r6
 801a336:	4605      	mov	r5, r0
 801a338:	b150      	cbz	r0, 801a350 <ssl_write_client_hello+0xf8>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_generate_random", ret );
 801a33a:	4b8d      	ldr	r3, [pc, #564]	; (801a570 <ssl_write_client_hello+0x318>)
 801a33c:	9300      	str	r3, [sp, #0]
 801a33e:	9001      	str	r0, [sp, #4]
 801a340:	f240 23f9 	movw	r3, #761	; 0x2f9
 801a344:	4a83      	ldr	r2, [pc, #524]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a346:	2101      	movs	r1, #1
 801a348:	4620      	mov	r0, r4
 801a34a:	f7f6 fbef 	bl	8010b2c <mbedtls_debug_print_ret>
        return( ret );
 801a34e:	e79c      	b.n	801a28a <ssl_write_client_hello+0x32>
    p += 2;
 801a350:	9b04      	ldr	r3, [sp, #16]
 801a352:	1d99      	adds	r1, r3, #6
    memcpy( p, ssl->handshake->randbytes, 32 );
 801a354:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a356:	4608      	mov	r0, r1
 801a358:	f503 722b 	add.w	r2, r3, #684	; 0x2ac
 801a35c:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801a360:	f852 5b04 	ldr.w	r5, [r2], #4
 801a364:	f840 5b04 	str.w	r5, [r0], #4
 801a368:	429a      	cmp	r2, r3
 801a36a:	d1f9      	bne.n	801a360 <ssl_write_client_hello+0x108>
    MBEDTLS_SSL_DEBUG_BUF( 3, "client hello, random bytes", p, 32 );
 801a36c:	2320      	movs	r3, #32
 801a36e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801a372:	4b80      	ldr	r3, [pc, #512]	; (801a574 <ssl_write_client_hello+0x31c>)
 801a374:	4a77      	ldr	r2, [pc, #476]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a376:	9300      	str	r3, [sp, #0]
 801a378:	2103      	movs	r1, #3
 801a37a:	f240 23fe 	movw	r3, #766	; 0x2fe
 801a37e:	4620      	mov	r0, r4
 801a380:	f7f6 fc04 	bl	8010b8c <mbedtls_debug_print_buf>
    n = ssl->session_negotiate->id_len;
 801a384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a386:	690b      	ldr	r3, [r1, #16]
    if( n < 16 || n > 32 ||
 801a388:	f1a3 0210 	sub.w	r2, r3, #16
 801a38c:	2a10      	cmp	r2, #16
 801a38e:	68a2      	ldr	r2, [r4, #8]
 801a390:	f200 80d8 	bhi.w	801a544 <ssl_write_client_hello+0x2ec>
 801a394:	2a00      	cmp	r2, #0
 801a396:	f040 80d8 	bne.w	801a54a <ssl_write_client_hello+0x2f2>
        ssl->handshake->resume == 0 )
 801a39a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801a39c:	f8d2 2330 	ldr.w	r2, [r2, #816]	; 0x330
        n = 0;
 801a3a0:	2a00      	cmp	r2, #0
 801a3a2:	bf08      	it	eq
 801a3a4:	2300      	moveq	r3, #0
        if( ssl->session_negotiate->ticket != NULL &&
 801a3a6:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 801a3a8:	b172      	cbz	r2, 801a3c8 <ssl_write_client_hello+0x170>
 801a3aa:	6f0a      	ldr	r2, [r1, #112]	; 0x70
 801a3ac:	b162      	cbz	r2, 801a3c8 <ssl_write_client_hello+0x170>
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->session_negotiate->id, 32 );
 801a3ae:	6823      	ldr	r3, [r4, #0]
 801a3b0:	2220      	movs	r2, #32
 801a3b2:	699d      	ldr	r5, [r3, #24]
 801a3b4:	69d8      	ldr	r0, [r3, #28]
 801a3b6:	3114      	adds	r1, #20
 801a3b8:	47a8      	blx	r5
            if( ret != 0 )
 801a3ba:	4605      	mov	r5, r0
 801a3bc:	2800      	cmp	r0, #0
 801a3be:	f47f af64 	bne.w	801a28a <ssl_write_client_hello+0x32>
            ssl->session_negotiate->id_len = n = 32;
 801a3c2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a3c4:	2320      	movs	r3, #32
 801a3c6:	6113      	str	r3, [r2, #16]
    *p++ = (unsigned char) n;
 801a3c8:	9a04      	ldr	r2, [sp, #16]
 801a3ca:	f102 0627 	add.w	r6, r2, #39	; 0x27
 801a3ce:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
 801a3d2:	4631      	mov	r1, r6
    for( i = 0; i < n; i++ )
 801a3d4:	2500      	movs	r5, #0
 801a3d6:	429d      	cmp	r5, r3
 801a3d8:	f040 80e0 	bne.w	801a59c <ssl_write_client_hello+0x344>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, session id len.: %d", n ) );
 801a3dc:	4b66      	ldr	r3, [pc, #408]	; (801a578 <ssl_write_client_hello+0x320>)
 801a3de:	4a5d      	ldr	r2, [pc, #372]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a3e0:	9501      	str	r5, [sp, #4]
 801a3e2:	9300      	str	r3, [sp, #0]
 801a3e4:	2103      	movs	r1, #3
 801a3e6:	f240 3333 	movw	r3, #819	; 0x333
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	f7f6 fb6e 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "client hello, session id", buf + 39, n );
 801a3f0:	4b62      	ldr	r3, [pc, #392]	; (801a57c <ssl_write_client_hello+0x324>)
 801a3f2:	4a58      	ldr	r2, [pc, #352]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a3f4:	9300      	str	r3, [sp, #0]
 801a3f6:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801a3fa:	f44f 734d 	mov.w	r3, #820	; 0x334
 801a3fe:	2103      	movs	r1, #3
 801a400:	4620      	mov	r0, r4
 801a402:	f7f6 fbc3 	bl	8010b8c <mbedtls_debug_print_buf>
    ciphersuites = ssl->conf->ciphersuite_list[ssl->minor_ver];
 801a406:	6823      	ldr	r3, [r4, #0]
 801a408:	6962      	ldr	r2, [r4, #20]
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a40a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 801a598 <ssl_write_client_hello+0x340>
 801a40e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a412:	f8df b140 	ldr.w	fp, [pc, #320]	; 801a554 <ssl_write_client_hello+0x2fc>
 801a416:	eb06 0805 	add.w	r8, r6, r5
    p += 2;
 801a41a:	f108 0602 	add.w	r6, r8, #2
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a41e:	3f04      	subs	r7, #4
    n = 0;
 801a420:	2500      	movs	r5, #0
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a422:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801a426:	f106 0902 	add.w	r9, r6, #2
 801a42a:	2800      	cmp	r0, #0
 801a42c:	f040 80bd 	bne.w	801a5aa <ssl_write_client_hello+0x352>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a430:	68a3      	ldr	r3, [r4, #8]
 801a432:	b923      	cbnz	r3, 801a43e <ssl_write_client_hello+0x1e6>
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO >> 8 );
 801a434:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO      );
 801a436:	23ff      	movs	r3, #255	; 0xff
 801a438:	7073      	strb	r3, [r6, #1]
        n++;
 801a43a:	3501      	adds	r5, #1
 801a43c:	464e      	mov	r6, r9
    *q++ = (unsigned char)( n >> 7 );
 801a43e:	09eb      	lsrs	r3, r5, #7
 801a440:	f888 3000 	strb.w	r3, [r8]
    *q++ = (unsigned char)( n << 1 );
 801a444:	006b      	lsls	r3, r5, #1
 801a446:	f888 3001 	strb.w	r3, [r8, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, got %d ciphersuites", n ) );
 801a44a:	4b4d      	ldr	r3, [pc, #308]	; (801a580 <ssl_write_client_hello+0x328>)
 801a44c:	4a41      	ldr	r2, [pc, #260]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a44e:	9501      	str	r5, [sp, #4]
 801a450:	9300      	str	r3, [sp, #0]
 801a452:	2103      	movs	r1, #3
 801a454:	f44f 7366 	mov.w	r3, #920	; 0x398
 801a458:	4620      	mov	r0, r4
 801a45a:	f7f6 fb37 	bl	8010acc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress len.: %d", 1 ) );
 801a45e:	2501      	movs	r5, #1
 801a460:	4b48      	ldr	r3, [pc, #288]	; (801a584 <ssl_write_client_hello+0x32c>)
 801a462:	4a3c      	ldr	r2, [pc, #240]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a464:	9300      	str	r3, [sp, #0]
 801a466:	2103      	movs	r1, #3
 801a468:	f240 33b7 	movw	r3, #951	; 0x3b7
 801a46c:	4620      	mov	r0, r4
 801a46e:	9501      	str	r5, [sp, #4]
 801a470:	f7f6 fb2c 	bl	8010acc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a474:	f04f 0900 	mov.w	r9, #0
 801a478:	4b43      	ldr	r3, [pc, #268]	; (801a588 <ssl_write_client_hello+0x330>)
 801a47a:	9300      	str	r3, [sp, #0]
        *p++ = 1;
 801a47c:	4637      	mov	r7, r6
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, compress alg.: %d",
 801a47e:	f44f 736e 	mov.w	r3, #952	; 0x3b8
 801a482:	4a34      	ldr	r2, [pc, #208]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a484:	f8cd 9004 	str.w	r9, [sp, #4]
 801a488:	2103      	movs	r1, #3
 801a48a:	4620      	mov	r0, r4
 801a48c:	f7f6 fb1e 	bl	8010acc <mbedtls_debug_print_msg>
        *p++ = 1;
 801a490:	f807 5b02 	strb.w	r5, [r7], #2
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a494:	1d33      	adds	r3, r6, #4
        *p++ = MBEDTLS_SSL_COMPRESS_NULL;
 801a496:	f886 9001 	strb.w	r9, [r6, #1]
    ssl_write_hostname_ext( ssl, p + 2 + ext_len, &olen );
 801a49a:	9305      	str	r3, [sp, #20]
    if( ssl->hostname == NULL )
 801a49c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	f000 80c2 	beq.w	801a62a <ssl_write_client_hello+0x3d2>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4a6:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a4aa:	9301      	str	r3, [sp, #4]
 801a4ac:	4b37      	ldr	r3, [pc, #220]	; (801a58c <ssl_write_client_hello+0x334>)
 801a4ae:	9300      	str	r3, [sp, #0]
 801a4b0:	4a28      	ldr	r2, [pc, #160]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a4b2:	2347      	movs	r3, #71	; 0x47
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4b4:	f505 559c 	add.w	r5, r5, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding server name extension: %s",
 801a4b8:	2103      	movs	r1, #3
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	f7f6 fb06 	bl	8010acc <mbedtls_debug_print_msg>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4c0:	3508      	adds	r5, #8
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a4c2:	1d33      	adds	r3, r6, #4
 801a4c4:	42ab      	cmp	r3, r5
 801a4c6:	d80a      	bhi.n	801a4de <ssl_write_client_hello+0x286>
    hostname_len = strlen( ssl->hostname );
 801a4c8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801a4cc:	f7e5 fe8a 	bl	80001e4 <strlen>
    if( end < p || (size_t)( end - p ) < hostname_len + 9 )
 801a4d0:	1d33      	adds	r3, r6, #4
 801a4d2:	f100 0809 	add.w	r8, r0, #9
 801a4d6:	1aed      	subs	r5, r5, r3
 801a4d8:	4545      	cmp	r5, r8
 801a4da:	f080 808a 	bcs.w	801a5f2 <ssl_write_client_hello+0x39a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a4de:	4b2c      	ldr	r3, [pc, #176]	; (801a590 <ssl_write_client_hello+0x338>)
 801a4e0:	9300      	str	r3, [sp, #0]
 801a4e2:	4a1c      	ldr	r2, [pc, #112]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a4e4:	234e      	movs	r3, #78	; 0x4e
 801a4e6:	2101      	movs	r1, #1
 801a4e8:	4620      	mov	r0, r4
 801a4ea:	f7f6 faef 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a4ee:	f04f 0800 	mov.w	r8, #0
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801a4f2:	f8d4 a008 	ldr.w	sl, [r4, #8]
 801a4f6:	f1ba 0f01 	cmp.w	sl, #1
 801a4fa:	d121      	bne.n	801a540 <ssl_write_client_hello+0x2e8>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a4fc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a500:	4a14      	ldr	r2, [pc, #80]	; (801a554 <ssl_write_client_hello+0x2fc>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a502:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a506:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a50a:	4b22      	ldr	r3, [pc, #136]	; (801a594 <ssl_write_client_hello+0x33c>)
 801a50c:	9300      	str	r3, [sp, #0]
    ssl_write_renegotiation_ext( ssl, p + 2 + ext_len, &olen );
 801a50e:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a510:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding renegotiation extension" ) );
 801a514:	2384      	movs	r3, #132	; 0x84
 801a516:	2103      	movs	r1, #3
 801a518:	4620      	mov	r0, r4
 801a51a:	f7f6 fad7 	bl	8010acc <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 + ssl->verify_data_len )
 801a51e:	454d      	cmp	r5, r9
 801a520:	d806      	bhi.n	801a530 <ssl_write_client_hello+0x2d8>
 801a522:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a526:	eba9 0905 	sub.w	r9, r9, r5
 801a52a:	3305      	adds	r3, #5
 801a52c:	4599      	cmp	r9, r3
 801a52e:	d27e      	bcs.n	801a62e <ssl_write_client_hello+0x3d6>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a530:	4b17      	ldr	r3, [pc, #92]	; (801a590 <ssl_write_client_hello+0x338>)
 801a532:	9300      	str	r3, [sp, #0]
 801a534:	4a07      	ldr	r2, [pc, #28]	; (801a554 <ssl_write_client_hello+0x2fc>)
 801a536:	2388      	movs	r3, #136	; 0x88
 801a538:	2101      	movs	r1, #1
 801a53a:	4620      	mov	r0, r4
 801a53c:	f7f6 fac6 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a540:	2500      	movs	r5, #0
 801a542:	e08b      	b.n	801a65c <ssl_write_client_hello+0x404>
    if( ssl->renego_status == MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801a544:	b90a      	cbnz	r2, 801a54a <ssl_write_client_hello+0x2f2>
        n = 0;
 801a546:	4613      	mov	r3, r2
 801a548:	e72d      	b.n	801a3a6 <ssl_write_client_hello+0x14e>
 801a54a:	2300      	movs	r3, #0
 801a54c:	e73c      	b.n	801a3c8 <ssl_write_client_hello+0x170>
 801a54e:	bf00      	nop
 801a550:	08030f64 	.word	0x08030f64
 801a554:	08030ef4 	.word	0x08030ef4
 801a558:	08030f7a 	.word	0x08030f7a
 801a55c:	ffff8c00 	.word	0xffff8c00
 801a560:	08030f8a 	.word	0x08030f8a
 801a564:	ffff8f00 	.word	0xffff8f00
 801a568:	08030fe0 	.word	0x08030fe0
 801a56c:	08031003 	.word	0x08031003
 801a570:	08031023 	.word	0x08031023
 801a574:	08031037 	.word	0x08031037
 801a578:	08031052 	.word	0x08031052
 801a57c:	08031074 	.word	0x08031074
 801a580:	080310b1 	.word	0x080310b1
 801a584:	080310d3 	.word	0x080310d3
 801a588:	080310f3 	.word	0x080310f3
 801a58c:	08031113 	.word	0x08031113
 801a590:	08031142 	.word	0x08031142
 801a594:	08031153 	.word	0x08031153
 801a598:	0803108d 	.word	0x0803108d
        *p++ = ssl->session_negotiate->id[i];
 801a59c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a59e:	442a      	add	r2, r5
    for( i = 0; i < n; i++ )
 801a5a0:	3501      	adds	r5, #1
        *p++ = ssl->session_negotiate->id[i];
 801a5a2:	7d12      	ldrb	r2, [r2, #20]
 801a5a4:	f801 2b01 	strb.w	r2, [r1], #1
    for( i = 0; i < n; i++ )
 801a5a8:	e715      	b.n	801a3d6 <ssl_write_client_hello+0x17e>
        ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( ciphersuites[i] );
 801a5aa:	f7ff fe01 	bl	801a1b0 <mbedtls_ssl_ciphersuite_from_id>
        if( ciphersuite_info == NULL )
 801a5ae:	2800      	cmp	r0, #0
 801a5b0:	f43f af37 	beq.w	801a422 <ssl_write_client_hello+0x1ca>
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a5b4:	6823      	ldr	r3, [r4, #0]
 801a5b6:	6902      	ldr	r2, [r0, #16]
 801a5b8:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a5bc:	428a      	cmp	r2, r1
 801a5be:	f73f af30 	bgt.w	801a422 <ssl_write_client_hello+0x1ca>
            ciphersuite_info->max_minor_ver < ssl->conf->min_minor_ver )
 801a5c2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
        if( ciphersuite_info->min_minor_ver > ssl->conf->max_minor_ver ||
 801a5c6:	6982      	ldr	r2, [r0, #24]
 801a5c8:	429a      	cmp	r2, r3
 801a5ca:	f6ff af2a 	blt.w	801a422 <ssl_write_client_hello+0x1ca>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, add ciphersuite: %04x",
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	465a      	mov	r2, fp
 801a5d2:	e9cd a300 	strd	sl, r3, [sp]
 801a5d6:	2103      	movs	r1, #3
 801a5d8:	f240 3376 	movw	r3, #886	; 0x376
 801a5dc:	4620      	mov	r0, r4
 801a5de:	f7f6 fa75 	bl	8010acc <mbedtls_debug_print_msg>
        *p++ = (unsigned char)( ciphersuites[i] >> 8 );
 801a5e2:	683b      	ldr	r3, [r7, #0]
 801a5e4:	121b      	asrs	r3, r3, #8
 801a5e6:	7033      	strb	r3, [r6, #0]
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a5e8:	683b      	ldr	r3, [r7, #0]
 801a5ea:	7073      	strb	r3, [r6, #1]
        n++;
 801a5ec:	3501      	adds	r5, #1
        *p++ = (unsigned char)( ciphersuites[i]      );
 801a5ee:	464e      	mov	r6, r9
    for( i = 0; ciphersuites[i] != 0; i++ )
 801a5f0:	e717      	b.n	801a422 <ssl_write_client_hello+0x1ca>
    *p++ = (unsigned char)( ( (hostname_len + 5) >> 8 ) & 0xFF );
 801a5f2:	1d43      	adds	r3, r0, #5
 801a5f4:	0a1b      	lsrs	r3, r3, #8
 801a5f6:	71b3      	strb	r3, [r6, #6]
    *p++ = (unsigned char)( ( (hostname_len + 5)      ) & 0xFF );
 801a5f8:	b2c3      	uxtb	r3, r0
 801a5fa:	1d5a      	adds	r2, r3, #5
 801a5fc:	71f2      	strb	r2, [r6, #7]
    *p++ = (unsigned char)( ( (hostname_len + 3) >> 8 ) & 0xFF );
 801a5fe:	1cc2      	adds	r2, r0, #3
 801a600:	0a12      	lsrs	r2, r2, #8
 801a602:	7232      	strb	r2, [r6, #8]
    *p++ = (unsigned char)( ( (hostname_len + 3)      ) & 0xFF );
 801a604:	1cda      	adds	r2, r3, #3
 801a606:	7272      	strb	r2, [r6, #9]
    *p++ = (unsigned char)( ( hostname_len >> 8 ) & 0xFF );
 801a608:	0a02      	lsrs	r2, r0, #8
 801a60a:	72f2      	strb	r2, [r6, #11]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME >> 8 ) & 0xFF );
 801a60c:	f886 9004 	strb.w	r9, [r6, #4]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME      ) & 0xFF );
 801a610:	f886 9005 	strb.w	r9, [r6, #5]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME ) & 0xFF );
 801a614:	f886 900a 	strb.w	r9, [r6, #10]
    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );
 801a618:	7333      	strb	r3, [r6, #12]
    memcpy( p, ssl->hostname, hostname_len );
 801a61a:	4602      	mov	r2, r0
 801a61c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 801a620:	f106 000d 	add.w	r0, r6, #13
 801a624:	f007 fee0 	bl	80223e8 <memcpy>
    *olen = hostname_len + 9;
 801a628:	e763      	b.n	801a4f2 <ssl_write_client_hello+0x29a>
    *olen = 0;
 801a62a:	4698      	mov	r8, r3
 801a62c:	e761      	b.n	801a4f2 <ssl_write_client_hello+0x29a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO >> 8 ) & 0xFF );
 801a62e:	23ff      	movs	r3, #255	; 0xff
 801a630:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801a632:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_RENEGOTIATION_INFO      ) & 0xFF );
 801a634:	f885 a001 	strb.w	sl, [r5, #1]
    *p++ = 0x00;
 801a638:	70ab      	strb	r3, [r5, #2]
    *p++ = ( ssl->verify_data_len + 1 ) & 0xFF;
 801a63a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a63e:	3301      	adds	r3, #1
 801a640:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->verify_data_len & 0xFF;
 801a642:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801a646:	712b      	strb	r3, [r5, #4]
    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );
 801a648:	1d68      	adds	r0, r5, #5
 801a64a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 801a64e:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 801a652:	f007 fec9 	bl	80223e8 <memcpy>
    *olen = 5 + ssl->verify_data_len;
 801a656:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 801a65a:	3505      	adds	r5, #5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a65c:	6823      	ldr	r3, [r4, #0]
 801a65e:	f893 1069 	ldrb.w	r1, [r3, #105]	; 0x69
 801a662:	2903      	cmp	r1, #3
    ext_len += olen;
 801a664:	44a8      	add	r8, r5
    if( ssl->conf->max_minor_ver != MBEDTLS_SSL_MINOR_VERSION_3 )
 801a666:	d16f      	bne.n	801a748 <ssl_write_client_hello+0x4f0>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a668:	4b42      	ldr	r3, [pc, #264]	; (801a774 <ssl_write_client_hello+0x51c>)
 801a66a:	4a43      	ldr	r2, [pc, #268]	; (801a778 <ssl_write_client_hello+0x520>)
 801a66c:	9300      	str	r3, [sp, #0]
 801a66e:	4620      	mov	r0, r4
 801a670:	23b2      	movs	r3, #178	; 0xb2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a672:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding signature_algorithms extension" ) );
 801a676:	f7f6 fa29 	bl	8010acc <mbedtls_debug_print_msg>
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a67a:	6823      	ldr	r3, [r4, #0]
 801a67c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    size_t sig_alg_len = 0;
 801a67e:	2200      	movs	r2, #0
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a680:	5881      	ldr	r1, [r0, r2]
 801a682:	2900      	cmp	r1, #0
 801a684:	d156      	bne.n	801a734 <ssl_write_client_hello+0x4dc>
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a686:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a68a:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_signature_algorithms_ext( ssl, p + 2 + ext_len, &olen );
 801a68e:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a690:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < sig_alg_len + 6 )
 801a692:	4599      	cmp	r9, r3
 801a694:	d850      	bhi.n	801a738 <ssl_write_client_hello+0x4e0>
 801a696:	eba3 0309 	sub.w	r3, r3, r9
 801a69a:	3206      	adds	r2, #6
 801a69c:	4293      	cmp	r3, r2
 801a69e:	d34b      	bcc.n	801a738 <ssl_write_client_hello+0x4e0>
 801a6a0:	f1a0 0b04 	sub.w	fp, r0, #4
    unsigned char *sig_alg_list = buf + 6;
 801a6a4:	f109 0a06 	add.w	sl, r9, #6
    sig_alg_len = 0;
 801a6a8:	460d      	mov	r5, r1
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a6aa:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801a6ae:	1caa      	adds	r2, r5, #2
 801a6b0:	f10a 0a04 	add.w	sl, sl, #4
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	d14a      	bne.n	801a74e <ssl_write_client_hello+0x4f6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG      ) & 0xFF );
 801a6b8:	230d      	movs	r3, #13
 801a6ba:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a6be:	0a12      	lsrs	r2, r2, #8
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a6c0:	b2eb      	uxtb	r3, r5
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 ) >> 8 ) & 0xFF );
 801a6c2:	f889 2002 	strb.w	r2, [r9, #2]
    *p++ = (unsigned char)( ( ( sig_alg_len + 2 )      ) & 0xFF );
 801a6c6:	1c9a      	adds	r2, r3, #2
 801a6c8:	f889 2003 	strb.w	r2, [r9, #3]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a6cc:	0a2a      	lsrs	r2, r5, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SIG_ALG >> 8 ) & 0xFF );
 801a6ce:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( sig_alg_len >> 8 ) & 0xFF );
 801a6d2:	f889 2004 	strb.w	r2, [r9, #4]
    *p++ = (unsigned char)( ( sig_alg_len      ) & 0xFF );
 801a6d6:	f889 3005 	strb.w	r3, [r9, #5]
    *olen = 6 + sig_alg_len;
 801a6da:	f105 0906 	add.w	r9, r5, #6
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a6de:	4b27      	ldr	r3, [pc, #156]	; (801a77c <ssl_write_client_hello+0x524>)
 801a6e0:	9300      	str	r3, [sp, #0]
 801a6e2:	4a25      	ldr	r2, [pc, #148]	; (801a778 <ssl_write_client_hello+0x520>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a6e4:	f8d4 b0a0 	ldr.w	fp, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_elliptic_curves extension" ) );
 801a6e8:	f240 1307 	movw	r3, #263	; 0x107
 801a6ec:	2103      	movs	r1, #3
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	f7f6 f9ec 	bl	8010acc <mbedtls_debug_print_msg>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a6f4:	6823      	ldr	r3, [r4, #0]
 801a6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    ext_len += olen;
 801a6f8:	44c8      	add	r8, r9
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a6fa:	f103 3aff 	add.w	sl, r3, #4294967295
    size_t elliptic_curve_len = 0;
 801a6fe:	f04f 0900 	mov.w	r9, #0
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801a702:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 801a706:	2800      	cmp	r0, #0
 801a708:	d13c      	bne.n	801a784 <ssl_write_client_hello+0x52c>
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a70a:	f108 0a02 	add.w	sl, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a70e:	f50b 5b9c 	add.w	fp, fp, #4992	; 0x1380
    ssl_write_supported_elliptic_curves_ext( ssl, p + 2 + ext_len, &olen );
 801a712:	44ba      	add	sl, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a714:	f10b 0b08 	add.w	fp, fp, #8
    if( end < p || (size_t)( end - p ) < 6 + elliptic_curve_len )
 801a718:	45da      	cmp	sl, fp
 801a71a:	d806      	bhi.n	801a72a <ssl_write_client_hello+0x4d2>
 801a71c:	ebab 0b0a 	sub.w	fp, fp, sl
 801a720:	f109 0906 	add.w	r9, r9, #6
 801a724:	45cb      	cmp	fp, r9
 801a726:	f080 8178 	bcs.w	801aa1a <ssl_write_client_hello+0x7c2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a72a:	4b15      	ldr	r3, [pc, #84]	; (801a780 <ssl_write_client_hello+0x528>)
 801a72c:	9300      	str	r3, [sp, #0]
 801a72e:	f240 131d 	movw	r3, #285	; 0x11d
 801a732:	e030      	b.n	801a796 <ssl_write_client_hello+0x53e>
        sig_alg_len += 2;
 801a734:	3204      	adds	r2, #4
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a736:	e7a3      	b.n	801a680 <ssl_write_client_hello+0x428>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a738:	4b11      	ldr	r3, [pc, #68]	; (801a780 <ssl_write_client_hello+0x528>)
 801a73a:	9300      	str	r3, [sp, #0]
 801a73c:	4a0e      	ldr	r2, [pc, #56]	; (801a778 <ssl_write_client_hello+0x520>)
 801a73e:	23c0      	movs	r3, #192	; 0xc0
 801a740:	2101      	movs	r1, #1
 801a742:	4620      	mov	r0, r4
 801a744:	f7f6 f9c2 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a748:	f04f 0900 	mov.w	r9, #0
 801a74c:	e7c7      	b.n	801a6de <ssl_write_client_hello+0x486>
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a74e:	f004 fb7c 	bl	801ee4a <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_ECDSA;
 801a752:	f04f 0303 	mov.w	r3, #3
 801a756:	f80a 3c03 	strb.w	r3, [sl, #-3]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a75a:	f80a 0c04 	strb.w	r0, [sl, #-4]
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a75e:	f8db 0000 	ldr.w	r0, [fp]
 801a762:	f004 fb72 	bl	801ee4a <mbedtls_ssl_hash_from_md_alg>
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a766:	2301      	movs	r3, #1
        sig_alg_list[sig_alg_len++] = mbedtls_ssl_hash_from_md_alg( *md );
 801a768:	f80a 0c02 	strb.w	r0, [sl, #-2]
        sig_alg_list[sig_alg_len++] = MBEDTLS_SSL_SIG_RSA;
 801a76c:	3504      	adds	r5, #4
 801a76e:	f80a 3c01 	strb.w	r3, [sl, #-1]
    for( md = ssl->conf->sig_hashes; *md != MBEDTLS_MD_NONE; md++ )
 801a772:	e79a      	b.n	801a6aa <ssl_write_client_hello+0x452>
 801a774:	08031180 	.word	0x08031180
 801a778:	08030ef4 	.word	0x08030ef4
 801a77c:	080311b4 	.word	0x080311b4
 801a780:	08031142 	.word	0x08031142
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801a784:	f7f7 fc38 	bl	8011ff8 <mbedtls_ecp_curve_info_from_grp_id>
        if( info == NULL )
 801a788:	2800      	cmp	r0, #0
 801a78a:	f040 8143 	bne.w	801aa14 <ssl_write_client_hello+0x7bc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid curve in ssl configuration" ) );
 801a78e:	4bca      	ldr	r3, [pc, #808]	; (801aab8 <ssl_write_client_hello+0x860>)
 801a790:	9300      	str	r3, [sp, #0]
 801a792:	f44f 738a 	mov.w	r3, #276	; 0x114
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a796:	4ac9      	ldr	r2, [pc, #804]	; (801aabc <ssl_write_client_hello+0x864>)
 801a798:	2101      	movs	r1, #1
 801a79a:	4620      	mov	r0, r4
 801a79c:	f7f6 f996 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a7a0:	2200      	movs	r2, #0
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ext_len += olen;
 801a7a6:	eb08 0902 	add.w	r9, r8, r2
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a7aa:	f109 0502 	add.w	r5, r9, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7ae:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a7b2:	4bc3      	ldr	r3, [pc, #780]	; (801aac0 <ssl_write_client_hello+0x868>)
 801a7b4:	9300      	str	r3, [sp, #0]
 801a7b6:	4ac1      	ldr	r2, [pc, #772]	; (801aabc <ssl_write_client_hello+0x864>)
    ssl_write_supported_point_formats_ext( ssl, p + 2 + ext_len, &olen );
 801a7b8:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7ba:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding supported_point_formats extension" ) );
 801a7be:	f44f 73a4 	mov.w	r3, #328	; 0x148
 801a7c2:	2103      	movs	r1, #3
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	f7f6 f981 	bl	8010acc <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 6 )
 801a7ca:	4545      	cmp	r5, r8
 801a7cc:	d804      	bhi.n	801a7d8 <ssl_write_client_hello+0x580>
 801a7ce:	eba8 0305 	sub.w	r3, r8, r5
 801a7d2:	2b05      	cmp	r3, #5
 801a7d4:	f200 8153 	bhi.w	801aa7e <ssl_write_client_hello+0x826>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a7d8:	4bba      	ldr	r3, [pc, #744]	; (801aac4 <ssl_write_client_hello+0x86c>)
 801a7da:	9300      	str	r3, [sp, #0]
 801a7dc:	4ab7      	ldr	r2, [pc, #732]	; (801aabc <ssl_write_client_hello+0x864>)
 801a7de:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 801a7e2:	2101      	movs	r1, #1
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	f7f6 f971 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a7ea:	f04f 0a00 	mov.w	sl, #0
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a7ee:	6823      	ldr	r3, [r4, #0]
 801a7f0:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 801a7f4:	f418 78e0 	ands.w	r8, r8, #448	; 0x1c0
    ext_len += olen;
 801a7f8:	44ca      	add	sl, r9
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ) {
 801a7fa:	d023      	beq.n	801a844 <ssl_write_client_hello+0x5ec>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a7fc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a800:	4aae      	ldr	r2, [pc, #696]	; (801aabc <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a802:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a806:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a80a:	4baf      	ldr	r3, [pc, #700]	; (801aac8 <ssl_write_client_hello+0x870>)
 801a80c:	9300      	str	r3, [sp, #0]
    ssl_write_max_fragment_length_ext( ssl, p + 2 + ext_len, &olen );
 801a80e:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a810:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding max_fragment_length extension" ) );
 801a814:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 801a818:	2103      	movs	r1, #3
 801a81a:	4620      	mov	r0, r4
 801a81c:	f7f6 f956 	bl	8010acc <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 5 )
 801a820:	4545      	cmp	r5, r8
 801a822:	d804      	bhi.n	801a82e <ssl_write_client_hello+0x5d6>
 801a824:	eba8 0305 	sub.w	r3, r8, r5
 801a828:	2b04      	cmp	r3, #4
 801a82a:	f200 8135 	bhi.w	801aa98 <ssl_write_client_hello+0x840>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a82e:	4ba5      	ldr	r3, [pc, #660]	; (801aac4 <ssl_write_client_hello+0x86c>)
 801a830:	9300      	str	r3, [sp, #0]
 801a832:	4aa2      	ldr	r2, [pc, #648]	; (801aabc <ssl_write_client_hello+0x864>)
 801a834:	f44f 73df 	mov.w	r3, #446	; 0x1be
 801a838:	2101      	movs	r1, #1
 801a83a:	4620      	mov	r0, r4
 801a83c:	f7f6 f946 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a840:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a844:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a846:	44c2      	add	sl, r8
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED )
 801a848:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a84c:	f018 0808 	ands.w	r8, r8, #8
 801a850:	d023      	beq.n	801a89a <ssl_write_client_hello+0x642>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a852:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a856:	4a99      	ldr	r2, [pc, #612]	; (801aabc <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a858:	f503 589c 	add.w	r8, r3, #4992	; 0x1380
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a85c:	f10a 0502 	add.w	r5, sl, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a860:	4b9a      	ldr	r3, [pc, #616]	; (801aacc <ssl_write_client_hello+0x874>)
 801a862:	9300      	str	r3, [sp, #0]
    ssl_write_truncated_hmac_ext( ssl, p + 2 + ext_len, &olen );
 801a864:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a866:	f108 0808 	add.w	r8, r8, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding truncated_hmac extension" ) );
 801a86a:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
 801a86e:	2103      	movs	r1, #3
 801a870:	4620      	mov	r0, r4
 801a872:	f7f6 f92b 	bl	8010acc <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a876:	4545      	cmp	r5, r8
 801a878:	d804      	bhi.n	801a884 <ssl_write_client_hello+0x62c>
 801a87a:	eba8 0305 	sub.w	r3, r8, r5
 801a87e:	2b03      	cmp	r3, #3
 801a880:	f200 8130 	bhi.w	801aae4 <ssl_write_client_hello+0x88c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a884:	4b8f      	ldr	r3, [pc, #572]	; (801aac4 <ssl_write_client_hello+0x86c>)
 801a886:	9300      	str	r3, [sp, #0]
 801a888:	4a8c      	ldr	r2, [pc, #560]	; (801aabc <ssl_write_client_hello+0x864>)
 801a88a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801a88e:	2101      	movs	r1, #1
 801a890:	4620      	mov	r0, r4
 801a892:	f7f6 f91b 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a896:	f04f 0800 	mov.w	r8, #0
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a89a:	6823      	ldr	r3, [r4, #0]
 801a89c:	f893 506d 	ldrb.w	r5, [r3, #109]	; 0x6d
 801a8a0:	f015 0502 	ands.w	r5, r5, #2
    ext_len += olen;
 801a8a4:	44d0      	add	r8, sl
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801a8a6:	d025      	beq.n	801a8f4 <ssl_write_client_hello+0x69c>
 801a8a8:	f893 5069 	ldrb.w	r5, [r3, #105]	; 0x69
 801a8ac:	b315      	cbz	r5, 801a8f4 <ssl_write_client_hello+0x69c>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8ae:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a8b2:	4a82      	ldr	r2, [pc, #520]	; (801aabc <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8b4:	f503 599c 	add.w	r9, r3, #4992	; 0x1380
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a8b8:	f108 0502 	add.w	r5, r8, #2
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a8bc:	4b84      	ldr	r3, [pc, #528]	; (801aad0 <ssl_write_client_hello+0x878>)
 801a8be:	9300      	str	r3, [sp, #0]
    ssl_write_extended_ms_ext( ssl, p + 2 + ext_len, &olen );
 801a8c0:	443d      	add	r5, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a8c2:	f109 0908 	add.w	r9, r9, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding extended_master_secret "
 801a8c6:	f240 231f 	movw	r3, #543	; 0x21f
 801a8ca:	2103      	movs	r1, #3
 801a8cc:	4620      	mov	r0, r4
 801a8ce:	f7f6 f8fd 	bl	8010acc <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 )
 801a8d2:	454d      	cmp	r5, r9
 801a8d4:	d804      	bhi.n	801a8e0 <ssl_write_client_hello+0x688>
 801a8d6:	eba9 0305 	sub.w	r3, r9, r5
 801a8da:	2b03      	cmp	r3, #3
 801a8dc:	f200 810b 	bhi.w	801aaf6 <ssl_write_client_hello+0x89e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a8e0:	4b78      	ldr	r3, [pc, #480]	; (801aac4 <ssl_write_client_hello+0x86c>)
 801a8e2:	9300      	str	r3, [sp, #0]
 801a8e4:	4a75      	ldr	r2, [pc, #468]	; (801aabc <ssl_write_client_hello+0x864>)
 801a8e6:	f44f 7309 	mov.w	r3, #548	; 0x224
 801a8ea:	2101      	movs	r1, #1
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	f7f6 f8ed 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a8f2:	2500      	movs	r5, #0
    if( ssl->conf->alpn_list == NULL )
 801a8f4:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a8f6:	44a8      	add	r8, r5
    if( ssl->conf->alpn_list == NULL )
 801a8f8:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 801a8fa:	b375      	cbz	r5, 801a95a <ssl_write_client_hello+0x702>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a8fc:	4b75      	ldr	r3, [pc, #468]	; (801aad4 <ssl_write_client_hello+0x87c>)
 801a8fe:	9300      	str	r3, [sp, #0]
 801a900:	4a6e      	ldr	r2, [pc, #440]	; (801aabc <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a902:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding alpn extension" ) );
 801a906:	f240 236e 	movw	r3, #622	; 0x26e
 801a90a:	2103      	movs	r1, #3
 801a90c:	4620      	mov	r0, r4
 801a90e:	f7f6 f8dd 	bl	8010acc <mbedtls_debug_print_msg>
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a912:	6823      	ldr	r3, [r4, #0]
 801a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    size_t alpnlen = 0;
 801a916:	f04f 0a00 	mov.w	sl, #0
 801a91a:	f1a3 0904 	sub.w	r9, r3, #4
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801a91e:	f859 0f04 	ldr.w	r0, [r9, #4]!
 801a922:	2800      	cmp	r0, #0
 801a924:	f040 80ef 	bne.w	801ab06 <ssl_write_client_hello+0x8ae>
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a928:	f108 0902 	add.w	r9, r8, #2
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a92c:	f505 539c 	add.w	r3, r5, #4992	; 0x1380
    ssl_write_alpn_ext( ssl, p + 2 + ext_len, &olen );
 801a930:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a932:	3308      	adds	r3, #8
    if( end < p || (size_t)( end - p ) < 6 + alpnlen )
 801a934:	4599      	cmp	r9, r3
 801a936:	d806      	bhi.n	801a946 <ssl_write_client_hello+0x6ee>
 801a938:	eba3 0309 	sub.w	r3, r3, r9
 801a93c:	f10a 0a06 	add.w	sl, sl, #6
 801a940:	4553      	cmp	r3, sl
 801a942:	f080 80e6 	bcs.w	801ab12 <ssl_write_client_hello+0x8ba>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a946:	4b5f      	ldr	r3, [pc, #380]	; (801aac4 <ssl_write_client_hello+0x86c>)
 801a948:	9300      	str	r3, [sp, #0]
 801a94a:	4a5c      	ldr	r2, [pc, #368]	; (801aabc <ssl_write_client_hello+0x864>)
 801a94c:	f240 2375 	movw	r3, #629	; 0x275
 801a950:	2101      	movs	r1, #1
 801a952:	4620      	mov	r0, r4
 801a954:	f7f6 f8ba 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a958:	2500      	movs	r5, #0
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a95a:	6823      	ldr	r3, [r4, #0]
    ext_len += olen;
 801a95c:	4445      	add	r5, r8
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED )
 801a95e:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
 801a962:	f018 0810 	ands.w	r8, r8, #16
 801a966:	d028      	beq.n	801a9ba <ssl_write_client_hello+0x762>
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a968:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a96c:	4a53      	ldr	r2, [pc, #332]	; (801aabc <ssl_write_client_hello+0x864>)
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a96e:	f503 5a9c 	add.w	sl, r3, #4992	; 0x1380
    size_t tlen = ssl->session_negotiate->ticket_len;
 801a972:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801a974:	f105 0902 	add.w	r9, r5, #2
    size_t tlen = ssl->session_negotiate->ticket_len;
 801a978:	f8d3 b070 	ldr.w	fp, [r3, #112]	; 0x70
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a97c:	4b56      	ldr	r3, [pc, #344]	; (801aad8 <ssl_write_client_hello+0x880>)
 801a97e:	9300      	str	r3, [sp, #0]
    ssl_write_session_ticket_ext( ssl, p + 2 + ext_len, &olen );
 801a980:	44b9      	add	r9, r7
    const unsigned char *end = ssl->out_msg + MBEDTLS_SSL_MAX_CONTENT_LEN;
 801a982:	f10a 0a08 	add.w	sl, sl, #8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, adding session ticket extension" ) );
 801a986:	f240 2341 	movw	r3, #577	; 0x241
 801a98a:	2103      	movs	r1, #3
 801a98c:	4620      	mov	r0, r4
 801a98e:	f7f6 f89d 	bl	8010acc <mbedtls_debug_print_msg>
    if( end < p || (size_t)( end - p ) < 4 + tlen )
 801a992:	45d1      	cmp	r9, sl
 801a994:	d806      	bhi.n	801a9a4 <ssl_write_client_hello+0x74c>
 801a996:	f10b 0804 	add.w	r8, fp, #4
 801a99a:	ebaa 0a09 	sub.w	sl, sl, r9
 801a99e:	45c2      	cmp	sl, r8
 801a9a0:	f080 80e8 	bcs.w	801ab74 <ssl_write_client_hello+0x91c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "buffer too small" ) );
 801a9a4:	4b47      	ldr	r3, [pc, #284]	; (801aac4 <ssl_write_client_hello+0x86c>)
 801a9a6:	9300      	str	r3, [sp, #0]
 801a9a8:	4a44      	ldr	r2, [pc, #272]	; (801aabc <ssl_write_client_hello+0x864>)
 801a9aa:	f240 2345 	movw	r3, #581	; 0x245
 801a9ae:	2101      	movs	r1, #1
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	f7f6 f88b 	bl	8010acc <mbedtls_debug_print_msg>
    *olen = 0;
 801a9b6:	f04f 0800 	mov.w	r8, #0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801a9ba:	4b48      	ldr	r3, [pc, #288]	; (801aadc <ssl_write_client_hello+0x884>)
 801a9bc:	9300      	str	r3, [sp, #0]
    ext_len += olen;
 801a9be:	4445      	add	r5, r8
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "client hello, total extension length: %d",
 801a9c0:	4a3e      	ldr	r2, [pc, #248]	; (801aabc <ssl_write_client_hello+0x864>)
 801a9c2:	9501      	str	r5, [sp, #4]
 801a9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a9c8:	2103      	movs	r1, #3
 801a9ca:	4620      	mov	r0, r4
 801a9cc:	f7f6 f87e 	bl	8010acc <mbedtls_debug_print_msg>
    if( ext_len > 0 )
 801a9d0:	b12d      	cbz	r5, 801a9de <ssl_write_client_hello+0x786>
        *p++ = (unsigned char)( ( ext_len >> 8 ) & 0xFF );
 801a9d2:	0a2b      	lsrs	r3, r5, #8
 801a9d4:	70b3      	strb	r3, [r6, #2]
        p += ext_len;
 801a9d6:	9b05      	ldr	r3, [sp, #20]
        *p++ = (unsigned char)( ( ext_len      ) & 0xFF );
 801a9d8:	70f5      	strb	r5, [r6, #3]
        p += ext_len;
 801a9da:	442b      	add	r3, r5
 801a9dc:	461f      	mov	r7, r3
    ssl->out_msglen  = p - buf;
 801a9de:	9b04      	ldr	r3, [sp, #16]
 801a9e0:	1aff      	subs	r7, r7, r3
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801a9e2:	2316      	movs	r3, #22
 801a9e4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801a9e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ssl->out_msglen  = p - buf;
 801a9ec:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_HELLO;
 801a9f0:	2601      	movs	r6, #1
 801a9f2:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801a9f4:	6863      	ldr	r3, [r4, #4]
 801a9f6:	4433      	add	r3, r6
 801a9f8:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f002 f9c4 	bl	801cd88 <mbedtls_ssl_write_record>
 801aa00:	4605      	mov	r5, r0
 801aa02:	2800      	cmp	r0, #0
 801aa04:	f000 80de 	beq.w	801abc4 <ssl_write_client_hello+0x96c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801aa08:	4b35      	ldr	r3, [pc, #212]	; (801aae0 <ssl_write_client_hello+0x888>)
 801aa0a:	9300      	str	r3, [sp, #0]
 801aa0c:	9001      	str	r0, [sp, #4]
 801aa0e:	f240 4317 	movw	r3, #1047	; 0x417
 801aa12:	e497      	b.n	801a344 <ssl_write_client_hello+0xec>
        elliptic_curve_len += 2;
 801aa14:	f109 0902 	add.w	r9, r9, #2
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aa18:	e673      	b.n	801a702 <ssl_write_client_hello+0x4aa>
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aa1a:	6823      	ldr	r3, [r4, #0]
 801aa1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa1e:	f06f 0505 	mvn.w	r5, #5
 801aa22:	f103 39ff 	add.w	r9, r3, #4294967295
    unsigned char *elliptic_curve_list = p + 6;
 801aa26:	f10a 0b06 	add.w	fp, sl, #6
 801aa2a:	eba5 050a 	sub.w	r5, r5, sl
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aa2e:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 801aa32:	eb05 020b 	add.w	r2, r5, fp
 801aa36:	f10b 0b02 	add.w	fp, fp, #2
 801aa3a:	b9b0      	cbnz	r0, 801aa6a <ssl_write_client_hello+0x812>
    if( elliptic_curve_len == 0 )
 801aa3c:	2a00      	cmp	r2, #0
 801aa3e:	f43f aeb0 	beq.w	801a7a2 <ssl_write_client_hello+0x54a>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES      ) & 0xFF );
 801aa42:	230a      	movs	r3, #10
 801aa44:	f88a 3001 	strb.w	r3, [sl, #1]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 ) >> 8 ) & 0xFF );
 801aa48:	1c93      	adds	r3, r2, #2
 801aa4a:	0a1b      	lsrs	r3, r3, #8
 801aa4c:	f88a 3002 	strb.w	r3, [sl, #2]
    *p++ = (unsigned char)( ( ( elliptic_curve_len + 2 )      ) & 0xFF );
 801aa50:	b2d3      	uxtb	r3, r2
 801aa52:	1c99      	adds	r1, r3, #2
 801aa54:	f88a 1003 	strb.w	r1, [sl, #3]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801aa58:	0a11      	lsrs	r1, r2, #8
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES >> 8 ) & 0xFF );
 801aa5a:	f88a 0000 	strb.w	r0, [sl]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     ) >> 8 ) & 0xFF );
 801aa5e:	f88a 1004 	strb.w	r1, [sl, #4]
    *p++ = (unsigned char)( ( ( elliptic_curve_len     )      ) & 0xFF );
 801aa62:	f88a 3005 	strb.w	r3, [sl, #5]
    *olen = 6 + elliptic_curve_len;
 801aa66:	3206      	adds	r2, #6
 801aa68:	e69b      	b.n	801a7a2 <ssl_write_client_hello+0x54a>
        info = mbedtls_ecp_curve_info_from_grp_id( *grp_id );
 801aa6a:	f7f7 fac5 	bl	8011ff8 <mbedtls_ecp_curve_info_from_grp_id>
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id >> 8;
 801aa6e:	8843      	ldrh	r3, [r0, #2]
 801aa70:	0a1b      	lsrs	r3, r3, #8
 801aa72:	f80b 3c02 	strb.w	r3, [fp, #-2]
        elliptic_curve_list[elliptic_curve_len++] = info->tls_id & 0xFF;
 801aa76:	8843      	ldrh	r3, [r0, #2]
 801aa78:	f80b 3c01 	strb.w	r3, [fp, #-1]
    for( grp_id = ssl->conf->curve_list; *grp_id != MBEDTLS_ECP_DP_NONE; grp_id++ )
 801aa7c:	e7d7      	b.n	801aa2e <ssl_write_client_hello+0x7d6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS      ) & 0xFF );
 801aa7e:	220b      	movs	r2, #11
 801aa80:	706a      	strb	r2, [r5, #1]
    *p++ = 2;
 801aa82:	2202      	movs	r2, #2
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801aa84:	2300      	movs	r3, #0
    *p++ = 2;
 801aa86:	70ea      	strb	r2, [r5, #3]
    *p++ = 1;
 801aa88:	2201      	movs	r2, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS >> 8 ) & 0xFF );
 801aa8a:	702b      	strb	r3, [r5, #0]
    *p++ = 0x00;
 801aa8c:	70ab      	strb	r3, [r5, #2]
    *p++ = 1;
 801aa8e:	712a      	strb	r2, [r5, #4]
    *p++ = MBEDTLS_ECP_PF_UNCOMPRESSED;
 801aa90:	716b      	strb	r3, [r5, #5]
    *olen = 6;
 801aa92:	f04f 0a06 	mov.w	sl, #6
 801aa96:	e6aa      	b.n	801a7ee <ssl_write_client_hello+0x596>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801aa98:	2301      	movs	r3, #1
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH >> 8 ) & 0xFF );
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	702a      	strb	r2, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH      ) & 0xFF );
 801aa9e:	706b      	strb	r3, [r5, #1]
    *p++ = 0x00;
 801aaa0:	70aa      	strb	r2, [r5, #2]
    *p++ = 1;
 801aaa2:	70eb      	strb	r3, [r5, #3]
    *p++ = ssl->conf->mfl_code;
 801aaa4:	6823      	ldr	r3, [r4, #0]
 801aaa6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801aaaa:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801aaae:	712b      	strb	r3, [r5, #4]
    *olen = 5;
 801aab0:	f04f 0805 	mov.w	r8, #5
 801aab4:	e6c6      	b.n	801a844 <ssl_write_client_hello+0x5ec>
 801aab6:	bf00      	nop
 801aab8:	080311ed 	.word	0x080311ed
 801aabc:	08030ef4 	.word	0x08030ef4
 801aac0:	08031210 	.word	0x08031210
 801aac4:	08031142 	.word	0x08031142
 801aac8:	08031247 	.word	0x08031247
 801aacc:	0803127a 	.word	0x0803127a
 801aad0:	080312a8 	.word	0x080312a8
 801aad4:	080312de 	.word	0x080312de
 801aad8:	08031302 	.word	0x08031302
 801aadc:	08031354 	.word	0x08031354
 801aae0:	0803137d 	.word	0x0803137d
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801aae4:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801aae6:	f04f 0804 	mov.w	r8, #4
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC >> 8 ) & 0xFF );
 801aaea:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_TRUNCATED_HMAC      ) & 0xFF );
 801aaec:	f885 8001 	strb.w	r8, [r5, #1]
    *p++ = 0x00;
 801aaf0:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801aaf2:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801aaf4:	e6d1      	b.n	801a89a <ssl_write_client_hello+0x642>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801aaf6:	2300      	movs	r3, #0
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801aaf8:	2217      	movs	r2, #23
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET >> 8 ) & 0xFF );
 801aafa:	702b      	strb	r3, [r5, #0]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET      ) & 0xFF );
 801aafc:	706a      	strb	r2, [r5, #1]
    *p++ = 0x00;
 801aafe:	70ab      	strb	r3, [r5, #2]
    *p++ = 0x00;
 801ab00:	70eb      	strb	r3, [r5, #3]
    *olen = 4;
 801ab02:	2504      	movs	r5, #4
 801ab04:	e6f6      	b.n	801a8f4 <ssl_write_client_hello+0x69c>
        alpnlen += (unsigned char)( strlen( *cur ) & 0xFF ) + 1;
 801ab06:	f7e5 fb6d 	bl	80001e4 <strlen>
 801ab0a:	b2c0      	uxtb	r0, r0
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	4482      	add	sl, r0
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801ab10:	e705      	b.n	801a91e <ssl_write_client_hello+0x6c6>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801ab12:	2310      	movs	r3, #16
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN >> 8 ) & 0xFF );
 801ab14:	f889 0000 	strb.w	r0, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_ALPN      ) & 0xFF );
 801ab18:	f889 3001 	strb.w	r3, [r9, #1]
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801ab1c:	6823      	ldr	r3, [r4, #0]
 801ab1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    p += 4;
 801ab20:	f109 0506 	add.w	r5, r9, #6
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801ab24:	f1a3 0a04 	sub.w	sl, r3, #4
 801ab28:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 801ab2c:	b988      	cbnz	r0, 801ab52 <ssl_write_client_hello+0x8fa>
    *olen = p - buf;
 801ab2e:	eba5 0509 	sub.w	r5, r5, r9
    buf[4] = (unsigned char)( ( ( *olen - 6 ) >> 8 ) & 0xFF );
 801ab32:	1fab      	subs	r3, r5, #6
 801ab34:	0a1b      	lsrs	r3, r3, #8
 801ab36:	f889 3004 	strb.w	r3, [r9, #4]
    buf[5] = (unsigned char)( ( ( *olen - 6 )      ) & 0xFF );
 801ab3a:	b2eb      	uxtb	r3, r5
 801ab3c:	1f9a      	subs	r2, r3, #6
 801ab3e:	f889 2005 	strb.w	r2, [r9, #5]
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801ab42:	1f2a      	subs	r2, r5, #4
 801ab44:	0a12      	lsrs	r2, r2, #8
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801ab46:	3b04      	subs	r3, #4
    buf[2] = (unsigned char)( ( ( *olen - 4 ) >> 8 ) & 0xFF );
 801ab48:	f889 2002 	strb.w	r2, [r9, #2]
    buf[3] = (unsigned char)( ( ( *olen - 4 )      ) & 0xFF );
 801ab4c:	f889 3003 	strb.w	r3, [r9, #3]
 801ab50:	e703      	b.n	801a95a <ssl_write_client_hello+0x702>
        *p = (unsigned char)( strlen( *cur ) & 0xFF );
 801ab52:	f7e5 fb47 	bl	80001e4 <strlen>
 801ab56:	4683      	mov	fp, r0
 801ab58:	4628      	mov	r0, r5
 801ab5a:	f800 bb01 	strb.w	fp, [r0], #1
        memcpy( p + 1, *cur, *p );
 801ab5e:	fa5f fb8b 	uxtb.w	fp, fp
 801ab62:	465a      	mov	r2, fp
 801ab64:	f8da 1000 	ldr.w	r1, [sl]
        p += 1 + *p;
 801ab68:	f10b 0b01 	add.w	fp, fp, #1
        memcpy( p + 1, *cur, *p );
 801ab6c:	f007 fc3c 	bl	80223e8 <memcpy>
        p += 1 + *p;
 801ab70:	445d      	add	r5, fp
    for( cur = ssl->conf->alpn_list; *cur != NULL; cur++ )
 801ab72:	e7d9      	b.n	801ab28 <ssl_write_client_hello+0x8d0>
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET >> 8 ) & 0xFF );
 801ab74:	2300      	movs	r3, #0
 801ab76:	f889 3000 	strb.w	r3, [r9]
    *p++ = (unsigned char)( ( MBEDTLS_TLS_EXT_SESSION_TICKET      ) & 0xFF );
 801ab7a:	2323      	movs	r3, #35	; 0x23
 801ab7c:	f889 3001 	strb.w	r3, [r9, #1]
    *p++ = (unsigned char)( ( tlen >> 8 ) & 0xFF );
 801ab80:	ea4f 231b 	mov.w	r3, fp, lsr #8
 801ab84:	f889 3002 	strb.w	r3, [r9, #2]
    *p++ = (unsigned char)( ( tlen      ) & 0xFF );
 801ab88:	f889 b003 	strb.w	fp, [r9, #3]
    if( ssl->session_negotiate->ticket == NULL || tlen == 0 )
 801ab8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ab8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab90:	b1ab      	cbz	r3, 801abbe <ssl_write_client_hello+0x966>
 801ab92:	f1bb 0f00 	cmp.w	fp, #0
 801ab96:	d012      	beq.n	801abbe <ssl_write_client_hello+0x966>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "sending session ticket of length %d", tlen ) );
 801ab98:	4b10      	ldr	r3, [pc, #64]	; (801abdc <ssl_write_client_hello+0x984>)
 801ab9a:	9300      	str	r3, [sp, #0]
 801ab9c:	4620      	mov	r0, r4
 801ab9e:	4a10      	ldr	r2, [pc, #64]	; (801abe0 <ssl_write_client_hello+0x988>)
 801aba0:	f8cd b004 	str.w	fp, [sp, #4]
 801aba4:	f240 2356 	movw	r3, #598	; 0x256
 801aba8:	2103      	movs	r1, #3
 801abaa:	f7f5 ff8f 	bl	8010acc <mbedtls_debug_print_msg>
    memcpy( p, ssl->session_negotiate->ticket, tlen );
 801abae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801abb0:	465a      	mov	r2, fp
 801abb2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801abb4:	f109 0004 	add.w	r0, r9, #4
 801abb8:	f007 fc16 	bl	80223e8 <memcpy>
    *olen += tlen;
 801abbc:	e6fd      	b.n	801a9ba <ssl_write_client_hello+0x762>
    *olen = 4;
 801abbe:	f04f 0804 	mov.w	r8, #4
 801abc2:	e6fa      	b.n	801a9ba <ssl_write_client_hello+0x762>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client hello" ) );
 801abc4:	4b07      	ldr	r3, [pc, #28]	; (801abe4 <ssl_write_client_hello+0x98c>)
 801abc6:	9300      	str	r3, [sp, #0]
 801abc8:	4a05      	ldr	r2, [pc, #20]	; (801abe0 <ssl_write_client_hello+0x988>)
 801abca:	f240 431b 	movw	r3, #1051	; 0x41b
 801abce:	2102      	movs	r1, #2
 801abd0:	4620      	mov	r0, r4
 801abd2:	f7f5 ff7b 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801abd6:	f7ff bb58 	b.w	801a28a <ssl_write_client_hello+0x32>
 801abda:	bf00      	nop
 801abdc:	08031330 	.word	0x08031330
 801abe0:	08030ef4 	.word	0x08030ef4
 801abe4:	08031396 	.word	0x08031396

0801abe8 <mbedtls_ssl_handshake_client_step>:

/*
 * SSL handshake -- client side -- single step
 */
int mbedtls_ssl_handshake_client_step( mbedtls_ssl_context *ssl )
{
 801abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int ret = 0;

    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801abec:	6843      	ldr	r3, [r0, #4]
{
 801abee:	ed2d 8b02 	vpush	{d8}
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801abf2:	2b10      	cmp	r3, #16
{
 801abf4:	b0a1      	sub	sp, #132	; 0x84
 801abf6:	4604      	mov	r4, r0
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER || ssl->handshake == NULL )
 801abf8:	f000 81a0 	beq.w	801af3c <mbedtls_ssl_handshake_client_step+0x354>
 801abfc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 801abfe:	2a00      	cmp	r2, #0
 801ac00:	f000 819c 	beq.w	801af3c <mbedtls_ssl_handshake_client_step+0x354>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    MBEDTLS_SSL_DEBUG_MSG( 2, ( "client state: %d", ssl->state ) );
 801ac04:	9301      	str	r3, [sp, #4]
 801ac06:	4baf      	ldr	r3, [pc, #700]	; (801aec4 <mbedtls_ssl_handshake_client_step+0x2dc>)
 801ac08:	4aaf      	ldr	r2, [pc, #700]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ac0a:	9300      	str	r3, [sp, #0]
 801ac0c:	2102      	movs	r1, #2
 801ac0e:	f640 5323 	movw	r3, #3363	; 0xd23
 801ac12:	f7f5 ff5b 	bl	8010acc <mbedtls_debug_print_msg>

    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801ac16:	4620      	mov	r0, r4
 801ac18:	f002 f82a 	bl	801cc70 <mbedtls_ssl_flush_output>
 801ac1c:	4605      	mov	r5, r0
 801ac1e:	bb18      	cbnz	r0, 801ac68 <mbedtls_ssl_handshake_client_step+0x80>
#endif

    /* Change state now, so that it is right in mbedtls_ssl_read_record(), used
     * by DTLS for dropping out-of-sequence ChangeCipherSpec records */
#if defined(MBEDTLS_SSL_SESSION_TICKETS)
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801ac20:	6863      	ldr	r3, [r4, #4]
 801ac22:	2b0c      	cmp	r3, #12
 801ac24:	d105      	bne.n	801ac32 <mbedtls_ssl_handshake_client_step+0x4a>
        ssl->handshake->new_session_ticket != 0 )
 801ac26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if( ssl->state == MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC &&
 801ac28:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801ac2c:	b10b      	cbz	r3, 801ac32 <mbedtls_ssl_handshake_client_step+0x4a>
    {
        ssl->state = MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET;
 801ac2e:	2311      	movs	r3, #17
 801ac30:	6063      	str	r3, [r4, #4]
    }
#endif

    switch( ssl->state )
 801ac32:	6863      	ldr	r3, [r4, #4]
 801ac34:	2b11      	cmp	r3, #17
 801ac36:	f201 8236 	bhi.w	801c0a6 <mbedtls_ssl_handshake_client_step+0x14be>
 801ac3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ac3e:	0012      	.short	0x0012
 801ac40:	0020001b 	.word	0x0020001b
 801ac44:	0433042e 	.word	0x0433042e
 801ac48:	072f0682 	.word	0x072f0682
 801ac4c:	079f0770 	.word	0x079f0770
 801ac50:	096c0898 	.word	0x096c0898
 801ac54:	0a190971 	.word	0x0a190971
 801ac58:	0a230a1e 	.word	0x0a230a1e
 801ac5c:	0a340a2f 	.word	0x0a340a2f
 801ac60:	0976      	.short	0x0976
    {
        case MBEDTLS_SSL_HELLO_REQUEST:
            ssl->state = MBEDTLS_SSL_CLIENT_HELLO;
 801ac62:	2201      	movs	r2, #1
 801ac64:	6062      	str	r2, [r4, #4]
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801ac66:	461d      	mov	r5, r3
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
   }

    return( ret );
}
 801ac68:	4628      	mov	r0, r5
 801ac6a:	b021      	add	sp, #132	; 0x84
 801ac6c:	ecbd 8b02 	vpop	{d8}
 801ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ret = ssl_write_client_hello( ssl );
 801ac74:	4620      	mov	r0, r4
 801ac76:	f7ff faef 	bl	801a258 <ssl_write_client_hello>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801ac7a:	4605      	mov	r5, r0
           break;
 801ac7c:	e7f4      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello" ) );
 801ac7e:	4b93      	ldr	r3, [pc, #588]	; (801aecc <mbedtls_ssl_handshake_client_step+0x2e4>)
 801ac80:	4a91      	ldr	r2, [pc, #580]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ac82:	9300      	str	r3, [sp, #0]
 801ac84:	2102      	movs	r1, #2
 801ac86:	f240 53a7 	movw	r3, #1447	; 0x5a7
 801ac8a:	4620      	mov	r0, r4
 801ac8c:	f7f5 ff1e 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ac90:	4620      	mov	r0, r4
    buf = ssl->in_msg;
 801ac92:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ac94:	f002 ffc6 	bl	801dc24 <mbedtls_ssl_read_record>
 801ac98:	4605      	mov	r5, r0
 801ac9a:	b150      	cbz	r0, 801acb2 <mbedtls_ssl_handshake_client_step+0xca>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ac9c:	4b8c      	ldr	r3, [pc, #560]	; (801aed0 <mbedtls_ssl_handshake_client_step+0x2e8>)
 801ac9e:	9300      	str	r3, [sp, #0]
 801aca0:	9001      	str	r0, [sp, #4]
 801aca2:	f240 53ae 	movw	r3, #1454	; 0x5ae
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801aca6:	4a88      	ldr	r2, [pc, #544]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aca8:	2101      	movs	r1, #1
 801acaa:	4620      	mov	r0, r4
 801acac:	f7f5 ff3e 	bl	8010b2c <mbedtls_debug_print_ret>
        return( ret );
 801acb0:	e7da      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801acb2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801acb4:	2b16      	cmp	r3, #22
 801acb6:	d032      	beq.n	801ad1e <mbedtls_ssl_handshake_client_step+0x136>
        if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801acb8:	68a1      	ldr	r1, [r4, #8]
 801acba:	2901      	cmp	r1, #1
 801acbc:	d11f      	bne.n	801acfe <mbedtls_ssl_handshake_client_step+0x116>
            if( ssl->conf->renego_max_records >= 0 &&
 801acbe:	6822      	ldr	r2, [r4, #0]
            ssl->renego_records_seen++;
 801acc0:	68e3      	ldr	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801acc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
            ssl->renego_records_seen++;
 801acc4:	3301      	adds	r3, #1
            if( ssl->conf->renego_max_records >= 0 &&
 801acc6:	2a00      	cmp	r2, #0
            ssl->renego_records_seen++;
 801acc8:	60e3      	str	r3, [r4, #12]
            if( ssl->conf->renego_max_records >= 0 &&
 801acca:	db0a      	blt.n	801ace2 <mbedtls_ssl_handshake_client_step+0xfa>
 801accc:	4293      	cmp	r3, r2
 801acce:	dd08      	ble.n	801ace2 <mbedtls_ssl_handshake_client_step+0xfa>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801acd0:	4b80      	ldr	r3, [pc, #512]	; (801aed4 <mbedtls_ssl_handshake_client_step+0x2ec>)
 801acd2:	4a7d      	ldr	r2, [pc, #500]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801acd4:	9300      	str	r3, [sp, #0]
 801acd6:	f240 53bc 	movw	r3, #1468	; 0x5bc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801acda:	4620      	mov	r0, r4
 801acdc:	f7f5 fef6 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ace0:	e01b      	b.n	801ad1a <mbedtls_ssl_handshake_client_step+0x132>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801ace2:	4b7d      	ldr	r3, [pc, #500]	; (801aed8 <mbedtls_ssl_handshake_client_step+0x2f0>)
 801ace4:	9300      	str	r3, [sp, #0]
 801ace6:	4a78      	ldr	r2, [pc, #480]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801ace8:	4d7c      	ldr	r5, [pc, #496]	; (801aedc <mbedtls_ssl_handshake_client_step+0x2f4>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-handshake message during renego" ) );
 801acea:	f240 53c1 	movw	r3, #1473	; 0x5c1
 801acee:	2101      	movs	r1, #1
 801acf0:	4620      	mov	r0, r4
 801acf2:	f7f5 feeb 	bl	8010acc <mbedtls_debug_print_msg>
            ssl->keep_current_message = 1;
 801acf6:	2301      	movs	r3, #1
 801acf8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
            return( MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO );
 801acfc:	e7b4      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801acfe:	4b78      	ldr	r3, [pc, #480]	; (801aee0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ad00:	9300      	str	r3, [sp, #0]
 801ad02:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 801ad06:	4a70      	ldr	r2, [pc, #448]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ad08:	2101      	movs	r1, #1
 801ad0a:	4620      	mov	r0, r4
 801ad0c:	f7f5 fede 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ad10:	220a      	movs	r2, #10
 801ad12:	2102      	movs	r1, #2
 801ad14:	4620      	mov	r0, r4
 801ad16:	f002 fb6f 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801ad1a:	4d72      	ldr	r5, [pc, #456]	; (801aee4 <mbedtls_ssl_handshake_client_step+0x2fc>)
 801ad1c:	e7a4      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->in_hslen < 38 + mbedtls_ssl_hs_hdr_len( ssl ) ||
 801ad1e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801ad22:	2b29      	cmp	r3, #41	; 0x29
 801ad24:	d902      	bls.n	801ad2c <mbedtls_ssl_handshake_client_step+0x144>
 801ad26:	783b      	ldrb	r3, [r7, #0]
 801ad28:	2b02      	cmp	r3, #2
 801ad2a:	d00f      	beq.n	801ad4c <mbedtls_ssl_handshake_client_step+0x164>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ad2c:	4b6c      	ldr	r3, [pc, #432]	; (801aee0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ad2e:	9300      	str	r3, [sp, #0]
 801ad30:	f240 53e4 	movw	r3, #1508	; 0x5e4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ad34:	4a64      	ldr	r2, [pc, #400]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ad36:	2101      	movs	r1, #1
 801ad38:	4620      	mov	r0, r4
 801ad3a:	f7f5 fec7 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ad3e:	2232      	movs	r2, #50	; 0x32
 801ad40:	2102      	movs	r1, #2
 801ad42:	4620      	mov	r0, r4
 801ad44:	f002 fb58 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801ad48:	4d67      	ldr	r5, [pc, #412]	; (801aee8 <mbedtls_ssl_handshake_client_step+0x300>)
 801ad4a:	e78d      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    buf += mbedtls_ssl_hs_hdr_len( ssl );
 801ad4c:	f107 0804 	add.w	r8, r7, #4
    MBEDTLS_SSL_DEBUG_BUF( 3, "server hello, version", buf + 0, 2 );
 801ad50:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801ad54:	4b65      	ldr	r3, [pc, #404]	; (801aeec <mbedtls_ssl_handshake_client_step+0x304>)
 801ad56:	4a5c      	ldr	r2, [pc, #368]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ad58:	9300      	str	r3, [sp, #0]
 801ad5a:	2103      	movs	r1, #3
 801ad5c:	f240 53f7 	movw	r3, #1527	; 0x5f7
 801ad60:	4620      	mov	r0, r4
 801ad62:	f7f5 ff13 	bl	8010b8c <mbedtls_debug_print_buf>
                      ssl->conf->transport, buf + 0 );
 801ad66:	4621      	mov	r1, r4
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ad68:	f104 0010 	add.w	r0, r4, #16
                      ssl->conf->transport, buf + 0 );
 801ad6c:	f851 3b14 	ldr.w	r3, [r1], #20
 801ad70:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
    mbedtls_ssl_read_version( &ssl->major_ver, &ssl->minor_ver,
 801ad74:	4643      	mov	r3, r8
 801ad76:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801ad7a:	f004 faee 	bl	801f35a <mbedtls_ssl_read_version>
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ad7e:	6823      	ldr	r3, [r4, #0]
 801ad80:	6922      	ldr	r2, [r4, #16]
 801ad82:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
 801ad86:	6961      	ldr	r1, [r4, #20]
 801ad88:	f893 6069 	ldrb.w	r6, [r3, #105]	; 0x69
 801ad8c:	4282      	cmp	r2, r0
 801ad8e:	db09      	blt.n	801ada4 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ad90:	f893 e06b 	ldrb.w	lr, [r3, #107]	; 0x6b
 801ad94:	f893 c068 	ldrb.w	ip, [r3, #104]	; 0x68
    if( ssl->major_ver < ssl->conf->min_major_ver ||
 801ad98:	4571      	cmp	r1, lr
 801ad9a:	db03      	blt.n	801ada4 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->minor_ver < ssl->conf->min_minor_ver ||
 801ad9c:	4562      	cmp	r2, ip
 801ad9e:	dc01      	bgt.n	801ada4 <mbedtls_ssl_handshake_client_step+0x1bc>
        ssl->major_ver > ssl->conf->max_major_ver ||
 801ada0:	42b1      	cmp	r1, r6
 801ada2:	dd19      	ble.n	801add8 <mbedtls_ssl_handshake_client_step+0x1f0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801ada4:	9606      	str	r6, [sp, #24]
 801ada6:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
 801adaa:	9203      	str	r2, [sp, #12]
 801adac:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801adb0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 801adb4:	4a44      	ldr	r2, [pc, #272]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801adb6:	4d4e      	ldr	r5, [pc, #312]	; (801aef0 <mbedtls_ssl_handshake_client_step+0x308>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server version out of bounds - "
 801adb8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801adbc:	4b4d      	ldr	r3, [pc, #308]	; (801aef4 <mbedtls_ssl_handshake_client_step+0x30c>)
 801adbe:	9300      	str	r3, [sp, #0]
 801adc0:	2101      	movs	r1, #1
 801adc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801adc6:	4620      	mov	r0, r4
 801adc8:	f7f5 fe80 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801adcc:	2246      	movs	r2, #70	; 0x46
 801adce:	2102      	movs	r1, #2
 801add0:	4620      	mov	r0, r4
 801add2:	f002 fb11 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION );
 801add6:	e747      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    t = ( (uint32_t) buf[2] << 24 )
 801add8:	46b9      	mov	r9, r7
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, current time: %lu", t ) );
 801adda:	4a3b      	ldr	r2, [pc, #236]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801addc:	f859 3f06 	ldr.w	r3, [r9, #6]!
 801ade0:	ba1b      	rev	r3, r3
 801ade2:	9301      	str	r3, [sp, #4]
 801ade4:	4b44      	ldr	r3, [pc, #272]	; (801aef8 <mbedtls_ssl_handshake_client_step+0x310>)
 801ade6:	9300      	str	r3, [sp, #0]
 801ade8:	2103      	movs	r1, #3
 801adea:	f240 6311 	movw	r3, #1553	; 0x611
 801adee:	4620      	mov	r0, r4
 801adf0:	f7f5 fe6c 	bl	8010acc <mbedtls_debug_print_msg>
    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );
 801adf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801adf6:	464a      	mov	r2, r9
 801adf8:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 801adfc:	f107 0126 	add.w	r1, r7, #38	; 0x26
 801ae00:	f852 0b04 	ldr.w	r0, [r2], #4
 801ae04:	f843 0b04 	str.w	r0, [r3], #4
 801ae08:	428a      	cmp	r2, r1
 801ae0a:	d1f9      	bne.n	801ae00 <mbedtls_ssl_handshake_client_step+0x218>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801ae0c:	2320      	movs	r3, #32
    n = buf[34];
 801ae0e:	f897 6026 	ldrb.w	r6, [r7, #38]	; 0x26
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, random bytes", buf + 2, 32 );
 801ae12:	4a2d      	ldr	r2, [pc, #180]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801ae14:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801ae18:	4b38      	ldr	r3, [pc, #224]	; (801aefc <mbedtls_ssl_handshake_client_step+0x314>)
 801ae1a:	9300      	str	r3, [sp, #0]
 801ae1c:	2103      	movs	r1, #3
 801ae1e:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801ae22:	4620      	mov	r0, r4
 801ae24:	f7f5 feb2 	bl	8010b8c <mbedtls_debug_print_buf>
    if( n > 32 )
 801ae28:	2e20      	cmp	r6, #32
 801ae2a:	d904      	bls.n	801ae36 <mbedtls_ssl_handshake_client_step+0x24e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ae2c:	4b2c      	ldr	r3, [pc, #176]	; (801aee0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ae2e:	9300      	str	r3, [sp, #0]
 801ae30:	f240 631c 	movw	r3, #1564	; 0x61c
 801ae34:	e77e      	b.n	801ad34 <mbedtls_ssl_handshake_client_step+0x14c>
    if( ssl->in_hslen > mbedtls_ssl_hs_hdr_len( ssl ) + 39 + n )
 801ae36:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801ae3a:	f106 022b 	add.w	r2, r6, #43	; 0x2b
 801ae3e:	4293      	cmp	r3, r2
 801ae40:	d915      	bls.n	801ae6e <mbedtls_ssl_handshake_client_step+0x286>
        ext_len = ( ( buf[38 + n] <<  8 )
 801ae42:	eb08 0206 	add.w	r2, r8, r6
 801ae46:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
                  | ( buf[39 + n]       ) );
 801ae4a:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 801ae4e:	ea42 2b01 	orr.w	fp, r2, r1, lsl #8
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801ae52:	f10b 32ff 	add.w	r2, fp, #4294967295
 801ae56:	2a02      	cmp	r2, #2
 801ae58:	d904      	bls.n	801ae64 <mbedtls_ssl_handshake_client_step+0x27c>
            ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 40 + n + ext_len )
 801ae5a:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 801ae5e:	445a      	add	r2, fp
        if( ( ext_len > 0 && ext_len < 4 ) ||
 801ae60:	4293      	cmp	r3, r2
 801ae62:	d00f      	beq.n	801ae84 <mbedtls_ssl_handshake_client_step+0x29c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ae64:	4b1e      	ldr	r3, [pc, #120]	; (801aee0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ae66:	9300      	str	r3, [sp, #0]
 801ae68:	f240 632a 	movw	r3, #1578	; 0x62a
 801ae6c:	e762      	b.n	801ad34 <mbedtls_ssl_handshake_client_step+0x14c>
    else if( ssl->in_hslen == mbedtls_ssl_hs_hdr_len( ssl ) + 38 + n )
 801ae6e:	f106 022a 	add.w	r2, r6, #42	; 0x2a
 801ae72:	4293      	cmp	r3, r2
 801ae74:	d004      	beq.n	801ae80 <mbedtls_ssl_handshake_client_step+0x298>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801ae76:	4b1a      	ldr	r3, [pc, #104]	; (801aee0 <mbedtls_ssl_handshake_client_step+0x2f8>)
 801ae78:	9300      	str	r3, [sp, #0]
 801ae7a:	f240 6336 	movw	r3, #1590	; 0x636
 801ae7e:	e759      	b.n	801ad34 <mbedtls_ssl_handshake_client_step+0x14c>
        ext_len = 0;
 801ae80:	f04f 0b00 	mov.w	fp, #0
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ae84:	eb08 0306 	add.w	r3, r8, r6
 801ae88:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801ae8c:	f893 9024 	ldrb.w	r9, [r3, #36]	; 0x24
    comp = buf[37 + n];
 801ae90:	f106 0325 	add.w	r3, r6, #37	; 0x25
 801ae94:	9309      	str	r3, [sp, #36]	; 0x24
 801ae96:	f818 3003 	ldrb.w	r3, [r8, r3]
    i = ( buf[35 + n] << 8 ) | buf[36 + n];
 801ae9a:	ea49 2902 	orr.w	r9, r9, r2, lsl #8
    if( comp != MBEDTLS_SSL_COMPRESS_NULL )
 801ae9e:	b39b      	cbz	r3, 801af08 <mbedtls_ssl_handshake_client_step+0x320>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server hello, bad compression: %d", comp ) );
 801aea0:	9301      	str	r3, [sp, #4]
 801aea2:	4b17      	ldr	r3, [pc, #92]	; (801af00 <mbedtls_ssl_handshake_client_step+0x318>)
 801aea4:	4a08      	ldr	r2, [pc, #32]	; (801aec8 <mbedtls_ssl_handshake_client_step+0x2e0>)
 801aea6:	9300      	str	r3, [sp, #0]
 801aea8:	2101      	movs	r1, #1
 801aeaa:	f240 6353 	movw	r3, #1619	; 0x653
 801aeae:	4620      	mov	r0, r4
 801aeb0:	f7f5 fe0c 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801aeb4:	222f      	movs	r2, #47	; 0x2f
 801aeb6:	2102      	movs	r1, #2
 801aeb8:	4620      	mov	r0, r4
 801aeba:	f002 fa9d 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE );
 801aebe:	4d11      	ldr	r5, [pc, #68]	; (801af04 <mbedtls_ssl_handshake_client_step+0x31c>)
 801aec0:	e6d2      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
 801aec2:	bf00      	nop
 801aec4:	080313af 	.word	0x080313af
 801aec8:	08030ef4 	.word	0x08030ef4
 801aecc:	080313c0 	.word	0x080313c0
 801aed0:	080313d6 	.word	0x080313d6
 801aed4:	080313ee 	.word	0x080313ee
 801aed8:	08031421 	.word	0x08031421
 801aedc:	ffff9500 	.word	0xffff9500
 801aee0:	08031445 	.word	0x08031445
 801aee4:	ffff8900 	.word	0xffff8900
 801aee8:	ffff8680 	.word	0xffff8680
 801aeec:	0803145e 	.word	0x0803145e
 801aef0:	ffff9180 	.word	0xffff9180
 801aef4:	08031474 	.word	0x08031474
 801aef8:	080314c0 	.word	0x080314c0
 801aefc:	080314e0 	.word	0x080314e0
 801af00:	080314fb 	.word	0x080314fb
 801af04:	ffff8f80 	.word	0xffff8f80
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801af08:	4648      	mov	r0, r9
 801af0a:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 801af0e:	f7ff f94f 	bl	801a1b0 <mbedtls_ssl_ciphersuite_from_id>
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801af12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    ssl->transform_negotiate->ciphersuite_info = mbedtls_ssl_ciphersuite_from_id( i );
 801af14:	f8ca 0000 	str.w	r0, [sl]
    if( ssl->transform_negotiate->ciphersuite_info == NULL )
 801af18:	6819      	ldr	r1, [r3, #0]
 801af1a:	b989      	cbnz	r1, 801af40 <mbedtls_ssl_handshake_client_step+0x358>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ciphersuite info for %04x not found", i ) );
 801af1c:	4bb6      	ldr	r3, [pc, #728]	; (801b1f8 <mbedtls_ssl_handshake_client_step+0x610>)
 801af1e:	4ab7      	ldr	r2, [pc, #732]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	2101      	movs	r1, #1
 801af24:	4620      	mov	r0, r4
 801af26:	f8cd 9004 	str.w	r9, [sp, #4]
 801af2a:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 801af2e:	f7f5 fdcd 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801af32:	2250      	movs	r2, #80	; 0x50
 801af34:	2102      	movs	r1, #2
 801af36:	4620      	mov	r0, r4
 801af38:	f002 fa5e 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801af3c:	4db0      	ldr	r5, [pc, #704]	; (801b200 <mbedtls_ssl_handshake_client_step+0x618>)
 801af3e:	e693      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    mbedtls_ssl_optimize_checksum( ssl, ssl->transform_negotiate->ciphersuite_info );
 801af40:	4620      	mov	r0, r4
 801af42:	f003 f845 	bl	801dfd0 <mbedtls_ssl_optimize_checksum>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, session id len.: %d", n ) );
 801af46:	4baf      	ldr	r3, [pc, #700]	; (801b204 <mbedtls_ssl_handshake_client_step+0x61c>)
 801af48:	4aac      	ldr	r2, [pc, #688]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801af4a:	9300      	str	r3, [sp, #0]
 801af4c:	2103      	movs	r1, #3
 801af4e:	f44f 63cd 	mov.w	r3, #1640	; 0x668
 801af52:	4620      	mov	r0, r4
 801af54:	9601      	str	r6, [sp, #4]
 801af56:	f7f5 fdb9 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server hello, session id", buf + 35, n );
 801af5a:	3727      	adds	r7, #39	; 0x27
 801af5c:	4baa      	ldr	r3, [pc, #680]	; (801b208 <mbedtls_ssl_handshake_client_step+0x620>)
 801af5e:	4aa7      	ldr	r2, [pc, #668]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801af60:	9300      	str	r3, [sp, #0]
 801af62:	e9cd 7601 	strd	r7, r6, [sp, #4]
 801af66:	f240 6369 	movw	r3, #1641	; 0x669
 801af6a:	2103      	movs	r1, #3
 801af6c:	4620      	mov	r0, r4
 801af6e:	f7f5 fe0d 	bl	8010b8c <mbedtls_debug_print_buf>
    if( ssl->handshake->resume == 0 || n == 0 ||
 801af72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801af74:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 801af78:	f8d3 2330 	ldr.w	r2, [r3, #816]	; 0x330
 801af7c:	b1ba      	cbz	r2, 801afae <mbedtls_ssl_handshake_client_step+0x3c6>
 801af7e:	b1b6      	cbz	r6, 801afae <mbedtls_ssl_handshake_client_step+0x3c6>
 801af80:	68a2      	ldr	r2, [r4, #8]
 801af82:	b9a2      	cbnz	r2, 801afae <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE ||
 801af84:	f8da 2008 	ldr.w	r2, [sl, #8]
 801af88:	4591      	cmp	r9, r2
 801af8a:	d110      	bne.n	801afae <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->session_negotiate->ciphersuite != i ||
 801af8c:	f8da 200c 	ldr.w	r2, [sl, #12]
 801af90:	b96a      	cbnz	r2, 801afae <mbedtls_ssl_handshake_client_step+0x3c6>
        ssl->session_negotiate->compression != comp ||
 801af92:	f8da 2010 	ldr.w	r2, [sl, #16]
 801af96:	4296      	cmp	r6, r2
 801af98:	d109      	bne.n	801afae <mbedtls_ssl_handshake_client_step+0x3c6>
        memcmp( ssl->session_negotiate->id, buf + 35, n ) != 0 )
 801af9a:	4632      	mov	r2, r6
 801af9c:	4639      	mov	r1, r7
 801af9e:	f10a 0014 	add.w	r0, sl, #20
 801afa2:	930a      	str	r3, [sp, #40]	; 0x28
 801afa4:	f007 fa12 	bl	80223cc <memcmp>
        ssl->session_negotiate->id_len != n ||
 801afa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801afaa:	2800      	cmp	r0, #0
 801afac:	d04f      	beq.n	801b04e <mbedtls_ssl_handshake_client_step+0x466>
        ssl->state++;
 801afae:	6862      	ldr	r2, [r4, #4]
 801afb0:	3201      	adds	r2, #1
 801afb2:	6062      	str	r2, [r4, #4]
        ssl->handshake->resume = 0;
 801afb4:	2200      	movs	r2, #0
 801afb6:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
        ssl->session_negotiate->start = mbedtls_time( NULL );
 801afba:	4610      	mov	r0, r2
 801afbc:	f7e8 f93a 	bl	8003234 <time>
 801afc0:	e9ca 0100 	strd	r0, r1, [sl]
        ssl->session_negotiate->ciphersuite = i;
 801afc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->session_negotiate->compression = comp;
 801afc6:	2200      	movs	r2, #0
        ssl->session_negotiate->id_len = n;
 801afc8:	e9c0 2603 	strd	r2, r6, [r0, #12]
        ssl->session_negotiate->ciphersuite = i;
 801afcc:	f8c0 9008 	str.w	r9, [r0, #8]
        memcpy( ssl->session_negotiate->id, buf + 35, n );
 801afd0:	4632      	mov	r2, r6
 801afd2:	4639      	mov	r1, r7
 801afd4:	3014      	adds	r0, #20
 801afd6:	f007 fa07 	bl	80223e8 <memcpy>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "%s session has been resumed",
 801afda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801afdc:	4a8b      	ldr	r2, [pc, #556]	; (801b20c <mbedtls_ssl_handshake_client_step+0x624>)
 801afde:	f8d3 1330 	ldr.w	r1, [r3, #816]	; 0x330
 801afe2:	4b8b      	ldr	r3, [pc, #556]	; (801b210 <mbedtls_ssl_handshake_client_step+0x628>)
 801afe4:	2900      	cmp	r1, #0
 801afe6:	bf08      	it	eq
 801afe8:	4613      	moveq	r3, r2
 801afea:	9301      	str	r3, [sp, #4]
 801afec:	4b89      	ldr	r3, [pc, #548]	; (801b214 <mbedtls_ssl_handshake_client_step+0x62c>)
 801afee:	4a83      	ldr	r2, [pc, #524]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801aff0:	9300      	str	r3, [sp, #0]
 801aff2:	2103      	movs	r1, #3
 801aff4:	f240 638e 	movw	r3, #1678	; 0x68e
 801aff8:	4620      	mov	r0, r4
 801affa:	f7f5 fd67 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %04x", i ) );
 801affe:	4b86      	ldr	r3, [pc, #536]	; (801b218 <mbedtls_ssl_handshake_client_step+0x630>)
 801b000:	4a7e      	ldr	r2, [pc, #504]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b002:	9300      	str	r3, [sp, #0]
 801b004:	2103      	movs	r1, #3
 801b006:	f240 6391 	movw	r3, #1681	; 0x691
 801b00a:	4620      	mov	r0, r4
 801b00c:	f8cd 9004 	str.w	r9, [sp, #4]
 801b010:	f7f5 fd5c 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, compress alg.: %d", buf[37 + n] ) );
 801b014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b016:	4a79      	ldr	r2, [pc, #484]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b018:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b01c:	9301      	str	r3, [sp, #4]
 801b01e:	4b7f      	ldr	r3, [pc, #508]	; (801b21c <mbedtls_ssl_handshake_client_step+0x634>)
 801b020:	9300      	str	r3, [sp, #0]
 801b022:	4620      	mov	r0, r4
 801b024:	f240 6392 	movw	r3, #1682	; 0x692
 801b028:	2103      	movs	r1, #3
 801b02a:	f7f5 fd4f 	bl	8010acc <mbedtls_debug_print_msg>
    suite_info = mbedtls_ssl_ciphersuite_from_id( ssl->session_negotiate->ciphersuite );
 801b02e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b030:	6898      	ldr	r0, [r3, #8]
 801b032:	f7ff f8bd 	bl	801a1b0 <mbedtls_ssl_ciphersuite_from_id>
    if( suite_info == NULL
 801b036:	bb18      	cbnz	r0, 801b080 <mbedtls_ssl_handshake_client_step+0x498>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b038:	4b79      	ldr	r3, [pc, #484]	; (801b220 <mbedtls_ssl_handshake_client_step+0x638>)
 801b03a:	9300      	str	r3, [sp, #0]
 801b03c:	f240 639c 	movw	r3, #1692	; 0x69c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b040:	4a6e      	ldr	r2, [pc, #440]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b042:	2101      	movs	r1, #1
 801b044:	4620      	mov	r0, r4
 801b046:	f7f5 fd41 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b04a:	222f      	movs	r2, #47	; 0x2f
 801b04c:	e678      	b.n	801ad40 <mbedtls_ssl_handshake_client_step+0x158>
        ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801b04e:	230c      	movs	r3, #12
 801b050:	6063      	str	r3, [r4, #4]
        if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801b052:	4620      	mov	r0, r4
 801b054:	f001 fac0 	bl	801c5d8 <mbedtls_ssl_derive_keys>
 801b058:	4607      	mov	r7, r0
 801b05a:	2800      	cmp	r0, #0
 801b05c:	d0bd      	beq.n	801afda <mbedtls_ssl_handshake_client_step+0x3f2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801b05e:	4b71      	ldr	r3, [pc, #452]	; (801b224 <mbedtls_ssl_handshake_client_step+0x63c>)
 801b060:	4a66      	ldr	r2, [pc, #408]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b062:	9001      	str	r0, [sp, #4]
 801b064:	9300      	str	r3, [sp, #0]
 801b066:	2101      	movs	r1, #1
 801b068:	f240 6387 	movw	r3, #1671	; 0x687
 801b06c:	4620      	mov	r0, r4
 801b06e:	f7f5 fd5d 	bl	8010b2c <mbedtls_debug_print_ret>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b072:	2250      	movs	r2, #80	; 0x50
 801b074:	2102      	movs	r1, #2
 801b076:	4620      	mov	r0, r4
 801b078:	f002 f9be 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( ret );
 801b07c:	463d      	mov	r5, r7
 801b07e:	e5f3      	b.n	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "server hello, chosen ciphersuite: %s", suite_info->name ) );
 801b080:	6843      	ldr	r3, [r0, #4]
 801b082:	9301      	str	r3, [sp, #4]
 801b084:	4b68      	ldr	r3, [pc, #416]	; (801b228 <mbedtls_ssl_handshake_client_step+0x640>)
 801b086:	4a5d      	ldr	r2, [pc, #372]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b088:	9300      	str	r3, [sp, #0]
 801b08a:	2103      	movs	r1, #3
 801b08c:	f240 63a2 	movw	r3, #1698	; 0x6a2
 801b090:	4620      	mov	r0, r4
 801b092:	f7f5 fd1b 	bl	8010acc <mbedtls_debug_print_msg>
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i] == 0 )
 801b096:	6823      	ldr	r3, [r4, #0]
 801b098:	6962      	ldr	r2, [r4, #20]
 801b09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b09e:	3b04      	subs	r3, #4
 801b0a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801b0a4:	b921      	cbnz	r1, 801b0b0 <mbedtls_ssl_handshake_client_step+0x4c8>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b0a6:	4b5e      	ldr	r3, [pc, #376]	; (801b220 <mbedtls_ssl_handshake_client_step+0x638>)
 801b0a8:	9300      	str	r3, [sp, #0]
 801b0aa:	f240 63a9 	movw	r3, #1705	; 0x6a9
 801b0ae:	e7c7      	b.n	801b040 <mbedtls_ssl_handshake_client_step+0x458>
            ssl->session_negotiate->ciphersuite )
 801b0b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
        if( ssl->conf->ciphersuite_list[ssl->minor_ver][i++] ==
 801b0b2:	6890      	ldr	r0, [r2, #8]
 801b0b4:	4281      	cmp	r1, r0
 801b0b6:	d1f3      	bne.n	801b0a0 <mbedtls_ssl_handshake_client_step+0x4b8>
    ssl->session_negotiate->compression = comp;
 801b0b8:	2700      	movs	r7, #0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801b0ba:	4b5c      	ldr	r3, [pc, #368]	; (801b22c <mbedtls_ssl_handshake_client_step+0x644>)
    ssl->session_negotiate->compression = comp;
 801b0bc:	60d7      	str	r7, [r2, #12]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "server hello, total extension length: %d", ext_len ) );
 801b0be:	2102      	movs	r1, #2
 801b0c0:	9300      	str	r3, [sp, #0]
 801b0c2:	4a4e      	ldr	r2, [pc, #312]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b0c4:	f8cd b004 	str.w	fp, [sp, #4]
 801b0c8:	f240 63c5 	movw	r3, #1733	; 0x6c5
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	f7f5 fcfd 	bl	8010acc <mbedtls_debug_print_msg>
    ext = buf + 40 + n;
 801b0d2:	3628      	adds	r6, #40	; 0x28
    int renegotiation_info_seen = 0;
 801b0d4:	46b9      	mov	r9, r7
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801b0d6:	4f49      	ldr	r7, [pc, #292]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
    ext = buf + 40 + n;
 801b0d8:	44b0      	add	r8, r6
    while( ext_len )
 801b0da:	f1bb 0f00 	cmp.w	fp, #0
 801b0de:	d111      	bne.n	801b104 <mbedtls_ssl_handshake_client_step+0x51c>
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b0e0:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 801b0e4:	2900      	cmp	r1, #0
 801b0e6:	f040 81a9 	bne.w	801b43c <mbedtls_ssl_handshake_client_step+0x854>
        ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE )
 801b0ea:	6823      	ldr	r3, [r4, #0]
 801b0ec:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    if( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b0f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b0f4:	2b20      	cmp	r3, #32
 801b0f6:	f040 81a1 	bne.w	801b43c <mbedtls_ssl_handshake_client_step+0x854>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801b0fa:	4b4d      	ldr	r3, [pc, #308]	; (801b230 <mbedtls_ssl_handshake_client_step+0x648>)
 801b0fc:	9300      	str	r3, [sp, #0]
 801b0fe:	f44f 63ec 	mov.w	r3, #1888	; 0x760
 801b102:	e072      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801b104:	f8b8 6002 	ldrh.w	r6, [r8, #2]
 801b108:	f8b8 3000 	ldrh.w	r3, [r8]
 801b10c:	ba76      	rev16	r6, r6
 801b10e:	b2b6      	uxth	r6, r6
        if( ext_size + 4 > ext_len )
 801b110:	1d32      	adds	r2, r6, #4
 801b112:	ba5b      	rev16	r3, r3
 801b114:	455a      	cmp	r2, fp
 801b116:	b29b      	uxth	r3, r3
 801b118:	920a      	str	r2, [sp, #40]	; 0x28
 801b11a:	d904      	bls.n	801b126 <mbedtls_ssl_handshake_client_step+0x53e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b11c:	4b40      	ldr	r3, [pc, #256]	; (801b220 <mbedtls_ssl_handshake_client_step+0x638>)
 801b11e:	9300      	str	r3, [sp, #0]
 801b120:	f44f 63da 	mov.w	r3, #1744	; 0x6d0
 801b124:	e606      	b.n	801ad34 <mbedtls_ssl_handshake_client_step+0x14c>
        switch( ext_id )
 801b126:	2b10      	cmp	r3, #16
 801b128:	f000 8144 	beq.w	801b3b4 <mbedtls_ssl_handshake_client_step+0x7cc>
 801b12c:	dc10      	bgt.n	801b150 <mbedtls_ssl_handshake_client_step+0x568>
 801b12e:	2b04      	cmp	r3, #4
 801b130:	f000 80c6 	beq.w	801b2c0 <mbedtls_ssl_handshake_client_step+0x6d8>
 801b134:	2b0b      	cmp	r3, #11
 801b136:	f000 810c 	beq.w	801b352 <mbedtls_ssl_handshake_client_step+0x76a>
 801b13a:	2b01      	cmp	r3, #1
 801b13c:	f000 80a4 	beq.w	801b288 <mbedtls_ssl_handshake_client_step+0x6a0>
        unsigned int ext_id   = ( ( ext[0] <<  8 )
 801b140:	9301      	str	r3, [sp, #4]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b142:	4b3c      	ldr	r3, [pc, #240]	; (801b234 <mbedtls_ssl_handshake_client_step+0x64c>)
 801b144:	9300      	str	r3, [sp, #0]
 801b146:	463a      	mov	r2, r7
 801b148:	f240 734c 	movw	r3, #1868	; 0x74c
 801b14c:	2103      	movs	r1, #3
 801b14e:	e12b      	b.n	801b3a8 <mbedtls_ssl_handshake_client_step+0x7c0>
        switch( ext_id )
 801b150:	2b23      	cmp	r3, #35	; 0x23
 801b152:	f000 80e5 	beq.w	801b320 <mbedtls_ssl_handshake_client_step+0x738>
 801b156:	f64f 7201 	movw	r2, #65281	; 0xff01
 801b15a:	4293      	cmp	r3, r2
 801b15c:	d019      	beq.n	801b192 <mbedtls_ssl_handshake_client_step+0x5aa>
 801b15e:	2b17      	cmp	r3, #23
 801b160:	d1ee      	bne.n	801b140 <mbedtls_ssl_handshake_client_step+0x558>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found extended_master_secret extension" ) );
 801b162:	4b35      	ldr	r3, [pc, #212]	; (801b238 <mbedtls_ssl_handshake_client_step+0x650>)
 801b164:	9300      	str	r3, [sp, #0]
 801b166:	463a      	mov	r2, r7
 801b168:	f240 730d 	movw	r3, #1805	; 0x70d
 801b16c:	2103      	movs	r1, #3
 801b16e:	4620      	mov	r0, r4
 801b170:	f7f5 fcac 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->conf->extended_ms == MBEDTLS_SSL_EXTENDED_MS_DISABLED ||
 801b174:	6823      	ldr	r3, [r4, #0]
 801b176:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b17a:	079a      	lsls	r2, r3, #30
 801b17c:	d504      	bpl.n	801b188 <mbedtls_ssl_handshake_client_step+0x5a0>
 801b17e:	6963      	ldr	r3, [r4, #20]
 801b180:	b113      	cbz	r3, 801b188 <mbedtls_ssl_handshake_client_step+0x5a0>
        ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ||
 801b182:	2e00      	cmp	r6, #0
 801b184:	f000 80c7 	beq.w	801b316 <mbedtls_ssl_handshake_client_step+0x72e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching extended master secret extension" ) );
 801b188:	4b2c      	ldr	r3, [pc, #176]	; (801b23c <mbedtls_ssl_handshake_client_step+0x654>)
 801b18a:	9300      	str	r3, [sp, #0]
 801b18c:	f240 4393 	movw	r3, #1171	; 0x493
 801b190:	e02b      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found renegotiation extension" ) );
 801b192:	4b2b      	ldr	r3, [pc, #172]	; (801b240 <mbedtls_ssl_handshake_client_step+0x658>)
 801b194:	9300      	str	r3, [sp, #0]
 801b196:	463a      	mov	r2, r7
 801b198:	f240 63d9 	movw	r3, #1753	; 0x6d9
 801b19c:	2103      	movs	r1, #3
 801b19e:	4620      	mov	r0, r4
 801b1a0:	f7f5 fc94 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->renego_status != MBEDTLS_SSL_INITIAL_HANDSHAKE )
 801b1a4:	68a3      	ldr	r3, [r4, #8]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d05f      	beq.n	801b26a <mbedtls_ssl_handshake_client_step+0x682>
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801b1aa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801b1ae:	0059      	lsls	r1, r3, #1
 801b1b0:	1c4a      	adds	r2, r1, #1
 801b1b2:	4296      	cmp	r6, r2
 801b1b4:	d115      	bne.n	801b1e2 <mbedtls_ssl_handshake_client_step+0x5fa>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801b1b6:	f898 2004 	ldrb.w	r2, [r8, #4]
        if( len    != 1 + ssl->verify_data_len * 2 ||
 801b1ba:	4291      	cmp	r1, r2
 801b1bc:	d111      	bne.n	801b1e2 <mbedtls_ssl_handshake_client_step+0x5fa>
    size_t i;
    const unsigned char *A = (const unsigned char *) a;
    const unsigned char *B = (const unsigned char *) b;
    unsigned char diff = 0;

    for( i = 0; i < n; i++ )
 801b1be:	1d18      	adds	r0, r3, #4
 801b1c0:	f108 0c04 	add.w	ip, r8, #4
 801b1c4:	f104 09c3 	add.w	r9, r4, #195	; 0xc3
 801b1c8:	4440      	add	r0, r8
    unsigned char diff = 0;
 801b1ca:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
 801b1cc:	4584      	cmp	ip, r0
 801b1ce:	d13b      	bne.n	801b248 <mbedtls_ssl_handshake_client_step+0x660>
            buf[0] !=     ssl->verify_data_len * 2 ||
 801b1d0:	b93a      	cbnz	r2, 801b1e2 <mbedtls_ssl_handshake_client_step+0x5fa>
 801b1d2:	4443      	add	r3, r8
 801b1d4:	f104 0ccf 	add.w	ip, r4, #207	; 0xcf
 801b1d8:	4441      	add	r1, r8
 801b1da:	428b      	cmp	r3, r1
 801b1dc:	d13d      	bne.n	801b25a <mbedtls_ssl_handshake_client_step+0x672>
                          ssl->own_verify_data, ssl->verify_data_len ) != 0 ||
 801b1de:	2a00      	cmp	r2, #0
 801b1e0:	d04f      	beq.n	801b282 <mbedtls_ssl_handshake_client_step+0x69a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching renegotiation info" ) );
 801b1e2:	4b18      	ldr	r3, [pc, #96]	; (801b244 <mbedtls_ssl_handshake_client_step+0x65c>)
 801b1e4:	9300      	str	r3, [sp, #0]
 801b1e6:	f240 432f 	movw	r3, #1071	; 0x42f
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation, breaking off handshake" ) );
 801b1ea:	4a04      	ldr	r2, [pc, #16]	; (801b1fc <mbedtls_ssl_handshake_client_step+0x614>)
 801b1ec:	2101      	movs	r1, #1
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b1ee:	4620      	mov	r0, r4
 801b1f0:	f7f5 fc6c 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b1f4:	2228      	movs	r2, #40	; 0x28
 801b1f6:	e5a3      	b.n	801ad40 <mbedtls_ssl_handshake_client_step+0x158>
 801b1f8:	0803151d 	.word	0x0803151d
 801b1fc:	08030ef4 	.word	0x08030ef4
 801b200:	ffff8f00 	.word	0xffff8f00
 801b204:	08031541 	.word	0x08031541
 801b208:	08031563 	.word	0x08031563
 801b20c:	080313ac 	.word	0x080313ac
 801b210:	08032a4e 	.word	0x08032a4e
 801b214:	08031594 	.word	0x08031594
 801b218:	080315b0 	.word	0x080315b0
 801b21c:	080315d7 	.word	0x080315d7
 801b220:	08031445 	.word	0x08031445
 801b224:	0803157c 	.word	0x0803157c
 801b228:	080315f7 	.word	0x080315f7
 801b22c:	0803161c 	.word	0x0803161c
 801b230:	080318ad 	.word	0x080318ad
 801b234:	08031886 	.word	0x08031886
 801b238:	0803173a 	.word	0x0803173a
 801b23c:	08031761 	.word	0x08031761
 801b240:	08031645 	.word	0x08031645
 801b244:	08031663 	.word	0x08031663
        diff |= A[i] ^ B[i];
 801b248:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801b24c:	f819 af01 	ldrb.w	sl, [r9, #1]!
 801b250:	ea8e 0e0a 	eor.w	lr, lr, sl
 801b254:	ea42 020e 	orr.w	r2, r2, lr
    for( i = 0; i < n; i++ )
 801b258:	e7b8      	b.n	801b1cc <mbedtls_ssl_handshake_client_step+0x5e4>
        diff |= A[i] ^ B[i];
 801b25a:	7958      	ldrb	r0, [r3, #5]
 801b25c:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801b260:	ea80 000e 	eor.w	r0, r0, lr
 801b264:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 801b266:	3301      	adds	r3, #1
 801b268:	e7b7      	b.n	801b1da <mbedtls_ssl_handshake_client_step+0x5f2>
        if( len != 1 || buf[0] != 0x00 )
 801b26a:	2e01      	cmp	r6, #1
 801b26c:	d102      	bne.n	801b274 <mbedtls_ssl_handshake_client_step+0x68c>
 801b26e:	f898 3004 	ldrb.w	r3, [r8, #4]
 801b272:	b123      	cbz	r3, 801b27e <mbedtls_ssl_handshake_client_step+0x696>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-zero length renegotiation info" ) );
 801b274:	4bb0      	ldr	r3, [pc, #704]	; (801b538 <mbedtls_ssl_handshake_client_step+0x950>)
 801b276:	9300      	str	r3, [sp, #0]
 801b278:	f240 433a 	movw	r3, #1082	; 0x43a
 801b27c:	e7b5      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
        ssl->secure_renegotiation = MBEDTLS_SSL_SECURE_RENEGOTIATION;
 801b27e:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
            renegotiation_info_seen = 1;
 801b282:	f04f 0901 	mov.w	r9, #1
 801b286:	e032      	b.n	801b2ee <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found max_fragment_length extension" ) );
 801b288:	4bac      	ldr	r3, [pc, #688]	; (801b53c <mbedtls_ssl_handshake_client_step+0x954>)
 801b28a:	9300      	str	r3, [sp, #0]
 801b28c:	463a      	mov	r2, r7
 801b28e:	f240 63e6 	movw	r3, #1766	; 0x6e6
 801b292:	2103      	movs	r1, #3
 801b294:	4620      	mov	r0, r4
 801b296:	f7f5 fc19 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->conf->mfl_code == MBEDTLS_SSL_MAX_FRAG_LEN_NONE ||
 801b29a:	6823      	ldr	r3, [r4, #0]
 801b29c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801b2a0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 801b2a4:	b13a      	cbz	r2, 801b2b6 <mbedtls_ssl_handshake_client_step+0x6ce>
 801b2a6:	2e01      	cmp	r6, #1
 801b2a8:	d105      	bne.n	801b2b6 <mbedtls_ssl_handshake_client_step+0x6ce>
        len != 1 ||
 801b2aa:	f898 2004 	ldrb.w	r2, [r8, #4]
 801b2ae:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d01b      	beq.n	801b2ee <mbedtls_ssl_handshake_client_step+0x706>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching max fragment length extension" ) );
 801b2b6:	4ba2      	ldr	r3, [pc, #648]	; (801b540 <mbedtls_ssl_handshake_client_step+0x958>)
 801b2b8:	9300      	str	r3, [sp, #0]
 801b2ba:	f240 4353 	movw	r3, #1107	; 0x453
 801b2be:	e794      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found truncated_hmac extension" ) );
 801b2c0:	4ba0      	ldr	r3, [pc, #640]	; (801b544 <mbedtls_ssl_handshake_client_step+0x95c>)
 801b2c2:	9300      	str	r3, [sp, #0]
 801b2c4:	2103      	movs	r1, #3
 801b2c6:	f240 63f3 	movw	r3, #1779	; 0x6f3
 801b2ca:	463a      	mov	r2, r7
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	f7f5 fbfd 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->conf->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_DISABLED ||
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b2d8:	0719      	lsls	r1, r3, #28
 801b2da:	d500      	bpl.n	801b2de <mbedtls_ssl_handshake_client_step+0x6f6>
 801b2dc:	b126      	cbz	r6, 801b2e8 <mbedtls_ssl_handshake_client_step+0x700>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching truncated HMAC extension" ) );
 801b2de:	4b9a      	ldr	r3, [pc, #616]	; (801b548 <mbedtls_ssl_handshake_client_step+0x960>)
 801b2e0:	9300      	str	r3, [sp, #0]
 801b2e2:	f240 4365 	movw	r3, #1125	; 0x465
 801b2e6:	e780      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
    ssl->session_negotiate->trunc_hmac = MBEDTLS_SSL_TRUNC_HMAC_ENABLED;
 801b2e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b2ea:	2201      	movs	r2, #1
 801b2ec:	67da      	str	r2, [r3, #124]	; 0x7c
        ext_len -= 4 + ext_size;
 801b2ee:	ebab 0606 	sub.w	r6, fp, r6
        ext += 4 + ext_size;
 801b2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        ext_len -= 4 + ext_size;
 801b2f4:	f1a6 0b04 	sub.w	fp, r6, #4
        if( ext_len > 0 && ext_len < 4 )
 801b2f8:	3e05      	subs	r6, #5
 801b2fa:	2e02      	cmp	r6, #2
        ext += 4 + ext_size;
 801b2fc:	4498      	add	r8, r3
        if( ext_len > 0 && ext_len < 4 )
 801b2fe:	f63f aeec 	bhi.w	801b0da <mbedtls_ssl_handshake_client_step+0x4f2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b302:	4b92      	ldr	r3, [pc, #584]	; (801b54c <mbedtls_ssl_handshake_client_step+0x964>)
 801b304:	9300      	str	r3, [sp, #0]
 801b306:	4a92      	ldr	r2, [pc, #584]	; (801b550 <mbedtls_ssl_handshake_client_step+0x968>)
 801b308:	f240 7355 	movw	r3, #1877	; 0x755
 801b30c:	2101      	movs	r1, #1
 801b30e:	4620      	mov	r0, r4
 801b310:	f7f5 fbdc 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
 801b314:	e518      	b.n	801ad48 <mbedtls_ssl_handshake_client_step+0x160>
    ssl->handshake->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801b316:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b318:	2201      	movs	r2, #1
 801b31a:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    return( 0 );
 801b31e:	e7e6      	b.n	801b2ee <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found session_ticket extension" ) );
 801b320:	4b8c      	ldr	r3, [pc, #560]	; (801b554 <mbedtls_ssl_handshake_client_step+0x96c>)
 801b322:	9300      	str	r3, [sp, #0]
 801b324:	463a      	mov	r2, r7
 801b326:	f240 731a 	movw	r3, #1818	; 0x71a
 801b32a:	2103      	movs	r1, #3
 801b32c:	4620      	mov	r0, r4
 801b32e:	f7f5 fbcd 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->conf->session_tickets == MBEDTLS_SSL_SESSION_TICKETS_DISABLED ||
 801b332:	6823      	ldr	r3, [r4, #0]
 801b334:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801b338:	06db      	lsls	r3, r3, #27
 801b33a:	d500      	bpl.n	801b33e <mbedtls_ssl_handshake_client_step+0x756>
 801b33c:	b126      	cbz	r6, 801b348 <mbedtls_ssl_handshake_client_step+0x760>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching session ticket extension" ) );
 801b33e:	4b86      	ldr	r3, [pc, #536]	; (801b558 <mbedtls_ssl_handshake_client_step+0x970>)
 801b340:	9300      	str	r3, [sp, #0]
 801b342:	f240 43a9 	movw	r3, #1193	; 0x4a9
 801b346:	e750      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
    ssl->handshake->new_session_ticket = 1;
 801b348:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b34a:	2201      	movs	r2, #1
 801b34c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return( 0 );
 801b350:	e7cd      	b.n	801b2ee <mbedtls_ssl_handshake_client_step+0x706>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found supported_point_formats extension" ) );
 801b352:	4b82      	ldr	r3, [pc, #520]	; (801b55c <mbedtls_ssl_handshake_client_step+0x974>)
 801b354:	9300      	str	r3, [sp, #0]
 801b356:	463a      	mov	r2, r7
 801b358:	f44f 63e5 	mov.w	r3, #1832	; 0x728
 801b35c:	2103      	movs	r1, #3
 801b35e:	4620      	mov	r0, r4
 801b360:	f7f5 fbb4 	bl	8010acc <mbedtls_debug_print_msg>
    list_size = buf[0];
 801b364:	f898 3004 	ldrb.w	r3, [r8, #4]
    if( list_size + 1 != len )
 801b368:	1c5a      	adds	r2, r3, #1
 801b36a:	4296      	cmp	r6, r2
 801b36c:	d004      	beq.n	801b378 <mbedtls_ssl_handshake_client_step+0x790>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello message" ) );
 801b36e:	4b77      	ldr	r3, [pc, #476]	; (801b54c <mbedtls_ssl_handshake_client_step+0x964>)
 801b370:	9300      	str	r3, [sp, #0]
 801b372:	f240 43c3 	movw	r3, #1219	; 0x4c3
 801b376:	e4dd      	b.n	801ad34 <mbedtls_ssl_handshake_client_step+0x14c>
    while( list_size > 0 )
 801b378:	f108 0205 	add.w	r2, r8, #5
 801b37c:	4610      	mov	r0, r2
 801b37e:	b923      	cbnz	r3, 801b38a <mbedtls_ssl_handshake_client_step+0x7a2>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
 801b380:	4b77      	ldr	r3, [pc, #476]	; (801b560 <mbedtls_ssl_handshake_client_step+0x978>)
 801b382:	9300      	str	r3, [sp, #0]
 801b384:	f240 43dd 	movw	r3, #1245	; 0x4dd
 801b388:	e72f      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
        if( p[0] == MBEDTLS_ECP_PF_UNCOMPRESSED ||
 801b38a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801b38e:	2901      	cmp	r1, #1
 801b390:	d80e      	bhi.n	801b3b0 <mbedtls_ssl_handshake_client_step+0x7c8>
            ssl->handshake->ecdh_ctx.point_format = p[0];
 801b392:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b394:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
            MBEDTLS_SSL_DEBUG_MSG( 4, ( "point format selected: %d", p[0] ) );
 801b398:	7803      	ldrb	r3, [r0, #0]
 801b39a:	9301      	str	r3, [sp, #4]
 801b39c:	4b71      	ldr	r3, [pc, #452]	; (801b564 <mbedtls_ssl_handshake_client_step+0x97c>)
 801b39e:	9300      	str	r3, [sp, #0]
 801b3a0:	463a      	mov	r2, r7
 801b3a2:	f240 43d5 	movw	r3, #1237	; 0x4d5
 801b3a6:	2104      	movs	r1, #4
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "unknown extension found: %d (ignoring)",
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	f7f5 fb8f 	bl	8010acc <mbedtls_debug_print_msg>
 801b3ae:	e79e      	b.n	801b2ee <mbedtls_ssl_handshake_client_step+0x706>
        list_size--;
 801b3b0:	3b01      	subs	r3, #1
        p++;
 801b3b2:	e7e3      	b.n	801b37c <mbedtls_ssl_handshake_client_step+0x794>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "found alpn extension" ) );
 801b3b4:	4b6c      	ldr	r3, [pc, #432]	; (801b568 <mbedtls_ssl_handshake_client_step+0x980>)
 801b3b6:	9300      	str	r3, [sp, #0]
 801b3b8:	2103      	movs	r1, #3
 801b3ba:	f240 7343 	movw	r3, #1859	; 0x743
 801b3be:	463a      	mov	r2, r7
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	f7f5 fb83 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->conf->alpn_list == NULL )
 801b3c6:	6823      	ldr	r3, [r4, #0]
 801b3c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801b3ca:	b921      	cbnz	r1, 801b3d6 <mbedtls_ssl_handshake_client_step+0x7ee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "non-matching ALPN extension" ) );
 801b3cc:	4b67      	ldr	r3, [pc, #412]	; (801b56c <mbedtls_ssl_handshake_client_step+0x984>)
 801b3ce:	9300      	str	r3, [sp, #0]
 801b3d0:	f240 530f 	movw	r3, #1295	; 0x50f
 801b3d4:	e709      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
    if( len < 4 )
 801b3d6:	2e03      	cmp	r6, #3
 801b3d8:	f67f acb1 	bls.w	801ad3e <mbedtls_ssl_handshake_client_step+0x156>
    list_len = ( buf[0] << 8 ) | buf[1];
 801b3dc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801b3e0:	ba5b      	rev16	r3, r3
 801b3e2:	b29b      	uxth	r3, r3
    if( list_len != len - 2 )
 801b3e4:	1eb2      	subs	r2, r6, #2
 801b3e6:	4293      	cmp	r3, r2
 801b3e8:	f47f aca9 	bne.w	801ad3e <mbedtls_ssl_handshake_client_step+0x156>
    name_len = buf[2];
 801b3ec:	f898 a006 	ldrb.w	sl, [r8, #6]
    if( name_len != list_len - 1 )
 801b3f0:	1ef3      	subs	r3, r6, #3
 801b3f2:	459a      	cmp	sl, r3
 801b3f4:	f47f aca3 	bne.w	801ad3e <mbedtls_ssl_handshake_client_step+0x156>
 801b3f8:	1f0b      	subs	r3, r1, #4
 801b3fa:	9309      	str	r3, [sp, #36]	; 0x24
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b3fc:	f108 0307 	add.w	r3, r8, #7
 801b400:	ee08 3a10 	vmov	s16, r3
    for( p = ssl->conf->alpn_list; *p != NULL; p++ )
 801b404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b406:	f853 1f04 	ldr.w	r1, [r3, #4]!
 801b40a:	9309      	str	r3, [sp, #36]	; 0x24
 801b40c:	b921      	cbnz	r1, 801b418 <mbedtls_ssl_handshake_client_step+0x830>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "ALPN extension: no matching protocol" ) );
 801b40e:	4b58      	ldr	r3, [pc, #352]	; (801b570 <mbedtls_ssl_handshake_client_step+0x988>)
 801b410:	9300      	str	r3, [sp, #0]
 801b412:	f240 5342 	movw	r3, #1346	; 0x542
 801b416:	e6e8      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
        if( name_len == strlen( *p ) &&
 801b418:	4608      	mov	r0, r1
 801b41a:	910b      	str	r1, [sp, #44]	; 0x2c
 801b41c:	f7e4 fee2 	bl	80001e4 <strlen>
 801b420:	4582      	cmp	sl, r0
 801b422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b424:	d1ee      	bne.n	801b404 <mbedtls_ssl_handshake_client_step+0x81c>
            memcmp( buf + 3, *p, name_len ) == 0 )
 801b426:	ee18 0a10 	vmov	r0, s16
 801b42a:	4652      	mov	r2, sl
 801b42c:	f006 ffce 	bl	80223cc <memcmp>
        if( name_len == strlen( *p ) &&
 801b430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b432:	2800      	cmp	r0, #0
 801b434:	d1e6      	bne.n	801b404 <mbedtls_ssl_handshake_client_step+0x81c>
            ssl->alpn_chosen = *p;
 801b436:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
            return( 0 );
 801b43a:	e758      	b.n	801b2ee <mbedtls_ssl_handshake_client_step+0x706>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b43c:	68a0      	ldr	r0, [r4, #8]
 801b43e:	2801      	cmp	r0, #1
 801b440:	d120      	bne.n	801b484 <mbedtls_ssl_handshake_client_step+0x89c>
 801b442:	2901      	cmp	r1, #1
 801b444:	d108      	bne.n	801b458 <mbedtls_ssl_handshake_client_step+0x870>
             ssl->secure_renegotiation == MBEDTLS_SSL_SECURE_RENEGOTIATION &&
 801b446:	f1b9 0f00 	cmp.w	r9, #0
 801b44a:	d11b      	bne.n	801b484 <mbedtls_ssl_handshake_client_step+0x89c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension missing (secure)" ) );
 801b44c:	4b49      	ldr	r3, [pc, #292]	; (801b574 <mbedtls_ssl_handshake_client_step+0x98c>)
 801b44e:	9300      	str	r3, [sp, #0]
 801b450:	4a3f      	ldr	r2, [pc, #252]	; (801b550 <mbedtls_ssl_handshake_client_step+0x968>)
 801b452:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 801b456:	e6ca      	b.n	801b1ee <mbedtls_ssl_handshake_client_step+0x606>
    else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS &&
 801b458:	b9a1      	cbnz	r1, 801b484 <mbedtls_ssl_handshake_client_step+0x89c>
             ssl->conf->allow_legacy_renegotiation == MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION )
 801b45a:	6823      	ldr	r3, [r4, #0]
 801b45c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b460:	f013 0f30 	tst.w	r3, #48	; 0x30
 801b464:	d104      	bne.n	801b470 <mbedtls_ssl_handshake_client_step+0x888>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "legacy renegotiation not allowed" ) );
 801b466:	4b44      	ldr	r3, [pc, #272]	; (801b578 <mbedtls_ssl_handshake_client_step+0x990>)
 801b468:	9300      	str	r3, [sp, #0]
 801b46a:	f240 736f 	movw	r3, #1903	; 0x76f
 801b46e:	e6bc      	b.n	801b1ea <mbedtls_ssl_handshake_client_step+0x602>
             ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801b470:	f1b9 0f00 	cmp.w	r9, #0
 801b474:	d006      	beq.n	801b484 <mbedtls_ssl_handshake_client_step+0x89c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation_info extension present (legacy)" ) );
 801b476:	4b41      	ldr	r3, [pc, #260]	; (801b57c <mbedtls_ssl_handshake_client_step+0x994>)
 801b478:	9300      	str	r3, [sp, #0]
 801b47a:	4a35      	ldr	r2, [pc, #212]	; (801b550 <mbedtls_ssl_handshake_client_step+0x968>)
 801b47c:	f240 7376 	movw	r3, #1910	; 0x776
 801b480:	4649      	mov	r1, r9
 801b482:	e6b4      	b.n	801b1ee <mbedtls_ssl_handshake_client_step+0x606>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello" ) );
 801b484:	4b3e      	ldr	r3, [pc, #248]	; (801b580 <mbedtls_ssl_handshake_client_step+0x998>)
 801b486:	9300      	str	r3, [sp, #0]
 801b488:	f240 7382 	movw	r3, #1922	; 0x782
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801b48c:	4a30      	ldr	r2, [pc, #192]	; (801b550 <mbedtls_ssl_handshake_client_step+0x968>)
 801b48e:	2102      	movs	r1, #2
 801b490:	4620      	mov	r0, r4
 801b492:	f7f5 fb1b 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801b496:	f7ff bbe7 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
           ret = mbedtls_ssl_parse_certificate( ssl );
 801b49a:	4620      	mov	r0, r4
 801b49c:	f003 fd32 	bl	801ef04 <mbedtls_ssl_parse_certificate>
 801b4a0:	f7ff bbeb 	b.w	801ac7a <mbedtls_ssl_handshake_client_step+0x92>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b4a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b4a6:	4a2a      	ldr	r2, [pc, #168]	; (801b550 <mbedtls_ssl_handshake_client_step+0x968>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b4a8:	f8d3 b000 	ldr.w	fp, [r3]
    unsigned char *p = NULL, *end = NULL;
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	930c      	str	r3, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server key exchange" ) );
 801b4b0:	4b34      	ldr	r3, [pc, #208]	; (801b584 <mbedtls_ssl_handshake_client_step+0x99c>)
 801b4b2:	9300      	str	r3, [sp, #0]
 801b4b4:	2102      	movs	r1, #2
 801b4b6:	f640 03d7 	movw	r3, #2263	; 0x8d7
 801b4ba:	4620      	mov	r0, r4
 801b4bc:	f7f5 fb06 	bl	8010acc <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801b4c0:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b4c4:	2b01      	cmp	r3, #1
 801b4c6:	d10d      	bne.n	801b4e4 <mbedtls_ssl_handshake_client_step+0x8fc>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse server key exchange" ) );
 801b4c8:	4b2f      	ldr	r3, [pc, #188]	; (801b588 <mbedtls_ssl_handshake_client_step+0x9a0>)
 801b4ca:	9300      	str	r3, [sp, #0]
 801b4cc:	f640 03dc 	movw	r3, #2268	; 0x8dc
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801b4d0:	4a1f      	ldr	r2, [pc, #124]	; (801b550 <mbedtls_ssl_handshake_client_step+0x968>)
 801b4d2:	2102      	movs	r1, #2
 801b4d4:	4620      	mov	r0, r4
 801b4d6:	f7f5 faf9 	bl	8010acc <mbedtls_debug_print_msg>
        ssl->state++;
 801b4da:	6863      	ldr	r3, [r4, #4]
 801b4dc:	3301      	adds	r3, #1
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801b4de:	6063      	str	r3, [r4, #4]
           break;
 801b4e0:	f7ff bbc2 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b4e4:	4620      	mov	r0, r4
 801b4e6:	f002 fb9d 	bl	801dc24 <mbedtls_ssl_read_record>
 801b4ea:	4605      	mov	r5, r0
 801b4ec:	b130      	cbz	r0, 801b4fc <mbedtls_ssl_handshake_client_step+0x914>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b4ee:	4b27      	ldr	r3, [pc, #156]	; (801b58c <mbedtls_ssl_handshake_client_step+0x9a4>)
 801b4f0:	9300      	str	r3, [sp, #0]
 801b4f2:	9001      	str	r0, [sp, #4]
 801b4f4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 801b4f8:	f7ff bbd5 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b4fc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b4fe:	2b16      	cmp	r3, #22
 801b500:	d005      	beq.n	801b50e <mbedtls_ssl_handshake_client_step+0x926>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b502:	4b23      	ldr	r3, [pc, #140]	; (801b590 <mbedtls_ssl_handshake_client_step+0x9a8>)
 801b504:	9300      	str	r3, [sp, #0]
 801b506:	f640 1302 	movw	r3, #2306	; 0x902
 801b50a:	f7ff bbfc 	b.w	801ad06 <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE )
 801b50e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 801b510:	7833      	ldrb	r3, [r6, #0]
 801b512:	2b0c      	cmp	r3, #12
 801b514:	d046      	beq.n	801b5a4 <mbedtls_ssl_handshake_client_step+0x9bc>
        if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801b516:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b51a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 801b51e:	2b05      	cmp	r3, #5
 801b520:	d13a      	bne.n	801b598 <mbedtls_ssl_handshake_client_step+0x9b0>
            ssl->keep_current_message = 1;
 801b522:	2301      	movs	r3, #1
 801b524:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    ssl->state++;
 801b528:	6863      	ldr	r3, [r4, #4]
 801b52a:	3301      	adds	r3, #1
 801b52c:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server key exchange" ) );
 801b52e:	4b19      	ldr	r3, [pc, #100]	; (801b594 <mbedtls_ssl_handshake_client_step+0x9ac>)
 801b530:	9300      	str	r3, [sp, #0]
 801b532:	f640 232f 	movw	r3, #2607	; 0xa2f
 801b536:	e7a9      	b.n	801b48c <mbedtls_ssl_handshake_client_step+0x8a4>
 801b538:	08031683 	.word	0x08031683
 801b53c:	080316a6 	.word	0x080316a6
 801b540:	080316ca 	.word	0x080316ca
 801b544:	080316f5 	.word	0x080316f5
 801b548:	08031714 	.word	0x08031714
 801b54c:	08031445 	.word	0x08031445
 801b550:	08030ef4 	.word	0x08030ef4
 801b554:	0803178f 	.word	0x0803178f
 801b558:	080317ae 	.word	0x080317ae
 801b55c:	080317d4 	.word	0x080317d4
 801b560:	08031816 	.word	0x08031816
 801b564:	080317fc 	.word	0x080317fc
 801b568:	08031830 	.word	0x08031830
 801b56c:	08031845 	.word	0x08031845
 801b570:	08031861 	.word	0x08031861
 801b574:	080318da 	.word	0x080318da
 801b578:	08031908 	.word	0x08031908
 801b57c:	08031929 	.word	0x08031929
 801b580:	08031957 	.word	0x08031957
 801b584:	0803196d 	.word	0x0803196d
 801b588:	0803198a 	.word	0x0803198a
 801b58c:	080313d6 	.word	0x080313d6
 801b590:	080319ac 	.word	0x080319ac
 801b594:	08031b89 	.word	0x08031b89
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server key exchange message must "
 801b598:	4b9e      	ldr	r3, [pc, #632]	; (801b814 <mbedtls_ssl_handshake_client_step+0xc2c>)
 801b59a:	9300      	str	r3, [sp, #0]
 801b59c:	f640 1317 	movw	r3, #2327	; 0x917
 801b5a0:	f7ff bbb1 	b.w	801ad06 <mbedtls_ssl_handshake_client_step+0x11e>
    end = ssl->in_msg + ssl->in_hslen;
 801b5a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b5a8:	1d32      	adds	r2, r6, #4
    end = ssl->in_msg + ssl->in_hslen;
 801b5aa:	441e      	add	r6, r3
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b5ac:	3b04      	subs	r3, #4
 801b5ae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 801b5b2:	4b99      	ldr	r3, [pc, #612]	; (801b818 <mbedtls_ssl_handshake_client_step+0xc30>)
    p   = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b5b4:	920c      	str	r2, [sp, #48]	; 0x30
    MBEDTLS_SSL_DEBUG_BUF( 3,   "server key exchange", p, end - p );
 801b5b6:	9300      	str	r3, [sp, #0]
 801b5b8:	4a98      	ldr	r2, [pc, #608]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b5ba:	f640 1321 	movw	r3, #2337	; 0x921
 801b5be:	2103      	movs	r1, #3
 801b5c0:	4620      	mov	r0, r4
 801b5c2:	f7f5 fae3 	bl	8010b8c <mbedtls_debug_print_buf>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801b5c6:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b5ca:	1eda      	subs	r2, r3, #3
 801b5cc:	2a01      	cmp	r2, #1
 801b5ce:	d901      	bls.n	801b5d4 <mbedtls_ssl_handshake_client_step+0x9ec>
 801b5d0:	2b08      	cmp	r3, #8
 801b5d2:	d17f      	bne.n	801b6d4 <mbedtls_ssl_handshake_client_step+0xaec>
    if( ( ret = mbedtls_ecdh_read_params( &ssl->handshake->ecdh_ctx,
 801b5d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801b5d6:	4632      	mov	r2, r6
 801b5d8:	a90c      	add	r1, sp, #48	; 0x30
 801b5da:	3004      	adds	r0, #4
 801b5dc:	f7f5 fce9 	bl	8010fb2 <mbedtls_ecdh_read_params>
 801b5e0:	b1d0      	cbz	r0, 801b618 <mbedtls_ssl_handshake_client_step+0xa30>
        MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ecdh_read_params" ), ret );
 801b5e2:	4b8f      	ldr	r3, [pc, #572]	; (801b820 <mbedtls_ssl_handshake_client_step+0xc38>)
 801b5e4:	9001      	str	r0, [sp, #4]
 801b5e6:	9300      	str	r3, [sp, #0]
 801b5e8:	4a8c      	ldr	r2, [pc, #560]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b5ea:	f240 73e6 	movw	r3, #2022	; 0x7e6
 801b5ee:	2101      	movs	r1, #1
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	f7f5 fa9b 	bl	8010b2c <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b5f6:	4b8b      	ldr	r3, [pc, #556]	; (801b824 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b5f8:	4a88      	ldr	r2, [pc, #544]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b5fa:	9300      	str	r3, [sp, #0]
 801b5fc:	2101      	movs	r1, #1
 801b5fe:	f640 1354 	movw	r3, #2388	; 0x954
 801b602:	4620      	mov	r0, r4
 801b604:	f7f5 fa62 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b608:	222f      	movs	r2, #47	; 0x2f
 801b60a:	2102      	movs	r1, #2
 801b60c:	4620      	mov	r0, r4
 801b60e:	f001 fef3 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b612:	4d85      	ldr	r5, [pc, #532]	; (801b828 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b614:	f7ff bb28 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    curve_info = mbedtls_ecp_curve_info_from_grp_id( ssl->handshake->ecdh_ctx.grp.id );
 801b618:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b61a:	7918      	ldrb	r0, [r3, #4]
 801b61c:	f7f6 fcec 	bl	8011ff8 <mbedtls_ecp_curve_info_from_grp_id>
    if( curve_info == NULL )
 801b620:	b990      	cbnz	r0, 801b648 <mbedtls_ssl_handshake_client_step+0xa60>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b622:	4b82      	ldr	r3, [pc, #520]	; (801b82c <mbedtls_ssl_handshake_client_step+0xc44>)
 801b624:	9300      	str	r3, [sp, #0]
 801b626:	4a7d      	ldr	r2, [pc, #500]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b628:	f240 73ba 	movw	r3, #1978	; 0x7ba
 801b62c:	2101      	movs	r1, #1
 801b62e:	4620      	mov	r0, r4
 801b630:	f7f5 fa4c 	bl	8010acc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message (ECDHE curve)" ) );
 801b634:	4b7e      	ldr	r3, [pc, #504]	; (801b830 <mbedtls_ssl_handshake_client_step+0xc48>)
 801b636:	9300      	str	r3, [sp, #0]
 801b638:	4a78      	ldr	r2, [pc, #480]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b63a:	f240 73ec 	movw	r3, #2028	; 0x7ec
 801b63e:	2101      	movs	r1, #1
 801b640:	4620      	mov	r0, r4
 801b642:	f7f5 fa43 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b646:	e7d6      	b.n	801b5f6 <mbedtls_ssl_handshake_client_step+0xa0e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "ECDH curve: %s", curve_info->name ) );
 801b648:	6883      	ldr	r3, [r0, #8]
 801b64a:	9301      	str	r3, [sp, #4]
 801b64c:	4b79      	ldr	r3, [pc, #484]	; (801b834 <mbedtls_ssl_handshake_client_step+0xc4c>)
 801b64e:	9300      	str	r3, [sp, #0]
 801b650:	2102      	movs	r1, #2
 801b652:	f240 73be 	movw	r3, #1982	; 0x7be
 801b656:	4620      	mov	r0, r4
 801b658:	4a70      	ldr	r2, [pc, #448]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b65a:	f7f5 fa37 	bl	8010acc <mbedtls_debug_print_msg>
    if( mbedtls_ssl_check_curve( ssl, ssl->handshake->ecdh_ctx.grp.id ) != 0 )
 801b65e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b660:	4620      	mov	r0, r4
 801b662:	7919      	ldrb	r1, [r3, #4]
 801b664:	f003 fbf8 	bl	801ee58 <mbedtls_ssl_check_curve>
 801b668:	2800      	cmp	r0, #0
 801b66a:	d1e3      	bne.n	801b634 <mbedtls_ssl_handshake_client_step+0xa4c>
    MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Qp", &ssl->handshake->ecdh_ctx.Qp );
 801b66c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b66e:	4a6b      	ldr	r2, [pc, #428]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b670:	33b0      	adds	r3, #176	; 0xb0
 801b672:	9301      	str	r3, [sp, #4]
 801b674:	4b70      	ldr	r3, [pc, #448]	; (801b838 <mbedtls_ssl_handshake_client_step+0xc50>)
 801b676:	9300      	str	r3, [sp, #0]
 801b678:	2103      	movs	r1, #3
 801b67a:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
 801b67e:	4620      	mov	r0, r4
 801b680:	f7f5 fb6e 	bl	8010d60 <mbedtls_debug_print_ecp>
#endif /* MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED) */

#if defined(MBEDTLS_KEY_EXCHANGE__WITH_SERVER_SIGNATURE__ENABLED)
static inline int mbedtls_ssl_ciphersuite_uses_server_signature( const mbedtls_ssl_ciphersuite_t *info )
{
    switch( info->key_exchange )
 801b684:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801b688:	3b02      	subs	r3, #2
 801b68a:	2b02      	cmp	r3, #2
 801b68c:	f63f af4c 	bhi.w	801b528 <mbedtls_ssl_handshake_client_step+0x940>
        if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801b690:	6963      	ldr	r3, [r4, #20]
 801b692:	2b03      	cmp	r3, #3
 801b694:	d16e      	bne.n	801b774 <mbedtls_ssl_handshake_client_step+0xb8c>
        size_t params_len = p - params;
 801b696:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    if( (*p) + 2 > end )
 801b69a:	f10a 0302 	add.w	r3, sl, #2
 801b69e:	429e      	cmp	r6, r3
 801b6a0:	d313      	bcc.n	801b6ca <mbedtls_ssl_handshake_client_step+0xae2>
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b6a2:	f89a 0000 	ldrb.w	r0, [sl]
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b6a6:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
    if( ( *md_alg = mbedtls_ssl_md_alg_from_hash( (*p)[0] ) ) == MBEDTLS_MD_NONE )
 801b6aa:	f003 fbc7 	bl	801ee3c <mbedtls_ssl_md_alg_from_hash>
 801b6ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b6b0:	4607      	mov	r7, r0
 801b6b2:	b9d8      	cbnz	r0, 801b6ec <mbedtls_ssl_handshake_client_step+0xb04>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Server used unsupported "
 801b6b4:	781b      	ldrb	r3, [r3, #0]
 801b6b6:	9301      	str	r3, [sp, #4]
 801b6b8:	4b60      	ldr	r3, [pc, #384]	; (801b83c <mbedtls_ssl_handshake_client_step+0xc54>)
 801b6ba:	9300      	str	r3, [sp, #0]
 801b6bc:	f640 0384 	movw	r3, #2180	; 0x884
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b6c0:	4a56      	ldr	r2, [pc, #344]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b6c2:	2101      	movs	r1, #1
 801b6c4:	4620      	mov	r0, r4
 801b6c6:	f7f5 fa01 	bl	8010acc <mbedtls_debug_print_msg>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b6ca:	4b56      	ldr	r3, [pc, #344]	; (801b824 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b6cc:	9300      	str	r3, [sp, #0]
 801b6ce:	f640 1385 	movw	r3, #2437	; 0x985
 801b6d2:	e048      	b.n	801b766 <mbedtls_ssl_handshake_client_step+0xb7e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b6d4:	4b55      	ldr	r3, [pc, #340]	; (801b82c <mbedtls_ssl_handshake_client_step+0xc44>)
 801b6d6:	9300      	str	r3, [sp, #0]
 801b6d8:	f640 136e 	movw	r3, #2414	; 0x96e
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b6dc:	4a4f      	ldr	r2, [pc, #316]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b6de:	4d58      	ldr	r5, [pc, #352]	; (801b840 <mbedtls_ssl_handshake_client_step+0xc58>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b6e0:	2101      	movs	r1, #1
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	f7f5 f9f2 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b6e8:	f7ff babe 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( *pk_alg = mbedtls_ssl_pk_alg_from_sig( (*p)[1] ) ) == MBEDTLS_PK_NONE )
 801b6ec:	7858      	ldrb	r0, [r3, #1]
 801b6ee:	f003 fb9e 	bl	801ee2e <mbedtls_ssl_pk_alg_from_sig>
 801b6f2:	4680      	mov	r8, r0
 801b6f4:	b938      	cbnz	r0, 801b706 <mbedtls_ssl_handshake_client_step+0xb1e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used unsupported "
 801b6f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b6f8:	785b      	ldrb	r3, [r3, #1]
 801b6fa:	9301      	str	r3, [sp, #4]
 801b6fc:	4b51      	ldr	r3, [pc, #324]	; (801b844 <mbedtls_ssl_handshake_client_step+0xc5c>)
 801b6fe:	9300      	str	r3, [sp, #0]
 801b700:	f640 038e 	movw	r3, #2190	; 0x88e
 801b704:	e7dc      	b.n	801b6c0 <mbedtls_ssl_handshake_client_step+0xad8>
    if( mbedtls_ssl_check_sig_hash( ssl, *md_alg ) != 0 )
 801b706:	4639      	mov	r1, r7
 801b708:	4620      	mov	r0, r4
 801b70a:	f003 fbb3 	bl	801ee74 <mbedtls_ssl_check_sig_hash>
 801b70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b710:	b130      	cbz	r0, 801b720 <mbedtls_ssl_handshake_client_step+0xb38>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "server used HashAlgorithm %d that was not offered",
 801b712:	781b      	ldrb	r3, [r3, #0]
 801b714:	9301      	str	r3, [sp, #4]
 801b716:	4b4c      	ldr	r3, [pc, #304]	; (801b848 <mbedtls_ssl_handshake_client_step+0xc60>)
 801b718:	9300      	str	r3, [sp, #0]
 801b71a:	f640 0398 	movw	r3, #2200	; 0x898
 801b71e:	e7cf      	b.n	801b6c0 <mbedtls_ssl_handshake_client_step+0xad8>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used SignatureAlgorithm %d", (*p)[1] ) );
 801b720:	785b      	ldrb	r3, [r3, #1]
 801b722:	9301      	str	r3, [sp, #4]
 801b724:	4b49      	ldr	r3, [pc, #292]	; (801b84c <mbedtls_ssl_handshake_client_step+0xc64>)
 801b726:	4a3d      	ldr	r2, [pc, #244]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b728:	9300      	str	r3, [sp, #0]
 801b72a:	2102      	movs	r1, #2
 801b72c:	f640 039d 	movw	r3, #2205	; 0x89d
 801b730:	4620      	mov	r0, r4
 801b732:	f7f5 f9cb 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "Server used HashAlgorithm %d", (*p)[0] ) );
 801b736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b738:	4a38      	ldr	r2, [pc, #224]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b73a:	781b      	ldrb	r3, [r3, #0]
 801b73c:	9301      	str	r3, [sp, #4]
 801b73e:	4b44      	ldr	r3, [pc, #272]	; (801b850 <mbedtls_ssl_handshake_client_step+0xc68>)
 801b740:	9300      	str	r3, [sp, #0]
 801b742:	2102      	movs	r1, #2
 801b744:	f640 039e 	movw	r3, #2206	; 0x89e
 801b748:	4620      	mov	r0, r4
 801b74a:	f7f5 f9bf 	bl	8010acc <mbedtls_debug_print_msg>
    *p += 2;
 801b74e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b750:	4658      	mov	r0, fp
    *p += 2;
 801b752:	3302      	adds	r3, #2
 801b754:	930c      	str	r3, [sp, #48]	; 0x30
            if( pk_alg != mbedtls_ssl_get_ciphersuite_sig_pk_alg( ciphersuite_info ) )
 801b756:	f7fe fd63 	bl	801a220 <mbedtls_ssl_get_ciphersuite_sig_pk_alg>
 801b75a:	4540      	cmp	r0, r8
 801b75c:	d017      	beq.n	801b78e <mbedtls_ssl_handshake_client_step+0xba6>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b75e:	4b31      	ldr	r3, [pc, #196]	; (801b824 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b760:	9300      	str	r3, [sp, #0]
 801b762:	f640 138d 	movw	r3, #2445	; 0x98d
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b766:	4a2d      	ldr	r2, [pc, #180]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b768:	2101      	movs	r1, #1
 801b76a:	4620      	mov	r0, r4
 801b76c:	f7f5 f9ae 	bl	8010acc <mbedtls_debug_print_msg>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b770:	222f      	movs	r2, #47	; 0x2f
 801b772:	e021      	b.n	801b7b8 <mbedtls_ssl_handshake_client_step+0xbd0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b774:	4b2d      	ldr	r3, [pc, #180]	; (801b82c <mbedtls_ssl_handshake_client_step+0xc44>)
 801b776:	9300      	str	r3, [sp, #0]
 801b778:	4a28      	ldr	r2, [pc, #160]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801b77a:	4e31      	ldr	r6, [pc, #196]	; (801b840 <mbedtls_ssl_handshake_client_step+0xc58>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801b77c:	f640 13a2 	movw	r3, #2466	; 0x9a2
 801b780:	2101      	movs	r1, #1
 801b782:	4620      	mov	r0, r4
 801b784:	f7f5 f9a2 	bl	8010acc <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b788:	4635      	mov	r5, r6
 801b78a:	f7ff ba6d 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
        sig_len = ( p[0] << 8 ) | p[1];
 801b78e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b790:	f832 3b02 	ldrh.w	r3, [r2], #2
        p += 2;
 801b794:	920c      	str	r2, [sp, #48]	; 0x30
        sig_len = ( p[0] << 8 ) | p[1];
 801b796:	ba5b      	rev16	r3, r3
 801b798:	fa1f fb83 	uxth.w	fp, r3
        if( end != p + sig_len )
 801b79c:	fa12 f383 	uxtah	r3, r2, r3
 801b7a0:	429e      	cmp	r6, r3
 801b7a2:	d00f      	beq.n	801b7c4 <mbedtls_ssl_handshake_client_step+0xbdc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b7a4:	4b1f      	ldr	r3, [pc, #124]	; (801b824 <mbedtls_ssl_handshake_client_step+0xc3c>)
 801b7a6:	4a1d      	ldr	r2, [pc, #116]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b7a8:	9300      	str	r3, [sp, #0]
 801b7aa:	2101      	movs	r1, #1
 801b7ac:	f640 13ae 	movw	r3, #2478	; 0x9ae
 801b7b0:	4620      	mov	r0, r4
 801b7b2:	f7f5 f98b 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b7b6:	2232      	movs	r2, #50	; 0x32
 801b7b8:	2102      	movs	r1, #2
 801b7ba:	4620      	mov	r0, r4
 801b7bc:	f001 fe1c 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE );
 801b7c0:	4e19      	ldr	r6, [pc, #100]	; (801b828 <mbedtls_ssl_handshake_client_step+0xc40>)
 801b7c2:	e7e1      	b.n	801b788 <mbedtls_ssl_handshake_client_step+0xba0>
        MBEDTLS_SSL_DEBUG_BUF( 3, "signature", p, sig_len );
 801b7c4:	4b23      	ldr	r3, [pc, #140]	; (801b854 <mbedtls_ssl_handshake_client_step+0xc6c>)
 801b7c6:	9300      	str	r3, [sp, #0]
 801b7c8:	2103      	movs	r1, #3
 801b7ca:	f640 13b4 	movw	r3, #2484	; 0x9b4
 801b7ce:	e9cd 2b01 	strd	r2, fp, [sp, #4]
 801b7d2:	4620      	mov	r0, r4
 801b7d4:	4a11      	ldr	r2, [pc, #68]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b7d6:	f7f5 f9d9 	bl	8010b8c <mbedtls_debug_print_buf>
            mbedtls_md_init( &ctx );
 801b7da:	a80d      	add	r0, sp, #52	; 0x34
 801b7dc:	f7f9 f86e 	bl	80148bc <mbedtls_md_init>
            if( ( ret = mbedtls_md_setup( &ctx,
 801b7e0:	4638      	mov	r0, r7
 801b7e2:	f7f9 f85f 	bl	80148a4 <mbedtls_md_info_from_type>
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	4601      	mov	r1, r0
 801b7ea:	a80d      	add	r0, sp, #52	; 0x34
 801b7ec:	f7f9 f890 	bl	8014910 <mbedtls_md_setup>
 801b7f0:	4606      	mov	r6, r0
 801b7f2:	b398      	cbz	r0, 801b85c <mbedtls_ssl_handshake_client_step+0xc74>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801b7f4:	4b18      	ldr	r3, [pc, #96]	; (801b858 <mbedtls_ssl_handshake_client_step+0xc70>)
 801b7f6:	9001      	str	r0, [sp, #4]
 801b7f8:	9300      	str	r3, [sp, #0]
 801b7fa:	4620      	mov	r0, r4
 801b7fc:	4a07      	ldr	r2, [pc, #28]	; (801b81c <mbedtls_ssl_handshake_client_step+0xc34>)
 801b7fe:	f640 13f7 	movw	r3, #2551	; 0x9f7
 801b802:	2101      	movs	r1, #1
 801b804:	f7f5 f992 	bl	8010b2c <mbedtls_debug_print_ret>
                mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b808:	2250      	movs	r2, #80	; 0x50
 801b80a:	2102      	movs	r1, #2
 801b80c:	4620      	mov	r0, r4
 801b80e:	f001 fdf3 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
                return( ret );
 801b812:	e7b9      	b.n	801b788 <mbedtls_ssl_handshake_client_step+0xba0>
 801b814:	080319cc 	.word	0x080319cc
 801b818:	08031b92 	.word	0x08031b92
 801b81c:	08030ef4 	.word	0x08030ef4
 801b820:	080319fc 	.word	0x080319fc
 801b824:	080319ac 	.word	0x080319ac
 801b828:	ffff8500 	.word	0xffff8500
 801b82c:	08031a15 	.word	0x08031a15
 801b830:	08031a41 	.word	0x08031a41
 801b834:	08031a29 	.word	0x08031a29
 801b838:	08031a38 	.word	0x08031a38
 801b83c:	08031a6f 	.word	0x08031a6f
 801b840:	ffff9400 	.word	0xffff9400
 801b844:	08031a98 	.word	0x08031a98
 801b848:	08031ac6 	.word	0x08031ac6
 801b84c:	08031af8 	.word	0x08031af8
 801b850:	08031b1a 	.word	0x08031b1a
 801b854:	08031b37 	.word	0x08031b37
 801b858:	08031b41 	.word	0x08031b41
            mbedtls_md_starts( &ctx );
 801b85c:	a80d      	add	r0, sp, #52	; 0x34
 801b85e:	f7f9 f879 	bl	8014954 <mbedtls_md_starts>
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        unsigned char *params = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
 801b864:	f109 0904 	add.w	r9, r9, #4
            mbedtls_md_update( &ctx, ssl->handshake->randbytes, 64 );
 801b868:	2240      	movs	r2, #64	; 0x40
 801b86a:	f501 712b 	add.w	r1, r1, #684	; 0x2ac
 801b86e:	a80d      	add	r0, sp, #52	; 0x34
 801b870:	f7f9 f87e 	bl	8014970 <mbedtls_md_update>
            mbedtls_md_update( &ctx, params, params_len );
 801b874:	ebaa 0209 	sub.w	r2, sl, r9
 801b878:	4649      	mov	r1, r9
 801b87a:	a80d      	add	r0, sp, #52	; 0x34
            mbedtls_md_finish( &ctx, hash );
 801b87c:	f10d 0940 	add.w	r9, sp, #64	; 0x40
            mbedtls_md_update( &ctx, params, params_len );
 801b880:	f7f9 f876 	bl	8014970 <mbedtls_md_update>
            mbedtls_md_finish( &ctx, hash );
 801b884:	4649      	mov	r1, r9
 801b886:	a80d      	add	r0, sp, #52	; 0x34
 801b888:	f7f9 f880 	bl	801498c <mbedtls_md_finish>
            mbedtls_md_free( &ctx );
 801b88c:	a80d      	add	r0, sp, #52	; 0x34
 801b88e:	f7f9 f81b 	bl	80148c8 <mbedtls_md_free>
        MBEDTLS_SSL_DEBUG_BUF( 3, "parameters hash", hash, hashlen != 0 ? hashlen :
 801b892:	4638      	mov	r0, r7
 801b894:	f7f9 f806 	bl	80148a4 <mbedtls_md_info_from_type>
 801b898:	f7f9 f954 	bl	8014b44 <mbedtls_md_get_size>
 801b89c:	4ba2      	ldr	r3, [pc, #648]	; (801bb28 <mbedtls_ssl_handshake_client_step+0xf40>)
 801b89e:	9300      	str	r3, [sp, #0]
 801b8a0:	e9cd 9001 	strd	r9, r0, [sp, #4]
 801b8a4:	f640 230b 	movw	r3, #2571	; 0xa0b
 801b8a8:	4620      	mov	r0, r4
 801b8aa:	4aa0      	ldr	r2, [pc, #640]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801b8ac:	2103      	movs	r1, #3
 801b8ae:	f7f5 f96d 	bl	8010b8c <mbedtls_debug_print_buf>
        if( ssl->session_negotiate->peer_cert == NULL )
 801b8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b8b4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b8b6:	b978      	cbnz	r0, 801b8d8 <mbedtls_ssl_handshake_client_step+0xcf0>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801b8b8:	4b9d      	ldr	r3, [pc, #628]	; (801bb30 <mbedtls_ssl_handshake_client_step+0xf48>)
 801b8ba:	4a9c      	ldr	r2, [pc, #624]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801b8bc:	9300      	str	r3, [sp, #0]
 801b8be:	2102      	movs	r1, #2
 801b8c0:	f44f 6321 	mov.w	r3, #2576	; 0xa10
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	f7f5 f901 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b8ca:	2228      	movs	r2, #40	; 0x28
 801b8cc:	2102      	movs	r1, #2
 801b8ce:	4620      	mov	r0, r4
 801b8d0:	f001 fd92 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801b8d4:	4e97      	ldr	r6, [pc, #604]	; (801bb34 <mbedtls_ssl_handshake_client_step+0xf4c>)
 801b8d6:	e757      	b.n	801b788 <mbedtls_ssl_handshake_client_step+0xba0>
        if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk, pk_alg ) )
 801b8d8:	4641      	mov	r1, r8
 801b8da:	30bc      	adds	r0, #188	; 0xbc
 801b8dc:	f7fa f8fc 	bl	8015ad8 <mbedtls_pk_can_do>
 801b8e0:	b978      	cbnz	r0, 801b902 <mbedtls_ssl_handshake_client_step+0xd1a>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server key exchange message" ) );
 801b8e2:	4b95      	ldr	r3, [pc, #596]	; (801bb38 <mbedtls_ssl_handshake_client_step+0xf50>)
 801b8e4:	4a91      	ldr	r2, [pc, #580]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801b8e6:	9300      	str	r3, [sp, #0]
 801b8e8:	2101      	movs	r1, #1
 801b8ea:	f640 231b 	movw	r3, #2587	; 0xa1b
 801b8ee:	4620      	mov	r0, r4
 801b8f0:	f7f5 f8ec 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b8f4:	2228      	movs	r2, #40	; 0x28
 801b8f6:	2102      	movs	r1, #2
 801b8f8:	4620      	mov	r0, r4
 801b8fa:	f001 fd7d 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801b8fe:	4e8f      	ldr	r6, [pc, #572]	; (801bb3c <mbedtls_ssl_handshake_client_step+0xf54>)
 801b900:	e742      	b.n	801b788 <mbedtls_ssl_handshake_client_step+0xba0>
        if( ( ret = mbedtls_pk_verify( &ssl->session_negotiate->peer_cert->pk,
 801b902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b904:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801b906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b908:	9300      	str	r3, [sp, #0]
 801b90a:	f8cd b004 	str.w	fp, [sp, #4]
 801b90e:	4633      	mov	r3, r6
 801b910:	464a      	mov	r2, r9
 801b912:	4639      	mov	r1, r7
 801b914:	30bc      	adds	r0, #188	; 0xbc
 801b916:	f7fa f8e9 	bl	8015aec <mbedtls_pk_verify>
 801b91a:	4606      	mov	r6, r0
 801b91c:	2800      	cmp	r0, #0
 801b91e:	f43f ae03 	beq.w	801b528 <mbedtls_ssl_handshake_client_step+0x940>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801b922:	2233      	movs	r2, #51	; 0x33
 801b924:	2102      	movs	r1, #2
 801b926:	4620      	mov	r0, r4
 801b928:	f001 fd66 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_verify", ret );
 801b92c:	4b84      	ldr	r3, [pc, #528]	; (801bb40 <mbedtls_ssl_handshake_client_step+0xf58>)
 801b92e:	9300      	str	r3, [sp, #0]
 801b930:	4a7e      	ldr	r2, [pc, #504]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801b932:	9601      	str	r6, [sp, #4]
 801b934:	f640 2326 	movw	r3, #2598	; 0xa26
 801b938:	2101      	movs	r1, #1
 801b93a:	4620      	mov	r0, r4
 801b93c:	f7f5 f8f6 	bl	8010b2c <mbedtls_debug_print_ret>
            return( ret );
 801b940:	e722      	b.n	801b788 <mbedtls_ssl_handshake_client_step+0xba0>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b942:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b944:	4a79      	ldr	r2, [pc, #484]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801b946:	681e      	ldr	r6, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate request" ) );
 801b948:	4b7e      	ldr	r3, [pc, #504]	; (801bb44 <mbedtls_ssl_handshake_client_step+0xf5c>)
 801b94a:	9300      	str	r3, [sp, #0]
 801b94c:	2102      	movs	r1, #2
 801b94e:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 801b952:	4620      	mov	r0, r4
 801b954:	f7f5 f8ba 	bl	8010acc <mbedtls_debug_print_msg>
    if( ! mbedtls_ssl_ciphersuite_cert_req_allowed( ciphersuite_info ) )
 801b958:	7ab3      	ldrb	r3, [r6, #10]
    switch( info->key_exchange )
 801b95a:	2b04      	cmp	r3, #4
 801b95c:	d80c      	bhi.n	801b978 <mbedtls_ssl_handshake_client_step+0xd90>
 801b95e:	b173      	cbz	r3, 801b97e <mbedtls_ssl_handshake_client_step+0xd96>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801b960:	4620      	mov	r0, r4
 801b962:	f002 f95f 	bl	801dc24 <mbedtls_ssl_read_record>
 801b966:	4605      	mov	r5, r0
 801b968:	b170      	cbz	r0, 801b988 <mbedtls_ssl_handshake_client_step+0xda0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801b96a:	4b77      	ldr	r3, [pc, #476]	; (801bb48 <mbedtls_ssl_handshake_client_step+0xf60>)
 801b96c:	9300      	str	r3, [sp, #0]
 801b96e:	9001      	str	r0, [sp, #4]
 801b970:	f640 235b 	movw	r3, #2651	; 0xa5b
 801b974:	f7ff b997 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
 801b978:	3b09      	subs	r3, #9
 801b97a:	2b01      	cmp	r3, #1
 801b97c:	d9f0      	bls.n	801b960 <mbedtls_ssl_handshake_client_step+0xd78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate request" ) );
 801b97e:	4b73      	ldr	r3, [pc, #460]	; (801bb4c <mbedtls_ssl_handshake_client_step+0xf64>)
 801b980:	9300      	str	r3, [sp, #0]
 801b982:	f640 2354 	movw	r3, #2644	; 0xa54
 801b986:	e5a3      	b.n	801b4d0 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801b988:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b98a:	2b16      	cmp	r3, #22
 801b98c:	d005      	beq.n	801b99a <mbedtls_ssl_handshake_client_step+0xdb2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b98e:	4b70      	ldr	r3, [pc, #448]	; (801bb50 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b990:	9300      	str	r3, [sp, #0]
 801b992:	f640 2361 	movw	r3, #2657	; 0xa61
 801b996:	f7ff b9b6 	b.w	801ad06 <mbedtls_ssl_handshake_client_step+0x11e>
    ssl->state++;
 801b99a:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801b99c:	4a6d      	ldr	r2, [pc, #436]	; (801bb54 <mbedtls_ssl_handshake_client_step+0xf6c>)
    ssl->state++;
 801b99e:	3301      	adds	r3, #1
 801b9a0:	6063      	str	r3, [r4, #4]
    ssl->client_auth = ( ssl->in_msg[0] == MBEDTLS_SSL_HS_CERTIFICATE_REQUEST );
 801b9a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b9a4:	781b      	ldrb	r3, [r3, #0]
 801b9a6:	2b0d      	cmp	r3, #13
 801b9a8:	bf0c      	ite	eq
 801b9aa:	2301      	moveq	r3, #1
 801b9ac:	2300      	movne	r3, #0
 801b9ae:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "got %s certificate request",
 801b9b2:	4b69      	ldr	r3, [pc, #420]	; (801bb58 <mbedtls_ssl_handshake_client_step+0xf70>)
 801b9b4:	bf18      	it	ne
 801b9b6:	4613      	movne	r3, r2
 801b9b8:	9301      	str	r3, [sp, #4]
 801b9ba:	4b68      	ldr	r3, [pc, #416]	; (801bb5c <mbedtls_ssl_handshake_client_step+0xf74>)
 801b9bc:	9300      	str	r3, [sp, #0]
 801b9be:	4a5b      	ldr	r2, [pc, #364]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801b9c0:	f640 236a 	movw	r3, #2666	; 0xa6a
 801b9c4:	2103      	movs	r1, #3
 801b9c6:	4620      	mov	r0, r4
 801b9c8:	f7f5 f880 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->client_auth == 0 )
 801b9cc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801b9d0:	b93b      	cbnz	r3, 801b9e2 <mbedtls_ssl_handshake_client_step+0xdfa>
        ssl->keep_current_message = 1;
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate request" ) );
 801b9d8:	4b61      	ldr	r3, [pc, #388]	; (801bb60 <mbedtls_ssl_handshake_client_step+0xf78>)
 801b9da:	9300      	str	r3, [sp, #0]
 801b9dc:	f640 23c5 	movw	r3, #2757	; 0xac5
 801b9e0:	e554      	b.n	801b48c <mbedtls_ssl_handshake_client_step+0x8a4>
    buf = ssl->in_msg;
 801b9e2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b9e6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cert_type_len = buf[mbedtls_ssl_hs_hdr_len( ssl )];
 801b9ea:	f898 6004 	ldrb.w	r6, [r8, #4]
    if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801b9ee:	1db3      	adds	r3, r6, #6
 801b9f0:	429a      	cmp	r2, r3
 801b9f2:	d210      	bcs.n	801ba16 <mbedtls_ssl_handshake_client_step+0xe2e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b9f4:	4b56      	ldr	r3, [pc, #344]	; (801bb50 <mbedtls_ssl_handshake_client_step+0xf68>)
 801b9f6:	9300      	str	r3, [sp, #0]
 801b9f8:	f640 2394 	movw	r3, #2708	; 0xa94
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801b9fc:	4a4b      	ldr	r2, [pc, #300]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801b9fe:	4d59      	ldr	r5, [pc, #356]	; (801bb64 <mbedtls_ssl_handshake_client_step+0xf7c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba00:	2101      	movs	r1, #1
 801ba02:	4620      	mov	r0, r4
 801ba04:	f7f5 f862 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ba08:	2232      	movs	r2, #50	; 0x32
 801ba0a:	2102      	movs	r1, #2
 801ba0c:	4620      	mov	r0, r4
 801ba0e:	f001 fcf3 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST );
 801ba12:	f7ff b929 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801ba16:	6962      	ldr	r2, [r4, #20]
 801ba18:	2a03      	cmp	r2, #3
 801ba1a:	d12e      	bne.n	801ba7a <mbedtls_ssl_handshake_client_step+0xe92>
 801ba1c:	eb08 0206 	add.w	r2, r8, r6
 801ba20:	f818 7003 	ldrb.w	r7, [r8, r3]
 801ba24:	7952      	ldrb	r2, [r2, #5]
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801ba26:	f8df b150 	ldr.w	fp, [pc, #336]	; 801bb78 <mbedtls_ssl_handshake_client_step+0xf90>
        unsigned char* sig_alg = buf + mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n;
 801ba2a:	f106 0907 	add.w	r9, r6, #7
 801ba2e:	44c1      	add	r9, r8
 801ba30:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
        for( i = 0; i < sig_alg_len; i += 2 )
 801ba34:	464b      	mov	r3, r9
 801ba36:	f103 0a02 	add.w	sl, r3, #2
 801ba3a:	eba3 0309 	sub.w	r3, r3, r9
 801ba3e:	429f      	cmp	r7, r3
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801ba40:	4a3a      	ldr	r2, [pc, #232]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
        for( i = 0; i < sig_alg_len; i += 2 )
 801ba42:	d80b      	bhi.n	801ba5c <mbedtls_ssl_handshake_client_step+0xe74>
        n += 2 + sig_alg_len;
 801ba44:	4437      	add	r7, r6
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801ba46:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        n += 2 + sig_alg_len;
 801ba4a:	1cbe      	adds	r6, r7, #2
        if( ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n )
 801ba4c:	3708      	adds	r7, #8
 801ba4e:	42bb      	cmp	r3, r7
 801ba50:	d213      	bcs.n	801ba7a <mbedtls_ssl_handshake_client_step+0xe92>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba52:	4b3f      	ldr	r3, [pc, #252]	; (801bb50 <mbedtls_ssl_handshake_client_step+0xf68>)
 801ba54:	9300      	str	r3, [sp, #0]
 801ba56:	f640 23af 	movw	r3, #2735	; 0xaaf
 801ba5a:	e7cf      	b.n	801b9fc <mbedtls_ssl_handshake_client_step+0xe14>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Supported Signature Algorithm found: %d"
 801ba5c:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 801ba60:	9302      	str	r3, [sp, #8]
 801ba62:	f81a 3c02 	ldrb.w	r3, [sl, #-2]
 801ba66:	2103      	movs	r1, #3
 801ba68:	e9cd b300 	strd	fp, r3, [sp]
 801ba6c:	4620      	mov	r0, r4
 801ba6e:	f640 23a6 	movw	r3, #2726	; 0xaa6
 801ba72:	f7f5 f82b 	bl	8010acc <mbedtls_debug_print_msg>
 801ba76:	4653      	mov	r3, sl
 801ba78:	e7dd      	b.n	801ba36 <mbedtls_ssl_handshake_client_step+0xe4e>
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801ba7a:	eb08 0306 	add.w	r3, r8, r6
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801ba7e:	3607      	adds	r6, #7
    dn_len = ( ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 1 + n] <<  8 )
 801ba80:	795a      	ldrb	r2, [r3, #5]
             | ( buf[mbedtls_ssl_hs_hdr_len( ssl ) + 2 + n]       ) );
 801ba82:	799b      	ldrb	r3, [r3, #6]
 801ba84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if( ssl->in_hslen != mbedtls_ssl_hs_hdr_len( ssl ) + 3 + n )
 801ba88:	441e      	add	r6, r3
 801ba8a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801ba8e:	42b3      	cmp	r3, r6
 801ba90:	d0a2      	beq.n	801b9d8 <mbedtls_ssl_handshake_client_step+0xdf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate request message" ) );
 801ba92:	4b2f      	ldr	r3, [pc, #188]	; (801bb50 <mbedtls_ssl_handshake_client_step+0xf68>)
 801ba94:	9300      	str	r3, [sp, #0]
 801ba96:	f640 23be 	movw	r3, #2750	; 0xabe
 801ba9a:	e7af      	b.n	801b9fc <mbedtls_ssl_handshake_client_step+0xe14>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse server hello done" ) );
 801ba9c:	4b32      	ldr	r3, [pc, #200]	; (801bb68 <mbedtls_ssl_handshake_client_step+0xf80>)
 801ba9e:	4a23      	ldr	r2, [pc, #140]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801baa0:	9300      	str	r3, [sp, #0]
 801baa2:	2102      	movs	r1, #2
 801baa4:	f640 23cf 	movw	r3, #2767	; 0xacf
 801baa8:	4620      	mov	r0, r4
 801baaa:	f7f5 f80f 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801baae:	4620      	mov	r0, r4
 801bab0:	f002 f8b8 	bl	801dc24 <mbedtls_ssl_read_record>
 801bab4:	4605      	mov	r5, r0
 801bab6:	b130      	cbz	r0, 801bac6 <mbedtls_ssl_handshake_client_step+0xede>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801bab8:	4b23      	ldr	r3, [pc, #140]	; (801bb48 <mbedtls_ssl_handshake_client_step+0xf60>)
 801baba:	9300      	str	r3, [sp, #0]
 801babc:	9001      	str	r0, [sp, #4]
 801babe:	f640 23d3 	movw	r3, #2771	; 0xad3
 801bac2:	f7ff b8f0 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801bac6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bac8:	2b16      	cmp	r3, #22
 801baca:	d007      	beq.n	801badc <mbedtls_ssl_handshake_client_step+0xef4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801bacc:	4b27      	ldr	r3, [pc, #156]	; (801bb6c <mbedtls_ssl_handshake_client_step+0xf84>)
 801bace:	9300      	str	r3, [sp, #0]
 801bad0:	4a16      	ldr	r2, [pc, #88]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801bad2:	f640 23d9 	movw	r3, #2777	; 0xad9
 801bad6:	2101      	movs	r1, #1
 801bad8:	f7ff b8ff 	b.w	801acda <mbedtls_ssl_handshake_client_step+0xf2>
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801badc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801bae0:	2b04      	cmp	r3, #4
 801bae2:	d103      	bne.n	801baec <mbedtls_ssl_handshake_client_step+0xf04>
        ssl->in_msg[0] != MBEDTLS_SSL_HS_SERVER_HELLO_DONE )
 801bae4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if( ssl->in_hslen  != mbedtls_ssl_hs_hdr_len( ssl ) ||
 801bae6:	781b      	ldrb	r3, [r3, #0]
 801bae8:	2b0e      	cmp	r3, #14
 801baea:	d010      	beq.n	801bb0e <mbedtls_ssl_handshake_client_step+0xf26>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad server hello done message" ) );
 801baec:	4b1f      	ldr	r3, [pc, #124]	; (801bb6c <mbedtls_ssl_handshake_client_step+0xf84>)
 801baee:	4a0f      	ldr	r2, [pc, #60]	; (801bb2c <mbedtls_ssl_handshake_client_step+0xf44>)
 801baf0:	9300      	str	r3, [sp, #0]
 801baf2:	2101      	movs	r1, #1
 801baf4:	f44f 632e 	mov.w	r3, #2784	; 0xae0
 801baf8:	4620      	mov	r0, r4
 801bafa:	f7f4 ffe7 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801bafe:	2232      	movs	r2, #50	; 0x32
 801bb00:	2102      	movs	r1, #2
 801bb02:	4620      	mov	r0, r4
 801bb04:	f001 fc78 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE );
 801bb08:	4d19      	ldr	r5, [pc, #100]	; (801bb70 <mbedtls_ssl_handshake_client_step+0xf88>)
 801bb0a:	f7ff b8ad 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    ssl->state++;
 801bb0e:	6863      	ldr	r3, [r4, #4]
 801bb10:	3301      	adds	r3, #1
 801bb12:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse server hello done" ) );
 801bb14:	4b17      	ldr	r3, [pc, #92]	; (801bb74 <mbedtls_ssl_handshake_client_step+0xf8c>)
 801bb16:	9300      	str	r3, [sp, #0]
 801bb18:	f640 23ed 	movw	r3, #2797	; 0xaed
 801bb1c:	e4b6      	b.n	801b48c <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_write_certificate( ssl );
 801bb1e:	4620      	mov	r0, r4
 801bb20:	f002 f8d6 	bl	801dcd0 <mbedtls_ssl_write_certificate>
 801bb24:	f7ff b8a9 	b.w	801ac7a <mbedtls_ssl_handshake_client_step+0x92>
 801bb28:	08031b52 	.word	0x08031b52
 801bb2c:	08030ef4 	.word	0x08030ef4
 801bb30:	08031b62 	.word	0x08031b62
 801bb34:	ffff8900 	.word	0xffff8900
 801bb38:	080319ac 	.word	0x080319ac
 801bb3c:	ffff9300 	.word	0xffff9300
 801bb40:	08031b77 	.word	0x08031b77
 801bb44:	08031ba6 	.word	0x08031ba6
 801bb48:	080313d6 	.word	0x080313d6
 801bb4c:	08031bc3 	.word	0x08031bc3
 801bb50:	08031be5 	.word	0x08031be5
 801bb54:	080313ac 	.word	0x080313ac
 801bb58:	08032a4e 	.word	0x08032a4e
 801bb5c:	08031c05 	.word	0x08031c05
 801bb60:	08031c4b 	.word	0x08031c4b
 801bb64:	ffff8580 	.word	0xffff8580
 801bb68:	08031c68 	.word	0x08031c68
 801bb6c:	08031c83 	.word	0x08031c83
 801bb70:	ffff8480 	.word	0xffff8480
 801bb74:	08031ca1 	.word	0x08031ca1
 801bb78:	08031c20 	.word	0x08031c20
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bb7c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801bb7e:	4aa0      	ldr	r2, [pc, #640]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bb80:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write client key exchange" ) );
 801bb82:	4ba0      	ldr	r3, [pc, #640]	; (801be04 <mbedtls_ssl_handshake_client_step+0x121c>)
 801bb84:	9300      	str	r3, [sp, #0]
 801bb86:	2102      	movs	r1, #2
 801bb88:	f640 23f9 	movw	r3, #2809	; 0xaf9
 801bb8c:	4620      	mov	r0, r4
 801bb8e:	f7f4 ff9d 	bl	8010acc <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_RSA ||
 801bb92:	7aae      	ldrb	r6, [r5, #10]
 801bb94:	1ef3      	subs	r3, r6, #3
 801bb96:	2b01      	cmp	r3, #1
 801bb98:	d903      	bls.n	801bba2 <mbedtls_ssl_handshake_client_step+0xfba>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA ||
 801bb9a:	f1a6 0309 	sub.w	r3, r6, #9
 801bb9e:	2b01      	cmp	r3, #1
 801bba0:	d863      	bhi.n	801bc6a <mbedtls_ssl_handshake_client_step+0x1082>
                                ssl->conf->f_rng, ssl->conf->p_rng );
 801bba2:	6823      	ldr	r3, [r4, #0]
        ret = mbedtls_ecdh_make_public( &ssl->handshake->ecdh_ctx,
 801bba4:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bba8:	69d9      	ldr	r1, [r3, #28]
 801bbaa:	9101      	str	r1, [sp, #4]
 801bbac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bbae:	699b      	ldr	r3, [r3, #24]
 801bbb0:	9300      	str	r3, [sp, #0]
 801bbb2:	3204      	adds	r2, #4
 801bbb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801bbb8:	a910      	add	r1, sp, #64	; 0x40
 801bbba:	3004      	adds	r0, #4
 801bbbc:	f7f5 fa0e 	bl	8010fdc <mbedtls_ecdh_make_public>
        if( ret != 0 )
 801bbc0:	4605      	mov	r5, r0
 801bbc2:	b130      	cbz	r0, 801bbd2 <mbedtls_ssl_handshake_client_step+0xfea>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_make_public", ret );
 801bbc4:	4b90      	ldr	r3, [pc, #576]	; (801be08 <mbedtls_ssl_handshake_client_step+0x1220>)
 801bbc6:	9300      	str	r3, [sp, #0]
 801bbc8:	9001      	str	r0, [sp, #4]
 801bbca:	f640 3336 	movw	r3, #2870	; 0xb36
 801bbce:	f7ff b86a 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_ECP( 3, "ECDH: Q", &ssl->handshake->ecdh_ctx.Q );
 801bbd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bbd4:	4a8a      	ldr	r2, [pc, #552]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bbd6:	338c      	adds	r3, #140	; 0x8c
 801bbd8:	9301      	str	r3, [sp, #4]
 801bbda:	4b8c      	ldr	r3, [pc, #560]	; (801be0c <mbedtls_ssl_handshake_client_step+0x1224>)
 801bbdc:	9300      	str	r3, [sp, #0]
 801bbde:	2103      	movs	r1, #3
 801bbe0:	f640 333a 	movw	r3, #2874	; 0xb3a
 801bbe4:	4620      	mov	r0, r4
 801bbe6:	f7f5 f8bb 	bl	8010d60 <mbedtls_debug_print_ecp>
                                       ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bbea:	6823      	ldr	r3, [r4, #0]
        if( ( ret = mbedtls_ecdh_calc_secret( &ssl->handshake->ecdh_ctx,
 801bbec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801bbee:	69da      	ldr	r2, [r3, #28]
 801bbf0:	9201      	str	r2, [sp, #4]
 801bbf2:	699b      	ldr	r3, [r3, #24]
 801bbf4:	9300      	str	r3, [sp, #0]
 801bbf6:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 801bbfa:	f500 712a 	add.w	r1, r0, #680	; 0x2a8
 801bbfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc02:	3004      	adds	r0, #4
 801bc04:	f7f5 fa10 	bl	8011028 <mbedtls_ecdh_calc_secret>
 801bc08:	4605      	mov	r5, r0
 801bc0a:	b130      	cbz	r0, 801bc1a <mbedtls_ssl_handshake_client_step+0x1032>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ecdh_calc_secret", ret );
 801bc0c:	4b80      	ldr	r3, [pc, #512]	; (801be10 <mbedtls_ssl_handshake_client_step+0x1228>)
 801bc0e:	9300      	str	r3, [sp, #0]
 801bc10:	9001      	str	r0, [sp, #4]
 801bc12:	f640 3342 	movw	r3, #2882	; 0xb42
 801bc16:	f7ff b846 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_MPI( 3, "ECDH: z", &ssl->handshake->ecdh_ctx.z );
 801bc1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bc1c:	4a78      	ldr	r2, [pc, #480]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bc1e:	33d4      	adds	r3, #212	; 0xd4
 801bc20:	9301      	str	r3, [sp, #4]
 801bc22:	4b7c      	ldr	r3, [pc, #496]	; (801be14 <mbedtls_ssl_handshake_client_step+0x122c>)
 801bc24:	9300      	str	r3, [sp, #0]
 801bc26:	2103      	movs	r1, #3
 801bc28:	f640 3346 	movw	r3, #2886	; 0xb46
 801bc2c:	4620      	mov	r0, r4
 801bc2e:	f7f5 f84f 	bl	8010cd0 <mbedtls_debug_print_mpi>
    ssl->out_msglen  = i + n;
 801bc32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bc34:	3304      	adds	r3, #4
 801bc36:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bc3a:	2316      	movs	r3, #22
 801bc3c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE;
 801bc40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bc44:	2210      	movs	r2, #16
 801bc46:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801bc48:	6863      	ldr	r3, [r4, #4]
 801bc4a:	3301      	adds	r3, #1
 801bc4c:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bc4e:	4620      	mov	r0, r4
 801bc50:	f001 f89a 	bl	801cd88 <mbedtls_ssl_write_record>
 801bc54:	4605      	mov	r5, r0
 801bc56:	2800      	cmp	r0, #0
 801bc58:	f000 8083 	beq.w	801bd62 <mbedtls_ssl_handshake_client_step+0x117a>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801bc5c:	4b6e      	ldr	r3, [pc, #440]	; (801be18 <mbedtls_ssl_handshake_client_step+0x1230>)
 801bc5e:	9300      	str	r3, [sp, #0]
 801bc60:	9001      	str	r0, [sp, #4]
 801bc62:	f640 33e7 	movw	r3, #3047	; 0xbe7
 801bc66:	f7ff b81e 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_RSA )
 801bc6a:	2e01      	cmp	r6, #1
 801bc6c:	d174      	bne.n	801bd58 <mbedtls_ssl_handshake_client_step+0x1170>
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bc6e:	6820      	ldr	r0, [r4, #0]
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801bc70:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bc72:	6963      	ldr	r3, [r4, #20]
                       ssl->conf->transport, p );
 801bc74:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bc78:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
 801bc7c:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    unsigned char *p = ssl->handshake->premaster + pms_offset;
 801bc80:	f505 783b 	add.w	r8, r5, #748	; 0x2ec
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bc84:	2b00      	cmp	r3, #0
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bc86:	f3c2 0240 	ubfx	r2, r2, #1, #1
 801bc8a:	4643      	mov	r3, r8
    size_t len_bytes = ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ? 0 : 2;
 801bc8c:	bf0c      	ite	eq
 801bc8e:	2700      	moveq	r7, #0
 801bc90:	2702      	movne	r7, #2
    mbedtls_ssl_write_version( ssl->conf->max_major_ver, ssl->conf->max_minor_ver,
 801bc92:	f003 fb5f 	bl	801f354 <mbedtls_ssl_write_version>
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801bc96:	6823      	ldr	r3, [r4, #0]
 801bc98:	f205 21ee 	addw	r1, r5, #750	; 0x2ee
 801bc9c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801bca0:	69d8      	ldr	r0, [r3, #28]
 801bca2:	222e      	movs	r2, #46	; 0x2e
 801bca4:	47d0      	blx	sl
    if( offset + len_bytes > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801bca6:	f107 0904 	add.w	r9, r7, #4
    if( ( ret = ssl->conf->f_rng( ssl->conf->p_rng, p + 2, 46 ) ) != 0 )
 801bcaa:	4605      	mov	r5, r0
 801bcac:	b130      	cbz	r0, 801bcbc <mbedtls_ssl_handshake_client_step+0x10d4>
        MBEDTLS_SSL_DEBUG_RET( 1, "f_rng", ret );
 801bcae:	4b5b      	ldr	r3, [pc, #364]	; (801be1c <mbedtls_ssl_handshake_client_step+0x1234>)
 801bcb0:	9300      	str	r3, [sp, #0]
 801bcb2:	9001      	str	r0, [sp, #4]
 801bcb4:	f640 0339 	movw	r3, #2105	; 0x839
 801bcb8:	f7fe bff5 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    ssl->handshake->pmslen = 48;
 801bcbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bcbe:	2230      	movs	r2, #48	; 0x30
 801bcc0:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
    if( ssl->session_negotiate->peer_cert == NULL )
 801bcc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bcc6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801bcc8:	b938      	cbnz	r0, 801bcda <mbedtls_ssl_handshake_client_step+0x10f2>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "certificate required" ) );
 801bcca:	4b55      	ldr	r3, [pc, #340]	; (801be20 <mbedtls_ssl_handshake_client_step+0x1238>)
 801bccc:	9300      	str	r3, [sp, #0]
 801bcce:	4a4c      	ldr	r2, [pc, #304]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
 801bcd0:	f640 0341 	movw	r3, #2113	; 0x841
 801bcd4:	2102      	movs	r1, #2
 801bcd6:	f7ff b800 	b.w	801acda <mbedtls_ssl_handshake_client_step+0xf2>
    if( ! mbedtls_pk_can_do( &ssl->session_negotiate->peer_cert->pk,
 801bcda:	4631      	mov	r1, r6
 801bcdc:	30bc      	adds	r0, #188	; 0xbc
 801bcde:	f7f9 fefb 	bl	8015ad8 <mbedtls_pk_can_do>
 801bce2:	b958      	cbnz	r0, 801bcfc <mbedtls_ssl_handshake_client_step+0x1114>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801bce4:	4b4f      	ldr	r3, [pc, #316]	; (801be24 <mbedtls_ssl_handshake_client_step+0x123c>)
 801bce6:	9300      	str	r3, [sp, #0]
 801bce8:	4a45      	ldr	r2, [pc, #276]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801bcea:	4d4f      	ldr	r5, [pc, #316]	; (801be28 <mbedtls_ssl_handshake_client_step+0x1240>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate key type mismatch" ) );
 801bcec:	f640 034b 	movw	r3, #2123	; 0x84b
 801bcf0:	4631      	mov	r1, r6
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	f7f4 feea 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH );
 801bcf8:	f7fe bfb6 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bcfc:	e9d4 010d 	ldrd	r0, r1, [r4, #52]	; 0x34
                            ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801bd00:	6822      	ldr	r2, [r4, #0]
    if( ( ret = mbedtls_pk_encrypt( &ssl->session_negotiate->peer_cert->pk,
 801bd02:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801bd04:	69d5      	ldr	r5, [r2, #28]
 801bd06:	9503      	str	r5, [sp, #12]
 801bd08:	6992      	ldr	r2, [r2, #24]
 801bd0a:	9202      	str	r2, [sp, #8]
 801bd0c:	f5c9 529c 	rsb	r2, r9, #4992	; 0x1380
 801bd10:	3208      	adds	r2, #8
 801bd12:	9201      	str	r2, [sp, #4]
 801bd14:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bd18:	aa10      	add	r2, sp, #64	; 0x40
 801bd1a:	9200      	str	r2, [sp, #0]
 801bd1c:	f8d1 22a8 	ldr.w	r2, [r1, #680]	; 0x2a8
 801bd20:	444b      	add	r3, r9
 801bd22:	4641      	mov	r1, r8
 801bd24:	30bc      	adds	r0, #188	; 0xbc
 801bd26:	f7f9 ff3b 	bl	8015ba0 <mbedtls_pk_encrypt>
 801bd2a:	4605      	mov	r5, r0
 801bd2c:	b130      	cbz	r0, 801bd3c <mbedtls_ssl_handshake_client_step+0x1154>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_rsa_pkcs1_encrypt", ret );
 801bd2e:	4b3f      	ldr	r3, [pc, #252]	; (801be2c <mbedtls_ssl_handshake_client_step+0x1244>)
 801bd30:	9300      	str	r3, [sp, #0]
 801bd32:	9001      	str	r0, [sp, #4]
 801bd34:	f640 0355 	movw	r3, #2133	; 0x855
 801bd38:	f7fe bfb5 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    if( len_bytes == 2 )
 801bd3c:	2f00      	cmp	r7, #0
 801bd3e:	f43f af78 	beq.w	801bc32 <mbedtls_ssl_handshake_client_step+0x104a>
 801bd42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd44:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
        ssl->out_msg[offset+0] = (unsigned char)( *olen >> 8 );
 801bd48:	0a19      	lsrs	r1, r3, #8
 801bd4a:	7111      	strb	r1, [r2, #4]
        ssl->out_msg[offset+1] = (unsigned char)( *olen      );
 801bd4c:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bd50:	7153      	strb	r3, [r2, #5]
        *olen += 2;
 801bd52:	3302      	adds	r3, #2
 801bd54:	9310      	str	r3, [sp, #64]	; 0x40
 801bd56:	e76c      	b.n	801bc32 <mbedtls_ssl_handshake_client_step+0x104a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bd58:	4b35      	ldr	r3, [pc, #212]	; (801be30 <mbedtls_ssl_handshake_client_step+0x1248>)
 801bd5a:	9300      	str	r3, [sp, #0]
 801bd5c:	f640 33db 	movw	r3, #3035	; 0xbdb
 801bd60:	e4bc      	b.n	801b6dc <mbedtls_ssl_handshake_client_step+0xaf4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write client key exchange" ) );
 801bd62:	4b34      	ldr	r3, [pc, #208]	; (801be34 <mbedtls_ssl_handshake_client_step+0x124c>)
 801bd64:	9300      	str	r3, [sp, #0]
 801bd66:	f640 33eb 	movw	r3, #3051	; 0xbeb
 801bd6a:	f7ff bb8f 	b.w	801b48c <mbedtls_ssl_handshake_client_step+0x8a4>
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bd6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801bd70:	4a23      	ldr	r2, [pc, #140]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info =
 801bd72:	681e      	ldr	r6, [r3, #0]
    size_t n = 0, offset = 0;
 801bd74:	2300      	movs	r3, #0
 801bd76:	930d      	str	r3, [sp, #52]	; 0x34
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate verify" ) );
 801bd78:	4b2f      	ldr	r3, [pc, #188]	; (801be38 <mbedtls_ssl_handshake_client_step+0x1250>)
 801bd7a:	9300      	str	r3, [sp, #0]
 801bd7c:	2102      	movs	r1, #2
 801bd7e:	f640 431e 	movw	r3, #3102	; 0xc1e
 801bd82:	4620      	mov	r0, r4
 801bd84:	f7f4 fea2 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_derive_keys( ssl ) ) != 0 )
 801bd88:	4620      	mov	r0, r4
 801bd8a:	f000 fc25 	bl	801c5d8 <mbedtls_ssl_derive_keys>
 801bd8e:	4605      	mov	r5, r0
 801bd90:	b130      	cbz	r0, 801bda0 <mbedtls_ssl_handshake_client_step+0x11b8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_derive_keys", ret );
 801bd92:	4b2a      	ldr	r3, [pc, #168]	; (801be3c <mbedtls_ssl_handshake_client_step+0x1254>)
 801bd94:	9300      	str	r3, [sp, #0]
 801bd96:	9001      	str	r0, [sp, #4]
 801bd98:	f640 4322 	movw	r3, #3106	; 0xc22
 801bd9c:	f7fe bf83 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801bda0:	7ab3      	ldrb	r3, [r6, #10]
 801bda2:	1f5a      	subs	r2, r3, #5
 801bda4:	2a03      	cmp	r2, #3
 801bda6:	d901      	bls.n	801bdac <mbedtls_ssl_handshake_client_step+0x11c4>
        ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_DHE_PSK ||
 801bda8:	2b0b      	cmp	r3, #11
 801bdaa:	d105      	bne.n	801bdb8 <mbedtls_ssl_handshake_client_step+0x11d0>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801bdac:	4b24      	ldr	r3, [pc, #144]	; (801be40 <mbedtls_ssl_handshake_client_step+0x1258>)
 801bdae:	9300      	str	r3, [sp, #0]
 801bdb0:	f640 432c 	movw	r3, #3116	; 0xc2c
 801bdb4:	f7ff bb8c 	b.w	801b4d0 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( ssl->client_auth == 0 || mbedtls_ssl_own_cert( ssl ) == NULL )
 801bdb8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 801bdbc:	b14b      	cbz	r3, 801bdd2 <mbedtls_ssl_handshake_client_step+0x11ea>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801bdbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bdc0:	b111      	cbz	r1, 801bdc8 <mbedtls_ssl_handshake_client_step+0x11e0>
 801bdc2:	f8d1 313c 	ldr.w	r3, [r1, #316]	; 0x13c
 801bdc6:	b913      	cbnz	r3, 801bdce <mbedtls_ssl_handshake_client_step+0x11e6>
        key_cert = ssl->conf->key_cert;
 801bdc8:	6823      	ldr	r3, [r4, #0]
 801bdca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801bdcc:	b10b      	cbz	r3, 801bdd2 <mbedtls_ssl_handshake_client_step+0x11ea>
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	b92b      	cbnz	r3, 801bdde <mbedtls_ssl_handshake_client_step+0x11f6>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate verify" ) );
 801bdd2:	4b1b      	ldr	r3, [pc, #108]	; (801be40 <mbedtls_ssl_handshake_client_step+0x1258>)
 801bdd4:	9300      	str	r3, [sp, #0]
 801bdd6:	f640 4333 	movw	r3, #3123	; 0xc33
 801bdda:	f7ff bb79 	b.w	801b4d0 <mbedtls_ssl_handshake_client_step+0x8e8>
    if( mbedtls_ssl_own_key( ssl ) == NULL )
 801bdde:	4620      	mov	r0, r4
 801bde0:	f7fe fa2f 	bl	801a242 <mbedtls_ssl_own_key>
 801bde4:	bb90      	cbnz	r0, 801be4c <mbedtls_ssl_handshake_client_step+0x1264>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801bde6:	4b17      	ldr	r3, [pc, #92]	; (801be44 <mbedtls_ssl_handshake_client_step+0x125c>)
 801bde8:	9300      	str	r3, [sp, #0]
 801bdea:	4a05      	ldr	r2, [pc, #20]	; (801be00 <mbedtls_ssl_handshake_client_step+0x1218>)
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801bdec:	4d16      	ldr	r5, [pc, #88]	; (801be48 <mbedtls_ssl_handshake_client_step+0x1260>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no private key for certificate" ) );
 801bdee:	f640 433a 	movw	r3, #3130	; 0xc3a
 801bdf2:	2101      	movs	r1, #1
 801bdf4:	4620      	mov	r0, r4
 801bdf6:	f7f4 fe69 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED );
 801bdfa:	f7fe bf35 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
 801bdfe:	bf00      	nop
 801be00:	08030ef4 	.word	0x08030ef4
 801be04:	08031cbc 	.word	0x08031cbc
 801be08:	08031cd9 	.word	0x08031cd9
 801be0c:	08031cf2 	.word	0x08031cf2
 801be10:	08031cfa 	.word	0x08031cfa
 801be14:	08031d13 	.word	0x08031d13
 801be18:	0803137d 	.word	0x0803137d
 801be1c:	08031d1b 	.word	0x08031d1b
 801be20:	08031b62 	.word	0x08031b62
 801be24:	08031d21 	.word	0x08031d21
 801be28:	ffff9300 	.word	0xffff9300
 801be2c:	08031d3f 	.word	0x08031d3f
 801be30:	08031a15 	.word	0x08031a15
 801be34:	08031d59 	.word	0x08031d59
 801be38:	08031d76 	.word	0x08031d76
 801be3c:	0803157c 	.word	0x0803157c
 801be40:	08031d92 	.word	0x08031d92
 801be44:	08031db3 	.word	0x08031db3
 801be48:	ffff8a00 	.word	0xffff8a00
    ssl->handshake->calc_verify( ssl, hash );
 801be4c:	f8d1 329c 	ldr.w	r3, [r1, #668]	; 0x29c
 801be50:	4620      	mov	r0, r4
 801be52:	a910      	add	r1, sp, #64	; 0x40
 801be54:	4798      	blx	r3
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801be56:	6963      	ldr	r3, [r4, #20]
 801be58:	2b03      	cmp	r3, #3
 801be5a:	d130      	bne.n	801bebe <mbedtls_ssl_handshake_client_step+0x12d6>
        if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801be5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	7a5d      	ldrb	r5, [r3, #9]
 801be62:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801be66:	2d07      	cmp	r5, #7
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801be68:	bf0b      	itete	eq
 801be6a:	2205      	moveq	r2, #5
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801be6c:	2204      	movne	r2, #4
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA384;
 801be6e:	711a      	strbeq	r2, [r3, #4]
            ssl->out_msg[4] = MBEDTLS_SSL_HASH_SHA256;
 801be70:	711a      	strbne	r2, [r3, #4]
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801be72:	4620      	mov	r0, r4
            md_alg = MBEDTLS_MD_SHA256;
 801be74:	bf18      	it	ne
 801be76:	2506      	movne	r5, #6
        ssl->out_msg[5] = mbedtls_ssl_sig_from_pk( mbedtls_ssl_own_key( ssl ) );
 801be78:	f7fe f9e3 	bl	801a242 <mbedtls_ssl_own_key>
 801be7c:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 801be80:	f002 ffc4 	bl	801ee0c <mbedtls_ssl_sig_from_pk>
 801be84:	7170      	strb	r0, [r6, #5]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801be86:	4620      	mov	r0, r4
 801be88:	f7fe f9db 	bl	801a242 <mbedtls_ssl_own_key>
                         ssl->conf->f_rng, ssl->conf->p_rng ) ) != 0 )
 801be8c:	6823      	ldr	r3, [r4, #0]
    if( ( ret = mbedtls_pk_sign( mbedtls_ssl_own_key( ssl ), md_alg, hash_start, hashlen,
 801be8e:	69da      	ldr	r2, [r3, #28]
 801be90:	9203      	str	r2, [sp, #12]
 801be92:	699b      	ldr	r3, [r3, #24]
 801be94:	9302      	str	r3, [sp, #8]
 801be96:	ab0d      	add	r3, sp, #52	; 0x34
 801be98:	9301      	str	r3, [sp, #4]
 801be9a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801be9e:	3308      	adds	r3, #8
 801bea0:	9300      	str	r3, [sp, #0]
 801bea2:	4629      	mov	r1, r5
 801bea4:	2300      	movs	r3, #0
 801bea6:	aa10      	add	r2, sp, #64	; 0x40
 801bea8:	f7f9 fe4a 	bl	8015b40 <mbedtls_pk_sign>
 801beac:	4605      	mov	r5, r0
 801beae:	b158      	cbz	r0, 801bec8 <mbedtls_ssl_handshake_client_step+0x12e0>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_pk_sign", ret );
 801beb0:	4b83      	ldr	r3, [pc, #524]	; (801c0c0 <mbedtls_ssl_handshake_client_step+0x14d8>)
 801beb2:	9300      	str	r3, [sp, #0]
 801beb4:	9001      	str	r0, [sp, #4]
 801beb6:	f640 4391 	movw	r3, #3217	; 0xc91
 801beba:	f7fe bef4 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801bebe:	4b81      	ldr	r3, [pc, #516]	; (801c0c4 <mbedtls_ssl_handshake_client_step+0x14dc>)
 801bec0:	9300      	str	r3, [sp, #0]
 801bec2:	f640 4389 	movw	r3, #3209	; 0xc89
 801bec6:	e409      	b.n	801b6dc <mbedtls_ssl_handshake_client_step+0xaf4>
    ssl->out_msg[4 + offset] = (unsigned char)( n >> 8 );
 801bec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801beca:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bece:	0a19      	lsrs	r1, r3, #8
 801bed0:	7191      	strb	r1, [r2, #6]
    ssl->out_msg[5 + offset] = (unsigned char)( n      );
 801bed2:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801bed6:	71d3      	strb	r3, [r2, #7]
    ssl->out_msglen  = 6 + n + offset;
 801bed8:	3308      	adds	r3, #8
 801beda:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801bede:	2316      	movs	r3, #22
 801bee0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE_VERIFY;
 801bee4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801bee8:	220f      	movs	r2, #15
 801beea:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801beec:	6863      	ldr	r3, [r4, #4]
 801beee:	3301      	adds	r3, #1
 801bef0:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801bef2:	4620      	mov	r0, r4
 801bef4:	f000 ff48 	bl	801cd88 <mbedtls_ssl_write_record>
 801bef8:	4605      	mov	r5, r0
 801befa:	b130      	cbz	r0, 801bf0a <mbedtls_ssl_handshake_client_step+0x1322>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801befc:	4b72      	ldr	r3, [pc, #456]	; (801c0c8 <mbedtls_ssl_handshake_client_step+0x14e0>)
 801befe:	9300      	str	r3, [sp, #0]
 801bf00:	9001      	str	r0, [sp, #4]
 801bf02:	f44f 634a 	mov.w	r3, #3232	; 0xca0
 801bf06:	f7fe bece 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate verify" ) );
 801bf0a:	4b70      	ldr	r3, [pc, #448]	; (801c0cc <mbedtls_ssl_handshake_client_step+0x14e4>)
 801bf0c:	9300      	str	r3, [sp, #0]
 801bf0e:	f640 43a4 	movw	r3, #3236	; 0xca4
 801bf12:	f7ff babb 	b.w	801b48c <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_write_change_cipher_spec( ssl );
 801bf16:	4620      	mov	r0, r4
 801bf18:	f001 ffa4 	bl	801de64 <mbedtls_ssl_write_change_cipher_spec>
 801bf1c:	f7fe bead 	b.w	801ac7a <mbedtls_ssl_handshake_client_step+0x92>
           ret = mbedtls_ssl_write_finished( ssl );
 801bf20:	4620      	mov	r0, r4
 801bf22:	f002 f863 	bl	801dfec <mbedtls_ssl_write_finished>
 801bf26:	f7fe bea8 	b.w	801ac7a <mbedtls_ssl_handshake_client_step+0x92>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse new session ticket" ) );
 801bf2a:	4b69      	ldr	r3, [pc, #420]	; (801c0d0 <mbedtls_ssl_handshake_client_step+0x14e8>)
 801bf2c:	4a69      	ldr	r2, [pc, #420]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bf2e:	9300      	str	r3, [sp, #0]
 801bf30:	2102      	movs	r1, #2
 801bf32:	f640 43b8 	movw	r3, #3256	; 0xcb8
 801bf36:	4620      	mov	r0, r4
 801bf38:	f7f4 fdc8 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801bf3c:	4620      	mov	r0, r4
 801bf3e:	f001 fe71 	bl	801dc24 <mbedtls_ssl_read_record>
 801bf42:	4605      	mov	r5, r0
 801bf44:	b130      	cbz	r0, 801bf54 <mbedtls_ssl_handshake_client_step+0x136c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801bf46:	4b64      	ldr	r3, [pc, #400]	; (801c0d8 <mbedtls_ssl_handshake_client_step+0x14f0>)
 801bf48:	9300      	str	r3, [sp, #0]
 801bf4a:	9001      	str	r0, [sp, #4]
 801bf4c:	f640 43bc 	movw	r3, #3260	; 0xcbc
 801bf50:	f7fe bea9 	b.w	801aca6 <mbedtls_ssl_handshake_client_step+0xbe>
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801bf54:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bf56:	2b16      	cmp	r3, #22
 801bf58:	d005      	beq.n	801bf66 <mbedtls_ssl_handshake_client_step+0x137e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bf5a:	4b60      	ldr	r3, [pc, #384]	; (801c0dc <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bf5c:	9300      	str	r3, [sp, #0]
 801bf5e:	f640 43c2 	movw	r3, #3266	; 0xcc2
 801bf62:	f7fe bed0 	b.w	801ad06 <mbedtls_ssl_handshake_client_step+0x11e>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801bf66:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 801bf6a:	f898 3000 	ldrb.w	r3, [r8]
 801bf6e:	2b04      	cmp	r3, #4
 801bf70:	d103      	bne.n	801bf7a <mbedtls_ssl_handshake_client_step+0x1392>
        ssl->in_hslen < 6 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801bf72:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_NEW_SESSION_TICKET ||
 801bf76:	2b09      	cmp	r3, #9
 801bf78:	d810      	bhi.n	801bf9c <mbedtls_ssl_handshake_client_step+0x13b4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bf7a:	4b58      	ldr	r3, [pc, #352]	; (801c0dc <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bf7c:	9300      	str	r3, [sp, #0]
 801bf7e:	f640 43d5 	movw	r3, #3285	; 0xcd5
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bf82:	4a54      	ldr	r2, [pc, #336]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801bf84:	4d56      	ldr	r5, [pc, #344]	; (801c0e0 <mbedtls_ssl_handshake_client_step+0x14f8>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bf86:	2101      	movs	r1, #1
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f7f4 fd9f 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801bf8e:	2232      	movs	r2, #50	; 0x32
 801bf90:	2102      	movs	r1, #2
 801bf92:	4620      	mov	r0, r4
 801bf94:	f001 fa30 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET );
 801bf98:	f7fe be66 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    lifetime = ( msg[0] << 24 ) | ( msg[1] << 16 ) |
 801bf9c:	f8b8 6008 	ldrh.w	r6, [r8, #8]
 801bfa0:	f8d8 9004 	ldr.w	r9, [r8, #4]
    ticket_len = ( msg[4] << 8 ) | ( msg[5] );
 801bfa4:	ba76      	rev16	r6, r6
 801bfa6:	b2b6      	uxth	r6, r6
    if( ticket_len + 6 + mbedtls_ssl_hs_hdr_len( ssl ) != ssl->in_hslen )
 801bfa8:	f106 020a 	add.w	r2, r6, #10
 801bfac:	4293      	cmp	r3, r2
 801bfae:	d004      	beq.n	801bfba <mbedtls_ssl_handshake_client_step+0x13d2>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad new session ticket message" ) );
 801bfb0:	4b4a      	ldr	r3, [pc, #296]	; (801c0dc <mbedtls_ssl_handshake_client_step+0x14f4>)
 801bfb2:	9300      	str	r3, [sp, #0]
 801bfb4:	f640 43e4 	movw	r3, #3300	; 0xce4
 801bfb8:	e7e3      	b.n	801bf82 <mbedtls_ssl_handshake_client_step+0x139a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket length: %d", ticket_len ) );
 801bfba:	4b4a      	ldr	r3, [pc, #296]	; (801c0e4 <mbedtls_ssl_handshake_client_step+0x14fc>)
 801bfbc:	9300      	str	r3, [sp, #0]
 801bfbe:	4a45      	ldr	r2, [pc, #276]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801bfc0:	9601      	str	r6, [sp, #4]
 801bfc2:	f640 43ea 	movw	r3, #3306	; 0xcea
 801bfc6:	2103      	movs	r1, #3
 801bfc8:	4620      	mov	r0, r4
 801bfca:	f7f4 fd7f 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->handshake->new_session_ticket = 0;
 801bfce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bfd0:	f8c3 5340 	str.w	r5, [r3, #832]	; 0x340
    ssl->state = MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC;
 801bfd4:	230c      	movs	r3, #12
 801bfd6:	6063      	str	r3, [r4, #4]
    if( ticket_len == 0 )
 801bfd8:	2e00      	cmp	r6, #0
 801bfda:	f43e ae45 	beq.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    mbedtls_zeroize( ssl->session_negotiate->ticket,
 801bfde:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bfe0:	e9d2 321b 	ldrd	r3, r2, [r2, #108]	; 0x6c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801bfe4:	4629      	mov	r1, r5
 801bfe6:	441a      	add	r2, r3
 801bfe8:	4293      	cmp	r3, r2
 801bfea:	d121      	bne.n	801c030 <mbedtls_ssl_handshake_client_step+0x1448>
    mbedtls_free( ssl->session_negotiate->ticket );
 801bfec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bfee:	4b3e      	ldr	r3, [pc, #248]	; (801c0e8 <mbedtls_ssl_handshake_client_step+0x1500>)
 801bff0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	4798      	blx	r3
    ssl->session_negotiate->ticket = NULL;
 801bff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bff8:	f04f 0a00 	mov.w	sl, #0
    ssl->session_negotiate->ticket_len = 0;
 801bffc:	e9c3 aa1b 	strd	sl, sl, [r3, #108]	; 0x6c
    if( ( ticket = mbedtls_calloc( 1, ticket_len ) ) == NULL )
 801c000:	4b3a      	ldr	r3, [pc, #232]	; (801c0ec <mbedtls_ssl_handshake_client_step+0x1504>)
 801c002:	4631      	mov	r1, r6
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	2001      	movs	r0, #1
 801c008:	4798      	blx	r3
 801c00a:	4607      	mov	r7, r0
 801c00c:	b998      	cbnz	r0, 801c036 <mbedtls_ssl_handshake_client_step+0x144e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "ticket alloc failed" ) );
 801c00e:	4b38      	ldr	r3, [pc, #224]	; (801c0f0 <mbedtls_ssl_handshake_client_step+0x1508>)
 801c010:	4a30      	ldr	r2, [pc, #192]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c012:	9300      	str	r3, [sp, #0]
 801c014:	2101      	movs	r1, #1
 801c016:	f640 43ff 	movw	r3, #3327	; 0xcff
 801c01a:	4620      	mov	r0, r4
 801c01c:	f7f4 fd56 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801c020:	2250      	movs	r2, #80	; 0x50
 801c022:	2102      	movs	r1, #2
 801c024:	4620      	mov	r0, r4
 801c026:	f001 f9e7 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801c02a:	4d32      	ldr	r5, [pc, #200]	; (801c0f4 <mbedtls_ssl_handshake_client_step+0x150c>)
 801c02c:	f7fe be1c 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c030:	f803 1b01 	strb.w	r1, [r3], #1
 801c034:	e7d8      	b.n	801bfe8 <mbedtls_ssl_handshake_client_step+0x1400>
    memcpy( ticket, msg + 6, ticket_len );
 801c036:	4632      	mov	r2, r6
 801c038:	f108 010a 	add.w	r1, r8, #10
 801c03c:	f006 f9d4 	bl	80223e8 <memcpy>
    ssl->session_negotiate->ticket = ticket;
 801c040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c042:	fa99 f289 	rev.w	r2, r9
    ssl->session_negotiate->ticket_lifetime = lifetime;
 801c046:	675a      	str	r2, [r3, #116]	; 0x74
    ssl->session_negotiate->ticket_len = ticket_len;
 801c048:	e9c3 761b 	strd	r7, r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ticket in use, discarding session id" ) );
 801c04c:	4b2a      	ldr	r3, [pc, #168]	; (801c0f8 <mbedtls_ssl_handshake_client_step+0x1510>)
 801c04e:	9300      	str	r3, [sp, #0]
 801c050:	4a20      	ldr	r2, [pc, #128]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c052:	f44f 6351 	mov.w	r3, #3344	; 0xd10
 801c056:	2103      	movs	r1, #3
 801c058:	4620      	mov	r0, r4
 801c05a:	f7f4 fd37 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->session_negotiate->id_len = 0;
 801c05e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c060:	f8c3 a010 	str.w	sl, [r3, #16]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse new session ticket" ) );
 801c064:	4b25      	ldr	r3, [pc, #148]	; (801c0fc <mbedtls_ssl_handshake_client_step+0x1514>)
 801c066:	9300      	str	r3, [sp, #0]
 801c068:	f640 5313 	movw	r3, #3347	; 0xd13
 801c06c:	f7ff ba0e 	b.w	801b48c <mbedtls_ssl_handshake_client_step+0x8a4>
           ret = mbedtls_ssl_parse_change_cipher_spec( ssl );
 801c070:	4620      	mov	r0, r4
 801c072:	f001 ff2f 	bl	801ded4 <mbedtls_ssl_parse_change_cipher_spec>
 801c076:	f7fe be00 	b.w	801ac7a <mbedtls_ssl_handshake_client_step+0x92>
           ret = mbedtls_ssl_parse_finished( ssl );
 801c07a:	4620      	mov	r0, r4
 801c07c:	f002 f834 	bl	801e0e8 <mbedtls_ssl_parse_finished>
 801c080:	f7fe bdfb 	b.w	801ac7a <mbedtls_ssl_handshake_client_step+0x92>
           MBEDTLS_SSL_DEBUG_MSG( 2, ( "handshake: done" ) );
 801c084:	4b1e      	ldr	r3, [pc, #120]	; (801c100 <mbedtls_ssl_handshake_client_step+0x1518>)
 801c086:	9300      	str	r3, [sp, #0]
 801c088:	4a12      	ldr	r2, [pc, #72]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c08a:	f640 5392 	movw	r3, #3474	; 0xd92
 801c08e:	2102      	movs	r1, #2
 801c090:	4620      	mov	r0, r4
 801c092:	f7f4 fd1b 	bl	8010acc <mbedtls_debug_print_msg>
           ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801c096:	230f      	movs	r3, #15
 801c098:	f7ff ba21 	b.w	801b4de <mbedtls_ssl_handshake_client_step+0x8f6>
           mbedtls_ssl_handshake_wrapup( ssl );
 801c09c:	4620      	mov	r0, r4
 801c09e:	f002 fa25 	bl	801e4ec <mbedtls_ssl_handshake_wrapup>
           break;
 801c0a2:	f7fe bde1 	b.w	801ac68 <mbedtls_ssl_handshake_client_step+0x80>
           MBEDTLS_SSL_DEBUG_MSG( 1, ( "invalid state %d", ssl->state ) );
 801c0a6:	9301      	str	r3, [sp, #4]
 801c0a8:	4b16      	ldr	r3, [pc, #88]	; (801c104 <mbedtls_ssl_handshake_client_step+0x151c>)
 801c0aa:	9300      	str	r3, [sp, #0]
 801c0ac:	4a09      	ldr	r2, [pc, #36]	; (801c0d4 <mbedtls_ssl_handshake_client_step+0x14ec>)
 801c0ae:	f640 539b 	movw	r3, #3483	; 0xd9b
 801c0b2:	2101      	movs	r1, #1
 801c0b4:	4620      	mov	r0, r4
 801c0b6:	f7f4 fd09 	bl	8010acc <mbedtls_debug_print_msg>
           return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c0ba:	f7fe bf3f 	b.w	801af3c <mbedtls_ssl_handshake_client_step+0x354>
 801c0be:	bf00      	nop
 801c0c0:	08031dd6 	.word	0x08031dd6
 801c0c4:	08031a15 	.word	0x08031a15
 801c0c8:	0803137d 	.word	0x0803137d
 801c0cc:	08031de6 	.word	0x08031de6
 801c0d0:	08031e02 	.word	0x08031e02
 801c0d4:	08030ef4 	.word	0x08030ef4
 801c0d8:	080313d6 	.word	0x080313d6
 801c0dc:	08031e1e 	.word	0x08031e1e
 801c0e0:	ffff9200 	.word	0xffff9200
 801c0e4:	08031e3d 	.word	0x08031e3d
 801c0e8:	200005a4 	.word	0x200005a4
 801c0ec:	200005a0 	.word	0x200005a0
 801c0f0:	08031e4f 	.word	0x08031e4f
 801c0f4:	ffff8100 	.word	0xffff8100
 801c0f8:	08031e63 	.word	0x08031e63
 801c0fc:	08031e88 	.word	0x08031e88
 801c100:	08031ea4 	.word	0x08031ea4
 801c104:	08031eb4 	.word	0x08031eb4

0801c108 <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c108:	4401      	add	r1, r0
 801c10a:	2300      	movs	r3, #0
 801c10c:	4288      	cmp	r0, r1
 801c10e:	d100      	bne.n	801c112 <mbedtls_zeroize+0xa>
}
 801c110:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801c112:	f800 3b01 	strb.w	r3, [r0], #1
 801c116:	e7f9      	b.n	801c10c <mbedtls_zeroize+0x4>

0801c118 <ssl_append_key_cert>:
                                mbedtls_x509_crt *cert,
                                mbedtls_pk_context *key )
{
    mbedtls_ssl_key_cert *new;

    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c118:	4b0d      	ldr	r3, [pc, #52]	; (801c150 <ssl_append_key_cert+0x38>)
{
 801c11a:	b570      	push	{r4, r5, r6, lr}
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c11c:	681b      	ldr	r3, [r3, #0]
{
 801c11e:	4604      	mov	r4, r0
 801c120:	460e      	mov	r6, r1
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c122:	2001      	movs	r0, #1
 801c124:	210c      	movs	r1, #12
{
 801c126:	4615      	mov	r5, r2
    new = mbedtls_calloc( 1, sizeof( mbedtls_ssl_key_cert ) );
 801c128:	4798      	blx	r3
    if( new == NULL )
 801c12a:	b170      	cbz	r0, 801c14a <ssl_append_key_cert+0x32>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    new->cert = cert;
    new->key  = key;
    new->next = NULL;
 801c12c:	2300      	movs	r3, #0
 801c12e:	6083      	str	r3, [r0, #8]

    /* Update head is the list was null, else add to the end */
    if( *head == NULL )
 801c130:	6823      	ldr	r3, [r4, #0]
    new->key  = key;
 801c132:	e9c0 6500 	strd	r6, r5, [r0]
    if( *head == NULL )
 801c136:	b913      	cbnz	r3, 801c13e <ssl_append_key_cert+0x26>
    {
        *head = new;
 801c138:	6020      	str	r0, [r4, #0]
        while( cur->next != NULL )
            cur = cur->next;
        cur->next = new;
    }

    return( 0 );
 801c13a:	4618      	mov	r0, r3
}
 801c13c:	bd70      	pop	{r4, r5, r6, pc}
        while( cur->next != NULL )
 801c13e:	461a      	mov	r2, r3
 801c140:	689b      	ldr	r3, [r3, #8]
 801c142:	2b00      	cmp	r3, #0
 801c144:	d1fb      	bne.n	801c13e <ssl_append_key_cert+0x26>
        cur->next = new;
 801c146:	6090      	str	r0, [r2, #8]
 801c148:	e7f7      	b.n	801c13a <ssl_append_key_cert+0x22>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801c14a:	4802      	ldr	r0, [pc, #8]	; (801c154 <ssl_append_key_cert+0x3c>)
 801c14c:	e7f6      	b.n	801c13c <ssl_append_key_cert+0x24>
 801c14e:	bf00      	nop
 801c150:	200005a0 	.word	0x200005a0
 801c154:	ffff8100 	.word	0xffff8100

0801c158 <ssl_calc_finished_tls_sha256>:
{
 801c158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c15c:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 801c15e:	b0ab      	sub	sp, #172	; 0xac
 801c160:	4604      	mov	r4, r0
 801c162:	460d      	mov	r5, r1
 801c164:	4690      	mov	r8, r2
    if( !session )
 801c166:	b907      	cbnz	r7, 801c16a <ssl_calc_finished_tls_sha256+0x12>
        session = ssl->session;
 801c168:	6b07      	ldr	r7, [r0, #48]	; 0x30
    mbedtls_sha256_init( &sha256 );
 801c16a:	a80f      	add	r0, sp, #60	; 0x3c
 801c16c:	f7fc fbfb 	bl	8018966 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha256" ) );
 801c170:	4b29      	ldr	r3, [pc, #164]	; (801c218 <ssl_calc_finished_tls_sha256+0xc0>)
 801c172:	4a2a      	ldr	r2, [pc, #168]	; (801c21c <ssl_calc_finished_tls_sha256+0xc4>)
 801c174:	9300      	str	r3, [sp, #0]
 801c176:	4620      	mov	r0, r4
 801c178:	f241 33c2 	movw	r3, #5058	; 0x13c2
 801c17c:	2102      	movs	r1, #2
 801c17e:	f7f4 fca5 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c182:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c184:	a80f      	add	r0, sp, #60	; 0x3c
 801c186:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c18a:	f7fc fbfa 	bl	8018982 <mbedtls_sha256_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha2 state", (unsigned char *)
 801c18e:	ab11      	add	r3, sp, #68	; 0x44
 801c190:	2620      	movs	r6, #32
 801c192:	9301      	str	r3, [sp, #4]
 801c194:	4b22      	ldr	r3, [pc, #136]	; (801c220 <ssl_calc_finished_tls_sha256+0xc8>)
 801c196:	9300      	str	r3, [sp, #0]
 801c198:	4620      	mov	r0, r4
 801c19a:	4a20      	ldr	r2, [pc, #128]	; (801c21c <ssl_calc_finished_tls_sha256+0xc4>)
 801c19c:	9602      	str	r6, [sp, #8]
 801c19e:	f241 33cd 	movw	r3, #5069	; 0x13cd
 801c1a2:	2104      	movs	r1, #4
 801c1a4:	f7f4 fcf2 	bl	8010b8c <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c1a8:	4b1e      	ldr	r3, [pc, #120]	; (801c224 <ssl_calc_finished_tls_sha256+0xcc>)
 801c1aa:	4a1f      	ldr	r2, [pc, #124]	; (801c228 <ssl_calc_finished_tls_sha256+0xd0>)
    mbedtls_sha256_finish( &sha256, padbuf );
 801c1ac:	a907      	add	r1, sp, #28
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c1ae:	f1b8 0f00 	cmp.w	r8, #0
 801c1b2:	bf08      	it	eq
 801c1b4:	461a      	moveq	r2, r3
    mbedtls_sha256_finish( &sha256, padbuf );
 801c1b6:	a80f      	add	r0, sp, #60	; 0x3c
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c1b8:	f04f 080c 	mov.w	r8, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c1bc:	9205      	str	r2, [sp, #20]
    mbedtls_sha256_finish( &sha256, padbuf );
 801c1be:	f7fc ffdb 	bl	8019178 <mbedtls_sha256_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c1c2:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c1c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c1c8:	9600      	str	r6, [sp, #0]
 801c1ca:	f8d3 92a4 	ldr.w	r9, [r3, #676]	; 0x2a4
 801c1ce:	9a05      	ldr	r2, [sp, #20]
 801c1d0:	ab07      	add	r3, sp, #28
 801c1d2:	2130      	movs	r1, #48	; 0x30
 801c1d4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c1d8:	47c8      	blx	r9
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c1da:	4b14      	ldr	r3, [pc, #80]	; (801c22c <ssl_calc_finished_tls_sha256+0xd4>)
 801c1dc:	4a0f      	ldr	r2, [pc, #60]	; (801c21c <ssl_calc_finished_tls_sha256+0xc4>)
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	2103      	movs	r1, #3
 801c1e2:	f241 33da 	movw	r3, #5082	; 0x13da
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c1ec:	f7f4 fcce 	bl	8010b8c <mbedtls_debug_print_buf>
    mbedtls_sha256_free( &sha256 );
 801c1f0:	a80f      	add	r0, sp, #60	; 0x3c
 801c1f2:	f7fc fbbc 	bl	801896e <mbedtls_sha256_free>
    mbedtls_zeroize(  padbuf, sizeof(  padbuf ) );
 801c1f6:	4631      	mov	r1, r6
 801c1f8:	a807      	add	r0, sp, #28
 801c1fa:	f7ff ff85 	bl	801c108 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c1fe:	4b0c      	ldr	r3, [pc, #48]	; (801c230 <ssl_calc_finished_tls_sha256+0xd8>)
 801c200:	9300      	str	r3, [sp, #0]
 801c202:	4a06      	ldr	r2, [pc, #24]	; (801c21c <ssl_calc_finished_tls_sha256+0xc4>)
 801c204:	f44f 539f 	mov.w	r3, #5088	; 0x13e0
 801c208:	2102      	movs	r1, #2
 801c20a:	4620      	mov	r0, r4
 801c20c:	f7f4 fc5e 	bl	8010acc <mbedtls_debug_print_msg>
}
 801c210:	b02b      	add	sp, #172	; 0xac
 801c212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c216:	bf00      	nop
 801c218:	08031f55 	.word	0x08031f55
 801c21c:	08031ee5 	.word	0x08031ee5
 801c220:	08031f72 	.word	0x08031f72
 801c224:	08031ec5 	.word	0x08031ec5
 801c228:	08031ed5 	.word	0x08031ed5
 801c22c:	08031f86 	.word	0x08031f86
 801c230:	08031f9b 	.word	0x08031f9b

0801c234 <ssl_calc_verify_tls_sha256>:
{
 801c234:	b530      	push	{r4, r5, lr}
 801c236:	b0a1      	sub	sp, #132	; 0x84
 801c238:	4604      	mov	r4, r0
    mbedtls_sha256_init( &sha256 );
 801c23a:	a805      	add	r0, sp, #20
{
 801c23c:	460d      	mov	r5, r1
    mbedtls_sha256_init( &sha256 );
 801c23e:	f7fc fb92 	bl	8018966 <mbedtls_sha256_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha256" ) );
 801c242:	4b16      	ldr	r3, [pc, #88]	; (801c29c <ssl_calc_verify_tls_sha256+0x68>)
 801c244:	4a16      	ldr	r2, [pc, #88]	; (801c2a0 <ssl_calc_verify_tls_sha256+0x6c>)
 801c246:	9300      	str	r3, [sp, #0]
 801c248:	4620      	mov	r0, r4
 801c24a:	f240 4316 	movw	r3, #1046	; 0x416
 801c24e:	2102      	movs	r1, #2
 801c250:	f7f4 fc3c 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_sha256_clone( &sha256, &ssl->handshake->fin_sha256 );
 801c254:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c256:	a805      	add	r0, sp, #20
 801c258:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 801c25c:	f7fc fb91 	bl	8018982 <mbedtls_sha256_clone>
    mbedtls_sha256_finish( &sha256, hash );
 801c260:	4629      	mov	r1, r5
 801c262:	a805      	add	r0, sp, #20
 801c264:	f7fc ff88 	bl	8019178 <mbedtls_sha256_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 32 );
 801c268:	2320      	movs	r3, #32
 801c26a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801c26e:	4b0d      	ldr	r3, [pc, #52]	; (801c2a4 <ssl_calc_verify_tls_sha256+0x70>)
 801c270:	9300      	str	r3, [sp, #0]
 801c272:	4620      	mov	r0, r4
 801c274:	4a0a      	ldr	r2, [pc, #40]	; (801c2a0 <ssl_calc_verify_tls_sha256+0x6c>)
 801c276:	f240 431b 	movw	r3, #1051	; 0x41b
 801c27a:	2103      	movs	r1, #3
 801c27c:	f7f4 fc86 	bl	8010b8c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c280:	4b09      	ldr	r3, [pc, #36]	; (801c2a8 <ssl_calc_verify_tls_sha256+0x74>)
 801c282:	4a07      	ldr	r2, [pc, #28]	; (801c2a0 <ssl_calc_verify_tls_sha256+0x6c>)
 801c284:	9300      	str	r3, [sp, #0]
 801c286:	2102      	movs	r1, #2
 801c288:	f240 431c 	movw	r3, #1052	; 0x41c
 801c28c:	4620      	mov	r0, r4
 801c28e:	f7f4 fc1d 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_sha256_free( &sha256 );
 801c292:	a805      	add	r0, sp, #20
 801c294:	f7fc fb6b 	bl	801896e <mbedtls_sha256_free>
}
 801c298:	b021      	add	sp, #132	; 0x84
 801c29a:	bd30      	pop	{r4, r5, pc}
 801c29c:	08031fad 	.word	0x08031fad
 801c2a0:	08031ee5 	.word	0x08031ee5
 801c2a4:	08031fc3 	.word	0x08031fc3
 801c2a8:	08031fdc 	.word	0x08031fdc

0801c2ac <tls_prf_generic>:
{
 801c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2b0:	ed2d 8b02 	vpush	{d8}
 801c2b4:	b0b5      	sub	sp, #212	; 0xd4
 801c2b6:	4604      	mov	r4, r0
    mbedtls_md_init( &md_ctx );
 801c2b8:	a801      	add	r0, sp, #4
{
 801c2ba:	ee08 1a10 	vmov	s16, r1
 801c2be:	4692      	mov	sl, r2
 801c2c0:	4699      	mov	r9, r3
 801c2c2:	9e43      	ldr	r6, [sp, #268]	; 0x10c
    mbedtls_md_init( &md_ctx );
 801c2c4:	f7f8 fafa 	bl	80148bc <mbedtls_md_init>
    if( ( md_info = mbedtls_md_info_from_type( md_type ) ) == NULL )
 801c2c8:	4620      	mov	r0, r4
 801c2ca:	f7f8 faeb 	bl	80148a4 <mbedtls_md_info_from_type>
 801c2ce:	4607      	mov	r7, r0
 801c2d0:	2800      	cmp	r0, #0
 801c2d2:	d077      	beq.n	801c3c4 <tls_prf_generic+0x118>
    md_len = mbedtls_md_get_size( md_info );
 801c2d4:	f7f8 fc36 	bl	8014b44 <mbedtls_md_get_size>
 801c2d8:	4604      	mov	r4, r0
    if( sizeof( tmp ) < md_len + strlen( label ) + rlen )
 801c2da:	4648      	mov	r0, r9
 801c2dc:	f7e3 ff82 	bl	80001e4 <strlen>
 801c2e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c2e2:	eb00 0804 	add.w	r8, r0, r4
 801c2e6:	eb08 0203 	add.w	r2, r8, r3
 801c2ea:	2a80      	cmp	r2, #128	; 0x80
 801c2ec:	4605      	mov	r5, r0
 801c2ee:	d86b      	bhi.n	801c3c8 <tls_prf_generic+0x11c>
    memcpy( tmp + md_len, label, nb );
 801c2f0:	ab14      	add	r3, sp, #80	; 0x50
 801c2f2:	eb03 0b04 	add.w	fp, r3, r4
 801c2f6:	4602      	mov	r2, r0
 801c2f8:	4649      	mov	r1, r9
 801c2fa:	4658      	mov	r0, fp
 801c2fc:	f006 f874 	bl	80223e8 <memcpy>
    memcpy( tmp + md_len + nb, random, rlen );
 801c300:	ab14      	add	r3, sp, #80	; 0x50
 801c302:	e9dd 1240 	ldrd	r1, r2, [sp, #256]	; 0x100
 801c306:	eb03 0008 	add.w	r0, r3, r8
 801c30a:	f006 f86d 	bl	80223e8 <memcpy>
    if ( ( ret = mbedtls_md_setup( &md_ctx, md_info, 1 ) ) != 0 )
 801c30e:	4639      	mov	r1, r7
 801c310:	2201      	movs	r2, #1
 801c312:	a801      	add	r0, sp, #4
 801c314:	f7f8 fafc 	bl	8014910 <mbedtls_md_setup>
 801c318:	4607      	mov	r7, r0
 801c31a:	b9f8      	cbnz	r0, 801c35c <tls_prf_generic+0xb0>
    nb += rlen;
 801c31c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c31e:	ee18 1a10 	vmov	r1, s16
    nb += rlen;
 801c322:	441d      	add	r5, r3
    mbedtls_md_hmac_starts( &md_ctx, secret, slen );
 801c324:	4652      	mov	r2, sl
 801c326:	a801      	add	r0, sp, #4
 801c328:	f7f8 fb4c 	bl	80149c4 <mbedtls_md_hmac_starts>
    mbedtls_md_hmac_update( &md_ctx, tmp + md_len, nb );
 801c32c:	462a      	mov	r2, r5
 801c32e:	4659      	mov	r1, fp
 801c330:	a801      	add	r0, sp, #4
 801c332:	f7f8 fba7 	bl	8014a84 <mbedtls_md_hmac_update>
    mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c336:	a914      	add	r1, sp, #80	; 0x50
 801c338:	a801      	add	r0, sp, #4
 801c33a:	f7f8 fbb3 	bl	8014aa4 <mbedtls_md_hmac_finish>
    for( i = 0; i < dlen; i += md_len )
 801c33e:	46b9      	mov	r9, r7
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c340:	4425      	add	r5, r4
    for( i = 0; i < dlen; i += md_len )
 801c342:	454e      	cmp	r6, r9
        mbedtls_md_hmac_reset ( &md_ctx );
 801c344:	a801      	add	r0, sp, #4
    for( i = 0; i < dlen; i += md_len )
 801c346:	d80f      	bhi.n	801c368 <tls_prf_generic+0xbc>
    mbedtls_md_free( &md_ctx );
 801c348:	f7f8 fabe 	bl	80148c8 <mbedtls_md_free>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c34c:	2180      	movs	r1, #128	; 0x80
 801c34e:	a814      	add	r0, sp, #80	; 0x50
 801c350:	f7ff feda 	bl	801c108 <mbedtls_zeroize>
    mbedtls_zeroize( h_i, sizeof( h_i ) );
 801c354:	2140      	movs	r1, #64	; 0x40
 801c356:	a804      	add	r0, sp, #16
 801c358:	f7ff fed6 	bl	801c108 <mbedtls_zeroize>
}
 801c35c:	4638      	mov	r0, r7
 801c35e:	b035      	add	sp, #212	; 0xd4
 801c360:	ecbd 8b02 	vpop	{d8}
 801c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbedtls_md_hmac_reset ( &md_ctx );
 801c368:	f7f8 fbc8 	bl	8014afc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len + nb );
 801c36c:	462a      	mov	r2, r5
 801c36e:	a914      	add	r1, sp, #80	; 0x50
 801c370:	a801      	add	r0, sp, #4
 801c372:	f7f8 fb87 	bl	8014a84 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, h_i );
 801c376:	a904      	add	r1, sp, #16
 801c378:	a801      	add	r0, sp, #4
 801c37a:	f7f8 fb93 	bl	8014aa4 <mbedtls_md_hmac_finish>
        mbedtls_md_hmac_reset ( &md_ctx );
 801c37e:	a801      	add	r0, sp, #4
 801c380:	f7f8 fbbc 	bl	8014afc <mbedtls_md_hmac_reset>
        mbedtls_md_hmac_update( &md_ctx, tmp, md_len );
 801c384:	4622      	mov	r2, r4
 801c386:	a914      	add	r1, sp, #80	; 0x50
 801c388:	a801      	add	r0, sp, #4
 801c38a:	f7f8 fb7b 	bl	8014a84 <mbedtls_md_hmac_update>
        mbedtls_md_hmac_finish( &md_ctx, tmp );
 801c38e:	a914      	add	r1, sp, #80	; 0x50
 801c390:	a801      	add	r0, sp, #4
 801c392:	f7f8 fb87 	bl	8014aa4 <mbedtls_md_hmac_finish>
        k = ( i + md_len > dlen ) ? dlen % md_len : md_len;
 801c396:	eb04 0209 	add.w	r2, r4, r9
 801c39a:	9842      	ldr	r0, [sp, #264]	; 0x108
 801c39c:	4296      	cmp	r6, r2
 801c39e:	bf2c      	ite	cs
 801c3a0:	4623      	movcs	r3, r4
 801c3a2:	fbb6 f3f4 	udivcc	r3, r6, r4
 801c3a6:	4481      	add	r9, r0
 801c3a8:	bf38      	it	cc
 801c3aa:	fb04 6313 	mlscc	r3, r4, r3, r6
        for( j = 0; j < k; j++ )
 801c3ae:	a904      	add	r1, sp, #16
 801c3b0:	444b      	add	r3, r9
 801c3b2:	4599      	cmp	r9, r3
 801c3b4:	d101      	bne.n	801c3ba <tls_prf_generic+0x10e>
 801c3b6:	4691      	mov	r9, r2
 801c3b8:	e7c3      	b.n	801c342 <tls_prf_generic+0x96>
            dstbuf[i + j]  = h_i[j];
 801c3ba:	f811 0b01 	ldrb.w	r0, [r1], #1
 801c3be:	f809 0b01 	strb.w	r0, [r9], #1
        for( j = 0; j < k; j++ )
 801c3c2:	e7f6      	b.n	801c3b2 <tls_prf_generic+0x106>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c3c4:	4f01      	ldr	r7, [pc, #4]	; (801c3cc <tls_prf_generic+0x120>)
 801c3c6:	e7c9      	b.n	801c35c <tls_prf_generic+0xb0>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c3c8:	4f01      	ldr	r7, [pc, #4]	; (801c3d0 <tls_prf_generic+0x124>)
 801c3ca:	e7c7      	b.n	801c35c <tls_prf_generic+0xb0>
 801c3cc:	ffff9400 	.word	0xffff9400
 801c3d0:	ffff8f00 	.word	0xffff8f00

0801c3d4 <tls_prf_sha256>:
{
 801c3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA256, secret, slen,
 801c3d6:	9c08      	ldr	r4, [sp, #32]
 801c3d8:	9403      	str	r4, [sp, #12]
 801c3da:	9c07      	ldr	r4, [sp, #28]
 801c3dc:	9402      	str	r4, [sp, #8]
 801c3de:	9c06      	ldr	r4, [sp, #24]
 801c3e0:	e9cd 3400 	strd	r3, r4, [sp]
 801c3e4:	4613      	mov	r3, r2
 801c3e6:	460a      	mov	r2, r1
 801c3e8:	4601      	mov	r1, r0
 801c3ea:	2006      	movs	r0, #6
 801c3ec:	f7ff ff5e 	bl	801c2ac <tls_prf_generic>
}
 801c3f0:	b004      	add	sp, #16
 801c3f2:	bd10      	pop	{r4, pc}

0801c3f4 <tls_prf_sha384>:
{
 801c3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return( tls_prf_generic( MBEDTLS_MD_SHA384, secret, slen,
 801c3f6:	9c08      	ldr	r4, [sp, #32]
 801c3f8:	9403      	str	r4, [sp, #12]
 801c3fa:	9c07      	ldr	r4, [sp, #28]
 801c3fc:	9402      	str	r4, [sp, #8]
 801c3fe:	9c06      	ldr	r4, [sp, #24]
 801c400:	e9cd 3400 	strd	r3, r4, [sp]
 801c404:	4613      	mov	r3, r2
 801c406:	460a      	mov	r2, r1
 801c408:	4601      	mov	r1, r0
 801c40a:	2007      	movs	r0, #7
 801c40c:	f7ff ff4e 	bl	801c2ac <tls_prf_generic>
}
 801c410:	b004      	add	sp, #16
 801c412:	bd10      	pop	{r4, pc}

0801c414 <ssl_calc_finished_tls_sha384>:
{
 801c414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c418:	6b47      	ldr	r7, [r0, #52]	; 0x34
{
 801c41a:	b0c9      	sub	sp, #292	; 0x124
 801c41c:	4604      	mov	r4, r0
 801c41e:	460d      	mov	r5, r1
 801c420:	4616      	mov	r6, r2
    if( !session )
 801c422:	b907      	cbnz	r7, 801c426 <ssl_calc_finished_tls_sha384+0x12>
        session = ssl->session;
 801c424:	6b07      	ldr	r7, [r0, #48]	; 0x30
    mbedtls_sha512_init( &sha512 );
 801c426:	a812      	add	r0, sp, #72	; 0x48
 801c428:	f7fc ff2f 	bl	801928a <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc  finished tls sha384" ) );
 801c42c:	4b29      	ldr	r3, [pc, #164]	; (801c4d4 <ssl_calc_finished_tls_sha384+0xc0>)
 801c42e:	4a2a      	ldr	r2, [pc, #168]	; (801c4d8 <ssl_calc_finished_tls_sha384+0xc4>)
 801c430:	9300      	str	r3, [sp, #0]
 801c432:	4620      	mov	r0, r4
 801c434:	f241 33f3 	movw	r3, #5107	; 0x13f3
 801c438:	2102      	movs	r1, #2
 801c43a:	f7f4 fb47 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c43e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c440:	a812      	add	r0, sp, #72	; 0x48
 801c442:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c446:	f7fc ff2e 	bl	80192a6 <mbedtls_sha512_clone>
    MBEDTLS_SSL_DEBUG_BUF( 4, "finished sha512 state", (unsigned char *)
 801c44a:	2340      	movs	r3, #64	; 0x40
 801c44c:	9302      	str	r3, [sp, #8]
 801c44e:	ab16      	add	r3, sp, #88	; 0x58
 801c450:	9301      	str	r3, [sp, #4]
 801c452:	4b22      	ldr	r3, [pc, #136]	; (801c4dc <ssl_calc_finished_tls_sha384+0xc8>)
 801c454:	9300      	str	r3, [sp, #0]
 801c456:	4620      	mov	r0, r4
 801c458:	4a1f      	ldr	r2, [pc, #124]	; (801c4d8 <ssl_calc_finished_tls_sha384+0xc4>)
 801c45a:	f241 33fe 	movw	r3, #5118	; 0x13fe
 801c45e:	2104      	movs	r1, #4
 801c460:	f7f4 fb94 	bl	8010b8c <mbedtls_debug_print_buf>
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c464:	4b1e      	ldr	r3, [pc, #120]	; (801c4e0 <ssl_calc_finished_tls_sha384+0xcc>)
 801c466:	4a1f      	ldr	r2, [pc, #124]	; (801c4e4 <ssl_calc_finished_tls_sha384+0xd0>)
    mbedtls_sha512_finish( &sha512, padbuf );
 801c468:	a906      	add	r1, sp, #24
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c46a:	2e00      	cmp	r6, #0
 801c46c:	bf08      	it	eq
 801c46e:	461a      	moveq	r2, r3
    mbedtls_sha512_finish( &sha512, padbuf );
 801c470:	a812      	add	r0, sp, #72	; 0x48
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c472:	f04f 080c 	mov.w	r8, #12
    sender = ( from == MBEDTLS_SSL_IS_CLIENT )
 801c476:	9205      	str	r2, [sp, #20]
    mbedtls_sha512_finish( &sha512, padbuf );
 801c478:	f7fd fd78 	bl	8019f6c <mbedtls_sha512_finish>
    ssl->handshake->tls_prf( session->master, 48, sender,
 801c47c:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c482:	9a05      	ldr	r2, [sp, #20]
 801c484:	2630      	movs	r6, #48	; 0x30
 801c486:	9600      	str	r6, [sp, #0]
 801c488:	f8d3 92a4 	ldr.w	r9, [r3, #676]	; 0x2a4
 801c48c:	4631      	mov	r1, r6
 801c48e:	ab06      	add	r3, sp, #24
 801c490:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801c494:	47c8      	blx	r9
    MBEDTLS_SSL_DEBUG_BUF( 3, "calc finished result", buf, len );
 801c496:	4b14      	ldr	r3, [pc, #80]	; (801c4e8 <ssl_calc_finished_tls_sha384+0xd4>)
 801c498:	4a0f      	ldr	r2, [pc, #60]	; (801c4d8 <ssl_calc_finished_tls_sha384+0xc4>)
 801c49a:	9300      	str	r3, [sp, #0]
 801c49c:	2103      	movs	r1, #3
 801c49e:	f241 430b 	movw	r3, #5131	; 0x140b
 801c4a2:	4620      	mov	r0, r4
 801c4a4:	e9cd 5801 	strd	r5, r8, [sp, #4]
 801c4a8:	f7f4 fb70 	bl	8010b8c <mbedtls_debug_print_buf>
    mbedtls_sha512_free( &sha512 );
 801c4ac:	a812      	add	r0, sp, #72	; 0x48
 801c4ae:	f7fc fef0 	bl	8019292 <mbedtls_sha512_free>
    mbedtls_zeroize(  padbuf, sizeof( padbuf ) );
 801c4b2:	4631      	mov	r1, r6
 801c4b4:	a806      	add	r0, sp, #24
 801c4b6:	f7ff fe27 	bl	801c108 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc  finished" ) );
 801c4ba:	4b0c      	ldr	r3, [pc, #48]	; (801c4ec <ssl_calc_finished_tls_sha384+0xd8>)
 801c4bc:	9300      	str	r3, [sp, #0]
 801c4be:	4a06      	ldr	r2, [pc, #24]	; (801c4d8 <ssl_calc_finished_tls_sha384+0xc4>)
 801c4c0:	f241 4311 	movw	r3, #5137	; 0x1411
 801c4c4:	2102      	movs	r1, #2
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	f7f4 fb00 	bl	8010acc <mbedtls_debug_print_msg>
}
 801c4cc:	b049      	add	sp, #292	; 0x124
 801c4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c4d2:	bf00      	nop
 801c4d4:	08031feb 	.word	0x08031feb
 801c4d8:	08031ee5 	.word	0x08031ee5
 801c4dc:	08032008 	.word	0x08032008
 801c4e0:	08031ec5 	.word	0x08031ec5
 801c4e4:	08031ed5 	.word	0x08031ed5
 801c4e8:	08031f86 	.word	0x08031f86
 801c4ec:	08031f9b 	.word	0x08031f9b

0801c4f0 <ssl_calc_verify_tls_sha384>:
{
 801c4f0:	b530      	push	{r4, r5, lr}
 801c4f2:	b0bb      	sub	sp, #236	; 0xec
 801c4f4:	4604      	mov	r4, r0
    mbedtls_sha512_init( &sha512 );
 801c4f6:	a804      	add	r0, sp, #16
{
 801c4f8:	460d      	mov	r5, r1
    mbedtls_sha512_init( &sha512 );
 801c4fa:	f7fc fec6 	bl	801928a <mbedtls_sha512_init>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> calc verify sha384" ) );
 801c4fe:	4b16      	ldr	r3, [pc, #88]	; (801c558 <ssl_calc_verify_tls_sha384+0x68>)
 801c500:	4a16      	ldr	r2, [pc, #88]	; (801c55c <ssl_calc_verify_tls_sha384+0x6c>)
 801c502:	9300      	str	r3, [sp, #0]
 801c504:	4620      	mov	r0, r4
 801c506:	f240 432b 	movw	r3, #1067	; 0x42b
 801c50a:	2102      	movs	r1, #2
 801c50c:	f7f4 fade 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_sha512_clone( &sha512, &ssl->handshake->fin_sha512 );
 801c510:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c512:	a804      	add	r0, sp, #16
 801c514:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
 801c518:	f7fc fec5 	bl	80192a6 <mbedtls_sha512_clone>
    mbedtls_sha512_finish( &sha512, hash );
 801c51c:	4629      	mov	r1, r5
 801c51e:	a804      	add	r0, sp, #16
 801c520:	f7fd fd24 	bl	8019f6c <mbedtls_sha512_finish>
    MBEDTLS_SSL_DEBUG_BUF( 3, "calculated verify result", hash, 48 );
 801c524:	2330      	movs	r3, #48	; 0x30
 801c526:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801c52a:	4b0d      	ldr	r3, [pc, #52]	; (801c560 <ssl_calc_verify_tls_sha384+0x70>)
 801c52c:	9300      	str	r3, [sp, #0]
 801c52e:	4620      	mov	r0, r4
 801c530:	4a0a      	ldr	r2, [pc, #40]	; (801c55c <ssl_calc_verify_tls_sha384+0x6c>)
 801c532:	f44f 6386 	mov.w	r3, #1072	; 0x430
 801c536:	2103      	movs	r1, #3
 801c538:	f7f4 fb28 	bl	8010b8c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= calc verify" ) );
 801c53c:	4b09      	ldr	r3, [pc, #36]	; (801c564 <ssl_calc_verify_tls_sha384+0x74>)
 801c53e:	4a07      	ldr	r2, [pc, #28]	; (801c55c <ssl_calc_verify_tls_sha384+0x6c>)
 801c540:	9300      	str	r3, [sp, #0]
 801c542:	2102      	movs	r1, #2
 801c544:	f240 4331 	movw	r3, #1073	; 0x431
 801c548:	4620      	mov	r0, r4
 801c54a:	f7f4 fabf 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_sha512_free( &sha512 );
 801c54e:	a804      	add	r0, sp, #16
 801c550:	f7fc fe9f 	bl	8019292 <mbedtls_sha512_free>
}
 801c554:	b03b      	add	sp, #236	; 0xec
 801c556:	bd30      	pop	{r4, r5, pc}
 801c558:	0803201e 	.word	0x0803201e
 801c55c:	08031ee5 	.word	0x08031ee5
 801c560:	08031fc3 	.word	0x08031fc3
 801c564:	08031fdc 	.word	0x08031fdc

0801c568 <ssl_update_checksum_sha256>:
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c568:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c56a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801c56e:	f7fc bdfe 	b.w	801916e <mbedtls_sha256_update>

0801c572 <ssl_update_checksum_sha384>:
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c572:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c574:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
 801c578:	f7fd bcf3 	b.w	8019f62 <mbedtls_sha512_update>

0801c57c <ssl_update_checksum_start>:
{
 801c57c:	b570      	push	{r4, r5, r6, lr}
 801c57e:	4604      	mov	r4, r0
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c580:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c582:	f500 70a8 	add.w	r0, r0, #336	; 0x150
{
 801c586:	460d      	mov	r5, r1
 801c588:	4616      	mov	r6, r2
    mbedtls_sha256_update( &ssl->handshake->fin_sha256, buf, len );
 801c58a:	f7fc fdf0 	bl	801916e <mbedtls_sha256_update>
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c58e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801c590:	4632      	mov	r2, r6
 801c592:	4629      	mov	r1, r5
 801c594:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
}
 801c598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_sha512_update( &ssl->handshake->fin_sha512, buf, len );
 801c59c:	f7fd bce1 	b.w	8019f62 <mbedtls_sha512_update>

0801c5a0 <ssl_set_timer>:
    if( ssl->f_set_timer == NULL )
 801c5a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 801c5a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	460d      	mov	r5, r1
    if( ssl->f_set_timer == NULL )
 801c5a8:	b17b      	cbz	r3, 801c5ca <ssl_set_timer+0x2a>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "set_timer to %d ms", (int) millisecs ) );
 801c5aa:	4b09      	ldr	r3, [pc, #36]	; (801c5d0 <ssl_set_timer+0x30>)
 801c5ac:	9101      	str	r1, [sp, #4]
 801c5ae:	9300      	str	r3, [sp, #0]
 801c5b0:	4a08      	ldr	r2, [pc, #32]	; (801c5d4 <ssl_set_timer+0x34>)
 801c5b2:	2352      	movs	r3, #82	; 0x52
 801c5b4:	2103      	movs	r1, #3
 801c5b6:	f7f4 fa89 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c5ba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801c5bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801c5be:	462a      	mov	r2, r5
 801c5c0:	08a9      	lsrs	r1, r5, #2
}
 801c5c2:	b003      	add	sp, #12
 801c5c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ssl->f_set_timer( ssl->p_timer, millisecs / 4, millisecs );
 801c5c8:	4718      	bx	r3
}
 801c5ca:	b003      	add	sp, #12
 801c5cc:	bd30      	pop	{r4, r5, pc}
 801c5ce:	bf00      	nop
 801c5d0:	08032034 	.word	0x08032034
 801c5d4:	08031ee5 	.word	0x08031ee5

0801c5d8 <mbedtls_ssl_derive_keys>:
{
 801c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5dc:	b0d9      	sub	sp, #356	; 0x164
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c5de:	6b43      	ldr	r3, [r0, #52]	; 0x34
    mbedtls_ssl_transform *transform = ssl->transform_negotiate;
 801c5e0:	6c85      	ldr	r5, [r0, #72]	; 0x48
    mbedtls_ssl_session *session = ssl->session_negotiate;
 801c5e2:	9307      	str	r3, [sp, #28]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c5e4:	4b8d      	ldr	r3, [pc, #564]	; (801c81c <mbedtls_ssl_derive_keys+0x244>)
    mbedtls_ssl_handshake_params *handshake = ssl->handshake;
 801c5e6:	6b86      	ldr	r6, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c5e8:	4a8d      	ldr	r2, [pc, #564]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
 801c5ea:	9300      	str	r3, [sp, #0]
 801c5ec:	2102      	movs	r1, #2
 801c5ee:	f240 13f5 	movw	r3, #501	; 0x1f5
{
 801c5f2:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> derive keys" ) );
 801c5f4:	f7f4 fa6a 	bl	8010acc <mbedtls_debug_print_msg>
    cipher_info = mbedtls_cipher_info_from_type( transform->ciphersuite_info->cipher );
 801c5f8:	682b      	ldr	r3, [r5, #0]
 801c5fa:	7a18      	ldrb	r0, [r3, #8]
 801c5fc:	f7f3 fd2e 	bl	801005c <mbedtls_cipher_info_from_type>
    if( cipher_info == NULL )
 801c600:	682b      	ldr	r3, [r5, #0]
 801c602:	4680      	mov	r8, r0
 801c604:	b980      	cbnz	r0, 801c628 <mbedtls_ssl_derive_keys+0x50>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "cipher info for %d not found",
 801c606:	7a1b      	ldrb	r3, [r3, #8]
 801c608:	9301      	str	r3, [sp, #4]
 801c60a:	4b86      	ldr	r3, [pc, #536]	; (801c824 <mbedtls_ssl_derive_keys+0x24c>)
 801c60c:	9300      	str	r3, [sp, #0]
 801c60e:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c612:	4a83      	ldr	r2, [pc, #524]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801c614:	f8df b250 	ldr.w	fp, [pc, #592]	; 801c868 <mbedtls_ssl_derive_keys+0x290>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c618:	2101      	movs	r1, #1
 801c61a:	4620      	mov	r0, r4
 801c61c:	f7f4 fa56 	bl	8010acc <mbedtls_debug_print_msg>
}
 801c620:	4658      	mov	r0, fp
 801c622:	b059      	add	sp, #356	; 0x164
 801c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    md_info = mbedtls_md_info_from_type( transform->ciphersuite_info->mac );
 801c628:	7a58      	ldrb	r0, [r3, #9]
 801c62a:	f7f8 f93b 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 801c62e:	4681      	mov	r9, r0
 801c630:	b938      	cbnz	r0, 801c642 <mbedtls_ssl_derive_keys+0x6a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "mbedtls_md info for %d not found",
 801c632:	682b      	ldr	r3, [r5, #0]
 801c634:	7a5b      	ldrb	r3, [r3, #9]
 801c636:	9301      	str	r3, [sp, #4]
 801c638:	4b7b      	ldr	r3, [pc, #492]	; (801c828 <mbedtls_ssl_derive_keys+0x250>)
 801c63a:	9300      	str	r3, [sp, #0]
 801c63c:	f240 2302 	movw	r3, #514	; 0x202
 801c640:	e7e7      	b.n	801c612 <mbedtls_ssl_derive_keys+0x3a>
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c642:	6963      	ldr	r3, [r4, #20]
 801c644:	2b03      	cmp	r3, #3
 801c646:	d171      	bne.n	801c72c <mbedtls_ssl_derive_keys+0x154>
        transform->ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801c648:	682b      	ldr	r3, [r5, #0]
    if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 &&
 801c64a:	7a5b      	ldrb	r3, [r3, #9]
 801c64c:	2b07      	cmp	r3, #7
 801c64e:	d165      	bne.n	801c71c <mbedtls_ssl_derive_keys+0x144>
        handshake->tls_prf = tls_prf_sha384;
 801c650:	4b76      	ldr	r3, [pc, #472]	; (801c82c <mbedtls_ssl_derive_keys+0x254>)
 801c652:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha384;
 801c656:	4b76      	ldr	r3, [pc, #472]	; (801c830 <mbedtls_ssl_derive_keys+0x258>)
 801c658:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha384;
 801c65c:	4b75      	ldr	r3, [pc, #468]	; (801c834 <mbedtls_ssl_derive_keys+0x25c>)
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c65e:	f8c6 32a0 	str.w	r3, [r6, #672]	; 0x2a0
    if( handshake->resume == 0 )
 801c662:	9b07      	ldr	r3, [sp, #28]
 801c664:	3334      	adds	r3, #52	; 0x34
 801c666:	9306      	str	r3, [sp, #24]
 801c668:	f8d6 3330 	ldr.w	r3, [r6, #816]	; 0x330
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	f040 80ca 	bne.w	801c806 <mbedtls_ssl_derive_keys+0x22e>
        MBEDTLS_SSL_DEBUG_BUF( 3, "premaster secret", handshake->premaster,
 801c672:	f8d6 32a8 	ldr.w	r3, [r6, #680]	; 0x2a8
 801c676:	4a6a      	ldr	r2, [pc, #424]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
 801c678:	f506 7a3b 	add.w	sl, r6, #748	; 0x2ec
 801c67c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801c680:	4b6d      	ldr	r3, [pc, #436]	; (801c838 <mbedtls_ssl_derive_keys+0x260>)
 801c682:	9300      	str	r3, [sp, #0]
 801c684:	2103      	movs	r1, #3
 801c686:	f240 2342 	movw	r3, #578	; 0x242
 801c68a:	4620      	mov	r0, r4
 801c68c:	f7f4 fa7e 	bl	8010b8c <mbedtls_debug_print_buf>
        if( ssl->handshake->extended_ms == MBEDTLS_SSL_EXTENDED_MS_ENABLED )
 801c690:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c692:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 801c696:	2b01      	cmp	r3, #1
 801c698:	d156      	bne.n	801c748 <mbedtls_ssl_derive_keys+0x170>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "using extended master secret" ) );
 801c69a:	4b68      	ldr	r3, [pc, #416]	; (801c83c <mbedtls_ssl_derive_keys+0x264>)
 801c69c:	4a60      	ldr	r2, [pc, #384]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
 801c69e:	9300      	str	r3, [sp, #0]
 801c6a0:	2103      	movs	r1, #3
 801c6a2:	f240 234b 	movw	r3, #587	; 0x24b
 801c6a6:	4620      	mov	r0, r4
 801c6a8:	f7f4 fa10 	bl	8010acc <mbedtls_debug_print_msg>
            ssl->handshake->calc_verify( ssl, session_hash );
 801c6ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c6ae:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 801c6b2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 801c6b6:	4659      	mov	r1, fp
 801c6b8:	4620      	mov	r0, r4
 801c6ba:	4798      	blx	r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_3 )
 801c6bc:	6963      	ldr	r3, [r4, #20]
 801c6be:	2b03      	cmp	r3, #3
 801c6c0:	d140      	bne.n	801c744 <mbedtls_ssl_derive_keys+0x16c>
                if( ssl->transform_negotiate->ciphersuite_info->mac ==
 801c6c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	7a5b      	ldrb	r3, [r3, #9]
                    hash_len = 32;
 801c6c8:	2b07      	cmp	r3, #7
 801c6ca:	bf0c      	ite	eq
 801c6cc:	2730      	moveq	r7, #48	; 0x30
 801c6ce:	2720      	movne	r7, #32
            MBEDTLS_SSL_DEBUG_BUF( 3, "session hash", session_hash, hash_len );
 801c6d0:	4b5b      	ldr	r3, [pc, #364]	; (801c840 <mbedtls_ssl_derive_keys+0x268>)
 801c6d2:	4a53      	ldr	r2, [pc, #332]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
 801c6d4:	9300      	str	r3, [sp, #0]
 801c6d6:	e9cd b701 	strd	fp, r7, [sp, #4]
 801c6da:	f44f 7318 	mov.w	r3, #608	; 0x260
 801c6de:	2103      	movs	r1, #3
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	f7f4 fa53 	bl	8010b8c <mbedtls_debug_print_buf>
            ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c6e6:	2330      	movs	r3, #48	; 0x30
 801c6e8:	9302      	str	r3, [sp, #8]
 801c6ea:	9b06      	ldr	r3, [sp, #24]
 801c6ec:	4a55      	ldr	r2, [pc, #340]	; (801c844 <mbedtls_ssl_derive_keys+0x26c>)
 801c6ee:	e9cd 7300 	strd	r7, r3, [sp]
 801c6f2:	4650      	mov	r0, sl
 801c6f4:	465b      	mov	r3, fp
 801c6f6:	f8d6 72a4 	ldr.w	r7, [r6, #676]	; 0x2a4
 801c6fa:	f8d6 12a8 	ldr.w	r1, [r6, #680]	; 0x2a8
 801c6fe:	47b8      	blx	r7
            if( ret != 0 )
 801c700:	4683      	mov	fp, r0
 801c702:	2800      	cmp	r0, #0
 801c704:	d037      	beq.n	801c776 <mbedtls_ssl_derive_keys+0x19e>
                MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c706:	4b50      	ldr	r3, [pc, #320]	; (801c848 <mbedtls_ssl_derive_keys+0x270>)
 801c708:	9300      	str	r3, [sp, #0]
 801c70a:	9001      	str	r0, [sp, #4]
 801c70c:	f44f 731a 	mov.w	r3, #616	; 0x268
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801c710:	4a43      	ldr	r2, [pc, #268]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
 801c712:	2101      	movs	r1, #1
 801c714:	4620      	mov	r0, r4
 801c716:	f7f4 fa09 	bl	8010b2c <mbedtls_debug_print_ret>
        return( ret );
 801c71a:	e781      	b.n	801c620 <mbedtls_ssl_derive_keys+0x48>
        handshake->tls_prf = tls_prf_sha256;
 801c71c:	4b4b      	ldr	r3, [pc, #300]	; (801c84c <mbedtls_ssl_derive_keys+0x274>)
 801c71e:	f8c6 32a4 	str.w	r3, [r6, #676]	; 0x2a4
        handshake->calc_verify = ssl_calc_verify_tls_sha256;
 801c722:	4b4b      	ldr	r3, [pc, #300]	; (801c850 <mbedtls_ssl_derive_keys+0x278>)
 801c724:	f8c6 329c 	str.w	r3, [r6, #668]	; 0x29c
        handshake->calc_finished = ssl_calc_finished_tls_sha256;
 801c728:	4b4a      	ldr	r3, [pc, #296]	; (801c854 <mbedtls_ssl_derive_keys+0x27c>)
 801c72a:	e798      	b.n	801c65e <mbedtls_ssl_derive_keys+0x86>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c72c:	4b4a      	ldr	r3, [pc, #296]	; (801c858 <mbedtls_ssl_derive_keys+0x280>)
 801c72e:	9300      	str	r3, [sp, #0]
 801c730:	f240 2332 	movw	r3, #562	; 0x232
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c734:	4a3a      	ldr	r2, [pc, #232]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c736:	f8df b134 	ldr.w	fp, [pc, #308]	; 801c86c <mbedtls_ssl_derive_keys+0x294>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c73a:	2101      	movs	r1, #1
 801c73c:	4620      	mov	r0, r4
 801c73e:	f7f4 f9c5 	bl	8010acc <mbedtls_debug_print_msg>
                return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801c742:	e76d      	b.n	801c620 <mbedtls_ssl_derive_keys+0x48>
                hash_len = 36;
 801c744:	2724      	movs	r7, #36	; 0x24
 801c746:	e7c3      	b.n	801c6d0 <mbedtls_ssl_derive_keys+0xf8>
        ret = handshake->tls_prf( handshake->premaster, handshake->pmslen,
 801c748:	2330      	movs	r3, #48	; 0x30
 801c74a:	9302      	str	r3, [sp, #8]
 801c74c:	9b06      	ldr	r3, [sp, #24]
 801c74e:	9301      	str	r3, [sp, #4]
 801c750:	2340      	movs	r3, #64	; 0x40
 801c752:	9300      	str	r3, [sp, #0]
 801c754:	f8d6 72a4 	ldr.w	r7, [r6, #676]	; 0x2a4
 801c758:	4a40      	ldr	r2, [pc, #256]	; (801c85c <mbedtls_ssl_derive_keys+0x284>)
 801c75a:	f8d6 12a8 	ldr.w	r1, [r6, #680]	; 0x2a8
 801c75e:	f506 732b 	add.w	r3, r6, #684	; 0x2ac
 801c762:	4650      	mov	r0, sl
 801c764:	47b8      	blx	r7
        if( ret != 0 )
 801c766:	4683      	mov	fp, r0
 801c768:	b128      	cbz	r0, 801c776 <mbedtls_ssl_derive_keys+0x19e>
            MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c76a:	4b37      	ldr	r3, [pc, #220]	; (801c848 <mbedtls_ssl_derive_keys+0x270>)
 801c76c:	9300      	str	r3, [sp, #0]
 801c76e:	9001      	str	r0, [sp, #4]
 801c770:	f240 2375 	movw	r3, #629	; 0x275
 801c774:	e7cc      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
        mbedtls_zeroize( handshake->premaster, sizeof(handshake->premaster) );
 801c776:	2142      	movs	r1, #66	; 0x42
 801c778:	4650      	mov	r0, sl
 801c77a:	f7ff fcc5 	bl	801c108 <mbedtls_zeroize>
    memcpy( tmp, handshake->randbytes, 64 );
 801c77e:	f506 732b 	add.w	r3, r6, #684	; 0x2ac
 801c782:	af08      	add	r7, sp, #32
 801c784:	f506 7c3b 	add.w	ip, r6, #748	; 0x2ec
 801c788:	469a      	mov	sl, r3
 801c78a:	6818      	ldr	r0, [r3, #0]
 801c78c:	6859      	ldr	r1, [r3, #4]
 801c78e:	463a      	mov	r2, r7
 801c790:	c203      	stmia	r2!, {r0, r1}
 801c792:	3308      	adds	r3, #8
 801c794:	4563      	cmp	r3, ip
 801c796:	4617      	mov	r7, r2
 801c798:	d1f7      	bne.n	801c78a <mbedtls_ssl_derive_keys+0x1b2>
    memcpy( handshake->randbytes, tmp + 32, 32 );
 801c79a:	af10      	add	r7, sp, #64	; 0x40
 801c79c:	4652      	mov	r2, sl
 801c79e:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 801c7a2:	463b      	mov	r3, r7
 801c7a4:	cb03      	ldmia	r3!, {r0, r1}
 801c7a6:	4563      	cmp	r3, ip
 801c7a8:	6010      	str	r0, [r2, #0]
 801c7aa:	6051      	str	r1, [r2, #4]
 801c7ac:	461f      	mov	r7, r3
 801c7ae:	f102 0208 	add.w	r2, r2, #8
 801c7b2:	d1f6      	bne.n	801c7a2 <mbedtls_ssl_derive_keys+0x1ca>
    memcpy( handshake->randbytes + 32, tmp, 32 );
 801c7b4:	af08      	add	r7, sp, #32
 801c7b6:	f506 7233 	add.w	r2, r6, #716	; 0x2cc
 801c7ba:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 801c7be:	463b      	mov	r3, r7
 801c7c0:	cb03      	ldmia	r3!, {r0, r1}
 801c7c2:	4563      	cmp	r3, ip
 801c7c4:	6010      	str	r0, [r2, #0]
 801c7c6:	6051      	str	r1, [r2, #4]
 801c7c8:	461f      	mov	r7, r3
 801c7ca:	f102 0208 	add.w	r2, r2, #8
 801c7ce:	d1f6      	bne.n	801c7be <mbedtls_ssl_derive_keys+0x1e6>
    mbedtls_zeroize( tmp, sizeof( tmp ) );
 801c7d0:	2140      	movs	r1, #64	; 0x40
 801c7d2:	a808      	add	r0, sp, #32
 801c7d4:	f7ff fc98 	bl	801c108 <mbedtls_zeroize>
    ret = handshake->tls_prf( session->master, 48, "key expansion",
 801c7d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c7dc:	9302      	str	r3, [sp, #8]
 801c7de:	2740      	movs	r7, #64	; 0x40
 801c7e0:	ab18      	add	r3, sp, #96	; 0x60
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	9700      	str	r7, [sp, #0]
 801c7e6:	f8d6 62a4 	ldr.w	r6, [r6, #676]	; 0x2a4
 801c7ea:	4a1d      	ldr	r2, [pc, #116]	; (801c860 <mbedtls_ssl_derive_keys+0x288>)
 801c7ec:	9806      	ldr	r0, [sp, #24]
 801c7ee:	4653      	mov	r3, sl
 801c7f0:	2130      	movs	r1, #48	; 0x30
 801c7f2:	47b0      	blx	r6
    if( ret != 0 )
 801c7f4:	4683      	mov	fp, r0
 801c7f6:	2800      	cmp	r0, #0
 801c7f8:	d03a      	beq.n	801c870 <mbedtls_ssl_derive_keys+0x298>
        MBEDTLS_SSL_DEBUG_RET( 1, "prf", ret );
 801c7fa:	4b13      	ldr	r3, [pc, #76]	; (801c848 <mbedtls_ssl_derive_keys+0x270>)
 801c7fc:	9300      	str	r3, [sp, #0]
 801c7fe:	9001      	str	r0, [sp, #4]
 801c800:	f240 2396 	movw	r3, #662	; 0x296
 801c804:	e784      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "no premaster (session resumed)" ) );
 801c806:	4b17      	ldr	r3, [pc, #92]	; (801c864 <mbedtls_ssl_derive_keys+0x28c>)
 801c808:	9300      	str	r3, [sp, #0]
 801c80a:	4a05      	ldr	r2, [pc, #20]	; (801c820 <mbedtls_ssl_derive_keys+0x248>)
 801c80c:	f44f 731f 	mov.w	r3, #636	; 0x27c
 801c810:	2103      	movs	r1, #3
 801c812:	4620      	mov	r0, r4
 801c814:	f7f4 f95a 	bl	8010acc <mbedtls_debug_print_msg>
 801c818:	e7b1      	b.n	801c77e <mbedtls_ssl_derive_keys+0x1a6>
 801c81a:	bf00      	nop
 801c81c:	08032047 	.word	0x08032047
 801c820:	08031ee5 	.word	0x08031ee5
 801c824:	08032056 	.word	0x08032056
 801c828:	08032073 	.word	0x08032073
 801c82c:	0801c3f5 	.word	0x0801c3f5
 801c830:	0801c4f1 	.word	0x0801c4f1
 801c834:	0801c415 	.word	0x0801c415
 801c838:	08032094 	.word	0x08032094
 801c83c:	080320a5 	.word	0x080320a5
 801c840:	080320c2 	.word	0x080320c2
 801c844:	080320ab 	.word	0x080320ab
 801c848:	080320cf 	.word	0x080320cf
 801c84c:	0801c3d5 	.word	0x0801c3d5
 801c850:	0801c235 	.word	0x0801c235
 801c854:	0801c159 	.word	0x0801c159
 801c858:	08031a15 	.word	0x08031a15
 801c85c:	080320b4 	.word	0x080320b4
 801c860:	080320f2 	.word	0x080320f2
 801c864:	080320d3 	.word	0x080320d3
 801c868:	ffff8f00 	.word	0xffff8f00
 801c86c:	ffff9400 	.word	0xffff9400
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "ciphersuite = %s",
 801c870:	9b07      	ldr	r3, [sp, #28]
 801c872:	6898      	ldr	r0, [r3, #8]
 801c874:	f7fd fcca 	bl	801a20c <mbedtls_ssl_get_ciphersuite_name>
 801c878:	4ba1      	ldr	r3, [pc, #644]	; (801cb00 <mbedtls_ssl_derive_keys+0x528>)
 801c87a:	4aa2      	ldr	r2, [pc, #648]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801c87c:	9001      	str	r0, [sp, #4]
 801c87e:	9300      	str	r3, [sp, #0]
 801c880:	2103      	movs	r1, #3
 801c882:	f240 239a 	movw	r3, #666	; 0x29a
 801c886:	4620      	mov	r0, r4
 801c888:	f7f4 f920 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_BUF( 3, "master secret", session->master, 48 );
 801c88c:	2330      	movs	r3, #48	; 0x30
 801c88e:	9302      	str	r3, [sp, #8]
 801c890:	9b06      	ldr	r3, [sp, #24]
 801c892:	9301      	str	r3, [sp, #4]
 801c894:	4b9c      	ldr	r3, [pc, #624]	; (801cb08 <mbedtls_ssl_derive_keys+0x530>)
 801c896:	4a9b      	ldr	r2, [pc, #620]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801c898:	9300      	str	r3, [sp, #0]
 801c89a:	2103      	movs	r1, #3
 801c89c:	f44f 7327 	mov.w	r3, #668	; 0x29c
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f7f4 f973 	bl	8010b8c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "random bytes", handshake->randbytes, 64 );
 801c8a6:	4b99      	ldr	r3, [pc, #612]	; (801cb0c <mbedtls_ssl_derive_keys+0x534>)
 801c8a8:	4a96      	ldr	r2, [pc, #600]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801c8aa:	9300      	str	r3, [sp, #0]
 801c8ac:	2104      	movs	r1, #4
 801c8ae:	f240 239d 	movw	r3, #669	; 0x29d
 801c8b2:	4620      	mov	r0, r4
 801c8b4:	e9cd a701 	strd	sl, r7, [sp, #4]
 801c8b8:	f7f4 f968 	bl	8010b8c <mbedtls_debug_print_buf>
    MBEDTLS_SSL_DEBUG_BUF( 4, "key block", keyblk, 256 );
 801c8bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c8c0:	9302      	str	r3, [sp, #8]
 801c8c2:	ab18      	add	r3, sp, #96	; 0x60
 801c8c4:	9301      	str	r3, [sp, #4]
 801c8c6:	4b92      	ldr	r3, [pc, #584]	; (801cb10 <mbedtls_ssl_derive_keys+0x538>)
 801c8c8:	4a8e      	ldr	r2, [pc, #568]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801c8ca:	9300      	str	r3, [sp, #0]
 801c8cc:	2104      	movs	r1, #4
 801c8ce:	f240 239e 	movw	r3, #670	; 0x29e
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	f7f4 f95a 	bl	8010b8c <mbedtls_debug_print_buf>
    mbedtls_zeroize( handshake->randbytes, sizeof( handshake->randbytes ) );
 801c8d8:	4639      	mov	r1, r7
 801c8da:	4650      	mov	r0, sl
 801c8dc:	f7ff fc14 	bl	801c108 <mbedtls_zeroize>
    transform->keylen = cipher_info->key_bitlen / 8;
 801c8e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c8e4:	08db      	lsrs	r3, r3, #3
 801c8e6:	606b      	str	r3, [r5, #4]
    if( cipher_info->mode == MBEDTLS_MODE_GCM ||
 801c8e8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c8ec:	2b06      	cmp	r3, #6
 801c8ee:	d001      	beq.n	801c8f4 <mbedtls_ssl_derive_keys+0x31c>
 801c8f0:	2b08      	cmp	r3, #8
 801c8f2:	d10e      	bne.n	801c912 <mbedtls_ssl_derive_keys+0x33a>
        transform->maclen = 0;
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	616b      	str	r3, [r5, #20]
        transform->fixed_ivlen = 4;
 801c8f8:	210c      	movs	r1, #12
 801c8fa:	2304      	movs	r3, #4
 801c8fc:	e9c5 1303 	strd	r1, r3, [r5, #12]
                            + ( transform->ciphersuite_info->flags &
 801c900:	682b      	ldr	r3, [r5, #0]
                                MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16 );
 801c902:	7f1b      	ldrb	r3, [r3, #28]
 801c904:	f013 0f02 	tst.w	r3, #2
                            + ( transform->ciphersuite_info->flags &
 801c908:	bf14      	ite	ne
 801c90a:	2310      	movne	r3, #16
 801c90c:	2318      	moveq	r3, #24
                transform->minlen += transform->ivlen;
 801c90e:	60ab      	str	r3, [r5, #8]
 801c910:	e029      	b.n	801c966 <mbedtls_ssl_derive_keys+0x38e>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c912:	2201      	movs	r2, #1
 801c914:	4649      	mov	r1, r9
 801c916:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801c91a:	f7f7 fff9 	bl	8014910 <mbedtls_md_setup>
 801c91e:	4683      	mov	fp, r0
 801c920:	b938      	cbnz	r0, 801c932 <mbedtls_ssl_derive_keys+0x35a>
            ( ret = mbedtls_md_setup( &transform->md_ctx_dec, md_info, 1 ) ) != 0 )
 801c922:	2201      	movs	r2, #1
 801c924:	4649      	mov	r1, r9
 801c926:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801c92a:	f7f7 fff1 	bl	8014910 <mbedtls_md_setup>
        if( ( ret = mbedtls_md_setup( &transform->md_ctx_enc, md_info, 1 ) ) != 0 ||
 801c92e:	4683      	mov	fp, r0
 801c930:	b130      	cbz	r0, 801c940 <mbedtls_ssl_derive_keys+0x368>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_md_setup", ret );
 801c932:	4b78      	ldr	r3, [pc, #480]	; (801cb14 <mbedtls_ssl_derive_keys+0x53c>)
 801c934:	9300      	str	r3, [sp, #0]
 801c936:	f8cd b004 	str.w	fp, [sp, #4]
 801c93a:	f240 23bb 	movw	r3, #699	; 0x2bb
 801c93e:	e6e7      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
        transform->maclen = mbedtls_md_get_size( md_info );
 801c940:	4648      	mov	r0, r9
 801c942:	f7f8 f8ff 	bl	8014b44 <mbedtls_md_get_size>
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c946:	9b07      	ldr	r3, [sp, #28]
        transform->ivlen = cipher_info->iv_size;
 801c948:	f8d8 200c 	ldr.w	r2, [r8, #12]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c94c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
        transform->maclen = mbedtls_md_get_size( md_info );
 801c94e:	6168      	str	r0, [r5, #20]
        if( session->trunc_hmac == MBEDTLS_SSL_TRUNC_HMAC_ENABLED )
 801c950:	2b01      	cmp	r3, #1
            transform->maclen = MBEDTLS_SSL_TRUNCATED_HMAC_LEN;
 801c952:	bf04      	itt	eq
 801c954:	230a      	moveq	r3, #10
 801c956:	616b      	streq	r3, [r5, #20]
        transform->ivlen = cipher_info->iv_size;
 801c958:	60ea      	str	r2, [r5, #12]
        if( cipher_info->mode == MBEDTLS_MODE_STREAM )
 801c95a:	f898 3001 	ldrb.w	r3, [r8, #1]
 801c95e:	6969      	ldr	r1, [r5, #20]
 801c960:	2b07      	cmp	r3, #7
 801c962:	d139      	bne.n	801c9d8 <mbedtls_ssl_derive_keys+0x400>
            transform->minlen = transform->maclen;
 801c964:	60a9      	str	r1, [r5, #8]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "keylen: %d, minlen: %d, ivlen: %d, maclen: %d",
 801c966:	696b      	ldr	r3, [r5, #20]
 801c968:	9304      	str	r3, [sp, #16]
 801c96a:	68eb      	ldr	r3, [r5, #12]
 801c96c:	9303      	str	r3, [sp, #12]
 801c96e:	68ab      	ldr	r3, [r5, #8]
 801c970:	9302      	str	r3, [sp, #8]
 801c972:	686b      	ldr	r3, [r5, #4]
 801c974:	9301      	str	r3, [sp, #4]
 801c976:	4b68      	ldr	r3, [pc, #416]	; (801cb18 <mbedtls_ssl_derive_keys+0x540>)
 801c978:	9300      	str	r3, [sp, #0]
 801c97a:	4a62      	ldr	r2, [pc, #392]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801c97c:	f240 23fd 	movw	r3, #765	; 0x2fd
 801c980:	2103      	movs	r1, #3
 801c982:	4620      	mov	r0, r4
 801c984:	f7f4 f8a2 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801c988:	6823      	ldr	r3, [r4, #0]
 801c98a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801c98e:	07db      	lsls	r3, r3, #31
 801c990:	d434      	bmi.n	801c9fc <mbedtls_ssl_derive_keys+0x424>
        key1 = keyblk + transform->maclen * 2;
 801c992:	f8d5 b014 	ldr.w	fp, [r5, #20]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c996:	686f      	ldr	r7, [r5, #4]
        iv_copy_len = ( transform->fixed_ivlen ) ?
 801c998:	692a      	ldr	r2, [r5, #16]
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c99a:	ab18      	add	r3, sp, #96	; 0x60
 801c99c:	eb07 064b 	add.w	r6, r7, fp, lsl #1
        key1 = keyblk + transform->maclen * 2;
 801c9a0:	ea4f 094b 	mov.w	r9, fp, lsl #1
        key2 = keyblk + transform->maclen * 2 + transform->keylen;
 801c9a4:	441e      	add	r6, r3
        mac_dec = keyblk + transform->maclen;
 801c9a6:	eb03 0a0b 	add.w	sl, r3, fp
                            transform->fixed_ivlen : transform->ivlen;
 801c9aa:	b902      	cbnz	r2, 801c9ae <mbedtls_ssl_derive_keys+0x3d6>
 801c9ac:	68ea      	ldr	r2, [r5, #12]
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
 801c9ae:	9206      	str	r2, [sp, #24]
 801c9b0:	19f1      	adds	r1, r6, r7
 801c9b2:	f105 0018 	add.w	r0, r5, #24
 801c9b6:	f005 fd17 	bl	80223e8 <memcpy>
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
 801c9ba:	9a06      	ldr	r2, [sp, #24]
 801c9bc:	18b9      	adds	r1, r7, r2
 801c9be:	4431      	add	r1, r6
 801c9c0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801c9c4:	f005 fd10 	bl	80223e8 <memcpy>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801c9c8:	6963      	ldr	r3, [r4, #20]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	dc1b      	bgt.n	801ca06 <mbedtls_ssl_derive_keys+0x42e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c9ce:	4b53      	ldr	r3, [pc, #332]	; (801cb1c <mbedtls_ssl_derive_keys+0x544>)
 801c9d0:	9300      	str	r3, [sp, #0]
 801c9d2:	f240 3349 	movw	r3, #841	; 0x349
 801c9d6:	e6ad      	b.n	801c734 <mbedtls_ssl_derive_keys+0x15c>
                                  + cipher_info->block_size
 801c9d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
                                  - transform->maclen % cipher_info->block_size;
 801c9dc:	fbb1 f1f3 	udiv	r1, r1, r3
 801c9e0:	fb03 3301 	mla	r3, r3, r1, r3
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801c9e4:	6961      	ldr	r1, [r4, #20]
                transform->minlen = transform->maclen
 801c9e6:	60ab      	str	r3, [r5, #8]
            if( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_2 ||
 801c9e8:	3902      	subs	r1, #2
 801c9ea:	2901      	cmp	r1, #1
 801c9ec:	d801      	bhi.n	801c9f2 <mbedtls_ssl_derive_keys+0x41a>
                transform->minlen += transform->ivlen;
 801c9ee:	4413      	add	r3, r2
 801c9f0:	e78d      	b.n	801c90e <mbedtls_ssl_derive_keys+0x336>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c9f2:	4b4a      	ldr	r3, [pc, #296]	; (801cb1c <mbedtls_ssl_derive_keys+0x544>)
 801c9f4:	9300      	str	r3, [sp, #0]
 801c9f6:	f240 23f7 	movw	r3, #759	; 0x2f7
 801c9fa:	e69b      	b.n	801c734 <mbedtls_ssl_derive_keys+0x15c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801c9fc:	4b47      	ldr	r3, [pc, #284]	; (801cb1c <mbedtls_ssl_derive_keys+0x544>)
 801c9fe:	9300      	str	r3, [sp, #0]
 801ca00:	f240 332d 	movw	r3, #813	; 0x32d
 801ca04:	e696      	b.n	801c734 <mbedtls_ssl_derive_keys+0x15c>
        mbedtls_md_hmac_starts( &transform->md_ctx_enc, mac_enc, transform->maclen );
 801ca06:	465a      	mov	r2, fp
 801ca08:	a918      	add	r1, sp, #96	; 0x60
 801ca0a:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801ca0e:	f7f7 ffd9 	bl	80149c4 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801ca12:	f105 0750 	add.w	r7, r5, #80	; 0x50
        mbedtls_md_hmac_starts( &transform->md_ctx_dec, mac_dec, transform->maclen );
 801ca16:	696a      	ldr	r2, [r5, #20]
 801ca18:	4651      	mov	r1, sl
 801ca1a:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801ca1e:	f7f7 ffd1 	bl	80149c4 <mbedtls_md_hmac_starts>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_enc,
 801ca22:	4641      	mov	r1, r8
 801ca24:	4638      	mov	r0, r7
 801ca26:	f7f3 fd13 	bl	8010450 <mbedtls_cipher_setup>
 801ca2a:	4683      	mov	fp, r0
 801ca2c:	b128      	cbz	r0, 801ca3a <mbedtls_ssl_derive_keys+0x462>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801ca2e:	4b3c      	ldr	r3, [pc, #240]	; (801cb20 <mbedtls_ssl_derive_keys+0x548>)
 801ca30:	9300      	str	r3, [sp, #0]
 801ca32:	9001      	str	r0, [sp, #4]
 801ca34:	f240 336d 	movw	r3, #877	; 0x36d
 801ca38:	e66a      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setup( &transform->cipher_ctx_dec,
 801ca3a:	3590      	adds	r5, #144	; 0x90
 801ca3c:	4641      	mov	r1, r8
 801ca3e:	4628      	mov	r0, r5
 801ca40:	f7f3 fd06 	bl	8010450 <mbedtls_cipher_setup>
 801ca44:	4683      	mov	fp, r0
 801ca46:	b128      	cbz	r0, 801ca54 <mbedtls_ssl_derive_keys+0x47c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setup", ret );
 801ca48:	4b35      	ldr	r3, [pc, #212]	; (801cb20 <mbedtls_ssl_derive_keys+0x548>)
 801ca4a:	9300      	str	r3, [sp, #0]
 801ca4c:	9001      	str	r0, [sp, #4]
 801ca4e:	f44f 735d 	mov.w	r3, #884	; 0x374
 801ca52:	e65d      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_enc, key1,
 801ca54:	a918      	add	r1, sp, #96	; 0x60
 801ca56:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ca5a:	2301      	movs	r3, #1
 801ca5c:	4449      	add	r1, r9
 801ca5e:	4638      	mov	r0, r7
 801ca60:	f7f3 fb32 	bl	80100c8 <mbedtls_cipher_setkey>
 801ca64:	4683      	mov	fp, r0
 801ca66:	b128      	cbz	r0, 801ca74 <mbedtls_ssl_derive_keys+0x49c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801ca68:	4b2e      	ldr	r3, [pc, #184]	; (801cb24 <mbedtls_ssl_derive_keys+0x54c>)
 801ca6a:	9300      	str	r3, [sp, #0]
 801ca6c:	9001      	str	r0, [sp, #4]
 801ca6e:	f44f 735f 	mov.w	r3, #892	; 0x37c
 801ca72:	e64d      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
    if( ( ret = mbedtls_cipher_setkey( &transform->cipher_ctx_dec, key2,
 801ca74:	4603      	mov	r3, r0
 801ca76:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801ca7a:	4631      	mov	r1, r6
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	f7f3 fb23 	bl	80100c8 <mbedtls_cipher_setkey>
 801ca82:	4683      	mov	fp, r0
 801ca84:	b128      	cbz	r0, 801ca92 <mbedtls_ssl_derive_keys+0x4ba>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_setkey", ret );
 801ca86:	4b27      	ldr	r3, [pc, #156]	; (801cb24 <mbedtls_ssl_derive_keys+0x54c>)
 801ca88:	9300      	str	r3, [sp, #0]
 801ca8a:	9001      	str	r0, [sp, #4]
 801ca8c:	f44f 7361 	mov.w	r3, #900	; 0x384
 801ca90:	e63e      	b.n	801c710 <mbedtls_ssl_derive_keys+0x138>
    if( cipher_info->mode == MBEDTLS_MODE_CBC )
 801ca92:	f898 3001 	ldrb.w	r3, [r8, #1]
 801ca96:	2b02      	cmp	r3, #2
 801ca98:	d123      	bne.n	801cae2 <mbedtls_ssl_derive_keys+0x50a>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_enc,
 801ca9a:	2104      	movs	r1, #4
 801ca9c:	4638      	mov	r0, r7
 801ca9e:	f7f3 fc99 	bl	80103d4 <mbedtls_cipher_set_padding_mode>
 801caa2:	4606      	mov	r6, r0
 801caa4:	b158      	cbz	r0, 801cabe <mbedtls_ssl_derive_keys+0x4e6>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801caa6:	4b20      	ldr	r3, [pc, #128]	; (801cb28 <mbedtls_ssl_derive_keys+0x550>)
 801caa8:	9001      	str	r0, [sp, #4]
 801caaa:	9300      	str	r3, [sp, #0]
 801caac:	4a15      	ldr	r2, [pc, #84]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801caae:	f240 338e 	movw	r3, #910	; 0x38e
 801cab2:	2101      	movs	r1, #1
 801cab4:	4620      	mov	r0, r4
 801cab6:	f7f4 f839 	bl	8010b2c <mbedtls_debug_print_ret>
            return( ret );
 801caba:	46b3      	mov	fp, r6
 801cabc:	e5b0      	b.n	801c620 <mbedtls_ssl_derive_keys+0x48>
        if( ( ret = mbedtls_cipher_set_padding_mode( &transform->cipher_ctx_dec,
 801cabe:	4628      	mov	r0, r5
 801cac0:	2104      	movs	r1, #4
 801cac2:	f7f3 fc87 	bl	80103d4 <mbedtls_cipher_set_padding_mode>
 801cac6:	4605      	mov	r5, r0
 801cac8:	b158      	cbz	r0, 801cae2 <mbedtls_ssl_derive_keys+0x50a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_set_padding_mode", ret );
 801caca:	4b17      	ldr	r3, [pc, #92]	; (801cb28 <mbedtls_ssl_derive_keys+0x550>)
 801cacc:	9001      	str	r0, [sp, #4]
 801cace:	9300      	str	r3, [sp, #0]
 801cad0:	4a0c      	ldr	r2, [pc, #48]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801cad2:	f240 3395 	movw	r3, #917	; 0x395
 801cad6:	2101      	movs	r1, #1
 801cad8:	4620      	mov	r0, r4
 801cada:	f7f4 f827 	bl	8010b2c <mbedtls_debug_print_ret>
            return( ret );
 801cade:	46ab      	mov	fp, r5
 801cae0:	e59e      	b.n	801c620 <mbedtls_ssl_derive_keys+0x48>
    mbedtls_zeroize( keyblk, sizeof( keyblk ) );
 801cae2:	a818      	add	r0, sp, #96	; 0x60
 801cae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cae8:	f7ff fb0e 	bl	801c108 <mbedtls_zeroize>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= derive keys" ) );
 801caec:	4b0f      	ldr	r3, [pc, #60]	; (801cb2c <mbedtls_ssl_derive_keys+0x554>)
 801caee:	9300      	str	r3, [sp, #0]
 801caf0:	4a04      	ldr	r2, [pc, #16]	; (801cb04 <mbedtls_ssl_derive_keys+0x52c>)
 801caf2:	f240 33bd 	movw	r3, #957	; 0x3bd
 801caf6:	2102      	movs	r1, #2
 801caf8:	4620      	mov	r0, r4
 801cafa:	f7f3 ffe7 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801cafe:	e58f      	b.n	801c620 <mbedtls_ssl_derive_keys+0x48>
 801cb00:	08032100 	.word	0x08032100
 801cb04:	08031ee5 	.word	0x08031ee5
 801cb08:	080320b4 	.word	0x080320b4
 801cb0c:	080314ee 	.word	0x080314ee
 801cb10:	08032111 	.word	0x08032111
 801cb14:	08031b41 	.word	0x08031b41
 801cb18:	0803211b 	.word	0x0803211b
 801cb1c:	08031a15 	.word	0x08031a15
 801cb20:	08032149 	.word	0x08032149
 801cb24:	0803215e 	.word	0x0803215e
 801cb28:	08032174 	.word	0x08032174
 801cb2c:	08032194 	.word	0x08032194

0801cb30 <mbedtls_ssl_fetch_input>:
{
 801cb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb34:	b086      	sub	sp, #24
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801cb36:	4b43      	ldr	r3, [pc, #268]	; (801cc44 <mbedtls_ssl_fetch_input+0x114>)
 801cb38:	9300      	str	r3, [sp, #0]
{
 801cb3a:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801cb3c:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 801cb40:	4a41      	ldr	r2, [pc, #260]	; (801cc48 <mbedtls_ssl_fetch_input+0x118>)
{
 801cb42:	460e      	mov	r6, r1
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> fetch input" ) );
 801cb44:	2102      	movs	r1, #2
 801cb46:	f7f3 ffc1 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->f_recv == NULL && ssl->f_recv_timeout == NULL )
 801cb4a:	69e3      	ldr	r3, [r4, #28]
 801cb4c:	b97b      	cbnz	r3, 801cb6e <mbedtls_ssl_fetch_input+0x3e>
 801cb4e:	6a23      	ldr	r3, [r4, #32]
 801cb50:	b96b      	cbnz	r3, 801cb6e <mbedtls_ssl_fetch_input+0x3e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cb52:	4b3e      	ldr	r3, [pc, #248]	; (801cc4c <mbedtls_ssl_fetch_input+0x11c>)
 801cb54:	9300      	str	r3, [sp, #0]
 801cb56:	f640 03a4 	movw	r3, #2212	; 0x8a4
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801cb5a:	4a3b      	ldr	r2, [pc, #236]	; (801cc48 <mbedtls_ssl_fetch_input+0x118>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801cb5c:	4d3c      	ldr	r5, [pc, #240]	; (801cc50 <mbedtls_ssl_fetch_input+0x120>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801cb5e:	2101      	movs	r1, #1
 801cb60:	4620      	mov	r0, r4
 801cb62:	f7f3 ffb3 	bl	8010acc <mbedtls_debug_print_msg>
}
 801cb66:	4628      	mov	r0, r5
 801cb68:	b006      	add	sp, #24
 801cb6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( nb_want > MBEDTLS_SSL_BUFFER_LEN - (size_t)( ssl->in_hdr - ssl->in_buf ) )
 801cb6e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801cb70:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801cb72:	1a9b      	subs	r3, r3, r2
 801cb74:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801cb78:	3315      	adds	r3, #21
 801cb7a:	42b3      	cmp	r3, r6
 801cb7c:	d204      	bcs.n	801cb88 <mbedtls_ssl_fetch_input+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "requesting more data than fits" ) );
 801cb7e:	4b35      	ldr	r3, [pc, #212]	; (801cc54 <mbedtls_ssl_fetch_input+0x124>)
 801cb80:	9300      	str	r3, [sp, #0]
 801cb82:	f640 03ab 	movw	r3, #2219	; 0x8ab
 801cb86:	e7e8      	b.n	801cb5a <mbedtls_ssl_fetch_input+0x2a>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801cb88:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cb8a:	4f33      	ldr	r7, [pc, #204]	; (801cc58 <mbedtls_ssl_fetch_input+0x128>)
 801cb8c:	9301      	str	r3, [sp, #4]
 801cb8e:	4a2e      	ldr	r2, [pc, #184]	; (801cc48 <mbedtls_ssl_fetch_input+0x118>)
 801cb90:	9602      	str	r6, [sp, #8]
 801cb92:	9700      	str	r7, [sp, #0]
 801cb94:	f640 133d 	movw	r3, #2365	; 0x93d
 801cb98:	2102      	movs	r1, #2
 801cb9a:	4620      	mov	r0, r4
 801cb9c:	f7f3 ff96 	bl	8010acc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801cba0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 801cc68 <mbedtls_ssl_fetch_input+0x138>
 801cba4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 801cc48 <mbedtls_ssl_fetch_input+0x118>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801cba8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801cc6c <mbedtls_ssl_fetch_input+0x13c>
        while( ssl->in_left < nb_want )
 801cbac:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801cbae:	42b2      	cmp	r2, r6
 801cbb0:	d30a      	bcc.n	801cbc8 <mbedtls_ssl_fetch_input+0x98>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= fetch input" ) );
 801cbb2:	4b2a      	ldr	r3, [pc, #168]	; (801cc5c <mbedtls_ssl_fetch_input+0x12c>)
 801cbb4:	9300      	str	r3, [sp, #0]
 801cbb6:	4a24      	ldr	r2, [pc, #144]	; (801cc48 <mbedtls_ssl_fetch_input+0x118>)
 801cbb8:	f640 1363 	movw	r3, #2403	; 0x963
 801cbbc:	2102      	movs	r1, #2
 801cbbe:	4620      	mov	r0, r4
 801cbc0:	f7f3 ff84 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801cbc4:	2500      	movs	r5, #0
 801cbc6:	e7ce      	b.n	801cb66 <mbedtls_ssl_fetch_input+0x36>
    if( ssl->f_get_timer == NULL )
 801cbc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
            len = nb_want - ssl->in_left;
 801cbca:	1ab2      	subs	r2, r6, r2
    if( ssl->f_get_timer == NULL )
 801cbcc:	b353      	cbz	r3, 801cc24 <mbedtls_ssl_fetch_input+0xf4>
    if( ssl->f_get_timer( ssl->p_timer ) == 2 )
 801cbce:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801cbd0:	9205      	str	r2, [sp, #20]
 801cbd2:	4798      	blx	r3
 801cbd4:	2802      	cmp	r0, #2
 801cbd6:	9a05      	ldr	r2, [sp, #20]
 801cbd8:	d124      	bne.n	801cc24 <mbedtls_ssl_fetch_input+0xf4>
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "timer expired" ) );
 801cbda:	f8cd 9000 	str.w	r9, [sp]
 801cbde:	2360      	movs	r3, #96	; 0x60
 801cbe0:	4642      	mov	r2, r8
 801cbe2:	2103      	movs	r1, #3
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f7f3 ff71 	bl	8010acc <mbedtls_debug_print_msg>
                ret = MBEDTLS_ERR_SSL_TIMEOUT;
 801cbea:	4655      	mov	r5, sl
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "in_left: %d, nb_want: %d",
 801cbec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cbee:	9602      	str	r6, [sp, #8]
 801cbf0:	e9cd 7300 	strd	r7, r3, [sp]
 801cbf4:	4642      	mov	r2, r8
 801cbf6:	f640 1355 	movw	r3, #2389	; 0x955
 801cbfa:	2102      	movs	r1, #2
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	f7f3 ff65 	bl	8010acc <mbedtls_debug_print_msg>
            MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_recv(_timeout)", ret );
 801cc02:	4b17      	ldr	r3, [pc, #92]	; (801cc60 <mbedtls_ssl_fetch_input+0x130>)
 801cc04:	9300      	str	r3, [sp, #0]
 801cc06:	9501      	str	r5, [sp, #4]
 801cc08:	f640 1357 	movw	r3, #2391	; 0x957
 801cc0c:	4642      	mov	r2, r8
 801cc0e:	2102      	movs	r1, #2
 801cc10:	4620      	mov	r0, r4
 801cc12:	f7f3 ff8b 	bl	8010b2c <mbedtls_debug_print_ret>
            if( ret == 0 )
 801cc16:	2d00      	cmp	r5, #0
 801cc18:	d012      	beq.n	801cc40 <mbedtls_ssl_fetch_input+0x110>
            if( ret < 0 )
 801cc1a:	dba4      	blt.n	801cb66 <mbedtls_ssl_fetch_input+0x36>
            ssl->in_left += ret;
 801cc1c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 801cc1e:	4428      	add	r0, r5
 801cc20:	67e0      	str	r0, [r4, #124]	; 0x7c
 801cc22:	e7c3      	b.n	801cbac <mbedtls_ssl_fetch_input+0x7c>
                if( ssl->f_recv_timeout != NULL )
 801cc24:	e9d4 5008 	ldrd	r5, r0, [r4, #32]
 801cc28:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801cc2a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 801cc2c:	4419      	add	r1, r3
 801cc2e:	b125      	cbz	r5, 801cc3a <mbedtls_ssl_fetch_input+0x10a>
                    ret = ssl->f_recv_timeout( ssl->p_bio,
 801cc30:	6823      	ldr	r3, [r4, #0]
 801cc32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc34:	47a8      	blx	r5
                    ret = ssl->f_recv( ssl->p_bio,
 801cc36:	4605      	mov	r5, r0
 801cc38:	e7d8      	b.n	801cbec <mbedtls_ssl_fetch_input+0xbc>
 801cc3a:	69e3      	ldr	r3, [r4, #28]
 801cc3c:	4798      	blx	r3
 801cc3e:	e7fa      	b.n	801cc36 <mbedtls_ssl_fetch_input+0x106>
                return( MBEDTLS_ERR_SSL_CONN_EOF );
 801cc40:	4d08      	ldr	r5, [pc, #32]	; (801cc64 <mbedtls_ssl_fetch_input+0x134>)
 801cc42:	e790      	b.n	801cb66 <mbedtls_ssl_fetch_input+0x36>
 801cc44:	080321a3 	.word	0x080321a3
 801cc48:	08031ee5 	.word	0x08031ee5
 801cc4c:	080321b2 	.word	0x080321b2
 801cc50:	ffff8f00 	.word	0xffff8f00
 801cc54:	080321ee 	.word	0x080321ee
 801cc58:	0803220d 	.word	0x0803220d
 801cc5c:	0803224a 	.word	0x0803224a
 801cc60:	08032234 	.word	0x08032234
 801cc64:	ffff8d80 	.word	0xffff8d80
 801cc68:	08032226 	.word	0x08032226
 801cc6c:	ffff9800 	.word	0xffff9800

0801cc70 <mbedtls_ssl_flush_output>:
{
 801cc70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801cc74:	4b3b      	ldr	r3, [pc, #236]	; (801cd64 <mbedtls_ssl_flush_output+0xf4>)
 801cc76:	9300      	str	r3, [sp, #0]
{
 801cc78:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> flush output" ) );
 801cc7a:	f44f 6317 	mov.w	r3, #2416	; 0x970
 801cc7e:	4a3a      	ldr	r2, [pc, #232]	; (801cd68 <mbedtls_ssl_flush_output+0xf8>)
 801cc80:	2102      	movs	r1, #2
 801cc82:	f7f3 ff23 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->f_send == NULL )
 801cc86:	69a3      	ldr	r3, [r4, #24]
 801cc88:	b96b      	cbnz	r3, 801cca6 <mbedtls_ssl_flush_output+0x36>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cc8a:	4b38      	ldr	r3, [pc, #224]	; (801cd6c <mbedtls_ssl_flush_output+0xfc>)
 801cc8c:	9300      	str	r3, [sp, #0]
 801cc8e:	4a36      	ldr	r2, [pc, #216]	; (801cd68 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801cc90:	4d37      	ldr	r5, [pc, #220]	; (801cd70 <mbedtls_ssl_flush_output+0x100>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "Bad usage of mbedtls_ssl_set_bio() "
 801cc92:	f640 1374 	movw	r3, #2420	; 0x974
 801cc96:	2101      	movs	r1, #1
 801cc98:	4620      	mov	r0, r4
 801cc9a:	f7f3 ff17 	bl	8010acc <mbedtls_debug_print_msg>
}
 801cc9e:	4628      	mov	r0, r5
 801cca0:	b004      	add	sp, #16
 801cca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ssl->out_left == 0 )
 801cca6:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 801ccaa:	b1ed      	cbz	r5, 801cce8 <mbedtls_ssl_flush_output+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801ccac:	4f31      	ldr	r7, [pc, #196]	; (801cd74 <mbedtls_ssl_flush_output+0x104>)
 801ccae:	4e2e      	ldr	r6, [pc, #184]	; (801cd68 <mbedtls_ssl_flush_output+0xf8>)
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801ccb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801cd84 <mbedtls_ssl_flush_output+0x114>
    while( ssl->out_left > 0 )
 801ccb4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 801ccb8:	bb03      	cbnz	r3, 801ccfc <mbedtls_ssl_flush_output+0x8c>
 801ccba:	2207      	movs	r2, #7
        if( ++ssl->out_ctr[i - 1] != 0 )
 801ccbc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801ccc0:	5c8b      	ldrb	r3, [r1, r2]
 801ccc2:	3301      	adds	r3, #1
 801ccc4:	b2db      	uxtb	r3, r3
 801ccc6:	548b      	strb	r3, [r1, r2]
 801ccc8:	3a01      	subs	r2, #1
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d13f      	bne.n	801cd4e <mbedtls_ssl_flush_output+0xde>
    for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801ccce:	1c53      	adds	r3, r2, #1
 801ccd0:	d1f4      	bne.n	801ccbc <mbedtls_ssl_flush_output+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801ccd2:	4b29      	ldr	r3, [pc, #164]	; (801cd78 <mbedtls_ssl_flush_output+0x108>)
 801ccd4:	9300      	str	r3, [sp, #0]
 801ccd6:	4a24      	ldr	r2, [pc, #144]	; (801cd68 <mbedtls_ssl_flush_output+0xf8>)
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801ccd8:	4d28      	ldr	r5, [pc, #160]	; (801cd7c <mbedtls_ssl_flush_output+0x10c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "outgoing message counter would wrap" ) );
 801ccda:	f640 1398 	movw	r3, #2456	; 0x998
 801ccde:	2101      	movs	r1, #1
 801cce0:	4620      	mov	r0, r4
 801cce2:	f7f3 fef3 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801cce6:	e7da      	b.n	801cc9e <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cce8:	4b25      	ldr	r3, [pc, #148]	; (801cd80 <mbedtls_ssl_flush_output+0x110>)
 801ccea:	9300      	str	r3, [sp, #0]
 801ccec:	4a1e      	ldr	r2, [pc, #120]	; (801cd68 <mbedtls_ssl_flush_output+0xf8>)
 801ccee:	f640 137c 	movw	r3, #2428	; 0x97c
 801ccf2:	2102      	movs	r1, #2
 801ccf4:	4620      	mov	r0, r4
 801ccf6:	f7f3 fee9 	bl	8010acc <mbedtls_debug_print_msg>
        return( 0 );
 801ccfa:	e7d0      	b.n	801cc9e <mbedtls_ssl_flush_output+0x2e>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "message length: %d, out_left: %d",
 801ccfc:	9302      	str	r3, [sp, #8]
 801ccfe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cd02:	3305      	adds	r3, #5
 801cd04:	e9cd 7300 	strd	r7, r3, [sp]
 801cd08:	4632      	mov	r2, r6
 801cd0a:	f640 1382 	movw	r3, #2434	; 0x982
 801cd0e:	2102      	movs	r1, #2
 801cd10:	4620      	mov	r0, r4
 801cd12:	f7f3 fedb 	bl	8010acc <mbedtls_debug_print_msg>
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cd16:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801cd1a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cd1e:	69a3      	ldr	r3, [r4, #24]
        buf = ssl->out_hdr + mbedtls_ssl_hdr_len( ssl ) +
 801cd20:	3105      	adds	r1, #5
              ssl->out_msglen - ssl->out_left;
 801cd22:	1a89      	subs	r1, r1, r2
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cd24:	4401      	add	r1, r0
 801cd26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801cd28:	4798      	blx	r3
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cd2a:	f640 1389 	movw	r3, #2441	; 0x989
 801cd2e:	e9cd 8000 	strd	r8, r0, [sp]
        ret = ssl->f_send( ssl->p_bio, buf, ssl->out_left );
 801cd32:	4605      	mov	r5, r0
        MBEDTLS_SSL_DEBUG_RET( 2, "ssl->f_send", ret );
 801cd34:	4632      	mov	r2, r6
 801cd36:	2102      	movs	r1, #2
 801cd38:	4620      	mov	r0, r4
 801cd3a:	f7f3 fef7 	bl	8010b2c <mbedtls_debug_print_ret>
        if( ret <= 0 )
 801cd3e:	2d00      	cmp	r5, #0
 801cd40:	ddad      	ble.n	801cc9e <mbedtls_ssl_flush_output+0x2e>
        ssl->out_left -= ret;
 801cd42:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 801cd46:	1b40      	subs	r0, r0, r5
 801cd48:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
 801cd4c:	e7b2      	b.n	801ccb4 <mbedtls_ssl_flush_output+0x44>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= flush output" ) );
 801cd4e:	4b0c      	ldr	r3, [pc, #48]	; (801cd80 <mbedtls_ssl_flush_output+0x110>)
 801cd50:	9300      	str	r3, [sp, #0]
 801cd52:	4a05      	ldr	r2, [pc, #20]	; (801cd68 <mbedtls_ssl_flush_output+0xf8>)
 801cd54:	f640 139c 	movw	r3, #2460	; 0x99c
 801cd58:	2102      	movs	r1, #2
 801cd5a:	4620      	mov	r0, r4
 801cd5c:	f7f3 feb6 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801cd60:	2500      	movs	r5, #0
 801cd62:	e79c      	b.n	801cc9e <mbedtls_ssl_flush_output+0x2e>
 801cd64:	08032259 	.word	0x08032259
 801cd68:	08031ee5 	.word	0x08031ee5
 801cd6c:	080321b2 	.word	0x080321b2
 801cd70:	ffff8f00 	.word	0xffff8f00
 801cd74:	08032279 	.word	0x08032279
 801cd78:	080322a6 	.word	0x080322a6
 801cd7c:	ffff9480 	.word	0xffff9480
 801cd80:	08032269 	.word	0x08032269
 801cd84:	0803229a 	.word	0x0803229a

0801cd88 <mbedtls_ssl_write_record>:
{
 801cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd8c:	b08f      	sub	sp, #60	; 0x3c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cd8e:	4bba      	ldr	r3, [pc, #744]	; (801d078 <mbedtls_ssl_write_record+0x2f0>)
    size_t len = ssl->out_msglen;
 801cd90:	f8d0 50a8 	ldr.w	r5, [r0, #168]	; 0xa8
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cd94:	4ab9      	ldr	r2, [pc, #740]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801cd96:	9300      	str	r3, [sp, #0]
{
 801cd98:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write record" ) );
 801cd9a:	f640 238d 	movw	r3, #2701	; 0xa8d
 801cd9e:	2102      	movs	r1, #2
 801cda0:	f7f3 fe94 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->out_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801cda4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801cda8:	2b16      	cmp	r3, #22
 801cdaa:	d126      	bne.n	801cdfa <mbedtls_ssl_write_record+0x72>
        out_msg_type = ssl->out_msg[0];
 801cdac:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cdb0:	780a      	ldrb	r2, [r1, #0]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST &&
 801cdb2:	b17a      	cbz	r2, 801cdd4 <mbedtls_ssl_write_record+0x4c>
 801cdb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cdb6:	b96b      	cbnz	r3, 801cdd4 <mbedtls_ssl_write_record+0x4c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cdb8:	4bb1      	ldr	r3, [pc, #708]	; (801d080 <mbedtls_ssl_write_record+0x2f8>)
 801cdba:	9300      	str	r3, [sp, #0]
 801cdbc:	4aaf      	ldr	r2, [pc, #700]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801cdbe:	4db1      	ldr	r5, [pc, #708]	; (801d084 <mbedtls_ssl_write_record+0x2fc>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cdc0:	f640 239f 	movw	r3, #2719	; 0xa9f
 801cdc4:	2101      	movs	r1, #1
 801cdc6:	4620      	mov	r0, r4
 801cdc8:	f7f3 fe80 	bl	8010acc <mbedtls_debug_print_msg>
}
 801cdcc:	4628      	mov	r0, r5
 801cdce:	b00f      	add	sp, #60	; 0x3c
 801cdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssl->out_msg[1] = (unsigned char)( ( len - 4 ) >> 16 );
 801cdd4:	1f2b      	subs	r3, r5, #4
 801cdd6:	0c18      	lsrs	r0, r3, #16
 801cdd8:	7048      	strb	r0, [r1, #1]
        ssl->out_msg[2] = (unsigned char)( ( len - 4 ) >>  8 );
 801cdda:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cdde:	0a18      	lsrs	r0, r3, #8
 801cde0:	7088      	strb	r0, [r1, #2]
        ssl->out_msg[3] = (unsigned char)( ( len - 4 )       );
 801cde2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cde6:	70cb      	strb	r3, [r1, #3]
        if( out_msg_type != MBEDTLS_SSL_HS_HELLO_REQUEST )
 801cde8:	b13a      	cbz	r2, 801cdfa <mbedtls_ssl_write_record+0x72>
            ssl->handshake->update_checksum( ssl, ssl->out_msg, len );
 801cdea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cdec:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cdf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801cdf4:	462a      	mov	r2, r5
 801cdf6:	4620      	mov	r0, r4
 801cdf8:	4798      	blx	r3
        ssl->out_hdr[0] = (unsigned char) ssl->out_msgtype;
 801cdfa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801cdfe:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 801ce02:	701a      	strb	r2, [r3, #0]
                           ssl->conf->transport, ssl->out_hdr + 1 );
 801ce04:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
 801ce08:	6962      	ldr	r2, [r4, #20]
    else
#else
    ((void) transport);
#endif
    {
        ver[0] = (unsigned char) major;
 801ce0a:	6921      	ldr	r1, [r4, #16]
 801ce0c:	7059      	strb	r1, [r3, #1]
        ver[1] = (unsigned char) minor;
 801ce0e:	709a      	strb	r2, [r3, #2]
        ssl->out_len[0] = (unsigned char)( len >> 8 );
 801ce10:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801ce14:	0a2a      	lsrs	r2, r5, #8
 801ce16:	701a      	strb	r2, [r3, #0]
        ssl->out_len[1] = (unsigned char)( len      );
 801ce18:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 801ce1c:	705d      	strb	r5, [r3, #1]
        if( ssl->transform_out != NULL )
 801ce1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	f000 81e0 	beq.w	801d1e6 <mbedtls_ssl_write_record+0x45e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> encrypt buf" ) );
 801ce26:	4b98      	ldr	r3, [pc, #608]	; (801d088 <mbedtls_ssl_write_record+0x300>)
 801ce28:	9300      	str	r3, [sp, #0]
 801ce2a:	4a94      	ldr	r2, [pc, #592]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801ce2c:	f240 43ea 	movw	r3, #1258	; 0x4ea
 801ce30:	2102      	movs	r1, #2
 801ce32:	4620      	mov	r0, r4
 801ce34:	f7f3 fe4a 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->session_out == NULL || ssl->transform_out == NULL )
 801ce38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ce3a:	b10b      	cbz	r3, 801ce40 <mbedtls_ssl_write_record+0xb8>
 801ce3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce3e:	b953      	cbnz	r3, 801ce56 <mbedtls_ssl_write_record+0xce>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce40:	4b8f      	ldr	r3, [pc, #572]	; (801d080 <mbedtls_ssl_write_record+0x2f8>)
 801ce42:	9300      	str	r3, [sp, #0]
 801ce44:	f240 43ee 	movw	r3, #1262	; 0x4ee
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce48:	4a8c      	ldr	r2, [pc, #560]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ce4a:	4d8e      	ldr	r5, [pc, #568]	; (801d084 <mbedtls_ssl_write_record+0x2fc>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801ce4c:	2101      	movs	r1, #1
 801ce4e:	4620      	mov	r0, r4
 801ce50:	f7f3 fe3c 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801ce54:	e0fd      	b.n	801d052 <mbedtls_ssl_write_record+0x2ca>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801ce56:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ce58:	b105      	cbz	r5, 801ce5c <mbedtls_ssl_write_record+0xd4>
    return ctx->cipher_info->mode;
 801ce5a:	786d      	ldrb	r5, [r5, #1]
    MBEDTLS_SSL_DEBUG_BUF( 4, "before encrypt: output payload",
 801ce5c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801ce60:	9302      	str	r3, [sp, #8]
 801ce62:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801ce66:	9301      	str	r3, [sp, #4]
 801ce68:	4b88      	ldr	r3, [pc, #544]	; (801d08c <mbedtls_ssl_write_record+0x304>)
 801ce6a:	9300      	str	r3, [sp, #0]
 801ce6c:	4a83      	ldr	r2, [pc, #524]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801ce6e:	f240 43f4 	movw	r3, #1268	; 0x4f4
 801ce72:	2104      	movs	r1, #4
 801ce74:	4620      	mov	r0, r4
 801ce76:	f7f3 fe89 	bl	8010b8c <mbedtls_debug_print_buf>
    if( mode == MBEDTLS_MODE_STREAM ||
 801ce7a:	2d07      	cmp	r5, #7
 801ce7c:	d002      	beq.n	801ce84 <mbedtls_ssl_write_record+0xfc>
 801ce7e:	2d02      	cmp	r5, #2
 801ce80:	f040 808d 	bne.w	801cf9e <mbedtls_ssl_write_record+0x216>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801ce84:	6963      	ldr	r3, [r4, #20]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	f340 8084 	ble.w	801cf94 <mbedtls_ssl_write_record+0x20c>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_ctr, 8 );
 801ce8c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ce8e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801ce92:	2208      	movs	r2, #8
 801ce94:	3038      	adds	r0, #56	; 0x38
 801ce96:	f7f7 fdf5 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_hdr, 3 );
 801ce9a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ce9c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801cea0:	2203      	movs	r2, #3
 801cea2:	3038      	adds	r0, #56	; 0x38
 801cea4:	f7f7 fdee 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc, ssl->out_len, 2 );
 801cea8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ceaa:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 801ceae:	2202      	movs	r2, #2
 801ceb0:	3038      	adds	r0, #56	; 0x38
 801ceb2:	f7f7 fde7 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_out->md_ctx_enc,
 801ceb6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ceb8:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cebc:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cec0:	3038      	adds	r0, #56	; 0x38
 801cec2:	f7f7 fddf 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_out->md_ctx_enc,
 801cec6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801ceca:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801cece:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ced0:	4419      	add	r1, r3
 801ced2:	3038      	adds	r0, #56	; 0x38
 801ced4:	f7f7 fde6 	bl	8014aa4 <mbedtls_md_hmac_finish>
            mbedtls_md_hmac_reset( &ssl->transform_out->md_ctx_enc );
 801ced8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801ceda:	3038      	adds	r0, #56	; 0x38
 801cedc:	f7f7 fe0e 	bl	8014afc <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac",
 801cee0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cee2:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 801cee6:	695b      	ldr	r3, [r3, #20]
 801cee8:	9302      	str	r3, [sp, #8]
 801ceea:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801ceee:	4413      	add	r3, r2
 801cef0:	9301      	str	r3, [sp, #4]
 801cef2:	4b67      	ldr	r3, [pc, #412]	; (801d090 <mbedtls_ssl_write_record+0x308>)
 801cef4:	4a61      	ldr	r2, [pc, #388]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801cef6:	9300      	str	r3, [sp, #0]
 801cef8:	2104      	movs	r1, #4
 801cefa:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 801cefe:	4620      	mov	r0, r4
 801cf00:	f7f3 fe44 	bl	8010b8c <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->maclen;
 801cf04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cf06:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801cf0a:	6952      	ldr	r2, [r2, #20]
 801cf0c:	4413      	add	r3, r2
 801cf0e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        auth_done++;
 801cf12:	f04f 0801 	mov.w	r8, #1
    if( mode == MBEDTLS_MODE_GCM ||
 801cf16:	2d06      	cmp	r5, #6
 801cf18:	d002      	beq.n	801cf20 <mbedtls_ssl_write_record+0x198>
 801cf1a:	2d08      	cmp	r5, #8
 801cf1c:	f040 80de 	bne.w	801d0dc <mbedtls_ssl_write_record+0x354>
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cf20:	6c23      	ldr	r3, [r4, #64]	; 0x40
        memcpy( add_data, ssl->out_ctr, 8 );
 801cf22:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cf26:	681b      	ldr	r3, [r3, #0]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cf28:	6810      	ldr	r0, [r2, #0]
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cf2a:	7f1b      	ldrb	r3, [r3, #28]
        memcpy( add_data, ssl->out_ctr, 8 );
 801cf2c:	6851      	ldr	r1, [r2, #4]
 801cf2e:	ad0a      	add	r5, sp, #40	; 0x28
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cf30:	f013 0f02 	tst.w	r3, #2
        memcpy( add_data, ssl->out_ctr, 8 );
 801cf34:	462b      	mov	r3, r5
 801cf36:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->out_msgtype;
 801cf38:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 801cf3c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801cf40:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801cf44:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cf48:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        ver[0] = (unsigned char) major;
 801cf4c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        add_data[12] = ssl->out_msglen & 0xFF;
 801cf50:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cf54:	ea4f 2213 	mov.w	r2, r3, lsr #8
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cf58:	f04f 0b0d 	mov.w	fp, #13
 801cf5c:	4b4d      	ldr	r3, [pc, #308]	; (801d094 <mbedtls_ssl_write_record+0x30c>)
        add_data[11] = ( ssl->out_msglen >> 8 ) & 0xFF;
 801cf5e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cf62:	9300      	str	r3, [sp, #0]
 801cf64:	4a45      	ldr	r2, [pc, #276]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801cf66:	f240 535a 	movw	r3, #1370	; 0x55a
 801cf6a:	f04f 0104 	mov.w	r1, #4
 801cf6e:	e9cd 5b01 	strd	r5, fp, [sp, #4]
 801cf72:	4620      	mov	r0, r4
        unsigned char taglen = ssl->transform_out->ciphersuite_info->flags &
 801cf74:	bf14      	ite	ne
 801cf76:	2708      	movne	r7, #8
 801cf78:	2710      	moveq	r7, #16
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801cf7a:	f7f3 fe07 	bl	8010b8c <mbedtls_debug_print_buf>
        if( ssl->transform_out->ivlen - ssl->transform_out->fixed_ivlen != 8 )
 801cf7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cf80:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
 801cf84:	1a52      	subs	r2, r2, r1
 801cf86:	2a08      	cmp	r2, #8
 801cf88:	d00c      	beq.n	801cfa4 <mbedtls_ssl_write_record+0x21c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cf8a:	4b3d      	ldr	r3, [pc, #244]	; (801d080 <mbedtls_ssl_write_record+0x2f8>)
 801cf8c:	9300      	str	r3, [sp, #0]
 801cf8e:	f240 5363 	movw	r3, #1379	; 0x563
 801cf92:	e759      	b.n	801ce48 <mbedtls_ssl_write_record+0xc0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801cf94:	4b3a      	ldr	r3, [pc, #232]	; (801d080 <mbedtls_ssl_write_record+0x2f8>)
 801cf96:	9300      	str	r3, [sp, #0]
 801cf98:	f240 531c 	movw	r3, #1308	; 0x51c
 801cf9c:	e754      	b.n	801ce48 <mbedtls_ssl_write_record+0xc0>
    int auth_done = 0;
 801cf9e:	f04f 0800 	mov.w	r8, #0
 801cfa2:	e7b8      	b.n	801cf16 <mbedtls_ssl_write_record+0x18e>
        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
 801cfa4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801cfa8:	3318      	adds	r3, #24
 801cfaa:	6802      	ldr	r2, [r0, #0]
 801cfac:	505a      	str	r2, [r3, r1]
 801cfae:	185e      	adds	r6, r3, r1
 801cfb0:	6842      	ldr	r2, [r0, #4]
 801cfb2:	6072      	str	r2, [r6, #4]
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );
 801cfb4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 801cfb8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 801cfbc:	680b      	ldr	r3, [r1, #0]
 801cfbe:	6013      	str	r3, [r2, #0]
 801cfc0:	684b      	ldr	r3, [r1, #4]
 801cfc2:	6053      	str	r3, [r2, #4]
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->out_iv,
 801cfc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801cfc6:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801cfca:	1a9b      	subs	r3, r3, r2
 801cfcc:	9302      	str	r3, [sp, #8]
 801cfce:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 801cfd2:	9301      	str	r3, [sp, #4]
 801cfd4:	4b30      	ldr	r3, [pc, #192]	; (801d098 <mbedtls_ssl_write_record+0x310>)
 801cfd6:	4a29      	ldr	r2, [pc, #164]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801cfd8:	9300      	str	r3, [sp, #0]
 801cfda:	2104      	movs	r1, #4
 801cfdc:	f240 536b 	movw	r3, #1387	; 0x56b
 801cfe0:	4620      	mov	r0, r4
 801cfe2:	f7f3 fdd3 	bl	8010b8c <mbedtls_debug_print_buf>
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cfe6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        enc_msglen = ssl->out_msglen;
 801cfe8:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cfec:	68d3      	ldr	r3, [r2, #12]
 801cfee:	6912      	ldr	r2, [r2, #16]
        enc_msg = ssl->out_msg;
 801cff0:	f8d4 90a0 	ldr.w	r9, [r4, #160]	; 0xa0
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cff4:	4433      	add	r3, r6
 801cff6:	1a9b      	subs	r3, r3, r2
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801cff8:	2200      	movs	r2, #0
 801cffa:	e9cd 3201 	strd	r3, r2, [sp, #4]
        ssl->out_msglen += ssl->transform_out->ivlen -
 801cffe:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801d002:	4b26      	ldr	r3, [pc, #152]	; (801d09c <mbedtls_ssl_write_record+0x314>)
 801d004:	4a1d      	ldr	r2, [pc, #116]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801d006:	9300      	str	r3, [sp, #0]
 801d008:	2103      	movs	r1, #3
 801d00a:	f240 5376 	movw	r3, #1398	; 0x576
 801d00e:	4620      	mov	r0, r4
 801d010:	f7f3 fd5c 	bl	8010acc <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_auth_encrypt( &ssl->transform_out->cipher_ctx_enc,
 801d014:	eb09 0a06 	add.w	sl, r9, r6
 801d018:	ab09      	add	r3, sp, #36	; 0x24
 801d01a:	e9cd 9303 	strd	r9, r3, [sp, #12]
 801d01e:	e9cd a705 	strd	sl, r7, [sp, #20]
 801d022:	e9cd 9601 	strd	r9, r6, [sp, #4]
 801d026:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d028:	f8cd b000 	str.w	fp, [sp]
 801d02c:	68c2      	ldr	r2, [r0, #12]
 801d02e:	462b      	mov	r3, r5
 801d030:	f100 0118 	add.w	r1, r0, #24
 801d034:	3050      	adds	r0, #80	; 0x50
 801d036:	f7f3 fa4b 	bl	80104d0 <mbedtls_cipher_auth_encrypt>
 801d03a:	4605      	mov	r5, r0
 801d03c:	b1a0      	cbz	r0, 801d068 <mbedtls_ssl_write_record+0x2e0>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_encrypt", ret );
 801d03e:	4b18      	ldr	r3, [pc, #96]	; (801d0a0 <mbedtls_ssl_write_record+0x318>)
 801d040:	9300      	str	r3, [sp, #0]
 801d042:	9001      	str	r0, [sp, #4]
 801d044:	f240 5385 	movw	r3, #1413	; 0x585
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d048:	4a0c      	ldr	r2, [pc, #48]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801d04a:	2101      	movs	r1, #1
 801d04c:	4620      	mov	r0, r4
 801d04e:	f7f3 fd6d 	bl	8010b2c <mbedtls_debug_print_ret>
                MBEDTLS_SSL_DEBUG_RET( 1, "ssl_encrypt_buf", ret );
 801d052:	4b14      	ldr	r3, [pc, #80]	; (801d0a4 <mbedtls_ssl_write_record+0x31c>)
 801d054:	9300      	str	r3, [sp, #0]
 801d056:	9501      	str	r5, [sp, #4]
 801d058:	f640 3308 	movw	r3, #2824	; 0xb08
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801d05c:	4a07      	ldr	r2, [pc, #28]	; (801d07c <mbedtls_ssl_write_record+0x2f4>)
 801d05e:	2101      	movs	r1, #1
 801d060:	4620      	mov	r0, r4
 801d062:	f7f3 fd63 	bl	8010b2c <mbedtls_debug_print_ret>
        return( ret );
 801d066:	e6b1      	b.n	801cdcc <mbedtls_ssl_write_record+0x44>
        if( olen != enc_msglen )
 801d068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d06a:	429e      	cmp	r6, r3
 801d06c:	d01c      	beq.n	801d0a8 <mbedtls_ssl_write_record+0x320>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d06e:	4b04      	ldr	r3, [pc, #16]	; (801d080 <mbedtls_ssl_write_record+0x2f8>)
 801d070:	9300      	str	r3, [sp, #0]
 801d072:	f240 538b 	movw	r3, #1419	; 0x58b
 801d076:	e6e7      	b.n	801ce48 <mbedtls_ssl_write_record+0xc0>
 801d078:	080322ca 	.word	0x080322ca
 801d07c:	08031ee5 	.word	0x08031ee5
 801d080:	08031a15 	.word	0x08031a15
 801d084:	ffff9400 	.word	0xffff9400
 801d088:	080322da 	.word	0x080322da
 801d08c:	080322e9 	.word	0x080322e9
 801d090:	08032308 	.word	0x08032308
 801d094:	08032315 	.word	0x08032315
 801d098:	08032333 	.word	0x08032333
 801d09c:	0803233b 	.word	0x0803233b
 801d0a0:	08032376 	.word	0x08032376
 801d0a4:	08032417 	.word	0x08032417
        ssl->out_msglen += taglen;
 801d0a8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801d0ac:	4a6d      	ldr	r2, [pc, #436]	; (801d264 <mbedtls_ssl_write_record+0x4dc>)
        ssl->out_msglen += taglen;
 801d0ae:	443b      	add	r3, r7
 801d0b0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801d0b4:	4b6c      	ldr	r3, [pc, #432]	; (801d268 <mbedtls_ssl_write_record+0x4e0>)
 801d0b6:	9300      	str	r3, [sp, #0]
 801d0b8:	e9cd a701 	strd	sl, r7, [sp, #4]
 801d0bc:	f240 5392 	movw	r3, #1426	; 0x592
 801d0c0:	2104      	movs	r1, #4
 801d0c2:	4620      	mov	r0, r4
        auth_done++;
 801d0c4:	f108 0801 	add.w	r8, r8, #1
        MBEDTLS_SSL_DEBUG_BUF( 4, "after encrypt: tag", enc_msg + enc_msglen, taglen );
 801d0c8:	f7f3 fd60 	bl	8010b8c <mbedtls_debug_print_buf>
    if( auth_done != 1 )
 801d0cc:	f1b8 0f01 	cmp.w	r8, #1
 801d0d0:	d077      	beq.n	801d1c2 <mbedtls_ssl_write_record+0x43a>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d0d2:	4b66      	ldr	r3, [pc, #408]	; (801d26c <mbedtls_ssl_write_record+0x4e4>)
 801d0d4:	9300      	str	r3, [sp, #0]
 801d0d6:	f240 6314 	movw	r3, #1556	; 0x614
 801d0da:	e6b5      	b.n	801ce48 <mbedtls_ssl_write_record+0xc0>
    if( mode == MBEDTLS_MODE_CBC )
 801d0dc:	2d02      	cmp	r5, #2
 801d0de:	d16b      	bne.n	801d1b8 <mbedtls_ssl_write_record+0x430>
        size_t enc_msglen, padlen, olen = 0, i;
 801d0e0:	2300      	movs	r3, #0
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801d0e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801d0e4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
        size_t enc_msglen, padlen, olen = 0, i;
 801d0e8:	930a      	str	r3, [sp, #40]	; 0x28
        padlen = ssl->transform_out->ivlen - ( ssl->out_msglen + 1 ) %
 801d0ea:	68d2      	ldr	r2, [r2, #12]
 801d0ec:	3101      	adds	r1, #1
 801d0ee:	fbb1 f6f2 	udiv	r6, r1, r2
 801d0f2:	fb02 1616 	mls	r6, r2, r6, r1
 801d0f6:	1b96      	subs	r6, r2, r6
            padlen = 0;
 801d0f8:	42b2      	cmp	r2, r6
 801d0fa:	bf08      	it	eq
 801d0fc:	461e      	moveq	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801d0fe:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
 801d102:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 801d106:	441a      	add	r2, r3
        for( i = 0; i <= padlen; i++ )
 801d108:	3301      	adds	r3, #1
 801d10a:	429e      	cmp	r6, r3
            ssl->out_msg[ssl->out_msglen + i] = (unsigned char) padlen;
 801d10c:	5456      	strb	r6, [r2, r1]
        for( i = 0; i <= padlen; i++ )
 801d10e:	d2f6      	bcs.n	801d0fe <mbedtls_ssl_write_record+0x376>
        ssl->out_msglen += padlen + 1;
 801d110:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d114:	6963      	ldr	r3, [r4, #20]
        ssl->out_msglen += padlen + 1;
 801d116:	3701      	adds	r7, #1
 801d118:	4437      	add	r7, r6
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d11a:	2b01      	cmp	r3, #1
        ssl->out_msglen += padlen + 1;
 801d11c:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d120:	dc26      	bgt.n	801d170 <mbedtls_ssl_write_record+0x3e8>
        enc_msg = ssl->out_msg;
 801d122:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "before encrypt: msglen = %d, "
 801d126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d128:	4a4e      	ldr	r2, [pc, #312]	; (801d264 <mbedtls_ssl_write_record+0x4dc>)
 801d12a:	3601      	adds	r6, #1
 801d12c:	9603      	str	r6, [sp, #12]
 801d12e:	68db      	ldr	r3, [r3, #12]
 801d130:	9302      	str	r3, [sp, #8]
 801d132:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d136:	9301      	str	r3, [sp, #4]
 801d138:	4b4d      	ldr	r3, [pc, #308]	; (801d270 <mbedtls_ssl_write_record+0x4e8>)
 801d13a:	9300      	str	r3, [sp, #0]
 801d13c:	2103      	movs	r1, #3
 801d13e:	f240 53c6 	movw	r3, #1478	; 0x5c6
 801d142:	4620      	mov	r0, r4
 801d144:	f7f3 fcc2 	bl	8010acc <mbedtls_debug_print_msg>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_out->cipher_ctx_enc,
 801d148:	ab0a      	add	r3, sp, #40	; 0x28
 801d14a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 801d14e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d150:	9700      	str	r7, [sp, #0]
 801d152:	68c2      	ldr	r2, [r0, #12]
 801d154:	462b      	mov	r3, r5
 801d156:	f100 0118 	add.w	r1, r0, #24
 801d15a:	3050      	adds	r0, #80	; 0x50
 801d15c:	f7f3 f996 	bl	801048c <mbedtls_cipher_crypt>
 801d160:	4605      	mov	r5, r0
 801d162:	b308      	cbz	r0, 801d1a8 <mbedtls_ssl_write_record+0x420>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d164:	4b43      	ldr	r3, [pc, #268]	; (801d274 <mbedtls_ssl_write_record+0x4ec>)
 801d166:	9300      	str	r3, [sp, #0]
 801d168:	9001      	str	r0, [sp, #4]
 801d16a:	f240 53d1 	movw	r3, #1489	; 0x5d1
 801d16e:	e76b      	b.n	801d048 <mbedtls_ssl_write_record+0x2c0>
 801d170:	6c21      	ldr	r1, [r4, #64]	; 0x40
            ret = ssl->conf->f_rng( ssl->conf->p_rng, ssl->transform_out->iv_enc,
 801d172:	6823      	ldr	r3, [r4, #0]
 801d174:	68ca      	ldr	r2, [r1, #12]
 801d176:	699d      	ldr	r5, [r3, #24]
 801d178:	69d8      	ldr	r0, [r3, #28]
 801d17a:	3118      	adds	r1, #24
 801d17c:	47a8      	blx	r5
            if( ret != 0 )
 801d17e:	4605      	mov	r5, r0
 801d180:	2800      	cmp	r0, #0
 801d182:	f47f af66 	bne.w	801d052 <mbedtls_ssl_write_record+0x2ca>
            memcpy( ssl->out_iv, ssl->transform_out->iv_enc,
 801d186:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d188:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 801d18c:	68ca      	ldr	r2, [r1, #12]
 801d18e:	3118      	adds	r1, #24
 801d190:	f005 f92a 	bl	80223e8 <memcpy>
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d194:	6c23      	ldr	r3, [r4, #64]	; 0x40
            enc_msglen = ssl->out_msglen;
 801d196:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d19a:	68db      	ldr	r3, [r3, #12]
            enc_msg = ssl->out_msg;
 801d19c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
            ssl->out_msglen += ssl->transform_out->ivlen;
 801d1a0:	443b      	add	r3, r7
 801d1a2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801d1a6:	e7be      	b.n	801d126 <mbedtls_ssl_write_record+0x39e>
        if( enc_msglen != olen )
 801d1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1aa:	429f      	cmp	r7, r3
 801d1ac:	d08e      	beq.n	801d0cc <mbedtls_ssl_write_record+0x344>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d1ae:	4b2f      	ldr	r3, [pc, #188]	; (801d26c <mbedtls_ssl_write_record+0x4e4>)
 801d1b0:	9300      	str	r3, [sp, #0]
 801d1b2:	f240 53d7 	movw	r3, #1495	; 0x5d7
 801d1b6:	e647      	b.n	801ce48 <mbedtls_ssl_write_record+0xc0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d1b8:	4b2c      	ldr	r3, [pc, #176]	; (801d26c <mbedtls_ssl_write_record+0x4e4>)
 801d1ba:	9300      	str	r3, [sp, #0]
 801d1bc:	f240 630d 	movw	r3, #1549	; 0x60d
 801d1c0:	e642      	b.n	801ce48 <mbedtls_ssl_write_record+0xc0>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= encrypt buf" ) );
 801d1c2:	4b2d      	ldr	r3, [pc, #180]	; (801d278 <mbedtls_ssl_write_record+0x4f0>)
 801d1c4:	4a27      	ldr	r2, [pc, #156]	; (801d264 <mbedtls_ssl_write_record+0x4dc>)
 801d1c6:	9300      	str	r3, [sp, #0]
 801d1c8:	2102      	movs	r1, #2
 801d1ca:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801d1ce:	4620      	mov	r0, r4
 801d1d0:	f7f3 fc7c 	bl	8010acc <mbedtls_debug_print_msg>
            len = ssl->out_msglen;
 801d1d4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
            ssl->out_len[0] = (unsigned char)( len >> 8 );
 801d1d8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801d1dc:	0a19      	lsrs	r1, r3, #8
 801d1de:	7011      	strb	r1, [r2, #0]
            ssl->out_len[1] = (unsigned char)( len      );
 801d1e0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 801d1e4:	7053      	strb	r3, [r2, #1]
        ssl->out_left = mbedtls_ssl_hdr_len( ssl ) + ssl->out_msglen;
 801d1e6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d1ea:	3305      	adds	r3, #5
 801d1ec:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        MBEDTLS_SSL_DEBUG_MSG( 3, ( "output record: msgtype = %d, "
 801d1f0:	e9d4 2325 	ldrd	r2, r3, [r4, #148]	; 0x94
 801d1f4:	881b      	ldrh	r3, [r3, #0]
 801d1f6:	ba5b      	rev16	r3, r3
 801d1f8:	b29b      	uxth	r3, r3
 801d1fa:	9304      	str	r3, [sp, #16]
 801d1fc:	7893      	ldrb	r3, [r2, #2]
 801d1fe:	9303      	str	r3, [sp, #12]
 801d200:	7853      	ldrb	r3, [r2, #1]
 801d202:	9302      	str	r3, [sp, #8]
 801d204:	7813      	ldrb	r3, [r2, #0]
 801d206:	9301      	str	r3, [sp, #4]
 801d208:	4b1c      	ldr	r3, [pc, #112]	; (801d27c <mbedtls_ssl_write_record+0x4f4>)
 801d20a:	4a16      	ldr	r2, [pc, #88]	; (801d264 <mbedtls_ssl_write_record+0x4dc>)
 801d20c:	9300      	str	r3, [sp, #0]
 801d20e:	2103      	movs	r1, #3
 801d210:	f640 3313 	movw	r3, #2835	; 0xb13
 801d214:	4620      	mov	r0, r4
 801d216:	f7f3 fc59 	bl	8010acc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "output record sent to network",
 801d21a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801d21e:	4a11      	ldr	r2, [pc, #68]	; (801d264 <mbedtls_ssl_write_record+0x4dc>)
 801d220:	3305      	adds	r3, #5
 801d222:	9302      	str	r3, [sp, #8]
 801d224:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 801d228:	9301      	str	r3, [sp, #4]
 801d22a:	4b15      	ldr	r3, [pc, #84]	; (801d280 <mbedtls_ssl_write_record+0x4f8>)
 801d22c:	9300      	str	r3, [sp, #0]
 801d22e:	2104      	movs	r1, #4
 801d230:	f640 3318 	movw	r3, #2840	; 0xb18
 801d234:	4620      	mov	r0, r4
 801d236:	f7f3 fca9 	bl	8010b8c <mbedtls_debug_print_buf>
    if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801d23a:	4620      	mov	r0, r4
 801d23c:	f7ff fd18 	bl	801cc70 <mbedtls_ssl_flush_output>
 801d240:	4605      	mov	r5, r0
 801d242:	b128      	cbz	r0, 801d250 <mbedtls_ssl_write_record+0x4c8>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801d244:	4b0f      	ldr	r3, [pc, #60]	; (801d284 <mbedtls_ssl_write_record+0x4fc>)
 801d246:	9300      	str	r3, [sp, #0]
 801d248:	9001      	str	r0, [sp, #4]
 801d24a:	f640 331e 	movw	r3, #2846	; 0xb1e
 801d24e:	e705      	b.n	801d05c <mbedtls_ssl_write_record+0x2d4>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write record" ) );
 801d250:	4b0d      	ldr	r3, [pc, #52]	; (801d288 <mbedtls_ssl_write_record+0x500>)
 801d252:	9300      	str	r3, [sp, #0]
 801d254:	4a03      	ldr	r2, [pc, #12]	; (801d264 <mbedtls_ssl_write_record+0x4dc>)
 801d256:	f640 3322 	movw	r3, #2850	; 0xb22
 801d25a:	2102      	movs	r1, #2
 801d25c:	4620      	mov	r0, r4
 801d25e:	f7f3 fc35 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801d262:	e5b3      	b.n	801cdcc <mbedtls_ssl_write_record+0x44>
 801d264:	08031ee5 	.word	0x08031ee5
 801d268:	08032392 	.word	0x08032392
 801d26c:	08031a15 	.word	0x08031a15
 801d270:	080323a5 	.word	0x080323a5
 801d274:	080323f3 	.word	0x080323f3
 801d278:	08032408 	.word	0x08032408
 801d27c:	08032427 	.word	0x08032427
 801d280:	08032463 	.word	0x08032463
 801d284:	08032481 	.word	0x08032481
 801d288:	0803249a 	.word	0x0803249a

0801d28c <mbedtls_ssl_prepare_handshake_record>:
{
 801d28c:	b530      	push	{r4, r5, lr}
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d28e:	6f81      	ldr	r1, [r0, #120]	; 0x78
 801d290:	2903      	cmp	r1, #3
{
 801d292:	b085      	sub	sp, #20
 801d294:	4604      	mov	r4, r0
    if( ssl->in_msglen < mbedtls_ssl_hs_hdr_len( ssl ) )
 801d296:	d80b      	bhi.n	801d2b0 <mbedtls_ssl_prepare_handshake_record+0x24>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake message too short: %d",
 801d298:	4b1a      	ldr	r3, [pc, #104]	; (801d304 <mbedtls_ssl_prepare_handshake_record+0x78>)
 801d29a:	9101      	str	r1, [sp, #4]
 801d29c:	9300      	str	r3, [sp, #0]
 801d29e:	4a1a      	ldr	r2, [pc, #104]	; (801d308 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d2a0:	f640 4305 	movw	r3, #3077	; 0xc05
 801d2a4:	2101      	movs	r1, #1
 801d2a6:	f7f3 fc11 	bl	8010acc <mbedtls_debug_print_msg>
        return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d2aa:	4818      	ldr	r0, [pc, #96]	; (801d30c <mbedtls_ssl_prepare_handshake_record+0x80>)
}
 801d2ac:	b005      	add	sp, #20
 801d2ae:	bd30      	pop	{r4, r5, pc}
                    ( ssl->in_msg[1] << 16 ) |
 801d2b0:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
                    ( ssl->in_msg[2] << 8  ) |
 801d2b2:	7893      	ldrb	r3, [r2, #2]
                    ( ssl->in_msg[1] << 16 ) |
 801d2b4:	7855      	ldrb	r5, [r2, #1]
                    ( ssl->in_msg[2] << 8  ) |
 801d2b6:	021b      	lsls	r3, r3, #8
                    ( ssl->in_msg[1] << 16 ) |
 801d2b8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                      ssl->in_msg[3] );
 801d2bc:	78d5      	ldrb	r5, [r2, #3]
                    ( ssl->in_msg[2] << 8  ) |
 801d2be:	432b      	orrs	r3, r5
    ssl->in_hslen = mbedtls_ssl_hs_hdr_len( ssl ) + (
 801d2c0:	3304      	adds	r3, #4
 801d2c2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "handshake message: msglen ="
 801d2c6:	9303      	str	r3, [sp, #12]
 801d2c8:	7813      	ldrb	r3, [r2, #0]
 801d2ca:	4a0f      	ldr	r2, [pc, #60]	; (801d308 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d2cc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801d2d0:	4b0f      	ldr	r3, [pc, #60]	; (801d310 <mbedtls_ssl_prepare_handshake_record+0x84>)
 801d2d2:	9300      	str	r3, [sp, #0]
 801d2d4:	2103      	movs	r1, #3
 801d2d6:	f640 430f 	movw	r3, #3087	; 0xc0f
 801d2da:	f7f3 fbf7 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->in_msglen < ssl->in_hslen )
 801d2de:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d2e0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801d2e4:	429a      	cmp	r2, r3
 801d2e6:	d20a      	bcs.n	801d2fe <mbedtls_ssl_prepare_handshake_record+0x72>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "TLS handshake fragmentation not supported" ) );
 801d2e8:	4b0a      	ldr	r3, [pc, #40]	; (801d314 <mbedtls_ssl_prepare_handshake_record+0x88>)
 801d2ea:	9300      	str	r3, [sp, #0]
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	4a06      	ldr	r2, [pc, #24]	; (801d308 <mbedtls_ssl_prepare_handshake_record+0x7c>)
 801d2f0:	f640 434f 	movw	r3, #3151	; 0xc4f
 801d2f4:	2101      	movs	r1, #1
 801d2f6:	f7f3 fbe9 	bl	8010acc <mbedtls_debug_print_msg>
 801d2fa:	4807      	ldr	r0, [pc, #28]	; (801d318 <mbedtls_ssl_prepare_handshake_record+0x8c>)
 801d2fc:	e7d6      	b.n	801d2ac <mbedtls_ssl_prepare_handshake_record+0x20>
    return( 0 );
 801d2fe:	2000      	movs	r0, #0
 801d300:	e7d4      	b.n	801d2ac <mbedtls_ssl_prepare_handshake_record+0x20>
 801d302:	bf00      	nop
 801d304:	080324aa 	.word	0x080324aa
 801d308:	08031ee5 	.word	0x08031ee5
 801d30c:	ffff8e00 	.word	0xffff8e00
 801d310:	080324ca 	.word	0x080324ca
 801d314:	08032500 	.word	0x08032500
 801d318:	ffff8f80 	.word	0xffff8f80

0801d31c <mbedtls_ssl_update_handshake_status>:
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d31c:	6842      	ldr	r2, [r0, #4]
 801d31e:	2a10      	cmp	r2, #16
{
 801d320:	b410      	push	{r4}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d322:	d00a      	beq.n	801d33a <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake != NULL )
 801d324:	6b82      	ldr	r2, [r0, #56]	; 0x38
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER &&
 801d326:	b142      	cbz	r2, 801d33a <mbedtls_ssl_update_handshake_status+0x1e>
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d328:	f8d2 4298 	ldr.w	r4, [r2, #664]	; 0x298
 801d32c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801d32e:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 801d332:	4623      	mov	r3, r4
}
 801d334:	f85d 4b04 	ldr.w	r4, [sp], #4
        ssl->handshake->update_checksum( ssl, ssl->in_msg, ssl->in_hslen );
 801d338:	4718      	bx	r3
}
 801d33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d33e:	4770      	bx	lr

0801d340 <mbedtls_ssl_handle_message_type>:
{
 801d340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d342:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801d344:	2b16      	cmp	r3, #22
{
 801d346:	4604      	mov	r4, r0
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801d348:	d004      	beq.n	801d354 <mbedtls_ssl_handle_message_type+0x14>
    if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801d34a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d34c:	2b15      	cmp	r3, #21
 801d34e:	d007      	beq.n	801d360 <mbedtls_ssl_handle_message_type+0x20>
            return( 0 );
 801d350:	2000      	movs	r0, #0
 801d352:	e003      	b.n	801d35c <mbedtls_ssl_handle_message_type+0x1c>
        if( ( ret = mbedtls_ssl_prepare_handshake_record( ssl ) ) != 0 )
 801d354:	f7ff ff9a 	bl	801d28c <mbedtls_ssl_prepare_handshake_record>
 801d358:	2800      	cmp	r0, #0
 801d35a:	d0f6      	beq.n	801d34a <mbedtls_ssl_handle_message_type+0xa>
}
 801d35c:	b004      	add	sp, #16
 801d35e:	bd10      	pop	{r4, pc}
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "got an alert message, type: [%d:%d]",
 801d360:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d362:	785a      	ldrb	r2, [r3, #1]
 801d364:	9202      	str	r2, [sp, #8]
 801d366:	781b      	ldrb	r3, [r3, #0]
 801d368:	9301      	str	r3, [sp, #4]
 801d36a:	4b1b      	ldr	r3, [pc, #108]	; (801d3d8 <mbedtls_ssl_handle_message_type+0x98>)
 801d36c:	4a1b      	ldr	r2, [pc, #108]	; (801d3dc <mbedtls_ssl_handle_message_type+0x9c>)
 801d36e:	9300      	str	r3, [sp, #0]
 801d370:	2102      	movs	r1, #2
 801d372:	f640 73d4 	movw	r3, #4052	; 0xfd4
 801d376:	4620      	mov	r0, r4
 801d378:	f7f3 fba8 	bl	8010acc <mbedtls_debug_print_msg>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_FATAL )
 801d37c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d37e:	781a      	ldrb	r2, [r3, #0]
 801d380:	2a02      	cmp	r2, #2
 801d382:	d10c      	bne.n	801d39e <mbedtls_ssl_handle_message_type+0x5e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "is a fatal alert message (msg %d)",
 801d384:	785b      	ldrb	r3, [r3, #1]
 801d386:	9301      	str	r3, [sp, #4]
 801d388:	4b15      	ldr	r3, [pc, #84]	; (801d3e0 <mbedtls_ssl_handle_message_type+0xa0>)
 801d38a:	9300      	str	r3, [sp, #0]
 801d38c:	4620      	mov	r0, r4
 801d38e:	4a13      	ldr	r2, [pc, #76]	; (801d3dc <mbedtls_ssl_handle_message_type+0x9c>)
 801d390:	f640 73dc 	movw	r3, #4060	; 0xfdc
 801d394:	2101      	movs	r1, #1
 801d396:	f7f3 fb99 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE );
 801d39a:	4812      	ldr	r0, [pc, #72]	; (801d3e4 <mbedtls_ssl_handle_message_type+0xa4>)
 801d39c:	e7de      	b.n	801d35c <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d39e:	2a01      	cmp	r2, #1
 801d3a0:	d118      	bne.n	801d3d4 <mbedtls_ssl_handle_message_type+0x94>
            ssl->in_msg[1] == MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY )
 801d3a2:	785b      	ldrb	r3, [r3, #1]
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d3a4:	b953      	cbnz	r3, 801d3bc <mbedtls_ssl_handle_message_type+0x7c>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a close notify message" ) );
 801d3a6:	4b10      	ldr	r3, [pc, #64]	; (801d3e8 <mbedtls_ssl_handle_message_type+0xa8>)
 801d3a8:	9300      	str	r3, [sp, #0]
 801d3aa:	4620      	mov	r0, r4
 801d3ac:	4a0b      	ldr	r2, [pc, #44]	; (801d3dc <mbedtls_ssl_handle_message_type+0x9c>)
 801d3ae:	f640 73e4 	movw	r3, #4068	; 0xfe4
 801d3b2:	2102      	movs	r1, #2
 801d3b4:	f7f3 fb8a 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY );
 801d3b8:	480c      	ldr	r0, [pc, #48]	; (801d3ec <mbedtls_ssl_handle_message_type+0xac>)
 801d3ba:	e7cf      	b.n	801d35c <mbedtls_ssl_handle_message_type+0x1c>
        if( ssl->in_msg[0] == MBEDTLS_SSL_ALERT_LEVEL_WARNING &&
 801d3bc:	2b64      	cmp	r3, #100	; 0x64
 801d3be:	d109      	bne.n	801d3d4 <mbedtls_ssl_handle_message_type+0x94>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "is a SSLv3 no_cert" ) );
 801d3c0:	4b0b      	ldr	r3, [pc, #44]	; (801d3f0 <mbedtls_ssl_handle_message_type+0xb0>)
 801d3c2:	9300      	str	r3, [sp, #0]
 801d3c4:	4a05      	ldr	r2, [pc, #20]	; (801d3dc <mbedtls_ssl_handle_message_type+0x9c>)
 801d3c6:	f640 73ec 	movw	r3, #4076	; 0xfec
 801d3ca:	2102      	movs	r1, #2
 801d3cc:	4620      	mov	r0, r4
 801d3ce:	f7f3 fb7d 	bl	8010acc <mbedtls_debug_print_msg>
 801d3d2:	e7bd      	b.n	801d350 <mbedtls_ssl_handle_message_type+0x10>
        return MBEDTLS_ERR_SSL_NON_FATAL;
 801d3d4:	4807      	ldr	r0, [pc, #28]	; (801d3f4 <mbedtls_ssl_handle_message_type+0xb4>)
 801d3d6:	e7c1      	b.n	801d35c <mbedtls_ssl_handle_message_type+0x1c>
 801d3d8:	0803252a 	.word	0x0803252a
 801d3dc:	08031ee5 	.word	0x08031ee5
 801d3e0:	0803254e 	.word	0x0803254e
 801d3e4:	ffff8880 	.word	0xffff8880
 801d3e8:	08032570 	.word	0x08032570
 801d3ec:	ffff8780 	.word	0xffff8780
 801d3f0:	0803258a 	.word	0x0803258a
 801d3f4:	ffff9980 	.word	0xffff9980

0801d3f8 <mbedtls_ssl_send_alert_message>:
{
 801d3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3fa:	460e      	mov	r6, r1
 801d3fc:	b085      	sub	sp, #20
 801d3fe:	4615      	mov	r5, r2
    if( ssl == NULL || ssl->conf == NULL )
 801d400:	4604      	mov	r4, r0
 801d402:	2800      	cmp	r0, #0
 801d404:	d03b      	beq.n	801d47e <mbedtls_ssl_send_alert_message+0x86>
 801d406:	6803      	ldr	r3, [r0, #0]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d038      	beq.n	801d47e <mbedtls_ssl_send_alert_message+0x86>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> send alert message" ) );
 801d40c:	4b1d      	ldr	r3, [pc, #116]	; (801d484 <mbedtls_ssl_send_alert_message+0x8c>)
 801d40e:	4a1e      	ldr	r2, [pc, #120]	; (801d488 <mbedtls_ssl_send_alert_message+0x90>)
 801d410:	9300      	str	r3, [sp, #0]
 801d412:	2102      	movs	r1, #2
 801d414:	f241 031c 	movw	r3, #4124	; 0x101c
 801d418:	f7f3 fb58 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "send alert level=%u message=%u", level, message ));
 801d41c:	4b1b      	ldr	r3, [pc, #108]	; (801d48c <mbedtls_ssl_send_alert_message+0x94>)
 801d41e:	4a1a      	ldr	r2, [pc, #104]	; (801d488 <mbedtls_ssl_send_alert_message+0x90>)
 801d420:	9300      	str	r3, [sp, #0]
 801d422:	e9cd 6501 	strd	r6, r5, [sp, #4]
 801d426:	f241 031d 	movw	r3, #4125	; 0x101d
 801d42a:	2103      	movs	r1, #3
 801d42c:	4620      	mov	r0, r4
 801d42e:	f7f3 fb4d 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->out_msglen = 2;
 801d432:	2702      	movs	r7, #2
 801d434:	2315      	movs	r3, #21
 801d436:	e9c4 3729 	strd	r3, r7, [r4, #164]	; 0xa4
    ssl->out_msg[0] = level;
 801d43a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801d43e:	701e      	strb	r6, [r3, #0]
    ssl->out_msg[1] = message;
 801d440:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d444:	4620      	mov	r0, r4
    ssl->out_msg[1] = message;
 801d446:	705d      	strb	r5, [r3, #1]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801d448:	f7ff fc9e 	bl	801cd88 <mbedtls_ssl_write_record>
 801d44c:	4605      	mov	r5, r0
 801d44e:	b160      	cbz	r0, 801d46a <mbedtls_ssl_send_alert_message+0x72>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801d450:	4b0f      	ldr	r3, [pc, #60]	; (801d490 <mbedtls_ssl_send_alert_message+0x98>)
 801d452:	9001      	str	r0, [sp, #4]
 801d454:	9300      	str	r3, [sp, #0]
 801d456:	4a0c      	ldr	r2, [pc, #48]	; (801d488 <mbedtls_ssl_send_alert_message+0x90>)
 801d458:	f241 0326 	movw	r3, #4134	; 0x1026
 801d45c:	2101      	movs	r1, #1
 801d45e:	4620      	mov	r0, r4
 801d460:	f7f3 fb64 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801d464:	4628      	mov	r0, r5
 801d466:	b005      	add	sp, #20
 801d468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= send alert message" ) );
 801d46a:	4b0a      	ldr	r3, [pc, #40]	; (801d494 <mbedtls_ssl_send_alert_message+0x9c>)
 801d46c:	9300      	str	r3, [sp, #0]
 801d46e:	4a06      	ldr	r2, [pc, #24]	; (801d488 <mbedtls_ssl_send_alert_message+0x90>)
 801d470:	f241 0329 	movw	r3, #4137	; 0x1029
 801d474:	4639      	mov	r1, r7
 801d476:	4620      	mov	r0, r4
 801d478:	f7f3 fb28 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801d47c:	e7f2      	b.n	801d464 <mbedtls_ssl_send_alert_message+0x6c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801d47e:	4d06      	ldr	r5, [pc, #24]	; (801d498 <mbedtls_ssl_send_alert_message+0xa0>)
 801d480:	e7f0      	b.n	801d464 <mbedtls_ssl_send_alert_message+0x6c>
 801d482:	bf00      	nop
 801d484:	0803259d 	.word	0x0803259d
 801d488:	08031ee5 	.word	0x08031ee5
 801d48c:	080325b3 	.word	0x080325b3
 801d490:	0803137d 	.word	0x0803137d
 801d494:	080325d2 	.word	0x080325d2
 801d498:	ffff8f00 	.word	0xffff8f00

0801d49c <mbedtls_ssl_read_record_layer>:
{
 801d49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if( ssl->in_hslen != 0 )
 801d4a0:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 801d4a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
{
 801d4a6:	b096      	sub	sp, #88	; 0x58
 801d4a8:	4604      	mov	r4, r0
    if( ssl->in_hslen != 0 )
 801d4aa:	b361      	cbz	r1, 801d506 <mbedtls_ssl_read_record_layer+0x6a>
        if( ssl->in_offt != NULL )
 801d4ac:	b163      	cbz	r3, 801d4c8 <mbedtls_ssl_read_record_layer+0x2c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d4ae:	4b94      	ldr	r3, [pc, #592]	; (801d700 <mbedtls_ssl_read_record_layer+0x264>)
 801d4b0:	9300      	str	r3, [sp, #0]
 801d4b2:	4a94      	ldr	r2, [pc, #592]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d4b4:	4d94      	ldr	r5, [pc, #592]	; (801d708 <mbedtls_ssl_read_record_layer+0x26c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d4b6:	f640 63d8 	movw	r3, #3800	; 0xed8
 801d4ba:	2101      	movs	r1, #1
 801d4bc:	f7f3 fb06 	bl	8010acc <mbedtls_debug_print_msg>
}
 801d4c0:	4628      	mov	r0, r5
 801d4c2:	b016      	add	sp, #88	; 0x58
 801d4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if( ssl->in_hslen < ssl->in_msglen )
 801d4c8:	6f82      	ldr	r2, [r0, #120]	; 0x78
 801d4ca:	4291      	cmp	r1, r2
 801d4cc:	d219      	bcs.n	801d502 <mbedtls_ssl_read_record_layer+0x66>
            ssl->in_msglen -= ssl->in_hslen;
 801d4ce:	1a52      	subs	r2, r2, r1
 801d4d0:	6782      	str	r2, [r0, #120]	; 0x78
            memmove( ssl->in_msg, ssl->in_msg + ssl->in_hslen,
 801d4d2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d4d4:	4401      	add	r1, r0
 801d4d6:	f004 ff95 	bl	8022404 <memmove>
            MBEDTLS_SSL_DEBUG_BUF( 4, "remaining content in record",
 801d4da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d4dc:	9302      	str	r3, [sp, #8]
 801d4de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d4e0:	9301      	str	r3, [sp, #4]
 801d4e2:	4b8a      	ldr	r3, [pc, #552]	; (801d70c <mbedtls_ssl_read_record_layer+0x270>)
 801d4e4:	9300      	str	r3, [sp, #0]
 801d4e6:	4a87      	ldr	r2, [pc, #540]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d4e8:	f640 63f7 	movw	r3, #3831	; 0xef7
 801d4ec:	2104      	movs	r1, #4
 801d4ee:	4620      	mov	r0, r4
 801d4f0:	f7f3 fb4c 	bl	8010b8c <mbedtls_debug_print_buf>
        ssl->in_hslen   = 0;
 801d4f4:	2300      	movs	r3, #0
 801d4f6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if( ssl->in_msglen > 0 )
 801d4fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d4fc:	b133      	cbz	r3, 801d50c <mbedtls_ssl_read_record_layer+0x70>
        return( 0 );
 801d4fe:	2500      	movs	r5, #0
 801d500:	e7de      	b.n	801d4c0 <mbedtls_ssl_read_record_layer+0x24>
            ssl->in_msglen = 0;
 801d502:	6783      	str	r3, [r0, #120]	; 0x78
 801d504:	e7f6      	b.n	801d4f4 <mbedtls_ssl_read_record_layer+0x58>
    else if( ssl->in_offt != NULL )
 801d506:	2b00      	cmp	r3, #0
 801d508:	d1f9      	bne.n	801d4fe <mbedtls_ssl_read_record_layer+0x62>
        ssl->in_msglen = 0;
 801d50a:	6783      	str	r3, [r0, #120]	; 0x78
    if( ( ret = mbedtls_ssl_fetch_input( ssl, mbedtls_ssl_hdr_len( ssl ) ) ) != 0 )
 801d50c:	2105      	movs	r1, #5
 801d50e:	4620      	mov	r0, r4
 801d510:	f7ff fb0e 	bl	801cb30 <mbedtls_ssl_fetch_input>
 801d514:	4605      	mov	r5, r0
 801d516:	b150      	cbz	r0, 801d52e <mbedtls_ssl_read_record_layer+0x92>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d518:	4b7d      	ldr	r3, [pc, #500]	; (801d710 <mbedtls_ssl_read_record_layer+0x274>)
 801d51a:	9300      	str	r3, [sp, #0]
 801d51c:	9001      	str	r0, [sp, #4]
 801d51e:	f640 7323 	movw	r3, #3875	; 0xf23
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d522:	4a78      	ldr	r2, [pc, #480]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d524:	2101      	movs	r1, #1
 801d526:	4620      	mov	r0, r4
 801d528:	f7f3 fb00 	bl	8010b2c <mbedtls_debug_print_ret>
        return( ret );
 801d52c:	e7c8      	b.n	801d4c0 <mbedtls_ssl_read_record_layer+0x24>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record header", ssl->in_hdr, mbedtls_ssl_hdr_len( ssl ) );
 801d52e:	2305      	movs	r3, #5
 801d530:	9302      	str	r3, [sp, #8]
 801d532:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d534:	9301      	str	r3, [sp, #4]
 801d536:	4b77      	ldr	r3, [pc, #476]	; (801d714 <mbedtls_ssl_read_record_layer+0x278>)
 801d538:	4a72      	ldr	r2, [pc, #456]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d53a:	9300      	str	r3, [sp, #0]
 801d53c:	2104      	movs	r1, #4
 801d53e:	f640 5396 	movw	r3, #3478	; 0xd96
 801d542:	4620      	mov	r0, r4
 801d544:	f7f3 fb22 	bl	8010b8c <mbedtls_debug_print_buf>
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d548:	6e22      	ldr	r2, [r4, #96]	; 0x60
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ssl->in_msgtype =  ssl->in_hdr[0];
 801d54c:	7811      	ldrb	r1, [r2, #0]
 801d54e:	6761      	str	r1, [r4, #116]	; 0x74
    ssl->in_msglen = ( ssl->in_len[0] << 8 ) | ssl->in_len[1];
 801d550:	881b      	ldrh	r3, [r3, #0]
 801d552:	ba5b      	rev16	r3, r3
 801d554:	b29b      	uxth	r3, r3
 801d556:	67a3      	str	r3, [r4, #120]	; 0x78
#else
    ((void) transport);
#endif
    {
        *major = ver[0];
        *minor = ver[1];
 801d558:	7895      	ldrb	r5, [r2, #2]
        *major = ver[0];
 801d55a:	7856      	ldrb	r6, [r2, #1]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d55c:	4a69      	ldr	r2, [pc, #420]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
        *minor = ver[1];
 801d55e:	e9cd 5303 	strd	r5, r3, [sp, #12]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "input record: msgtype = %d, "
 801d562:	4b6d      	ldr	r3, [pc, #436]	; (801d718 <mbedtls_ssl_read_record_layer+0x27c>)
 801d564:	9300      	str	r3, [sp, #0]
 801d566:	e9cd 1601 	strd	r1, r6, [sp, #4]
 801d56a:	f640 539c 	movw	r3, #3484	; 0xd9c
 801d56e:	2103      	movs	r1, #3
 801d570:	4620      	mov	r0, r4
 801d572:	f7f3 faab 	bl	8010acc <mbedtls_debug_print_msg>
        ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC &&
 801d576:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d578:	3b14      	subs	r3, #20
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE &&
 801d57a:	2b03      	cmp	r3, #3
 801d57c:	d90f      	bls.n	801d59e <mbedtls_ssl_read_record_layer+0x102>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "unknown record type" ) );
 801d57e:	4b67      	ldr	r3, [pc, #412]	; (801d71c <mbedtls_ssl_read_record_layer+0x280>)
 801d580:	4a60      	ldr	r2, [pc, #384]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d582:	9300      	str	r3, [sp, #0]
 801d584:	2101      	movs	r1, #1
 801d586:	4620      	mov	r0, r4
 801d588:	f640 53a7 	movw	r3, #3495	; 0xda7
 801d58c:	f7f3 fa9e 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801d590:	220a      	movs	r2, #10
 801d592:	2102      	movs	r1, #2
 801d594:	4620      	mov	r0, r4
 801d596:	f7ff ff2f 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_INVALID_RECORD );
 801d59a:	4d61      	ldr	r5, [pc, #388]	; (801d720 <mbedtls_ssl_read_record_layer+0x284>)
 801d59c:	e790      	b.n	801d4c0 <mbedtls_ssl_read_record_layer+0x24>
    if( major_ver != ssl->major_ver )
 801d59e:	6923      	ldr	r3, [r4, #16]
 801d5a0:	429e      	cmp	r6, r3
 801d5a2:	d009      	beq.n	801d5b8 <mbedtls_ssl_read_record_layer+0x11c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "major version mismatch" ) );
 801d5a4:	4b5f      	ldr	r3, [pc, #380]	; (801d724 <mbedtls_ssl_read_record_layer+0x288>)
 801d5a6:	9300      	str	r3, [sp, #0]
 801d5a8:	f44f 635b 	mov.w	r3, #3504	; 0xdb0
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d5ac:	4a55      	ldr	r2, [pc, #340]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d5ae:	2101      	movs	r1, #1
 801d5b0:	4620      	mov	r0, r4
 801d5b2:	f7f3 fa8b 	bl	8010acc <mbedtls_debug_print_msg>
 801d5b6:	e7f0      	b.n	801d59a <mbedtls_ssl_read_record_layer+0xfe>
    if( minor_ver > ssl->conf->max_minor_ver )
 801d5b8:	6823      	ldr	r3, [r4, #0]
 801d5ba:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801d5be:	42ab      	cmp	r3, r5
 801d5c0:	d204      	bcs.n	801d5cc <mbedtls_ssl_read_record_layer+0x130>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "minor version mismatch" ) );
 801d5c2:	4b59      	ldr	r3, [pc, #356]	; (801d728 <mbedtls_ssl_read_record_layer+0x28c>)
 801d5c4:	9300      	str	r3, [sp, #0]
 801d5c6:	f640 53b6 	movw	r3, #3510	; 0xdb6
 801d5ca:	e7ef      	b.n	801d5ac <mbedtls_ssl_read_record_layer+0x110>
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d5cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d5ce:	6da2      	ldr	r2, [r4, #88]	; 0x58
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d5d0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
                         - (size_t)( ssl->in_msg - ssl->in_buf ) )
 801d5d2:	1a9b      	subs	r3, r3, r2
 801d5d4:	f5c3 53a6 	rsb	r3, r3, #5312	; 0x14c0
 801d5d8:	3315      	adds	r3, #21
    if( ssl->in_msglen > MBEDTLS_SSL_BUFFER_LEN
 801d5da:	4299      	cmp	r1, r3
 801d5dc:	d904      	bls.n	801d5e8 <mbedtls_ssl_read_record_layer+0x14c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d5de:	4b53      	ldr	r3, [pc, #332]	; (801d72c <mbedtls_ssl_read_record_layer+0x290>)
 801d5e0:	9300      	str	r3, [sp, #0]
 801d5e2:	f640 53be 	movw	r3, #3518	; 0xdbe
 801d5e6:	e7e1      	b.n	801d5ac <mbedtls_ssl_read_record_layer+0x110>
    if( ssl->transform_in == NULL )
 801d5e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d5ea:	b94b      	cbnz	r3, 801d600 <mbedtls_ssl_read_record_layer+0x164>
        if( ssl->in_msglen < 1 ||
 801d5ec:	1e4a      	subs	r2, r1, #1
 801d5ee:	f241 3387 	movw	r3, #4999	; 0x1387
 801d5f2:	429a      	cmp	r2, r3
 801d5f4:	d919      	bls.n	801d62a <mbedtls_ssl_read_record_layer+0x18e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d5f6:	4b4d      	ldr	r3, [pc, #308]	; (801d72c <mbedtls_ssl_read_record_layer+0x290>)
 801d5f8:	9300      	str	r3, [sp, #0]
 801d5fa:	f640 53c8 	movw	r3, #3528	; 0xdc8
 801d5fe:	e7d5      	b.n	801d5ac <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->in_msglen < ssl->transform_in->minlen )
 801d600:	689b      	ldr	r3, [r3, #8]
 801d602:	4299      	cmp	r1, r3
 801d604:	d204      	bcs.n	801d610 <mbedtls_ssl_read_record_layer+0x174>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d606:	4b49      	ldr	r3, [pc, #292]	; (801d72c <mbedtls_ssl_read_record_layer+0x290>)
 801d608:	9300      	str	r3, [sp, #0]
 801d60a:	f44f 635d 	mov.w	r3, #3536	; 0xdd0
 801d60e:	e7cd      	b.n	801d5ac <mbedtls_ssl_read_record_layer+0x110>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d610:	6962      	ldr	r2, [r4, #20]
 801d612:	2a00      	cmp	r2, #0
 801d614:	dd09      	ble.n	801d62a <mbedtls_ssl_read_record_layer+0x18e>
                             MBEDTLS_SSL_MAX_CONTENT_LEN + 256 )
 801d616:	f503 53a4 	add.w	r3, r3, #5248	; 0x1480
 801d61a:	3308      	adds	r3, #8
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 &&
 801d61c:	4299      	cmp	r1, r3
 801d61e:	d904      	bls.n	801d62a <mbedtls_ssl_read_record_layer+0x18e>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801d620:	4b42      	ldr	r3, [pc, #264]	; (801d72c <mbedtls_ssl_read_record_layer+0x290>)
 801d622:	9300      	str	r3, [sp, #0]
 801d624:	f640 53e5 	movw	r3, #3557	; 0xde5
 801d628:	e7c0      	b.n	801d5ac <mbedtls_ssl_read_record_layer+0x110>
    if( ( ret = mbedtls_ssl_fetch_input( ssl,
 801d62a:	3105      	adds	r1, #5
 801d62c:	4620      	mov	r0, r4
 801d62e:	f7ff fa7f 	bl	801cb30 <mbedtls_ssl_fetch_input>
 801d632:	4605      	mov	r5, r0
 801d634:	b128      	cbz	r0, 801d642 <mbedtls_ssl_read_record_layer+0x1a6>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_fetch_input", ret );
 801d636:	4b36      	ldr	r3, [pc, #216]	; (801d710 <mbedtls_ssl_read_record_layer+0x274>)
 801d638:	9300      	str	r3, [sp, #0]
 801d63a:	9001      	str	r0, [sp, #4]
 801d63c:	f640 734d 	movw	r3, #3917	; 0xf4d
 801d640:	e76f      	b.n	801d522 <mbedtls_ssl_read_record_layer+0x86>
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d642:	6fa3      	ldr	r3, [r4, #120]	; 0x78
        ssl->in_left = 0;
 801d644:	67e0      	str	r0, [r4, #124]	; 0x7c
    MBEDTLS_SSL_DEBUG_BUF( 4, "input record from network",
 801d646:	3305      	adds	r3, #5
 801d648:	9302      	str	r3, [sp, #8]
 801d64a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d64c:	9301      	str	r3, [sp, #4]
 801d64e:	4b38      	ldr	r3, [pc, #224]	; (801d730 <mbedtls_ssl_read_record_layer+0x294>)
 801d650:	9300      	str	r3, [sp, #0]
 801d652:	4a2c      	ldr	r2, [pc, #176]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d654:	f640 6341 	movw	r3, #3649	; 0xe41
 801d658:	2104      	movs	r1, #4
 801d65a:	4620      	mov	r0, r4
 801d65c:	f7f3 fa96 	bl	8010b8c <mbedtls_debug_print_buf>
    if( !done && ssl->transform_in != NULL )
 801d660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d662:	2b00      	cmp	r3, #0
 801d664:	f43f af4b 	beq.w	801d4fe <mbedtls_ssl_read_record_layer+0x62>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> decrypt buf" ) );
 801d668:	4b32      	ldr	r3, [pc, #200]	; (801d734 <mbedtls_ssl_read_record_layer+0x298>)
 801d66a:	9300      	str	r3, [sp, #0]
 801d66c:	4a25      	ldr	r2, [pc, #148]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d66e:	f44f 63c5 	mov.w	r3, #1576	; 0x628
 801d672:	2102      	movs	r1, #2
 801d674:	4620      	mov	r0, r4
 801d676:	f7f3 fa29 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->session_in == NULL || ssl->transform_in == NULL )
 801d67a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d67c:	b10b      	cbz	r3, 801d682 <mbedtls_ssl_read_record_layer+0x1e6>
 801d67e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d680:	b950      	cbnz	r0, 801d698 <mbedtls_ssl_read_record_layer+0x1fc>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d682:	4b1f      	ldr	r3, [pc, #124]	; (801d700 <mbedtls_ssl_read_record_layer+0x264>)
 801d684:	9300      	str	r3, [sp, #0]
 801d686:	f240 632c 	movw	r3, #1580	; 0x62c
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d68a:	4a1e      	ldr	r2, [pc, #120]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d68c:	4d1e      	ldr	r5, [pc, #120]	; (801d708 <mbedtls_ssl_read_record_layer+0x26c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d68e:	2101      	movs	r1, #1
 801d690:	4620      	mov	r0, r4
 801d692:	f7f3 fa1b 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801d696:	e1a8      	b.n	801d9ea <mbedtls_ssl_read_record_layer+0x54e>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801d698:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 801d69c:	b103      	cbz	r3, 801d6a0 <mbedtls_ssl_read_record_layer+0x204>
    return ctx->cipher_info->mode;
 801d69e:	785b      	ldrb	r3, [r3, #1]
    if( ssl->in_msglen < ssl->transform_in->minlen )
 801d6a0:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d6a2:	6882      	ldr	r2, [r0, #8]
 801d6a4:	4297      	cmp	r7, r2
 801d6a6:	d20b      	bcs.n	801d6c0 <mbedtls_ssl_read_record_layer+0x224>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "in_msglen (%d) < minlen (%d)",
 801d6a8:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d6ac:	4b22      	ldr	r3, [pc, #136]	; (801d738 <mbedtls_ssl_read_record_layer+0x29c>)
 801d6ae:	9300      	str	r3, [sp, #0]
 801d6b0:	f240 6334 	movw	r3, #1588	; 0x634
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d6b4:	4a13      	ldr	r2, [pc, #76]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d6b6:	2101      	movs	r1, #1
 801d6b8:	4620      	mov	r0, r4
 801d6ba:	f7f3 fa07 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d6be:	e0ac      	b.n	801d81a <mbedtls_ssl_read_record_layer+0x37e>
    if( mode == MBEDTLS_MODE_GCM ||
 801d6c0:	2b06      	cmp	r3, #6
 801d6c2:	d002      	beq.n	801d6ca <mbedtls_ssl_read_record_layer+0x22e>
 801d6c4:	2b08      	cmp	r3, #8
 801d6c6:	f040 8149 	bne.w	801d95c <mbedtls_ssl_read_record_layer+0x4c0>
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d6ca:	6803      	ldr	r3, [r0, #0]
 801d6cc:	7f1b      	ldrb	r3, [r3, #28]
 801d6ce:	f013 0f02 	tst.w	r3, #2
                                 ssl->transform_in->fixed_ivlen;
 801d6d2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        unsigned char taglen = ssl->transform_in->ciphersuite_info->flags &
 801d6d6:	bf14      	ite	ne
 801d6d8:	2508      	movne	r5, #8
 801d6da:	2510      	moveq	r5, #16
        size_t explicit_iv_len = ssl->transform_in->ivlen -
 801d6dc:	1ad1      	subs	r1, r2, r3
        if( ssl->in_msglen < explicit_iv_len + taglen )
 801d6de:	1948      	adds	r0, r1, r5
 801d6e0:	4287      	cmp	r7, r0
 801d6e2:	d22d      	bcs.n	801d740 <mbedtls_ssl_read_record_layer+0x2a4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < explicit_iv_len (%d) "
 801d6e4:	e9cd 1502 	strd	r1, r5, [sp, #8]
 801d6e8:	4b14      	ldr	r3, [pc, #80]	; (801d73c <mbedtls_ssl_read_record_layer+0x2a0>)
 801d6ea:	9300      	str	r3, [sp, #0]
 801d6ec:	9701      	str	r7, [sp, #4]
 801d6ee:	f240 6363 	movw	r3, #1635	; 0x663
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d6f2:	4a04      	ldr	r2, [pc, #16]	; (801d704 <mbedtls_ssl_read_record_layer+0x268>)
 801d6f4:	2101      	movs	r1, #1
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f7f3 f9e8 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d6fc:	e08d      	b.n	801d81a <mbedtls_ssl_read_record_layer+0x37e>
 801d6fe:	bf00      	nop
 801d700:	08031a15 	.word	0x08031a15
 801d704:	08031ee5 	.word	0x08031ee5
 801d708:	ffff9400 	.word	0xffff9400
 801d70c:	080325e8 	.word	0x080325e8
 801d710:	08032604 	.word	0x08032604
 801d714:	0803261c 	.word	0x0803261c
 801d718:	08032630 	.word	0x08032630
 801d71c:	0803266b 	.word	0x0803266b
 801d720:	ffff8e00 	.word	0xffff8e00
 801d724:	0803267f 	.word	0x0803267f
 801d728:	08032696 	.word	0x08032696
 801d72c:	080326ad 	.word	0x080326ad
 801d730:	080326c0 	.word	0x080326c0
 801d734:	080326da 	.word	0x080326da
 801d738:	080326e9 	.word	0x080326e9
 801d73c:	08032706 	.word	0x08032706
        dec_msglen = ssl->in_msglen - explicit_iv_len - taglen;
 801d740:	441f      	add	r7, r3
 801d742:	1abf      	subs	r7, r7, r2
 801d744:	1b7f      	subs	r7, r7, r5
        memcpy( add_data, ssl->in_ctr, 8 );
 801d746:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        ssl->in_msglen = dec_msglen;
 801d748:	67a7      	str	r7, [r4, #120]	; 0x78
        memcpy( add_data, ssl->in_ctr, 8 );
 801d74a:	6810      	ldr	r0, [r2, #0]
 801d74c:	6851      	ldr	r1, [r2, #4]
        dec_msg = ssl->in_msg;
 801d74e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        memcpy( add_data, ssl->in_ctr, 8 );
 801d752:	ae0a      	add	r6, sp, #40	; 0x28
 801d754:	4633      	mov	r3, r6
 801d756:	c303      	stmia	r3!, {r0, r1}
        add_data[8]  = ssl->in_msgtype;
 801d758:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d75a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        ver[0] = (unsigned char) major;
 801d75e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
        ver[1] = (unsigned char) minor;
 801d762:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
        add_data[11] = ( ssl->in_msglen >> 8 ) & 0xFF;
 801d766:	0a3b      	lsrs	r3, r7, #8
 801d768:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d76c:	f04f 090d 	mov.w	r9, #13
 801d770:	4baf      	ldr	r3, [pc, #700]	; (801da30 <mbedtls_ssl_read_record_layer+0x594>)
        ver[0] = (unsigned char) major;
 801d772:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d776:	9300      	str	r3, [sp, #0]
 801d778:	4aae      	ldr	r2, [pc, #696]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
        add_data[12] = ssl->in_msglen & 0xFF;
 801d77a:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        MBEDTLS_SSL_DEBUG_BUF( 4, "additional data used for AEAD",
 801d77e:	f240 6375 	movw	r3, #1653	; 0x675
 801d782:	2104      	movs	r1, #4
 801d784:	4620      	mov	r0, r4
 801d786:	e9cd 6901 	strd	r6, r9, [sp, #4]
 801d78a:	f7f3 f9ff 	bl	8010b8c <mbedtls_debug_print_buf>
        memcpy( ssl->transform_in->iv_dec + ssl->transform_in->fixed_ivlen,
 801d78e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d790:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 801d792:	6918      	ldr	r0, [r3, #16]
 801d794:	68da      	ldr	r2, [r3, #12]
 801d796:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 801d79a:	1a12      	subs	r2, r2, r0
 801d79c:	4460      	add	r0, ip
 801d79e:	f004 fe23 	bl	80223e8 <memcpy>
        MBEDTLS_SSL_DEBUG_BUF( 4, "IV used", ssl->transform_in->iv_dec,
 801d7a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d7a4:	68da      	ldr	r2, [r3, #12]
 801d7a6:	9202      	str	r2, [sp, #8]
 801d7a8:	3328      	adds	r3, #40	; 0x28
 801d7aa:	9301      	str	r3, [sp, #4]
 801d7ac:	4ba2      	ldr	r3, [pc, #648]	; (801da38 <mbedtls_ssl_read_record_layer+0x59c>)
 801d7ae:	4aa1      	ldr	r2, [pc, #644]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d7b0:	9300      	str	r3, [sp, #0]
 801d7b2:	2104      	movs	r1, #4
 801d7b4:	f240 637c 	movw	r3, #1660	; 0x67c
 801d7b8:	4620      	mov	r0, r4
 801d7ba:	f7f3 f9e7 	bl	8010b8c <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "TAG used", dec_msg + dec_msglen, taglen );
 801d7be:	eb08 0a07 	add.w	sl, r8, r7
 801d7c2:	4b9e      	ldr	r3, [pc, #632]	; (801da3c <mbedtls_ssl_read_record_layer+0x5a0>)
 801d7c4:	4a9b      	ldr	r2, [pc, #620]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d7c6:	9300      	str	r3, [sp, #0]
 801d7c8:	e9cd a501 	strd	sl, r5, [sp, #4]
 801d7cc:	f240 637e 	movw	r3, #1662	; 0x67e
 801d7d0:	2104      	movs	r1, #4
 801d7d2:	4620      	mov	r0, r4
 801d7d4:	f7f3 f9da 	bl	8010b8c <mbedtls_debug_print_buf>
        if( ( ret = mbedtls_cipher_auth_decrypt( &ssl->transform_in->cipher_ctx_dec,
 801d7d8:	ab09      	add	r3, sp, #36	; 0x24
 801d7da:	e9cd a505 	strd	sl, r5, [sp, #20]
 801d7de:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801d7e2:	e9cd 8701 	strd	r8, r7, [sp, #4]
 801d7e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d7e8:	f8cd 9000 	str.w	r9, [sp]
 801d7ec:	68c2      	ldr	r2, [r0, #12]
 801d7ee:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d7f2:	4633      	mov	r3, r6
 801d7f4:	3090      	adds	r0, #144	; 0x90
 801d7f6:	f7f2 fe8f 	bl	8010518 <mbedtls_cipher_auth_decrypt>
 801d7fa:	4605      	mov	r5, r0
 801d7fc:	b178      	cbz	r0, 801d81e <mbedtls_ssl_read_record_layer+0x382>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_auth_decrypt", ret );
 801d7fe:	4b90      	ldr	r3, [pc, #576]	; (801da40 <mbedtls_ssl_read_record_layer+0x5a4>)
 801d800:	9001      	str	r0, [sp, #4]
 801d802:	9300      	str	r3, [sp, #0]
 801d804:	4a8b      	ldr	r2, [pc, #556]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d806:	f240 638b 	movw	r3, #1675	; 0x68b
 801d80a:	2101      	movs	r1, #1
 801d80c:	4620      	mov	r0, r4
 801d80e:	f7f3 f98d 	bl	8010b2c <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_CIPHER_AUTH_FAILED )
 801d812:	f515 4fc6 	cmn.w	r5, #25344	; 0x6300
 801d816:	f040 80e8 	bne.w	801d9ea <mbedtls_ssl_read_record_layer+0x54e>
            return( MBEDTLS_ERR_SSL_INVALID_MAC );
 801d81a:	4d8a      	ldr	r5, [pc, #552]	; (801da44 <mbedtls_ssl_read_record_layer+0x5a8>)
 801d81c:	e0e5      	b.n	801d9ea <mbedtls_ssl_read_record_layer+0x54e>
        if( olen != dec_msglen )
 801d81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d820:	429f      	cmp	r7, r3
 801d822:	d004      	beq.n	801d82e <mbedtls_ssl_read_record_layer+0x392>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801d824:	4b88      	ldr	r3, [pc, #544]	; (801da48 <mbedtls_ssl_read_record_layer+0x5ac>)
 801d826:	9300      	str	r3, [sp, #0]
 801d828:	f240 6396 	movw	r3, #1686	; 0x696
 801d82c:	e72d      	b.n	801d68a <mbedtls_ssl_read_record_layer+0x1ee>
    size_t padlen = 0, correct = 1;
 801d82e:	2601      	movs	r6, #1
 801d830:	4682      	mov	sl, r0
        auth_done++;
 801d832:	4635      	mov	r5, r6
    MBEDTLS_SSL_DEBUG_BUF( 4, "raw buffer after decryption",
 801d834:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d836:	9302      	str	r3, [sp, #8]
 801d838:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d83a:	9301      	str	r3, [sp, #4]
 801d83c:	4b83      	ldr	r3, [pc, #524]	; (801da4c <mbedtls_ssl_read_record_layer+0x5b0>)
 801d83e:	9300      	str	r3, [sp, #0]
 801d840:	4a7c      	ldr	r2, [pc, #496]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d842:	f240 7377 	movw	r3, #1911	; 0x777
 801d846:	2104      	movs	r1, #4
 801d848:	4620      	mov	r0, r4
 801d84a:	f7f3 f99f 	bl	8010b8c <mbedtls_debug_print_buf>
    if( auth_done == 0 )
 801d84e:	2d00      	cmp	r5, #0
 801d850:	f040 818d 	bne.w	801db6e <mbedtls_ssl_read_record_layer+0x6d2>
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801d856:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d858:	6952      	ldr	r2, [r2, #20]
 801d85a:	1a9b      	subs	r3, r3, r2
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d85c:	6e62      	ldr	r2, [r4, #100]	; 0x64
        ssl->in_msglen -= ssl->transform_in->maclen;
 801d85e:	67a3      	str	r3, [r4, #120]	; 0x78
        ssl->in_len[0] = (unsigned char)( ssl->in_msglen >> 8 );
 801d860:	0a1b      	lsrs	r3, r3, #8
 801d862:	7013      	strb	r3, [r2, #0]
        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );
 801d864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d866:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d868:	705a      	strb	r2, [r3, #1]
        memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );
 801d86a:	6fa7      	ldr	r7, [r4, #120]	; 0x78
 801d86c:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
 801d870:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d872:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801d876:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801d87a:	4439      	add	r1, r7
 801d87c:	4640      	mov	r0, r8
 801d87e:	f004 fdb3 	bl	80223e8 <memcpy>
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801d882:	6963      	ldr	r3, [r4, #20]
 801d884:	2b00      	cmp	r3, #0
 801d886:	f340 816a 	ble.w	801db5e <mbedtls_ssl_read_record_layer+0x6c2>
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d88a:	3715      	adds	r7, #21
 801d88c:	44ba      	add	sl, r7
            extra_run &= correct * 0xFF;
 801d88e:	0233      	lsls	r3, r6, #8
                        ( 13 + ssl->in_msglen          + 8 ) / 64;
 801d890:	09bf      	lsrs	r7, r7, #6
            extra_run &= correct * 0xFF;
 801d892:	1b9b      	subs	r3, r3, r6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d894:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d896:	2208      	movs	r2, #8
            extra_run = ( 13 + ssl->in_msglen + padlen + 8 ) / 64 -
 801d898:	ebc7 179a 	rsb	r7, r7, sl, lsr #6
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d89c:	f109 0044 	add.w	r0, r9, #68	; 0x44
            extra_run &= correct * 0xFF;
 801d8a0:	401f      	ands	r7, r3
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_ctr, 8 );
 801d8a2:	f7f7 f8ef 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_hdr, 3 );
 801d8a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d8a8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801d8aa:	2203      	movs	r2, #3
 801d8ac:	3044      	adds	r0, #68	; 0x44
 801d8ae:	f7f7 f8e9 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_len, 2 );
 801d8b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d8b4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 801d8b6:	2202      	movs	r2, #2
 801d8b8:	3044      	adds	r0, #68	; 0x44
 801d8ba:	f7f7 f8e3 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_update( &ssl->transform_in->md_ctx_dec, ssl->in_msg,
 801d8be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d8c0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d8c2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d8c4:	3044      	adds	r0, #68	; 0x44
 801d8c6:	f7f7 f8dd 	bl	8014a84 <mbedtls_md_hmac_update>
            mbedtls_md_hmac_finish( &ssl->transform_in->md_ctx_dec,
 801d8ca:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d8cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801d8ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d8d0:	4419      	add	r1, r3
 801d8d2:	3044      	adds	r0, #68	; 0x44
 801d8d4:	f7f7 f8e6 	bl	8014aa4 <mbedtls_md_hmac_finish>
            for( j = 0; j < extra_run + 1; j++ )
 801d8d8:	3701      	adds	r7, #1
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801d8da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d8dc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d8de:	3044      	adds	r0, #68	; 0x44
            for( j = 0; j < extra_run + 1; j++ )
 801d8e0:	3501      	adds	r5, #1
                mbedtls_md_process( &ssl->transform_in->md_ctx_dec, ssl->in_msg );
 801d8e2:	f7f7 f921 	bl	8014b28 <mbedtls_md_process>
            for( j = 0; j < extra_run + 1; j++ )
 801d8e6:	42bd      	cmp	r5, r7
 801d8e8:	d3f7      	bcc.n	801d8da <mbedtls_ssl_read_record_layer+0x43e>
            mbedtls_md_hmac_reset( &ssl->transform_in->md_ctx_dec );
 801d8ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d8ec:	3044      	adds	r0, #68	; 0x44
 801d8ee:	f7f7 f905 	bl	8014afc <mbedtls_md_hmac_reset>
        MBEDTLS_SSL_DEBUG_BUF( 4, "message  mac", tmp, ssl->transform_in->maclen );
 801d8f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d8f4:	4a4f      	ldr	r2, [pc, #316]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d8f6:	695b      	ldr	r3, [r3, #20]
 801d8f8:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801d8fc:	4b54      	ldr	r3, [pc, #336]	; (801da50 <mbedtls_ssl_read_record_layer+0x5b4>)
 801d8fe:	9300      	str	r3, [sp, #0]
 801d900:	2104      	movs	r1, #4
 801d902:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801d906:	4620      	mov	r0, r4
 801d908:	f7f3 f940 	bl	8010b8c <mbedtls_debug_print_buf>
        MBEDTLS_SSL_DEBUG_BUF( 4, "computed mac", ssl->in_msg + ssl->in_msglen,
 801d90c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d90e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d910:	695b      	ldr	r3, [r3, #20]
 801d912:	9302      	str	r3, [sp, #8]
 801d914:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d916:	4413      	add	r3, r2
 801d918:	9301      	str	r3, [sp, #4]
 801d91a:	4b4e      	ldr	r3, [pc, #312]	; (801da54 <mbedtls_ssl_read_record_layer+0x5b8>)
 801d91c:	4a45      	ldr	r2, [pc, #276]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d91e:	9300      	str	r3, [sp, #0]
 801d920:	2104      	movs	r1, #4
 801d922:	f240 73c1 	movw	r3, #1985	; 0x7c1
 801d926:	4620      	mov	r0, r4
 801d928:	f7f3 f930 	bl	8010b8c <mbedtls_debug_print_buf>
        if( mbedtls_ssl_safer_memcmp( tmp, ssl->in_msg + ssl->in_msglen,
 801d92c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d92e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801d930:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    for( i = 0; i < n; i++ )
 801d932:	6940      	ldr	r0, [r0, #20]
 801d934:	1899      	adds	r1, r3, r2
 801d936:	4403      	add	r3, r0
 801d938:	4413      	add	r3, r2
    unsigned char diff = 0;
 801d93a:	2200      	movs	r2, #0
    for( i = 0; i < n; i++ )
 801d93c:	428b      	cmp	r3, r1
 801d93e:	f040 8107 	bne.w	801db50 <mbedtls_ssl_read_record_layer+0x6b4>
 801d942:	2a00      	cmp	r2, #0
 801d944:	f000 8110 	beq.w	801db68 <mbedtls_ssl_read_record_layer+0x6cc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "message mac does not match" ) );
 801d948:	4b43      	ldr	r3, [pc, #268]	; (801da58 <mbedtls_ssl_read_record_layer+0x5bc>)
 801d94a:	9300      	str	r3, [sp, #0]
 801d94c:	f44f 63f9 	mov.w	r3, #1992	; 0x7c8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801d950:	4a38      	ldr	r2, [pc, #224]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d952:	2101      	movs	r1, #1
 801d954:	4620      	mov	r0, r4
 801d956:	f7f3 f8b9 	bl	8010acc <mbedtls_debug_print_msg>
 801d95a:	e75e      	b.n	801d81a <mbedtls_ssl_read_record_layer+0x37e>
    if( mode == MBEDTLS_MODE_CBC )
 801d95c:	2b02      	cmp	r3, #2
 801d95e:	f040 80f2 	bne.w	801db46 <mbedtls_ssl_read_record_layer+0x6aa>
        size_t olen = 0;
 801d962:	2300      	movs	r3, #0
 801d964:	930a      	str	r3, [sp, #40]	; 0x28
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d966:	6961      	ldr	r1, [r4, #20]
 801d968:	68c2      	ldr	r2, [r0, #12]
 801d96a:	6945      	ldr	r5, [r0, #20]
        size_t minlen = 0;
 801d96c:	2901      	cmp	r1, #1
 801d96e:	bfcc      	ite	gt
 801d970:	4616      	movgt	r6, r2
 801d972:	461e      	movle	r6, r3
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801d974:	1993      	adds	r3, r2, r6
 801d976:	429f      	cmp	r7, r3
 801d978:	d303      	bcc.n	801d982 <mbedtls_ssl_read_record_layer+0x4e6>
            ssl->in_msglen < minlen + ssl->transform_in->maclen + 1 )
 801d97a:	1c6b      	adds	r3, r5, #1
 801d97c:	4433      	add	r3, r6
        if( ssl->in_msglen < minlen + ssl->transform_in->ivlen ||
 801d97e:	429f      	cmp	r7, r3
 801d980:	d207      	bcs.n	801d992 <mbedtls_ssl_read_record_layer+0x4f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < max( ivlen(%d), maclen (%d) "
 801d982:	4b36      	ldr	r3, [pc, #216]	; (801da5c <mbedtls_ssl_read_record_layer+0x5c0>)
 801d984:	9300      	str	r3, [sp, #0]
 801d986:	e9cd 2502 	strd	r2, r5, [sp, #8]
 801d98a:	9701      	str	r7, [sp, #4]
 801d98c:	f240 63b5 	movw	r3, #1717	; 0x6b5
 801d990:	e6af      	b.n	801d6f2 <mbedtls_ssl_read_record_layer+0x256>
        if( ssl->in_msglen % ssl->transform_in->ivlen != 0 )
 801d992:	fbb7 f6f2 	udiv	r6, r7, r2
 801d996:	fb02 7816 	mls	r8, r2, r6, r7
 801d99a:	f1b8 0f00 	cmp.w	r8, #0
 801d99e:	d006      	beq.n	801d9ae <mbedtls_ssl_read_record_layer+0x512>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) %% ivlen (%d) != 0",
 801d9a0:	4b2f      	ldr	r3, [pc, #188]	; (801da60 <mbedtls_ssl_read_record_layer+0x5c4>)
 801d9a2:	9300      	str	r3, [sp, #0]
 801d9a4:	e9cd 7201 	strd	r7, r2, [sp, #4]
 801d9a8:	f44f 63de 	mov.w	r3, #1776	; 0x6f0
 801d9ac:	e682      	b.n	801d6b4 <mbedtls_ssl_read_record_layer+0x218>
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d9ae:	2901      	cmp	r1, #1
        dec_msg = ssl->in_msg;
 801d9b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801d9b2:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801d9b6:	dd05      	ble.n	801d9c4 <mbedtls_ssl_read_record_layer+0x528>
            dec_msglen -= ssl->transform_in->ivlen;
 801d9b8:	1abf      	subs	r7, r7, r2
            ssl->in_msglen -= ssl->transform_in->ivlen;
 801d9ba:	67a7      	str	r7, [r4, #120]	; 0x78
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801d9bc:	468c      	mov	ip, r1
 801d9be:	4645      	mov	r5, r8
 801d9c0:	42aa      	cmp	r2, r5
 801d9c2:	d126      	bne.n	801da12 <mbedtls_ssl_read_record_layer+0x576>
        if( ( ret = mbedtls_cipher_crypt( &ssl->transform_in->cipher_ctx_dec,
 801d9c4:	ad0a      	add	r5, sp, #40	; 0x28
 801d9c6:	e9cd 3501 	strd	r3, r5, [sp, #4]
 801d9ca:	9700      	str	r7, [sp, #0]
 801d9cc:	3090      	adds	r0, #144	; 0x90
 801d9ce:	f7f2 fd5d 	bl	801048c <mbedtls_cipher_crypt>
 801d9d2:	4605      	mov	r5, r0
 801d9d4:	b318      	cbz	r0, 801da1e <mbedtls_ssl_read_record_layer+0x582>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_cipher_crypt", ret );
 801d9d6:	4b23      	ldr	r3, [pc, #140]	; (801da64 <mbedtls_ssl_read_record_layer+0x5c8>)
 801d9d8:	9001      	str	r0, [sp, #4]
 801d9da:	9300      	str	r3, [sp, #0]
 801d9dc:	4a15      	ldr	r2, [pc, #84]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d9de:	f240 7309 	movw	r3, #1801	; 0x709
 801d9e2:	2101      	movs	r1, #1
 801d9e4:	4620      	mov	r0, r4
 801d9e6:	f7f3 f8a1 	bl	8010b2c <mbedtls_debug_print_ret>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_decrypt_buf", ret );
 801d9ea:	4b1f      	ldr	r3, [pc, #124]	; (801da68 <mbedtls_ssl_read_record_layer+0x5cc>)
 801d9ec:	9300      	str	r3, [sp, #0]
 801d9ee:	4a11      	ldr	r2, [pc, #68]	; (801da34 <mbedtls_ssl_read_record_layer+0x598>)
 801d9f0:	9501      	str	r5, [sp, #4]
 801d9f2:	f640 6358 	movw	r3, #3672	; 0xe58
 801d9f6:	2101      	movs	r1, #1
 801d9f8:	4620      	mov	r0, r4
 801d9fa:	f7f3 f897 	bl	8010b2c <mbedtls_debug_print_ret>
            if( ret == MBEDTLS_ERR_SSL_INVALID_MAC )
 801d9fe:	f515 4fe3 	cmn.w	r5, #29056	; 0x7180
 801da02:	f47f ad5d 	bne.w	801d4c0 <mbedtls_ssl_read_record_layer+0x24>
                mbedtls_ssl_send_alert_message( ssl,
 801da06:	2214      	movs	r2, #20
 801da08:	2102      	movs	r1, #2
 801da0a:	4620      	mov	r0, r4
 801da0c:	f7ff fcf4 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
 801da10:	e556      	b.n	801d4c0 <mbedtls_ssl_read_record_layer+0x24>
                ssl->transform_in->iv_dec[i] = ssl->in_iv[i];
 801da12:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801da14:	5d76      	ldrb	r6, [r6, r5]
 801da16:	f80c 6b01 	strb.w	r6, [ip], #1
            for( i = 0; i < ssl->transform_in->ivlen; i++ )
 801da1a:	3501      	adds	r5, #1
 801da1c:	e7d0      	b.n	801d9c0 <mbedtls_ssl_read_record_layer+0x524>
        if( dec_msglen != olen )
 801da1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da20:	429f      	cmp	r7, r3
 801da22:	d023      	beq.n	801da6c <mbedtls_ssl_read_record_layer+0x5d0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801da24:	4b08      	ldr	r3, [pc, #32]	; (801da48 <mbedtls_ssl_read_record_layer+0x5ac>)
 801da26:	9300      	str	r3, [sp, #0]
 801da28:	f240 730f 	movw	r3, #1807	; 0x70f
 801da2c:	e62d      	b.n	801d68a <mbedtls_ssl_read_record_layer+0x1ee>
 801da2e:	bf00      	nop
 801da30:	08032315 	.word	0x08032315
 801da34:	08031ee5 	.word	0x08031ee5
 801da38:	08032333 	.word	0x08032333
 801da3c:	08032737 	.word	0x08032737
 801da40:	08032740 	.word	0x08032740
 801da44:	ffff8e80 	.word	0xffff8e80
 801da48:	08031a15 	.word	0x08031a15
 801da4c:	080327fb 	.word	0x080327fb
 801da50:	08032817 	.word	0x08032817
 801da54:	08032308 	.word	0x08032308
 801da58:	08032824 	.word	0x08032824
 801da5c:	0803275c 	.word	0x0803275c
 801da60:	0803279a 	.word	0x0803279a
 801da64:	080323f3 	.word	0x080323f3
 801da68:	0803287d 	.word	0x0803287d
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801da6c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801da6e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801da70:	441a      	add	r2, r3
 801da72:	f812 7c01 	ldrb.w	r7, [r2, #-1]
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801da76:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801da78:	6952      	ldr	r2, [r2, #20]
        padlen = 1 + ssl->in_msg[ssl->in_msglen - 1];
 801da7a:	3701      	adds	r7, #1
        if( ssl->in_msglen < ssl->transform_in->maclen + padlen &&
 801da7c:	18b9      	adds	r1, r7, r2
 801da7e:	428b      	cmp	r3, r1
 801da80:	d25a      	bcs.n	801db38 <mbedtls_ssl_read_record_layer+0x69c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "msglen (%d) < maclen (%d) + padlen (%d)",
 801da82:	9301      	str	r3, [sp, #4]
 801da84:	4b5d      	ldr	r3, [pc, #372]	; (801dbfc <mbedtls_ssl_read_record_layer+0x760>)
 801da86:	9300      	str	r3, [sp, #0]
 801da88:	e9cd 2702 	strd	r2, r7, [sp, #8]
 801da8c:	f240 7325 	movw	r3, #1829	; 0x725
 801da90:	4a5b      	ldr	r2, [pc, #364]	; (801dc00 <mbedtls_ssl_read_record_layer+0x764>)
 801da92:	2101      	movs	r1, #1
 801da94:	4620      	mov	r0, r4
 801da96:	f7f3 f819 	bl	8010acc <mbedtls_debug_print_msg>
            correct = 0;
 801da9a:	462f      	mov	r7, r5
            padlen = 0;
 801da9c:	462e      	mov	r6, r5
        if( ssl->minor_ver > MBEDTLS_SSL_MINOR_VERSION_0 )
 801da9e:	6963      	ldr	r3, [r4, #20]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	dd4b      	ble.n	801db3c <mbedtls_ssl_read_record_layer+0x6a0>
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801daa4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
            correct &= ( ssl->in_msglen >= padlen + 1 );
 801daa6:	1c79      	adds	r1, r7, #1
 801daa8:	428a      	cmp	r2, r1
 801daaa:	bf34      	ite	cc
 801daac:	2600      	movcc	r6, #0
 801daae:	f006 0601 	andcs.w	r6, r6, #1
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801dab2:	1e53      	subs	r3, r2, #1
                                       ssl->transform_in->maclen );
 801dab4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801dab6:	6952      	ldr	r2, [r2, #20]
 801dab8:	f502 529c 	add.w	r2, r2, #4992	; 0x1380
            size_t padding_idx = ssl->in_msglen - padlen - 1;
 801dabc:	1bdb      	subs	r3, r3, r7
            correct &= ( padding_idx < MBEDTLS_SSL_MAX_CONTENT_LEN +
 801dabe:	3208      	adds	r2, #8
 801dac0:	4293      	cmp	r3, r2
 801dac2:	bf2c      	ite	cs
 801dac4:	2600      	movcs	r6, #0
 801dac6:	f006 0601 	andcc.w	r6, r6, #1
            for( i = 1; i <= 256; i++ )
 801daca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
            size_t pad_count = 0, real_count = 1;
 801dacc:	2101      	movs	r1, #1
 801dace:	fb06 2303 	mla	r3, r6, r3, r2
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801dad2:	f107 3eff 	add.w	lr, r7, #4294967295
            for( i = 1; i <= 256; i++ )
 801dad6:	460a      	mov	r2, r1
 801dad8:	f240 1c01 	movw	ip, #257	; 0x101
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801dadc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801dae0:	eba0 090e 	sub.w	r9, r0, lr
                real_count &= ( i <= padlen );
 801dae4:	4297      	cmp	r7, r2
 801dae6:	bf34      	ite	cc
 801dae8:	2100      	movcc	r1, #0
 801daea:	f001 0101 	andcs.w	r1, r1, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801daee:	f1d9 0000 	rsbs	r0, r9, #0
            for( i = 1; i <= 256; i++ )
 801daf2:	f102 0201 	add.w	r2, r2, #1
                             ( ssl->in_msg[padding_idx + i] == padlen - 1 );
 801daf6:	eb40 0009 	adc.w	r0, r0, r9
            for( i = 1; i <= 256; i++ )
 801dafa:	4562      	cmp	r2, ip
                pad_count += real_count *
 801dafc:	fb01 8800 	mla	r8, r1, r0, r8
            for( i = 1; i <= 256; i++ )
 801db00:	d1ec      	bne.n	801dadc <mbedtls_ssl_read_record_layer+0x640>
            correct &= ( pad_count == padlen ); /* Only 1 on correct padding */
 801db02:	4547      	cmp	r7, r8
 801db04:	bf14      	ite	ne
 801db06:	2600      	movne	r6, #0
 801db08:	f006 0601 	andeq.w	r6, r6, #1
            if( padlen > 0 && correct == 0 )
 801db0c:	b14f      	cbz	r7, 801db22 <mbedtls_ssl_read_record_layer+0x686>
 801db0e:	b946      	cbnz	r6, 801db22 <mbedtls_ssl_read_record_layer+0x686>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad padding byte detected" ) );
 801db10:	4b3c      	ldr	r3, [pc, #240]	; (801dc04 <mbedtls_ssl_read_record_layer+0x768>)
 801db12:	9300      	str	r3, [sp, #0]
 801db14:	4a3a      	ldr	r2, [pc, #232]	; (801dc00 <mbedtls_ssl_read_record_layer+0x764>)
 801db16:	f240 7361 	movw	r3, #1889	; 0x761
 801db1a:	2101      	movs	r1, #1
 801db1c:	4620      	mov	r0, r4
 801db1e:	f7f2 ffd5 	bl	8010acc <mbedtls_debug_print_msg>
            padlen &= correct * 0x1FF;
 801db22:	ea4f 2a46 	mov.w	sl, r6, lsl #9
        ssl->in_msglen -= padlen;
 801db26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
            padlen &= correct * 0x1FF;
 801db28:	ebaa 0a06 	sub.w	sl, sl, r6
 801db2c:	ea0a 0a07 	and.w	sl, sl, r7
        ssl->in_msglen -= padlen;
 801db30:	eba3 030a 	sub.w	r3, r3, sl
 801db34:	67a3      	str	r3, [r4, #120]	; 0x78
 801db36:	e67d      	b.n	801d834 <mbedtls_ssl_read_record_layer+0x398>
    size_t padlen = 0, correct = 1;
 801db38:	2601      	movs	r6, #1
 801db3a:	e7b0      	b.n	801da9e <mbedtls_ssl_read_record_layer+0x602>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801db3c:	4b32      	ldr	r3, [pc, #200]	; (801dc08 <mbedtls_ssl_read_record_layer+0x76c>)
 801db3e:	9300      	str	r3, [sp, #0]
 801db40:	f240 7369 	movw	r3, #1897	; 0x769
 801db44:	e5a1      	b.n	801d68a <mbedtls_ssl_read_record_layer+0x1ee>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801db46:	4b30      	ldr	r3, [pc, #192]	; (801dc08 <mbedtls_ssl_read_record_layer+0x76c>)
 801db48:	9300      	str	r3, [sp, #0]
 801db4a:	f240 7373 	movw	r3, #1907	; 0x773
 801db4e:	e59c      	b.n	801d68a <mbedtls_ssl_read_record_layer+0x1ee>
        diff |= A[i] ^ B[i];
 801db50:	f818 0b01 	ldrb.w	r0, [r8], #1
 801db54:	f811 5b01 	ldrb.w	r5, [r1], #1
 801db58:	4068      	eors	r0, r5
 801db5a:	4302      	orrs	r2, r0
    for( i = 0; i < n; i++ )
 801db5c:	e6ee      	b.n	801d93c <mbedtls_ssl_read_record_layer+0x4a0>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801db5e:	4b2a      	ldr	r3, [pc, #168]	; (801dc08 <mbedtls_ssl_read_record_layer+0x76c>)
 801db60:	9300      	str	r3, [sp, #0]
 801db62:	f240 73bc 	movw	r3, #1980	; 0x7bc
 801db66:	e590      	b.n	801d68a <mbedtls_ssl_read_record_layer+0x1ee>
        if( correct == 0 )
 801db68:	2e00      	cmp	r6, #0
 801db6a:	f43f ae56 	beq.w	801d81a <mbedtls_ssl_read_record_layer+0x37e>
    if( ssl->in_msglen == 0 )
 801db6e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801db70:	b95b      	cbnz	r3, 801db8a <mbedtls_ssl_read_record_layer+0x6ee>
        ssl->nb_zero++;
 801db72:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801db76:	3301      	adds	r3, #1
        if( ssl->nb_zero > 3 )
 801db78:	2b03      	cmp	r3, #3
        ssl->nb_zero++;
 801db7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if( ssl->nb_zero > 3 )
 801db7e:	dd07      	ble.n	801db90 <mbedtls_ssl_read_record_layer+0x6f4>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received four consecutive empty "
 801db80:	4b22      	ldr	r3, [pc, #136]	; (801dc0c <mbedtls_ssl_read_record_layer+0x770>)
 801db82:	9300      	str	r3, [sp, #0]
 801db84:	f240 73e7 	movw	r3, #2023	; 0x7e7
 801db88:	e6e2      	b.n	801d950 <mbedtls_ssl_read_record_layer+0x4b4>
        ssl->nb_zero = 0;
 801db8a:	2300      	movs	r3, #0
 801db8c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    unsigned char diff = 0;
 801db90:	2208      	movs	r2, #8
            if( ++ssl->in_ctr[i - 1] != 0 )
 801db92:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801db94:	3a01      	subs	r2, #1
 801db96:	5c8b      	ldrb	r3, [r1, r2]
 801db98:	3301      	adds	r3, #1
 801db9a:	b2db      	uxtb	r3, r3
 801db9c:	548b      	strb	r3, [r1, r2]
 801db9e:	b963      	cbnz	r3, 801dbba <mbedtls_ssl_read_record_layer+0x71e>
        for( i = 8; i > ssl_ep_len( ssl ); i-- )
 801dba0:	2a00      	cmp	r2, #0
 801dba2:	d1f6      	bne.n	801db92 <mbedtls_ssl_read_record_layer+0x6f6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801dba4:	4b1a      	ldr	r3, [pc, #104]	; (801dc10 <mbedtls_ssl_read_record_layer+0x774>)
 801dba6:	9300      	str	r3, [sp, #0]
 801dba8:	4a15      	ldr	r2, [pc, #84]	; (801dc00 <mbedtls_ssl_read_record_layer+0x764>)
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801dbaa:	4d1a      	ldr	r5, [pc, #104]	; (801dc14 <mbedtls_ssl_read_record_layer+0x778>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "incoming message counter would wrap" ) );
 801dbac:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801dbb0:	2101      	movs	r1, #1
 801dbb2:	4620      	mov	r0, r4
 801dbb4:	f7f2 ff8a 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_COUNTER_WRAPPING );
 801dbb8:	e717      	b.n	801d9ea <mbedtls_ssl_read_record_layer+0x54e>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= decrypt buf" ) );
 801dbba:	4b17      	ldr	r3, [pc, #92]	; (801dc18 <mbedtls_ssl_read_record_layer+0x77c>)
 801dbbc:	4a10      	ldr	r2, [pc, #64]	; (801dc00 <mbedtls_ssl_read_record_layer+0x764>)
 801dbbe:	9300      	str	r3, [sp, #0]
 801dbc0:	2102      	movs	r1, #2
 801dbc2:	f640 0303 	movw	r3, #2051	; 0x803
 801dbc6:	4620      	mov	r0, r4
 801dbc8:	f7f2 ff80 	bl	8010acc <mbedtls_debug_print_msg>
        MBEDTLS_SSL_DEBUG_BUF( 4, "input payload after decrypt",
 801dbcc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801dbce:	9302      	str	r3, [sp, #8]
 801dbd0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801dbd2:	9301      	str	r3, [sp, #4]
 801dbd4:	4b11      	ldr	r3, [pc, #68]	; (801dc1c <mbedtls_ssl_read_record_layer+0x780>)
 801dbd6:	4a0a      	ldr	r2, [pc, #40]	; (801dc00 <mbedtls_ssl_read_record_layer+0x764>)
 801dbd8:	9300      	str	r3, [sp, #0]
 801dbda:	2104      	movs	r1, #4
 801dbdc:	f640 635c 	movw	r3, #3676	; 0xe5c
 801dbe0:	4620      	mov	r0, r4
 801dbe2:	f7f2 ffd3 	bl	8010b8c <mbedtls_debug_print_buf>
        if( ssl->in_msglen > MBEDTLS_SSL_MAX_CONTENT_LEN )
 801dbe6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801dbe8:	f241 3388 	movw	r3, #5000	; 0x1388
 801dbec:	429a      	cmp	r2, r3
 801dbee:	f67f ac86 	bls.w	801d4fe <mbedtls_ssl_read_record_layer+0x62>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad message length" ) );
 801dbf2:	4b0b      	ldr	r3, [pc, #44]	; (801dc20 <mbedtls_ssl_read_record_layer+0x784>)
 801dbf4:	9300      	str	r3, [sp, #0]
 801dbf6:	f640 6361 	movw	r3, #3681	; 0xe61
 801dbfa:	e4d7      	b.n	801d5ac <mbedtls_ssl_read_record_layer+0x110>
 801dbfc:	080327b9 	.word	0x080327b9
 801dc00:	08031ee5 	.word	0x08031ee5
 801dc04:	080327e1 	.word	0x080327e1
 801dc08:	08031a15 	.word	0x08031a15
 801dc0c:	0803283f 	.word	0x0803283f
 801dc10:	0803288d 	.word	0x0803288d
 801dc14:	ffff9480 	.word	0xffff9480
 801dc18:	080328b1 	.word	0x080328b1
 801dc1c:	080328c0 	.word	0x080328c0
 801dc20:	080326ad 	.word	0x080326ad

0801dc24 <mbedtls_ssl_read_record>:
{
 801dc24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801dc26:	4b25      	ldr	r3, [pc, #148]	; (801dcbc <mbedtls_ssl_read_record+0x98>)
 801dc28:	9300      	str	r3, [sp, #0]
{
 801dc2a:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read record" ) );
 801dc2c:	f640 6389 	movw	r3, #3721	; 0xe89
 801dc30:	4a23      	ldr	r2, [pc, #140]	; (801dcc0 <mbedtls_ssl_read_record+0x9c>)
 801dc32:	2102      	movs	r1, #2
 801dc34:	f7f2 ff4a 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->keep_current_message == 0 )
 801dc38:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801dc3c:	bb83      	cbnz	r3, 801dca0 <mbedtls_ssl_read_record+0x7c>
            if( ( ret = mbedtls_ssl_read_record_layer( ssl ) ) != 0 )
 801dc3e:	4628      	mov	r0, r5
 801dc40:	f7ff fc2c 	bl	801d49c <mbedtls_ssl_read_record_layer>
 801dc44:	4604      	mov	r4, r0
 801dc46:	b160      	cbz	r0, 801dc62 <mbedtls_ssl_read_record+0x3e>
                MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801dc48:	4b1e      	ldr	r3, [pc, #120]	; (801dcc4 <mbedtls_ssl_read_record+0xa0>)
 801dc4a:	9300      	str	r3, [sp, #0]
 801dc4c:	9001      	str	r0, [sp, #4]
 801dc4e:	f640 6391 	movw	r3, #3729	; 0xe91
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801dc52:	4a1b      	ldr	r2, [pc, #108]	; (801dcc0 <mbedtls_ssl_read_record+0x9c>)
 801dc54:	2101      	movs	r1, #1
 801dc56:	4628      	mov	r0, r5
 801dc58:	f7f2 ff68 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801dc5c:	4620      	mov	r0, r4
 801dc5e:	b003      	add	sp, #12
 801dc60:	bd30      	pop	{r4, r5, pc}
            ret = mbedtls_ssl_handle_message_type( ssl );
 801dc62:	4628      	mov	r0, r5
 801dc64:	f7ff fb6c 	bl	801d340 <mbedtls_ssl_handle_message_type>
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801dc68:	f510 4fcd 	cmn.w	r0, #26240	; 0x6680
            ret = mbedtls_ssl_handle_message_type( ssl );
 801dc6c:	4604      	mov	r4, r0
        } while( MBEDTLS_ERR_SSL_NON_FATAL == ret );
 801dc6e:	d0e6      	beq.n	801dc3e <mbedtls_ssl_read_record+0x1a>
        if( 0 != ret )
 801dc70:	b128      	cbz	r0, 801dc7e <mbedtls_ssl_read_record+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, ( "mbedtls_ssl_read_record_layer" ), ret );
 801dc72:	4b14      	ldr	r3, [pc, #80]	; (801dcc4 <mbedtls_ssl_read_record+0xa0>)
 801dc74:	9300      	str	r3, [sp, #0]
 801dc76:	9001      	str	r0, [sp, #4]
 801dc78:	f640 639b 	movw	r3, #3739	; 0xe9b
 801dc7c:	e7e9      	b.n	801dc52 <mbedtls_ssl_read_record+0x2e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801dc7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 801dc80:	2b16      	cmp	r3, #22
 801dc82:	d102      	bne.n	801dc8a <mbedtls_ssl_read_record+0x66>
            mbedtls_ssl_update_handshake_status( ssl );
 801dc84:	4628      	mov	r0, r5
 801dc86:	f7ff fb49 	bl	801d31c <mbedtls_ssl_update_handshake_status>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read record" ) );
 801dc8a:	4b0f      	ldr	r3, [pc, #60]	; (801dcc8 <mbedtls_ssl_read_record+0xa4>)
 801dc8c:	9300      	str	r3, [sp, #0]
 801dc8e:	4a0c      	ldr	r2, [pc, #48]	; (801dcc0 <mbedtls_ssl_read_record+0x9c>)
 801dc90:	f640 63aa 	movw	r3, #3754	; 0xeaa
 801dc94:	2102      	movs	r1, #2
 801dc96:	4628      	mov	r0, r5
 801dc98:	f7f2 ff18 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801dc9c:	2400      	movs	r4, #0
 801dc9e:	e7dd      	b.n	801dc5c <mbedtls_ssl_read_record+0x38>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= reuse previously read message" ) );
 801dca0:	4b0a      	ldr	r3, [pc, #40]	; (801dccc <mbedtls_ssl_read_record+0xa8>)
 801dca2:	9300      	str	r3, [sp, #0]
 801dca4:	4a06      	ldr	r2, [pc, #24]	; (801dcc0 <mbedtls_ssl_read_record+0x9c>)
 801dca6:	f640 63a6 	movw	r3, #3750	; 0xea6
 801dcaa:	2102      	movs	r1, #2
 801dcac:	4628      	mov	r0, r5
 801dcae:	f7f2 ff0d 	bl	8010acc <mbedtls_debug_print_msg>
        ssl->keep_current_message = 0;
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
 801dcb8:	e7e7      	b.n	801dc8a <mbedtls_ssl_read_record+0x66>
 801dcba:	bf00      	nop
 801dcbc:	080328dc 	.word	0x080328dc
 801dcc0:	08031ee5 	.word	0x08031ee5
 801dcc4:	080328eb 	.word	0x080328eb
 801dcc8:	0803292a 	.word	0x0803292a
 801dccc:	08032909 	.word	0x08032909

0801dcd0 <mbedtls_ssl_write_certificate>:
{
 801dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801dcd2:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dcd4:	4a5b      	ldr	r2, [pc, #364]	; (801de44 <mbedtls_ssl_write_certificate+0x174>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801dcd6:	681d      	ldr	r5, [r3, #0]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dcd8:	4b5b      	ldr	r3, [pc, #364]	; (801de48 <mbedtls_ssl_write_certificate+0x178>)
{
 801dcda:	b085      	sub	sp, #20
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dcdc:	2102      	movs	r1, #2
 801dcde:	9300      	str	r3, [sp, #0]
 801dce0:	f241 036b 	movw	r3, #4203	; 0x106b
{
 801dce4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write certificate" ) );
 801dce6:	f7f2 fef1 	bl	8010acc <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801dcea:	7aab      	ldrb	r3, [r5, #10]
 801dcec:	2b0b      	cmp	r3, #11
 801dcee:	d815      	bhi.n	801dd1c <mbedtls_ssl_write_certificate+0x4c>
 801dcf0:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801dcf4:	40dd      	lsrs	r5, r3
 801dcf6:	43ed      	mvns	r5, r5
 801dcf8:	f015 0501 	ands.w	r5, r5, #1
 801dcfc:	d10e      	bne.n	801dd1c <mbedtls_ssl_write_certificate+0x4c>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dcfe:	4b53      	ldr	r3, [pc, #332]	; (801de4c <mbedtls_ssl_write_certificate+0x17c>)
 801dd00:	9300      	str	r3, [sp, #0]
 801dd02:	f241 0372 	movw	r3, #4210	; 0x1072
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dd06:	4a4f      	ldr	r2, [pc, #316]	; (801de44 <mbedtls_ssl_write_certificate+0x174>)
 801dd08:	2102      	movs	r1, #2
 801dd0a:	4620      	mov	r0, r4
 801dd0c:	f7f2 fede 	bl	8010acc <mbedtls_debug_print_msg>
            ssl->state++;
 801dd10:	6863      	ldr	r3, [r4, #4]
 801dd12:	3301      	adds	r3, #1
 801dd14:	6063      	str	r3, [r4, #4]
}
 801dd16:	4628      	mov	r0, r5
 801dd18:	b005      	add	sp, #20
 801dd1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801dd1c:	6822      	ldr	r2, [r4, #0]
 801dd1e:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801dd22:	07db      	lsls	r3, r3, #31
 801dd24:	d407      	bmi.n	801dd36 <mbedtls_ssl_write_certificate+0x66>
        if( ssl->client_auth == 0 )
 801dd26:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 801dd2a:	b925      	cbnz	r5, 801dd36 <mbedtls_ssl_write_certificate+0x66>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip write certificate" ) );
 801dd2c:	4b47      	ldr	r3, [pc, #284]	; (801de4c <mbedtls_ssl_write_certificate+0x17c>)
 801dd2e:	9300      	str	r3, [sp, #0]
 801dd30:	f241 037c 	movw	r3, #4220	; 0x107c
 801dd34:	e7e7      	b.n	801dd06 <mbedtls_ssl_write_certificate+0x36>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801dd36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dd38:	b113      	cbz	r3, 801dd40 <mbedtls_ssl_write_certificate+0x70>
 801dd3a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801dd3e:	b90b      	cbnz	r3, 801dd44 <mbedtls_ssl_write_certificate+0x74>
        key_cert = ssl->conf->key_cert;
 801dd40:	6c13      	ldr	r3, [r2, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801dd42:	b103      	cbz	r3, 801dd46 <mbedtls_ssl_write_certificate+0x76>
 801dd44:	681b      	ldr	r3, [r3, #0]
    MBEDTLS_SSL_DEBUG_CRT( 3, "own certificate", mbedtls_ssl_own_cert( ssl ) );
 801dd46:	9301      	str	r3, [sp, #4]
 801dd48:	4b41      	ldr	r3, [pc, #260]	; (801de50 <mbedtls_ssl_write_certificate+0x180>)
 801dd4a:	9300      	str	r3, [sp, #0]
 801dd4c:	4a3d      	ldr	r2, [pc, #244]	; (801de44 <mbedtls_ssl_write_certificate+0x174>)
 801dd4e:	f241 039f 	movw	r3, #4255	; 0x109f
 801dd52:	2103      	movs	r1, #3
 801dd54:	4620      	mov	r0, r4
 801dd56:	f7f3 f813 	bl	8010d80 <mbedtls_debug_print_crt>
    if( ssl->handshake != NULL && ssl->handshake->key_cert != NULL )
 801dd5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dd5c:	b113      	cbz	r3, 801dd64 <mbedtls_ssl_write_certificate+0x94>
 801dd5e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801dd62:	b91b      	cbnz	r3, 801dd6c <mbedtls_ssl_write_certificate+0x9c>
        key_cert = ssl->conf->key_cert;
 801dd64:	6823      	ldr	r3, [r4, #0]
 801dd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    return( key_cert == NULL ? NULL : key_cert->cert );
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d05e      	beq.n	801de2a <mbedtls_ssl_write_certificate+0x15a>
 801dd6c:	681d      	ldr	r5, [r3, #0]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801dd6e:	f241 3785 	movw	r7, #4997	; 0x1385
 801dd72:	2307      	movs	r3, #7
    while( crt != NULL )
 801dd74:	bb45      	cbnz	r5, 801ddc8 <mbedtls_ssl_write_certificate+0xf8>
    ssl->out_msg[4]  = (unsigned char)( ( i - 7 ) >> 16 );
 801dd76:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dd7a:	1fda      	subs	r2, r3, #7
 801dd7c:	0c10      	lsrs	r0, r2, #16
 801dd7e:	7108      	strb	r0, [r1, #4]
    ssl->out_msg[5]  = (unsigned char)( ( i - 7 ) >>  8 );
 801dd80:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dd84:	0a10      	lsrs	r0, r2, #8
 801dd86:	7148      	strb	r0, [r1, #5]
    ssl->out_msg[6]  = (unsigned char)( ( i - 7 )       );
 801dd88:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801dd8c:	718a      	strb	r2, [r1, #6]
    ssl->out_msglen  = i;
 801dd8e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801dd92:	2316      	movs	r3, #22
 801dd94:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_CERTIFICATE;
 801dd98:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801dd9c:	220b      	movs	r2, #11
 801dd9e:	701a      	strb	r2, [r3, #0]
    ssl->state++;
 801dda0:	6863      	ldr	r3, [r4, #4]
 801dda2:	3301      	adds	r3, #1
 801dda4:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801dda6:	4620      	mov	r0, r4
 801dda8:	f7fe ffee 	bl	801cd88 <mbedtls_ssl_write_record>
 801ddac:	4605      	mov	r5, r0
 801ddae:	2800      	cmp	r0, #0
 801ddb0:	d03d      	beq.n	801de2e <mbedtls_ssl_write_certificate+0x15e>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801ddb2:	4b28      	ldr	r3, [pc, #160]	; (801de54 <mbedtls_ssl_write_certificate+0x184>)
 801ddb4:	9001      	str	r0, [sp, #4]
 801ddb6:	9300      	str	r3, [sp, #0]
 801ddb8:	4a22      	ldr	r2, [pc, #136]	; (801de44 <mbedtls_ssl_write_certificate+0x174>)
 801ddba:	f241 03cf 	movw	r3, #4303	; 0x10cf
 801ddbe:	2101      	movs	r1, #1
 801ddc0:	4620      	mov	r0, r4
 801ddc2:	f7f2 feb3 	bl	8010b2c <mbedtls_debug_print_ret>
        return( ret );
 801ddc6:	e7a6      	b.n	801dd16 <mbedtls_ssl_write_certificate+0x46>
        n = crt->raw.len;
 801ddc8:	686a      	ldr	r2, [r5, #4]
        if( n > MBEDTLS_SSL_MAX_CONTENT_LEN - 3 - i )
 801ddca:	1af9      	subs	r1, r7, r3
 801ddcc:	1cd8      	adds	r0, r3, #3
 801ddce:	4291      	cmp	r1, r2
 801ddd0:	eb00 0602 	add.w	r6, r0, r2
 801ddd4:	d20e      	bcs.n	801ddf4 <mbedtls_ssl_write_certificate+0x124>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801ddd6:	f241 3388 	movw	r3, #5000	; 0x1388
 801ddda:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801ddde:	4b1e      	ldr	r3, [pc, #120]	; (801de58 <mbedtls_ssl_write_certificate+0x188>)
 801dde0:	9300      	str	r3, [sp, #0]
 801dde2:	4a18      	ldr	r2, [pc, #96]	; (801de44 <mbedtls_ssl_write_certificate+0x174>)
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801dde4:	4d1d      	ldr	r5, [pc, #116]	; (801de5c <mbedtls_ssl_write_certificate+0x18c>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "certificate too large, %d > %d",
 801dde6:	f241 03b2 	movw	r3, #4274	; 0x10b2
 801ddea:	2101      	movs	r1, #1
 801ddec:	4620      	mov	r0, r4
 801ddee:	f7f2 fe6d 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE );
 801ddf2:	e790      	b.n	801dd16 <mbedtls_ssl_write_certificate+0x46>
        ssl->out_msg[i    ] = (unsigned char)( n >> 16 );
 801ddf4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801ddf8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ddfc:	f801 c003 	strb.w	ip, [r1, r3]
        ssl->out_msg[i + 1] = (unsigned char)( n >>  8 );
 801de00:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de04:	4419      	add	r1, r3
 801de06:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 801de0a:	f881 c001 	strb.w	ip, [r1, #1]
        ssl->out_msg[i + 2] = (unsigned char)( n       );
 801de0e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 801de12:	440b      	add	r3, r1
 801de14:	709a      	strb	r2, [r3, #2]
        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
 801de16:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801de1a:	68a9      	ldr	r1, [r5, #8]
 801de1c:	4418      	add	r0, r3
 801de1e:	f004 fae3 	bl	80223e8 <memcpy>
        i += n; crt = crt->next;
 801de22:	f8d5 5130 	ldr.w	r5, [r5, #304]	; 0x130
 801de26:	4633      	mov	r3, r6
 801de28:	e7a4      	b.n	801dd74 <mbedtls_ssl_write_certificate+0xa4>
 801de2a:	2307      	movs	r3, #7
 801de2c:	e7a3      	b.n	801dd76 <mbedtls_ssl_write_certificate+0xa6>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write certificate" ) );
 801de2e:	4b0c      	ldr	r3, [pc, #48]	; (801de60 <mbedtls_ssl_write_certificate+0x190>)
 801de30:	9300      	str	r3, [sp, #0]
 801de32:	4a04      	ldr	r2, [pc, #16]	; (801de44 <mbedtls_ssl_write_certificate+0x174>)
 801de34:	f241 03d3 	movw	r3, #4307	; 0x10d3
 801de38:	2102      	movs	r1, #2
 801de3a:	4620      	mov	r0, r4
 801de3c:	f7f2 fe46 	bl	8010acc <mbedtls_debug_print_msg>
    return( ret );
 801de40:	e769      	b.n	801dd16 <mbedtls_ssl_write_certificate+0x46>
 801de42:	bf00      	nop
 801de44:	08031ee5 	.word	0x08031ee5
 801de48:	08032939 	.word	0x08032939
 801de4c:	0803294e 	.word	0x0803294e
 801de50:	08032968 	.word	0x08032968
 801de54:	0803137d 	.word	0x0803137d
 801de58:	08032978 	.word	0x08032978
 801de5c:	ffff8b00 	.word	0xffff8b00
 801de60:	08032997 	.word	0x08032997

0801de64 <mbedtls_ssl_write_change_cipher_spec>:
{
 801de64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801de66:	4b17      	ldr	r3, [pc, #92]	; (801dec4 <mbedtls_ssl_write_change_cipher_spec+0x60>)
 801de68:	4a17      	ldr	r2, [pc, #92]	; (801dec8 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801de6a:	9300      	str	r3, [sp, #0]
{
 801de6c:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write change cipher spec" ) );
 801de6e:	f241 235c 	movw	r3, #4700	; 0x125c
 801de72:	2102      	movs	r1, #2
 801de74:	f7f2 fe2a 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->out_msglen  = 1;
 801de78:	2601      	movs	r6, #1
 801de7a:	2314      	movs	r3, #20
 801de7c:	e9c4 3629 	strd	r3, r6, [r4, #164]	; 0xa4
    ssl->out_msg[0]  = 1;
 801de80:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801de84:	701e      	strb	r6, [r3, #0]
    ssl->state++;
 801de86:	6863      	ldr	r3, [r4, #4]
 801de88:	4433      	add	r3, r6
 801de8a:	6063      	str	r3, [r4, #4]
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801de8c:	4620      	mov	r0, r4
 801de8e:	f7fe ff7b 	bl	801cd88 <mbedtls_ssl_write_record>
 801de92:	4605      	mov	r5, r0
 801de94:	b160      	cbz	r0, 801deb0 <mbedtls_ssl_write_change_cipher_spec+0x4c>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801de96:	4b0d      	ldr	r3, [pc, #52]	; (801decc <mbedtls_ssl_write_change_cipher_spec+0x68>)
 801de98:	9001      	str	r0, [sp, #4]
 801de9a:	9300      	str	r3, [sp, #0]
 801de9c:	4a0a      	ldr	r2, [pc, #40]	; (801dec8 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801de9e:	f241 2366 	movw	r3, #4710	; 0x1266
 801dea2:	4631      	mov	r1, r6
 801dea4:	4620      	mov	r0, r4
 801dea6:	f7f2 fe41 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801deaa:	4628      	mov	r0, r5
 801deac:	b002      	add	sp, #8
 801deae:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write change cipher spec" ) );
 801deb0:	4b07      	ldr	r3, [pc, #28]	; (801ded0 <mbedtls_ssl_write_change_cipher_spec+0x6c>)
 801deb2:	9300      	str	r3, [sp, #0]
 801deb4:	4a04      	ldr	r2, [pc, #16]	; (801dec8 <mbedtls_ssl_write_change_cipher_spec+0x64>)
 801deb6:	f241 236a 	movw	r3, #4714	; 0x126a
 801deba:	2102      	movs	r1, #2
 801debc:	4620      	mov	r0, r4
 801debe:	f7f2 fe05 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801dec2:	e7f2      	b.n	801deaa <mbedtls_ssl_write_change_cipher_spec+0x46>
 801dec4:	080329ac 	.word	0x080329ac
 801dec8:	08031ee5 	.word	0x08031ee5
 801decc:	0803137d 	.word	0x0803137d
 801ded0:	080329c8 	.word	0x080329c8

0801ded4 <mbedtls_ssl_parse_change_cipher_spec>:
{
 801ded4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801ded6:	4b36      	ldr	r3, [pc, #216]	; (801dfb0 <mbedtls_ssl_parse_change_cipher_spec+0xdc>)
 801ded8:	4a36      	ldr	r2, [pc, #216]	; (801dfb4 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801deda:	9300      	str	r3, [sp, #0]
{
 801dedc:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse change cipher spec" ) );
 801dede:	f241 2373 	movw	r3, #4723	; 0x1273
 801dee2:	2102      	movs	r1, #2
 801dee4:	f7f2 fdf2 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801dee8:	4620      	mov	r0, r4
 801deea:	f7ff fe9b 	bl	801dc24 <mbedtls_ssl_read_record>
 801deee:	4605      	mov	r5, r0
 801def0:	b160      	cbz	r0, 801df0c <mbedtls_ssl_parse_change_cipher_spec+0x38>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801def2:	4b31      	ldr	r3, [pc, #196]	; (801dfb8 <mbedtls_ssl_parse_change_cipher_spec+0xe4>)
 801def4:	9001      	str	r0, [sp, #4]
 801def6:	9300      	str	r3, [sp, #0]
 801def8:	4a2e      	ldr	r2, [pc, #184]	; (801dfb4 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801defa:	f241 2377 	movw	r3, #4727	; 0x1277
 801defe:	2101      	movs	r1, #1
 801df00:	4620      	mov	r0, r4
 801df02:	f7f2 fe13 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801df06:	4628      	mov	r0, r5
 801df08:	b003      	add	sp, #12
 801df0a:	bd30      	pop	{r4, r5, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC )
 801df0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801df0e:	2b14      	cmp	r3, #20
 801df10:	d00f      	beq.n	801df32 <mbedtls_ssl_parse_change_cipher_spec+0x5e>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801df12:	4b2a      	ldr	r3, [pc, #168]	; (801dfbc <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801df14:	4a27      	ldr	r2, [pc, #156]	; (801dfb4 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801df16:	9300      	str	r3, [sp, #0]
 801df18:	2101      	movs	r1, #1
 801df1a:	f241 237d 	movw	r3, #4733	; 0x127d
 801df1e:	4620      	mov	r0, r4
 801df20:	f7f2 fdd4 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801df24:	220a      	movs	r2, #10
 801df26:	2102      	movs	r1, #2
 801df28:	4620      	mov	r0, r4
 801df2a:	f7ff fa65 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801df2e:	4d24      	ldr	r5, [pc, #144]	; (801dfc0 <mbedtls_ssl_parse_change_cipher_spec+0xec>)
 801df30:	e7e9      	b.n	801df06 <mbedtls_ssl_parse_change_cipher_spec+0x32>
    if( ssl->in_msglen != 1 || ssl->in_msg[0] != 1 )
 801df32:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801df34:	2b01      	cmp	r3, #1
 801df36:	d103      	bne.n	801df40 <mbedtls_ssl_parse_change_cipher_spec+0x6c>
 801df38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801df3a:	781b      	ldrb	r3, [r3, #0]
 801df3c:	2b01      	cmp	r3, #1
 801df3e:	d00f      	beq.n	801df60 <mbedtls_ssl_parse_change_cipher_spec+0x8c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad change cipher spec message" ) );
 801df40:	4b1e      	ldr	r3, [pc, #120]	; (801dfbc <mbedtls_ssl_parse_change_cipher_spec+0xe8>)
 801df42:	4a1c      	ldr	r2, [pc, #112]	; (801dfb4 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801df44:	9300      	str	r3, [sp, #0]
 801df46:	2101      	movs	r1, #1
 801df48:	f241 2385 	movw	r3, #4741	; 0x1285
 801df4c:	4620      	mov	r0, r4
 801df4e:	f7f2 fdbd 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801df52:	2232      	movs	r2, #50	; 0x32
 801df54:	2102      	movs	r1, #2
 801df56:	4620      	mov	r0, r4
 801df58:	f7ff fa4e 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC );
 801df5c:	4d19      	ldr	r5, [pc, #100]	; (801dfc4 <mbedtls_ssl_parse_change_cipher_spec+0xf0>)
 801df5e:	e7d2      	b.n	801df06 <mbedtls_ssl_parse_change_cipher_spec+0x32>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for inbound data" ) );
 801df60:	4b19      	ldr	r3, [pc, #100]	; (801dfc8 <mbedtls_ssl_parse_change_cipher_spec+0xf4>)
 801df62:	4a14      	ldr	r2, [pc, #80]	; (801dfb4 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
 801df64:	9300      	str	r3, [sp, #0]
 801df66:	2103      	movs	r1, #3
 801df68:	4620      	mov	r0, r4
 801df6a:	f241 238f 	movw	r3, #4751	; 0x128f
 801df6e:	f7f2 fdad 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->transform_in = ssl->transform_negotiate;
 801df72:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801df74:	63e3      	str	r3, [r4, #60]	; 0x3c
    ssl->session_in = ssl->session_negotiate;
 801df76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df78:	62a3      	str	r3, [r4, #40]	; 0x28
    memset( ssl->in_ctr, 0, 8 );
 801df7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801df7c:	601d      	str	r5, [r3, #0]
 801df7e:	605d      	str	r5, [r3, #4]
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801df80:	6963      	ldr	r3, [r4, #20]
 801df82:	2b01      	cmp	r3, #1
        ssl->in_msg = ssl->in_iv + ssl->transform_negotiate->ivlen -
 801df84:	bfc8      	it	gt
 801df86:	6ca1      	ldrgt	r1, [r4, #72]	; 0x48
 801df88:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801df8a:	bfc2      	ittt	gt
 801df8c:	e9d1 2103 	ldrdgt	r2, r1, [r1, #12]
 801df90:	1a52      	subgt	r2, r2, r1
 801df92:	189b      	addgt	r3, r3, r2
 801df94:	66e3      	str	r3, [r4, #108]	; 0x6c
    ssl->state++;
 801df96:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801df98:	4a06      	ldr	r2, [pc, #24]	; (801dfb4 <mbedtls_ssl_parse_change_cipher_spec+0xe0>)
    ssl->state++;
 801df9a:	3301      	adds	r3, #1
 801df9c:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse change cipher spec" ) );
 801df9e:	4b0b      	ldr	r3, [pc, #44]	; (801dfcc <mbedtls_ssl_parse_change_cipher_spec+0xf8>)
 801dfa0:	9300      	str	r3, [sp, #0]
 801dfa2:	2102      	movs	r1, #2
 801dfa4:	f241 23c1 	movw	r3, #4801	; 0x12c1
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	f7f2 fd8f 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801dfae:	e7aa      	b.n	801df06 <mbedtls_ssl_parse_change_cipher_spec+0x32>
 801dfb0:	080329e4 	.word	0x080329e4
 801dfb4:	08031ee5 	.word	0x08031ee5
 801dfb8:	080313d6 	.word	0x080313d6
 801dfbc:	08032a00 	.word	0x08032a00
 801dfc0:	ffff8900 	.word	0xffff8900
 801dfc4:	ffff8200 	.word	0xffff8200
 801dfc8:	08032a1f 	.word	0x08032a1f
 801dfcc:	08032a50 	.word	0x08032a50

0801dfd0 <mbedtls_ssl_optimize_checksum>:
    if( ciphersuite_info->mac == MBEDTLS_MD_SHA384 )
 801dfd0:	7a4a      	ldrb	r2, [r1, #9]
 801dfd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801dfd4:	2a07      	cmp	r2, #7
        ssl->handshake->update_checksum = ssl_update_checksum_sha384;
 801dfd6:	bf0c      	ite	eq
 801dfd8:	4a02      	ldreq	r2, [pc, #8]	; (801dfe4 <mbedtls_ssl_optimize_checksum+0x14>)
        ssl->handshake->update_checksum = ssl_update_checksum_sha256;
 801dfda:	4a03      	ldrne	r2, [pc, #12]	; (801dfe8 <mbedtls_ssl_optimize_checksum+0x18>)
 801dfdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
}
 801dfe0:	4770      	bx	lr
 801dfe2:	bf00      	nop
 801dfe4:	0801c573 	.word	0x0801c573
 801dfe8:	0801c569 	.word	0x0801c569

0801dfec <mbedtls_ssl_write_finished>:
{
 801dfec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801dfee:	4b39      	ldr	r3, [pc, #228]	; (801e0d4 <mbedtls_ssl_write_finished+0xe8>)
 801dff0:	4a39      	ldr	r2, [pc, #228]	; (801e0d8 <mbedtls_ssl_write_finished+0xec>)
 801dff2:	9300      	str	r3, [sp, #0]
{
 801dff4:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write finished" ) );
 801dff6:	f241 4371 	movw	r3, #5233	; 0x1471
 801dffa:	2102      	movs	r1, #2
 801dffc:	f7f2 fd66 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_2 )
 801e000:	6963      	ldr	r3, [r4, #20]
 801e002:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 801e006:	2b01      	cmp	r3, #1
        ssl->out_msg = ssl->out_iv + ssl->transform_negotiate->ivlen -
 801e008:	bfc1      	itttt	gt
 801e00a:	6ca2      	ldrgt	r2, [r4, #72]	; 0x48
 801e00c:	e9d2 3203 	ldrdgt	r3, r2, [r2, #12]
 801e010:	1a9b      	subgt	r3, r3, r2
 801e012:	18c9      	addgt	r1, r1, r3
    ssl->handshake->calc_finished( ssl, ssl->out_msg + 4, ssl->conf->endpoint );
 801e014:	6823      	ldr	r3, [r4, #0]
 801e016:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
 801e01a:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801e01e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e020:	f002 0201 	and.w	r2, r2, #1
 801e024:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801e028:	3104      	adds	r1, #4
 801e02a:	4620      	mov	r0, r4
 801e02c:	4798      	blx	r3
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801e02e:	6963      	ldr	r3, [r4, #20]
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801e030:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    hash_len = ( ssl->minor_ver == MBEDTLS_SSL_MINOR_VERSION_0 ) ? 36 : 12;
 801e034:	2b00      	cmp	r3, #0
 801e036:	bf0c      	ite	eq
 801e038:	2524      	moveq	r5, #36	; 0x24
 801e03a:	250c      	movne	r5, #12
    ssl->verify_data_len = hash_len;
 801e03c:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
 801e040:	462a      	mov	r2, r5
 801e042:	1d31      	adds	r1, r6, #4
 801e044:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 801e048:	f004 f9ce 	bl	80223e8 <memcpy>
    ssl->out_msgtype = MBEDTLS_SSL_MSG_HANDSHAKE;
 801e04c:	2316      	movs	r3, #22
 801e04e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    ssl->out_msglen  = 4 + hash_len;
 801e052:	3504      	adds	r5, #4
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801e054:	2314      	movs	r3, #20
    ssl->out_msglen  = 4 + hash_len;
 801e056:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
    ssl->out_msg[0]  = MBEDTLS_SSL_HS_FINISHED;
 801e05a:	7033      	strb	r3, [r6, #0]
    if( ssl->handshake->resume != 0 )
 801e05c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e05e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801e062:	b353      	cbz	r3, 801e0ba <mbedtls_ssl_write_finished+0xce>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e064:	6823      	ldr	r3, [r4, #0]
 801e066:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e06a:	07db      	lsls	r3, r3, #31
 801e06c:	d401      	bmi.n	801e072 <mbedtls_ssl_write_finished+0x86>
            ssl->state = MBEDTLS_SSL_HANDSHAKE_WRAPUP;
 801e06e:	230f      	movs	r3, #15
        ssl->state++;
 801e070:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "switching to new transform spec for outbound data" ) );
 801e072:	4b1a      	ldr	r3, [pc, #104]	; (801e0dc <mbedtls_ssl_write_finished+0xf0>)
 801e074:	4a18      	ldr	r2, [pc, #96]	; (801e0d8 <mbedtls_ssl_write_finished+0xec>)
 801e076:	9300      	str	r3, [sp, #0]
 801e078:	2103      	movs	r1, #3
 801e07a:	f241 43a7 	movw	r3, #5287	; 0x14a7
 801e07e:	4620      	mov	r0, r4
 801e080:	f7f2 fd24 	bl	8010acc <mbedtls_debug_print_msg>
    memset( ssl->out_ctr, 0, 8 );
 801e084:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801e088:	2200      	movs	r2, #0
 801e08a:	601a      	str	r2, [r3, #0]
 801e08c:	605a      	str	r2, [r3, #4]
    ssl->transform_out = ssl->transform_negotiate;
 801e08e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e090:	6423      	str	r3, [r4, #64]	; 0x40
    ssl->session_out = ssl->session_negotiate;
 801e092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e094:	62e3      	str	r3, [r4, #44]	; 0x2c
    if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801e096:	4620      	mov	r0, r4
 801e098:	f7fe fe76 	bl	801cd88 <mbedtls_ssl_write_record>
 801e09c:	4605      	mov	r5, r0
 801e09e:	b178      	cbz	r0, 801e0c0 <mbedtls_ssl_write_finished+0xd4>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e0a0:	4b0f      	ldr	r3, [pc, #60]	; (801e0e0 <mbedtls_ssl_write_finished+0xf4>)
 801e0a2:	9001      	str	r0, [sp, #4]
 801e0a4:	9300      	str	r3, [sp, #0]
 801e0a6:	4a0c      	ldr	r2, [pc, #48]	; (801e0d8 <mbedtls_ssl_write_finished+0xec>)
 801e0a8:	f241 43da 	movw	r3, #5338	; 0x14da
 801e0ac:	2101      	movs	r1, #1
 801e0ae:	4620      	mov	r0, r4
 801e0b0:	f7f2 fd3c 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801e0b4:	4628      	mov	r0, r5
 801e0b6:	b002      	add	sp, #8
 801e0b8:	bd70      	pop	{r4, r5, r6, pc}
        ssl->state++;
 801e0ba:	6863      	ldr	r3, [r4, #4]
 801e0bc:	3301      	adds	r3, #1
 801e0be:	e7d7      	b.n	801e070 <mbedtls_ssl_write_finished+0x84>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write finished" ) );
 801e0c0:	4b08      	ldr	r3, [pc, #32]	; (801e0e4 <mbedtls_ssl_write_finished+0xf8>)
 801e0c2:	9300      	str	r3, [sp, #0]
 801e0c4:	4a04      	ldr	r2, [pc, #16]	; (801e0d8 <mbedtls_ssl_write_finished+0xec>)
 801e0c6:	f241 43de 	movw	r3, #5342	; 0x14de
 801e0ca:	2102      	movs	r1, #2
 801e0cc:	4620      	mov	r0, r4
 801e0ce:	f7f2 fcfd 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801e0d2:	e7ef      	b.n	801e0b4 <mbedtls_ssl_write_finished+0xc8>
 801e0d4:	08032a6c 	.word	0x08032a6c
 801e0d8:	08031ee5 	.word	0x08031ee5
 801e0dc:	08032a7e 	.word	0x08032a7e
 801e0e0:	0803137d 	.word	0x0803137d
 801e0e4:	08032ab0 	.word	0x08032ab0

0801e0e8 <mbedtls_ssl_parse_finished>:
{
 801e0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0ea:	b087      	sub	sp, #28
 801e0ec:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse finished" ) );
 801e0ee:	4b44      	ldr	r3, [pc, #272]	; (801e200 <mbedtls_ssl_parse_finished+0x118>)
 801e0f0:	4a44      	ldr	r2, [pc, #272]	; (801e204 <mbedtls_ssl_parse_finished+0x11c>)
 801e0f2:	9300      	str	r3, [sp, #0]
 801e0f4:	2102      	movs	r1, #2
 801e0f6:	f241 43ef 	movw	r3, #5359	; 0x14ef
 801e0fa:	f7f2 fce7 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->handshake->calc_finished( ssl, buf, ssl->conf->endpoint ^ 1 );
 801e0fe:	6823      	ldr	r3, [r4, #0]
 801e100:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801e104:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e106:	43d2      	mvns	r2, r2
 801e108:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 801e10c:	f002 0201 	and.w	r2, r2, #1
 801e110:	a903      	add	r1, sp, #12
 801e112:	4620      	mov	r0, r4
 801e114:	4798      	blx	r3
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801e116:	4620      	mov	r0, r4
 801e118:	f7ff fd84 	bl	801dc24 <mbedtls_ssl_read_record>
 801e11c:	4605      	mov	r5, r0
 801e11e:	b160      	cbz	r0, 801e13a <mbedtls_ssl_parse_finished+0x52>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801e120:	4b39      	ldr	r3, [pc, #228]	; (801e208 <mbedtls_ssl_parse_finished+0x120>)
 801e122:	9001      	str	r0, [sp, #4]
 801e124:	9300      	str	r3, [sp, #0]
 801e126:	4a37      	ldr	r2, [pc, #220]	; (801e204 <mbedtls_ssl_parse_finished+0x11c>)
 801e128:	f241 43f5 	movw	r3, #5365	; 0x14f5
 801e12c:	2101      	movs	r1, #1
 801e12e:	4620      	mov	r0, r4
 801e130:	f7f2 fcfc 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801e134:	4628      	mov	r0, r5
 801e136:	b007      	add	sp, #28
 801e138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801e13a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801e13c:	2b16      	cmp	r3, #22
 801e13e:	d00f      	beq.n	801e160 <mbedtls_ssl_parse_finished+0x78>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e140:	4b32      	ldr	r3, [pc, #200]	; (801e20c <mbedtls_ssl_parse_finished+0x124>)
 801e142:	4a30      	ldr	r2, [pc, #192]	; (801e204 <mbedtls_ssl_parse_finished+0x11c>)
 801e144:	9300      	str	r3, [sp, #0]
 801e146:	2101      	movs	r1, #1
 801e148:	f241 43fb 	movw	r3, #5371	; 0x14fb
 801e14c:	4620      	mov	r0, r4
 801e14e:	f7f2 fcbd 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801e152:	220a      	movs	r2, #10
 801e154:	2102      	movs	r1, #2
 801e156:	4620      	mov	r0, r4
 801e158:	f7ff f94e 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801e15c:	4d2c      	ldr	r5, [pc, #176]	; (801e210 <mbedtls_ssl_parse_finished+0x128>)
 801e15e:	e7e9      	b.n	801e134 <mbedtls_ssl_parse_finished+0x4c>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_FINISHED ||
 801e160:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801e162:	781a      	ldrb	r2, [r3, #0]
 801e164:	2a14      	cmp	r2, #20
 801e166:	d103      	bne.n	801e170 <mbedtls_ssl_parse_finished+0x88>
 801e168:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 801e16c:	2a10      	cmp	r2, #16
 801e16e:	d00f      	beq.n	801e190 <mbedtls_ssl_parse_finished+0xa8>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e170:	4b26      	ldr	r3, [pc, #152]	; (801e20c <mbedtls_ssl_parse_finished+0x124>)
 801e172:	9300      	str	r3, [sp, #0]
 801e174:	f241 530c 	movw	r3, #5388	; 0x150c
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e178:	4a22      	ldr	r2, [pc, #136]	; (801e204 <mbedtls_ssl_parse_finished+0x11c>)
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801e17a:	4d26      	ldr	r5, [pc, #152]	; (801e214 <mbedtls_ssl_parse_finished+0x12c>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e17c:	2101      	movs	r1, #1
 801e17e:	4620      	mov	r0, r4
 801e180:	f7f2 fca4 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801e184:	2232      	movs	r2, #50	; 0x32
 801e186:	2102      	movs	r1, #2
 801e188:	4620      	mov	r0, r4
 801e18a:	f7ff f935 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_BAD_HS_FINISHED );
 801e18e:	e7d1      	b.n	801e134 <mbedtls_ssl_parse_finished+0x4c>
 801e190:	1cd9      	adds	r1, r3, #3
 801e192:	ae03      	add	r6, sp, #12
 801e194:	330f      	adds	r3, #15
    unsigned char diff = 0;
 801e196:	4602      	mov	r2, r0
        diff |= A[i] ^ B[i];
 801e198:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 801e19c:	f816 0b01 	ldrb.w	r0, [r6], #1
    for( i = 0; i < n; i++ )
 801e1a0:	4299      	cmp	r1, r3
        diff |= A[i] ^ B[i];
 801e1a2:	ea80 0007 	eor.w	r0, r0, r7
 801e1a6:	ea42 0200 	orr.w	r2, r2, r0
    for( i = 0; i < n; i++ )
 801e1aa:	d1f5      	bne.n	801e198 <mbedtls_ssl_parse_finished+0xb0>
    if( mbedtls_ssl_safer_memcmp( ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl ),
 801e1ac:	b122      	cbz	r2, 801e1b8 <mbedtls_ssl_parse_finished+0xd0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad finished message" ) );
 801e1ae:	4b17      	ldr	r3, [pc, #92]	; (801e20c <mbedtls_ssl_parse_finished+0x124>)
 801e1b0:	9300      	str	r3, [sp, #0]
 801e1b2:	f241 5315 	movw	r3, #5397	; 0x1515
 801e1b6:	e7df      	b.n	801e178 <mbedtls_ssl_parse_finished+0x90>
    ssl->verify_data_len = hash_len;
 801e1b8:	230c      	movs	r3, #12
 801e1ba:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801e1be:	446b      	add	r3, sp
 801e1c0:	cb03      	ldmia	r3!, {r0, r1}
 801e1c2:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
 801e1c6:	6818      	ldr	r0, [r3, #0]
    if( ssl->handshake->resume != 0 )
 801e1c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    memcpy( ssl->peer_verify_data, buf, hash_len );
 801e1ca:	f8c4 10d4 	str.w	r1, [r4, #212]	; 0xd4
 801e1ce:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    if( ssl->handshake->resume != 0 )
 801e1d2:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 801e1d6:	b183      	cbz	r3, 801e1fa <mbedtls_ssl_parse_finished+0x112>
        if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e1d8:	6823      	ldr	r3, [r4, #0]
 801e1da:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e1de:	07db      	lsls	r3, r3, #31
 801e1e0:	d401      	bmi.n	801e1e6 <mbedtls_ssl_parse_finished+0xfe>
            ssl->state = MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC;
 801e1e2:	230a      	movs	r3, #10
        ssl->state++;
 801e1e4:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse finished" ) );
 801e1e6:	4b0c      	ldr	r3, [pc, #48]	; (801e218 <mbedtls_ssl_parse_finished+0x130>)
 801e1e8:	9300      	str	r3, [sp, #0]
 801e1ea:	4a06      	ldr	r2, [pc, #24]	; (801e204 <mbedtls_ssl_parse_finished+0x11c>)
 801e1ec:	f241 5333 	movw	r3, #5427	; 0x1533
 801e1f0:	2102      	movs	r1, #2
 801e1f2:	4620      	mov	r0, r4
 801e1f4:	f7f2 fc6a 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801e1f8:	e79c      	b.n	801e134 <mbedtls_ssl_parse_finished+0x4c>
        ssl->state++;
 801e1fa:	6863      	ldr	r3, [r4, #4]
 801e1fc:	3301      	adds	r3, #1
 801e1fe:	e7f1      	b.n	801e1e4 <mbedtls_ssl_parse_finished+0xfc>
 801e200:	08032ac2 	.word	0x08032ac2
 801e204:	08031ee5 	.word	0x08031ee5
 801e208:	080313d6 	.word	0x080313d6
 801e20c:	08032ad4 	.word	0x08032ad4
 801e210:	ffff8900 	.word	0xffff8900
 801e214:	ffff8180 	.word	0xffff8180
 801e218:	08032ae9 	.word	0x08032ae9

0801e21c <mbedtls_ssl_session_init>:
    memset( session, 0, sizeof(mbedtls_ssl_session) );
 801e21c:	2280      	movs	r2, #128	; 0x80
 801e21e:	2100      	movs	r1, #0
 801e220:	f004 b90a 	b.w	8022438 <memset>

0801e224 <mbedtls_ssl_conf_authmode>:
    conf->authmode   = authmode;
 801e224:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 801e228:	f361 0383 	bfi	r3, r1, #2, #2
 801e22c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
}
 801e230:	4770      	bx	lr

0801e232 <mbedtls_ssl_conf_rng>:
    conf->p_rng      = p_rng;
 801e232:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801e236:	4770      	bx	lr

0801e238 <mbedtls_ssl_conf_dbg>:
    conf->p_dbg      = p_dbg;
 801e238:	e9c0 1204 	strd	r1, r2, [r0, #16]
}
 801e23c:	4770      	bx	lr

0801e23e <mbedtls_ssl_set_bio>:
    ssl->f_recv         = f_recv;
 801e23e:	e9c0 2306 	strd	r2, r3, [r0, #24]
    ssl->f_recv_timeout = f_recv_timeout;
 801e242:	9b00      	ldr	r3, [sp, #0]
    ssl->p_bio          = p_bio;
 801e244:	6241      	str	r1, [r0, #36]	; 0x24
    ssl->f_recv_timeout = f_recv_timeout;
 801e246:	6203      	str	r3, [r0, #32]
}
 801e248:	4770      	bx	lr

0801e24a <mbedtls_ssl_conf_read_timeout>:
    conf->read_timeout   = timeout;
 801e24a:	6581      	str	r1, [r0, #88]	; 0x58
}
 801e24c:	4770      	bx	lr

0801e24e <mbedtls_ssl_conf_own_cert>:
    return( ssl_append_key_cert( &conf->key_cert, own_cert, pk_key ) );
 801e24e:	3040      	adds	r0, #64	; 0x40
 801e250:	f7fd bf62 	b.w	801c118 <ssl_append_key_cert>

0801e254 <mbedtls_ssl_conf_ca_chain>:
    conf->ca_crl     = ca_crl;
 801e254:	e9c0 1211 	strd	r1, r2, [r0, #68]	; 0x44
}
 801e258:	4770      	bx	lr
	...

0801e25c <mbedtls_ssl_set_hostname>:
{
 801e25c:	b570      	push	{r4, r5, r6, lr}
 801e25e:	4606      	mov	r6, r0
    if( hostname == NULL )
 801e260:	460d      	mov	r5, r1
 801e262:	b1b9      	cbz	r1, 801e294 <mbedtls_ssl_set_hostname+0x38>
    hostname_len = strlen( hostname );
 801e264:	4608      	mov	r0, r1
 801e266:	f7e1 ffbd 	bl	80001e4 <strlen>
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e26a:	28ff      	cmp	r0, #255	; 0xff
    hostname_len = strlen( hostname );
 801e26c:	4604      	mov	r4, r0
    if( hostname_len > MBEDTLS_SSL_MAX_HOST_NAME_LEN )
 801e26e:	d811      	bhi.n	801e294 <mbedtls_ssl_set_hostname+0x38>
    ssl->hostname = mbedtls_calloc( 1, hostname_len + 1 );
 801e270:	4b0a      	ldr	r3, [pc, #40]	; (801e29c <mbedtls_ssl_set_hostname+0x40>)
 801e272:	1c41      	adds	r1, r0, #1
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	2001      	movs	r0, #1
 801e278:	4798      	blx	r3
 801e27a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    if( ssl->hostname == NULL )
 801e27e:	b158      	cbz	r0, 801e298 <mbedtls_ssl_set_hostname+0x3c>
    memcpy( ssl->hostname, hostname, hostname_len );
 801e280:	4622      	mov	r2, r4
 801e282:	4629      	mov	r1, r5
 801e284:	f004 f8b0 	bl	80223e8 <memcpy>
    ssl->hostname[hostname_len] = '\0';
 801e288:	f8d6 20b4 	ldr.w	r2, [r6, #180]	; 0xb4
 801e28c:	2300      	movs	r3, #0
 801e28e:	5513      	strb	r3, [r2, r4]
    return( 0 );
 801e290:	4618      	mov	r0, r3
}
 801e292:	bd70      	pop	{r4, r5, r6, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e294:	4802      	ldr	r0, [pc, #8]	; (801e2a0 <mbedtls_ssl_set_hostname+0x44>)
 801e296:	e7fc      	b.n	801e292 <mbedtls_ssl_set_hostname+0x36>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e298:	4802      	ldr	r0, [pc, #8]	; (801e2a4 <mbedtls_ssl_set_hostname+0x48>)
 801e29a:	e7fa      	b.n	801e292 <mbedtls_ssl_set_hostname+0x36>
 801e29c:	200005a0 	.word	0x200005a0
 801e2a0:	ffff8f00 	.word	0xffff8f00
 801e2a4:	ffff8100 	.word	0xffff8100

0801e2a8 <mbedtls_ssl_get_verify_result>:
    if( ssl->session != NULL )
 801e2a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e2aa:	b10b      	cbz	r3, 801e2b0 <mbedtls_ssl_get_verify_result+0x8>
        return( ssl->session_negotiate->verify_result );
 801e2ac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801e2ae:	4770      	bx	lr
    if( ssl->session_negotiate != NULL )
 801e2b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d1fa      	bne.n	801e2ac <mbedtls_ssl_get_verify_result+0x4>
    return( 0xFFFFFFFF );
 801e2b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e2ba:	4770      	bx	lr

0801e2bc <mbedtls_ssl_get_record_expansion>:
    const mbedtls_ssl_transform *transform = ssl->transform_out;
 801e2bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 801e2be:	b507      	push	{r0, r1, r2, lr}
    if( transform == NULL )
 801e2c0:	b1d3      	cbz	r3, 801e2f8 <mbedtls_ssl_get_record_expansion+0x3c>
    if( NULL == ctx || NULL == ctx->cipher_info )
 801e2c2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e2c4:	b161      	cbz	r1, 801e2e0 <mbedtls_ssl_get_record_expansion+0x24>
    return ctx->cipher_info->mode;
 801e2c6:	784a      	ldrb	r2, [r1, #1]
    switch( mbedtls_cipher_get_cipher_mode( &transform->cipher_ctx_enc ) )
 801e2c8:	2a02      	cmp	r2, #2
 801e2ca:	d005      	beq.n	801e2d8 <mbedtls_ssl_get_record_expansion+0x1c>
 801e2cc:	3a06      	subs	r2, #6
 801e2ce:	2a02      	cmp	r2, #2
 801e2d0:	d806      	bhi.n	801e2e0 <mbedtls_ssl_get_record_expansion+0x24>
            transform_expansion = transform->minlen;
 801e2d2:	6898      	ldr	r0, [r3, #8]
    return( (int)( mbedtls_ssl_hdr_len( ssl ) + transform_expansion ) );
 801e2d4:	3005      	adds	r0, #5
 801e2d6:	e00c      	b.n	801e2f2 <mbedtls_ssl_get_record_expansion+0x36>
            transform_expansion = transform->maclen
 801e2d8:	6958      	ldr	r0, [r3, #20]
 801e2da:	694b      	ldr	r3, [r1, #20]
 801e2dc:	4418      	add	r0, r3
            break;
 801e2de:	e7f9      	b.n	801e2d4 <mbedtls_ssl_get_record_expansion+0x18>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801e2e0:	4b06      	ldr	r3, [pc, #24]	; (801e2fc <mbedtls_ssl_get_record_expansion+0x40>)
 801e2e2:	9300      	str	r3, [sp, #0]
 801e2e4:	4a06      	ldr	r2, [pc, #24]	; (801e300 <mbedtls_ssl_get_record_expansion+0x44>)
 801e2e6:	f641 1346 	movw	r3, #6470	; 0x1946
 801e2ea:	2101      	movs	r1, #1
 801e2ec:	f7f2 fbee 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801e2f0:	4804      	ldr	r0, [pc, #16]	; (801e304 <mbedtls_ssl_get_record_expansion+0x48>)
}
 801e2f2:	b003      	add	sp, #12
 801e2f4:	f85d fb04 	ldr.w	pc, [sp], #4
        return( (int) mbedtls_ssl_hdr_len( ssl ) );
 801e2f8:	2005      	movs	r0, #5
 801e2fa:	e7fa      	b.n	801e2f2 <mbedtls_ssl_get_record_expansion+0x36>
 801e2fc:	08031a15 	.word	0x08031a15
 801e300:	08031ee5 	.word	0x08031ee5
 801e304:	ffff9400 	.word	0xffff9400

0801e308 <mbedtls_ssl_get_max_frag_len>:
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e308:	6803      	ldr	r3, [r0, #0]
 801e30a:	4a09      	ldr	r2, [pc, #36]	; (801e330 <mbedtls_ssl_get_max_frag_len+0x28>)
 801e30c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
    if( ssl->session_out != NULL &&
 801e310:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    max_len = mfl_code_to_length[ssl->conf->mfl_code];
 801e312:	f3c3 1382 	ubfx	r3, r3, #6, #3
 801e316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if( ssl->session_out != NULL &&
 801e31a:	b131      	cbz	r1, 801e32a <mbedtls_ssl_get_max_frag_len+0x22>
        mfl_code_to_length[ssl->session_out->mfl_code] < max_len )
 801e31c:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 801e320:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801e324:	4293      	cmp	r3, r2
 801e326:	bf28      	it	cs
 801e328:	4613      	movcs	r3, r2
}
 801e32a:	4618      	mov	r0, r3
 801e32c:	4770      	bx	lr
 801e32e:	bf00      	nop
 801e330:	0802d58c 	.word	0x0802d58c

0801e334 <mbedtls_ssl_handshake_step>:
    if( ssl == NULL || ssl->conf == NULL )
 801e334:	b138      	cbz	r0, 801e346 <mbedtls_ssl_handshake_step+0x12>
 801e336:	6803      	ldr	r3, [r0, #0]
 801e338:	b12b      	cbz	r3, 801e346 <mbedtls_ssl_handshake_step+0x12>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT )
 801e33a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e33e:	07db      	lsls	r3, r3, #31
 801e340:	d403      	bmi.n	801e34a <mbedtls_ssl_handshake_step+0x16>
        ret = mbedtls_ssl_handshake_client_step( ssl );
 801e342:	f7fc bc51 	b.w	801abe8 <mbedtls_ssl_handshake_client_step>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e346:	4802      	ldr	r0, [pc, #8]	; (801e350 <mbedtls_ssl_handshake_step+0x1c>)
 801e348:	4770      	bx	lr
    int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
 801e34a:	4802      	ldr	r0, [pc, #8]	; (801e354 <mbedtls_ssl_handshake_step+0x20>)
}
 801e34c:	4770      	bx	lr
 801e34e:	bf00      	nop
 801e350:	ffff8f00 	.word	0xffff8f00
 801e354:	ffff8f80 	.word	0xffff8f80

0801e358 <mbedtls_ssl_handshake>:
{
 801e358:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e35a:	4605      	mov	r5, r0
 801e35c:	b300      	cbz	r0, 801e3a0 <mbedtls_ssl_handshake+0x48>
 801e35e:	6803      	ldr	r3, [r0, #0]
 801e360:	b1f3      	cbz	r3, 801e3a0 <mbedtls_ssl_handshake+0x48>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> handshake" ) );
 801e362:	4b10      	ldr	r3, [pc, #64]	; (801e3a4 <mbedtls_ssl_handshake+0x4c>)
 801e364:	9300      	str	r3, [sp, #0]
 801e366:	4a10      	ldr	r2, [pc, #64]	; (801e3a8 <mbedtls_ssl_handshake+0x50>)
 801e368:	f641 139d 	movw	r3, #6557	; 0x199d
 801e36c:	2102      	movs	r1, #2
 801e36e:	f7f2 fbad 	bl	8010acc <mbedtls_debug_print_msg>
    while( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e372:	686b      	ldr	r3, [r5, #4]
 801e374:	2b10      	cmp	r3, #16
 801e376:	d101      	bne.n	801e37c <mbedtls_ssl_handshake+0x24>
 801e378:	2400      	movs	r4, #0
 801e37a:	e005      	b.n	801e388 <mbedtls_ssl_handshake+0x30>
        ret = mbedtls_ssl_handshake_step( ssl );
 801e37c:	4628      	mov	r0, r5
 801e37e:	f7ff ffd9 	bl	801e334 <mbedtls_ssl_handshake_step>
        if( ret != 0 )
 801e382:	4604      	mov	r4, r0
 801e384:	2800      	cmp	r0, #0
 801e386:	d0f4      	beq.n	801e372 <mbedtls_ssl_handshake+0x1a>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= handshake" ) );
 801e388:	4b08      	ldr	r3, [pc, #32]	; (801e3ac <mbedtls_ssl_handshake+0x54>)
 801e38a:	9300      	str	r3, [sp, #0]
 801e38c:	4a06      	ldr	r2, [pc, #24]	; (801e3a8 <mbedtls_ssl_handshake+0x50>)
 801e38e:	f641 13a7 	movw	r3, #6567	; 0x19a7
 801e392:	2102      	movs	r1, #2
 801e394:	4628      	mov	r0, r5
 801e396:	f7f2 fb99 	bl	8010acc <mbedtls_debug_print_msg>
}
 801e39a:	4620      	mov	r0, r4
 801e39c:	b003      	add	sp, #12
 801e39e:	bd30      	pop	{r4, r5, pc}
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e3a0:	4c03      	ldr	r4, [pc, #12]	; (801e3b0 <mbedtls_ssl_handshake+0x58>)
 801e3a2:	e7fa      	b.n	801e39a <mbedtls_ssl_handshake+0x42>
 801e3a4:	08032afb 	.word	0x08032afb
 801e3a8:	08031ee5 	.word	0x08031ee5
 801e3ac:	08032b08 	.word	0x08032b08
 801e3b0:	ffff8f00 	.word	0xffff8f00

0801e3b4 <mbedtls_ssl_close_notify>:
{
 801e3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e3b6:	4604      	mov	r4, r0
 801e3b8:	2800      	cmp	r0, #0
 801e3ba:	d033      	beq.n	801e424 <mbedtls_ssl_close_notify+0x70>
 801e3bc:	6803      	ldr	r3, [r0, #0]
 801e3be:	b38b      	cbz	r3, 801e424 <mbedtls_ssl_close_notify+0x70>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write close notify" ) );
 801e3c0:	4b19      	ldr	r3, [pc, #100]	; (801e428 <mbedtls_ssl_close_notify+0x74>)
 801e3c2:	4a1a      	ldr	r2, [pc, #104]	; (801e42c <mbedtls_ssl_close_notify+0x78>)
 801e3c4:	9300      	str	r3, [sp, #0]
 801e3c6:	2102      	movs	r1, #2
 801e3c8:	f641 4312 	movw	r3, #7186	; 0x1c12
 801e3cc:	f7f2 fb7e 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->out_left != 0 )
 801e3d0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 801e3d4:	b12a      	cbz	r2, 801e3e2 <mbedtls_ssl_close_notify+0x2e>
        return( mbedtls_ssl_flush_output( ssl ) );
 801e3d6:	4620      	mov	r0, r4
}
 801e3d8:	b003      	add	sp, #12
 801e3da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return( mbedtls_ssl_flush_output( ssl ) );
 801e3de:	f7fe bc47 	b.w	801cc70 <mbedtls_ssl_flush_output>
    if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801e3e2:	6863      	ldr	r3, [r4, #4]
 801e3e4:	2b10      	cmp	r3, #16
 801e3e6:	d112      	bne.n	801e40e <mbedtls_ssl_close_notify+0x5a>
        if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801e3e8:	2101      	movs	r1, #1
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	f7ff f804 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
 801e3f0:	4605      	mov	r5, r0
 801e3f2:	b160      	cbz	r0, 801e40e <mbedtls_ssl_close_notify+0x5a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_send_alert_message", ret );
 801e3f4:	4b0e      	ldr	r3, [pc, #56]	; (801e430 <mbedtls_ssl_close_notify+0x7c>)
 801e3f6:	9001      	str	r0, [sp, #4]
 801e3f8:	9300      	str	r3, [sp, #0]
 801e3fa:	4a0c      	ldr	r2, [pc, #48]	; (801e42c <mbedtls_ssl_close_notify+0x78>)
 801e3fc:	f641 431d 	movw	r3, #7197	; 0x1c1d
 801e400:	2101      	movs	r1, #1
 801e402:	4620      	mov	r0, r4
 801e404:	f7f2 fb92 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801e408:	4628      	mov	r0, r5
 801e40a:	b003      	add	sp, #12
 801e40c:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write close notify" ) );
 801e40e:	4b09      	ldr	r3, [pc, #36]	; (801e434 <mbedtls_ssl_close_notify+0x80>)
 801e410:	9300      	str	r3, [sp, #0]
 801e412:	4a06      	ldr	r2, [pc, #24]	; (801e42c <mbedtls_ssl_close_notify+0x78>)
 801e414:	f641 4322 	movw	r3, #7202	; 0x1c22
 801e418:	2102      	movs	r1, #2
 801e41a:	4620      	mov	r0, r4
 801e41c:	f7f2 fb56 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801e420:	2500      	movs	r5, #0
 801e422:	e7f1      	b.n	801e408 <mbedtls_ssl_close_notify+0x54>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e424:	4d04      	ldr	r5, [pc, #16]	; (801e438 <mbedtls_ssl_close_notify+0x84>)
 801e426:	e7ef      	b.n	801e408 <mbedtls_ssl_close_notify+0x54>
 801e428:	08032b15 	.word	0x08032b15
 801e42c:	08031ee5 	.word	0x08031ee5
 801e430:	08032b2b 	.word	0x08032b2b
 801e434:	08032b4a 	.word	0x08032b4a
 801e438:	ffff8f00 	.word	0xffff8f00

0801e43c <mbedtls_ssl_transform_free>:
{
 801e43c:	b510      	push	{r4, lr}
    if( transform == NULL )
 801e43e:	4604      	mov	r4, r0
 801e440:	b1a0      	cbz	r0, 801e46c <mbedtls_ssl_transform_free+0x30>
    mbedtls_cipher_free( &transform->cipher_ctx_enc );
 801e442:	3050      	adds	r0, #80	; 0x50
 801e444:	f7f1 fe2e 	bl	80100a4 <mbedtls_cipher_free>
    mbedtls_cipher_free( &transform->cipher_ctx_dec );
 801e448:	f104 0090 	add.w	r0, r4, #144	; 0x90
 801e44c:	f7f1 fe2a 	bl	80100a4 <mbedtls_cipher_free>
    mbedtls_md_free( &transform->md_ctx_enc );
 801e450:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801e454:	f7f6 fa38 	bl	80148c8 <mbedtls_md_free>
    mbedtls_md_free( &transform->md_ctx_dec );
 801e458:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801e45c:	f7f6 fa34 	bl	80148c8 <mbedtls_md_free>
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e460:	4620      	mov	r0, r4
 801e462:	21d0      	movs	r1, #208	; 0xd0
}
 801e464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_zeroize( transform, sizeof( mbedtls_ssl_transform ) );
 801e468:	f7fd be4e 	b.w	801c108 <mbedtls_zeroize>
}
 801e46c:	bd10      	pop	{r4, pc}
	...

0801e470 <mbedtls_ssl_handshake_free>:
{
 801e470:	b570      	push	{r4, r5, r6, lr}
    if( handshake == NULL )
 801e472:	4604      	mov	r4, r0
 801e474:	b1f0      	cbz	r0, 801e4b4 <mbedtls_ssl_handshake_free+0x44>
    mbedtls_sha256_free(   &handshake->fin_sha256    );
 801e476:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 801e47a:	f7fa fa78 	bl	801896e <mbedtls_sha256_free>
    mbedtls_free( (void *) handshake->curves );
 801e47e:	4e0e      	ldr	r6, [pc, #56]	; (801e4b8 <mbedtls_ssl_handshake_free+0x48>)
    mbedtls_sha512_free(   &handshake->fin_sha512    );
 801e480:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e484:	f7fa ff05 	bl	8019292 <mbedtls_sha512_free>
    mbedtls_ecdh_free( &handshake->ecdh_ctx );
 801e488:	1d20      	adds	r0, r4, #4
 801e48a:	f7f2 fd6e 	bl	8010f6a <mbedtls_ecdh_free>
    mbedtls_free( (void *) handshake->curves );
 801e48e:	6833      	ldr	r3, [r6, #0]
 801e490:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 801e494:	4798      	blx	r3
    if( handshake->sni_key_cert != NULL )
 801e496:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
 801e49a:	b125      	cbz	r5, 801e4a6 <mbedtls_ssl_handshake_free+0x36>
            next = cur->next;
 801e49c:	4628      	mov	r0, r5
            mbedtls_free( cur );
 801e49e:	6833      	ldr	r3, [r6, #0]
            next = cur->next;
 801e4a0:	68ad      	ldr	r5, [r5, #8]
            mbedtls_free( cur );
 801e4a2:	4798      	blx	r3
        while( cur != NULL )
 801e4a4:	e7f9      	b.n	801e49a <mbedtls_ssl_handshake_free+0x2a>
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e4a6:	4620      	mov	r0, r4
 801e4a8:	f44f 7152 	mov.w	r1, #840	; 0x348
}
 801e4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( handshake, sizeof( mbedtls_ssl_handshake_params ) );
 801e4b0:	f7fd be2a 	b.w	801c108 <mbedtls_zeroize>
}
 801e4b4:	bd70      	pop	{r4, r5, r6, pc}
 801e4b6:	bf00      	nop
 801e4b8:	200005a4 	.word	0x200005a4

0801e4bc <mbedtls_ssl_session_free>:
{
 801e4bc:	b538      	push	{r3, r4, r5, lr}
    if( session == NULL )
 801e4be:	4604      	mov	r4, r0
 801e4c0:	b180      	cbz	r0, 801e4e4 <mbedtls_ssl_session_free+0x28>
    if( session->peer_cert != NULL )
 801e4c2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e4c4:	4d08      	ldr	r5, [pc, #32]	; (801e4e8 <mbedtls_ssl_session_free+0x2c>)
 801e4c6:	b120      	cbz	r0, 801e4d2 <mbedtls_ssl_session_free+0x16>
        mbedtls_x509_crt_free( session->peer_cert );
 801e4c8:	f002 fe94 	bl	80211f4 <mbedtls_x509_crt_free>
        mbedtls_free( session->peer_cert );
 801e4cc:	682b      	ldr	r3, [r5, #0]
 801e4ce:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801e4d0:	4798      	blx	r3
    mbedtls_free( session->ticket );
 801e4d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 801e4d4:	682b      	ldr	r3, [r5, #0]
 801e4d6:	4798      	blx	r3
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e4d8:	4620      	mov	r0, r4
 801e4da:	2180      	movs	r1, #128	; 0x80
}
 801e4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mbedtls_zeroize( session, sizeof( mbedtls_ssl_session ) );
 801e4e0:	f7fd be12 	b.w	801c108 <mbedtls_zeroize>
}
 801e4e4:	bd38      	pop	{r3, r4, r5, pc}
 801e4e6:	bf00      	nop
 801e4e8:	200005a4 	.word	0x200005a4

0801e4ec <mbedtls_ssl_handshake_wrapup>:
{
 801e4ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int resume = ssl->handshake->resume;
 801e4ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e4f0:	4a31      	ldr	r2, [pc, #196]	; (801e5b8 <mbedtls_ssl_handshake_wrapup+0xcc>)
    int resume = ssl->handshake->resume;
 801e4f2:	f8d3 6330 	ldr.w	r6, [r3, #816]	; 0x330
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e4f6:	4b31      	ldr	r3, [pc, #196]	; (801e5bc <mbedtls_ssl_handshake_wrapup+0xd0>)
 801e4f8:	9300      	str	r3, [sp, #0]
{
 801e4fa:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup" ) );
 801e4fc:	f241 4333 	movw	r3, #5171	; 0x1433
 801e500:	2103      	movs	r1, #3
 801e502:	f7f2 fae3 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e506:	68a3      	ldr	r3, [r4, #8]
    if( ssl->session )
 801e508:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e50a:	4d2d      	ldr	r5, [pc, #180]	; (801e5c0 <mbedtls_ssl_handshake_wrapup+0xd4>)
    if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e50c:	2b01      	cmp	r3, #1
        ssl->renego_records_seen = 0;
 801e50e:	bf02      	ittt	eq
 801e510:	2202      	moveq	r2, #2
 801e512:	2300      	moveq	r3, #0
 801e514:	e9c4 2302 	strdeq	r2, r3, [r4, #8]
    if( ssl->session )
 801e518:	b120      	cbz	r0, 801e524 <mbedtls_ssl_handshake_wrapup+0x38>
        mbedtls_ssl_session_free( ssl->session );
 801e51a:	f7ff ffcf 	bl	801e4bc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801e51e:	682b      	ldr	r3, [r5, #0]
 801e520:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801e522:	4798      	blx	r3
    if( ssl->conf->f_set_cache != NULL &&
 801e524:	6822      	ldr	r2, [r4, #0]
    ssl->session = ssl->session_negotiate;
 801e526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e528:	6321      	str	r1, [r4, #48]	; 0x30
    ssl->session_negotiate = NULL;
 801e52a:	2300      	movs	r3, #0
 801e52c:	6363      	str	r3, [r4, #52]	; 0x34
    if( ssl->conf->f_set_cache != NULL &&
 801e52e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e530:	b173      	cbz	r3, 801e550 <mbedtls_ssl_handshake_wrapup+0x64>
 801e532:	6908      	ldr	r0, [r1, #16]
 801e534:	b160      	cbz	r0, 801e550 <mbedtls_ssl_handshake_wrapup+0x64>
        ssl->session->id_len != 0 &&
 801e536:	b95e      	cbnz	r6, 801e550 <mbedtls_ssl_handshake_wrapup+0x64>
        if( ssl->conf->f_set_cache( ssl->conf->p_cache, ssl->session ) != 0 )
 801e538:	6a90      	ldr	r0, [r2, #40]	; 0x28
 801e53a:	4798      	blx	r3
 801e53c:	b140      	cbz	r0, 801e550 <mbedtls_ssl_handshake_wrapup+0x64>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "cache did not store session" ) );
 801e53e:	4b21      	ldr	r3, [pc, #132]	; (801e5c4 <mbedtls_ssl_handshake_wrapup+0xd8>)
 801e540:	9300      	str	r3, [sp, #0]
 801e542:	4a1d      	ldr	r2, [pc, #116]	; (801e5b8 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e544:	f241 4356 	movw	r3, #5206	; 0x1456
 801e548:	2101      	movs	r1, #1
 801e54a:	4620      	mov	r0, r4
 801e54c:	f7f2 fabe 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "=> handshake wrapup: final free" ) );
 801e550:	4b1d      	ldr	r3, [pc, #116]	; (801e5c8 <mbedtls_ssl_handshake_wrapup+0xdc>)
 801e552:	4a19      	ldr	r2, [pc, #100]	; (801e5b8 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e554:	9300      	str	r3, [sp, #0]
 801e556:	2103      	movs	r1, #3
 801e558:	f241 4318 	movw	r3, #5144	; 0x1418
 801e55c:	4620      	mov	r0, r4
 801e55e:	f7f2 fab5 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_ssl_handshake_free( ssl->handshake );
 801e562:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e564:	f7ff ff84 	bl	801e470 <mbedtls_ssl_handshake_free>
    mbedtls_free( ssl->handshake );
 801e568:	682b      	ldr	r3, [r5, #0]
 801e56a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e56c:	4798      	blx	r3
    if( ssl->transform )
 801e56e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    ssl->handshake = NULL;
 801e570:	2300      	movs	r3, #0
 801e572:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ssl->transform )
 801e574:	b120      	cbz	r0, 801e580 <mbedtls_ssl_handshake_wrapup+0x94>
        mbedtls_ssl_transform_free( ssl->transform );
 801e576:	f7ff ff61 	bl	801e43c <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801e57a:	682b      	ldr	r3, [r5, #0]
 801e57c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801e57e:	4798      	blx	r3
    ssl->transform = ssl->transform_negotiate;
 801e580:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e582:	6463      	str	r3, [r4, #68]	; 0x44
    ssl->transform_negotiate = NULL;
 801e584:	2300      	movs	r3, #0
 801e586:	64a3      	str	r3, [r4, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup: final free" ) );
 801e588:	4b10      	ldr	r3, [pc, #64]	; (801e5cc <mbedtls_ssl_handshake_wrapup+0xe0>)
 801e58a:	9300      	str	r3, [sp, #0]
 801e58c:	4620      	mov	r0, r4
 801e58e:	4a0a      	ldr	r2, [pc, #40]	; (801e5b8 <mbedtls_ssl_handshake_wrapup+0xcc>)
 801e590:	f241 432c 	movw	r3, #5164	; 0x142c
 801e594:	2103      	movs	r1, #3
 801e596:	f7f2 fa99 	bl	8010acc <mbedtls_debug_print_msg>
    ssl->state++;
 801e59a:	6863      	ldr	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e59c:	4a06      	ldr	r2, [pc, #24]	; (801e5b8 <mbedtls_ssl_handshake_wrapup+0xcc>)
    ssl->state++;
 801e59e:	3301      	adds	r3, #1
 801e5a0:	6063      	str	r3, [r4, #4]
    MBEDTLS_SSL_DEBUG_MSG( 3, ( "<= handshake wrapup" ) );
 801e5a2:	4b0b      	ldr	r3, [pc, #44]	; (801e5d0 <mbedtls_ssl_handshake_wrapup+0xe4>)
 801e5a4:	9300      	str	r3, [sp, #0]
 801e5a6:	2103      	movs	r1, #3
 801e5a8:	f241 436a 	movw	r3, #5226	; 0x146a
 801e5ac:	4620      	mov	r0, r4
 801e5ae:	f7f2 fa8d 	bl	8010acc <mbedtls_debug_print_msg>
}
 801e5b2:	b002      	add	sp, #8
 801e5b4:	bd70      	pop	{r4, r5, r6, pc}
 801e5b6:	bf00      	nop
 801e5b8:	08031ee5 	.word	0x08031ee5
 801e5bc:	08032b60 	.word	0x08032b60
 801e5c0:	200005a4 	.word	0x200005a4
 801e5c4:	08032b74 	.word	0x08032b74
 801e5c8:	08032b90 	.word	0x08032b90
 801e5cc:	08032bb0 	.word	0x08032bb0
 801e5d0:	08032bd0 	.word	0x08032bd0

0801e5d4 <ssl_handshake_init>:
{
 801e5d4:	b530      	push	{r4, r5, lr}
 801e5d6:	4604      	mov	r4, r0
    if( ssl->transform_negotiate )
 801e5d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
 801e5da:	b085      	sub	sp, #20
    if( ssl->transform_negotiate )
 801e5dc:	b108      	cbz	r0, 801e5e2 <ssl_handshake_init+0xe>
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801e5de:	f7ff ff2d 	bl	801e43c <mbedtls_ssl_transform_free>
    if( ssl->session_negotiate )
 801e5e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e5e4:	b108      	cbz	r0, 801e5ea <ssl_handshake_init+0x16>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801e5e6:	f7ff ff69 	bl	801e4bc <mbedtls_ssl_session_free>
    if( ssl->handshake )
 801e5ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e5ec:	b108      	cbz	r0, 801e5f2 <ssl_handshake_init+0x1e>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801e5ee:	f7ff ff3f 	bl	801e470 <mbedtls_ssl_handshake_free>
    if( ssl->transform_negotiate == NULL )
 801e5f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e5f4:	b92b      	cbnz	r3, 801e602 <ssl_handshake_init+0x2e>
        ssl->transform_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_transform) );
 801e5f6:	4b3c      	ldr	r3, [pc, #240]	; (801e6e8 <ssl_handshake_init+0x114>)
 801e5f8:	21d0      	movs	r1, #208	; 0xd0
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	2001      	movs	r0, #1
 801e5fe:	4798      	blx	r3
 801e600:	64a0      	str	r0, [r4, #72]	; 0x48
    if( ssl->session_negotiate == NULL )
 801e602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e604:	b92b      	cbnz	r3, 801e612 <ssl_handshake_init+0x3e>
        ssl->session_negotiate = mbedtls_calloc( 1, sizeof(mbedtls_ssl_session) );
 801e606:	4b38      	ldr	r3, [pc, #224]	; (801e6e8 <ssl_handshake_init+0x114>)
 801e608:	2180      	movs	r1, #128	; 0x80
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	2001      	movs	r0, #1
 801e60e:	4798      	blx	r3
 801e610:	6360      	str	r0, [r4, #52]	; 0x34
    if( ssl->handshake == NULL )
 801e612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e614:	b1db      	cbz	r3, 801e64e <ssl_handshake_init+0x7a>
    if( ssl->handshake == NULL ||
 801e616:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e618:	bb1b      	cbnz	r3, 801e662 <ssl_handshake_init+0x8e>
        mbedtls_free( ssl->handshake );
 801e61a:	4d34      	ldr	r5, [pc, #208]	; (801e6ec <ssl_handshake_init+0x118>)
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc() of ssl sub-contexts failed" ) );
 801e61c:	4b34      	ldr	r3, [pc, #208]	; (801e6f0 <ssl_handshake_init+0x11c>)
 801e61e:	4a35      	ldr	r2, [pc, #212]	; (801e6f4 <ssl_handshake_init+0x120>)
 801e620:	9300      	str	r3, [sp, #0]
 801e622:	2101      	movs	r1, #1
 801e624:	f241 539a 	movw	r3, #5530	; 0x159a
 801e628:	4620      	mov	r0, r4
 801e62a:	f7f2 fa4f 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_free( ssl->handshake );
 801e62e:	682b      	ldr	r3, [r5, #0]
 801e630:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801e632:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801e634:	682b      	ldr	r3, [r5, #0]
 801e636:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801e638:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801e63a:	682b      	ldr	r3, [r5, #0]
 801e63c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801e63e:	4798      	blx	r3
        ssl->handshake = NULL;
 801e640:	2300      	movs	r3, #0
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801e642:	482d      	ldr	r0, [pc, #180]	; (801e6f8 <ssl_handshake_init+0x124>)
        ssl->handshake = NULL;
 801e644:	63a3      	str	r3, [r4, #56]	; 0x38
        ssl->transform_negotiate = NULL;
 801e646:	64a3      	str	r3, [r4, #72]	; 0x48
        ssl->session_negotiate = NULL;
 801e648:	6363      	str	r3, [r4, #52]	; 0x34
}
 801e64a:	b005      	add	sp, #20
 801e64c:	bd30      	pop	{r4, r5, pc}
        ssl->handshake = mbedtls_calloc( 1, sizeof(mbedtls_ssl_handshake_params) );
 801e64e:	4b26      	ldr	r3, [pc, #152]	; (801e6e8 <ssl_handshake_init+0x114>)
 801e650:	f44f 7152 	mov.w	r1, #840	; 0x348
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	2001      	movs	r0, #1
 801e658:	4798      	blx	r3
 801e65a:	63a0      	str	r0, [r4, #56]	; 0x38
    if( ssl->handshake == NULL ||
 801e65c:	2800      	cmp	r0, #0
 801e65e:	d1da      	bne.n	801e616 <ssl_handshake_init+0x42>
 801e660:	e7db      	b.n	801e61a <ssl_handshake_init+0x46>
        ssl->session_negotiate == NULL )
 801e662:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ssl->transform_negotiate == NULL ||
 801e664:	2800      	cmp	r0, #0
 801e666:	d0d8      	beq.n	801e61a <ssl_handshake_init+0x46>
    mbedtls_ssl_session_init( ssl->session_negotiate );
 801e668:	f7ff fdd8 	bl	801e21c <mbedtls_ssl_session_init>
    ssl_transform_init( ssl->transform_negotiate );
 801e66c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    memset( transform, 0, sizeof(mbedtls_ssl_transform) );
 801e66e:	22d0      	movs	r2, #208	; 0xd0
 801e670:	2100      	movs	r1, #0
 801e672:	4628      	mov	r0, r5
 801e674:	f003 fee0 	bl	8022438 <memset>
    mbedtls_cipher_init( &transform->cipher_ctx_enc );
 801e678:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801e67c:	f7f1 fd0e 	bl	801009c <mbedtls_cipher_init>
    mbedtls_cipher_init( &transform->cipher_ctx_dec );
 801e680:	f105 0090 	add.w	r0, r5, #144	; 0x90
 801e684:	f7f1 fd0a 	bl	801009c <mbedtls_cipher_init>
    mbedtls_md_init( &transform->md_ctx_enc );
 801e688:	f105 0038 	add.w	r0, r5, #56	; 0x38
 801e68c:	f7f6 f916 	bl	80148bc <mbedtls_md_init>
    mbedtls_md_init( &transform->md_ctx_dec );
 801e690:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801e694:	f7f6 f912 	bl	80148bc <mbedtls_md_init>
    ssl_handshake_params_init( ssl->handshake );
 801e698:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    memset( handshake, 0, sizeof( mbedtls_ssl_handshake_params ) );
 801e69a:	f44f 7252 	mov.w	r2, #840	; 0x348
 801e69e:	2100      	movs	r1, #0
 801e6a0:	4620      	mov	r0, r4
 801e6a2:	f003 fec9 	bl	8022438 <memset>
    mbedtls_sha256_init(   &handshake->fin_sha256    );
 801e6a6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 801e6aa:	9003      	str	r0, [sp, #12]
 801e6ac:	f7fa f95b 	bl	8018966 <mbedtls_sha256_init>
    mbedtls_sha256_starts( &handshake->fin_sha256, 0 );
 801e6b0:	2100      	movs	r1, #0
 801e6b2:	9803      	ldr	r0, [sp, #12]
 801e6b4:	f7fa f96a 	bl	801898c <mbedtls_sha256_starts>
    mbedtls_sha512_init(   &handshake->fin_sha512    );
 801e6b8:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 801e6bc:	9003      	str	r0, [sp, #12]
 801e6be:	f7fa fde4 	bl	801928a <mbedtls_sha512_init>
    mbedtls_sha512_starts( &handshake->fin_sha512, 1 );
 801e6c2:	9803      	ldr	r0, [sp, #12]
 801e6c4:	2101      	movs	r1, #1
 801e6c6:	f7fa fdf3 	bl	80192b0 <mbedtls_sha512_starts>
    set->rsa   = md_alg;
 801e6ca:	2500      	movs	r5, #0
    handshake->update_checksum = ssl_update_checksum_start;
 801e6cc:	4b0b      	ldr	r3, [pc, #44]	; (801e6fc <ssl_handshake_init+0x128>)
 801e6ce:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e6d2:	1d20      	adds	r0, r4, #4
    set->rsa   = md_alg;
 801e6d4:	7025      	strb	r5, [r4, #0]
    set->ecdsa = md_alg;
 801e6d6:	7065      	strb	r5, [r4, #1]
    mbedtls_ecdh_init( &handshake->ecdh_ctx );
 801e6d8:	f7f2 fc42 	bl	8010f60 <mbedtls_ecdh_init>
    handshake->sni_authmode = MBEDTLS_SSL_VERIFY_UNSET;
 801e6dc:	2303      	movs	r3, #3
 801e6de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    return( 0 );
 801e6e2:	4628      	mov	r0, r5
}
 801e6e4:	e7b1      	b.n	801e64a <ssl_handshake_init+0x76>
 801e6e6:	bf00      	nop
 801e6e8:	200005a0 	.word	0x200005a0
 801e6ec:	200005a4 	.word	0x200005a4
 801e6f0:	08032be4 	.word	0x08032be4
 801e6f4:	08031ee5 	.word	0x08031ee5
 801e6f8:	ffff8100 	.word	0xffff8100
 801e6fc:	0801c57d 	.word	0x0801c57d

0801e700 <mbedtls_ssl_setup>:
{
 801e700:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e702:	4d22      	ldr	r5, [pc, #136]	; (801e78c <mbedtls_ssl_setup+0x8c>)
    ssl->conf = conf;
 801e704:	6001      	str	r1, [r0, #0]
{
 801e706:	4604      	mov	r4, r0
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e708:	682b      	ldr	r3, [r5, #0]
 801e70a:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e70e:	2001      	movs	r0, #1
 801e710:	4798      	blx	r3
 801e712:	65a0      	str	r0, [r4, #88]	; 0x58
 801e714:	b328      	cbz	r0, 801e762 <mbedtls_ssl_setup+0x62>
        ( ssl->out_buf = mbedtls_calloc( 1, len ) ) == NULL )
 801e716:	682b      	ldr	r3, [r5, #0]
 801e718:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801e71c:	2001      	movs	r0, #1
 801e71e:	4798      	blx	r3
 801e720:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if( ( ssl-> in_buf = mbedtls_calloc( 1, len ) ) == NULL ||
 801e724:	b1e8      	cbz	r0, 801e762 <mbedtls_ssl_setup+0x62>
        ssl->out_hdr = ssl->out_buf +  8;
 801e726:	f100 0308 	add.w	r3, r0, #8
 801e72a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        ssl->out_len = ssl->out_buf + 11;
 801e72e:	f100 030b 	add.w	r3, r0, #11
 801e732:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
        ssl->in_ctr = ssl->in_buf;
 801e736:	6da3      	ldr	r3, [r4, #88]	; 0x58
        ssl->out_ctr = ssl->out_buf;
 801e738:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
        ssl->in_hdr = ssl->in_buf +  8;
 801e73c:	f103 0208 	add.w	r2, r3, #8
        ssl->out_iv  = ssl->out_buf + 13;
 801e740:	300d      	adds	r0, #13
        ssl->out_msg = ssl->out_buf + 13;
 801e742:	e9c4 0027 	strd	r0, r0, [r4, #156]	; 0x9c
        ssl->in_ctr = ssl->in_buf;
 801e746:	65e3      	str	r3, [r4, #92]	; 0x5c
        ssl->in_hdr = ssl->in_buf +  8;
 801e748:	6622      	str	r2, [r4, #96]	; 0x60
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e74a:	4620      	mov	r0, r4
        ssl->in_len = ssl->in_buf + 11;
 801e74c:	f103 020b 	add.w	r2, r3, #11
        ssl->in_iv  = ssl->in_buf + 13;
 801e750:	330d      	adds	r3, #13
        ssl->in_msg = ssl->in_buf + 13;
 801e752:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
        ssl->in_len = ssl->in_buf + 11;
 801e756:	6662      	str	r2, [r4, #100]	; 0x64
}
 801e758:	b003      	add	sp, #12
 801e75a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e75e:	f7ff bf39 	b.w	801e5d4 <ssl_handshake_init>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed", len ) );
 801e762:	f241 43d5 	movw	r3, #5333	; 0x14d5
 801e766:	9301      	str	r3, [sp, #4]
 801e768:	4b09      	ldr	r3, [pc, #36]	; (801e790 <mbedtls_ssl_setup+0x90>)
 801e76a:	4a0a      	ldr	r2, [pc, #40]	; (801e794 <mbedtls_ssl_setup+0x94>)
 801e76c:	9300      	str	r3, [sp, #0]
 801e76e:	2101      	movs	r1, #1
 801e770:	4620      	mov	r0, r4
 801e772:	f241 53f3 	movw	r3, #5619	; 0x15f3
 801e776:	f7f2 f9a9 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_free( ssl->in_buf );
 801e77a:	4b07      	ldr	r3, [pc, #28]	; (801e798 <mbedtls_ssl_setup+0x98>)
 801e77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	4798      	blx	r3
}
 801e782:	4806      	ldr	r0, [pc, #24]	; (801e79c <mbedtls_ssl_setup+0x9c>)
        ssl->in_buf = NULL;
 801e784:	2300      	movs	r3, #0
 801e786:	65a3      	str	r3, [r4, #88]	; 0x58
}
 801e788:	b003      	add	sp, #12
 801e78a:	bd30      	pop	{r4, r5, pc}
 801e78c:	200005a0 	.word	0x200005a0
 801e790:	08032c07 	.word	0x08032c07
 801e794:	08031ee5 	.word	0x08031ee5
 801e798:	200005a4 	.word	0x200005a4
 801e79c:	ffff8100 	.word	0xffff8100

0801e7a0 <ssl_start_renegotiation>:
{
 801e7a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e7a2:	4b16      	ldr	r3, [pc, #88]	; (801e7fc <ssl_start_renegotiation+0x5c>)
 801e7a4:	4a16      	ldr	r2, [pc, #88]	; (801e800 <ssl_start_renegotiation+0x60>)
 801e7a6:	9300      	str	r3, [sp, #0]
{
 801e7a8:	4605      	mov	r5, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> renegotiate" ) );
 801e7aa:	f641 13d4 	movw	r3, #6612	; 0x19d4
 801e7ae:	2102      	movs	r1, #2
 801e7b0:	f7f2 f98c 	bl	8010acc <mbedtls_debug_print_msg>
    if( ( ret = ssl_handshake_init( ssl ) ) != 0 )
 801e7b4:	4628      	mov	r0, r5
 801e7b6:	f7ff ff0d 	bl	801e5d4 <ssl_handshake_init>
 801e7ba:	4604      	mov	r4, r0
 801e7bc:	b988      	cbnz	r0, 801e7e2 <ssl_start_renegotiation+0x42>
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e7be:	2601      	movs	r6, #1
    ssl->state = MBEDTLS_SSL_HELLO_REQUEST;
 801e7c0:	6068      	str	r0, [r5, #4]
    ssl->renego_status = MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS;
 801e7c2:	60ae      	str	r6, [r5, #8]
    if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e7c4:	4628      	mov	r0, r5
 801e7c6:	f7ff fdc7 	bl	801e358 <mbedtls_ssl_handshake>
 801e7ca:	4604      	mov	r4, r0
 801e7cc:	b160      	cbz	r0, 801e7e8 <ssl_start_renegotiation+0x48>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e7ce:	4b0d      	ldr	r3, [pc, #52]	; (801e804 <ssl_start_renegotiation+0x64>)
 801e7d0:	9001      	str	r0, [sp, #4]
 801e7d2:	9300      	str	r3, [sp, #0]
 801e7d4:	4a0a      	ldr	r2, [pc, #40]	; (801e800 <ssl_start_renegotiation+0x60>)
 801e7d6:	f641 13eb 	movw	r3, #6635	; 0x19eb
 801e7da:	4631      	mov	r1, r6
 801e7dc:	4628      	mov	r0, r5
 801e7de:	f7f2 f9a5 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801e7e2:	4620      	mov	r0, r4
 801e7e4:	b002      	add	sp, #8
 801e7e6:	bd70      	pop	{r4, r5, r6, pc}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= renegotiate" ) );
 801e7e8:	4b07      	ldr	r3, [pc, #28]	; (801e808 <ssl_start_renegotiation+0x68>)
 801e7ea:	9300      	str	r3, [sp, #0]
 801e7ec:	4a04      	ldr	r2, [pc, #16]	; (801e800 <ssl_start_renegotiation+0x60>)
 801e7ee:	f641 13ef 	movw	r3, #6639	; 0x19ef
 801e7f2:	2102      	movs	r1, #2
 801e7f4:	4628      	mov	r0, r5
 801e7f6:	f7f2 f969 	bl	8010acc <mbedtls_debug_print_msg>
    return( 0 );
 801e7fa:	e7f2      	b.n	801e7e2 <ssl_start_renegotiation+0x42>
 801e7fc:	08032c1e 	.word	0x08032c1e
 801e800:	08031ee5 	.word	0x08031ee5
 801e804:	08032c2d 	.word	0x08032c2d
 801e808:	08032c43 	.word	0x08032c43

0801e80c <mbedtls_ssl_renegotiate>:
{
 801e80c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if( ssl == NULL || ssl->conf == NULL )
 801e80e:	4605      	mov	r5, r0
 801e810:	b318      	cbz	r0, 801e85a <mbedtls_ssl_renegotiate+0x4e>
 801e812:	6803      	ldr	r3, [r0, #0]
 801e814:	b30b      	cbz	r3, 801e85a <mbedtls_ssl_renegotiate+0x4e>
    if( ssl->renego_status != MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS )
 801e816:	6886      	ldr	r6, [r0, #8]
 801e818:	2e01      	cmp	r6, #1
 801e81a:	d013      	beq.n	801e844 <mbedtls_ssl_renegotiate+0x38>
        if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e81c:	6843      	ldr	r3, [r0, #4]
 801e81e:	2b10      	cmp	r3, #16
 801e820:	d11b      	bne.n	801e85a <mbedtls_ssl_renegotiate+0x4e>
        if( ( ret = ssl_start_renegotiation( ssl ) ) != 0 )
 801e822:	f7ff ffbd 	bl	801e7a0 <ssl_start_renegotiation>
 801e826:	4604      	mov	r4, r0
 801e828:	b148      	cbz	r0, 801e83e <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801e82a:	4b0d      	ldr	r3, [pc, #52]	; (801e860 <mbedtls_ssl_renegotiate+0x54>)
 801e82c:	9300      	str	r3, [sp, #0]
 801e82e:	9001      	str	r0, [sp, #4]
 801e830:	f641 231c 	movw	r3, #6684	; 0x1a1c
 801e834:	4a0b      	ldr	r2, [pc, #44]	; (801e864 <mbedtls_ssl_renegotiate+0x58>)
 801e836:	2101      	movs	r1, #1
 801e838:	4628      	mov	r0, r5
 801e83a:	f7f2 f977 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801e83e:	4620      	mov	r0, r4
 801e840:	b002      	add	sp, #8
 801e842:	bd70      	pop	{r4, r5, r6, pc}
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e844:	f7ff fd88 	bl	801e358 <mbedtls_ssl_handshake>
 801e848:	4604      	mov	r4, r0
 801e84a:	2800      	cmp	r0, #0
 801e84c:	d0f7      	beq.n	801e83e <mbedtls_ssl_renegotiate+0x32>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e84e:	4b06      	ldr	r3, [pc, #24]	; (801e868 <mbedtls_ssl_renegotiate+0x5c>)
 801e850:	9300      	str	r3, [sp, #0]
 801e852:	9001      	str	r0, [sp, #4]
 801e854:	f641 2324 	movw	r3, #6692	; 0x1a24
 801e858:	e7ec      	b.n	801e834 <mbedtls_ssl_renegotiate+0x28>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e85a:	4c04      	ldr	r4, [pc, #16]	; (801e86c <mbedtls_ssl_renegotiate+0x60>)
 801e85c:	e7ef      	b.n	801e83e <mbedtls_ssl_renegotiate+0x32>
 801e85e:	bf00      	nop
 801e860:	08032c52 	.word	0x08032c52
 801e864:	08031ee5 	.word	0x08031ee5
 801e868:	08032c2d 	.word	0x08032c2d
 801e86c:	ffff8f00 	.word	0xffff8f00

0801e870 <ssl_check_ctr_renegotiate>:
{
 801e870:	b530      	push	{r4, r5, lr}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e872:	6843      	ldr	r3, [r0, #4]
 801e874:	2b10      	cmp	r3, #16
{
 801e876:	b085      	sub	sp, #20
 801e878:	4604      	mov	r4, r0
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER ||
 801e87a:	d127      	bne.n	801e8cc <ssl_check_ctr_renegotiate+0x5c>
 801e87c:	6883      	ldr	r3, [r0, #8]
 801e87e:	2b03      	cmp	r3, #3
 801e880:	d024      	beq.n	801e8cc <ssl_check_ctr_renegotiate+0x5c>
        ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED )
 801e882:	6801      	ldr	r1, [r0, #0]
 801e884:	f891 306d 	ldrb.w	r3, [r1, #109]	; 0x6d
        ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING ||
 801e888:	075b      	lsls	r3, r3, #29
 801e88a:	d51f      	bpl.n	801e8cc <ssl_check_ctr_renegotiate+0x5c>
                        ssl->conf->renego_period + ep_len, 8 - ep_len );
 801e88c:	3160      	adds	r1, #96	; 0x60
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e88e:	2208      	movs	r2, #8
 801e890:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e892:	9103      	str	r1, [sp, #12]
 801e894:	f003 fd9a 	bl	80223cc <memcmp>
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e898:	9903      	ldr	r1, [sp, #12]
    in_ctr_cmp = memcmp( ssl->in_ctr + ep_len,
 801e89a:	4605      	mov	r5, r0
    out_ctr_cmp = memcmp( ssl->out_ctr + ep_len,
 801e89c:	2208      	movs	r2, #8
 801e89e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 801e8a2:	f003 fd93 	bl	80223cc <memcmp>
    if( in_ctr_cmp <= 0 && out_ctr_cmp <= 0 )
 801e8a6:	2d00      	cmp	r5, #0
 801e8a8:	dc01      	bgt.n	801e8ae <ssl_check_ctr_renegotiate+0x3e>
 801e8aa:	2800      	cmp	r0, #0
 801e8ac:	dd0e      	ble.n	801e8cc <ssl_check_ctr_renegotiate+0x5c>
    MBEDTLS_SSL_DEBUG_MSG( 1, ( "record counter limit reached: renegotiate" ) );
 801e8ae:	4b09      	ldr	r3, [pc, #36]	; (801e8d4 <ssl_check_ctr_renegotiate+0x64>)
 801e8b0:	9300      	str	r3, [sp, #0]
 801e8b2:	4620      	mov	r0, r4
 801e8b4:	4a08      	ldr	r2, [pc, #32]	; (801e8d8 <ssl_check_ctr_renegotiate+0x68>)
 801e8b6:	f641 2347 	movw	r3, #6727	; 0x1a47
 801e8ba:	2101      	movs	r1, #1
 801e8bc:	f7f2 f906 	bl	8010acc <mbedtls_debug_print_msg>
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e8c0:	4620      	mov	r0, r4
}
 801e8c2:	b005      	add	sp, #20
 801e8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return( mbedtls_ssl_renegotiate( ssl ) );
 801e8c8:	f7ff bfa0 	b.w	801e80c <mbedtls_ssl_renegotiate>
}
 801e8cc:	2000      	movs	r0, #0
 801e8ce:	b005      	add	sp, #20
 801e8d0:	bd30      	pop	{r4, r5, pc}
 801e8d2:	bf00      	nop
 801e8d4:	08032c6a 	.word	0x08032c6a
 801e8d8:	08031ee5 	.word	0x08031ee5

0801e8dc <mbedtls_ssl_write>:
{
 801e8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e8de:	4b36      	ldr	r3, [pc, #216]	; (801e9b8 <mbedtls_ssl_write+0xdc>)
 801e8e0:	9300      	str	r3, [sp, #0]
{
 801e8e2:	4606      	mov	r6, r0
 801e8e4:	460f      	mov	r7, r1
 801e8e6:	4615      	mov	r5, r2
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> write" ) );
 801e8e8:	f641 33e7 	movw	r3, #7143	; 0x1be7
 801e8ec:	4a33      	ldr	r2, [pc, #204]	; (801e9bc <mbedtls_ssl_write+0xe0>)
 801e8ee:	2102      	movs	r1, #2
 801e8f0:	f7f2 f8ec 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl == NULL || ssl->conf == NULL )
 801e8f4:	2e00      	cmp	r6, #0
 801e8f6:	d05c      	beq.n	801e9b2 <mbedtls_ssl_write+0xd6>
 801e8f8:	6833      	ldr	r3, [r6, #0]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d059      	beq.n	801e9b2 <mbedtls_ssl_write+0xd6>
    if( ( ret = ssl_check_ctr_renegotiate( ssl ) ) != 0 )
 801e8fe:	4630      	mov	r0, r6
 801e900:	f7ff ffb6 	bl	801e870 <ssl_check_ctr_renegotiate>
 801e904:	4604      	mov	r4, r0
 801e906:	b160      	cbz	r0, 801e922 <mbedtls_ssl_write+0x46>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801e908:	4b2d      	ldr	r3, [pc, #180]	; (801e9c0 <mbedtls_ssl_write+0xe4>)
 801e90a:	9300      	str	r3, [sp, #0]
 801e90c:	9001      	str	r0, [sp, #4]
 801e90e:	f641 33ef 	movw	r3, #7151	; 0x1bef
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e912:	4a2a      	ldr	r2, [pc, #168]	; (801e9bc <mbedtls_ssl_write+0xe0>)
 801e914:	2101      	movs	r1, #1
 801e916:	4630      	mov	r0, r6
 801e918:	f7f2 f908 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801e91c:	4620      	mov	r0, r4
 801e91e:	b003      	add	sp, #12
 801e920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801e922:	6873      	ldr	r3, [r6, #4]
 801e924:	2b10      	cmp	r3, #16
 801e926:	d00a      	beq.n	801e93e <mbedtls_ssl_write+0x62>
        if( ( ret = mbedtls_ssl_handshake( ssl ) ) != 0 )
 801e928:	4630      	mov	r0, r6
 801e92a:	f7ff fd15 	bl	801e358 <mbedtls_ssl_handshake>
 801e92e:	4604      	mov	r4, r0
 801e930:	b128      	cbz	r0, 801e93e <mbedtls_ssl_write+0x62>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801e932:	4b24      	ldr	r3, [pc, #144]	; (801e9c4 <mbedtls_ssl_write+0xe8>)
 801e934:	9300      	str	r3, [sp, #0]
 801e936:	9001      	str	r0, [sp, #4]
 801e938:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 801e93c:	e7e9      	b.n	801e912 <mbedtls_ssl_write+0x36>
    size_t max_len = mbedtls_ssl_get_max_frag_len( ssl );
 801e93e:	4630      	mov	r0, r6
 801e940:	f7ff fce2 	bl	801e308 <mbedtls_ssl_get_max_frag_len>
    if( ssl->out_left != 0 )
 801e944:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801e948:	4285      	cmp	r5, r0
 801e94a:	bf28      	it	cs
 801e94c:	4605      	movcs	r5, r0
 801e94e:	b1c3      	cbz	r3, 801e982 <mbedtls_ssl_write+0xa6>
        if( ( ret = mbedtls_ssl_flush_output( ssl ) ) != 0 )
 801e950:	4630      	mov	r0, r6
 801e952:	f7fe f98d 	bl	801cc70 <mbedtls_ssl_flush_output>
 801e956:	4604      	mov	r4, r0
 801e958:	b348      	cbz	r0, 801e9ae <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_flush_output", ret );
 801e95a:	4b1b      	ldr	r3, [pc, #108]	; (801e9c8 <mbedtls_ssl_write+0xec>)
 801e95c:	9300      	str	r3, [sp, #0]
 801e95e:	9001      	str	r0, [sp, #4]
 801e960:	f641 33a6 	movw	r3, #7078	; 0x1ba6
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e964:	4a15      	ldr	r2, [pc, #84]	; (801e9bc <mbedtls_ssl_write+0xe0>)
 801e966:	2101      	movs	r1, #1
 801e968:	4630      	mov	r0, r6
 801e96a:	f7f2 f8df 	bl	8010b2c <mbedtls_debug_print_ret>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= write" ) );
 801e96e:	4b17      	ldr	r3, [pc, #92]	; (801e9cc <mbedtls_ssl_write+0xf0>)
 801e970:	9300      	str	r3, [sp, #0]
 801e972:	4a12      	ldr	r2, [pc, #72]	; (801e9bc <mbedtls_ssl_write+0xe0>)
 801e974:	f641 4303 	movw	r3, #7171	; 0x1c03
 801e978:	2102      	movs	r1, #2
 801e97a:	4630      	mov	r0, r6
 801e97c:	f7f2 f8a6 	bl	8010acc <mbedtls_debug_print_msg>
    return( ret );
 801e980:	e7cc      	b.n	801e91c <mbedtls_ssl_write+0x40>
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
 801e982:	2317      	movs	r3, #23
 801e984:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
        memcpy( ssl->out_msg, buf, len );
 801e988:	462a      	mov	r2, r5
 801e98a:	4639      	mov	r1, r7
 801e98c:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
        ssl->out_msglen  = len;
 801e990:	f8c6 50a8 	str.w	r5, [r6, #168]	; 0xa8
        memcpy( ssl->out_msg, buf, len );
 801e994:	f003 fd28 	bl	80223e8 <memcpy>
        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
 801e998:	4630      	mov	r0, r6
 801e99a:	f7fe f9f5 	bl	801cd88 <mbedtls_ssl_write_record>
 801e99e:	4604      	mov	r4, r0
 801e9a0:	b128      	cbz	r0, 801e9ae <mbedtls_ssl_write+0xd2>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_write_record", ret );
 801e9a2:	4b0b      	ldr	r3, [pc, #44]	; (801e9d0 <mbedtls_ssl_write+0xf4>)
 801e9a4:	9300      	str	r3, [sp, #0]
 801e9a6:	9001      	str	r0, [sp, #4]
 801e9a8:	f641 33b2 	movw	r3, #7090	; 0x1bb2
 801e9ac:	e7da      	b.n	801e964 <mbedtls_ssl_write+0x88>
    return( (int) len );
 801e9ae:	462c      	mov	r4, r5
 801e9b0:	e7dd      	b.n	801e96e <mbedtls_ssl_write+0x92>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801e9b2:	4c08      	ldr	r4, [pc, #32]	; (801e9d4 <mbedtls_ssl_write+0xf8>)
 801e9b4:	e7b2      	b.n	801e91c <mbedtls_ssl_write+0x40>
 801e9b6:	bf00      	nop
 801e9b8:	08032c94 	.word	0x08032c94
 801e9bc:	08031ee5 	.word	0x08031ee5
 801e9c0:	08032c9d 	.word	0x08032c9d
 801e9c4:	08032c2d 	.word	0x08032c2d
 801e9c8:	08032481 	.word	0x08032481
 801e9cc:	08032cb7 	.word	0x08032cb7
 801e9d0:	0803137d 	.word	0x0803137d
 801e9d4:	ffff8f00 	.word	0xffff8f00

0801e9d8 <mbedtls_ssl_read>:
{
 801e9d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e9da:	460f      	mov	r7, r1
 801e9dc:	4616      	mov	r6, r2
    if( ssl == NULL || ssl->conf == NULL )
 801e9de:	4604      	mov	r4, r0
 801e9e0:	2800      	cmp	r0, #0
 801e9e2:	f000 810d 	beq.w	801ec00 <mbedtls_ssl_read+0x228>
 801e9e6:	6803      	ldr	r3, [r0, #0]
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	f000 8109 	beq.w	801ec00 <mbedtls_ssl_read+0x228>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> read" ) );
 801e9ee:	4b85      	ldr	r3, [pc, #532]	; (801ec04 <mbedtls_ssl_read+0x22c>)
 801e9f0:	4a85      	ldr	r2, [pc, #532]	; (801ec08 <mbedtls_ssl_read+0x230>)
 801e9f2:	9300      	str	r3, [sp, #0]
 801e9f4:	2102      	movs	r1, #2
 801e9f6:	f641 2357 	movw	r3, #6743	; 0x1a57
 801e9fa:	f7f2 f867 	bl	8010acc <mbedtls_debug_print_msg>
    ret = ssl_check_ctr_renegotiate( ssl );
 801e9fe:	4620      	mov	r0, r4
 801ea00:	f7ff ff36 	bl	801e870 <ssl_check_ctr_renegotiate>
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea04:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
    ret = ssl_check_ctr_renegotiate( ssl );
 801ea08:	4605      	mov	r5, r0
    if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea0a:	d00d      	beq.n	801ea28 <mbedtls_ssl_read+0x50>
 801ea0c:	b160      	cbz	r0, 801ea28 <mbedtls_ssl_read+0x50>
        MBEDTLS_SSL_DEBUG_RET( 1, "ssl_check_ctr_renegotiate", ret );
 801ea0e:	4b7f      	ldr	r3, [pc, #508]	; (801ec0c <mbedtls_ssl_read+0x234>)
 801ea10:	9300      	str	r3, [sp, #0]
 801ea12:	9001      	str	r0, [sp, #4]
 801ea14:	f641 2379 	movw	r3, #6777	; 0x1a79
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801ea18:	4a7b      	ldr	r2, [pc, #492]	; (801ec08 <mbedtls_ssl_read+0x230>)
 801ea1a:	2101      	movs	r1, #1
 801ea1c:	4620      	mov	r0, r4
 801ea1e:	f7f2 f885 	bl	8010b2c <mbedtls_debug_print_ret>
}
 801ea22:	4628      	mov	r0, r5
 801ea24:	b003      	add	sp, #12
 801ea26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ssl->state != MBEDTLS_SSL_HANDSHAKE_OVER )
 801ea28:	6863      	ldr	r3, [r4, #4]
 801ea2a:	2b10      	cmp	r3, #16
 801ea2c:	d00d      	beq.n	801ea4a <mbedtls_ssl_read+0x72>
        ret = mbedtls_ssl_handshake( ssl );
 801ea2e:	4620      	mov	r0, r4
 801ea30:	f7ff fc92 	bl	801e358 <mbedtls_ssl_handshake>
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea34:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
        ret = mbedtls_ssl_handshake( ssl );
 801ea38:	4605      	mov	r5, r0
        if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801ea3a:	d006      	beq.n	801ea4a <mbedtls_ssl_read+0x72>
 801ea3c:	b128      	cbz	r0, 801ea4a <mbedtls_ssl_read+0x72>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_handshake", ret );
 801ea3e:	4b74      	ldr	r3, [pc, #464]	; (801ec10 <mbedtls_ssl_read+0x238>)
 801ea40:	9300      	str	r3, [sp, #0]
 801ea42:	9001      	str	r0, [sp, #4]
 801ea44:	f641 2384 	movw	r3, #6788	; 0x1a84
 801ea48:	e7e6      	b.n	801ea18 <mbedtls_ssl_read+0x40>
    if( ssl->in_offt == NULL )
 801ea4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	f040 80b9 	bne.w	801ebc4 <mbedtls_ssl_read+0x1ec>
        if( ssl->f_get_timer != NULL &&
 801ea52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801ea54:	b143      	cbz	r3, 801ea68 <mbedtls_ssl_read+0x90>
            ssl->f_get_timer( ssl->p_timer ) == -1 )
 801ea56:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801ea58:	4798      	blx	r3
        if( ssl->f_get_timer != NULL &&
 801ea5a:	3001      	adds	r0, #1
 801ea5c:	d104      	bne.n	801ea68 <mbedtls_ssl_read+0x90>
            ssl_set_timer( ssl, ssl->conf->read_timeout );
 801ea5e:	6823      	ldr	r3, [r4, #0]
 801ea60:	4620      	mov	r0, r4
 801ea62:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801ea64:	f7fd fd9c 	bl	801c5a0 <ssl_set_timer>
        if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ea68:	4620      	mov	r0, r4
 801ea6a:	f7ff f8db 	bl	801dc24 <mbedtls_ssl_read_record>
 801ea6e:	4605      	mov	r5, r0
 801ea70:	b150      	cbz	r0, 801ea88 <mbedtls_ssl_read+0xb0>
            if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801ea72:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801ea76:	d101      	bne.n	801ea7c <mbedtls_ssl_read+0xa4>
                return( 0 );
 801ea78:	2500      	movs	r5, #0
 801ea7a:	e7d2      	b.n	801ea22 <mbedtls_ssl_read+0x4a>
            MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ea7c:	4b65      	ldr	r3, [pc, #404]	; (801ec14 <mbedtls_ssl_read+0x23c>)
 801ea7e:	9300      	str	r3, [sp, #0]
 801ea80:	9001      	str	r0, [sp, #4]
 801ea82:	f641 23ba 	movw	r3, #6842	; 0x1aba
 801ea86:	e7c7      	b.n	801ea18 <mbedtls_ssl_read+0x40>
        if( ssl->in_msglen  == 0 &&
 801ea88:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801ea8a:	b983      	cbnz	r3, 801eaae <mbedtls_ssl_read+0xd6>
 801ea8c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ea8e:	2b17      	cmp	r3, #23
 801ea90:	d10d      	bne.n	801eaae <mbedtls_ssl_read+0xd6>
            if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ea92:	4620      	mov	r0, r4
 801ea94:	f7ff f8c6 	bl	801dc24 <mbedtls_ssl_read_record>
 801ea98:	4605      	mov	r5, r0
 801ea9a:	b140      	cbz	r0, 801eaae <mbedtls_ssl_read+0xd6>
                if( ret == MBEDTLS_ERR_SSL_CONN_EOF )
 801ea9c:	f510 4fe5 	cmn.w	r0, #29312	; 0x7280
 801eaa0:	d0ea      	beq.n	801ea78 <mbedtls_ssl_read+0xa0>
                MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801eaa2:	4b5c      	ldr	r3, [pc, #368]	; (801ec14 <mbedtls_ssl_read+0x23c>)
 801eaa4:	9300      	str	r3, [sp, #0]
 801eaa6:	9001      	str	r0, [sp, #4]
 801eaa8:	f641 23c9 	movw	r3, #6857	; 0x1ac9
 801eaac:	e7b4      	b.n	801ea18 <mbedtls_ssl_read+0x40>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_HANDSHAKE )
 801eaae:	6f62      	ldr	r2, [r4, #116]	; 0x74
 801eab0:	2a16      	cmp	r2, #22
 801eab2:	d15a      	bne.n	801eb6a <mbedtls_ssl_read+0x192>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "received handshake message" ) );
 801eab4:	4b58      	ldr	r3, [pc, #352]	; (801ec18 <mbedtls_ssl_read+0x240>)
 801eab6:	4a54      	ldr	r2, [pc, #336]	; (801ec08 <mbedtls_ssl_read+0x230>)
 801eab8:	9300      	str	r3, [sp, #0]
 801eaba:	2101      	movs	r1, #1
 801eabc:	f641 23d1 	movw	r3, #6865	; 0x1ad1
 801eac0:	4620      	mov	r0, r4
 801eac2:	f7f2 f803 	bl	8010acc <mbedtls_debug_print_msg>
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801eac6:	6822      	ldr	r2, [r4, #0]
 801eac8:	f892 306c 	ldrb.w	r3, [r2, #108]	; 0x6c
 801eacc:	07d9      	lsls	r1, r3, #31
 801eace:	d411      	bmi.n	801eaf4 <mbedtls_ssl_read+0x11c>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801ead0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
            if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801ead2:	7809      	ldrb	r1, [r1, #0]
 801ead4:	b919      	cbnz	r1, 801eade <mbedtls_ssl_read+0x106>
                ( ssl->in_msg[0] != MBEDTLS_SSL_HS_HELLO_REQUEST ||
 801ead6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 801eada:	2904      	cmp	r1, #4
 801eadc:	d00a      	beq.n	801eaf4 <mbedtls_ssl_read+0x11c>
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "handshake received (not HelloRequest)" ) );
 801eade:	4b4f      	ldr	r3, [pc, #316]	; (801ec1c <mbedtls_ssl_read+0x244>)
 801eae0:	9300      	str	r3, [sp, #0]
 801eae2:	f641 23de 	movw	r3, #6878	; 0x1ade
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801eae6:	4a48      	ldr	r2, [pc, #288]	; (801ec08 <mbedtls_ssl_read+0x230>)
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801eae8:	4d4d      	ldr	r5, [pc, #308]	; (801ec20 <mbedtls_ssl_read+0x248>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801eaea:	2101      	movs	r1, #1
 801eaec:	4620      	mov	r0, r4
 801eaee:	f7f1 ffed 	bl	8010acc <mbedtls_debug_print_msg>
            return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801eaf2:	e796      	b.n	801ea22 <mbedtls_ssl_read+0x4a>
            if( ssl->conf->disable_renegotiation == MBEDTLS_SSL_RENEGOTIATION_DISABLED ||
 801eaf4:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 801eaf8:	0752      	lsls	r2, r2, #29
 801eafa:	d505      	bpl.n	801eb08 <mbedtls_ssl_read+0x130>
 801eafc:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
 801eb00:	bb22      	cbnz	r2, 801eb4c <mbedtls_ssl_read+0x174>
                ( ssl->secure_renegotiation == MBEDTLS_SSL_LEGACY_RENEGOTIATION &&
 801eb02:	f013 0f30 	tst.w	r3, #48	; 0x30
 801eb06:	d121      	bne.n	801eb4c <mbedtls_ssl_read+0x174>
                MBEDTLS_SSL_DEBUG_MSG( 3, ( "refusing renegotiation, sending alert" ) );
 801eb08:	4b46      	ldr	r3, [pc, #280]	; (801ec24 <mbedtls_ssl_read+0x24c>)
 801eb0a:	9300      	str	r3, [sp, #0]
 801eb0c:	4a3e      	ldr	r2, [pc, #248]	; (801ec08 <mbedtls_ssl_read+0x230>)
 801eb0e:	f641 3303 	movw	r3, #6915	; 0x1b03
 801eb12:	2103      	movs	r1, #3
 801eb14:	4620      	mov	r0, r4
 801eb16:	f7f1 ffd9 	bl	8010acc <mbedtls_debug_print_msg>
                if( ssl->minor_ver >= MBEDTLS_SSL_MINOR_VERSION_1 )
 801eb1a:	6963      	ldr	r3, [r4, #20]
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	dd0a      	ble.n	801eb36 <mbedtls_ssl_read+0x15e>
                    if( ( ret = mbedtls_ssl_send_alert_message( ssl,
 801eb20:	2264      	movs	r2, #100	; 0x64
 801eb22:	2101      	movs	r1, #1
 801eb24:	4620      	mov	r0, r4
 801eb26:	f7fe fc67 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
 801eb2a:	4605      	mov	r5, r0
 801eb2c:	2800      	cmp	r0, #0
 801eb2e:	f47f af78 	bne.w	801ea22 <mbedtls_ssl_read+0x4a>
            return( MBEDTLS_ERR_SSL_WANT_READ );
 801eb32:	4d3d      	ldr	r5, [pc, #244]	; (801ec28 <mbedtls_ssl_read+0x250>)
 801eb34:	e775      	b.n	801ea22 <mbedtls_ssl_read+0x4a>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801eb36:	4b3d      	ldr	r3, [pc, #244]	; (801ec2c <mbedtls_ssl_read+0x254>)
 801eb38:	9300      	str	r3, [sp, #0]
 801eb3a:	4a33      	ldr	r2, [pc, #204]	; (801ec08 <mbedtls_ssl_read+0x230>)
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801eb3c:	4d3c      	ldr	r5, [pc, #240]	; (801ec30 <mbedtls_ssl_read+0x258>)
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "should never happen" ) );
 801eb3e:	f641 331f 	movw	r3, #6943	; 0x1b1f
 801eb42:	2101      	movs	r1, #1
 801eb44:	4620      	mov	r0, r4
 801eb46:	f7f1 ffc1 	bl	8010acc <mbedtls_debug_print_msg>
                    return( MBEDTLS_ERR_SSL_INTERNAL_ERROR );
 801eb4a:	e76a      	b.n	801ea22 <mbedtls_ssl_read+0x4a>
                ret = ssl_start_renegotiation( ssl );
 801eb4c:	4620      	mov	r0, r4
 801eb4e:	f7ff fe27 	bl	801e7a0 <ssl_start_renegotiation>
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801eb52:	f510 4fd6 	cmn.w	r0, #27392	; 0x6b00
                ret = ssl_start_renegotiation( ssl );
 801eb56:	4605      	mov	r5, r0
                if( ret != MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO &&
 801eb58:	d0eb      	beq.n	801eb32 <mbedtls_ssl_read+0x15a>
 801eb5a:	2800      	cmp	r0, #0
 801eb5c:	d0e9      	beq.n	801eb32 <mbedtls_ssl_read+0x15a>
                    MBEDTLS_SSL_DEBUG_RET( 1, "ssl_start_renegotiation", ret );
 801eb5e:	4b35      	ldr	r3, [pc, #212]	; (801ec34 <mbedtls_ssl_read+0x25c>)
 801eb60:	9300      	str	r3, [sp, #0]
 801eb62:	9001      	str	r0, [sp, #4]
 801eb64:	f641 3335 	movw	r3, #6965	; 0x1b35
 801eb68:	e756      	b.n	801ea18 <mbedtls_ssl_read+0x40>
        else if( ssl->renego_status == MBEDTLS_SSL_RENEGOTIATION_PENDING )
 801eb6a:	68a3      	ldr	r3, [r4, #8]
 801eb6c:	2b03      	cmp	r3, #3
 801eb6e:	d10d      	bne.n	801eb8c <mbedtls_ssl_read+0x1b4>
            if( ssl->conf->renego_max_records >= 0 )
 801eb70:	6823      	ldr	r3, [r4, #0]
 801eb72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801eb74:	2900      	cmp	r1, #0
 801eb76:	db09      	blt.n	801eb8c <mbedtls_ssl_read+0x1b4>
                if( ++ssl->renego_records_seen > ssl->conf->renego_max_records )
 801eb78:	68e3      	ldr	r3, [r4, #12]
 801eb7a:	3301      	adds	r3, #1
 801eb7c:	4299      	cmp	r1, r3
 801eb7e:	60e3      	str	r3, [r4, #12]
 801eb80:	da04      	bge.n	801eb8c <mbedtls_ssl_read+0x1b4>
                    MBEDTLS_SSL_DEBUG_MSG( 1, ( "renegotiation requested, "
 801eb82:	4b2d      	ldr	r3, [pc, #180]	; (801ec38 <mbedtls_ssl_read+0x260>)
 801eb84:	9300      	str	r3, [sp, #0]
 801eb86:	f641 3342 	movw	r3, #6978	; 0x1b42
 801eb8a:	e7ac      	b.n	801eae6 <mbedtls_ssl_read+0x10e>
        if( ssl->in_msgtype == MBEDTLS_SSL_MSG_ALERT )
 801eb8c:	2a15      	cmp	r2, #21
 801eb8e:	d109      	bne.n	801eba4 <mbedtls_ssl_read+0x1cc>
            MBEDTLS_SSL_DEBUG_MSG( 2, ( "ignoring non-fatal non-closure alert" ) );
 801eb90:	4b2a      	ldr	r3, [pc, #168]	; (801ec3c <mbedtls_ssl_read+0x264>)
 801eb92:	9300      	str	r3, [sp, #0]
 801eb94:	4a1c      	ldr	r2, [pc, #112]	; (801ec08 <mbedtls_ssl_read+0x230>)
 801eb96:	f641 334d 	movw	r3, #6989	; 0x1b4d
 801eb9a:	2102      	movs	r1, #2
 801eb9c:	4620      	mov	r0, r4
 801eb9e:	f7f1 ff95 	bl	8010acc <mbedtls_debug_print_msg>
 801eba2:	e7c6      	b.n	801eb32 <mbedtls_ssl_read+0x15a>
        if( ssl->in_msgtype != MBEDTLS_SSL_MSG_APPLICATION_DATA )
 801eba4:	2a17      	cmp	r2, #23
 801eba6:	d004      	beq.n	801ebb2 <mbedtls_ssl_read+0x1da>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad application data message" ) );
 801eba8:	4b25      	ldr	r3, [pc, #148]	; (801ec40 <mbedtls_ssl_read+0x268>)
 801ebaa:	9300      	str	r3, [sp, #0]
 801ebac:	f641 3353 	movw	r3, #6995	; 0x1b53
 801ebb0:	e799      	b.n	801eae6 <mbedtls_ssl_read+0x10e>
        ssl->in_offt = ssl->in_msg;
 801ebb2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ebb4:	6723      	str	r3, [r4, #112]	; 0x70
        if( ssl->state == MBEDTLS_SSL_HANDSHAKE_OVER )
 801ebb6:	6863      	ldr	r3, [r4, #4]
 801ebb8:	2b10      	cmp	r3, #16
 801ebba:	d103      	bne.n	801ebc4 <mbedtls_ssl_read+0x1ec>
            ssl_set_timer( ssl, 0 );
 801ebbc:	2100      	movs	r1, #0
 801ebbe:	4620      	mov	r0, r4
 801ebc0:	f7fd fcee 	bl	801c5a0 <ssl_set_timer>
    n = ( len < ssl->in_msglen )
 801ebc4:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    memcpy( buf, ssl->in_offt, n );
 801ebc6:	6f21      	ldr	r1, [r4, #112]	; 0x70
    n = ( len < ssl->in_msglen )
 801ebc8:	42b5      	cmp	r5, r6
 801ebca:	bf28      	it	cs
 801ebcc:	4635      	movcs	r5, r6
    memcpy( buf, ssl->in_offt, n );
 801ebce:	462a      	mov	r2, r5
 801ebd0:	4638      	mov	r0, r7
 801ebd2:	f003 fc09 	bl	80223e8 <memcpy>
    ssl->in_msglen -= n;
 801ebd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801ebd8:	1b5b      	subs	r3, r3, r5
 801ebda:	67a3      	str	r3, [r4, #120]	; 0x78
    if( ssl->in_msglen == 0 )
 801ebdc:	b963      	cbnz	r3, 801ebf8 <mbedtls_ssl_read+0x220>
        ssl->in_offt = NULL;
 801ebde:	6723      	str	r3, [r4, #112]	; 0x70
        ssl->keep_current_message = 0;
 801ebe0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= read" ) );
 801ebe4:	4b17      	ldr	r3, [pc, #92]	; (801ec44 <mbedtls_ssl_read+0x26c>)
 801ebe6:	9300      	str	r3, [sp, #0]
 801ebe8:	4a07      	ldr	r2, [pc, #28]	; (801ec08 <mbedtls_ssl_read+0x230>)
 801ebea:	f641 3382 	movw	r3, #7042	; 0x1b82
 801ebee:	2102      	movs	r1, #2
 801ebf0:	4620      	mov	r0, r4
 801ebf2:	f7f1 ff6b 	bl	8010acc <mbedtls_debug_print_msg>
    return( (int) n );
 801ebf6:	e714      	b.n	801ea22 <mbedtls_ssl_read+0x4a>
        ssl->in_offt += n;
 801ebf8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801ebfa:	442b      	add	r3, r5
 801ebfc:	6723      	str	r3, [r4, #112]	; 0x70
 801ebfe:	e7f1      	b.n	801ebe4 <mbedtls_ssl_read+0x20c>
        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );
 801ec00:	4d11      	ldr	r5, [pc, #68]	; (801ec48 <mbedtls_ssl_read+0x270>)
 801ec02:	e70e      	b.n	801ea22 <mbedtls_ssl_read+0x4a>
 801ec04:	08032cc0 	.word	0x08032cc0
 801ec08:	08031ee5 	.word	0x08031ee5
 801ec0c:	08032c9d 	.word	0x08032c9d
 801ec10:	08032c2d 	.word	0x08032c2d
 801ec14:	080313d6 	.word	0x080313d6
 801ec18:	08032cc8 	.word	0x08032cc8
 801ec1c:	08032ce3 	.word	0x08032ce3
 801ec20:	ffff8900 	.word	0xffff8900
 801ec24:	08032d09 	.word	0x08032d09
 801ec28:	ffff9700 	.word	0xffff9700
 801ec2c:	08031a15 	.word	0x08031a15
 801ec30:	ffff9400 	.word	0xffff9400
 801ec34:	08032c52 	.word	0x08032c52
 801ec38:	08032d2f 	.word	0x08032d2f
 801ec3c:	08032d62 	.word	0x08032d62
 801ec40:	08032d87 	.word	0x08032d87
 801ec44:	08032da4 	.word	0x08032da4
 801ec48:	ffff8f00 	.word	0xffff8f00

0801ec4c <mbedtls_ssl_free>:
{
 801ec4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ssl == NULL )
 801ec4e:	4604      	mov	r4, r0
 801ec50:	2800      	cmp	r0, #0
 801ec52:	d060      	beq.n	801ed16 <mbedtls_ssl_free+0xca>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> free" ) );
 801ec54:	4b31      	ldr	r3, [pc, #196]	; (801ed1c <mbedtls_ssl_free+0xd0>)
 801ec56:	9300      	str	r3, [sp, #0]
 801ec58:	4a31      	ldr	r2, [pc, #196]	; (801ed20 <mbedtls_ssl_free+0xd4>)
 801ec5a:	f641 43b0 	movw	r3, #7344	; 0x1cb0
 801ec5e:	2102      	movs	r1, #2
 801ec60:	f7f1 ff34 	bl	8010acc <mbedtls_debug_print_msg>
    if( ssl->out_buf != NULL )
 801ec64:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801ec68:	b140      	cbz	r0, 801ec7c <mbedtls_ssl_free+0x30>
        mbedtls_zeroize( ssl->out_buf, MBEDTLS_SSL_BUFFER_LEN );
 801ec6a:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801ec6e:	f7fd fa4b 	bl	801c108 <mbedtls_zeroize>
        mbedtls_free( ssl->out_buf );
 801ec72:	4b2c      	ldr	r3, [pc, #176]	; (801ed24 <mbedtls_ssl_free+0xd8>)
 801ec74:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 801ec78:	681b      	ldr	r3, [r3, #0]
 801ec7a:	4798      	blx	r3
    if( ssl->in_buf != NULL )
 801ec7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ec7e:	b138      	cbz	r0, 801ec90 <mbedtls_ssl_free+0x44>
        mbedtls_zeroize( ssl->in_buf, MBEDTLS_SSL_BUFFER_LEN );
 801ec80:	f241 41d5 	movw	r1, #5333	; 0x14d5
 801ec84:	f7fd fa40 	bl	801c108 <mbedtls_zeroize>
        mbedtls_free( ssl->in_buf );
 801ec88:	4b26      	ldr	r3, [pc, #152]	; (801ed24 <mbedtls_ssl_free+0xd8>)
 801ec8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	4798      	blx	r3
    if( ssl->transform )
 801ec90:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ec92:	b128      	cbz	r0, 801eca0 <mbedtls_ssl_free+0x54>
        mbedtls_ssl_transform_free( ssl->transform );
 801ec94:	f7ff fbd2 	bl	801e43c <mbedtls_ssl_transform_free>
        mbedtls_free( ssl->transform );
 801ec98:	4b22      	ldr	r3, [pc, #136]	; (801ed24 <mbedtls_ssl_free+0xd8>)
 801ec9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801ec9c:	681b      	ldr	r3, [r3, #0]
 801ec9e:	4798      	blx	r3
    if( ssl->handshake )
 801eca0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801eca2:	b188      	cbz	r0, 801ecc8 <mbedtls_ssl_free+0x7c>
        mbedtls_ssl_handshake_free( ssl->handshake );
 801eca4:	f7ff fbe4 	bl	801e470 <mbedtls_ssl_handshake_free>
        mbedtls_free( ssl->handshake );
 801eca8:	4d1e      	ldr	r5, [pc, #120]	; (801ed24 <mbedtls_ssl_free+0xd8>)
        mbedtls_ssl_transform_free( ssl->transform_negotiate );
 801ecaa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ecac:	f7ff fbc6 	bl	801e43c <mbedtls_ssl_transform_free>
        mbedtls_ssl_session_free( ssl->session_negotiate );
 801ecb0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ecb2:	f7ff fc03 	bl	801e4bc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->handshake );
 801ecb6:	682b      	ldr	r3, [r5, #0]
 801ecb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801ecba:	4798      	blx	r3
        mbedtls_free( ssl->transform_negotiate );
 801ecbc:	682b      	ldr	r3, [r5, #0]
 801ecbe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801ecc0:	4798      	blx	r3
        mbedtls_free( ssl->session_negotiate );
 801ecc2:	682b      	ldr	r3, [r5, #0]
 801ecc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ecc6:	4798      	blx	r3
    if( ssl->session )
 801ecc8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ecca:	b128      	cbz	r0, 801ecd8 <mbedtls_ssl_free+0x8c>
        mbedtls_ssl_session_free( ssl->session );
 801eccc:	f7ff fbf6 	bl	801e4bc <mbedtls_ssl_session_free>
        mbedtls_free( ssl->session );
 801ecd0:	4b14      	ldr	r3, [pc, #80]	; (801ed24 <mbedtls_ssl_free+0xd8>)
 801ecd2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	4798      	blx	r3
    if( ssl->hostname != NULL )
 801ecd8:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 801ecdc:	b15d      	cbz	r5, 801ecf6 <mbedtls_ssl_free+0xaa>
        mbedtls_zeroize( ssl->hostname, strlen( ssl->hostname ) );
 801ecde:	4628      	mov	r0, r5
 801ece0:	f7e1 fa80 	bl	80001e4 <strlen>
 801ece4:	4601      	mov	r1, r0
 801ece6:	4628      	mov	r0, r5
 801ece8:	f7fd fa0e 	bl	801c108 <mbedtls_zeroize>
        mbedtls_free( ssl->hostname );
 801ecec:	4b0d      	ldr	r3, [pc, #52]	; (801ed24 <mbedtls_ssl_free+0xd8>)
 801ecee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	4798      	blx	r3
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= free" ) );
 801ecf6:	4b0c      	ldr	r3, [pc, #48]	; (801ed28 <mbedtls_ssl_free+0xdc>)
 801ecf8:	9300      	str	r3, [sp, #0]
 801ecfa:	4620      	mov	r0, r4
 801ecfc:	4a08      	ldr	r2, [pc, #32]	; (801ed20 <mbedtls_ssl_free+0xd4>)
 801ecfe:	f641 43f1 	movw	r3, #7409	; 0x1cf1
 801ed02:	2102      	movs	r1, #2
 801ed04:	f7f1 fee2 	bl	8010acc <mbedtls_debug_print_msg>
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801ed08:	21dc      	movs	r1, #220	; 0xdc
 801ed0a:	4620      	mov	r0, r4
}
 801ed0c:	b003      	add	sp, #12
 801ed0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    mbedtls_zeroize( ssl, sizeof( mbedtls_ssl_context ) );
 801ed12:	f7fd b9f9 	b.w	801c108 <mbedtls_zeroize>
}
 801ed16:	b003      	add	sp, #12
 801ed18:	bd30      	pop	{r4, r5, pc}
 801ed1a:	bf00      	nop
 801ed1c:	08032dac 	.word	0x08032dac
 801ed20:	08031ee5 	.word	0x08031ee5
 801ed24:	200005a4 	.word	0x200005a4
 801ed28:	08032db4 	.word	0x08032db4

0801ed2c <mbedtls_ssl_config_init>:
    memset( conf, 0, sizeof( mbedtls_ssl_config ) );
 801ed2c:	2270      	movs	r2, #112	; 0x70
 801ed2e:	2100      	movs	r1, #0
 801ed30:	f003 bb82 	b.w	8022438 <memset>

0801ed34 <mbedtls_ssl_config_defaults>:
{
 801ed34:	b510      	push	{r4, lr}
 801ed36:	4604      	mov	r4, r0
    conf->endpoint   = endpoint;
 801ed38:	f002 0201 	and.w	r2, r2, #1
 801ed3c:	f001 0001 	and.w	r0, r1, #1
 801ed40:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 801ed44:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801ed48:	f020 0003 	bic.w	r0, r0, #3
 801ed4c:	4302      	orrs	r2, r0
 801ed4e:	f884 206c 	strb.w	r2, [r4, #108]	; 0x6c
    if( endpoint == MBEDTLS_SSL_IS_CLIENT )
 801ed52:	b959      	cbnz	r1, 801ed6c <mbedtls_ssl_config_defaults+0x38>
        conf->authmode = MBEDTLS_SSL_VERIFY_REQUIRED;
 801ed54:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
 801ed58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801ed5c:	f022 020c 	bic.w	r2, r2, #12
 801ed60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ed64:	f042 0208 	orr.w	r2, r2, #8
 801ed68:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
    conf->extended_ms = MBEDTLS_SSL_EXTENDED_MS_ENABLED;
 801ed6c:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 801ed70:	f042 0202 	orr.w	r2, r2, #2
 801ed74:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
    conf->renego_max_records = MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT;
 801ed78:	2210      	movs	r2, #16
 801ed7a:	65e2      	str	r2, [r4, #92]	; 0x5c
    memset( conf->renego_period,     0x00, 2 );
 801ed7c:	2200      	movs	r2, #0
 801ed7e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
    switch( preset )
 801ed82:	2b02      	cmp	r3, #2
    memset( conf->renego_period + 2, 0xFF, 6 );
 801ed84:	f04f 32ff 	mov.w	r2, #4294967295
 801ed88:	f8c4 2062 	str.w	r2, [r4, #98]	; 0x62
 801ed8c:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
    switch( preset )
 801ed90:	d110      	bne.n	801edb4 <mbedtls_ssl_config_defaults+0x80>
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801ed92:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 801ed96:	66a3      	str	r3, [r4, #104]	; 0x68
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_3] =
 801ed98:	4b0e      	ldr	r3, [pc, #56]	; (801edd4 <mbedtls_ssl_config_defaults+0xa0>)
            conf->cert_profile = &mbedtls_x509_crt_profile_suiteb;
 801ed9a:	4a0f      	ldr	r2, [pc, #60]	; (801edd8 <mbedtls_ssl_config_defaults+0xa4>)
 801ed9c:	63e2      	str	r2, [r4, #60]	; 0x3c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801ed9e:	e9c4 3302 	strd	r3, r3, [r4, #8]
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801eda2:	f103 020c 	add.w	r2, r3, #12
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801eda6:	e9c4 3300 	strd	r3, r3, [r4]
            conf->curve_list = ssl_preset_suiteb_curves;
 801edaa:	3318      	adds	r3, #24
            conf->sig_hashes = ssl_preset_suiteb_hashes;
 801edac:	64e2      	str	r2, [r4, #76]	; 0x4c
            conf->curve_list = ssl_preset_suiteb_curves;
 801edae:	6523      	str	r3, [r4, #80]	; 0x50
}
 801edb0:	2000      	movs	r0, #0
 801edb2:	bd10      	pop	{r4, pc}
            conf->max_major_ver = MBEDTLS_SSL_MAX_MAJOR_VERSION;
 801edb4:	4b09      	ldr	r3, [pc, #36]	; (801eddc <mbedtls_ssl_config_defaults+0xa8>)
 801edb6:	66a3      	str	r3, [r4, #104]	; 0x68
                                   mbedtls_ssl_list_ciphersuites();
 801edb8:	f7fb fa06 	bl	801a1c8 <mbedtls_ssl_list_ciphersuites>
            conf->cert_profile = &mbedtls_x509_crt_profile_default;
 801edbc:	4b08      	ldr	r3, [pc, #32]	; (801ede0 <mbedtls_ssl_config_defaults+0xac>)
 801edbe:	63e3      	str	r3, [r4, #60]	; 0x3c
            conf->sig_hashes = ssl_preset_default_hashes;
 801edc0:	4b08      	ldr	r3, [pc, #32]	; (801ede4 <mbedtls_ssl_config_defaults+0xb0>)
 801edc2:	64e3      	str	r3, [r4, #76]	; 0x4c
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_2] =
 801edc4:	e9c4 0002 	strd	r0, r0, [r4, #8]
            conf->ciphersuite_list[MBEDTLS_SSL_MINOR_VERSION_0] =
 801edc8:	e9c4 0000 	strd	r0, r0, [r4]
            conf->curve_list = mbedtls_ecp_grp_id_list();
 801edcc:	f7f3 f8f8 	bl	8011fc0 <mbedtls_ecp_grp_id_list>
 801edd0:	6520      	str	r0, [r4, #80]	; 0x50
 801edd2:	e7ed      	b.n	801edb0 <mbedtls_ssl_config_defaults+0x7c>
 801edd4:	200005a8 	.word	0x200005a8
 801edd8:	0802d670 	.word	0x0802d670
 801eddc:	01030303 	.word	0x01030303
 801ede0:	0802d660 	.word	0x0802d660
 801ede4:	200005c4 	.word	0x200005c4

0801ede8 <mbedtls_ssl_config_free>:
{
 801ede8:	b570      	push	{r4, r5, r6, lr}
 801edea:	4604      	mov	r4, r0
        mbedtls_free( cur );
 801edec:	4d06      	ldr	r5, [pc, #24]	; (801ee08 <mbedtls_ssl_config_free+0x20>)
    ssl_key_cert_free( conf->key_cert );
 801edee:	6c00      	ldr	r0, [r0, #64]	; 0x40
    while( cur != NULL )
 801edf0:	b928      	cbnz	r0, 801edfe <mbedtls_ssl_config_free+0x16>
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801edf2:	4620      	mov	r0, r4
 801edf4:	2170      	movs	r1, #112	; 0x70
}
 801edf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mbedtls_zeroize( conf, sizeof( mbedtls_ssl_config ) );
 801edfa:	f7fd b985 	b.w	801c108 <mbedtls_zeroize>
        next = cur->next;
 801edfe:	6886      	ldr	r6, [r0, #8]
        mbedtls_free( cur );
 801ee00:	682b      	ldr	r3, [r5, #0]
 801ee02:	4798      	blx	r3
        cur = next;
 801ee04:	4630      	mov	r0, r6
 801ee06:	e7f3      	b.n	801edf0 <mbedtls_ssl_config_free+0x8>
 801ee08:	200005a4 	.word	0x200005a4

0801ee0c <mbedtls_ssl_sig_from_pk>:
{
 801ee0c:	b510      	push	{r4, lr}
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801ee0e:	2101      	movs	r1, #1
{
 801ee10:	4604      	mov	r4, r0
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_RSA ) )
 801ee12:	f7f6 fe61 	bl	8015ad8 <mbedtls_pk_can_do>
 801ee16:	b940      	cbnz	r0, 801ee2a <mbedtls_ssl_sig_from_pk+0x1e>
    if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECDSA ) )
 801ee18:	2104      	movs	r1, #4
 801ee1a:	4620      	mov	r0, r4
 801ee1c:	f7f6 fe5c 	bl	8015ad8 <mbedtls_pk_can_do>
 801ee20:	2800      	cmp	r0, #0
        return( MBEDTLS_SSL_SIG_ECDSA );
 801ee22:	bf0c      	ite	eq
 801ee24:	2000      	moveq	r0, #0
 801ee26:	2003      	movne	r0, #3
}
 801ee28:	bd10      	pop	{r4, pc}
        return( MBEDTLS_SSL_SIG_RSA );
 801ee2a:	2001      	movs	r0, #1
 801ee2c:	e7fc      	b.n	801ee28 <mbedtls_ssl_sig_from_pk+0x1c>

0801ee2e <mbedtls_ssl_pk_alg_from_sig>:
    switch( sig )
 801ee2e:	2801      	cmp	r0, #1
 801ee30:	d003      	beq.n	801ee3a <mbedtls_ssl_pk_alg_from_sig+0xc>
 801ee32:	2803      	cmp	r0, #3
 801ee34:	bf14      	ite	ne
 801ee36:	2000      	movne	r0, #0
 801ee38:	2004      	moveq	r0, #4
}
 801ee3a:	4770      	bx	lr

0801ee3c <mbedtls_ssl_md_alg_from_hash>:
    switch( hash )
 801ee3c:	1e43      	subs	r3, r0, #1
 801ee3e:	2b05      	cmp	r3, #5
 801ee40:	bf9a      	itte	ls
 801ee42:	3002      	addls	r0, #2
 801ee44:	b2c0      	uxtbls	r0, r0
{
 801ee46:	2000      	movhi	r0, #0
}
 801ee48:	4770      	bx	lr

0801ee4a <mbedtls_ssl_hash_from_md_alg>:
    switch( md )
 801ee4a:	1ec3      	subs	r3, r0, #3
 801ee4c:	2b05      	cmp	r3, #5
 801ee4e:	bf9a      	itte	ls
 801ee50:	3802      	subls	r0, #2
 801ee52:	b2c0      	uxtbls	r0, r0
 801ee54:	2000      	movhi	r0, #0
}
 801ee56:	4770      	bx	lr

0801ee58 <mbedtls_ssl_check_curve>:
    if( ssl->conf->curve_list == NULL )
 801ee58:	6803      	ldr	r3, [r0, #0]
 801ee5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee5c:	b11b      	cbz	r3, 801ee66 <mbedtls_ssl_check_curve+0xe>
 801ee5e:	3b01      	subs	r3, #1
    for( gid = ssl->conf->curve_list; *gid != MBEDTLS_ECP_DP_NONE; gid++ )
 801ee60:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801ee64:	b912      	cbnz	r2, 801ee6c <mbedtls_ssl_check_curve+0x14>
        return( -1 );
 801ee66:	f04f 30ff 	mov.w	r0, #4294967295
 801ee6a:	4770      	bx	lr
        if( *gid == grp_id )
 801ee6c:	428a      	cmp	r2, r1
 801ee6e:	d1f7      	bne.n	801ee60 <mbedtls_ssl_check_curve+0x8>
            return( 0 );
 801ee70:	2000      	movs	r0, #0
}
 801ee72:	4770      	bx	lr

0801ee74 <mbedtls_ssl_check_sig_hash>:
    if( ssl->conf->sig_hashes == NULL )
 801ee74:	6803      	ldr	r3, [r0, #0]
 801ee76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ee78:	b11b      	cbz	r3, 801ee82 <mbedtls_ssl_check_sig_hash+0xe>
 801ee7a:	3b04      	subs	r3, #4
    for( cur = ssl->conf->sig_hashes; *cur != MBEDTLS_MD_NONE; cur++ )
 801ee7c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801ee80:	b912      	cbnz	r2, 801ee88 <mbedtls_ssl_check_sig_hash+0x14>
        return( -1 );
 801ee82:	f04f 30ff 	mov.w	r0, #4294967295
 801ee86:	4770      	bx	lr
        if( *cur == (int) md )
 801ee88:	4291      	cmp	r1, r2
 801ee8a:	d1f7      	bne.n	801ee7c <mbedtls_ssl_check_sig_hash+0x8>
            return( 0 );
 801ee8c:	2000      	movs	r0, #0
}
 801ee8e:	4770      	bx	lr

0801ee90 <mbedtls_ssl_check_cert_usage>:
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ee90:	2a01      	cmp	r2, #1
{
 801ee92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee94:	4606      	mov	r6, r0
 801ee96:	4617      	mov	r7, r2
 801ee98:	461d      	mov	r5, r3
    if( cert_endpoint == MBEDTLS_SSL_IS_SERVER )
 801ee9a:	d12a      	bne.n	801eef2 <mbedtls_ssl_check_cert_usage+0x62>
        switch( ciphersuite->key_exchange )
 801ee9c:	7a8b      	ldrb	r3, [r1, #10]
 801ee9e:	3b01      	subs	r3, #1
 801eea0:	2b09      	cmp	r3, #9
 801eea2:	d828      	bhi.n	801eef6 <mbedtls_ssl_check_cert_usage+0x66>
 801eea4:	e8df f003 	tbb	[pc, r3]
 801eea8:	25252505 	.word	0x25252505
 801eeac:	27052727 	.word	0x27052727
 801eeb0:	2323      	.short	0x2323
 801eeb2:	2120      	movs	r1, #32
    if( mbedtls_x509_crt_check_key_usage( cert, usage ) != 0 )
 801eeb4:	4630      	mov	r0, r6
 801eeb6:	f001 fd9f 	bl	80209f8 <mbedtls_x509_crt_check_key_usage>
 801eeba:	4604      	mov	r4, r0
 801eebc:	b128      	cbz	r0, 801eeca <mbedtls_ssl_check_cert_usage+0x3a>
        *flags |= MBEDTLS_X509_BADCERT_KEY_USAGE;
 801eebe:	682b      	ldr	r3, [r5, #0]
 801eec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801eec4:	602b      	str	r3, [r5, #0]
        ret = -1;
 801eec6:	f04f 34ff 	mov.w	r4, #4294967295
    if( mbedtls_x509_crt_check_extended_key_usage( cert, ext_oid, ext_len ) != 0 )
 801eeca:	490c      	ldr	r1, [pc, #48]	; (801eefc <mbedtls_ssl_check_cert_usage+0x6c>)
 801eecc:	4b0c      	ldr	r3, [pc, #48]	; (801ef00 <mbedtls_ssl_check_cert_usage+0x70>)
 801eece:	2208      	movs	r2, #8
 801eed0:	2f01      	cmp	r7, #1
 801eed2:	bf18      	it	ne
 801eed4:	4619      	movne	r1, r3
 801eed6:	4630      	mov	r0, r6
 801eed8:	f001 fdd6 	bl	8020a88 <mbedtls_x509_crt_check_extended_key_usage>
 801eedc:	b128      	cbz	r0, 801eeea <mbedtls_ssl_check_cert_usage+0x5a>
        *flags |= MBEDTLS_X509_BADCERT_EXT_KEY_USAGE;
 801eede:	682b      	ldr	r3, [r5, #0]
 801eee0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801eee4:	602b      	str	r3, [r5, #0]
        ret = -1;
 801eee6:	f04f 34ff 	mov.w	r4, #4294967295
}
 801eeea:	4620      	mov	r0, r4
 801eeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                usage = MBEDTLS_X509_KU_KEY_AGREEMENT;
 801eeee:	2108      	movs	r1, #8
                break;
 801eef0:	e7e0      	b.n	801eeb4 <mbedtls_ssl_check_cert_usage+0x24>
        usage = MBEDTLS_X509_KU_DIGITAL_SIGNATURE;
 801eef2:	2180      	movs	r1, #128	; 0x80
 801eef4:	e7de      	b.n	801eeb4 <mbedtls_ssl_check_cert_usage+0x24>
    int usage = 0;
 801eef6:	2100      	movs	r1, #0
 801eef8:	e7dc      	b.n	801eeb4 <mbedtls_ssl_check_cert_usage+0x24>
 801eefa:	bf00      	nop
 801eefc:	0803065a 	.word	0x0803065a
 801ef00:	08030692 	.word	0x08030692

0801ef04 <mbedtls_ssl_parse_certificate>:
{
 801ef04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801ef08:	6c83      	ldr	r3, [r0, #72]	; 0x48
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ef0a:	4a8f      	ldr	r2, [pc, #572]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
    const mbedtls_ssl_ciphersuite_t *ciphersuite_info = ssl->transform_negotiate->ciphersuite_info;
 801ef0c:	681f      	ldr	r7, [r3, #0]
    int authmode = ssl->conf->authmode;
 801ef0e:	6803      	ldr	r3, [r0, #0]
 801ef10:	f893 606c 	ldrb.w	r6, [r3, #108]	; 0x6c
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ef14:	4b8d      	ldr	r3, [pc, #564]	; (801f14c <mbedtls_ssl_parse_certificate+0x248>)
 801ef16:	9300      	str	r3, [sp, #0]
 801ef18:	2102      	movs	r1, #2
 801ef1a:	f44f 5387 	mov.w	r3, #4320	; 0x10e0
{
 801ef1e:	4604      	mov	r4, r0
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "=> parse certificate" ) );
 801ef20:	f7f1 fdd4 	bl	8010acc <mbedtls_debug_print_msg>
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801ef24:	7abb      	ldrb	r3, [r7, #10]
 801ef26:	2b0b      	cmp	r3, #11
    int authmode = ssl->conf->authmode;
 801ef28:	f3c6 0681 	ubfx	r6, r6, #2, #2
    if( ciphersuite_info->key_exchange == MBEDTLS_KEY_EXCHANGE_PSK ||
 801ef2c:	d816      	bhi.n	801ef5c <mbedtls_ssl_parse_certificate+0x58>
 801ef2e:	f44f 6516 	mov.w	r5, #2400	; 0x960
 801ef32:	40dd      	lsrs	r5, r3
 801ef34:	43ed      	mvns	r5, r5
 801ef36:	f015 0501 	ands.w	r5, r5, #1
 801ef3a:	d10f      	bne.n	801ef5c <mbedtls_ssl_parse_certificate+0x58>
        MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= skip parse certificate" ) );
 801ef3c:	4b84      	ldr	r3, [pc, #528]	; (801f150 <mbedtls_ssl_parse_certificate+0x24c>)
 801ef3e:	9300      	str	r3, [sp, #0]
 801ef40:	4a81      	ldr	r2, [pc, #516]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801ef42:	f241 03e7 	movw	r3, #4327	; 0x10e7
 801ef46:	2102      	movs	r1, #2
 801ef48:	4620      	mov	r0, r4
 801ef4a:	f7f1 fdbf 	bl	8010acc <mbedtls_debug_print_msg>
        ssl->state++;
 801ef4e:	6863      	ldr	r3, [r4, #4]
 801ef50:	3301      	adds	r3, #1
 801ef52:	6063      	str	r3, [r4, #4]
}
 801ef54:	4628      	mov	r0, r5
 801ef56:	b004      	add	sp, #16
 801ef58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801ef5c:	4620      	mov	r0, r4
 801ef5e:	f7fe fe61 	bl	801dc24 <mbedtls_ssl_read_record>
 801ef62:	4605      	mov	r5, r0
 801ef64:	b150      	cbz	r0, 801ef7c <mbedtls_ssl_parse_certificate+0x78>
        MBEDTLS_SSL_DEBUG_RET( 1, "mbedtls_ssl_read_record", ret );
 801ef66:	4b7b      	ldr	r3, [pc, #492]	; (801f154 <mbedtls_ssl_parse_certificate+0x250>)
 801ef68:	9300      	str	r3, [sp, #0]
 801ef6a:	9001      	str	r0, [sp, #4]
 801ef6c:	f241 1308 	movw	r3, #4360	; 0x1108
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801ef70:	4a75      	ldr	r2, [pc, #468]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801ef72:	2101      	movs	r1, #1
 801ef74:	4620      	mov	r0, r4
 801ef76:	f7f1 fdd9 	bl	8010b2c <mbedtls_debug_print_ret>
            return( ret );
 801ef7a:	e7eb      	b.n	801ef54 <mbedtls_ssl_parse_certificate+0x50>
    ssl->state++;
 801ef7c:	6863      	ldr	r3, [r4, #4]
 801ef7e:	3301      	adds	r3, #1
 801ef80:	6063      	str	r3, [r4, #4]
    if( ssl->in_msgtype != MBEDTLS_SSL_MSG_HANDSHAKE )
 801ef82:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801ef84:	2b16      	cmp	r3, #22
 801ef86:	d00f      	beq.n	801efa8 <mbedtls_ssl_parse_certificate+0xa4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801ef88:	4b73      	ldr	r3, [pc, #460]	; (801f158 <mbedtls_ssl_parse_certificate+0x254>)
 801ef8a:	4a6f      	ldr	r2, [pc, #444]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801ef8c:	9300      	str	r3, [sp, #0]
 801ef8e:	2101      	movs	r1, #1
 801ef90:	f241 1345 	movw	r3, #4421	; 0x1145
 801ef94:	4620      	mov	r0, r4
 801ef96:	f7f1 fd99 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801ef9a:	220a      	movs	r2, #10
 801ef9c:	2102      	movs	r1, #2
 801ef9e:	4620      	mov	r0, r4
 801efa0:	f7fe fa2a 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE );
 801efa4:	4d6d      	ldr	r5, [pc, #436]	; (801f15c <mbedtls_ssl_parse_certificate+0x258>)
 801efa6:	e7d5      	b.n	801ef54 <mbedtls_ssl_parse_certificate+0x50>
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801efa8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 801efaa:	7813      	ldrb	r3, [r2, #0]
 801efac:	2b0b      	cmp	r3, #11
 801efae:	d103      	bne.n	801efb8 <mbedtls_ssl_parse_certificate+0xb4>
        ssl->in_hslen < mbedtls_ssl_hs_hdr_len( ssl ) + 3 + 3 )
 801efb0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
    if( ssl->in_msg[0] != MBEDTLS_SSL_HS_CERTIFICATE ||
 801efb4:	2909      	cmp	r1, #9
 801efb6:	d80f      	bhi.n	801efd8 <mbedtls_ssl_parse_certificate+0xd4>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801efb8:	4b67      	ldr	r3, [pc, #412]	; (801f158 <mbedtls_ssl_parse_certificate+0x254>)
 801efba:	9300      	str	r3, [sp, #0]
 801efbc:	f241 134e 	movw	r3, #4430	; 0x114e
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801efc0:	4a61      	ldr	r2, [pc, #388]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801efc2:	2101      	movs	r1, #1
 801efc4:	4620      	mov	r0, r4
 801efc6:	f7f1 fd81 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801efca:	2232      	movs	r2, #50	; 0x32
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801efcc:	2102      	movs	r1, #2
 801efce:	4620      	mov	r0, r4
 801efd0:	f7fe fa12 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            return( MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE );
 801efd4:	4d62      	ldr	r5, [pc, #392]	; (801f160 <mbedtls_ssl_parse_certificate+0x25c>)
 801efd6:	e7bd      	b.n	801ef54 <mbedtls_ssl_parse_certificate+0x50>
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801efd8:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    if( ssl->in_msg[i] != 0 ||
 801efdc:	7912      	ldrb	r2, [r2, #4]
    n = ( ssl->in_msg[i+1] << 8 ) | ssl->in_msg[i+2];
 801efde:	ba5b      	rev16	r3, r3
 801efe0:	b29b      	uxth	r3, r3
    if( ssl->in_msg[i] != 0 ||
 801efe2:	b912      	cbnz	r2, 801efea <mbedtls_ssl_parse_certificate+0xe6>
        ssl->in_hslen != n + 3 + mbedtls_ssl_hs_hdr_len( ssl ) )
 801efe4:	3307      	adds	r3, #7
    if( ssl->in_msg[i] != 0 ||
 801efe6:	4299      	cmp	r1, r3
 801efe8:	d004      	beq.n	801eff4 <mbedtls_ssl_parse_certificate+0xf0>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801efea:	4b5b      	ldr	r3, [pc, #364]	; (801f158 <mbedtls_ssl_parse_certificate+0x254>)
 801efec:	9300      	str	r3, [sp, #0]
 801efee:	f241 135e 	movw	r3, #4446	; 0x115e
 801eff2:	e7e5      	b.n	801efc0 <mbedtls_ssl_parse_certificate+0xbc>
    if( ssl->session_negotiate->peer_cert != NULL )
 801eff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eff6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801eff8:	b130      	cbz	r0, 801f008 <mbedtls_ssl_parse_certificate+0x104>
        mbedtls_x509_crt_free( ssl->session_negotiate->peer_cert );
 801effa:	f002 f8fb 	bl	80211f4 <mbedtls_x509_crt_free>
        mbedtls_free( ssl->session_negotiate->peer_cert );
 801effe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f000:	4b58      	ldr	r3, [pc, #352]	; (801f164 <mbedtls_ssl_parse_certificate+0x260>)
 801f002:	6e50      	ldr	r0, [r2, #100]	; 0x64
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	4798      	blx	r3
    if( ( ssl->session_negotiate->peer_cert = mbedtls_calloc( 1,
 801f008:	4b57      	ldr	r3, [pc, #348]	; (801f168 <mbedtls_ssl_parse_certificate+0x264>)
 801f00a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 801f00c:	681b      	ldr	r3, [r3, #0]
 801f00e:	f44f 719a 	mov.w	r1, #308	; 0x134
 801f012:	2001      	movs	r0, #1
 801f014:	4798      	blx	r3
 801f016:	6668      	str	r0, [r5, #100]	; 0x64
 801f018:	b990      	cbnz	r0, 801f040 <mbedtls_ssl_parse_certificate+0x13c>
        MBEDTLS_SSL_DEBUG_MSG( 1, ( "alloc(%d bytes) failed",
 801f01a:	f44f 739a 	mov.w	r3, #308	; 0x134
 801f01e:	9301      	str	r3, [sp, #4]
 801f020:	4b52      	ldr	r3, [pc, #328]	; (801f16c <mbedtls_ssl_parse_certificate+0x268>)
 801f022:	4a49      	ldr	r2, [pc, #292]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801f024:	9300      	str	r3, [sp, #0]
 801f026:	2101      	movs	r1, #1
 801f028:	f241 136e 	movw	r3, #4462	; 0x116e
 801f02c:	4620      	mov	r0, r4
 801f02e:	f7f1 fd4d 	bl	8010acc <mbedtls_debug_print_msg>
        mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f032:	2250      	movs	r2, #80	; 0x50
 801f034:	2102      	movs	r1, #2
 801f036:	4620      	mov	r0, r4
 801f038:	f7fe f9de 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );
 801f03c:	4d4c      	ldr	r5, [pc, #304]	; (801f170 <mbedtls_ssl_parse_certificate+0x26c>)
 801f03e:	e789      	b.n	801ef54 <mbedtls_ssl_parse_certificate+0x50>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801f040:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch( ret )
 801f042:	f8df 9140 	ldr.w	r9, [pc, #320]	; 801f184 <mbedtls_ssl_parse_certificate+0x280>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801f046:	6e58      	ldr	r0, [r3, #100]	; 0x64
        switch( ret )
 801f048:	f8df a13c 	ldr.w	sl, [pc, #316]	; 801f188 <mbedtls_ssl_parse_certificate+0x284>
    mbedtls_x509_crt_init( ssl->session_negotiate->peer_cert );
 801f04c:	f002 f8cc 	bl	80211e8 <mbedtls_x509_crt_init>
    if( ( ret = mbedtls_ssl_read_record( ssl ) ) != 0 )
 801f050:	2500      	movs	r5, #0
    i += 3;
 801f052:	f04f 0807 	mov.w	r8, #7
    while( i < ssl->in_hslen )
 801f056:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801f05a:	4543      	cmp	r3, r8
 801f05c:	d824      	bhi.n	801f0a8 <mbedtls_ssl_parse_certificate+0x1a4>
    MBEDTLS_SSL_DEBUG_CRT( 3, "peer certificate", ssl->session_negotiate->peer_cert );
 801f05e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f060:	4a39      	ldr	r2, [pc, #228]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801f062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f064:	9301      	str	r3, [sp, #4]
 801f066:	4b43      	ldr	r3, [pc, #268]	; (801f174 <mbedtls_ssl_parse_certificate+0x270>)
 801f068:	9300      	str	r3, [sp, #0]
 801f06a:	2103      	movs	r1, #3
 801f06c:	f241 13ac 	movw	r3, #4524	; 0x11ac
 801f070:	4620      	mov	r0, r4
 801f072:	f7f1 fe85 	bl	8010d80 <mbedtls_debug_print_crt>
    if( ssl->conf->endpoint == MBEDTLS_SSL_IS_CLIENT &&
 801f076:	f8d4 8000 	ldr.w	r8, [r4]
 801f07a:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
 801f07e:	07db      	lsls	r3, r3, #31
 801f080:	f100 8084 	bmi.w	801f18c <mbedtls_ssl_parse_certificate+0x288>
 801f084:	68a1      	ldr	r1, [r4, #8]
 801f086:	2901      	cmp	r1, #1
 801f088:	f040 8080 	bne.w	801f18c <mbedtls_ssl_parse_certificate+0x288>
        if( ssl->session->peer_cert == NULL )
 801f08c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801f08e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801f090:	2b00      	cmp	r3, #0
 801f092:	d147      	bne.n	801f124 <mbedtls_ssl_parse_certificate+0x220>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "new server cert during renegotiation" ) );
 801f094:	4b38      	ldr	r3, [pc, #224]	; (801f178 <mbedtls_ssl_parse_certificate+0x274>)
 801f096:	4a2c      	ldr	r2, [pc, #176]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801f098:	9300      	str	r3, [sp, #0]
 801f09a:	f241 13b8 	movw	r3, #4536	; 0x11b8
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801f09e:	4620      	mov	r0, r4
 801f0a0:	f7f1 fd14 	bl	8010acc <mbedtls_debug_print_msg>
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f0a4:	2231      	movs	r2, #49	; 0x31
 801f0a6:	e791      	b.n	801efcc <mbedtls_ssl_parse_certificate+0xc8>
        if( ssl->in_msg[i] != 0 )
 801f0a8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801f0aa:	f811 2008 	ldrb.w	r2, [r1, r8]
 801f0ae:	b122      	cbz	r2, 801f0ba <mbedtls_ssl_parse_certificate+0x1b6>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f0b0:	4b29      	ldr	r3, [pc, #164]	; (801f158 <mbedtls_ssl_parse_certificate+0x254>)
 801f0b2:	9300      	str	r3, [sp, #0]
 801f0b4:	f241 137d 	movw	r3, #4477	; 0x117d
 801f0b8:	e782      	b.n	801efc0 <mbedtls_ssl_parse_certificate+0xbc>
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801f0ba:	eb01 0008 	add.w	r0, r1, r8
 801f0be:	7845      	ldrb	r5, [r0, #1]
            | (unsigned int) ssl->in_msg[i + 2];
 801f0c0:	7882      	ldrb	r2, [r0, #2]
        n = ( (unsigned int) ssl->in_msg[i + 1] << 8 )
 801f0c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
        if( n < 128 || i + n > ssl->in_hslen )
 801f0c6:	2a7f      	cmp	r2, #127	; 0x7f
        i += 3;
 801f0c8:	f108 0003 	add.w	r0, r8, #3
        if( n < 128 || i + n > ssl->in_hslen )
 801f0cc:	d903      	bls.n	801f0d6 <mbedtls_ssl_parse_certificate+0x1d2>
 801f0ce:	eb02 0800 	add.w	r8, r2, r0
 801f0d2:	4598      	cmp	r8, r3
 801f0d4:	d904      	bls.n	801f0e0 <mbedtls_ssl_parse_certificate+0x1dc>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate message" ) );
 801f0d6:	4b20      	ldr	r3, [pc, #128]	; (801f158 <mbedtls_ssl_parse_certificate+0x254>)
 801f0d8:	9300      	str	r3, [sp, #0]
 801f0da:	f241 1389 	movw	r3, #4489	; 0x1189
 801f0de:	e76f      	b.n	801efc0 <mbedtls_ssl_parse_certificate+0xbc>
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801f0e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f0e2:	4401      	add	r1, r0
 801f0e4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801f0e6:	f002 f8f1 	bl	80212cc <mbedtls_x509_crt_parse_der>
        switch( ret )
 801f0ea:	f510 5f16 	cmn.w	r0, #9600	; 0x2580
        ret = mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert,
 801f0ee:	4605      	mov	r5, r0
        switch( ret )
 801f0f0:	d014      	beq.n	801f11c <mbedtls_ssl_parse_certificate+0x218>
 801f0f2:	4548      	cmp	r0, r9
 801f0f4:	da0f      	bge.n	801f116 <mbedtls_ssl_parse_certificate+0x212>
 801f0f6:	f510 5f22 	cmn.w	r0, #10368	; 0x2880
 801f0fa:	d011      	beq.n	801f120 <mbedtls_ssl_parse_certificate+0x21c>
 801f0fc:	4550      	cmp	r0, sl
 801f0fe:	d0aa      	beq.n	801f056 <mbedtls_ssl_parse_certificate+0x152>
            alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801f100:	222a      	movs	r2, #42	; 0x2a
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL, alert );
 801f102:	2102      	movs	r1, #2
 801f104:	4620      	mov	r0, r4
 801f106:	f7fe f977 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
            MBEDTLS_SSL_DEBUG_RET( 1, " mbedtls_x509_crt_parse_der", ret );
 801f10a:	4b1c      	ldr	r3, [pc, #112]	; (801f17c <mbedtls_ssl_parse_certificate+0x278>)
 801f10c:	9300      	str	r3, [sp, #0]
 801f10e:	9501      	str	r5, [sp, #4]
 801f110:	f241 13a5 	movw	r3, #4517	; 0x11a5
 801f114:	e72c      	b.n	801ef70 <mbedtls_ssl_parse_certificate+0x6c>
        switch( ret )
 801f116:	2800      	cmp	r0, #0
 801f118:	d09d      	beq.n	801f056 <mbedtls_ssl_parse_certificate+0x152>
 801f11a:	e7f1      	b.n	801f100 <mbedtls_ssl_parse_certificate+0x1fc>
            alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f11c:	222b      	movs	r2, #43	; 0x2b
 801f11e:	e7f0      	b.n	801f102 <mbedtls_ssl_parse_certificate+0x1fe>
        switch( ret )
 801f120:	2250      	movs	r2, #80	; 0x50
 801f122:	e7ee      	b.n	801f102 <mbedtls_ssl_parse_certificate+0x1fe>
            ssl->session_negotiate->peer_cert->raw.len ||
 801f124:	6b61      	ldr	r1, [r4, #52]	; 0x34
        if( ssl->session->peer_cert->raw.len !=
 801f126:	685a      	ldr	r2, [r3, #4]
            ssl->session_negotiate->peer_cert->raw.len ||
 801f128:	6e49      	ldr	r1, [r1, #100]	; 0x64
        if( ssl->session->peer_cert->raw.len !=
 801f12a:	6848      	ldr	r0, [r1, #4]
 801f12c:	4282      	cmp	r2, r0
 801f12e:	d104      	bne.n	801f13a <mbedtls_ssl_parse_certificate+0x236>
            memcmp( ssl->session->peer_cert->raw.p,
 801f130:	6889      	ldr	r1, [r1, #8]
 801f132:	6898      	ldr	r0, [r3, #8]
 801f134:	f003 f94a 	bl	80223cc <memcmp>
            ssl->session_negotiate->peer_cert->raw.len ||
 801f138:	b340      	cbz	r0, 801f18c <mbedtls_ssl_parse_certificate+0x288>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "server cert changed during renegotiation" ) );
 801f13a:	4b11      	ldr	r3, [pc, #68]	; (801f180 <mbedtls_ssl_parse_certificate+0x27c>)
 801f13c:	9300      	str	r3, [sp, #0]
 801f13e:	4a02      	ldr	r2, [pc, #8]	; (801f148 <mbedtls_ssl_parse_certificate+0x244>)
 801f140:	f241 13c4 	movw	r3, #4548	; 0x11c4
 801f144:	2101      	movs	r1, #1
 801f146:	e7aa      	b.n	801f09e <mbedtls_ssl_parse_certificate+0x19a>
 801f148:	08031ee5 	.word	0x08031ee5
 801f14c:	08032dbc 	.word	0x08032dbc
 801f150:	08032dd1 	.word	0x08032dd1
 801f154:	080313d6 	.word	0x080313d6
 801f158:	08032deb 	.word	0x08032deb
 801f15c:	ffff8900 	.word	0xffff8900
 801f160:	ffff8600 	.word	0xffff8600
 801f164:	200005a4 	.word	0x200005a4
 801f168:	200005a0 	.word	0x200005a0
 801f16c:	08032c07 	.word	0x08032c07
 801f170:	ffff8100 	.word	0xffff8100
 801f174:	08032e1f 	.word	0x08032e1f
 801f178:	08032e30 	.word	0x08032e30
 801f17c:	08032e03 	.word	0x08032e03
 801f180:	08032e55 	.word	0x08032e55
 801f184:	ffffda81 	.word	0xffffda81
 801f188:	ffffd9d2 	.word	0xffffd9d2
    if( authmode != MBEDTLS_SSL_VERIFY_NONE )
 801f18c:	2e00      	cmp	r6, #0
 801f18e:	d06d      	beq.n	801f26c <mbedtls_ssl_parse_certificate+0x368>
        if( ssl->handshake->sni_ca_chain != NULL )
 801f190:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f192:	f8d3 9148 	ldr.w	r9, [r3, #328]	; 0x148
 801f196:	f1b9 0f00 	cmp.w	r9, #0
 801f19a:	d071      	beq.n	801f280 <mbedtls_ssl_parse_certificate+0x37c>
            ca_crl   = ssl->handshake->sni_ca_crl;
 801f19c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
        ret = mbedtls_x509_crt_verify_with_profile(
 801f1a0:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801f1a4:	9303      	str	r3, [sp, #12]
                                ssl->session_negotiate->peer_cert,
 801f1a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
        ret = mbedtls_x509_crt_verify_with_profile(
 801f1a8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 801f1ac:	9302      	str	r3, [sp, #8]
 801f1ae:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801f1b2:	9301      	str	r3, [sp, #4]
 801f1b4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 801f1b8:	9300      	str	r3, [sp, #0]
 801f1ba:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 801f1be:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f1c0:	4649      	mov	r1, r9
 801f1c2:	f001 ff35 	bl	8021030 <mbedtls_x509_crt_verify_with_profile>
        if( ret != 0 )
 801f1c6:	4605      	mov	r5, r0
 801f1c8:	b148      	cbz	r0, 801f1de <mbedtls_ssl_parse_certificate+0x2da>
            MBEDTLS_SSL_DEBUG_RET( 1, "x509_verify_cert", ret );
 801f1ca:	4b58      	ldr	r3, [pc, #352]	; (801f32c <mbedtls_ssl_parse_certificate+0x428>)
 801f1cc:	9001      	str	r0, [sp, #4]
 801f1ce:	9300      	str	r3, [sp, #0]
 801f1d0:	4a57      	ldr	r2, [pc, #348]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
 801f1d2:	f241 13eb 	movw	r3, #4587	; 0x11eb
 801f1d6:	2101      	movs	r1, #1
 801f1d8:	4620      	mov	r0, r4
 801f1da:	f7f1 fca7 	bl	8010b2c <mbedtls_debug_print_ret>
            const mbedtls_pk_context *pk = &ssl->session_negotiate->peer_cert->pk;
 801f1de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f1e0:	f8d3 8064 	ldr.w	r8, [r3, #100]	; 0x64
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801f1e4:	2102      	movs	r1, #2
 801f1e6:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
 801f1ea:	f7f6 fc75 	bl	8015ad8 <mbedtls_pk_can_do>
 801f1ee:	b1c0      	cbz	r0, 801f222 <mbedtls_ssl_parse_certificate+0x31e>
                mbedtls_ssl_check_curve( ssl, mbedtls_pk_ec( *pk )->grp.id ) != 0 )
 801f1f0:	f8d8 30c0 	ldr.w	r3, [r8, #192]	; 0xc0
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	7819      	ldrb	r1, [r3, #0]
 801f1f8:	f7ff fe2e 	bl	801ee58 <mbedtls_ssl_check_curve>
            if( mbedtls_pk_can_do( pk, MBEDTLS_PK_ECKEY ) &&
 801f1fc:	b188      	cbz	r0, 801f222 <mbedtls_ssl_parse_certificate+0x31e>
 801f1fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
                ssl->session_negotiate->verify_result |= MBEDTLS_X509_BADCERT_BAD_KEY;
 801f200:	6e93      	ldr	r3, [r2, #104]	; 0x68
 801f202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f206:	6693      	str	r3, [r2, #104]	; 0x68
                MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (EC key curve)" ) );
 801f208:	4b4a      	ldr	r3, [pc, #296]	; (801f334 <mbedtls_ssl_parse_certificate+0x430>)
 801f20a:	9300      	str	r3, [sp, #0]
 801f20c:	4a48      	ldr	r2, [pc, #288]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
 801f20e:	f241 13fc 	movw	r3, #4604	; 0x11fc
 801f212:	2101      	movs	r1, #1
 801f214:	4620      	mov	r0, r4
 801f216:	f7f1 fc59 	bl	8010acc <mbedtls_debug_print_msg>
                    ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f21a:	4b47      	ldr	r3, [pc, #284]	; (801f338 <mbedtls_ssl_parse_certificate+0x434>)
 801f21c:	2d00      	cmp	r5, #0
 801f21e:	bf08      	it	eq
 801f220:	461d      	moveq	r5, r3
                                 ! ssl->conf->endpoint,
 801f222:	6823      	ldr	r3, [r4, #0]
        if( mbedtls_ssl_check_cert_usage( ssl->session_negotiate->peer_cert,
 801f224:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f226:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 801f22a:	43d2      	mvns	r2, r2
 801f22c:	f100 0368 	add.w	r3, r0, #104	; 0x68
 801f230:	f002 0201 	and.w	r2, r2, #1
 801f234:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f236:	4639      	mov	r1, r7
 801f238:	f7ff fe2a 	bl	801ee90 <mbedtls_ssl_check_cert_usage>
 801f23c:	bb18      	cbnz	r0, 801f286 <mbedtls_ssl_parse_certificate+0x382>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f23e:	2e01      	cmp	r6, #1
 801f240:	d133      	bne.n	801f2aa <mbedtls_ssl_parse_certificate+0x3a6>
 801f242:	f515 5f1c 	cmn.w	r5, #9984	; 0x2700
 801f246:	d002      	beq.n	801f24e <mbedtls_ssl_parse_certificate+0x34a>
            ( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED ||
 801f248:	f515 4ff4 	cmn.w	r5, #31232	; 0x7a00
 801f24c:	d12d      	bne.n	801f2aa <mbedtls_ssl_parse_certificate+0x3a6>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 801f24e:	2500      	movs	r5, #0
        if( ssl->session_negotiate->verify_result != 0 )
 801f250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f254:	2b00      	cmp	r3, #0
 801f256:	d05b      	beq.n	801f310 <mbedtls_ssl_parse_certificate+0x40c>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "! Certificate verification flags %x",
 801f258:	9301      	str	r3, [sp, #4]
 801f25a:	4b38      	ldr	r3, [pc, #224]	; (801f33c <mbedtls_ssl_parse_certificate+0x438>)
 801f25c:	9300      	str	r3, [sp, #0]
 801f25e:	4a34      	ldr	r2, [pc, #208]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
 801f260:	f241 2342 	movw	r3, #4674	; 0x1242
 801f264:	2103      	movs	r1, #3
 801f266:	4620      	mov	r0, r4
 801f268:	f7f1 fc30 	bl	8010acc <mbedtls_debug_print_msg>
    MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse certificate" ) );
 801f26c:	4b34      	ldr	r3, [pc, #208]	; (801f340 <mbedtls_ssl_parse_certificate+0x43c>)
 801f26e:	9300      	str	r3, [sp, #0]
 801f270:	4a2f      	ldr	r2, [pc, #188]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
 801f272:	f241 234c 	movw	r3, #4684	; 0x124c
 801f276:	2102      	movs	r1, #2
 801f278:	4620      	mov	r0, r4
 801f27a:	f7f1 fc27 	bl	8010acc <mbedtls_debug_print_msg>
    return( ret );
 801f27e:	e669      	b.n	801ef54 <mbedtls_ssl_parse_certificate+0x50>
            ca_crl   = ssl->conf->ca_crl;
 801f280:	e9d8 9211 	ldrd	r9, r2, [r8, #68]	; 0x44
 801f284:	e78c      	b.n	801f1a0 <mbedtls_ssl_parse_certificate+0x29c>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "bad certificate (usage extensions)" ) );
 801f286:	4b2f      	ldr	r3, [pc, #188]	; (801f344 <mbedtls_ssl_parse_certificate+0x440>)
 801f288:	9300      	str	r3, [sp, #0]
 801f28a:	4a29      	ldr	r2, [pc, #164]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
 801f28c:	f241 2308 	movw	r3, #4616	; 0x1208
 801f290:	2101      	movs	r1, #1
 801f292:	4620      	mov	r0, r4
 801f294:	f7f1 fc1a 	bl	8010acc <mbedtls_debug_print_msg>
            if( ret == 0 )
 801f298:	2d00      	cmp	r5, #0
 801f29a:	d1d0      	bne.n	801f23e <mbedtls_ssl_parse_certificate+0x33a>
        if( authmode == MBEDTLS_SSL_VERIFY_OPTIONAL &&
 801f29c:	2e01      	cmp	r6, #1
 801f29e:	d0d6      	beq.n	801f24e <mbedtls_ssl_parse_certificate+0x34a>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f2a0:	f1b9 0f00 	cmp.w	r9, #0
 801f2a4:	d03e      	beq.n	801f324 <mbedtls_ssl_parse_certificate+0x420>
                ret = MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE;
 801f2a6:	4d24      	ldr	r5, [pc, #144]	; (801f338 <mbedtls_ssl_parse_certificate+0x434>)
 801f2a8:	e00e      	b.n	801f2c8 <mbedtls_ssl_parse_certificate+0x3c4>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f2aa:	f1b9 0f00 	cmp.w	r9, #0
 801f2ae:	d122      	bne.n	801f2f6 <mbedtls_ssl_parse_certificate+0x3f2>
 801f2b0:	2e02      	cmp	r6, #2
 801f2b2:	d120      	bne.n	801f2f6 <mbedtls_ssl_parse_certificate+0x3f2>
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f2b4:	4b24      	ldr	r3, [pc, #144]	; (801f348 <mbedtls_ssl_parse_certificate+0x444>)
 801f2b6:	9300      	str	r3, [sp, #0]
 801f2b8:	4a1d      	ldr	r2, [pc, #116]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
            ret = MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED;
 801f2ba:	4d24      	ldr	r5, [pc, #144]	; (801f34c <mbedtls_ssl_parse_certificate+0x448>)
            MBEDTLS_SSL_DEBUG_MSG( 1, ( "got no CA chain" ) );
 801f2bc:	f241 231c 	movw	r3, #4636	; 0x121c
 801f2c0:	2101      	movs	r1, #1
 801f2c2:	4620      	mov	r0, r4
 801f2c4:	f7f1 fc02 	bl	8010acc <mbedtls_debug_print_msg>
            if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_OTHER )
 801f2c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801f2cc:	05df      	lsls	r7, r3, #23
 801f2ce:	d415      	bmi.n	801f2fc <mbedtls_ssl_parse_certificate+0x3f8>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_CN_MISMATCH )
 801f2d0:	075e      	lsls	r6, r3, #29
 801f2d2:	d415      	bmi.n	801f300 <mbedtls_ssl_parse_certificate+0x3fc>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_BAD_KEY )
 801f2d4:	f413 3fdc 	tst.w	r3, #112640	; 0x1b800
 801f2d8:	d114      	bne.n	801f304 <mbedtls_ssl_parse_certificate+0x400>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_EXPIRED )
 801f2da:	07d8      	lsls	r0, r3, #31
 801f2dc:	d414      	bmi.n	801f308 <mbedtls_ssl_parse_certificate+0x404>
            else if( ssl->session_negotiate->verify_result & MBEDTLS_X509_BADCERT_REVOKED )
 801f2de:	0799      	lsls	r1, r3, #30
 801f2e0:	d414      	bmi.n	801f30c <mbedtls_ssl_parse_certificate+0x408>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN;
 801f2e2:	f013 0f08 	tst.w	r3, #8
 801f2e6:	bf14      	ite	ne
 801f2e8:	2230      	movne	r2, #48	; 0x30
 801f2ea:	222e      	moveq	r2, #46	; 0x2e
            mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,
 801f2ec:	2102      	movs	r1, #2
 801f2ee:	4620      	mov	r0, r4
 801f2f0:	f7fe f882 	bl	801d3f8 <mbedtls_ssl_send_alert_message>
 801f2f4:	e7ac      	b.n	801f250 <mbedtls_ssl_parse_certificate+0x34c>
        if( ret != 0 )
 801f2f6:	2d00      	cmp	r5, #0
 801f2f8:	d1e6      	bne.n	801f2c8 <mbedtls_ssl_parse_certificate+0x3c4>
 801f2fa:	e7a8      	b.n	801f24e <mbedtls_ssl_parse_certificate+0x34a>
                alert = MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED;
 801f2fc:	2231      	movs	r2, #49	; 0x31
 801f2fe:	e7f5      	b.n	801f2ec <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_BAD_CERT;
 801f300:	222a      	movs	r2, #42	; 0x2a
 801f302:	e7f3      	b.n	801f2ec <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT;
 801f304:	222b      	movs	r2, #43	; 0x2b
 801f306:	e7f1      	b.n	801f2ec <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED;
 801f308:	222d      	movs	r2, #45	; 0x2d
 801f30a:	e7ef      	b.n	801f2ec <mbedtls_ssl_parse_certificate+0x3e8>
                alert = MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED;
 801f30c:	222c      	movs	r2, #44	; 0x2c
 801f30e:	e7ed      	b.n	801f2ec <mbedtls_ssl_parse_certificate+0x3e8>
            MBEDTLS_SSL_DEBUG_MSG( 3, ( "Certificate verification flags clear" ) );
 801f310:	4b0f      	ldr	r3, [pc, #60]	; (801f350 <mbedtls_ssl_parse_certificate+0x44c>)
 801f312:	9300      	str	r3, [sp, #0]
 801f314:	4a06      	ldr	r2, [pc, #24]	; (801f330 <mbedtls_ssl_parse_certificate+0x42c>)
 801f316:	f241 2347 	movw	r3, #4679	; 0x1247
 801f31a:	2103      	movs	r1, #3
 801f31c:	4620      	mov	r0, r4
 801f31e:	f7f1 fbd5 	bl	8010acc <mbedtls_debug_print_msg>
 801f322:	e7a3      	b.n	801f26c <mbedtls_ssl_parse_certificate+0x368>
        if( ca_chain == NULL && authmode == MBEDTLS_SSL_VERIFY_REQUIRED )
 801f324:	2e02      	cmp	r6, #2
 801f326:	d1be      	bne.n	801f2a6 <mbedtls_ssl_parse_certificate+0x3a2>
 801f328:	e7c4      	b.n	801f2b4 <mbedtls_ssl_parse_certificate+0x3b0>
 801f32a:	bf00      	nop
 801f32c:	08032e7e 	.word	0x08032e7e
 801f330:	08031ee5 	.word	0x08031ee5
 801f334:	08032e8f 	.word	0x08032e8f
 801f338:	ffff8600 	.word	0xffff8600
 801f33c:	08032ee1 	.word	0x08032ee1
 801f340:	08032f2a 	.word	0x08032f2a
 801f344:	08032eae 	.word	0x08032eae
 801f348:	08032ed1 	.word	0x08032ed1
 801f34c:	ffff8980 	.word	0xffff8980
 801f350:	08032f05 	.word	0x08032f05

0801f354 <mbedtls_ssl_write_version>:
        ver[0] = (unsigned char) major;
 801f354:	7018      	strb	r0, [r3, #0]
        ver[1] = (unsigned char) minor;
 801f356:	7059      	strb	r1, [r3, #1]
}
 801f358:	4770      	bx	lr

0801f35a <mbedtls_ssl_read_version>:
        *major = ver[0];
 801f35a:	781a      	ldrb	r2, [r3, #0]
 801f35c:	6002      	str	r2, [r0, #0]
        *minor = ver[1];
 801f35e:	785b      	ldrb	r3, [r3, #1]
 801f360:	600b      	str	r3, [r1, #0]
    }
}
 801f362:	4770      	bx	lr

0801f364 <x509_parse_int>:
    }
}

static int x509_parse_int( unsigned char **p, size_t n, int *res )
{
    *res = 0;
 801f364:	2300      	movs	r3, #0
{
 801f366:	b570      	push	{r4, r5, r6, lr}
    *res = 0;
 801f368:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
    {
        if( ( **p < '0') || ( **p > '9' ) )
            return ( MBEDTLS_ERR_X509_INVALID_DATE );

        *res *= 10;
 801f36a:	260a      	movs	r6, #10
        if( ( **p < '0') || ( **p > '9' ) )
 801f36c:	6805      	ldr	r5, [r0, #0]
 801f36e:	782b      	ldrb	r3, [r5, #0]
 801f370:	3b30      	subs	r3, #48	; 0x30
 801f372:	2b09      	cmp	r3, #9
 801f374:	d80d      	bhi.n	801f392 <x509_parse_int+0x2e>
        *res *= 10;
 801f376:	6813      	ldr	r3, [r2, #0]
 801f378:	fb06 f403 	mul.w	r4, r6, r3
        *res += ( *(*p)++ - '0' );
 801f37c:	1c6b      	adds	r3, r5, #1
        *res *= 10;
 801f37e:	6014      	str	r4, [r2, #0]
        *res += ( *(*p)++ - '0' );
 801f380:	6003      	str	r3, [r0, #0]
 801f382:	782b      	ldrb	r3, [r5, #0]
 801f384:	3b30      	subs	r3, #48	; 0x30
 801f386:	4423      	add	r3, r4
    for( ; n > 0; --n )
 801f388:	3901      	subs	r1, #1
        *res += ( *(*p)++ - '0' );
 801f38a:	6013      	str	r3, [r2, #0]
    for( ; n > 0; --n )
 801f38c:	d1ee      	bne.n	801f36c <x509_parse_int+0x8>
    }

    return( 0 );
 801f38e:	4608      	mov	r0, r1
}
 801f390:	bd70      	pop	{r4, r5, r6, pc}
            return ( MBEDTLS_ERR_X509_INVALID_DATE );
 801f392:	4801      	ldr	r0, [pc, #4]	; (801f398 <x509_parse_int+0x34>)
 801f394:	e7fc      	b.n	801f390 <x509_parse_int+0x2c>
 801f396:	bf00      	nop
 801f398:	ffffdc00 	.word	0xffffdc00

0801f39c <x509_check_time>:
/*
 * Return 0 if before <= after, 1 otherwise
 */
static int x509_check_time( const mbedtls_x509_time *before, const mbedtls_x509_time *after )
{
    if( before->year  > after->year )
 801f39c:	6802      	ldr	r2, [r0, #0]
 801f39e:	680b      	ldr	r3, [r1, #0]
 801f3a0:	429a      	cmp	r2, r3
{
 801f3a2:	b530      	push	{r4, r5, lr}
    if( before->year  > after->year )
 801f3a4:	dc29      	bgt.n	801f3fa <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f3a6:	d12a      	bne.n	801f3fe <x509_check_time+0x62>
        before->mon   > after->mon )
 801f3a8:	6842      	ldr	r2, [r0, #4]
 801f3aa:	684b      	ldr	r3, [r1, #4]
    if( before->year == after->year &&
 801f3ac:	429a      	cmp	r2, r3
 801f3ae:	dc24      	bgt.n	801f3fa <x509_check_time+0x5e>
        return( 1 );

    if( before->year == after->year &&
 801f3b0:	d125      	bne.n	801f3fe <x509_check_time+0x62>
        before->mon  == after->mon  &&
 801f3b2:	6882      	ldr	r2, [r0, #8]
 801f3b4:	688b      	ldr	r3, [r1, #8]
 801f3b6:	429a      	cmp	r2, r3
 801f3b8:	dc1f      	bgt.n	801f3fa <x509_check_time+0x5e>
        before->day   > after->day )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f3ba:	d103      	bne.n	801f3c4 <x509_check_time+0x28>
        before->day  == after->day  &&
 801f3bc:	68c5      	ldr	r5, [r0, #12]
 801f3be:	68cc      	ldr	r4, [r1, #12]
 801f3c0:	42a5      	cmp	r5, r4
 801f3c2:	dc1a      	bgt.n	801f3fa <x509_check_time+0x5e>
        before->hour  > after->hour )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f3c4:	429a      	cmp	r2, r3
 801f3c6:	d11a      	bne.n	801f3fe <x509_check_time+0x62>
        before->day  == after->day  &&
 801f3c8:	68c5      	ldr	r5, [r0, #12]
 801f3ca:	68cc      	ldr	r4, [r1, #12]
 801f3cc:	42a5      	cmp	r5, r4
 801f3ce:	d103      	bne.n	801f3d8 <x509_check_time+0x3c>
        before->hour == after->hour &&
 801f3d0:	6905      	ldr	r5, [r0, #16]
 801f3d2:	690c      	ldr	r4, [r1, #16]
 801f3d4:	42a5      	cmp	r5, r4
 801f3d6:	dc10      	bgt.n	801f3fa <x509_check_time+0x5e>
        before->min   > after->min  )
        return( 1 );

    if( before->year == after->year &&
        before->mon  == after->mon  &&
 801f3d8:	429a      	cmp	r2, r3
 801f3da:	d110      	bne.n	801f3fe <x509_check_time+0x62>
        before->day  == after->day  &&
 801f3dc:	68c2      	ldr	r2, [r0, #12]
 801f3de:	68cb      	ldr	r3, [r1, #12]
 801f3e0:	429a      	cmp	r2, r3
 801f3e2:	d10c      	bne.n	801f3fe <x509_check_time+0x62>
        before->hour == after->hour &&
 801f3e4:	6902      	ldr	r2, [r0, #16]
 801f3e6:	690b      	ldr	r3, [r1, #16]
 801f3e8:	429a      	cmp	r2, r3
 801f3ea:	d108      	bne.n	801f3fe <x509_check_time+0x62>
        before->min  == after->min  &&
 801f3ec:	6940      	ldr	r0, [r0, #20]
 801f3ee:	694b      	ldr	r3, [r1, #20]
 801f3f0:	4298      	cmp	r0, r3
 801f3f2:	bfd4      	ite	le
 801f3f4:	2000      	movle	r0, #0
 801f3f6:	2001      	movgt	r0, #1
        before->sec   > after->sec  )
        return( 1 );

    return( 0 );
}
 801f3f8:	bd30      	pop	{r4, r5, pc}
        return( 1 );
 801f3fa:	2001      	movs	r0, #1
 801f3fc:	e7fc      	b.n	801f3f8 <x509_check_time+0x5c>
    return( 0 );
 801f3fe:	2000      	movs	r0, #0
 801f400:	e7fa      	b.n	801f3f8 <x509_check_time+0x5c>

0801f402 <x509_get_current_time>:
{
 801f402:	b513      	push	{r0, r1, r4, lr}
 801f404:	4604      	mov	r4, r0
    tt = mbedtls_time( NULL );
 801f406:	2000      	movs	r0, #0
 801f408:	f7e3 ff14 	bl	8003234 <time>
 801f40c:	e9cd 0100 	strd	r0, r1, [sp]
    lt = gmtime( &tt );
 801f410:	4668      	mov	r0, sp
 801f412:	f002 fed1 	bl	80221b8 <gmtime>
    if( lt == NULL )
 801f416:	b188      	cbz	r0, 801f43c <x509_get_current_time+0x3a>
        now->year = lt->tm_year + 1900;
 801f418:	6943      	ldr	r3, [r0, #20]
 801f41a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f41e:	6023      	str	r3, [r4, #0]
        now->mon  = lt->tm_mon  + 1;
 801f420:	6903      	ldr	r3, [r0, #16]
 801f422:	3301      	adds	r3, #1
 801f424:	6063      	str	r3, [r4, #4]
        now->day  = lt->tm_mday;
 801f426:	68c3      	ldr	r3, [r0, #12]
 801f428:	60a3      	str	r3, [r4, #8]
        now->hour = lt->tm_hour;
 801f42a:	6883      	ldr	r3, [r0, #8]
 801f42c:	60e3      	str	r3, [r4, #12]
        now->min  = lt->tm_min;
 801f42e:	6843      	ldr	r3, [r0, #4]
 801f430:	6123      	str	r3, [r4, #16]
        now->sec  = lt->tm_sec;
 801f432:	6803      	ldr	r3, [r0, #0]
 801f434:	6163      	str	r3, [r4, #20]
    int ret = 0;
 801f436:	2000      	movs	r0, #0
}
 801f438:	b002      	add	sp, #8
 801f43a:	bd10      	pop	{r4, pc}
        ret = -1;
 801f43c:	f04f 30ff 	mov.w	r0, #4294967295
    return( ret );
 801f440:	e7fa      	b.n	801f438 <x509_get_current_time+0x36>
	...

0801f444 <mbedtls_x509_get_serial>:
{
 801f444:	b538      	push	{r3, r4, r5, lr}
    if( ( end - *p ) < 1 )
 801f446:	6803      	ldr	r3, [r0, #0]
{
 801f448:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f44a:	1aca      	subs	r2, r1, r3
 801f44c:	2a00      	cmp	r2, #0
{
 801f44e:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f450:	dd16      	ble.n	801f480 <mbedtls_x509_get_serial+0x3c>
    if( **p != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | MBEDTLS_ASN1_PRIMITIVE | 2 ) &&
 801f452:	781a      	ldrb	r2, [r3, #0]
 801f454:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801f458:	2a02      	cmp	r2, #2
 801f45a:	d113      	bne.n	801f484 <mbedtls_x509_get_serial+0x40>
    serial->tag = *(*p)++;
 801f45c:	1c5a      	adds	r2, r3, #1
 801f45e:	6002      	str	r2, [r0, #0]
 801f460:	462a      	mov	r2, r5
 801f462:	781b      	ldrb	r3, [r3, #0]
 801f464:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &serial->len ) ) != 0 )
 801f468:	f7ee fdfe 	bl	800e068 <mbedtls_asn1_get_len>
 801f46c:	b110      	cbz	r0, 801f474 <mbedtls_x509_get_serial+0x30>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL + ret );
 801f46e:	f5a0 500a 	sub.w	r0, r0, #8832	; 0x2280
}
 801f472:	bd38      	pop	{r3, r4, r5, pc}
    serial->p = *p;
 801f474:	6823      	ldr	r3, [r4, #0]
    *p += serial->len;
 801f476:	686a      	ldr	r2, [r5, #4]
    serial->p = *p;
 801f478:	60ab      	str	r3, [r5, #8]
    *p += serial->len;
 801f47a:	4413      	add	r3, r2
 801f47c:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f47e:	e7f8      	b.n	801f472 <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f480:	4801      	ldr	r0, [pc, #4]	; (801f488 <mbedtls_x509_get_serial+0x44>)
 801f482:	e7f6      	b.n	801f472 <mbedtls_x509_get_serial+0x2e>
        return( MBEDTLS_ERR_X509_INVALID_SERIAL +
 801f484:	4801      	ldr	r0, [pc, #4]	; (801f48c <mbedtls_x509_get_serial+0x48>)
 801f486:	e7f4      	b.n	801f472 <mbedtls_x509_get_serial+0x2e>
 801f488:	ffffdd20 	.word	0xffffdd20
 801f48c:	ffffdd1e 	.word	0xffffdd1e

0801f490 <mbedtls_x509_get_alg_null>:
{
 801f490:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg_null( p, end, alg ) ) != 0 )
 801f492:	f7ee ff57 	bl	800e344 <mbedtls_asn1_get_alg_null>
 801f496:	b108      	cbz	r0, 801f49c <mbedtls_x509_get_alg_null+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f498:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f49c:	bd08      	pop	{r3, pc}

0801f49e <mbedtls_x509_get_alg>:
{
 801f49e:	b508      	push	{r3, lr}
    if( ( ret = mbedtls_asn1_get_alg( p, end, alg, params ) ) != 0 )
 801f4a0:	f7ee ff02 	bl	800e2a8 <mbedtls_asn1_get_alg>
 801f4a4:	b108      	cbz	r0, 801f4aa <mbedtls_x509_get_alg+0xc>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f4a6:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
}
 801f4aa:	bd08      	pop	{r3, pc}

0801f4ac <mbedtls_x509_get_rsassa_pss_params>:
{
 801f4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f4b0:	461d      	mov	r5, r3
    *md_alg = MBEDTLS_MD_SHA1;
 801f4b2:	2304      	movs	r3, #4
 801f4b4:	700b      	strb	r3, [r1, #0]
    *mgf_md = MBEDTLS_MD_SHA1;
 801f4b6:	7013      	strb	r3, [r2, #0]
    *salt_len = 20;
 801f4b8:	2314      	movs	r3, #20
 801f4ba:	602b      	str	r3, [r5, #0]
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f4bc:	6803      	ldr	r3, [r0, #0]
 801f4be:	2b30      	cmp	r3, #48	; 0x30
{
 801f4c0:	b08e      	sub	sp, #56	; 0x38
 801f4c2:	4688      	mov	r8, r1
 801f4c4:	4616      	mov	r6, r2
    if( params->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f4c6:	d14e      	bne.n	801f566 <mbedtls_x509_get_rsassa_pss_params+0xba>
    p = (unsigned char *) params->p;
 801f4c8:	6883      	ldr	r3, [r0, #8]
    end = p + params->len;
 801f4ca:	6844      	ldr	r4, [r0, #4]
    p = (unsigned char *) params->p;
 801f4cc:	9301      	str	r3, [sp, #4]
    end = p + params->len;
 801f4ce:	441c      	add	r4, r3
    if( p == end )
 801f4d0:	42a3      	cmp	r3, r4
 801f4d2:	d103      	bne.n	801f4dc <mbedtls_x509_get_rsassa_pss_params+0x30>
        return( 0 );
 801f4d4:	2000      	movs	r0, #0
}
 801f4d6:	b00e      	add	sp, #56	; 0x38
 801f4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f4dc:	23a0      	movs	r3, #160	; 0xa0
 801f4de:	aa02      	add	r2, sp, #8
 801f4e0:	4621      	mov	r1, r4
 801f4e2:	a801      	add	r0, sp, #4
 801f4e4:	f7ee fe08 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f4e8:	b9b0      	cbnz	r0, 801f518 <mbedtls_x509_get_rsassa_pss_params+0x6c>
        end2 = p + len;
 801f4ea:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f4ee:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg_null( &p, end2, &alg_id ) ) != 0 )
 801f4f0:	aa05      	add	r2, sp, #20
 801f4f2:	4639      	mov	r1, r7
 801f4f4:	a801      	add	r0, sp, #4
 801f4f6:	f7ff ffcb 	bl	801f490 <mbedtls_x509_get_alg_null>
 801f4fa:	2800      	cmp	r0, #0
 801f4fc:	d1eb      	bne.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( ( ret = mbedtls_oid_get_md_alg( &alg_id, md_alg ) ) != 0 )
 801f4fe:	4641      	mov	r1, r8
 801f500:	a805      	add	r0, sp, #20
 801f502:	f7f6 f897 	bl	8015634 <mbedtls_oid_get_md_alg>
 801f506:	b110      	cbz	r0, 801f50e <mbedtls_x509_get_rsassa_pss_params+0x62>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f508:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
 801f50c:	e7e3      	b.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
 801f50e:	9b01      	ldr	r3, [sp, #4]
 801f510:	42bb      	cmp	r3, r7
 801f512:	d004      	beq.n	801f51e <mbedtls_x509_get_rsassa_pss_params+0x72>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f514:	4853      	ldr	r0, [pc, #332]	; (801f664 <mbedtls_x509_get_rsassa_pss_params+0x1b8>)
 801f516:	e7de      	b.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f518:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f51c:	d1f4      	bne.n	801f508 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    if( p == end )
 801f51e:	9b01      	ldr	r3, [sp, #4]
 801f520:	42a3      	cmp	r3, r4
 801f522:	d0d7      	beq.n	801f4d4 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f524:	23a1      	movs	r3, #161	; 0xa1
 801f526:	aa02      	add	r2, sp, #8
 801f528:	4621      	mov	r1, r4
 801f52a:	a801      	add	r0, sp, #4
 801f52c:	f7ee fde4 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f530:	2800      	cmp	r0, #0
 801f532:	f040 8087 	bne.w	801f644 <mbedtls_x509_get_rsassa_pss_params+0x198>
        end2 = p + len;
 801f536:	e9dd 7301 	ldrd	r7, r3, [sp, #4]
 801f53a:	441f      	add	r7, r3
        if( ( ret = mbedtls_x509_get_alg( &p, end2, &alg_id, &alg_params ) ) != 0 )
 801f53c:	aa05      	add	r2, sp, #20
 801f53e:	ab08      	add	r3, sp, #32
 801f540:	4639      	mov	r1, r7
 801f542:	a801      	add	r0, sp, #4
 801f544:	f7ff ffab 	bl	801f49e <mbedtls_x509_get_alg>
 801f548:	2800      	cmp	r0, #0
 801f54a:	d1c4      	bne.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_MGF1, &alg_id ) != 0 )
 801f54c:	9a06      	ldr	r2, [sp, #24]
 801f54e:	2a09      	cmp	r2, #9
 801f550:	f040 8086 	bne.w	801f660 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
 801f554:	9907      	ldr	r1, [sp, #28]
 801f556:	4844      	ldr	r0, [pc, #272]	; (801f668 <mbedtls_x509_get_rsassa_pss_params+0x1bc>)
 801f558:	f002 ff38 	bl	80223cc <memcmp>
 801f55c:	2800      	cmp	r0, #0
 801f55e:	d17f      	bne.n	801f660 <mbedtls_x509_get_rsassa_pss_params+0x1b4>
    if( alg->tag != ( MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) )
 801f560:	9b08      	ldr	r3, [sp, #32]
 801f562:	2b30      	cmp	r3, #48	; 0x30
 801f564:	d001      	beq.n	801f56a <mbedtls_x509_get_rsassa_pss_params+0xbe>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f566:	4841      	ldr	r0, [pc, #260]	; (801f66c <mbedtls_x509_get_rsassa_pss_params+0x1c0>)
 801f568:	e7b5      	b.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    p = (unsigned char *) alg->p;
 801f56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    end = p + alg->len;
 801f56c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    p = (unsigned char *) alg->p;
 801f56e:	9303      	str	r3, [sp, #12]
    end = p + alg->len;
 801f570:	eb03 0802 	add.w	r8, r3, r2
    if( p >= end )
 801f574:	4543      	cmp	r3, r8
 801f576:	d263      	bcs.n	801f640 <mbedtls_x509_get_rsassa_pss_params+0x194>
    md_oid.tag = *p;
 801f578:	781b      	ldrb	r3, [r3, #0]
 801f57a:	930b      	str	r3, [sp, #44]	; 0x2c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &md_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f57c:	aa0c      	add	r2, sp, #48	; 0x30
 801f57e:	2306      	movs	r3, #6
 801f580:	4641      	mov	r1, r8
 801f582:	a803      	add	r0, sp, #12
 801f584:	f7ee fdb8 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f588:	2800      	cmp	r0, #0
 801f58a:	d03e      	beq.n	801f60a <mbedtls_x509_get_rsassa_pss_params+0x15e>
        return( MBEDTLS_ERR_X509_INVALID_ALG + ret );
 801f58c:	f5a0 500c 	sub.w	r0, r0, #8960	; 0x2300
        if( ( ret = x509_get_hash_alg( &alg_params, mgf_md ) ) != 0 )
 801f590:	2800      	cmp	r0, #0
 801f592:	d1a0      	bne.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
        if( p != end2 )
 801f594:	9b01      	ldr	r3, [sp, #4]
 801f596:	42bb      	cmp	r3, r7
 801f598:	d1bc      	bne.n	801f514 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
 801f59a:	9b01      	ldr	r3, [sp, #4]
 801f59c:	42a3      	cmp	r3, r4
 801f59e:	d099      	beq.n	801f4d4 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f5a0:	23a2      	movs	r3, #162	; 0xa2
 801f5a2:	aa02      	add	r2, sp, #8
 801f5a4:	4621      	mov	r1, r4
 801f5a6:	a801      	add	r0, sp, #4
 801f5a8:	f7ee fda6 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f5ac:	2800      	cmp	r0, #0
 801f5ae:	d14d      	bne.n	801f64c <mbedtls_x509_get_rsassa_pss_params+0x1a0>
        end2 = p + len;
 801f5b0:	e9dd 6101 	ldrd	r6, r1, [sp, #4]
 801f5b4:	440e      	add	r6, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, salt_len ) ) != 0 )
 801f5b6:	462a      	mov	r2, r5
 801f5b8:	4631      	mov	r1, r6
 801f5ba:	a801      	add	r0, sp, #4
 801f5bc:	f7ee fdc8 	bl	800e150 <mbedtls_asn1_get_int>
 801f5c0:	2800      	cmp	r0, #0
 801f5c2:	d1a1      	bne.n	801f508 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
 801f5c4:	9b01      	ldr	r3, [sp, #4]
 801f5c6:	42b3      	cmp	r3, r6
 801f5c8:	d1a4      	bne.n	801f514 <mbedtls_x509_get_rsassa_pss_params+0x68>
    if( p == end )
 801f5ca:	9b01      	ldr	r3, [sp, #4]
 801f5cc:	42a3      	cmp	r3, r4
 801f5ce:	d081      	beq.n	801f4d4 <mbedtls_x509_get_rsassa_pss_params+0x28>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801f5d0:	23a3      	movs	r3, #163	; 0xa3
 801f5d2:	aa02      	add	r2, sp, #8
 801f5d4:	4621      	mov	r1, r4
 801f5d6:	a801      	add	r0, sp, #4
 801f5d8:	f7ee fd8e 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f5dc:	2800      	cmp	r0, #0
 801f5de:	d13b      	bne.n	801f658 <mbedtls_x509_get_rsassa_pss_params+0x1ac>
        end2 = p + len;
 801f5e0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
 801f5e4:	440d      	add	r5, r1
        if( ( ret = mbedtls_asn1_get_int( &p, end2, &trailer_field ) ) != 0 )
 801f5e6:	aa0b      	add	r2, sp, #44	; 0x2c
 801f5e8:	4629      	mov	r1, r5
 801f5ea:	a801      	add	r0, sp, #4
 801f5ec:	f7ee fdb0 	bl	800e150 <mbedtls_asn1_get_int>
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	d189      	bne.n	801f508 <mbedtls_x509_get_rsassa_pss_params+0x5c>
        if( p != end2 )
 801f5f4:	9b01      	ldr	r3, [sp, #4]
 801f5f6:	42ab      	cmp	r3, r5
 801f5f8:	d18c      	bne.n	801f514 <mbedtls_x509_get_rsassa_pss_params+0x68>
        if( trailer_field != 1 )
 801f5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f5fc:	2b01      	cmp	r3, #1
 801f5fe:	d129      	bne.n	801f654 <mbedtls_x509_get_rsassa_pss_params+0x1a8>
    if( p != end )
 801f600:	9b01      	ldr	r3, [sp, #4]
 801f602:	42a3      	cmp	r3, r4
 801f604:	f43f af66 	beq.w	801f4d4 <mbedtls_x509_get_rsassa_pss_params+0x28>
 801f608:	e784      	b.n	801f514 <mbedtls_x509_get_rsassa_pss_params+0x68>
    md_oid.p = p;
 801f60a:	9b03      	ldr	r3, [sp, #12]
    p += md_oid.len;
 801f60c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    md_oid.p = p;
 801f60e:	930d      	str	r3, [sp, #52]	; 0x34
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f610:	4631      	mov	r1, r6
    p += md_oid.len;
 801f612:	4413      	add	r3, r2
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f614:	a80b      	add	r0, sp, #44	; 0x2c
    p += md_oid.len;
 801f616:	9303      	str	r3, [sp, #12]
    if( ( ret = mbedtls_oid_get_md_alg( &md_oid, md_alg ) ) != 0 )
 801f618:	f7f6 f80c 	bl	8015634 <mbedtls_oid_get_md_alg>
 801f61c:	2800      	cmp	r0, #0
 801f61e:	d1b5      	bne.n	801f58c <mbedtls_x509_get_rsassa_pss_params+0xe0>
    if( p == end )
 801f620:	9b03      	ldr	r3, [sp, #12]
 801f622:	4598      	cmp	r8, r3
 801f624:	d0b6      	beq.n	801f594 <mbedtls_x509_get_rsassa_pss_params+0xe8>
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len, MBEDTLS_ASN1_NULL ) ) != 0 || len != 0 )
 801f626:	2305      	movs	r3, #5
 801f628:	aa04      	add	r2, sp, #16
 801f62a:	4641      	mov	r1, r8
 801f62c:	a803      	add	r0, sp, #12
 801f62e:	f7ee fd63 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f632:	9b04      	ldr	r3, [sp, #16]
 801f634:	4303      	orrs	r3, r0
 801f636:	d1a9      	bne.n	801f58c <mbedtls_x509_get_rsassa_pss_params+0xe0>
    if( p != end )
 801f638:	9b03      	ldr	r3, [sp, #12]
 801f63a:	4598      	cmp	r8, r3
 801f63c:	d0aa      	beq.n	801f594 <mbedtls_x509_get_rsassa_pss_params+0xe8>
 801f63e:	e769      	b.n	801f514 <mbedtls_x509_get_rsassa_pss_params+0x68>
        return( MBEDTLS_ERR_X509_INVALID_ALG +
 801f640:	480b      	ldr	r0, [pc, #44]	; (801f670 <mbedtls_x509_get_rsassa_pss_params+0x1c4>)
 801f642:	e748      	b.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f644:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f648:	d0a7      	beq.n	801f59a <mbedtls_x509_get_rsassa_pss_params+0xee>
 801f64a:	e75d      	b.n	801f508 <mbedtls_x509_get_rsassa_pss_params+0x5c>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f64c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f650:	d0bb      	beq.n	801f5ca <mbedtls_x509_get_rsassa_pss_params+0x11e>
 801f652:	e759      	b.n	801f508 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f654:	4807      	ldr	r0, [pc, #28]	; (801f674 <mbedtls_x509_get_rsassa_pss_params+0x1c8>)
 801f656:	e73e      	b.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
    else if( ret != MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801f658:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801f65c:	d0d0      	beq.n	801f600 <mbedtls_x509_get_rsassa_pss_params+0x154>
 801f65e:	e753      	b.n	801f508 <mbedtls_x509_get_rsassa_pss_params+0x5c>
            return( MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE +
 801f660:	4805      	ldr	r0, [pc, #20]	; (801f678 <mbedtls_x509_get_rsassa_pss_params+0x1cc>)
 801f662:	e738      	b.n	801f4d6 <mbedtls_x509_get_rsassa_pss_params+0x2a>
 801f664:	ffffdc9a 	.word	0xffffdc9a
 801f668:	08032f5f 	.word	0x08032f5f
 801f66c:	ffffdc9e 	.word	0xffffdc9e
 801f670:	ffffdca0 	.word	0xffffdca0
 801f674:	ffffdd00 	.word	0xffffdd00
 801f678:	ffffdf52 	.word	0xffffdf52

0801f67c <mbedtls_x509_get_name>:
{
 801f67c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f680:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801f774 <mbedtls_x509_get_name+0xf8>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f684:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 801f778 <mbedtls_x509_get_name+0xfc>
{
 801f688:	4604      	mov	r4, r0
 801f68a:	460f      	mov	r7, r1
 801f68c:	4692      	mov	sl, r2
        if( ( ret = mbedtls_asn1_get_tag( p, end, &set_len,
 801f68e:	2331      	movs	r3, #49	; 0x31
 801f690:	466a      	mov	r2, sp
 801f692:	4639      	mov	r1, r7
 801f694:	4620      	mov	r0, r4
 801f696:	f7ee fd2f 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f69a:	b120      	cbz	r0, 801f6a6 <mbedtls_x509_get_name+0x2a>
            return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f69c:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
}
 801f6a0:	b002      	add	sp, #8
 801f6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        end_set  = *p + set_len;
 801f6a6:	6826      	ldr	r6, [r4, #0]
 801f6a8:	9b00      	ldr	r3, [sp, #0]
 801f6aa:	4655      	mov	r5, sl
 801f6ac:	441e      	add	r6, r3
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f6ae:	2330      	movs	r3, #48	; 0x30
 801f6b0:	aa01      	add	r2, sp, #4
 801f6b2:	4631      	mov	r1, r6
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f7ee fd1f 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f6ba:	b190      	cbz	r0, 801f6e2 <mbedtls_x509_get_name+0x66>
        return( MBEDTLS_ERR_X509_INVALID_NAME + ret );
 801f6bc:	f5a0 500e 	sub.w	r0, r0, #9088	; 0x2380
            if( ( ret = x509_get_attr_type_value( p, end_set, cur ) ) != 0 )
 801f6c0:	2800      	cmp	r0, #0
 801f6c2:	d1ed      	bne.n	801f6a0 <mbedtls_x509_get_name+0x24>
            if( *p == end_set )
 801f6c4:	6823      	ldr	r3, [r4, #0]
 801f6c6:	42b3      	cmp	r3, r6
 801f6c8:	d040      	beq.n	801f74c <mbedtls_x509_get_name+0xd0>
            cur->next_merged = 1;
 801f6ca:	2001      	movs	r0, #1
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f6cc:	f8d8 3000 	ldr.w	r3, [r8]
            cur->next_merged = 1;
 801f6d0:	7728      	strb	r0, [r5, #28]
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f6d2:	2120      	movs	r1, #32
 801f6d4:	4798      	blx	r3
 801f6d6:	61a8      	str	r0, [r5, #24]
            if( cur->next == NULL )
 801f6d8:	b908      	cbnz	r0, 801f6de <mbedtls_x509_get_name+0x62>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f6da:	4823      	ldr	r0, [pc, #140]	; (801f768 <mbedtls_x509_get_name+0xec>)
 801f6dc:	e7e0      	b.n	801f6a0 <mbedtls_x509_get_name+0x24>
 801f6de:	4605      	mov	r5, r0
 801f6e0:	e7e5      	b.n	801f6ae <mbedtls_x509_get_name+0x32>
    if( ( end - *p ) < 1 )
 801f6e2:	6823      	ldr	r3, [r4, #0]
 801f6e4:	1af2      	subs	r2, r6, r3
 801f6e6:	2a00      	cmp	r2, #0
 801f6e8:	dc01      	bgt.n	801f6ee <mbedtls_x509_get_name+0x72>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f6ea:	4820      	ldr	r0, [pc, #128]	; (801f76c <mbedtls_x509_get_name+0xf0>)
 801f6ec:	e7d8      	b.n	801f6a0 <mbedtls_x509_get_name+0x24>
    oid->tag = **p;
 801f6ee:	462a      	mov	r2, r5
 801f6f0:	781b      	ldrb	r3, [r3, #0]
 801f6f2:	f842 3b04 	str.w	r3, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &oid->len, MBEDTLS_ASN1_OID ) ) != 0 )
 801f6f6:	4631      	mov	r1, r6
 801f6f8:	2306      	movs	r3, #6
 801f6fa:	4620      	mov	r0, r4
 801f6fc:	f7ee fcfc 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f700:	2800      	cmp	r0, #0
 801f702:	d1db      	bne.n	801f6bc <mbedtls_x509_get_name+0x40>
    oid->p = *p;
 801f704:	6822      	ldr	r2, [r4, #0]
    *p += oid->len;
 801f706:	6868      	ldr	r0, [r5, #4]
    oid->p = *p;
 801f708:	60aa      	str	r2, [r5, #8]
    *p += oid->len;
 801f70a:	1813      	adds	r3, r2, r0
    if( ( end - *p ) < 1 )
 801f70c:	1af1      	subs	r1, r6, r3
 801f70e:	2900      	cmp	r1, #0
    *p += oid->len;
 801f710:	6023      	str	r3, [r4, #0]
    if( ( end - *p ) < 1 )
 801f712:	ddea      	ble.n	801f6ea <mbedtls_x509_get_name+0x6e>
    if( **p != MBEDTLS_ASN1_BMP_STRING && **p != MBEDTLS_ASN1_UTF8_STRING      &&
 801f714:	5c11      	ldrb	r1, [r2, r0]
        **p != MBEDTLS_ASN1_IA5_STRING && **p != MBEDTLS_ASN1_UNIVERSAL_STRING &&
 801f716:	291e      	cmp	r1, #30
 801f718:	d816      	bhi.n	801f748 <mbedtls_x509_get_name+0xcc>
 801f71a:	fa29 f101 	lsr.w	r1, r9, r1
 801f71e:	07c9      	lsls	r1, r1, #31
 801f720:	d512      	bpl.n	801f748 <mbedtls_x509_get_name+0xcc>
    val->tag = *(*p)++;
 801f722:	3301      	adds	r3, #1
 801f724:	6023      	str	r3, [r4, #0]
 801f726:	5c13      	ldrb	r3, [r2, r0]
 801f728:	60eb      	str	r3, [r5, #12]
    if( ( ret = mbedtls_asn1_get_len( p, end, &val->len ) ) != 0 )
 801f72a:	f105 0210 	add.w	r2, r5, #16
 801f72e:	4631      	mov	r1, r6
 801f730:	4620      	mov	r0, r4
 801f732:	f7ee fc99 	bl	800e068 <mbedtls_asn1_get_len>
 801f736:	2800      	cmp	r0, #0
 801f738:	d1c0      	bne.n	801f6bc <mbedtls_x509_get_name+0x40>
    val->p = *p;
 801f73a:	6823      	ldr	r3, [r4, #0]
    *p += val->len;
 801f73c:	692a      	ldr	r2, [r5, #16]
    val->p = *p;
 801f73e:	616b      	str	r3, [r5, #20]
    *p += val->len;
 801f740:	4413      	add	r3, r2
 801f742:	6023      	str	r3, [r4, #0]
    cur->next = NULL;
 801f744:	61a8      	str	r0, [r5, #24]
    return( 0 );
 801f746:	e7bd      	b.n	801f6c4 <mbedtls_x509_get_name+0x48>
        return( MBEDTLS_ERR_X509_INVALID_NAME +
 801f748:	4809      	ldr	r0, [pc, #36]	; (801f770 <mbedtls_x509_get_name+0xf4>)
 801f74a:	e7a9      	b.n	801f6a0 <mbedtls_x509_get_name+0x24>
        if( *p == end )
 801f74c:	42b7      	cmp	r7, r6
 801f74e:	d009      	beq.n	801f764 <mbedtls_x509_get_name+0xe8>
        cur->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_name ) );
 801f750:	f8d8 3000 	ldr.w	r3, [r8]
 801f754:	2120      	movs	r1, #32
 801f756:	2001      	movs	r0, #1
 801f758:	4798      	blx	r3
 801f75a:	4682      	mov	sl, r0
 801f75c:	61a8      	str	r0, [r5, #24]
        if( cur->next == NULL )
 801f75e:	2800      	cmp	r0, #0
 801f760:	d195      	bne.n	801f68e <mbedtls_x509_get_name+0x12>
 801f762:	e7ba      	b.n	801f6da <mbedtls_x509_get_name+0x5e>
            return( 0 );
 801f764:	2000      	movs	r0, #0
 801f766:	e79b      	b.n	801f6a0 <mbedtls_x509_get_name+0x24>
 801f768:	ffffd780 	.word	0xffffd780
 801f76c:	ffffdc20 	.word	0xffffdc20
 801f770:	ffffdc1e 	.word	0xffffdc1e
 801f774:	50581008 	.word	0x50581008
 801f778:	200005a0 	.word	0x200005a0

0801f77c <mbedtls_x509_get_time>:
    if( ( end - *p ) < 1 )
 801f77c:	6803      	ldr	r3, [r0, #0]
{
 801f77e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f780:	4614      	mov	r4, r2
    if( ( end - *p ) < 1 )
 801f782:	1aca      	subs	r2, r1, r3
 801f784:	2a00      	cmp	r2, #0
{
 801f786:	4605      	mov	r5, r0
    if( ( end - *p ) < 1 )
 801f788:	f340 809b 	ble.w	801f8c2 <mbedtls_x509_get_time+0x146>
    tag = **p;
 801f78c:	781a      	ldrb	r2, [r3, #0]
    if( tag == MBEDTLS_ASN1_UTC_TIME )
 801f78e:	2a17      	cmp	r2, #23
 801f790:	d00e      	beq.n	801f7b0 <mbedtls_x509_get_time+0x34>
    else if( tag == MBEDTLS_ASN1_GENERALIZED_TIME )
 801f792:	2a18      	cmp	r2, #24
 801f794:	f040 8097 	bne.w	801f8c6 <mbedtls_x509_get_time+0x14a>
        year_len = 4;
 801f798:	2604      	movs	r6, #4
    (*p)++;
 801f79a:	3301      	adds	r3, #1
 801f79c:	602b      	str	r3, [r5, #0]
    ret = mbedtls_asn1_get_len( p, end, &len );
 801f79e:	aa01      	add	r2, sp, #4
 801f7a0:	4628      	mov	r0, r5
 801f7a2:	f7ee fc61 	bl	800e068 <mbedtls_asn1_get_len>
    if( ret != 0 )
 801f7a6:	b128      	cbz	r0, 801f7b4 <mbedtls_x509_get_time+0x38>
        return( MBEDTLS_ERR_X509_INVALID_DATE + ret );
 801f7a8:	f5a0 5010 	sub.w	r0, r0, #9216	; 0x2400
}
 801f7ac:	b003      	add	sp, #12
 801f7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        year_len = 2;
 801f7b0:	2602      	movs	r6, #2
 801f7b2:	e7f2      	b.n	801f79a <mbedtls_x509_get_time+0x1e>
    return x509_parse_time( p, len, year_len, tm );
 801f7b4:	9f01      	ldr	r7, [sp, #4]
    if ( len < yearlen + 8 )
 801f7b6:	f106 0308 	add.w	r3, r6, #8
 801f7ba:	429f      	cmp	r7, r3
 801f7bc:	d201      	bcs.n	801f7c2 <mbedtls_x509_get_time+0x46>
 801f7be:	4843      	ldr	r0, [pc, #268]	; (801f8cc <mbedtls_x509_get_time+0x150>)
 801f7c0:	e7f4      	b.n	801f7ac <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, yearlen, &tm->year ) );
 801f7c2:	4622      	mov	r2, r4
 801f7c4:	4631      	mov	r1, r6
 801f7c6:	4628      	mov	r0, r5
 801f7c8:	f7ff fdcc 	bl	801f364 <x509_parse_int>
 801f7cc:	2800      	cmp	r0, #0
 801f7ce:	d1ed      	bne.n	801f7ac <mbedtls_x509_get_time+0x30>
    if ( 2 == yearlen )
 801f7d0:	2e02      	cmp	r6, #2
 801f7d2:	d108      	bne.n	801f7e6 <mbedtls_x509_get_time+0x6a>
        if ( tm->year < 50 )
 801f7d4:	6823      	ldr	r3, [r4, #0]
 801f7d6:	2b31      	cmp	r3, #49	; 0x31
            tm->year += 100;
 801f7d8:	bfdc      	itt	le
 801f7da:	3364      	addle	r3, #100	; 0x64
 801f7dc:	6023      	strle	r3, [r4, #0]
        tm->year += 1900;
 801f7de:	6823      	ldr	r3, [r4, #0]
 801f7e0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801f7e4:	6023      	str	r3, [r4, #0]
    CHECK( x509_parse_int( p, 2, &tm->mon ) );
 801f7e6:	1d22      	adds	r2, r4, #4
 801f7e8:	2102      	movs	r1, #2
 801f7ea:	4628      	mov	r0, r5
 801f7ec:	f7ff fdba 	bl	801f364 <x509_parse_int>
 801f7f0:	2800      	cmp	r0, #0
 801f7f2:	d1db      	bne.n	801f7ac <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->day ) );
 801f7f4:	f104 0208 	add.w	r2, r4, #8
 801f7f8:	2102      	movs	r1, #2
 801f7fa:	4628      	mov	r0, r5
 801f7fc:	f7ff fdb2 	bl	801f364 <x509_parse_int>
 801f800:	2800      	cmp	r0, #0
 801f802:	d1d3      	bne.n	801f7ac <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->hour ) );
 801f804:	f104 020c 	add.w	r2, r4, #12
 801f808:	2102      	movs	r1, #2
 801f80a:	4628      	mov	r0, r5
 801f80c:	f7ff fdaa 	bl	801f364 <x509_parse_int>
 801f810:	2800      	cmp	r0, #0
 801f812:	d1cb      	bne.n	801f7ac <mbedtls_x509_get_time+0x30>
    CHECK( x509_parse_int( p, 2, &tm->min ) );
 801f814:	f104 0210 	add.w	r2, r4, #16
 801f818:	2102      	movs	r1, #2
 801f81a:	4628      	mov	r0, r5
 801f81c:	f7ff fda2 	bl	801f364 <x509_parse_int>
 801f820:	2800      	cmp	r0, #0
 801f822:	d1c3      	bne.n	801f7ac <mbedtls_x509_get_time+0x30>
    len -= yearlen + 8;
 801f824:	1bbe      	subs	r6, r7, r6
 801f826:	f1a6 0308 	sub.w	r3, r6, #8
    if ( len >= 2 )
 801f82a:	2b01      	cmp	r3, #1
 801f82c:	d9c7      	bls.n	801f7be <mbedtls_x509_get_time+0x42>
        CHECK( x509_parse_int( p, 2, &tm->sec ) );
 801f82e:	f104 0214 	add.w	r2, r4, #20
 801f832:	2102      	movs	r1, #2
 801f834:	4628      	mov	r0, r5
 801f836:	f7ff fd95 	bl	801f364 <x509_parse_int>
 801f83a:	2800      	cmp	r0, #0
 801f83c:	d1b6      	bne.n	801f7ac <mbedtls_x509_get_time+0x30>
    if ( 1 == len && 'Z' == **p )
 801f83e:	2e0b      	cmp	r6, #11
        len -= 2;
 801f840:	f1a6 030a 	sub.w	r3, r6, #10
    if ( 1 == len && 'Z' == **p )
 801f844:	d11f      	bne.n	801f886 <mbedtls_x509_get_time+0x10a>
 801f846:	682b      	ldr	r3, [r5, #0]
 801f848:	781a      	ldrb	r2, [r3, #0]
 801f84a:	2a5a      	cmp	r2, #90	; 0x5a
 801f84c:	d1b7      	bne.n	801f7be <mbedtls_x509_get_time+0x42>
        (*p)++;
 801f84e:	3301      	adds	r3, #1
 801f850:	602b      	str	r3, [r5, #0]
    CHECK_RANGE( 0, 9999, t->year );
 801f852:	6822      	ldr	r2, [r4, #0]
 801f854:	f242 730f 	movw	r3, #9999	; 0x270f
 801f858:	429a      	cmp	r2, r3
 801f85a:	d8b0      	bhi.n	801f7be <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 23,   t->hour );
 801f85c:	68e3      	ldr	r3, [r4, #12]
 801f85e:	2b17      	cmp	r3, #23
 801f860:	d8ad      	bhi.n	801f7be <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->min  );
 801f862:	6923      	ldr	r3, [r4, #16]
 801f864:	2b3b      	cmp	r3, #59	; 0x3b
 801f866:	d8aa      	bhi.n	801f7be <mbedtls_x509_get_time+0x42>
    CHECK_RANGE( 0, 59,   t->sec  );
 801f868:	6963      	ldr	r3, [r4, #20]
 801f86a:	2b3b      	cmp	r3, #59	; 0x3b
 801f86c:	d8a7      	bhi.n	801f7be <mbedtls_x509_get_time+0x42>
    switch( t->mon )
 801f86e:	6863      	ldr	r3, [r4, #4]
 801f870:	3b01      	subs	r3, #1
 801f872:	2b0b      	cmp	r3, #11
 801f874:	d8a3      	bhi.n	801f7be <mbedtls_x509_get_time+0x42>
 801f876:	e8df f003 	tbb	[pc, r3]
 801f87a:	1709      	.short	0x1709
 801f87c:	10091009 	.word	0x10091009
 801f880:	09100909 	.word	0x09100909
 801f884:	0910      	.short	0x0910
    if ( 0 != len )
 801f886:	2b00      	cmp	r3, #0
 801f888:	d0e3      	beq.n	801f852 <mbedtls_x509_get_time+0xd6>
 801f88a:	e798      	b.n	801f7be <mbedtls_x509_get_time+0x42>
            CHECK_RANGE( 1, 31, t->day );
 801f88c:	68a3      	ldr	r3, [r4, #8]
 801f88e:	4a0f      	ldr	r2, [pc, #60]	; (801f8cc <mbedtls_x509_get_time+0x150>)
 801f890:	3b01      	subs	r3, #1
 801f892:	2b1e      	cmp	r3, #30
 801f894:	bf88      	it	hi
 801f896:	4610      	movhi	r0, r2
 801f898:	e788      	b.n	801f7ac <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 30, t->day );
 801f89a:	68a3      	ldr	r3, [r4, #8]
 801f89c:	4a0b      	ldr	r2, [pc, #44]	; (801f8cc <mbedtls_x509_get_time+0x150>)
 801f89e:	3b01      	subs	r3, #1
 801f8a0:	2b1d      	cmp	r3, #29
 801f8a2:	bf88      	it	hi
 801f8a4:	4610      	movhi	r0, r2
 801f8a6:	e781      	b.n	801f7ac <mbedtls_x509_get_time+0x30>
            CHECK_RANGE( 1, 28 + (t->year % 4 == 0), t->day );
 801f8a8:	68a3      	ldr	r3, [r4, #8]
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	dd87      	ble.n	801f7be <mbedtls_x509_get_time+0x42>
 801f8ae:	f012 0f03 	tst.w	r2, #3
 801f8b2:	4a06      	ldr	r2, [pc, #24]	; (801f8cc <mbedtls_x509_get_time+0x150>)
 801f8b4:	bf0c      	ite	eq
 801f8b6:	211d      	moveq	r1, #29
 801f8b8:	211c      	movne	r1, #28
 801f8ba:	428b      	cmp	r3, r1
 801f8bc:	bfc8      	it	gt
 801f8be:	4610      	movgt	r0, r2
 801f8c0:	e774      	b.n	801f7ac <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f8c2:	4803      	ldr	r0, [pc, #12]	; (801f8d0 <mbedtls_x509_get_time+0x154>)
 801f8c4:	e772      	b.n	801f7ac <mbedtls_x509_get_time+0x30>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 801f8c6:	4803      	ldr	r0, [pc, #12]	; (801f8d4 <mbedtls_x509_get_time+0x158>)
 801f8c8:	e770      	b.n	801f7ac <mbedtls_x509_get_time+0x30>
 801f8ca:	bf00      	nop
 801f8cc:	ffffdc00 	.word	0xffffdc00
 801f8d0:	ffffdba0 	.word	0xffffdba0
 801f8d4:	ffffdb9e 	.word	0xffffdb9e

0801f8d8 <mbedtls_x509_get_sig>:
{
 801f8d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f8da:	4615      	mov	r5, r2
    if( ( end - *p ) < 1 )
 801f8dc:	6802      	ldr	r2, [r0, #0]
 801f8de:	1a8b      	subs	r3, r1, r2
 801f8e0:	2b00      	cmp	r3, #0
{
 801f8e2:	4604      	mov	r4, r0
    if( ( end - *p ) < 1 )
 801f8e4:	dd11      	ble.n	801f90a <mbedtls_x509_get_sig+0x32>
    tag_type = **p;
 801f8e6:	7816      	ldrb	r6, [r2, #0]
    if( ( ret = mbedtls_asn1_get_bitstring_null( p, end, &len ) ) != 0 )
 801f8e8:	aa01      	add	r2, sp, #4
 801f8ea:	f7ee fc89 	bl	800e200 <mbedtls_asn1_get_bitstring_null>
 801f8ee:	b118      	cbz	r0, 801f8f8 <mbedtls_x509_get_sig+0x20>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE + ret );
 801f8f0:	f5a0 5012 	sub.w	r0, r0, #9344	; 0x2480
}
 801f8f4:	b002      	add	sp, #8
 801f8f6:	bd70      	pop	{r4, r5, r6, pc}
    sig->p = *p;
 801f8f8:	6823      	ldr	r3, [r4, #0]
 801f8fa:	60ab      	str	r3, [r5, #8]
    sig->len = len;
 801f8fc:	9a01      	ldr	r2, [sp, #4]
    *p += len;
 801f8fe:	6823      	ldr	r3, [r4, #0]
    tag_type = **p;
 801f900:	602e      	str	r6, [r5, #0]
    *p += len;
 801f902:	4413      	add	r3, r2
    sig->len = len;
 801f904:	606a      	str	r2, [r5, #4]
    *p += len;
 801f906:	6023      	str	r3, [r4, #0]
    return( 0 );
 801f908:	e7f4      	b.n	801f8f4 <mbedtls_x509_get_sig+0x1c>
        return( MBEDTLS_ERR_X509_INVALID_SIGNATURE +
 801f90a:	4801      	ldr	r0, [pc, #4]	; (801f910 <mbedtls_x509_get_sig+0x38>)
 801f90c:	e7f2      	b.n	801f8f4 <mbedtls_x509_get_sig+0x1c>
 801f90e:	bf00      	nop
 801f910:	ffffdb20 	.word	0xffffdb20

0801f914 <mbedtls_x509_get_sig_alg>:
{
 801f914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f918:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801f91c:	461d      	mov	r5, r3
    if( *sig_opts != NULL )
 801f91e:	f8d8 3000 	ldr.w	r3, [r8]
{
 801f922:	460e      	mov	r6, r1
 801f924:	4617      	mov	r7, r2
    if( *sig_opts != NULL )
 801f926:	bb73      	cbnz	r3, 801f986 <mbedtls_x509_get_sig_alg+0x72>
    if( ( ret = mbedtls_oid_get_sig_alg( sig_oid, md_alg, pk_alg ) ) != 0 )
 801f928:	462a      	mov	r2, r5
 801f92a:	4639      	mov	r1, r7
 801f92c:	f7f5 fe3d 	bl	80155aa <mbedtls_oid_get_sig_alg>
 801f930:	4604      	mov	r4, r0
 801f932:	b120      	cbz	r0, 801f93e <mbedtls_x509_get_sig_alg+0x2a>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG + ret );
 801f934:	f5a0 5418 	sub.w	r4, r0, #9728	; 0x2600
}
 801f938:	4620      	mov	r0, r4
 801f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if( *pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801f93e:	782b      	ldrb	r3, [r5, #0]
 801f940:	2b06      	cmp	r3, #6
 801f942:	d116      	bne.n	801f972 <mbedtls_x509_get_sig_alg+0x5e>
        pss_opts = mbedtls_calloc( 1, sizeof( mbedtls_pk_rsassa_pss_options ) );
 801f944:	4b13      	ldr	r3, [pc, #76]	; (801f994 <mbedtls_x509_get_sig_alg+0x80>)
 801f946:	2108      	movs	r1, #8
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	2001      	movs	r0, #1
 801f94c:	4798      	blx	r3
        if( pss_opts == NULL )
 801f94e:	4605      	mov	r5, r0
 801f950:	b1d8      	cbz	r0, 801f98a <mbedtls_x509_get_sig_alg+0x76>
        ret = mbedtls_x509_get_rsassa_pss_params( sig_params,
 801f952:	1d03      	adds	r3, r0, #4
 801f954:	4602      	mov	r2, r0
 801f956:	4639      	mov	r1, r7
 801f958:	4630      	mov	r0, r6
 801f95a:	f7ff fda7 	bl	801f4ac <mbedtls_x509_get_rsassa_pss_params>
        if( ret != 0 )
 801f95e:	4604      	mov	r4, r0
 801f960:	b120      	cbz	r0, 801f96c <mbedtls_x509_get_sig_alg+0x58>
            mbedtls_free( pss_opts );
 801f962:	4b0d      	ldr	r3, [pc, #52]	; (801f998 <mbedtls_x509_get_sig_alg+0x84>)
 801f964:	4628      	mov	r0, r5
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	4798      	blx	r3
            return( ret );
 801f96a:	e7e5      	b.n	801f938 <mbedtls_x509_get_sig_alg+0x24>
        *sig_opts = (void *) pss_opts;
 801f96c:	f8c8 5000 	str.w	r5, [r8]
 801f970:	e7e2      	b.n	801f938 <mbedtls_x509_get_sig_alg+0x24>
        if( ( sig_params->tag != MBEDTLS_ASN1_NULL && sig_params->tag != 0 ) ||
 801f972:	6833      	ldr	r3, [r6, #0]
 801f974:	2b05      	cmp	r3, #5
 801f976:	d000      	beq.n	801f97a <mbedtls_x509_get_sig_alg+0x66>
 801f978:	b94b      	cbnz	r3, 801f98e <mbedtls_x509_get_sig_alg+0x7a>
 801f97a:	6872      	ldr	r2, [r6, #4]
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f97c:	4b07      	ldr	r3, [pc, #28]	; (801f99c <mbedtls_x509_get_sig_alg+0x88>)
 801f97e:	2a00      	cmp	r2, #0
 801f980:	bf18      	it	ne
 801f982:	461c      	movne	r4, r3
 801f984:	e7d8      	b.n	801f938 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 801f986:	4c06      	ldr	r4, [pc, #24]	; (801f9a0 <mbedtls_x509_get_sig_alg+0x8c>)
 801f988:	e7d6      	b.n	801f938 <mbedtls_x509_get_sig_alg+0x24>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801f98a:	4c06      	ldr	r4, [pc, #24]	; (801f9a4 <mbedtls_x509_get_sig_alg+0x90>)
 801f98c:	e7d4      	b.n	801f938 <mbedtls_x509_get_sig_alg+0x24>
        return( MBEDTLS_ERR_X509_INVALID_ALG );
 801f98e:	4c03      	ldr	r4, [pc, #12]	; (801f99c <mbedtls_x509_get_sig_alg+0x88>)
 801f990:	e7d2      	b.n	801f938 <mbedtls_x509_get_sig_alg+0x24>
 801f992:	bf00      	nop
 801f994:	200005a0 	.word	0x200005a0
 801f998:	200005a4 	.word	0x200005a4
 801f99c:	ffffdd00 	.word	0xffffdd00
 801f9a0:	ffffd800 	.word	0xffffd800
 801f9a4:	ffffd780 	.word	0xffffd780

0801f9a8 <mbedtls_x509_get_ext>:
{
 801f9a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f9aa:	4616      	mov	r6, r2
    if( *p == end )
 801f9ac:	6802      	ldr	r2, [r0, #0]
 801f9ae:	428a      	cmp	r2, r1
{
 801f9b0:	4604      	mov	r4, r0
    if( *p == end )
 801f9b2:	d102      	bne.n	801f9ba <mbedtls_x509_get_ext+0x12>
        return( 0 );
 801f9b4:	2000      	movs	r0, #0
}
 801f9b6:	b002      	add	sp, #8
 801f9b8:	bd70      	pop	{r4, r5, r6, pc}
    ext->tag = **p;
 801f9ba:	7815      	ldrb	r5, [r2, #0]
 801f9bc:	4632      	mov	r2, r6
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801f9be:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
    ext->tag = **p;
 801f9c2:	f842 5b04 	str.w	r5, [r2], #4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801f9c6:	f7ee fb97 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f9ca:	2800      	cmp	r0, #0
 801f9cc:	d1f3      	bne.n	801f9b6 <mbedtls_x509_get_ext+0xe>
    ext->p = *p;
 801f9ce:	6825      	ldr	r5, [r4, #0]
    end = *p + ext->len;
 801f9d0:	6871      	ldr	r1, [r6, #4]
    ext->p = *p;
 801f9d2:	60b5      	str	r5, [r6, #8]
    end = *p + ext->len;
 801f9d4:	440d      	add	r5, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 801f9d6:	2330      	movs	r3, #48	; 0x30
 801f9d8:	aa01      	add	r2, sp, #4
 801f9da:	4629      	mov	r1, r5
 801f9dc:	4620      	mov	r0, r4
 801f9de:	f7ee fb8b 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801f9e2:	b110      	cbz	r0, 801f9ea <mbedtls_x509_get_ext+0x42>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 801f9e4:	f5a0 5014 	sub.w	r0, r0, #9472	; 0x2500
 801f9e8:	e7e5      	b.n	801f9b6 <mbedtls_x509_get_ext+0xe>
    if( end != *p + len )
 801f9ea:	6823      	ldr	r3, [r4, #0]
 801f9ec:	9a01      	ldr	r2, [sp, #4]
 801f9ee:	4413      	add	r3, r2
 801f9f0:	429d      	cmp	r5, r3
 801f9f2:	d0df      	beq.n	801f9b4 <mbedtls_x509_get_ext+0xc>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 801f9f4:	4800      	ldr	r0, [pc, #0]	; (801f9f8 <mbedtls_x509_get_ext+0x50>)
 801f9f6:	e7de      	b.n	801f9b6 <mbedtls_x509_get_ext+0xe>
 801f9f8:	ffffda9a 	.word	0xffffda9a

0801f9fc <mbedtls_x509_dn_gets>:
{
 801f9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa00:	b0c3      	sub	sp, #268	; 0x10c
    const char *short_name = NULL;
 801fa02:	f04f 0a00 	mov.w	sl, #0
    memset( s, 0, sizeof( s ) );
 801fa06:	f10d 0908 	add.w	r9, sp, #8
{
 801fa0a:	460f      	mov	r7, r1
 801fa0c:	4690      	mov	r8, r2
    memset( s, 0, sizeof( s ) );
 801fa0e:	4651      	mov	r1, sl
{
 801fa10:	4604      	mov	r4, r0
    memset( s, 0, sizeof( s ) );
 801fa12:	f44f 7280 	mov.w	r2, #256	; 0x100
 801fa16:	4648      	mov	r0, r9
    const char *short_name = NULL;
 801fa18:	f8cd a004 	str.w	sl, [sp, #4]
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801fa1c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801faf8 <mbedtls_x509_dn_gets+0xfc>
    memset( s, 0, sizeof( s ) );
 801fa20:	f002 fd0a 	bl	8022438 <memset>
    unsigned char c, merge = 0;
 801fa24:	4651      	mov	r1, sl
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801fa26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801fafc <mbedtls_x509_dn_gets+0x100>
    name = dn;
 801fa2a:	4646      	mov	r6, r8
    n = size;
 801fa2c:	463d      	mov	r5, r7
    while( name != NULL )
 801fa2e:	b90e      	cbnz	r6, 801fa34 <mbedtls_x509_dn_gets+0x38>
    return( (int) ( size - n ) );
 801fa30:	1b78      	subs	r0, r7, r5
 801fa32:	e011      	b.n	801fa58 <mbedtls_x509_dn_gets+0x5c>
        if( !name->oid.p )
 801fa34:	68b3      	ldr	r3, [r6, #8]
 801fa36:	b90b      	cbnz	r3, 801fa3c <mbedtls_x509_dn_gets+0x40>
        name = name->next;
 801fa38:	69b6      	ldr	r6, [r6, #24]
 801fa3a:	e7f8      	b.n	801fa2e <mbedtls_x509_dn_gets+0x32>
        if( name != dn )
 801fa3c:	4546      	cmp	r6, r8
 801fa3e:	d012      	beq.n	801fa66 <mbedtls_x509_dn_gets+0x6a>
            ret = mbedtls_snprintf( p, n, merge ? " + " : ", " );
 801fa40:	4b29      	ldr	r3, [pc, #164]	; (801fae8 <mbedtls_x509_dn_gets+0xec>)
 801fa42:	4a2a      	ldr	r2, [pc, #168]	; (801faec <mbedtls_x509_dn_gets+0xf0>)
 801fa44:	4620      	mov	r0, r4
 801fa46:	2900      	cmp	r1, #0
 801fa48:	bf08      	it	eq
 801fa4a:	461a      	moveq	r2, r3
 801fa4c:	4629      	mov	r1, r5
 801fa4e:	f003 fee1 	bl	8023814 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 801fa52:	2800      	cmp	r0, #0
 801fa54:	da03      	bge.n	801fa5e <mbedtls_x509_dn_gets+0x62>
 801fa56:	4826      	ldr	r0, [pc, #152]	; (801faf0 <mbedtls_x509_dn_gets+0xf4>)
}
 801fa58:	b043      	add	sp, #268	; 0x10c
 801fa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MBEDTLS_X509_SAFE_SNPRINTF;
 801fa5e:	42a8      	cmp	r0, r5
 801fa60:	d2f9      	bcs.n	801fa56 <mbedtls_x509_dn_gets+0x5a>
 801fa62:	1a2d      	subs	r5, r5, r0
 801fa64:	4404      	add	r4, r0
        ret = mbedtls_oid_get_attr_short_name( &name->oid, &short_name );
 801fa66:	a901      	add	r1, sp, #4
 801fa68:	4630      	mov	r0, r6
 801fa6a:	f7f5 fd43 	bl	80154f4 <mbedtls_oid_get_attr_short_name>
        if( ret == 0 )
 801fa6e:	bb08      	cbnz	r0, 801fab4 <mbedtls_x509_dn_gets+0xb8>
            ret = mbedtls_snprintf( p, n, "%s=", short_name );
 801fa70:	9b01      	ldr	r3, [sp, #4]
 801fa72:	465a      	mov	r2, fp
 801fa74:	4629      	mov	r1, r5
 801fa76:	4620      	mov	r0, r4
 801fa78:	f003 fecc 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fa7c:	2800      	cmp	r0, #0
 801fa7e:	dbea      	blt.n	801fa56 <mbedtls_x509_dn_gets+0x5a>
 801fa80:	42a8      	cmp	r0, r5
 801fa82:	d2e8      	bcs.n	801fa56 <mbedtls_x509_dn_gets+0x5a>
 801fa84:	1a2d      	subs	r5, r5, r0
 801fa86:	4404      	add	r4, r0
        for( i = 0; i < name->val.len; i++ )
 801fa88:	2200      	movs	r2, #0
 801fa8a:	4648      	mov	r0, r9
 801fa8c:	6933      	ldr	r3, [r6, #16]
 801fa8e:	4293      	cmp	r3, r2
 801fa90:	d816      	bhi.n	801fac0 <mbedtls_x509_dn_gets+0xc4>
        s[i] = '\0';
 801fa92:	2300      	movs	r3, #0
 801fa94:	f809 3002 	strb.w	r3, [r9, r2]
        ret = mbedtls_snprintf( p, n, "%s", s );
 801fa98:	4629      	mov	r1, r5
 801fa9a:	4a16      	ldr	r2, [pc, #88]	; (801faf4 <mbedtls_x509_dn_gets+0xf8>)
 801fa9c:	464b      	mov	r3, r9
 801fa9e:	4620      	mov	r0, r4
 801faa0:	f003 feb8 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801faa4:	2800      	cmp	r0, #0
 801faa6:	dbd6      	blt.n	801fa56 <mbedtls_x509_dn_gets+0x5a>
 801faa8:	42a8      	cmp	r0, r5
 801faaa:	d2d4      	bcs.n	801fa56 <mbedtls_x509_dn_gets+0x5a>
        merge = name->next_merged;
 801faac:	7f31      	ldrb	r1, [r6, #28]
        MBEDTLS_X509_SAFE_SNPRINTF;
 801faae:	1a2d      	subs	r5, r5, r0
 801fab0:	4404      	add	r4, r0
        merge = name->next_merged;
 801fab2:	e7c1      	b.n	801fa38 <mbedtls_x509_dn_gets+0x3c>
            ret = mbedtls_snprintf( p, n, "\?\?=" );
 801fab4:	4652      	mov	r2, sl
 801fab6:	4629      	mov	r1, r5
 801fab8:	4620      	mov	r0, r4
 801faba:	f003 feab 	bl	8023814 <sniprintf>
 801fabe:	e7dd      	b.n	801fa7c <mbedtls_x509_dn_gets+0x80>
            if( i >= sizeof( s ) - 1 )
 801fac0:	2aff      	cmp	r2, #255	; 0xff
 801fac2:	d0e6      	beq.n	801fa92 <mbedtls_x509_dn_gets+0x96>
            c = name->val.p[i];
 801fac4:	6973      	ldr	r3, [r6, #20]
 801fac6:	5c9b      	ldrb	r3, [r3, r2]
            if( c < 32 || c == 127 || ( c > 128 && c < 160 ) )
 801fac8:	2b1f      	cmp	r3, #31
 801faca:	d90b      	bls.n	801fae4 <mbedtls_x509_dn_gets+0xe8>
 801facc:	2b7f      	cmp	r3, #127	; 0x7f
 801face:	d009      	beq.n	801fae4 <mbedtls_x509_dn_gets+0xe8>
 801fad0:	f103 017f 	add.w	r1, r3, #127	; 0x7f
 801fad4:	b2c9      	uxtb	r1, r1
                 s[i] = '?';
 801fad6:	291e      	cmp	r1, #30
 801fad8:	bf98      	it	ls
 801fada:	233f      	movls	r3, #63	; 0x3f
 801fadc:	f800 3b01 	strb.w	r3, [r0], #1
        for( i = 0; i < name->val.len; i++ )
 801fae0:	3201      	adds	r2, #1
 801fae2:	e7d3      	b.n	801fa8c <mbedtls_x509_dn_gets+0x90>
                 s[i] = '?';
 801fae4:	233f      	movs	r3, #63	; 0x3f
 801fae6:	e7f9      	b.n	801fadc <mbedtls_x509_dn_gets+0xe0>
 801fae8:	08032f6d 	.word	0x08032f6d
 801faec:	08032f69 	.word	0x08032f69
 801faf0:	ffffd680 	.word	0xffffd680
 801faf4:	08031619 	.word	0x08031619
 801faf8:	08032f70 	.word	0x08032f70
 801fafc:	08032f74 	.word	0x08032f74

0801fb00 <mbedtls_x509_serial_gets>:
{
 801fb00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    nr = ( serial->len <= 32 )
 801fb04:	f8d2 8004 	ldr.w	r8, [r2, #4]
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fb08:	f8df a088 	ldr.w	sl, [pc, #136]	; 801fb94 <mbedtls_x509_serial_gets+0x94>
 801fb0c:	f8df b088 	ldr.w	fp, [pc, #136]	; 801fb98 <mbedtls_x509_serial_gets+0x98>
{
 801fb10:	4691      	mov	r9, r2
        ? serial->len  : 28;
 801fb12:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fb16:	4a1c      	ldr	r2, [pc, #112]	; (801fb88 <mbedtls_x509_serial_gets+0x88>)
{
 801fb18:	4607      	mov	r7, r0
 801fb1a:	460d      	mov	r5, r1
        ? serial->len  : 28;
 801fb1c:	bf28      	it	cs
 801fb1e:	f04f 081c 	movcs.w	r8, #28
    n = size;
 801fb22:	460c      	mov	r4, r1
    for( i = 0; i < nr; i++ )
 801fb24:	2600      	movs	r6, #0
 801fb26:	4546      	cmp	r6, r8
 801fb28:	d10d      	bne.n	801fb46 <mbedtls_x509_serial_gets+0x46>
    if( nr != serial->len )
 801fb2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fb2e:	42b3      	cmp	r3, r6
 801fb30:	d007      	beq.n	801fb42 <mbedtls_x509_serial_gets+0x42>
        ret = mbedtls_snprintf( p, n, "...." );
 801fb32:	4a16      	ldr	r2, [pc, #88]	; (801fb8c <mbedtls_x509_serial_gets+0x8c>)
 801fb34:	4621      	mov	r1, r4
 801fb36:	4638      	mov	r0, r7
 801fb38:	f003 fe6c 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fb3c:	2c04      	cmp	r4, #4
 801fb3e:	d919      	bls.n	801fb74 <mbedtls_x509_serial_gets+0x74>
 801fb40:	3c04      	subs	r4, #4
    return( (int) ( size - n ) );
 801fb42:	1b28      	subs	r0, r5, r4
 801fb44:	e017      	b.n	801fb76 <mbedtls_x509_serial_gets+0x76>
        if( i == 0 && nr > 1 && serial->p[i] == 0x0 )
 801fb46:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801fb4a:	b926      	cbnz	r6, 801fb56 <mbedtls_x509_serial_gets+0x56>
 801fb4c:	f1b8 0f01 	cmp.w	r8, #1
 801fb50:	d001      	beq.n	801fb56 <mbedtls_x509_serial_gets+0x56>
 801fb52:	7819      	ldrb	r1, [r3, #0]
 801fb54:	b1b1      	cbz	r1, 801fb84 <mbedtls_x509_serial_gets+0x84>
                serial->p[i], ( i < nr - 1 ) ? ":" : "" );
 801fb56:	f108 31ff 	add.w	r1, r8, #4294967295
        ret = mbedtls_snprintf( p, n, "%02X%s",
 801fb5a:	42b1      	cmp	r1, r6
 801fb5c:	bf8c      	ite	hi
 801fb5e:	4651      	movhi	r1, sl
 801fb60:	4659      	movls	r1, fp
 801fb62:	5d9b      	ldrb	r3, [r3, r6]
 801fb64:	9100      	str	r1, [sp, #0]
 801fb66:	4638      	mov	r0, r7
 801fb68:	4621      	mov	r1, r4
 801fb6a:	f003 fe53 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fb6e:	2800      	cmp	r0, #0
 801fb70:	4a05      	ldr	r2, [pc, #20]	; (801fb88 <mbedtls_x509_serial_gets+0x88>)
 801fb72:	da03      	bge.n	801fb7c <mbedtls_x509_serial_gets+0x7c>
 801fb74:	4806      	ldr	r0, [pc, #24]	; (801fb90 <mbedtls_x509_serial_gets+0x90>)
}
 801fb76:	b003      	add	sp, #12
 801fb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fb7c:	42a0      	cmp	r0, r4
 801fb7e:	d2f9      	bcs.n	801fb74 <mbedtls_x509_serial_gets+0x74>
 801fb80:	1a24      	subs	r4, r4, r0
 801fb82:	4407      	add	r7, r0
    for( i = 0; i < nr; i++ )
 801fb84:	3601      	adds	r6, #1
 801fb86:	e7ce      	b.n	801fb26 <mbedtls_x509_serial_gets+0x26>
 801fb88:	08032f78 	.word	0x08032f78
 801fb8c:	0802de22 	.word	0x0802de22
 801fb90:	ffffd680 	.word	0xffffd680
 801fb94:	0802fd89 	.word	0x0802fd89
 801fb98:	080303e5 	.word	0x080303e5

0801fb9c <mbedtls_x509_sig_alg_gets>:
{
 801fb9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fba0:	4607      	mov	r7, r0
 801fba2:	460c      	mov	r4, r1
 801fba4:	4698      	mov	r8, r3
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fba6:	a903      	add	r1, sp, #12
    const char *desc = NULL;
 801fba8:	2300      	movs	r3, #0
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fbaa:	4610      	mov	r0, r2
{
 801fbac:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    const char *desc = NULL;
 801fbb0:	9303      	str	r3, [sp, #12]
    ret = mbedtls_oid_get_sig_alg_desc( sig_oid, &desc );
 801fbb2:	f7f5 fced 	bl	8015590 <mbedtls_oid_get_sig_alg_desc>
    if( ret != 0 )
 801fbb6:	b158      	cbz	r0, 801fbd0 <mbedtls_x509_sig_alg_gets+0x34>
        ret = mbedtls_snprintf( p, n, "???"  );
 801fbb8:	4a23      	ldr	r2, [pc, #140]	; (801fc48 <mbedtls_x509_sig_alg_gets+0xac>)
 801fbba:	4621      	mov	r1, r4
 801fbbc:	4638      	mov	r0, r7
 801fbbe:	f003 fe29 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fbc2:	2800      	cmp	r0, #0
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801fbc4:	4605      	mov	r5, r0
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fbc6:	da0a      	bge.n	801fbde <mbedtls_x509_sig_alg_gets+0x42>
 801fbc8:	4820      	ldr	r0, [pc, #128]	; (801fc4c <mbedtls_x509_sig_alg_gets+0xb0>)
}
 801fbca:	b004      	add	sp, #16
 801fbcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = mbedtls_snprintf( p, n, "%s", desc );
 801fbd0:	9b03      	ldr	r3, [sp, #12]
 801fbd2:	4a1f      	ldr	r2, [pc, #124]	; (801fc50 <mbedtls_x509_sig_alg_gets+0xb4>)
 801fbd4:	4621      	mov	r1, r4
 801fbd6:	4638      	mov	r0, r7
 801fbd8:	f003 fe1c 	bl	8023814 <sniprintf>
 801fbdc:	e7f1      	b.n	801fbc2 <mbedtls_x509_sig_alg_gets+0x26>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fbde:	42a0      	cmp	r0, r4
 801fbe0:	d2f2      	bcs.n	801fbc8 <mbedtls_x509_sig_alg_gets+0x2c>
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801fbe2:	f1b8 0f06 	cmp.w	r8, #6
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fbe6:	eba4 0600 	sub.w	r6, r4, r0
    if( pk_alg == MBEDTLS_PK_RSASSA_PSS )
 801fbea:	d125      	bne.n	801fc38 <mbedtls_x509_sig_alg_gets+0x9c>
        md_info = mbedtls_md_info_from_type( md_alg );
 801fbec:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801fbf0:	f7f4 fe58 	bl	80148a4 <mbedtls_md_info_from_type>
 801fbf4:	4680      	mov	r8, r0
        mgf_md_info = mbedtls_md_info_from_type( pss_opts->mgf1_hash_id );
 801fbf6:	f899 0000 	ldrb.w	r0, [r9]
 801fbfa:	f7f4 fe53 	bl	80148a4 <mbedtls_md_info_from_type>
 801fbfe:	4682      	mov	sl, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fc00:	f1b8 0f00 	cmp.w	r8, #0
 801fc04:	d01a      	beq.n	801fc3c <mbedtls_x509_sig_alg_gets+0xa0>
                              md_info ? mbedtls_md_get_name( md_info ) : "???",
 801fc06:	4640      	mov	r0, r8
 801fc08:	f7f4 ff9f 	bl	8014b4a <mbedtls_md_get_name>
 801fc0c:	4680      	mov	r8, r0
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fc0e:	f1ba 0f00 	cmp.w	sl, #0
 801fc12:	d016      	beq.n	801fc42 <mbedtls_x509_sig_alg_gets+0xa6>
                              mgf_md_info ? mbedtls_md_get_name( mgf_md_info ) : "???",
 801fc14:	4650      	mov	r0, sl
 801fc16:	f7f4 ff98 	bl	8014b4a <mbedtls_md_get_name>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fc1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801fc1e:	4a0d      	ldr	r2, [pc, #52]	; (801fc54 <mbedtls_x509_sig_alg_gets+0xb8>)
 801fc20:	e9cd 0300 	strd	r0, r3, [sp]
 801fc24:	4631      	mov	r1, r6
 801fc26:	4643      	mov	r3, r8
 801fc28:	1978      	adds	r0, r7, r5
 801fc2a:	f003 fdf3 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 801fc2e:	2800      	cmp	r0, #0
 801fc30:	dbca      	blt.n	801fbc8 <mbedtls_x509_sig_alg_gets+0x2c>
 801fc32:	42b0      	cmp	r0, r6
 801fc34:	d2c8      	bcs.n	801fbc8 <mbedtls_x509_sig_alg_gets+0x2c>
 801fc36:	1a36      	subs	r6, r6, r0
    return( (int)( size - n ) );
 801fc38:	1ba0      	subs	r0, r4, r6
 801fc3a:	e7c6      	b.n	801fbca <mbedtls_x509_sig_alg_gets+0x2e>
        ret = mbedtls_snprintf( p, n, " (%s, MGF1-%s, 0x%02X)",
 801fc3c:	f8df 8008 	ldr.w	r8, [pc, #8]	; 801fc48 <mbedtls_x509_sig_alg_gets+0xac>
 801fc40:	e7e5      	b.n	801fc0e <mbedtls_x509_sig_alg_gets+0x72>
 801fc42:	4801      	ldr	r0, [pc, #4]	; (801fc48 <mbedtls_x509_sig_alg_gets+0xac>)
 801fc44:	e7e9      	b.n	801fc1a <mbedtls_x509_sig_alg_gets+0x7e>
 801fc46:	bf00      	nop
 801fc48:	08032f7f 	.word	0x08032f7f
 801fc4c:	ffffd680 	.word	0xffffd680
 801fc50:	08031619 	.word	0x08031619
 801fc54:	08032f83 	.word	0x08032f83

0801fc58 <mbedtls_x509_key_size_helper>:
{
 801fc58:	b510      	push	{r4, lr}
 801fc5a:	4613      	mov	r3, r2
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fc5c:	4a06      	ldr	r2, [pc, #24]	; (801fc78 <mbedtls_x509_key_size_helper+0x20>)
{
 801fc5e:	460c      	mov	r4, r1
    ret = mbedtls_snprintf( p, n, "%s key size", name );
 801fc60:	f003 fdd8 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fc64:	2800      	cmp	r0, #0
 801fc66:	db05      	blt.n	801fc74 <mbedtls_x509_key_size_helper+0x1c>
    return( 0 );
 801fc68:	4b04      	ldr	r3, [pc, #16]	; (801fc7c <mbedtls_x509_key_size_helper+0x24>)
 801fc6a:	42a0      	cmp	r0, r4
 801fc6c:	bf2c      	ite	cs
 801fc6e:	4618      	movcs	r0, r3
 801fc70:	2000      	movcc	r0, #0
}
 801fc72:	bd10      	pop	{r4, pc}
    MBEDTLS_X509_SAFE_SNPRINTF;
 801fc74:	4801      	ldr	r0, [pc, #4]	; (801fc7c <mbedtls_x509_key_size_helper+0x24>)
 801fc76:	e7fc      	b.n	801fc72 <mbedtls_x509_key_size_helper+0x1a>
 801fc78:	08032f9a 	.word	0x08032f9a
 801fc7c:	ffffd680 	.word	0xffffd680

0801fc80 <mbedtls_x509_time_is_past>:

int mbedtls_x509_time_is_past( const mbedtls_x509_time *to )
{
 801fc80:	b500      	push	{lr}
 801fc82:	b089      	sub	sp, #36	; 0x24
 801fc84:	9001      	str	r0, [sp, #4]
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fc86:	a802      	add	r0, sp, #8
 801fc88:	f7ff fbbb 	bl	801f402 <x509_get_current_time>
 801fc8c:	b930      	cbnz	r0, 801fc9c <mbedtls_x509_time_is_past+0x1c>
        return( 1 );

    return( x509_check_time( &now, to ) );
 801fc8e:	9901      	ldr	r1, [sp, #4]
 801fc90:	a802      	add	r0, sp, #8
 801fc92:	f7ff fb83 	bl	801f39c <x509_check_time>
}
 801fc96:	b009      	add	sp, #36	; 0x24
 801fc98:	f85d fb04 	ldr.w	pc, [sp], #4
        return( 1 );
 801fc9c:	2001      	movs	r0, #1
 801fc9e:	e7fa      	b.n	801fc96 <mbedtls_x509_time_is_past+0x16>

0801fca0 <mbedtls_x509_time_is_future>:

int mbedtls_x509_time_is_future( const mbedtls_x509_time *from )
{
 801fca0:	b510      	push	{r4, lr}
 801fca2:	b086      	sub	sp, #24
 801fca4:	4604      	mov	r4, r0
    mbedtls_x509_time now;

    if( x509_get_current_time( &now ) != 0 )
 801fca6:	4668      	mov	r0, sp
 801fca8:	f7ff fbab 	bl	801f402 <x509_get_current_time>
 801fcac:	b928      	cbnz	r0, 801fcba <mbedtls_x509_time_is_future+0x1a>
        return( 1 );

    return( x509_check_time( from, &now ) );
 801fcae:	4669      	mov	r1, sp
 801fcb0:	4620      	mov	r0, r4
 801fcb2:	f7ff fb73 	bl	801f39c <x509_check_time>
}
 801fcb6:	b006      	add	sp, #24
 801fcb8:	bd10      	pop	{r4, pc}
        return( 1 );
 801fcba:	2001      	movs	r0, #1
 801fcbc:	e7fb      	b.n	801fcb6 <mbedtls_x509_time_is_future+0x16>

0801fcbe <mbedtls_x509_crl_init>:
/*
 * Initialize a CRL chain
 */
void mbedtls_x509_crl_init( mbedtls_x509_crl *crl )
{
    memset( crl, 0, sizeof(mbedtls_x509_crl) );
 801fcbe:	22f4      	movs	r2, #244	; 0xf4
 801fcc0:	2100      	movs	r1, #0
 801fcc2:	f002 bbb9 	b.w	8022438 <memset>
	...

0801fcc8 <mbedtls_x509_crl_free>:

/*
 * Unallocate all CRL data
 */
void mbedtls_x509_crl_free( mbedtls_x509_crl *crl )
{
 801fcc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_crl_entry *entry_cur;
    mbedtls_x509_crl_entry *entry_prv;

    if( crl == NULL )
 801fccc:	4605      	mov	r5, r0
 801fcce:	b350      	cbz	r0, 801fd26 <mbedtls_x509_crl_free+0x5e>
        return;

    do
    {
#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( crl_cur->sig_opts );
 801fcd0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 801fd70 <mbedtls_x509_crl_free+0xa8>
 801fcd4:	4604      	mov	r4, r0
 801fcd6:	4646      	mov	r6, r8
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fcd8:	2700      	movs	r7, #0
        mbedtls_free( crl_cur->sig_opts );
 801fcda:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801fcde:	f8d8 3000 	ldr.w	r3, [r8]
 801fce2:	4798      	blx	r3
#endif

        name_cur = crl_cur->issuer.next;
 801fce4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        while( name_cur != NULL )
 801fce6:	bb00      	cbnz	r0, 801fd2a <mbedtls_x509_crl_free+0x62>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        entry_cur = crl_cur->entry.next;
 801fce8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
        while( entry_cur != NULL )
 801fcec:	bb58      	cbnz	r0, 801fd46 <mbedtls_x509_crl_free+0x7e>
            entry_cur = entry_cur->next;
            mbedtls_zeroize( entry_prv, sizeof( mbedtls_x509_crl_entry ) );
            mbedtls_free( entry_prv );
        }

        if( crl_cur->raw.p != NULL )
 801fcee:	68a3      	ldr	r3, [r4, #8]
 801fcf0:	b133      	cbz	r3, 801fd00 <mbedtls_x509_crl_free+0x38>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fcf2:	6862      	ldr	r2, [r4, #4]
 801fcf4:	441a      	add	r2, r3
 801fcf6:	4293      	cmp	r3, r2
 801fcf8:	d133      	bne.n	801fd62 <mbedtls_x509_crl_free+0x9a>
        {
            mbedtls_zeroize( crl_cur->raw.p, crl_cur->raw.len );
            mbedtls_free( crl_cur->raw.p );
 801fcfa:	6833      	ldr	r3, [r6, #0]
 801fcfc:	68a0      	ldr	r0, [r4, #8]
 801fcfe:	4798      	blx	r3
        }

        crl_cur = crl_cur->next;
 801fd00:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
    }
    while( crl_cur != NULL );
 801fd04:	2c00      	cmp	r4, #0
 801fd06:	d1e8      	bne.n	801fcda <mbedtls_x509_crl_free+0x12>
 801fd08:	462f      	mov	r7, r5

    crl_cur = crl;
    do
    {
        crl_prv = crl_cur;
        crl_cur = crl_cur->next;
 801fd0a:	4638      	mov	r0, r7
 801fd0c:	f8d7 70f0 	ldr.w	r7, [r7, #240]	; 0xf0
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd10:	f100 02f4 	add.w	r2, r0, #244	; 0xf4
 801fd14:	4603      	mov	r3, r0
 801fd16:	4293      	cmp	r3, r2
 801fd18:	d126      	bne.n	801fd68 <mbedtls_x509_crl_free+0xa0>

        mbedtls_zeroize( crl_prv, sizeof( mbedtls_x509_crl ) );
        if( crl_prv != crl )
 801fd1a:	4285      	cmp	r5, r0
 801fd1c:	d001      	beq.n	801fd22 <mbedtls_x509_crl_free+0x5a>
            mbedtls_free( crl_prv );
 801fd1e:	6833      	ldr	r3, [r6, #0]
 801fd20:	4798      	blx	r3
    }
    while( crl_cur != NULL );
 801fd22:	2f00      	cmp	r7, #0
 801fd24:	d1f1      	bne.n	801fd0a <mbedtls_x509_crl_free+0x42>
}
 801fd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            name_cur = name_cur->next;
 801fd2a:	f8d0 9018 	ldr.w	r9, [r0, #24]
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd2e:	f100 0220 	add.w	r2, r0, #32
 801fd32:	4603      	mov	r3, r0
 801fd34:	4293      	cmp	r3, r2
 801fd36:	d103      	bne.n	801fd40 <mbedtls_x509_crl_free+0x78>
            mbedtls_free( name_prv );
 801fd38:	6833      	ldr	r3, [r6, #0]
 801fd3a:	4798      	blx	r3
            name_cur = name_cur->next;
 801fd3c:	4648      	mov	r0, r9
 801fd3e:	e7d2      	b.n	801fce6 <mbedtls_x509_crl_free+0x1e>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd40:	f803 7b01 	strb.w	r7, [r3], #1
 801fd44:	e7f6      	b.n	801fd34 <mbedtls_x509_crl_free+0x6c>
            entry_cur = entry_cur->next;
 801fd46:	f8d0 903c 	ldr.w	r9, [r0, #60]	; 0x3c
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd4a:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801fd4e:	4603      	mov	r3, r0
 801fd50:	4293      	cmp	r3, r2
 801fd52:	d103      	bne.n	801fd5c <mbedtls_x509_crl_free+0x94>
            mbedtls_free( entry_prv );
 801fd54:	6833      	ldr	r3, [r6, #0]
 801fd56:	4798      	blx	r3
            entry_cur = entry_cur->next;
 801fd58:	4648      	mov	r0, r9
 801fd5a:	e7c7      	b.n	801fcec <mbedtls_x509_crl_free+0x24>
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 801fd5c:	f803 7b01 	strb.w	r7, [r3], #1
 801fd60:	e7f6      	b.n	801fd50 <mbedtls_x509_crl_free+0x88>
 801fd62:	f803 7b01 	strb.w	r7, [r3], #1
 801fd66:	e7c6      	b.n	801fcf6 <mbedtls_x509_crl_free+0x2e>
 801fd68:	f803 4b01 	strb.w	r4, [r3], #1
 801fd6c:	e7d3      	b.n	801fd16 <mbedtls_x509_crl_free+0x4e>
 801fd6e:	bf00      	nop
 801fd70:	200005a4 	.word	0x200005a4

0801fd74 <mbedtls_x509_crl_parse_der>:
{
 801fd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd78:	460f      	mov	r7, r1
 801fd7a:	b092      	sub	sp, #72	; 0x48
 801fd7c:	4614      	mov	r4, r2
    if( crl == NULL || buf == NULL )
 801fd7e:	4605      	mov	r5, r0
 801fd80:	2800      	cmp	r0, #0
 801fd82:	f000 81bb 	beq.w	80200fc <mbedtls_x509_crl_parse_der+0x388>
 801fd86:	2900      	cmp	r1, #0
 801fd88:	f000 81b8 	beq.w	80200fc <mbedtls_x509_crl_parse_der+0x388>
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 801fd8c:	2300      	movs	r3, #0
 801fd8e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 801fd92:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801fd96:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 801fd9a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801fd9e:	9311      	str	r3, [sp, #68]	; 0x44
    while( crl->version != 0 && crl->next != NULL )
 801fda0:	69ab      	ldr	r3, [r5, #24]
 801fda2:	b1ab      	cbz	r3, 801fdd0 <mbedtls_x509_crl_parse_der+0x5c>
 801fda4:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 801fda8:	b963      	cbnz	r3, 801fdc4 <mbedtls_x509_crl_parse_der+0x50>
        crl->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl ) );
 801fdaa:	4ba8      	ldr	r3, [pc, #672]	; (802004c <mbedtls_x509_crl_parse_der+0x2d8>)
 801fdac:	21f4      	movs	r1, #244	; 0xf4
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	2001      	movs	r0, #1
 801fdb2:	4798      	blx	r3
 801fdb4:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
        if( crl->next == NULL )
 801fdb8:	b930      	cbnz	r0, 801fdc8 <mbedtls_x509_crl_parse_der+0x54>
            mbedtls_x509_crl_free( crl );
 801fdba:	4628      	mov	r0, r5
 801fdbc:	f7ff ff84 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 801fdc0:	4ca3      	ldr	r4, [pc, #652]	; (8020050 <mbedtls_x509_crl_parse_der+0x2dc>)
 801fdc2:	e021      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
 801fdc4:	461d      	mov	r5, r3
 801fdc6:	e7eb      	b.n	801fda0 <mbedtls_x509_crl_parse_der+0x2c>
        mbedtls_x509_crl_init( crl->next );
 801fdc8:	f7ff ff79 	bl	801fcbe <mbedtls_x509_crl_init>
        crl = crl->next;
 801fdcc:	f8d5 50f0 	ldr.w	r5, [r5, #240]	; 0xf0
    if( ( p = mbedtls_calloc( 1, buflen ) ) == NULL )
 801fdd0:	4e9e      	ldr	r6, [pc, #632]	; (802004c <mbedtls_x509_crl_parse_der+0x2d8>)
 801fdd2:	4621      	mov	r1, r4
 801fdd4:	6833      	ldr	r3, [r6, #0]
 801fdd6:	2001      	movs	r0, #1
 801fdd8:	4798      	blx	r3
 801fdda:	9005      	str	r0, [sp, #20]
 801fddc:	2800      	cmp	r0, #0
 801fdde:	d0ef      	beq.n	801fdc0 <mbedtls_x509_crl_parse_der+0x4c>
    memcpy( p, buf, buflen );
 801fde0:	4622      	mov	r2, r4
 801fde2:	4639      	mov	r1, r7
 801fde4:	f002 fb00 	bl	80223e8 <memcpy>
    crl->raw.p = p;
 801fde8:	9905      	ldr	r1, [sp, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fdea:	2330      	movs	r3, #48	; 0x30
    crl->raw.len = buflen;
 801fdec:	e9c5 4101 	strd	r4, r1, [r5, #4]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fdf0:	aa04      	add	r2, sp, #16
    end = p + buflen;
 801fdf2:	4421      	add	r1, r4
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fdf4:	a805      	add	r0, sp, #20
 801fdf6:	9103      	str	r1, [sp, #12]
 801fdf8:	f7ee f97e 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801fdfc:	9903      	ldr	r1, [sp, #12]
 801fdfe:	b138      	cbz	r0, 801fe10 <mbedtls_x509_crl_parse_der+0x9c>
        mbedtls_x509_crl_free( crl );
 801fe00:	4628      	mov	r0, r5
 801fe02:	f7ff ff61 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 801fe06:	4c93      	ldr	r4, [pc, #588]	; (8020054 <mbedtls_x509_crl_parse_der+0x2e0>)
}
 801fe08:	4620      	mov	r0, r4
 801fe0a:	b012      	add	sp, #72	; 0x48
 801fe0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if( len != (size_t) ( end - p ) )
 801fe10:	9b05      	ldr	r3, [sp, #20]
 801fe12:	9a04      	ldr	r2, [sp, #16]
 801fe14:	1ac8      	subs	r0, r1, r3
 801fe16:	4290      	cmp	r0, r2
 801fe18:	d004      	beq.n	801fe24 <mbedtls_x509_crl_parse_der+0xb0>
        mbedtls_x509_crl_free( crl );
 801fe1a:	4628      	mov	r0, r5
 801fe1c:	f7ff ff54 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 801fe20:	4c8d      	ldr	r4, [pc, #564]	; (8020058 <mbedtls_x509_crl_parse_der+0x2e4>)
 801fe22:	e7f1      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
    crl->tbs.p = p;
 801fe24:	616b      	str	r3, [r5, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801fe26:	aa04      	add	r2, sp, #16
 801fe28:	2330      	movs	r3, #48	; 0x30
 801fe2a:	a805      	add	r0, sp, #20
 801fe2c:	f7ee f964 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801fe30:	4604      	mov	r4, r0
 801fe32:	b128      	cbz	r0, 801fe40 <mbedtls_x509_crl_parse_der+0xcc>
        mbedtls_x509_crl_free( crl );
 801fe34:	4628      	mov	r0, r5
 801fe36:	f7ff ff47 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 801fe3a:	f5a4 5406 	sub.w	r4, r4, #8576	; 0x2180
 801fe3e:	e7e3      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
    end = p + len;
 801fe40:	e9dd 3704 	ldrd	r3, r7, [sp, #16]
 801fe44:	441f      	add	r7, r3
    crl->tbs.len = end - crl->tbs.p;
 801fe46:	696b      	ldr	r3, [r5, #20]
 801fe48:	1afb      	subs	r3, r7, r3
 801fe4a:	612b      	str	r3, [r5, #16]
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 801fe4c:	f105 0218 	add.w	r2, r5, #24
 801fe50:	4639      	mov	r1, r7
 801fe52:	a805      	add	r0, sp, #20
 801fe54:	f7ee f97c 	bl	800e150 <mbedtls_asn1_get_int>
 801fe58:	b118      	cbz	r0, 801fe62 <mbedtls_x509_crl_parse_der+0xee>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801fe5a:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fe5e:	d112      	bne.n	801fe86 <mbedtls_x509_crl_parse_der+0x112>
            *ver = 0;
 801fe60:	61ac      	str	r4, [r5, #24]
        ( ret = mbedtls_x509_get_alg( &p, end, &crl->sig_oid, &sig_params1 ) ) != 0 )
 801fe62:	f105 081c 	add.w	r8, r5, #28
 801fe66:	ab09      	add	r3, sp, #36	; 0x24
 801fe68:	4642      	mov	r2, r8
 801fe6a:	4639      	mov	r1, r7
 801fe6c:	a805      	add	r0, sp, #20
 801fe6e:	f7ff fb16 	bl	801f49e <mbedtls_x509_get_alg>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801fe72:	4604      	mov	r4, r0
 801fe74:	b950      	cbnz	r0, 801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( crl->version < 0 || crl->version > 1 )
 801fe76:	69ab      	ldr	r3, [r5, #24]
 801fe78:	2b01      	cmp	r3, #1
 801fe7a:	d90b      	bls.n	801fe94 <mbedtls_x509_crl_parse_der+0x120>
        mbedtls_x509_crl_free( crl );
 801fe7c:	4628      	mov	r0, r5
 801fe7e:	f7ff ff23 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 801fe82:	4c76      	ldr	r4, [pc, #472]	; (802005c <mbedtls_x509_crl_parse_der+0x2e8>)
 801fe84:	e7c0      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
    if( ( ret = x509_crl_get_version( &p, end, &crl->version ) ) != 0 ||
 801fe86:	f5b0 5408 	subs.w	r4, r0, #8704	; 0x2200
 801fe8a:	d0ea      	beq.n	801fe62 <mbedtls_x509_crl_parse_der+0xee>
        mbedtls_x509_crl_free( crl );
 801fe8c:	4628      	mov	r0, r5
 801fe8e:	f7ff ff1b 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( ret );
 801fe92:	e7b9      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
    crl->version++;
 801fe94:	3301      	adds	r3, #1
 801fe96:	61ab      	str	r3, [r5, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crl->sig_oid, &sig_params1,
 801fe98:	f105 03ec 	add.w	r3, r5, #236	; 0xec
 801fe9c:	9300      	str	r3, [sp, #0]
 801fe9e:	f105 02e8 	add.w	r2, r5, #232	; 0xe8
 801fea2:	f105 03e9 	add.w	r3, r5, #233	; 0xe9
 801fea6:	a909      	add	r1, sp, #36	; 0x24
 801fea8:	4640      	mov	r0, r8
 801feaa:	f7ff fd33 	bl	801f914 <mbedtls_x509_get_sig_alg>
 801feae:	b120      	cbz	r0, 801feba <mbedtls_x509_crl_parse_der+0x146>
        mbedtls_x509_crl_free( crl );
 801feb0:	4628      	mov	r0, r5
 801feb2:	f7ff ff09 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG );
 801feb6:	4c6a      	ldr	r4, [pc, #424]	; (8020060 <mbedtls_x509_crl_parse_der+0x2ec>)
 801feb8:	e7a6      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
    crl->issuer_raw.p = p;
 801feba:	9b05      	ldr	r3, [sp, #20]
 801febc:	632b      	str	r3, [r5, #48]	; 0x30
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 801febe:	aa04      	add	r2, sp, #16
 801fec0:	2330      	movs	r3, #48	; 0x30
 801fec2:	4639      	mov	r1, r7
 801fec4:	a805      	add	r0, sp, #20
 801fec6:	f7ee f917 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801feca:	4604      	mov	r4, r0
 801fecc:	2800      	cmp	r0, #0
 801fece:	d1b1      	bne.n	801fe34 <mbedtls_x509_crl_parse_der+0xc0>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crl->issuer ) ) != 0 )
 801fed0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801fed4:	f105 0234 	add.w	r2, r5, #52	; 0x34
 801fed8:	4419      	add	r1, r3
 801feda:	a805      	add	r0, sp, #20
 801fedc:	f7ff fbce 	bl	801f67c <mbedtls_x509_get_name>
 801fee0:	4604      	mov	r4, r0
 801fee2:	2800      	cmp	r0, #0
 801fee4:	d1d2      	bne.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    crl->issuer_raw.len = p - crl->issuer_raw.p;
 801fee6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801fee8:	9b05      	ldr	r3, [sp, #20]
 801feea:	1a9b      	subs	r3, r3, r2
 801feec:	62eb      	str	r3, [r5, #44]	; 0x2c
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->this_update ) ) != 0 )
 801feee:	f105 0254 	add.w	r2, r5, #84	; 0x54
 801fef2:	4639      	mov	r1, r7
 801fef4:	a805      	add	r0, sp, #20
 801fef6:	f7ff fc41 	bl	801f77c <mbedtls_x509_get_time>
 801fefa:	4604      	mov	r4, r0
 801fefc:	2800      	cmp	r0, #0
 801fefe:	d1c5      	bne.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( ( ret = mbedtls_x509_get_time( &p, end, &crl->next_update ) ) != 0 )
 801ff00:	f105 026c 	add.w	r2, r5, #108	; 0x6c
 801ff04:	4639      	mov	r1, r7
 801ff06:	a805      	add	r0, sp, #20
 801ff08:	f7ff fc38 	bl	801f77c <mbedtls_x509_get_time>
 801ff0c:	4604      	mov	r4, r0
 801ff0e:	b128      	cbz	r0, 801ff1c <mbedtls_x509_crl_parse_der+0x1a8>
        if( ret != ( MBEDTLS_ERR_X509_INVALID_DATE +
 801ff10:	4b54      	ldr	r3, [pc, #336]	; (8020064 <mbedtls_x509_crl_parse_der+0x2f0>)
 801ff12:	4298      	cmp	r0, r3
 801ff14:	d002      	beq.n	801ff1c <mbedtls_x509_crl_parse_der+0x1a8>
                        MBEDTLS_ERR_ASN1_UNEXPECTED_TAG ) &&
 801ff16:	3302      	adds	r3, #2
 801ff18:	4298      	cmp	r0, r3
 801ff1a:	d1b7      	bne.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( *p == end )
 801ff1c:	9b05      	ldr	r3, [sp, #20]
 801ff1e:	429f      	cmp	r7, r3
 801ff20:	d116      	bne.n	801ff50 <mbedtls_x509_crl_parse_der+0x1dc>
    if( crl->version == 2 )
 801ff22:	69ab      	ldr	r3, [r5, #24]
 801ff24:	2b02      	cmp	r3, #2
 801ff26:	d10e      	bne.n	801ff46 <mbedtls_x509_crl_parse_der+0x1d2>
    size_t len = 0;
 801ff28:	2300      	movs	r3, #0
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801ff2a:	f105 02c4 	add.w	r2, r5, #196	; 0xc4
 801ff2e:	4639      	mov	r1, r7
 801ff30:	a805      	add	r0, sp, #20
    size_t len = 0;
 801ff32:	9308      	str	r3, [sp, #32]
    if( ( ret = mbedtls_x509_get_ext( p, end, ext, 0) ) != 0 )
 801ff34:	f7ff fd38 	bl	801f9a8 <mbedtls_x509_get_ext>
 801ff38:	4604      	mov	r4, r0
 801ff3a:	2800      	cmp	r0, #0
 801ff3c:	f000 80a6 	beq.w	802008c <mbedtls_x509_crl_parse_der+0x318>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ff40:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801ff44:	d1a2      	bne.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( p != end )
 801ff46:	9b05      	ldr	r3, [sp, #20]
 801ff48:	42bb      	cmp	r3, r7
 801ff4a:	f000 80a3 	beq.w	8020094 <mbedtls_x509_crl_parse_der+0x320>
 801ff4e:	e764      	b.n	801fe1a <mbedtls_x509_crl_parse_der+0xa6>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &entry_len,
 801ff50:	2330      	movs	r3, #48	; 0x30
 801ff52:	aa06      	add	r2, sp, #24
 801ff54:	4639      	mov	r1, r7
 801ff56:	a805      	add	r0, sp, #20
 801ff58:	f7ee f8ce 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801ff5c:	4604      	mov	r4, r0
 801ff5e:	b118      	cbz	r0, 801ff68 <mbedtls_x509_crl_parse_der+0x1f4>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ff60:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801ff64:	d192      	bne.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
 801ff66:	e7dc      	b.n	801ff22 <mbedtls_x509_crl_parse_der+0x1ae>
    end = *p + entry_len;
 801ff68:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    if( ( ret = x509_get_entries( &p, end, &crl->entry ) ) != 0 )
 801ff6c:	f105 0884 	add.w	r8, r5, #132	; 0x84
    end = *p + entry_len;
 801ff70:	eb02 0903 	add.w	r9, r2, r3
    while( *p < end )
 801ff74:	9b05      	ldr	r3, [sp, #20]
 801ff76:	4599      	cmp	r9, r3
 801ff78:	d9d3      	bls.n	801ff22 <mbedtls_x509_crl_parse_der+0x1ae>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len2,
 801ff7a:	2330      	movs	r3, #48	; 0x30
 801ff7c:	aa07      	add	r2, sp, #28
 801ff7e:	4649      	mov	r1, r9
 801ff80:	a805      	add	r0, sp, #20
 801ff82:	f7ee f8b9 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801ff86:	4604      	mov	r4, r0
 801ff88:	2800      	cmp	r0, #0
 801ff8a:	f47f af7f 	bne.w	801fe8c <mbedtls_x509_crl_parse_der+0x118>
        cur_entry->raw.tag = **p;
 801ff8e:	9905      	ldr	r1, [sp, #20]
 801ff90:	780b      	ldrb	r3, [r1, #0]
 801ff92:	f8c8 3000 	str.w	r3, [r8]
        cur_entry->raw.len = len2;
 801ff96:	9b07      	ldr	r3, [sp, #28]
        cur_entry->raw.p = *p;
 801ff98:	f8c8 1008 	str.w	r1, [r8, #8]
        cur_entry->raw.len = len2;
 801ff9c:	f8c8 3004 	str.w	r3, [r8, #4]
        end2 = *p + len2;
 801ffa0:	4419      	add	r1, r3
        if( ( ret = mbedtls_x509_get_serial( p, end2, &cur_entry->serial ) ) != 0 )
 801ffa2:	f108 020c 	add.w	r2, r8, #12
 801ffa6:	a805      	add	r0, sp, #20
 801ffa8:	9103      	str	r1, [sp, #12]
 801ffaa:	f7ff fa4b 	bl	801f444 <mbedtls_x509_get_serial>
 801ffae:	4604      	mov	r4, r0
 801ffb0:	2800      	cmp	r0, #0
 801ffb2:	f47f af6b 	bne.w	801fe8c <mbedtls_x509_crl_parse_der+0x118>
        if( ( ret = mbedtls_x509_get_time( p, end2,
 801ffb6:	9903      	ldr	r1, [sp, #12]
 801ffb8:	f108 0218 	add.w	r2, r8, #24
 801ffbc:	a805      	add	r0, sp, #20
 801ffbe:	f7ff fbdd 	bl	801f77c <mbedtls_x509_get_time>
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	2800      	cmp	r0, #0
 801ffc6:	f47f af61 	bne.w	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( end <= *p )
 801ffca:	9b05      	ldr	r3, [sp, #20]
 801ffcc:	9903      	ldr	r1, [sp, #12]
    size_t len = 0;
 801ffce:	9008      	str	r0, [sp, #32]
    if( end <= *p )
 801ffd0:	4299      	cmp	r1, r3
 801ffd2:	d910      	bls.n	801fff6 <mbedtls_x509_crl_parse_der+0x282>
    ext->tag = **p;
 801ffd4:	781a      	ldrb	r2, [r3, #0]
 801ffd6:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
    ext->p = *p;
 801ffda:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &ext->len,
 801ffde:	f108 0234 	add.w	r2, r8, #52	; 0x34
 801ffe2:	2330      	movs	r3, #48	; 0x30
 801ffe4:	a805      	add	r0, sp, #20
 801ffe6:	f7ee f887 	bl	800e0f8 <mbedtls_asn1_get_tag>
 801ffea:	b180      	cbz	r0, 802000e <mbedtls_x509_crl_parse_der+0x29a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 801ffec:	f110 0f62 	cmn.w	r0, #98	; 0x62
 801fff0:	d11f      	bne.n	8020032 <mbedtls_x509_crl_parse_der+0x2be>
            ext->p = NULL;
 801fff2:	f8c8 4038 	str.w	r4, [r8, #56]	; 0x38
        if( *p < end )
 801fff6:	9b05      	ldr	r3, [sp, #20]
 801fff8:	4599      	cmp	r9, r3
 801fffa:	d9bb      	bls.n	801ff74 <mbedtls_x509_crl_parse_der+0x200>
            cur_entry->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crl_entry ) );
 801fffc:	6833      	ldr	r3, [r6, #0]
 801fffe:	2140      	movs	r1, #64	; 0x40
 8020000:	2001      	movs	r0, #1
 8020002:	4798      	blx	r3
 8020004:	f8c8 003c 	str.w	r0, [r8, #60]	; 0x3c
            if( cur_entry->next == NULL )
 8020008:	b1e8      	cbz	r0, 8020046 <mbedtls_x509_crl_parse_der+0x2d2>
 802000a:	4680      	mov	r8, r0
 802000c:	e7b2      	b.n	801ff74 <mbedtls_x509_crl_parse_der+0x200>
    end = *p + ext->len;
 802000e:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
 8020012:	9b05      	ldr	r3, [sp, #20]
 8020014:	eb03 0a01 	add.w	sl, r3, r1
    while( *p < end )
 8020018:	9b05      	ldr	r3, [sp, #20]
 802001a:	459a      	cmp	sl, r3
 802001c:	d802      	bhi.n	8020024 <mbedtls_x509_crl_parse_der+0x2b0>
    if( *p != end )
 802001e:	d0ea      	beq.n	801fff6 <mbedtls_x509_crl_parse_der+0x282>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8020020:	4c11      	ldr	r4, [pc, #68]	; (8020068 <mbedtls_x509_crl_parse_der+0x2f4>)
            mbedtls_x509_crl_free( crl );
 8020022:	e733      	b.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8020024:	2330      	movs	r3, #48	; 0x30
 8020026:	aa08      	add	r2, sp, #32
 8020028:	4651      	mov	r1, sl
 802002a:	a805      	add	r0, sp, #20
 802002c:	f7ee f864 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8020030:	b120      	cbz	r0, 802003c <mbedtls_x509_crl_parse_der+0x2c8>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8020032:	f5a0 5414 	sub.w	r4, r0, #9472	; 0x2500
        if( ( ret = x509_get_crl_entry_ext( p, end2,
 8020036:	2c00      	cmp	r4, #0
 8020038:	d0dd      	beq.n	801fff6 <mbedtls_x509_crl_parse_der+0x282>
 802003a:	e727      	b.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
        *p += len;
 802003c:	9b05      	ldr	r3, [sp, #20]
 802003e:	9a08      	ldr	r2, [sp, #32]
 8020040:	4413      	add	r3, r2
 8020042:	9305      	str	r3, [sp, #20]
 8020044:	e7e8      	b.n	8020018 <mbedtls_x509_crl_parse_der+0x2a4>
                return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8020046:	4c02      	ldr	r4, [pc, #8]	; (8020050 <mbedtls_x509_crl_parse_der+0x2dc>)
 8020048:	e720      	b.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
 802004a:	bf00      	nop
 802004c:	200005a0 	.word	0x200005a0
 8020050:	ffffd780 	.word	0xffffd780
 8020054:	ffffde80 	.word	0xffffde80
 8020058:	ffffde1a 	.word	0xffffde1a
 802005c:	ffffda80 	.word	0xffffda80
 8020060:	ffffda00 	.word	0xffffda00
 8020064:	ffffdb9e 	.word	0xffffdb9e
 8020068:	ffffda9a 	.word	0xffffda9a
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802006c:	2330      	movs	r3, #48	; 0x30
 802006e:	aa08      	add	r2, sp, #32
 8020070:	4639      	mov	r1, r7
 8020072:	a805      	add	r0, sp, #20
 8020074:	f7ee f840 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8020078:	b120      	cbz	r0, 8020084 <mbedtls_x509_crl_parse_der+0x310>
        if( ret != 0 )
 802007a:	f5b0 5414 	subs.w	r4, r0, #9472	; 0x2500
 802007e:	f43f af62 	beq.w	801ff46 <mbedtls_x509_crl_parse_der+0x1d2>
 8020082:	e703      	b.n	801fe8c <mbedtls_x509_crl_parse_der+0x118>
        *p += len;
 8020084:	9b05      	ldr	r3, [sp, #20]
 8020086:	9a08      	ldr	r2, [sp, #32]
 8020088:	4413      	add	r3, r2
 802008a:	9305      	str	r3, [sp, #20]
    while( *p < end )
 802008c:	9b05      	ldr	r3, [sp, #20]
 802008e:	429f      	cmp	r7, r3
 8020090:	d8ec      	bhi.n	802006c <mbedtls_x509_crl_parse_der+0x2f8>
    if( *p != end )
 8020092:	d1c5      	bne.n	8020020 <mbedtls_x509_crl_parse_der+0x2ac>
    end = crl->raw.p + crl->raw.len;
 8020094:	e9d5 3601 	ldrd	r3, r6, [r5, #4]
 8020098:	441e      	add	r6, r3
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 802009a:	aa0f      	add	r2, sp, #60	; 0x3c
 802009c:	ab0c      	add	r3, sp, #48	; 0x30
 802009e:	4631      	mov	r1, r6
 80200a0:	a805      	add	r0, sp, #20
 80200a2:	f7ff f9fc 	bl	801f49e <mbedtls_x509_get_alg>
 80200a6:	4604      	mov	r4, r0
 80200a8:	2800      	cmp	r0, #0
 80200aa:	f47f aeef 	bne.w	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( crl->sig_oid.len != sig_oid2.len ||
 80200ae:	6a2a      	ldr	r2, [r5, #32]
 80200b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200b2:	429a      	cmp	r2, r3
 80200b4:	d10e      	bne.n	80200d4 <mbedtls_x509_crl_parse_der+0x360>
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 80200b6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80200b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80200ba:	f002 f987 	bl	80223cc <memcmp>
    if( crl->sig_oid.len != sig_oid2.len ||
 80200be:	b948      	cbnz	r0, 80200d4 <mbedtls_x509_crl_parse_der+0x360>
        sig_params1.len != sig_params2.len ||
 80200c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        memcmp( crl->sig_oid.p, sig_oid2.p, crl->sig_oid.len ) != 0 ||
 80200c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80200c4:	429a      	cmp	r2, r3
 80200c6:	d105      	bne.n	80200d4 <mbedtls_x509_crl_parse_der+0x360>
        sig_params1.len != sig_params2.len ||
 80200c8:	b14a      	cbz	r2, 80200de <mbedtls_x509_crl_parse_der+0x36a>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 80200ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 80200cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80200ce:	f002 f97d 	bl	80223cc <memcmp>
        ( sig_params1.len != 0 &&
 80200d2:	b120      	cbz	r0, 80200de <mbedtls_x509_crl_parse_der+0x36a>
        mbedtls_x509_crl_free( crl );
 80200d4:	4628      	mov	r0, r5
 80200d6:	f7ff fdf7 	bl	801fcc8 <mbedtls_x509_crl_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 80200da:	4c09      	ldr	r4, [pc, #36]	; (8020100 <mbedtls_x509_crl_parse_der+0x38c>)
 80200dc:	e694      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crl->sig ) ) != 0 )
 80200de:	f105 02dc 	add.w	r2, r5, #220	; 0xdc
 80200e2:	4631      	mov	r1, r6
 80200e4:	a805      	add	r0, sp, #20
 80200e6:	f7ff fbf7 	bl	801f8d8 <mbedtls_x509_get_sig>
 80200ea:	4604      	mov	r4, r0
 80200ec:	2800      	cmp	r0, #0
 80200ee:	f47f aecd 	bne.w	801fe8c <mbedtls_x509_crl_parse_der+0x118>
    if( p != end )
 80200f2:	9b05      	ldr	r3, [sp, #20]
 80200f4:	42b3      	cmp	r3, r6
 80200f6:	f43f ae87 	beq.w	801fe08 <mbedtls_x509_crl_parse_der+0x94>
 80200fa:	e68e      	b.n	801fe1a <mbedtls_x509_crl_parse_der+0xa6>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 80200fc:	4c01      	ldr	r4, [pc, #4]	; (8020104 <mbedtls_x509_crl_parse_der+0x390>)
 80200fe:	e683      	b.n	801fe08 <mbedtls_x509_crl_parse_der+0x94>
 8020100:	ffffd980 	.word	0xffffd980
 8020104:	ffffd800 	.word	0xffffd800

08020108 <mbedtls_x509_crl_parse>:
{
 8020108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802010c:	460d      	mov	r5, r1
 802010e:	b089      	sub	sp, #36	; 0x24
 8020110:	4616      	mov	r6, r2
    if( chain == NULL || buf == NULL )
 8020112:	4607      	mov	r7, r0
 8020114:	2800      	cmp	r0, #0
 8020116:	d03f      	beq.n	8020198 <mbedtls_x509_crl_parse+0x90>
 8020118:	2900      	cmp	r1, #0
 802011a:	d03d      	beq.n	8020198 <mbedtls_x509_crl_parse+0x90>
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 802011c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80201b0 <mbedtls_x509_crl_parse+0xa8>
            ret = mbedtls_pem_read_buffer( &pem,
 8020120:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80201b4 <mbedtls_x509_crl_parse+0xac>
 8020124:	f8df a090 	ldr.w	sl, [pc, #144]	; 80201b8 <mbedtls_x509_crl_parse+0xb0>
    int is_pem = 0;
 8020128:	f04f 0b00 	mov.w	fp, #0
        mbedtls_pem_init( &pem );
 802012c:	a805      	add	r0, sp, #20
 802012e:	f7f5 fb26 	bl	801577e <mbedtls_pem_init>
        if( buflen == 0 || buf[buflen - 1] != '\0' )
 8020132:	b306      	cbz	r6, 8020176 <mbedtls_x509_crl_parse+0x6e>
 8020134:	19ab      	adds	r3, r5, r6
 8020136:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 802013a:	b9e3      	cbnz	r3, 8020176 <mbedtls_x509_crl_parse+0x6e>
            ret = mbedtls_pem_read_buffer( &pem,
 802013c:	aa04      	add	r2, sp, #16
 802013e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8020142:	9300      	str	r3, [sp, #0]
 8020144:	464a      	mov	r2, r9
 8020146:	462b      	mov	r3, r5
 8020148:	4651      	mov	r1, sl
 802014a:	a805      	add	r0, sp, #20
 802014c:	f7f5 fb1c 	bl	8015788 <mbedtls_pem_read_buffer>
        if( ret == 0 )
 8020150:	4604      	mov	r4, r0
 8020152:	b988      	cbnz	r0, 8020178 <mbedtls_x509_crl_parse+0x70>
            buflen -= use_len;
 8020154:	9b04      	ldr	r3, [sp, #16]
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 8020156:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 802015a:	4638      	mov	r0, r7
            buflen -= use_len;
 802015c:	1af6      	subs	r6, r6, r3
            buf += use_len;
 802015e:	441d      	add	r5, r3
            if( ( ret = mbedtls_x509_crl_parse_der( chain,
 8020160:	f7ff fe08 	bl	801fd74 <mbedtls_x509_crl_parse_der>
 8020164:	4604      	mov	r4, r0
 8020166:	b1a0      	cbz	r0, 8020192 <mbedtls_x509_crl_parse+0x8a>
            mbedtls_pem_free( &pem );
 8020168:	a805      	add	r0, sp, #20
 802016a:	f7f5 fc69 	bl	8015a40 <mbedtls_pem_free>
}
 802016e:	4620      	mov	r0, r4
 8020170:	b009      	add	sp, #36	; 0x24
 8020172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            ret = MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT;
 8020176:	4644      	mov	r4, r8
        else if( is_pem )
 8020178:	f1bb 0f00 	cmp.w	fp, #0
 802017c:	d1f4      	bne.n	8020168 <mbedtls_x509_crl_parse+0x60>
        mbedtls_pem_free( &pem );
 802017e:	a805      	add	r0, sp, #20
 8020180:	f7f5 fc5e 	bl	8015a40 <mbedtls_pem_free>
    while( is_pem && buflen > 1 );
 8020184:	f1bb 0f00 	cmp.w	fp, #0
 8020188:	d008      	beq.n	802019c <mbedtls_x509_crl_parse+0x94>
 802018a:	2e01      	cmp	r6, #1
 802018c:	d8ce      	bhi.n	802012c <mbedtls_x509_crl_parse+0x24>
        return( 0 );
 802018e:	2400      	movs	r4, #0
 8020190:	e7ed      	b.n	802016e <mbedtls_x509_crl_parse+0x66>
            is_pem = 1;
 8020192:	f04f 0b01 	mov.w	fp, #1
 8020196:	e7f2      	b.n	802017e <mbedtls_x509_crl_parse+0x76>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020198:	4c04      	ldr	r4, [pc, #16]	; (80201ac <mbedtls_x509_crl_parse+0xa4>)
 802019a:	e7e8      	b.n	802016e <mbedtls_x509_crl_parse+0x66>
        return( mbedtls_x509_crl_parse_der( chain, buf, buflen ) );
 802019c:	4632      	mov	r2, r6
 802019e:	4629      	mov	r1, r5
 80201a0:	4638      	mov	r0, r7
 80201a2:	f7ff fde7 	bl	801fd74 <mbedtls_x509_crl_parse_der>
 80201a6:	4604      	mov	r4, r0
 80201a8:	e7e1      	b.n	802016e <mbedtls_x509_crl_parse+0x66>
 80201aa:	bf00      	nop
 80201ac:	ffffd800 	.word	0xffffd800
 80201b0:	ffffef80 	.word	0xffffef80
 80201b4:	080330a1 	.word	0x080330a1
 80201b8:	080330b8 	.word	0x080330b8

080201bc <mbedtls_zeroize>:
#endif /* !_WIN32 || EFIX64 || EFI32 */
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80201bc:	4401      	add	r1, r0
 80201be:	2300      	movs	r3, #0
 80201c0:	4288      	cmp	r0, r1
 80201c2:	d100      	bne.n	80201c6 <mbedtls_zeroize+0xa>
}
 80201c4:	4770      	bx	lr
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
 80201c6:	f800 3b01 	strb.w	r3, [r0], #1
 80201ca:	e7f9      	b.n	80201c0 <mbedtls_zeroize+0x4>

080201cc <x509_memcasecmp>:

/*
 * Like memcmp, but case-insensitive and always returns -1 if different
 */
static int x509_memcasecmp( const void *s1, const void *s2, size_t len )
{
 80201cc:	b570      	push	{r4, r5, r6, lr}
    size_t i;
    unsigned char diff;
    const unsigned char *n1 = s1, *n2 = s2;

    for( i = 0; i < len; i++ )
 80201ce:	2400      	movs	r4, #0
 80201d0:	4294      	cmp	r4, r2
 80201d2:	d101      	bne.n	80201d8 <x509_memcasecmp+0xc>
        }

        return( -1 );
    }

    return( 0 );
 80201d4:	2000      	movs	r0, #0
}
 80201d6:	bd70      	pop	{r4, r5, r6, pc}
        diff = n1[i] ^ n2[i];
 80201d8:	5d03      	ldrb	r3, [r0, r4]
 80201da:	5d0d      	ldrb	r5, [r1, r4]
        if( diff == 0 )
 80201dc:	42ab      	cmp	r3, r5
        diff = n1[i] ^ n2[i];
 80201de:	ea83 0605 	eor.w	r6, r3, r5
        if( diff == 0 )
 80201e2:	d006      	beq.n	80201f2 <x509_memcasecmp+0x26>
        if( diff == 32 &&
 80201e4:	2e20      	cmp	r6, #32
 80201e6:	d106      	bne.n	80201f6 <x509_memcasecmp+0x2a>
            ( ( n1[i] >= 'a' && n1[i] <= 'z' ) ||
 80201e8:	f023 0320 	bic.w	r3, r3, #32
 80201ec:	3b41      	subs	r3, #65	; 0x41
 80201ee:	2b19      	cmp	r3, #25
 80201f0:	d801      	bhi.n	80201f6 <x509_memcasecmp+0x2a>
    for( i = 0; i < len; i++ )
 80201f2:	3401      	adds	r4, #1
 80201f4:	e7ec      	b.n	80201d0 <x509_memcasecmp+0x4>
        return( -1 );
 80201f6:	f04f 30ff 	mov.w	r0, #4294967295
 80201fa:	e7ec      	b.n	80201d6 <x509_memcasecmp+0xa>

080201fc <x509_name_cmp>:
 * or space folding.)
 *
 * Return 0 if equal, -1 otherwise.
 */
static int x509_name_cmp( const mbedtls_x509_name *a, const mbedtls_x509_name *b )
{
 80201fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80201fe:	4605      	mov	r5, r0
 8020200:	460c      	mov	r4, r1
    {
        if( a == NULL || b == NULL )
            return( -1 );

        /* type */
        if( a->oid.tag != b->oid.tag ||
 8020202:	682a      	ldr	r2, [r5, #0]
 8020204:	6823      	ldr	r3, [r4, #0]
 8020206:	429a      	cmp	r2, r3
 8020208:	d134      	bne.n	8020274 <x509_name_cmp+0x78>
            a->oid.len != b->oid.len ||
 802020a:	6863      	ldr	r3, [r4, #4]
        if( a->oid.tag != b->oid.tag ||
 802020c:	686a      	ldr	r2, [r5, #4]
 802020e:	429a      	cmp	r2, r3
 8020210:	d130      	bne.n	8020274 <x509_name_cmp+0x78>
            memcmp( a->oid.p, b->oid.p, b->oid.len ) != 0 )
 8020212:	68a1      	ldr	r1, [r4, #8]
 8020214:	68a8      	ldr	r0, [r5, #8]
 8020216:	f002 f8d9 	bl	80223cc <memcmp>
            a->oid.len != b->oid.len ||
 802021a:	bb58      	cbnz	r0, 8020274 <x509_name_cmp+0x78>
    if( a->tag == b->tag &&
 802021c:	68ef      	ldr	r7, [r5, #12]
 802021e:	68e6      	ldr	r6, [r4, #12]
 8020220:	42b7      	cmp	r7, r6
 8020222:	d108      	bne.n	8020236 <x509_name_cmp+0x3a>
        a->len == b->len &&
 8020224:	6923      	ldr	r3, [r4, #16]
    if( a->tag == b->tag &&
 8020226:	692a      	ldr	r2, [r5, #16]
 8020228:	429a      	cmp	r2, r3
 802022a:	d104      	bne.n	8020236 <x509_name_cmp+0x3a>
        memcmp( a->p, b->p, b->len ) == 0 )
 802022c:	6961      	ldr	r1, [r4, #20]
 802022e:	6968      	ldr	r0, [r5, #20]
 8020230:	f002 f8cc 	bl	80223cc <memcmp>
        a->len == b->len &&
 8020234:	b180      	cbz	r0, 8020258 <x509_name_cmp+0x5c>
    if( ( a->tag == MBEDTLS_ASN1_UTF8_STRING || a->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020236:	2f0c      	cmp	r7, #12
 8020238:	d001      	beq.n	802023e <x509_name_cmp+0x42>
 802023a:	2f13      	cmp	r7, #19
 802023c:	d11a      	bne.n	8020274 <x509_name_cmp+0x78>
 802023e:	2e0c      	cmp	r6, #12
 8020240:	d001      	beq.n	8020246 <x509_name_cmp+0x4a>
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020242:	2e13      	cmp	r6, #19
 8020244:	d116      	bne.n	8020274 <x509_name_cmp+0x78>
        a->len == b->len &&
 8020246:	6923      	ldr	r3, [r4, #16]
        ( b->tag == MBEDTLS_ASN1_UTF8_STRING || b->tag == MBEDTLS_ASN1_PRINTABLE_STRING ) &&
 8020248:	692a      	ldr	r2, [r5, #16]
 802024a:	429a      	cmp	r2, r3
 802024c:	d112      	bne.n	8020274 <x509_name_cmp+0x78>
        x509_memcasecmp( a->p, b->p, b->len ) == 0 )
 802024e:	6961      	ldr	r1, [r4, #20]
 8020250:	6968      	ldr	r0, [r5, #20]
 8020252:	f7ff ffbb 	bl	80201cc <x509_memcasecmp>
        a->len == b->len &&
 8020256:	b968      	cbnz	r0, 8020274 <x509_name_cmp+0x78>
        /* value */
        if( x509_string_cmp( &a->val, &b->val ) != 0 )
            return( -1 );

        /* structure of the list of sets */
        if( a->next_merged != b->next_merged )
 8020258:	7f2a      	ldrb	r2, [r5, #28]
 802025a:	7f23      	ldrb	r3, [r4, #28]
 802025c:	429a      	cmp	r2, r3
 802025e:	d109      	bne.n	8020274 <x509_name_cmp+0x78>
            return( -1 );

        a = a->next;
 8020260:	69ad      	ldr	r5, [r5, #24]
        b = b->next;
 8020262:	69a4      	ldr	r4, [r4, #24]
    while( a != NULL || b != NULL )
 8020264:	b925      	cbnz	r5, 8020270 <x509_name_cmp+0x74>
 8020266:	1e20      	subs	r0, r4, #0
 8020268:	bf18      	it	ne
 802026a:	2001      	movne	r0, #1
 802026c:	4240      	negs	r0, r0
    }

    /* a == NULL == b */
    return( 0 );
}
 802026e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if( a == NULL || b == NULL )
 8020270:	2c00      	cmp	r4, #0
 8020272:	d1c6      	bne.n	8020202 <x509_name_cmp+0x6>
            return( -1 );
 8020274:	f04f 30ff 	mov.w	r0, #4294967295
 8020278:	e7f9      	b.n	802026e <x509_name_cmp+0x72>

0802027a <x509_check_wildcard>:
{
 802027a:	b570      	push	{r4, r5, r6, lr}
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 802027c:	684d      	ldr	r5, [r1, #4]
 802027e:	2d02      	cmp	r5, #2
{
 8020280:	4604      	mov	r4, r0
    if( name->len < 3 || name->p[0] != '*' || name->p[1] != '.' )
 8020282:	d924      	bls.n	80202ce <x509_check_wildcard+0x54>
 8020284:	688e      	ldr	r6, [r1, #8]
 8020286:	7833      	ldrb	r3, [r6, #0]
 8020288:	2b2a      	cmp	r3, #42	; 0x2a
 802028a:	d120      	bne.n	80202ce <x509_check_wildcard+0x54>
 802028c:	7873      	ldrb	r3, [r6, #1]
 802028e:	2b2e      	cmp	r3, #46	; 0x2e
 8020290:	d11d      	bne.n	80202ce <x509_check_wildcard+0x54>
    size_t cn_idx = 0, cn_len = strlen( cn );
 8020292:	f7df ffa7 	bl	80001e4 <strlen>
 8020296:	4623      	mov	r3, r4
    for( i = 0; i < cn_len; ++i )
 8020298:	2200      	movs	r2, #0
 802029a:	4282      	cmp	r2, r0
 802029c:	d102      	bne.n	80202a4 <x509_check_wildcard+0x2a>
        return( -1 );
 802029e:	f04f 30ff 	mov.w	r0, #4294967295
 80202a2:	e013      	b.n	80202cc <x509_check_wildcard+0x52>
        if( cn[i] == '.' )
 80202a4:	4619      	mov	r1, r3
 80202a6:	3301      	adds	r3, #1
 80202a8:	780c      	ldrb	r4, [r1, #0]
 80202aa:	2c2e      	cmp	r4, #46	; 0x2e
 80202ac:	d001      	beq.n	80202b2 <x509_check_wildcard+0x38>
    for( i = 0; i < cn_len; ++i )
 80202ae:	3201      	adds	r2, #1
 80202b0:	e7f3      	b.n	802029a <x509_check_wildcard+0x20>
    if( cn_idx == 0 )
 80202b2:	2a00      	cmp	r2, #0
 80202b4:	d0f3      	beq.n	802029e <x509_check_wildcard+0x24>
    if( cn_len - cn_idx == name->len - 1 &&
 80202b6:	3d01      	subs	r5, #1
 80202b8:	1a82      	subs	r2, r0, r2
 80202ba:	42aa      	cmp	r2, r5
 80202bc:	d1ef      	bne.n	802029e <x509_check_wildcard+0x24>
        x509_memcasecmp( name->p + 1, cn + cn_idx, name->len - 1 ) == 0 )
 80202be:	1c70      	adds	r0, r6, #1
 80202c0:	f7ff ff84 	bl	80201cc <x509_memcasecmp>
    if( cn_len - cn_idx == name->len - 1 &&
 80202c4:	3800      	subs	r0, #0
 80202c6:	bf18      	it	ne
 80202c8:	2001      	movne	r0, #1
 80202ca:	4240      	negs	r0, r0
}
 80202cc:	bd70      	pop	{r4, r5, r6, pc}
        return( 0 );
 80202ce:	2000      	movs	r0, #0
 80202d0:	e7fc      	b.n	80202cc <x509_check_wildcard+0x52>

080202d2 <x509_profile_check_key>:
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80202d2:	2901      	cmp	r1, #1
{
 80202d4:	b510      	push	{r4, lr}
 80202d6:	4604      	mov	r4, r0
 80202d8:	4610      	mov	r0, r2
    if( pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS )
 80202da:	d001      	beq.n	80202e0 <x509_profile_check_key+0xe>
 80202dc:	2906      	cmp	r1, #6
 80202de:	d108      	bne.n	80202f2 <x509_profile_check_key+0x20>
        if( mbedtls_pk_get_bitlen( pk ) >= profile->rsa_min_bitlen )
 80202e0:	f7f5 fc74 	bl	8015bcc <mbedtls_pk_get_bitlen>
 80202e4:	68e3      	ldr	r3, [r4, #12]
 80202e6:	4298      	cmp	r0, r3
 80202e8:	f04f 30ff 	mov.w	r0, #4294967295
 80202ec:	bf28      	it	cs
 80202ee:	2000      	movcs	r0, #0
}
 80202f0:	bd10      	pop	{r4, pc}
    if( pk_alg == MBEDTLS_PK_ECDSA ||
 80202f2:	3902      	subs	r1, #2
 80202f4:	2902      	cmp	r1, #2
 80202f6:	d80b      	bhi.n	8020310 <x509_profile_check_key+0x3e>
        mbedtls_ecp_group_id gid = mbedtls_pk_ec( *pk )->grp.id;
 80202f8:	6853      	ldr	r3, [r2, #4]
        if( ( profile->allowed_curves & MBEDTLS_X509_ID_FLAG( gid ) ) != 0 )
 80202fa:	781b      	ldrb	r3, [r3, #0]
 80202fc:	1e5a      	subs	r2, r3, #1
 80202fe:	2301      	movs	r3, #1
 8020300:	4093      	lsls	r3, r2
 8020302:	68a2      	ldr	r2, [r4, #8]
 8020304:	4213      	tst	r3, r2
 8020306:	bf0c      	ite	eq
 8020308:	f04f 30ff 	moveq.w	r0, #4294967295
 802030c:	2000      	movne	r0, #0
 802030e:	e7ef      	b.n	80202f0 <x509_profile_check_key+0x1e>
    return( -1 );
 8020310:	f04f 30ff 	mov.w	r0, #4294967295
 8020314:	e7ec      	b.n	80202f0 <x509_profile_check_key+0x1e>
	...

08020318 <mbedtls_x509_crt_info>:
{
 8020318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802031c:	4680      	mov	r8, r0
 802031e:	b08d      	sub	sp, #52	; 0x34
 8020320:	468a      	mov	sl, r1
 8020322:	4691      	mov	r9, r2
    if( NULL == crt )
 8020324:	461f      	mov	r7, r3
 8020326:	b95b      	cbnz	r3, 8020340 <mbedtls_x509_crt_info+0x28>
        ret = mbedtls_snprintf( p, n, "\nCertificate is uninitialised!\n" );
 8020328:	4a9a      	ldr	r2, [pc, #616]	; (8020594 <mbedtls_x509_crt_info+0x27c>)
 802032a:	f003 fa73 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802032e:	2800      	cmp	r0, #0
 8020330:	da01      	bge.n	8020336 <mbedtls_x509_crt_info+0x1e>
 8020332:	4899      	ldr	r0, [pc, #612]	; (8020598 <mbedtls_x509_crt_info+0x280>)
 8020334:	e001      	b.n	802033a <mbedtls_x509_crt_info+0x22>
 8020336:	4550      	cmp	r0, sl
 8020338:	d2fb      	bcs.n	8020332 <mbedtls_x509_crt_info+0x1a>
}
 802033a:	b00d      	add	sp, #52	; 0x34
 802033c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = mbedtls_snprintf( p, n, "%scert. version     : %d\n",
 8020340:	699b      	ldr	r3, [r3, #24]
 8020342:	9300      	str	r3, [sp, #0]
 8020344:	4613      	mov	r3, r2
 8020346:	4a95      	ldr	r2, [pc, #596]	; (802059c <mbedtls_x509_crt_info+0x284>)
 8020348:	f003 fa64 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802034c:	2800      	cmp	r0, #0
 802034e:	dbf0      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 8020350:	4550      	cmp	r0, sl
 8020352:	d2ee      	bcs.n	8020332 <mbedtls_x509_crt_info+0x1a>
 8020354:	ebaa 0500 	sub.w	r5, sl, r0
 8020358:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "%sserial number     : ",
 802035a:	4a91      	ldr	r2, [pc, #580]	; (80205a0 <mbedtls_x509_crt_info+0x288>)
 802035c:	464b      	mov	r3, r9
 802035e:	4629      	mov	r1, r5
 8020360:	4640      	mov	r0, r8
 8020362:	f003 fa57 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020366:	2800      	cmp	r0, #0
 8020368:	dbe3      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 802036a:	4285      	cmp	r5, r0
 802036c:	d9e1      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
 802036e:	1a2d      	subs	r5, r5, r0
 8020370:	4480      	add	r8, r0
    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
 8020372:	f107 021c 	add.w	r2, r7, #28
 8020376:	4629      	mov	r1, r5
 8020378:	4640      	mov	r0, r8
 802037a:	f7ff fbc1 	bl	801fb00 <mbedtls_x509_serial_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802037e:	2800      	cmp	r0, #0
 8020380:	dbd7      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 8020382:	4285      	cmp	r5, r0
 8020384:	d9d5      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
 8020386:	1a2d      	subs	r5, r5, r0
 8020388:	eb08 0600 	add.w	r6, r8, r0
    ret = mbedtls_snprintf( p, n, "\n%sissuer name       : ", prefix );
 802038c:	4a85      	ldr	r2, [pc, #532]	; (80205a4 <mbedtls_x509_crt_info+0x28c>)
 802038e:	464b      	mov	r3, r9
 8020390:	4629      	mov	r1, r5
 8020392:	4630      	mov	r0, r6
 8020394:	f003 fa3e 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020398:	2800      	cmp	r0, #0
 802039a:	dbca      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 802039c:	4285      	cmp	r5, r0
 802039e:	d9c8      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
 80203a0:	1a2d      	subs	r5, r5, r0
 80203a2:	4406      	add	r6, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
 80203a4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80203a8:	4629      	mov	r1, r5
 80203aa:	4630      	mov	r0, r6
 80203ac:	f7ff fb26 	bl	801f9fc <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203b0:	2800      	cmp	r0, #0
 80203b2:	dbbe      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 80203b4:	4285      	cmp	r5, r0
 80203b6:	d9bc      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
 80203b8:	1a2d      	subs	r5, r5, r0
 80203ba:	1834      	adds	r4, r6, r0
    ret = mbedtls_snprintf( p, n, "\n%ssubject name      : ", prefix );
 80203bc:	4a7a      	ldr	r2, [pc, #488]	; (80205a8 <mbedtls_x509_crt_info+0x290>)
 80203be:	464b      	mov	r3, r9
 80203c0:	4629      	mov	r1, r5
 80203c2:	4620      	mov	r0, r4
 80203c4:	f003 fa26 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203c8:	2800      	cmp	r0, #0
 80203ca:	dbb2      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 80203cc:	4285      	cmp	r5, r0
 80203ce:	d9b0      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
 80203d0:	1a2d      	subs	r5, r5, r0
 80203d2:	4404      	add	r4, r0
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
 80203d4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80203d8:	4629      	mov	r1, r5
 80203da:	4620      	mov	r0, r4
 80203dc:	f7ff fb0e 	bl	801f9fc <mbedtls_x509_dn_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80203e0:	2800      	cmp	r0, #0
 80203e2:	dba6      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 80203e4:	4285      	cmp	r5, r0
 80203e6:	d9a4      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 80203e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80203ec:	9305      	str	r3, [sp, #20]
 80203ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80203f2:	9304      	str	r3, [sp, #16]
 80203f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80203f8:	9303      	str	r3, [sp, #12]
 80203fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80203fe:	9302      	str	r3, [sp, #8]
 8020400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8020404:	9301      	str	r3, [sp, #4]
 8020406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 802040a:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 802040c:	1a2d      	subs	r5, r5, r0
 802040e:	4404      	add	r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sissued  on        : " \
 8020410:	4a66      	ldr	r2, [pc, #408]	; (80205ac <mbedtls_x509_crt_info+0x294>)
 8020412:	464b      	mov	r3, r9
 8020414:	4629      	mov	r1, r5
 8020416:	4620      	mov	r0, r4
 8020418:	f003 f9fc 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802041c:	2800      	cmp	r0, #0
 802041e:	db88      	blt.n	8020332 <mbedtls_x509_crt_info+0x1a>
 8020420:	4285      	cmp	r5, r0
 8020422:	d986      	bls.n	8020332 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 8020424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8020428:	9305      	str	r3, [sp, #20]
 802042a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802042e:	9304      	str	r3, [sp, #16]
 8020430:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8020434:	9303      	str	r3, [sp, #12]
 8020436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802043a:	9302      	str	r3, [sp, #8]
 802043c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8020440:	9301      	str	r3, [sp, #4]
 8020442:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8020446:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020448:	1a2d      	subs	r5, r5, r0
 802044a:	eb04 0800 	add.w	r8, r4, r0
    ret = mbedtls_snprintf( p, n, "\n%sexpires on        : " \
 802044e:	4a58      	ldr	r2, [pc, #352]	; (80205b0 <mbedtls_x509_crt_info+0x298>)
 8020450:	464b      	mov	r3, r9
 8020452:	4629      	mov	r1, r5
 8020454:	4640      	mov	r0, r8
 8020456:	f003 f9dd 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 802045a:	2800      	cmp	r0, #0
 802045c:	f6ff af69 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020460:	4285      	cmp	r5, r0
 8020462:	f67f af66 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020466:	1a2d      	subs	r5, r5, r0
 8020468:	4480      	add	r8, r0
    ret = mbedtls_snprintf( p, n, "\n%ssigned using      : ", prefix );
 802046a:	4a52      	ldr	r2, [pc, #328]	; (80205b4 <mbedtls_x509_crt_info+0x29c>)
 802046c:	464b      	mov	r3, r9
 802046e:	4629      	mov	r1, r5
 8020470:	4640      	mov	r0, r8
 8020472:	f003 f9cf 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 8020476:	2800      	cmp	r0, #0
 8020478:	f6ff af5b 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802047c:	4285      	cmp	r5, r0
 802047e:	f67f af58 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 8020482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8020486:	9301      	str	r3, [sp, #4]
 8020488:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 802048c:	9300      	str	r3, [sp, #0]
    MBEDTLS_X509_SAFE_SNPRINTF;
 802048e:	1a2d      	subs	r5, r5, r0
 8020490:	4480      	add	r8, r0
    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
 8020492:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 8020496:	f107 0228 	add.w	r2, r7, #40	; 0x28
 802049a:	4629      	mov	r1, r5
 802049c:	4640      	mov	r0, r8
 802049e:	f7ff fb7d 	bl	801fb9c <mbedtls_x509_sig_alg_gets>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204a2:	1e06      	subs	r6, r0, #0
 80204a4:	f6ff af45 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80204a8:	42b5      	cmp	r5, r6
 80204aa:	f67f af42 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
    if( ( ret = mbedtls_x509_key_size_helper( key_size_str, BEFORE_COLON,
 80204ae:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
 80204b2:	4620      	mov	r0, r4
 80204b4:	f7f5 fbfe 	bl	8015cb4 <mbedtls_pk_get_name>
 80204b8:	f10d 0b1c 	add.w	fp, sp, #28
 80204bc:	4602      	mov	r2, r0
 80204be:	2112      	movs	r1, #18
 80204c0:	4658      	mov	r0, fp
 80204c2:	f7ff fbc9 	bl	801fc58 <mbedtls_x509_key_size_helper>
 80204c6:	2800      	cmp	r0, #0
 80204c8:	f47f af37 	bne.w	802033a <mbedtls_x509_crt_info+0x22>
                          (int) mbedtls_pk_get_bitlen( &crt->pk ) );
 80204cc:	4620      	mov	r0, r4
 80204ce:	f7f5 fb7d 	bl	8015bcc <mbedtls_pk_get_bitlen>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204d2:	1bad      	subs	r5, r5, r6
 80204d4:	44b0      	add	r8, r6
    ret = mbedtls_snprintf( p, n, "\n%s%-" BC "s: %d bits", prefix, key_size_str,
 80204d6:	e9cd b000 	strd	fp, r0, [sp]
 80204da:	4a37      	ldr	r2, [pc, #220]	; (80205b8 <mbedtls_x509_crt_info+0x2a0>)
 80204dc:	464b      	mov	r3, r9
 80204de:	4629      	mov	r1, r5
 80204e0:	4640      	mov	r0, r8
 80204e2:	f003 f997 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204e6:	2800      	cmp	r0, #0
 80204e8:	f6ff af23 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80204ec:	4285      	cmp	r5, r0
 80204ee:	f67f af20 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 80204f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80204f6:	05de      	lsls	r6, r3, #23
    MBEDTLS_X509_SAFE_SNPRINTF;
 80204f8:	eba5 0400 	sub.w	r4, r5, r0
 80204fc:	eb08 0500 	add.w	r5, r8, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_BASIC_CONSTRAINTS )
 8020500:	d528      	bpl.n	8020554 <mbedtls_x509_crt_info+0x23c>
        ret = mbedtls_snprintf( p, n, "\n%sbasic constraints : CA=%s", prefix,
 8020502:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8020506:	4a2d      	ldr	r2, [pc, #180]	; (80205bc <mbedtls_x509_crt_info+0x2a4>)
 8020508:	4b2d      	ldr	r3, [pc, #180]	; (80205c0 <mbedtls_x509_crt_info+0x2a8>)
 802050a:	2900      	cmp	r1, #0
 802050c:	bf08      	it	eq
 802050e:	4613      	moveq	r3, r2
 8020510:	9300      	str	r3, [sp, #0]
 8020512:	4a2c      	ldr	r2, [pc, #176]	; (80205c4 <mbedtls_x509_crt_info+0x2ac>)
 8020514:	464b      	mov	r3, r9
 8020516:	4621      	mov	r1, r4
 8020518:	4628      	mov	r0, r5
 802051a:	f003 f97b 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 802051e:	2800      	cmp	r0, #0
 8020520:	f6ff af07 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020524:	4284      	cmp	r4, r0
 8020526:	f67f af04 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
        if( crt->max_pathlen > 0 )
 802052a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 802052e:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020530:	eba4 0400 	sub.w	r4, r4, r0
 8020534:	4405      	add	r5, r0
        if( crt->max_pathlen > 0 )
 8020536:	dd0d      	ble.n	8020554 <mbedtls_x509_crt_info+0x23c>
            ret = mbedtls_snprintf( p, n, ", max_pathlen=%d", crt->max_pathlen - 1 );
 8020538:	4a23      	ldr	r2, [pc, #140]	; (80205c8 <mbedtls_x509_crt_info+0x2b0>)
 802053a:	3b01      	subs	r3, #1
 802053c:	4621      	mov	r1, r4
 802053e:	4628      	mov	r0, r5
 8020540:	f003 f968 	bl	8023814 <sniprintf>
            MBEDTLS_X509_SAFE_SNPRINTF;
 8020544:	2800      	cmp	r0, #0
 8020546:	f6ff aef4 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802054a:	4284      	cmp	r4, r0
 802054c:	f67f aef1 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020550:	1a24      	subs	r4, r4, r0
 8020552:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8020554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020558:	0698      	lsls	r0, r3, #26
 802055a:	d54e      	bpl.n	80205fa <mbedtls_x509_crt_info+0x2e2>
        ret = mbedtls_snprintf( p, n, "\n%ssubject alt name  : ", prefix );
 802055c:	4a1b      	ldr	r2, [pc, #108]	; (80205cc <mbedtls_x509_crt_info+0x2b4>)
 802055e:	464b      	mov	r3, r9
 8020560:	4621      	mov	r1, r4
 8020562:	4628      	mov	r0, r5
 8020564:	f003 f956 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020568:	2800      	cmp	r0, #0
 802056a:	f6ff aee2 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802056e:	42a0      	cmp	r0, r4
 8020570:	f4bf aedf 	bcs.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020574:	1a24      	subs	r4, r4, r0
 8020576:	4405      	add	r5, r0
    size_t sep_len = 0;
 8020578:	2100      	movs	r1, #0
    const char *sep = "";
 802057a:	f8df c058 	ldr.w	ip, [pc, #88]	; 80205d4 <mbedtls_x509_crt_info+0x2bc>
        sep = ", ";
 802057e:	4814      	ldr	r0, [pc, #80]	; (80205d0 <mbedtls_x509_crt_info+0x2b8>)
        if( ( ret = x509_info_subject_alt_name( &p, &n,
 8020580:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
    while( cur != NULL )
 8020584:	460e      	mov	r6, r1
        if( cur->buf.len + sep_len >= n )
 8020586:	6853      	ldr	r3, [r2, #4]
 8020588:	440b      	add	r3, r1
 802058a:	42a3      	cmp	r3, r4
 802058c:	d324      	bcc.n	80205d8 <mbedtls_x509_crt_info+0x2c0>
            *p = '\0';
 802058e:	702e      	strb	r6, [r5, #0]
            return( MBEDTLS_ERR_X509_BUFFER_TOO_SMALL );
 8020590:	e6cf      	b.n	8020332 <mbedtls_x509_crt_info+0x1a>
 8020592:	bf00      	nop
 8020594:	080330d1 	.word	0x080330d1
 8020598:	ffffd680 	.word	0xffffd680
 802059c:	080330f1 	.word	0x080330f1
 80205a0:	0803310b 	.word	0x0803310b
 80205a4:	08033122 	.word	0x08033122
 80205a8:	0803313a 	.word	0x0803313a
 80205ac:	08033152 	.word	0x08033152
 80205b0:	08033187 	.word	0x08033187
 80205b4:	080331bc 	.word	0x080331bc
 80205b8:	080331d4 	.word	0x080331d4
 80205bc:	0802f103 	.word	0x0802f103
 80205c0:	0802f0fe 	.word	0x0802f0fe
 80205c4:	080331e6 	.word	0x080331e6
 80205c8:	08033203 	.word	0x08033203
 80205cc:	08033214 	.word	0x08033214
 80205d0:	08032f6d 	.word	0x08032f6d
 80205d4:	080303e5 	.word	0x080303e5
        n -= cur->buf.len + sep_len;
 80205d8:	1ae4      	subs	r4, r4, r3
        for( i = 0; i < sep_len; i++ )
 80205da:	2300      	movs	r3, #0
 80205dc:	428b      	cmp	r3, r1
 80205de:	f040 818d 	bne.w	80208fc <mbedtls_x509_crt_info+0x5e4>
 80205e2:	441d      	add	r5, r3
        for( i = 0; i < cur->buf.len; i++ )
 80205e4:	2300      	movs	r3, #0
 80205e6:	6851      	ldr	r1, [r2, #4]
 80205e8:	428b      	cmp	r3, r1
 80205ea:	f0c0 818d 	bcc.w	8020908 <mbedtls_x509_crt_info+0x5f0>
        cur = cur->next;
 80205ee:	68d2      	ldr	r2, [r2, #12]
        sep_len = 2;
 80205f0:	2102      	movs	r1, #2
        sep = ", ";
 80205f2:	4684      	mov	ip, r0
    while( cur != NULL )
 80205f4:	2a00      	cmp	r2, #0
 80205f6:	d1c6      	bne.n	8020586 <mbedtls_x509_crt_info+0x26e>
    *p = '\0';
 80205f8:	702a      	strb	r2, [r5, #0]
    if( crt->ext_types & MBEDTLS_X509_EXT_NS_CERT_TYPE )
 80205fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80205fe:	03d9      	lsls	r1, r3, #15
 8020600:	f140 8093 	bpl.w	802072a <mbedtls_x509_crt_info+0x412>
        ret = mbedtls_snprintf( p, n, "\n%scert. type        : ", prefix );
 8020604:	4ac3      	ldr	r2, [pc, #780]	; (8020914 <mbedtls_x509_crt_info+0x5fc>)
 8020606:	464b      	mov	r3, r9
 8020608:	4621      	mov	r1, r4
 802060a:	4628      	mov	r0, r5
 802060c:	f003 f902 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020610:	2800      	cmp	r0, #0
 8020612:	f6ff ae8e 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020616:	42a0      	cmp	r0, r4
 8020618:	f4bf ae8b 	bcs.w	8020332 <mbedtls_x509_crt_info+0x1a>
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 802061c:	f997 3118 	ldrsb.w	r3, [r7, #280]	; 0x118
        if( ( ret = x509_info_cert_type( &p, &n, crt->ns_cert_type ) ) != 0 )
 8020620:	f897 6118 	ldrb.w	r6, [r7, #280]	; 0x118
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 8020624:	2b00      	cmp	r3, #0
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020626:	eba4 0400 	sub.w	r4, r4, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 802062a:	4bbb      	ldr	r3, [pc, #748]	; (8020918 <mbedtls_x509_crt_info+0x600>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 802062c:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT,         "SSL Client" );
 802062e:	da0d      	bge.n	802064c <mbedtls_x509_crt_info+0x334>
 8020630:	4aba      	ldr	r2, [pc, #744]	; (802091c <mbedtls_x509_crt_info+0x604>)
 8020632:	4621      	mov	r1, r4
 8020634:	4628      	mov	r0, r5
 8020636:	f003 f8ed 	bl	8023814 <sniprintf>
 802063a:	2800      	cmp	r0, #0
 802063c:	f6ff ae79 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020640:	4284      	cmp	r4, r0
 8020642:	f67f ae76 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020646:	4bb6      	ldr	r3, [pc, #728]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020648:	1a24      	subs	r4, r4, r0
 802064a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER,         "SSL Server" );
 802064c:	0672      	lsls	r2, r6, #25
 802064e:	d50d      	bpl.n	802066c <mbedtls_x509_crt_info+0x354>
 8020650:	4ab4      	ldr	r2, [pc, #720]	; (8020924 <mbedtls_x509_crt_info+0x60c>)
 8020652:	4621      	mov	r1, r4
 8020654:	4628      	mov	r0, r5
 8020656:	f003 f8dd 	bl	8023814 <sniprintf>
 802065a:	2800      	cmp	r0, #0
 802065c:	f6ff ae69 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020660:	4284      	cmp	r4, r0
 8020662:	f67f ae66 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020666:	4bae      	ldr	r3, [pc, #696]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020668:	1a24      	subs	r4, r4, r0
 802066a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL,              "Email" );
 802066c:	06b0      	lsls	r0, r6, #26
 802066e:	d50d      	bpl.n	802068c <mbedtls_x509_crt_info+0x374>
 8020670:	4aad      	ldr	r2, [pc, #692]	; (8020928 <mbedtls_x509_crt_info+0x610>)
 8020672:	4621      	mov	r1, r4
 8020674:	4628      	mov	r0, r5
 8020676:	f003 f8cd 	bl	8023814 <sniprintf>
 802067a:	2800      	cmp	r0, #0
 802067c:	f6ff ae59 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020680:	4284      	cmp	r4, r0
 8020682:	f67f ae56 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020686:	4ba6      	ldr	r3, [pc, #664]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020688:	1a24      	subs	r4, r4, r0
 802068a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING,     "Object Signing" );
 802068c:	06f1      	lsls	r1, r6, #27
 802068e:	d50d      	bpl.n	80206ac <mbedtls_x509_crt_info+0x394>
 8020690:	4aa6      	ldr	r2, [pc, #664]	; (802092c <mbedtls_x509_crt_info+0x614>)
 8020692:	4621      	mov	r1, r4
 8020694:	4628      	mov	r0, r5
 8020696:	f003 f8bd 	bl	8023814 <sniprintf>
 802069a:	2800      	cmp	r0, #0
 802069c:	f6ff ae49 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80206a0:	4284      	cmp	r4, r0
 80206a2:	f67f ae46 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80206a6:	4b9e      	ldr	r3, [pc, #632]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 80206a8:	1a24      	subs	r4, r4, r0
 80206aa:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_RESERVED,           "Reserved" );
 80206ac:	0732      	lsls	r2, r6, #28
 80206ae:	d50d      	bpl.n	80206cc <mbedtls_x509_crt_info+0x3b4>
 80206b0:	4a9f      	ldr	r2, [pc, #636]	; (8020930 <mbedtls_x509_crt_info+0x618>)
 80206b2:	4621      	mov	r1, r4
 80206b4:	4628      	mov	r0, r5
 80206b6:	f003 f8ad 	bl	8023814 <sniprintf>
 80206ba:	2800      	cmp	r0, #0
 80206bc:	f6ff ae39 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80206c0:	4284      	cmp	r4, r0
 80206c2:	f67f ae36 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80206c6:	4b96      	ldr	r3, [pc, #600]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 80206c8:	1a24      	subs	r4, r4, r0
 80206ca:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_SSL_CA,             "SSL CA" );
 80206cc:	0770      	lsls	r0, r6, #29
 80206ce:	d50d      	bpl.n	80206ec <mbedtls_x509_crt_info+0x3d4>
 80206d0:	4a98      	ldr	r2, [pc, #608]	; (8020934 <mbedtls_x509_crt_info+0x61c>)
 80206d2:	4621      	mov	r1, r4
 80206d4:	4628      	mov	r0, r5
 80206d6:	f003 f89d 	bl	8023814 <sniprintf>
 80206da:	2800      	cmp	r0, #0
 80206dc:	f6ff ae29 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80206e0:	4284      	cmp	r4, r0
 80206e2:	f67f ae26 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80206e6:	4b8e      	ldr	r3, [pc, #568]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 80206e8:	1a24      	subs	r4, r4, r0
 80206ea:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA,           "Email CA" );
 80206ec:	07b1      	lsls	r1, r6, #30
 80206ee:	d50d      	bpl.n	802070c <mbedtls_x509_crt_info+0x3f4>
 80206f0:	4a91      	ldr	r2, [pc, #580]	; (8020938 <mbedtls_x509_crt_info+0x620>)
 80206f2:	4621      	mov	r1, r4
 80206f4:	4628      	mov	r0, r5
 80206f6:	f003 f88d 	bl	8023814 <sniprintf>
 80206fa:	2800      	cmp	r0, #0
 80206fc:	f6ff ae19 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020700:	4284      	cmp	r4, r0
 8020702:	f67f ae16 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020706:	4b86      	ldr	r3, [pc, #536]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020708:	1a24      	subs	r4, r4, r0
 802070a:	4405      	add	r5, r0
    CERT_TYPE( MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA,  "Object Signing CA" );
 802070c:	07f2      	lsls	r2, r6, #31
 802070e:	d50c      	bpl.n	802072a <mbedtls_x509_crt_info+0x412>
 8020710:	4a8a      	ldr	r2, [pc, #552]	; (802093c <mbedtls_x509_crt_info+0x624>)
 8020712:	4621      	mov	r1, r4
 8020714:	4628      	mov	r0, r5
 8020716:	f003 f87d 	bl	8023814 <sniprintf>
 802071a:	2800      	cmp	r0, #0
 802071c:	f6ff ae09 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020720:	4284      	cmp	r4, r0
 8020722:	f67f ae06 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020726:	1a24      	subs	r4, r4, r0
 8020728:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE )
 802072a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802072e:	075e      	lsls	r6, r3, #29
 8020730:	f140 80a0 	bpl.w	8020874 <mbedtls_x509_crt_info+0x55c>
        ret = mbedtls_snprintf( p, n, "\n%skey usage         : ", prefix );
 8020734:	4a82      	ldr	r2, [pc, #520]	; (8020940 <mbedtls_x509_crt_info+0x628>)
 8020736:	464b      	mov	r3, r9
 8020738:	4621      	mov	r1, r4
 802073a:	4628      	mov	r0, r5
 802073c:	f003 f86a 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020740:	2800      	cmp	r0, #0
 8020742:	f6ff adf6 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020746:	42a0      	cmp	r0, r4
 8020748:	f4bf adf3 	bcs.w	8020332 <mbedtls_x509_crt_info+0x1a>
        if( ( ret = x509_info_key_usage( &p, &n, crt->key_usage ) ) != 0 )
 802074c:	f8d7 6104 	ldr.w	r6, [r7, #260]	; 0x104
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8020750:	4b71      	ldr	r3, [pc, #452]	; (8020918 <mbedtls_x509_crt_info+0x600>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020752:	1a24      	subs	r4, r4, r0
 8020754:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DIGITAL_SIGNATURE,    "Digital Signature" );
 8020756:	0630      	lsls	r0, r6, #24
 8020758:	d50d      	bpl.n	8020776 <mbedtls_x509_crt_info+0x45e>
 802075a:	4a7a      	ldr	r2, [pc, #488]	; (8020944 <mbedtls_x509_crt_info+0x62c>)
 802075c:	4621      	mov	r1, r4
 802075e:	4628      	mov	r0, r5
 8020760:	f003 f858 	bl	8023814 <sniprintf>
 8020764:	2800      	cmp	r0, #0
 8020766:	f6ff ade4 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802076a:	4284      	cmp	r4, r0
 802076c:	f67f ade1 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020770:	4b6b      	ldr	r3, [pc, #428]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020772:	1a24      	subs	r4, r4, r0
 8020774:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_NON_REPUDIATION,      "Non Repudiation" );
 8020776:	0671      	lsls	r1, r6, #25
 8020778:	d50d      	bpl.n	8020796 <mbedtls_x509_crt_info+0x47e>
 802077a:	4a73      	ldr	r2, [pc, #460]	; (8020948 <mbedtls_x509_crt_info+0x630>)
 802077c:	4621      	mov	r1, r4
 802077e:	4628      	mov	r0, r5
 8020780:	f003 f848 	bl	8023814 <sniprintf>
 8020784:	2800      	cmp	r0, #0
 8020786:	f6ff add4 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802078a:	4284      	cmp	r4, r0
 802078c:	f67f add1 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020790:	4b63      	ldr	r3, [pc, #396]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020792:	1a24      	subs	r4, r4, r0
 8020794:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_ENCIPHERMENT,     "Key Encipherment" );
 8020796:	06b2      	lsls	r2, r6, #26
 8020798:	d50d      	bpl.n	80207b6 <mbedtls_x509_crt_info+0x49e>
 802079a:	4a6c      	ldr	r2, [pc, #432]	; (802094c <mbedtls_x509_crt_info+0x634>)
 802079c:	4621      	mov	r1, r4
 802079e:	4628      	mov	r0, r5
 80207a0:	f003 f838 	bl	8023814 <sniprintf>
 80207a4:	2800      	cmp	r0, #0
 80207a6:	f6ff adc4 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80207aa:	4284      	cmp	r4, r0
 80207ac:	f67f adc1 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80207b0:	4b5b      	ldr	r3, [pc, #364]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 80207b2:	1a24      	subs	r4, r4, r0
 80207b4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DATA_ENCIPHERMENT,    "Data Encipherment" );
 80207b6:	06f0      	lsls	r0, r6, #27
 80207b8:	d50d      	bpl.n	80207d6 <mbedtls_x509_crt_info+0x4be>
 80207ba:	4a65      	ldr	r2, [pc, #404]	; (8020950 <mbedtls_x509_crt_info+0x638>)
 80207bc:	4621      	mov	r1, r4
 80207be:	4628      	mov	r0, r5
 80207c0:	f003 f828 	bl	8023814 <sniprintf>
 80207c4:	2800      	cmp	r0, #0
 80207c6:	f6ff adb4 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80207ca:	4284      	cmp	r4, r0
 80207cc:	f67f adb1 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80207d0:	4b53      	ldr	r3, [pc, #332]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 80207d2:	1a24      	subs	r4, r4, r0
 80207d4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_AGREEMENT,        "Key Agreement" );
 80207d6:	0731      	lsls	r1, r6, #28
 80207d8:	d50d      	bpl.n	80207f6 <mbedtls_x509_crt_info+0x4de>
 80207da:	4a5e      	ldr	r2, [pc, #376]	; (8020954 <mbedtls_x509_crt_info+0x63c>)
 80207dc:	4621      	mov	r1, r4
 80207de:	4628      	mov	r0, r5
 80207e0:	f003 f818 	bl	8023814 <sniprintf>
 80207e4:	2800      	cmp	r0, #0
 80207e6:	f6ff ada4 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80207ea:	4284      	cmp	r4, r0
 80207ec:	f67f ada1 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80207f0:	4b4b      	ldr	r3, [pc, #300]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 80207f2:	1a24      	subs	r4, r4, r0
 80207f4:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_KEY_CERT_SIGN,        "Key Cert Sign" );
 80207f6:	0772      	lsls	r2, r6, #29
 80207f8:	d50d      	bpl.n	8020816 <mbedtls_x509_crt_info+0x4fe>
 80207fa:	4a57      	ldr	r2, [pc, #348]	; (8020958 <mbedtls_x509_crt_info+0x640>)
 80207fc:	4621      	mov	r1, r4
 80207fe:	4628      	mov	r0, r5
 8020800:	f003 f808 	bl	8023814 <sniprintf>
 8020804:	2800      	cmp	r0, #0
 8020806:	f6ff ad94 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802080a:	4284      	cmp	r4, r0
 802080c:	f67f ad91 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020810:	4b43      	ldr	r3, [pc, #268]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020812:	1a24      	subs	r4, r4, r0
 8020814:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_CRL_SIGN,             "CRL Sign" );
 8020816:	07b0      	lsls	r0, r6, #30
 8020818:	d50d      	bpl.n	8020836 <mbedtls_x509_crt_info+0x51e>
 802081a:	4a50      	ldr	r2, [pc, #320]	; (802095c <mbedtls_x509_crt_info+0x644>)
 802081c:	4621      	mov	r1, r4
 802081e:	4628      	mov	r0, r5
 8020820:	f002 fff8 	bl	8023814 <sniprintf>
 8020824:	2800      	cmp	r0, #0
 8020826:	f6ff ad84 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802082a:	4284      	cmp	r4, r0
 802082c:	f67f ad81 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020830:	4b3b      	ldr	r3, [pc, #236]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020832:	1a24      	subs	r4, r4, r0
 8020834:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_ENCIPHER_ONLY,        "Encipher Only" );
 8020836:	07f1      	lsls	r1, r6, #31
 8020838:	d50d      	bpl.n	8020856 <mbedtls_x509_crt_info+0x53e>
 802083a:	4a49      	ldr	r2, [pc, #292]	; (8020960 <mbedtls_x509_crt_info+0x648>)
 802083c:	4621      	mov	r1, r4
 802083e:	4628      	mov	r0, r5
 8020840:	f002 ffe8 	bl	8023814 <sniprintf>
 8020844:	2800      	cmp	r0, #0
 8020846:	f6ff ad74 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802084a:	4284      	cmp	r4, r0
 802084c:	f67f ad71 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020850:	4b33      	ldr	r3, [pc, #204]	; (8020920 <mbedtls_x509_crt_info+0x608>)
 8020852:	1a24      	subs	r4, r4, r0
 8020854:	4405      	add	r5, r0
    KEY_USAGE( MBEDTLS_X509_KU_DECIPHER_ONLY,        "Decipher Only" );
 8020856:	0432      	lsls	r2, r6, #16
 8020858:	d50c      	bpl.n	8020874 <mbedtls_x509_crt_info+0x55c>
 802085a:	4a42      	ldr	r2, [pc, #264]	; (8020964 <mbedtls_x509_crt_info+0x64c>)
 802085c:	4621      	mov	r1, r4
 802085e:	4628      	mov	r0, r5
 8020860:	f002 ffd8 	bl	8023814 <sniprintf>
 8020864:	2800      	cmp	r0, #0
 8020866:	f6ff ad64 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802086a:	4284      	cmp	r4, r0
 802086c:	f67f ad61 	bls.w	8020332 <mbedtls_x509_crt_info+0x1a>
 8020870:	1a24      	subs	r4, r4, r0
 8020872:	4405      	add	r5, r0
    if( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE )
 8020874:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8020878:	051b      	lsls	r3, r3, #20
 802087a:	d531      	bpl.n	80208e0 <mbedtls_x509_crt_info+0x5c8>
        ret = mbedtls_snprintf( p, n, "\n%sext key usage     : ", prefix );
 802087c:	4a3a      	ldr	r2, [pc, #232]	; (8020968 <mbedtls_x509_crt_info+0x650>)
 802087e:	464b      	mov	r3, r9
 8020880:	4621      	mov	r1, r4
 8020882:	4628      	mov	r0, r5
 8020884:	f002 ffc6 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 8020888:	2800      	cmp	r0, #0
 802088a:	f6ff ad52 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 802088e:	42a0      	cmp	r0, r4
 8020890:	f4bf ad4f 	bcs.w	8020332 <mbedtls_x509_crt_info+0x1a>
    const char *sep = "";
 8020894:	f8df b080 	ldr.w	fp, [pc, #128]	; 8020918 <mbedtls_x509_crt_info+0x600>
            desc = "???";
 8020898:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8020970 <mbedtls_x509_crt_info+0x658>
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 802089c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020974 <mbedtls_x509_crt_info+0x65c>
        sep = ", ";
 80208a0:	4e1f      	ldr	r6, [pc, #124]	; (8020920 <mbedtls_x509_crt_info+0x608>)
        MBEDTLS_X509_SAFE_SNPRINTF;
 80208a2:	1a24      	subs	r4, r4, r0
 80208a4:	4405      	add	r5, r0
        if( ( ret = x509_info_ext_key_usage( &p, &n,
 80208a6:	f507 7784 	add.w	r7, r7, #264	; 0x108
        if( mbedtls_oid_get_extended_key_usage( &cur->buf, &desc ) != 0 )
 80208aa:	a906      	add	r1, sp, #24
 80208ac:	4638      	mov	r0, r7
 80208ae:	f7f4 fe55 	bl	801555c <mbedtls_oid_get_extended_key_usage>
 80208b2:	b108      	cbz	r0, 80208b8 <mbedtls_x509_crt_info+0x5a0>
            desc = "???";
 80208b4:	f8cd 8018 	str.w	r8, [sp, #24]
        ret = mbedtls_snprintf( p, n, "%s%s", sep, desc );
 80208b8:	9b06      	ldr	r3, [sp, #24]
 80208ba:	9300      	str	r3, [sp, #0]
 80208bc:	464a      	mov	r2, r9
 80208be:	465b      	mov	r3, fp
 80208c0:	4621      	mov	r1, r4
 80208c2:	4628      	mov	r0, r5
 80208c4:	f002 ffa6 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80208c8:	2800      	cmp	r0, #0
 80208ca:	f6ff ad32 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80208ce:	42a0      	cmp	r0, r4
 80208d0:	f4bf ad2f 	bcs.w	8020332 <mbedtls_x509_crt_info+0x1a>
        cur = cur->next;
 80208d4:	68ff      	ldr	r7, [r7, #12]
        MBEDTLS_X509_SAFE_SNPRINTF;
 80208d6:	1a24      	subs	r4, r4, r0
 80208d8:	4405      	add	r5, r0
        sep = ", ";
 80208da:	46b3      	mov	fp, r6
    while( cur != NULL )
 80208dc:	2f00      	cmp	r7, #0
 80208de:	d1e4      	bne.n	80208aa <mbedtls_x509_crt_info+0x592>
    ret = mbedtls_snprintf( p, n, "\n" );
 80208e0:	4a22      	ldr	r2, [pc, #136]	; (802096c <mbedtls_x509_crt_info+0x654>)
 80208e2:	4621      	mov	r1, r4
 80208e4:	4628      	mov	r0, r5
 80208e6:	f002 ff95 	bl	8023814 <sniprintf>
    MBEDTLS_X509_SAFE_SNPRINTF;
 80208ea:	2800      	cmp	r0, #0
 80208ec:	f6ff ad21 	blt.w	8020332 <mbedtls_x509_crt_info+0x1a>
 80208f0:	42a0      	cmp	r0, r4
 80208f2:	f4bf ad1e 	bcs.w	8020332 <mbedtls_x509_crt_info+0x1a>
    return( (int) ( size - n ) );
 80208f6:	1b00      	subs	r0, r0, r4
 80208f8:	4450      	add	r0, sl
 80208fa:	e51e      	b.n	802033a <mbedtls_x509_crt_info+0x22>
            *p++ = sep[i];
 80208fc:	f81c e003 	ldrb.w	lr, [ip, r3]
 8020900:	f805 e003 	strb.w	lr, [r5, r3]
        for( i = 0; i < sep_len; i++ )
 8020904:	3301      	adds	r3, #1
 8020906:	e669      	b.n	80205dc <mbedtls_x509_crt_info+0x2c4>
            *p++ = cur->buf.p[i];
 8020908:	6891      	ldr	r1, [r2, #8]
 802090a:	5cc9      	ldrb	r1, [r1, r3]
 802090c:	f805 1b01 	strb.w	r1, [r5], #1
        for( i = 0; i < cur->buf.len; i++ )
 8020910:	3301      	adds	r3, #1
 8020912:	e668      	b.n	80205e6 <mbedtls_x509_crt_info+0x2ce>
 8020914:	0803322c 	.word	0x0803322c
 8020918:	080303e5 	.word	0x080303e5
 802091c:	08033244 	.word	0x08033244
 8020920:	08032f6d 	.word	0x08032f6d
 8020924:	08033251 	.word	0x08033251
 8020928:	0803325e 	.word	0x0803325e
 802092c:	08033266 	.word	0x08033266
 8020930:	08033277 	.word	0x08033277
 8020934:	08033282 	.word	0x08033282
 8020938:	0803328b 	.word	0x0803328b
 802093c:	08033296 	.word	0x08033296
 8020940:	080332aa 	.word	0x080332aa
 8020944:	080332c2 	.word	0x080332c2
 8020948:	080332d6 	.word	0x080332d6
 802094c:	080332e8 	.word	0x080332e8
 8020950:	080332fb 	.word	0x080332fb
 8020954:	0803330f 	.word	0x0803330f
 8020958:	0803331f 	.word	0x0803331f
 802095c:	0803332f 	.word	0x0803332f
 8020960:	0803333a 	.word	0x0803333a
 8020964:	0803334a 	.word	0x0803334a
 8020968:	0803335a 	.word	0x0803335a
 802096c:	0803064d 	.word	0x0803064d
 8020970:	08032f7f 	.word	0x08032f7f
 8020974:	080300d6 	.word	0x080300d6

08020978 <mbedtls_x509_crt_verify_info>:
{
 8020978:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802097c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80209f0 <mbedtls_x509_crt_verify_info+0x78>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 8020980:	f8df a070 	ldr.w	sl, [pc, #112]	; 80209f4 <mbedtls_x509_crt_verify_info+0x7c>
{
 8020984:	4606      	mov	r6, r0
 8020986:	460d      	mov	r5, r1
 8020988:	4691      	mov	r9, r2
 802098a:	461f      	mov	r7, r3
    size_t n = size;
 802098c:	460c      	mov	r4, r1
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 802098e:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8020992:	b96b      	cbnz	r3, 80209b0 <mbedtls_x509_crt_verify_info+0x38>
    if( flags != 0 )
 8020994:	b157      	cbz	r7, 80209ac <mbedtls_x509_crt_verify_info+0x34>
        ret = mbedtls_snprintf( p, n, "%sUnknown reason "
 8020996:	4a14      	ldr	r2, [pc, #80]	; (80209e8 <mbedtls_x509_crt_verify_info+0x70>)
 8020998:	464b      	mov	r3, r9
 802099a:	4621      	mov	r1, r4
 802099c:	4630      	mov	r0, r6
 802099e:	f002 ff39 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80209a2:	2800      	cmp	r0, #0
 80209a4:	db11      	blt.n	80209ca <mbedtls_x509_crt_verify_info+0x52>
 80209a6:	42a0      	cmp	r0, r4
 80209a8:	d20f      	bcs.n	80209ca <mbedtls_x509_crt_verify_info+0x52>
 80209aa:	1a24      	subs	r4, r4, r0
    return( (int) ( size - n ) );
 80209ac:	1b28      	subs	r0, r5, r4
 80209ae:	e00d      	b.n	80209cc <mbedtls_x509_crt_verify_info+0x54>
        if( ( flags & cur->code ) == 0 )
 80209b0:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80209b4:	4217      	tst	r7, r2
 80209b6:	d013      	beq.n	80209e0 <mbedtls_x509_crt_verify_info+0x68>
        ret = mbedtls_snprintf( p, n, "%s%s\n", prefix, cur->string );
 80209b8:	9300      	str	r3, [sp, #0]
 80209ba:	4652      	mov	r2, sl
 80209bc:	464b      	mov	r3, r9
 80209be:	4621      	mov	r1, r4
 80209c0:	4630      	mov	r0, r6
 80209c2:	f002 ff27 	bl	8023814 <sniprintf>
        MBEDTLS_X509_SAFE_SNPRINTF;
 80209c6:	2800      	cmp	r0, #0
 80209c8:	da03      	bge.n	80209d2 <mbedtls_x509_crt_verify_info+0x5a>
 80209ca:	4808      	ldr	r0, [pc, #32]	; (80209ec <mbedtls_x509_crt_verify_info+0x74>)
}
 80209cc:	b002      	add	sp, #8
 80209ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        MBEDTLS_X509_SAFE_SNPRINTF;
 80209d2:	42a0      	cmp	r0, r4
 80209d4:	d2f9      	bcs.n	80209ca <mbedtls_x509_crt_verify_info+0x52>
        flags ^= cur->code;
 80209d6:	f858 3c08 	ldr.w	r3, [r8, #-8]
        MBEDTLS_X509_SAFE_SNPRINTF;
 80209da:	1a24      	subs	r4, r4, r0
 80209dc:	4406      	add	r6, r0
        flags ^= cur->code;
 80209de:	405f      	eors	r7, r3
    for( cur = x509_crt_verify_strings; cur->string != NULL ; cur++ )
 80209e0:	f108 0808 	add.w	r8, r8, #8
 80209e4:	e7d3      	b.n	802098e <mbedtls_x509_crt_verify_info+0x16>
 80209e6:	bf00      	nop
 80209e8:	08033372 	.word	0x08033372
 80209ec:	ffffd680 	.word	0xffffd680
 80209f0:	0802d5b8 	.word	0x0802d5b8
 80209f4:	08033b53 	.word	0x08033b53

080209f8 <mbedtls_x509_crt_check_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80209f8:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 80209fc:	4602      	mov	r2, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 80209fe:	f013 0004 	ands.w	r0, r3, #4
{
 8020a02:	b510      	push	{r4, lr}
    if( ( crt->ext_types & MBEDTLS_X509_EXT_KEY_USAGE ) == 0 )
 8020a04:	d011      	beq.n	8020a2a <mbedtls_x509_crt_check_key_usage+0x32>
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8020a06:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    usage_must = usage & ~may_mask;
 8020a0a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
 8020a0e:	f023 0301 	bic.w	r3, r3, #1
    if( ( ( crt->key_usage & ~may_mask ) & usage_must ) != usage_must )
 8020a12:	4393      	bics	r3, r2
 8020a14:	d10a      	bne.n	8020a2c <mbedtls_x509_crt_check_key_usage+0x34>
    usage_may = usage & may_mask;
 8020a16:	f248 0301 	movw	r3, #32769	; 0x8001
 8020a1a:	ea01 0403 	and.w	r4, r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020a1e:	4804      	ldr	r0, [pc, #16]	; (8020a30 <mbedtls_x509_crt_check_key_usage+0x38>)
    if( ( ( crt->key_usage & may_mask ) | usage_may ) != usage_may )
 8020a20:	4311      	orrs	r1, r2
 8020a22:	4019      	ands	r1, r3
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020a24:	428c      	cmp	r4, r1
 8020a26:	bf08      	it	eq
 8020a28:	2000      	moveq	r0, #0
}
 8020a2a:	bd10      	pop	{r4, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020a2c:	4800      	ldr	r0, [pc, #0]	; (8020a30 <mbedtls_x509_crt_check_key_usage+0x38>)
 8020a2e:	e7fc      	b.n	8020a2a <mbedtls_x509_crt_check_key_usage+0x32>
 8020a30:	ffffd800 	.word	0xffffd800

08020a34 <x509_crt_check_parent>:
 * bottom means child is the end entity cert
 */
static int x509_crt_check_parent( const mbedtls_x509_crt *child,
                                  const mbedtls_x509_crt *parent,
                                  int top, int bottom )
{
 8020a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a36:	4605      	mov	r5, r0
 8020a38:	460c      	mov	r4, r1
    int need_ca_bit;

    /* Parent must be the issuer */
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020a3a:	304c      	adds	r0, #76	; 0x4c
 8020a3c:	316c      	adds	r1, #108	; 0x6c
{
 8020a3e:	4617      	mov	r7, r2
 8020a40:	461e      	mov	r6, r3
    if( x509_name_cmp( &child->issuer, &parent->subject ) != 0 )
 8020a42:	f7ff fbdb 	bl	80201fc <x509_name_cmp>
 8020a46:	b9d8      	cbnz	r0, 8020a80 <x509_crt_check_parent+0x4c>

    /* Parent must have the basicConstraints CA bit set as a general rule */
    need_ca_bit = 1;

    /* Exception: v1/v2 certificates that are locally trusted. */
    if( top && parent->version < 3 )
 8020a48:	b167      	cbz	r7, 8020a64 <x509_crt_check_parent+0x30>
 8020a4a:	69a7      	ldr	r7, [r4, #24]
        need_ca_bit = 0;

    /* Exception: self-signed end-entity certs that are locally trusted. */
    if( top && bottom &&
 8020a4c:	b146      	cbz	r6, 8020a60 <x509_crt_check_parent+0x2c>
        child->raw.len == parent->raw.len &&
 8020a4e:	686a      	ldr	r2, [r5, #4]
    if( top && bottom &&
 8020a50:	6863      	ldr	r3, [r4, #4]
 8020a52:	429a      	cmp	r2, r3
 8020a54:	d104      	bne.n	8020a60 <x509_crt_check_parent+0x2c>
        memcmp( child->raw.p, parent->raw.p, child->raw.len ) == 0 )
 8020a56:	68a1      	ldr	r1, [r4, #8]
 8020a58:	68a8      	ldr	r0, [r5, #8]
 8020a5a:	f001 fcb7 	bl	80223cc <memcmp>
        child->raw.len == parent->raw.len &&
 8020a5e:	b160      	cbz	r0, 8020a7a <x509_crt_check_parent+0x46>
    {
        need_ca_bit = 0;
    }

    if( need_ca_bit && ! parent->ca_istrue )
 8020a60:	2f02      	cmp	r7, #2
 8020a62:	dd0b      	ble.n	8020a7c <x509_crt_check_parent+0x48>
 8020a64:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8020a68:	b153      	cbz	r3, 8020a80 <x509_crt_check_parent+0x4c>
        return( -1 );

#if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
    if( need_ca_bit &&
        mbedtls_x509_crt_check_key_usage( parent, MBEDTLS_X509_KU_KEY_CERT_SIGN ) != 0 )
 8020a6a:	2104      	movs	r1, #4
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	f7ff ffc3 	bl	80209f8 <mbedtls_x509_crt_check_key_usage>
    if( need_ca_bit &&
 8020a72:	3800      	subs	r0, #0
 8020a74:	bf18      	it	ne
 8020a76:	2001      	movne	r0, #1
 8020a78:	4240      	negs	r0, r0
        return( -1 );
    }
#endif

    return( 0 );
}
 8020a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return( 0 );
 8020a7c:	2000      	movs	r0, #0
 8020a7e:	e7fc      	b.n	8020a7a <x509_crt_check_parent+0x46>
        return( -1 );
 8020a80:	f04f 30ff 	mov.w	r0, #4294967295
 8020a84:	e7f9      	b.n	8020a7a <x509_crt_check_parent+0x46>
	...

08020a88 <mbedtls_x509_crt_check_extended_key_usage>:
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020a88:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
{
 8020a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a90:	4604      	mov	r4, r0
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020a92:	f413 6000 	ands.w	r0, r3, #2048	; 0x800
{
 8020a96:	460e      	mov	r6, r1
 8020a98:	4615      	mov	r5, r2
    if( ( crt->ext_types & MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE ) == 0 )
 8020a9a:	d018      	beq.n	8020ace <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 8020a9c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8020ad8 <mbedtls_x509_crt_check_extended_key_usage+0x50>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020aa0:	f504 7484 	add.w	r4, r4, #264	; 0x108
        if( cur_oid->len == usage_len &&
 8020aa4:	6867      	ldr	r7, [r4, #4]
 8020aa6:	42af      	cmp	r7, r5
 8020aa8:	d105      	bne.n	8020ab6 <mbedtls_x509_crt_check_extended_key_usage+0x2e>
            memcmp( cur_oid->p, usage_oid, usage_len ) == 0 )
 8020aaa:	68a0      	ldr	r0, [r4, #8]
 8020aac:	462a      	mov	r2, r5
 8020aae:	4631      	mov	r1, r6
 8020ab0:	f001 fc8c 	bl	80223cc <memcmp>
        if( cur_oid->len == usage_len &&
 8020ab4:	b158      	cbz	r0, 8020ace <mbedtls_x509_crt_check_extended_key_usage+0x46>
        if( MBEDTLS_OID_CMP( MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE, cur_oid ) == 0 )
 8020ab6:	2f04      	cmp	r7, #4
 8020ab8:	d105      	bne.n	8020ac6 <mbedtls_x509_crt_check_extended_key_usage+0x3e>
 8020aba:	68a1      	ldr	r1, [r4, #8]
 8020abc:	463a      	mov	r2, r7
 8020abe:	4640      	mov	r0, r8
 8020ac0:	f001 fc84 	bl	80223cc <memcmp>
 8020ac4:	b118      	cbz	r0, 8020ace <mbedtls_x509_crt_check_extended_key_usage+0x46>
    for( cur = &crt->ext_key_usage; cur != NULL; cur = cur->next )
 8020ac6:	68e4      	ldr	r4, [r4, #12]
 8020ac8:	2c00      	cmp	r4, #0
 8020aca:	d1eb      	bne.n	8020aa4 <mbedtls_x509_crt_check_extended_key_usage+0x1c>
    return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8020acc:	4801      	ldr	r0, [pc, #4]	; (8020ad4 <mbedtls_x509_crt_check_extended_key_usage+0x4c>)
}
 8020ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ad2:	bf00      	nop
 8020ad4:	ffffd800 	.word	0xffffd800
 8020ad8:	0802d658 	.word	0x0802d658

08020adc <mbedtls_x509_crt_is_revoked>:
{
 8020adc:	b538      	push	{r3, r4, r5, lr}
 8020ade:	4605      	mov	r5, r0
    const mbedtls_x509_crl_entry *cur = &crl->entry;
 8020ae0:	f101 0484 	add.w	r4, r1, #132	; 0x84
    while( cur != NULL && cur->serial.len != 0 )
 8020ae4:	6923      	ldr	r3, [r4, #16]
 8020ae6:	b12b      	cbz	r3, 8020af4 <mbedtls_x509_crt_is_revoked+0x18>
        if( crt->serial.len == cur->serial.len &&
 8020ae8:	6a2a      	ldr	r2, [r5, #32]
 8020aea:	429a      	cmp	r2, r3
 8020aec:	d004      	beq.n	8020af8 <mbedtls_x509_crt_is_revoked+0x1c>
        cur = cur->next;
 8020aee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    while( cur != NULL && cur->serial.len != 0 )
 8020af0:	2c00      	cmp	r4, #0
 8020af2:	d1f7      	bne.n	8020ae4 <mbedtls_x509_crt_is_revoked+0x8>
    return( 0 );
 8020af4:	2000      	movs	r0, #0
}
 8020af6:	bd38      	pop	{r3, r4, r5, pc}
            memcmp( crt->serial.p, cur->serial.p, crt->serial.len ) == 0 )
 8020af8:	6961      	ldr	r1, [r4, #20]
 8020afa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8020afc:	f001 fc66 	bl	80223cc <memcmp>
        if( crt->serial.len == cur->serial.len &&
 8020b00:	2800      	cmp	r0, #0
 8020b02:	d1f4      	bne.n	8020aee <mbedtls_x509_crt_is_revoked+0x12>
            if( mbedtls_x509_time_is_past( &cur->revocation_date ) )
 8020b04:	f104 0018 	add.w	r0, r4, #24
 8020b08:	f7ff f8ba 	bl	801fc80 <mbedtls_x509_time_is_past>
 8020b0c:	2800      	cmp	r0, #0
 8020b0e:	d0ee      	beq.n	8020aee <mbedtls_x509_crt_is_revoked+0x12>
                return( 1 );
 8020b10:	2001      	movs	r0, #1
 8020b12:	e7f0      	b.n	8020af6 <mbedtls_x509_crt_is_revoked+0x1a>

08020b14 <x509_crt_verifycrl.part.0>:
static int x509_crt_verifycrl( mbedtls_x509_crt *crt, mbedtls_x509_crt *ca,
 8020b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b18:	ed2d 8b02 	vpush	{d8}
 8020b1c:	ee08 0a10 	vmov	s16, r0
 8020b20:	b099      	sub	sp, #100	; 0x64
 8020b22:	460e      	mov	r6, r1
 8020b24:	4614      	mov	r4, r2
 8020b26:	461f      	mov	r7, r3
    int flags = 0;
 8020b28:	2500      	movs	r5, #0
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020b2a:	f04f 0901 	mov.w	r9, #1
    while( crl_list != NULL )
 8020b2e:	b1a4      	cbz	r4, 8020b5a <x509_crt_verifycrl.part.0+0x46>
        if( crl_list->version == 0 ||
 8020b30:	69a3      	ldr	r3, [r4, #24]
 8020b32:	b143      	cbz	r3, 8020b46 <x509_crt_verifycrl.part.0+0x32>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        if( crl_list->version == 0 ||
 8020b36:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020b38:	429a      	cmp	r2, r3
 8020b3a:	d104      	bne.n	8020b46 <x509_crt_verifycrl.part.0+0x32>
            memcmp( crl_list->issuer_raw.p, ca->subject_raw.p,
 8020b3c:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020b3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8020b40:	f001 fc44 	bl	80223cc <memcmp>
            crl_list->issuer_raw.len != ca->subject_raw.len ||
 8020b44:	b110      	cbz	r0, 8020b4c <x509_crt_verifycrl.part.0+0x38>
        crl_list = crl_list->next;
 8020b46:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8020b4a:	e7f0      	b.n	8020b2e <x509_crt_verifycrl.part.0+0x1a>
        if( mbedtls_x509_crt_check_key_usage( ca, MBEDTLS_X509_KU_CRL_SIGN ) != 0 )
 8020b4c:	2102      	movs	r1, #2
 8020b4e:	4630      	mov	r0, r6
 8020b50:	f7ff ff52 	bl	80209f8 <mbedtls_x509_crt_check_key_usage>
 8020b54:	b138      	cbz	r0, 8020b66 <x509_crt_verifycrl.part.0+0x52>
            flags |= MBEDTLS_X509_BADCRL_NOT_TRUSTED;
 8020b56:	f045 0510 	orr.w	r5, r5, #16
}
 8020b5a:	4628      	mov	r0, r5
 8020b5c:	b019      	add	sp, #100	; 0x64
 8020b5e:	ecbd 8b02 	vpop	{d8}
 8020b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( x509_profile_check_md_alg( profile, crl_list->sig_md ) != 0 )
 8020b66:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020b6a:	683a      	ldr	r2, [r7, #0]
 8020b6c:	1e43      	subs	r3, r0, #1
 8020b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8020b72:	4213      	tst	r3, r2
 8020b74:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
 8020b78:	f04f 0201 	mov.w	r2, #1
 8020b7c:	f103 33ff 	add.w	r3, r3, #4294967295
 8020b80:	fa02 f303 	lsl.w	r3, r2, r3
 8020b84:	687a      	ldr	r2, [r7, #4]
            flags |= MBEDTLS_X509_BADCRL_BAD_MD;
 8020b86:	bf08      	it	eq
 8020b88:	f445 3500 	orreq.w	r5, r5, #131072	; 0x20000
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020b8c:	4213      	tst	r3, r2
            flags |= MBEDTLS_X509_BADCRL_BAD_PK;
 8020b8e:	bf08      	it	eq
 8020b90:	f445 2580 	orreq.w	r5, r5, #262144	; 0x40000
        md_info = mbedtls_md_info_from_type( crl_list->sig_md );
 8020b94:	f7f3 fe86 	bl	80148a4 <mbedtls_md_info_from_type>
        if( md_info == NULL )
 8020b98:	4680      	mov	r8, r0
 8020b9a:	2800      	cmp	r0, #0
 8020b9c:	d0db      	beq.n	8020b56 <x509_crt_verifycrl.part.0+0x42>
        mbedtls_md( md_info, crl_list->tbs.p, crl_list->tbs.len, hash );
 8020b9e:	f10d 0b20 	add.w	fp, sp, #32
 8020ba2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020ba6:	465b      	mov	r3, fp
 8020ba8:	f7f3 fefe 	bl	80149a8 <mbedtls_md>
        if( x509_profile_check_key( profile, crl_list->sig_pk, &ca->pk ) != 0 )
 8020bac:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020bb0:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
 8020bb4:	9205      	str	r2, [sp, #20]
 8020bb6:	4638      	mov	r0, r7
 8020bb8:	f7ff fb8b 	bl	80202d2 <x509_profile_check_key>
 8020bbc:	9a05      	ldr	r2, [sp, #20]
 8020bbe:	b108      	cbz	r0, 8020bc4 <x509_crt_verifycrl.part.0+0xb0>
            flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020bc0:	f445 3580 	orr.w	r5, r5, #65536	; 0x10000
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020bc4:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8020bc8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8020bcc:	f894 a0e9 	ldrb.w	sl, [r4, #233]	; 0xe9
 8020bd0:	9207      	str	r2, [sp, #28]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020bd2:	4640      	mov	r0, r8
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020bd4:	9106      	str	r1, [sp, #24]
 8020bd6:	9305      	str	r3, [sp, #20]
                           crl_list->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020bd8:	f7f3 ffb4 	bl	8014b44 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( crl_list->sig_pk, crl_list->sig_opts, &ca->pk,
 8020bdc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8020be0:	9303      	str	r3, [sp, #12]
 8020be2:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8020be6:	f8cd b000 	str.w	fp, [sp]
 8020bea:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8020bee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8020bf2:	9b05      	ldr	r3, [sp, #20]
 8020bf4:	4650      	mov	r0, sl
 8020bf6:	f7f4 fff1 	bl	8015bdc <mbedtls_pk_verify_ext>
 8020bfa:	2800      	cmp	r0, #0
 8020bfc:	d1ab      	bne.n	8020b56 <x509_crt_verifycrl.part.0+0x42>
        if( mbedtls_x509_time_is_past( &crl_list->next_update ) )
 8020bfe:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8020c02:	f7ff f83d 	bl	801fc80 <mbedtls_x509_time_is_past>
 8020c06:	b108      	cbz	r0, 8020c0c <x509_crt_verifycrl.part.0+0xf8>
            flags |= MBEDTLS_X509_BADCRL_EXPIRED;
 8020c08:	f045 0520 	orr.w	r5, r5, #32
        if( mbedtls_x509_time_is_future( &crl_list->this_update ) )
 8020c0c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8020c10:	f7ff f846 	bl	801fca0 <mbedtls_x509_time_is_future>
 8020c14:	b108      	cbz	r0, 8020c1a <x509_crt_verifycrl.part.0+0x106>
            flags |= MBEDTLS_X509_BADCRL_FUTURE;
 8020c16:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        if( mbedtls_x509_crt_is_revoked( crt, crl_list ) )
 8020c1a:	ee18 0a10 	vmov	r0, s16
 8020c1e:	4621      	mov	r1, r4
 8020c20:	f7ff ff5c 	bl	8020adc <mbedtls_x509_crt_is_revoked>
 8020c24:	2800      	cmp	r0, #0
 8020c26:	d08e      	beq.n	8020b46 <x509_crt_verifycrl.part.0+0x32>
            flags |= MBEDTLS_X509_BADCERT_REVOKED;
 8020c28:	f045 0502 	orr.w	r5, r5, #2
            break;
 8020c2c:	e795      	b.n	8020b5a <x509_crt_verifycrl.part.0+0x46>

08020c2e <x509_crt_verify_top>:
                mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c32:	ed2d 8b02 	vpush	{d8}
 8020c36:	b09b      	sub	sp, #108	; 0x6c
 8020c38:	4604      	mov	r4, r0
 8020c3a:	4698      	mov	r8, r3
    int check_path_cnt;
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    const mbedtls_md_info_t *md_info;
    mbedtls_x509_crt *future_past_ca = NULL;

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020c3c:	30a4      	adds	r0, #164	; 0xa4
    uint32_t ca_flags = 0;
 8020c3e:	2300      	movs	r3, #0
{
 8020c40:	ee08 2a10 	vmov	s16, r2
 8020c44:	f8dd 9098 	ldr.w	r9, [sp, #152]	; 0x98
 8020c48:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    uint32_t ca_flags = 0;
 8020c4a:	9309      	str	r3, [sp, #36]	; 0x24
{
 8020c4c:	460e      	mov	r6, r1
    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020c4e:	f7ff f817 	bl	801fc80 <mbedtls_x509_time_is_past>
 8020c52:	b118      	cbz	r0, 8020c5c <x509_crt_verify_top+0x2e>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020c54:	682b      	ldr	r3, [r5, #0]
 8020c56:	f043 0301 	orr.w	r3, r3, #1
 8020c5a:	602b      	str	r3, [r5, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020c5c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8020c60:	f7ff f81e 	bl	801fca0 <mbedtls_x509_time_is_future>
 8020c64:	b118      	cbz	r0, 8020c6e <x509_crt_verify_top+0x40>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020c66:	682b      	ldr	r3, [r5, #0]
 8020c68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020c6c:	602b      	str	r3, [r5, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020c6e:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020c72:	2301      	movs	r3, #1
 8020c74:	1e42      	subs	r2, r0, #1
 8020c76:	4093      	lsls	r3, r2
 8020c78:	f8d8 2000 	ldr.w	r2, [r8]
 8020c7c:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020c7e:	bf02      	ittt	eq
 8020c80:	682b      	ldreq	r3, [r5, #0]
 8020c82:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020c86:	602b      	streq	r3, [r5, #0]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020c88:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
 8020c8c:	1e5a      	subs	r2, r3, #1
 8020c8e:	2301      	movs	r3, #1
 8020c90:	4093      	lsls	r3, r2
 8020c92:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020c96:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020c98:	bf02      	ittt	eq
 8020c9a:	682b      	ldreq	r3, [r5, #0]
 8020c9c:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020ca0:	602b      	streq	r3, [r5, #0]

    /*
     * Child is the top of the chain. Check against the trust_ca list.
     */
    *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020ca2:	682b      	ldr	r3, [r5, #0]
 8020ca4:	f043 0308 	orr.w	r3, r3, #8
 8020ca8:	602b      	str	r3, [r5, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020caa:	f7f3 fdfb 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020cae:	4682      	mov	sl, r0
 8020cb0:	b160      	cbz	r0, 8020ccc <x509_crt_verify_top+0x9e>
         * Cannot check 'unknown', no need to try any CA
         */
        trust_ca = NULL;
    }
    else
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020cb2:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8020cb6:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8020cba:	465b      	mov	r3, fp
 8020cbc:	f7f3 fe74 	bl	80149a8 <mbedtls_md>
 8020cc0:	2700      	movs	r7, #0
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
        {
            continue;
        }

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020cc2:	f8cd b014 	str.w	fp, [sp, #20]
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020cc6:	b936      	cbnz	r6, 8020cd6 <x509_crt_verify_top+0xa8>
        }

        break;
    }

    if( trust_ca != NULL || ( trust_ca = future_past_ca ) != NULL )
 8020cc8:	2f00      	cmp	r7, #0
 8020cca:	d153      	bne.n	8020d74 <x509_crt_verify_top+0x146>
            }
        }
    }

    /* Call callback on top cert */
    if( NULL != f_vrfy )
 8020ccc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	f040 809c 	bne.w	8020e0c <x509_crt_verify_top+0x1de>
 8020cd4:	e087      	b.n	8020de6 <x509_crt_verify_top+0x1b8>
        if( x509_crt_check_parent( child, trust_ca, 1, path_cnt == 0 ) != 0 )
 8020cd6:	fab9 f389 	clz	r3, r9
 8020cda:	095b      	lsrs	r3, r3, #5
 8020cdc:	2201      	movs	r2, #1
 8020cde:	4631      	mov	r1, r6
 8020ce0:	4620      	mov	r0, r4
 8020ce2:	f7ff fea7 	bl	8020a34 <x509_crt_check_parent>
 8020ce6:	2800      	cmp	r0, #0
 8020ce8:	d13a      	bne.n	8020d60 <x509_crt_verify_top+0x132>
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020cea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020cec:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8020cee:	429a      	cmp	r2, r3
        check_path_cnt = path_cnt + 1;
 8020cf0:	f109 0b01 	add.w	fp, r9, #1
        if( child->subject_raw.len == trust_ca->subject_raw.len &&
 8020cf4:	d107      	bne.n	8020d06 <x509_crt_verify_top+0xd8>
            memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020cf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020cf8:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8020cfa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020cfc:	f001 fb66 	bl	80223cc <memcmp>
            check_path_cnt--;
 8020d00:	2800      	cmp	r0, #0
 8020d02:	bf08      	it	eq
 8020d04:	46cb      	moveq	fp, r9
        if( trust_ca->max_pathlen > 0 &&
 8020d06:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	dd04      	ble.n	8020d18 <x509_crt_verify_top+0xea>
            trust_ca->max_pathlen < check_path_cnt - self_cnt )
 8020d0e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8020d10:	ebab 0b02 	sub.w	fp, fp, r2
        if( trust_ca->max_pathlen > 0 &&
 8020d14:	455b      	cmp	r3, fp
 8020d16:	db23      	blt.n	8020d60 <x509_crt_verify_top+0x132>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020d18:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8020d1c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8020d20:	f894 b129 	ldrb.w	fp, [r4, #297]	; 0x129
 8020d24:	9107      	str	r1, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020d26:	4650      	mov	r0, sl
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020d28:	9306      	str	r3, [sp, #24]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020d2a:	f7f3 ff0b 	bl	8014b44 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &trust_ca->pk,
 8020d2e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8020d32:	9203      	str	r2, [sp, #12]
 8020d34:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 8020d38:	9b05      	ldr	r3, [sp, #20]
 8020d3a:	9300      	str	r3, [sp, #0]
 8020d3c:	e9cd 0201 	strd	r0, r2, [sp, #4]
 8020d40:	9b06      	ldr	r3, [sp, #24]
 8020d42:	9907      	ldr	r1, [sp, #28]
 8020d44:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020d48:	4658      	mov	r0, fp
 8020d4a:	f7f4 ff47 	bl	8015bdc <mbedtls_pk_verify_ext>
 8020d4e:	b938      	cbnz	r0, 8020d60 <x509_crt_verify_top+0x132>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020d50:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
 8020d54:	f7fe ff94 	bl	801fc80 <mbedtls_x509_time_is_past>
 8020d58:	b128      	cbz	r0, 8020d66 <x509_crt_verify_top+0x138>
            if ( future_past_ca == NULL )
 8020d5a:	2f00      	cmp	r7, #0
 8020d5c:	bf08      	it	eq
 8020d5e:	4637      	moveq	r7, r6
    for( /* trust_ca */ ; trust_ca != NULL; trust_ca = trust_ca->next )
 8020d60:	f8d6 6130 	ldr.w	r6, [r6, #304]	; 0x130
 8020d64:	e7af      	b.n	8020cc6 <x509_crt_verify_top+0x98>
            mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020d66:	f106 008c 	add.w	r0, r6, #140	; 0x8c
 8020d6a:	f7fe ff99 	bl	801fca0 <mbedtls_x509_time_is_future>
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) ||
 8020d6e:	2800      	cmp	r0, #0
 8020d70:	d1f3      	bne.n	8020d5a <x509_crt_verify_top+0x12c>
 8020d72:	4637      	mov	r7, r6
        *flags &= ~MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020d74:	682b      	ldr	r3, [r5, #0]
 8020d76:	f023 0308 	bic.w	r3, r3, #8
 8020d7a:	602b      	str	r3, [r5, #0]
        if( x509_profile_check_key( profile, child->sig_pk, &trust_ca->pk ) != 0 )
 8020d7c:	f894 1129 	ldrb.w	r1, [r4, #297]	; 0x129
 8020d80:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8020d84:	4640      	mov	r0, r8
 8020d86:	f7ff faa4 	bl	80202d2 <x509_profile_check_key>
 8020d8a:	b118      	cbz	r0, 8020d94 <x509_crt_verify_top+0x166>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020d8c:	682b      	ldr	r3, [r5, #0]
 8020d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020d92:	602b      	str	r3, [r5, #0]
    if( trust_ca != NULL &&
 8020d94:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8020d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020d98:	429a      	cmp	r2, r3
 8020d9a:	d106      	bne.n	8020daa <x509_crt_verify_top+0x17c>
          memcmp( child->subject_raw.p, trust_ca->subject_raw.p,
 8020d9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8020d9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8020da0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8020da2:	f001 fb13 	bl	80223cc <memcmp>
        ( child->subject_raw.len != trust_ca->subject_raw.len ||
 8020da6:	2800      	cmp	r0, #0
 8020da8:	d090      	beq.n	8020ccc <x509_crt_verify_top+0x9e>
    if( ca == NULL )
 8020daa:	4643      	mov	r3, r8
 8020dac:	ee18 2a10 	vmov	r2, s16
 8020db0:	4639      	mov	r1, r7
 8020db2:	4620      	mov	r0, r4
 8020db4:	f7ff feae 	bl	8020b14 <x509_crt_verifycrl.part.0>
        *flags |= x509_crt_verifycrl( child, trust_ca, ca_crl, profile );
 8020db8:	682b      	ldr	r3, [r5, #0]
 8020dba:	4318      	orrs	r0, r3
 8020dbc:	6028      	str	r0, [r5, #0]
        if( mbedtls_x509_time_is_past( &trust_ca->valid_to ) )
 8020dbe:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8020dc2:	f7fe ff5d 	bl	801fc80 <mbedtls_x509_time_is_past>
 8020dc6:	b118      	cbz	r0, 8020dd0 <x509_crt_verify_top+0x1a2>
            ca_flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dca:	f043 0301 	orr.w	r3, r3, #1
 8020dce:	9309      	str	r3, [sp, #36]	; 0x24
        if( mbedtls_x509_time_is_future( &trust_ca->valid_from ) )
 8020dd0:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8020dd4:	f7fe ff64 	bl	801fca0 <mbedtls_x509_time_is_future>
 8020dd8:	b118      	cbz	r0, 8020de2 <x509_crt_verify_top+0x1b4>
            ca_flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020de0:	9309      	str	r3, [sp, #36]	; 0x24
        if( NULL != f_vrfy )
 8020de2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020de4:	b94b      	cbnz	r3, 8020dfa <x509_crt_verify_top+0x1cc>
    {
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
            return( ret );
    }

    *flags |= ca_flags;
 8020de6:	682b      	ldr	r3, [r5, #0]
 8020de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020dea:	4313      	orrs	r3, r2
 8020dec:	602b      	str	r3, [r5, #0]

    return( 0 );
 8020dee:	2000      	movs	r0, #0
}
 8020df0:	b01b      	add	sp, #108	; 0x6c
 8020df2:	ecbd 8b02 	vpop	{d8}
 8020df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( ( ret = f_vrfy( p_vrfy, trust_ca, path_cnt + 1,
 8020dfa:	e9dd 6029 	ldrd	r6, r0, [sp, #164]	; 0xa4
 8020dfe:	ab09      	add	r3, sp, #36	; 0x24
 8020e00:	f109 0201 	add.w	r2, r9, #1
 8020e04:	4639      	mov	r1, r7
 8020e06:	47b0      	blx	r6
 8020e08:	2800      	cmp	r0, #0
 8020e0a:	d1f1      	bne.n	8020df0 <x509_crt_verify_top+0x1c2>
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020e0c:	4621      	mov	r1, r4
 8020e0e:	462b      	mov	r3, r5
 8020e10:	e9dd 4029 	ldrd	r4, r0, [sp, #164]	; 0xa4
 8020e14:	464a      	mov	r2, r9
 8020e16:	47a0      	blx	r4
 8020e18:	2800      	cmp	r0, #0
 8020e1a:	d0e4      	beq.n	8020de6 <x509_crt_verify_top+0x1b8>
 8020e1c:	e7e8      	b.n	8020df0 <x509_crt_verify_top+0x1c2>
	...

08020e20 <x509_crt_verify_child>:
                mbedtls_x509_crt *trust_ca, mbedtls_x509_crl *ca_crl,
                const mbedtls_x509_crt_profile *profile,
                int path_cnt, int self_cnt, uint32_t *flags,
                int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                void *p_vrfy )
{
 8020e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e24:	ed2d 8b02 	vpush	{d8}
 8020e28:	b09d      	sub	sp, #116	; 0x74
 8020e2a:	e9dd 8728 	ldrd	r8, r7, [sp, #160]	; 0xa0
 8020e2e:	4699      	mov	r9, r3
    int ret;
    uint32_t parent_flags = 0;
 8020e30:	2300      	movs	r3, #0
{
 8020e32:	ee08 2a10 	vmov	s16, r2
 8020e36:	9c2b      	ldr	r4, [sp, #172]	; 0xac
    uint32_t parent_flags = 0;
 8020e38:	930b      	str	r3, [sp, #44]	; 0x2c
{
 8020e3a:	4605      	mov	r5, r0
 8020e3c:	460e      	mov	r6, r1
    unsigned char hash[MBEDTLS_MD_MAX_SIZE];
    mbedtls_x509_crt *grandparent;
    const mbedtls_md_info_t *md_info;

    /* Counting intermediate self signed certificates */
    if( ( path_cnt != 0 ) && x509_name_cmp( &child->issuer, &child->subject ) == 0 )
 8020e3e:	b15f      	cbz	r7, 8020e58 <x509_crt_verify_child+0x38>
 8020e40:	f100 016c 	add.w	r1, r0, #108	; 0x6c
 8020e44:	304c      	adds	r0, #76	; 0x4c
 8020e46:	f7ff f9d9 	bl	80201fc <x509_name_cmp>
 8020e4a:	b910      	cbnz	r0, 8020e52 <x509_crt_verify_child+0x32>
        self_cnt++;
 8020e4c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020e4e:	3301      	adds	r3, #1
 8020e50:	932a      	str	r3, [sp, #168]	; 0xa8

    /* path_cnt is 0 for the first intermediate CA */
    if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )
 8020e52:	2f08      	cmp	r7, #8
 8020e54:	f000 80b9 	beq.w	8020fca <x509_crt_verify_child+0x1aa>
    {
        /* return immediately as the goal is to avoid unbounded recursion */
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
    }

    if( mbedtls_x509_time_is_past( &child->valid_to ) )
 8020e58:	f105 00a4 	add.w	r0, r5, #164	; 0xa4
 8020e5c:	f7fe ff10 	bl	801fc80 <mbedtls_x509_time_is_past>
 8020e60:	b118      	cbz	r0, 8020e6a <x509_crt_verify_child+0x4a>
        *flags |= MBEDTLS_X509_BADCERT_EXPIRED;
 8020e62:	6823      	ldr	r3, [r4, #0]
 8020e64:	f043 0301 	orr.w	r3, r3, #1
 8020e68:	6023      	str	r3, [r4, #0]

    if( mbedtls_x509_time_is_future( &child->valid_from ) )
 8020e6a:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 8020e6e:	f7fe ff17 	bl	801fca0 <mbedtls_x509_time_is_future>
 8020e72:	b118      	cbz	r0, 8020e7c <x509_crt_verify_child+0x5c>
        *flags |= MBEDTLS_X509_BADCERT_FUTURE;
 8020e74:	6823      	ldr	r3, [r4, #0]
 8020e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8020e7a:	6023      	str	r3, [r4, #0]

    if( x509_profile_check_md_alg( profile, child->sig_md ) != 0 )
 8020e7c:	f895 0128 	ldrb.w	r0, [r5, #296]	; 0x128
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020e80:	2301      	movs	r3, #1
 8020e82:	1e42      	subs	r2, r0, #1
 8020e84:	4093      	lsls	r3, r2
 8020e86:	f8d8 2000 	ldr.w	r2, [r8]
 8020e8a:	4213      	tst	r3, r2
        *flags |= MBEDTLS_X509_BADCERT_BAD_MD;
 8020e8c:	bf02      	ittt	eq
 8020e8e:	6823      	ldreq	r3, [r4, #0]
 8020e90:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8020e94:	6023      	streq	r3, [r4, #0]
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 8020e96:	f895 3129 	ldrb.w	r3, [r5, #297]	; 0x129
 8020e9a:	1e5a      	subs	r2, r3, #1
 8020e9c:	2301      	movs	r3, #1
 8020e9e:	4093      	lsls	r3, r2
 8020ea0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020ea4:	4213      	tst	r3, r2

    if( x509_profile_check_pk_alg( profile, child->sig_pk ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 8020ea6:	bf02      	ittt	eq
 8020ea8:	6823      	ldreq	r3, [r4, #0]
 8020eaa:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 8020eae:	6023      	streq	r3, [r4, #0]

    md_info = mbedtls_md_info_from_type( child->sig_md );
 8020eb0:	f7f3 fcf8 	bl	80148a4 <mbedtls_md_info_from_type>
    if( md_info == NULL )
 8020eb4:	4682      	mov	sl, r0
 8020eb6:	b920      	cbnz	r0, 8020ec2 <x509_crt_verify_child+0xa2>

        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
                           child->sig.p, child->sig.len ) != 0 )
        {
            *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;
 8020eb8:	6823      	ldr	r3, [r4, #0]
 8020eba:	f043 0308 	orr.w	r3, r3, #8
 8020ebe:	6023      	str	r3, [r4, #0]
 8020ec0:	e02f      	b.n	8020f22 <x509_crt_verify_child+0x102>
        mbedtls_md( md_info, child->tbs.p, child->tbs.len, hash );
 8020ec2:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
 8020ec6:	ab0c      	add	r3, sp, #48	; 0x30
 8020ec8:	f7f3 fd6e 	bl	80149a8 <mbedtls_md>
        if( x509_profile_check_key( profile, child->sig_pk, &parent->pk ) != 0 )
 8020ecc:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
 8020ed0:	f895 1129 	ldrb.w	r1, [r5, #297]	; 0x129
 8020ed4:	9207      	str	r2, [sp, #28]
 8020ed6:	4640      	mov	r0, r8
 8020ed8:	f7ff f9fb 	bl	80202d2 <x509_profile_check_key>
 8020edc:	9a07      	ldr	r2, [sp, #28]
 8020ede:	b118      	cbz	r0, 8020ee8 <x509_crt_verify_child+0xc8>
            *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 8020ee0:	6823      	ldr	r3, [r4, #0]
 8020ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020ee6:	6023      	str	r3, [r4, #0]
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020ee8:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 8020eec:	f895 3128 	ldrb.w	r3, [r5, #296]	; 0x128
 8020ef0:	f895 b129 	ldrb.w	fp, [r5, #297]	; 0x129
 8020ef4:	9209      	str	r2, [sp, #36]	; 0x24
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020ef6:	4650      	mov	r0, sl
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020ef8:	9108      	str	r1, [sp, #32]
 8020efa:	9307      	str	r3, [sp, #28]
                           child->sig_md, hash, mbedtls_md_get_size( md_info ),
 8020efc:	f7f3 fe22 	bl	8014b44 <mbedtls_md_get_size>
        if( mbedtls_pk_verify_ext( child->sig_pk, child->sig_opts, &parent->pk,
 8020f00:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8020f04:	9303      	str	r3, [sp, #12]
 8020f06:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8020f0a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8020f0e:	a80c      	add	r0, sp, #48	; 0x30
 8020f10:	9000      	str	r0, [sp, #0]
 8020f12:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8020f16:	9b07      	ldr	r3, [sp, #28]
 8020f18:	4658      	mov	r0, fp
 8020f1a:	f7f4 fe5f 	bl	8015bdc <mbedtls_pk_verify_ext>
 8020f1e:	2800      	cmp	r0, #0
 8020f20:	d1ca      	bne.n	8020eb8 <x509_crt_verify_child+0x98>
    if( ca == NULL )
 8020f22:	b1ae      	cbz	r6, 8020f50 <x509_crt_verify_child+0x130>
 8020f24:	4643      	mov	r3, r8
 8020f26:	464a      	mov	r2, r9
 8020f28:	4631      	mov	r1, r6
 8020f2a:	4628      	mov	r0, r5
 8020f2c:	f7ff fdf2 	bl	8020b14 <x509_crt_verifycrl.part.0>
        }
    }

#if defined(MBEDTLS_X509_CRL_PARSE_C)
    /* Check trusted CA's CRL for the given crt */
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020f30:	6823      	ldr	r3, [r4, #0]
#endif

    /* Look for a grandparent in trusted CAs */
    for( grandparent = trust_ca;
 8020f32:	ee18 aa10 	vmov	sl, s16
    *flags |= x509_crt_verifycrl(child, parent, ca_crl, profile );
 8020f36:	4318      	orrs	r0, r3
 8020f38:	6020      	str	r0, [r4, #0]
    for( grandparent = trust_ca;
 8020f3a:	f1ba 0f00 	cmp.w	sl, #0
 8020f3e:	d109      	bne.n	8020f54 <x509_crt_verify_child+0x134>
        {
            /* +2 because the current step is not yet accounted for
             * and because max_pathlen is one higher than it should be.
             * Also self signed certificates do not count to the limit. */
            if( grandparent->max_pathlen > 0 &&
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020f40:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for( grandparent = parent->next;
 8020f42:	f8d6 b130 	ldr.w	fp, [r6, #304]	; 0x130
                grandparent->max_pathlen < 2 + path_cnt - self_cnt )
 8020f46:	f107 0a02 	add.w	sl, r7, #2
 8020f4a:	ebaa 0a03 	sub.w	sl, sl, r3
        for( grandparent = parent->next;
 8020f4e:	e01f      	b.n	8020f90 <x509_crt_verify_child+0x170>
        return( flags );
 8020f50:	4630      	mov	r0, r6
 8020f52:	e7ed      	b.n	8020f30 <x509_crt_verify_child+0x110>
        if( x509_crt_check_parent( parent, grandparent,
 8020f54:	fab7 f387 	clz	r3, r7
 8020f58:	095b      	lsrs	r3, r3, #5
 8020f5a:	2200      	movs	r2, #0
 8020f5c:	4651      	mov	r1, sl
 8020f5e:	4630      	mov	r0, r6
 8020f60:	f7ff fd68 	bl	8020a34 <x509_crt_check_parent>
 8020f64:	2800      	cmp	r0, #0
 8020f66:	d052      	beq.n	802100e <x509_crt_verify_child+0x1ee>
         grandparent = grandparent->next )
 8020f68:	f8da a130 	ldr.w	sl, [sl, #304]	; 0x130
 8020f6c:	e7e5      	b.n	8020f3a <x509_crt_verify_child+0x11a>
            if( grandparent->max_pathlen > 0 &&
 8020f6e:	f8db 3100 	ldr.w	r3, [fp, #256]	; 0x100
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	dd01      	ble.n	8020f7a <x509_crt_verify_child+0x15a>
 8020f76:	4553      	cmp	r3, sl
 8020f78:	db08      	blt.n	8020f8c <x509_crt_verify_child+0x16c>
            {
                continue;
            }

            if( x509_crt_check_parent( parent, grandparent,
 8020f7a:	fab7 f387 	clz	r3, r7
 8020f7e:	095b      	lsrs	r3, r3, #5
 8020f80:	2200      	movs	r2, #0
 8020f82:	4659      	mov	r1, fp
 8020f84:	4630      	mov	r0, r6
 8020f86:	f7ff fd55 	bl	8020a34 <x509_crt_check_parent>
 8020f8a:	b300      	cbz	r0, 8020fce <x509_crt_verify_child+0x1ae>
             grandparent = grandparent->next )
 8020f8c:	f8db b130 	ldr.w	fp, [fp, #304]	; 0x130
        for( grandparent = parent->next;
 8020f90:	f1bb 0f00 	cmp.w	fp, #0
 8020f94:	d1eb      	bne.n	8020f6e <x509_crt_verify_child+0x14e>
            if( ret != 0 )
                return( ret );
        }
        else
        {
            ret = x509_crt_verify_top( parent, trust_ca, ca_crl, profile,
 8020f96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020f98:	9304      	str	r3, [sp, #16]
 8020f9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020f9c:	9303      	str	r3, [sp, #12]
 8020f9e:	ab0b      	add	r3, sp, #44	; 0x2c
 8020fa0:	9302      	str	r3, [sp, #8]
 8020fa2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020fa4:	9301      	str	r3, [sp, #4]
 8020fa6:	ee18 1a10 	vmov	r1, s16
 8020faa:	1c7b      	adds	r3, r7, #1
 8020fac:	9300      	str	r3, [sp, #0]
 8020fae:	464a      	mov	r2, r9
 8020fb0:	4643      	mov	r3, r8
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 8020fb2:	4630      	mov	r0, r6
 8020fb4:	f7ff fe3b 	bl	8020c2e <x509_crt_verify_top>
 8020fb8:	e01b      	b.n	8020ff2 <x509_crt_verify_child+0x1d2>
        }
    }

    /* child is verified to be a child of the parent, call verify callback */
    if( NULL != f_vrfy )
        if( ( ret = f_vrfy( p_vrfy, child, path_cnt, flags ) ) != 0 )
 8020fba:	4629      	mov	r1, r5
 8020fbc:	4623      	mov	r3, r4
 8020fbe:	e9dd 502c 	ldrd	r5, r0, [sp, #176]	; 0xb0
 8020fc2:	463a      	mov	r2, r7
 8020fc4:	47a8      	blx	r5
 8020fc6:	b1c0      	cbz	r0, 8020ffa <x509_crt_verify_child+0x1da>
 8020fc8:	e01c      	b.n	8021004 <x509_crt_verify_child+0x1e4>
        return( MBEDTLS_ERR_X509_FATAL_ERROR );
 8020fca:	4818      	ldr	r0, [pc, #96]	; (802102c <x509_crt_verify_child+0x20c>)
 8020fcc:	e01a      	b.n	8021004 <x509_crt_verify_child+0x1e4>
            ret = x509_crt_verify_child( parent, grandparent, trust_ca, ca_crl,
 8020fce:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020fd0:	9305      	str	r3, [sp, #20]
 8020fd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020fd4:	9304      	str	r3, [sp, #16]
 8020fd6:	ab0b      	add	r3, sp, #44	; 0x2c
 8020fd8:	9303      	str	r3, [sp, #12]
 8020fda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8020fdc:	9302      	str	r3, [sp, #8]
 8020fde:	1c7b      	adds	r3, r7, #1
 8020fe0:	e9cd 8300 	strd	r8, r3, [sp]
 8020fe4:	ee18 2a10 	vmov	r2, s16
 8020fe8:	464b      	mov	r3, r9
 8020fea:	4659      	mov	r1, fp
 8020fec:	4630      	mov	r0, r6
 8020fee:	f7ff ff17 	bl	8020e20 <x509_crt_verify_child>
        if( ret != 0 )
 8020ff2:	b938      	cbnz	r0, 8021004 <x509_crt_verify_child+0x1e4>
    if( NULL != f_vrfy )
 8020ff4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d1df      	bne.n	8020fba <x509_crt_verify_child+0x19a>
            return( ret );

    *flags |= parent_flags;
 8020ffa:	6823      	ldr	r3, [r4, #0]
 8020ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020ffe:	4313      	orrs	r3, r2
 8021000:	6023      	str	r3, [r4, #0]

    return( 0 );
 8021002:	2000      	movs	r0, #0
}
 8021004:	b01d      	add	sp, #116	; 0x74
 8021006:	ecbd 8b02 	vpop	{d8}
 802100a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = x509_crt_verify_top( parent, grandparent, ca_crl, profile,
 802100e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8021010:	9304      	str	r3, [sp, #16]
 8021012:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021014:	9303      	str	r3, [sp, #12]
 8021016:	ab0b      	add	r3, sp, #44	; 0x2c
 8021018:	9302      	str	r3, [sp, #8]
 802101a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802101c:	9301      	str	r3, [sp, #4]
 802101e:	1c7b      	adds	r3, r7, #1
 8021020:	9300      	str	r3, [sp, #0]
 8021022:	464a      	mov	r2, r9
 8021024:	4643      	mov	r3, r8
 8021026:	4651      	mov	r1, sl
 8021028:	e7c3      	b.n	8020fb2 <x509_crt_verify_child+0x192>
 802102a:	bf00      	nop
 802102c:	ffffd000 	.word	0xffffd000

08021030 <mbedtls_x509_crt_verify_with_profile>:
                     mbedtls_x509_crl *ca_crl,
                     const mbedtls_x509_crt_profile *profile,
                     const char *cn, uint32_t *flags,
                     int (*f_vrfy)(void *, mbedtls_x509_crt *, int, uint32_t *),
                     void *p_vrfy )
{
 8021030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021034:	b089      	sub	sp, #36	; 0x24
 8021036:	e9dd 8512 	ldrd	r8, r5, [sp, #72]	; 0x48
 802103a:	4692      	mov	sl, r2
    mbedtls_x509_crt *parent;
    mbedtls_x509_name *name;
    mbedtls_x509_sequence *cur = NULL;
    mbedtls_pk_type_t pk_type;

    *flags = 0;
 802103c:	2200      	movs	r2, #0
{
 802103e:	4604      	mov	r4, r0
 8021040:	4689      	mov	r9, r1
    *flags = 0;
 8021042:	602a      	str	r2, [r5, #0]

    if( profile == NULL )
 8021044:	461e      	mov	r6, r3
 8021046:	2b00      	cmp	r3, #0
 8021048:	f000 8096 	beq.w	8021178 <mbedtls_x509_crt_verify_with_profile+0x148>
    {
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
        goto exit;
    }

    if( cn != NULL )
 802104c:	f1b8 0f00 	cmp.w	r8, #0
 8021050:	d026      	beq.n	80210a0 <mbedtls_x509_crt_verify_with_profile+0x70>
    {
        name = &crt->subject;
        cn_len = strlen( cn );
 8021052:	4640      	mov	r0, r8
 8021054:	f7df f8c6 	bl	80001e4 <strlen>

        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8021058:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
 802105c:	069b      	lsls	r3, r3, #26
        cn_len = strlen( cn );
 802105e:	4683      	mov	fp, r0
        if( crt->ext_types & MBEDTLS_X509_EXT_SUBJECT_ALT_NAME )
 8021060:	d53d      	bpl.n	80210de <mbedtls_x509_crt_verify_with_profile+0xae>
        {
            cur = &crt->subject_alt_names;
 8021062:	f104 07e8 	add.w	r7, r4, #232	; 0xe8

            while( cur != NULL )
            {
                if( cur->buf.len == cn_len &&
 8021066:	687b      	ldr	r3, [r7, #4]
 8021068:	455b      	cmp	r3, fp
 802106a:	d107      	bne.n	802107c <mbedtls_x509_crt_verify_with_profile+0x4c>
                    x509_memcasecmp( cn, cur->buf.p, cn_len ) == 0 )
 802106c:	68b9      	ldr	r1, [r7, #8]
 802106e:	9307      	str	r3, [sp, #28]
 8021070:	465a      	mov	r2, fp
 8021072:	4640      	mov	r0, r8
 8021074:	f7ff f8aa 	bl	80201cc <x509_memcasecmp>
                if( cur->buf.len == cn_len &&
 8021078:	9b07      	ldr	r3, [sp, #28]
 802107a:	b188      	cbz	r0, 80210a0 <mbedtls_x509_crt_verify_with_profile+0x70>
                    break;

                if( cur->buf.len > 2 &&
 802107c:	2b02      	cmp	r3, #2
 802107e:	d90a      	bls.n	8021096 <mbedtls_x509_crt_verify_with_profile+0x66>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8021080:	4954      	ldr	r1, [pc, #336]	; (80211d4 <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 8021082:	68b8      	ldr	r0, [r7, #8]
 8021084:	2202      	movs	r2, #2
 8021086:	f001 f9a1 	bl	80223cc <memcmp>
                if( cur->buf.len > 2 &&
 802108a:	b920      	cbnz	r0, 8021096 <mbedtls_x509_crt_verify_with_profile+0x66>
                    x509_check_wildcard( cn, &cur->buf ) == 0 )
 802108c:	4639      	mov	r1, r7
 802108e:	4640      	mov	r0, r8
 8021090:	f7ff f8f3 	bl	802027a <x509_check_wildcard>
                    memcmp( cur->buf.p, "*.", 2 ) == 0 &&
 8021094:	b120      	cbz	r0, 80210a0 <mbedtls_x509_crt_verify_with_profile+0x70>
                {
                    break;
                }

                cur = cur->next;
 8021096:	68ff      	ldr	r7, [r7, #12]
            while( cur != NULL )
 8021098:	2f00      	cmp	r7, #0
 802109a:	d1e4      	bne.n	8021066 <mbedtls_x509_crt_verify_with_profile+0x36>
            }

            if( cur == NULL )
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
 802109c:	2304      	movs	r3, #4
 802109e:	602b      	str	r3, [r5, #0]
                *flags |= MBEDTLS_X509_BADCERT_CN_MISMATCH;
        }
    }

    /* Check the type and size of the key */
    pk_type = mbedtls_pk_get_type( &crt->pk );
 80210a0:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80210a4:	4610      	mov	r0, r2
 80210a6:	9207      	str	r2, [sp, #28]
 80210a8:	f7f4 fe0e 	bl	8015cc8 <mbedtls_pk_get_type>
    if( ( profile->allowed_mds & MBEDTLS_X509_ID_FLAG( md_alg ) ) != 0 )
 80210ac:	2301      	movs	r3, #1
 80210ae:	1e41      	subs	r1, r0, #1
 80210b0:	408b      	lsls	r3, r1
 80210b2:	6871      	ldr	r1, [r6, #4]
 80210b4:	9a07      	ldr	r2, [sp, #28]
 80210b6:	420b      	tst	r3, r1

    if( x509_profile_check_pk_alg( profile, pk_type ) != 0 )
        *flags |= MBEDTLS_X509_BADCERT_BAD_PK;
 80210b8:	bf02      	ittt	eq
 80210ba:	682b      	ldreq	r3, [r5, #0]
 80210bc:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 80210c0:	602b      	streq	r3, [r5, #0]

    if( x509_profile_check_key( profile, pk_type, &crt->pk ) != 0 )
 80210c2:	4601      	mov	r1, r0
 80210c4:	4630      	mov	r0, r6
 80210c6:	f7ff f904 	bl	80202d2 <x509_profile_check_key>
 80210ca:	b118      	cbz	r0, 80210d4 <mbedtls_x509_crt_verify_with_profile+0xa4>
        *flags |= MBEDTLS_X509_BADCERT_BAD_KEY;
 80210cc:	682b      	ldr	r3, [r5, #0]
 80210ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80210d2:	602b      	str	r3, [r5, #0]
{
 80210d4:	464f      	mov	r7, r9

    /* Look for a parent in trusted CAs */
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 80210d6:	bb5f      	cbnz	r7, 8021130 <mbedtls_x509_crt_verify_with_profile+0x100>
            goto exit;
    }
    else
    {
        /* Look for a parent upwards the chain */
        for( parent = crt->next; parent != NULL; parent = parent->next )
 80210d8:	f8d4 7130 	ldr.w	r7, [r4, #304]	; 0x130
 80210dc:	e03c      	b.n	8021158 <mbedtls_x509_crt_verify_with_profile+0x128>
        name = &crt->subject;
 80210de:	f104 076c 	add.w	r7, r4, #108	; 0x6c
                if( MBEDTLS_OID_CMP( MBEDTLS_OID_AT_CN, &name->oid ) == 0 )
 80210e2:	687a      	ldr	r2, [r7, #4]
 80210e4:	2a03      	cmp	r2, #3
 80210e6:	d11f      	bne.n	8021128 <mbedtls_x509_crt_verify_with_profile+0xf8>
 80210e8:	68b9      	ldr	r1, [r7, #8]
 80210ea:	483b      	ldr	r0, [pc, #236]	; (80211d8 <mbedtls_x509_crt_verify_with_profile+0x1a8>)
 80210ec:	f001 f96e 	bl	80223cc <memcmp>
 80210f0:	b9d0      	cbnz	r0, 8021128 <mbedtls_x509_crt_verify_with_profile+0xf8>
                    if( name->val.len == cn_len &&
 80210f2:	693b      	ldr	r3, [r7, #16]
 80210f4:	455b      	cmp	r3, fp
 80210f6:	d108      	bne.n	802110a <mbedtls_x509_crt_verify_with_profile+0xda>
                        x509_memcasecmp( name->val.p, cn, cn_len ) == 0 )
 80210f8:	6978      	ldr	r0, [r7, #20]
 80210fa:	9307      	str	r3, [sp, #28]
 80210fc:	465a      	mov	r2, fp
 80210fe:	4641      	mov	r1, r8
 8021100:	f7ff f864 	bl	80201cc <x509_memcasecmp>
                    if( name->val.len == cn_len &&
 8021104:	9b07      	ldr	r3, [sp, #28]
 8021106:	2800      	cmp	r0, #0
 8021108:	d0ca      	beq.n	80210a0 <mbedtls_x509_crt_verify_with_profile+0x70>
                    if( name->val.len > 2 &&
 802110a:	2b02      	cmp	r3, #2
 802110c:	d90c      	bls.n	8021128 <mbedtls_x509_crt_verify_with_profile+0xf8>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 802110e:	4931      	ldr	r1, [pc, #196]	; (80211d4 <mbedtls_x509_crt_verify_with_profile+0x1a4>)
 8021110:	6978      	ldr	r0, [r7, #20]
 8021112:	2202      	movs	r2, #2
 8021114:	f001 f95a 	bl	80223cc <memcmp>
                    if( name->val.len > 2 &&
 8021118:	b930      	cbnz	r0, 8021128 <mbedtls_x509_crt_verify_with_profile+0xf8>
                        x509_check_wildcard( cn, &name->val ) == 0 )
 802111a:	f107 010c 	add.w	r1, r7, #12
 802111e:	4640      	mov	r0, r8
 8021120:	f7ff f8ab 	bl	802027a <x509_check_wildcard>
                        memcmp( name->val.p, "*.", 2 ) == 0 &&
 8021124:	2800      	cmp	r0, #0
 8021126:	d0bb      	beq.n	80210a0 <mbedtls_x509_crt_verify_with_profile+0x70>
                name = name->next;
 8021128:	69bf      	ldr	r7, [r7, #24]
            while( name != NULL )
 802112a:	2f00      	cmp	r7, #0
 802112c:	d1d9      	bne.n	80210e2 <mbedtls_x509_crt_verify_with_profile+0xb2>
 802112e:	e7b5      	b.n	802109c <mbedtls_x509_crt_verify_with_profile+0x6c>
        if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8021130:	2301      	movs	r3, #1
 8021132:	2200      	movs	r2, #0
 8021134:	4639      	mov	r1, r7
 8021136:	4620      	mov	r0, r4
 8021138:	f7ff fc7c 	bl	8020a34 <x509_crt_check_parent>
 802113c:	2800      	cmp	r0, #0
 802113e:	d03e      	beq.n	80211be <mbedtls_x509_crt_verify_with_profile+0x18e>
    for( parent = trust_ca; parent != NULL; parent = parent->next )
 8021140:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8021144:	e7c7      	b.n	80210d6 <mbedtls_x509_crt_verify_with_profile+0xa6>
            if( x509_crt_check_parent( crt, parent, 0, pathlen == 0 ) == 0 )
 8021146:	2301      	movs	r3, #1
 8021148:	2200      	movs	r2, #0
 802114a:	4639      	mov	r1, r7
 802114c:	4620      	mov	r0, r4
 802114e:	f7ff fc71 	bl	8020a34 <x509_crt_check_parent>
 8021152:	b1d8      	cbz	r0, 802118c <mbedtls_x509_crt_verify_with_profile+0x15c>
        for( parent = crt->next; parent != NULL; parent = parent->next )
 8021154:	f8d7 7130 	ldr.w	r7, [r7, #304]	; 0x130
 8021158:	2f00      	cmp	r7, #0
 802115a:	d1f4      	bne.n	8021146 <mbedtls_x509_crt_verify_with_profile+0x116>
            if( ret != 0 )
                goto exit;
        }
        else
        {
            ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,
 802115c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802115e:	9304      	str	r3, [sp, #16]
 8021160:	e9cd 7700 	strd	r7, r7, [sp]
 8021164:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021166:	4652      	mov	r2, sl
 8021168:	e9cd 5302 	strd	r5, r3, [sp, #8]
 802116c:	4649      	mov	r1, r9
 802116e:	4633      	mov	r3, r6
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 8021170:	4620      	mov	r0, r4
 8021172:	f7ff fd5c 	bl	8020c2e <x509_crt_verify_top>
        if( ret != 0 )
 8021176:	e017      	b.n	80211a8 <mbedtls_x509_crt_verify_with_profile+0x178>
        ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;
 8021178:	4818      	ldr	r0, [pc, #96]	; (80211dc <mbedtls_x509_crt_verify_with_profile+0x1ac>)
 802117a:	e01a      	b.n	80211b2 <mbedtls_x509_crt_verify_with_profile+0x182>
exit:
    /* prevent misuse of the vrfy callback - VERIFY_FAILED would be ignored by
     * the SSL module for authmode optional, but non-zero return from the
     * callback means a fatal error so it shouldn't be ignored */
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
        ret = MBEDTLS_ERR_X509_FATAL_ERROR;
 802117c:	4818      	ldr	r0, [pc, #96]	; (80211e0 <mbedtls_x509_crt_verify_with_profile+0x1b0>)
 802117e:	e018      	b.n	80211b2 <mbedtls_x509_crt_verify_with_profile+0x182>
    {
        *flags = (uint32_t) -1;
        return( ret );
    }

    if( *flags != 0 )
 8021180:	682a      	ldr	r2, [r5, #0]
        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );
 8021182:	4b18      	ldr	r3, [pc, #96]	; (80211e4 <mbedtls_x509_crt_verify_with_profile+0x1b4>)
 8021184:	2a00      	cmp	r2, #0
 8021186:	bf18      	it	ne
 8021188:	4618      	movne	r0, r3
 802118a:	e015      	b.n	80211b8 <mbedtls_x509_crt_verify_with_profile+0x188>
            ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,
 802118c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802118e:	9305      	str	r3, [sp, #20]
 8021190:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021192:	9600      	str	r6, [sp, #0]
 8021194:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8021198:	e9cd 0001 	strd	r0, r0, [sp, #4]
 802119c:	4653      	mov	r3, sl
 802119e:	464a      	mov	r2, r9
 80211a0:	4639      	mov	r1, r7
 80211a2:	4620      	mov	r0, r4
 80211a4:	f7ff fe3c 	bl	8020e20 <x509_crt_verify_child>
    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )
 80211a8:	f510 5f1c 	cmn.w	r0, #9984	; 0x2700
 80211ac:	d0e6      	beq.n	802117c <mbedtls_x509_crt_verify_with_profile+0x14c>
    if( ret != 0 )
 80211ae:	2800      	cmp	r0, #0
 80211b0:	d0e6      	beq.n	8021180 <mbedtls_x509_crt_verify_with_profile+0x150>
        *flags = (uint32_t) -1;
 80211b2:	f04f 33ff 	mov.w	r3, #4294967295
 80211b6:	602b      	str	r3, [r5, #0]

    return( 0 );
}
 80211b8:	b009      	add	sp, #36	; 0x24
 80211ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ret = x509_crt_verify_top( crt, parent, ca_crl, profile,
 80211be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80211c0:	9304      	str	r3, [sp, #16]
 80211c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80211c4:	e9cd 0000 	strd	r0, r0, [sp]
 80211c8:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80211cc:	4652      	mov	r2, sl
 80211ce:	4633      	mov	r3, r6
 80211d0:	4639      	mov	r1, r7
 80211d2:	e7cd      	b.n	8021170 <mbedtls_x509_crt_verify_with_profile+0x140>
 80211d4:	0803339d 	.word	0x0803339d
 80211d8:	08030841 	.word	0x08030841
 80211dc:	ffffd800 	.word	0xffffd800
 80211e0:	ffffd000 	.word	0xffffd000
 80211e4:	ffffd900 	.word	0xffffd900

080211e8 <mbedtls_x509_crt_init>:
/*
 * Initialize a certificate chain
 */
void mbedtls_x509_crt_init( mbedtls_x509_crt *crt )
{
    memset( crt, 0, sizeof(mbedtls_x509_crt) );
 80211e8:	f44f 729a 	mov.w	r2, #308	; 0x134
 80211ec:	2100      	movs	r1, #0
 80211ee:	f001 b923 	b.w	8022438 <memset>
	...

080211f4 <mbedtls_x509_crt_free>:

/*
 * Unallocate all certificate data
 */
void mbedtls_x509_crt_free( mbedtls_x509_crt *crt )
{
 80211f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    mbedtls_x509_name *name_cur;
    mbedtls_x509_name *name_prv;
    mbedtls_x509_sequence *seq_cur;
    mbedtls_x509_sequence *seq_prv;

    if( crt == NULL )
 80211f8:	4605      	mov	r5, r0
 80211fa:	2800      	cmp	r0, #0
 80211fc:	d034      	beq.n	8021268 <mbedtls_x509_crt_free+0x74>
    do
    {
        mbedtls_pk_free( &cert_cur->pk );

#if defined(MBEDTLS_X509_RSASSA_PSS_SUPPORT)
        mbedtls_free( cert_cur->sig_opts );
 80211fe:	4f32      	ldr	r7, [pc, #200]	; (80212c8 <mbedtls_x509_crt_free+0xd4>)
 8021200:	4604      	mov	r4, r0
 8021202:	463e      	mov	r6, r7
        mbedtls_pk_free( &cert_cur->pk );
 8021204:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8021208:	f7f4 fc33 	bl	8015a72 <mbedtls_pk_free>
        mbedtls_free( cert_cur->sig_opts );
 802120c:	683b      	ldr	r3, [r7, #0]
 802120e:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 8021212:	4798      	blx	r3
#endif

        name_cur = cert_cur->issuer.next;
 8021214:	6e62      	ldr	r2, [r4, #100]	; 0x64
        while( name_cur != NULL )
 8021216:	bb52      	cbnz	r2, 802126e <mbedtls_x509_crt_free+0x7a>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        name_cur = cert_cur->subject.next;
 8021218:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
        while( name_cur != NULL )
 802121c:	2a00      	cmp	r2, #0
 802121e:	d131      	bne.n	8021284 <mbedtls_x509_crt_free+0x90>
            name_cur = name_cur->next;
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
            mbedtls_free( name_prv );
        }

        seq_cur = cert_cur->ext_key_usage.next;
 8021220:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
        while( seq_cur != NULL )
 8021224:	2a00      	cmp	r2, #0
 8021226:	d138      	bne.n	802129a <mbedtls_x509_crt_free+0xa6>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        seq_cur = cert_cur->subject_alt_names.next;
 8021228:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
        while( seq_cur != NULL )
 802122c:	2a00      	cmp	r2, #0
 802122e:	d13f      	bne.n	80212b0 <mbedtls_x509_crt_free+0xbc>
            seq_cur = seq_cur->next;
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
            mbedtls_free( seq_prv );
        }

        if( cert_cur->raw.p != NULL )
 8021230:	68a0      	ldr	r0, [r4, #8]
 8021232:	b128      	cbz	r0, 8021240 <mbedtls_x509_crt_free+0x4c>
        {
            mbedtls_zeroize( cert_cur->raw.p, cert_cur->raw.len );
 8021234:	6861      	ldr	r1, [r4, #4]
 8021236:	f7fe ffc1 	bl	80201bc <mbedtls_zeroize>
            mbedtls_free( cert_cur->raw.p );
 802123a:	6833      	ldr	r3, [r6, #0]
 802123c:	68a0      	ldr	r0, [r4, #8]
 802123e:	4798      	blx	r3
        }

        cert_cur = cert_cur->next;
 8021240:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    }
    while( cert_cur != NULL );
 8021244:	2c00      	cmp	r4, #0
 8021246:	d1dd      	bne.n	8021204 <mbedtls_x509_crt_free+0x10>
 8021248:	462c      	mov	r4, r5

    cert_cur = crt;
    do
    {
        cert_prv = cert_cur;
        cert_cur = cert_cur->next;
 802124a:	4620      	mov	r0, r4

        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 802124c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021250:	9001      	str	r0, [sp, #4]
        cert_cur = cert_cur->next;
 8021252:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
        mbedtls_zeroize( cert_prv, sizeof( mbedtls_x509_crt ) );
 8021256:	f7fe ffb1 	bl	80201bc <mbedtls_zeroize>
        if( cert_prv != crt )
 802125a:	9801      	ldr	r0, [sp, #4]
 802125c:	4285      	cmp	r5, r0
 802125e:	d001      	beq.n	8021264 <mbedtls_x509_crt_free+0x70>
            mbedtls_free( cert_prv );
 8021260:	6833      	ldr	r3, [r6, #0]
 8021262:	4798      	blx	r3
    }
    while( cert_cur != NULL );
 8021264:	2c00      	cmp	r4, #0
 8021266:	d1f0      	bne.n	802124a <mbedtls_x509_crt_free+0x56>
}
 8021268:	b002      	add	sp, #8
 802126a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802126e:	4610      	mov	r0, r2
 8021270:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 8021272:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021276:	f7fe ffa1 	bl	80201bc <mbedtls_zeroize>
            mbedtls_free( name_prv );
 802127a:	6833      	ldr	r3, [r6, #0]
 802127c:	4610      	mov	r0, r2
 802127e:	4798      	blx	r3
            name_cur = name_cur->next;
 8021280:	4642      	mov	r2, r8
 8021282:	e7c8      	b.n	8021216 <mbedtls_x509_crt_free+0x22>
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 8021284:	4610      	mov	r0, r2
 8021286:	2120      	movs	r1, #32
            name_cur = name_cur->next;
 8021288:	f8d2 8018 	ldr.w	r8, [r2, #24]
            mbedtls_zeroize( name_prv, sizeof( mbedtls_x509_name ) );
 802128c:	f7fe ff96 	bl	80201bc <mbedtls_zeroize>
            mbedtls_free( name_prv );
 8021290:	6833      	ldr	r3, [r6, #0]
 8021292:	4610      	mov	r0, r2
 8021294:	4798      	blx	r3
            name_cur = name_cur->next;
 8021296:	4642      	mov	r2, r8
 8021298:	e7c0      	b.n	802121c <mbedtls_x509_crt_free+0x28>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 802129a:	4610      	mov	r0, r2
 802129c:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 802129e:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80212a2:	f7fe ff8b 	bl	80201bc <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 80212a6:	6833      	ldr	r3, [r6, #0]
 80212a8:	4610      	mov	r0, r2
 80212aa:	4798      	blx	r3
            seq_cur = seq_cur->next;
 80212ac:	4642      	mov	r2, r8
 80212ae:	e7b9      	b.n	8021224 <mbedtls_x509_crt_free+0x30>
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80212b0:	4610      	mov	r0, r2
 80212b2:	2110      	movs	r1, #16
            seq_cur = seq_cur->next;
 80212b4:	f8d2 800c 	ldr.w	r8, [r2, #12]
            mbedtls_zeroize( seq_prv, sizeof( mbedtls_x509_sequence ) );
 80212b8:	f7fe ff80 	bl	80201bc <mbedtls_zeroize>
            mbedtls_free( seq_prv );
 80212bc:	6833      	ldr	r3, [r6, #0]
 80212be:	4610      	mov	r0, r2
 80212c0:	4798      	blx	r3
            seq_cur = seq_cur->next;
 80212c2:	4642      	mov	r2, r8
 80212c4:	e7b2      	b.n	802122c <mbedtls_x509_crt_free+0x38>
 80212c6:	bf00      	nop
 80212c8:	200005a4 	.word	0x200005a4

080212cc <mbedtls_x509_crt_parse_der>:
{
 80212cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d0:	460d      	mov	r5, r1
 80212d2:	b09b      	sub	sp, #108	; 0x6c
 80212d4:	4616      	mov	r6, r2
    if( crt == NULL || buf == NULL )
 80212d6:	4683      	mov	fp, r0
 80212d8:	2800      	cmp	r0, #0
 80212da:	f000 8323 	beq.w	8021924 <mbedtls_x509_crt_parse_der+0x658>
 80212de:	2900      	cmp	r1, #0
 80212e0:	f000 8320 	beq.w	8021924 <mbedtls_x509_crt_parse_der+0x658>
 80212e4:	4604      	mov	r4, r0
    mbedtls_x509_crt *crt = chain, *prev = NULL;
 80212e6:	f04f 0a00 	mov.w	sl, #0
    while( crt->version != 0 && crt->next != NULL )
 80212ea:	69a3      	ldr	r3, [r4, #24]
 80212ec:	b1ab      	cbz	r3, 802131a <mbedtls_x509_crt_parse_der+0x4e>
 80212ee:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 80212f2:	46a2      	mov	sl, r4
 80212f4:	b953      	cbnz	r3, 802130c <mbedtls_x509_crt_parse_der+0x40>
        crt->next = mbedtls_calloc( 1, sizeof( mbedtls_x509_crt ) );
 80212f6:	4ba7      	ldr	r3, [pc, #668]	; (8021594 <mbedtls_x509_crt_parse_der+0x2c8>)
 80212f8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80212fc:	681b      	ldr	r3, [r3, #0]
 80212fe:	2001      	movs	r0, #1
 8021300:	4798      	blx	r3
 8021302:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
        if( crt->next == NULL )
 8021306:	b918      	cbnz	r0, 8021310 <mbedtls_x509_crt_parse_der+0x44>
            return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8021308:	4ea3      	ldr	r6, [pc, #652]	; (8021598 <mbedtls_x509_crt_parse_der+0x2cc>)
 802130a:	e2fa      	b.n	8021902 <mbedtls_x509_crt_parse_der+0x636>
 802130c:	461c      	mov	r4, r3
 802130e:	e7ec      	b.n	80212ea <mbedtls_x509_crt_parse_der+0x1e>
        mbedtls_x509_crt_init( crt->next );
 8021310:	f7ff ff6a 	bl	80211e8 <mbedtls_x509_crt_init>
        crt = crt->next;
 8021314:	46a2      	mov	sl, r4
 8021316:	f8d4 4130 	ldr.w	r4, [r4, #304]	; 0x130
    memset( &sig_params1, 0, sizeof( mbedtls_x509_buf ) );
 802131a:	2300      	movs	r3, #0
 802131c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
    memset( &sig_params2, 0, sizeof( mbedtls_x509_buf ) );
 8021320:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8021324:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
    memset( &sig_oid2, 0, sizeof( mbedtls_x509_buf ) );
 8021328:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 802132c:	9313      	str	r3, [sp, #76]	; 0x4c
    if( crt == NULL || buf == NULL )
 802132e:	2c00      	cmp	r4, #0
 8021330:	f000 82eb 	beq.w	802190a <mbedtls_x509_crt_parse_der+0x63e>
    len = buflen;
 8021334:	e9cd 6505 	strd	r6, r5, [sp, #20]
    end = p + len;
 8021338:	442e      	add	r6, r5
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 802133a:	2330      	movs	r3, #48	; 0x30
 802133c:	aa05      	add	r2, sp, #20
 802133e:	4631      	mov	r1, r6
 8021340:	a806      	add	r0, sp, #24
 8021342:	f7ec fed9 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8021346:	b158      	cbz	r0, 8021360 <mbedtls_x509_crt_parse_der+0x94>
        mbedtls_x509_crt_free( crt );
 8021348:	4620      	mov	r0, r4
 802134a:	f7ff ff53 	bl	80211f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT );
 802134e:	4e93      	ldr	r6, [pc, #588]	; (802159c <mbedtls_x509_crt_parse_der+0x2d0>)
        if( prev )
 8021350:	f1ba 0f00 	cmp.w	sl, #0
 8021354:	f040 82e2 	bne.w	802191c <mbedtls_x509_crt_parse_der+0x650>
        if( crt != chain )
 8021358:	45a3      	cmp	fp, r4
 802135a:	f040 82da 	bne.w	8021912 <mbedtls_x509_crt_parse_der+0x646>
 802135e:	e2d0      	b.n	8021902 <mbedtls_x509_crt_parse_der+0x636>
    if( len > (size_t) ( end - p ) )
 8021360:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8021364:	1af6      	subs	r6, r6, r3
 8021366:	428e      	cmp	r6, r1
 8021368:	d204      	bcs.n	8021374 <mbedtls_x509_crt_parse_der+0xa8>
        mbedtls_x509_crt_free( crt );
 802136a:	4620      	mov	r0, r4
 802136c:	f7ff ff42 	bl	80211f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT +
 8021370:	4e8b      	ldr	r6, [pc, #556]	; (80215a0 <mbedtls_x509_crt_parse_der+0x2d4>)
 8021372:	e7ed      	b.n	8021350 <mbedtls_x509_crt_parse_der+0x84>
    crt_end = p + len;
 8021374:	440b      	add	r3, r1
    crt->raw.len = crt_end - buf;
 8021376:	1b59      	subs	r1, r3, r5
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 8021378:	4b86      	ldr	r3, [pc, #536]	; (8021594 <mbedtls_x509_crt_parse_der+0x2c8>)
    crt->raw.len = crt_end - buf;
 802137a:	6061      	str	r1, [r4, #4]
    crt->raw.p = p = mbedtls_calloc( 1, crt->raw.len );
 802137c:	681b      	ldr	r3, [r3, #0]
 802137e:	2001      	movs	r0, #1
 8021380:	4798      	blx	r3
 8021382:	9006      	str	r0, [sp, #24]
 8021384:	60a0      	str	r0, [r4, #8]
    if( p == NULL )
 8021386:	b908      	cbnz	r0, 802138c <mbedtls_x509_crt_parse_der+0xc0>
        return( MBEDTLS_ERR_X509_ALLOC_FAILED );
 8021388:	4e83      	ldr	r6, [pc, #524]	; (8021598 <mbedtls_x509_crt_parse_der+0x2cc>)
 802138a:	e7e1      	b.n	8021350 <mbedtls_x509_crt_parse_der+0x84>
    memcpy( p, buf, crt->raw.len );
 802138c:	6862      	ldr	r2, [r4, #4]
 802138e:	4629      	mov	r1, r5
 8021390:	f001 f82a 	bl	80223e8 <memcpy>
    p += crt->raw.len - len;
 8021394:	6862      	ldr	r2, [r4, #4]
 8021396:	9b05      	ldr	r3, [sp, #20]
 8021398:	9906      	ldr	r1, [sp, #24]
 802139a:	1ad3      	subs	r3, r2, r3
 802139c:	440b      	add	r3, r1
    end = crt_end = p + len;
 802139e:	eb01 0802 	add.w	r8, r1, r2
    p += crt->raw.len - len;
 80213a2:	9306      	str	r3, [sp, #24]
    crt->tbs.p = p;
 80213a4:	6163      	str	r3, [r4, #20]
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80213a6:	aa05      	add	r2, sp, #20
 80213a8:	2330      	movs	r3, #48	; 0x30
 80213aa:	4641      	mov	r1, r8
 80213ac:	a806      	add	r0, sp, #24
 80213ae:	f7ec fea3 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80213b2:	4607      	mov	r7, r0
 80213b4:	b140      	cbz	r0, 80213c8 <mbedtls_x509_crt_parse_der+0xfc>
        mbedtls_x509_crt_free( crt );
 80213b6:	4620      	mov	r0, r4
 80213b8:	f7ff ff1c 	bl	80211f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 80213bc:	f5a7 5606 	sub.w	r6, r7, #8576	; 0x2180
    if( ( ret = x509_crt_parse_der_core( crt, buf, buflen ) ) != 0 )
 80213c0:	2e00      	cmp	r6, #0
 80213c2:	f000 829e 	beq.w	8021902 <mbedtls_x509_crt_parse_der+0x636>
 80213c6:	e7c3      	b.n	8021350 <mbedtls_x509_crt_parse_der+0x84>
    end = p + len;
 80213c8:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 80213cc:	441d      	add	r5, r3
    crt->tbs.len = end - crt->tbs.p;
 80213ce:	6963      	ldr	r3, [r4, #20]
 80213d0:	1aeb      	subs	r3, r5, r3
 80213d2:	6123      	str	r3, [r4, #16]
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80213d4:	aa17      	add	r2, sp, #92	; 0x5c
 80213d6:	23a0      	movs	r3, #160	; 0xa0
 80213d8:	4629      	mov	r1, r5
 80213da:	a806      	add	r0, sp, #24
 80213dc:	f7ec fe8c 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80213e0:	4606      	mov	r6, r0
 80213e2:	b1e8      	cbz	r0, 8021420 <mbedtls_x509_crt_parse_der+0x154>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 80213e4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80213e8:	d127      	bne.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
            *ver = 0;
 80213ea:	61a7      	str	r7, [r4, #24]
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 80213ec:	f104 021c 	add.w	r2, r4, #28
 80213f0:	4629      	mov	r1, r5
 80213f2:	a806      	add	r0, sp, #24
 80213f4:	f7fe f826 	bl	801f444 <mbedtls_x509_get_serial>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 80213f8:	4606      	mov	r6, r0
 80213fa:	b9f0      	cbnz	r0, 802143a <mbedtls_x509_crt_parse_der+0x16e>
        ( ret = mbedtls_x509_get_alg(      &p, end, &crt->sig_oid,
 80213fc:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8021400:	ab0b      	add	r3, sp, #44	; 0x2c
 8021402:	463a      	mov	r2, r7
 8021404:	4629      	mov	r1, r5
 8021406:	a806      	add	r0, sp, #24
 8021408:	f7fe f849 	bl	801f49e <mbedtls_x509_get_alg>
        ( ret = mbedtls_x509_get_serial(   &p, end, &crt->serial   ) ) != 0 ||
 802140c:	4606      	mov	r6, r0
 802140e:	b9a0      	cbnz	r0, 802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version < 0 || crt->version > 2 )
 8021410:	69a3      	ldr	r3, [r4, #24]
 8021412:	2b02      	cmp	r3, #2
 8021414:	d91a      	bls.n	802144c <mbedtls_x509_crt_parse_der+0x180>
        mbedtls_x509_crt_free( crt );
 8021416:	4620      	mov	r0, r4
 8021418:	f7ff feec 	bl	80211f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_UNKNOWN_VERSION );
 802141c:	4e61      	ldr	r6, [pc, #388]	; (80215a4 <mbedtls_x509_crt_parse_der+0x2d8>)
 802141e:	e797      	b.n	8021350 <mbedtls_x509_crt_parse_der+0x84>
    end = *p + len;
 8021420:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021422:	9e06      	ldr	r6, [sp, #24]
 8021424:	440e      	add	r6, r1
    if( ( ret = mbedtls_asn1_get_int( p, end, ver ) ) != 0 )
 8021426:	f104 0218 	add.w	r2, r4, #24
 802142a:	4631      	mov	r1, r6
 802142c:	a806      	add	r0, sp, #24
 802142e:	f7ec fe8f 	bl	800e150 <mbedtls_asn1_get_int>
 8021432:	b130      	cbz	r0, 8021442 <mbedtls_x509_crt_parse_der+0x176>
    if( ( ret = x509_get_version(  &p, end, &crt->version  ) ) != 0 ||
 8021434:	f5b0 5608 	subs.w	r6, r0, #8704	; 0x2200
 8021438:	d0d8      	beq.n	80213ec <mbedtls_x509_crt_parse_der+0x120>
        mbedtls_x509_crt_free( crt );
 802143a:	4620      	mov	r0, r4
 802143c:	f7ff feda 	bl	80211f4 <mbedtls_x509_crt_free>
        return( ret );
 8021440:	e786      	b.n	8021350 <mbedtls_x509_crt_parse_der+0x84>
    if( *p != end )
 8021442:	9b06      	ldr	r3, [sp, #24]
 8021444:	429e      	cmp	r6, r3
 8021446:	d0d1      	beq.n	80213ec <mbedtls_x509_crt_parse_der+0x120>
        return( MBEDTLS_ERR_X509_INVALID_VERSION +
 8021448:	4e57      	ldr	r6, [pc, #348]	; (80215a8 <mbedtls_x509_crt_parse_der+0x2dc>)
 802144a:	e7f6      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    crt->version++;
 802144c:	3301      	adds	r3, #1
 802144e:	61a3      	str	r3, [r4, #24]
    if( ( ret = mbedtls_x509_get_sig_alg( &crt->sig_oid, &sig_params1,
 8021450:	f504 7396 	add.w	r3, r4, #300	; 0x12c
 8021454:	9300      	str	r3, [sp, #0]
 8021456:	f504 7294 	add.w	r2, r4, #296	; 0x128
 802145a:	f204 1329 	addw	r3, r4, #297	; 0x129
 802145e:	a90b      	add	r1, sp, #44	; 0x2c
 8021460:	4638      	mov	r0, r7
 8021462:	f7fe fa57 	bl	801f914 <mbedtls_x509_get_sig_alg>
 8021466:	4606      	mov	r6, r0
 8021468:	2800      	cmp	r0, #0
 802146a:	d1e6      	bne.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    crt->issuer_raw.p = p;
 802146c:	9b06      	ldr	r3, [sp, #24]
 802146e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 8021470:	aa05      	add	r2, sp, #20
 8021472:	2330      	movs	r3, #48	; 0x30
 8021474:	4629      	mov	r1, r5
 8021476:	a806      	add	r0, sp, #24
 8021478:	f7ec fe3e 	bl	800e0f8 <mbedtls_asn1_get_tag>
 802147c:	4606      	mov	r6, r0
 802147e:	b128      	cbz	r0, 802148c <mbedtls_x509_crt_parse_der+0x1c0>
        mbedtls_x509_crt_free( crt );
 8021480:	4620      	mov	r0, r4
 8021482:	f7ff feb7 	bl	80211f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_INVALID_FORMAT + ret );
 8021486:	f5a6 5606 	sub.w	r6, r6, #8576	; 0x2180
 802148a:	e799      	b.n	80213c0 <mbedtls_x509_crt_parse_der+0xf4>
    if( ( ret = mbedtls_x509_get_name( &p, p + len, &crt->issuer ) ) != 0 )
 802148c:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
 8021490:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8021494:	4419      	add	r1, r3
 8021496:	a806      	add	r0, sp, #24
 8021498:	f7fe f8f0 	bl	801f67c <mbedtls_x509_get_name>
 802149c:	4606      	mov	r6, r0
 802149e:	2800      	cmp	r0, #0
 80214a0:	d1cb      	bne.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    crt->issuer_raw.len = p - crt->issuer_raw.p;
 80214a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80214a4:	9b06      	ldr	r3, [sp, #24]
 80214a6:	1a9b      	subs	r3, r3, r2
 80214a8:	63a3      	str	r3, [r4, #56]	; 0x38
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 80214aa:	aa17      	add	r2, sp, #92	; 0x5c
 80214ac:	2330      	movs	r3, #48	; 0x30
 80214ae:	4629      	mov	r1, r5
 80214b0:	a806      	add	r0, sp, #24
 80214b2:	f7ec fe21 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80214b6:	2800      	cmp	r0, #0
 80214b8:	d07a      	beq.n	80215b0 <mbedtls_x509_crt_parse_der+0x2e4>
    if( ( ret = x509_get_dates( &p, end, &crt->valid_from,
 80214ba:	f5b0 5610 	subs.w	r6, r0, #9216	; 0x2400
 80214be:	d1bc      	bne.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    crt->subject_raw.p = p;
 80214c0:	9b06      	ldr	r3, [sp, #24]
 80214c2:	64a3      	str	r3, [r4, #72]	; 0x48
    if( ( ret = mbedtls_asn1_get_tag( &p, end, &len,
 80214c4:	aa05      	add	r2, sp, #20
 80214c6:	2330      	movs	r3, #48	; 0x30
 80214c8:	4629      	mov	r1, r5
 80214ca:	a806      	add	r0, sp, #24
 80214cc:	f7ec fe14 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80214d0:	4606      	mov	r6, r0
 80214d2:	2800      	cmp	r0, #0
 80214d4:	d1d4      	bne.n	8021480 <mbedtls_x509_crt_parse_der+0x1b4>
    if( len && ( ret = mbedtls_x509_get_name( &p, p + len, &crt->subject ) ) != 0 )
 80214d6:	9b05      	ldr	r3, [sp, #20]
 80214d8:	b14b      	cbz	r3, 80214ee <mbedtls_x509_crt_parse_der+0x222>
 80214da:	9906      	ldr	r1, [sp, #24]
 80214dc:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 80214e0:	4419      	add	r1, r3
 80214e2:	a806      	add	r0, sp, #24
 80214e4:	f7fe f8ca 	bl	801f67c <mbedtls_x509_get_name>
 80214e8:	4606      	mov	r6, r0
 80214ea:	2800      	cmp	r0, #0
 80214ec:	d1a5      	bne.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    crt->subject_raw.len = p - crt->subject_raw.p;
 80214ee:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80214f0:	9b06      	ldr	r3, [sp, #24]
 80214f2:	1a9b      	subs	r3, r3, r2
 80214f4:	6463      	str	r3, [r4, #68]	; 0x44
    if( ( ret = mbedtls_pk_parse_subpubkey( &p, end, &crt->pk ) ) != 0 )
 80214f6:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 80214fa:	4629      	mov	r1, r5
 80214fc:	a806      	add	r0, sp, #24
 80214fe:	f7f4 ff19 	bl	8016334 <mbedtls_pk_parse_subpubkey>
 8021502:	4606      	mov	r6, r0
 8021504:	2800      	cmp	r0, #0
 8021506:	d198      	bne.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version == 2 || crt->version == 3 )
 8021508:	69a3      	ldr	r3, [r4, #24]
 802150a:	3b02      	subs	r3, #2
 802150c:	2b01      	cmp	r3, #1
 802150e:	d806      	bhi.n	802151e <mbedtls_x509_crt_parse_der+0x252>
    if( *p == end )
 8021510:	9b06      	ldr	r3, [sp, #24]
 8021512:	429d      	cmp	r5, r3
 8021514:	d169      	bne.n	80215ea <mbedtls_x509_crt_parse_der+0x31e>
 8021516:	9b06      	ldr	r3, [sp, #24]
 8021518:	429d      	cmp	r5, r3
 802151a:	f040 8083 	bne.w	8021624 <mbedtls_x509_crt_parse_der+0x358>
    if( crt->version == 3 )
 802151e:	69a3      	ldr	r3, [r4, #24]
 8021520:	2b03      	cmp	r3, #3
 8021522:	f040 809c 	bne.w	802165e <mbedtls_x509_crt_parse_der+0x392>
    if( ( ret = mbedtls_x509_get_ext( p, end, &crt->v3_ext, 3 ) ) != 0 )
 8021526:	f104 02dc 	add.w	r2, r4, #220	; 0xdc
 802152a:	4629      	mov	r1, r5
 802152c:	a806      	add	r0, sp, #24
 802152e:	f7fe fa3b 	bl	801f9a8 <mbedtls_x509_get_ext>
 8021532:	4606      	mov	r6, r0
 8021534:	2800      	cmp	r0, #0
 8021536:	f040 808e 	bne.w	8021656 <mbedtls_x509_crt_parse_der+0x38a>
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 802153a:	4681      	mov	r9, r0
    while( *p < end )
 802153c:	9b06      	ldr	r3, [sp, #24]
 802153e:	429d      	cmp	r5, r3
 8021540:	f200 8092 	bhi.w	8021668 <mbedtls_x509_crt_parse_der+0x39c>
    if( *p != end )
 8021544:	f040 8194 	bne.w	8021870 <mbedtls_x509_crt_parse_der+0x5a4>
    if( ( ret = mbedtls_x509_get_alg( &p, end, &sig_oid2, &sig_params2 ) ) != 0 )
 8021548:	ab0e      	add	r3, sp, #56	; 0x38
 802154a:	aa11      	add	r2, sp, #68	; 0x44
 802154c:	4641      	mov	r1, r8
 802154e:	a806      	add	r0, sp, #24
 8021550:	f7fd ffa5 	bl	801f49e <mbedtls_x509_get_alg>
 8021554:	4606      	mov	r6, r0
 8021556:	2800      	cmp	r0, #0
 8021558:	f47f af6f 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->sig_oid.len != sig_oid2.len ||
 802155c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802155e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021560:	429a      	cmp	r2, r3
 8021562:	d112      	bne.n	802158a <mbedtls_x509_crt_parse_der+0x2be>
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8021564:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021566:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8021568:	f000 ff30 	bl	80223cc <memcmp>
    if( crt->sig_oid.len != sig_oid2.len ||
 802156c:	b968      	cbnz	r0, 802158a <mbedtls_x509_crt_parse_der+0x2be>
        sig_params1.len != sig_params2.len ||
 802156e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        memcmp( crt->sig_oid.p, sig_oid2.p, crt->sig_oid.len ) != 0 ||
 8021570:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021572:	429a      	cmp	r2, r3
 8021574:	d109      	bne.n	802158a <mbedtls_x509_crt_parse_der+0x2be>
        sig_params1.len != sig_params2.len ||
 8021576:	2a00      	cmp	r2, #0
 8021578:	f000 81b5 	beq.w	80218e6 <mbedtls_x509_crt_parse_der+0x61a>
          memcmp( sig_params1.p, sig_params2.p, sig_params1.len ) != 0 ) )
 802157c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802157e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021580:	f000 ff24 	bl	80223cc <memcmp>
        ( sig_params1.len != 0 &&
 8021584:	2800      	cmp	r0, #0
 8021586:	f000 81ae 	beq.w	80218e6 <mbedtls_x509_crt_parse_der+0x61a>
        mbedtls_x509_crt_free( crt );
 802158a:	4620      	mov	r0, r4
 802158c:	f7ff fe32 	bl	80211f4 <mbedtls_x509_crt_free>
        return( MBEDTLS_ERR_X509_SIG_MISMATCH );
 8021590:	4e06      	ldr	r6, [pc, #24]	; (80215ac <mbedtls_x509_crt_parse_der+0x2e0>)
 8021592:	e6dd      	b.n	8021350 <mbedtls_x509_crt_parse_der+0x84>
 8021594:	200005a0 	.word	0x200005a0
 8021598:	ffffd780 	.word	0xffffd780
 802159c:	ffffde80 	.word	0xffffde80
 80215a0:	ffffde1a 	.word	0xffffde1a
 80215a4:	ffffda80 	.word	0xffffda80
 80215a8:	ffffdd9a 	.word	0xffffdd9a
 80215ac:	ffffd980 	.word	0xffffd980
    end = *p + len;
 80215b0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80215b2:	9f06      	ldr	r7, [sp, #24]
 80215b4:	440f      	add	r7, r1
    if( ( ret = mbedtls_x509_get_time( p, end, from ) ) != 0 )
 80215b6:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 80215ba:	4639      	mov	r1, r7
 80215bc:	a806      	add	r0, sp, #24
 80215be:	f7fe f8dd 	bl	801f77c <mbedtls_x509_get_time>
 80215c2:	4606      	mov	r6, r0
 80215c4:	2800      	cmp	r0, #0
 80215c6:	f47f af38 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( ( ret = mbedtls_x509_get_time( p, end, to ) ) != 0 )
 80215ca:	f104 02a4 	add.w	r2, r4, #164	; 0xa4
 80215ce:	4639      	mov	r1, r7
 80215d0:	a806      	add	r0, sp, #24
 80215d2:	f7fe f8d3 	bl	801f77c <mbedtls_x509_get_time>
 80215d6:	4606      	mov	r6, r0
 80215d8:	2800      	cmp	r0, #0
 80215da:	f47f af2e 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( *p != end )
 80215de:	9b06      	ldr	r3, [sp, #24]
 80215e0:	429f      	cmp	r7, r3
 80215e2:	f43f af6d 	beq.w	80214c0 <mbedtls_x509_crt_parse_der+0x1f4>
        return( MBEDTLS_ERR_X509_INVALID_DATE +
 80215e6:	4ea3      	ldr	r6, [pc, #652]	; (8021874 <mbedtls_x509_crt_parse_der+0x5a8>)
        mbedtls_x509_crt_free( crt );
 80215e8:	e727      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    uid->tag = **p;
 80215ea:	781b      	ldrb	r3, [r3, #0]
 80215ec:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 80215f0:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
 80215f4:	23a1      	movs	r3, #161	; 0xa1
 80215f6:	4629      	mov	r1, r5
 80215f8:	a806      	add	r0, sp, #24
 80215fa:	f7ec fd7d 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80215fe:	4606      	mov	r6, r0
 8021600:	b140      	cbz	r0, 8021614 <mbedtls_x509_crt_parse_der+0x348>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021602:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021606:	f47f af18 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( crt->version == 2 || crt->version == 3 )
 802160a:	69a3      	ldr	r3, [r4, #24]
 802160c:	3b02      	subs	r3, #2
 802160e:	2b01      	cmp	r3, #1
 8021610:	d981      	bls.n	8021516 <mbedtls_x509_crt_parse_der+0x24a>
 8021612:	e784      	b.n	802151e <mbedtls_x509_crt_parse_der+0x252>
    uid->p = *p;
 8021614:	9b06      	ldr	r3, [sp, #24]
    *p += uid->len;
 8021616:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
    uid->p = *p;
 802161a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    *p += uid->len;
 802161e:	4413      	add	r3, r2
 8021620:	9306      	str	r3, [sp, #24]
        if( ret != 0 )
 8021622:	e7f2      	b.n	802160a <mbedtls_x509_crt_parse_der+0x33e>
    uid->tag = **p;
 8021624:	781b      	ldrb	r3, [r3, #0]
 8021626:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &uid->len,
 802162a:	f104 02d4 	add.w	r2, r4, #212	; 0xd4
 802162e:	23a2      	movs	r3, #162	; 0xa2
 8021630:	4629      	mov	r1, r5
 8021632:	a806      	add	r0, sp, #24
 8021634:	f7ec fd60 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8021638:	4606      	mov	r6, r0
 802163a:	b120      	cbz	r0, 8021646 <mbedtls_x509_crt_parse_der+0x37a>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 802163c:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021640:	f47f aefb 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
 8021644:	e76b      	b.n	802151e <mbedtls_x509_crt_parse_der+0x252>
    uid->p = *p;
 8021646:	9b06      	ldr	r3, [sp, #24]
    *p += uid->len;
 8021648:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
    uid->p = *p;
 802164c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
    *p += uid->len;
 8021650:	4413      	add	r3, r2
 8021652:	9306      	str	r3, [sp, #24]
        if( ret != 0 )
 8021654:	e763      	b.n	802151e <mbedtls_x509_crt_parse_der+0x252>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021656:	f110 0f62 	cmn.w	r0, #98	; 0x62
 802165a:	f47f aeee 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( p != end )
 802165e:	9b06      	ldr	r3, [sp, #24]
 8021660:	429d      	cmp	r5, r3
 8021662:	f43f af71 	beq.w	8021548 <mbedtls_x509_crt_parse_der+0x27c>
 8021666:	e680      	b.n	802136a <mbedtls_x509_crt_parse_der+0x9e>
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021668:	2330      	movs	r3, #48	; 0x30
 802166a:	aa07      	add	r2, sp, #28
 802166c:	4629      	mov	r1, r5
 802166e:	a806      	add	r0, sp, #24
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8021670:	e9cd 9914 	strd	r9, r9, [sp, #80]	; 0x50
        int ext_type = 0;
 8021674:	e9cd 9908 	strd	r9, r9, [sp, #32]
        mbedtls_x509_buf extn_oid = {0, 0, NULL};
 8021678:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
        if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802167c:	f7ec fd3c 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8021680:	b120      	cbz	r0, 802168c <mbedtls_x509_crt_parse_der+0x3c0>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 8021682:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
        if( ret != 0 )
 8021686:	2e00      	cmp	r6, #0
 8021688:	d0e9      	beq.n	802165e <mbedtls_x509_crt_parse_der+0x392>
 802168a:	e6d6      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
        end_ext_data = *p + len;
 802168c:	e9dd 3706 	ldrd	r3, r7, [sp, #24]
 8021690:	441f      	add	r7, r3
        extn_oid.tag = **p;
 8021692:	781b      	ldrb	r3, [r3, #0]
 8021694:	9314      	str	r3, [sp, #80]	; 0x50
        if( ( ret = mbedtls_asn1_get_tag( p, end, &extn_oid.len, MBEDTLS_ASN1_OID ) ) != 0 )
 8021696:	aa15      	add	r2, sp, #84	; 0x54
 8021698:	2306      	movs	r3, #6
 802169a:	4629      	mov	r1, r5
 802169c:	a806      	add	r0, sp, #24
 802169e:	f7ec fd2b 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80216a2:	2800      	cmp	r0, #0
 80216a4:	d1ed      	bne.n	8021682 <mbedtls_x509_crt_parse_der+0x3b6>
        extn_oid.p = *p;
 80216a6:	9b06      	ldr	r3, [sp, #24]
        *p += extn_oid.len;
 80216a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
        extn_oid.p = *p;
 80216aa:	9316      	str	r3, [sp, #88]	; 0x58
        *p += extn_oid.len;
 80216ac:	4413      	add	r3, r2
 80216ae:	9306      	str	r3, [sp, #24]
        if( ( end - *p ) < 1 )
 80216b0:	1aeb      	subs	r3, r5, r3
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	f340 813a 	ble.w	802192c <mbedtls_x509_crt_parse_der+0x660>
        if( ( ret = mbedtls_asn1_get_bool( p, end_ext_data, &is_critical ) ) != 0 &&
 80216b8:	aa08      	add	r2, sp, #32
 80216ba:	4639      	mov	r1, r7
 80216bc:	a806      	add	r0, sp, #24
 80216be:	f7ec fd2f 	bl	800e120 <mbedtls_asn1_get_bool>
 80216c2:	b110      	cbz	r0, 80216ca <mbedtls_x509_crt_parse_der+0x3fe>
 80216c4:	f110 0f62 	cmn.w	r0, #98	; 0x62
 80216c8:	d1db      	bne.n	8021682 <mbedtls_x509_crt_parse_der+0x3b6>
        if( ( ret = mbedtls_asn1_get_tag( p, end_ext_data, &len,
 80216ca:	2304      	movs	r3, #4
 80216cc:	aa07      	add	r2, sp, #28
 80216ce:	4639      	mov	r1, r7
 80216d0:	a806      	add	r0, sp, #24
 80216d2:	f7ec fd11 	bl	800e0f8 <mbedtls_asn1_get_tag>
 80216d6:	2800      	cmp	r0, #0
 80216d8:	d1d3      	bne.n	8021682 <mbedtls_x509_crt_parse_der+0x3b6>
        end_ext_octet = *p + len;
 80216da:	e9dd 6306 	ldrd	r6, r3, [sp, #24]
 80216de:	441e      	add	r6, r3
        if( end_ext_octet != end_ext_data )
 80216e0:	42b7      	cmp	r7, r6
 80216e2:	f040 80c5 	bne.w	8021870 <mbedtls_x509_crt_parse_der+0x5a4>
        ret = mbedtls_oid_get_x509_ext_type( &extn_oid, &ext_type );
 80216e6:	a909      	add	r1, sp, #36	; 0x24
 80216e8:	a814      	add	r0, sp, #80	; 0x50
 80216ea:	f7f3 ff1d 	bl	8015528 <mbedtls_oid_get_x509_ext_type>
        if( ret != 0 )
 80216ee:	b130      	cbz	r0, 80216fe <mbedtls_x509_crt_parse_der+0x432>
            if( is_critical )
 80216f0:	9b08      	ldr	r3, [sp, #32]
            *p = end_ext_octet;
 80216f2:	9706      	str	r7, [sp, #24]
            if( is_critical )
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	f43f af21 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80216fa:	4e5f      	ldr	r6, [pc, #380]	; (8021878 <mbedtls_x509_crt_parse_der+0x5ac>)
 80216fc:	e69d      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
        if( ( crt->ext_types & ext_type ) != 0 )
 80216fe:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
 8021702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021704:	ea11 0302 	ands.w	r3, r1, r2
 8021708:	f040 8112 	bne.w	8021930 <mbedtls_x509_crt_parse_der+0x664>
        crt->ext_types |= ext_type;
 802170c:	4311      	orrs	r1, r2
        switch( ext_type )
 802170e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
        crt->ext_types |= ext_type;
 8021712:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        switch( ext_type )
 8021716:	d020      	beq.n	802175a <mbedtls_x509_crt_parse_der+0x48e>
 8021718:	dc06      	bgt.n	8021728 <mbedtls_x509_crt_parse_der+0x45c>
 802171a:	2a04      	cmp	r2, #4
 802171c:	d05d      	beq.n	80217da <mbedtls_x509_crt_parse_der+0x50e>
 802171e:	2a20      	cmp	r2, #32
 8021720:	f000 8090 	beq.w	8021844 <mbedtls_x509_crt_parse_der+0x578>
        if( ret != 0 )
 8021724:	4e55      	ldr	r6, [pc, #340]	; (802187c <mbedtls_x509_crt_parse_der+0x5b0>)
 8021726:	e688      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
        switch( ext_type )
 8021728:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 802172c:	d07b      	beq.n	8021826 <mbedtls_x509_crt_parse_der+0x55a>
 802172e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8021732:	d1f7      	bne.n	8021724 <mbedtls_x509_crt_parse_der+0x458>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021734:	aa17      	add	r2, sp, #92	; 0x5c
 8021736:	4639      	mov	r1, r7
 8021738:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 802173a:	9317      	str	r3, [sp, #92]	; 0x5c
 802173c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8021740:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 8021742:	f7ec fd3c 	bl	800e1be <mbedtls_asn1_get_bitstring>
 8021746:	2800      	cmp	r0, #0
 8021748:	d151      	bne.n	80217ee <mbedtls_x509_crt_parse_der+0x522>
    if( bs.len != 1 )
 802174a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802174c:	2b01      	cmp	r3, #1
 802174e:	d155      	bne.n	80217fc <mbedtls_x509_crt_parse_der+0x530>
    *ns_cert_type = *bs.p;
 8021750:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021752:	781b      	ldrb	r3, [r3, #0]
 8021754:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            continue;
 8021758:	e6f0      	b.n	802153c <mbedtls_x509_crt_parse_der+0x270>
    *max_pathlen = 0; /* endless */
 802175a:	e9c4 333f 	strd	r3, r3, [r4, #252]	; 0xfc
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 802175e:	aa17      	add	r2, sp, #92	; 0x5c
 8021760:	2330      	movs	r3, #48	; 0x30
 8021762:	4639      	mov	r1, r7
 8021764:	a806      	add	r0, sp, #24
 8021766:	f7ec fcc7 	bl	800e0f8 <mbedtls_asn1_get_tag>
 802176a:	b128      	cbz	r0, 8021778 <mbedtls_x509_crt_parse_der+0x4ac>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS + ret );
 802176c:	f5a0 5614 	sub.w	r6, r0, #9472	; 0x2500
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 8021770:	2e00      	cmp	r6, #0
 8021772:	f43f aee3 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
 8021776:	e660      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( *p == end )
 8021778:	9b06      	ldr	r3, [sp, #24]
 802177a:	429e      	cmp	r6, r3
 802177c:	f43f aede 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
            if( ( ret = x509_get_basic_constraints( p, end_ext_octet,
 8021780:	f104 02fc 	add.w	r2, r4, #252	; 0xfc
    if( ( ret = mbedtls_asn1_get_bool( p, end, ca_istrue ) ) != 0 )
 8021784:	4631      	mov	r1, r6
 8021786:	a806      	add	r0, sp, #24
 8021788:	9203      	str	r2, [sp, #12]
 802178a:	f7ec fcc9 	bl	800e120 <mbedtls_asn1_get_bool>
 802178e:	b178      	cbz	r0, 80217b0 <mbedtls_x509_crt_parse_der+0x4e4>
        if( ret == MBEDTLS_ERR_ASN1_UNEXPECTED_TAG )
 8021790:	f110 0f62 	cmn.w	r0, #98	; 0x62
 8021794:	9a03      	ldr	r2, [sp, #12]
 8021796:	d1e9      	bne.n	802176c <mbedtls_x509_crt_parse_der+0x4a0>
            ret = mbedtls_asn1_get_int( p, end, ca_istrue );
 8021798:	4631      	mov	r1, r6
 802179a:	a806      	add	r0, sp, #24
 802179c:	f7ec fcd8 	bl	800e150 <mbedtls_asn1_get_int>
        if( ret != 0 )
 80217a0:	2800      	cmp	r0, #0
 80217a2:	d1e3      	bne.n	802176c <mbedtls_x509_crt_parse_der+0x4a0>
        if( *ca_istrue != 0 )
 80217a4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80217a8:	b113      	cbz	r3, 80217b0 <mbedtls_x509_crt_parse_der+0x4e4>
            *ca_istrue = 1;
 80217aa:	2301      	movs	r3, #1
 80217ac:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    if( *p == end )
 80217b0:	9b06      	ldr	r3, [sp, #24]
 80217b2:	429e      	cmp	r6, r3
 80217b4:	f43f aec2 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_int( p, end, max_pathlen ) ) != 0 )
 80217b8:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80217bc:	4631      	mov	r1, r6
 80217be:	a806      	add	r0, sp, #24
 80217c0:	f7ec fcc6 	bl	800e150 <mbedtls_asn1_get_int>
 80217c4:	2800      	cmp	r0, #0
 80217c6:	d1d1      	bne.n	802176c <mbedtls_x509_crt_parse_der+0x4a0>
    if( *p != end )
 80217c8:	9b06      	ldr	r3, [sp, #24]
 80217ca:	429e      	cmp	r6, r3
 80217cc:	d150      	bne.n	8021870 <mbedtls_x509_crt_parse_der+0x5a4>
    (*max_pathlen)++;
 80217ce:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80217d2:	3301      	adds	r3, #1
 80217d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    return( 0 );
 80217d8:	e6b0      	b.n	802153c <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80217da:	aa17      	add	r2, sp, #92	; 0x5c
 80217dc:	4639      	mov	r1, r7
 80217de:	a806      	add	r0, sp, #24
    mbedtls_x509_bitstring bs = { 0, 0, NULL };
 80217e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80217e2:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80217e6:	9319      	str	r3, [sp, #100]	; 0x64
    if( ( ret = mbedtls_asn1_get_bitstring( p, end, &bs ) ) != 0 )
 80217e8:	f7ec fce9 	bl	800e1be <mbedtls_asn1_get_bitstring>
 80217ec:	b120      	cbz	r0, 80217f8 <mbedtls_x509_crt_parse_der+0x52c>
            if( ( ret = x509_get_ns_cert_type( p, end_ext_octet,
 80217ee:	f5b0 5614 	subs.w	r6, r0, #9472	; 0x2500
 80217f2:	f43f aea3 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
 80217f6:	e620      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( bs.len < 1 )
 80217f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80217fa:	b909      	cbnz	r1, 8021800 <mbedtls_x509_crt_parse_der+0x534>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 80217fc:	4e20      	ldr	r6, [pc, #128]	; (8021880 <mbedtls_x509_crt_parse_der+0x5b4>)
        if( ret != 0 )
 80217fe:	e61c      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8021800:	9e19      	ldr	r6, [sp, #100]	; 0x64
    *key_usage = 0;
 8021802:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8021806:	5c33      	ldrb	r3, [r6, r0]
 8021808:	00c2      	lsls	r2, r0, #3
 802180a:	fa03 f202 	lsl.w	r2, r3, r2
 802180e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8021812:	3001      	adds	r0, #1
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8021814:	4313      	orrs	r3, r2
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 8021816:	4281      	cmp	r1, r0
        *key_usage |= (unsigned int) bs.p[i] << (8*i);
 8021818:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    for( i = 0; i < bs.len && i < sizeof( unsigned int ); i++ )
 802181c:	f43f ae8e 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
 8021820:	2804      	cmp	r0, #4
 8021822:	d1f0      	bne.n	8021806 <mbedtls_x509_crt_parse_der+0x53a>
 8021824:	e68a      	b.n	802153c <mbedtls_x509_crt_parse_der+0x270>
    if( ( ret = mbedtls_asn1_get_sequence_of( p, end, ext_key_usage, MBEDTLS_ASN1_OID ) ) != 0 )
 8021826:	2306      	movs	r3, #6
 8021828:	f504 7284 	add.w	r2, r4, #264	; 0x108
 802182c:	4639      	mov	r1, r7
 802182e:	a806      	add	r0, sp, #24
 8021830:	f7ec fcfa 	bl	800e228 <mbedtls_asn1_get_sequence_of>
 8021834:	2800      	cmp	r0, #0
 8021836:	d1da      	bne.n	80217ee <mbedtls_x509_crt_parse_der+0x522>
    if( ext_key_usage->buf.p == NULL )
 8021838:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 802183c:	2b00      	cmp	r3, #0
 802183e:	f47f ae7d 	bne.w	802153c <mbedtls_x509_crt_parse_der+0x270>
 8021842:	e7db      	b.n	80217fc <mbedtls_x509_crt_parse_der+0x530>
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
 8021844:	2330      	movs	r3, #48	; 0x30
 8021846:	aa0a      	add	r2, sp, #40	; 0x28
 8021848:	4639      	mov	r1, r7
 802184a:	a806      	add	r0, sp, #24
 802184c:	f7ec fc54 	bl	800e0f8 <mbedtls_asn1_get_tag>
 8021850:	2800      	cmp	r0, #0
 8021852:	d18b      	bne.n	802176c <mbedtls_x509_crt_parse_der+0x4a0>
    if( *p + len != end )
 8021854:	9b06      	ldr	r3, [sp, #24]
 8021856:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021858:	4413      	add	r3, r2
 802185a:	429e      	cmp	r6, r3
 802185c:	d108      	bne.n	8021870 <mbedtls_x509_crt_parse_der+0x5a4>
            if( ( ret = x509_get_subject_alt_name( p, end_ext_octet,
 802185e:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
    while( *p < end )
 8021862:	9b06      	ldr	r3, [sp, #24]
 8021864:	429e      	cmp	r6, r3
 8021866:	d80f      	bhi.n	8021888 <mbedtls_x509_crt_parse_der+0x5bc>
    cur->next = NULL;
 8021868:	f8c7 900c 	str.w	r9, [r7, #12]
    if( *p != end )
 802186c:	f43f ae66 	beq.w	802153c <mbedtls_x509_crt_parse_der+0x270>
        return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021870:	4e04      	ldr	r6, [pc, #16]	; (8021884 <mbedtls_x509_crt_parse_der+0x5b8>)
            mbedtls_x509_crt_free( crt );
 8021872:	e5e2      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
 8021874:	ffffdb9a 	.word	0xffffdb9a
 8021878:	ffffda9e 	.word	0xffffda9e
 802187c:	ffffdf80 	.word	0xffffdf80
 8021880:	ffffda9c 	.word	0xffffda9c
 8021884:	ffffda9a 	.word	0xffffda9a
        if( ( end - *p ) < 1 )
 8021888:	1af2      	subs	r2, r6, r3
 802188a:	2a00      	cmp	r2, #0
 802188c:	dd4e      	ble.n	802192c <mbedtls_x509_crt_parse_der+0x660>
        tag = **p;
 802188e:	461a      	mov	r2, r3
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021890:	4631      	mov	r1, r6
        tag = **p;
 8021892:	f812 3b01 	ldrb.w	r3, [r2], #1
        (*p)++;
 8021896:	9206      	str	r2, [sp, #24]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 8021898:	a806      	add	r0, sp, #24
 802189a:	aa17      	add	r2, sp, #92	; 0x5c
        tag = **p;
 802189c:	9303      	str	r3, [sp, #12]
        if( ( ret = mbedtls_asn1_get_len( p, end, &tag_len ) ) != 0 )
 802189e:	f7ec fbe3 	bl	800e068 <mbedtls_asn1_get_len>
 80218a2:	9b03      	ldr	r3, [sp, #12]
 80218a4:	2800      	cmp	r0, #0
 80218a6:	f47f af61 	bne.w	802176c <mbedtls_x509_crt_parse_der+0x4a0>
        if( ( tag & MBEDTLS_ASN1_CONTEXT_SPECIFIC ) != MBEDTLS_ASN1_CONTEXT_SPECIFIC )
 80218aa:	061a      	lsls	r2, r3, #24
 80218ac:	f57f af25 	bpl.w	80216fa <mbedtls_x509_crt_parse_der+0x42e>
        if( tag != ( MBEDTLS_ASN1_CONTEXT_SPECIFIC | 2 ) )
 80218b0:	2b82      	cmp	r3, #130	; 0x82
 80218b2:	d004      	beq.n	80218be <mbedtls_x509_crt_parse_der+0x5f2>
            *p += tag_len;
 80218b4:	9b06      	ldr	r3, [sp, #24]
 80218b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        *p += buf->len;
 80218b8:	4413      	add	r3, r2
 80218ba:	9306      	str	r3, [sp, #24]
 80218bc:	e7d1      	b.n	8021862 <mbedtls_x509_crt_parse_der+0x596>
        if( cur->buf.p != NULL )
 80218be:	68bb      	ldr	r3, [r7, #8]
 80218c0:	b153      	cbz	r3, 80218d8 <mbedtls_x509_crt_parse_der+0x60c>
            if( cur->next != NULL )
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	2b00      	cmp	r3, #0
 80218c6:	d133      	bne.n	8021930 <mbedtls_x509_crt_parse_der+0x664>
            cur->next = mbedtls_calloc( 1, sizeof( mbedtls_asn1_sequence ) );
 80218c8:	4b1a      	ldr	r3, [pc, #104]	; (8021934 <mbedtls_x509_crt_parse_der+0x668>)
 80218ca:	2110      	movs	r1, #16
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	2001      	movs	r0, #1
 80218d0:	4798      	blx	r3
 80218d2:	60f8      	str	r0, [r7, #12]
            if( cur->next == NULL )
 80218d4:	b340      	cbz	r0, 8021928 <mbedtls_x509_crt_parse_der+0x65c>
 80218d6:	4607      	mov	r7, r0
        buf->tag = tag;
 80218d8:	2382      	movs	r3, #130	; 0x82
 80218da:	603b      	str	r3, [r7, #0]
        buf->len = tag_len;
 80218dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        buf->p = *p;
 80218de:	9b06      	ldr	r3, [sp, #24]
 80218e0:	60bb      	str	r3, [r7, #8]
        buf->len = tag_len;
 80218e2:	607a      	str	r2, [r7, #4]
 80218e4:	e7e8      	b.n	80218b8 <mbedtls_x509_crt_parse_der+0x5ec>
    if( ( ret = mbedtls_x509_get_sig( &p, end, &crt->sig ) ) != 0 )
 80218e6:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80218ea:	4641      	mov	r1, r8
 80218ec:	a806      	add	r0, sp, #24
 80218ee:	f7fd fff3 	bl	801f8d8 <mbedtls_x509_get_sig>
 80218f2:	4606      	mov	r6, r0
 80218f4:	2800      	cmp	r0, #0
 80218f6:	f47f ada0 	bne.w	802143a <mbedtls_x509_crt_parse_der+0x16e>
    if( p != end )
 80218fa:	9b06      	ldr	r3, [sp, #24]
 80218fc:	4598      	cmp	r8, r3
 80218fe:	f47f ad34 	bne.w	802136a <mbedtls_x509_crt_parse_der+0x9e>
}
 8021902:	4630      	mov	r0, r6
 8021904:	b01b      	add	sp, #108	; 0x6c
 8021906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 802190a:	4e0b      	ldr	r6, [pc, #44]	; (8021938 <mbedtls_x509_crt_parse_der+0x66c>)
        if( prev )
 802190c:	f1ba 0f00 	cmp.w	sl, #0
 8021910:	d104      	bne.n	802191c <mbedtls_x509_crt_parse_der+0x650>
            mbedtls_free( crt );
 8021912:	4b0a      	ldr	r3, [pc, #40]	; (802193c <mbedtls_x509_crt_parse_der+0x670>)
 8021914:	4620      	mov	r0, r4
 8021916:	681b      	ldr	r3, [r3, #0]
 8021918:	4798      	blx	r3
 802191a:	e7f2      	b.n	8021902 <mbedtls_x509_crt_parse_der+0x636>
            prev->next = NULL;
 802191c:	2300      	movs	r3, #0
 802191e:	f8ca 3130 	str.w	r3, [sl, #304]	; 0x130
 8021922:	e519      	b.n	8021358 <mbedtls_x509_crt_parse_der+0x8c>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8021924:	4e04      	ldr	r6, [pc, #16]	; (8021938 <mbedtls_x509_crt_parse_der+0x66c>)
 8021926:	e7ec      	b.n	8021902 <mbedtls_x509_crt_parse_der+0x636>
                return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 8021928:	4e05      	ldr	r6, [pc, #20]	; (8021940 <mbedtls_x509_crt_parse_der+0x674>)
 802192a:	e586      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS +
 802192c:	4e05      	ldr	r6, [pc, #20]	; (8021944 <mbedtls_x509_crt_parse_der+0x678>)
 802192e:	e584      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
            return( MBEDTLS_ERR_X509_INVALID_EXTENSIONS );
 8021930:	4e05      	ldr	r6, [pc, #20]	; (8021948 <mbedtls_x509_crt_parse_der+0x67c>)
 8021932:	e582      	b.n	802143a <mbedtls_x509_crt_parse_der+0x16e>
 8021934:	200005a0 	.word	0x200005a0
 8021938:	ffffd800 	.word	0xffffd800
 802193c:	200005a4 	.word	0x200005a4
 8021940:	ffffda96 	.word	0xffffda96
 8021944:	ffffdaa0 	.word	0xffffdaa0
 8021948:	ffffdb00 	.word	0xffffdb00

0802194c <mbedtls_x509_crt_parse>:
{
 802194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021950:	468a      	mov	sl, r1
 8021952:	b089      	sub	sp, #36	; 0x24
 8021954:	4617      	mov	r7, r2
    if( chain == NULL || buf == NULL )
 8021956:	4680      	mov	r8, r0
 8021958:	2800      	cmp	r0, #0
 802195a:	d05a      	beq.n	8021a12 <mbedtls_x509_crt_parse+0xc6>
 802195c:	2900      	cmp	r1, #0
 802195e:	d058      	beq.n	8021a12 <mbedtls_x509_crt_parse+0xc6>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8021960:	b14a      	cbz	r2, 8021976 <mbedtls_x509_crt_parse+0x2a>
 8021962:	188a      	adds	r2, r1, r2
 8021964:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 8021968:	b92e      	cbnz	r6, 8021976 <mbedtls_x509_crt_parse+0x2a>
        strstr( (const char *) buf, "-----BEGIN CERTIFICATE-----" ) != NULL )
 802196a:	492c      	ldr	r1, [pc, #176]	; (8021a1c <mbedtls_x509_crt_parse+0xd0>)
 802196c:	4650      	mov	r0, sl
 802196e:	f002 f850 	bl	8023a12 <strstr>
    if( buflen != 0 && buf[buflen - 1] == '\0' &&
 8021972:	2800      	cmp	r0, #0
 8021974:	d148      	bne.n	8021a08 <mbedtls_x509_crt_parse+0xbc>
        return mbedtls_x509_crt_parse_der( chain, buf, buflen );
 8021976:	463a      	mov	r2, r7
 8021978:	4651      	mov	r1, sl
 802197a:	4640      	mov	r0, r8
 802197c:	f7ff fca6 	bl	80212cc <mbedtls_x509_crt_parse_der>
 8021980:	4604      	mov	r4, r0
}
 8021982:	4620      	mov	r0, r4
 8021984:	b009      	add	sp, #36	; 0x24
 8021986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            mbedtls_pem_init( &pem );
 802198a:	a805      	add	r0, sp, #20
 802198c:	f7f3 fef7 	bl	801577e <mbedtls_pem_init>
            ret = mbedtls_pem_read_buffer( &pem,
 8021990:	aa04      	add	r2, sp, #16
 8021992:	9202      	str	r2, [sp, #8]
 8021994:	2200      	movs	r2, #0
 8021996:	e9cd 2200 	strd	r2, r2, [sp]
 802199a:	4653      	mov	r3, sl
 802199c:	4a20      	ldr	r2, [pc, #128]	; (8021a20 <mbedtls_x509_crt_parse+0xd4>)
 802199e:	4659      	mov	r1, fp
 80219a0:	a805      	add	r0, sp, #20
 80219a2:	f7f3 fef1 	bl	8015788 <mbedtls_pem_read_buffer>
            if( ret == 0 )
 80219a6:	4605      	mov	r5, r0
 80219a8:	b978      	cbnz	r0, 80219ca <mbedtls_x509_crt_parse+0x7e>
                buflen -= use_len;
 80219aa:	9a04      	ldr	r2, [sp, #16]
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80219ac:	4640      	mov	r0, r8
                buflen -= use_len;
 80219ae:	1abf      	subs	r7, r7, r2
                buf += use_len;
 80219b0:	4492      	add	sl, r2
            ret = mbedtls_x509_crt_parse_der( chain, pem.buf, pem.buflen );
 80219b2:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80219b6:	f7ff fc89 	bl	80212cc <mbedtls_x509_crt_parse_der>
 80219ba:	4605      	mov	r5, r0
            mbedtls_pem_free( &pem );
 80219bc:	a805      	add	r0, sp, #20
 80219be:	f7f4 f83f 	bl	8015a40 <mbedtls_pem_free>
            if( ret != 0 )
 80219c2:	b9e5      	cbnz	r5, 80219fe <mbedtls_x509_crt_parse+0xb2>
            success = 1;
 80219c4:	f04f 0901 	mov.w	r9, #1
 80219c8:	e00f      	b.n	80219ea <mbedtls_x509_crt_parse+0x9e>
            else if( ret == MBEDTLS_ERR_PEM_BAD_INPUT_DATA )
 80219ca:	f510 5fa4 	cmn.w	r0, #5248	; 0x1480
 80219ce:	d019      	beq.n	8021a04 <mbedtls_x509_crt_parse+0xb8>
            else if( ret != MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT )
 80219d0:	f510 5f84 	cmn.w	r0, #4224	; 0x1080
 80219d4:	d00b      	beq.n	80219ee <mbedtls_x509_crt_parse+0xa2>
                mbedtls_pem_free( &pem );
 80219d6:	a805      	add	r0, sp, #20
 80219d8:	f7f4 f832 	bl	8015a40 <mbedtls_pem_free>
                buflen -= use_len;
 80219dc:	9a04      	ldr	r2, [sp, #16]
 80219de:	1abf      	subs	r7, r7, r2
                buf += use_len;
 80219e0:	4492      	add	sl, r2
                if( first_error == 0 )
 80219e2:	2c00      	cmp	r4, #0
 80219e4:	bf08      	it	eq
 80219e6:	462c      	moveq	r4, r5
                total_failed++;
 80219e8:	3601      	adds	r6, #1
        while( buflen > 1 )
 80219ea:	2f01      	cmp	r7, #1
 80219ec:	d8cd      	bhi.n	802198a <mbedtls_x509_crt_parse+0x3e>
    if( success )
 80219ee:	f1b9 0f00 	cmp.w	r9, #0
 80219f2:	d110      	bne.n	8021a16 <mbedtls_x509_crt_parse+0xca>
        return( MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT );
 80219f4:	4b0b      	ldr	r3, [pc, #44]	; (8021a24 <mbedtls_x509_crt_parse+0xd8>)
 80219f6:	2c00      	cmp	r4, #0
 80219f8:	bf08      	it	eq
 80219fa:	461c      	moveq	r4, r3
 80219fc:	e7c1      	b.n	8021982 <mbedtls_x509_crt_parse+0x36>
                if( ret == MBEDTLS_ERR_X509_ALLOC_FAILED )
 80219fe:	f515 5f22 	cmn.w	r5, #10368	; 0x2880
 8021a02:	d1ee      	bne.n	80219e2 <mbedtls_x509_crt_parse+0x96>
 8021a04:	462c      	mov	r4, r5
 8021a06:	e7bc      	b.n	8021982 <mbedtls_x509_crt_parse+0x36>
            ret = mbedtls_pem_read_buffer( &pem,
 8021a08:	f8df b010 	ldr.w	fp, [pc, #16]	; 8021a1c <mbedtls_x509_crt_parse+0xd0>
    int success = 0, first_error = 0, total_failed = 0;
 8021a0c:	4634      	mov	r4, r6
 8021a0e:	46b1      	mov	r9, r6
 8021a10:	e7eb      	b.n	80219ea <mbedtls_x509_crt_parse+0x9e>
        return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );
 8021a12:	4c05      	ldr	r4, [pc, #20]	; (8021a28 <mbedtls_x509_crt_parse+0xdc>)
 8021a14:	e7b5      	b.n	8021982 <mbedtls_x509_crt_parse+0x36>
 8021a16:	4634      	mov	r4, r6
 8021a18:	e7b3      	b.n	8021982 <mbedtls_x509_crt_parse+0x36>
 8021a1a:	bf00      	nop
 8021a1c:	0802dd66 	.word	0x0802dd66
 8021a20:	0802de04 	.word	0x0802de04
 8021a24:	ffffd880 	.word	0xffffd880
 8021a28:	ffffd800 	.word	0xffffd800

08021a2c <parse_hex4>:
static unsigned parse_hex4(const unsigned char * const input)
{
    unsigned int h = 0;
    size_t i = 0;

    for (i = 0; i < 4; i++)
 8021a2c:	2200      	movs	r2, #0
{
 8021a2e:	b510      	push	{r4, lr}
 8021a30:	4604      	mov	r4, r0
    unsigned int h = 0;
 8021a32:	4610      	mov	r0, r2
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8021a34:	5ca1      	ldrb	r1, [r4, r2]
 8021a36:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8021a3a:	2b09      	cmp	r3, #9
 8021a3c:	d80b      	bhi.n	8021a56 <parse_hex4+0x2a>
        {
            h += (unsigned int) input[i] - '0';
 8021a3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        else /* invalid */
        {
            return 0;
        }

        if (i < 3)
 8021a42:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
 8021a44:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
 8021a48:	f102 0201 	add.w	r2, r2, #1
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8021a4c:	bf18      	it	ne
 8021a4e:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
 8021a50:	2a04      	cmp	r2, #4
 8021a52:	d1ef      	bne.n	8021a34 <parse_hex4+0x8>
        }
    }

    return h;
}
 8021a54:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8021a56:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8021a5a:	2b05      	cmp	r3, #5
 8021a5c:	d802      	bhi.n	8021a64 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
 8021a5e:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
 8021a62:	e7ee      	b.n	8021a42 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8021a64:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8021a68:	2b05      	cmp	r3, #5
 8021a6a:	d802      	bhi.n	8021a72 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
 8021a6c:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
 8021a70:	e7e7      	b.n	8021a42 <parse_hex4+0x16>
            return 0;
 8021a72:	2000      	movs	r0, #0
 8021a74:	e7ee      	b.n	8021a54 <parse_hex4+0x28>
	...

08021a78 <parse_string>:
    return 0;
}

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8021a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021a7c:	680a      	ldr	r2, [r1, #0]
 8021a7e:	688b      	ldr	r3, [r1, #8]
{
 8021a80:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021a82:	1c5d      	adds	r5, r3, #1
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
    unsigned char *output_pointer = NULL;
    unsigned char *output = NULL;

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021a84:	18d0      	adds	r0, r2, r3
 8021a86:	5cd3      	ldrb	r3, [r2, r3]
 8021a88:	2b22      	cmp	r3, #34	; 0x22
{
 8021a8a:	468a      	mov	sl, r1
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021a8c:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8021a8e:	d10a      	bne.n	8021aa6 <parse_string+0x2e>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8021a90:	462f      	mov	r7, r5
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
        size_t skipped_bytes = 0;
 8021a92:	2300      	movs	r3, #0
        while ((*input_end != '\"') && ((size_t)(input_end - input_buffer->content) < input_buffer->length))
 8021a94:	783c      	ldrb	r4, [r7, #0]
 8021a96:	2c22      	cmp	r4, #34	; 0x22
 8021a98:	f000 80ca 	beq.w	8021c30 <parse_string+0x1b8>
 8021a9c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8021aa0:	1abe      	subs	r6, r7, r2
 8021aa2:	428e      	cmp	r6, r1
 8021aa4:	d302      	bcc.n	8021aac <parse_string+0x34>
    if (output != NULL)
    {
        input_buffer->hooks.deallocate(output);
    }

    if (input_pointer != NULL)
 8021aa6:	bbad      	cbnz	r5, 8021b14 <parse_string+0x9c>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
    }

    return false;
 8021aa8:	2000      	movs	r0, #0
 8021aaa:	e01c      	b.n	8021ae6 <parse_string+0x6e>
            if (input_end[0] == '\\')
 8021aac:	2c5c      	cmp	r4, #92	; 0x5c
 8021aae:	d104      	bne.n	8021aba <parse_string+0x42>
 8021ab0:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8021ab2:	1abc      	subs	r4, r7, r2
 8021ab4:	428c      	cmp	r4, r1
 8021ab6:	d2f6      	bcs.n	8021aa6 <parse_string+0x2e>
                skipped_bytes++;
 8021ab8:	3301      	adds	r3, #1
            input_end++;
 8021aba:	3701      	adds	r7, #1
 8021abc:	e7ea      	b.n	8021a94 <parse_string+0x1c>
        if (*input_pointer != '\\')
 8021abe:	782b      	ldrb	r3, [r5, #0]
 8021ac0:	2b5c      	cmp	r3, #92	; 0x5c
 8021ac2:	d012      	beq.n	8021aea <parse_string+0x72>
            *output_pointer++ = *input_pointer++;
 8021ac4:	f804 3b01 	strb.w	r3, [r4], #1
 8021ac8:	3501      	adds	r5, #1
    while (input_pointer < input_end)
 8021aca:	42bd      	cmp	r5, r7
 8021acc:	d3f7      	bcc.n	8021abe <parse_string+0x46>
    *output_pointer = '\0';
 8021ace:	2300      	movs	r3, #0
 8021ad0:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
 8021ad2:	2310      	movs	r3, #16
    item->valuestring = (char*)output;
 8021ad4:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8021ad8:	f8da 3000 	ldr.w	r3, [sl]
 8021adc:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
 8021ade:	3701      	adds	r7, #1
 8021ae0:	f8ca 7008 	str.w	r7, [sl, #8]
    return true;
 8021ae4:	2001      	movs	r0, #1
}
 8021ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
 8021aea:	1b7a      	subs	r2, r7, r5
 8021aec:	2a00      	cmp	r2, #0
 8021aee:	dd0d      	ble.n	8021b0c <parse_string+0x94>
            switch (input_pointer[1])
 8021af0:	786b      	ldrb	r3, [r5, #1]
 8021af2:	2b75      	cmp	r3, #117	; 0x75
 8021af4:	d80a      	bhi.n	8021b0c <parse_string+0x94>
 8021af6:	2b6d      	cmp	r3, #109	; 0x6d
 8021af8:	d812      	bhi.n	8021b20 <parse_string+0xa8>
 8021afa:	2b62      	cmp	r3, #98	; 0x62
 8021afc:	d02a      	beq.n	8021b54 <parse_string+0xdc>
 8021afe:	d825      	bhi.n	8021b4c <parse_string+0xd4>
 8021b00:	2b2f      	cmp	r3, #47	; 0x2f
 8021b02:	d028      	beq.n	8021b56 <parse_string+0xde>
 8021b04:	2b5c      	cmp	r3, #92	; 0x5c
 8021b06:	d026      	beq.n	8021b56 <parse_string+0xde>
 8021b08:	2b22      	cmp	r3, #34	; 0x22
 8021b0a:	d024      	beq.n	8021b56 <parse_string+0xde>
        input_buffer->hooks.deallocate(output);
 8021b0c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8021b10:	4658      	mov	r0, fp
 8021b12:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8021b14:	f8da 0000 	ldr.w	r0, [sl]
 8021b18:	1a28      	subs	r0, r5, r0
 8021b1a:	f8ca 0008 	str.w	r0, [sl, #8]
 8021b1e:	e7c3      	b.n	8021aa8 <parse_string+0x30>
 8021b20:	3b6e      	subs	r3, #110	; 0x6e
 8021b22:	2b07      	cmp	r3, #7
 8021b24:	d8f2      	bhi.n	8021b0c <parse_string+0x94>
 8021b26:	a101      	add	r1, pc, #4	; (adr r1, 8021b2c <parse_string+0xb4>)
 8021b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021b2c:	08021b61 	.word	0x08021b61
 8021b30:	08021b0d 	.word	0x08021b0d
 8021b34:	08021b0d 	.word	0x08021b0d
 8021b38:	08021b0d 	.word	0x08021b0d
 8021b3c:	08021b65 	.word	0x08021b65
 8021b40:	08021b0d 	.word	0x08021b0d
 8021b44:	08021b69 	.word	0x08021b69
 8021b48:	08021b6d 	.word	0x08021b6d
            switch (input_pointer[1])
 8021b4c:	2b66      	cmp	r3, #102	; 0x66
 8021b4e:	d1dd      	bne.n	8021b0c <parse_string+0x94>
                    *output_pointer++ = '\f';
 8021b50:	230c      	movs	r3, #12
 8021b52:	e000      	b.n	8021b56 <parse_string+0xde>
                    *output_pointer++ = '\b';
 8021b54:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
 8021b56:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
 8021b5a:	2302      	movs	r3, #2
            input_pointer += sequence_length;
 8021b5c:	441d      	add	r5, r3
 8021b5e:	e7b4      	b.n	8021aca <parse_string+0x52>
                    *output_pointer++ = '\n';
 8021b60:	230a      	movs	r3, #10
 8021b62:	e7f8      	b.n	8021b56 <parse_string+0xde>
                    *output_pointer++ = '\r';
 8021b64:	230d      	movs	r3, #13
 8021b66:	e7f6      	b.n	8021b56 <parse_string+0xde>
                    *output_pointer++ = '\t';
 8021b68:	2309      	movs	r3, #9
 8021b6a:	e7f4      	b.n	8021b56 <parse_string+0xde>
    if ((input_end - first_sequence) < 6)
 8021b6c:	2a05      	cmp	r2, #5
 8021b6e:	ddcd      	ble.n	8021b0c <parse_string+0x94>
    first_code = parse_hex4(first_sequence + 2);
 8021b70:	1ca8      	adds	r0, r5, #2
 8021b72:	f7ff ff5b 	bl	8021a2c <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8021b76:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8021b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
 8021b7e:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8021b80:	d3c4      	bcc.n	8021b0c <parse_string+0x94>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8021b82:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 8021b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021b8a:	d22d      	bcs.n	8021be8 <parse_string+0x170>
        const unsigned char *second_sequence = first_sequence + 6;
 8021b8c:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
 8021b8e:	1afb      	subs	r3, r7, r3
 8021b90:	2b05      	cmp	r3, #5
 8021b92:	ddbb      	ble.n	8021b0c <parse_string+0x94>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8021b94:	79ab      	ldrb	r3, [r5, #6]
 8021b96:	2b5c      	cmp	r3, #92	; 0x5c
 8021b98:	d1b8      	bne.n	8021b0c <parse_string+0x94>
 8021b9a:	79eb      	ldrb	r3, [r5, #7]
 8021b9c:	2b75      	cmp	r3, #117	; 0x75
 8021b9e:	d1b5      	bne.n	8021b0c <parse_string+0x94>
        second_code = parse_hex4(second_sequence + 2);
 8021ba0:	f105 0008 	add.w	r0, r5, #8
 8021ba4:	f7ff ff42 	bl	8021a2c <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8021ba8:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8021bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021bb0:	d2ac      	bcs.n	8021b0c <parse_string+0x94>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021bb2:	ea09 2686 	and.w	r6, r9, r6, lsl #10
 8021bb6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8021bba:	4330      	orrs	r0, r6
 8021bbc:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        sequence_length = 12; /* \uXXXX\uXXXX */
 8021bc0:	230c      	movs	r3, #12
        first_byte_mark = 0xF0; /* 11110000 */
 8021bc2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
 8021bc6:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8021bc8:	f100 3eff 	add.w	lr, r0, #4294967295
 8021bcc:	fa54 fe8e 	uxtab	lr, r4, lr
 8021bd0:	45a6      	cmp	lr, r4
 8021bd2:	b2f2      	uxtb	r2, r6
 8021bd4:	d124      	bne.n	8021c20 <parse_string+0x1a8>
    if (utf8_length > 1)
 8021bd6:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8021bd8:	bf14      	ite	ne
 8021bda:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8021bde:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
 8021be2:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
 8021be4:	4404      	add	r4, r0
                    if (sequence_length == 0)
 8021be6:	e7b9      	b.n	8021b5c <parse_string+0xe4>
    if (codepoint < 0x80)
 8021be8:	287f      	cmp	r0, #127	; 0x7f
 8021bea:	d90a      	bls.n	8021c02 <parse_string+0x18a>
    else if (codepoint < 0x800)
 8021bec:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8021bf0:	d30c      	bcc.n	8021c0c <parse_string+0x194>
    else if (codepoint < 0x10000)
 8021bf2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8021bf6:	d30e      	bcc.n	8021c16 <parse_string+0x19e>
    else if (codepoint <= 0x10FFFF)
 8021bf8:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8021bfc:	d286      	bcs.n	8021b0c <parse_string+0x94>
        sequence_length = 6; /* \uXXXX */
 8021bfe:	2306      	movs	r3, #6
 8021c00:	e7df      	b.n	8021bc2 <parse_string+0x14a>
 8021c02:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
 8021c04:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
 8021c08:	2001      	movs	r0, #1
 8021c0a:	e7dd      	b.n	8021bc8 <parse_string+0x150>
        sequence_length = 6; /* \uXXXX */
 8021c0c:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
 8021c0e:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
 8021c12:	2002      	movs	r0, #2
 8021c14:	e7d8      	b.n	8021bc8 <parse_string+0x150>
        sequence_length = 6; /* \uXXXX */
 8021c16:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
 8021c18:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
 8021c1c:	2003      	movs	r0, #3
 8021c1e:	e7d3      	b.n	8021bc8 <parse_string+0x150>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8021c20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021c24:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8021c28:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
 8021c2c:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8021c2e:	e7cf      	b.n	8021bd0 <parse_string+0x158>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8021c30:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8021c34:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8021c36:	f8da 2010 	ldr.w	r2, [sl, #16]
 8021c3a:	4418      	add	r0, r3
 8021c3c:	4790      	blx	r2
        if (output == NULL)
 8021c3e:	4683      	mov	fp, r0
 8021c40:	2800      	cmp	r0, #0
 8021c42:	f43f af30 	beq.w	8021aa6 <parse_string+0x2e>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8021c46:	f8df 9008 	ldr.w	r9, [pc, #8]	; 8021c50 <parse_string+0x1d8>
 8021c4a:	4604      	mov	r4, r0
 8021c4c:	e73d      	b.n	8021aca <parse_string+0x52>
 8021c4e:	bf00      	nop
 8021c50:	000ffc00 	.word	0x000ffc00

08021c54 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8021c54:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
 8021c56:	b140      	cbz	r0, 8021c6a <buffer_skip_whitespace+0x16>
 8021c58:	6801      	ldr	r1, [r0, #0]
 8021c5a:	b171      	cbz	r1, 8021c7a <buffer_skip_whitespace+0x26>
    {
        return NULL;
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8021c5c:	6842      	ldr	r2, [r0, #4]
 8021c5e:	6883      	ldr	r3, [r0, #8]
 8021c60:	4293      	cmp	r3, r2
 8021c62:	d206      	bcs.n	8021c72 <buffer_skip_whitespace+0x1e>
 8021c64:	5ccc      	ldrb	r4, [r1, r3]
 8021c66:	2c20      	cmp	r4, #32
 8021c68:	d900      	bls.n	8021c6c <buffer_skip_whitespace+0x18>
    {
        buffer->offset--;
    }

    return buffer;
}
 8021c6a:	bd10      	pop	{r4, pc}
       buffer->offset++;
 8021c6c:	3301      	adds	r3, #1
 8021c6e:	6083      	str	r3, [r0, #8]
 8021c70:	e7f5      	b.n	8021c5e <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
 8021c72:	d1fa      	bne.n	8021c6a <buffer_skip_whitespace+0x16>
        buffer->offset--;
 8021c74:	3a01      	subs	r2, #1
 8021c76:	6082      	str	r2, [r0, #8]
 8021c78:	e7f7      	b.n	8021c6a <buffer_skip_whitespace+0x16>
        return NULL;
 8021c7a:	4608      	mov	r0, r1
 8021c7c:	e7f5      	b.n	8021c6a <buffer_skip_whitespace+0x16>
	...

08021c80 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8021c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c82:	460d      	mov	r5, r1
    cJSON *current_element = NULL;

    if ((object == NULL) || (name == NULL))
 8021c84:	4604      	mov	r4, r0
 8021c86:	b348      	cbz	r0, 8021cdc <get_object_item+0x5c>
 8021c88:	b369      	cbz	r1, 8021ce6 <get_object_item+0x66>
    {
        return NULL;
    }

    current_element = object->child;
 8021c8a:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
 8021c8c:	b9fa      	cbnz	r2, 8021cce <get_object_item+0x4e>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021c8e:	4e17      	ldr	r6, [pc, #92]	; (8021cec <get_object_item+0x6c>)
            current_element = current_element->next;
        }
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8021c90:	b324      	cbz	r4, 8021cdc <get_object_item+0x5c>
 8021c92:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
 8021c94:	b1c3      	cbz	r3, 8021cc8 <get_object_item+0x48>
    if (string1 == string2)
 8021c96:	42ab      	cmp	r3, r5
 8021c98:	d020      	beq.n	8021cdc <get_object_item+0x5c>
 8021c9a:	f105 3cff 	add.w	ip, r5, #4294967295
 8021c9e:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8021ca0:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8021ca4:	5d8a      	ldrb	r2, [r1, r6]
 8021ca6:	f002 0203 	and.w	r2, r2, #3
 8021caa:	2a01      	cmp	r2, #1
 8021cac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8021cb0:	5cb0      	ldrb	r0, [r6, r2]
 8021cb2:	f000 0003 	and.w	r0, r0, #3
 8021cb6:	460f      	mov	r7, r1
 8021cb8:	bf08      	it	eq
 8021cba:	f101 0720 	addeq.w	r7, r1, #32
 8021cbe:	2801      	cmp	r0, #1
 8021cc0:	bf08      	it	eq
 8021cc2:	3220      	addeq	r2, #32
 8021cc4:	4297      	cmp	r7, r2
 8021cc6:	d00b      	beq.n	8021ce0 <get_object_item+0x60>
        {
            current_element = current_element->next;
 8021cc8:	6824      	ldr	r4, [r4, #0]
 8021cca:	e7e1      	b.n	8021c90 <get_object_item+0x10>
            current_element = current_element->next;
 8021ccc:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8021cce:	b12c      	cbz	r4, 8021cdc <get_object_item+0x5c>
 8021cd0:	6a21      	ldr	r1, [r4, #32]
 8021cd2:	4628      	mov	r0, r5
 8021cd4:	f7de fa7c 	bl	80001d0 <strcmp>
 8021cd8:	2800      	cmp	r0, #0
 8021cda:	d1f7      	bne.n	8021ccc <get_object_item+0x4c>
        }
    }

    return current_element;
}
 8021cdc:	4620      	mov	r0, r4
 8021cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
 8021ce0:	2900      	cmp	r1, #0
 8021ce2:	d1dd      	bne.n	8021ca0 <get_object_item+0x20>
 8021ce4:	e7fa      	b.n	8021cdc <get_object_item+0x5c>
        return NULL;
 8021ce6:	460c      	mov	r4, r1
 8021ce8:	e7f8      	b.n	8021cdc <get_object_item+0x5c>
 8021cea:	bf00      	nop
 8021cec:	080337ac 	.word	0x080337ac

08021cf0 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
 8021cf0:	b510      	push	{r4, lr}
 8021cf2:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8021cf4:	2028      	movs	r0, #40	; 0x28
 8021cf6:	4798      	blx	r3
    if (node)
 8021cf8:	4604      	mov	r4, r0
 8021cfa:	b118      	cbz	r0, 8021d04 <cJSON_New_Item.isra.0+0x14>
        memset(node, '\0', sizeof(cJSON));
 8021cfc:	2228      	movs	r2, #40	; 0x28
 8021cfe:	2100      	movs	r1, #0
 8021d00:	f000 fb9a 	bl	8022438 <memset>
}
 8021d04:	4620      	mov	r0, r4
 8021d06:	bd10      	pop	{r4, pc}

08021d08 <cJSON_Delete>:
{
 8021d08:	b570      	push	{r4, r5, r6, lr}
 8021d0a:	4d10      	ldr	r5, [pc, #64]	; (8021d4c <cJSON_Delete+0x44>)
 8021d0c:	4604      	mov	r4, r0
    while (item != NULL)
 8021d0e:	b904      	cbnz	r4, 8021d12 <cJSON_Delete+0xa>
}
 8021d10:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021d12:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
 8021d14:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8021d16:	05d9      	lsls	r1, r3, #23
 8021d18:	d403      	bmi.n	8021d22 <cJSON_Delete+0x1a>
 8021d1a:	68a0      	ldr	r0, [r4, #8]
 8021d1c:	b968      	cbnz	r0, 8021d3a <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021d1e:	6920      	ldr	r0, [r4, #16]
 8021d20:	b988      	cbnz	r0, 8021d46 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8021d22:	68e3      	ldr	r3, [r4, #12]
 8021d24:	059b      	lsls	r3, r3, #22
 8021d26:	d403      	bmi.n	8021d30 <cJSON_Delete+0x28>
 8021d28:	6a20      	ldr	r0, [r4, #32]
 8021d2a:	b108      	cbz	r0, 8021d30 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
 8021d2c:	686b      	ldr	r3, [r5, #4]
 8021d2e:	4798      	blx	r3
        global_hooks.deallocate(item);
 8021d30:	4620      	mov	r0, r4
 8021d32:	686b      	ldr	r3, [r5, #4]
 8021d34:	4798      	blx	r3
        item = next;
 8021d36:	4634      	mov	r4, r6
 8021d38:	e7e9      	b.n	8021d0e <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
 8021d3a:	f7ff ffe5 	bl	8021d08 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8021d3e:	68e3      	ldr	r3, [r4, #12]
 8021d40:	05da      	lsls	r2, r3, #23
 8021d42:	d5ec      	bpl.n	8021d1e <cJSON_Delete+0x16>
 8021d44:	e7ed      	b.n	8021d22 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
 8021d46:	686b      	ldr	r3, [r5, #4]
 8021d48:	4798      	blx	r3
 8021d4a:	e7ea      	b.n	8021d22 <cJSON_Delete+0x1a>
 8021d4c:	200005d8 	.word	0x200005d8

08021d50 <parse_value>:
{
 8021d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d54:	4605      	mov	r5, r0
 8021d56:	b092      	sub	sp, #72	; 0x48
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021d58:	460c      	mov	r4, r1
 8021d5a:	b909      	cbnz	r1, 8021d60 <parse_value+0x10>
    return false;
 8021d5c:	2000      	movs	r0, #0
 8021d5e:	e023      	b.n	8021da8 <parse_value+0x58>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021d60:	680f      	ldr	r7, [r1, #0]
 8021d62:	2f00      	cmp	r7, #0
 8021d64:	d0fa      	beq.n	8021d5c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8021d66:	688e      	ldr	r6, [r1, #8]
 8021d68:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8021d6c:	f106 0904 	add.w	r9, r6, #4
 8021d70:	45c1      	cmp	r9, r8
 8021d72:	d80b      	bhi.n	8021d8c <parse_value+0x3c>
 8021d74:	4990      	ldr	r1, [pc, #576]	; (8021fb8 <parse_value+0x268>)
 8021d76:	2204      	movs	r2, #4
 8021d78:	19b8      	adds	r0, r7, r6
 8021d7a:	f001 fe25 	bl	80239c8 <strncmp>
 8021d7e:	b928      	cbnz	r0, 8021d8c <parse_value+0x3c>
        item->type = cJSON_NULL;
 8021d80:	2304      	movs	r3, #4
 8021d82:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
 8021d84:	f8c4 9008 	str.w	r9, [r4, #8]
    return true;
 8021d88:	2001      	movs	r0, #1
 8021d8a:	e00d      	b.n	8021da8 <parse_value+0x58>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8021d8c:	f106 0a05 	add.w	sl, r6, #5
 8021d90:	45d0      	cmp	r8, sl
 8021d92:	d30c      	bcc.n	8021dae <parse_value+0x5e>
 8021d94:	4989      	ldr	r1, [pc, #548]	; (8021fbc <parse_value+0x26c>)
 8021d96:	2205      	movs	r2, #5
 8021d98:	19b8      	adds	r0, r7, r6
 8021d9a:	f001 fe15 	bl	80239c8 <strncmp>
 8021d9e:	b930      	cbnz	r0, 8021dae <parse_value+0x5e>
        item->type = cJSON_False;
 8021da0:	2001      	movs	r0, #1
 8021da2:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
 8021da4:	f8c4 a008 	str.w	sl, [r4, #8]
}
 8021da8:	b012      	add	sp, #72	; 0x48
 8021daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8021dae:	45c1      	cmp	r9, r8
 8021db0:	d80c      	bhi.n	8021dcc <parse_value+0x7c>
 8021db2:	4983      	ldr	r1, [pc, #524]	; (8021fc0 <parse_value+0x270>)
 8021db4:	2204      	movs	r2, #4
 8021db6:	19b8      	adds	r0, r7, r6
 8021db8:	f001 fe06 	bl	80239c8 <strncmp>
 8021dbc:	b930      	cbnz	r0, 8021dcc <parse_value+0x7c>
        item->type = cJSON_True;
 8021dbe:	2302      	movs	r3, #2
        item->valueint = 1;
 8021dc0:	2001      	movs	r0, #1
        item->type = cJSON_True;
 8021dc2:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
 8021dc4:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
 8021dc6:	f8c4 9008 	str.w	r9, [r4, #8]
        return true;
 8021dca:	e7ed      	b.n	8021da8 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8021dcc:	4546      	cmp	r6, r8
 8021dce:	d2c5      	bcs.n	8021d5c <parse_value+0xc>
 8021dd0:	5dbb      	ldrb	r3, [r7, r6]
 8021dd2:	2b22      	cmp	r3, #34	; 0x22
 8021dd4:	d104      	bne.n	8021de0 <parse_value+0x90>
        return parse_string(item, input_buffer);
 8021dd6:	4621      	mov	r1, r4
 8021dd8:	4628      	mov	r0, r5
 8021dda:	f7ff fe4d 	bl	8021a78 <parse_string>
 8021dde:	e7e3      	b.n	8021da8 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8021de0:	2b2d      	cmp	r3, #45	; 0x2d
 8021de2:	d003      	beq.n	8021dec <parse_value+0x9c>
 8021de4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8021de8:	2a09      	cmp	r2, #9
 8021dea:	d868      	bhi.n	8021ebe <parse_value+0x16e>
    unsigned char *after_end = NULL;
 8021dec:	2600      	movs	r6, #0
 8021dee:	9601      	str	r6, [sp, #4]
    struct lconv *lconv = localeconv();
 8021df0:	f000 fad8 	bl	80223a4 <localeconv>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8021df4:	6822      	ldr	r2, [r4, #0]
 8021df6:	2a00      	cmp	r2, #0
 8021df8:	d0b0      	beq.n	8021d5c <parse_value+0xc>
    return (unsigned char) lconv->decimal_point[0];
 8021dfa:	6803      	ldr	r3, [r0, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021dfc:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
    return (unsigned char) lconv->decimal_point[0];
 8021e00:	f893 c000 	ldrb.w	ip, [r3]
 8021e04:	4402      	add	r2, r0
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021e06:	4633      	mov	r3, r6
 8021e08:	f10d 0808 	add.w	r8, sp, #8
 8021e0c:	18c1      	adds	r1, r0, r3
 8021e0e:	428f      	cmp	r7, r1
 8021e10:	d91c      	bls.n	8021e4c <parse_value+0xfc>
        switch (buffer_at_offset(input_buffer)[i])
 8021e12:	f812 1b01 	ldrb.w	r1, [r2], #1
 8021e16:	2939      	cmp	r1, #57	; 0x39
 8021e18:	d80f      	bhi.n	8021e3a <parse_value+0xea>
 8021e1a:	292a      	cmp	r1, #42	; 0x2a
 8021e1c:	d916      	bls.n	8021e4c <parse_value+0xfc>
 8021e1e:	f1a1 062b 	sub.w	r6, r1, #43	; 0x2b
 8021e22:	2e0e      	cmp	r6, #14
 8021e24:	d812      	bhi.n	8021e4c <parse_value+0xfc>
 8021e26:	e8df f006 	tbb	[pc, r6]
 8021e2a:	110c      	.short	0x110c
 8021e2c:	0c11370c 	.word	0x0c11370c
 8021e30:	0c0c0c0c 	.word	0x0c0c0c0c
 8021e34:	0c0c0c0c 	.word	0x0c0c0c0c
 8021e38:	0c          	.byte	0x0c
 8021e39:	00          	.byte	0x00
 8021e3a:	f001 06df 	and.w	r6, r1, #223	; 0xdf
 8021e3e:	2e45      	cmp	r6, #69	; 0x45
 8021e40:	d104      	bne.n	8021e4c <parse_value+0xfc>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8021e42:	f808 1003 	strb.w	r1, [r8, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8021e46:	3301      	adds	r3, #1
 8021e48:	2b3f      	cmp	r3, #63	; 0x3f
 8021e4a:	d1df      	bne.n	8021e0c <parse_value+0xbc>
    number_c_string[i] = '\0';
 8021e4c:	aa12      	add	r2, sp, #72	; 0x48
 8021e4e:	4413      	add	r3, r2
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021e50:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
 8021e52:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021e54:	4640      	mov	r0, r8
    number_c_string[i] = '\0';
 8021e56:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021e5a:	f002 fc17 	bl	802468c <strtod>
    if (number_c_string == after_end)
 8021e5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8021e62:	45c1      	cmp	r9, r8
    number = strtod((const char*)number_c_string, (char**)&after_end);
 8021e64:	ec57 6b10 	vmov	r6, r7, d0
    if (number_c_string == after_end)
 8021e68:	f43f af78 	beq.w	8021d5c <parse_value+0xc>
    item->valuedouble = number;
 8021e6c:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
 8021e70:	a34f      	add	r3, pc, #316	; (adr r3, 8021fb0 <parse_value+0x260>)
 8021e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021e76:	ee10 0a10 	vmov	r0, s0
 8021e7a:	4639      	mov	r1, r7
 8021e7c:	f7de fe52 	bl	8000b24 <__aeabi_dcmpge>
 8021e80:	b168      	cbz	r0, 8021e9e <parse_value+0x14e>
        item->valueint = INT_MAX;
 8021e82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
 8021e86:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
 8021e88:	2308      	movs	r3, #8
 8021e8a:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
 8021e8c:	68a3      	ldr	r3, [r4, #8]
 8021e8e:	eba9 0808 	sub.w	r8, r9, r8
 8021e92:	4443      	add	r3, r8
    input_buffer->offset++;
 8021e94:	60a3      	str	r3, [r4, #8]
 8021e96:	e777      	b.n	8021d88 <parse_value+0x38>
                number_c_string[i] = decimal_point;
 8021e98:	f808 c003 	strb.w	ip, [r8, r3]
                break;
 8021e9c:	e7d3      	b.n	8021e46 <parse_value+0xf6>
    else if (number <= INT_MIN)
 8021e9e:	4b49      	ldr	r3, [pc, #292]	; (8021fc4 <parse_value+0x274>)
 8021ea0:	2200      	movs	r2, #0
 8021ea2:	4630      	mov	r0, r6
 8021ea4:	4639      	mov	r1, r7
 8021ea6:	f7de fe33 	bl	8000b10 <__aeabi_dcmple>
 8021eaa:	b110      	cbz	r0, 8021eb2 <parse_value+0x162>
        item->valueint = INT_MIN;
 8021eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8021eb0:	e7e9      	b.n	8021e86 <parse_value+0x136>
        item->valueint = (int)number;
 8021eb2:	4630      	mov	r0, r6
 8021eb4:	4639      	mov	r1, r7
 8021eb6:	f7de fe5f 	bl	8000b78 <__aeabi_d2iz>
 8021eba:	6168      	str	r0, [r5, #20]
 8021ebc:	e7e4      	b.n	8021e88 <parse_value+0x138>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8021ebe:	2b5b      	cmp	r3, #91	; 0x5b
 8021ec0:	d150      	bne.n	8021f64 <parse_value+0x214>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021ec2:	68e3      	ldr	r3, [r4, #12]
 8021ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021ec8:	f4bf af48 	bcs.w	8021d5c <parse_value+0xc>
    input_buffer->depth++;
 8021ecc:	3301      	adds	r3, #1
 8021ece:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
 8021ed0:	5dbb      	ldrb	r3, [r7, r6]
 8021ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8021ed4:	f47f af42 	bne.w	8021d5c <parse_value+0xc>
    input_buffer->offset++;
 8021ed8:	3601      	adds	r6, #1
 8021eda:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021edc:	4620      	mov	r0, r4
 8021ede:	f7ff feb9 	bl	8021c54 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8021ee2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021ee6:	4293      	cmp	r3, r2
 8021ee8:	d25d      	bcs.n	8021fa6 <parse_value+0x256>
 8021eea:	6822      	ldr	r2, [r4, #0]
 8021eec:	5cd2      	ldrb	r2, [r2, r3]
 8021eee:	2a5d      	cmp	r2, #93	; 0x5d
 8021ef0:	d109      	bne.n	8021f06 <parse_value+0x1b6>
    cJSON *head = NULL; /* head of the linked list */
 8021ef2:	2700      	movs	r7, #0
    input_buffer->depth--;
 8021ef4:	68e3      	ldr	r3, [r4, #12]
 8021ef6:	3b01      	subs	r3, #1
 8021ef8:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
 8021efa:	2320      	movs	r3, #32
    item->child = head;
 8021efc:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
 8021f00:	68a3      	ldr	r3, [r4, #8]
 8021f02:	3301      	adds	r3, #1
 8021f04:	e7c6      	b.n	8021e94 <parse_value+0x144>
    input_buffer->offset--;
 8021f06:	3b01      	subs	r3, #1
    cJSON *current_item = NULL;
 8021f08:	2600      	movs	r6, #0
    input_buffer->offset--;
 8021f0a:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* head of the linked list */
 8021f0c:	4637      	mov	r7, r6
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021f0e:	6920      	ldr	r0, [r4, #16]
 8021f10:	f7ff feee 	bl	8021cf0 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021f14:	46b0      	mov	r8, r6
 8021f16:	4606      	mov	r6, r0
 8021f18:	2800      	cmp	r0, #0
 8021f1a:	f000 809a 	beq.w	8022052 <parse_value+0x302>
        if (head == NULL)
 8021f1e:	b1ff      	cbz	r7, 8021f60 <parse_value+0x210>
            current_item->next = new_item;
 8021f20:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
 8021f24:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
 8021f28:	68a3      	ldr	r3, [r4, #8]
 8021f2a:	3301      	adds	r3, #1
 8021f2c:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021f2e:	4620      	mov	r0, r4
 8021f30:	f7ff fe90 	bl	8021c54 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8021f34:	4621      	mov	r1, r4
 8021f36:	4630      	mov	r0, r6
 8021f38:	f7ff ff0a 	bl	8021d50 <parse_value>
 8021f3c:	2800      	cmp	r0, #0
 8021f3e:	f000 808b 	beq.w	8022058 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8021f42:	4620      	mov	r0, r4
 8021f44:	f7ff fe86 	bl	8021c54 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8021f48:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021f4c:	4293      	cmp	r3, r2
 8021f4e:	f080 8083 	bcs.w	8022058 <parse_value+0x308>
 8021f52:	6822      	ldr	r2, [r4, #0]
 8021f54:	5cd3      	ldrb	r3, [r2, r3]
 8021f56:	2b2c      	cmp	r3, #44	; 0x2c
 8021f58:	d0d9      	beq.n	8021f0e <parse_value+0x1be>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8021f5a:	2b5d      	cmp	r3, #93	; 0x5d
 8021f5c:	d17c      	bne.n	8022058 <parse_value+0x308>
 8021f5e:	e7c9      	b.n	8021ef4 <parse_value+0x1a4>
 8021f60:	4607      	mov	r7, r0
 8021f62:	e7e1      	b.n	8021f28 <parse_value+0x1d8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8021f64:	2b7b      	cmp	r3, #123	; 0x7b
 8021f66:	f47f aef9 	bne.w	8021d5c <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8021f6a:	68e3      	ldr	r3, [r4, #12]
 8021f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021f70:	f4bf aef4 	bcs.w	8021d5c <parse_value+0xc>
    input_buffer->depth++;
 8021f74:	3301      	adds	r3, #1
 8021f76:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8021f78:	5dbb      	ldrb	r3, [r7, r6]
 8021f7a:	2b7b      	cmp	r3, #123	; 0x7b
 8021f7c:	f47f aeee 	bne.w	8021d5c <parse_value+0xc>
    input_buffer->offset++;
 8021f80:	3601      	adds	r6, #1
 8021f82:	60a6      	str	r6, [r4, #8]
    buffer_skip_whitespace(input_buffer);
 8021f84:	4620      	mov	r0, r4
 8021f86:	f7ff fe65 	bl	8021c54 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8021f8a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8021f8e:	4293      	cmp	r3, r2
 8021f90:	d209      	bcs.n	8021fa6 <parse_value+0x256>
 8021f92:	6822      	ldr	r2, [r4, #0]
 8021f94:	5cd2      	ldrb	r2, [r2, r3]
 8021f96:	2a7d      	cmp	r2, #125	; 0x7d
 8021f98:	d116      	bne.n	8021fc8 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
 8021f9a:	2700      	movs	r7, #0
    input_buffer->depth--;
 8021f9c:	68e3      	ldr	r3, [r4, #12]
 8021f9e:	3b01      	subs	r3, #1
 8021fa0:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
 8021fa2:	2340      	movs	r3, #64	; 0x40
 8021fa4:	e7aa      	b.n	8021efc <parse_value+0x1ac>
        input_buffer->offset--;
 8021fa6:	3b01      	subs	r3, #1
 8021fa8:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
 8021faa:	e6d7      	b.n	8021d5c <parse_value+0xc>
 8021fac:	f3af 8000 	nop.w
 8021fb0:	ffc00000 	.word	0xffc00000
 8021fb4:	41dfffff 	.word	0x41dfffff
 8021fb8:	0803378b 	.word	0x0803378b
 8021fbc:	0802f103 	.word	0x0802f103
 8021fc0:	0802f0fe 	.word	0x0802f0fe
 8021fc4:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
 8021fc8:	2600      	movs	r6, #0
    input_buffer->offset--;
 8021fca:	3b01      	subs	r3, #1
 8021fcc:	60a3      	str	r3, [r4, #8]
    cJSON *head = NULL; /* linked list head */
 8021fce:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
 8021fd0:	46b0      	mov	r8, r6
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8021fd2:	6920      	ldr	r0, [r4, #16]
 8021fd4:	f7ff fe8c 	bl	8021cf0 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
 8021fd8:	46b1      	mov	r9, r6
 8021fda:	4606      	mov	r6, r0
 8021fdc:	2800      	cmp	r0, #0
 8021fde:	d038      	beq.n	8022052 <parse_value+0x302>
        if (head == NULL)
 8021fe0:	b3af      	cbz	r7, 802204e <parse_value+0x2fe>
            current_item->next = new_item;
 8021fe2:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
 8021fe6:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
 8021fea:	68a3      	ldr	r3, [r4, #8]
 8021fec:	3301      	adds	r3, #1
 8021fee:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8021ff0:	4620      	mov	r0, r4
 8021ff2:	f7ff fe2f 	bl	8021c54 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8021ff6:	4621      	mov	r1, r4
 8021ff8:	4630      	mov	r0, r6
 8021ffa:	f7ff fd3d 	bl	8021a78 <parse_string>
 8021ffe:	b358      	cbz	r0, 8022058 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8022000:	4620      	mov	r0, r4
 8022002:	f7ff fe27 	bl	8021c54 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
 8022006:	6933      	ldr	r3, [r6, #16]
 8022008:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 802200a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802200e:	4293      	cmp	r3, r2
        current_item->valuestring = NULL;
 8022010:	f8c6 8010 	str.w	r8, [r6, #16]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8022014:	d220      	bcs.n	8022058 <parse_value+0x308>
 8022016:	6822      	ldr	r2, [r4, #0]
 8022018:	5cd2      	ldrb	r2, [r2, r3]
 802201a:	2a3a      	cmp	r2, #58	; 0x3a
 802201c:	d11c      	bne.n	8022058 <parse_value+0x308>
        input_buffer->offset++;
 802201e:	3301      	adds	r3, #1
 8022020:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
 8022022:	4620      	mov	r0, r4
 8022024:	f7ff fe16 	bl	8021c54 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8022028:	4621      	mov	r1, r4
 802202a:	4630      	mov	r0, r6
 802202c:	f7ff fe90 	bl	8021d50 <parse_value>
 8022030:	b190      	cbz	r0, 8022058 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
 8022032:	4620      	mov	r0, r4
 8022034:	f7ff fe0e 	bl	8021c54 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8022038:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 802203c:	4293      	cmp	r3, r2
 802203e:	d20b      	bcs.n	8022058 <parse_value+0x308>
 8022040:	6822      	ldr	r2, [r4, #0]
 8022042:	5cd3      	ldrb	r3, [r2, r3]
 8022044:	2b2c      	cmp	r3, #44	; 0x2c
 8022046:	d0c4      	beq.n	8021fd2 <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8022048:	2b7d      	cmp	r3, #125	; 0x7d
 802204a:	d105      	bne.n	8022058 <parse_value+0x308>
 802204c:	e7a6      	b.n	8021f9c <parse_value+0x24c>
 802204e:	4607      	mov	r7, r0
 8022050:	e7cb      	b.n	8021fea <parse_value+0x29a>
    if (head != NULL)
 8022052:	2f00      	cmp	r7, #0
 8022054:	f43f ae82 	beq.w	8021d5c <parse_value+0xc>
        cJSON_Delete(head);
 8022058:	4638      	mov	r0, r7
 802205a:	f7ff fe55 	bl	8021d08 <cJSON_Delete>
 802205e:	e67d      	b.n	8021d5c <parse_value+0xc>

08022060 <cJSON_ParseWithOpts>:
{
 8022060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    global_error.json = NULL;
 8022064:	4f29      	ldr	r7, [pc, #164]	; (802210c <cJSON_ParseWithOpts+0xac>)
{
 8022066:	b088      	sub	sp, #32
 8022068:	4605      	mov	r5, r0
 802206a:	460e      	mov	r6, r1
 802206c:	4690      	mov	r8, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 802206e:	2100      	movs	r1, #0
 8022070:	221c      	movs	r2, #28
 8022072:	a801      	add	r0, sp, #4
    global_error.json = NULL;
 8022074:	2400      	movs	r4, #0
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8022076:	f000 f9df 	bl	8022438 <memset>
    global_error.position = 0;
 802207a:	e9c7 4400 	strd	r4, r4, [r7]
    if (value == NULL)
 802207e:	2d00      	cmp	r5, #0
 8022080:	d037      	beq.n	80220f2 <cJSON_ParseWithOpts+0x92>
    buffer.length = strlen((const char*)value) + sizeof("");
 8022082:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
 8022084:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
 8022086:	f7de f8ad 	bl	80001e4 <strlen>
    buffer.hooks = global_hooks;
 802208a:	4b21      	ldr	r3, [pc, #132]	; (8022110 <cJSON_ParseWithOpts+0xb0>)
    buffer.length = strlen((const char*)value) + sizeof("");
 802208c:	3001      	adds	r0, #1
    buffer.offset = 0;
 802208e:	e9cd 0402 	strd	r0, r4, [sp, #8]
    buffer.hooks = global_hooks;
 8022092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022096:	ab08      	add	r3, sp, #32
 8022098:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
 802209c:	f7ff fe28 	bl	8021cf0 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
 80220a0:	4604      	mov	r4, r0
 80220a2:	b1e8      	cbz	r0, 80220e0 <cJSON_ParseWithOpts+0x80>
    if (!parse_value(item, buffer_skip_whitespace(&buffer)))
 80220a4:	a801      	add	r0, sp, #4
 80220a6:	f7ff fdd5 	bl	8021c54 <buffer_skip_whitespace>
 80220aa:	4601      	mov	r1, r0
 80220ac:	4620      	mov	r0, r4
 80220ae:	f7ff fe4f 	bl	8021d50 <parse_value>
 80220b2:	b190      	cbz	r0, 80220da <cJSON_ParseWithOpts+0x7a>
    if (require_null_terminated)
 80220b4:	f1b8 0f00 	cmp.w	r8, #0
 80220b8:	d104      	bne.n	80220c4 <cJSON_ParseWithOpts+0x64>
    if (return_parse_end)
 80220ba:	b9e6      	cbnz	r6, 80220f6 <cJSON_ParseWithOpts+0x96>
}
 80220bc:	4620      	mov	r0, r4
 80220be:	b008      	add	sp, #32
 80220c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        buffer_skip_whitespace(&buffer);
 80220c4:	a801      	add	r0, sp, #4
 80220c6:	f7ff fdc5 	bl	8021c54 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80220ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80220ce:	4293      	cmp	r3, r2
 80220d0:	d203      	bcs.n	80220da <cJSON_ParseWithOpts+0x7a>
 80220d2:	9a01      	ldr	r2, [sp, #4]
 80220d4:	5cd3      	ldrb	r3, [r2, r3]
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d0ef      	beq.n	80220ba <cJSON_ParseWithOpts+0x5a>
        cJSON_Delete(item);
 80220da:	4620      	mov	r0, r4
 80220dc:	f7ff fe14 	bl	8021d08 <cJSON_Delete>
        if (buffer.offset < buffer.length)
 80220e0:	e9dd 0202 	ldrd	r0, r2, [sp, #8]
 80220e4:	4282      	cmp	r2, r0
 80220e6:	d30b      	bcc.n	8022100 <cJSON_ParseWithOpts+0xa0>
        else if (buffer.length > 0)
 80220e8:	b100      	cbz	r0, 80220ec <cJSON_ParseWithOpts+0x8c>
            local_error.position = buffer.length - 1;
 80220ea:	3801      	subs	r0, #1
        if (return_parse_end != NULL)
 80220ec:	b156      	cbz	r6, 8022104 <cJSON_ParseWithOpts+0xa4>
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80220ee:	4428      	add	r0, r5
 80220f0:	6030      	str	r0, [r6, #0]
    return NULL;
 80220f2:	2400      	movs	r4, #0
 80220f4:	e7e2      	b.n	80220bc <cJSON_ParseWithOpts+0x5c>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80220f6:	9b01      	ldr	r3, [sp, #4]
 80220f8:	9a03      	ldr	r2, [sp, #12]
 80220fa:	4413      	add	r3, r2
 80220fc:	6033      	str	r3, [r6, #0]
 80220fe:	e7dd      	b.n	80220bc <cJSON_ParseWithOpts+0x5c>
 8022100:	4610      	mov	r0, r2
 8022102:	e7f3      	b.n	80220ec <cJSON_ParseWithOpts+0x8c>
            global_error = local_error;
 8022104:	e9c7 5000 	strd	r5, r0, [r7]
 8022108:	e7f3      	b.n	80220f2 <cJSON_ParseWithOpts+0x92>
 802210a:	bf00      	nop
 802210c:	2000112c 	.word	0x2000112c
 8022110:	200005d8 	.word	0x200005d8

08022114 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
 8022114:	2200      	movs	r2, #0
 8022116:	4611      	mov	r1, r2
 8022118:	f7ff bfa2 	b.w	8022060 <cJSON_ParseWithOpts>

0802211c <cJSON_GetObjectItemCaseSensitive>:
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
    return get_object_item(object, string, true);
 802211c:	2201      	movs	r2, #1
 802211e:	f7ff bdaf 	b.w	8021c80 <get_object_item>

08022122 <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
 8022122:	b118      	cbz	r0, 802212c <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
 8022124:	7b00      	ldrb	r0, [r0, #12]
 8022126:	1e83      	subs	r3, r0, #2
 8022128:	4258      	negs	r0, r3
 802212a:	4158      	adcs	r0, r3
}
 802212c:	4770      	bx	lr

0802212e <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
 802212e:	b120      	cbz	r0, 802213a <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 8022130:	68c0      	ldr	r0, [r0, #12]
 8022132:	f010 0003 	ands.w	r0, r0, #3
 8022136:	bf18      	it	ne
 8022138:	2001      	movne	r0, #1
}
 802213a:	4770      	bx	lr

0802213c <cJSON_IsNumber>:
    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
 802213c:	b120      	cbz	r0, 8022148 <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
 802213e:	7b00      	ldrb	r0, [r0, #12]
 8022140:	f1a0 0308 	sub.w	r3, r0, #8
 8022144:	4258      	negs	r0, r3
 8022146:	4158      	adcs	r0, r3
}
 8022148:	4770      	bx	lr

0802214a <atoi>:
 802214a:	220a      	movs	r2, #10
 802214c:	2100      	movs	r1, #0
 802214e:	f002 bb8b 	b.w	8024868 <strtol>
	...

08022154 <calloc>:
 8022154:	4b02      	ldr	r3, [pc, #8]	; (8022160 <calloc+0xc>)
 8022156:	460a      	mov	r2, r1
 8022158:	4601      	mov	r1, r0
 802215a:	6818      	ldr	r0, [r3, #0]
 802215c:	f000 bbf2 	b.w	8022944 <_calloc_r>
 8022160:	200005e4 	.word	0x200005e4

08022164 <__errno>:
 8022164:	4b01      	ldr	r3, [pc, #4]	; (802216c <__errno+0x8>)
 8022166:	6818      	ldr	r0, [r3, #0]
 8022168:	4770      	bx	lr
 802216a:	bf00      	nop
 802216c:	200005e4 	.word	0x200005e4

08022170 <fiprintf>:
 8022170:	b40e      	push	{r1, r2, r3}
 8022172:	b503      	push	{r0, r1, lr}
 8022174:	4601      	mov	r1, r0
 8022176:	ab03      	add	r3, sp, #12
 8022178:	4805      	ldr	r0, [pc, #20]	; (8022190 <fiprintf+0x20>)
 802217a:	f853 2b04 	ldr.w	r2, [r3], #4
 802217e:	6800      	ldr	r0, [r0, #0]
 8022180:	9301      	str	r3, [sp, #4]
 8022182:	f000 fcc3 	bl	8022b0c <_vfiprintf_r>
 8022186:	b002      	add	sp, #8
 8022188:	f85d eb04 	ldr.w	lr, [sp], #4
 802218c:	b003      	add	sp, #12
 802218e:	4770      	bx	lr
 8022190:	200005e4 	.word	0x200005e4

08022194 <getchar>:
 8022194:	4b07      	ldr	r3, [pc, #28]	; (80221b4 <getchar+0x20>)
 8022196:	b510      	push	{r4, lr}
 8022198:	681c      	ldr	r4, [r3, #0]
 802219a:	b124      	cbz	r4, 80221a6 <getchar+0x12>
 802219c:	69a3      	ldr	r3, [r4, #24]
 802219e:	b913      	cbnz	r3, 80221a6 <getchar+0x12>
 80221a0:	4620      	mov	r0, r4
 80221a2:	f003 fe95 	bl	8025ed0 <__sinit>
 80221a6:	6861      	ldr	r1, [r4, #4]
 80221a8:	4620      	mov	r0, r4
 80221aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80221ae:	f004 bab9 	b.w	8026724 <_getc_r>
 80221b2:	bf00      	nop
 80221b4:	200005e4 	.word	0x200005e4

080221b8 <gmtime>:
 80221b8:	b538      	push	{r3, r4, r5, lr}
 80221ba:	4b0b      	ldr	r3, [pc, #44]	; (80221e8 <gmtime+0x30>)
 80221bc:	681d      	ldr	r5, [r3, #0]
 80221be:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80221c0:	4604      	mov	r4, r0
 80221c2:	b953      	cbnz	r3, 80221da <gmtime+0x22>
 80221c4:	2024      	movs	r0, #36	; 0x24
 80221c6:	f000 f8f1 	bl	80223ac <malloc>
 80221ca:	4602      	mov	r2, r0
 80221cc:	63e8      	str	r0, [r5, #60]	; 0x3c
 80221ce:	b920      	cbnz	r0, 80221da <gmtime+0x22>
 80221d0:	4b06      	ldr	r3, [pc, #24]	; (80221ec <gmtime+0x34>)
 80221d2:	4807      	ldr	r0, [pc, #28]	; (80221f0 <gmtime+0x38>)
 80221d4:	2139      	movs	r1, #57	; 0x39
 80221d6:	f002 fe93 	bl	8024f00 <__assert_func>
 80221da:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80221dc:	4620      	mov	r0, r4
 80221de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80221e2:	f000 b807 	b.w	80221f4 <gmtime_r>
 80221e6:	bf00      	nop
 80221e8:	200005e4 	.word	0x200005e4
 80221ec:	080338ac 	.word	0x080338ac
 80221f0:	080338c3 	.word	0x080338c3

080221f4 <gmtime_r>:
 80221f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221f8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80221fc:	460c      	mov	r4, r1
 80221fe:	4a51      	ldr	r2, [pc, #324]	; (8022344 <gmtime_r+0x150>)
 8022200:	2300      	movs	r3, #0
 8022202:	4630      	mov	r0, r6
 8022204:	4639      	mov	r1, r7
 8022206:	f7de fcff 	bl	8000c08 <__aeabi_ldivmod>
 802220a:	4639      	mov	r1, r7
 802220c:	4605      	mov	r5, r0
 802220e:	4a4d      	ldr	r2, [pc, #308]	; (8022344 <gmtime_r+0x150>)
 8022210:	4630      	mov	r0, r6
 8022212:	2300      	movs	r3, #0
 8022214:	f7de fcf8 	bl	8000c08 <__aeabi_ldivmod>
 8022218:	2a00      	cmp	r2, #0
 802221a:	bfbc      	itt	lt
 802221c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8022220:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8022224:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022228:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802222c:	fbb2 f3f1 	udiv	r3, r2, r1
 8022230:	fb01 2213 	mls	r2, r1, r3, r2
 8022234:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8022238:	bfac      	ite	ge
 802223a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802223e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8022242:	60a3      	str	r3, [r4, #8]
 8022244:	fbb2 f3f1 	udiv	r3, r2, r1
 8022248:	fb01 2213 	mls	r2, r1, r3, r2
 802224c:	6063      	str	r3, [r4, #4]
 802224e:	6022      	str	r2, [r4, #0]
 8022250:	1cc3      	adds	r3, r0, #3
 8022252:	2207      	movs	r2, #7
 8022254:	fb93 f2f2 	sdiv	r2, r3, r2
 8022258:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802225c:	1a9b      	subs	r3, r3, r2
 802225e:	bf48      	it	mi
 8022260:	3307      	addmi	r3, #7
 8022262:	2800      	cmp	r0, #0
 8022264:	61a3      	str	r3, [r4, #24]
 8022266:	bfb8      	it	lt
 8022268:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 802226c:	4936      	ldr	r1, [pc, #216]	; (8022348 <gmtime_r+0x154>)
 802226e:	bfae      	itee	ge
 8022270:	fb90 f1f1 	sdivge	r1, r0, r1
 8022274:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8022278:	fb93 f1f1 	sdivlt	r1, r3, r1
 802227c:	4b33      	ldr	r3, [pc, #204]	; (802234c <gmtime_r+0x158>)
 802227e:	fb03 0001 	mla	r0, r3, r1, r0
 8022282:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8022286:	fbb0 f2f2 	udiv	r2, r0, r2
 802228a:	4402      	add	r2, r0
 802228c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8022290:	fbb0 f3fc 	udiv	r3, r0, ip
 8022294:	1ad2      	subs	r2, r2, r3
 8022296:	f240 176d 	movw	r7, #365	; 0x16d
 802229a:	4b2d      	ldr	r3, [pc, #180]	; (8022350 <gmtime_r+0x15c>)
 802229c:	fbb0 f3f3 	udiv	r3, r0, r3
 80222a0:	2664      	movs	r6, #100	; 0x64
 80222a2:	1ad3      	subs	r3, r2, r3
 80222a4:	fbb3 f5f7 	udiv	r5, r3, r7
 80222a8:	fbb3 f3fc 	udiv	r3, r3, ip
 80222ac:	fbb5 f2f6 	udiv	r2, r5, r6
 80222b0:	1ad3      	subs	r3, r2, r3
 80222b2:	4403      	add	r3, r0
 80222b4:	fb07 3315 	mls	r3, r7, r5, r3
 80222b8:	2099      	movs	r0, #153	; 0x99
 80222ba:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80222be:	f10c 0c02 	add.w	ip, ip, #2
 80222c2:	f103 0e01 	add.w	lr, r3, #1
 80222c6:	fbbc f7f0 	udiv	r7, ip, r0
 80222ca:	4378      	muls	r0, r7
 80222cc:	3002      	adds	r0, #2
 80222ce:	f04f 0805 	mov.w	r8, #5
 80222d2:	fbb0 f0f8 	udiv	r0, r0, r8
 80222d6:	ebae 0000 	sub.w	r0, lr, r0
 80222da:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80222de:	45f4      	cmp	ip, lr
 80222e0:	bf94      	ite	ls
 80222e2:	f04f 0c02 	movls.w	ip, #2
 80222e6:	f06f 0c09 	mvnhi.w	ip, #9
 80222ea:	4467      	add	r7, ip
 80222ec:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80222f0:	fb0c 5101 	mla	r1, ip, r1, r5
 80222f4:	2f01      	cmp	r7, #1
 80222f6:	bf98      	it	ls
 80222f8:	3101      	addls	r1, #1
 80222fa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80222fe:	d30c      	bcc.n	802231a <gmtime_r+0x126>
 8022300:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8022304:	61e3      	str	r3, [r4, #28]
 8022306:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 802230a:	2300      	movs	r3, #0
 802230c:	60e0      	str	r0, [r4, #12]
 802230e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8022312:	6223      	str	r3, [r4, #32]
 8022314:	4620      	mov	r0, r4
 8022316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802231a:	f015 0f03 	tst.w	r5, #3
 802231e:	d102      	bne.n	8022326 <gmtime_r+0x132>
 8022320:	fb06 5212 	mls	r2, r6, r2, r5
 8022324:	b95a      	cbnz	r2, 802233e <gmtime_r+0x14a>
 8022326:	f44f 76c8 	mov.w	r6, #400	; 0x190
 802232a:	fbb5 f2f6 	udiv	r2, r5, r6
 802232e:	fb06 5212 	mls	r2, r6, r2, r5
 8022332:	fab2 f282 	clz	r2, r2
 8022336:	0952      	lsrs	r2, r2, #5
 8022338:	333b      	adds	r3, #59	; 0x3b
 802233a:	4413      	add	r3, r2
 802233c:	e7e2      	b.n	8022304 <gmtime_r+0x110>
 802233e:	2201      	movs	r2, #1
 8022340:	e7fa      	b.n	8022338 <gmtime_r+0x144>
 8022342:	bf00      	nop
 8022344:	00015180 	.word	0x00015180
 8022348:	00023ab1 	.word	0x00023ab1
 802234c:	fffdc54f 	.word	0xfffdc54f
 8022350:	00023ab0 	.word	0x00023ab0

08022354 <__libc_init_array>:
 8022354:	b570      	push	{r4, r5, r6, lr}
 8022356:	4d0d      	ldr	r5, [pc, #52]	; (802238c <__libc_init_array+0x38>)
 8022358:	4c0d      	ldr	r4, [pc, #52]	; (8022390 <__libc_init_array+0x3c>)
 802235a:	1b64      	subs	r4, r4, r5
 802235c:	10a4      	asrs	r4, r4, #2
 802235e:	2600      	movs	r6, #0
 8022360:	42a6      	cmp	r6, r4
 8022362:	d109      	bne.n	8022378 <__libc_init_array+0x24>
 8022364:	4d0b      	ldr	r5, [pc, #44]	; (8022394 <__libc_init_array+0x40>)
 8022366:	4c0c      	ldr	r4, [pc, #48]	; (8022398 <__libc_init_array+0x44>)
 8022368:	f005 ff04 	bl	8028174 <_init>
 802236c:	1b64      	subs	r4, r4, r5
 802236e:	10a4      	asrs	r4, r4, #2
 8022370:	2600      	movs	r6, #0
 8022372:	42a6      	cmp	r6, r4
 8022374:	d105      	bne.n	8022382 <__libc_init_array+0x2e>
 8022376:	bd70      	pop	{r4, r5, r6, pc}
 8022378:	f855 3b04 	ldr.w	r3, [r5], #4
 802237c:	4798      	blx	r3
 802237e:	3601      	adds	r6, #1
 8022380:	e7ee      	b.n	8022360 <__libc_init_array+0xc>
 8022382:	f855 3b04 	ldr.w	r3, [r5], #4
 8022386:	4798      	blx	r3
 8022388:	3601      	adds	r6, #1
 802238a:	e7f2      	b.n	8022372 <__libc_init_array+0x1e>
 802238c:	08033e98 	.word	0x08033e98
 8022390:	08033e98 	.word	0x08033e98
 8022394:	08033e98 	.word	0x08033e98
 8022398:	08033e9c 	.word	0x08033e9c

0802239c <_localeconv_r>:
 802239c:	4800      	ldr	r0, [pc, #0]	; (80223a0 <_localeconv_r+0x4>)
 802239e:	4770      	bx	lr
 80223a0:	2000079c 	.word	0x2000079c

080223a4 <localeconv>:
 80223a4:	4800      	ldr	r0, [pc, #0]	; (80223a8 <localeconv+0x4>)
 80223a6:	4770      	bx	lr
 80223a8:	2000079c 	.word	0x2000079c

080223ac <malloc>:
 80223ac:	4b02      	ldr	r3, [pc, #8]	; (80223b8 <malloc+0xc>)
 80223ae:	4601      	mov	r1, r0
 80223b0:	6818      	ldr	r0, [r3, #0]
 80223b2:	f000 bb27 	b.w	8022a04 <_malloc_r>
 80223b6:	bf00      	nop
 80223b8:	200005e4 	.word	0x200005e4

080223bc <free>:
 80223bc:	4b02      	ldr	r3, [pc, #8]	; (80223c8 <free+0xc>)
 80223be:	4601      	mov	r1, r0
 80223c0:	6818      	ldr	r0, [r3, #0]
 80223c2:	f000 bacf 	b.w	8022964 <_free_r>
 80223c6:	bf00      	nop
 80223c8:	200005e4 	.word	0x200005e4

080223cc <memcmp>:
 80223cc:	b530      	push	{r4, r5, lr}
 80223ce:	3901      	subs	r1, #1
 80223d0:	2400      	movs	r4, #0
 80223d2:	42a2      	cmp	r2, r4
 80223d4:	d101      	bne.n	80223da <memcmp+0xe>
 80223d6:	2000      	movs	r0, #0
 80223d8:	e005      	b.n	80223e6 <memcmp+0x1a>
 80223da:	5d03      	ldrb	r3, [r0, r4]
 80223dc:	3401      	adds	r4, #1
 80223de:	5d0d      	ldrb	r5, [r1, r4]
 80223e0:	42ab      	cmp	r3, r5
 80223e2:	d0f6      	beq.n	80223d2 <memcmp+0x6>
 80223e4:	1b58      	subs	r0, r3, r5
 80223e6:	bd30      	pop	{r4, r5, pc}

080223e8 <memcpy>:
 80223e8:	440a      	add	r2, r1
 80223ea:	4291      	cmp	r1, r2
 80223ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80223f0:	d100      	bne.n	80223f4 <memcpy+0xc>
 80223f2:	4770      	bx	lr
 80223f4:	b510      	push	{r4, lr}
 80223f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80223fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80223fe:	4291      	cmp	r1, r2
 8022400:	d1f9      	bne.n	80223f6 <memcpy+0xe>
 8022402:	bd10      	pop	{r4, pc}

08022404 <memmove>:
 8022404:	4288      	cmp	r0, r1
 8022406:	b510      	push	{r4, lr}
 8022408:	eb01 0402 	add.w	r4, r1, r2
 802240c:	d902      	bls.n	8022414 <memmove+0x10>
 802240e:	4284      	cmp	r4, r0
 8022410:	4623      	mov	r3, r4
 8022412:	d807      	bhi.n	8022424 <memmove+0x20>
 8022414:	1e43      	subs	r3, r0, #1
 8022416:	42a1      	cmp	r1, r4
 8022418:	d008      	beq.n	802242c <memmove+0x28>
 802241a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802241e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022422:	e7f8      	b.n	8022416 <memmove+0x12>
 8022424:	4402      	add	r2, r0
 8022426:	4601      	mov	r1, r0
 8022428:	428a      	cmp	r2, r1
 802242a:	d100      	bne.n	802242e <memmove+0x2a>
 802242c:	bd10      	pop	{r4, pc}
 802242e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022436:	e7f7      	b.n	8022428 <memmove+0x24>

08022438 <memset>:
 8022438:	4402      	add	r2, r0
 802243a:	4603      	mov	r3, r0
 802243c:	4293      	cmp	r3, r2
 802243e:	d100      	bne.n	8022442 <memset+0xa>
 8022440:	4770      	bx	lr
 8022442:	f803 1b01 	strb.w	r1, [r3], #1
 8022446:	e7f9      	b.n	802243c <memset+0x4>

08022448 <validate_structure>:
 8022448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802244a:	6801      	ldr	r1, [r0, #0]
 802244c:	293b      	cmp	r1, #59	; 0x3b
 802244e:	4604      	mov	r4, r0
 8022450:	d911      	bls.n	8022476 <validate_structure+0x2e>
 8022452:	223c      	movs	r2, #60	; 0x3c
 8022454:	4668      	mov	r0, sp
 8022456:	f002 fd81 	bl	8024f5c <div>
 802245a:	9a01      	ldr	r2, [sp, #4]
 802245c:	6863      	ldr	r3, [r4, #4]
 802245e:	9900      	ldr	r1, [sp, #0]
 8022460:	2a00      	cmp	r2, #0
 8022462:	440b      	add	r3, r1
 8022464:	6063      	str	r3, [r4, #4]
 8022466:	bfbb      	ittet	lt
 8022468:	323c      	addlt	r2, #60	; 0x3c
 802246a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802246e:	6022      	strge	r2, [r4, #0]
 8022470:	6022      	strlt	r2, [r4, #0]
 8022472:	bfb8      	it	lt
 8022474:	6063      	strlt	r3, [r4, #4]
 8022476:	6861      	ldr	r1, [r4, #4]
 8022478:	293b      	cmp	r1, #59	; 0x3b
 802247a:	d911      	bls.n	80224a0 <validate_structure+0x58>
 802247c:	223c      	movs	r2, #60	; 0x3c
 802247e:	4668      	mov	r0, sp
 8022480:	f002 fd6c 	bl	8024f5c <div>
 8022484:	9a01      	ldr	r2, [sp, #4]
 8022486:	68a3      	ldr	r3, [r4, #8]
 8022488:	9900      	ldr	r1, [sp, #0]
 802248a:	2a00      	cmp	r2, #0
 802248c:	440b      	add	r3, r1
 802248e:	60a3      	str	r3, [r4, #8]
 8022490:	bfbb      	ittet	lt
 8022492:	323c      	addlt	r2, #60	; 0x3c
 8022494:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022498:	6062      	strge	r2, [r4, #4]
 802249a:	6062      	strlt	r2, [r4, #4]
 802249c:	bfb8      	it	lt
 802249e:	60a3      	strlt	r3, [r4, #8]
 80224a0:	68a1      	ldr	r1, [r4, #8]
 80224a2:	2917      	cmp	r1, #23
 80224a4:	d911      	bls.n	80224ca <validate_structure+0x82>
 80224a6:	2218      	movs	r2, #24
 80224a8:	4668      	mov	r0, sp
 80224aa:	f002 fd57 	bl	8024f5c <div>
 80224ae:	9a01      	ldr	r2, [sp, #4]
 80224b0:	68e3      	ldr	r3, [r4, #12]
 80224b2:	9900      	ldr	r1, [sp, #0]
 80224b4:	2a00      	cmp	r2, #0
 80224b6:	440b      	add	r3, r1
 80224b8:	60e3      	str	r3, [r4, #12]
 80224ba:	bfbb      	ittet	lt
 80224bc:	3218      	addlt	r2, #24
 80224be:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80224c2:	60a2      	strge	r2, [r4, #8]
 80224c4:	60a2      	strlt	r2, [r4, #8]
 80224c6:	bfb8      	it	lt
 80224c8:	60e3      	strlt	r3, [r4, #12]
 80224ca:	6921      	ldr	r1, [r4, #16]
 80224cc:	290b      	cmp	r1, #11
 80224ce:	d911      	bls.n	80224f4 <validate_structure+0xac>
 80224d0:	220c      	movs	r2, #12
 80224d2:	4668      	mov	r0, sp
 80224d4:	f002 fd42 	bl	8024f5c <div>
 80224d8:	9a01      	ldr	r2, [sp, #4]
 80224da:	6963      	ldr	r3, [r4, #20]
 80224dc:	9900      	ldr	r1, [sp, #0]
 80224de:	2a00      	cmp	r2, #0
 80224e0:	440b      	add	r3, r1
 80224e2:	6163      	str	r3, [r4, #20]
 80224e4:	bfbb      	ittet	lt
 80224e6:	320c      	addlt	r2, #12
 80224e8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80224ec:	6122      	strge	r2, [r4, #16]
 80224ee:	6122      	strlt	r2, [r4, #16]
 80224f0:	bfb8      	it	lt
 80224f2:	6163      	strlt	r3, [r4, #20]
 80224f4:	6963      	ldr	r3, [r4, #20]
 80224f6:	0799      	lsls	r1, r3, #30
 80224f8:	d120      	bne.n	802253c <validate_structure+0xf4>
 80224fa:	2164      	movs	r1, #100	; 0x64
 80224fc:	fb93 f2f1 	sdiv	r2, r3, r1
 8022500:	fb01 3212 	mls	r2, r1, r2, r3
 8022504:	b9e2      	cbnz	r2, 8022540 <validate_structure+0xf8>
 8022506:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 802250a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802250e:	fb93 f2f1 	sdiv	r2, r3, r1
 8022512:	fb01 3312 	mls	r3, r1, r2, r3
 8022516:	2b00      	cmp	r3, #0
 8022518:	bf14      	ite	ne
 802251a:	231c      	movne	r3, #28
 802251c:	231d      	moveq	r3, #29
 802251e:	68e2      	ldr	r2, [r4, #12]
 8022520:	2a00      	cmp	r2, #0
 8022522:	dc0f      	bgt.n	8022544 <validate_structure+0xfc>
 8022524:	4f33      	ldr	r7, [pc, #204]	; (80225f4 <validate_structure+0x1ac>)
 8022526:	260b      	movs	r6, #11
 8022528:	2064      	movs	r0, #100	; 0x64
 802252a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802252e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8022532:	f1bc 0f00 	cmp.w	ip, #0
 8022536:	dd31      	ble.n	802259c <validate_structure+0x154>
 8022538:	b003      	add	sp, #12
 802253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802253c:	231c      	movs	r3, #28
 802253e:	e7ee      	b.n	802251e <validate_structure+0xd6>
 8022540:	231d      	movs	r3, #29
 8022542:	e7ec      	b.n	802251e <validate_structure+0xd6>
 8022544:	4f2b      	ldr	r7, [pc, #172]	; (80225f4 <validate_structure+0x1ac>)
 8022546:	f04f 0c00 	mov.w	ip, #0
 802254a:	2564      	movs	r5, #100	; 0x64
 802254c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022550:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8022554:	2a01      	cmp	r2, #1
 8022556:	bf14      	ite	ne
 8022558:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 802255c:	4618      	moveq	r0, r3
 802255e:	4281      	cmp	r1, r0
 8022560:	ddea      	ble.n	8022538 <validate_structure+0xf0>
 8022562:	3201      	adds	r2, #1
 8022564:	1a09      	subs	r1, r1, r0
 8022566:	2a0c      	cmp	r2, #12
 8022568:	60e1      	str	r1, [r4, #12]
 802256a:	6122      	str	r2, [r4, #16]
 802256c:	d1f0      	bne.n	8022550 <validate_structure+0x108>
 802256e:	6963      	ldr	r3, [r4, #20]
 8022570:	1c5a      	adds	r2, r3, #1
 8022572:	0791      	lsls	r1, r2, #30
 8022574:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8022578:	d137      	bne.n	80225ea <validate_structure+0x1a2>
 802257a:	fb92 f1f5 	sdiv	r1, r2, r5
 802257e:	fb05 2211 	mls	r2, r5, r1, r2
 8022582:	2a00      	cmp	r2, #0
 8022584:	d133      	bne.n	80225ee <validate_structure+0x1a6>
 8022586:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802258a:	fb93 f2f6 	sdiv	r2, r3, r6
 802258e:	fb06 3312 	mls	r3, r6, r2, r3
 8022592:	2b00      	cmp	r3, #0
 8022594:	bf14      	ite	ne
 8022596:	231c      	movne	r3, #28
 8022598:	231d      	moveq	r3, #29
 802259a:	e7d9      	b.n	8022550 <validate_structure+0x108>
 802259c:	6921      	ldr	r1, [r4, #16]
 802259e:	3901      	subs	r1, #1
 80225a0:	6121      	str	r1, [r4, #16]
 80225a2:	3101      	adds	r1, #1
 80225a4:	d114      	bne.n	80225d0 <validate_structure+0x188>
 80225a6:	6963      	ldr	r3, [r4, #20]
 80225a8:	1e59      	subs	r1, r3, #1
 80225aa:	078a      	lsls	r2, r1, #30
 80225ac:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80225b0:	d117      	bne.n	80225e2 <validate_structure+0x19a>
 80225b2:	fb91 f2f0 	sdiv	r2, r1, r0
 80225b6:	fb00 1112 	mls	r1, r0, r2, r1
 80225ba:	b9a1      	cbnz	r1, 80225e6 <validate_structure+0x19e>
 80225bc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80225c0:	fb93 f2f5 	sdiv	r2, r3, r5
 80225c4:	fb05 3312 	mls	r3, r5, r2, r3
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	bf14      	ite	ne
 80225cc:	231c      	movne	r3, #28
 80225ce:	231d      	moveq	r3, #29
 80225d0:	6922      	ldr	r2, [r4, #16]
 80225d2:	2a01      	cmp	r2, #1
 80225d4:	bf14      	ite	ne
 80225d6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80225da:	461a      	moveq	r2, r3
 80225dc:	4462      	add	r2, ip
 80225de:	60e2      	str	r2, [r4, #12]
 80225e0:	e7a5      	b.n	802252e <validate_structure+0xe6>
 80225e2:	231c      	movs	r3, #28
 80225e4:	e7f4      	b.n	80225d0 <validate_structure+0x188>
 80225e6:	231d      	movs	r3, #29
 80225e8:	e7f2      	b.n	80225d0 <validate_structure+0x188>
 80225ea:	231c      	movs	r3, #28
 80225ec:	e7b0      	b.n	8022550 <validate_structure+0x108>
 80225ee:	231d      	movs	r3, #29
 80225f0:	e7ae      	b.n	8022550 <validate_structure+0x108>
 80225f2:	bf00      	nop
 80225f4:	08033928 	.word	0x08033928

080225f8 <mktime>:
 80225f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225fc:	b08b      	sub	sp, #44	; 0x2c
 80225fe:	4605      	mov	r5, r0
 8022600:	f004 f912 	bl	8026828 <__gettzinfo>
 8022604:	4607      	mov	r7, r0
 8022606:	4628      	mov	r0, r5
 8022608:	f7ff ff1e 	bl	8022448 <validate_structure>
 802260c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8022610:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8022614:	68a8      	ldr	r0, [r5, #8]
 8022616:	696e      	ldr	r6, [r5, #20]
 8022618:	fb0a 2303 	mla	r3, sl, r3, r2
 802261c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8022620:	fb0a 3a00 	mla	sl, sl, r0, r3
 8022624:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8022628:	4ac3      	ldr	r2, [pc, #780]	; (8022938 <mktime+0x340>)
 802262a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802262e:	3c01      	subs	r4, #1
 8022630:	2b01      	cmp	r3, #1
 8022632:	4414      	add	r4, r2
 8022634:	dd11      	ble.n	802265a <mktime+0x62>
 8022636:	07b1      	lsls	r1, r6, #30
 8022638:	d10f      	bne.n	802265a <mktime+0x62>
 802263a:	2264      	movs	r2, #100	; 0x64
 802263c:	fb96 f3f2 	sdiv	r3, r6, r2
 8022640:	fb02 6313 	mls	r3, r2, r3, r6
 8022644:	b943      	cbnz	r3, 8022658 <mktime+0x60>
 8022646:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 802264a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802264e:	fb91 f3f2 	sdiv	r3, r1, r2
 8022652:	fb02 1313 	mls	r3, r2, r3, r1
 8022656:	b903      	cbnz	r3, 802265a <mktime+0x62>
 8022658:	3401      	adds	r4, #1
 802265a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802265e:	3310      	adds	r3, #16
 8022660:	f644 6220 	movw	r2, #20000	; 0x4e20
 8022664:	4293      	cmp	r3, r2
 8022666:	61ec      	str	r4, [r5, #28]
 8022668:	f200 8161 	bhi.w	802292e <mktime+0x336>
 802266c:	2e46      	cmp	r6, #70	; 0x46
 802266e:	dd77      	ble.n	8022760 <mktime+0x168>
 8022670:	2346      	movs	r3, #70	; 0x46
 8022672:	f240 1e6d 	movw	lr, #365	; 0x16d
 8022676:	2164      	movs	r1, #100	; 0x64
 8022678:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802267c:	079a      	lsls	r2, r3, #30
 802267e:	d169      	bne.n	8022754 <mktime+0x15c>
 8022680:	fb93 f2f1 	sdiv	r2, r3, r1
 8022684:	fb01 3212 	mls	r2, r1, r2, r3
 8022688:	2a00      	cmp	r2, #0
 802268a:	d166      	bne.n	802275a <mktime+0x162>
 802268c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022690:	fb9c f2f0 	sdiv	r2, ip, r0
 8022694:	fb00 c212 	mls	r2, r0, r2, ip
 8022698:	2a00      	cmp	r2, #0
 802269a:	bf14      	ite	ne
 802269c:	4672      	movne	r2, lr
 802269e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80226a2:	3301      	adds	r3, #1
 80226a4:	429e      	cmp	r6, r3
 80226a6:	4414      	add	r4, r2
 80226a8:	d1e8      	bne.n	802267c <mktime+0x84>
 80226aa:	4ba4      	ldr	r3, [pc, #656]	; (802293c <mktime+0x344>)
 80226ac:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80226b0:	fbc3 ab04 	smlal	sl, fp, r3, r4
 80226b4:	f002 f98a 	bl	80249cc <__tz_lock>
 80226b8:	f002 f994 	bl	80249e4 <_tzset_unlocked>
 80226bc:	4ba0      	ldr	r3, [pc, #640]	; (8022940 <mktime+0x348>)
 80226be:	f8d3 9000 	ldr.w	r9, [r3]
 80226c2:	f1b9 0f00 	cmp.w	r9, #0
 80226c6:	d03f      	beq.n	8022748 <mktime+0x150>
 80226c8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80226cc:	6968      	ldr	r0, [r5, #20]
 80226ce:	687b      	ldr	r3, [r7, #4]
 80226d0:	f1b9 0f01 	cmp.w	r9, #1
 80226d4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80226d8:	46c8      	mov	r8, r9
 80226da:	bfa8      	it	ge
 80226dc:	f04f 0801 	movge.w	r8, #1
 80226e0:	4283      	cmp	r3, r0
 80226e2:	d17f      	bne.n	80227e4 <mktime+0x1ec>
 80226e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80226e6:	4619      	mov	r1, r3
 80226e8:	17da      	asrs	r2, r3, #31
 80226ea:	e9cd 1200 	strd	r1, r2, [sp]
 80226ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80226f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80226f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80226fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80226fc:	1a80      	subs	r0, r0, r2
 80226fe:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8022702:	4582      	cmp	sl, r0
 8022704:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022708:	eb7b 0101 	sbcs.w	r1, fp, r1
 802270c:	da71      	bge.n	80227f2 <mktime+0x1fa>
 802270e:	9800      	ldr	r0, [sp, #0]
 8022710:	6a39      	ldr	r1, [r7, #32]
 8022712:	1a09      	subs	r1, r1, r0
 8022714:	9104      	str	r1, [sp, #16]
 8022716:	9801      	ldr	r0, [sp, #4]
 8022718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802271a:	eb61 0100 	sbc.w	r1, r1, r0
 802271e:	9105      	str	r1, [sp, #20]
 8022720:	6839      	ldr	r1, [r7, #0]
 8022722:	2900      	cmp	r1, #0
 8022724:	d075      	beq.n	8022812 <mktime+0x21a>
 8022726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802272a:	4582      	cmp	sl, r0
 802272c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8022730:	db05      	blt.n	802273e <mktime+0x146>
 8022732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022736:	4582      	cmp	sl, r0
 8022738:	eb7b 0101 	sbcs.w	r1, fp, r1
 802273c:	db6f      	blt.n	802281e <mktime+0x226>
 802273e:	f1b9 0f00 	cmp.w	r9, #0
 8022742:	f04f 0900 	mov.w	r9, #0
 8022746:	da6f      	bge.n	8022828 <mktime+0x230>
 8022748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802274a:	eb1a 0a03 	adds.w	sl, sl, r3
 802274e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8022752:	e0ae      	b.n	80228b2 <mktime+0x2ba>
 8022754:	f240 126d 	movw	r2, #365	; 0x16d
 8022758:	e7a3      	b.n	80226a2 <mktime+0xaa>
 802275a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802275e:	e7a0      	b.n	80226a2 <mktime+0xaa>
 8022760:	d0a3      	beq.n	80226aa <mktime+0xb2>
 8022762:	2345      	movs	r3, #69	; 0x45
 8022764:	f240 1e6d 	movw	lr, #365	; 0x16d
 8022768:	2164      	movs	r1, #100	; 0x64
 802276a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802276e:	e012      	b.n	8022796 <mktime+0x19e>
 8022770:	bb62      	cbnz	r2, 80227cc <mktime+0x1d4>
 8022772:	fb93 f2f1 	sdiv	r2, r3, r1
 8022776:	fb01 3212 	mls	r2, r1, r2, r3
 802277a:	bb52      	cbnz	r2, 80227d2 <mktime+0x1da>
 802277c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022780:	fb9c f2f0 	sdiv	r2, ip, r0
 8022784:	fb00 c212 	mls	r2, r0, r2, ip
 8022788:	2a00      	cmp	r2, #0
 802278a:	bf14      	ite	ne
 802278c:	4672      	movne	r2, lr
 802278e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8022792:	1aa4      	subs	r4, r4, r2
 8022794:	3b01      	subs	r3, #1
 8022796:	429e      	cmp	r6, r3
 8022798:	f003 0203 	and.w	r2, r3, #3
 802279c:	dbe8      	blt.n	8022770 <mktime+0x178>
 802279e:	b9da      	cbnz	r2, 80227d8 <mktime+0x1e0>
 80227a0:	2264      	movs	r2, #100	; 0x64
 80227a2:	fb96 f3f2 	sdiv	r3, r6, r2
 80227a6:	fb02 6313 	mls	r3, r2, r3, r6
 80227aa:	b9c3      	cbnz	r3, 80227de <mktime+0x1e6>
 80227ac:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80227b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80227b4:	fb91 f3f2 	sdiv	r3, r1, r2
 80227b8:	fb02 1313 	mls	r3, r2, r3, r1
 80227bc:	2b00      	cmp	r3, #0
 80227be:	f240 136d 	movw	r3, #365	; 0x16d
 80227c2:	bf08      	it	eq
 80227c4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80227c8:	1ae4      	subs	r4, r4, r3
 80227ca:	e76e      	b.n	80226aa <mktime+0xb2>
 80227cc:	f240 126d 	movw	r2, #365	; 0x16d
 80227d0:	e7df      	b.n	8022792 <mktime+0x19a>
 80227d2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80227d6:	e7dc      	b.n	8022792 <mktime+0x19a>
 80227d8:	f240 136d 	movw	r3, #365	; 0x16d
 80227dc:	e7f4      	b.n	80227c8 <mktime+0x1d0>
 80227de:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80227e2:	e7f1      	b.n	80227c8 <mktime+0x1d0>
 80227e4:	f002 f84a 	bl	802487c <__tzcalc_limits>
 80227e8:	2800      	cmp	r0, #0
 80227ea:	f47f af7b 	bne.w	80226e4 <mktime+0xec>
 80227ee:	46c1      	mov	r9, r8
 80227f0:	e054      	b.n	802289c <mktime+0x2a4>
 80227f2:	9800      	ldr	r0, [sp, #0]
 80227f4:	9902      	ldr	r1, [sp, #8]
 80227f6:	1a09      	subs	r1, r1, r0
 80227f8:	9108      	str	r1, [sp, #32]
 80227fa:	9801      	ldr	r0, [sp, #4]
 80227fc:	9903      	ldr	r1, [sp, #12]
 80227fe:	eb61 0100 	sbc.w	r1, r1, r0
 8022802:	9109      	str	r1, [sp, #36]	; 0x24
 8022804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8022808:	4582      	cmp	sl, r0
 802280a:	eb7b 0101 	sbcs.w	r1, fp, r1
 802280e:	dbee      	blt.n	80227ee <mktime+0x1f6>
 8022810:	e77d      	b.n	802270e <mktime+0x116>
 8022812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022816:	4582      	cmp	sl, r0
 8022818:	eb7b 0101 	sbcs.w	r1, fp, r1
 802281c:	db89      	blt.n	8022732 <mktime+0x13a>
 802281e:	f1b9 0f00 	cmp.w	r9, #0
 8022822:	db3f      	blt.n	80228a4 <mktime+0x2ac>
 8022824:	f04f 0901 	mov.w	r9, #1
 8022828:	ea88 0809 	eor.w	r8, r8, r9
 802282c:	f1b8 0f01 	cmp.w	r8, #1
 8022830:	d134      	bne.n	802289c <mktime+0x2a4>
 8022832:	f1b9 0f00 	cmp.w	r9, #0
 8022836:	d04f      	beq.n	80228d8 <mktime+0x2e0>
 8022838:	1ad3      	subs	r3, r2, r3
 802283a:	682a      	ldr	r2, [r5, #0]
 802283c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8022840:	441a      	add	r2, r3
 8022842:	eb1a 0a03 	adds.w	sl, sl, r3
 8022846:	602a      	str	r2, [r5, #0]
 8022848:	4628      	mov	r0, r5
 802284a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 802284e:	f7ff fdfb 	bl	8022448 <validate_structure>
 8022852:	68ea      	ldr	r2, [r5, #12]
 8022854:	ebb2 0208 	subs.w	r2, r2, r8
 8022858:	d020      	beq.n	802289c <mktime+0x2a4>
 802285a:	2a01      	cmp	r2, #1
 802285c:	dc3e      	bgt.n	80228dc <mktime+0x2e4>
 802285e:	1c90      	adds	r0, r2, #2
 8022860:	bfd8      	it	le
 8022862:	2201      	movle	r2, #1
 8022864:	69eb      	ldr	r3, [r5, #28]
 8022866:	18d3      	adds	r3, r2, r3
 8022868:	4414      	add	r4, r2
 802286a:	d540      	bpl.n	80228ee <mktime+0x2f6>
 802286c:	1e72      	subs	r2, r6, #1
 802286e:	0791      	lsls	r1, r2, #30
 8022870:	d137      	bne.n	80228e2 <mktime+0x2ea>
 8022872:	2164      	movs	r1, #100	; 0x64
 8022874:	fb92 f3f1 	sdiv	r3, r2, r1
 8022878:	fb01 2313 	mls	r3, r1, r3, r2
 802287c:	bba3      	cbnz	r3, 80228e8 <mktime+0x2f0>
 802287e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8022882:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022886:	fb96 f3f2 	sdiv	r3, r6, r2
 802288a:	fb02 6613 	mls	r6, r2, r3, r6
 802288e:	2e00      	cmp	r6, #0
 8022890:	f240 136d 	movw	r3, #365	; 0x16d
 8022894:	bf18      	it	ne
 8022896:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 802289a:	61eb      	str	r3, [r5, #28]
 802289c:	f1b9 0f01 	cmp.w	r9, #1
 80228a0:	f47f af52 	bne.w	8022748 <mktime+0x150>
 80228a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80228a6:	eb1a 0a03 	adds.w	sl, sl, r3
 80228aa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80228ae:	f04f 0901 	mov.w	r9, #1
 80228b2:	f002 f891 	bl	80249d8 <__tz_unlock>
 80228b6:	3404      	adds	r4, #4
 80228b8:	2307      	movs	r3, #7
 80228ba:	fb94 f3f3 	sdiv	r3, r4, r3
 80228be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80228c2:	1ae4      	subs	r4, r4, r3
 80228c4:	bf48      	it	mi
 80228c6:	3407      	addmi	r4, #7
 80228c8:	f8c5 9020 	str.w	r9, [r5, #32]
 80228cc:	61ac      	str	r4, [r5, #24]
 80228ce:	4650      	mov	r0, sl
 80228d0:	4659      	mov	r1, fp
 80228d2:	b00b      	add	sp, #44	; 0x2c
 80228d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228d8:	1a9b      	subs	r3, r3, r2
 80228da:	e7ae      	b.n	802283a <mktime+0x242>
 80228dc:	f04f 32ff 	mov.w	r2, #4294967295
 80228e0:	e7c0      	b.n	8022864 <mktime+0x26c>
 80228e2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80228e6:	e7d8      	b.n	802289a <mktime+0x2a2>
 80228e8:	f240 136d 	movw	r3, #365	; 0x16d
 80228ec:	e7d5      	b.n	802289a <mktime+0x2a2>
 80228ee:	07b2      	lsls	r2, r6, #30
 80228f0:	d117      	bne.n	8022922 <mktime+0x32a>
 80228f2:	2164      	movs	r1, #100	; 0x64
 80228f4:	fb96 f2f1 	sdiv	r2, r6, r1
 80228f8:	fb01 6212 	mls	r2, r1, r2, r6
 80228fc:	b9a2      	cbnz	r2, 8022928 <mktime+0x330>
 80228fe:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8022902:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022906:	fb96 f2f1 	sdiv	r2, r6, r1
 802290a:	fb01 6612 	mls	r6, r1, r2, r6
 802290e:	2e00      	cmp	r6, #0
 8022910:	f240 126d 	movw	r2, #365	; 0x16d
 8022914:	bf08      	it	eq
 8022916:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802291a:	4293      	cmp	r3, r2
 802291c:	bfa8      	it	ge
 802291e:	1a9b      	subge	r3, r3, r2
 8022920:	e7bb      	b.n	802289a <mktime+0x2a2>
 8022922:	f240 126d 	movw	r2, #365	; 0x16d
 8022926:	e7f8      	b.n	802291a <mktime+0x322>
 8022928:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802292c:	e7f5      	b.n	802291a <mktime+0x322>
 802292e:	f04f 3aff 	mov.w	sl, #4294967295
 8022932:	f04f 3bff 	mov.w	fp, #4294967295
 8022936:	e7ca      	b.n	80228ce <mktime+0x2d6>
 8022938:	08033958 	.word	0x08033958
 802293c:	00015180 	.word	0x00015180
 8022940:	20001168 	.word	0x20001168

08022944 <_calloc_r>:
 8022944:	b513      	push	{r0, r1, r4, lr}
 8022946:	434a      	muls	r2, r1
 8022948:	4611      	mov	r1, r2
 802294a:	9201      	str	r2, [sp, #4]
 802294c:	f000 f85a 	bl	8022a04 <_malloc_r>
 8022950:	4604      	mov	r4, r0
 8022952:	b118      	cbz	r0, 802295c <_calloc_r+0x18>
 8022954:	9a01      	ldr	r2, [sp, #4]
 8022956:	2100      	movs	r1, #0
 8022958:	f7ff fd6e 	bl	8022438 <memset>
 802295c:	4620      	mov	r0, r4
 802295e:	b002      	add	sp, #8
 8022960:	bd10      	pop	{r4, pc}
	...

08022964 <_free_r>:
 8022964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022966:	2900      	cmp	r1, #0
 8022968:	d048      	beq.n	80229fc <_free_r+0x98>
 802296a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802296e:	9001      	str	r0, [sp, #4]
 8022970:	2b00      	cmp	r3, #0
 8022972:	f1a1 0404 	sub.w	r4, r1, #4
 8022976:	bfb8      	it	lt
 8022978:	18e4      	addlt	r4, r4, r3
 802297a:	f003 ffe7 	bl	802694c <__malloc_lock>
 802297e:	4a20      	ldr	r2, [pc, #128]	; (8022a00 <_free_r+0x9c>)
 8022980:	9801      	ldr	r0, [sp, #4]
 8022982:	6813      	ldr	r3, [r2, #0]
 8022984:	4615      	mov	r5, r2
 8022986:	b933      	cbnz	r3, 8022996 <_free_r+0x32>
 8022988:	6063      	str	r3, [r4, #4]
 802298a:	6014      	str	r4, [r2, #0]
 802298c:	b003      	add	sp, #12
 802298e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022992:	f003 bfe1 	b.w	8026958 <__malloc_unlock>
 8022996:	42a3      	cmp	r3, r4
 8022998:	d90b      	bls.n	80229b2 <_free_r+0x4e>
 802299a:	6821      	ldr	r1, [r4, #0]
 802299c:	1862      	adds	r2, r4, r1
 802299e:	4293      	cmp	r3, r2
 80229a0:	bf04      	itt	eq
 80229a2:	681a      	ldreq	r2, [r3, #0]
 80229a4:	685b      	ldreq	r3, [r3, #4]
 80229a6:	6063      	str	r3, [r4, #4]
 80229a8:	bf04      	itt	eq
 80229aa:	1852      	addeq	r2, r2, r1
 80229ac:	6022      	streq	r2, [r4, #0]
 80229ae:	602c      	str	r4, [r5, #0]
 80229b0:	e7ec      	b.n	802298c <_free_r+0x28>
 80229b2:	461a      	mov	r2, r3
 80229b4:	685b      	ldr	r3, [r3, #4]
 80229b6:	b10b      	cbz	r3, 80229bc <_free_r+0x58>
 80229b8:	42a3      	cmp	r3, r4
 80229ba:	d9fa      	bls.n	80229b2 <_free_r+0x4e>
 80229bc:	6811      	ldr	r1, [r2, #0]
 80229be:	1855      	adds	r5, r2, r1
 80229c0:	42a5      	cmp	r5, r4
 80229c2:	d10b      	bne.n	80229dc <_free_r+0x78>
 80229c4:	6824      	ldr	r4, [r4, #0]
 80229c6:	4421      	add	r1, r4
 80229c8:	1854      	adds	r4, r2, r1
 80229ca:	42a3      	cmp	r3, r4
 80229cc:	6011      	str	r1, [r2, #0]
 80229ce:	d1dd      	bne.n	802298c <_free_r+0x28>
 80229d0:	681c      	ldr	r4, [r3, #0]
 80229d2:	685b      	ldr	r3, [r3, #4]
 80229d4:	6053      	str	r3, [r2, #4]
 80229d6:	4421      	add	r1, r4
 80229d8:	6011      	str	r1, [r2, #0]
 80229da:	e7d7      	b.n	802298c <_free_r+0x28>
 80229dc:	d902      	bls.n	80229e4 <_free_r+0x80>
 80229de:	230c      	movs	r3, #12
 80229e0:	6003      	str	r3, [r0, #0]
 80229e2:	e7d3      	b.n	802298c <_free_r+0x28>
 80229e4:	6825      	ldr	r5, [r4, #0]
 80229e6:	1961      	adds	r1, r4, r5
 80229e8:	428b      	cmp	r3, r1
 80229ea:	bf04      	itt	eq
 80229ec:	6819      	ldreq	r1, [r3, #0]
 80229ee:	685b      	ldreq	r3, [r3, #4]
 80229f0:	6063      	str	r3, [r4, #4]
 80229f2:	bf04      	itt	eq
 80229f4:	1949      	addeq	r1, r1, r5
 80229f6:	6021      	streq	r1, [r4, #0]
 80229f8:	6054      	str	r4, [r2, #4]
 80229fa:	e7c7      	b.n	802298c <_free_r+0x28>
 80229fc:	b003      	add	sp, #12
 80229fe:	bd30      	pop	{r4, r5, pc}
 8022a00:	20001144 	.word	0x20001144

08022a04 <_malloc_r>:
 8022a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022a06:	1ccd      	adds	r5, r1, #3
 8022a08:	f025 0503 	bic.w	r5, r5, #3
 8022a0c:	3508      	adds	r5, #8
 8022a0e:	2d0c      	cmp	r5, #12
 8022a10:	bf38      	it	cc
 8022a12:	250c      	movcc	r5, #12
 8022a14:	2d00      	cmp	r5, #0
 8022a16:	4606      	mov	r6, r0
 8022a18:	db01      	blt.n	8022a1e <_malloc_r+0x1a>
 8022a1a:	42a9      	cmp	r1, r5
 8022a1c:	d903      	bls.n	8022a26 <_malloc_r+0x22>
 8022a1e:	230c      	movs	r3, #12
 8022a20:	6033      	str	r3, [r6, #0]
 8022a22:	2000      	movs	r0, #0
 8022a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022a26:	f003 ff91 	bl	802694c <__malloc_lock>
 8022a2a:	4921      	ldr	r1, [pc, #132]	; (8022ab0 <_malloc_r+0xac>)
 8022a2c:	680a      	ldr	r2, [r1, #0]
 8022a2e:	4614      	mov	r4, r2
 8022a30:	b99c      	cbnz	r4, 8022a5a <_malloc_r+0x56>
 8022a32:	4f20      	ldr	r7, [pc, #128]	; (8022ab4 <_malloc_r+0xb0>)
 8022a34:	683b      	ldr	r3, [r7, #0]
 8022a36:	b923      	cbnz	r3, 8022a42 <_malloc_r+0x3e>
 8022a38:	4621      	mov	r1, r4
 8022a3a:	4630      	mov	r0, r6
 8022a3c:	f000 feda 	bl	80237f4 <_sbrk_r>
 8022a40:	6038      	str	r0, [r7, #0]
 8022a42:	4629      	mov	r1, r5
 8022a44:	4630      	mov	r0, r6
 8022a46:	f000 fed5 	bl	80237f4 <_sbrk_r>
 8022a4a:	1c43      	adds	r3, r0, #1
 8022a4c:	d123      	bne.n	8022a96 <_malloc_r+0x92>
 8022a4e:	230c      	movs	r3, #12
 8022a50:	6033      	str	r3, [r6, #0]
 8022a52:	4630      	mov	r0, r6
 8022a54:	f003 ff80 	bl	8026958 <__malloc_unlock>
 8022a58:	e7e3      	b.n	8022a22 <_malloc_r+0x1e>
 8022a5a:	6823      	ldr	r3, [r4, #0]
 8022a5c:	1b5b      	subs	r3, r3, r5
 8022a5e:	d417      	bmi.n	8022a90 <_malloc_r+0x8c>
 8022a60:	2b0b      	cmp	r3, #11
 8022a62:	d903      	bls.n	8022a6c <_malloc_r+0x68>
 8022a64:	6023      	str	r3, [r4, #0]
 8022a66:	441c      	add	r4, r3
 8022a68:	6025      	str	r5, [r4, #0]
 8022a6a:	e004      	b.n	8022a76 <_malloc_r+0x72>
 8022a6c:	6863      	ldr	r3, [r4, #4]
 8022a6e:	42a2      	cmp	r2, r4
 8022a70:	bf0c      	ite	eq
 8022a72:	600b      	streq	r3, [r1, #0]
 8022a74:	6053      	strne	r3, [r2, #4]
 8022a76:	4630      	mov	r0, r6
 8022a78:	f003 ff6e 	bl	8026958 <__malloc_unlock>
 8022a7c:	f104 000b 	add.w	r0, r4, #11
 8022a80:	1d23      	adds	r3, r4, #4
 8022a82:	f020 0007 	bic.w	r0, r0, #7
 8022a86:	1ac2      	subs	r2, r0, r3
 8022a88:	d0cc      	beq.n	8022a24 <_malloc_r+0x20>
 8022a8a:	1a1b      	subs	r3, r3, r0
 8022a8c:	50a3      	str	r3, [r4, r2]
 8022a8e:	e7c9      	b.n	8022a24 <_malloc_r+0x20>
 8022a90:	4622      	mov	r2, r4
 8022a92:	6864      	ldr	r4, [r4, #4]
 8022a94:	e7cc      	b.n	8022a30 <_malloc_r+0x2c>
 8022a96:	1cc4      	adds	r4, r0, #3
 8022a98:	f024 0403 	bic.w	r4, r4, #3
 8022a9c:	42a0      	cmp	r0, r4
 8022a9e:	d0e3      	beq.n	8022a68 <_malloc_r+0x64>
 8022aa0:	1a21      	subs	r1, r4, r0
 8022aa2:	4630      	mov	r0, r6
 8022aa4:	f000 fea6 	bl	80237f4 <_sbrk_r>
 8022aa8:	3001      	adds	r0, #1
 8022aaa:	d1dd      	bne.n	8022a68 <_malloc_r+0x64>
 8022aac:	e7cf      	b.n	8022a4e <_malloc_r+0x4a>
 8022aae:	bf00      	nop
 8022ab0:	20001144 	.word	0x20001144
 8022ab4:	20001148 	.word	0x20001148

08022ab8 <__sfputc_r>:
 8022ab8:	6893      	ldr	r3, [r2, #8]
 8022aba:	3b01      	subs	r3, #1
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	b410      	push	{r4}
 8022ac0:	6093      	str	r3, [r2, #8]
 8022ac2:	da08      	bge.n	8022ad6 <__sfputc_r+0x1e>
 8022ac4:	6994      	ldr	r4, [r2, #24]
 8022ac6:	42a3      	cmp	r3, r4
 8022ac8:	db01      	blt.n	8022ace <__sfputc_r+0x16>
 8022aca:	290a      	cmp	r1, #10
 8022acc:	d103      	bne.n	8022ad6 <__sfputc_r+0x1e>
 8022ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ad2:	f002 b943 	b.w	8024d5c <__swbuf_r>
 8022ad6:	6813      	ldr	r3, [r2, #0]
 8022ad8:	1c58      	adds	r0, r3, #1
 8022ada:	6010      	str	r0, [r2, #0]
 8022adc:	7019      	strb	r1, [r3, #0]
 8022ade:	4608      	mov	r0, r1
 8022ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022ae4:	4770      	bx	lr

08022ae6 <__sfputs_r>:
 8022ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ae8:	4606      	mov	r6, r0
 8022aea:	460f      	mov	r7, r1
 8022aec:	4614      	mov	r4, r2
 8022aee:	18d5      	adds	r5, r2, r3
 8022af0:	42ac      	cmp	r4, r5
 8022af2:	d101      	bne.n	8022af8 <__sfputs_r+0x12>
 8022af4:	2000      	movs	r0, #0
 8022af6:	e007      	b.n	8022b08 <__sfputs_r+0x22>
 8022af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022afc:	463a      	mov	r2, r7
 8022afe:	4630      	mov	r0, r6
 8022b00:	f7ff ffda 	bl	8022ab8 <__sfputc_r>
 8022b04:	1c43      	adds	r3, r0, #1
 8022b06:	d1f3      	bne.n	8022af0 <__sfputs_r+0xa>
 8022b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b0c <_vfiprintf_r>:
 8022b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b10:	460d      	mov	r5, r1
 8022b12:	b09d      	sub	sp, #116	; 0x74
 8022b14:	4614      	mov	r4, r2
 8022b16:	4698      	mov	r8, r3
 8022b18:	4606      	mov	r6, r0
 8022b1a:	b118      	cbz	r0, 8022b24 <_vfiprintf_r+0x18>
 8022b1c:	6983      	ldr	r3, [r0, #24]
 8022b1e:	b90b      	cbnz	r3, 8022b24 <_vfiprintf_r+0x18>
 8022b20:	f003 f9d6 	bl	8025ed0 <__sinit>
 8022b24:	4b89      	ldr	r3, [pc, #548]	; (8022d4c <_vfiprintf_r+0x240>)
 8022b26:	429d      	cmp	r5, r3
 8022b28:	d11b      	bne.n	8022b62 <_vfiprintf_r+0x56>
 8022b2a:	6875      	ldr	r5, [r6, #4]
 8022b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b2e:	07d9      	lsls	r1, r3, #31
 8022b30:	d405      	bmi.n	8022b3e <_vfiprintf_r+0x32>
 8022b32:	89ab      	ldrh	r3, [r5, #12]
 8022b34:	059a      	lsls	r2, r3, #22
 8022b36:	d402      	bmi.n	8022b3e <_vfiprintf_r+0x32>
 8022b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b3a:	f003 fe7b 	bl	8026834 <__retarget_lock_acquire_recursive>
 8022b3e:	89ab      	ldrh	r3, [r5, #12]
 8022b40:	071b      	lsls	r3, r3, #28
 8022b42:	d501      	bpl.n	8022b48 <_vfiprintf_r+0x3c>
 8022b44:	692b      	ldr	r3, [r5, #16]
 8022b46:	b9eb      	cbnz	r3, 8022b84 <_vfiprintf_r+0x78>
 8022b48:	4629      	mov	r1, r5
 8022b4a:	4630      	mov	r0, r6
 8022b4c:	f002 f96a 	bl	8024e24 <__swsetup_r>
 8022b50:	b1c0      	cbz	r0, 8022b84 <_vfiprintf_r+0x78>
 8022b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b54:	07dc      	lsls	r4, r3, #31
 8022b56:	d50e      	bpl.n	8022b76 <_vfiprintf_r+0x6a>
 8022b58:	f04f 30ff 	mov.w	r0, #4294967295
 8022b5c:	b01d      	add	sp, #116	; 0x74
 8022b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b62:	4b7b      	ldr	r3, [pc, #492]	; (8022d50 <_vfiprintf_r+0x244>)
 8022b64:	429d      	cmp	r5, r3
 8022b66:	d101      	bne.n	8022b6c <_vfiprintf_r+0x60>
 8022b68:	68b5      	ldr	r5, [r6, #8]
 8022b6a:	e7df      	b.n	8022b2c <_vfiprintf_r+0x20>
 8022b6c:	4b79      	ldr	r3, [pc, #484]	; (8022d54 <_vfiprintf_r+0x248>)
 8022b6e:	429d      	cmp	r5, r3
 8022b70:	bf08      	it	eq
 8022b72:	68f5      	ldreq	r5, [r6, #12]
 8022b74:	e7da      	b.n	8022b2c <_vfiprintf_r+0x20>
 8022b76:	89ab      	ldrh	r3, [r5, #12]
 8022b78:	0598      	lsls	r0, r3, #22
 8022b7a:	d4ed      	bmi.n	8022b58 <_vfiprintf_r+0x4c>
 8022b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b7e:	f003 fe5b 	bl	8026838 <__retarget_lock_release_recursive>
 8022b82:	e7e9      	b.n	8022b58 <_vfiprintf_r+0x4c>
 8022b84:	2300      	movs	r3, #0
 8022b86:	9309      	str	r3, [sp, #36]	; 0x24
 8022b88:	2320      	movs	r3, #32
 8022b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022b92:	2330      	movs	r3, #48	; 0x30
 8022b94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022d58 <_vfiprintf_r+0x24c>
 8022b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022b9c:	f04f 0901 	mov.w	r9, #1
 8022ba0:	4623      	mov	r3, r4
 8022ba2:	469a      	mov	sl, r3
 8022ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022ba8:	b10a      	cbz	r2, 8022bae <_vfiprintf_r+0xa2>
 8022baa:	2a25      	cmp	r2, #37	; 0x25
 8022bac:	d1f9      	bne.n	8022ba2 <_vfiprintf_r+0x96>
 8022bae:	ebba 0b04 	subs.w	fp, sl, r4
 8022bb2:	d00b      	beq.n	8022bcc <_vfiprintf_r+0xc0>
 8022bb4:	465b      	mov	r3, fp
 8022bb6:	4622      	mov	r2, r4
 8022bb8:	4629      	mov	r1, r5
 8022bba:	4630      	mov	r0, r6
 8022bbc:	f7ff ff93 	bl	8022ae6 <__sfputs_r>
 8022bc0:	3001      	adds	r0, #1
 8022bc2:	f000 80aa 	beq.w	8022d1a <_vfiprintf_r+0x20e>
 8022bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022bc8:	445a      	add	r2, fp
 8022bca:	9209      	str	r2, [sp, #36]	; 0x24
 8022bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	f000 80a2 	beq.w	8022d1a <_vfiprintf_r+0x20e>
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8022bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022be0:	f10a 0a01 	add.w	sl, sl, #1
 8022be4:	9304      	str	r3, [sp, #16]
 8022be6:	9307      	str	r3, [sp, #28]
 8022be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022bec:	931a      	str	r3, [sp, #104]	; 0x68
 8022bee:	4654      	mov	r4, sl
 8022bf0:	2205      	movs	r2, #5
 8022bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022bf6:	4858      	ldr	r0, [pc, #352]	; (8022d58 <_vfiprintf_r+0x24c>)
 8022bf8:	f7dd fb02 	bl	8000200 <memchr>
 8022bfc:	9a04      	ldr	r2, [sp, #16]
 8022bfe:	b9d8      	cbnz	r0, 8022c38 <_vfiprintf_r+0x12c>
 8022c00:	06d1      	lsls	r1, r2, #27
 8022c02:	bf44      	itt	mi
 8022c04:	2320      	movmi	r3, #32
 8022c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c0a:	0713      	lsls	r3, r2, #28
 8022c0c:	bf44      	itt	mi
 8022c0e:	232b      	movmi	r3, #43	; 0x2b
 8022c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c14:	f89a 3000 	ldrb.w	r3, [sl]
 8022c18:	2b2a      	cmp	r3, #42	; 0x2a
 8022c1a:	d015      	beq.n	8022c48 <_vfiprintf_r+0x13c>
 8022c1c:	9a07      	ldr	r2, [sp, #28]
 8022c1e:	4654      	mov	r4, sl
 8022c20:	2000      	movs	r0, #0
 8022c22:	f04f 0c0a 	mov.w	ip, #10
 8022c26:	4621      	mov	r1, r4
 8022c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c2c:	3b30      	subs	r3, #48	; 0x30
 8022c2e:	2b09      	cmp	r3, #9
 8022c30:	d94e      	bls.n	8022cd0 <_vfiprintf_r+0x1c4>
 8022c32:	b1b0      	cbz	r0, 8022c62 <_vfiprintf_r+0x156>
 8022c34:	9207      	str	r2, [sp, #28]
 8022c36:	e014      	b.n	8022c62 <_vfiprintf_r+0x156>
 8022c38:	eba0 0308 	sub.w	r3, r0, r8
 8022c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8022c40:	4313      	orrs	r3, r2
 8022c42:	9304      	str	r3, [sp, #16]
 8022c44:	46a2      	mov	sl, r4
 8022c46:	e7d2      	b.n	8022bee <_vfiprintf_r+0xe2>
 8022c48:	9b03      	ldr	r3, [sp, #12]
 8022c4a:	1d19      	adds	r1, r3, #4
 8022c4c:	681b      	ldr	r3, [r3, #0]
 8022c4e:	9103      	str	r1, [sp, #12]
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	bfbb      	ittet	lt
 8022c54:	425b      	neglt	r3, r3
 8022c56:	f042 0202 	orrlt.w	r2, r2, #2
 8022c5a:	9307      	strge	r3, [sp, #28]
 8022c5c:	9307      	strlt	r3, [sp, #28]
 8022c5e:	bfb8      	it	lt
 8022c60:	9204      	strlt	r2, [sp, #16]
 8022c62:	7823      	ldrb	r3, [r4, #0]
 8022c64:	2b2e      	cmp	r3, #46	; 0x2e
 8022c66:	d10c      	bne.n	8022c82 <_vfiprintf_r+0x176>
 8022c68:	7863      	ldrb	r3, [r4, #1]
 8022c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8022c6c:	d135      	bne.n	8022cda <_vfiprintf_r+0x1ce>
 8022c6e:	9b03      	ldr	r3, [sp, #12]
 8022c70:	1d1a      	adds	r2, r3, #4
 8022c72:	681b      	ldr	r3, [r3, #0]
 8022c74:	9203      	str	r2, [sp, #12]
 8022c76:	2b00      	cmp	r3, #0
 8022c78:	bfb8      	it	lt
 8022c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8022c7e:	3402      	adds	r4, #2
 8022c80:	9305      	str	r3, [sp, #20]
 8022c82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022d68 <_vfiprintf_r+0x25c>
 8022c86:	7821      	ldrb	r1, [r4, #0]
 8022c88:	2203      	movs	r2, #3
 8022c8a:	4650      	mov	r0, sl
 8022c8c:	f7dd fab8 	bl	8000200 <memchr>
 8022c90:	b140      	cbz	r0, 8022ca4 <_vfiprintf_r+0x198>
 8022c92:	2340      	movs	r3, #64	; 0x40
 8022c94:	eba0 000a 	sub.w	r0, r0, sl
 8022c98:	fa03 f000 	lsl.w	r0, r3, r0
 8022c9c:	9b04      	ldr	r3, [sp, #16]
 8022c9e:	4303      	orrs	r3, r0
 8022ca0:	3401      	adds	r4, #1
 8022ca2:	9304      	str	r3, [sp, #16]
 8022ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ca8:	482c      	ldr	r0, [pc, #176]	; (8022d5c <_vfiprintf_r+0x250>)
 8022caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022cae:	2206      	movs	r2, #6
 8022cb0:	f7dd faa6 	bl	8000200 <memchr>
 8022cb4:	2800      	cmp	r0, #0
 8022cb6:	d03f      	beq.n	8022d38 <_vfiprintf_r+0x22c>
 8022cb8:	4b29      	ldr	r3, [pc, #164]	; (8022d60 <_vfiprintf_r+0x254>)
 8022cba:	bb1b      	cbnz	r3, 8022d04 <_vfiprintf_r+0x1f8>
 8022cbc:	9b03      	ldr	r3, [sp, #12]
 8022cbe:	3307      	adds	r3, #7
 8022cc0:	f023 0307 	bic.w	r3, r3, #7
 8022cc4:	3308      	adds	r3, #8
 8022cc6:	9303      	str	r3, [sp, #12]
 8022cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022cca:	443b      	add	r3, r7
 8022ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8022cce:	e767      	b.n	8022ba0 <_vfiprintf_r+0x94>
 8022cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8022cd4:	460c      	mov	r4, r1
 8022cd6:	2001      	movs	r0, #1
 8022cd8:	e7a5      	b.n	8022c26 <_vfiprintf_r+0x11a>
 8022cda:	2300      	movs	r3, #0
 8022cdc:	3401      	adds	r4, #1
 8022cde:	9305      	str	r3, [sp, #20]
 8022ce0:	4619      	mov	r1, r3
 8022ce2:	f04f 0c0a 	mov.w	ip, #10
 8022ce6:	4620      	mov	r0, r4
 8022ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022cec:	3a30      	subs	r2, #48	; 0x30
 8022cee:	2a09      	cmp	r2, #9
 8022cf0:	d903      	bls.n	8022cfa <_vfiprintf_r+0x1ee>
 8022cf2:	2b00      	cmp	r3, #0
 8022cf4:	d0c5      	beq.n	8022c82 <_vfiprintf_r+0x176>
 8022cf6:	9105      	str	r1, [sp, #20]
 8022cf8:	e7c3      	b.n	8022c82 <_vfiprintf_r+0x176>
 8022cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8022cfe:	4604      	mov	r4, r0
 8022d00:	2301      	movs	r3, #1
 8022d02:	e7f0      	b.n	8022ce6 <_vfiprintf_r+0x1da>
 8022d04:	ab03      	add	r3, sp, #12
 8022d06:	9300      	str	r3, [sp, #0]
 8022d08:	462a      	mov	r2, r5
 8022d0a:	4b16      	ldr	r3, [pc, #88]	; (8022d64 <_vfiprintf_r+0x258>)
 8022d0c:	a904      	add	r1, sp, #16
 8022d0e:	4630      	mov	r0, r6
 8022d10:	f000 f8cc 	bl	8022eac <_printf_float>
 8022d14:	4607      	mov	r7, r0
 8022d16:	1c78      	adds	r0, r7, #1
 8022d18:	d1d6      	bne.n	8022cc8 <_vfiprintf_r+0x1bc>
 8022d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022d1c:	07d9      	lsls	r1, r3, #31
 8022d1e:	d405      	bmi.n	8022d2c <_vfiprintf_r+0x220>
 8022d20:	89ab      	ldrh	r3, [r5, #12]
 8022d22:	059a      	lsls	r2, r3, #22
 8022d24:	d402      	bmi.n	8022d2c <_vfiprintf_r+0x220>
 8022d26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022d28:	f003 fd86 	bl	8026838 <__retarget_lock_release_recursive>
 8022d2c:	89ab      	ldrh	r3, [r5, #12]
 8022d2e:	065b      	lsls	r3, r3, #25
 8022d30:	f53f af12 	bmi.w	8022b58 <_vfiprintf_r+0x4c>
 8022d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d36:	e711      	b.n	8022b5c <_vfiprintf_r+0x50>
 8022d38:	ab03      	add	r3, sp, #12
 8022d3a:	9300      	str	r3, [sp, #0]
 8022d3c:	462a      	mov	r2, r5
 8022d3e:	4b09      	ldr	r3, [pc, #36]	; (8022d64 <_vfiprintf_r+0x258>)
 8022d40:	a904      	add	r1, sp, #16
 8022d42:	4630      	mov	r0, r6
 8022d44:	f000 fb56 	bl	80233f4 <_printf_i>
 8022d48:	e7e4      	b.n	8022d14 <_vfiprintf_r+0x208>
 8022d4a:	bf00      	nop
 8022d4c:	08033bf8 	.word	0x08033bf8
 8022d50:	08033c18 	.word	0x08033c18
 8022d54:	08033bd8 	.word	0x08033bd8
 8022d58:	08033988 	.word	0x08033988
 8022d5c:	08033992 	.word	0x08033992
 8022d60:	08022ead 	.word	0x08022ead
 8022d64:	08022ae7 	.word	0x08022ae7
 8022d68:	0803398e 	.word	0x0803398e

08022d6c <__cvt>:
 8022d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022d70:	ec55 4b10 	vmov	r4, r5, d0
 8022d74:	2d00      	cmp	r5, #0
 8022d76:	460e      	mov	r6, r1
 8022d78:	4619      	mov	r1, r3
 8022d7a:	462b      	mov	r3, r5
 8022d7c:	bfbb      	ittet	lt
 8022d7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022d82:	461d      	movlt	r5, r3
 8022d84:	2300      	movge	r3, #0
 8022d86:	232d      	movlt	r3, #45	; 0x2d
 8022d88:	700b      	strb	r3, [r1, #0]
 8022d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022d90:	4691      	mov	r9, r2
 8022d92:	f023 0820 	bic.w	r8, r3, #32
 8022d96:	bfbc      	itt	lt
 8022d98:	4622      	movlt	r2, r4
 8022d9a:	4614      	movlt	r4, r2
 8022d9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022da0:	d005      	beq.n	8022dae <__cvt+0x42>
 8022da2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022da6:	d100      	bne.n	8022daa <__cvt+0x3e>
 8022da8:	3601      	adds	r6, #1
 8022daa:	2102      	movs	r1, #2
 8022dac:	e000      	b.n	8022db0 <__cvt+0x44>
 8022dae:	2103      	movs	r1, #3
 8022db0:	ab03      	add	r3, sp, #12
 8022db2:	9301      	str	r3, [sp, #4]
 8022db4:	ab02      	add	r3, sp, #8
 8022db6:	9300      	str	r3, [sp, #0]
 8022db8:	ec45 4b10 	vmov	d0, r4, r5
 8022dbc:	4653      	mov	r3, sl
 8022dbe:	4632      	mov	r2, r6
 8022dc0:	f002 f96e 	bl	80250a0 <_dtoa_r>
 8022dc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022dc8:	4607      	mov	r7, r0
 8022dca:	d102      	bne.n	8022dd2 <__cvt+0x66>
 8022dcc:	f019 0f01 	tst.w	r9, #1
 8022dd0:	d022      	beq.n	8022e18 <__cvt+0xac>
 8022dd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022dd6:	eb07 0906 	add.w	r9, r7, r6
 8022dda:	d110      	bne.n	8022dfe <__cvt+0x92>
 8022ddc:	783b      	ldrb	r3, [r7, #0]
 8022dde:	2b30      	cmp	r3, #48	; 0x30
 8022de0:	d10a      	bne.n	8022df8 <__cvt+0x8c>
 8022de2:	2200      	movs	r2, #0
 8022de4:	2300      	movs	r3, #0
 8022de6:	4620      	mov	r0, r4
 8022de8:	4629      	mov	r1, r5
 8022dea:	f7dd fe7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8022dee:	b918      	cbnz	r0, 8022df8 <__cvt+0x8c>
 8022df0:	f1c6 0601 	rsb	r6, r6, #1
 8022df4:	f8ca 6000 	str.w	r6, [sl]
 8022df8:	f8da 3000 	ldr.w	r3, [sl]
 8022dfc:	4499      	add	r9, r3
 8022dfe:	2200      	movs	r2, #0
 8022e00:	2300      	movs	r3, #0
 8022e02:	4620      	mov	r0, r4
 8022e04:	4629      	mov	r1, r5
 8022e06:	f7dd fe6f 	bl	8000ae8 <__aeabi_dcmpeq>
 8022e0a:	b108      	cbz	r0, 8022e10 <__cvt+0xa4>
 8022e0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8022e10:	2230      	movs	r2, #48	; 0x30
 8022e12:	9b03      	ldr	r3, [sp, #12]
 8022e14:	454b      	cmp	r3, r9
 8022e16:	d307      	bcc.n	8022e28 <__cvt+0xbc>
 8022e18:	9b03      	ldr	r3, [sp, #12]
 8022e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e1c:	1bdb      	subs	r3, r3, r7
 8022e1e:	4638      	mov	r0, r7
 8022e20:	6013      	str	r3, [r2, #0]
 8022e22:	b004      	add	sp, #16
 8022e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e28:	1c59      	adds	r1, r3, #1
 8022e2a:	9103      	str	r1, [sp, #12]
 8022e2c:	701a      	strb	r2, [r3, #0]
 8022e2e:	e7f0      	b.n	8022e12 <__cvt+0xa6>

08022e30 <__exponent>:
 8022e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022e32:	4603      	mov	r3, r0
 8022e34:	2900      	cmp	r1, #0
 8022e36:	bfb8      	it	lt
 8022e38:	4249      	neglt	r1, r1
 8022e3a:	f803 2b02 	strb.w	r2, [r3], #2
 8022e3e:	bfb4      	ite	lt
 8022e40:	222d      	movlt	r2, #45	; 0x2d
 8022e42:	222b      	movge	r2, #43	; 0x2b
 8022e44:	2909      	cmp	r1, #9
 8022e46:	7042      	strb	r2, [r0, #1]
 8022e48:	dd2a      	ble.n	8022ea0 <__exponent+0x70>
 8022e4a:	f10d 0407 	add.w	r4, sp, #7
 8022e4e:	46a4      	mov	ip, r4
 8022e50:	270a      	movs	r7, #10
 8022e52:	46a6      	mov	lr, r4
 8022e54:	460a      	mov	r2, r1
 8022e56:	fb91 f6f7 	sdiv	r6, r1, r7
 8022e5a:	fb07 1516 	mls	r5, r7, r6, r1
 8022e5e:	3530      	adds	r5, #48	; 0x30
 8022e60:	2a63      	cmp	r2, #99	; 0x63
 8022e62:	f104 34ff 	add.w	r4, r4, #4294967295
 8022e66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8022e6a:	4631      	mov	r1, r6
 8022e6c:	dcf1      	bgt.n	8022e52 <__exponent+0x22>
 8022e6e:	3130      	adds	r1, #48	; 0x30
 8022e70:	f1ae 0502 	sub.w	r5, lr, #2
 8022e74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8022e78:	1c44      	adds	r4, r0, #1
 8022e7a:	4629      	mov	r1, r5
 8022e7c:	4561      	cmp	r1, ip
 8022e7e:	d30a      	bcc.n	8022e96 <__exponent+0x66>
 8022e80:	f10d 0209 	add.w	r2, sp, #9
 8022e84:	eba2 020e 	sub.w	r2, r2, lr
 8022e88:	4565      	cmp	r5, ip
 8022e8a:	bf88      	it	hi
 8022e8c:	2200      	movhi	r2, #0
 8022e8e:	4413      	add	r3, r2
 8022e90:	1a18      	subs	r0, r3, r0
 8022e92:	b003      	add	sp, #12
 8022e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022e9e:	e7ed      	b.n	8022e7c <__exponent+0x4c>
 8022ea0:	2330      	movs	r3, #48	; 0x30
 8022ea2:	3130      	adds	r1, #48	; 0x30
 8022ea4:	7083      	strb	r3, [r0, #2]
 8022ea6:	70c1      	strb	r1, [r0, #3]
 8022ea8:	1d03      	adds	r3, r0, #4
 8022eaa:	e7f1      	b.n	8022e90 <__exponent+0x60>

08022eac <_printf_float>:
 8022eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022eb0:	ed2d 8b02 	vpush	{d8}
 8022eb4:	b08d      	sub	sp, #52	; 0x34
 8022eb6:	460c      	mov	r4, r1
 8022eb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022ebc:	4616      	mov	r6, r2
 8022ebe:	461f      	mov	r7, r3
 8022ec0:	4605      	mov	r5, r0
 8022ec2:	f7ff fa6b 	bl	802239c <_localeconv_r>
 8022ec6:	f8d0 a000 	ldr.w	sl, [r0]
 8022eca:	4650      	mov	r0, sl
 8022ecc:	f7dd f98a 	bl	80001e4 <strlen>
 8022ed0:	2300      	movs	r3, #0
 8022ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8022ed4:	6823      	ldr	r3, [r4, #0]
 8022ed6:	9305      	str	r3, [sp, #20]
 8022ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8022edc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022ee0:	3307      	adds	r3, #7
 8022ee2:	f023 0307 	bic.w	r3, r3, #7
 8022ee6:	f103 0208 	add.w	r2, r3, #8
 8022eea:	f8c8 2000 	str.w	r2, [r8]
 8022eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8022ef6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8022efa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022efe:	9307      	str	r3, [sp, #28]
 8022f00:	f8cd 8018 	str.w	r8, [sp, #24]
 8022f04:	ee08 0a10 	vmov	s16, r0
 8022f08:	4b9f      	ldr	r3, [pc, #636]	; (8023188 <_printf_float+0x2dc>)
 8022f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8022f12:	f7dd fe1b 	bl	8000b4c <__aeabi_dcmpun>
 8022f16:	bb88      	cbnz	r0, 8022f7c <_printf_float+0xd0>
 8022f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f1c:	4b9a      	ldr	r3, [pc, #616]	; (8023188 <_printf_float+0x2dc>)
 8022f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8022f22:	f7dd fdf5 	bl	8000b10 <__aeabi_dcmple>
 8022f26:	bb48      	cbnz	r0, 8022f7c <_printf_float+0xd0>
 8022f28:	2200      	movs	r2, #0
 8022f2a:	2300      	movs	r3, #0
 8022f2c:	4640      	mov	r0, r8
 8022f2e:	4649      	mov	r1, r9
 8022f30:	f7dd fde4 	bl	8000afc <__aeabi_dcmplt>
 8022f34:	b110      	cbz	r0, 8022f3c <_printf_float+0x90>
 8022f36:	232d      	movs	r3, #45	; 0x2d
 8022f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f3c:	4b93      	ldr	r3, [pc, #588]	; (802318c <_printf_float+0x2e0>)
 8022f3e:	4894      	ldr	r0, [pc, #592]	; (8023190 <_printf_float+0x2e4>)
 8022f40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022f44:	bf94      	ite	ls
 8022f46:	4698      	movls	r8, r3
 8022f48:	4680      	movhi	r8, r0
 8022f4a:	2303      	movs	r3, #3
 8022f4c:	6123      	str	r3, [r4, #16]
 8022f4e:	9b05      	ldr	r3, [sp, #20]
 8022f50:	f023 0204 	bic.w	r2, r3, #4
 8022f54:	6022      	str	r2, [r4, #0]
 8022f56:	f04f 0900 	mov.w	r9, #0
 8022f5a:	9700      	str	r7, [sp, #0]
 8022f5c:	4633      	mov	r3, r6
 8022f5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8022f60:	4621      	mov	r1, r4
 8022f62:	4628      	mov	r0, r5
 8022f64:	f000 f9d8 	bl	8023318 <_printf_common>
 8022f68:	3001      	adds	r0, #1
 8022f6a:	f040 8090 	bne.w	802308e <_printf_float+0x1e2>
 8022f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8022f72:	b00d      	add	sp, #52	; 0x34
 8022f74:	ecbd 8b02 	vpop	{d8}
 8022f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f7c:	4642      	mov	r2, r8
 8022f7e:	464b      	mov	r3, r9
 8022f80:	4640      	mov	r0, r8
 8022f82:	4649      	mov	r1, r9
 8022f84:	f7dd fde2 	bl	8000b4c <__aeabi_dcmpun>
 8022f88:	b140      	cbz	r0, 8022f9c <_printf_float+0xf0>
 8022f8a:	464b      	mov	r3, r9
 8022f8c:	2b00      	cmp	r3, #0
 8022f8e:	bfbc      	itt	lt
 8022f90:	232d      	movlt	r3, #45	; 0x2d
 8022f92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8022f96:	487f      	ldr	r0, [pc, #508]	; (8023194 <_printf_float+0x2e8>)
 8022f98:	4b7f      	ldr	r3, [pc, #508]	; (8023198 <_printf_float+0x2ec>)
 8022f9a:	e7d1      	b.n	8022f40 <_printf_float+0x94>
 8022f9c:	6863      	ldr	r3, [r4, #4]
 8022f9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8022fa2:	9206      	str	r2, [sp, #24]
 8022fa4:	1c5a      	adds	r2, r3, #1
 8022fa6:	d13f      	bne.n	8023028 <_printf_float+0x17c>
 8022fa8:	2306      	movs	r3, #6
 8022faa:	6063      	str	r3, [r4, #4]
 8022fac:	9b05      	ldr	r3, [sp, #20]
 8022fae:	6861      	ldr	r1, [r4, #4]
 8022fb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8022fb4:	2300      	movs	r3, #0
 8022fb6:	9303      	str	r3, [sp, #12]
 8022fb8:	ab0a      	add	r3, sp, #40	; 0x28
 8022fba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8022fbe:	ab09      	add	r3, sp, #36	; 0x24
 8022fc0:	ec49 8b10 	vmov	d0, r8, r9
 8022fc4:	9300      	str	r3, [sp, #0]
 8022fc6:	6022      	str	r2, [r4, #0]
 8022fc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8022fcc:	4628      	mov	r0, r5
 8022fce:	f7ff fecd 	bl	8022d6c <__cvt>
 8022fd2:	9b06      	ldr	r3, [sp, #24]
 8022fd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022fd6:	2b47      	cmp	r3, #71	; 0x47
 8022fd8:	4680      	mov	r8, r0
 8022fda:	d108      	bne.n	8022fee <_printf_float+0x142>
 8022fdc:	1cc8      	adds	r0, r1, #3
 8022fde:	db02      	blt.n	8022fe6 <_printf_float+0x13a>
 8022fe0:	6863      	ldr	r3, [r4, #4]
 8022fe2:	4299      	cmp	r1, r3
 8022fe4:	dd41      	ble.n	802306a <_printf_float+0x1be>
 8022fe6:	f1ab 0b02 	sub.w	fp, fp, #2
 8022fea:	fa5f fb8b 	uxtb.w	fp, fp
 8022fee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8022ff2:	d820      	bhi.n	8023036 <_printf_float+0x18a>
 8022ff4:	3901      	subs	r1, #1
 8022ff6:	465a      	mov	r2, fp
 8022ff8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022ffc:	9109      	str	r1, [sp, #36]	; 0x24
 8022ffe:	f7ff ff17 	bl	8022e30 <__exponent>
 8023002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023004:	1813      	adds	r3, r2, r0
 8023006:	2a01      	cmp	r2, #1
 8023008:	4681      	mov	r9, r0
 802300a:	6123      	str	r3, [r4, #16]
 802300c:	dc02      	bgt.n	8023014 <_printf_float+0x168>
 802300e:	6822      	ldr	r2, [r4, #0]
 8023010:	07d2      	lsls	r2, r2, #31
 8023012:	d501      	bpl.n	8023018 <_printf_float+0x16c>
 8023014:	3301      	adds	r3, #1
 8023016:	6123      	str	r3, [r4, #16]
 8023018:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802301c:	2b00      	cmp	r3, #0
 802301e:	d09c      	beq.n	8022f5a <_printf_float+0xae>
 8023020:	232d      	movs	r3, #45	; 0x2d
 8023022:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023026:	e798      	b.n	8022f5a <_printf_float+0xae>
 8023028:	9a06      	ldr	r2, [sp, #24]
 802302a:	2a47      	cmp	r2, #71	; 0x47
 802302c:	d1be      	bne.n	8022fac <_printf_float+0x100>
 802302e:	2b00      	cmp	r3, #0
 8023030:	d1bc      	bne.n	8022fac <_printf_float+0x100>
 8023032:	2301      	movs	r3, #1
 8023034:	e7b9      	b.n	8022faa <_printf_float+0xfe>
 8023036:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802303a:	d118      	bne.n	802306e <_printf_float+0x1c2>
 802303c:	2900      	cmp	r1, #0
 802303e:	6863      	ldr	r3, [r4, #4]
 8023040:	dd0b      	ble.n	802305a <_printf_float+0x1ae>
 8023042:	6121      	str	r1, [r4, #16]
 8023044:	b913      	cbnz	r3, 802304c <_printf_float+0x1a0>
 8023046:	6822      	ldr	r2, [r4, #0]
 8023048:	07d0      	lsls	r0, r2, #31
 802304a:	d502      	bpl.n	8023052 <_printf_float+0x1a6>
 802304c:	3301      	adds	r3, #1
 802304e:	440b      	add	r3, r1
 8023050:	6123      	str	r3, [r4, #16]
 8023052:	65a1      	str	r1, [r4, #88]	; 0x58
 8023054:	f04f 0900 	mov.w	r9, #0
 8023058:	e7de      	b.n	8023018 <_printf_float+0x16c>
 802305a:	b913      	cbnz	r3, 8023062 <_printf_float+0x1b6>
 802305c:	6822      	ldr	r2, [r4, #0]
 802305e:	07d2      	lsls	r2, r2, #31
 8023060:	d501      	bpl.n	8023066 <_printf_float+0x1ba>
 8023062:	3302      	adds	r3, #2
 8023064:	e7f4      	b.n	8023050 <_printf_float+0x1a4>
 8023066:	2301      	movs	r3, #1
 8023068:	e7f2      	b.n	8023050 <_printf_float+0x1a4>
 802306a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802306e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023070:	4299      	cmp	r1, r3
 8023072:	db05      	blt.n	8023080 <_printf_float+0x1d4>
 8023074:	6823      	ldr	r3, [r4, #0]
 8023076:	6121      	str	r1, [r4, #16]
 8023078:	07d8      	lsls	r0, r3, #31
 802307a:	d5ea      	bpl.n	8023052 <_printf_float+0x1a6>
 802307c:	1c4b      	adds	r3, r1, #1
 802307e:	e7e7      	b.n	8023050 <_printf_float+0x1a4>
 8023080:	2900      	cmp	r1, #0
 8023082:	bfd4      	ite	le
 8023084:	f1c1 0202 	rsble	r2, r1, #2
 8023088:	2201      	movgt	r2, #1
 802308a:	4413      	add	r3, r2
 802308c:	e7e0      	b.n	8023050 <_printf_float+0x1a4>
 802308e:	6823      	ldr	r3, [r4, #0]
 8023090:	055a      	lsls	r2, r3, #21
 8023092:	d407      	bmi.n	80230a4 <_printf_float+0x1f8>
 8023094:	6923      	ldr	r3, [r4, #16]
 8023096:	4642      	mov	r2, r8
 8023098:	4631      	mov	r1, r6
 802309a:	4628      	mov	r0, r5
 802309c:	47b8      	blx	r7
 802309e:	3001      	adds	r0, #1
 80230a0:	d12c      	bne.n	80230fc <_printf_float+0x250>
 80230a2:	e764      	b.n	8022f6e <_printf_float+0xc2>
 80230a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80230a8:	f240 80e0 	bls.w	802326c <_printf_float+0x3c0>
 80230ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80230b0:	2200      	movs	r2, #0
 80230b2:	2300      	movs	r3, #0
 80230b4:	f7dd fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80230b8:	2800      	cmp	r0, #0
 80230ba:	d034      	beq.n	8023126 <_printf_float+0x27a>
 80230bc:	4a37      	ldr	r2, [pc, #220]	; (802319c <_printf_float+0x2f0>)
 80230be:	2301      	movs	r3, #1
 80230c0:	4631      	mov	r1, r6
 80230c2:	4628      	mov	r0, r5
 80230c4:	47b8      	blx	r7
 80230c6:	3001      	adds	r0, #1
 80230c8:	f43f af51 	beq.w	8022f6e <_printf_float+0xc2>
 80230cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80230d0:	429a      	cmp	r2, r3
 80230d2:	db02      	blt.n	80230da <_printf_float+0x22e>
 80230d4:	6823      	ldr	r3, [r4, #0]
 80230d6:	07d8      	lsls	r0, r3, #31
 80230d8:	d510      	bpl.n	80230fc <_printf_float+0x250>
 80230da:	ee18 3a10 	vmov	r3, s16
 80230de:	4652      	mov	r2, sl
 80230e0:	4631      	mov	r1, r6
 80230e2:	4628      	mov	r0, r5
 80230e4:	47b8      	blx	r7
 80230e6:	3001      	adds	r0, #1
 80230e8:	f43f af41 	beq.w	8022f6e <_printf_float+0xc2>
 80230ec:	f04f 0800 	mov.w	r8, #0
 80230f0:	f104 091a 	add.w	r9, r4, #26
 80230f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230f6:	3b01      	subs	r3, #1
 80230f8:	4543      	cmp	r3, r8
 80230fa:	dc09      	bgt.n	8023110 <_printf_float+0x264>
 80230fc:	6823      	ldr	r3, [r4, #0]
 80230fe:	079b      	lsls	r3, r3, #30
 8023100:	f100 8105 	bmi.w	802330e <_printf_float+0x462>
 8023104:	68e0      	ldr	r0, [r4, #12]
 8023106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023108:	4298      	cmp	r0, r3
 802310a:	bfb8      	it	lt
 802310c:	4618      	movlt	r0, r3
 802310e:	e730      	b.n	8022f72 <_printf_float+0xc6>
 8023110:	2301      	movs	r3, #1
 8023112:	464a      	mov	r2, r9
 8023114:	4631      	mov	r1, r6
 8023116:	4628      	mov	r0, r5
 8023118:	47b8      	blx	r7
 802311a:	3001      	adds	r0, #1
 802311c:	f43f af27 	beq.w	8022f6e <_printf_float+0xc2>
 8023120:	f108 0801 	add.w	r8, r8, #1
 8023124:	e7e6      	b.n	80230f4 <_printf_float+0x248>
 8023126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023128:	2b00      	cmp	r3, #0
 802312a:	dc39      	bgt.n	80231a0 <_printf_float+0x2f4>
 802312c:	4a1b      	ldr	r2, [pc, #108]	; (802319c <_printf_float+0x2f0>)
 802312e:	2301      	movs	r3, #1
 8023130:	4631      	mov	r1, r6
 8023132:	4628      	mov	r0, r5
 8023134:	47b8      	blx	r7
 8023136:	3001      	adds	r0, #1
 8023138:	f43f af19 	beq.w	8022f6e <_printf_float+0xc2>
 802313c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023140:	4313      	orrs	r3, r2
 8023142:	d102      	bne.n	802314a <_printf_float+0x29e>
 8023144:	6823      	ldr	r3, [r4, #0]
 8023146:	07d9      	lsls	r1, r3, #31
 8023148:	d5d8      	bpl.n	80230fc <_printf_float+0x250>
 802314a:	ee18 3a10 	vmov	r3, s16
 802314e:	4652      	mov	r2, sl
 8023150:	4631      	mov	r1, r6
 8023152:	4628      	mov	r0, r5
 8023154:	47b8      	blx	r7
 8023156:	3001      	adds	r0, #1
 8023158:	f43f af09 	beq.w	8022f6e <_printf_float+0xc2>
 802315c:	f04f 0900 	mov.w	r9, #0
 8023160:	f104 0a1a 	add.w	sl, r4, #26
 8023164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023166:	425b      	negs	r3, r3
 8023168:	454b      	cmp	r3, r9
 802316a:	dc01      	bgt.n	8023170 <_printf_float+0x2c4>
 802316c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802316e:	e792      	b.n	8023096 <_printf_float+0x1ea>
 8023170:	2301      	movs	r3, #1
 8023172:	4652      	mov	r2, sl
 8023174:	4631      	mov	r1, r6
 8023176:	4628      	mov	r0, r5
 8023178:	47b8      	blx	r7
 802317a:	3001      	adds	r0, #1
 802317c:	f43f aef7 	beq.w	8022f6e <_printf_float+0xc2>
 8023180:	f109 0901 	add.w	r9, r9, #1
 8023184:	e7ee      	b.n	8023164 <_printf_float+0x2b8>
 8023186:	bf00      	nop
 8023188:	7fefffff 	.word	0x7fefffff
 802318c:	08033999 	.word	0x08033999
 8023190:	0803399d 	.word	0x0803399d
 8023194:	080339a5 	.word	0x080339a5
 8023198:	080339a1 	.word	0x080339a1
 802319c:	080327b7 	.word	0x080327b7
 80231a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80231a4:	429a      	cmp	r2, r3
 80231a6:	bfa8      	it	ge
 80231a8:	461a      	movge	r2, r3
 80231aa:	2a00      	cmp	r2, #0
 80231ac:	4691      	mov	r9, r2
 80231ae:	dc37      	bgt.n	8023220 <_printf_float+0x374>
 80231b0:	f04f 0b00 	mov.w	fp, #0
 80231b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80231b8:	f104 021a 	add.w	r2, r4, #26
 80231bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80231be:	9305      	str	r3, [sp, #20]
 80231c0:	eba3 0309 	sub.w	r3, r3, r9
 80231c4:	455b      	cmp	r3, fp
 80231c6:	dc33      	bgt.n	8023230 <_printf_float+0x384>
 80231c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80231cc:	429a      	cmp	r2, r3
 80231ce:	db3b      	blt.n	8023248 <_printf_float+0x39c>
 80231d0:	6823      	ldr	r3, [r4, #0]
 80231d2:	07da      	lsls	r2, r3, #31
 80231d4:	d438      	bmi.n	8023248 <_printf_float+0x39c>
 80231d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231d8:	9b05      	ldr	r3, [sp, #20]
 80231da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80231dc:	1ad3      	subs	r3, r2, r3
 80231de:	eba2 0901 	sub.w	r9, r2, r1
 80231e2:	4599      	cmp	r9, r3
 80231e4:	bfa8      	it	ge
 80231e6:	4699      	movge	r9, r3
 80231e8:	f1b9 0f00 	cmp.w	r9, #0
 80231ec:	dc35      	bgt.n	802325a <_printf_float+0x3ae>
 80231ee:	f04f 0800 	mov.w	r8, #0
 80231f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80231f6:	f104 0a1a 	add.w	sl, r4, #26
 80231fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80231fe:	1a9b      	subs	r3, r3, r2
 8023200:	eba3 0309 	sub.w	r3, r3, r9
 8023204:	4543      	cmp	r3, r8
 8023206:	f77f af79 	ble.w	80230fc <_printf_float+0x250>
 802320a:	2301      	movs	r3, #1
 802320c:	4652      	mov	r2, sl
 802320e:	4631      	mov	r1, r6
 8023210:	4628      	mov	r0, r5
 8023212:	47b8      	blx	r7
 8023214:	3001      	adds	r0, #1
 8023216:	f43f aeaa 	beq.w	8022f6e <_printf_float+0xc2>
 802321a:	f108 0801 	add.w	r8, r8, #1
 802321e:	e7ec      	b.n	80231fa <_printf_float+0x34e>
 8023220:	4613      	mov	r3, r2
 8023222:	4631      	mov	r1, r6
 8023224:	4642      	mov	r2, r8
 8023226:	4628      	mov	r0, r5
 8023228:	47b8      	blx	r7
 802322a:	3001      	adds	r0, #1
 802322c:	d1c0      	bne.n	80231b0 <_printf_float+0x304>
 802322e:	e69e      	b.n	8022f6e <_printf_float+0xc2>
 8023230:	2301      	movs	r3, #1
 8023232:	4631      	mov	r1, r6
 8023234:	4628      	mov	r0, r5
 8023236:	9205      	str	r2, [sp, #20]
 8023238:	47b8      	blx	r7
 802323a:	3001      	adds	r0, #1
 802323c:	f43f ae97 	beq.w	8022f6e <_printf_float+0xc2>
 8023240:	9a05      	ldr	r2, [sp, #20]
 8023242:	f10b 0b01 	add.w	fp, fp, #1
 8023246:	e7b9      	b.n	80231bc <_printf_float+0x310>
 8023248:	ee18 3a10 	vmov	r3, s16
 802324c:	4652      	mov	r2, sl
 802324e:	4631      	mov	r1, r6
 8023250:	4628      	mov	r0, r5
 8023252:	47b8      	blx	r7
 8023254:	3001      	adds	r0, #1
 8023256:	d1be      	bne.n	80231d6 <_printf_float+0x32a>
 8023258:	e689      	b.n	8022f6e <_printf_float+0xc2>
 802325a:	9a05      	ldr	r2, [sp, #20]
 802325c:	464b      	mov	r3, r9
 802325e:	4442      	add	r2, r8
 8023260:	4631      	mov	r1, r6
 8023262:	4628      	mov	r0, r5
 8023264:	47b8      	blx	r7
 8023266:	3001      	adds	r0, #1
 8023268:	d1c1      	bne.n	80231ee <_printf_float+0x342>
 802326a:	e680      	b.n	8022f6e <_printf_float+0xc2>
 802326c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802326e:	2a01      	cmp	r2, #1
 8023270:	dc01      	bgt.n	8023276 <_printf_float+0x3ca>
 8023272:	07db      	lsls	r3, r3, #31
 8023274:	d538      	bpl.n	80232e8 <_printf_float+0x43c>
 8023276:	2301      	movs	r3, #1
 8023278:	4642      	mov	r2, r8
 802327a:	4631      	mov	r1, r6
 802327c:	4628      	mov	r0, r5
 802327e:	47b8      	blx	r7
 8023280:	3001      	adds	r0, #1
 8023282:	f43f ae74 	beq.w	8022f6e <_printf_float+0xc2>
 8023286:	ee18 3a10 	vmov	r3, s16
 802328a:	4652      	mov	r2, sl
 802328c:	4631      	mov	r1, r6
 802328e:	4628      	mov	r0, r5
 8023290:	47b8      	blx	r7
 8023292:	3001      	adds	r0, #1
 8023294:	f43f ae6b 	beq.w	8022f6e <_printf_float+0xc2>
 8023298:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802329c:	2200      	movs	r2, #0
 802329e:	2300      	movs	r3, #0
 80232a0:	f7dd fc22 	bl	8000ae8 <__aeabi_dcmpeq>
 80232a4:	b9d8      	cbnz	r0, 80232de <_printf_float+0x432>
 80232a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232a8:	f108 0201 	add.w	r2, r8, #1
 80232ac:	3b01      	subs	r3, #1
 80232ae:	4631      	mov	r1, r6
 80232b0:	4628      	mov	r0, r5
 80232b2:	47b8      	blx	r7
 80232b4:	3001      	adds	r0, #1
 80232b6:	d10e      	bne.n	80232d6 <_printf_float+0x42a>
 80232b8:	e659      	b.n	8022f6e <_printf_float+0xc2>
 80232ba:	2301      	movs	r3, #1
 80232bc:	4652      	mov	r2, sl
 80232be:	4631      	mov	r1, r6
 80232c0:	4628      	mov	r0, r5
 80232c2:	47b8      	blx	r7
 80232c4:	3001      	adds	r0, #1
 80232c6:	f43f ae52 	beq.w	8022f6e <_printf_float+0xc2>
 80232ca:	f108 0801 	add.w	r8, r8, #1
 80232ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80232d0:	3b01      	subs	r3, #1
 80232d2:	4543      	cmp	r3, r8
 80232d4:	dcf1      	bgt.n	80232ba <_printf_float+0x40e>
 80232d6:	464b      	mov	r3, r9
 80232d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80232dc:	e6dc      	b.n	8023098 <_printf_float+0x1ec>
 80232de:	f04f 0800 	mov.w	r8, #0
 80232e2:	f104 0a1a 	add.w	sl, r4, #26
 80232e6:	e7f2      	b.n	80232ce <_printf_float+0x422>
 80232e8:	2301      	movs	r3, #1
 80232ea:	4642      	mov	r2, r8
 80232ec:	e7df      	b.n	80232ae <_printf_float+0x402>
 80232ee:	2301      	movs	r3, #1
 80232f0:	464a      	mov	r2, r9
 80232f2:	4631      	mov	r1, r6
 80232f4:	4628      	mov	r0, r5
 80232f6:	47b8      	blx	r7
 80232f8:	3001      	adds	r0, #1
 80232fa:	f43f ae38 	beq.w	8022f6e <_printf_float+0xc2>
 80232fe:	f108 0801 	add.w	r8, r8, #1
 8023302:	68e3      	ldr	r3, [r4, #12]
 8023304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023306:	1a5b      	subs	r3, r3, r1
 8023308:	4543      	cmp	r3, r8
 802330a:	dcf0      	bgt.n	80232ee <_printf_float+0x442>
 802330c:	e6fa      	b.n	8023104 <_printf_float+0x258>
 802330e:	f04f 0800 	mov.w	r8, #0
 8023312:	f104 0919 	add.w	r9, r4, #25
 8023316:	e7f4      	b.n	8023302 <_printf_float+0x456>

08023318 <_printf_common>:
 8023318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802331c:	4616      	mov	r6, r2
 802331e:	4699      	mov	r9, r3
 8023320:	688a      	ldr	r2, [r1, #8]
 8023322:	690b      	ldr	r3, [r1, #16]
 8023324:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023328:	4293      	cmp	r3, r2
 802332a:	bfb8      	it	lt
 802332c:	4613      	movlt	r3, r2
 802332e:	6033      	str	r3, [r6, #0]
 8023330:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023334:	4607      	mov	r7, r0
 8023336:	460c      	mov	r4, r1
 8023338:	b10a      	cbz	r2, 802333e <_printf_common+0x26>
 802333a:	3301      	adds	r3, #1
 802333c:	6033      	str	r3, [r6, #0]
 802333e:	6823      	ldr	r3, [r4, #0]
 8023340:	0699      	lsls	r1, r3, #26
 8023342:	bf42      	ittt	mi
 8023344:	6833      	ldrmi	r3, [r6, #0]
 8023346:	3302      	addmi	r3, #2
 8023348:	6033      	strmi	r3, [r6, #0]
 802334a:	6825      	ldr	r5, [r4, #0]
 802334c:	f015 0506 	ands.w	r5, r5, #6
 8023350:	d106      	bne.n	8023360 <_printf_common+0x48>
 8023352:	f104 0a19 	add.w	sl, r4, #25
 8023356:	68e3      	ldr	r3, [r4, #12]
 8023358:	6832      	ldr	r2, [r6, #0]
 802335a:	1a9b      	subs	r3, r3, r2
 802335c:	42ab      	cmp	r3, r5
 802335e:	dc26      	bgt.n	80233ae <_printf_common+0x96>
 8023360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023364:	1e13      	subs	r3, r2, #0
 8023366:	6822      	ldr	r2, [r4, #0]
 8023368:	bf18      	it	ne
 802336a:	2301      	movne	r3, #1
 802336c:	0692      	lsls	r2, r2, #26
 802336e:	d42b      	bmi.n	80233c8 <_printf_common+0xb0>
 8023370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023374:	4649      	mov	r1, r9
 8023376:	4638      	mov	r0, r7
 8023378:	47c0      	blx	r8
 802337a:	3001      	adds	r0, #1
 802337c:	d01e      	beq.n	80233bc <_printf_common+0xa4>
 802337e:	6823      	ldr	r3, [r4, #0]
 8023380:	68e5      	ldr	r5, [r4, #12]
 8023382:	6832      	ldr	r2, [r6, #0]
 8023384:	f003 0306 	and.w	r3, r3, #6
 8023388:	2b04      	cmp	r3, #4
 802338a:	bf08      	it	eq
 802338c:	1aad      	subeq	r5, r5, r2
 802338e:	68a3      	ldr	r3, [r4, #8]
 8023390:	6922      	ldr	r2, [r4, #16]
 8023392:	bf0c      	ite	eq
 8023394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023398:	2500      	movne	r5, #0
 802339a:	4293      	cmp	r3, r2
 802339c:	bfc4      	itt	gt
 802339e:	1a9b      	subgt	r3, r3, r2
 80233a0:	18ed      	addgt	r5, r5, r3
 80233a2:	2600      	movs	r6, #0
 80233a4:	341a      	adds	r4, #26
 80233a6:	42b5      	cmp	r5, r6
 80233a8:	d11a      	bne.n	80233e0 <_printf_common+0xc8>
 80233aa:	2000      	movs	r0, #0
 80233ac:	e008      	b.n	80233c0 <_printf_common+0xa8>
 80233ae:	2301      	movs	r3, #1
 80233b0:	4652      	mov	r2, sl
 80233b2:	4649      	mov	r1, r9
 80233b4:	4638      	mov	r0, r7
 80233b6:	47c0      	blx	r8
 80233b8:	3001      	adds	r0, #1
 80233ba:	d103      	bne.n	80233c4 <_printf_common+0xac>
 80233bc:	f04f 30ff 	mov.w	r0, #4294967295
 80233c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80233c4:	3501      	adds	r5, #1
 80233c6:	e7c6      	b.n	8023356 <_printf_common+0x3e>
 80233c8:	18e1      	adds	r1, r4, r3
 80233ca:	1c5a      	adds	r2, r3, #1
 80233cc:	2030      	movs	r0, #48	; 0x30
 80233ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80233d2:	4422      	add	r2, r4
 80233d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80233d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80233dc:	3302      	adds	r3, #2
 80233de:	e7c7      	b.n	8023370 <_printf_common+0x58>
 80233e0:	2301      	movs	r3, #1
 80233e2:	4622      	mov	r2, r4
 80233e4:	4649      	mov	r1, r9
 80233e6:	4638      	mov	r0, r7
 80233e8:	47c0      	blx	r8
 80233ea:	3001      	adds	r0, #1
 80233ec:	d0e6      	beq.n	80233bc <_printf_common+0xa4>
 80233ee:	3601      	adds	r6, #1
 80233f0:	e7d9      	b.n	80233a6 <_printf_common+0x8e>
	...

080233f4 <_printf_i>:
 80233f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80233f8:	460c      	mov	r4, r1
 80233fa:	4691      	mov	r9, r2
 80233fc:	7e27      	ldrb	r7, [r4, #24]
 80233fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023400:	2f78      	cmp	r7, #120	; 0x78
 8023402:	4680      	mov	r8, r0
 8023404:	469a      	mov	sl, r3
 8023406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802340a:	d807      	bhi.n	802341c <_printf_i+0x28>
 802340c:	2f62      	cmp	r7, #98	; 0x62
 802340e:	d80a      	bhi.n	8023426 <_printf_i+0x32>
 8023410:	2f00      	cmp	r7, #0
 8023412:	f000 80d8 	beq.w	80235c6 <_printf_i+0x1d2>
 8023416:	2f58      	cmp	r7, #88	; 0x58
 8023418:	f000 80a3 	beq.w	8023562 <_printf_i+0x16e>
 802341c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023420:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023424:	e03a      	b.n	802349c <_printf_i+0xa8>
 8023426:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802342a:	2b15      	cmp	r3, #21
 802342c:	d8f6      	bhi.n	802341c <_printf_i+0x28>
 802342e:	a001      	add	r0, pc, #4	; (adr r0, 8023434 <_printf_i+0x40>)
 8023430:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8023434:	0802348d 	.word	0x0802348d
 8023438:	080234a1 	.word	0x080234a1
 802343c:	0802341d 	.word	0x0802341d
 8023440:	0802341d 	.word	0x0802341d
 8023444:	0802341d 	.word	0x0802341d
 8023448:	0802341d 	.word	0x0802341d
 802344c:	080234a1 	.word	0x080234a1
 8023450:	0802341d 	.word	0x0802341d
 8023454:	0802341d 	.word	0x0802341d
 8023458:	0802341d 	.word	0x0802341d
 802345c:	0802341d 	.word	0x0802341d
 8023460:	080235ad 	.word	0x080235ad
 8023464:	080234d1 	.word	0x080234d1
 8023468:	0802358f 	.word	0x0802358f
 802346c:	0802341d 	.word	0x0802341d
 8023470:	0802341d 	.word	0x0802341d
 8023474:	080235cf 	.word	0x080235cf
 8023478:	0802341d 	.word	0x0802341d
 802347c:	080234d1 	.word	0x080234d1
 8023480:	0802341d 	.word	0x0802341d
 8023484:	0802341d 	.word	0x0802341d
 8023488:	08023597 	.word	0x08023597
 802348c:	680b      	ldr	r3, [r1, #0]
 802348e:	1d1a      	adds	r2, r3, #4
 8023490:	681b      	ldr	r3, [r3, #0]
 8023492:	600a      	str	r2, [r1, #0]
 8023494:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8023498:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802349c:	2301      	movs	r3, #1
 802349e:	e0a3      	b.n	80235e8 <_printf_i+0x1f4>
 80234a0:	6825      	ldr	r5, [r4, #0]
 80234a2:	6808      	ldr	r0, [r1, #0]
 80234a4:	062e      	lsls	r6, r5, #24
 80234a6:	f100 0304 	add.w	r3, r0, #4
 80234aa:	d50a      	bpl.n	80234c2 <_printf_i+0xce>
 80234ac:	6805      	ldr	r5, [r0, #0]
 80234ae:	600b      	str	r3, [r1, #0]
 80234b0:	2d00      	cmp	r5, #0
 80234b2:	da03      	bge.n	80234bc <_printf_i+0xc8>
 80234b4:	232d      	movs	r3, #45	; 0x2d
 80234b6:	426d      	negs	r5, r5
 80234b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80234bc:	485e      	ldr	r0, [pc, #376]	; (8023638 <_printf_i+0x244>)
 80234be:	230a      	movs	r3, #10
 80234c0:	e019      	b.n	80234f6 <_printf_i+0x102>
 80234c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80234c6:	6805      	ldr	r5, [r0, #0]
 80234c8:	600b      	str	r3, [r1, #0]
 80234ca:	bf18      	it	ne
 80234cc:	b22d      	sxthne	r5, r5
 80234ce:	e7ef      	b.n	80234b0 <_printf_i+0xbc>
 80234d0:	680b      	ldr	r3, [r1, #0]
 80234d2:	6825      	ldr	r5, [r4, #0]
 80234d4:	1d18      	adds	r0, r3, #4
 80234d6:	6008      	str	r0, [r1, #0]
 80234d8:	0628      	lsls	r0, r5, #24
 80234da:	d501      	bpl.n	80234e0 <_printf_i+0xec>
 80234dc:	681d      	ldr	r5, [r3, #0]
 80234de:	e002      	b.n	80234e6 <_printf_i+0xf2>
 80234e0:	0669      	lsls	r1, r5, #25
 80234e2:	d5fb      	bpl.n	80234dc <_printf_i+0xe8>
 80234e4:	881d      	ldrh	r5, [r3, #0]
 80234e6:	4854      	ldr	r0, [pc, #336]	; (8023638 <_printf_i+0x244>)
 80234e8:	2f6f      	cmp	r7, #111	; 0x6f
 80234ea:	bf0c      	ite	eq
 80234ec:	2308      	moveq	r3, #8
 80234ee:	230a      	movne	r3, #10
 80234f0:	2100      	movs	r1, #0
 80234f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80234f6:	6866      	ldr	r6, [r4, #4]
 80234f8:	60a6      	str	r6, [r4, #8]
 80234fa:	2e00      	cmp	r6, #0
 80234fc:	bfa2      	ittt	ge
 80234fe:	6821      	ldrge	r1, [r4, #0]
 8023500:	f021 0104 	bicge.w	r1, r1, #4
 8023504:	6021      	strge	r1, [r4, #0]
 8023506:	b90d      	cbnz	r5, 802350c <_printf_i+0x118>
 8023508:	2e00      	cmp	r6, #0
 802350a:	d04d      	beq.n	80235a8 <_printf_i+0x1b4>
 802350c:	4616      	mov	r6, r2
 802350e:	fbb5 f1f3 	udiv	r1, r5, r3
 8023512:	fb03 5711 	mls	r7, r3, r1, r5
 8023516:	5dc7      	ldrb	r7, [r0, r7]
 8023518:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802351c:	462f      	mov	r7, r5
 802351e:	42bb      	cmp	r3, r7
 8023520:	460d      	mov	r5, r1
 8023522:	d9f4      	bls.n	802350e <_printf_i+0x11a>
 8023524:	2b08      	cmp	r3, #8
 8023526:	d10b      	bne.n	8023540 <_printf_i+0x14c>
 8023528:	6823      	ldr	r3, [r4, #0]
 802352a:	07df      	lsls	r7, r3, #31
 802352c:	d508      	bpl.n	8023540 <_printf_i+0x14c>
 802352e:	6923      	ldr	r3, [r4, #16]
 8023530:	6861      	ldr	r1, [r4, #4]
 8023532:	4299      	cmp	r1, r3
 8023534:	bfde      	ittt	le
 8023536:	2330      	movle	r3, #48	; 0x30
 8023538:	f806 3c01 	strble.w	r3, [r6, #-1]
 802353c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023540:	1b92      	subs	r2, r2, r6
 8023542:	6122      	str	r2, [r4, #16]
 8023544:	f8cd a000 	str.w	sl, [sp]
 8023548:	464b      	mov	r3, r9
 802354a:	aa03      	add	r2, sp, #12
 802354c:	4621      	mov	r1, r4
 802354e:	4640      	mov	r0, r8
 8023550:	f7ff fee2 	bl	8023318 <_printf_common>
 8023554:	3001      	adds	r0, #1
 8023556:	d14c      	bne.n	80235f2 <_printf_i+0x1fe>
 8023558:	f04f 30ff 	mov.w	r0, #4294967295
 802355c:	b004      	add	sp, #16
 802355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023562:	4835      	ldr	r0, [pc, #212]	; (8023638 <_printf_i+0x244>)
 8023564:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8023568:	6823      	ldr	r3, [r4, #0]
 802356a:	680e      	ldr	r6, [r1, #0]
 802356c:	061f      	lsls	r7, r3, #24
 802356e:	f856 5b04 	ldr.w	r5, [r6], #4
 8023572:	600e      	str	r6, [r1, #0]
 8023574:	d514      	bpl.n	80235a0 <_printf_i+0x1ac>
 8023576:	07d9      	lsls	r1, r3, #31
 8023578:	bf44      	itt	mi
 802357a:	f043 0320 	orrmi.w	r3, r3, #32
 802357e:	6023      	strmi	r3, [r4, #0]
 8023580:	b91d      	cbnz	r5, 802358a <_printf_i+0x196>
 8023582:	6823      	ldr	r3, [r4, #0]
 8023584:	f023 0320 	bic.w	r3, r3, #32
 8023588:	6023      	str	r3, [r4, #0]
 802358a:	2310      	movs	r3, #16
 802358c:	e7b0      	b.n	80234f0 <_printf_i+0xfc>
 802358e:	6823      	ldr	r3, [r4, #0]
 8023590:	f043 0320 	orr.w	r3, r3, #32
 8023594:	6023      	str	r3, [r4, #0]
 8023596:	2378      	movs	r3, #120	; 0x78
 8023598:	4828      	ldr	r0, [pc, #160]	; (802363c <_printf_i+0x248>)
 802359a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802359e:	e7e3      	b.n	8023568 <_printf_i+0x174>
 80235a0:	065e      	lsls	r6, r3, #25
 80235a2:	bf48      	it	mi
 80235a4:	b2ad      	uxthmi	r5, r5
 80235a6:	e7e6      	b.n	8023576 <_printf_i+0x182>
 80235a8:	4616      	mov	r6, r2
 80235aa:	e7bb      	b.n	8023524 <_printf_i+0x130>
 80235ac:	680b      	ldr	r3, [r1, #0]
 80235ae:	6826      	ldr	r6, [r4, #0]
 80235b0:	6960      	ldr	r0, [r4, #20]
 80235b2:	1d1d      	adds	r5, r3, #4
 80235b4:	600d      	str	r5, [r1, #0]
 80235b6:	0635      	lsls	r5, r6, #24
 80235b8:	681b      	ldr	r3, [r3, #0]
 80235ba:	d501      	bpl.n	80235c0 <_printf_i+0x1cc>
 80235bc:	6018      	str	r0, [r3, #0]
 80235be:	e002      	b.n	80235c6 <_printf_i+0x1d2>
 80235c0:	0671      	lsls	r1, r6, #25
 80235c2:	d5fb      	bpl.n	80235bc <_printf_i+0x1c8>
 80235c4:	8018      	strh	r0, [r3, #0]
 80235c6:	2300      	movs	r3, #0
 80235c8:	6123      	str	r3, [r4, #16]
 80235ca:	4616      	mov	r6, r2
 80235cc:	e7ba      	b.n	8023544 <_printf_i+0x150>
 80235ce:	680b      	ldr	r3, [r1, #0]
 80235d0:	1d1a      	adds	r2, r3, #4
 80235d2:	600a      	str	r2, [r1, #0]
 80235d4:	681e      	ldr	r6, [r3, #0]
 80235d6:	6862      	ldr	r2, [r4, #4]
 80235d8:	2100      	movs	r1, #0
 80235da:	4630      	mov	r0, r6
 80235dc:	f7dc fe10 	bl	8000200 <memchr>
 80235e0:	b108      	cbz	r0, 80235e6 <_printf_i+0x1f2>
 80235e2:	1b80      	subs	r0, r0, r6
 80235e4:	6060      	str	r0, [r4, #4]
 80235e6:	6863      	ldr	r3, [r4, #4]
 80235e8:	6123      	str	r3, [r4, #16]
 80235ea:	2300      	movs	r3, #0
 80235ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80235f0:	e7a8      	b.n	8023544 <_printf_i+0x150>
 80235f2:	6923      	ldr	r3, [r4, #16]
 80235f4:	4632      	mov	r2, r6
 80235f6:	4649      	mov	r1, r9
 80235f8:	4640      	mov	r0, r8
 80235fa:	47d0      	blx	sl
 80235fc:	3001      	adds	r0, #1
 80235fe:	d0ab      	beq.n	8023558 <_printf_i+0x164>
 8023600:	6823      	ldr	r3, [r4, #0]
 8023602:	079b      	lsls	r3, r3, #30
 8023604:	d413      	bmi.n	802362e <_printf_i+0x23a>
 8023606:	68e0      	ldr	r0, [r4, #12]
 8023608:	9b03      	ldr	r3, [sp, #12]
 802360a:	4298      	cmp	r0, r3
 802360c:	bfb8      	it	lt
 802360e:	4618      	movlt	r0, r3
 8023610:	e7a4      	b.n	802355c <_printf_i+0x168>
 8023612:	2301      	movs	r3, #1
 8023614:	4632      	mov	r2, r6
 8023616:	4649      	mov	r1, r9
 8023618:	4640      	mov	r0, r8
 802361a:	47d0      	blx	sl
 802361c:	3001      	adds	r0, #1
 802361e:	d09b      	beq.n	8023558 <_printf_i+0x164>
 8023620:	3501      	adds	r5, #1
 8023622:	68e3      	ldr	r3, [r4, #12]
 8023624:	9903      	ldr	r1, [sp, #12]
 8023626:	1a5b      	subs	r3, r3, r1
 8023628:	42ab      	cmp	r3, r5
 802362a:	dcf2      	bgt.n	8023612 <_printf_i+0x21e>
 802362c:	e7eb      	b.n	8023606 <_printf_i+0x212>
 802362e:	2500      	movs	r5, #0
 8023630:	f104 0619 	add.w	r6, r4, #25
 8023634:	e7f5      	b.n	8023622 <_printf_i+0x22e>
 8023636:	bf00      	nop
 8023638:	080339a9 	.word	0x080339a9
 802363c:	080339ba 	.word	0x080339ba

08023640 <iprintf>:
 8023640:	b40f      	push	{r0, r1, r2, r3}
 8023642:	4b0a      	ldr	r3, [pc, #40]	; (802366c <iprintf+0x2c>)
 8023644:	b513      	push	{r0, r1, r4, lr}
 8023646:	681c      	ldr	r4, [r3, #0]
 8023648:	b124      	cbz	r4, 8023654 <iprintf+0x14>
 802364a:	69a3      	ldr	r3, [r4, #24]
 802364c:	b913      	cbnz	r3, 8023654 <iprintf+0x14>
 802364e:	4620      	mov	r0, r4
 8023650:	f002 fc3e 	bl	8025ed0 <__sinit>
 8023654:	ab05      	add	r3, sp, #20
 8023656:	9a04      	ldr	r2, [sp, #16]
 8023658:	68a1      	ldr	r1, [r4, #8]
 802365a:	9301      	str	r3, [sp, #4]
 802365c:	4620      	mov	r0, r4
 802365e:	f7ff fa55 	bl	8022b0c <_vfiprintf_r>
 8023662:	b002      	add	sp, #8
 8023664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023668:	b004      	add	sp, #16
 802366a:	4770      	bx	lr
 802366c:	200005e4 	.word	0x200005e4

08023670 <putchar>:
 8023670:	4b09      	ldr	r3, [pc, #36]	; (8023698 <putchar+0x28>)
 8023672:	b513      	push	{r0, r1, r4, lr}
 8023674:	681c      	ldr	r4, [r3, #0]
 8023676:	4601      	mov	r1, r0
 8023678:	b134      	cbz	r4, 8023688 <putchar+0x18>
 802367a:	69a3      	ldr	r3, [r4, #24]
 802367c:	b923      	cbnz	r3, 8023688 <putchar+0x18>
 802367e:	9001      	str	r0, [sp, #4]
 8023680:	4620      	mov	r0, r4
 8023682:	f002 fc25 	bl	8025ed0 <__sinit>
 8023686:	9901      	ldr	r1, [sp, #4]
 8023688:	68a2      	ldr	r2, [r4, #8]
 802368a:	4620      	mov	r0, r4
 802368c:	b002      	add	sp, #8
 802368e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023692:	f004 bac1 	b.w	8027c18 <_putc_r>
 8023696:	bf00      	nop
 8023698:	200005e4 	.word	0x200005e4

0802369c <_puts_r>:
 802369c:	b570      	push	{r4, r5, r6, lr}
 802369e:	460e      	mov	r6, r1
 80236a0:	4605      	mov	r5, r0
 80236a2:	b118      	cbz	r0, 80236ac <_puts_r+0x10>
 80236a4:	6983      	ldr	r3, [r0, #24]
 80236a6:	b90b      	cbnz	r3, 80236ac <_puts_r+0x10>
 80236a8:	f002 fc12 	bl	8025ed0 <__sinit>
 80236ac:	69ab      	ldr	r3, [r5, #24]
 80236ae:	68ac      	ldr	r4, [r5, #8]
 80236b0:	b913      	cbnz	r3, 80236b8 <_puts_r+0x1c>
 80236b2:	4628      	mov	r0, r5
 80236b4:	f002 fc0c 	bl	8025ed0 <__sinit>
 80236b8:	4b2c      	ldr	r3, [pc, #176]	; (802376c <_puts_r+0xd0>)
 80236ba:	429c      	cmp	r4, r3
 80236bc:	d120      	bne.n	8023700 <_puts_r+0x64>
 80236be:	686c      	ldr	r4, [r5, #4]
 80236c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80236c2:	07db      	lsls	r3, r3, #31
 80236c4:	d405      	bmi.n	80236d2 <_puts_r+0x36>
 80236c6:	89a3      	ldrh	r3, [r4, #12]
 80236c8:	0598      	lsls	r0, r3, #22
 80236ca:	d402      	bmi.n	80236d2 <_puts_r+0x36>
 80236cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80236ce:	f003 f8b1 	bl	8026834 <__retarget_lock_acquire_recursive>
 80236d2:	89a3      	ldrh	r3, [r4, #12]
 80236d4:	0719      	lsls	r1, r3, #28
 80236d6:	d51d      	bpl.n	8023714 <_puts_r+0x78>
 80236d8:	6923      	ldr	r3, [r4, #16]
 80236da:	b1db      	cbz	r3, 8023714 <_puts_r+0x78>
 80236dc:	3e01      	subs	r6, #1
 80236de:	68a3      	ldr	r3, [r4, #8]
 80236e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80236e4:	3b01      	subs	r3, #1
 80236e6:	60a3      	str	r3, [r4, #8]
 80236e8:	bb39      	cbnz	r1, 802373a <_puts_r+0x9e>
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	da38      	bge.n	8023760 <_puts_r+0xc4>
 80236ee:	4622      	mov	r2, r4
 80236f0:	210a      	movs	r1, #10
 80236f2:	4628      	mov	r0, r5
 80236f4:	f001 fb32 	bl	8024d5c <__swbuf_r>
 80236f8:	3001      	adds	r0, #1
 80236fa:	d011      	beq.n	8023720 <_puts_r+0x84>
 80236fc:	250a      	movs	r5, #10
 80236fe:	e011      	b.n	8023724 <_puts_r+0x88>
 8023700:	4b1b      	ldr	r3, [pc, #108]	; (8023770 <_puts_r+0xd4>)
 8023702:	429c      	cmp	r4, r3
 8023704:	d101      	bne.n	802370a <_puts_r+0x6e>
 8023706:	68ac      	ldr	r4, [r5, #8]
 8023708:	e7da      	b.n	80236c0 <_puts_r+0x24>
 802370a:	4b1a      	ldr	r3, [pc, #104]	; (8023774 <_puts_r+0xd8>)
 802370c:	429c      	cmp	r4, r3
 802370e:	bf08      	it	eq
 8023710:	68ec      	ldreq	r4, [r5, #12]
 8023712:	e7d5      	b.n	80236c0 <_puts_r+0x24>
 8023714:	4621      	mov	r1, r4
 8023716:	4628      	mov	r0, r5
 8023718:	f001 fb84 	bl	8024e24 <__swsetup_r>
 802371c:	2800      	cmp	r0, #0
 802371e:	d0dd      	beq.n	80236dc <_puts_r+0x40>
 8023720:	f04f 35ff 	mov.w	r5, #4294967295
 8023724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023726:	07da      	lsls	r2, r3, #31
 8023728:	d405      	bmi.n	8023736 <_puts_r+0x9a>
 802372a:	89a3      	ldrh	r3, [r4, #12]
 802372c:	059b      	lsls	r3, r3, #22
 802372e:	d402      	bmi.n	8023736 <_puts_r+0x9a>
 8023730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023732:	f003 f881 	bl	8026838 <__retarget_lock_release_recursive>
 8023736:	4628      	mov	r0, r5
 8023738:	bd70      	pop	{r4, r5, r6, pc}
 802373a:	2b00      	cmp	r3, #0
 802373c:	da04      	bge.n	8023748 <_puts_r+0xac>
 802373e:	69a2      	ldr	r2, [r4, #24]
 8023740:	429a      	cmp	r2, r3
 8023742:	dc06      	bgt.n	8023752 <_puts_r+0xb6>
 8023744:	290a      	cmp	r1, #10
 8023746:	d004      	beq.n	8023752 <_puts_r+0xb6>
 8023748:	6823      	ldr	r3, [r4, #0]
 802374a:	1c5a      	adds	r2, r3, #1
 802374c:	6022      	str	r2, [r4, #0]
 802374e:	7019      	strb	r1, [r3, #0]
 8023750:	e7c5      	b.n	80236de <_puts_r+0x42>
 8023752:	4622      	mov	r2, r4
 8023754:	4628      	mov	r0, r5
 8023756:	f001 fb01 	bl	8024d5c <__swbuf_r>
 802375a:	3001      	adds	r0, #1
 802375c:	d1bf      	bne.n	80236de <_puts_r+0x42>
 802375e:	e7df      	b.n	8023720 <_puts_r+0x84>
 8023760:	6823      	ldr	r3, [r4, #0]
 8023762:	250a      	movs	r5, #10
 8023764:	1c5a      	adds	r2, r3, #1
 8023766:	6022      	str	r2, [r4, #0]
 8023768:	701d      	strb	r5, [r3, #0]
 802376a:	e7db      	b.n	8023724 <_puts_r+0x88>
 802376c:	08033bf8 	.word	0x08033bf8
 8023770:	08033c18 	.word	0x08033c18
 8023774:	08033bd8 	.word	0x08033bd8

08023778 <puts>:
 8023778:	4b02      	ldr	r3, [pc, #8]	; (8023784 <puts+0xc>)
 802377a:	4601      	mov	r1, r0
 802377c:	6818      	ldr	r0, [r3, #0]
 802377e:	f7ff bf8d 	b.w	802369c <_puts_r>
 8023782:	bf00      	nop
 8023784:	200005e4 	.word	0x200005e4

08023788 <srand>:
 8023788:	b538      	push	{r3, r4, r5, lr}
 802378a:	4b10      	ldr	r3, [pc, #64]	; (80237cc <srand+0x44>)
 802378c:	681d      	ldr	r5, [r3, #0]
 802378e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8023790:	4604      	mov	r4, r0
 8023792:	b9b3      	cbnz	r3, 80237c2 <srand+0x3a>
 8023794:	2018      	movs	r0, #24
 8023796:	f7fe fe09 	bl	80223ac <malloc>
 802379a:	4602      	mov	r2, r0
 802379c:	63a8      	str	r0, [r5, #56]	; 0x38
 802379e:	b920      	cbnz	r0, 80237aa <srand+0x22>
 80237a0:	4b0b      	ldr	r3, [pc, #44]	; (80237d0 <srand+0x48>)
 80237a2:	480c      	ldr	r0, [pc, #48]	; (80237d4 <srand+0x4c>)
 80237a4:	2142      	movs	r1, #66	; 0x42
 80237a6:	f001 fbab 	bl	8024f00 <__assert_func>
 80237aa:	490b      	ldr	r1, [pc, #44]	; (80237d8 <srand+0x50>)
 80237ac:	4b0b      	ldr	r3, [pc, #44]	; (80237dc <srand+0x54>)
 80237ae:	e9c0 1300 	strd	r1, r3, [r0]
 80237b2:	4b0b      	ldr	r3, [pc, #44]	; (80237e0 <srand+0x58>)
 80237b4:	6083      	str	r3, [r0, #8]
 80237b6:	230b      	movs	r3, #11
 80237b8:	8183      	strh	r3, [r0, #12]
 80237ba:	2100      	movs	r1, #0
 80237bc:	2001      	movs	r0, #1
 80237be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80237c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80237c4:	2200      	movs	r2, #0
 80237c6:	611c      	str	r4, [r3, #16]
 80237c8:	615a      	str	r2, [r3, #20]
 80237ca:	bd38      	pop	{r3, r4, r5, pc}
 80237cc:	200005e4 	.word	0x200005e4
 80237d0:	080338ac 	.word	0x080338ac
 80237d4:	080339cb 	.word	0x080339cb
 80237d8:	abcd330e 	.word	0xabcd330e
 80237dc:	e66d1234 	.word	0xe66d1234
 80237e0:	0005deec 	.word	0x0005deec

080237e4 <realloc>:
 80237e4:	4b02      	ldr	r3, [pc, #8]	; (80237f0 <realloc+0xc>)
 80237e6:	460a      	mov	r2, r1
 80237e8:	4601      	mov	r1, r0
 80237ea:	6818      	ldr	r0, [r3, #0]
 80237ec:	f003 bd75 	b.w	80272da <_realloc_r>
 80237f0:	200005e4 	.word	0x200005e4

080237f4 <_sbrk_r>:
 80237f4:	b538      	push	{r3, r4, r5, lr}
 80237f6:	4d06      	ldr	r5, [pc, #24]	; (8023810 <_sbrk_r+0x1c>)
 80237f8:	2300      	movs	r3, #0
 80237fa:	4604      	mov	r4, r0
 80237fc:	4608      	mov	r0, r1
 80237fe:	602b      	str	r3, [r5, #0]
 8023800:	f7e0 fc76 	bl	80040f0 <_sbrk>
 8023804:	1c43      	adds	r3, r0, #1
 8023806:	d102      	bne.n	802380e <_sbrk_r+0x1a>
 8023808:	682b      	ldr	r3, [r5, #0]
 802380a:	b103      	cbz	r3, 802380e <_sbrk_r+0x1a>
 802380c:	6023      	str	r3, [r4, #0]
 802380e:	bd38      	pop	{r3, r4, r5, pc}
 8023810:	20001a24 	.word	0x20001a24

08023814 <sniprintf>:
 8023814:	b40c      	push	{r2, r3}
 8023816:	b530      	push	{r4, r5, lr}
 8023818:	4b17      	ldr	r3, [pc, #92]	; (8023878 <sniprintf+0x64>)
 802381a:	1e0c      	subs	r4, r1, #0
 802381c:	681d      	ldr	r5, [r3, #0]
 802381e:	b09d      	sub	sp, #116	; 0x74
 8023820:	da08      	bge.n	8023834 <sniprintf+0x20>
 8023822:	238b      	movs	r3, #139	; 0x8b
 8023824:	602b      	str	r3, [r5, #0]
 8023826:	f04f 30ff 	mov.w	r0, #4294967295
 802382a:	b01d      	add	sp, #116	; 0x74
 802382c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023830:	b002      	add	sp, #8
 8023832:	4770      	bx	lr
 8023834:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023838:	f8ad 3014 	strh.w	r3, [sp, #20]
 802383c:	bf14      	ite	ne
 802383e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8023842:	4623      	moveq	r3, r4
 8023844:	9304      	str	r3, [sp, #16]
 8023846:	9307      	str	r3, [sp, #28]
 8023848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802384c:	9002      	str	r0, [sp, #8]
 802384e:	9006      	str	r0, [sp, #24]
 8023850:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023854:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023856:	ab21      	add	r3, sp, #132	; 0x84
 8023858:	a902      	add	r1, sp, #8
 802385a:	4628      	mov	r0, r5
 802385c:	9301      	str	r3, [sp, #4]
 802385e:	f003 fdbd 	bl	80273dc <_svfiprintf_r>
 8023862:	1c43      	adds	r3, r0, #1
 8023864:	bfbc      	itt	lt
 8023866:	238b      	movlt	r3, #139	; 0x8b
 8023868:	602b      	strlt	r3, [r5, #0]
 802386a:	2c00      	cmp	r4, #0
 802386c:	d0dd      	beq.n	802382a <sniprintf+0x16>
 802386e:	9b02      	ldr	r3, [sp, #8]
 8023870:	2200      	movs	r2, #0
 8023872:	701a      	strb	r2, [r3, #0]
 8023874:	e7d9      	b.n	802382a <sniprintf+0x16>
 8023876:	bf00      	nop
 8023878:	200005e4 	.word	0x200005e4

0802387c <siprintf>:
 802387c:	b40e      	push	{r1, r2, r3}
 802387e:	b500      	push	{lr}
 8023880:	b09c      	sub	sp, #112	; 0x70
 8023882:	ab1d      	add	r3, sp, #116	; 0x74
 8023884:	9002      	str	r0, [sp, #8]
 8023886:	9006      	str	r0, [sp, #24]
 8023888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802388c:	4809      	ldr	r0, [pc, #36]	; (80238b4 <siprintf+0x38>)
 802388e:	9107      	str	r1, [sp, #28]
 8023890:	9104      	str	r1, [sp, #16]
 8023892:	4909      	ldr	r1, [pc, #36]	; (80238b8 <siprintf+0x3c>)
 8023894:	f853 2b04 	ldr.w	r2, [r3], #4
 8023898:	9105      	str	r1, [sp, #20]
 802389a:	6800      	ldr	r0, [r0, #0]
 802389c:	9301      	str	r3, [sp, #4]
 802389e:	a902      	add	r1, sp, #8
 80238a0:	f003 fd9c 	bl	80273dc <_svfiprintf_r>
 80238a4:	9b02      	ldr	r3, [sp, #8]
 80238a6:	2200      	movs	r2, #0
 80238a8:	701a      	strb	r2, [r3, #0]
 80238aa:	b01c      	add	sp, #112	; 0x70
 80238ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80238b0:	b003      	add	sp, #12
 80238b2:	4770      	bx	lr
 80238b4:	200005e4 	.word	0x200005e4
 80238b8:	ffff0208 	.word	0xffff0208

080238bc <siscanf>:
 80238bc:	b40e      	push	{r1, r2, r3}
 80238be:	b510      	push	{r4, lr}
 80238c0:	b09f      	sub	sp, #124	; 0x7c
 80238c2:	ac21      	add	r4, sp, #132	; 0x84
 80238c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80238c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80238cc:	9201      	str	r2, [sp, #4]
 80238ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80238d2:	9004      	str	r0, [sp, #16]
 80238d4:	9008      	str	r0, [sp, #32]
 80238d6:	f7dc fc85 	bl	80001e4 <strlen>
 80238da:	4b0c      	ldr	r3, [pc, #48]	; (802390c <siscanf+0x50>)
 80238dc:	9005      	str	r0, [sp, #20]
 80238de:	9009      	str	r0, [sp, #36]	; 0x24
 80238e0:	930d      	str	r3, [sp, #52]	; 0x34
 80238e2:	480b      	ldr	r0, [pc, #44]	; (8023910 <siscanf+0x54>)
 80238e4:	9a01      	ldr	r2, [sp, #4]
 80238e6:	6800      	ldr	r0, [r0, #0]
 80238e8:	9403      	str	r4, [sp, #12]
 80238ea:	2300      	movs	r3, #0
 80238ec:	9311      	str	r3, [sp, #68]	; 0x44
 80238ee:	9316      	str	r3, [sp, #88]	; 0x58
 80238f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80238f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80238f8:	a904      	add	r1, sp, #16
 80238fa:	4623      	mov	r3, r4
 80238fc:	f003 fec8 	bl	8027690 <__ssvfiscanf_r>
 8023900:	b01f      	add	sp, #124	; 0x7c
 8023902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023906:	b003      	add	sp, #12
 8023908:	4770      	bx	lr
 802390a:	bf00      	nop
 802390c:	08023937 	.word	0x08023937
 8023910:	200005e4 	.word	0x200005e4

08023914 <__sread>:
 8023914:	b510      	push	{r4, lr}
 8023916:	460c      	mov	r4, r1
 8023918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802391c:	f004 f9c4 	bl	8027ca8 <_read_r>
 8023920:	2800      	cmp	r0, #0
 8023922:	bfab      	itete	ge
 8023924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023926:	89a3      	ldrhlt	r3, [r4, #12]
 8023928:	181b      	addge	r3, r3, r0
 802392a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802392e:	bfac      	ite	ge
 8023930:	6563      	strge	r3, [r4, #84]	; 0x54
 8023932:	81a3      	strhlt	r3, [r4, #12]
 8023934:	bd10      	pop	{r4, pc}

08023936 <__seofread>:
 8023936:	2000      	movs	r0, #0
 8023938:	4770      	bx	lr

0802393a <__swrite>:
 802393a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802393e:	461f      	mov	r7, r3
 8023940:	898b      	ldrh	r3, [r1, #12]
 8023942:	05db      	lsls	r3, r3, #23
 8023944:	4605      	mov	r5, r0
 8023946:	460c      	mov	r4, r1
 8023948:	4616      	mov	r6, r2
 802394a:	d505      	bpl.n	8023958 <__swrite+0x1e>
 802394c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023950:	2302      	movs	r3, #2
 8023952:	2200      	movs	r2, #0
 8023954:	f002 ff72 	bl	802683c <_lseek_r>
 8023958:	89a3      	ldrh	r3, [r4, #12]
 802395a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802395e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023962:	81a3      	strh	r3, [r4, #12]
 8023964:	4632      	mov	r2, r6
 8023966:	463b      	mov	r3, r7
 8023968:	4628      	mov	r0, r5
 802396a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802396e:	f001 ba47 	b.w	8024e00 <_write_r>

08023972 <__sseek>:
 8023972:	b510      	push	{r4, lr}
 8023974:	460c      	mov	r4, r1
 8023976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802397a:	f002 ff5f 	bl	802683c <_lseek_r>
 802397e:	1c43      	adds	r3, r0, #1
 8023980:	89a3      	ldrh	r3, [r4, #12]
 8023982:	bf15      	itete	ne
 8023984:	6560      	strne	r0, [r4, #84]	; 0x54
 8023986:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802398a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802398e:	81a3      	strheq	r3, [r4, #12]
 8023990:	bf18      	it	ne
 8023992:	81a3      	strhne	r3, [r4, #12]
 8023994:	bd10      	pop	{r4, pc}

08023996 <__sclose>:
 8023996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802399a:	f001 bacf 	b.w	8024f3c <_close_r>

0802399e <strchr>:
 802399e:	b2c9      	uxtb	r1, r1
 80239a0:	4603      	mov	r3, r0
 80239a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239a6:	b11a      	cbz	r2, 80239b0 <strchr+0x12>
 80239a8:	428a      	cmp	r2, r1
 80239aa:	d1f9      	bne.n	80239a0 <strchr+0x2>
 80239ac:	4618      	mov	r0, r3
 80239ae:	4770      	bx	lr
 80239b0:	2900      	cmp	r1, #0
 80239b2:	bf18      	it	ne
 80239b4:	2300      	movne	r3, #0
 80239b6:	e7f9      	b.n	80239ac <strchr+0xe>

080239b8 <strcpy>:
 80239b8:	4603      	mov	r3, r0
 80239ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80239be:	f803 2b01 	strb.w	r2, [r3], #1
 80239c2:	2a00      	cmp	r2, #0
 80239c4:	d1f9      	bne.n	80239ba <strcpy+0x2>
 80239c6:	4770      	bx	lr

080239c8 <strncmp>:
 80239c8:	b510      	push	{r4, lr}
 80239ca:	b16a      	cbz	r2, 80239e8 <strncmp+0x20>
 80239cc:	3901      	subs	r1, #1
 80239ce:	1884      	adds	r4, r0, r2
 80239d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80239d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80239d8:	4293      	cmp	r3, r2
 80239da:	d103      	bne.n	80239e4 <strncmp+0x1c>
 80239dc:	42a0      	cmp	r0, r4
 80239de:	d001      	beq.n	80239e4 <strncmp+0x1c>
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d1f5      	bne.n	80239d0 <strncmp+0x8>
 80239e4:	1a98      	subs	r0, r3, r2
 80239e6:	bd10      	pop	{r4, pc}
 80239e8:	4610      	mov	r0, r2
 80239ea:	e7fc      	b.n	80239e6 <strncmp+0x1e>

080239ec <strncpy>:
 80239ec:	b510      	push	{r4, lr}
 80239ee:	3901      	subs	r1, #1
 80239f0:	4603      	mov	r3, r0
 80239f2:	b132      	cbz	r2, 8023a02 <strncpy+0x16>
 80239f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80239f8:	f803 4b01 	strb.w	r4, [r3], #1
 80239fc:	3a01      	subs	r2, #1
 80239fe:	2c00      	cmp	r4, #0
 8023a00:	d1f7      	bne.n	80239f2 <strncpy+0x6>
 8023a02:	441a      	add	r2, r3
 8023a04:	2100      	movs	r1, #0
 8023a06:	4293      	cmp	r3, r2
 8023a08:	d100      	bne.n	8023a0c <strncpy+0x20>
 8023a0a:	bd10      	pop	{r4, pc}
 8023a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8023a10:	e7f9      	b.n	8023a06 <strncpy+0x1a>

08023a12 <strstr>:
 8023a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a14:	780c      	ldrb	r4, [r1, #0]
 8023a16:	b164      	cbz	r4, 8023a32 <strstr+0x20>
 8023a18:	4603      	mov	r3, r0
 8023a1a:	781a      	ldrb	r2, [r3, #0]
 8023a1c:	4618      	mov	r0, r3
 8023a1e:	1c5e      	adds	r6, r3, #1
 8023a20:	b90a      	cbnz	r2, 8023a26 <strstr+0x14>
 8023a22:	4610      	mov	r0, r2
 8023a24:	e005      	b.n	8023a32 <strstr+0x20>
 8023a26:	4294      	cmp	r4, r2
 8023a28:	d108      	bne.n	8023a3c <strstr+0x2a>
 8023a2a:	460d      	mov	r5, r1
 8023a2c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8023a30:	b902      	cbnz	r2, 8023a34 <strstr+0x22>
 8023a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023a34:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8023a38:	4297      	cmp	r7, r2
 8023a3a:	d0f7      	beq.n	8023a2c <strstr+0x1a>
 8023a3c:	4633      	mov	r3, r6
 8023a3e:	e7ec      	b.n	8023a1a <strstr+0x8>

08023a40 <sulp>:
 8023a40:	b570      	push	{r4, r5, r6, lr}
 8023a42:	4604      	mov	r4, r0
 8023a44:	460d      	mov	r5, r1
 8023a46:	ec45 4b10 	vmov	d0, r4, r5
 8023a4a:	4616      	mov	r6, r2
 8023a4c:	f003 faf6 	bl	802703c <__ulp>
 8023a50:	ec51 0b10 	vmov	r0, r1, d0
 8023a54:	b17e      	cbz	r6, 8023a76 <sulp+0x36>
 8023a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8023a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	dd09      	ble.n	8023a76 <sulp+0x36>
 8023a62:	051b      	lsls	r3, r3, #20
 8023a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8023a68:	2400      	movs	r4, #0
 8023a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8023a6e:	4622      	mov	r2, r4
 8023a70:	462b      	mov	r3, r5
 8023a72:	f7dc fdd1 	bl	8000618 <__aeabi_dmul>
 8023a76:	bd70      	pop	{r4, r5, r6, pc}

08023a78 <_strtod_l>:
 8023a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a7c:	b0a3      	sub	sp, #140	; 0x8c
 8023a7e:	461f      	mov	r7, r3
 8023a80:	2300      	movs	r3, #0
 8023a82:	931e      	str	r3, [sp, #120]	; 0x78
 8023a84:	4ba4      	ldr	r3, [pc, #656]	; (8023d18 <_strtod_l+0x2a0>)
 8023a86:	9219      	str	r2, [sp, #100]	; 0x64
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	9307      	str	r3, [sp, #28]
 8023a8c:	4604      	mov	r4, r0
 8023a8e:	4618      	mov	r0, r3
 8023a90:	4688      	mov	r8, r1
 8023a92:	f7dc fba7 	bl	80001e4 <strlen>
 8023a96:	f04f 0a00 	mov.w	sl, #0
 8023a9a:	4605      	mov	r5, r0
 8023a9c:	f04f 0b00 	mov.w	fp, #0
 8023aa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023aa6:	781a      	ldrb	r2, [r3, #0]
 8023aa8:	2a2b      	cmp	r2, #43	; 0x2b
 8023aaa:	d04c      	beq.n	8023b46 <_strtod_l+0xce>
 8023aac:	d839      	bhi.n	8023b22 <_strtod_l+0xaa>
 8023aae:	2a0d      	cmp	r2, #13
 8023ab0:	d832      	bhi.n	8023b18 <_strtod_l+0xa0>
 8023ab2:	2a08      	cmp	r2, #8
 8023ab4:	d832      	bhi.n	8023b1c <_strtod_l+0xa4>
 8023ab6:	2a00      	cmp	r2, #0
 8023ab8:	d03c      	beq.n	8023b34 <_strtod_l+0xbc>
 8023aba:	2300      	movs	r3, #0
 8023abc:	930e      	str	r3, [sp, #56]	; 0x38
 8023abe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8023ac0:	7833      	ldrb	r3, [r6, #0]
 8023ac2:	2b30      	cmp	r3, #48	; 0x30
 8023ac4:	f040 80b4 	bne.w	8023c30 <_strtod_l+0x1b8>
 8023ac8:	7873      	ldrb	r3, [r6, #1]
 8023aca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8023ace:	2b58      	cmp	r3, #88	; 0x58
 8023ad0:	d16c      	bne.n	8023bac <_strtod_l+0x134>
 8023ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ad4:	9301      	str	r3, [sp, #4]
 8023ad6:	ab1e      	add	r3, sp, #120	; 0x78
 8023ad8:	9702      	str	r7, [sp, #8]
 8023ada:	9300      	str	r3, [sp, #0]
 8023adc:	4a8f      	ldr	r2, [pc, #572]	; (8023d1c <_strtod_l+0x2a4>)
 8023ade:	ab1f      	add	r3, sp, #124	; 0x7c
 8023ae0:	a91d      	add	r1, sp, #116	; 0x74
 8023ae2:	4620      	mov	r0, r4
 8023ae4:	f002 fb16 	bl	8026114 <__gethex>
 8023ae8:	f010 0707 	ands.w	r7, r0, #7
 8023aec:	4605      	mov	r5, r0
 8023aee:	d005      	beq.n	8023afc <_strtod_l+0x84>
 8023af0:	2f06      	cmp	r7, #6
 8023af2:	d12a      	bne.n	8023b4a <_strtod_l+0xd2>
 8023af4:	3601      	adds	r6, #1
 8023af6:	2300      	movs	r3, #0
 8023af8:	961d      	str	r6, [sp, #116]	; 0x74
 8023afa:	930e      	str	r3, [sp, #56]	; 0x38
 8023afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	f040 8596 	bne.w	8024630 <_strtod_l+0xbb8>
 8023b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b06:	b1db      	cbz	r3, 8023b40 <_strtod_l+0xc8>
 8023b08:	4652      	mov	r2, sl
 8023b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8023b0e:	ec43 2b10 	vmov	d0, r2, r3
 8023b12:	b023      	add	sp, #140	; 0x8c
 8023b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b18:	2a20      	cmp	r2, #32
 8023b1a:	d1ce      	bne.n	8023aba <_strtod_l+0x42>
 8023b1c:	3301      	adds	r3, #1
 8023b1e:	931d      	str	r3, [sp, #116]	; 0x74
 8023b20:	e7c0      	b.n	8023aa4 <_strtod_l+0x2c>
 8023b22:	2a2d      	cmp	r2, #45	; 0x2d
 8023b24:	d1c9      	bne.n	8023aba <_strtod_l+0x42>
 8023b26:	2201      	movs	r2, #1
 8023b28:	920e      	str	r2, [sp, #56]	; 0x38
 8023b2a:	1c5a      	adds	r2, r3, #1
 8023b2c:	921d      	str	r2, [sp, #116]	; 0x74
 8023b2e:	785b      	ldrb	r3, [r3, #1]
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	d1c4      	bne.n	8023abe <_strtod_l+0x46>
 8023b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023b36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	f040 8576 	bne.w	802462c <_strtod_l+0xbb4>
 8023b40:	4652      	mov	r2, sl
 8023b42:	465b      	mov	r3, fp
 8023b44:	e7e3      	b.n	8023b0e <_strtod_l+0x96>
 8023b46:	2200      	movs	r2, #0
 8023b48:	e7ee      	b.n	8023b28 <_strtod_l+0xb0>
 8023b4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023b4c:	b13a      	cbz	r2, 8023b5e <_strtod_l+0xe6>
 8023b4e:	2135      	movs	r1, #53	; 0x35
 8023b50:	a820      	add	r0, sp, #128	; 0x80
 8023b52:	f003 fb7e 	bl	8027252 <__copybits>
 8023b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023b58:	4620      	mov	r0, r4
 8023b5a:	f002 ff43 	bl	80269e4 <_Bfree>
 8023b5e:	3f01      	subs	r7, #1
 8023b60:	2f05      	cmp	r7, #5
 8023b62:	d807      	bhi.n	8023b74 <_strtod_l+0xfc>
 8023b64:	e8df f007 	tbb	[pc, r7]
 8023b68:	1d180b0e 	.word	0x1d180b0e
 8023b6c:	030e      	.short	0x030e
 8023b6e:	f04f 0b00 	mov.w	fp, #0
 8023b72:	46da      	mov	sl, fp
 8023b74:	0728      	lsls	r0, r5, #28
 8023b76:	d5c1      	bpl.n	8023afc <_strtod_l+0x84>
 8023b78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8023b7c:	e7be      	b.n	8023afc <_strtod_l+0x84>
 8023b7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8023b82:	e7f7      	b.n	8023b74 <_strtod_l+0xfc>
 8023b84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8023b88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8023b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8023b96:	e7ed      	b.n	8023b74 <_strtod_l+0xfc>
 8023b98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8023d20 <_strtod_l+0x2a8>
 8023b9c:	f04f 0a00 	mov.w	sl, #0
 8023ba0:	e7e8      	b.n	8023b74 <_strtod_l+0xfc>
 8023ba2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8023ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8023baa:	e7e3      	b.n	8023b74 <_strtod_l+0xfc>
 8023bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023bae:	1c5a      	adds	r2, r3, #1
 8023bb0:	921d      	str	r2, [sp, #116]	; 0x74
 8023bb2:	785b      	ldrb	r3, [r3, #1]
 8023bb4:	2b30      	cmp	r3, #48	; 0x30
 8023bb6:	d0f9      	beq.n	8023bac <_strtod_l+0x134>
 8023bb8:	2b00      	cmp	r3, #0
 8023bba:	d09f      	beq.n	8023afc <_strtod_l+0x84>
 8023bbc:	2301      	movs	r3, #1
 8023bbe:	f04f 0900 	mov.w	r9, #0
 8023bc2:	9304      	str	r3, [sp, #16]
 8023bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8023bc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8023bcc:	464f      	mov	r7, r9
 8023bce:	220a      	movs	r2, #10
 8023bd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023bd2:	7806      	ldrb	r6, [r0, #0]
 8023bd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8023bd8:	b2d9      	uxtb	r1, r3
 8023bda:	2909      	cmp	r1, #9
 8023bdc:	d92a      	bls.n	8023c34 <_strtod_l+0x1bc>
 8023bde:	9907      	ldr	r1, [sp, #28]
 8023be0:	462a      	mov	r2, r5
 8023be2:	f7ff fef1 	bl	80239c8 <strncmp>
 8023be6:	b398      	cbz	r0, 8023c50 <_strtod_l+0x1d8>
 8023be8:	2000      	movs	r0, #0
 8023bea:	4633      	mov	r3, r6
 8023bec:	463d      	mov	r5, r7
 8023bee:	9007      	str	r0, [sp, #28]
 8023bf0:	4602      	mov	r2, r0
 8023bf2:	2b65      	cmp	r3, #101	; 0x65
 8023bf4:	d001      	beq.n	8023bfa <_strtod_l+0x182>
 8023bf6:	2b45      	cmp	r3, #69	; 0x45
 8023bf8:	d118      	bne.n	8023c2c <_strtod_l+0x1b4>
 8023bfa:	b91d      	cbnz	r5, 8023c04 <_strtod_l+0x18c>
 8023bfc:	9b04      	ldr	r3, [sp, #16]
 8023bfe:	4303      	orrs	r3, r0
 8023c00:	d098      	beq.n	8023b34 <_strtod_l+0xbc>
 8023c02:	2500      	movs	r5, #0
 8023c04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8023c08:	f108 0301 	add.w	r3, r8, #1
 8023c0c:	931d      	str	r3, [sp, #116]	; 0x74
 8023c0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8023c12:	2b2b      	cmp	r3, #43	; 0x2b
 8023c14:	d075      	beq.n	8023d02 <_strtod_l+0x28a>
 8023c16:	2b2d      	cmp	r3, #45	; 0x2d
 8023c18:	d07b      	beq.n	8023d12 <_strtod_l+0x29a>
 8023c1a:	f04f 0c00 	mov.w	ip, #0
 8023c1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8023c22:	2909      	cmp	r1, #9
 8023c24:	f240 8082 	bls.w	8023d2c <_strtod_l+0x2b4>
 8023c28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8023c2c:	2600      	movs	r6, #0
 8023c2e:	e09d      	b.n	8023d6c <_strtod_l+0x2f4>
 8023c30:	2300      	movs	r3, #0
 8023c32:	e7c4      	b.n	8023bbe <_strtod_l+0x146>
 8023c34:	2f08      	cmp	r7, #8
 8023c36:	bfd8      	it	le
 8023c38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8023c3a:	f100 0001 	add.w	r0, r0, #1
 8023c3e:	bfda      	itte	le
 8023c40:	fb02 3301 	mlale	r3, r2, r1, r3
 8023c44:	9309      	strle	r3, [sp, #36]	; 0x24
 8023c46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8023c4a:	3701      	adds	r7, #1
 8023c4c:	901d      	str	r0, [sp, #116]	; 0x74
 8023c4e:	e7bf      	b.n	8023bd0 <_strtod_l+0x158>
 8023c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023c52:	195a      	adds	r2, r3, r5
 8023c54:	921d      	str	r2, [sp, #116]	; 0x74
 8023c56:	5d5b      	ldrb	r3, [r3, r5]
 8023c58:	2f00      	cmp	r7, #0
 8023c5a:	d037      	beq.n	8023ccc <_strtod_l+0x254>
 8023c5c:	9007      	str	r0, [sp, #28]
 8023c5e:	463d      	mov	r5, r7
 8023c60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8023c64:	2a09      	cmp	r2, #9
 8023c66:	d912      	bls.n	8023c8e <_strtod_l+0x216>
 8023c68:	2201      	movs	r2, #1
 8023c6a:	e7c2      	b.n	8023bf2 <_strtod_l+0x17a>
 8023c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023c6e:	1c5a      	adds	r2, r3, #1
 8023c70:	921d      	str	r2, [sp, #116]	; 0x74
 8023c72:	785b      	ldrb	r3, [r3, #1]
 8023c74:	3001      	adds	r0, #1
 8023c76:	2b30      	cmp	r3, #48	; 0x30
 8023c78:	d0f8      	beq.n	8023c6c <_strtod_l+0x1f4>
 8023c7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8023c7e:	2a08      	cmp	r2, #8
 8023c80:	f200 84db 	bhi.w	802463a <_strtod_l+0xbc2>
 8023c84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023c86:	9007      	str	r0, [sp, #28]
 8023c88:	2000      	movs	r0, #0
 8023c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8023c8c:	4605      	mov	r5, r0
 8023c8e:	3b30      	subs	r3, #48	; 0x30
 8023c90:	f100 0201 	add.w	r2, r0, #1
 8023c94:	d014      	beq.n	8023cc0 <_strtod_l+0x248>
 8023c96:	9907      	ldr	r1, [sp, #28]
 8023c98:	4411      	add	r1, r2
 8023c9a:	9107      	str	r1, [sp, #28]
 8023c9c:	462a      	mov	r2, r5
 8023c9e:	eb00 0e05 	add.w	lr, r0, r5
 8023ca2:	210a      	movs	r1, #10
 8023ca4:	4572      	cmp	r2, lr
 8023ca6:	d113      	bne.n	8023cd0 <_strtod_l+0x258>
 8023ca8:	182a      	adds	r2, r5, r0
 8023caa:	2a08      	cmp	r2, #8
 8023cac:	f105 0501 	add.w	r5, r5, #1
 8023cb0:	4405      	add	r5, r0
 8023cb2:	dc1c      	bgt.n	8023cee <_strtod_l+0x276>
 8023cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023cb6:	220a      	movs	r2, #10
 8023cb8:	fb02 3301 	mla	r3, r2, r1, r3
 8023cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8023cbe:	2200      	movs	r2, #0
 8023cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023cc2:	1c59      	adds	r1, r3, #1
 8023cc4:	911d      	str	r1, [sp, #116]	; 0x74
 8023cc6:	785b      	ldrb	r3, [r3, #1]
 8023cc8:	4610      	mov	r0, r2
 8023cca:	e7c9      	b.n	8023c60 <_strtod_l+0x1e8>
 8023ccc:	4638      	mov	r0, r7
 8023cce:	e7d2      	b.n	8023c76 <_strtod_l+0x1fe>
 8023cd0:	2a08      	cmp	r2, #8
 8023cd2:	dc04      	bgt.n	8023cde <_strtod_l+0x266>
 8023cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8023cd6:	434e      	muls	r6, r1
 8023cd8:	9609      	str	r6, [sp, #36]	; 0x24
 8023cda:	3201      	adds	r2, #1
 8023cdc:	e7e2      	b.n	8023ca4 <_strtod_l+0x22c>
 8023cde:	f102 0c01 	add.w	ip, r2, #1
 8023ce2:	f1bc 0f10 	cmp.w	ip, #16
 8023ce6:	bfd8      	it	le
 8023ce8:	fb01 f909 	mulle.w	r9, r1, r9
 8023cec:	e7f5      	b.n	8023cda <_strtod_l+0x262>
 8023cee:	2d10      	cmp	r5, #16
 8023cf0:	bfdc      	itt	le
 8023cf2:	220a      	movle	r2, #10
 8023cf4:	fb02 3909 	mlale	r9, r2, r9, r3
 8023cf8:	e7e1      	b.n	8023cbe <_strtod_l+0x246>
 8023cfa:	2300      	movs	r3, #0
 8023cfc:	9307      	str	r3, [sp, #28]
 8023cfe:	2201      	movs	r2, #1
 8023d00:	e77c      	b.n	8023bfc <_strtod_l+0x184>
 8023d02:	f04f 0c00 	mov.w	ip, #0
 8023d06:	f108 0302 	add.w	r3, r8, #2
 8023d0a:	931d      	str	r3, [sp, #116]	; 0x74
 8023d0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8023d10:	e785      	b.n	8023c1e <_strtod_l+0x1a6>
 8023d12:	f04f 0c01 	mov.w	ip, #1
 8023d16:	e7f6      	b.n	8023d06 <_strtod_l+0x28e>
 8023d18:	08033ca0 	.word	0x08033ca0
 8023d1c:	08033a2c 	.word	0x08033a2c
 8023d20:	7ff00000 	.word	0x7ff00000
 8023d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023d26:	1c59      	adds	r1, r3, #1
 8023d28:	911d      	str	r1, [sp, #116]	; 0x74
 8023d2a:	785b      	ldrb	r3, [r3, #1]
 8023d2c:	2b30      	cmp	r3, #48	; 0x30
 8023d2e:	d0f9      	beq.n	8023d24 <_strtod_l+0x2ac>
 8023d30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8023d34:	2908      	cmp	r1, #8
 8023d36:	f63f af79 	bhi.w	8023c2c <_strtod_l+0x1b4>
 8023d3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8023d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023d40:	9308      	str	r3, [sp, #32]
 8023d42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023d44:	1c59      	adds	r1, r3, #1
 8023d46:	911d      	str	r1, [sp, #116]	; 0x74
 8023d48:	785b      	ldrb	r3, [r3, #1]
 8023d4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8023d4e:	2e09      	cmp	r6, #9
 8023d50:	d937      	bls.n	8023dc2 <_strtod_l+0x34a>
 8023d52:	9e08      	ldr	r6, [sp, #32]
 8023d54:	1b89      	subs	r1, r1, r6
 8023d56:	2908      	cmp	r1, #8
 8023d58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8023d5c:	dc02      	bgt.n	8023d64 <_strtod_l+0x2ec>
 8023d5e:	4576      	cmp	r6, lr
 8023d60:	bfa8      	it	ge
 8023d62:	4676      	movge	r6, lr
 8023d64:	f1bc 0f00 	cmp.w	ip, #0
 8023d68:	d000      	beq.n	8023d6c <_strtod_l+0x2f4>
 8023d6a:	4276      	negs	r6, r6
 8023d6c:	2d00      	cmp	r5, #0
 8023d6e:	d14f      	bne.n	8023e10 <_strtod_l+0x398>
 8023d70:	9904      	ldr	r1, [sp, #16]
 8023d72:	4301      	orrs	r1, r0
 8023d74:	f47f aec2 	bne.w	8023afc <_strtod_l+0x84>
 8023d78:	2a00      	cmp	r2, #0
 8023d7a:	f47f aedb 	bne.w	8023b34 <_strtod_l+0xbc>
 8023d7e:	2b69      	cmp	r3, #105	; 0x69
 8023d80:	d027      	beq.n	8023dd2 <_strtod_l+0x35a>
 8023d82:	dc24      	bgt.n	8023dce <_strtod_l+0x356>
 8023d84:	2b49      	cmp	r3, #73	; 0x49
 8023d86:	d024      	beq.n	8023dd2 <_strtod_l+0x35a>
 8023d88:	2b4e      	cmp	r3, #78	; 0x4e
 8023d8a:	f47f aed3 	bne.w	8023b34 <_strtod_l+0xbc>
 8023d8e:	499e      	ldr	r1, [pc, #632]	; (8024008 <_strtod_l+0x590>)
 8023d90:	a81d      	add	r0, sp, #116	; 0x74
 8023d92:	f002 fc17 	bl	80265c4 <__match>
 8023d96:	2800      	cmp	r0, #0
 8023d98:	f43f aecc 	beq.w	8023b34 <_strtod_l+0xbc>
 8023d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023d9e:	781b      	ldrb	r3, [r3, #0]
 8023da0:	2b28      	cmp	r3, #40	; 0x28
 8023da2:	d12d      	bne.n	8023e00 <_strtod_l+0x388>
 8023da4:	4999      	ldr	r1, [pc, #612]	; (802400c <_strtod_l+0x594>)
 8023da6:	aa20      	add	r2, sp, #128	; 0x80
 8023da8:	a81d      	add	r0, sp, #116	; 0x74
 8023daa:	f002 fc1f 	bl	80265ec <__hexnan>
 8023dae:	2805      	cmp	r0, #5
 8023db0:	d126      	bne.n	8023e00 <_strtod_l+0x388>
 8023db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023db4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8023db8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8023dbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8023dc0:	e69c      	b.n	8023afc <_strtod_l+0x84>
 8023dc2:	210a      	movs	r1, #10
 8023dc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8023dc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8023dcc:	e7b9      	b.n	8023d42 <_strtod_l+0x2ca>
 8023dce:	2b6e      	cmp	r3, #110	; 0x6e
 8023dd0:	e7db      	b.n	8023d8a <_strtod_l+0x312>
 8023dd2:	498f      	ldr	r1, [pc, #572]	; (8024010 <_strtod_l+0x598>)
 8023dd4:	a81d      	add	r0, sp, #116	; 0x74
 8023dd6:	f002 fbf5 	bl	80265c4 <__match>
 8023dda:	2800      	cmp	r0, #0
 8023ddc:	f43f aeaa 	beq.w	8023b34 <_strtod_l+0xbc>
 8023de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023de2:	498c      	ldr	r1, [pc, #560]	; (8024014 <_strtod_l+0x59c>)
 8023de4:	3b01      	subs	r3, #1
 8023de6:	a81d      	add	r0, sp, #116	; 0x74
 8023de8:	931d      	str	r3, [sp, #116]	; 0x74
 8023dea:	f002 fbeb 	bl	80265c4 <__match>
 8023dee:	b910      	cbnz	r0, 8023df6 <_strtod_l+0x37e>
 8023df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023df2:	3301      	adds	r3, #1
 8023df4:	931d      	str	r3, [sp, #116]	; 0x74
 8023df6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8024024 <_strtod_l+0x5ac>
 8023dfa:	f04f 0a00 	mov.w	sl, #0
 8023dfe:	e67d      	b.n	8023afc <_strtod_l+0x84>
 8023e00:	4885      	ldr	r0, [pc, #532]	; (8024018 <_strtod_l+0x5a0>)
 8023e02:	f003 ff91 	bl	8027d28 <nan>
 8023e06:	ed8d 0b04 	vstr	d0, [sp, #16]
 8023e0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8023e0e:	e675      	b.n	8023afc <_strtod_l+0x84>
 8023e10:	9b07      	ldr	r3, [sp, #28]
 8023e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023e14:	1af3      	subs	r3, r6, r3
 8023e16:	2f00      	cmp	r7, #0
 8023e18:	bf08      	it	eq
 8023e1a:	462f      	moveq	r7, r5
 8023e1c:	2d10      	cmp	r5, #16
 8023e1e:	9308      	str	r3, [sp, #32]
 8023e20:	46a8      	mov	r8, r5
 8023e22:	bfa8      	it	ge
 8023e24:	f04f 0810 	movge.w	r8, #16
 8023e28:	f7dc fb7c 	bl	8000524 <__aeabi_ui2d>
 8023e2c:	2d09      	cmp	r5, #9
 8023e2e:	4682      	mov	sl, r0
 8023e30:	468b      	mov	fp, r1
 8023e32:	dd13      	ble.n	8023e5c <_strtod_l+0x3e4>
 8023e34:	4b79      	ldr	r3, [pc, #484]	; (802401c <_strtod_l+0x5a4>)
 8023e36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8023e3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8023e3e:	f7dc fbeb 	bl	8000618 <__aeabi_dmul>
 8023e42:	4682      	mov	sl, r0
 8023e44:	4648      	mov	r0, r9
 8023e46:	468b      	mov	fp, r1
 8023e48:	f7dc fb6c 	bl	8000524 <__aeabi_ui2d>
 8023e4c:	4602      	mov	r2, r0
 8023e4e:	460b      	mov	r3, r1
 8023e50:	4650      	mov	r0, sl
 8023e52:	4659      	mov	r1, fp
 8023e54:	f7dc fa2a 	bl	80002ac <__adddf3>
 8023e58:	4682      	mov	sl, r0
 8023e5a:	468b      	mov	fp, r1
 8023e5c:	2d0f      	cmp	r5, #15
 8023e5e:	dc38      	bgt.n	8023ed2 <_strtod_l+0x45a>
 8023e60:	9b08      	ldr	r3, [sp, #32]
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	f43f ae4a 	beq.w	8023afc <_strtod_l+0x84>
 8023e68:	dd24      	ble.n	8023eb4 <_strtod_l+0x43c>
 8023e6a:	2b16      	cmp	r3, #22
 8023e6c:	dc0b      	bgt.n	8023e86 <_strtod_l+0x40e>
 8023e6e:	4d6b      	ldr	r5, [pc, #428]	; (802401c <_strtod_l+0x5a4>)
 8023e70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8023e74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8023e78:	4652      	mov	r2, sl
 8023e7a:	465b      	mov	r3, fp
 8023e7c:	f7dc fbcc 	bl	8000618 <__aeabi_dmul>
 8023e80:	4682      	mov	sl, r0
 8023e82:	468b      	mov	fp, r1
 8023e84:	e63a      	b.n	8023afc <_strtod_l+0x84>
 8023e86:	9a08      	ldr	r2, [sp, #32]
 8023e88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8023e8c:	4293      	cmp	r3, r2
 8023e8e:	db20      	blt.n	8023ed2 <_strtod_l+0x45a>
 8023e90:	4c62      	ldr	r4, [pc, #392]	; (802401c <_strtod_l+0x5a4>)
 8023e92:	f1c5 050f 	rsb	r5, r5, #15
 8023e96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8023e9a:	4652      	mov	r2, sl
 8023e9c:	465b      	mov	r3, fp
 8023e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023ea2:	f7dc fbb9 	bl	8000618 <__aeabi_dmul>
 8023ea6:	9b08      	ldr	r3, [sp, #32]
 8023ea8:	1b5d      	subs	r5, r3, r5
 8023eaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8023eae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8023eb2:	e7e3      	b.n	8023e7c <_strtod_l+0x404>
 8023eb4:	9b08      	ldr	r3, [sp, #32]
 8023eb6:	3316      	adds	r3, #22
 8023eb8:	db0b      	blt.n	8023ed2 <_strtod_l+0x45a>
 8023eba:	9b07      	ldr	r3, [sp, #28]
 8023ebc:	4a57      	ldr	r2, [pc, #348]	; (802401c <_strtod_l+0x5a4>)
 8023ebe:	1b9e      	subs	r6, r3, r6
 8023ec0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8023ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023ec8:	4650      	mov	r0, sl
 8023eca:	4659      	mov	r1, fp
 8023ecc:	f7dc fcce 	bl	800086c <__aeabi_ddiv>
 8023ed0:	e7d6      	b.n	8023e80 <_strtod_l+0x408>
 8023ed2:	9b08      	ldr	r3, [sp, #32]
 8023ed4:	eba5 0808 	sub.w	r8, r5, r8
 8023ed8:	4498      	add	r8, r3
 8023eda:	f1b8 0f00 	cmp.w	r8, #0
 8023ede:	dd71      	ble.n	8023fc4 <_strtod_l+0x54c>
 8023ee0:	f018 030f 	ands.w	r3, r8, #15
 8023ee4:	d00a      	beq.n	8023efc <_strtod_l+0x484>
 8023ee6:	494d      	ldr	r1, [pc, #308]	; (802401c <_strtod_l+0x5a4>)
 8023ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8023eec:	4652      	mov	r2, sl
 8023eee:	465b      	mov	r3, fp
 8023ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023ef4:	f7dc fb90 	bl	8000618 <__aeabi_dmul>
 8023ef8:	4682      	mov	sl, r0
 8023efa:	468b      	mov	fp, r1
 8023efc:	f038 080f 	bics.w	r8, r8, #15
 8023f00:	d04d      	beq.n	8023f9e <_strtod_l+0x526>
 8023f02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8023f06:	dd22      	ble.n	8023f4e <_strtod_l+0x4d6>
 8023f08:	2500      	movs	r5, #0
 8023f0a:	462e      	mov	r6, r5
 8023f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8023f0e:	9507      	str	r5, [sp, #28]
 8023f10:	2322      	movs	r3, #34	; 0x22
 8023f12:	f8df b110 	ldr.w	fp, [pc, #272]	; 8024024 <_strtod_l+0x5ac>
 8023f16:	6023      	str	r3, [r4, #0]
 8023f18:	f04f 0a00 	mov.w	sl, #0
 8023f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f1e:	2b00      	cmp	r3, #0
 8023f20:	f43f adec 	beq.w	8023afc <_strtod_l+0x84>
 8023f24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023f26:	4620      	mov	r0, r4
 8023f28:	f002 fd5c 	bl	80269e4 <_Bfree>
 8023f2c:	9907      	ldr	r1, [sp, #28]
 8023f2e:	4620      	mov	r0, r4
 8023f30:	f002 fd58 	bl	80269e4 <_Bfree>
 8023f34:	4631      	mov	r1, r6
 8023f36:	4620      	mov	r0, r4
 8023f38:	f002 fd54 	bl	80269e4 <_Bfree>
 8023f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023f3e:	4620      	mov	r0, r4
 8023f40:	f002 fd50 	bl	80269e4 <_Bfree>
 8023f44:	4629      	mov	r1, r5
 8023f46:	4620      	mov	r0, r4
 8023f48:	f002 fd4c 	bl	80269e4 <_Bfree>
 8023f4c:	e5d6      	b.n	8023afc <_strtod_l+0x84>
 8023f4e:	2300      	movs	r3, #0
 8023f50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8023f54:	4650      	mov	r0, sl
 8023f56:	4659      	mov	r1, fp
 8023f58:	4699      	mov	r9, r3
 8023f5a:	f1b8 0f01 	cmp.w	r8, #1
 8023f5e:	dc21      	bgt.n	8023fa4 <_strtod_l+0x52c>
 8023f60:	b10b      	cbz	r3, 8023f66 <_strtod_l+0x4ee>
 8023f62:	4682      	mov	sl, r0
 8023f64:	468b      	mov	fp, r1
 8023f66:	4b2e      	ldr	r3, [pc, #184]	; (8024020 <_strtod_l+0x5a8>)
 8023f68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8023f6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8023f70:	4652      	mov	r2, sl
 8023f72:	465b      	mov	r3, fp
 8023f74:	e9d9 0100 	ldrd	r0, r1, [r9]
 8023f78:	f7dc fb4e 	bl	8000618 <__aeabi_dmul>
 8023f7c:	4b29      	ldr	r3, [pc, #164]	; (8024024 <_strtod_l+0x5ac>)
 8023f7e:	460a      	mov	r2, r1
 8023f80:	400b      	ands	r3, r1
 8023f82:	4929      	ldr	r1, [pc, #164]	; (8024028 <_strtod_l+0x5b0>)
 8023f84:	428b      	cmp	r3, r1
 8023f86:	4682      	mov	sl, r0
 8023f88:	d8be      	bhi.n	8023f08 <_strtod_l+0x490>
 8023f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8023f8e:	428b      	cmp	r3, r1
 8023f90:	bf86      	itte	hi
 8023f92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 802402c <_strtod_l+0x5b4>
 8023f96:	f04f 3aff 	movhi.w	sl, #4294967295
 8023f9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8023f9e:	2300      	movs	r3, #0
 8023fa0:	9304      	str	r3, [sp, #16]
 8023fa2:	e081      	b.n	80240a8 <_strtod_l+0x630>
 8023fa4:	f018 0f01 	tst.w	r8, #1
 8023fa8:	d007      	beq.n	8023fba <_strtod_l+0x542>
 8023faa:	4b1d      	ldr	r3, [pc, #116]	; (8024020 <_strtod_l+0x5a8>)
 8023fac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8023fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb4:	f7dc fb30 	bl	8000618 <__aeabi_dmul>
 8023fb8:	2301      	movs	r3, #1
 8023fba:	f109 0901 	add.w	r9, r9, #1
 8023fbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8023fc2:	e7ca      	b.n	8023f5a <_strtod_l+0x4e2>
 8023fc4:	d0eb      	beq.n	8023f9e <_strtod_l+0x526>
 8023fc6:	f1c8 0800 	rsb	r8, r8, #0
 8023fca:	f018 020f 	ands.w	r2, r8, #15
 8023fce:	d00a      	beq.n	8023fe6 <_strtod_l+0x56e>
 8023fd0:	4b12      	ldr	r3, [pc, #72]	; (802401c <_strtod_l+0x5a4>)
 8023fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023fd6:	4650      	mov	r0, sl
 8023fd8:	4659      	mov	r1, fp
 8023fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fde:	f7dc fc45 	bl	800086c <__aeabi_ddiv>
 8023fe2:	4682      	mov	sl, r0
 8023fe4:	468b      	mov	fp, r1
 8023fe6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8023fea:	d0d8      	beq.n	8023f9e <_strtod_l+0x526>
 8023fec:	f1b8 0f1f 	cmp.w	r8, #31
 8023ff0:	dd1e      	ble.n	8024030 <_strtod_l+0x5b8>
 8023ff2:	2500      	movs	r5, #0
 8023ff4:	462e      	mov	r6, r5
 8023ff6:	9509      	str	r5, [sp, #36]	; 0x24
 8023ff8:	9507      	str	r5, [sp, #28]
 8023ffa:	2322      	movs	r3, #34	; 0x22
 8023ffc:	f04f 0a00 	mov.w	sl, #0
 8024000:	f04f 0b00 	mov.w	fp, #0
 8024004:	6023      	str	r3, [r4, #0]
 8024006:	e789      	b.n	8023f1c <_strtod_l+0x4a4>
 8024008:	0802eab9 	.word	0x0802eab9
 802400c:	08033a40 	.word	0x08033a40
 8024010:	0803399e 	.word	0x0803399e
 8024014:	08033b5c 	.word	0x08033b5c
 8024018:	080303e5 	.word	0x080303e5
 802401c:	08033da0 	.word	0x08033da0
 8024020:	08033d78 	.word	0x08033d78
 8024024:	7ff00000 	.word	0x7ff00000
 8024028:	7ca00000 	.word	0x7ca00000
 802402c:	7fefffff 	.word	0x7fefffff
 8024030:	f018 0310 	ands.w	r3, r8, #16
 8024034:	bf18      	it	ne
 8024036:	236a      	movne	r3, #106	; 0x6a
 8024038:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80243f0 <_strtod_l+0x978>
 802403c:	9304      	str	r3, [sp, #16]
 802403e:	4650      	mov	r0, sl
 8024040:	4659      	mov	r1, fp
 8024042:	2300      	movs	r3, #0
 8024044:	f018 0f01 	tst.w	r8, #1
 8024048:	d004      	beq.n	8024054 <_strtod_l+0x5dc>
 802404a:	e9d9 2300 	ldrd	r2, r3, [r9]
 802404e:	f7dc fae3 	bl	8000618 <__aeabi_dmul>
 8024052:	2301      	movs	r3, #1
 8024054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8024058:	f109 0908 	add.w	r9, r9, #8
 802405c:	d1f2      	bne.n	8024044 <_strtod_l+0x5cc>
 802405e:	b10b      	cbz	r3, 8024064 <_strtod_l+0x5ec>
 8024060:	4682      	mov	sl, r0
 8024062:	468b      	mov	fp, r1
 8024064:	9b04      	ldr	r3, [sp, #16]
 8024066:	b1bb      	cbz	r3, 8024098 <_strtod_l+0x620>
 8024068:	f3cb 530a 	ubfx	r3, fp, #20, #11
 802406c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8024070:	2b00      	cmp	r3, #0
 8024072:	4659      	mov	r1, fp
 8024074:	dd10      	ble.n	8024098 <_strtod_l+0x620>
 8024076:	2b1f      	cmp	r3, #31
 8024078:	f340 8128 	ble.w	80242cc <_strtod_l+0x854>
 802407c:	2b34      	cmp	r3, #52	; 0x34
 802407e:	bfde      	ittt	le
 8024080:	3b20      	suble	r3, #32
 8024082:	f04f 32ff 	movle.w	r2, #4294967295
 8024086:	fa02 f303 	lslle.w	r3, r2, r3
 802408a:	f04f 0a00 	mov.w	sl, #0
 802408e:	bfcc      	ite	gt
 8024090:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8024094:	ea03 0b01 	andle.w	fp, r3, r1
 8024098:	2200      	movs	r2, #0
 802409a:	2300      	movs	r3, #0
 802409c:	4650      	mov	r0, sl
 802409e:	4659      	mov	r1, fp
 80240a0:	f7dc fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 80240a4:	2800      	cmp	r0, #0
 80240a6:	d1a4      	bne.n	8023ff2 <_strtod_l+0x57a>
 80240a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240aa:	9300      	str	r3, [sp, #0]
 80240ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80240ae:	462b      	mov	r3, r5
 80240b0:	463a      	mov	r2, r7
 80240b2:	4620      	mov	r0, r4
 80240b4:	f002 fd02 	bl	8026abc <__s2b>
 80240b8:	9009      	str	r0, [sp, #36]	; 0x24
 80240ba:	2800      	cmp	r0, #0
 80240bc:	f43f af24 	beq.w	8023f08 <_strtod_l+0x490>
 80240c0:	9b07      	ldr	r3, [sp, #28]
 80240c2:	1b9e      	subs	r6, r3, r6
 80240c4:	9b08      	ldr	r3, [sp, #32]
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	bfb4      	ite	lt
 80240ca:	4633      	movlt	r3, r6
 80240cc:	2300      	movge	r3, #0
 80240ce:	9310      	str	r3, [sp, #64]	; 0x40
 80240d0:	9b08      	ldr	r3, [sp, #32]
 80240d2:	2500      	movs	r5, #0
 80240d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80240d8:	9318      	str	r3, [sp, #96]	; 0x60
 80240da:	462e      	mov	r6, r5
 80240dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240de:	4620      	mov	r0, r4
 80240e0:	6859      	ldr	r1, [r3, #4]
 80240e2:	f002 fc3f 	bl	8026964 <_Balloc>
 80240e6:	9007      	str	r0, [sp, #28]
 80240e8:	2800      	cmp	r0, #0
 80240ea:	f43f af11 	beq.w	8023f10 <_strtod_l+0x498>
 80240ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240f0:	691a      	ldr	r2, [r3, #16]
 80240f2:	3202      	adds	r2, #2
 80240f4:	f103 010c 	add.w	r1, r3, #12
 80240f8:	0092      	lsls	r2, r2, #2
 80240fa:	300c      	adds	r0, #12
 80240fc:	f7fe f974 	bl	80223e8 <memcpy>
 8024100:	ec4b ab10 	vmov	d0, sl, fp
 8024104:	aa20      	add	r2, sp, #128	; 0x80
 8024106:	a91f      	add	r1, sp, #124	; 0x7c
 8024108:	4620      	mov	r0, r4
 802410a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 802410e:	f003 f811 	bl	8027134 <__d2b>
 8024112:	901e      	str	r0, [sp, #120]	; 0x78
 8024114:	2800      	cmp	r0, #0
 8024116:	f43f aefb 	beq.w	8023f10 <_strtod_l+0x498>
 802411a:	2101      	movs	r1, #1
 802411c:	4620      	mov	r0, r4
 802411e:	f002 fd67 	bl	8026bf0 <__i2b>
 8024122:	4606      	mov	r6, r0
 8024124:	2800      	cmp	r0, #0
 8024126:	f43f aef3 	beq.w	8023f10 <_strtod_l+0x498>
 802412a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802412c:	9904      	ldr	r1, [sp, #16]
 802412e:	2b00      	cmp	r3, #0
 8024130:	bfab      	itete	ge
 8024132:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8024134:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8024136:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8024138:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 802413c:	bfac      	ite	ge
 802413e:	eb03 0902 	addge.w	r9, r3, r2
 8024142:	1ad7      	sublt	r7, r2, r3
 8024144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024146:	eba3 0801 	sub.w	r8, r3, r1
 802414a:	4490      	add	r8, r2
 802414c:	4ba3      	ldr	r3, [pc, #652]	; (80243dc <_strtod_l+0x964>)
 802414e:	f108 38ff 	add.w	r8, r8, #4294967295
 8024152:	4598      	cmp	r8, r3
 8024154:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8024158:	f280 80cc 	bge.w	80242f4 <_strtod_l+0x87c>
 802415c:	eba3 0308 	sub.w	r3, r3, r8
 8024160:	2b1f      	cmp	r3, #31
 8024162:	eba2 0203 	sub.w	r2, r2, r3
 8024166:	f04f 0101 	mov.w	r1, #1
 802416a:	f300 80b6 	bgt.w	80242da <_strtod_l+0x862>
 802416e:	fa01 f303 	lsl.w	r3, r1, r3
 8024172:	9311      	str	r3, [sp, #68]	; 0x44
 8024174:	2300      	movs	r3, #0
 8024176:	930c      	str	r3, [sp, #48]	; 0x30
 8024178:	eb09 0802 	add.w	r8, r9, r2
 802417c:	9b04      	ldr	r3, [sp, #16]
 802417e:	45c1      	cmp	r9, r8
 8024180:	4417      	add	r7, r2
 8024182:	441f      	add	r7, r3
 8024184:	464b      	mov	r3, r9
 8024186:	bfa8      	it	ge
 8024188:	4643      	movge	r3, r8
 802418a:	42bb      	cmp	r3, r7
 802418c:	bfa8      	it	ge
 802418e:	463b      	movge	r3, r7
 8024190:	2b00      	cmp	r3, #0
 8024192:	bfc2      	ittt	gt
 8024194:	eba8 0803 	subgt.w	r8, r8, r3
 8024198:	1aff      	subgt	r7, r7, r3
 802419a:	eba9 0903 	subgt.w	r9, r9, r3
 802419e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80241a0:	2b00      	cmp	r3, #0
 80241a2:	dd17      	ble.n	80241d4 <_strtod_l+0x75c>
 80241a4:	4631      	mov	r1, r6
 80241a6:	461a      	mov	r2, r3
 80241a8:	4620      	mov	r0, r4
 80241aa:	f002 fddd 	bl	8026d68 <__pow5mult>
 80241ae:	4606      	mov	r6, r0
 80241b0:	2800      	cmp	r0, #0
 80241b2:	f43f aead 	beq.w	8023f10 <_strtod_l+0x498>
 80241b6:	4601      	mov	r1, r0
 80241b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80241ba:	4620      	mov	r0, r4
 80241bc:	f002 fd2e 	bl	8026c1c <__multiply>
 80241c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80241c2:	2800      	cmp	r0, #0
 80241c4:	f43f aea4 	beq.w	8023f10 <_strtod_l+0x498>
 80241c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80241ca:	4620      	mov	r0, r4
 80241cc:	f002 fc0a 	bl	80269e4 <_Bfree>
 80241d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80241d2:	931e      	str	r3, [sp, #120]	; 0x78
 80241d4:	f1b8 0f00 	cmp.w	r8, #0
 80241d8:	f300 8091 	bgt.w	80242fe <_strtod_l+0x886>
 80241dc:	9b08      	ldr	r3, [sp, #32]
 80241de:	2b00      	cmp	r3, #0
 80241e0:	dd08      	ble.n	80241f4 <_strtod_l+0x77c>
 80241e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80241e4:	9907      	ldr	r1, [sp, #28]
 80241e6:	4620      	mov	r0, r4
 80241e8:	f002 fdbe 	bl	8026d68 <__pow5mult>
 80241ec:	9007      	str	r0, [sp, #28]
 80241ee:	2800      	cmp	r0, #0
 80241f0:	f43f ae8e 	beq.w	8023f10 <_strtod_l+0x498>
 80241f4:	2f00      	cmp	r7, #0
 80241f6:	dd08      	ble.n	802420a <_strtod_l+0x792>
 80241f8:	9907      	ldr	r1, [sp, #28]
 80241fa:	463a      	mov	r2, r7
 80241fc:	4620      	mov	r0, r4
 80241fe:	f002 fe0d 	bl	8026e1c <__lshift>
 8024202:	9007      	str	r0, [sp, #28]
 8024204:	2800      	cmp	r0, #0
 8024206:	f43f ae83 	beq.w	8023f10 <_strtod_l+0x498>
 802420a:	f1b9 0f00 	cmp.w	r9, #0
 802420e:	dd08      	ble.n	8024222 <_strtod_l+0x7aa>
 8024210:	4631      	mov	r1, r6
 8024212:	464a      	mov	r2, r9
 8024214:	4620      	mov	r0, r4
 8024216:	f002 fe01 	bl	8026e1c <__lshift>
 802421a:	4606      	mov	r6, r0
 802421c:	2800      	cmp	r0, #0
 802421e:	f43f ae77 	beq.w	8023f10 <_strtod_l+0x498>
 8024222:	9a07      	ldr	r2, [sp, #28]
 8024224:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024226:	4620      	mov	r0, r4
 8024228:	f002 fe80 	bl	8026f2c <__mdiff>
 802422c:	4605      	mov	r5, r0
 802422e:	2800      	cmp	r0, #0
 8024230:	f43f ae6e 	beq.w	8023f10 <_strtod_l+0x498>
 8024234:	68c3      	ldr	r3, [r0, #12]
 8024236:	930f      	str	r3, [sp, #60]	; 0x3c
 8024238:	2300      	movs	r3, #0
 802423a:	60c3      	str	r3, [r0, #12]
 802423c:	4631      	mov	r1, r6
 802423e:	f002 fe59 	bl	8026ef4 <__mcmp>
 8024242:	2800      	cmp	r0, #0
 8024244:	da65      	bge.n	8024312 <_strtod_l+0x89a>
 8024246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024248:	ea53 030a 	orrs.w	r3, r3, sl
 802424c:	f040 8087 	bne.w	802435e <_strtod_l+0x8e6>
 8024250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8024254:	2b00      	cmp	r3, #0
 8024256:	f040 8082 	bne.w	802435e <_strtod_l+0x8e6>
 802425a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802425e:	0d1b      	lsrs	r3, r3, #20
 8024260:	051b      	lsls	r3, r3, #20
 8024262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8024266:	d97a      	bls.n	802435e <_strtod_l+0x8e6>
 8024268:	696b      	ldr	r3, [r5, #20]
 802426a:	b913      	cbnz	r3, 8024272 <_strtod_l+0x7fa>
 802426c:	692b      	ldr	r3, [r5, #16]
 802426e:	2b01      	cmp	r3, #1
 8024270:	dd75      	ble.n	802435e <_strtod_l+0x8e6>
 8024272:	4629      	mov	r1, r5
 8024274:	2201      	movs	r2, #1
 8024276:	4620      	mov	r0, r4
 8024278:	f002 fdd0 	bl	8026e1c <__lshift>
 802427c:	4631      	mov	r1, r6
 802427e:	4605      	mov	r5, r0
 8024280:	f002 fe38 	bl	8026ef4 <__mcmp>
 8024284:	2800      	cmp	r0, #0
 8024286:	dd6a      	ble.n	802435e <_strtod_l+0x8e6>
 8024288:	9904      	ldr	r1, [sp, #16]
 802428a:	4a55      	ldr	r2, [pc, #340]	; (80243e0 <_strtod_l+0x968>)
 802428c:	465b      	mov	r3, fp
 802428e:	2900      	cmp	r1, #0
 8024290:	f000 8085 	beq.w	802439e <_strtod_l+0x926>
 8024294:	ea02 010b 	and.w	r1, r2, fp
 8024298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802429c:	dc7f      	bgt.n	802439e <_strtod_l+0x926>
 802429e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80242a2:	f77f aeaa 	ble.w	8023ffa <_strtod_l+0x582>
 80242a6:	4a4f      	ldr	r2, [pc, #316]	; (80243e4 <_strtod_l+0x96c>)
 80242a8:	2300      	movs	r3, #0
 80242aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80242ae:	4650      	mov	r0, sl
 80242b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80242b4:	4659      	mov	r1, fp
 80242b6:	f7dc f9af 	bl	8000618 <__aeabi_dmul>
 80242ba:	460b      	mov	r3, r1
 80242bc:	4303      	orrs	r3, r0
 80242be:	bf08      	it	eq
 80242c0:	2322      	moveq	r3, #34	; 0x22
 80242c2:	4682      	mov	sl, r0
 80242c4:	468b      	mov	fp, r1
 80242c6:	bf08      	it	eq
 80242c8:	6023      	streq	r3, [r4, #0]
 80242ca:	e62b      	b.n	8023f24 <_strtod_l+0x4ac>
 80242cc:	f04f 32ff 	mov.w	r2, #4294967295
 80242d0:	fa02 f303 	lsl.w	r3, r2, r3
 80242d4:	ea03 0a0a 	and.w	sl, r3, sl
 80242d8:	e6de      	b.n	8024098 <_strtod_l+0x620>
 80242da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80242de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80242e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80242e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80242ea:	fa01 f308 	lsl.w	r3, r1, r8
 80242ee:	930c      	str	r3, [sp, #48]	; 0x30
 80242f0:	9111      	str	r1, [sp, #68]	; 0x44
 80242f2:	e741      	b.n	8024178 <_strtod_l+0x700>
 80242f4:	2300      	movs	r3, #0
 80242f6:	930c      	str	r3, [sp, #48]	; 0x30
 80242f8:	2301      	movs	r3, #1
 80242fa:	9311      	str	r3, [sp, #68]	; 0x44
 80242fc:	e73c      	b.n	8024178 <_strtod_l+0x700>
 80242fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024300:	4642      	mov	r2, r8
 8024302:	4620      	mov	r0, r4
 8024304:	f002 fd8a 	bl	8026e1c <__lshift>
 8024308:	901e      	str	r0, [sp, #120]	; 0x78
 802430a:	2800      	cmp	r0, #0
 802430c:	f47f af66 	bne.w	80241dc <_strtod_l+0x764>
 8024310:	e5fe      	b.n	8023f10 <_strtod_l+0x498>
 8024312:	465f      	mov	r7, fp
 8024314:	d16e      	bne.n	80243f4 <_strtod_l+0x97c>
 8024316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802431c:	b342      	cbz	r2, 8024370 <_strtod_l+0x8f8>
 802431e:	4a32      	ldr	r2, [pc, #200]	; (80243e8 <_strtod_l+0x970>)
 8024320:	4293      	cmp	r3, r2
 8024322:	d128      	bne.n	8024376 <_strtod_l+0x8fe>
 8024324:	9b04      	ldr	r3, [sp, #16]
 8024326:	4650      	mov	r0, sl
 8024328:	b1eb      	cbz	r3, 8024366 <_strtod_l+0x8ee>
 802432a:	4a2d      	ldr	r2, [pc, #180]	; (80243e0 <_strtod_l+0x968>)
 802432c:	403a      	ands	r2, r7
 802432e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8024332:	f04f 31ff 	mov.w	r1, #4294967295
 8024336:	d819      	bhi.n	802436c <_strtod_l+0x8f4>
 8024338:	0d12      	lsrs	r2, r2, #20
 802433a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802433e:	fa01 f303 	lsl.w	r3, r1, r3
 8024342:	4298      	cmp	r0, r3
 8024344:	d117      	bne.n	8024376 <_strtod_l+0x8fe>
 8024346:	4b29      	ldr	r3, [pc, #164]	; (80243ec <_strtod_l+0x974>)
 8024348:	429f      	cmp	r7, r3
 802434a:	d102      	bne.n	8024352 <_strtod_l+0x8da>
 802434c:	3001      	adds	r0, #1
 802434e:	f43f addf 	beq.w	8023f10 <_strtod_l+0x498>
 8024352:	4b23      	ldr	r3, [pc, #140]	; (80243e0 <_strtod_l+0x968>)
 8024354:	403b      	ands	r3, r7
 8024356:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 802435a:	f04f 0a00 	mov.w	sl, #0
 802435e:	9b04      	ldr	r3, [sp, #16]
 8024360:	2b00      	cmp	r3, #0
 8024362:	d1a0      	bne.n	80242a6 <_strtod_l+0x82e>
 8024364:	e5de      	b.n	8023f24 <_strtod_l+0x4ac>
 8024366:	f04f 33ff 	mov.w	r3, #4294967295
 802436a:	e7ea      	b.n	8024342 <_strtod_l+0x8ca>
 802436c:	460b      	mov	r3, r1
 802436e:	e7e8      	b.n	8024342 <_strtod_l+0x8ca>
 8024370:	ea53 030a 	orrs.w	r3, r3, sl
 8024374:	d088      	beq.n	8024288 <_strtod_l+0x810>
 8024376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024378:	b1db      	cbz	r3, 80243b2 <_strtod_l+0x93a>
 802437a:	423b      	tst	r3, r7
 802437c:	d0ef      	beq.n	802435e <_strtod_l+0x8e6>
 802437e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024380:	9a04      	ldr	r2, [sp, #16]
 8024382:	4650      	mov	r0, sl
 8024384:	4659      	mov	r1, fp
 8024386:	b1c3      	cbz	r3, 80243ba <_strtod_l+0x942>
 8024388:	f7ff fb5a 	bl	8023a40 <sulp>
 802438c:	4602      	mov	r2, r0
 802438e:	460b      	mov	r3, r1
 8024390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8024394:	f7db ff8a 	bl	80002ac <__adddf3>
 8024398:	4682      	mov	sl, r0
 802439a:	468b      	mov	fp, r1
 802439c:	e7df      	b.n	802435e <_strtod_l+0x8e6>
 802439e:	4013      	ands	r3, r2
 80243a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80243a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80243a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80243ac:	f04f 3aff 	mov.w	sl, #4294967295
 80243b0:	e7d5      	b.n	802435e <_strtod_l+0x8e6>
 80243b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80243b4:	ea13 0f0a 	tst.w	r3, sl
 80243b8:	e7e0      	b.n	802437c <_strtod_l+0x904>
 80243ba:	f7ff fb41 	bl	8023a40 <sulp>
 80243be:	4602      	mov	r2, r0
 80243c0:	460b      	mov	r3, r1
 80243c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80243c6:	f7db ff6f 	bl	80002a8 <__aeabi_dsub>
 80243ca:	2200      	movs	r2, #0
 80243cc:	2300      	movs	r3, #0
 80243ce:	4682      	mov	sl, r0
 80243d0:	468b      	mov	fp, r1
 80243d2:	f7dc fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 80243d6:	2800      	cmp	r0, #0
 80243d8:	d0c1      	beq.n	802435e <_strtod_l+0x8e6>
 80243da:	e60e      	b.n	8023ffa <_strtod_l+0x582>
 80243dc:	fffffc02 	.word	0xfffffc02
 80243e0:	7ff00000 	.word	0x7ff00000
 80243e4:	39500000 	.word	0x39500000
 80243e8:	000fffff 	.word	0x000fffff
 80243ec:	7fefffff 	.word	0x7fefffff
 80243f0:	08033a58 	.word	0x08033a58
 80243f4:	4631      	mov	r1, r6
 80243f6:	4628      	mov	r0, r5
 80243f8:	f002 fef8 	bl	80271ec <__ratio>
 80243fc:	ec59 8b10 	vmov	r8, r9, d0
 8024400:	ee10 0a10 	vmov	r0, s0
 8024404:	2200      	movs	r2, #0
 8024406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802440a:	4649      	mov	r1, r9
 802440c:	f7dc fb80 	bl	8000b10 <__aeabi_dcmple>
 8024410:	2800      	cmp	r0, #0
 8024412:	d07c      	beq.n	802450e <_strtod_l+0xa96>
 8024414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024416:	2b00      	cmp	r3, #0
 8024418:	d04c      	beq.n	80244b4 <_strtod_l+0xa3c>
 802441a:	4b95      	ldr	r3, [pc, #596]	; (8024670 <_strtod_l+0xbf8>)
 802441c:	2200      	movs	r2, #0
 802441e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8024422:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8024670 <_strtod_l+0xbf8>
 8024426:	f04f 0800 	mov.w	r8, #0
 802442a:	4b92      	ldr	r3, [pc, #584]	; (8024674 <_strtod_l+0xbfc>)
 802442c:	403b      	ands	r3, r7
 802442e:	9311      	str	r3, [sp, #68]	; 0x44
 8024430:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024432:	4b91      	ldr	r3, [pc, #580]	; (8024678 <_strtod_l+0xc00>)
 8024434:	429a      	cmp	r2, r3
 8024436:	f040 80b2 	bne.w	802459e <_strtod_l+0xb26>
 802443a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802443e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024442:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8024446:	ec4b ab10 	vmov	d0, sl, fp
 802444a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 802444e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8024452:	f002 fdf3 	bl	802703c <__ulp>
 8024456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802445a:	ec53 2b10 	vmov	r2, r3, d0
 802445e:	f7dc f8db 	bl	8000618 <__aeabi_dmul>
 8024462:	4652      	mov	r2, sl
 8024464:	465b      	mov	r3, fp
 8024466:	f7db ff21 	bl	80002ac <__adddf3>
 802446a:	460b      	mov	r3, r1
 802446c:	4981      	ldr	r1, [pc, #516]	; (8024674 <_strtod_l+0xbfc>)
 802446e:	4a83      	ldr	r2, [pc, #524]	; (802467c <_strtod_l+0xc04>)
 8024470:	4019      	ands	r1, r3
 8024472:	4291      	cmp	r1, r2
 8024474:	4682      	mov	sl, r0
 8024476:	d95e      	bls.n	8024536 <_strtod_l+0xabe>
 8024478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802447a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 802447e:	4293      	cmp	r3, r2
 8024480:	d103      	bne.n	802448a <_strtod_l+0xa12>
 8024482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024484:	3301      	adds	r3, #1
 8024486:	f43f ad43 	beq.w	8023f10 <_strtod_l+0x498>
 802448a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8024688 <_strtod_l+0xc10>
 802448e:	f04f 3aff 	mov.w	sl, #4294967295
 8024492:	991e      	ldr	r1, [sp, #120]	; 0x78
 8024494:	4620      	mov	r0, r4
 8024496:	f002 faa5 	bl	80269e4 <_Bfree>
 802449a:	9907      	ldr	r1, [sp, #28]
 802449c:	4620      	mov	r0, r4
 802449e:	f002 faa1 	bl	80269e4 <_Bfree>
 80244a2:	4631      	mov	r1, r6
 80244a4:	4620      	mov	r0, r4
 80244a6:	f002 fa9d 	bl	80269e4 <_Bfree>
 80244aa:	4629      	mov	r1, r5
 80244ac:	4620      	mov	r0, r4
 80244ae:	f002 fa99 	bl	80269e4 <_Bfree>
 80244b2:	e613      	b.n	80240dc <_strtod_l+0x664>
 80244b4:	f1ba 0f00 	cmp.w	sl, #0
 80244b8:	d11b      	bne.n	80244f2 <_strtod_l+0xa7a>
 80244ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80244be:	b9f3      	cbnz	r3, 80244fe <_strtod_l+0xa86>
 80244c0:	4b6b      	ldr	r3, [pc, #428]	; (8024670 <_strtod_l+0xbf8>)
 80244c2:	2200      	movs	r2, #0
 80244c4:	4640      	mov	r0, r8
 80244c6:	4649      	mov	r1, r9
 80244c8:	f7dc fb18 	bl	8000afc <__aeabi_dcmplt>
 80244cc:	b9d0      	cbnz	r0, 8024504 <_strtod_l+0xa8c>
 80244ce:	4640      	mov	r0, r8
 80244d0:	4649      	mov	r1, r9
 80244d2:	4b6b      	ldr	r3, [pc, #428]	; (8024680 <_strtod_l+0xc08>)
 80244d4:	2200      	movs	r2, #0
 80244d6:	f7dc f89f 	bl	8000618 <__aeabi_dmul>
 80244da:	4680      	mov	r8, r0
 80244dc:	4689      	mov	r9, r1
 80244de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80244e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80244e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80244e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80244ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80244f0:	e79b      	b.n	802442a <_strtod_l+0x9b2>
 80244f2:	f1ba 0f01 	cmp.w	sl, #1
 80244f6:	d102      	bne.n	80244fe <_strtod_l+0xa86>
 80244f8:	2f00      	cmp	r7, #0
 80244fa:	f43f ad7e 	beq.w	8023ffa <_strtod_l+0x582>
 80244fe:	4b61      	ldr	r3, [pc, #388]	; (8024684 <_strtod_l+0xc0c>)
 8024500:	2200      	movs	r2, #0
 8024502:	e78c      	b.n	802441e <_strtod_l+0x9a6>
 8024504:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8024680 <_strtod_l+0xc08>
 8024508:	f04f 0800 	mov.w	r8, #0
 802450c:	e7e7      	b.n	80244de <_strtod_l+0xa66>
 802450e:	4b5c      	ldr	r3, [pc, #368]	; (8024680 <_strtod_l+0xc08>)
 8024510:	4640      	mov	r0, r8
 8024512:	4649      	mov	r1, r9
 8024514:	2200      	movs	r2, #0
 8024516:	f7dc f87f 	bl	8000618 <__aeabi_dmul>
 802451a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802451c:	4680      	mov	r8, r0
 802451e:	4689      	mov	r9, r1
 8024520:	b933      	cbnz	r3, 8024530 <_strtod_l+0xab8>
 8024522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024526:	9012      	str	r0, [sp, #72]	; 0x48
 8024528:	9313      	str	r3, [sp, #76]	; 0x4c
 802452a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 802452e:	e7dd      	b.n	80244ec <_strtod_l+0xa74>
 8024530:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8024534:	e7f9      	b.n	802452a <_strtod_l+0xab2>
 8024536:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 802453a:	9b04      	ldr	r3, [sp, #16]
 802453c:	2b00      	cmp	r3, #0
 802453e:	d1a8      	bne.n	8024492 <_strtod_l+0xa1a>
 8024540:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8024544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024546:	0d1b      	lsrs	r3, r3, #20
 8024548:	051b      	lsls	r3, r3, #20
 802454a:	429a      	cmp	r2, r3
 802454c:	d1a1      	bne.n	8024492 <_strtod_l+0xa1a>
 802454e:	4640      	mov	r0, r8
 8024550:	4649      	mov	r1, r9
 8024552:	f7dc fbc1 	bl	8000cd8 <__aeabi_d2lz>
 8024556:	f7dc f831 	bl	80005bc <__aeabi_l2d>
 802455a:	4602      	mov	r2, r0
 802455c:	460b      	mov	r3, r1
 802455e:	4640      	mov	r0, r8
 8024560:	4649      	mov	r1, r9
 8024562:	f7db fea1 	bl	80002a8 <__aeabi_dsub>
 8024566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802456c:	ea43 030a 	orr.w	r3, r3, sl
 8024570:	4313      	orrs	r3, r2
 8024572:	4680      	mov	r8, r0
 8024574:	4689      	mov	r9, r1
 8024576:	d053      	beq.n	8024620 <_strtod_l+0xba8>
 8024578:	a335      	add	r3, pc, #212	; (adr r3, 8024650 <_strtod_l+0xbd8>)
 802457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802457e:	f7dc fabd 	bl	8000afc <__aeabi_dcmplt>
 8024582:	2800      	cmp	r0, #0
 8024584:	f47f acce 	bne.w	8023f24 <_strtod_l+0x4ac>
 8024588:	a333      	add	r3, pc, #204	; (adr r3, 8024658 <_strtod_l+0xbe0>)
 802458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802458e:	4640      	mov	r0, r8
 8024590:	4649      	mov	r1, r9
 8024592:	f7dc fad1 	bl	8000b38 <__aeabi_dcmpgt>
 8024596:	2800      	cmp	r0, #0
 8024598:	f43f af7b 	beq.w	8024492 <_strtod_l+0xa1a>
 802459c:	e4c2      	b.n	8023f24 <_strtod_l+0x4ac>
 802459e:	9b04      	ldr	r3, [sp, #16]
 80245a0:	b333      	cbz	r3, 80245f0 <_strtod_l+0xb78>
 80245a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80245a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80245a8:	d822      	bhi.n	80245f0 <_strtod_l+0xb78>
 80245aa:	a32d      	add	r3, pc, #180	; (adr r3, 8024660 <_strtod_l+0xbe8>)
 80245ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245b0:	4640      	mov	r0, r8
 80245b2:	4649      	mov	r1, r9
 80245b4:	f7dc faac 	bl	8000b10 <__aeabi_dcmple>
 80245b8:	b1a0      	cbz	r0, 80245e4 <_strtod_l+0xb6c>
 80245ba:	4649      	mov	r1, r9
 80245bc:	4640      	mov	r0, r8
 80245be:	f7dc fb03 	bl	8000bc8 <__aeabi_d2uiz>
 80245c2:	2801      	cmp	r0, #1
 80245c4:	bf38      	it	cc
 80245c6:	2001      	movcc	r0, #1
 80245c8:	f7db ffac 	bl	8000524 <__aeabi_ui2d>
 80245cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245ce:	4680      	mov	r8, r0
 80245d0:	4689      	mov	r9, r1
 80245d2:	bb13      	cbnz	r3, 802461a <_strtod_l+0xba2>
 80245d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80245d8:	9014      	str	r0, [sp, #80]	; 0x50
 80245da:	9315      	str	r3, [sp, #84]	; 0x54
 80245dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80245e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80245e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80245e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80245ec:	1a9b      	subs	r3, r3, r2
 80245ee:	930d      	str	r3, [sp, #52]	; 0x34
 80245f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80245f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80245f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80245fc:	f002 fd1e 	bl	802703c <__ulp>
 8024600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024604:	ec53 2b10 	vmov	r2, r3, d0
 8024608:	f7dc f806 	bl	8000618 <__aeabi_dmul>
 802460c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024610:	f7db fe4c 	bl	80002ac <__adddf3>
 8024614:	4682      	mov	sl, r0
 8024616:	468b      	mov	fp, r1
 8024618:	e78f      	b.n	802453a <_strtod_l+0xac2>
 802461a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 802461e:	e7dd      	b.n	80245dc <_strtod_l+0xb64>
 8024620:	a311      	add	r3, pc, #68	; (adr r3, 8024668 <_strtod_l+0xbf0>)
 8024622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024626:	f7dc fa69 	bl	8000afc <__aeabi_dcmplt>
 802462a:	e7b4      	b.n	8024596 <_strtod_l+0xb1e>
 802462c:	2300      	movs	r3, #0
 802462e:	930e      	str	r3, [sp, #56]	; 0x38
 8024630:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8024632:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024634:	6013      	str	r3, [r2, #0]
 8024636:	f7ff ba65 	b.w	8023b04 <_strtod_l+0x8c>
 802463a:	2b65      	cmp	r3, #101	; 0x65
 802463c:	f43f ab5d 	beq.w	8023cfa <_strtod_l+0x282>
 8024640:	2b45      	cmp	r3, #69	; 0x45
 8024642:	f43f ab5a 	beq.w	8023cfa <_strtod_l+0x282>
 8024646:	2201      	movs	r2, #1
 8024648:	f7ff bb92 	b.w	8023d70 <_strtod_l+0x2f8>
 802464c:	f3af 8000 	nop.w
 8024650:	94a03595 	.word	0x94a03595
 8024654:	3fdfffff 	.word	0x3fdfffff
 8024658:	35afe535 	.word	0x35afe535
 802465c:	3fe00000 	.word	0x3fe00000
 8024660:	ffc00000 	.word	0xffc00000
 8024664:	41dfffff 	.word	0x41dfffff
 8024668:	94a03595 	.word	0x94a03595
 802466c:	3fcfffff 	.word	0x3fcfffff
 8024670:	3ff00000 	.word	0x3ff00000
 8024674:	7ff00000 	.word	0x7ff00000
 8024678:	7fe00000 	.word	0x7fe00000
 802467c:	7c9fffff 	.word	0x7c9fffff
 8024680:	3fe00000 	.word	0x3fe00000
 8024684:	bff00000 	.word	0xbff00000
 8024688:	7fefffff 	.word	0x7fefffff

0802468c <strtod>:
 802468c:	460a      	mov	r2, r1
 802468e:	4601      	mov	r1, r0
 8024690:	4802      	ldr	r0, [pc, #8]	; (802469c <strtod+0x10>)
 8024692:	4b03      	ldr	r3, [pc, #12]	; (80246a0 <strtod+0x14>)
 8024694:	6800      	ldr	r0, [r0, #0]
 8024696:	f7ff b9ef 	b.w	8023a78 <_strtod_l>
 802469a:	bf00      	nop
 802469c:	200005e4 	.word	0x200005e4
 80246a0:	200006ac 	.word	0x200006ac

080246a4 <strtok>:
 80246a4:	4b16      	ldr	r3, [pc, #88]	; (8024700 <strtok+0x5c>)
 80246a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80246a8:	681e      	ldr	r6, [r3, #0]
 80246aa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80246ac:	4605      	mov	r5, r0
 80246ae:	b9fc      	cbnz	r4, 80246f0 <strtok+0x4c>
 80246b0:	2050      	movs	r0, #80	; 0x50
 80246b2:	9101      	str	r1, [sp, #4]
 80246b4:	f7fd fe7a 	bl	80223ac <malloc>
 80246b8:	9901      	ldr	r1, [sp, #4]
 80246ba:	65b0      	str	r0, [r6, #88]	; 0x58
 80246bc:	4602      	mov	r2, r0
 80246be:	b920      	cbnz	r0, 80246ca <strtok+0x26>
 80246c0:	4b10      	ldr	r3, [pc, #64]	; (8024704 <strtok+0x60>)
 80246c2:	4811      	ldr	r0, [pc, #68]	; (8024708 <strtok+0x64>)
 80246c4:	2157      	movs	r1, #87	; 0x57
 80246c6:	f000 fc1b 	bl	8024f00 <__assert_func>
 80246ca:	e9c0 4400 	strd	r4, r4, [r0]
 80246ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80246d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80246d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80246da:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80246de:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80246e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80246e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80246ea:	6184      	str	r4, [r0, #24]
 80246ec:	7704      	strb	r4, [r0, #28]
 80246ee:	6244      	str	r4, [r0, #36]	; 0x24
 80246f0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80246f2:	2301      	movs	r3, #1
 80246f4:	4628      	mov	r0, r5
 80246f6:	b002      	add	sp, #8
 80246f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80246fc:	f000 b806 	b.w	802470c <__strtok_r>
 8024700:	200005e4 	.word	0x200005e4
 8024704:	080338ac 	.word	0x080338ac
 8024708:	08033a80 	.word	0x08033a80

0802470c <__strtok_r>:
 802470c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802470e:	b908      	cbnz	r0, 8024714 <__strtok_r+0x8>
 8024710:	6810      	ldr	r0, [r2, #0]
 8024712:	b188      	cbz	r0, 8024738 <__strtok_r+0x2c>
 8024714:	4604      	mov	r4, r0
 8024716:	4620      	mov	r0, r4
 8024718:	f814 5b01 	ldrb.w	r5, [r4], #1
 802471c:	460f      	mov	r7, r1
 802471e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8024722:	b91e      	cbnz	r6, 802472c <__strtok_r+0x20>
 8024724:	b965      	cbnz	r5, 8024740 <__strtok_r+0x34>
 8024726:	6015      	str	r5, [r2, #0]
 8024728:	4628      	mov	r0, r5
 802472a:	e005      	b.n	8024738 <__strtok_r+0x2c>
 802472c:	42b5      	cmp	r5, r6
 802472e:	d1f6      	bne.n	802471e <__strtok_r+0x12>
 8024730:	2b00      	cmp	r3, #0
 8024732:	d1f0      	bne.n	8024716 <__strtok_r+0xa>
 8024734:	6014      	str	r4, [r2, #0]
 8024736:	7003      	strb	r3, [r0, #0]
 8024738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802473a:	461c      	mov	r4, r3
 802473c:	e00c      	b.n	8024758 <__strtok_r+0x4c>
 802473e:	b915      	cbnz	r5, 8024746 <__strtok_r+0x3a>
 8024740:	f814 3b01 	ldrb.w	r3, [r4], #1
 8024744:	460e      	mov	r6, r1
 8024746:	f816 5b01 	ldrb.w	r5, [r6], #1
 802474a:	42ab      	cmp	r3, r5
 802474c:	d1f7      	bne.n	802473e <__strtok_r+0x32>
 802474e:	2b00      	cmp	r3, #0
 8024750:	d0f3      	beq.n	802473a <__strtok_r+0x2e>
 8024752:	2300      	movs	r3, #0
 8024754:	f804 3c01 	strb.w	r3, [r4, #-1]
 8024758:	6014      	str	r4, [r2, #0]
 802475a:	e7ed      	b.n	8024738 <__strtok_r+0x2c>

0802475c <_strtol_l.isra.0>:
 802475c:	2b01      	cmp	r3, #1
 802475e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024762:	d001      	beq.n	8024768 <_strtol_l.isra.0+0xc>
 8024764:	2b24      	cmp	r3, #36	; 0x24
 8024766:	d906      	bls.n	8024776 <_strtol_l.isra.0+0x1a>
 8024768:	f7fd fcfc 	bl	8022164 <__errno>
 802476c:	2316      	movs	r3, #22
 802476e:	6003      	str	r3, [r0, #0]
 8024770:	2000      	movs	r0, #0
 8024772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024776:	4f3a      	ldr	r7, [pc, #232]	; (8024860 <_strtol_l.isra.0+0x104>)
 8024778:	468e      	mov	lr, r1
 802477a:	4676      	mov	r6, lr
 802477c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8024780:	5de5      	ldrb	r5, [r4, r7]
 8024782:	f015 0508 	ands.w	r5, r5, #8
 8024786:	d1f8      	bne.n	802477a <_strtol_l.isra.0+0x1e>
 8024788:	2c2d      	cmp	r4, #45	; 0x2d
 802478a:	d134      	bne.n	80247f6 <_strtol_l.isra.0+0x9a>
 802478c:	f89e 4000 	ldrb.w	r4, [lr]
 8024790:	f04f 0801 	mov.w	r8, #1
 8024794:	f106 0e02 	add.w	lr, r6, #2
 8024798:	2b00      	cmp	r3, #0
 802479a:	d05c      	beq.n	8024856 <_strtol_l.isra.0+0xfa>
 802479c:	2b10      	cmp	r3, #16
 802479e:	d10c      	bne.n	80247ba <_strtol_l.isra.0+0x5e>
 80247a0:	2c30      	cmp	r4, #48	; 0x30
 80247a2:	d10a      	bne.n	80247ba <_strtol_l.isra.0+0x5e>
 80247a4:	f89e 4000 	ldrb.w	r4, [lr]
 80247a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80247ac:	2c58      	cmp	r4, #88	; 0x58
 80247ae:	d14d      	bne.n	802484c <_strtol_l.isra.0+0xf0>
 80247b0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80247b4:	2310      	movs	r3, #16
 80247b6:	f10e 0e02 	add.w	lr, lr, #2
 80247ba:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80247be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80247c2:	2600      	movs	r6, #0
 80247c4:	fbbc f9f3 	udiv	r9, ip, r3
 80247c8:	4635      	mov	r5, r6
 80247ca:	fb03 ca19 	mls	sl, r3, r9, ip
 80247ce:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80247d2:	2f09      	cmp	r7, #9
 80247d4:	d818      	bhi.n	8024808 <_strtol_l.isra.0+0xac>
 80247d6:	463c      	mov	r4, r7
 80247d8:	42a3      	cmp	r3, r4
 80247da:	dd24      	ble.n	8024826 <_strtol_l.isra.0+0xca>
 80247dc:	2e00      	cmp	r6, #0
 80247de:	db1f      	blt.n	8024820 <_strtol_l.isra.0+0xc4>
 80247e0:	45a9      	cmp	r9, r5
 80247e2:	d31d      	bcc.n	8024820 <_strtol_l.isra.0+0xc4>
 80247e4:	d101      	bne.n	80247ea <_strtol_l.isra.0+0x8e>
 80247e6:	45a2      	cmp	sl, r4
 80247e8:	db1a      	blt.n	8024820 <_strtol_l.isra.0+0xc4>
 80247ea:	fb05 4503 	mla	r5, r5, r3, r4
 80247ee:	2601      	movs	r6, #1
 80247f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80247f4:	e7eb      	b.n	80247ce <_strtol_l.isra.0+0x72>
 80247f6:	2c2b      	cmp	r4, #43	; 0x2b
 80247f8:	bf08      	it	eq
 80247fa:	f89e 4000 	ldrbeq.w	r4, [lr]
 80247fe:	46a8      	mov	r8, r5
 8024800:	bf08      	it	eq
 8024802:	f106 0e02 	addeq.w	lr, r6, #2
 8024806:	e7c7      	b.n	8024798 <_strtol_l.isra.0+0x3c>
 8024808:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 802480c:	2f19      	cmp	r7, #25
 802480e:	d801      	bhi.n	8024814 <_strtol_l.isra.0+0xb8>
 8024810:	3c37      	subs	r4, #55	; 0x37
 8024812:	e7e1      	b.n	80247d8 <_strtol_l.isra.0+0x7c>
 8024814:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8024818:	2f19      	cmp	r7, #25
 802481a:	d804      	bhi.n	8024826 <_strtol_l.isra.0+0xca>
 802481c:	3c57      	subs	r4, #87	; 0x57
 802481e:	e7db      	b.n	80247d8 <_strtol_l.isra.0+0x7c>
 8024820:	f04f 36ff 	mov.w	r6, #4294967295
 8024824:	e7e4      	b.n	80247f0 <_strtol_l.isra.0+0x94>
 8024826:	2e00      	cmp	r6, #0
 8024828:	da05      	bge.n	8024836 <_strtol_l.isra.0+0xda>
 802482a:	2322      	movs	r3, #34	; 0x22
 802482c:	6003      	str	r3, [r0, #0]
 802482e:	4665      	mov	r5, ip
 8024830:	b942      	cbnz	r2, 8024844 <_strtol_l.isra.0+0xe8>
 8024832:	4628      	mov	r0, r5
 8024834:	e79d      	b.n	8024772 <_strtol_l.isra.0+0x16>
 8024836:	f1b8 0f00 	cmp.w	r8, #0
 802483a:	d000      	beq.n	802483e <_strtol_l.isra.0+0xe2>
 802483c:	426d      	negs	r5, r5
 802483e:	2a00      	cmp	r2, #0
 8024840:	d0f7      	beq.n	8024832 <_strtol_l.isra.0+0xd6>
 8024842:	b10e      	cbz	r6, 8024848 <_strtol_l.isra.0+0xec>
 8024844:	f10e 31ff 	add.w	r1, lr, #4294967295
 8024848:	6011      	str	r1, [r2, #0]
 802484a:	e7f2      	b.n	8024832 <_strtol_l.isra.0+0xd6>
 802484c:	2430      	movs	r4, #48	; 0x30
 802484e:	2b00      	cmp	r3, #0
 8024850:	d1b3      	bne.n	80247ba <_strtol_l.isra.0+0x5e>
 8024852:	2308      	movs	r3, #8
 8024854:	e7b1      	b.n	80247ba <_strtol_l.isra.0+0x5e>
 8024856:	2c30      	cmp	r4, #48	; 0x30
 8024858:	d0a4      	beq.n	80247a4 <_strtol_l.isra.0+0x48>
 802485a:	230a      	movs	r3, #10
 802485c:	e7ad      	b.n	80247ba <_strtol_l.isra.0+0x5e>
 802485e:	bf00      	nop
 8024860:	080337ac 	.word	0x080337ac

08024864 <_strtol_r>:
 8024864:	f7ff bf7a 	b.w	802475c <_strtol_l.isra.0>

08024868 <strtol>:
 8024868:	4613      	mov	r3, r2
 802486a:	460a      	mov	r2, r1
 802486c:	4601      	mov	r1, r0
 802486e:	4802      	ldr	r0, [pc, #8]	; (8024878 <strtol+0x10>)
 8024870:	6800      	ldr	r0, [r0, #0]
 8024872:	f7ff bf73 	b.w	802475c <_strtol_l.isra.0>
 8024876:	bf00      	nop
 8024878:	200005e4 	.word	0x200005e4

0802487c <__tzcalc_limits>:
 802487c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024880:	4680      	mov	r8, r0
 8024882:	f001 ffd1 	bl	8026828 <__gettzinfo>
 8024886:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802488a:	4598      	cmp	r8, r3
 802488c:	f340 8098 	ble.w	80249c0 <__tzcalc_limits+0x144>
 8024890:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8024894:	4443      	add	r3, r8
 8024896:	109b      	asrs	r3, r3, #2
 8024898:	f240 126d 	movw	r2, #365	; 0x16d
 802489c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80248a0:	fb02 3505 	mla	r5, r2, r5, r3
 80248a4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80248a8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80248ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80248b0:	441d      	add	r5, r3
 80248b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80248b6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80248ba:	fb98 f7f3 	sdiv	r7, r8, r3
 80248be:	fb03 8717 	mls	r7, r3, r7, r8
 80248c2:	4442      	add	r2, r8
 80248c4:	fab7 fc87 	clz	ip, r7
 80248c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80248cc:	f008 0303 	and.w	r3, r8, #3
 80248d0:	4415      	add	r5, r2
 80248d2:	2264      	movs	r2, #100	; 0x64
 80248d4:	f8c0 8004 	str.w	r8, [r0, #4]
 80248d8:	fb98 f6f2 	sdiv	r6, r8, r2
 80248dc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80248e0:	fb02 8616 	mls	r6, r2, r6, r8
 80248e4:	4604      	mov	r4, r0
 80248e6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80248ea:	9300      	str	r3, [sp, #0]
 80248ec:	f04f 0e07 	mov.w	lr, #7
 80248f0:	7a22      	ldrb	r2, [r4, #8]
 80248f2:	6963      	ldr	r3, [r4, #20]
 80248f4:	2a4a      	cmp	r2, #74	; 0x4a
 80248f6:	d128      	bne.n	802494a <__tzcalc_limits+0xce>
 80248f8:	9900      	ldr	r1, [sp, #0]
 80248fa:	18ea      	adds	r2, r5, r3
 80248fc:	b901      	cbnz	r1, 8024900 <__tzcalc_limits+0x84>
 80248fe:	b906      	cbnz	r6, 8024902 <__tzcalc_limits+0x86>
 8024900:	bb0f      	cbnz	r7, 8024946 <__tzcalc_limits+0xca>
 8024902:	2b3b      	cmp	r3, #59	; 0x3b
 8024904:	bfd4      	ite	le
 8024906:	2300      	movle	r3, #0
 8024908:	2301      	movgt	r3, #1
 802490a:	4413      	add	r3, r2
 802490c:	1e5a      	subs	r2, r3, #1
 802490e:	69a3      	ldr	r3, [r4, #24]
 8024910:	492c      	ldr	r1, [pc, #176]	; (80249c4 <__tzcalc_limits+0x148>)
 8024912:	fb01 3202 	mla	r2, r1, r2, r3
 8024916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024918:	4413      	add	r3, r2
 802491a:	461a      	mov	r2, r3
 802491c:	17db      	asrs	r3, r3, #31
 802491e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8024922:	3428      	adds	r4, #40	; 0x28
 8024924:	45a3      	cmp	fp, r4
 8024926:	d1e3      	bne.n	80248f0 <__tzcalc_limits+0x74>
 8024928:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 802492c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8024930:	4294      	cmp	r4, r2
 8024932:	eb75 0303 	sbcs.w	r3, r5, r3
 8024936:	bfb4      	ite	lt
 8024938:	2301      	movlt	r3, #1
 802493a:	2300      	movge	r3, #0
 802493c:	6003      	str	r3, [r0, #0]
 802493e:	2001      	movs	r0, #1
 8024940:	b003      	add	sp, #12
 8024942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024946:	2300      	movs	r3, #0
 8024948:	e7df      	b.n	802490a <__tzcalc_limits+0x8e>
 802494a:	2a44      	cmp	r2, #68	; 0x44
 802494c:	d101      	bne.n	8024952 <__tzcalc_limits+0xd6>
 802494e:	18ea      	adds	r2, r5, r3
 8024950:	e7dd      	b.n	802490e <__tzcalc_limits+0x92>
 8024952:	9a00      	ldr	r2, [sp, #0]
 8024954:	bb72      	cbnz	r2, 80249b4 <__tzcalc_limits+0x138>
 8024956:	2e00      	cmp	r6, #0
 8024958:	bf0c      	ite	eq
 802495a:	46e0      	moveq	r8, ip
 802495c:	f04f 0801 	movne.w	r8, #1
 8024960:	4919      	ldr	r1, [pc, #100]	; (80249c8 <__tzcalc_limits+0x14c>)
 8024962:	68e2      	ldr	r2, [r4, #12]
 8024964:	9201      	str	r2, [sp, #4]
 8024966:	f04f 0a30 	mov.w	sl, #48	; 0x30
 802496a:	fb0a 1808 	mla	r8, sl, r8, r1
 802496e:	462a      	mov	r2, r5
 8024970:	f04f 0900 	mov.w	r9, #0
 8024974:	f1a8 0804 	sub.w	r8, r8, #4
 8024978:	9901      	ldr	r1, [sp, #4]
 802497a:	f109 0901 	add.w	r9, r9, #1
 802497e:	4549      	cmp	r1, r9
 8024980:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8024984:	dc18      	bgt.n	80249b8 <__tzcalc_limits+0x13c>
 8024986:	f102 0804 	add.w	r8, r2, #4
 802498a:	fb98 f9fe 	sdiv	r9, r8, lr
 802498e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8024992:	eba8 0909 	sub.w	r9, r8, r9
 8024996:	ebb3 0909 	subs.w	r9, r3, r9
 802499a:	6923      	ldr	r3, [r4, #16]
 802499c:	f103 33ff 	add.w	r3, r3, #4294967295
 80249a0:	bf48      	it	mi
 80249a2:	f109 0907 	addmi.w	r9, r9, #7
 80249a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80249aa:	444b      	add	r3, r9
 80249ac:	4553      	cmp	r3, sl
 80249ae:	da05      	bge.n	80249bc <__tzcalc_limits+0x140>
 80249b0:	441a      	add	r2, r3
 80249b2:	e7ac      	b.n	802490e <__tzcalc_limits+0x92>
 80249b4:	46e0      	mov	r8, ip
 80249b6:	e7d3      	b.n	8024960 <__tzcalc_limits+0xe4>
 80249b8:	4452      	add	r2, sl
 80249ba:	e7dd      	b.n	8024978 <__tzcalc_limits+0xfc>
 80249bc:	3b07      	subs	r3, #7
 80249be:	e7f5      	b.n	80249ac <__tzcalc_limits+0x130>
 80249c0:	2000      	movs	r0, #0
 80249c2:	e7bd      	b.n	8024940 <__tzcalc_limits+0xc4>
 80249c4:	00015180 	.word	0x00015180
 80249c8:	08033cb4 	.word	0x08033cb4

080249cc <__tz_lock>:
 80249cc:	4801      	ldr	r0, [pc, #4]	; (80249d4 <__tz_lock+0x8>)
 80249ce:	f001 bf30 	b.w	8026832 <__retarget_lock_acquire>
 80249d2:	bf00      	nop
 80249d4:	20001a1f 	.word	0x20001a1f

080249d8 <__tz_unlock>:
 80249d8:	4801      	ldr	r0, [pc, #4]	; (80249e0 <__tz_unlock+0x8>)
 80249da:	f001 bf2c 	b.w	8026836 <__retarget_lock_release>
 80249de:	bf00      	nop
 80249e0:	20001a1f 	.word	0x20001a1f

080249e4 <_tzset_unlocked>:
 80249e4:	4b01      	ldr	r3, [pc, #4]	; (80249ec <_tzset_unlocked+0x8>)
 80249e6:	6818      	ldr	r0, [r3, #0]
 80249e8:	f000 b802 	b.w	80249f0 <_tzset_unlocked_r>
 80249ec:	200005e4 	.word	0x200005e4

080249f0 <_tzset_unlocked_r>:
 80249f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f4:	b08d      	sub	sp, #52	; 0x34
 80249f6:	4607      	mov	r7, r0
 80249f8:	f001 ff16 	bl	8026828 <__gettzinfo>
 80249fc:	49ae      	ldr	r1, [pc, #696]	; (8024cb8 <_tzset_unlocked_r+0x2c8>)
 80249fe:	4eaf      	ldr	r6, [pc, #700]	; (8024cbc <_tzset_unlocked_r+0x2cc>)
 8024a00:	4605      	mov	r5, r0
 8024a02:	4638      	mov	r0, r7
 8024a04:	f001 ff08 	bl	8026818 <_getenv_r>
 8024a08:	4604      	mov	r4, r0
 8024a0a:	b970      	cbnz	r0, 8024a2a <_tzset_unlocked_r+0x3a>
 8024a0c:	4bac      	ldr	r3, [pc, #688]	; (8024cc0 <_tzset_unlocked_r+0x2d0>)
 8024a0e:	4aad      	ldr	r2, [pc, #692]	; (8024cc4 <_tzset_unlocked_r+0x2d4>)
 8024a10:	6018      	str	r0, [r3, #0]
 8024a12:	4bad      	ldr	r3, [pc, #692]	; (8024cc8 <_tzset_unlocked_r+0x2d8>)
 8024a14:	6018      	str	r0, [r3, #0]
 8024a16:	4bad      	ldr	r3, [pc, #692]	; (8024ccc <_tzset_unlocked_r+0x2dc>)
 8024a18:	6830      	ldr	r0, [r6, #0]
 8024a1a:	e9c3 2200 	strd	r2, r2, [r3]
 8024a1e:	f7fd fccd 	bl	80223bc <free>
 8024a22:	6034      	str	r4, [r6, #0]
 8024a24:	b00d      	add	sp, #52	; 0x34
 8024a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a2a:	6831      	ldr	r1, [r6, #0]
 8024a2c:	2900      	cmp	r1, #0
 8024a2e:	d15f      	bne.n	8024af0 <_tzset_unlocked_r+0x100>
 8024a30:	6830      	ldr	r0, [r6, #0]
 8024a32:	f7fd fcc3 	bl	80223bc <free>
 8024a36:	4620      	mov	r0, r4
 8024a38:	f7db fbd4 	bl	80001e4 <strlen>
 8024a3c:	1c41      	adds	r1, r0, #1
 8024a3e:	4638      	mov	r0, r7
 8024a40:	f7fd ffe0 	bl	8022a04 <_malloc_r>
 8024a44:	6030      	str	r0, [r6, #0]
 8024a46:	2800      	cmp	r0, #0
 8024a48:	d157      	bne.n	8024afa <_tzset_unlocked_r+0x10a>
 8024a4a:	7823      	ldrb	r3, [r4, #0]
 8024a4c:	4aa0      	ldr	r2, [pc, #640]	; (8024cd0 <_tzset_unlocked_r+0x2e0>)
 8024a4e:	49a1      	ldr	r1, [pc, #644]	; (8024cd4 <_tzset_unlocked_r+0x2e4>)
 8024a50:	2b3a      	cmp	r3, #58	; 0x3a
 8024a52:	bf08      	it	eq
 8024a54:	3401      	addeq	r4, #1
 8024a56:	ae0a      	add	r6, sp, #40	; 0x28
 8024a58:	4633      	mov	r3, r6
 8024a5a:	4620      	mov	r0, r4
 8024a5c:	f7fe ff2e 	bl	80238bc <siscanf>
 8024a60:	2800      	cmp	r0, #0
 8024a62:	dddf      	ble.n	8024a24 <_tzset_unlocked_r+0x34>
 8024a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a66:	18e7      	adds	r7, r4, r3
 8024a68:	5ce3      	ldrb	r3, [r4, r3]
 8024a6a:	2b2d      	cmp	r3, #45	; 0x2d
 8024a6c:	d149      	bne.n	8024b02 <_tzset_unlocked_r+0x112>
 8024a6e:	3701      	adds	r7, #1
 8024a70:	f04f 34ff 	mov.w	r4, #4294967295
 8024a74:	f10d 0a20 	add.w	sl, sp, #32
 8024a78:	f10d 0b1e 	add.w	fp, sp, #30
 8024a7c:	f04f 0800 	mov.w	r8, #0
 8024a80:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8024a84:	4994      	ldr	r1, [pc, #592]	; (8024cd8 <_tzset_unlocked_r+0x2e8>)
 8024a86:	9603      	str	r6, [sp, #12]
 8024a88:	f8cd b000 	str.w	fp, [sp]
 8024a8c:	4633      	mov	r3, r6
 8024a8e:	aa07      	add	r2, sp, #28
 8024a90:	4638      	mov	r0, r7
 8024a92:	f8ad 801e 	strh.w	r8, [sp, #30]
 8024a96:	f8ad 8020 	strh.w	r8, [sp, #32]
 8024a9a:	f7fe ff0f 	bl	80238bc <siscanf>
 8024a9e:	4540      	cmp	r0, r8
 8024aa0:	ddc0      	ble.n	8024a24 <_tzset_unlocked_r+0x34>
 8024aa2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024aa6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024aaa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8024ce4 <_tzset_unlocked_r+0x2f4>
 8024aae:	213c      	movs	r1, #60	; 0x3c
 8024ab0:	fb01 2203 	mla	r2, r1, r3, r2
 8024ab4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024ab8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024abc:	fb01 2303 	mla	r3, r1, r3, r2
 8024ac0:	435c      	muls	r4, r3
 8024ac2:	62ac      	str	r4, [r5, #40]	; 0x28
 8024ac4:	4c81      	ldr	r4, [pc, #516]	; (8024ccc <_tzset_unlocked_r+0x2dc>)
 8024ac6:	4b82      	ldr	r3, [pc, #520]	; (8024cd0 <_tzset_unlocked_r+0x2e0>)
 8024ac8:	6023      	str	r3, [r4, #0]
 8024aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024acc:	4981      	ldr	r1, [pc, #516]	; (8024cd4 <_tzset_unlocked_r+0x2e4>)
 8024ace:	441f      	add	r7, r3
 8024ad0:	464a      	mov	r2, r9
 8024ad2:	4633      	mov	r3, r6
 8024ad4:	4638      	mov	r0, r7
 8024ad6:	f7fe fef1 	bl	80238bc <siscanf>
 8024ada:	4540      	cmp	r0, r8
 8024adc:	dc16      	bgt.n	8024b0c <_tzset_unlocked_r+0x11c>
 8024ade:	6823      	ldr	r3, [r4, #0]
 8024ae0:	6063      	str	r3, [r4, #4]
 8024ae2:	4b77      	ldr	r3, [pc, #476]	; (8024cc0 <_tzset_unlocked_r+0x2d0>)
 8024ae4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8024ae6:	601a      	str	r2, [r3, #0]
 8024ae8:	4b77      	ldr	r3, [pc, #476]	; (8024cc8 <_tzset_unlocked_r+0x2d8>)
 8024aea:	f8c3 8000 	str.w	r8, [r3]
 8024aee:	e799      	b.n	8024a24 <_tzset_unlocked_r+0x34>
 8024af0:	f7db fb6e 	bl	80001d0 <strcmp>
 8024af4:	2800      	cmp	r0, #0
 8024af6:	d19b      	bne.n	8024a30 <_tzset_unlocked_r+0x40>
 8024af8:	e794      	b.n	8024a24 <_tzset_unlocked_r+0x34>
 8024afa:	4621      	mov	r1, r4
 8024afc:	f7fe ff5c 	bl	80239b8 <strcpy>
 8024b00:	e7a3      	b.n	8024a4a <_tzset_unlocked_r+0x5a>
 8024b02:	2b2b      	cmp	r3, #43	; 0x2b
 8024b04:	bf08      	it	eq
 8024b06:	3701      	addeq	r7, #1
 8024b08:	2401      	movs	r4, #1
 8024b0a:	e7b3      	b.n	8024a74 <_tzset_unlocked_r+0x84>
 8024b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b0e:	f8c4 9004 	str.w	r9, [r4, #4]
 8024b12:	18fc      	adds	r4, r7, r3
 8024b14:	5cfb      	ldrb	r3, [r7, r3]
 8024b16:	2b2d      	cmp	r3, #45	; 0x2d
 8024b18:	f040 808b 	bne.w	8024c32 <_tzset_unlocked_r+0x242>
 8024b1c:	3401      	adds	r4, #1
 8024b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8024b22:	2300      	movs	r3, #0
 8024b24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024b28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024b2c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024b30:	930a      	str	r3, [sp, #40]	; 0x28
 8024b32:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024b36:	e9cd b600 	strd	fp, r6, [sp]
 8024b3a:	4967      	ldr	r1, [pc, #412]	; (8024cd8 <_tzset_unlocked_r+0x2e8>)
 8024b3c:	4633      	mov	r3, r6
 8024b3e:	aa07      	add	r2, sp, #28
 8024b40:	4620      	mov	r0, r4
 8024b42:	f7fe febb 	bl	80238bc <siscanf>
 8024b46:	2800      	cmp	r0, #0
 8024b48:	dc78      	bgt.n	8024c3c <_tzset_unlocked_r+0x24c>
 8024b4a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8024b4c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8024b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b52:	652f      	str	r7, [r5, #80]	; 0x50
 8024b54:	441c      	add	r4, r3
 8024b56:	462f      	mov	r7, r5
 8024b58:	f04f 0900 	mov.w	r9, #0
 8024b5c:	7823      	ldrb	r3, [r4, #0]
 8024b5e:	2b2c      	cmp	r3, #44	; 0x2c
 8024b60:	bf08      	it	eq
 8024b62:	3401      	addeq	r4, #1
 8024b64:	f894 8000 	ldrb.w	r8, [r4]
 8024b68:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8024b6c:	d178      	bne.n	8024c60 <_tzset_unlocked_r+0x270>
 8024b6e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8024b72:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8024b76:	ab09      	add	r3, sp, #36	; 0x24
 8024b78:	9300      	str	r3, [sp, #0]
 8024b7a:	4958      	ldr	r1, [pc, #352]	; (8024cdc <_tzset_unlocked_r+0x2ec>)
 8024b7c:	9603      	str	r6, [sp, #12]
 8024b7e:	4633      	mov	r3, r6
 8024b80:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8024b84:	4620      	mov	r0, r4
 8024b86:	f7fe fe99 	bl	80238bc <siscanf>
 8024b8a:	2803      	cmp	r0, #3
 8024b8c:	f47f af4a 	bne.w	8024a24 <_tzset_unlocked_r+0x34>
 8024b90:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8024b94:	1e4b      	subs	r3, r1, #1
 8024b96:	2b0b      	cmp	r3, #11
 8024b98:	f63f af44 	bhi.w	8024a24 <_tzset_unlocked_r+0x34>
 8024b9c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8024ba0:	1e53      	subs	r3, r2, #1
 8024ba2:	2b04      	cmp	r3, #4
 8024ba4:	f63f af3e 	bhi.w	8024a24 <_tzset_unlocked_r+0x34>
 8024ba8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8024bac:	2b06      	cmp	r3, #6
 8024bae:	f63f af39 	bhi.w	8024a24 <_tzset_unlocked_r+0x34>
 8024bb2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8024bb6:	f887 8008 	strb.w	r8, [r7, #8]
 8024bba:	617b      	str	r3, [r7, #20]
 8024bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024bbe:	eb04 0803 	add.w	r8, r4, r3
 8024bc2:	2302      	movs	r3, #2
 8024bc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024bc8:	2300      	movs	r3, #0
 8024bca:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024bce:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8024bd4:	f898 3000 	ldrb.w	r3, [r8]
 8024bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8024bda:	d109      	bne.n	8024bf0 <_tzset_unlocked_r+0x200>
 8024bdc:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024be0:	e9cd b600 	strd	fp, r6, [sp]
 8024be4:	493e      	ldr	r1, [pc, #248]	; (8024ce0 <_tzset_unlocked_r+0x2f0>)
 8024be6:	4633      	mov	r3, r6
 8024be8:	aa07      	add	r2, sp, #28
 8024bea:	4640      	mov	r0, r8
 8024bec:	f7fe fe66 	bl	80238bc <siscanf>
 8024bf0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024bf4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024bf8:	213c      	movs	r1, #60	; 0x3c
 8024bfa:	fb01 2203 	mla	r2, r1, r3, r2
 8024bfe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024c02:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024c06:	fb01 2303 	mla	r3, r1, r3, r2
 8024c0a:	61bb      	str	r3, [r7, #24]
 8024c0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024c0e:	3728      	adds	r7, #40	; 0x28
 8024c10:	4444      	add	r4, r8
 8024c12:	f1b9 0f00 	cmp.w	r9, #0
 8024c16:	d020      	beq.n	8024c5a <_tzset_unlocked_r+0x26a>
 8024c18:	6868      	ldr	r0, [r5, #4]
 8024c1a:	f7ff fe2f 	bl	802487c <__tzcalc_limits>
 8024c1e:	4b28      	ldr	r3, [pc, #160]	; (8024cc0 <_tzset_unlocked_r+0x2d0>)
 8024c20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8024c22:	601a      	str	r2, [r3, #0]
 8024c24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8024c26:	1a9b      	subs	r3, r3, r2
 8024c28:	4a27      	ldr	r2, [pc, #156]	; (8024cc8 <_tzset_unlocked_r+0x2d8>)
 8024c2a:	bf18      	it	ne
 8024c2c:	2301      	movne	r3, #1
 8024c2e:	6013      	str	r3, [r2, #0]
 8024c30:	e6f8      	b.n	8024a24 <_tzset_unlocked_r+0x34>
 8024c32:	2b2b      	cmp	r3, #43	; 0x2b
 8024c34:	bf08      	it	eq
 8024c36:	3401      	addeq	r4, #1
 8024c38:	2701      	movs	r7, #1
 8024c3a:	e772      	b.n	8024b22 <_tzset_unlocked_r+0x132>
 8024c3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024c40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024c44:	213c      	movs	r1, #60	; 0x3c
 8024c46:	fb01 2203 	mla	r2, r1, r3, r2
 8024c4a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8024c4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024c52:	fb01 2303 	mla	r3, r1, r3, r2
 8024c56:	435f      	muls	r7, r3
 8024c58:	e77a      	b.n	8024b50 <_tzset_unlocked_r+0x160>
 8024c5a:	f04f 0901 	mov.w	r9, #1
 8024c5e:	e77d      	b.n	8024b5c <_tzset_unlocked_r+0x16c>
 8024c60:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8024c64:	bf06      	itte	eq
 8024c66:	3401      	addeq	r4, #1
 8024c68:	4643      	moveq	r3, r8
 8024c6a:	2344      	movne	r3, #68	; 0x44
 8024c6c:	220a      	movs	r2, #10
 8024c6e:	a90b      	add	r1, sp, #44	; 0x2c
 8024c70:	4620      	mov	r0, r4
 8024c72:	9305      	str	r3, [sp, #20]
 8024c74:	f003 f918 	bl	8027ea8 <strtoul>
 8024c78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8024c7c:	9b05      	ldr	r3, [sp, #20]
 8024c7e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8024c82:	45a0      	cmp	r8, r4
 8024c84:	d114      	bne.n	8024cb0 <_tzset_unlocked_r+0x2c0>
 8024c86:	234d      	movs	r3, #77	; 0x4d
 8024c88:	f1b9 0f00 	cmp.w	r9, #0
 8024c8c:	d107      	bne.n	8024c9e <_tzset_unlocked_r+0x2ae>
 8024c8e:	722b      	strb	r3, [r5, #8]
 8024c90:	2103      	movs	r1, #3
 8024c92:	2302      	movs	r3, #2
 8024c94:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8024c98:	f8c5 9014 	str.w	r9, [r5, #20]
 8024c9c:	e791      	b.n	8024bc2 <_tzset_unlocked_r+0x1d2>
 8024c9e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8024ca2:	220b      	movs	r2, #11
 8024ca4:	2301      	movs	r3, #1
 8024ca6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8024caa:	2300      	movs	r3, #0
 8024cac:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024cae:	e788      	b.n	8024bc2 <_tzset_unlocked_r+0x1d2>
 8024cb0:	b280      	uxth	r0, r0
 8024cb2:	723b      	strb	r3, [r7, #8]
 8024cb4:	6178      	str	r0, [r7, #20]
 8024cb6:	e784      	b.n	8024bc2 <_tzset_unlocked_r+0x1d2>
 8024cb8:	08033ae1 	.word	0x08033ae1
 8024cbc:	20001164 	.word	0x20001164
 8024cc0:	2000116c 	.word	0x2000116c
 8024cc4:	08033ae4 	.word	0x08033ae4
 8024cc8:	20001168 	.word	0x20001168
 8024ccc:	20000648 	.word	0x20000648
 8024cd0:	20001157 	.word	0x20001157
 8024cd4:	08033ae8 	.word	0x08033ae8
 8024cd8:	08033b0b 	.word	0x08033b0b
 8024cdc:	08033af7 	.word	0x08033af7
 8024ce0:	08033b0a 	.word	0x08033b0a
 8024ce4:	2000114c 	.word	0x2000114c

08024ce8 <_vsniprintf_r>:
 8024ce8:	b530      	push	{r4, r5, lr}
 8024cea:	1e14      	subs	r4, r2, #0
 8024cec:	4605      	mov	r5, r0
 8024cee:	b09b      	sub	sp, #108	; 0x6c
 8024cf0:	4618      	mov	r0, r3
 8024cf2:	da05      	bge.n	8024d00 <_vsniprintf_r+0x18>
 8024cf4:	238b      	movs	r3, #139	; 0x8b
 8024cf6:	602b      	str	r3, [r5, #0]
 8024cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8024cfc:	b01b      	add	sp, #108	; 0x6c
 8024cfe:	bd30      	pop	{r4, r5, pc}
 8024d00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024d04:	f8ad 300c 	strh.w	r3, [sp, #12]
 8024d08:	bf14      	ite	ne
 8024d0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8024d0e:	4623      	moveq	r3, r4
 8024d10:	9302      	str	r3, [sp, #8]
 8024d12:	9305      	str	r3, [sp, #20]
 8024d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024d18:	9100      	str	r1, [sp, #0]
 8024d1a:	9104      	str	r1, [sp, #16]
 8024d1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024d20:	4602      	mov	r2, r0
 8024d22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024d24:	4669      	mov	r1, sp
 8024d26:	4628      	mov	r0, r5
 8024d28:	f002 fb58 	bl	80273dc <_svfiprintf_r>
 8024d2c:	1c43      	adds	r3, r0, #1
 8024d2e:	bfbc      	itt	lt
 8024d30:	238b      	movlt	r3, #139	; 0x8b
 8024d32:	602b      	strlt	r3, [r5, #0]
 8024d34:	2c00      	cmp	r4, #0
 8024d36:	d0e1      	beq.n	8024cfc <_vsniprintf_r+0x14>
 8024d38:	9b00      	ldr	r3, [sp, #0]
 8024d3a:	2200      	movs	r2, #0
 8024d3c:	701a      	strb	r2, [r3, #0]
 8024d3e:	e7dd      	b.n	8024cfc <_vsniprintf_r+0x14>

08024d40 <vsniprintf>:
 8024d40:	b507      	push	{r0, r1, r2, lr}
 8024d42:	9300      	str	r3, [sp, #0]
 8024d44:	4613      	mov	r3, r2
 8024d46:	460a      	mov	r2, r1
 8024d48:	4601      	mov	r1, r0
 8024d4a:	4803      	ldr	r0, [pc, #12]	; (8024d58 <vsniprintf+0x18>)
 8024d4c:	6800      	ldr	r0, [r0, #0]
 8024d4e:	f7ff ffcb 	bl	8024ce8 <_vsniprintf_r>
 8024d52:	b003      	add	sp, #12
 8024d54:	f85d fb04 	ldr.w	pc, [sp], #4
 8024d58:	200005e4 	.word	0x200005e4

08024d5c <__swbuf_r>:
 8024d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024d5e:	460e      	mov	r6, r1
 8024d60:	4614      	mov	r4, r2
 8024d62:	4605      	mov	r5, r0
 8024d64:	b118      	cbz	r0, 8024d6e <__swbuf_r+0x12>
 8024d66:	6983      	ldr	r3, [r0, #24]
 8024d68:	b90b      	cbnz	r3, 8024d6e <__swbuf_r+0x12>
 8024d6a:	f001 f8b1 	bl	8025ed0 <__sinit>
 8024d6e:	4b21      	ldr	r3, [pc, #132]	; (8024df4 <__swbuf_r+0x98>)
 8024d70:	429c      	cmp	r4, r3
 8024d72:	d12b      	bne.n	8024dcc <__swbuf_r+0x70>
 8024d74:	686c      	ldr	r4, [r5, #4]
 8024d76:	69a3      	ldr	r3, [r4, #24]
 8024d78:	60a3      	str	r3, [r4, #8]
 8024d7a:	89a3      	ldrh	r3, [r4, #12]
 8024d7c:	071a      	lsls	r2, r3, #28
 8024d7e:	d52f      	bpl.n	8024de0 <__swbuf_r+0x84>
 8024d80:	6923      	ldr	r3, [r4, #16]
 8024d82:	b36b      	cbz	r3, 8024de0 <__swbuf_r+0x84>
 8024d84:	6923      	ldr	r3, [r4, #16]
 8024d86:	6820      	ldr	r0, [r4, #0]
 8024d88:	1ac0      	subs	r0, r0, r3
 8024d8a:	6963      	ldr	r3, [r4, #20]
 8024d8c:	b2f6      	uxtb	r6, r6
 8024d8e:	4283      	cmp	r3, r0
 8024d90:	4637      	mov	r7, r6
 8024d92:	dc04      	bgt.n	8024d9e <__swbuf_r+0x42>
 8024d94:	4621      	mov	r1, r4
 8024d96:	4628      	mov	r0, r5
 8024d98:	f000 fff4 	bl	8025d84 <_fflush_r>
 8024d9c:	bb30      	cbnz	r0, 8024dec <__swbuf_r+0x90>
 8024d9e:	68a3      	ldr	r3, [r4, #8]
 8024da0:	3b01      	subs	r3, #1
 8024da2:	60a3      	str	r3, [r4, #8]
 8024da4:	6823      	ldr	r3, [r4, #0]
 8024da6:	1c5a      	adds	r2, r3, #1
 8024da8:	6022      	str	r2, [r4, #0]
 8024daa:	701e      	strb	r6, [r3, #0]
 8024dac:	6963      	ldr	r3, [r4, #20]
 8024dae:	3001      	adds	r0, #1
 8024db0:	4283      	cmp	r3, r0
 8024db2:	d004      	beq.n	8024dbe <__swbuf_r+0x62>
 8024db4:	89a3      	ldrh	r3, [r4, #12]
 8024db6:	07db      	lsls	r3, r3, #31
 8024db8:	d506      	bpl.n	8024dc8 <__swbuf_r+0x6c>
 8024dba:	2e0a      	cmp	r6, #10
 8024dbc:	d104      	bne.n	8024dc8 <__swbuf_r+0x6c>
 8024dbe:	4621      	mov	r1, r4
 8024dc0:	4628      	mov	r0, r5
 8024dc2:	f000 ffdf 	bl	8025d84 <_fflush_r>
 8024dc6:	b988      	cbnz	r0, 8024dec <__swbuf_r+0x90>
 8024dc8:	4638      	mov	r0, r7
 8024dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024dcc:	4b0a      	ldr	r3, [pc, #40]	; (8024df8 <__swbuf_r+0x9c>)
 8024dce:	429c      	cmp	r4, r3
 8024dd0:	d101      	bne.n	8024dd6 <__swbuf_r+0x7a>
 8024dd2:	68ac      	ldr	r4, [r5, #8]
 8024dd4:	e7cf      	b.n	8024d76 <__swbuf_r+0x1a>
 8024dd6:	4b09      	ldr	r3, [pc, #36]	; (8024dfc <__swbuf_r+0xa0>)
 8024dd8:	429c      	cmp	r4, r3
 8024dda:	bf08      	it	eq
 8024ddc:	68ec      	ldreq	r4, [r5, #12]
 8024dde:	e7ca      	b.n	8024d76 <__swbuf_r+0x1a>
 8024de0:	4621      	mov	r1, r4
 8024de2:	4628      	mov	r0, r5
 8024de4:	f000 f81e 	bl	8024e24 <__swsetup_r>
 8024de8:	2800      	cmp	r0, #0
 8024dea:	d0cb      	beq.n	8024d84 <__swbuf_r+0x28>
 8024dec:	f04f 37ff 	mov.w	r7, #4294967295
 8024df0:	e7ea      	b.n	8024dc8 <__swbuf_r+0x6c>
 8024df2:	bf00      	nop
 8024df4:	08033bf8 	.word	0x08033bf8
 8024df8:	08033c18 	.word	0x08033c18
 8024dfc:	08033bd8 	.word	0x08033bd8

08024e00 <_write_r>:
 8024e00:	b538      	push	{r3, r4, r5, lr}
 8024e02:	4d07      	ldr	r5, [pc, #28]	; (8024e20 <_write_r+0x20>)
 8024e04:	4604      	mov	r4, r0
 8024e06:	4608      	mov	r0, r1
 8024e08:	4611      	mov	r1, r2
 8024e0a:	2200      	movs	r2, #0
 8024e0c:	602a      	str	r2, [r5, #0]
 8024e0e:	461a      	mov	r2, r3
 8024e10:	f7df f960 	bl	80040d4 <_write>
 8024e14:	1c43      	adds	r3, r0, #1
 8024e16:	d102      	bne.n	8024e1e <_write_r+0x1e>
 8024e18:	682b      	ldr	r3, [r5, #0]
 8024e1a:	b103      	cbz	r3, 8024e1e <_write_r+0x1e>
 8024e1c:	6023      	str	r3, [r4, #0]
 8024e1e:	bd38      	pop	{r3, r4, r5, pc}
 8024e20:	20001a24 	.word	0x20001a24

08024e24 <__swsetup_r>:
 8024e24:	4b32      	ldr	r3, [pc, #200]	; (8024ef0 <__swsetup_r+0xcc>)
 8024e26:	b570      	push	{r4, r5, r6, lr}
 8024e28:	681d      	ldr	r5, [r3, #0]
 8024e2a:	4606      	mov	r6, r0
 8024e2c:	460c      	mov	r4, r1
 8024e2e:	b125      	cbz	r5, 8024e3a <__swsetup_r+0x16>
 8024e30:	69ab      	ldr	r3, [r5, #24]
 8024e32:	b913      	cbnz	r3, 8024e3a <__swsetup_r+0x16>
 8024e34:	4628      	mov	r0, r5
 8024e36:	f001 f84b 	bl	8025ed0 <__sinit>
 8024e3a:	4b2e      	ldr	r3, [pc, #184]	; (8024ef4 <__swsetup_r+0xd0>)
 8024e3c:	429c      	cmp	r4, r3
 8024e3e:	d10f      	bne.n	8024e60 <__swsetup_r+0x3c>
 8024e40:	686c      	ldr	r4, [r5, #4]
 8024e42:	89a3      	ldrh	r3, [r4, #12]
 8024e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024e48:	0719      	lsls	r1, r3, #28
 8024e4a:	d42c      	bmi.n	8024ea6 <__swsetup_r+0x82>
 8024e4c:	06dd      	lsls	r5, r3, #27
 8024e4e:	d411      	bmi.n	8024e74 <__swsetup_r+0x50>
 8024e50:	2309      	movs	r3, #9
 8024e52:	6033      	str	r3, [r6, #0]
 8024e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024e58:	81a3      	strh	r3, [r4, #12]
 8024e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8024e5e:	e03e      	b.n	8024ede <__swsetup_r+0xba>
 8024e60:	4b25      	ldr	r3, [pc, #148]	; (8024ef8 <__swsetup_r+0xd4>)
 8024e62:	429c      	cmp	r4, r3
 8024e64:	d101      	bne.n	8024e6a <__swsetup_r+0x46>
 8024e66:	68ac      	ldr	r4, [r5, #8]
 8024e68:	e7eb      	b.n	8024e42 <__swsetup_r+0x1e>
 8024e6a:	4b24      	ldr	r3, [pc, #144]	; (8024efc <__swsetup_r+0xd8>)
 8024e6c:	429c      	cmp	r4, r3
 8024e6e:	bf08      	it	eq
 8024e70:	68ec      	ldreq	r4, [r5, #12]
 8024e72:	e7e6      	b.n	8024e42 <__swsetup_r+0x1e>
 8024e74:	0758      	lsls	r0, r3, #29
 8024e76:	d512      	bpl.n	8024e9e <__swsetup_r+0x7a>
 8024e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024e7a:	b141      	cbz	r1, 8024e8e <__swsetup_r+0x6a>
 8024e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024e80:	4299      	cmp	r1, r3
 8024e82:	d002      	beq.n	8024e8a <__swsetup_r+0x66>
 8024e84:	4630      	mov	r0, r6
 8024e86:	f7fd fd6d 	bl	8022964 <_free_r>
 8024e8a:	2300      	movs	r3, #0
 8024e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8024e8e:	89a3      	ldrh	r3, [r4, #12]
 8024e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024e94:	81a3      	strh	r3, [r4, #12]
 8024e96:	2300      	movs	r3, #0
 8024e98:	6063      	str	r3, [r4, #4]
 8024e9a:	6923      	ldr	r3, [r4, #16]
 8024e9c:	6023      	str	r3, [r4, #0]
 8024e9e:	89a3      	ldrh	r3, [r4, #12]
 8024ea0:	f043 0308 	orr.w	r3, r3, #8
 8024ea4:	81a3      	strh	r3, [r4, #12]
 8024ea6:	6923      	ldr	r3, [r4, #16]
 8024ea8:	b94b      	cbnz	r3, 8024ebe <__swsetup_r+0x9a>
 8024eaa:	89a3      	ldrh	r3, [r4, #12]
 8024eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024eb4:	d003      	beq.n	8024ebe <__swsetup_r+0x9a>
 8024eb6:	4621      	mov	r1, r4
 8024eb8:	4630      	mov	r0, r6
 8024eba:	f001 fcf5 	bl	80268a8 <__smakebuf_r>
 8024ebe:	89a0      	ldrh	r0, [r4, #12]
 8024ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024ec4:	f010 0301 	ands.w	r3, r0, #1
 8024ec8:	d00a      	beq.n	8024ee0 <__swsetup_r+0xbc>
 8024eca:	2300      	movs	r3, #0
 8024ecc:	60a3      	str	r3, [r4, #8]
 8024ece:	6963      	ldr	r3, [r4, #20]
 8024ed0:	425b      	negs	r3, r3
 8024ed2:	61a3      	str	r3, [r4, #24]
 8024ed4:	6923      	ldr	r3, [r4, #16]
 8024ed6:	b943      	cbnz	r3, 8024eea <__swsetup_r+0xc6>
 8024ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024edc:	d1ba      	bne.n	8024e54 <__swsetup_r+0x30>
 8024ede:	bd70      	pop	{r4, r5, r6, pc}
 8024ee0:	0781      	lsls	r1, r0, #30
 8024ee2:	bf58      	it	pl
 8024ee4:	6963      	ldrpl	r3, [r4, #20]
 8024ee6:	60a3      	str	r3, [r4, #8]
 8024ee8:	e7f4      	b.n	8024ed4 <__swsetup_r+0xb0>
 8024eea:	2000      	movs	r0, #0
 8024eec:	e7f7      	b.n	8024ede <__swsetup_r+0xba>
 8024eee:	bf00      	nop
 8024ef0:	200005e4 	.word	0x200005e4
 8024ef4:	08033bf8 	.word	0x08033bf8
 8024ef8:	08033c18 	.word	0x08033c18
 8024efc:	08033bd8 	.word	0x08033bd8

08024f00 <__assert_func>:
 8024f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024f02:	4614      	mov	r4, r2
 8024f04:	461a      	mov	r2, r3
 8024f06:	4b09      	ldr	r3, [pc, #36]	; (8024f2c <__assert_func+0x2c>)
 8024f08:	681b      	ldr	r3, [r3, #0]
 8024f0a:	4605      	mov	r5, r0
 8024f0c:	68d8      	ldr	r0, [r3, #12]
 8024f0e:	b14c      	cbz	r4, 8024f24 <__assert_func+0x24>
 8024f10:	4b07      	ldr	r3, [pc, #28]	; (8024f30 <__assert_func+0x30>)
 8024f12:	9100      	str	r1, [sp, #0]
 8024f14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024f18:	4906      	ldr	r1, [pc, #24]	; (8024f34 <__assert_func+0x34>)
 8024f1a:	462b      	mov	r3, r5
 8024f1c:	f7fd f928 	bl	8022170 <fiprintf>
 8024f20:	f003 f813 	bl	8027f4a <abort>
 8024f24:	4b04      	ldr	r3, [pc, #16]	; (8024f38 <__assert_func+0x38>)
 8024f26:	461c      	mov	r4, r3
 8024f28:	e7f3      	b.n	8024f12 <__assert_func+0x12>
 8024f2a:	bf00      	nop
 8024f2c:	200005e4 	.word	0x200005e4
 8024f30:	08033b1d 	.word	0x08033b1d
 8024f34:	08033b2a 	.word	0x08033b2a
 8024f38:	080303e5 	.word	0x080303e5

08024f3c <_close_r>:
 8024f3c:	b538      	push	{r3, r4, r5, lr}
 8024f3e:	4d06      	ldr	r5, [pc, #24]	; (8024f58 <_close_r+0x1c>)
 8024f40:	2300      	movs	r3, #0
 8024f42:	4604      	mov	r4, r0
 8024f44:	4608      	mov	r0, r1
 8024f46:	602b      	str	r3, [r5, #0]
 8024f48:	f7df f8ec 	bl	8004124 <_close>
 8024f4c:	1c43      	adds	r3, r0, #1
 8024f4e:	d102      	bne.n	8024f56 <_close_r+0x1a>
 8024f50:	682b      	ldr	r3, [r5, #0]
 8024f52:	b103      	cbz	r3, 8024f56 <_close_r+0x1a>
 8024f54:	6023      	str	r3, [r4, #0]
 8024f56:	bd38      	pop	{r3, r4, r5, pc}
 8024f58:	20001a24 	.word	0x20001a24

08024f5c <div>:
 8024f5c:	2900      	cmp	r1, #0
 8024f5e:	b510      	push	{r4, lr}
 8024f60:	fb91 f4f2 	sdiv	r4, r1, r2
 8024f64:	fb02 1314 	mls	r3, r2, r4, r1
 8024f68:	db06      	blt.n	8024f78 <div+0x1c>
 8024f6a:	2b00      	cmp	r3, #0
 8024f6c:	da01      	bge.n	8024f72 <div+0x16>
 8024f6e:	3401      	adds	r4, #1
 8024f70:	1a9b      	subs	r3, r3, r2
 8024f72:	e9c0 4300 	strd	r4, r3, [r0]
 8024f76:	bd10      	pop	{r4, pc}
 8024f78:	2b00      	cmp	r3, #0
 8024f7a:	bfc4      	itt	gt
 8024f7c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8024f80:	189b      	addgt	r3, r3, r2
 8024f82:	e7f6      	b.n	8024f72 <div+0x16>

08024f84 <quorem>:
 8024f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f88:	6903      	ldr	r3, [r0, #16]
 8024f8a:	690c      	ldr	r4, [r1, #16]
 8024f8c:	42a3      	cmp	r3, r4
 8024f8e:	4607      	mov	r7, r0
 8024f90:	f2c0 8081 	blt.w	8025096 <quorem+0x112>
 8024f94:	3c01      	subs	r4, #1
 8024f96:	f101 0814 	add.w	r8, r1, #20
 8024f9a:	f100 0514 	add.w	r5, r0, #20
 8024f9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024fa2:	9301      	str	r3, [sp, #4]
 8024fa4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024fa8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024fac:	3301      	adds	r3, #1
 8024fae:	429a      	cmp	r2, r3
 8024fb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024fb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024fb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8024fbc:	d331      	bcc.n	8025022 <quorem+0x9e>
 8024fbe:	f04f 0e00 	mov.w	lr, #0
 8024fc2:	4640      	mov	r0, r8
 8024fc4:	46ac      	mov	ip, r5
 8024fc6:	46f2      	mov	sl, lr
 8024fc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8024fcc:	b293      	uxth	r3, r2
 8024fce:	fb06 e303 	mla	r3, r6, r3, lr
 8024fd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8024fd6:	b29b      	uxth	r3, r3
 8024fd8:	ebaa 0303 	sub.w	r3, sl, r3
 8024fdc:	0c12      	lsrs	r2, r2, #16
 8024fde:	f8dc a000 	ldr.w	sl, [ip]
 8024fe2:	fb06 e202 	mla	r2, r6, r2, lr
 8024fe6:	fa13 f38a 	uxtah	r3, r3, sl
 8024fea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024fee:	fa1f fa82 	uxth.w	sl, r2
 8024ff2:	f8dc 2000 	ldr.w	r2, [ip]
 8024ff6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8024ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024ffe:	b29b      	uxth	r3, r3
 8025000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025004:	4581      	cmp	r9, r0
 8025006:	f84c 3b04 	str.w	r3, [ip], #4
 802500a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802500e:	d2db      	bcs.n	8024fc8 <quorem+0x44>
 8025010:	f855 300b 	ldr.w	r3, [r5, fp]
 8025014:	b92b      	cbnz	r3, 8025022 <quorem+0x9e>
 8025016:	9b01      	ldr	r3, [sp, #4]
 8025018:	3b04      	subs	r3, #4
 802501a:	429d      	cmp	r5, r3
 802501c:	461a      	mov	r2, r3
 802501e:	d32e      	bcc.n	802507e <quorem+0xfa>
 8025020:	613c      	str	r4, [r7, #16]
 8025022:	4638      	mov	r0, r7
 8025024:	f001 ff66 	bl	8026ef4 <__mcmp>
 8025028:	2800      	cmp	r0, #0
 802502a:	db24      	blt.n	8025076 <quorem+0xf2>
 802502c:	3601      	adds	r6, #1
 802502e:	4628      	mov	r0, r5
 8025030:	f04f 0c00 	mov.w	ip, #0
 8025034:	f858 2b04 	ldr.w	r2, [r8], #4
 8025038:	f8d0 e000 	ldr.w	lr, [r0]
 802503c:	b293      	uxth	r3, r2
 802503e:	ebac 0303 	sub.w	r3, ip, r3
 8025042:	0c12      	lsrs	r2, r2, #16
 8025044:	fa13 f38e 	uxtah	r3, r3, lr
 8025048:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802504c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025050:	b29b      	uxth	r3, r3
 8025052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025056:	45c1      	cmp	r9, r8
 8025058:	f840 3b04 	str.w	r3, [r0], #4
 802505c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8025060:	d2e8      	bcs.n	8025034 <quorem+0xb0>
 8025062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802506a:	b922      	cbnz	r2, 8025076 <quorem+0xf2>
 802506c:	3b04      	subs	r3, #4
 802506e:	429d      	cmp	r5, r3
 8025070:	461a      	mov	r2, r3
 8025072:	d30a      	bcc.n	802508a <quorem+0x106>
 8025074:	613c      	str	r4, [r7, #16]
 8025076:	4630      	mov	r0, r6
 8025078:	b003      	add	sp, #12
 802507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802507e:	6812      	ldr	r2, [r2, #0]
 8025080:	3b04      	subs	r3, #4
 8025082:	2a00      	cmp	r2, #0
 8025084:	d1cc      	bne.n	8025020 <quorem+0x9c>
 8025086:	3c01      	subs	r4, #1
 8025088:	e7c7      	b.n	802501a <quorem+0x96>
 802508a:	6812      	ldr	r2, [r2, #0]
 802508c:	3b04      	subs	r3, #4
 802508e:	2a00      	cmp	r2, #0
 8025090:	d1f0      	bne.n	8025074 <quorem+0xf0>
 8025092:	3c01      	subs	r4, #1
 8025094:	e7eb      	b.n	802506e <quorem+0xea>
 8025096:	2000      	movs	r0, #0
 8025098:	e7ee      	b.n	8025078 <quorem+0xf4>
 802509a:	0000      	movs	r0, r0
 802509c:	0000      	movs	r0, r0
	...

080250a0 <_dtoa_r>:
 80250a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250a4:	ed2d 8b02 	vpush	{d8}
 80250a8:	ec57 6b10 	vmov	r6, r7, d0
 80250ac:	b095      	sub	sp, #84	; 0x54
 80250ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80250b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80250b4:	9105      	str	r1, [sp, #20]
 80250b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80250ba:	4604      	mov	r4, r0
 80250bc:	9209      	str	r2, [sp, #36]	; 0x24
 80250be:	930f      	str	r3, [sp, #60]	; 0x3c
 80250c0:	b975      	cbnz	r5, 80250e0 <_dtoa_r+0x40>
 80250c2:	2010      	movs	r0, #16
 80250c4:	f7fd f972 	bl	80223ac <malloc>
 80250c8:	4602      	mov	r2, r0
 80250ca:	6260      	str	r0, [r4, #36]	; 0x24
 80250cc:	b920      	cbnz	r0, 80250d8 <_dtoa_r+0x38>
 80250ce:	4bb2      	ldr	r3, [pc, #712]	; (8025398 <_dtoa_r+0x2f8>)
 80250d0:	21ea      	movs	r1, #234	; 0xea
 80250d2:	48b2      	ldr	r0, [pc, #712]	; (802539c <_dtoa_r+0x2fc>)
 80250d4:	f7ff ff14 	bl	8024f00 <__assert_func>
 80250d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80250dc:	6005      	str	r5, [r0, #0]
 80250de:	60c5      	str	r5, [r0, #12]
 80250e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80250e2:	6819      	ldr	r1, [r3, #0]
 80250e4:	b151      	cbz	r1, 80250fc <_dtoa_r+0x5c>
 80250e6:	685a      	ldr	r2, [r3, #4]
 80250e8:	604a      	str	r2, [r1, #4]
 80250ea:	2301      	movs	r3, #1
 80250ec:	4093      	lsls	r3, r2
 80250ee:	608b      	str	r3, [r1, #8]
 80250f0:	4620      	mov	r0, r4
 80250f2:	f001 fc77 	bl	80269e4 <_Bfree>
 80250f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80250f8:	2200      	movs	r2, #0
 80250fa:	601a      	str	r2, [r3, #0]
 80250fc:	1e3b      	subs	r3, r7, #0
 80250fe:	bfb9      	ittee	lt
 8025100:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8025104:	9303      	strlt	r3, [sp, #12]
 8025106:	2300      	movge	r3, #0
 8025108:	f8c8 3000 	strge.w	r3, [r8]
 802510c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8025110:	4ba3      	ldr	r3, [pc, #652]	; (80253a0 <_dtoa_r+0x300>)
 8025112:	bfbc      	itt	lt
 8025114:	2201      	movlt	r2, #1
 8025116:	f8c8 2000 	strlt.w	r2, [r8]
 802511a:	ea33 0309 	bics.w	r3, r3, r9
 802511e:	d11b      	bne.n	8025158 <_dtoa_r+0xb8>
 8025120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025122:	f242 730f 	movw	r3, #9999	; 0x270f
 8025126:	6013      	str	r3, [r2, #0]
 8025128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802512c:	4333      	orrs	r3, r6
 802512e:	f000 857a 	beq.w	8025c26 <_dtoa_r+0xb86>
 8025132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025134:	b963      	cbnz	r3, 8025150 <_dtoa_r+0xb0>
 8025136:	4b9b      	ldr	r3, [pc, #620]	; (80253a4 <_dtoa_r+0x304>)
 8025138:	e024      	b.n	8025184 <_dtoa_r+0xe4>
 802513a:	4b9b      	ldr	r3, [pc, #620]	; (80253a8 <_dtoa_r+0x308>)
 802513c:	9300      	str	r3, [sp, #0]
 802513e:	3308      	adds	r3, #8
 8025140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025142:	6013      	str	r3, [r2, #0]
 8025144:	9800      	ldr	r0, [sp, #0]
 8025146:	b015      	add	sp, #84	; 0x54
 8025148:	ecbd 8b02 	vpop	{d8}
 802514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025150:	4b94      	ldr	r3, [pc, #592]	; (80253a4 <_dtoa_r+0x304>)
 8025152:	9300      	str	r3, [sp, #0]
 8025154:	3303      	adds	r3, #3
 8025156:	e7f3      	b.n	8025140 <_dtoa_r+0xa0>
 8025158:	ed9d 7b02 	vldr	d7, [sp, #8]
 802515c:	2200      	movs	r2, #0
 802515e:	ec51 0b17 	vmov	r0, r1, d7
 8025162:	2300      	movs	r3, #0
 8025164:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8025168:	f7db fcbe 	bl	8000ae8 <__aeabi_dcmpeq>
 802516c:	4680      	mov	r8, r0
 802516e:	b158      	cbz	r0, 8025188 <_dtoa_r+0xe8>
 8025170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025172:	2301      	movs	r3, #1
 8025174:	6013      	str	r3, [r2, #0]
 8025176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025178:	2b00      	cmp	r3, #0
 802517a:	f000 8551 	beq.w	8025c20 <_dtoa_r+0xb80>
 802517e:	488b      	ldr	r0, [pc, #556]	; (80253ac <_dtoa_r+0x30c>)
 8025180:	6018      	str	r0, [r3, #0]
 8025182:	1e43      	subs	r3, r0, #1
 8025184:	9300      	str	r3, [sp, #0]
 8025186:	e7dd      	b.n	8025144 <_dtoa_r+0xa4>
 8025188:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802518c:	aa12      	add	r2, sp, #72	; 0x48
 802518e:	a913      	add	r1, sp, #76	; 0x4c
 8025190:	4620      	mov	r0, r4
 8025192:	f001 ffcf 	bl	8027134 <__d2b>
 8025196:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802519a:	4683      	mov	fp, r0
 802519c:	2d00      	cmp	r5, #0
 802519e:	d07c      	beq.n	802529a <_dtoa_r+0x1fa>
 80251a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80251a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80251aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80251ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80251b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80251b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80251ba:	4b7d      	ldr	r3, [pc, #500]	; (80253b0 <_dtoa_r+0x310>)
 80251bc:	2200      	movs	r2, #0
 80251be:	4630      	mov	r0, r6
 80251c0:	4639      	mov	r1, r7
 80251c2:	f7db f871 	bl	80002a8 <__aeabi_dsub>
 80251c6:	a36e      	add	r3, pc, #440	; (adr r3, 8025380 <_dtoa_r+0x2e0>)
 80251c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251cc:	f7db fa24 	bl	8000618 <__aeabi_dmul>
 80251d0:	a36d      	add	r3, pc, #436	; (adr r3, 8025388 <_dtoa_r+0x2e8>)
 80251d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251d6:	f7db f869 	bl	80002ac <__adddf3>
 80251da:	4606      	mov	r6, r0
 80251dc:	4628      	mov	r0, r5
 80251de:	460f      	mov	r7, r1
 80251e0:	f7db f9b0 	bl	8000544 <__aeabi_i2d>
 80251e4:	a36a      	add	r3, pc, #424	; (adr r3, 8025390 <_dtoa_r+0x2f0>)
 80251e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251ea:	f7db fa15 	bl	8000618 <__aeabi_dmul>
 80251ee:	4602      	mov	r2, r0
 80251f0:	460b      	mov	r3, r1
 80251f2:	4630      	mov	r0, r6
 80251f4:	4639      	mov	r1, r7
 80251f6:	f7db f859 	bl	80002ac <__adddf3>
 80251fa:	4606      	mov	r6, r0
 80251fc:	460f      	mov	r7, r1
 80251fe:	f7db fcbb 	bl	8000b78 <__aeabi_d2iz>
 8025202:	2200      	movs	r2, #0
 8025204:	4682      	mov	sl, r0
 8025206:	2300      	movs	r3, #0
 8025208:	4630      	mov	r0, r6
 802520a:	4639      	mov	r1, r7
 802520c:	f7db fc76 	bl	8000afc <__aeabi_dcmplt>
 8025210:	b148      	cbz	r0, 8025226 <_dtoa_r+0x186>
 8025212:	4650      	mov	r0, sl
 8025214:	f7db f996 	bl	8000544 <__aeabi_i2d>
 8025218:	4632      	mov	r2, r6
 802521a:	463b      	mov	r3, r7
 802521c:	f7db fc64 	bl	8000ae8 <__aeabi_dcmpeq>
 8025220:	b908      	cbnz	r0, 8025226 <_dtoa_r+0x186>
 8025222:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025226:	f1ba 0f16 	cmp.w	sl, #22
 802522a:	d854      	bhi.n	80252d6 <_dtoa_r+0x236>
 802522c:	4b61      	ldr	r3, [pc, #388]	; (80253b4 <_dtoa_r+0x314>)
 802522e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8025232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802523a:	f7db fc5f 	bl	8000afc <__aeabi_dcmplt>
 802523e:	2800      	cmp	r0, #0
 8025240:	d04b      	beq.n	80252da <_dtoa_r+0x23a>
 8025242:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025246:	2300      	movs	r3, #0
 8025248:	930e      	str	r3, [sp, #56]	; 0x38
 802524a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802524c:	1b5d      	subs	r5, r3, r5
 802524e:	1e6b      	subs	r3, r5, #1
 8025250:	9304      	str	r3, [sp, #16]
 8025252:	bf43      	ittte	mi
 8025254:	2300      	movmi	r3, #0
 8025256:	f1c5 0801 	rsbmi	r8, r5, #1
 802525a:	9304      	strmi	r3, [sp, #16]
 802525c:	f04f 0800 	movpl.w	r8, #0
 8025260:	f1ba 0f00 	cmp.w	sl, #0
 8025264:	db3b      	blt.n	80252de <_dtoa_r+0x23e>
 8025266:	9b04      	ldr	r3, [sp, #16]
 8025268:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 802526c:	4453      	add	r3, sl
 802526e:	9304      	str	r3, [sp, #16]
 8025270:	2300      	movs	r3, #0
 8025272:	9306      	str	r3, [sp, #24]
 8025274:	9b05      	ldr	r3, [sp, #20]
 8025276:	2b09      	cmp	r3, #9
 8025278:	d869      	bhi.n	802534e <_dtoa_r+0x2ae>
 802527a:	2b05      	cmp	r3, #5
 802527c:	bfc4      	itt	gt
 802527e:	3b04      	subgt	r3, #4
 8025280:	9305      	strgt	r3, [sp, #20]
 8025282:	9b05      	ldr	r3, [sp, #20]
 8025284:	f1a3 0302 	sub.w	r3, r3, #2
 8025288:	bfcc      	ite	gt
 802528a:	2500      	movgt	r5, #0
 802528c:	2501      	movle	r5, #1
 802528e:	2b03      	cmp	r3, #3
 8025290:	d869      	bhi.n	8025366 <_dtoa_r+0x2c6>
 8025292:	e8df f003 	tbb	[pc, r3]
 8025296:	4e2c      	.short	0x4e2c
 8025298:	5a4c      	.short	0x5a4c
 802529a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 802529e:	441d      	add	r5, r3
 80252a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80252a4:	2b20      	cmp	r3, #32
 80252a6:	bfc1      	itttt	gt
 80252a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80252ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80252b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80252b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80252b8:	bfda      	itte	le
 80252ba:	f1c3 0320 	rsble	r3, r3, #32
 80252be:	fa06 f003 	lslle.w	r0, r6, r3
 80252c2:	4318      	orrgt	r0, r3
 80252c4:	f7db f92e 	bl	8000524 <__aeabi_ui2d>
 80252c8:	2301      	movs	r3, #1
 80252ca:	4606      	mov	r6, r0
 80252cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80252d0:	3d01      	subs	r5, #1
 80252d2:	9310      	str	r3, [sp, #64]	; 0x40
 80252d4:	e771      	b.n	80251ba <_dtoa_r+0x11a>
 80252d6:	2301      	movs	r3, #1
 80252d8:	e7b6      	b.n	8025248 <_dtoa_r+0x1a8>
 80252da:	900e      	str	r0, [sp, #56]	; 0x38
 80252dc:	e7b5      	b.n	802524a <_dtoa_r+0x1aa>
 80252de:	f1ca 0300 	rsb	r3, sl, #0
 80252e2:	9306      	str	r3, [sp, #24]
 80252e4:	2300      	movs	r3, #0
 80252e6:	eba8 080a 	sub.w	r8, r8, sl
 80252ea:	930d      	str	r3, [sp, #52]	; 0x34
 80252ec:	e7c2      	b.n	8025274 <_dtoa_r+0x1d4>
 80252ee:	2300      	movs	r3, #0
 80252f0:	9308      	str	r3, [sp, #32]
 80252f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	dc39      	bgt.n	802536c <_dtoa_r+0x2cc>
 80252f8:	f04f 0901 	mov.w	r9, #1
 80252fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8025300:	464b      	mov	r3, r9
 8025302:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8025306:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8025308:	2200      	movs	r2, #0
 802530a:	6042      	str	r2, [r0, #4]
 802530c:	2204      	movs	r2, #4
 802530e:	f102 0614 	add.w	r6, r2, #20
 8025312:	429e      	cmp	r6, r3
 8025314:	6841      	ldr	r1, [r0, #4]
 8025316:	d92f      	bls.n	8025378 <_dtoa_r+0x2d8>
 8025318:	4620      	mov	r0, r4
 802531a:	f001 fb23 	bl	8026964 <_Balloc>
 802531e:	9000      	str	r0, [sp, #0]
 8025320:	2800      	cmp	r0, #0
 8025322:	d14b      	bne.n	80253bc <_dtoa_r+0x31c>
 8025324:	4b24      	ldr	r3, [pc, #144]	; (80253b8 <_dtoa_r+0x318>)
 8025326:	4602      	mov	r2, r0
 8025328:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802532c:	e6d1      	b.n	80250d2 <_dtoa_r+0x32>
 802532e:	2301      	movs	r3, #1
 8025330:	e7de      	b.n	80252f0 <_dtoa_r+0x250>
 8025332:	2300      	movs	r3, #0
 8025334:	9308      	str	r3, [sp, #32]
 8025336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025338:	eb0a 0903 	add.w	r9, sl, r3
 802533c:	f109 0301 	add.w	r3, r9, #1
 8025340:	2b01      	cmp	r3, #1
 8025342:	9301      	str	r3, [sp, #4]
 8025344:	bfb8      	it	lt
 8025346:	2301      	movlt	r3, #1
 8025348:	e7dd      	b.n	8025306 <_dtoa_r+0x266>
 802534a:	2301      	movs	r3, #1
 802534c:	e7f2      	b.n	8025334 <_dtoa_r+0x294>
 802534e:	2501      	movs	r5, #1
 8025350:	2300      	movs	r3, #0
 8025352:	9305      	str	r3, [sp, #20]
 8025354:	9508      	str	r5, [sp, #32]
 8025356:	f04f 39ff 	mov.w	r9, #4294967295
 802535a:	2200      	movs	r2, #0
 802535c:	f8cd 9004 	str.w	r9, [sp, #4]
 8025360:	2312      	movs	r3, #18
 8025362:	9209      	str	r2, [sp, #36]	; 0x24
 8025364:	e7cf      	b.n	8025306 <_dtoa_r+0x266>
 8025366:	2301      	movs	r3, #1
 8025368:	9308      	str	r3, [sp, #32]
 802536a:	e7f4      	b.n	8025356 <_dtoa_r+0x2b6>
 802536c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8025370:	f8cd 9004 	str.w	r9, [sp, #4]
 8025374:	464b      	mov	r3, r9
 8025376:	e7c6      	b.n	8025306 <_dtoa_r+0x266>
 8025378:	3101      	adds	r1, #1
 802537a:	6041      	str	r1, [r0, #4]
 802537c:	0052      	lsls	r2, r2, #1
 802537e:	e7c6      	b.n	802530e <_dtoa_r+0x26e>
 8025380:	636f4361 	.word	0x636f4361
 8025384:	3fd287a7 	.word	0x3fd287a7
 8025388:	8b60c8b3 	.word	0x8b60c8b3
 802538c:	3fc68a28 	.word	0x3fc68a28
 8025390:	509f79fb 	.word	0x509f79fb
 8025394:	3fd34413 	.word	0x3fd34413
 8025398:	080338ac 	.word	0x080338ac
 802539c:	08033b66 	.word	0x08033b66
 80253a0:	7ff00000 	.word	0x7ff00000
 80253a4:	08033b62 	.word	0x08033b62
 80253a8:	08033b59 	.word	0x08033b59
 80253ac:	080327b8 	.word	0x080327b8
 80253b0:	3ff80000 	.word	0x3ff80000
 80253b4:	08033da0 	.word	0x08033da0
 80253b8:	08033bc5 	.word	0x08033bc5
 80253bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80253be:	9a00      	ldr	r2, [sp, #0]
 80253c0:	601a      	str	r2, [r3, #0]
 80253c2:	9b01      	ldr	r3, [sp, #4]
 80253c4:	2b0e      	cmp	r3, #14
 80253c6:	f200 80ad 	bhi.w	8025524 <_dtoa_r+0x484>
 80253ca:	2d00      	cmp	r5, #0
 80253cc:	f000 80aa 	beq.w	8025524 <_dtoa_r+0x484>
 80253d0:	f1ba 0f00 	cmp.w	sl, #0
 80253d4:	dd36      	ble.n	8025444 <_dtoa_r+0x3a4>
 80253d6:	4ac3      	ldr	r2, [pc, #780]	; (80256e4 <_dtoa_r+0x644>)
 80253d8:	f00a 030f 	and.w	r3, sl, #15
 80253dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80253e0:	ed93 7b00 	vldr	d7, [r3]
 80253e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80253e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80253ec:	eeb0 8a47 	vmov.f32	s16, s14
 80253f0:	eef0 8a67 	vmov.f32	s17, s15
 80253f4:	d016      	beq.n	8025424 <_dtoa_r+0x384>
 80253f6:	4bbc      	ldr	r3, [pc, #752]	; (80256e8 <_dtoa_r+0x648>)
 80253f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80253fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025400:	f7db fa34 	bl	800086c <__aeabi_ddiv>
 8025404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025408:	f007 070f 	and.w	r7, r7, #15
 802540c:	2503      	movs	r5, #3
 802540e:	4eb6      	ldr	r6, [pc, #728]	; (80256e8 <_dtoa_r+0x648>)
 8025410:	b957      	cbnz	r7, 8025428 <_dtoa_r+0x388>
 8025412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025416:	ec53 2b18 	vmov	r2, r3, d8
 802541a:	f7db fa27 	bl	800086c <__aeabi_ddiv>
 802541e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025422:	e029      	b.n	8025478 <_dtoa_r+0x3d8>
 8025424:	2502      	movs	r5, #2
 8025426:	e7f2      	b.n	802540e <_dtoa_r+0x36e>
 8025428:	07f9      	lsls	r1, r7, #31
 802542a:	d508      	bpl.n	802543e <_dtoa_r+0x39e>
 802542c:	ec51 0b18 	vmov	r0, r1, d8
 8025430:	e9d6 2300 	ldrd	r2, r3, [r6]
 8025434:	f7db f8f0 	bl	8000618 <__aeabi_dmul>
 8025438:	ec41 0b18 	vmov	d8, r0, r1
 802543c:	3501      	adds	r5, #1
 802543e:	107f      	asrs	r7, r7, #1
 8025440:	3608      	adds	r6, #8
 8025442:	e7e5      	b.n	8025410 <_dtoa_r+0x370>
 8025444:	f000 80a6 	beq.w	8025594 <_dtoa_r+0x4f4>
 8025448:	f1ca 0600 	rsb	r6, sl, #0
 802544c:	4ba5      	ldr	r3, [pc, #660]	; (80256e4 <_dtoa_r+0x644>)
 802544e:	4fa6      	ldr	r7, [pc, #664]	; (80256e8 <_dtoa_r+0x648>)
 8025450:	f006 020f 	and.w	r2, r6, #15
 8025454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802545c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8025460:	f7db f8da 	bl	8000618 <__aeabi_dmul>
 8025464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025468:	1136      	asrs	r6, r6, #4
 802546a:	2300      	movs	r3, #0
 802546c:	2502      	movs	r5, #2
 802546e:	2e00      	cmp	r6, #0
 8025470:	f040 8085 	bne.w	802557e <_dtoa_r+0x4de>
 8025474:	2b00      	cmp	r3, #0
 8025476:	d1d2      	bne.n	802541e <_dtoa_r+0x37e>
 8025478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802547a:	2b00      	cmp	r3, #0
 802547c:	f000 808c 	beq.w	8025598 <_dtoa_r+0x4f8>
 8025480:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025484:	4b99      	ldr	r3, [pc, #612]	; (80256ec <_dtoa_r+0x64c>)
 8025486:	2200      	movs	r2, #0
 8025488:	4630      	mov	r0, r6
 802548a:	4639      	mov	r1, r7
 802548c:	f7db fb36 	bl	8000afc <__aeabi_dcmplt>
 8025490:	2800      	cmp	r0, #0
 8025492:	f000 8081 	beq.w	8025598 <_dtoa_r+0x4f8>
 8025496:	9b01      	ldr	r3, [sp, #4]
 8025498:	2b00      	cmp	r3, #0
 802549a:	d07d      	beq.n	8025598 <_dtoa_r+0x4f8>
 802549c:	f1b9 0f00 	cmp.w	r9, #0
 80254a0:	dd3c      	ble.n	802551c <_dtoa_r+0x47c>
 80254a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80254a6:	9307      	str	r3, [sp, #28]
 80254a8:	2200      	movs	r2, #0
 80254aa:	4b91      	ldr	r3, [pc, #580]	; (80256f0 <_dtoa_r+0x650>)
 80254ac:	4630      	mov	r0, r6
 80254ae:	4639      	mov	r1, r7
 80254b0:	f7db f8b2 	bl	8000618 <__aeabi_dmul>
 80254b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254b8:	3501      	adds	r5, #1
 80254ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80254be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80254c2:	4628      	mov	r0, r5
 80254c4:	f7db f83e 	bl	8000544 <__aeabi_i2d>
 80254c8:	4632      	mov	r2, r6
 80254ca:	463b      	mov	r3, r7
 80254cc:	f7db f8a4 	bl	8000618 <__aeabi_dmul>
 80254d0:	4b88      	ldr	r3, [pc, #544]	; (80256f4 <_dtoa_r+0x654>)
 80254d2:	2200      	movs	r2, #0
 80254d4:	f7da feea 	bl	80002ac <__adddf3>
 80254d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80254dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254e0:	9303      	str	r3, [sp, #12]
 80254e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80254e4:	2b00      	cmp	r3, #0
 80254e6:	d15c      	bne.n	80255a2 <_dtoa_r+0x502>
 80254e8:	4b83      	ldr	r3, [pc, #524]	; (80256f8 <_dtoa_r+0x658>)
 80254ea:	2200      	movs	r2, #0
 80254ec:	4630      	mov	r0, r6
 80254ee:	4639      	mov	r1, r7
 80254f0:	f7da feda 	bl	80002a8 <__aeabi_dsub>
 80254f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80254f8:	4606      	mov	r6, r0
 80254fa:	460f      	mov	r7, r1
 80254fc:	f7db fb1c 	bl	8000b38 <__aeabi_dcmpgt>
 8025500:	2800      	cmp	r0, #0
 8025502:	f040 8296 	bne.w	8025a32 <_dtoa_r+0x992>
 8025506:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802550a:	4630      	mov	r0, r6
 802550c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025510:	4639      	mov	r1, r7
 8025512:	f7db faf3 	bl	8000afc <__aeabi_dcmplt>
 8025516:	2800      	cmp	r0, #0
 8025518:	f040 8288 	bne.w	8025a2c <_dtoa_r+0x98c>
 802551c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8025520:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025526:	2b00      	cmp	r3, #0
 8025528:	f2c0 8158 	blt.w	80257dc <_dtoa_r+0x73c>
 802552c:	f1ba 0f0e 	cmp.w	sl, #14
 8025530:	f300 8154 	bgt.w	80257dc <_dtoa_r+0x73c>
 8025534:	4b6b      	ldr	r3, [pc, #428]	; (80256e4 <_dtoa_r+0x644>)
 8025536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802553a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025540:	2b00      	cmp	r3, #0
 8025542:	f280 80e3 	bge.w	802570c <_dtoa_r+0x66c>
 8025546:	9b01      	ldr	r3, [sp, #4]
 8025548:	2b00      	cmp	r3, #0
 802554a:	f300 80df 	bgt.w	802570c <_dtoa_r+0x66c>
 802554e:	f040 826d 	bne.w	8025a2c <_dtoa_r+0x98c>
 8025552:	4b69      	ldr	r3, [pc, #420]	; (80256f8 <_dtoa_r+0x658>)
 8025554:	2200      	movs	r2, #0
 8025556:	4640      	mov	r0, r8
 8025558:	4649      	mov	r1, r9
 802555a:	f7db f85d 	bl	8000618 <__aeabi_dmul>
 802555e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025562:	f7db fadf 	bl	8000b24 <__aeabi_dcmpge>
 8025566:	9e01      	ldr	r6, [sp, #4]
 8025568:	4637      	mov	r7, r6
 802556a:	2800      	cmp	r0, #0
 802556c:	f040 8243 	bne.w	80259f6 <_dtoa_r+0x956>
 8025570:	9d00      	ldr	r5, [sp, #0]
 8025572:	2331      	movs	r3, #49	; 0x31
 8025574:	f805 3b01 	strb.w	r3, [r5], #1
 8025578:	f10a 0a01 	add.w	sl, sl, #1
 802557c:	e23f      	b.n	80259fe <_dtoa_r+0x95e>
 802557e:	07f2      	lsls	r2, r6, #31
 8025580:	d505      	bpl.n	802558e <_dtoa_r+0x4ee>
 8025582:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025586:	f7db f847 	bl	8000618 <__aeabi_dmul>
 802558a:	3501      	adds	r5, #1
 802558c:	2301      	movs	r3, #1
 802558e:	1076      	asrs	r6, r6, #1
 8025590:	3708      	adds	r7, #8
 8025592:	e76c      	b.n	802546e <_dtoa_r+0x3ce>
 8025594:	2502      	movs	r5, #2
 8025596:	e76f      	b.n	8025478 <_dtoa_r+0x3d8>
 8025598:	9b01      	ldr	r3, [sp, #4]
 802559a:	f8cd a01c 	str.w	sl, [sp, #28]
 802559e:	930c      	str	r3, [sp, #48]	; 0x30
 80255a0:	e78d      	b.n	80254be <_dtoa_r+0x41e>
 80255a2:	9900      	ldr	r1, [sp, #0]
 80255a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80255a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80255a8:	4b4e      	ldr	r3, [pc, #312]	; (80256e4 <_dtoa_r+0x644>)
 80255aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80255ae:	4401      	add	r1, r0
 80255b0:	9102      	str	r1, [sp, #8]
 80255b2:	9908      	ldr	r1, [sp, #32]
 80255b4:	eeb0 8a47 	vmov.f32	s16, s14
 80255b8:	eef0 8a67 	vmov.f32	s17, s15
 80255bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80255c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80255c4:	2900      	cmp	r1, #0
 80255c6:	d045      	beq.n	8025654 <_dtoa_r+0x5b4>
 80255c8:	494c      	ldr	r1, [pc, #304]	; (80256fc <_dtoa_r+0x65c>)
 80255ca:	2000      	movs	r0, #0
 80255cc:	f7db f94e 	bl	800086c <__aeabi_ddiv>
 80255d0:	ec53 2b18 	vmov	r2, r3, d8
 80255d4:	f7da fe68 	bl	80002a8 <__aeabi_dsub>
 80255d8:	9d00      	ldr	r5, [sp, #0]
 80255da:	ec41 0b18 	vmov	d8, r0, r1
 80255de:	4639      	mov	r1, r7
 80255e0:	4630      	mov	r0, r6
 80255e2:	f7db fac9 	bl	8000b78 <__aeabi_d2iz>
 80255e6:	900c      	str	r0, [sp, #48]	; 0x30
 80255e8:	f7da ffac 	bl	8000544 <__aeabi_i2d>
 80255ec:	4602      	mov	r2, r0
 80255ee:	460b      	mov	r3, r1
 80255f0:	4630      	mov	r0, r6
 80255f2:	4639      	mov	r1, r7
 80255f4:	f7da fe58 	bl	80002a8 <__aeabi_dsub>
 80255f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80255fa:	3330      	adds	r3, #48	; 0x30
 80255fc:	f805 3b01 	strb.w	r3, [r5], #1
 8025600:	ec53 2b18 	vmov	r2, r3, d8
 8025604:	4606      	mov	r6, r0
 8025606:	460f      	mov	r7, r1
 8025608:	f7db fa78 	bl	8000afc <__aeabi_dcmplt>
 802560c:	2800      	cmp	r0, #0
 802560e:	d165      	bne.n	80256dc <_dtoa_r+0x63c>
 8025610:	4632      	mov	r2, r6
 8025612:	463b      	mov	r3, r7
 8025614:	4935      	ldr	r1, [pc, #212]	; (80256ec <_dtoa_r+0x64c>)
 8025616:	2000      	movs	r0, #0
 8025618:	f7da fe46 	bl	80002a8 <__aeabi_dsub>
 802561c:	ec53 2b18 	vmov	r2, r3, d8
 8025620:	f7db fa6c 	bl	8000afc <__aeabi_dcmplt>
 8025624:	2800      	cmp	r0, #0
 8025626:	f040 80b9 	bne.w	802579c <_dtoa_r+0x6fc>
 802562a:	9b02      	ldr	r3, [sp, #8]
 802562c:	429d      	cmp	r5, r3
 802562e:	f43f af75 	beq.w	802551c <_dtoa_r+0x47c>
 8025632:	4b2f      	ldr	r3, [pc, #188]	; (80256f0 <_dtoa_r+0x650>)
 8025634:	ec51 0b18 	vmov	r0, r1, d8
 8025638:	2200      	movs	r2, #0
 802563a:	f7da ffed 	bl	8000618 <__aeabi_dmul>
 802563e:	4b2c      	ldr	r3, [pc, #176]	; (80256f0 <_dtoa_r+0x650>)
 8025640:	ec41 0b18 	vmov	d8, r0, r1
 8025644:	2200      	movs	r2, #0
 8025646:	4630      	mov	r0, r6
 8025648:	4639      	mov	r1, r7
 802564a:	f7da ffe5 	bl	8000618 <__aeabi_dmul>
 802564e:	4606      	mov	r6, r0
 8025650:	460f      	mov	r7, r1
 8025652:	e7c4      	b.n	80255de <_dtoa_r+0x53e>
 8025654:	ec51 0b17 	vmov	r0, r1, d7
 8025658:	f7da ffde 	bl	8000618 <__aeabi_dmul>
 802565c:	9b02      	ldr	r3, [sp, #8]
 802565e:	9d00      	ldr	r5, [sp, #0]
 8025660:	930c      	str	r3, [sp, #48]	; 0x30
 8025662:	ec41 0b18 	vmov	d8, r0, r1
 8025666:	4639      	mov	r1, r7
 8025668:	4630      	mov	r0, r6
 802566a:	f7db fa85 	bl	8000b78 <__aeabi_d2iz>
 802566e:	9011      	str	r0, [sp, #68]	; 0x44
 8025670:	f7da ff68 	bl	8000544 <__aeabi_i2d>
 8025674:	4602      	mov	r2, r0
 8025676:	460b      	mov	r3, r1
 8025678:	4630      	mov	r0, r6
 802567a:	4639      	mov	r1, r7
 802567c:	f7da fe14 	bl	80002a8 <__aeabi_dsub>
 8025680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025682:	3330      	adds	r3, #48	; 0x30
 8025684:	f805 3b01 	strb.w	r3, [r5], #1
 8025688:	9b02      	ldr	r3, [sp, #8]
 802568a:	429d      	cmp	r5, r3
 802568c:	4606      	mov	r6, r0
 802568e:	460f      	mov	r7, r1
 8025690:	f04f 0200 	mov.w	r2, #0
 8025694:	d134      	bne.n	8025700 <_dtoa_r+0x660>
 8025696:	4b19      	ldr	r3, [pc, #100]	; (80256fc <_dtoa_r+0x65c>)
 8025698:	ec51 0b18 	vmov	r0, r1, d8
 802569c:	f7da fe06 	bl	80002ac <__adddf3>
 80256a0:	4602      	mov	r2, r0
 80256a2:	460b      	mov	r3, r1
 80256a4:	4630      	mov	r0, r6
 80256a6:	4639      	mov	r1, r7
 80256a8:	f7db fa46 	bl	8000b38 <__aeabi_dcmpgt>
 80256ac:	2800      	cmp	r0, #0
 80256ae:	d175      	bne.n	802579c <_dtoa_r+0x6fc>
 80256b0:	ec53 2b18 	vmov	r2, r3, d8
 80256b4:	4911      	ldr	r1, [pc, #68]	; (80256fc <_dtoa_r+0x65c>)
 80256b6:	2000      	movs	r0, #0
 80256b8:	f7da fdf6 	bl	80002a8 <__aeabi_dsub>
 80256bc:	4602      	mov	r2, r0
 80256be:	460b      	mov	r3, r1
 80256c0:	4630      	mov	r0, r6
 80256c2:	4639      	mov	r1, r7
 80256c4:	f7db fa1a 	bl	8000afc <__aeabi_dcmplt>
 80256c8:	2800      	cmp	r0, #0
 80256ca:	f43f af27 	beq.w	802551c <_dtoa_r+0x47c>
 80256ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80256d0:	1e6b      	subs	r3, r5, #1
 80256d2:	930c      	str	r3, [sp, #48]	; 0x30
 80256d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80256d8:	2b30      	cmp	r3, #48	; 0x30
 80256da:	d0f8      	beq.n	80256ce <_dtoa_r+0x62e>
 80256dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80256e0:	e04a      	b.n	8025778 <_dtoa_r+0x6d8>
 80256e2:	bf00      	nop
 80256e4:	08033da0 	.word	0x08033da0
 80256e8:	08033d78 	.word	0x08033d78
 80256ec:	3ff00000 	.word	0x3ff00000
 80256f0:	40240000 	.word	0x40240000
 80256f4:	401c0000 	.word	0x401c0000
 80256f8:	40140000 	.word	0x40140000
 80256fc:	3fe00000 	.word	0x3fe00000
 8025700:	4baf      	ldr	r3, [pc, #700]	; (80259c0 <_dtoa_r+0x920>)
 8025702:	f7da ff89 	bl	8000618 <__aeabi_dmul>
 8025706:	4606      	mov	r6, r0
 8025708:	460f      	mov	r7, r1
 802570a:	e7ac      	b.n	8025666 <_dtoa_r+0x5c6>
 802570c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8025710:	9d00      	ldr	r5, [sp, #0]
 8025712:	4642      	mov	r2, r8
 8025714:	464b      	mov	r3, r9
 8025716:	4630      	mov	r0, r6
 8025718:	4639      	mov	r1, r7
 802571a:	f7db f8a7 	bl	800086c <__aeabi_ddiv>
 802571e:	f7db fa2b 	bl	8000b78 <__aeabi_d2iz>
 8025722:	9002      	str	r0, [sp, #8]
 8025724:	f7da ff0e 	bl	8000544 <__aeabi_i2d>
 8025728:	4642      	mov	r2, r8
 802572a:	464b      	mov	r3, r9
 802572c:	f7da ff74 	bl	8000618 <__aeabi_dmul>
 8025730:	4602      	mov	r2, r0
 8025732:	460b      	mov	r3, r1
 8025734:	4630      	mov	r0, r6
 8025736:	4639      	mov	r1, r7
 8025738:	f7da fdb6 	bl	80002a8 <__aeabi_dsub>
 802573c:	9e02      	ldr	r6, [sp, #8]
 802573e:	9f01      	ldr	r7, [sp, #4]
 8025740:	3630      	adds	r6, #48	; 0x30
 8025742:	f805 6b01 	strb.w	r6, [r5], #1
 8025746:	9e00      	ldr	r6, [sp, #0]
 8025748:	1bae      	subs	r6, r5, r6
 802574a:	42b7      	cmp	r7, r6
 802574c:	4602      	mov	r2, r0
 802574e:	460b      	mov	r3, r1
 8025750:	d137      	bne.n	80257c2 <_dtoa_r+0x722>
 8025752:	f7da fdab 	bl	80002ac <__adddf3>
 8025756:	4642      	mov	r2, r8
 8025758:	464b      	mov	r3, r9
 802575a:	4606      	mov	r6, r0
 802575c:	460f      	mov	r7, r1
 802575e:	f7db f9eb 	bl	8000b38 <__aeabi_dcmpgt>
 8025762:	b9c8      	cbnz	r0, 8025798 <_dtoa_r+0x6f8>
 8025764:	4642      	mov	r2, r8
 8025766:	464b      	mov	r3, r9
 8025768:	4630      	mov	r0, r6
 802576a:	4639      	mov	r1, r7
 802576c:	f7db f9bc 	bl	8000ae8 <__aeabi_dcmpeq>
 8025770:	b110      	cbz	r0, 8025778 <_dtoa_r+0x6d8>
 8025772:	9b02      	ldr	r3, [sp, #8]
 8025774:	07d9      	lsls	r1, r3, #31
 8025776:	d40f      	bmi.n	8025798 <_dtoa_r+0x6f8>
 8025778:	4620      	mov	r0, r4
 802577a:	4659      	mov	r1, fp
 802577c:	f001 f932 	bl	80269e4 <_Bfree>
 8025780:	2300      	movs	r3, #0
 8025782:	702b      	strb	r3, [r5, #0]
 8025784:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025786:	f10a 0001 	add.w	r0, sl, #1
 802578a:	6018      	str	r0, [r3, #0]
 802578c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802578e:	2b00      	cmp	r3, #0
 8025790:	f43f acd8 	beq.w	8025144 <_dtoa_r+0xa4>
 8025794:	601d      	str	r5, [r3, #0]
 8025796:	e4d5      	b.n	8025144 <_dtoa_r+0xa4>
 8025798:	f8cd a01c 	str.w	sl, [sp, #28]
 802579c:	462b      	mov	r3, r5
 802579e:	461d      	mov	r5, r3
 80257a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80257a4:	2a39      	cmp	r2, #57	; 0x39
 80257a6:	d108      	bne.n	80257ba <_dtoa_r+0x71a>
 80257a8:	9a00      	ldr	r2, [sp, #0]
 80257aa:	429a      	cmp	r2, r3
 80257ac:	d1f7      	bne.n	802579e <_dtoa_r+0x6fe>
 80257ae:	9a07      	ldr	r2, [sp, #28]
 80257b0:	9900      	ldr	r1, [sp, #0]
 80257b2:	3201      	adds	r2, #1
 80257b4:	9207      	str	r2, [sp, #28]
 80257b6:	2230      	movs	r2, #48	; 0x30
 80257b8:	700a      	strb	r2, [r1, #0]
 80257ba:	781a      	ldrb	r2, [r3, #0]
 80257bc:	3201      	adds	r2, #1
 80257be:	701a      	strb	r2, [r3, #0]
 80257c0:	e78c      	b.n	80256dc <_dtoa_r+0x63c>
 80257c2:	4b7f      	ldr	r3, [pc, #508]	; (80259c0 <_dtoa_r+0x920>)
 80257c4:	2200      	movs	r2, #0
 80257c6:	f7da ff27 	bl	8000618 <__aeabi_dmul>
 80257ca:	2200      	movs	r2, #0
 80257cc:	2300      	movs	r3, #0
 80257ce:	4606      	mov	r6, r0
 80257d0:	460f      	mov	r7, r1
 80257d2:	f7db f989 	bl	8000ae8 <__aeabi_dcmpeq>
 80257d6:	2800      	cmp	r0, #0
 80257d8:	d09b      	beq.n	8025712 <_dtoa_r+0x672>
 80257da:	e7cd      	b.n	8025778 <_dtoa_r+0x6d8>
 80257dc:	9a08      	ldr	r2, [sp, #32]
 80257de:	2a00      	cmp	r2, #0
 80257e0:	f000 80c4 	beq.w	802596c <_dtoa_r+0x8cc>
 80257e4:	9a05      	ldr	r2, [sp, #20]
 80257e6:	2a01      	cmp	r2, #1
 80257e8:	f300 80a8 	bgt.w	802593c <_dtoa_r+0x89c>
 80257ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80257ee:	2a00      	cmp	r2, #0
 80257f0:	f000 80a0 	beq.w	8025934 <_dtoa_r+0x894>
 80257f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80257f8:	9e06      	ldr	r6, [sp, #24]
 80257fa:	4645      	mov	r5, r8
 80257fc:	9a04      	ldr	r2, [sp, #16]
 80257fe:	2101      	movs	r1, #1
 8025800:	441a      	add	r2, r3
 8025802:	4620      	mov	r0, r4
 8025804:	4498      	add	r8, r3
 8025806:	9204      	str	r2, [sp, #16]
 8025808:	f001 f9f2 	bl	8026bf0 <__i2b>
 802580c:	4607      	mov	r7, r0
 802580e:	2d00      	cmp	r5, #0
 8025810:	dd0b      	ble.n	802582a <_dtoa_r+0x78a>
 8025812:	9b04      	ldr	r3, [sp, #16]
 8025814:	2b00      	cmp	r3, #0
 8025816:	dd08      	ble.n	802582a <_dtoa_r+0x78a>
 8025818:	42ab      	cmp	r3, r5
 802581a:	9a04      	ldr	r2, [sp, #16]
 802581c:	bfa8      	it	ge
 802581e:	462b      	movge	r3, r5
 8025820:	eba8 0803 	sub.w	r8, r8, r3
 8025824:	1aed      	subs	r5, r5, r3
 8025826:	1ad3      	subs	r3, r2, r3
 8025828:	9304      	str	r3, [sp, #16]
 802582a:	9b06      	ldr	r3, [sp, #24]
 802582c:	b1fb      	cbz	r3, 802586e <_dtoa_r+0x7ce>
 802582e:	9b08      	ldr	r3, [sp, #32]
 8025830:	2b00      	cmp	r3, #0
 8025832:	f000 809f 	beq.w	8025974 <_dtoa_r+0x8d4>
 8025836:	2e00      	cmp	r6, #0
 8025838:	dd11      	ble.n	802585e <_dtoa_r+0x7be>
 802583a:	4639      	mov	r1, r7
 802583c:	4632      	mov	r2, r6
 802583e:	4620      	mov	r0, r4
 8025840:	f001 fa92 	bl	8026d68 <__pow5mult>
 8025844:	465a      	mov	r2, fp
 8025846:	4601      	mov	r1, r0
 8025848:	4607      	mov	r7, r0
 802584a:	4620      	mov	r0, r4
 802584c:	f001 f9e6 	bl	8026c1c <__multiply>
 8025850:	4659      	mov	r1, fp
 8025852:	9007      	str	r0, [sp, #28]
 8025854:	4620      	mov	r0, r4
 8025856:	f001 f8c5 	bl	80269e4 <_Bfree>
 802585a:	9b07      	ldr	r3, [sp, #28]
 802585c:	469b      	mov	fp, r3
 802585e:	9b06      	ldr	r3, [sp, #24]
 8025860:	1b9a      	subs	r2, r3, r6
 8025862:	d004      	beq.n	802586e <_dtoa_r+0x7ce>
 8025864:	4659      	mov	r1, fp
 8025866:	4620      	mov	r0, r4
 8025868:	f001 fa7e 	bl	8026d68 <__pow5mult>
 802586c:	4683      	mov	fp, r0
 802586e:	2101      	movs	r1, #1
 8025870:	4620      	mov	r0, r4
 8025872:	f001 f9bd 	bl	8026bf0 <__i2b>
 8025876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025878:	2b00      	cmp	r3, #0
 802587a:	4606      	mov	r6, r0
 802587c:	dd7c      	ble.n	8025978 <_dtoa_r+0x8d8>
 802587e:	461a      	mov	r2, r3
 8025880:	4601      	mov	r1, r0
 8025882:	4620      	mov	r0, r4
 8025884:	f001 fa70 	bl	8026d68 <__pow5mult>
 8025888:	9b05      	ldr	r3, [sp, #20]
 802588a:	2b01      	cmp	r3, #1
 802588c:	4606      	mov	r6, r0
 802588e:	dd76      	ble.n	802597e <_dtoa_r+0x8de>
 8025890:	2300      	movs	r3, #0
 8025892:	9306      	str	r3, [sp, #24]
 8025894:	6933      	ldr	r3, [r6, #16]
 8025896:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802589a:	6918      	ldr	r0, [r3, #16]
 802589c:	f001 f958 	bl	8026b50 <__hi0bits>
 80258a0:	f1c0 0020 	rsb	r0, r0, #32
 80258a4:	9b04      	ldr	r3, [sp, #16]
 80258a6:	4418      	add	r0, r3
 80258a8:	f010 001f 	ands.w	r0, r0, #31
 80258ac:	f000 8086 	beq.w	80259bc <_dtoa_r+0x91c>
 80258b0:	f1c0 0320 	rsb	r3, r0, #32
 80258b4:	2b04      	cmp	r3, #4
 80258b6:	dd7f      	ble.n	80259b8 <_dtoa_r+0x918>
 80258b8:	f1c0 001c 	rsb	r0, r0, #28
 80258bc:	9b04      	ldr	r3, [sp, #16]
 80258be:	4403      	add	r3, r0
 80258c0:	4480      	add	r8, r0
 80258c2:	4405      	add	r5, r0
 80258c4:	9304      	str	r3, [sp, #16]
 80258c6:	f1b8 0f00 	cmp.w	r8, #0
 80258ca:	dd05      	ble.n	80258d8 <_dtoa_r+0x838>
 80258cc:	4659      	mov	r1, fp
 80258ce:	4642      	mov	r2, r8
 80258d0:	4620      	mov	r0, r4
 80258d2:	f001 faa3 	bl	8026e1c <__lshift>
 80258d6:	4683      	mov	fp, r0
 80258d8:	9b04      	ldr	r3, [sp, #16]
 80258da:	2b00      	cmp	r3, #0
 80258dc:	dd05      	ble.n	80258ea <_dtoa_r+0x84a>
 80258de:	4631      	mov	r1, r6
 80258e0:	461a      	mov	r2, r3
 80258e2:	4620      	mov	r0, r4
 80258e4:	f001 fa9a 	bl	8026e1c <__lshift>
 80258e8:	4606      	mov	r6, r0
 80258ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80258ec:	2b00      	cmp	r3, #0
 80258ee:	d069      	beq.n	80259c4 <_dtoa_r+0x924>
 80258f0:	4631      	mov	r1, r6
 80258f2:	4658      	mov	r0, fp
 80258f4:	f001 fafe 	bl	8026ef4 <__mcmp>
 80258f8:	2800      	cmp	r0, #0
 80258fa:	da63      	bge.n	80259c4 <_dtoa_r+0x924>
 80258fc:	2300      	movs	r3, #0
 80258fe:	4659      	mov	r1, fp
 8025900:	220a      	movs	r2, #10
 8025902:	4620      	mov	r0, r4
 8025904:	f001 f890 	bl	8026a28 <__multadd>
 8025908:	9b08      	ldr	r3, [sp, #32]
 802590a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802590e:	4683      	mov	fp, r0
 8025910:	2b00      	cmp	r3, #0
 8025912:	f000 818f 	beq.w	8025c34 <_dtoa_r+0xb94>
 8025916:	4639      	mov	r1, r7
 8025918:	2300      	movs	r3, #0
 802591a:	220a      	movs	r2, #10
 802591c:	4620      	mov	r0, r4
 802591e:	f001 f883 	bl	8026a28 <__multadd>
 8025922:	f1b9 0f00 	cmp.w	r9, #0
 8025926:	4607      	mov	r7, r0
 8025928:	f300 808e 	bgt.w	8025a48 <_dtoa_r+0x9a8>
 802592c:	9b05      	ldr	r3, [sp, #20]
 802592e:	2b02      	cmp	r3, #2
 8025930:	dc50      	bgt.n	80259d4 <_dtoa_r+0x934>
 8025932:	e089      	b.n	8025a48 <_dtoa_r+0x9a8>
 8025934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802593a:	e75d      	b.n	80257f8 <_dtoa_r+0x758>
 802593c:	9b01      	ldr	r3, [sp, #4]
 802593e:	1e5e      	subs	r6, r3, #1
 8025940:	9b06      	ldr	r3, [sp, #24]
 8025942:	42b3      	cmp	r3, r6
 8025944:	bfbf      	itttt	lt
 8025946:	9b06      	ldrlt	r3, [sp, #24]
 8025948:	9606      	strlt	r6, [sp, #24]
 802594a:	1af2      	sublt	r2, r6, r3
 802594c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 802594e:	bfb6      	itet	lt
 8025950:	189b      	addlt	r3, r3, r2
 8025952:	1b9e      	subge	r6, r3, r6
 8025954:	930d      	strlt	r3, [sp, #52]	; 0x34
 8025956:	9b01      	ldr	r3, [sp, #4]
 8025958:	bfb8      	it	lt
 802595a:	2600      	movlt	r6, #0
 802595c:	2b00      	cmp	r3, #0
 802595e:	bfb5      	itete	lt
 8025960:	eba8 0503 	sublt.w	r5, r8, r3
 8025964:	9b01      	ldrge	r3, [sp, #4]
 8025966:	2300      	movlt	r3, #0
 8025968:	4645      	movge	r5, r8
 802596a:	e747      	b.n	80257fc <_dtoa_r+0x75c>
 802596c:	9e06      	ldr	r6, [sp, #24]
 802596e:	9f08      	ldr	r7, [sp, #32]
 8025970:	4645      	mov	r5, r8
 8025972:	e74c      	b.n	802580e <_dtoa_r+0x76e>
 8025974:	9a06      	ldr	r2, [sp, #24]
 8025976:	e775      	b.n	8025864 <_dtoa_r+0x7c4>
 8025978:	9b05      	ldr	r3, [sp, #20]
 802597a:	2b01      	cmp	r3, #1
 802597c:	dc18      	bgt.n	80259b0 <_dtoa_r+0x910>
 802597e:	9b02      	ldr	r3, [sp, #8]
 8025980:	b9b3      	cbnz	r3, 80259b0 <_dtoa_r+0x910>
 8025982:	9b03      	ldr	r3, [sp, #12]
 8025984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025988:	b9a3      	cbnz	r3, 80259b4 <_dtoa_r+0x914>
 802598a:	9b03      	ldr	r3, [sp, #12]
 802598c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025990:	0d1b      	lsrs	r3, r3, #20
 8025992:	051b      	lsls	r3, r3, #20
 8025994:	b12b      	cbz	r3, 80259a2 <_dtoa_r+0x902>
 8025996:	9b04      	ldr	r3, [sp, #16]
 8025998:	3301      	adds	r3, #1
 802599a:	9304      	str	r3, [sp, #16]
 802599c:	f108 0801 	add.w	r8, r8, #1
 80259a0:	2301      	movs	r3, #1
 80259a2:	9306      	str	r3, [sp, #24]
 80259a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80259a6:	2b00      	cmp	r3, #0
 80259a8:	f47f af74 	bne.w	8025894 <_dtoa_r+0x7f4>
 80259ac:	2001      	movs	r0, #1
 80259ae:	e779      	b.n	80258a4 <_dtoa_r+0x804>
 80259b0:	2300      	movs	r3, #0
 80259b2:	e7f6      	b.n	80259a2 <_dtoa_r+0x902>
 80259b4:	9b02      	ldr	r3, [sp, #8]
 80259b6:	e7f4      	b.n	80259a2 <_dtoa_r+0x902>
 80259b8:	d085      	beq.n	80258c6 <_dtoa_r+0x826>
 80259ba:	4618      	mov	r0, r3
 80259bc:	301c      	adds	r0, #28
 80259be:	e77d      	b.n	80258bc <_dtoa_r+0x81c>
 80259c0:	40240000 	.word	0x40240000
 80259c4:	9b01      	ldr	r3, [sp, #4]
 80259c6:	2b00      	cmp	r3, #0
 80259c8:	dc38      	bgt.n	8025a3c <_dtoa_r+0x99c>
 80259ca:	9b05      	ldr	r3, [sp, #20]
 80259cc:	2b02      	cmp	r3, #2
 80259ce:	dd35      	ble.n	8025a3c <_dtoa_r+0x99c>
 80259d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80259d4:	f1b9 0f00 	cmp.w	r9, #0
 80259d8:	d10d      	bne.n	80259f6 <_dtoa_r+0x956>
 80259da:	4631      	mov	r1, r6
 80259dc:	464b      	mov	r3, r9
 80259de:	2205      	movs	r2, #5
 80259e0:	4620      	mov	r0, r4
 80259e2:	f001 f821 	bl	8026a28 <__multadd>
 80259e6:	4601      	mov	r1, r0
 80259e8:	4606      	mov	r6, r0
 80259ea:	4658      	mov	r0, fp
 80259ec:	f001 fa82 	bl	8026ef4 <__mcmp>
 80259f0:	2800      	cmp	r0, #0
 80259f2:	f73f adbd 	bgt.w	8025570 <_dtoa_r+0x4d0>
 80259f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80259f8:	9d00      	ldr	r5, [sp, #0]
 80259fa:	ea6f 0a03 	mvn.w	sl, r3
 80259fe:	f04f 0800 	mov.w	r8, #0
 8025a02:	4631      	mov	r1, r6
 8025a04:	4620      	mov	r0, r4
 8025a06:	f000 ffed 	bl	80269e4 <_Bfree>
 8025a0a:	2f00      	cmp	r7, #0
 8025a0c:	f43f aeb4 	beq.w	8025778 <_dtoa_r+0x6d8>
 8025a10:	f1b8 0f00 	cmp.w	r8, #0
 8025a14:	d005      	beq.n	8025a22 <_dtoa_r+0x982>
 8025a16:	45b8      	cmp	r8, r7
 8025a18:	d003      	beq.n	8025a22 <_dtoa_r+0x982>
 8025a1a:	4641      	mov	r1, r8
 8025a1c:	4620      	mov	r0, r4
 8025a1e:	f000 ffe1 	bl	80269e4 <_Bfree>
 8025a22:	4639      	mov	r1, r7
 8025a24:	4620      	mov	r0, r4
 8025a26:	f000 ffdd 	bl	80269e4 <_Bfree>
 8025a2a:	e6a5      	b.n	8025778 <_dtoa_r+0x6d8>
 8025a2c:	2600      	movs	r6, #0
 8025a2e:	4637      	mov	r7, r6
 8025a30:	e7e1      	b.n	80259f6 <_dtoa_r+0x956>
 8025a32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025a34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8025a38:	4637      	mov	r7, r6
 8025a3a:	e599      	b.n	8025570 <_dtoa_r+0x4d0>
 8025a3c:	9b08      	ldr	r3, [sp, #32]
 8025a3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8025a42:	2b00      	cmp	r3, #0
 8025a44:	f000 80fd 	beq.w	8025c42 <_dtoa_r+0xba2>
 8025a48:	2d00      	cmp	r5, #0
 8025a4a:	dd05      	ble.n	8025a58 <_dtoa_r+0x9b8>
 8025a4c:	4639      	mov	r1, r7
 8025a4e:	462a      	mov	r2, r5
 8025a50:	4620      	mov	r0, r4
 8025a52:	f001 f9e3 	bl	8026e1c <__lshift>
 8025a56:	4607      	mov	r7, r0
 8025a58:	9b06      	ldr	r3, [sp, #24]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	d05c      	beq.n	8025b18 <_dtoa_r+0xa78>
 8025a5e:	6879      	ldr	r1, [r7, #4]
 8025a60:	4620      	mov	r0, r4
 8025a62:	f000 ff7f 	bl	8026964 <_Balloc>
 8025a66:	4605      	mov	r5, r0
 8025a68:	b928      	cbnz	r0, 8025a76 <_dtoa_r+0x9d6>
 8025a6a:	4b80      	ldr	r3, [pc, #512]	; (8025c6c <_dtoa_r+0xbcc>)
 8025a6c:	4602      	mov	r2, r0
 8025a6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8025a72:	f7ff bb2e 	b.w	80250d2 <_dtoa_r+0x32>
 8025a76:	693a      	ldr	r2, [r7, #16]
 8025a78:	3202      	adds	r2, #2
 8025a7a:	0092      	lsls	r2, r2, #2
 8025a7c:	f107 010c 	add.w	r1, r7, #12
 8025a80:	300c      	adds	r0, #12
 8025a82:	f7fc fcb1 	bl	80223e8 <memcpy>
 8025a86:	2201      	movs	r2, #1
 8025a88:	4629      	mov	r1, r5
 8025a8a:	4620      	mov	r0, r4
 8025a8c:	f001 f9c6 	bl	8026e1c <__lshift>
 8025a90:	9b00      	ldr	r3, [sp, #0]
 8025a92:	3301      	adds	r3, #1
 8025a94:	9301      	str	r3, [sp, #4]
 8025a96:	9b00      	ldr	r3, [sp, #0]
 8025a98:	444b      	add	r3, r9
 8025a9a:	9307      	str	r3, [sp, #28]
 8025a9c:	9b02      	ldr	r3, [sp, #8]
 8025a9e:	f003 0301 	and.w	r3, r3, #1
 8025aa2:	46b8      	mov	r8, r7
 8025aa4:	9306      	str	r3, [sp, #24]
 8025aa6:	4607      	mov	r7, r0
 8025aa8:	9b01      	ldr	r3, [sp, #4]
 8025aaa:	4631      	mov	r1, r6
 8025aac:	3b01      	subs	r3, #1
 8025aae:	4658      	mov	r0, fp
 8025ab0:	9302      	str	r3, [sp, #8]
 8025ab2:	f7ff fa67 	bl	8024f84 <quorem>
 8025ab6:	4603      	mov	r3, r0
 8025ab8:	3330      	adds	r3, #48	; 0x30
 8025aba:	9004      	str	r0, [sp, #16]
 8025abc:	4641      	mov	r1, r8
 8025abe:	4658      	mov	r0, fp
 8025ac0:	9308      	str	r3, [sp, #32]
 8025ac2:	f001 fa17 	bl	8026ef4 <__mcmp>
 8025ac6:	463a      	mov	r2, r7
 8025ac8:	4681      	mov	r9, r0
 8025aca:	4631      	mov	r1, r6
 8025acc:	4620      	mov	r0, r4
 8025ace:	f001 fa2d 	bl	8026f2c <__mdiff>
 8025ad2:	68c2      	ldr	r2, [r0, #12]
 8025ad4:	9b08      	ldr	r3, [sp, #32]
 8025ad6:	4605      	mov	r5, r0
 8025ad8:	bb02      	cbnz	r2, 8025b1c <_dtoa_r+0xa7c>
 8025ada:	4601      	mov	r1, r0
 8025adc:	4658      	mov	r0, fp
 8025ade:	f001 fa09 	bl	8026ef4 <__mcmp>
 8025ae2:	9b08      	ldr	r3, [sp, #32]
 8025ae4:	4602      	mov	r2, r0
 8025ae6:	4629      	mov	r1, r5
 8025ae8:	4620      	mov	r0, r4
 8025aea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8025aee:	f000 ff79 	bl	80269e4 <_Bfree>
 8025af2:	9b05      	ldr	r3, [sp, #20]
 8025af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025af6:	9d01      	ldr	r5, [sp, #4]
 8025af8:	ea43 0102 	orr.w	r1, r3, r2
 8025afc:	9b06      	ldr	r3, [sp, #24]
 8025afe:	430b      	orrs	r3, r1
 8025b00:	9b08      	ldr	r3, [sp, #32]
 8025b02:	d10d      	bne.n	8025b20 <_dtoa_r+0xa80>
 8025b04:	2b39      	cmp	r3, #57	; 0x39
 8025b06:	d029      	beq.n	8025b5c <_dtoa_r+0xabc>
 8025b08:	f1b9 0f00 	cmp.w	r9, #0
 8025b0c:	dd01      	ble.n	8025b12 <_dtoa_r+0xa72>
 8025b0e:	9b04      	ldr	r3, [sp, #16]
 8025b10:	3331      	adds	r3, #49	; 0x31
 8025b12:	9a02      	ldr	r2, [sp, #8]
 8025b14:	7013      	strb	r3, [r2, #0]
 8025b16:	e774      	b.n	8025a02 <_dtoa_r+0x962>
 8025b18:	4638      	mov	r0, r7
 8025b1a:	e7b9      	b.n	8025a90 <_dtoa_r+0x9f0>
 8025b1c:	2201      	movs	r2, #1
 8025b1e:	e7e2      	b.n	8025ae6 <_dtoa_r+0xa46>
 8025b20:	f1b9 0f00 	cmp.w	r9, #0
 8025b24:	db06      	blt.n	8025b34 <_dtoa_r+0xa94>
 8025b26:	9905      	ldr	r1, [sp, #20]
 8025b28:	ea41 0909 	orr.w	r9, r1, r9
 8025b2c:	9906      	ldr	r1, [sp, #24]
 8025b2e:	ea59 0101 	orrs.w	r1, r9, r1
 8025b32:	d120      	bne.n	8025b76 <_dtoa_r+0xad6>
 8025b34:	2a00      	cmp	r2, #0
 8025b36:	ddec      	ble.n	8025b12 <_dtoa_r+0xa72>
 8025b38:	4659      	mov	r1, fp
 8025b3a:	2201      	movs	r2, #1
 8025b3c:	4620      	mov	r0, r4
 8025b3e:	9301      	str	r3, [sp, #4]
 8025b40:	f001 f96c 	bl	8026e1c <__lshift>
 8025b44:	4631      	mov	r1, r6
 8025b46:	4683      	mov	fp, r0
 8025b48:	f001 f9d4 	bl	8026ef4 <__mcmp>
 8025b4c:	2800      	cmp	r0, #0
 8025b4e:	9b01      	ldr	r3, [sp, #4]
 8025b50:	dc02      	bgt.n	8025b58 <_dtoa_r+0xab8>
 8025b52:	d1de      	bne.n	8025b12 <_dtoa_r+0xa72>
 8025b54:	07da      	lsls	r2, r3, #31
 8025b56:	d5dc      	bpl.n	8025b12 <_dtoa_r+0xa72>
 8025b58:	2b39      	cmp	r3, #57	; 0x39
 8025b5a:	d1d8      	bne.n	8025b0e <_dtoa_r+0xa6e>
 8025b5c:	9a02      	ldr	r2, [sp, #8]
 8025b5e:	2339      	movs	r3, #57	; 0x39
 8025b60:	7013      	strb	r3, [r2, #0]
 8025b62:	462b      	mov	r3, r5
 8025b64:	461d      	mov	r5, r3
 8025b66:	3b01      	subs	r3, #1
 8025b68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8025b6c:	2a39      	cmp	r2, #57	; 0x39
 8025b6e:	d050      	beq.n	8025c12 <_dtoa_r+0xb72>
 8025b70:	3201      	adds	r2, #1
 8025b72:	701a      	strb	r2, [r3, #0]
 8025b74:	e745      	b.n	8025a02 <_dtoa_r+0x962>
 8025b76:	2a00      	cmp	r2, #0
 8025b78:	dd03      	ble.n	8025b82 <_dtoa_r+0xae2>
 8025b7a:	2b39      	cmp	r3, #57	; 0x39
 8025b7c:	d0ee      	beq.n	8025b5c <_dtoa_r+0xabc>
 8025b7e:	3301      	adds	r3, #1
 8025b80:	e7c7      	b.n	8025b12 <_dtoa_r+0xa72>
 8025b82:	9a01      	ldr	r2, [sp, #4]
 8025b84:	9907      	ldr	r1, [sp, #28]
 8025b86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8025b8a:	428a      	cmp	r2, r1
 8025b8c:	d02a      	beq.n	8025be4 <_dtoa_r+0xb44>
 8025b8e:	4659      	mov	r1, fp
 8025b90:	2300      	movs	r3, #0
 8025b92:	220a      	movs	r2, #10
 8025b94:	4620      	mov	r0, r4
 8025b96:	f000 ff47 	bl	8026a28 <__multadd>
 8025b9a:	45b8      	cmp	r8, r7
 8025b9c:	4683      	mov	fp, r0
 8025b9e:	f04f 0300 	mov.w	r3, #0
 8025ba2:	f04f 020a 	mov.w	r2, #10
 8025ba6:	4641      	mov	r1, r8
 8025ba8:	4620      	mov	r0, r4
 8025baa:	d107      	bne.n	8025bbc <_dtoa_r+0xb1c>
 8025bac:	f000 ff3c 	bl	8026a28 <__multadd>
 8025bb0:	4680      	mov	r8, r0
 8025bb2:	4607      	mov	r7, r0
 8025bb4:	9b01      	ldr	r3, [sp, #4]
 8025bb6:	3301      	adds	r3, #1
 8025bb8:	9301      	str	r3, [sp, #4]
 8025bba:	e775      	b.n	8025aa8 <_dtoa_r+0xa08>
 8025bbc:	f000 ff34 	bl	8026a28 <__multadd>
 8025bc0:	4639      	mov	r1, r7
 8025bc2:	4680      	mov	r8, r0
 8025bc4:	2300      	movs	r3, #0
 8025bc6:	220a      	movs	r2, #10
 8025bc8:	4620      	mov	r0, r4
 8025bca:	f000 ff2d 	bl	8026a28 <__multadd>
 8025bce:	4607      	mov	r7, r0
 8025bd0:	e7f0      	b.n	8025bb4 <_dtoa_r+0xb14>
 8025bd2:	f1b9 0f00 	cmp.w	r9, #0
 8025bd6:	9a00      	ldr	r2, [sp, #0]
 8025bd8:	bfcc      	ite	gt
 8025bda:	464d      	movgt	r5, r9
 8025bdc:	2501      	movle	r5, #1
 8025bde:	4415      	add	r5, r2
 8025be0:	f04f 0800 	mov.w	r8, #0
 8025be4:	4659      	mov	r1, fp
 8025be6:	2201      	movs	r2, #1
 8025be8:	4620      	mov	r0, r4
 8025bea:	9301      	str	r3, [sp, #4]
 8025bec:	f001 f916 	bl	8026e1c <__lshift>
 8025bf0:	4631      	mov	r1, r6
 8025bf2:	4683      	mov	fp, r0
 8025bf4:	f001 f97e 	bl	8026ef4 <__mcmp>
 8025bf8:	2800      	cmp	r0, #0
 8025bfa:	dcb2      	bgt.n	8025b62 <_dtoa_r+0xac2>
 8025bfc:	d102      	bne.n	8025c04 <_dtoa_r+0xb64>
 8025bfe:	9b01      	ldr	r3, [sp, #4]
 8025c00:	07db      	lsls	r3, r3, #31
 8025c02:	d4ae      	bmi.n	8025b62 <_dtoa_r+0xac2>
 8025c04:	462b      	mov	r3, r5
 8025c06:	461d      	mov	r5, r3
 8025c08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025c0c:	2a30      	cmp	r2, #48	; 0x30
 8025c0e:	d0fa      	beq.n	8025c06 <_dtoa_r+0xb66>
 8025c10:	e6f7      	b.n	8025a02 <_dtoa_r+0x962>
 8025c12:	9a00      	ldr	r2, [sp, #0]
 8025c14:	429a      	cmp	r2, r3
 8025c16:	d1a5      	bne.n	8025b64 <_dtoa_r+0xac4>
 8025c18:	f10a 0a01 	add.w	sl, sl, #1
 8025c1c:	2331      	movs	r3, #49	; 0x31
 8025c1e:	e779      	b.n	8025b14 <_dtoa_r+0xa74>
 8025c20:	4b13      	ldr	r3, [pc, #76]	; (8025c70 <_dtoa_r+0xbd0>)
 8025c22:	f7ff baaf 	b.w	8025184 <_dtoa_r+0xe4>
 8025c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025c28:	2b00      	cmp	r3, #0
 8025c2a:	f47f aa86 	bne.w	802513a <_dtoa_r+0x9a>
 8025c2e:	4b11      	ldr	r3, [pc, #68]	; (8025c74 <_dtoa_r+0xbd4>)
 8025c30:	f7ff baa8 	b.w	8025184 <_dtoa_r+0xe4>
 8025c34:	f1b9 0f00 	cmp.w	r9, #0
 8025c38:	dc03      	bgt.n	8025c42 <_dtoa_r+0xba2>
 8025c3a:	9b05      	ldr	r3, [sp, #20]
 8025c3c:	2b02      	cmp	r3, #2
 8025c3e:	f73f aec9 	bgt.w	80259d4 <_dtoa_r+0x934>
 8025c42:	9d00      	ldr	r5, [sp, #0]
 8025c44:	4631      	mov	r1, r6
 8025c46:	4658      	mov	r0, fp
 8025c48:	f7ff f99c 	bl	8024f84 <quorem>
 8025c4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8025c50:	f805 3b01 	strb.w	r3, [r5], #1
 8025c54:	9a00      	ldr	r2, [sp, #0]
 8025c56:	1aaa      	subs	r2, r5, r2
 8025c58:	4591      	cmp	r9, r2
 8025c5a:	ddba      	ble.n	8025bd2 <_dtoa_r+0xb32>
 8025c5c:	4659      	mov	r1, fp
 8025c5e:	2300      	movs	r3, #0
 8025c60:	220a      	movs	r2, #10
 8025c62:	4620      	mov	r0, r4
 8025c64:	f000 fee0 	bl	8026a28 <__multadd>
 8025c68:	4683      	mov	fp, r0
 8025c6a:	e7eb      	b.n	8025c44 <_dtoa_r+0xba4>
 8025c6c:	08033bc5 	.word	0x08033bc5
 8025c70:	080327b7 	.word	0x080327b7
 8025c74:	08033b59 	.word	0x08033b59

08025c78 <__sflush_r>:
 8025c78:	898a      	ldrh	r2, [r1, #12]
 8025c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c7e:	4605      	mov	r5, r0
 8025c80:	0710      	lsls	r0, r2, #28
 8025c82:	460c      	mov	r4, r1
 8025c84:	d458      	bmi.n	8025d38 <__sflush_r+0xc0>
 8025c86:	684b      	ldr	r3, [r1, #4]
 8025c88:	2b00      	cmp	r3, #0
 8025c8a:	dc05      	bgt.n	8025c98 <__sflush_r+0x20>
 8025c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025c8e:	2b00      	cmp	r3, #0
 8025c90:	dc02      	bgt.n	8025c98 <__sflush_r+0x20>
 8025c92:	2000      	movs	r0, #0
 8025c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025c9a:	2e00      	cmp	r6, #0
 8025c9c:	d0f9      	beq.n	8025c92 <__sflush_r+0x1a>
 8025c9e:	2300      	movs	r3, #0
 8025ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025ca4:	682f      	ldr	r7, [r5, #0]
 8025ca6:	602b      	str	r3, [r5, #0]
 8025ca8:	d032      	beq.n	8025d10 <__sflush_r+0x98>
 8025caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025cac:	89a3      	ldrh	r3, [r4, #12]
 8025cae:	075a      	lsls	r2, r3, #29
 8025cb0:	d505      	bpl.n	8025cbe <__sflush_r+0x46>
 8025cb2:	6863      	ldr	r3, [r4, #4]
 8025cb4:	1ac0      	subs	r0, r0, r3
 8025cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025cb8:	b10b      	cbz	r3, 8025cbe <__sflush_r+0x46>
 8025cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025cbc:	1ac0      	subs	r0, r0, r3
 8025cbe:	2300      	movs	r3, #0
 8025cc0:	4602      	mov	r2, r0
 8025cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025cc4:	6a21      	ldr	r1, [r4, #32]
 8025cc6:	4628      	mov	r0, r5
 8025cc8:	47b0      	blx	r6
 8025cca:	1c43      	adds	r3, r0, #1
 8025ccc:	89a3      	ldrh	r3, [r4, #12]
 8025cce:	d106      	bne.n	8025cde <__sflush_r+0x66>
 8025cd0:	6829      	ldr	r1, [r5, #0]
 8025cd2:	291d      	cmp	r1, #29
 8025cd4:	d82c      	bhi.n	8025d30 <__sflush_r+0xb8>
 8025cd6:	4a2a      	ldr	r2, [pc, #168]	; (8025d80 <__sflush_r+0x108>)
 8025cd8:	40ca      	lsrs	r2, r1
 8025cda:	07d6      	lsls	r6, r2, #31
 8025cdc:	d528      	bpl.n	8025d30 <__sflush_r+0xb8>
 8025cde:	2200      	movs	r2, #0
 8025ce0:	6062      	str	r2, [r4, #4]
 8025ce2:	04d9      	lsls	r1, r3, #19
 8025ce4:	6922      	ldr	r2, [r4, #16]
 8025ce6:	6022      	str	r2, [r4, #0]
 8025ce8:	d504      	bpl.n	8025cf4 <__sflush_r+0x7c>
 8025cea:	1c42      	adds	r2, r0, #1
 8025cec:	d101      	bne.n	8025cf2 <__sflush_r+0x7a>
 8025cee:	682b      	ldr	r3, [r5, #0]
 8025cf0:	b903      	cbnz	r3, 8025cf4 <__sflush_r+0x7c>
 8025cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8025cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025cf6:	602f      	str	r7, [r5, #0]
 8025cf8:	2900      	cmp	r1, #0
 8025cfa:	d0ca      	beq.n	8025c92 <__sflush_r+0x1a>
 8025cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025d00:	4299      	cmp	r1, r3
 8025d02:	d002      	beq.n	8025d0a <__sflush_r+0x92>
 8025d04:	4628      	mov	r0, r5
 8025d06:	f7fc fe2d 	bl	8022964 <_free_r>
 8025d0a:	2000      	movs	r0, #0
 8025d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8025d0e:	e7c1      	b.n	8025c94 <__sflush_r+0x1c>
 8025d10:	6a21      	ldr	r1, [r4, #32]
 8025d12:	2301      	movs	r3, #1
 8025d14:	4628      	mov	r0, r5
 8025d16:	47b0      	blx	r6
 8025d18:	1c41      	adds	r1, r0, #1
 8025d1a:	d1c7      	bne.n	8025cac <__sflush_r+0x34>
 8025d1c:	682b      	ldr	r3, [r5, #0]
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	d0c4      	beq.n	8025cac <__sflush_r+0x34>
 8025d22:	2b1d      	cmp	r3, #29
 8025d24:	d001      	beq.n	8025d2a <__sflush_r+0xb2>
 8025d26:	2b16      	cmp	r3, #22
 8025d28:	d101      	bne.n	8025d2e <__sflush_r+0xb6>
 8025d2a:	602f      	str	r7, [r5, #0]
 8025d2c:	e7b1      	b.n	8025c92 <__sflush_r+0x1a>
 8025d2e:	89a3      	ldrh	r3, [r4, #12]
 8025d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d34:	81a3      	strh	r3, [r4, #12]
 8025d36:	e7ad      	b.n	8025c94 <__sflush_r+0x1c>
 8025d38:	690f      	ldr	r7, [r1, #16]
 8025d3a:	2f00      	cmp	r7, #0
 8025d3c:	d0a9      	beq.n	8025c92 <__sflush_r+0x1a>
 8025d3e:	0793      	lsls	r3, r2, #30
 8025d40:	680e      	ldr	r6, [r1, #0]
 8025d42:	bf08      	it	eq
 8025d44:	694b      	ldreq	r3, [r1, #20]
 8025d46:	600f      	str	r7, [r1, #0]
 8025d48:	bf18      	it	ne
 8025d4a:	2300      	movne	r3, #0
 8025d4c:	eba6 0807 	sub.w	r8, r6, r7
 8025d50:	608b      	str	r3, [r1, #8]
 8025d52:	f1b8 0f00 	cmp.w	r8, #0
 8025d56:	dd9c      	ble.n	8025c92 <__sflush_r+0x1a>
 8025d58:	6a21      	ldr	r1, [r4, #32]
 8025d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025d5c:	4643      	mov	r3, r8
 8025d5e:	463a      	mov	r2, r7
 8025d60:	4628      	mov	r0, r5
 8025d62:	47b0      	blx	r6
 8025d64:	2800      	cmp	r0, #0
 8025d66:	dc06      	bgt.n	8025d76 <__sflush_r+0xfe>
 8025d68:	89a3      	ldrh	r3, [r4, #12]
 8025d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025d6e:	81a3      	strh	r3, [r4, #12]
 8025d70:	f04f 30ff 	mov.w	r0, #4294967295
 8025d74:	e78e      	b.n	8025c94 <__sflush_r+0x1c>
 8025d76:	4407      	add	r7, r0
 8025d78:	eba8 0800 	sub.w	r8, r8, r0
 8025d7c:	e7e9      	b.n	8025d52 <__sflush_r+0xda>
 8025d7e:	bf00      	nop
 8025d80:	20400001 	.word	0x20400001

08025d84 <_fflush_r>:
 8025d84:	b538      	push	{r3, r4, r5, lr}
 8025d86:	690b      	ldr	r3, [r1, #16]
 8025d88:	4605      	mov	r5, r0
 8025d8a:	460c      	mov	r4, r1
 8025d8c:	b913      	cbnz	r3, 8025d94 <_fflush_r+0x10>
 8025d8e:	2500      	movs	r5, #0
 8025d90:	4628      	mov	r0, r5
 8025d92:	bd38      	pop	{r3, r4, r5, pc}
 8025d94:	b118      	cbz	r0, 8025d9e <_fflush_r+0x1a>
 8025d96:	6983      	ldr	r3, [r0, #24]
 8025d98:	b90b      	cbnz	r3, 8025d9e <_fflush_r+0x1a>
 8025d9a:	f000 f899 	bl	8025ed0 <__sinit>
 8025d9e:	4b14      	ldr	r3, [pc, #80]	; (8025df0 <_fflush_r+0x6c>)
 8025da0:	429c      	cmp	r4, r3
 8025da2:	d11b      	bne.n	8025ddc <_fflush_r+0x58>
 8025da4:	686c      	ldr	r4, [r5, #4]
 8025da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025daa:	2b00      	cmp	r3, #0
 8025dac:	d0ef      	beq.n	8025d8e <_fflush_r+0xa>
 8025dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025db0:	07d0      	lsls	r0, r2, #31
 8025db2:	d404      	bmi.n	8025dbe <_fflush_r+0x3a>
 8025db4:	0599      	lsls	r1, r3, #22
 8025db6:	d402      	bmi.n	8025dbe <_fflush_r+0x3a>
 8025db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025dba:	f000 fd3b 	bl	8026834 <__retarget_lock_acquire_recursive>
 8025dbe:	4628      	mov	r0, r5
 8025dc0:	4621      	mov	r1, r4
 8025dc2:	f7ff ff59 	bl	8025c78 <__sflush_r>
 8025dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025dc8:	07da      	lsls	r2, r3, #31
 8025dca:	4605      	mov	r5, r0
 8025dcc:	d4e0      	bmi.n	8025d90 <_fflush_r+0xc>
 8025dce:	89a3      	ldrh	r3, [r4, #12]
 8025dd0:	059b      	lsls	r3, r3, #22
 8025dd2:	d4dd      	bmi.n	8025d90 <_fflush_r+0xc>
 8025dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025dd6:	f000 fd2f 	bl	8026838 <__retarget_lock_release_recursive>
 8025dda:	e7d9      	b.n	8025d90 <_fflush_r+0xc>
 8025ddc:	4b05      	ldr	r3, [pc, #20]	; (8025df4 <_fflush_r+0x70>)
 8025dde:	429c      	cmp	r4, r3
 8025de0:	d101      	bne.n	8025de6 <_fflush_r+0x62>
 8025de2:	68ac      	ldr	r4, [r5, #8]
 8025de4:	e7df      	b.n	8025da6 <_fflush_r+0x22>
 8025de6:	4b04      	ldr	r3, [pc, #16]	; (8025df8 <_fflush_r+0x74>)
 8025de8:	429c      	cmp	r4, r3
 8025dea:	bf08      	it	eq
 8025dec:	68ec      	ldreq	r4, [r5, #12]
 8025dee:	e7da      	b.n	8025da6 <_fflush_r+0x22>
 8025df0:	08033bf8 	.word	0x08033bf8
 8025df4:	08033c18 	.word	0x08033c18
 8025df8:	08033bd8 	.word	0x08033bd8

08025dfc <fflush>:
 8025dfc:	4601      	mov	r1, r0
 8025dfe:	b920      	cbnz	r0, 8025e0a <fflush+0xe>
 8025e00:	4b04      	ldr	r3, [pc, #16]	; (8025e14 <fflush+0x18>)
 8025e02:	4905      	ldr	r1, [pc, #20]	; (8025e18 <fflush+0x1c>)
 8025e04:	6818      	ldr	r0, [r3, #0]
 8025e06:	f000 b8fe 	b.w	8026006 <_fwalk_reent>
 8025e0a:	4b04      	ldr	r3, [pc, #16]	; (8025e1c <fflush+0x20>)
 8025e0c:	6818      	ldr	r0, [r3, #0]
 8025e0e:	f7ff bfb9 	b.w	8025d84 <_fflush_r>
 8025e12:	bf00      	nop
 8025e14:	08033924 	.word	0x08033924
 8025e18:	08025d85 	.word	0x08025d85
 8025e1c:	200005e4 	.word	0x200005e4

08025e20 <std>:
 8025e20:	2300      	movs	r3, #0
 8025e22:	b510      	push	{r4, lr}
 8025e24:	4604      	mov	r4, r0
 8025e26:	e9c0 3300 	strd	r3, r3, [r0]
 8025e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025e2e:	6083      	str	r3, [r0, #8]
 8025e30:	8181      	strh	r1, [r0, #12]
 8025e32:	6643      	str	r3, [r0, #100]	; 0x64
 8025e34:	81c2      	strh	r2, [r0, #14]
 8025e36:	6183      	str	r3, [r0, #24]
 8025e38:	4619      	mov	r1, r3
 8025e3a:	2208      	movs	r2, #8
 8025e3c:	305c      	adds	r0, #92	; 0x5c
 8025e3e:	f7fc fafb 	bl	8022438 <memset>
 8025e42:	4b05      	ldr	r3, [pc, #20]	; (8025e58 <std+0x38>)
 8025e44:	6263      	str	r3, [r4, #36]	; 0x24
 8025e46:	4b05      	ldr	r3, [pc, #20]	; (8025e5c <std+0x3c>)
 8025e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8025e4a:	4b05      	ldr	r3, [pc, #20]	; (8025e60 <std+0x40>)
 8025e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025e4e:	4b05      	ldr	r3, [pc, #20]	; (8025e64 <std+0x44>)
 8025e50:	6224      	str	r4, [r4, #32]
 8025e52:	6323      	str	r3, [r4, #48]	; 0x30
 8025e54:	bd10      	pop	{r4, pc}
 8025e56:	bf00      	nop
 8025e58:	08023915 	.word	0x08023915
 8025e5c:	0802393b 	.word	0x0802393b
 8025e60:	08023973 	.word	0x08023973
 8025e64:	08023997 	.word	0x08023997

08025e68 <_cleanup_r>:
 8025e68:	4901      	ldr	r1, [pc, #4]	; (8025e70 <_cleanup_r+0x8>)
 8025e6a:	f000 b8cc 	b.w	8026006 <_fwalk_reent>
 8025e6e:	bf00      	nop
 8025e70:	08025d85 	.word	0x08025d85

08025e74 <__sfmoreglue>:
 8025e74:	b570      	push	{r4, r5, r6, lr}
 8025e76:	1e4a      	subs	r2, r1, #1
 8025e78:	2568      	movs	r5, #104	; 0x68
 8025e7a:	4355      	muls	r5, r2
 8025e7c:	460e      	mov	r6, r1
 8025e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8025e82:	f7fc fdbf 	bl	8022a04 <_malloc_r>
 8025e86:	4604      	mov	r4, r0
 8025e88:	b140      	cbz	r0, 8025e9c <__sfmoreglue+0x28>
 8025e8a:	2100      	movs	r1, #0
 8025e8c:	e9c0 1600 	strd	r1, r6, [r0]
 8025e90:	300c      	adds	r0, #12
 8025e92:	60a0      	str	r0, [r4, #8]
 8025e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8025e98:	f7fc face 	bl	8022438 <memset>
 8025e9c:	4620      	mov	r0, r4
 8025e9e:	bd70      	pop	{r4, r5, r6, pc}

08025ea0 <__sfp_lock_acquire>:
 8025ea0:	4801      	ldr	r0, [pc, #4]	; (8025ea8 <__sfp_lock_acquire+0x8>)
 8025ea2:	f000 bcc7 	b.w	8026834 <__retarget_lock_acquire_recursive>
 8025ea6:	bf00      	nop
 8025ea8:	20001a20 	.word	0x20001a20

08025eac <__sfp_lock_release>:
 8025eac:	4801      	ldr	r0, [pc, #4]	; (8025eb4 <__sfp_lock_release+0x8>)
 8025eae:	f000 bcc3 	b.w	8026838 <__retarget_lock_release_recursive>
 8025eb2:	bf00      	nop
 8025eb4:	20001a20 	.word	0x20001a20

08025eb8 <__sinit_lock_acquire>:
 8025eb8:	4801      	ldr	r0, [pc, #4]	; (8025ec0 <__sinit_lock_acquire+0x8>)
 8025eba:	f000 bcbb 	b.w	8026834 <__retarget_lock_acquire_recursive>
 8025ebe:	bf00      	nop
 8025ec0:	20001a1b 	.word	0x20001a1b

08025ec4 <__sinit_lock_release>:
 8025ec4:	4801      	ldr	r0, [pc, #4]	; (8025ecc <__sinit_lock_release+0x8>)
 8025ec6:	f000 bcb7 	b.w	8026838 <__retarget_lock_release_recursive>
 8025eca:	bf00      	nop
 8025ecc:	20001a1b 	.word	0x20001a1b

08025ed0 <__sinit>:
 8025ed0:	b510      	push	{r4, lr}
 8025ed2:	4604      	mov	r4, r0
 8025ed4:	f7ff fff0 	bl	8025eb8 <__sinit_lock_acquire>
 8025ed8:	69a3      	ldr	r3, [r4, #24]
 8025eda:	b11b      	cbz	r3, 8025ee4 <__sinit+0x14>
 8025edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025ee0:	f7ff bff0 	b.w	8025ec4 <__sinit_lock_release>
 8025ee4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8025ee8:	6523      	str	r3, [r4, #80]	; 0x50
 8025eea:	4b13      	ldr	r3, [pc, #76]	; (8025f38 <__sinit+0x68>)
 8025eec:	4a13      	ldr	r2, [pc, #76]	; (8025f3c <__sinit+0x6c>)
 8025eee:	681b      	ldr	r3, [r3, #0]
 8025ef0:	62a2      	str	r2, [r4, #40]	; 0x28
 8025ef2:	42a3      	cmp	r3, r4
 8025ef4:	bf04      	itt	eq
 8025ef6:	2301      	moveq	r3, #1
 8025ef8:	61a3      	streq	r3, [r4, #24]
 8025efa:	4620      	mov	r0, r4
 8025efc:	f000 f820 	bl	8025f40 <__sfp>
 8025f00:	6060      	str	r0, [r4, #4]
 8025f02:	4620      	mov	r0, r4
 8025f04:	f000 f81c 	bl	8025f40 <__sfp>
 8025f08:	60a0      	str	r0, [r4, #8]
 8025f0a:	4620      	mov	r0, r4
 8025f0c:	f000 f818 	bl	8025f40 <__sfp>
 8025f10:	2200      	movs	r2, #0
 8025f12:	60e0      	str	r0, [r4, #12]
 8025f14:	2104      	movs	r1, #4
 8025f16:	6860      	ldr	r0, [r4, #4]
 8025f18:	f7ff ff82 	bl	8025e20 <std>
 8025f1c:	68a0      	ldr	r0, [r4, #8]
 8025f1e:	2201      	movs	r2, #1
 8025f20:	2109      	movs	r1, #9
 8025f22:	f7ff ff7d 	bl	8025e20 <std>
 8025f26:	68e0      	ldr	r0, [r4, #12]
 8025f28:	2202      	movs	r2, #2
 8025f2a:	2112      	movs	r1, #18
 8025f2c:	f7ff ff78 	bl	8025e20 <std>
 8025f30:	2301      	movs	r3, #1
 8025f32:	61a3      	str	r3, [r4, #24]
 8025f34:	e7d2      	b.n	8025edc <__sinit+0xc>
 8025f36:	bf00      	nop
 8025f38:	08033924 	.word	0x08033924
 8025f3c:	08025e69 	.word	0x08025e69

08025f40 <__sfp>:
 8025f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f42:	4607      	mov	r7, r0
 8025f44:	f7ff ffac 	bl	8025ea0 <__sfp_lock_acquire>
 8025f48:	4b1e      	ldr	r3, [pc, #120]	; (8025fc4 <__sfp+0x84>)
 8025f4a:	681e      	ldr	r6, [r3, #0]
 8025f4c:	69b3      	ldr	r3, [r6, #24]
 8025f4e:	b913      	cbnz	r3, 8025f56 <__sfp+0x16>
 8025f50:	4630      	mov	r0, r6
 8025f52:	f7ff ffbd 	bl	8025ed0 <__sinit>
 8025f56:	3648      	adds	r6, #72	; 0x48
 8025f58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025f5c:	3b01      	subs	r3, #1
 8025f5e:	d503      	bpl.n	8025f68 <__sfp+0x28>
 8025f60:	6833      	ldr	r3, [r6, #0]
 8025f62:	b30b      	cbz	r3, 8025fa8 <__sfp+0x68>
 8025f64:	6836      	ldr	r6, [r6, #0]
 8025f66:	e7f7      	b.n	8025f58 <__sfp+0x18>
 8025f68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025f6c:	b9d5      	cbnz	r5, 8025fa4 <__sfp+0x64>
 8025f6e:	4b16      	ldr	r3, [pc, #88]	; (8025fc8 <__sfp+0x88>)
 8025f70:	60e3      	str	r3, [r4, #12]
 8025f72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8025f76:	6665      	str	r5, [r4, #100]	; 0x64
 8025f78:	f000 fc5a 	bl	8026830 <__retarget_lock_init_recursive>
 8025f7c:	f7ff ff96 	bl	8025eac <__sfp_lock_release>
 8025f80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8025f84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025f88:	6025      	str	r5, [r4, #0]
 8025f8a:	61a5      	str	r5, [r4, #24]
 8025f8c:	2208      	movs	r2, #8
 8025f8e:	4629      	mov	r1, r5
 8025f90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8025f94:	f7fc fa50 	bl	8022438 <memset>
 8025f98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8025f9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8025fa0:	4620      	mov	r0, r4
 8025fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025fa4:	3468      	adds	r4, #104	; 0x68
 8025fa6:	e7d9      	b.n	8025f5c <__sfp+0x1c>
 8025fa8:	2104      	movs	r1, #4
 8025faa:	4638      	mov	r0, r7
 8025fac:	f7ff ff62 	bl	8025e74 <__sfmoreglue>
 8025fb0:	4604      	mov	r4, r0
 8025fb2:	6030      	str	r0, [r6, #0]
 8025fb4:	2800      	cmp	r0, #0
 8025fb6:	d1d5      	bne.n	8025f64 <__sfp+0x24>
 8025fb8:	f7ff ff78 	bl	8025eac <__sfp_lock_release>
 8025fbc:	230c      	movs	r3, #12
 8025fbe:	603b      	str	r3, [r7, #0]
 8025fc0:	e7ee      	b.n	8025fa0 <__sfp+0x60>
 8025fc2:	bf00      	nop
 8025fc4:	08033924 	.word	0x08033924
 8025fc8:	ffff0001 	.word	0xffff0001

08025fcc <_fwalk>:
 8025fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025fd0:	460f      	mov	r7, r1
 8025fd2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025fd6:	2600      	movs	r6, #0
 8025fd8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8025fdc:	f1b8 0801 	subs.w	r8, r8, #1
 8025fe0:	d505      	bpl.n	8025fee <_fwalk+0x22>
 8025fe2:	6824      	ldr	r4, [r4, #0]
 8025fe4:	2c00      	cmp	r4, #0
 8025fe6:	d1f7      	bne.n	8025fd8 <_fwalk+0xc>
 8025fe8:	4630      	mov	r0, r6
 8025fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025fee:	89ab      	ldrh	r3, [r5, #12]
 8025ff0:	2b01      	cmp	r3, #1
 8025ff2:	d906      	bls.n	8026002 <_fwalk+0x36>
 8025ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025ff8:	3301      	adds	r3, #1
 8025ffa:	d002      	beq.n	8026002 <_fwalk+0x36>
 8025ffc:	4628      	mov	r0, r5
 8025ffe:	47b8      	blx	r7
 8026000:	4306      	orrs	r6, r0
 8026002:	3568      	adds	r5, #104	; 0x68
 8026004:	e7ea      	b.n	8025fdc <_fwalk+0x10>

08026006 <_fwalk_reent>:
 8026006:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802600a:	4606      	mov	r6, r0
 802600c:	4688      	mov	r8, r1
 802600e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026012:	2700      	movs	r7, #0
 8026014:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026018:	f1b9 0901 	subs.w	r9, r9, #1
 802601c:	d505      	bpl.n	802602a <_fwalk_reent+0x24>
 802601e:	6824      	ldr	r4, [r4, #0]
 8026020:	2c00      	cmp	r4, #0
 8026022:	d1f7      	bne.n	8026014 <_fwalk_reent+0xe>
 8026024:	4638      	mov	r0, r7
 8026026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802602a:	89ab      	ldrh	r3, [r5, #12]
 802602c:	2b01      	cmp	r3, #1
 802602e:	d907      	bls.n	8026040 <_fwalk_reent+0x3a>
 8026030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026034:	3301      	adds	r3, #1
 8026036:	d003      	beq.n	8026040 <_fwalk_reent+0x3a>
 8026038:	4629      	mov	r1, r5
 802603a:	4630      	mov	r0, r6
 802603c:	47c0      	blx	r8
 802603e:	4307      	orrs	r7, r0
 8026040:	3568      	adds	r5, #104	; 0x68
 8026042:	e7e9      	b.n	8026018 <_fwalk_reent+0x12>

08026044 <rshift>:
 8026044:	6903      	ldr	r3, [r0, #16]
 8026046:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802604a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802604e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8026052:	f100 0414 	add.w	r4, r0, #20
 8026056:	dd45      	ble.n	80260e4 <rshift+0xa0>
 8026058:	f011 011f 	ands.w	r1, r1, #31
 802605c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8026060:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8026064:	d10c      	bne.n	8026080 <rshift+0x3c>
 8026066:	f100 0710 	add.w	r7, r0, #16
 802606a:	4629      	mov	r1, r5
 802606c:	42b1      	cmp	r1, r6
 802606e:	d334      	bcc.n	80260da <rshift+0x96>
 8026070:	1a9b      	subs	r3, r3, r2
 8026072:	009b      	lsls	r3, r3, #2
 8026074:	1eea      	subs	r2, r5, #3
 8026076:	4296      	cmp	r6, r2
 8026078:	bf38      	it	cc
 802607a:	2300      	movcc	r3, #0
 802607c:	4423      	add	r3, r4
 802607e:	e015      	b.n	80260ac <rshift+0x68>
 8026080:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8026084:	f1c1 0820 	rsb	r8, r1, #32
 8026088:	40cf      	lsrs	r7, r1
 802608a:	f105 0e04 	add.w	lr, r5, #4
 802608e:	46a1      	mov	r9, r4
 8026090:	4576      	cmp	r6, lr
 8026092:	46f4      	mov	ip, lr
 8026094:	d815      	bhi.n	80260c2 <rshift+0x7e>
 8026096:	1a9b      	subs	r3, r3, r2
 8026098:	009a      	lsls	r2, r3, #2
 802609a:	3a04      	subs	r2, #4
 802609c:	3501      	adds	r5, #1
 802609e:	42ae      	cmp	r6, r5
 80260a0:	bf38      	it	cc
 80260a2:	2200      	movcc	r2, #0
 80260a4:	18a3      	adds	r3, r4, r2
 80260a6:	50a7      	str	r7, [r4, r2]
 80260a8:	b107      	cbz	r7, 80260ac <rshift+0x68>
 80260aa:	3304      	adds	r3, #4
 80260ac:	1b1a      	subs	r2, r3, r4
 80260ae:	42a3      	cmp	r3, r4
 80260b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80260b4:	bf08      	it	eq
 80260b6:	2300      	moveq	r3, #0
 80260b8:	6102      	str	r2, [r0, #16]
 80260ba:	bf08      	it	eq
 80260bc:	6143      	streq	r3, [r0, #20]
 80260be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80260c2:	f8dc c000 	ldr.w	ip, [ip]
 80260c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80260ca:	ea4c 0707 	orr.w	r7, ip, r7
 80260ce:	f849 7b04 	str.w	r7, [r9], #4
 80260d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80260d6:	40cf      	lsrs	r7, r1
 80260d8:	e7da      	b.n	8026090 <rshift+0x4c>
 80260da:	f851 cb04 	ldr.w	ip, [r1], #4
 80260de:	f847 cf04 	str.w	ip, [r7, #4]!
 80260e2:	e7c3      	b.n	802606c <rshift+0x28>
 80260e4:	4623      	mov	r3, r4
 80260e6:	e7e1      	b.n	80260ac <rshift+0x68>

080260e8 <__hexdig_fun>:
 80260e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80260ec:	2b09      	cmp	r3, #9
 80260ee:	d802      	bhi.n	80260f6 <__hexdig_fun+0xe>
 80260f0:	3820      	subs	r0, #32
 80260f2:	b2c0      	uxtb	r0, r0
 80260f4:	4770      	bx	lr
 80260f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80260fa:	2b05      	cmp	r3, #5
 80260fc:	d801      	bhi.n	8026102 <__hexdig_fun+0x1a>
 80260fe:	3847      	subs	r0, #71	; 0x47
 8026100:	e7f7      	b.n	80260f2 <__hexdig_fun+0xa>
 8026102:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8026106:	2b05      	cmp	r3, #5
 8026108:	d801      	bhi.n	802610e <__hexdig_fun+0x26>
 802610a:	3827      	subs	r0, #39	; 0x27
 802610c:	e7f1      	b.n	80260f2 <__hexdig_fun+0xa>
 802610e:	2000      	movs	r0, #0
 8026110:	4770      	bx	lr
	...

08026114 <__gethex>:
 8026114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026118:	ed2d 8b02 	vpush	{d8}
 802611c:	b089      	sub	sp, #36	; 0x24
 802611e:	ee08 0a10 	vmov	s16, r0
 8026122:	9304      	str	r3, [sp, #16]
 8026124:	4bbc      	ldr	r3, [pc, #752]	; (8026418 <__gethex+0x304>)
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	9301      	str	r3, [sp, #4]
 802612a:	4618      	mov	r0, r3
 802612c:	468b      	mov	fp, r1
 802612e:	4690      	mov	r8, r2
 8026130:	f7da f858 	bl	80001e4 <strlen>
 8026134:	9b01      	ldr	r3, [sp, #4]
 8026136:	f8db 2000 	ldr.w	r2, [fp]
 802613a:	4403      	add	r3, r0
 802613c:	4682      	mov	sl, r0
 802613e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8026142:	9305      	str	r3, [sp, #20]
 8026144:	1c93      	adds	r3, r2, #2
 8026146:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802614a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802614e:	32fe      	adds	r2, #254	; 0xfe
 8026150:	18d1      	adds	r1, r2, r3
 8026152:	461f      	mov	r7, r3
 8026154:	f813 0b01 	ldrb.w	r0, [r3], #1
 8026158:	9100      	str	r1, [sp, #0]
 802615a:	2830      	cmp	r0, #48	; 0x30
 802615c:	d0f8      	beq.n	8026150 <__gethex+0x3c>
 802615e:	f7ff ffc3 	bl	80260e8 <__hexdig_fun>
 8026162:	4604      	mov	r4, r0
 8026164:	2800      	cmp	r0, #0
 8026166:	d13a      	bne.n	80261de <__gethex+0xca>
 8026168:	9901      	ldr	r1, [sp, #4]
 802616a:	4652      	mov	r2, sl
 802616c:	4638      	mov	r0, r7
 802616e:	f7fd fc2b 	bl	80239c8 <strncmp>
 8026172:	4605      	mov	r5, r0
 8026174:	2800      	cmp	r0, #0
 8026176:	d168      	bne.n	802624a <__gethex+0x136>
 8026178:	f817 000a 	ldrb.w	r0, [r7, sl]
 802617c:	eb07 060a 	add.w	r6, r7, sl
 8026180:	f7ff ffb2 	bl	80260e8 <__hexdig_fun>
 8026184:	2800      	cmp	r0, #0
 8026186:	d062      	beq.n	802624e <__gethex+0x13a>
 8026188:	4633      	mov	r3, r6
 802618a:	7818      	ldrb	r0, [r3, #0]
 802618c:	2830      	cmp	r0, #48	; 0x30
 802618e:	461f      	mov	r7, r3
 8026190:	f103 0301 	add.w	r3, r3, #1
 8026194:	d0f9      	beq.n	802618a <__gethex+0x76>
 8026196:	f7ff ffa7 	bl	80260e8 <__hexdig_fun>
 802619a:	2301      	movs	r3, #1
 802619c:	fab0 f480 	clz	r4, r0
 80261a0:	0964      	lsrs	r4, r4, #5
 80261a2:	4635      	mov	r5, r6
 80261a4:	9300      	str	r3, [sp, #0]
 80261a6:	463a      	mov	r2, r7
 80261a8:	4616      	mov	r6, r2
 80261aa:	3201      	adds	r2, #1
 80261ac:	7830      	ldrb	r0, [r6, #0]
 80261ae:	f7ff ff9b 	bl	80260e8 <__hexdig_fun>
 80261b2:	2800      	cmp	r0, #0
 80261b4:	d1f8      	bne.n	80261a8 <__gethex+0x94>
 80261b6:	9901      	ldr	r1, [sp, #4]
 80261b8:	4652      	mov	r2, sl
 80261ba:	4630      	mov	r0, r6
 80261bc:	f7fd fc04 	bl	80239c8 <strncmp>
 80261c0:	b980      	cbnz	r0, 80261e4 <__gethex+0xd0>
 80261c2:	b94d      	cbnz	r5, 80261d8 <__gethex+0xc4>
 80261c4:	eb06 050a 	add.w	r5, r6, sl
 80261c8:	462a      	mov	r2, r5
 80261ca:	4616      	mov	r6, r2
 80261cc:	3201      	adds	r2, #1
 80261ce:	7830      	ldrb	r0, [r6, #0]
 80261d0:	f7ff ff8a 	bl	80260e8 <__hexdig_fun>
 80261d4:	2800      	cmp	r0, #0
 80261d6:	d1f8      	bne.n	80261ca <__gethex+0xb6>
 80261d8:	1bad      	subs	r5, r5, r6
 80261da:	00ad      	lsls	r5, r5, #2
 80261dc:	e004      	b.n	80261e8 <__gethex+0xd4>
 80261de:	2400      	movs	r4, #0
 80261e0:	4625      	mov	r5, r4
 80261e2:	e7e0      	b.n	80261a6 <__gethex+0x92>
 80261e4:	2d00      	cmp	r5, #0
 80261e6:	d1f7      	bne.n	80261d8 <__gethex+0xc4>
 80261e8:	7833      	ldrb	r3, [r6, #0]
 80261ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80261ee:	2b50      	cmp	r3, #80	; 0x50
 80261f0:	d13b      	bne.n	802626a <__gethex+0x156>
 80261f2:	7873      	ldrb	r3, [r6, #1]
 80261f4:	2b2b      	cmp	r3, #43	; 0x2b
 80261f6:	d02c      	beq.n	8026252 <__gethex+0x13e>
 80261f8:	2b2d      	cmp	r3, #45	; 0x2d
 80261fa:	d02e      	beq.n	802625a <__gethex+0x146>
 80261fc:	1c71      	adds	r1, r6, #1
 80261fe:	f04f 0900 	mov.w	r9, #0
 8026202:	7808      	ldrb	r0, [r1, #0]
 8026204:	f7ff ff70 	bl	80260e8 <__hexdig_fun>
 8026208:	1e43      	subs	r3, r0, #1
 802620a:	b2db      	uxtb	r3, r3
 802620c:	2b18      	cmp	r3, #24
 802620e:	d82c      	bhi.n	802626a <__gethex+0x156>
 8026210:	f1a0 0210 	sub.w	r2, r0, #16
 8026214:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8026218:	f7ff ff66 	bl	80260e8 <__hexdig_fun>
 802621c:	1e43      	subs	r3, r0, #1
 802621e:	b2db      	uxtb	r3, r3
 8026220:	2b18      	cmp	r3, #24
 8026222:	d91d      	bls.n	8026260 <__gethex+0x14c>
 8026224:	f1b9 0f00 	cmp.w	r9, #0
 8026228:	d000      	beq.n	802622c <__gethex+0x118>
 802622a:	4252      	negs	r2, r2
 802622c:	4415      	add	r5, r2
 802622e:	f8cb 1000 	str.w	r1, [fp]
 8026232:	b1e4      	cbz	r4, 802626e <__gethex+0x15a>
 8026234:	9b00      	ldr	r3, [sp, #0]
 8026236:	2b00      	cmp	r3, #0
 8026238:	bf14      	ite	ne
 802623a:	2700      	movne	r7, #0
 802623c:	2706      	moveq	r7, #6
 802623e:	4638      	mov	r0, r7
 8026240:	b009      	add	sp, #36	; 0x24
 8026242:	ecbd 8b02 	vpop	{d8}
 8026246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802624a:	463e      	mov	r6, r7
 802624c:	4625      	mov	r5, r4
 802624e:	2401      	movs	r4, #1
 8026250:	e7ca      	b.n	80261e8 <__gethex+0xd4>
 8026252:	f04f 0900 	mov.w	r9, #0
 8026256:	1cb1      	adds	r1, r6, #2
 8026258:	e7d3      	b.n	8026202 <__gethex+0xee>
 802625a:	f04f 0901 	mov.w	r9, #1
 802625e:	e7fa      	b.n	8026256 <__gethex+0x142>
 8026260:	230a      	movs	r3, #10
 8026262:	fb03 0202 	mla	r2, r3, r2, r0
 8026266:	3a10      	subs	r2, #16
 8026268:	e7d4      	b.n	8026214 <__gethex+0x100>
 802626a:	4631      	mov	r1, r6
 802626c:	e7df      	b.n	802622e <__gethex+0x11a>
 802626e:	1bf3      	subs	r3, r6, r7
 8026270:	3b01      	subs	r3, #1
 8026272:	4621      	mov	r1, r4
 8026274:	2b07      	cmp	r3, #7
 8026276:	dc0b      	bgt.n	8026290 <__gethex+0x17c>
 8026278:	ee18 0a10 	vmov	r0, s16
 802627c:	f000 fb72 	bl	8026964 <_Balloc>
 8026280:	4604      	mov	r4, r0
 8026282:	b940      	cbnz	r0, 8026296 <__gethex+0x182>
 8026284:	4b65      	ldr	r3, [pc, #404]	; (802641c <__gethex+0x308>)
 8026286:	4602      	mov	r2, r0
 8026288:	21de      	movs	r1, #222	; 0xde
 802628a:	4865      	ldr	r0, [pc, #404]	; (8026420 <__gethex+0x30c>)
 802628c:	f7fe fe38 	bl	8024f00 <__assert_func>
 8026290:	3101      	adds	r1, #1
 8026292:	105b      	asrs	r3, r3, #1
 8026294:	e7ee      	b.n	8026274 <__gethex+0x160>
 8026296:	f100 0914 	add.w	r9, r0, #20
 802629a:	f04f 0b00 	mov.w	fp, #0
 802629e:	f1ca 0301 	rsb	r3, sl, #1
 80262a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80262a6:	f8cd b000 	str.w	fp, [sp]
 80262aa:	9306      	str	r3, [sp, #24]
 80262ac:	42b7      	cmp	r7, r6
 80262ae:	d340      	bcc.n	8026332 <__gethex+0x21e>
 80262b0:	9802      	ldr	r0, [sp, #8]
 80262b2:	9b00      	ldr	r3, [sp, #0]
 80262b4:	f840 3b04 	str.w	r3, [r0], #4
 80262b8:	eba0 0009 	sub.w	r0, r0, r9
 80262bc:	1080      	asrs	r0, r0, #2
 80262be:	0146      	lsls	r6, r0, #5
 80262c0:	6120      	str	r0, [r4, #16]
 80262c2:	4618      	mov	r0, r3
 80262c4:	f000 fc44 	bl	8026b50 <__hi0bits>
 80262c8:	1a30      	subs	r0, r6, r0
 80262ca:	f8d8 6000 	ldr.w	r6, [r8]
 80262ce:	42b0      	cmp	r0, r6
 80262d0:	dd63      	ble.n	802639a <__gethex+0x286>
 80262d2:	1b87      	subs	r7, r0, r6
 80262d4:	4639      	mov	r1, r7
 80262d6:	4620      	mov	r0, r4
 80262d8:	f000 ffde 	bl	8027298 <__any_on>
 80262dc:	4682      	mov	sl, r0
 80262de:	b1a8      	cbz	r0, 802630c <__gethex+0x1f8>
 80262e0:	1e7b      	subs	r3, r7, #1
 80262e2:	1159      	asrs	r1, r3, #5
 80262e4:	f003 021f 	and.w	r2, r3, #31
 80262e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80262ec:	f04f 0a01 	mov.w	sl, #1
 80262f0:	fa0a f202 	lsl.w	r2, sl, r2
 80262f4:	420a      	tst	r2, r1
 80262f6:	d009      	beq.n	802630c <__gethex+0x1f8>
 80262f8:	4553      	cmp	r3, sl
 80262fa:	dd05      	ble.n	8026308 <__gethex+0x1f4>
 80262fc:	1eb9      	subs	r1, r7, #2
 80262fe:	4620      	mov	r0, r4
 8026300:	f000 ffca 	bl	8027298 <__any_on>
 8026304:	2800      	cmp	r0, #0
 8026306:	d145      	bne.n	8026394 <__gethex+0x280>
 8026308:	f04f 0a02 	mov.w	sl, #2
 802630c:	4639      	mov	r1, r7
 802630e:	4620      	mov	r0, r4
 8026310:	f7ff fe98 	bl	8026044 <rshift>
 8026314:	443d      	add	r5, r7
 8026316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802631a:	42ab      	cmp	r3, r5
 802631c:	da4c      	bge.n	80263b8 <__gethex+0x2a4>
 802631e:	ee18 0a10 	vmov	r0, s16
 8026322:	4621      	mov	r1, r4
 8026324:	f000 fb5e 	bl	80269e4 <_Bfree>
 8026328:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802632a:	2300      	movs	r3, #0
 802632c:	6013      	str	r3, [r2, #0]
 802632e:	27a3      	movs	r7, #163	; 0xa3
 8026330:	e785      	b.n	802623e <__gethex+0x12a>
 8026332:	1e73      	subs	r3, r6, #1
 8026334:	9a05      	ldr	r2, [sp, #20]
 8026336:	9303      	str	r3, [sp, #12]
 8026338:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802633c:	4293      	cmp	r3, r2
 802633e:	d019      	beq.n	8026374 <__gethex+0x260>
 8026340:	f1bb 0f20 	cmp.w	fp, #32
 8026344:	d107      	bne.n	8026356 <__gethex+0x242>
 8026346:	9b02      	ldr	r3, [sp, #8]
 8026348:	9a00      	ldr	r2, [sp, #0]
 802634a:	f843 2b04 	str.w	r2, [r3], #4
 802634e:	9302      	str	r3, [sp, #8]
 8026350:	2300      	movs	r3, #0
 8026352:	9300      	str	r3, [sp, #0]
 8026354:	469b      	mov	fp, r3
 8026356:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802635a:	f7ff fec5 	bl	80260e8 <__hexdig_fun>
 802635e:	9b00      	ldr	r3, [sp, #0]
 8026360:	f000 000f 	and.w	r0, r0, #15
 8026364:	fa00 f00b 	lsl.w	r0, r0, fp
 8026368:	4303      	orrs	r3, r0
 802636a:	9300      	str	r3, [sp, #0]
 802636c:	f10b 0b04 	add.w	fp, fp, #4
 8026370:	9b03      	ldr	r3, [sp, #12]
 8026372:	e00d      	b.n	8026390 <__gethex+0x27c>
 8026374:	9b03      	ldr	r3, [sp, #12]
 8026376:	9a06      	ldr	r2, [sp, #24]
 8026378:	4413      	add	r3, r2
 802637a:	42bb      	cmp	r3, r7
 802637c:	d3e0      	bcc.n	8026340 <__gethex+0x22c>
 802637e:	4618      	mov	r0, r3
 8026380:	9901      	ldr	r1, [sp, #4]
 8026382:	9307      	str	r3, [sp, #28]
 8026384:	4652      	mov	r2, sl
 8026386:	f7fd fb1f 	bl	80239c8 <strncmp>
 802638a:	9b07      	ldr	r3, [sp, #28]
 802638c:	2800      	cmp	r0, #0
 802638e:	d1d7      	bne.n	8026340 <__gethex+0x22c>
 8026390:	461e      	mov	r6, r3
 8026392:	e78b      	b.n	80262ac <__gethex+0x198>
 8026394:	f04f 0a03 	mov.w	sl, #3
 8026398:	e7b8      	b.n	802630c <__gethex+0x1f8>
 802639a:	da0a      	bge.n	80263b2 <__gethex+0x29e>
 802639c:	1a37      	subs	r7, r6, r0
 802639e:	4621      	mov	r1, r4
 80263a0:	ee18 0a10 	vmov	r0, s16
 80263a4:	463a      	mov	r2, r7
 80263a6:	f000 fd39 	bl	8026e1c <__lshift>
 80263aa:	1bed      	subs	r5, r5, r7
 80263ac:	4604      	mov	r4, r0
 80263ae:	f100 0914 	add.w	r9, r0, #20
 80263b2:	f04f 0a00 	mov.w	sl, #0
 80263b6:	e7ae      	b.n	8026316 <__gethex+0x202>
 80263b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80263bc:	42a8      	cmp	r0, r5
 80263be:	dd72      	ble.n	80264a6 <__gethex+0x392>
 80263c0:	1b45      	subs	r5, r0, r5
 80263c2:	42ae      	cmp	r6, r5
 80263c4:	dc36      	bgt.n	8026434 <__gethex+0x320>
 80263c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80263ca:	2b02      	cmp	r3, #2
 80263cc:	d02a      	beq.n	8026424 <__gethex+0x310>
 80263ce:	2b03      	cmp	r3, #3
 80263d0:	d02c      	beq.n	802642c <__gethex+0x318>
 80263d2:	2b01      	cmp	r3, #1
 80263d4:	d115      	bne.n	8026402 <__gethex+0x2ee>
 80263d6:	42ae      	cmp	r6, r5
 80263d8:	d113      	bne.n	8026402 <__gethex+0x2ee>
 80263da:	2e01      	cmp	r6, #1
 80263dc:	d10b      	bne.n	80263f6 <__gethex+0x2e2>
 80263de:	9a04      	ldr	r2, [sp, #16]
 80263e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80263e4:	6013      	str	r3, [r2, #0]
 80263e6:	2301      	movs	r3, #1
 80263e8:	6123      	str	r3, [r4, #16]
 80263ea:	f8c9 3000 	str.w	r3, [r9]
 80263ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80263f0:	2762      	movs	r7, #98	; 0x62
 80263f2:	601c      	str	r4, [r3, #0]
 80263f4:	e723      	b.n	802623e <__gethex+0x12a>
 80263f6:	1e71      	subs	r1, r6, #1
 80263f8:	4620      	mov	r0, r4
 80263fa:	f000 ff4d 	bl	8027298 <__any_on>
 80263fe:	2800      	cmp	r0, #0
 8026400:	d1ed      	bne.n	80263de <__gethex+0x2ca>
 8026402:	ee18 0a10 	vmov	r0, s16
 8026406:	4621      	mov	r1, r4
 8026408:	f000 faec 	bl	80269e4 <_Bfree>
 802640c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802640e:	2300      	movs	r3, #0
 8026410:	6013      	str	r3, [r2, #0]
 8026412:	2750      	movs	r7, #80	; 0x50
 8026414:	e713      	b.n	802623e <__gethex+0x12a>
 8026416:	bf00      	nop
 8026418:	08033ca0 	.word	0x08033ca0
 802641c:	08033bc5 	.word	0x08033bc5
 8026420:	08033c38 	.word	0x08033c38
 8026424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026426:	2b00      	cmp	r3, #0
 8026428:	d1eb      	bne.n	8026402 <__gethex+0x2ee>
 802642a:	e7d8      	b.n	80263de <__gethex+0x2ca>
 802642c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802642e:	2b00      	cmp	r3, #0
 8026430:	d1d5      	bne.n	80263de <__gethex+0x2ca>
 8026432:	e7e6      	b.n	8026402 <__gethex+0x2ee>
 8026434:	1e6f      	subs	r7, r5, #1
 8026436:	f1ba 0f00 	cmp.w	sl, #0
 802643a:	d131      	bne.n	80264a0 <__gethex+0x38c>
 802643c:	b127      	cbz	r7, 8026448 <__gethex+0x334>
 802643e:	4639      	mov	r1, r7
 8026440:	4620      	mov	r0, r4
 8026442:	f000 ff29 	bl	8027298 <__any_on>
 8026446:	4682      	mov	sl, r0
 8026448:	117b      	asrs	r3, r7, #5
 802644a:	2101      	movs	r1, #1
 802644c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8026450:	f007 071f 	and.w	r7, r7, #31
 8026454:	fa01 f707 	lsl.w	r7, r1, r7
 8026458:	421f      	tst	r7, r3
 802645a:	4629      	mov	r1, r5
 802645c:	4620      	mov	r0, r4
 802645e:	bf18      	it	ne
 8026460:	f04a 0a02 	orrne.w	sl, sl, #2
 8026464:	1b76      	subs	r6, r6, r5
 8026466:	f7ff fded 	bl	8026044 <rshift>
 802646a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802646e:	2702      	movs	r7, #2
 8026470:	f1ba 0f00 	cmp.w	sl, #0
 8026474:	d048      	beq.n	8026508 <__gethex+0x3f4>
 8026476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802647a:	2b02      	cmp	r3, #2
 802647c:	d015      	beq.n	80264aa <__gethex+0x396>
 802647e:	2b03      	cmp	r3, #3
 8026480:	d017      	beq.n	80264b2 <__gethex+0x39e>
 8026482:	2b01      	cmp	r3, #1
 8026484:	d109      	bne.n	802649a <__gethex+0x386>
 8026486:	f01a 0f02 	tst.w	sl, #2
 802648a:	d006      	beq.n	802649a <__gethex+0x386>
 802648c:	f8d9 0000 	ldr.w	r0, [r9]
 8026490:	ea4a 0a00 	orr.w	sl, sl, r0
 8026494:	f01a 0f01 	tst.w	sl, #1
 8026498:	d10e      	bne.n	80264b8 <__gethex+0x3a4>
 802649a:	f047 0710 	orr.w	r7, r7, #16
 802649e:	e033      	b.n	8026508 <__gethex+0x3f4>
 80264a0:	f04f 0a01 	mov.w	sl, #1
 80264a4:	e7d0      	b.n	8026448 <__gethex+0x334>
 80264a6:	2701      	movs	r7, #1
 80264a8:	e7e2      	b.n	8026470 <__gethex+0x35c>
 80264aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80264ac:	f1c3 0301 	rsb	r3, r3, #1
 80264b0:	9315      	str	r3, [sp, #84]	; 0x54
 80264b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80264b4:	2b00      	cmp	r3, #0
 80264b6:	d0f0      	beq.n	802649a <__gethex+0x386>
 80264b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80264bc:	f104 0314 	add.w	r3, r4, #20
 80264c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80264c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80264c8:	f04f 0c00 	mov.w	ip, #0
 80264cc:	4618      	mov	r0, r3
 80264ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80264d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80264d6:	d01c      	beq.n	8026512 <__gethex+0x3fe>
 80264d8:	3201      	adds	r2, #1
 80264da:	6002      	str	r2, [r0, #0]
 80264dc:	2f02      	cmp	r7, #2
 80264de:	f104 0314 	add.w	r3, r4, #20
 80264e2:	d13f      	bne.n	8026564 <__gethex+0x450>
 80264e4:	f8d8 2000 	ldr.w	r2, [r8]
 80264e8:	3a01      	subs	r2, #1
 80264ea:	42b2      	cmp	r2, r6
 80264ec:	d10a      	bne.n	8026504 <__gethex+0x3f0>
 80264ee:	1171      	asrs	r1, r6, #5
 80264f0:	2201      	movs	r2, #1
 80264f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80264f6:	f006 061f 	and.w	r6, r6, #31
 80264fa:	fa02 f606 	lsl.w	r6, r2, r6
 80264fe:	421e      	tst	r6, r3
 8026500:	bf18      	it	ne
 8026502:	4617      	movne	r7, r2
 8026504:	f047 0720 	orr.w	r7, r7, #32
 8026508:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802650a:	601c      	str	r4, [r3, #0]
 802650c:	9b04      	ldr	r3, [sp, #16]
 802650e:	601d      	str	r5, [r3, #0]
 8026510:	e695      	b.n	802623e <__gethex+0x12a>
 8026512:	4299      	cmp	r1, r3
 8026514:	f843 cc04 	str.w	ip, [r3, #-4]
 8026518:	d8d8      	bhi.n	80264cc <__gethex+0x3b8>
 802651a:	68a3      	ldr	r3, [r4, #8]
 802651c:	459b      	cmp	fp, r3
 802651e:	db19      	blt.n	8026554 <__gethex+0x440>
 8026520:	6861      	ldr	r1, [r4, #4]
 8026522:	ee18 0a10 	vmov	r0, s16
 8026526:	3101      	adds	r1, #1
 8026528:	f000 fa1c 	bl	8026964 <_Balloc>
 802652c:	4681      	mov	r9, r0
 802652e:	b918      	cbnz	r0, 8026538 <__gethex+0x424>
 8026530:	4b1a      	ldr	r3, [pc, #104]	; (802659c <__gethex+0x488>)
 8026532:	4602      	mov	r2, r0
 8026534:	2184      	movs	r1, #132	; 0x84
 8026536:	e6a8      	b.n	802628a <__gethex+0x176>
 8026538:	6922      	ldr	r2, [r4, #16]
 802653a:	3202      	adds	r2, #2
 802653c:	f104 010c 	add.w	r1, r4, #12
 8026540:	0092      	lsls	r2, r2, #2
 8026542:	300c      	adds	r0, #12
 8026544:	f7fb ff50 	bl	80223e8 <memcpy>
 8026548:	4621      	mov	r1, r4
 802654a:	ee18 0a10 	vmov	r0, s16
 802654e:	f000 fa49 	bl	80269e4 <_Bfree>
 8026552:	464c      	mov	r4, r9
 8026554:	6923      	ldr	r3, [r4, #16]
 8026556:	1c5a      	adds	r2, r3, #1
 8026558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802655c:	6122      	str	r2, [r4, #16]
 802655e:	2201      	movs	r2, #1
 8026560:	615a      	str	r2, [r3, #20]
 8026562:	e7bb      	b.n	80264dc <__gethex+0x3c8>
 8026564:	6922      	ldr	r2, [r4, #16]
 8026566:	455a      	cmp	r2, fp
 8026568:	dd0b      	ble.n	8026582 <__gethex+0x46e>
 802656a:	2101      	movs	r1, #1
 802656c:	4620      	mov	r0, r4
 802656e:	f7ff fd69 	bl	8026044 <rshift>
 8026572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8026576:	3501      	adds	r5, #1
 8026578:	42ab      	cmp	r3, r5
 802657a:	f6ff aed0 	blt.w	802631e <__gethex+0x20a>
 802657e:	2701      	movs	r7, #1
 8026580:	e7c0      	b.n	8026504 <__gethex+0x3f0>
 8026582:	f016 061f 	ands.w	r6, r6, #31
 8026586:	d0fa      	beq.n	802657e <__gethex+0x46a>
 8026588:	449a      	add	sl, r3
 802658a:	f1c6 0620 	rsb	r6, r6, #32
 802658e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8026592:	f000 fadd 	bl	8026b50 <__hi0bits>
 8026596:	42b0      	cmp	r0, r6
 8026598:	dbe7      	blt.n	802656a <__gethex+0x456>
 802659a:	e7f0      	b.n	802657e <__gethex+0x46a>
 802659c:	08033bc5 	.word	0x08033bc5

080265a0 <L_shift>:
 80265a0:	f1c2 0208 	rsb	r2, r2, #8
 80265a4:	0092      	lsls	r2, r2, #2
 80265a6:	b570      	push	{r4, r5, r6, lr}
 80265a8:	f1c2 0620 	rsb	r6, r2, #32
 80265ac:	6843      	ldr	r3, [r0, #4]
 80265ae:	6804      	ldr	r4, [r0, #0]
 80265b0:	fa03 f506 	lsl.w	r5, r3, r6
 80265b4:	432c      	orrs	r4, r5
 80265b6:	40d3      	lsrs	r3, r2
 80265b8:	6004      	str	r4, [r0, #0]
 80265ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80265be:	4288      	cmp	r0, r1
 80265c0:	d3f4      	bcc.n	80265ac <L_shift+0xc>
 80265c2:	bd70      	pop	{r4, r5, r6, pc}

080265c4 <__match>:
 80265c4:	b530      	push	{r4, r5, lr}
 80265c6:	6803      	ldr	r3, [r0, #0]
 80265c8:	3301      	adds	r3, #1
 80265ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80265ce:	b914      	cbnz	r4, 80265d6 <__match+0x12>
 80265d0:	6003      	str	r3, [r0, #0]
 80265d2:	2001      	movs	r0, #1
 80265d4:	bd30      	pop	{r4, r5, pc}
 80265d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80265da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80265de:	2d19      	cmp	r5, #25
 80265e0:	bf98      	it	ls
 80265e2:	3220      	addls	r2, #32
 80265e4:	42a2      	cmp	r2, r4
 80265e6:	d0f0      	beq.n	80265ca <__match+0x6>
 80265e8:	2000      	movs	r0, #0
 80265ea:	e7f3      	b.n	80265d4 <__match+0x10>

080265ec <__hexnan>:
 80265ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265f0:	680b      	ldr	r3, [r1, #0]
 80265f2:	6801      	ldr	r1, [r0, #0]
 80265f4:	115e      	asrs	r6, r3, #5
 80265f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80265fa:	f013 031f 	ands.w	r3, r3, #31
 80265fe:	b087      	sub	sp, #28
 8026600:	bf18      	it	ne
 8026602:	3604      	addne	r6, #4
 8026604:	2500      	movs	r5, #0
 8026606:	1f37      	subs	r7, r6, #4
 8026608:	4682      	mov	sl, r0
 802660a:	4690      	mov	r8, r2
 802660c:	9301      	str	r3, [sp, #4]
 802660e:	f846 5c04 	str.w	r5, [r6, #-4]
 8026612:	46b9      	mov	r9, r7
 8026614:	463c      	mov	r4, r7
 8026616:	9502      	str	r5, [sp, #8]
 8026618:	46ab      	mov	fp, r5
 802661a:	784a      	ldrb	r2, [r1, #1]
 802661c:	1c4b      	adds	r3, r1, #1
 802661e:	9303      	str	r3, [sp, #12]
 8026620:	b342      	cbz	r2, 8026674 <__hexnan+0x88>
 8026622:	4610      	mov	r0, r2
 8026624:	9105      	str	r1, [sp, #20]
 8026626:	9204      	str	r2, [sp, #16]
 8026628:	f7ff fd5e 	bl	80260e8 <__hexdig_fun>
 802662c:	2800      	cmp	r0, #0
 802662e:	d14f      	bne.n	80266d0 <__hexnan+0xe4>
 8026630:	9a04      	ldr	r2, [sp, #16]
 8026632:	9905      	ldr	r1, [sp, #20]
 8026634:	2a20      	cmp	r2, #32
 8026636:	d818      	bhi.n	802666a <__hexnan+0x7e>
 8026638:	9b02      	ldr	r3, [sp, #8]
 802663a:	459b      	cmp	fp, r3
 802663c:	dd13      	ble.n	8026666 <__hexnan+0x7a>
 802663e:	454c      	cmp	r4, r9
 8026640:	d206      	bcs.n	8026650 <__hexnan+0x64>
 8026642:	2d07      	cmp	r5, #7
 8026644:	dc04      	bgt.n	8026650 <__hexnan+0x64>
 8026646:	462a      	mov	r2, r5
 8026648:	4649      	mov	r1, r9
 802664a:	4620      	mov	r0, r4
 802664c:	f7ff ffa8 	bl	80265a0 <L_shift>
 8026650:	4544      	cmp	r4, r8
 8026652:	d950      	bls.n	80266f6 <__hexnan+0x10a>
 8026654:	2300      	movs	r3, #0
 8026656:	f1a4 0904 	sub.w	r9, r4, #4
 802665a:	f844 3c04 	str.w	r3, [r4, #-4]
 802665e:	f8cd b008 	str.w	fp, [sp, #8]
 8026662:	464c      	mov	r4, r9
 8026664:	461d      	mov	r5, r3
 8026666:	9903      	ldr	r1, [sp, #12]
 8026668:	e7d7      	b.n	802661a <__hexnan+0x2e>
 802666a:	2a29      	cmp	r2, #41	; 0x29
 802666c:	d156      	bne.n	802671c <__hexnan+0x130>
 802666e:	3102      	adds	r1, #2
 8026670:	f8ca 1000 	str.w	r1, [sl]
 8026674:	f1bb 0f00 	cmp.w	fp, #0
 8026678:	d050      	beq.n	802671c <__hexnan+0x130>
 802667a:	454c      	cmp	r4, r9
 802667c:	d206      	bcs.n	802668c <__hexnan+0xa0>
 802667e:	2d07      	cmp	r5, #7
 8026680:	dc04      	bgt.n	802668c <__hexnan+0xa0>
 8026682:	462a      	mov	r2, r5
 8026684:	4649      	mov	r1, r9
 8026686:	4620      	mov	r0, r4
 8026688:	f7ff ff8a 	bl	80265a0 <L_shift>
 802668c:	4544      	cmp	r4, r8
 802668e:	d934      	bls.n	80266fa <__hexnan+0x10e>
 8026690:	f1a8 0204 	sub.w	r2, r8, #4
 8026694:	4623      	mov	r3, r4
 8026696:	f853 1b04 	ldr.w	r1, [r3], #4
 802669a:	f842 1f04 	str.w	r1, [r2, #4]!
 802669e:	429f      	cmp	r7, r3
 80266a0:	d2f9      	bcs.n	8026696 <__hexnan+0xaa>
 80266a2:	1b3b      	subs	r3, r7, r4
 80266a4:	f023 0303 	bic.w	r3, r3, #3
 80266a8:	3304      	adds	r3, #4
 80266aa:	3401      	adds	r4, #1
 80266ac:	3e03      	subs	r6, #3
 80266ae:	42b4      	cmp	r4, r6
 80266b0:	bf88      	it	hi
 80266b2:	2304      	movhi	r3, #4
 80266b4:	4443      	add	r3, r8
 80266b6:	2200      	movs	r2, #0
 80266b8:	f843 2b04 	str.w	r2, [r3], #4
 80266bc:	429f      	cmp	r7, r3
 80266be:	d2fb      	bcs.n	80266b8 <__hexnan+0xcc>
 80266c0:	683b      	ldr	r3, [r7, #0]
 80266c2:	b91b      	cbnz	r3, 80266cc <__hexnan+0xe0>
 80266c4:	4547      	cmp	r7, r8
 80266c6:	d127      	bne.n	8026718 <__hexnan+0x12c>
 80266c8:	2301      	movs	r3, #1
 80266ca:	603b      	str	r3, [r7, #0]
 80266cc:	2005      	movs	r0, #5
 80266ce:	e026      	b.n	802671e <__hexnan+0x132>
 80266d0:	3501      	adds	r5, #1
 80266d2:	2d08      	cmp	r5, #8
 80266d4:	f10b 0b01 	add.w	fp, fp, #1
 80266d8:	dd06      	ble.n	80266e8 <__hexnan+0xfc>
 80266da:	4544      	cmp	r4, r8
 80266dc:	d9c3      	bls.n	8026666 <__hexnan+0x7a>
 80266de:	2300      	movs	r3, #0
 80266e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80266e4:	2501      	movs	r5, #1
 80266e6:	3c04      	subs	r4, #4
 80266e8:	6822      	ldr	r2, [r4, #0]
 80266ea:	f000 000f 	and.w	r0, r0, #15
 80266ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80266f2:	6022      	str	r2, [r4, #0]
 80266f4:	e7b7      	b.n	8026666 <__hexnan+0x7a>
 80266f6:	2508      	movs	r5, #8
 80266f8:	e7b5      	b.n	8026666 <__hexnan+0x7a>
 80266fa:	9b01      	ldr	r3, [sp, #4]
 80266fc:	2b00      	cmp	r3, #0
 80266fe:	d0df      	beq.n	80266c0 <__hexnan+0xd4>
 8026700:	f04f 32ff 	mov.w	r2, #4294967295
 8026704:	f1c3 0320 	rsb	r3, r3, #32
 8026708:	fa22 f303 	lsr.w	r3, r2, r3
 802670c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8026710:	401a      	ands	r2, r3
 8026712:	f846 2c04 	str.w	r2, [r6, #-4]
 8026716:	e7d3      	b.n	80266c0 <__hexnan+0xd4>
 8026718:	3f04      	subs	r7, #4
 802671a:	e7d1      	b.n	80266c0 <__hexnan+0xd4>
 802671c:	2004      	movs	r0, #4
 802671e:	b007      	add	sp, #28
 8026720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026724 <_getc_r>:
 8026724:	b538      	push	{r3, r4, r5, lr}
 8026726:	460c      	mov	r4, r1
 8026728:	4605      	mov	r5, r0
 802672a:	b118      	cbz	r0, 8026734 <_getc_r+0x10>
 802672c:	6983      	ldr	r3, [r0, #24]
 802672e:	b90b      	cbnz	r3, 8026734 <_getc_r+0x10>
 8026730:	f7ff fbce 	bl	8025ed0 <__sinit>
 8026734:	4b18      	ldr	r3, [pc, #96]	; (8026798 <_getc_r+0x74>)
 8026736:	429c      	cmp	r4, r3
 8026738:	d11e      	bne.n	8026778 <_getc_r+0x54>
 802673a:	686c      	ldr	r4, [r5, #4]
 802673c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802673e:	07d8      	lsls	r0, r3, #31
 8026740:	d405      	bmi.n	802674e <_getc_r+0x2a>
 8026742:	89a3      	ldrh	r3, [r4, #12]
 8026744:	0599      	lsls	r1, r3, #22
 8026746:	d402      	bmi.n	802674e <_getc_r+0x2a>
 8026748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802674a:	f000 f873 	bl	8026834 <__retarget_lock_acquire_recursive>
 802674e:	6863      	ldr	r3, [r4, #4]
 8026750:	3b01      	subs	r3, #1
 8026752:	2b00      	cmp	r3, #0
 8026754:	6063      	str	r3, [r4, #4]
 8026756:	da19      	bge.n	802678c <_getc_r+0x68>
 8026758:	4628      	mov	r0, r5
 802675a:	4621      	mov	r1, r4
 802675c:	f001 fab6 	bl	8027ccc <__srget_r>
 8026760:	4605      	mov	r5, r0
 8026762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026764:	07da      	lsls	r2, r3, #31
 8026766:	d405      	bmi.n	8026774 <_getc_r+0x50>
 8026768:	89a3      	ldrh	r3, [r4, #12]
 802676a:	059b      	lsls	r3, r3, #22
 802676c:	d402      	bmi.n	8026774 <_getc_r+0x50>
 802676e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026770:	f000 f862 	bl	8026838 <__retarget_lock_release_recursive>
 8026774:	4628      	mov	r0, r5
 8026776:	bd38      	pop	{r3, r4, r5, pc}
 8026778:	4b08      	ldr	r3, [pc, #32]	; (802679c <_getc_r+0x78>)
 802677a:	429c      	cmp	r4, r3
 802677c:	d101      	bne.n	8026782 <_getc_r+0x5e>
 802677e:	68ac      	ldr	r4, [r5, #8]
 8026780:	e7dc      	b.n	802673c <_getc_r+0x18>
 8026782:	4b07      	ldr	r3, [pc, #28]	; (80267a0 <_getc_r+0x7c>)
 8026784:	429c      	cmp	r4, r3
 8026786:	bf08      	it	eq
 8026788:	68ec      	ldreq	r4, [r5, #12]
 802678a:	e7d7      	b.n	802673c <_getc_r+0x18>
 802678c:	6823      	ldr	r3, [r4, #0]
 802678e:	1c5a      	adds	r2, r3, #1
 8026790:	6022      	str	r2, [r4, #0]
 8026792:	781d      	ldrb	r5, [r3, #0]
 8026794:	e7e5      	b.n	8026762 <_getc_r+0x3e>
 8026796:	bf00      	nop
 8026798:	08033bf8 	.word	0x08033bf8
 802679c:	08033c18 	.word	0x08033c18
 80267a0:	08033bd8 	.word	0x08033bd8

080267a4 <_findenv_r>:
 80267a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267a8:	4607      	mov	r7, r0
 80267aa:	4689      	mov	r9, r1
 80267ac:	4616      	mov	r6, r2
 80267ae:	f001 fbd3 	bl	8027f58 <__env_lock>
 80267b2:	4b18      	ldr	r3, [pc, #96]	; (8026814 <_findenv_r+0x70>)
 80267b4:	681c      	ldr	r4, [r3, #0]
 80267b6:	469a      	mov	sl, r3
 80267b8:	b134      	cbz	r4, 80267c8 <_findenv_r+0x24>
 80267ba:	464b      	mov	r3, r9
 80267bc:	4698      	mov	r8, r3
 80267be:	f813 1b01 	ldrb.w	r1, [r3], #1
 80267c2:	b139      	cbz	r1, 80267d4 <_findenv_r+0x30>
 80267c4:	293d      	cmp	r1, #61	; 0x3d
 80267c6:	d1f9      	bne.n	80267bc <_findenv_r+0x18>
 80267c8:	4638      	mov	r0, r7
 80267ca:	f001 fbcb 	bl	8027f64 <__env_unlock>
 80267ce:	2000      	movs	r0, #0
 80267d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267d4:	eba8 0809 	sub.w	r8, r8, r9
 80267d8:	46a3      	mov	fp, r4
 80267da:	f854 0b04 	ldr.w	r0, [r4], #4
 80267de:	2800      	cmp	r0, #0
 80267e0:	d0f2      	beq.n	80267c8 <_findenv_r+0x24>
 80267e2:	4642      	mov	r2, r8
 80267e4:	4649      	mov	r1, r9
 80267e6:	f7fd f8ef 	bl	80239c8 <strncmp>
 80267ea:	2800      	cmp	r0, #0
 80267ec:	d1f4      	bne.n	80267d8 <_findenv_r+0x34>
 80267ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80267f2:	eb03 0508 	add.w	r5, r3, r8
 80267f6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80267fa:	2b3d      	cmp	r3, #61	; 0x3d
 80267fc:	d1ec      	bne.n	80267d8 <_findenv_r+0x34>
 80267fe:	f8da 3000 	ldr.w	r3, [sl]
 8026802:	ebab 0303 	sub.w	r3, fp, r3
 8026806:	109b      	asrs	r3, r3, #2
 8026808:	4638      	mov	r0, r7
 802680a:	6033      	str	r3, [r6, #0]
 802680c:	f001 fbaa 	bl	8027f64 <__env_unlock>
 8026810:	1c68      	adds	r0, r5, #1
 8026812:	e7dd      	b.n	80267d0 <_findenv_r+0x2c>
 8026814:	20000020 	.word	0x20000020

08026818 <_getenv_r>:
 8026818:	b507      	push	{r0, r1, r2, lr}
 802681a:	aa01      	add	r2, sp, #4
 802681c:	f7ff ffc2 	bl	80267a4 <_findenv_r>
 8026820:	b003      	add	sp, #12
 8026822:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08026828 <__gettzinfo>:
 8026828:	4800      	ldr	r0, [pc, #0]	; (802682c <__gettzinfo+0x4>)
 802682a:	4770      	bx	lr
 802682c:	20000650 	.word	0x20000650

08026830 <__retarget_lock_init_recursive>:
 8026830:	4770      	bx	lr

08026832 <__retarget_lock_acquire>:
 8026832:	4770      	bx	lr

08026834 <__retarget_lock_acquire_recursive>:
 8026834:	4770      	bx	lr

08026836 <__retarget_lock_release>:
 8026836:	4770      	bx	lr

08026838 <__retarget_lock_release_recursive>:
 8026838:	4770      	bx	lr
	...

0802683c <_lseek_r>:
 802683c:	b538      	push	{r3, r4, r5, lr}
 802683e:	4d07      	ldr	r5, [pc, #28]	; (802685c <_lseek_r+0x20>)
 8026840:	4604      	mov	r4, r0
 8026842:	4608      	mov	r0, r1
 8026844:	4611      	mov	r1, r2
 8026846:	2200      	movs	r2, #0
 8026848:	602a      	str	r2, [r5, #0]
 802684a:	461a      	mov	r2, r3
 802684c:	f7dd fc74 	bl	8004138 <_lseek>
 8026850:	1c43      	adds	r3, r0, #1
 8026852:	d102      	bne.n	802685a <_lseek_r+0x1e>
 8026854:	682b      	ldr	r3, [r5, #0]
 8026856:	b103      	cbz	r3, 802685a <_lseek_r+0x1e>
 8026858:	6023      	str	r3, [r4, #0]
 802685a:	bd38      	pop	{r3, r4, r5, pc}
 802685c:	20001a24 	.word	0x20001a24

08026860 <__swhatbuf_r>:
 8026860:	b570      	push	{r4, r5, r6, lr}
 8026862:	460e      	mov	r6, r1
 8026864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026868:	2900      	cmp	r1, #0
 802686a:	b096      	sub	sp, #88	; 0x58
 802686c:	4614      	mov	r4, r2
 802686e:	461d      	mov	r5, r3
 8026870:	da07      	bge.n	8026882 <__swhatbuf_r+0x22>
 8026872:	2300      	movs	r3, #0
 8026874:	602b      	str	r3, [r5, #0]
 8026876:	89b3      	ldrh	r3, [r6, #12]
 8026878:	061a      	lsls	r2, r3, #24
 802687a:	d410      	bmi.n	802689e <__swhatbuf_r+0x3e>
 802687c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026880:	e00e      	b.n	80268a0 <__swhatbuf_r+0x40>
 8026882:	466a      	mov	r2, sp
 8026884:	f001 fb74 	bl	8027f70 <_fstat_r>
 8026888:	2800      	cmp	r0, #0
 802688a:	dbf2      	blt.n	8026872 <__swhatbuf_r+0x12>
 802688c:	9a01      	ldr	r2, [sp, #4]
 802688e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026892:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026896:	425a      	negs	r2, r3
 8026898:	415a      	adcs	r2, r3
 802689a:	602a      	str	r2, [r5, #0]
 802689c:	e7ee      	b.n	802687c <__swhatbuf_r+0x1c>
 802689e:	2340      	movs	r3, #64	; 0x40
 80268a0:	2000      	movs	r0, #0
 80268a2:	6023      	str	r3, [r4, #0]
 80268a4:	b016      	add	sp, #88	; 0x58
 80268a6:	bd70      	pop	{r4, r5, r6, pc}

080268a8 <__smakebuf_r>:
 80268a8:	898b      	ldrh	r3, [r1, #12]
 80268aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80268ac:	079d      	lsls	r5, r3, #30
 80268ae:	4606      	mov	r6, r0
 80268b0:	460c      	mov	r4, r1
 80268b2:	d507      	bpl.n	80268c4 <__smakebuf_r+0x1c>
 80268b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80268b8:	6023      	str	r3, [r4, #0]
 80268ba:	6123      	str	r3, [r4, #16]
 80268bc:	2301      	movs	r3, #1
 80268be:	6163      	str	r3, [r4, #20]
 80268c0:	b002      	add	sp, #8
 80268c2:	bd70      	pop	{r4, r5, r6, pc}
 80268c4:	ab01      	add	r3, sp, #4
 80268c6:	466a      	mov	r2, sp
 80268c8:	f7ff ffca 	bl	8026860 <__swhatbuf_r>
 80268cc:	9900      	ldr	r1, [sp, #0]
 80268ce:	4605      	mov	r5, r0
 80268d0:	4630      	mov	r0, r6
 80268d2:	f7fc f897 	bl	8022a04 <_malloc_r>
 80268d6:	b948      	cbnz	r0, 80268ec <__smakebuf_r+0x44>
 80268d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80268dc:	059a      	lsls	r2, r3, #22
 80268de:	d4ef      	bmi.n	80268c0 <__smakebuf_r+0x18>
 80268e0:	f023 0303 	bic.w	r3, r3, #3
 80268e4:	f043 0302 	orr.w	r3, r3, #2
 80268e8:	81a3      	strh	r3, [r4, #12]
 80268ea:	e7e3      	b.n	80268b4 <__smakebuf_r+0xc>
 80268ec:	4b0d      	ldr	r3, [pc, #52]	; (8026924 <__smakebuf_r+0x7c>)
 80268ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80268f0:	89a3      	ldrh	r3, [r4, #12]
 80268f2:	6020      	str	r0, [r4, #0]
 80268f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80268f8:	81a3      	strh	r3, [r4, #12]
 80268fa:	9b00      	ldr	r3, [sp, #0]
 80268fc:	6163      	str	r3, [r4, #20]
 80268fe:	9b01      	ldr	r3, [sp, #4]
 8026900:	6120      	str	r0, [r4, #16]
 8026902:	b15b      	cbz	r3, 802691c <__smakebuf_r+0x74>
 8026904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026908:	4630      	mov	r0, r6
 802690a:	f001 fb43 	bl	8027f94 <_isatty_r>
 802690e:	b128      	cbz	r0, 802691c <__smakebuf_r+0x74>
 8026910:	89a3      	ldrh	r3, [r4, #12]
 8026912:	f023 0303 	bic.w	r3, r3, #3
 8026916:	f043 0301 	orr.w	r3, r3, #1
 802691a:	81a3      	strh	r3, [r4, #12]
 802691c:	89a0      	ldrh	r0, [r4, #12]
 802691e:	4305      	orrs	r5, r0
 8026920:	81a5      	strh	r5, [r4, #12]
 8026922:	e7cd      	b.n	80268c0 <__smakebuf_r+0x18>
 8026924:	08025e69 	.word	0x08025e69

08026928 <__ascii_mbtowc>:
 8026928:	b082      	sub	sp, #8
 802692a:	b901      	cbnz	r1, 802692e <__ascii_mbtowc+0x6>
 802692c:	a901      	add	r1, sp, #4
 802692e:	b142      	cbz	r2, 8026942 <__ascii_mbtowc+0x1a>
 8026930:	b14b      	cbz	r3, 8026946 <__ascii_mbtowc+0x1e>
 8026932:	7813      	ldrb	r3, [r2, #0]
 8026934:	600b      	str	r3, [r1, #0]
 8026936:	7812      	ldrb	r2, [r2, #0]
 8026938:	1e10      	subs	r0, r2, #0
 802693a:	bf18      	it	ne
 802693c:	2001      	movne	r0, #1
 802693e:	b002      	add	sp, #8
 8026940:	4770      	bx	lr
 8026942:	4610      	mov	r0, r2
 8026944:	e7fb      	b.n	802693e <__ascii_mbtowc+0x16>
 8026946:	f06f 0001 	mvn.w	r0, #1
 802694a:	e7f8      	b.n	802693e <__ascii_mbtowc+0x16>

0802694c <__malloc_lock>:
 802694c:	4801      	ldr	r0, [pc, #4]	; (8026954 <__malloc_lock+0x8>)
 802694e:	f7ff bf71 	b.w	8026834 <__retarget_lock_acquire_recursive>
 8026952:	bf00      	nop
 8026954:	20001a1c 	.word	0x20001a1c

08026958 <__malloc_unlock>:
 8026958:	4801      	ldr	r0, [pc, #4]	; (8026960 <__malloc_unlock+0x8>)
 802695a:	f7ff bf6d 	b.w	8026838 <__retarget_lock_release_recursive>
 802695e:	bf00      	nop
 8026960:	20001a1c 	.word	0x20001a1c

08026964 <_Balloc>:
 8026964:	b570      	push	{r4, r5, r6, lr}
 8026966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026968:	4604      	mov	r4, r0
 802696a:	460d      	mov	r5, r1
 802696c:	b976      	cbnz	r6, 802698c <_Balloc+0x28>
 802696e:	2010      	movs	r0, #16
 8026970:	f7fb fd1c 	bl	80223ac <malloc>
 8026974:	4602      	mov	r2, r0
 8026976:	6260      	str	r0, [r4, #36]	; 0x24
 8026978:	b920      	cbnz	r0, 8026984 <_Balloc+0x20>
 802697a:	4b18      	ldr	r3, [pc, #96]	; (80269dc <_Balloc+0x78>)
 802697c:	4818      	ldr	r0, [pc, #96]	; (80269e0 <_Balloc+0x7c>)
 802697e:	2166      	movs	r1, #102	; 0x66
 8026980:	f7fe fabe 	bl	8024f00 <__assert_func>
 8026984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026988:	6006      	str	r6, [r0, #0]
 802698a:	60c6      	str	r6, [r0, #12]
 802698c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802698e:	68f3      	ldr	r3, [r6, #12]
 8026990:	b183      	cbz	r3, 80269b4 <_Balloc+0x50>
 8026992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026994:	68db      	ldr	r3, [r3, #12]
 8026996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802699a:	b9b8      	cbnz	r0, 80269cc <_Balloc+0x68>
 802699c:	2101      	movs	r1, #1
 802699e:	fa01 f605 	lsl.w	r6, r1, r5
 80269a2:	1d72      	adds	r2, r6, #5
 80269a4:	0092      	lsls	r2, r2, #2
 80269a6:	4620      	mov	r0, r4
 80269a8:	f7fb ffcc 	bl	8022944 <_calloc_r>
 80269ac:	b160      	cbz	r0, 80269c8 <_Balloc+0x64>
 80269ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80269b2:	e00e      	b.n	80269d2 <_Balloc+0x6e>
 80269b4:	2221      	movs	r2, #33	; 0x21
 80269b6:	2104      	movs	r1, #4
 80269b8:	4620      	mov	r0, r4
 80269ba:	f7fb ffc3 	bl	8022944 <_calloc_r>
 80269be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80269c0:	60f0      	str	r0, [r6, #12]
 80269c2:	68db      	ldr	r3, [r3, #12]
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	d1e4      	bne.n	8026992 <_Balloc+0x2e>
 80269c8:	2000      	movs	r0, #0
 80269ca:	bd70      	pop	{r4, r5, r6, pc}
 80269cc:	6802      	ldr	r2, [r0, #0]
 80269ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80269d2:	2300      	movs	r3, #0
 80269d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80269d8:	e7f7      	b.n	80269ca <_Balloc+0x66>
 80269da:	bf00      	nop
 80269dc:	080338ac 	.word	0x080338ac
 80269e0:	08033d14 	.word	0x08033d14

080269e4 <_Bfree>:
 80269e4:	b570      	push	{r4, r5, r6, lr}
 80269e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80269e8:	4605      	mov	r5, r0
 80269ea:	460c      	mov	r4, r1
 80269ec:	b976      	cbnz	r6, 8026a0c <_Bfree+0x28>
 80269ee:	2010      	movs	r0, #16
 80269f0:	f7fb fcdc 	bl	80223ac <malloc>
 80269f4:	4602      	mov	r2, r0
 80269f6:	6268      	str	r0, [r5, #36]	; 0x24
 80269f8:	b920      	cbnz	r0, 8026a04 <_Bfree+0x20>
 80269fa:	4b09      	ldr	r3, [pc, #36]	; (8026a20 <_Bfree+0x3c>)
 80269fc:	4809      	ldr	r0, [pc, #36]	; (8026a24 <_Bfree+0x40>)
 80269fe:	218a      	movs	r1, #138	; 0x8a
 8026a00:	f7fe fa7e 	bl	8024f00 <__assert_func>
 8026a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026a08:	6006      	str	r6, [r0, #0]
 8026a0a:	60c6      	str	r6, [r0, #12]
 8026a0c:	b13c      	cbz	r4, 8026a1e <_Bfree+0x3a>
 8026a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026a10:	6862      	ldr	r2, [r4, #4]
 8026a12:	68db      	ldr	r3, [r3, #12]
 8026a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026a18:	6021      	str	r1, [r4, #0]
 8026a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026a1e:	bd70      	pop	{r4, r5, r6, pc}
 8026a20:	080338ac 	.word	0x080338ac
 8026a24:	08033d14 	.word	0x08033d14

08026a28 <__multadd>:
 8026a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a2c:	690e      	ldr	r6, [r1, #16]
 8026a2e:	4607      	mov	r7, r0
 8026a30:	4698      	mov	r8, r3
 8026a32:	460c      	mov	r4, r1
 8026a34:	f101 0014 	add.w	r0, r1, #20
 8026a38:	2300      	movs	r3, #0
 8026a3a:	6805      	ldr	r5, [r0, #0]
 8026a3c:	b2a9      	uxth	r1, r5
 8026a3e:	fb02 8101 	mla	r1, r2, r1, r8
 8026a42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8026a46:	0c2d      	lsrs	r5, r5, #16
 8026a48:	fb02 c505 	mla	r5, r2, r5, ip
 8026a4c:	b289      	uxth	r1, r1
 8026a4e:	3301      	adds	r3, #1
 8026a50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8026a54:	429e      	cmp	r6, r3
 8026a56:	f840 1b04 	str.w	r1, [r0], #4
 8026a5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8026a5e:	dcec      	bgt.n	8026a3a <__multadd+0x12>
 8026a60:	f1b8 0f00 	cmp.w	r8, #0
 8026a64:	d022      	beq.n	8026aac <__multadd+0x84>
 8026a66:	68a3      	ldr	r3, [r4, #8]
 8026a68:	42b3      	cmp	r3, r6
 8026a6a:	dc19      	bgt.n	8026aa0 <__multadd+0x78>
 8026a6c:	6861      	ldr	r1, [r4, #4]
 8026a6e:	4638      	mov	r0, r7
 8026a70:	3101      	adds	r1, #1
 8026a72:	f7ff ff77 	bl	8026964 <_Balloc>
 8026a76:	4605      	mov	r5, r0
 8026a78:	b928      	cbnz	r0, 8026a86 <__multadd+0x5e>
 8026a7a:	4602      	mov	r2, r0
 8026a7c:	4b0d      	ldr	r3, [pc, #52]	; (8026ab4 <__multadd+0x8c>)
 8026a7e:	480e      	ldr	r0, [pc, #56]	; (8026ab8 <__multadd+0x90>)
 8026a80:	21b5      	movs	r1, #181	; 0xb5
 8026a82:	f7fe fa3d 	bl	8024f00 <__assert_func>
 8026a86:	6922      	ldr	r2, [r4, #16]
 8026a88:	3202      	adds	r2, #2
 8026a8a:	f104 010c 	add.w	r1, r4, #12
 8026a8e:	0092      	lsls	r2, r2, #2
 8026a90:	300c      	adds	r0, #12
 8026a92:	f7fb fca9 	bl	80223e8 <memcpy>
 8026a96:	4621      	mov	r1, r4
 8026a98:	4638      	mov	r0, r7
 8026a9a:	f7ff ffa3 	bl	80269e4 <_Bfree>
 8026a9e:	462c      	mov	r4, r5
 8026aa0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8026aa4:	3601      	adds	r6, #1
 8026aa6:	f8c3 8014 	str.w	r8, [r3, #20]
 8026aaa:	6126      	str	r6, [r4, #16]
 8026aac:	4620      	mov	r0, r4
 8026aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026ab2:	bf00      	nop
 8026ab4:	08033bc5 	.word	0x08033bc5
 8026ab8:	08033d14 	.word	0x08033d14

08026abc <__s2b>:
 8026abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026ac0:	460c      	mov	r4, r1
 8026ac2:	4615      	mov	r5, r2
 8026ac4:	461f      	mov	r7, r3
 8026ac6:	2209      	movs	r2, #9
 8026ac8:	3308      	adds	r3, #8
 8026aca:	4606      	mov	r6, r0
 8026acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8026ad0:	2100      	movs	r1, #0
 8026ad2:	2201      	movs	r2, #1
 8026ad4:	429a      	cmp	r2, r3
 8026ad6:	db09      	blt.n	8026aec <__s2b+0x30>
 8026ad8:	4630      	mov	r0, r6
 8026ada:	f7ff ff43 	bl	8026964 <_Balloc>
 8026ade:	b940      	cbnz	r0, 8026af2 <__s2b+0x36>
 8026ae0:	4602      	mov	r2, r0
 8026ae2:	4b19      	ldr	r3, [pc, #100]	; (8026b48 <__s2b+0x8c>)
 8026ae4:	4819      	ldr	r0, [pc, #100]	; (8026b4c <__s2b+0x90>)
 8026ae6:	21ce      	movs	r1, #206	; 0xce
 8026ae8:	f7fe fa0a 	bl	8024f00 <__assert_func>
 8026aec:	0052      	lsls	r2, r2, #1
 8026aee:	3101      	adds	r1, #1
 8026af0:	e7f0      	b.n	8026ad4 <__s2b+0x18>
 8026af2:	9b08      	ldr	r3, [sp, #32]
 8026af4:	6143      	str	r3, [r0, #20]
 8026af6:	2d09      	cmp	r5, #9
 8026af8:	f04f 0301 	mov.w	r3, #1
 8026afc:	6103      	str	r3, [r0, #16]
 8026afe:	dd16      	ble.n	8026b2e <__s2b+0x72>
 8026b00:	f104 0909 	add.w	r9, r4, #9
 8026b04:	46c8      	mov	r8, r9
 8026b06:	442c      	add	r4, r5
 8026b08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8026b0c:	4601      	mov	r1, r0
 8026b0e:	3b30      	subs	r3, #48	; 0x30
 8026b10:	220a      	movs	r2, #10
 8026b12:	4630      	mov	r0, r6
 8026b14:	f7ff ff88 	bl	8026a28 <__multadd>
 8026b18:	45a0      	cmp	r8, r4
 8026b1a:	d1f5      	bne.n	8026b08 <__s2b+0x4c>
 8026b1c:	f1a5 0408 	sub.w	r4, r5, #8
 8026b20:	444c      	add	r4, r9
 8026b22:	1b2d      	subs	r5, r5, r4
 8026b24:	1963      	adds	r3, r4, r5
 8026b26:	42bb      	cmp	r3, r7
 8026b28:	db04      	blt.n	8026b34 <__s2b+0x78>
 8026b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026b2e:	340a      	adds	r4, #10
 8026b30:	2509      	movs	r5, #9
 8026b32:	e7f6      	b.n	8026b22 <__s2b+0x66>
 8026b34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8026b38:	4601      	mov	r1, r0
 8026b3a:	3b30      	subs	r3, #48	; 0x30
 8026b3c:	220a      	movs	r2, #10
 8026b3e:	4630      	mov	r0, r6
 8026b40:	f7ff ff72 	bl	8026a28 <__multadd>
 8026b44:	e7ee      	b.n	8026b24 <__s2b+0x68>
 8026b46:	bf00      	nop
 8026b48:	08033bc5 	.word	0x08033bc5
 8026b4c:	08033d14 	.word	0x08033d14

08026b50 <__hi0bits>:
 8026b50:	0c03      	lsrs	r3, r0, #16
 8026b52:	041b      	lsls	r3, r3, #16
 8026b54:	b9d3      	cbnz	r3, 8026b8c <__hi0bits+0x3c>
 8026b56:	0400      	lsls	r0, r0, #16
 8026b58:	2310      	movs	r3, #16
 8026b5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8026b5e:	bf04      	itt	eq
 8026b60:	0200      	lsleq	r0, r0, #8
 8026b62:	3308      	addeq	r3, #8
 8026b64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8026b68:	bf04      	itt	eq
 8026b6a:	0100      	lsleq	r0, r0, #4
 8026b6c:	3304      	addeq	r3, #4
 8026b6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8026b72:	bf04      	itt	eq
 8026b74:	0080      	lsleq	r0, r0, #2
 8026b76:	3302      	addeq	r3, #2
 8026b78:	2800      	cmp	r0, #0
 8026b7a:	db05      	blt.n	8026b88 <__hi0bits+0x38>
 8026b7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8026b80:	f103 0301 	add.w	r3, r3, #1
 8026b84:	bf08      	it	eq
 8026b86:	2320      	moveq	r3, #32
 8026b88:	4618      	mov	r0, r3
 8026b8a:	4770      	bx	lr
 8026b8c:	2300      	movs	r3, #0
 8026b8e:	e7e4      	b.n	8026b5a <__hi0bits+0xa>

08026b90 <__lo0bits>:
 8026b90:	6803      	ldr	r3, [r0, #0]
 8026b92:	f013 0207 	ands.w	r2, r3, #7
 8026b96:	4601      	mov	r1, r0
 8026b98:	d00b      	beq.n	8026bb2 <__lo0bits+0x22>
 8026b9a:	07da      	lsls	r2, r3, #31
 8026b9c:	d424      	bmi.n	8026be8 <__lo0bits+0x58>
 8026b9e:	0798      	lsls	r0, r3, #30
 8026ba0:	bf49      	itett	mi
 8026ba2:	085b      	lsrmi	r3, r3, #1
 8026ba4:	089b      	lsrpl	r3, r3, #2
 8026ba6:	2001      	movmi	r0, #1
 8026ba8:	600b      	strmi	r3, [r1, #0]
 8026baa:	bf5c      	itt	pl
 8026bac:	600b      	strpl	r3, [r1, #0]
 8026bae:	2002      	movpl	r0, #2
 8026bb0:	4770      	bx	lr
 8026bb2:	b298      	uxth	r0, r3
 8026bb4:	b9b0      	cbnz	r0, 8026be4 <__lo0bits+0x54>
 8026bb6:	0c1b      	lsrs	r3, r3, #16
 8026bb8:	2010      	movs	r0, #16
 8026bba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8026bbe:	bf04      	itt	eq
 8026bc0:	0a1b      	lsreq	r3, r3, #8
 8026bc2:	3008      	addeq	r0, #8
 8026bc4:	071a      	lsls	r2, r3, #28
 8026bc6:	bf04      	itt	eq
 8026bc8:	091b      	lsreq	r3, r3, #4
 8026bca:	3004      	addeq	r0, #4
 8026bcc:	079a      	lsls	r2, r3, #30
 8026bce:	bf04      	itt	eq
 8026bd0:	089b      	lsreq	r3, r3, #2
 8026bd2:	3002      	addeq	r0, #2
 8026bd4:	07da      	lsls	r2, r3, #31
 8026bd6:	d403      	bmi.n	8026be0 <__lo0bits+0x50>
 8026bd8:	085b      	lsrs	r3, r3, #1
 8026bda:	f100 0001 	add.w	r0, r0, #1
 8026bde:	d005      	beq.n	8026bec <__lo0bits+0x5c>
 8026be0:	600b      	str	r3, [r1, #0]
 8026be2:	4770      	bx	lr
 8026be4:	4610      	mov	r0, r2
 8026be6:	e7e8      	b.n	8026bba <__lo0bits+0x2a>
 8026be8:	2000      	movs	r0, #0
 8026bea:	4770      	bx	lr
 8026bec:	2020      	movs	r0, #32
 8026bee:	4770      	bx	lr

08026bf0 <__i2b>:
 8026bf0:	b510      	push	{r4, lr}
 8026bf2:	460c      	mov	r4, r1
 8026bf4:	2101      	movs	r1, #1
 8026bf6:	f7ff feb5 	bl	8026964 <_Balloc>
 8026bfa:	4602      	mov	r2, r0
 8026bfc:	b928      	cbnz	r0, 8026c0a <__i2b+0x1a>
 8026bfe:	4b05      	ldr	r3, [pc, #20]	; (8026c14 <__i2b+0x24>)
 8026c00:	4805      	ldr	r0, [pc, #20]	; (8026c18 <__i2b+0x28>)
 8026c02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8026c06:	f7fe f97b 	bl	8024f00 <__assert_func>
 8026c0a:	2301      	movs	r3, #1
 8026c0c:	6144      	str	r4, [r0, #20]
 8026c0e:	6103      	str	r3, [r0, #16]
 8026c10:	bd10      	pop	{r4, pc}
 8026c12:	bf00      	nop
 8026c14:	08033bc5 	.word	0x08033bc5
 8026c18:	08033d14 	.word	0x08033d14

08026c1c <__multiply>:
 8026c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c20:	4614      	mov	r4, r2
 8026c22:	690a      	ldr	r2, [r1, #16]
 8026c24:	6923      	ldr	r3, [r4, #16]
 8026c26:	429a      	cmp	r2, r3
 8026c28:	bfb8      	it	lt
 8026c2a:	460b      	movlt	r3, r1
 8026c2c:	460d      	mov	r5, r1
 8026c2e:	bfbc      	itt	lt
 8026c30:	4625      	movlt	r5, r4
 8026c32:	461c      	movlt	r4, r3
 8026c34:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8026c38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8026c3c:	68ab      	ldr	r3, [r5, #8]
 8026c3e:	6869      	ldr	r1, [r5, #4]
 8026c40:	eb0a 0709 	add.w	r7, sl, r9
 8026c44:	42bb      	cmp	r3, r7
 8026c46:	b085      	sub	sp, #20
 8026c48:	bfb8      	it	lt
 8026c4a:	3101      	addlt	r1, #1
 8026c4c:	f7ff fe8a 	bl	8026964 <_Balloc>
 8026c50:	b930      	cbnz	r0, 8026c60 <__multiply+0x44>
 8026c52:	4602      	mov	r2, r0
 8026c54:	4b42      	ldr	r3, [pc, #264]	; (8026d60 <__multiply+0x144>)
 8026c56:	4843      	ldr	r0, [pc, #268]	; (8026d64 <__multiply+0x148>)
 8026c58:	f240 115d 	movw	r1, #349	; 0x15d
 8026c5c:	f7fe f950 	bl	8024f00 <__assert_func>
 8026c60:	f100 0614 	add.w	r6, r0, #20
 8026c64:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8026c68:	4633      	mov	r3, r6
 8026c6a:	2200      	movs	r2, #0
 8026c6c:	4543      	cmp	r3, r8
 8026c6e:	d31e      	bcc.n	8026cae <__multiply+0x92>
 8026c70:	f105 0c14 	add.w	ip, r5, #20
 8026c74:	f104 0314 	add.w	r3, r4, #20
 8026c78:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8026c7c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8026c80:	9202      	str	r2, [sp, #8]
 8026c82:	ebac 0205 	sub.w	r2, ip, r5
 8026c86:	3a15      	subs	r2, #21
 8026c88:	f022 0203 	bic.w	r2, r2, #3
 8026c8c:	3204      	adds	r2, #4
 8026c8e:	f105 0115 	add.w	r1, r5, #21
 8026c92:	458c      	cmp	ip, r1
 8026c94:	bf38      	it	cc
 8026c96:	2204      	movcc	r2, #4
 8026c98:	9201      	str	r2, [sp, #4]
 8026c9a:	9a02      	ldr	r2, [sp, #8]
 8026c9c:	9303      	str	r3, [sp, #12]
 8026c9e:	429a      	cmp	r2, r3
 8026ca0:	d808      	bhi.n	8026cb4 <__multiply+0x98>
 8026ca2:	2f00      	cmp	r7, #0
 8026ca4:	dc55      	bgt.n	8026d52 <__multiply+0x136>
 8026ca6:	6107      	str	r7, [r0, #16]
 8026ca8:	b005      	add	sp, #20
 8026caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026cae:	f843 2b04 	str.w	r2, [r3], #4
 8026cb2:	e7db      	b.n	8026c6c <__multiply+0x50>
 8026cb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8026cb8:	f1ba 0f00 	cmp.w	sl, #0
 8026cbc:	d020      	beq.n	8026d00 <__multiply+0xe4>
 8026cbe:	f105 0e14 	add.w	lr, r5, #20
 8026cc2:	46b1      	mov	r9, r6
 8026cc4:	2200      	movs	r2, #0
 8026cc6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8026cca:	f8d9 b000 	ldr.w	fp, [r9]
 8026cce:	b2a1      	uxth	r1, r4
 8026cd0:	fa1f fb8b 	uxth.w	fp, fp
 8026cd4:	fb0a b101 	mla	r1, sl, r1, fp
 8026cd8:	4411      	add	r1, r2
 8026cda:	f8d9 2000 	ldr.w	r2, [r9]
 8026cde:	0c24      	lsrs	r4, r4, #16
 8026ce0:	0c12      	lsrs	r2, r2, #16
 8026ce2:	fb0a 2404 	mla	r4, sl, r4, r2
 8026ce6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8026cea:	b289      	uxth	r1, r1
 8026cec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8026cf0:	45f4      	cmp	ip, lr
 8026cf2:	f849 1b04 	str.w	r1, [r9], #4
 8026cf6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8026cfa:	d8e4      	bhi.n	8026cc6 <__multiply+0xaa>
 8026cfc:	9901      	ldr	r1, [sp, #4]
 8026cfe:	5072      	str	r2, [r6, r1]
 8026d00:	9a03      	ldr	r2, [sp, #12]
 8026d02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8026d06:	3304      	adds	r3, #4
 8026d08:	f1b9 0f00 	cmp.w	r9, #0
 8026d0c:	d01f      	beq.n	8026d4e <__multiply+0x132>
 8026d0e:	6834      	ldr	r4, [r6, #0]
 8026d10:	f105 0114 	add.w	r1, r5, #20
 8026d14:	46b6      	mov	lr, r6
 8026d16:	f04f 0a00 	mov.w	sl, #0
 8026d1a:	880a      	ldrh	r2, [r1, #0]
 8026d1c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8026d20:	fb09 b202 	mla	r2, r9, r2, fp
 8026d24:	4492      	add	sl, r2
 8026d26:	b2a4      	uxth	r4, r4
 8026d28:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8026d2c:	f84e 4b04 	str.w	r4, [lr], #4
 8026d30:	f851 4b04 	ldr.w	r4, [r1], #4
 8026d34:	f8be 2000 	ldrh.w	r2, [lr]
 8026d38:	0c24      	lsrs	r4, r4, #16
 8026d3a:	fb09 2404 	mla	r4, r9, r4, r2
 8026d3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8026d42:	458c      	cmp	ip, r1
 8026d44:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8026d48:	d8e7      	bhi.n	8026d1a <__multiply+0xfe>
 8026d4a:	9a01      	ldr	r2, [sp, #4]
 8026d4c:	50b4      	str	r4, [r6, r2]
 8026d4e:	3604      	adds	r6, #4
 8026d50:	e7a3      	b.n	8026c9a <__multiply+0x7e>
 8026d52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8026d56:	2b00      	cmp	r3, #0
 8026d58:	d1a5      	bne.n	8026ca6 <__multiply+0x8a>
 8026d5a:	3f01      	subs	r7, #1
 8026d5c:	e7a1      	b.n	8026ca2 <__multiply+0x86>
 8026d5e:	bf00      	nop
 8026d60:	08033bc5 	.word	0x08033bc5
 8026d64:	08033d14 	.word	0x08033d14

08026d68 <__pow5mult>:
 8026d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026d6c:	4615      	mov	r5, r2
 8026d6e:	f012 0203 	ands.w	r2, r2, #3
 8026d72:	4606      	mov	r6, r0
 8026d74:	460f      	mov	r7, r1
 8026d76:	d007      	beq.n	8026d88 <__pow5mult+0x20>
 8026d78:	4c25      	ldr	r4, [pc, #148]	; (8026e10 <__pow5mult+0xa8>)
 8026d7a:	3a01      	subs	r2, #1
 8026d7c:	2300      	movs	r3, #0
 8026d7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026d82:	f7ff fe51 	bl	8026a28 <__multadd>
 8026d86:	4607      	mov	r7, r0
 8026d88:	10ad      	asrs	r5, r5, #2
 8026d8a:	d03d      	beq.n	8026e08 <__pow5mult+0xa0>
 8026d8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8026d8e:	b97c      	cbnz	r4, 8026db0 <__pow5mult+0x48>
 8026d90:	2010      	movs	r0, #16
 8026d92:	f7fb fb0b 	bl	80223ac <malloc>
 8026d96:	4602      	mov	r2, r0
 8026d98:	6270      	str	r0, [r6, #36]	; 0x24
 8026d9a:	b928      	cbnz	r0, 8026da8 <__pow5mult+0x40>
 8026d9c:	4b1d      	ldr	r3, [pc, #116]	; (8026e14 <__pow5mult+0xac>)
 8026d9e:	481e      	ldr	r0, [pc, #120]	; (8026e18 <__pow5mult+0xb0>)
 8026da0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8026da4:	f7fe f8ac 	bl	8024f00 <__assert_func>
 8026da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026dac:	6004      	str	r4, [r0, #0]
 8026dae:	60c4      	str	r4, [r0, #12]
 8026db0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026db8:	b94c      	cbnz	r4, 8026dce <__pow5mult+0x66>
 8026dba:	f240 2171 	movw	r1, #625	; 0x271
 8026dbe:	4630      	mov	r0, r6
 8026dc0:	f7ff ff16 	bl	8026bf0 <__i2b>
 8026dc4:	2300      	movs	r3, #0
 8026dc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8026dca:	4604      	mov	r4, r0
 8026dcc:	6003      	str	r3, [r0, #0]
 8026dce:	f04f 0900 	mov.w	r9, #0
 8026dd2:	07eb      	lsls	r3, r5, #31
 8026dd4:	d50a      	bpl.n	8026dec <__pow5mult+0x84>
 8026dd6:	4639      	mov	r1, r7
 8026dd8:	4622      	mov	r2, r4
 8026dda:	4630      	mov	r0, r6
 8026ddc:	f7ff ff1e 	bl	8026c1c <__multiply>
 8026de0:	4639      	mov	r1, r7
 8026de2:	4680      	mov	r8, r0
 8026de4:	4630      	mov	r0, r6
 8026de6:	f7ff fdfd 	bl	80269e4 <_Bfree>
 8026dea:	4647      	mov	r7, r8
 8026dec:	106d      	asrs	r5, r5, #1
 8026dee:	d00b      	beq.n	8026e08 <__pow5mult+0xa0>
 8026df0:	6820      	ldr	r0, [r4, #0]
 8026df2:	b938      	cbnz	r0, 8026e04 <__pow5mult+0x9c>
 8026df4:	4622      	mov	r2, r4
 8026df6:	4621      	mov	r1, r4
 8026df8:	4630      	mov	r0, r6
 8026dfa:	f7ff ff0f 	bl	8026c1c <__multiply>
 8026dfe:	6020      	str	r0, [r4, #0]
 8026e00:	f8c0 9000 	str.w	r9, [r0]
 8026e04:	4604      	mov	r4, r0
 8026e06:	e7e4      	b.n	8026dd2 <__pow5mult+0x6a>
 8026e08:	4638      	mov	r0, r7
 8026e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026e0e:	bf00      	nop
 8026e10:	08033e68 	.word	0x08033e68
 8026e14:	080338ac 	.word	0x080338ac
 8026e18:	08033d14 	.word	0x08033d14

08026e1c <__lshift>:
 8026e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e20:	460c      	mov	r4, r1
 8026e22:	6849      	ldr	r1, [r1, #4]
 8026e24:	6923      	ldr	r3, [r4, #16]
 8026e26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8026e2a:	68a3      	ldr	r3, [r4, #8]
 8026e2c:	4607      	mov	r7, r0
 8026e2e:	4691      	mov	r9, r2
 8026e30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026e34:	f108 0601 	add.w	r6, r8, #1
 8026e38:	42b3      	cmp	r3, r6
 8026e3a:	db0b      	blt.n	8026e54 <__lshift+0x38>
 8026e3c:	4638      	mov	r0, r7
 8026e3e:	f7ff fd91 	bl	8026964 <_Balloc>
 8026e42:	4605      	mov	r5, r0
 8026e44:	b948      	cbnz	r0, 8026e5a <__lshift+0x3e>
 8026e46:	4602      	mov	r2, r0
 8026e48:	4b28      	ldr	r3, [pc, #160]	; (8026eec <__lshift+0xd0>)
 8026e4a:	4829      	ldr	r0, [pc, #164]	; (8026ef0 <__lshift+0xd4>)
 8026e4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8026e50:	f7fe f856 	bl	8024f00 <__assert_func>
 8026e54:	3101      	adds	r1, #1
 8026e56:	005b      	lsls	r3, r3, #1
 8026e58:	e7ee      	b.n	8026e38 <__lshift+0x1c>
 8026e5a:	2300      	movs	r3, #0
 8026e5c:	f100 0114 	add.w	r1, r0, #20
 8026e60:	f100 0210 	add.w	r2, r0, #16
 8026e64:	4618      	mov	r0, r3
 8026e66:	4553      	cmp	r3, sl
 8026e68:	db33      	blt.n	8026ed2 <__lshift+0xb6>
 8026e6a:	6920      	ldr	r0, [r4, #16]
 8026e6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026e70:	f104 0314 	add.w	r3, r4, #20
 8026e74:	f019 091f 	ands.w	r9, r9, #31
 8026e78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026e7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026e80:	d02b      	beq.n	8026eda <__lshift+0xbe>
 8026e82:	f1c9 0e20 	rsb	lr, r9, #32
 8026e86:	468a      	mov	sl, r1
 8026e88:	2200      	movs	r2, #0
 8026e8a:	6818      	ldr	r0, [r3, #0]
 8026e8c:	fa00 f009 	lsl.w	r0, r0, r9
 8026e90:	4302      	orrs	r2, r0
 8026e92:	f84a 2b04 	str.w	r2, [sl], #4
 8026e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8026e9a:	459c      	cmp	ip, r3
 8026e9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8026ea0:	d8f3      	bhi.n	8026e8a <__lshift+0x6e>
 8026ea2:	ebac 0304 	sub.w	r3, ip, r4
 8026ea6:	3b15      	subs	r3, #21
 8026ea8:	f023 0303 	bic.w	r3, r3, #3
 8026eac:	3304      	adds	r3, #4
 8026eae:	f104 0015 	add.w	r0, r4, #21
 8026eb2:	4584      	cmp	ip, r0
 8026eb4:	bf38      	it	cc
 8026eb6:	2304      	movcc	r3, #4
 8026eb8:	50ca      	str	r2, [r1, r3]
 8026eba:	b10a      	cbz	r2, 8026ec0 <__lshift+0xa4>
 8026ebc:	f108 0602 	add.w	r6, r8, #2
 8026ec0:	3e01      	subs	r6, #1
 8026ec2:	4638      	mov	r0, r7
 8026ec4:	612e      	str	r6, [r5, #16]
 8026ec6:	4621      	mov	r1, r4
 8026ec8:	f7ff fd8c 	bl	80269e4 <_Bfree>
 8026ecc:	4628      	mov	r0, r5
 8026ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8026ed6:	3301      	adds	r3, #1
 8026ed8:	e7c5      	b.n	8026e66 <__lshift+0x4a>
 8026eda:	3904      	subs	r1, #4
 8026edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8026ee0:	f841 2f04 	str.w	r2, [r1, #4]!
 8026ee4:	459c      	cmp	ip, r3
 8026ee6:	d8f9      	bhi.n	8026edc <__lshift+0xc0>
 8026ee8:	e7ea      	b.n	8026ec0 <__lshift+0xa4>
 8026eea:	bf00      	nop
 8026eec:	08033bc5 	.word	0x08033bc5
 8026ef0:	08033d14 	.word	0x08033d14

08026ef4 <__mcmp>:
 8026ef4:	b530      	push	{r4, r5, lr}
 8026ef6:	6902      	ldr	r2, [r0, #16]
 8026ef8:	690c      	ldr	r4, [r1, #16]
 8026efa:	1b12      	subs	r2, r2, r4
 8026efc:	d10e      	bne.n	8026f1c <__mcmp+0x28>
 8026efe:	f100 0314 	add.w	r3, r0, #20
 8026f02:	3114      	adds	r1, #20
 8026f04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026f08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026f0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026f10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026f14:	42a5      	cmp	r5, r4
 8026f16:	d003      	beq.n	8026f20 <__mcmp+0x2c>
 8026f18:	d305      	bcc.n	8026f26 <__mcmp+0x32>
 8026f1a:	2201      	movs	r2, #1
 8026f1c:	4610      	mov	r0, r2
 8026f1e:	bd30      	pop	{r4, r5, pc}
 8026f20:	4283      	cmp	r3, r0
 8026f22:	d3f3      	bcc.n	8026f0c <__mcmp+0x18>
 8026f24:	e7fa      	b.n	8026f1c <__mcmp+0x28>
 8026f26:	f04f 32ff 	mov.w	r2, #4294967295
 8026f2a:	e7f7      	b.n	8026f1c <__mcmp+0x28>

08026f2c <__mdiff>:
 8026f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f30:	460c      	mov	r4, r1
 8026f32:	4606      	mov	r6, r0
 8026f34:	4611      	mov	r1, r2
 8026f36:	4620      	mov	r0, r4
 8026f38:	4617      	mov	r7, r2
 8026f3a:	f7ff ffdb 	bl	8026ef4 <__mcmp>
 8026f3e:	1e05      	subs	r5, r0, #0
 8026f40:	d110      	bne.n	8026f64 <__mdiff+0x38>
 8026f42:	4629      	mov	r1, r5
 8026f44:	4630      	mov	r0, r6
 8026f46:	f7ff fd0d 	bl	8026964 <_Balloc>
 8026f4a:	b930      	cbnz	r0, 8026f5a <__mdiff+0x2e>
 8026f4c:	4b39      	ldr	r3, [pc, #228]	; (8027034 <__mdiff+0x108>)
 8026f4e:	4602      	mov	r2, r0
 8026f50:	f240 2132 	movw	r1, #562	; 0x232
 8026f54:	4838      	ldr	r0, [pc, #224]	; (8027038 <__mdiff+0x10c>)
 8026f56:	f7fd ffd3 	bl	8024f00 <__assert_func>
 8026f5a:	2301      	movs	r3, #1
 8026f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f64:	bfa4      	itt	ge
 8026f66:	463b      	movge	r3, r7
 8026f68:	4627      	movge	r7, r4
 8026f6a:	4630      	mov	r0, r6
 8026f6c:	6879      	ldr	r1, [r7, #4]
 8026f6e:	bfa6      	itte	ge
 8026f70:	461c      	movge	r4, r3
 8026f72:	2500      	movge	r5, #0
 8026f74:	2501      	movlt	r5, #1
 8026f76:	f7ff fcf5 	bl	8026964 <_Balloc>
 8026f7a:	b920      	cbnz	r0, 8026f86 <__mdiff+0x5a>
 8026f7c:	4b2d      	ldr	r3, [pc, #180]	; (8027034 <__mdiff+0x108>)
 8026f7e:	4602      	mov	r2, r0
 8026f80:	f44f 7110 	mov.w	r1, #576	; 0x240
 8026f84:	e7e6      	b.n	8026f54 <__mdiff+0x28>
 8026f86:	693e      	ldr	r6, [r7, #16]
 8026f88:	60c5      	str	r5, [r0, #12]
 8026f8a:	6925      	ldr	r5, [r4, #16]
 8026f8c:	f107 0114 	add.w	r1, r7, #20
 8026f90:	f104 0914 	add.w	r9, r4, #20
 8026f94:	f100 0e14 	add.w	lr, r0, #20
 8026f98:	f107 0210 	add.w	r2, r7, #16
 8026f9c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8026fa0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8026fa4:	46f2      	mov	sl, lr
 8026fa6:	2700      	movs	r7, #0
 8026fa8:	f859 3b04 	ldr.w	r3, [r9], #4
 8026fac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8026fb0:	fa1f f883 	uxth.w	r8, r3
 8026fb4:	fa17 f78b 	uxtah	r7, r7, fp
 8026fb8:	0c1b      	lsrs	r3, r3, #16
 8026fba:	eba7 0808 	sub.w	r8, r7, r8
 8026fbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8026fc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026fc6:	fa1f f888 	uxth.w	r8, r8
 8026fca:	141f      	asrs	r7, r3, #16
 8026fcc:	454d      	cmp	r5, r9
 8026fce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8026fd2:	f84a 3b04 	str.w	r3, [sl], #4
 8026fd6:	d8e7      	bhi.n	8026fa8 <__mdiff+0x7c>
 8026fd8:	1b2b      	subs	r3, r5, r4
 8026fda:	3b15      	subs	r3, #21
 8026fdc:	f023 0303 	bic.w	r3, r3, #3
 8026fe0:	3304      	adds	r3, #4
 8026fe2:	3415      	adds	r4, #21
 8026fe4:	42a5      	cmp	r5, r4
 8026fe6:	bf38      	it	cc
 8026fe8:	2304      	movcc	r3, #4
 8026fea:	4419      	add	r1, r3
 8026fec:	4473      	add	r3, lr
 8026fee:	469e      	mov	lr, r3
 8026ff0:	460d      	mov	r5, r1
 8026ff2:	4565      	cmp	r5, ip
 8026ff4:	d30e      	bcc.n	8027014 <__mdiff+0xe8>
 8026ff6:	f10c 0203 	add.w	r2, ip, #3
 8026ffa:	1a52      	subs	r2, r2, r1
 8026ffc:	f022 0203 	bic.w	r2, r2, #3
 8027000:	3903      	subs	r1, #3
 8027002:	458c      	cmp	ip, r1
 8027004:	bf38      	it	cc
 8027006:	2200      	movcc	r2, #0
 8027008:	441a      	add	r2, r3
 802700a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802700e:	b17b      	cbz	r3, 8027030 <__mdiff+0x104>
 8027010:	6106      	str	r6, [r0, #16]
 8027012:	e7a5      	b.n	8026f60 <__mdiff+0x34>
 8027014:	f855 8b04 	ldr.w	r8, [r5], #4
 8027018:	fa17 f488 	uxtah	r4, r7, r8
 802701c:	1422      	asrs	r2, r4, #16
 802701e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8027022:	b2a4      	uxth	r4, r4
 8027024:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8027028:	f84e 4b04 	str.w	r4, [lr], #4
 802702c:	1417      	asrs	r7, r2, #16
 802702e:	e7e0      	b.n	8026ff2 <__mdiff+0xc6>
 8027030:	3e01      	subs	r6, #1
 8027032:	e7ea      	b.n	802700a <__mdiff+0xde>
 8027034:	08033bc5 	.word	0x08033bc5
 8027038:	08033d14 	.word	0x08033d14

0802703c <__ulp>:
 802703c:	b082      	sub	sp, #8
 802703e:	ed8d 0b00 	vstr	d0, [sp]
 8027042:	9b01      	ldr	r3, [sp, #4]
 8027044:	4912      	ldr	r1, [pc, #72]	; (8027090 <__ulp+0x54>)
 8027046:	4019      	ands	r1, r3
 8027048:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 802704c:	2900      	cmp	r1, #0
 802704e:	dd05      	ble.n	802705c <__ulp+0x20>
 8027050:	2200      	movs	r2, #0
 8027052:	460b      	mov	r3, r1
 8027054:	ec43 2b10 	vmov	d0, r2, r3
 8027058:	b002      	add	sp, #8
 802705a:	4770      	bx	lr
 802705c:	4249      	negs	r1, r1
 802705e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8027062:	ea4f 5021 	mov.w	r0, r1, asr #20
 8027066:	f04f 0200 	mov.w	r2, #0
 802706a:	f04f 0300 	mov.w	r3, #0
 802706e:	da04      	bge.n	802707a <__ulp+0x3e>
 8027070:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8027074:	fa41 f300 	asr.w	r3, r1, r0
 8027078:	e7ec      	b.n	8027054 <__ulp+0x18>
 802707a:	f1a0 0114 	sub.w	r1, r0, #20
 802707e:	291e      	cmp	r1, #30
 8027080:	bfda      	itte	le
 8027082:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8027086:	fa20 f101 	lsrle.w	r1, r0, r1
 802708a:	2101      	movgt	r1, #1
 802708c:	460a      	mov	r2, r1
 802708e:	e7e1      	b.n	8027054 <__ulp+0x18>
 8027090:	7ff00000 	.word	0x7ff00000

08027094 <__b2d>:
 8027094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027096:	6905      	ldr	r5, [r0, #16]
 8027098:	f100 0714 	add.w	r7, r0, #20
 802709c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80270a0:	1f2e      	subs	r6, r5, #4
 80270a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80270a6:	4620      	mov	r0, r4
 80270a8:	f7ff fd52 	bl	8026b50 <__hi0bits>
 80270ac:	f1c0 0320 	rsb	r3, r0, #32
 80270b0:	280a      	cmp	r0, #10
 80270b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8027130 <__b2d+0x9c>
 80270b6:	600b      	str	r3, [r1, #0]
 80270b8:	dc14      	bgt.n	80270e4 <__b2d+0x50>
 80270ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80270be:	fa24 f10e 	lsr.w	r1, r4, lr
 80270c2:	42b7      	cmp	r7, r6
 80270c4:	ea41 030c 	orr.w	r3, r1, ip
 80270c8:	bf34      	ite	cc
 80270ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80270ce:	2100      	movcs	r1, #0
 80270d0:	3015      	adds	r0, #21
 80270d2:	fa04 f000 	lsl.w	r0, r4, r0
 80270d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80270da:	ea40 0201 	orr.w	r2, r0, r1
 80270de:	ec43 2b10 	vmov	d0, r2, r3
 80270e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80270e4:	42b7      	cmp	r7, r6
 80270e6:	bf3a      	itte	cc
 80270e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80270ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80270f0:	2100      	movcs	r1, #0
 80270f2:	380b      	subs	r0, #11
 80270f4:	d017      	beq.n	8027126 <__b2d+0x92>
 80270f6:	f1c0 0c20 	rsb	ip, r0, #32
 80270fa:	fa04 f500 	lsl.w	r5, r4, r0
 80270fe:	42be      	cmp	r6, r7
 8027100:	fa21 f40c 	lsr.w	r4, r1, ip
 8027104:	ea45 0504 	orr.w	r5, r5, r4
 8027108:	bf8c      	ite	hi
 802710a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 802710e:	2400      	movls	r4, #0
 8027110:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8027114:	fa01 f000 	lsl.w	r0, r1, r0
 8027118:	fa24 f40c 	lsr.w	r4, r4, ip
 802711c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8027120:	ea40 0204 	orr.w	r2, r0, r4
 8027124:	e7db      	b.n	80270de <__b2d+0x4a>
 8027126:	ea44 030c 	orr.w	r3, r4, ip
 802712a:	460a      	mov	r2, r1
 802712c:	e7d7      	b.n	80270de <__b2d+0x4a>
 802712e:	bf00      	nop
 8027130:	3ff00000 	.word	0x3ff00000

08027134 <__d2b>:
 8027134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027138:	4689      	mov	r9, r1
 802713a:	2101      	movs	r1, #1
 802713c:	ec57 6b10 	vmov	r6, r7, d0
 8027140:	4690      	mov	r8, r2
 8027142:	f7ff fc0f 	bl	8026964 <_Balloc>
 8027146:	4604      	mov	r4, r0
 8027148:	b930      	cbnz	r0, 8027158 <__d2b+0x24>
 802714a:	4602      	mov	r2, r0
 802714c:	4b25      	ldr	r3, [pc, #148]	; (80271e4 <__d2b+0xb0>)
 802714e:	4826      	ldr	r0, [pc, #152]	; (80271e8 <__d2b+0xb4>)
 8027150:	f240 310a 	movw	r1, #778	; 0x30a
 8027154:	f7fd fed4 	bl	8024f00 <__assert_func>
 8027158:	f3c7 550a 	ubfx	r5, r7, #20, #11
 802715c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027160:	bb35      	cbnz	r5, 80271b0 <__d2b+0x7c>
 8027162:	2e00      	cmp	r6, #0
 8027164:	9301      	str	r3, [sp, #4]
 8027166:	d028      	beq.n	80271ba <__d2b+0x86>
 8027168:	4668      	mov	r0, sp
 802716a:	9600      	str	r6, [sp, #0]
 802716c:	f7ff fd10 	bl	8026b90 <__lo0bits>
 8027170:	9900      	ldr	r1, [sp, #0]
 8027172:	b300      	cbz	r0, 80271b6 <__d2b+0x82>
 8027174:	9a01      	ldr	r2, [sp, #4]
 8027176:	f1c0 0320 	rsb	r3, r0, #32
 802717a:	fa02 f303 	lsl.w	r3, r2, r3
 802717e:	430b      	orrs	r3, r1
 8027180:	40c2      	lsrs	r2, r0
 8027182:	6163      	str	r3, [r4, #20]
 8027184:	9201      	str	r2, [sp, #4]
 8027186:	9b01      	ldr	r3, [sp, #4]
 8027188:	61a3      	str	r3, [r4, #24]
 802718a:	2b00      	cmp	r3, #0
 802718c:	bf14      	ite	ne
 802718e:	2202      	movne	r2, #2
 8027190:	2201      	moveq	r2, #1
 8027192:	6122      	str	r2, [r4, #16]
 8027194:	b1d5      	cbz	r5, 80271cc <__d2b+0x98>
 8027196:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802719a:	4405      	add	r5, r0
 802719c:	f8c9 5000 	str.w	r5, [r9]
 80271a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80271a4:	f8c8 0000 	str.w	r0, [r8]
 80271a8:	4620      	mov	r0, r4
 80271aa:	b003      	add	sp, #12
 80271ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80271b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80271b4:	e7d5      	b.n	8027162 <__d2b+0x2e>
 80271b6:	6161      	str	r1, [r4, #20]
 80271b8:	e7e5      	b.n	8027186 <__d2b+0x52>
 80271ba:	a801      	add	r0, sp, #4
 80271bc:	f7ff fce8 	bl	8026b90 <__lo0bits>
 80271c0:	9b01      	ldr	r3, [sp, #4]
 80271c2:	6163      	str	r3, [r4, #20]
 80271c4:	2201      	movs	r2, #1
 80271c6:	6122      	str	r2, [r4, #16]
 80271c8:	3020      	adds	r0, #32
 80271ca:	e7e3      	b.n	8027194 <__d2b+0x60>
 80271cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80271d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80271d4:	f8c9 0000 	str.w	r0, [r9]
 80271d8:	6918      	ldr	r0, [r3, #16]
 80271da:	f7ff fcb9 	bl	8026b50 <__hi0bits>
 80271de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80271e2:	e7df      	b.n	80271a4 <__d2b+0x70>
 80271e4:	08033bc5 	.word	0x08033bc5
 80271e8:	08033d14 	.word	0x08033d14

080271ec <__ratio>:
 80271ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271f0:	4688      	mov	r8, r1
 80271f2:	4669      	mov	r1, sp
 80271f4:	4681      	mov	r9, r0
 80271f6:	f7ff ff4d 	bl	8027094 <__b2d>
 80271fa:	a901      	add	r1, sp, #4
 80271fc:	4640      	mov	r0, r8
 80271fe:	ec55 4b10 	vmov	r4, r5, d0
 8027202:	f7ff ff47 	bl	8027094 <__b2d>
 8027206:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802720a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802720e:	eba3 0c02 	sub.w	ip, r3, r2
 8027212:	e9dd 3200 	ldrd	r3, r2, [sp]
 8027216:	1a9b      	subs	r3, r3, r2
 8027218:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802721c:	ec51 0b10 	vmov	r0, r1, d0
 8027220:	2b00      	cmp	r3, #0
 8027222:	bfd6      	itet	le
 8027224:	460a      	movle	r2, r1
 8027226:	462a      	movgt	r2, r5
 8027228:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802722c:	468b      	mov	fp, r1
 802722e:	462f      	mov	r7, r5
 8027230:	bfd4      	ite	le
 8027232:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8027236:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802723a:	4620      	mov	r0, r4
 802723c:	ee10 2a10 	vmov	r2, s0
 8027240:	465b      	mov	r3, fp
 8027242:	4639      	mov	r1, r7
 8027244:	f7d9 fb12 	bl	800086c <__aeabi_ddiv>
 8027248:	ec41 0b10 	vmov	d0, r0, r1
 802724c:	b003      	add	sp, #12
 802724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027252 <__copybits>:
 8027252:	3901      	subs	r1, #1
 8027254:	b570      	push	{r4, r5, r6, lr}
 8027256:	1149      	asrs	r1, r1, #5
 8027258:	6914      	ldr	r4, [r2, #16]
 802725a:	3101      	adds	r1, #1
 802725c:	f102 0314 	add.w	r3, r2, #20
 8027260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8027264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027268:	1f05      	subs	r5, r0, #4
 802726a:	42a3      	cmp	r3, r4
 802726c:	d30c      	bcc.n	8027288 <__copybits+0x36>
 802726e:	1aa3      	subs	r3, r4, r2
 8027270:	3b11      	subs	r3, #17
 8027272:	f023 0303 	bic.w	r3, r3, #3
 8027276:	3211      	adds	r2, #17
 8027278:	42a2      	cmp	r2, r4
 802727a:	bf88      	it	hi
 802727c:	2300      	movhi	r3, #0
 802727e:	4418      	add	r0, r3
 8027280:	2300      	movs	r3, #0
 8027282:	4288      	cmp	r0, r1
 8027284:	d305      	bcc.n	8027292 <__copybits+0x40>
 8027286:	bd70      	pop	{r4, r5, r6, pc}
 8027288:	f853 6b04 	ldr.w	r6, [r3], #4
 802728c:	f845 6f04 	str.w	r6, [r5, #4]!
 8027290:	e7eb      	b.n	802726a <__copybits+0x18>
 8027292:	f840 3b04 	str.w	r3, [r0], #4
 8027296:	e7f4      	b.n	8027282 <__copybits+0x30>

08027298 <__any_on>:
 8027298:	f100 0214 	add.w	r2, r0, #20
 802729c:	6900      	ldr	r0, [r0, #16]
 802729e:	114b      	asrs	r3, r1, #5
 80272a0:	4298      	cmp	r0, r3
 80272a2:	b510      	push	{r4, lr}
 80272a4:	db11      	blt.n	80272ca <__any_on+0x32>
 80272a6:	dd0a      	ble.n	80272be <__any_on+0x26>
 80272a8:	f011 011f 	ands.w	r1, r1, #31
 80272ac:	d007      	beq.n	80272be <__any_on+0x26>
 80272ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80272b2:	fa24 f001 	lsr.w	r0, r4, r1
 80272b6:	fa00 f101 	lsl.w	r1, r0, r1
 80272ba:	428c      	cmp	r4, r1
 80272bc:	d10b      	bne.n	80272d6 <__any_on+0x3e>
 80272be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80272c2:	4293      	cmp	r3, r2
 80272c4:	d803      	bhi.n	80272ce <__any_on+0x36>
 80272c6:	2000      	movs	r0, #0
 80272c8:	bd10      	pop	{r4, pc}
 80272ca:	4603      	mov	r3, r0
 80272cc:	e7f7      	b.n	80272be <__any_on+0x26>
 80272ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80272d2:	2900      	cmp	r1, #0
 80272d4:	d0f5      	beq.n	80272c2 <__any_on+0x2a>
 80272d6:	2001      	movs	r0, #1
 80272d8:	e7f6      	b.n	80272c8 <__any_on+0x30>

080272da <_realloc_r>:
 80272da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272dc:	4607      	mov	r7, r0
 80272de:	4614      	mov	r4, r2
 80272e0:	460e      	mov	r6, r1
 80272e2:	b921      	cbnz	r1, 80272ee <_realloc_r+0x14>
 80272e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80272e8:	4611      	mov	r1, r2
 80272ea:	f7fb bb8b 	b.w	8022a04 <_malloc_r>
 80272ee:	b922      	cbnz	r2, 80272fa <_realloc_r+0x20>
 80272f0:	f7fb fb38 	bl	8022964 <_free_r>
 80272f4:	4625      	mov	r5, r4
 80272f6:	4628      	mov	r0, r5
 80272f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80272fa:	f000 fe5b 	bl	8027fb4 <_malloc_usable_size_r>
 80272fe:	42a0      	cmp	r0, r4
 8027300:	d20f      	bcs.n	8027322 <_realloc_r+0x48>
 8027302:	4621      	mov	r1, r4
 8027304:	4638      	mov	r0, r7
 8027306:	f7fb fb7d 	bl	8022a04 <_malloc_r>
 802730a:	4605      	mov	r5, r0
 802730c:	2800      	cmp	r0, #0
 802730e:	d0f2      	beq.n	80272f6 <_realloc_r+0x1c>
 8027310:	4631      	mov	r1, r6
 8027312:	4622      	mov	r2, r4
 8027314:	f7fb f868 	bl	80223e8 <memcpy>
 8027318:	4631      	mov	r1, r6
 802731a:	4638      	mov	r0, r7
 802731c:	f7fb fb22 	bl	8022964 <_free_r>
 8027320:	e7e9      	b.n	80272f6 <_realloc_r+0x1c>
 8027322:	4635      	mov	r5, r6
 8027324:	e7e7      	b.n	80272f6 <_realloc_r+0x1c>

08027326 <__ssputs_r>:
 8027326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802732a:	688e      	ldr	r6, [r1, #8]
 802732c:	429e      	cmp	r6, r3
 802732e:	4682      	mov	sl, r0
 8027330:	460c      	mov	r4, r1
 8027332:	4690      	mov	r8, r2
 8027334:	461f      	mov	r7, r3
 8027336:	d838      	bhi.n	80273aa <__ssputs_r+0x84>
 8027338:	898a      	ldrh	r2, [r1, #12]
 802733a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802733e:	d032      	beq.n	80273a6 <__ssputs_r+0x80>
 8027340:	6825      	ldr	r5, [r4, #0]
 8027342:	6909      	ldr	r1, [r1, #16]
 8027344:	eba5 0901 	sub.w	r9, r5, r1
 8027348:	6965      	ldr	r5, [r4, #20]
 802734a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802734e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027352:	3301      	adds	r3, #1
 8027354:	444b      	add	r3, r9
 8027356:	106d      	asrs	r5, r5, #1
 8027358:	429d      	cmp	r5, r3
 802735a:	bf38      	it	cc
 802735c:	461d      	movcc	r5, r3
 802735e:	0553      	lsls	r3, r2, #21
 8027360:	d531      	bpl.n	80273c6 <__ssputs_r+0xa0>
 8027362:	4629      	mov	r1, r5
 8027364:	f7fb fb4e 	bl	8022a04 <_malloc_r>
 8027368:	4606      	mov	r6, r0
 802736a:	b950      	cbnz	r0, 8027382 <__ssputs_r+0x5c>
 802736c:	230c      	movs	r3, #12
 802736e:	f8ca 3000 	str.w	r3, [sl]
 8027372:	89a3      	ldrh	r3, [r4, #12]
 8027374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027378:	81a3      	strh	r3, [r4, #12]
 802737a:	f04f 30ff 	mov.w	r0, #4294967295
 802737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027382:	6921      	ldr	r1, [r4, #16]
 8027384:	464a      	mov	r2, r9
 8027386:	f7fb f82f 	bl	80223e8 <memcpy>
 802738a:	89a3      	ldrh	r3, [r4, #12]
 802738c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027394:	81a3      	strh	r3, [r4, #12]
 8027396:	6126      	str	r6, [r4, #16]
 8027398:	6165      	str	r5, [r4, #20]
 802739a:	444e      	add	r6, r9
 802739c:	eba5 0509 	sub.w	r5, r5, r9
 80273a0:	6026      	str	r6, [r4, #0]
 80273a2:	60a5      	str	r5, [r4, #8]
 80273a4:	463e      	mov	r6, r7
 80273a6:	42be      	cmp	r6, r7
 80273a8:	d900      	bls.n	80273ac <__ssputs_r+0x86>
 80273aa:	463e      	mov	r6, r7
 80273ac:	4632      	mov	r2, r6
 80273ae:	6820      	ldr	r0, [r4, #0]
 80273b0:	4641      	mov	r1, r8
 80273b2:	f7fb f827 	bl	8022404 <memmove>
 80273b6:	68a3      	ldr	r3, [r4, #8]
 80273b8:	6822      	ldr	r2, [r4, #0]
 80273ba:	1b9b      	subs	r3, r3, r6
 80273bc:	4432      	add	r2, r6
 80273be:	60a3      	str	r3, [r4, #8]
 80273c0:	6022      	str	r2, [r4, #0]
 80273c2:	2000      	movs	r0, #0
 80273c4:	e7db      	b.n	802737e <__ssputs_r+0x58>
 80273c6:	462a      	mov	r2, r5
 80273c8:	f7ff ff87 	bl	80272da <_realloc_r>
 80273cc:	4606      	mov	r6, r0
 80273ce:	2800      	cmp	r0, #0
 80273d0:	d1e1      	bne.n	8027396 <__ssputs_r+0x70>
 80273d2:	6921      	ldr	r1, [r4, #16]
 80273d4:	4650      	mov	r0, sl
 80273d6:	f7fb fac5 	bl	8022964 <_free_r>
 80273da:	e7c7      	b.n	802736c <__ssputs_r+0x46>

080273dc <_svfiprintf_r>:
 80273dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273e0:	4698      	mov	r8, r3
 80273e2:	898b      	ldrh	r3, [r1, #12]
 80273e4:	061b      	lsls	r3, r3, #24
 80273e6:	b09d      	sub	sp, #116	; 0x74
 80273e8:	4607      	mov	r7, r0
 80273ea:	460d      	mov	r5, r1
 80273ec:	4614      	mov	r4, r2
 80273ee:	d50e      	bpl.n	802740e <_svfiprintf_r+0x32>
 80273f0:	690b      	ldr	r3, [r1, #16]
 80273f2:	b963      	cbnz	r3, 802740e <_svfiprintf_r+0x32>
 80273f4:	2140      	movs	r1, #64	; 0x40
 80273f6:	f7fb fb05 	bl	8022a04 <_malloc_r>
 80273fa:	6028      	str	r0, [r5, #0]
 80273fc:	6128      	str	r0, [r5, #16]
 80273fe:	b920      	cbnz	r0, 802740a <_svfiprintf_r+0x2e>
 8027400:	230c      	movs	r3, #12
 8027402:	603b      	str	r3, [r7, #0]
 8027404:	f04f 30ff 	mov.w	r0, #4294967295
 8027408:	e0d1      	b.n	80275ae <_svfiprintf_r+0x1d2>
 802740a:	2340      	movs	r3, #64	; 0x40
 802740c:	616b      	str	r3, [r5, #20]
 802740e:	2300      	movs	r3, #0
 8027410:	9309      	str	r3, [sp, #36]	; 0x24
 8027412:	2320      	movs	r3, #32
 8027414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027418:	f8cd 800c 	str.w	r8, [sp, #12]
 802741c:	2330      	movs	r3, #48	; 0x30
 802741e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80275c8 <_svfiprintf_r+0x1ec>
 8027422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027426:	f04f 0901 	mov.w	r9, #1
 802742a:	4623      	mov	r3, r4
 802742c:	469a      	mov	sl, r3
 802742e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027432:	b10a      	cbz	r2, 8027438 <_svfiprintf_r+0x5c>
 8027434:	2a25      	cmp	r2, #37	; 0x25
 8027436:	d1f9      	bne.n	802742c <_svfiprintf_r+0x50>
 8027438:	ebba 0b04 	subs.w	fp, sl, r4
 802743c:	d00b      	beq.n	8027456 <_svfiprintf_r+0x7a>
 802743e:	465b      	mov	r3, fp
 8027440:	4622      	mov	r2, r4
 8027442:	4629      	mov	r1, r5
 8027444:	4638      	mov	r0, r7
 8027446:	f7ff ff6e 	bl	8027326 <__ssputs_r>
 802744a:	3001      	adds	r0, #1
 802744c:	f000 80aa 	beq.w	80275a4 <_svfiprintf_r+0x1c8>
 8027450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027452:	445a      	add	r2, fp
 8027454:	9209      	str	r2, [sp, #36]	; 0x24
 8027456:	f89a 3000 	ldrb.w	r3, [sl]
 802745a:	2b00      	cmp	r3, #0
 802745c:	f000 80a2 	beq.w	80275a4 <_svfiprintf_r+0x1c8>
 8027460:	2300      	movs	r3, #0
 8027462:	f04f 32ff 	mov.w	r2, #4294967295
 8027466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802746a:	f10a 0a01 	add.w	sl, sl, #1
 802746e:	9304      	str	r3, [sp, #16]
 8027470:	9307      	str	r3, [sp, #28]
 8027472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027476:	931a      	str	r3, [sp, #104]	; 0x68
 8027478:	4654      	mov	r4, sl
 802747a:	2205      	movs	r2, #5
 802747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027480:	4851      	ldr	r0, [pc, #324]	; (80275c8 <_svfiprintf_r+0x1ec>)
 8027482:	f7d8 febd 	bl	8000200 <memchr>
 8027486:	9a04      	ldr	r2, [sp, #16]
 8027488:	b9d8      	cbnz	r0, 80274c2 <_svfiprintf_r+0xe6>
 802748a:	06d0      	lsls	r0, r2, #27
 802748c:	bf44      	itt	mi
 802748e:	2320      	movmi	r3, #32
 8027490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027494:	0711      	lsls	r1, r2, #28
 8027496:	bf44      	itt	mi
 8027498:	232b      	movmi	r3, #43	; 0x2b
 802749a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802749e:	f89a 3000 	ldrb.w	r3, [sl]
 80274a2:	2b2a      	cmp	r3, #42	; 0x2a
 80274a4:	d015      	beq.n	80274d2 <_svfiprintf_r+0xf6>
 80274a6:	9a07      	ldr	r2, [sp, #28]
 80274a8:	4654      	mov	r4, sl
 80274aa:	2000      	movs	r0, #0
 80274ac:	f04f 0c0a 	mov.w	ip, #10
 80274b0:	4621      	mov	r1, r4
 80274b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80274b6:	3b30      	subs	r3, #48	; 0x30
 80274b8:	2b09      	cmp	r3, #9
 80274ba:	d94e      	bls.n	802755a <_svfiprintf_r+0x17e>
 80274bc:	b1b0      	cbz	r0, 80274ec <_svfiprintf_r+0x110>
 80274be:	9207      	str	r2, [sp, #28]
 80274c0:	e014      	b.n	80274ec <_svfiprintf_r+0x110>
 80274c2:	eba0 0308 	sub.w	r3, r0, r8
 80274c6:	fa09 f303 	lsl.w	r3, r9, r3
 80274ca:	4313      	orrs	r3, r2
 80274cc:	9304      	str	r3, [sp, #16]
 80274ce:	46a2      	mov	sl, r4
 80274d0:	e7d2      	b.n	8027478 <_svfiprintf_r+0x9c>
 80274d2:	9b03      	ldr	r3, [sp, #12]
 80274d4:	1d19      	adds	r1, r3, #4
 80274d6:	681b      	ldr	r3, [r3, #0]
 80274d8:	9103      	str	r1, [sp, #12]
 80274da:	2b00      	cmp	r3, #0
 80274dc:	bfbb      	ittet	lt
 80274de:	425b      	neglt	r3, r3
 80274e0:	f042 0202 	orrlt.w	r2, r2, #2
 80274e4:	9307      	strge	r3, [sp, #28]
 80274e6:	9307      	strlt	r3, [sp, #28]
 80274e8:	bfb8      	it	lt
 80274ea:	9204      	strlt	r2, [sp, #16]
 80274ec:	7823      	ldrb	r3, [r4, #0]
 80274ee:	2b2e      	cmp	r3, #46	; 0x2e
 80274f0:	d10c      	bne.n	802750c <_svfiprintf_r+0x130>
 80274f2:	7863      	ldrb	r3, [r4, #1]
 80274f4:	2b2a      	cmp	r3, #42	; 0x2a
 80274f6:	d135      	bne.n	8027564 <_svfiprintf_r+0x188>
 80274f8:	9b03      	ldr	r3, [sp, #12]
 80274fa:	1d1a      	adds	r2, r3, #4
 80274fc:	681b      	ldr	r3, [r3, #0]
 80274fe:	9203      	str	r2, [sp, #12]
 8027500:	2b00      	cmp	r3, #0
 8027502:	bfb8      	it	lt
 8027504:	f04f 33ff 	movlt.w	r3, #4294967295
 8027508:	3402      	adds	r4, #2
 802750a:	9305      	str	r3, [sp, #20]
 802750c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80275d8 <_svfiprintf_r+0x1fc>
 8027510:	7821      	ldrb	r1, [r4, #0]
 8027512:	2203      	movs	r2, #3
 8027514:	4650      	mov	r0, sl
 8027516:	f7d8 fe73 	bl	8000200 <memchr>
 802751a:	b140      	cbz	r0, 802752e <_svfiprintf_r+0x152>
 802751c:	2340      	movs	r3, #64	; 0x40
 802751e:	eba0 000a 	sub.w	r0, r0, sl
 8027522:	fa03 f000 	lsl.w	r0, r3, r0
 8027526:	9b04      	ldr	r3, [sp, #16]
 8027528:	4303      	orrs	r3, r0
 802752a:	3401      	adds	r4, #1
 802752c:	9304      	str	r3, [sp, #16]
 802752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027532:	4826      	ldr	r0, [pc, #152]	; (80275cc <_svfiprintf_r+0x1f0>)
 8027534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027538:	2206      	movs	r2, #6
 802753a:	f7d8 fe61 	bl	8000200 <memchr>
 802753e:	2800      	cmp	r0, #0
 8027540:	d038      	beq.n	80275b4 <_svfiprintf_r+0x1d8>
 8027542:	4b23      	ldr	r3, [pc, #140]	; (80275d0 <_svfiprintf_r+0x1f4>)
 8027544:	bb1b      	cbnz	r3, 802758e <_svfiprintf_r+0x1b2>
 8027546:	9b03      	ldr	r3, [sp, #12]
 8027548:	3307      	adds	r3, #7
 802754a:	f023 0307 	bic.w	r3, r3, #7
 802754e:	3308      	adds	r3, #8
 8027550:	9303      	str	r3, [sp, #12]
 8027552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027554:	4433      	add	r3, r6
 8027556:	9309      	str	r3, [sp, #36]	; 0x24
 8027558:	e767      	b.n	802742a <_svfiprintf_r+0x4e>
 802755a:	fb0c 3202 	mla	r2, ip, r2, r3
 802755e:	460c      	mov	r4, r1
 8027560:	2001      	movs	r0, #1
 8027562:	e7a5      	b.n	80274b0 <_svfiprintf_r+0xd4>
 8027564:	2300      	movs	r3, #0
 8027566:	3401      	adds	r4, #1
 8027568:	9305      	str	r3, [sp, #20]
 802756a:	4619      	mov	r1, r3
 802756c:	f04f 0c0a 	mov.w	ip, #10
 8027570:	4620      	mov	r0, r4
 8027572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027576:	3a30      	subs	r2, #48	; 0x30
 8027578:	2a09      	cmp	r2, #9
 802757a:	d903      	bls.n	8027584 <_svfiprintf_r+0x1a8>
 802757c:	2b00      	cmp	r3, #0
 802757e:	d0c5      	beq.n	802750c <_svfiprintf_r+0x130>
 8027580:	9105      	str	r1, [sp, #20]
 8027582:	e7c3      	b.n	802750c <_svfiprintf_r+0x130>
 8027584:	fb0c 2101 	mla	r1, ip, r1, r2
 8027588:	4604      	mov	r4, r0
 802758a:	2301      	movs	r3, #1
 802758c:	e7f0      	b.n	8027570 <_svfiprintf_r+0x194>
 802758e:	ab03      	add	r3, sp, #12
 8027590:	9300      	str	r3, [sp, #0]
 8027592:	462a      	mov	r2, r5
 8027594:	4b0f      	ldr	r3, [pc, #60]	; (80275d4 <_svfiprintf_r+0x1f8>)
 8027596:	a904      	add	r1, sp, #16
 8027598:	4638      	mov	r0, r7
 802759a:	f7fb fc87 	bl	8022eac <_printf_float>
 802759e:	1c42      	adds	r2, r0, #1
 80275a0:	4606      	mov	r6, r0
 80275a2:	d1d6      	bne.n	8027552 <_svfiprintf_r+0x176>
 80275a4:	89ab      	ldrh	r3, [r5, #12]
 80275a6:	065b      	lsls	r3, r3, #25
 80275a8:	f53f af2c 	bmi.w	8027404 <_svfiprintf_r+0x28>
 80275ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80275ae:	b01d      	add	sp, #116	; 0x74
 80275b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80275b4:	ab03      	add	r3, sp, #12
 80275b6:	9300      	str	r3, [sp, #0]
 80275b8:	462a      	mov	r2, r5
 80275ba:	4b06      	ldr	r3, [pc, #24]	; (80275d4 <_svfiprintf_r+0x1f8>)
 80275bc:	a904      	add	r1, sp, #16
 80275be:	4638      	mov	r0, r7
 80275c0:	f7fb ff18 	bl	80233f4 <_printf_i>
 80275c4:	e7eb      	b.n	802759e <_svfiprintf_r+0x1c2>
 80275c6:	bf00      	nop
 80275c8:	08033988 	.word	0x08033988
 80275cc:	08033992 	.word	0x08033992
 80275d0:	08022ead 	.word	0x08022ead
 80275d4:	08027327 	.word	0x08027327
 80275d8:	0803398e 	.word	0x0803398e

080275dc <_sungetc_r>:
 80275dc:	b538      	push	{r3, r4, r5, lr}
 80275de:	1c4b      	adds	r3, r1, #1
 80275e0:	4614      	mov	r4, r2
 80275e2:	d103      	bne.n	80275ec <_sungetc_r+0x10>
 80275e4:	f04f 35ff 	mov.w	r5, #4294967295
 80275e8:	4628      	mov	r0, r5
 80275ea:	bd38      	pop	{r3, r4, r5, pc}
 80275ec:	8993      	ldrh	r3, [r2, #12]
 80275ee:	f023 0320 	bic.w	r3, r3, #32
 80275f2:	8193      	strh	r3, [r2, #12]
 80275f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80275f6:	6852      	ldr	r2, [r2, #4]
 80275f8:	b2cd      	uxtb	r5, r1
 80275fa:	b18b      	cbz	r3, 8027620 <_sungetc_r+0x44>
 80275fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80275fe:	4293      	cmp	r3, r2
 8027600:	dd08      	ble.n	8027614 <_sungetc_r+0x38>
 8027602:	6823      	ldr	r3, [r4, #0]
 8027604:	1e5a      	subs	r2, r3, #1
 8027606:	6022      	str	r2, [r4, #0]
 8027608:	f803 5c01 	strb.w	r5, [r3, #-1]
 802760c:	6863      	ldr	r3, [r4, #4]
 802760e:	3301      	adds	r3, #1
 8027610:	6063      	str	r3, [r4, #4]
 8027612:	e7e9      	b.n	80275e8 <_sungetc_r+0xc>
 8027614:	4621      	mov	r1, r4
 8027616:	f000 fc51 	bl	8027ebc <__submore>
 802761a:	2800      	cmp	r0, #0
 802761c:	d0f1      	beq.n	8027602 <_sungetc_r+0x26>
 802761e:	e7e1      	b.n	80275e4 <_sungetc_r+0x8>
 8027620:	6921      	ldr	r1, [r4, #16]
 8027622:	6823      	ldr	r3, [r4, #0]
 8027624:	b151      	cbz	r1, 802763c <_sungetc_r+0x60>
 8027626:	4299      	cmp	r1, r3
 8027628:	d208      	bcs.n	802763c <_sungetc_r+0x60>
 802762a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802762e:	42a9      	cmp	r1, r5
 8027630:	d104      	bne.n	802763c <_sungetc_r+0x60>
 8027632:	3b01      	subs	r3, #1
 8027634:	3201      	adds	r2, #1
 8027636:	6023      	str	r3, [r4, #0]
 8027638:	6062      	str	r2, [r4, #4]
 802763a:	e7d5      	b.n	80275e8 <_sungetc_r+0xc>
 802763c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8027640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027644:	6363      	str	r3, [r4, #52]	; 0x34
 8027646:	2303      	movs	r3, #3
 8027648:	63a3      	str	r3, [r4, #56]	; 0x38
 802764a:	4623      	mov	r3, r4
 802764c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8027650:	6023      	str	r3, [r4, #0]
 8027652:	2301      	movs	r3, #1
 8027654:	e7dc      	b.n	8027610 <_sungetc_r+0x34>

08027656 <__ssrefill_r>:
 8027656:	b510      	push	{r4, lr}
 8027658:	460c      	mov	r4, r1
 802765a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802765c:	b169      	cbz	r1, 802767a <__ssrefill_r+0x24>
 802765e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027662:	4299      	cmp	r1, r3
 8027664:	d001      	beq.n	802766a <__ssrefill_r+0x14>
 8027666:	f7fb f97d 	bl	8022964 <_free_r>
 802766a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802766c:	6063      	str	r3, [r4, #4]
 802766e:	2000      	movs	r0, #0
 8027670:	6360      	str	r0, [r4, #52]	; 0x34
 8027672:	b113      	cbz	r3, 802767a <__ssrefill_r+0x24>
 8027674:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8027676:	6023      	str	r3, [r4, #0]
 8027678:	bd10      	pop	{r4, pc}
 802767a:	6923      	ldr	r3, [r4, #16]
 802767c:	6023      	str	r3, [r4, #0]
 802767e:	2300      	movs	r3, #0
 8027680:	6063      	str	r3, [r4, #4]
 8027682:	89a3      	ldrh	r3, [r4, #12]
 8027684:	f043 0320 	orr.w	r3, r3, #32
 8027688:	81a3      	strh	r3, [r4, #12]
 802768a:	f04f 30ff 	mov.w	r0, #4294967295
 802768e:	e7f3      	b.n	8027678 <__ssrefill_r+0x22>

08027690 <__ssvfiscanf_r>:
 8027690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027694:	460c      	mov	r4, r1
 8027696:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802769a:	2100      	movs	r1, #0
 802769c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80276a0:	49b2      	ldr	r1, [pc, #712]	; (802796c <__ssvfiscanf_r+0x2dc>)
 80276a2:	91a0      	str	r1, [sp, #640]	; 0x280
 80276a4:	f10d 0804 	add.w	r8, sp, #4
 80276a8:	49b1      	ldr	r1, [pc, #708]	; (8027970 <__ssvfiscanf_r+0x2e0>)
 80276aa:	4fb2      	ldr	r7, [pc, #712]	; (8027974 <__ssvfiscanf_r+0x2e4>)
 80276ac:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8027978 <__ssvfiscanf_r+0x2e8>
 80276b0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80276b4:	4606      	mov	r6, r0
 80276b6:	91a1      	str	r1, [sp, #644]	; 0x284
 80276b8:	9300      	str	r3, [sp, #0]
 80276ba:	f892 a000 	ldrb.w	sl, [r2]
 80276be:	f1ba 0f00 	cmp.w	sl, #0
 80276c2:	f000 8151 	beq.w	8027968 <__ssvfiscanf_r+0x2d8>
 80276c6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80276ca:	f013 0308 	ands.w	r3, r3, #8
 80276ce:	f102 0501 	add.w	r5, r2, #1
 80276d2:	d019      	beq.n	8027708 <__ssvfiscanf_r+0x78>
 80276d4:	6863      	ldr	r3, [r4, #4]
 80276d6:	2b00      	cmp	r3, #0
 80276d8:	dd0f      	ble.n	80276fa <__ssvfiscanf_r+0x6a>
 80276da:	6823      	ldr	r3, [r4, #0]
 80276dc:	781a      	ldrb	r2, [r3, #0]
 80276de:	5cba      	ldrb	r2, [r7, r2]
 80276e0:	0712      	lsls	r2, r2, #28
 80276e2:	d401      	bmi.n	80276e8 <__ssvfiscanf_r+0x58>
 80276e4:	462a      	mov	r2, r5
 80276e6:	e7e8      	b.n	80276ba <__ssvfiscanf_r+0x2a>
 80276e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80276ea:	3201      	adds	r2, #1
 80276ec:	9245      	str	r2, [sp, #276]	; 0x114
 80276ee:	6862      	ldr	r2, [r4, #4]
 80276f0:	3301      	adds	r3, #1
 80276f2:	3a01      	subs	r2, #1
 80276f4:	6062      	str	r2, [r4, #4]
 80276f6:	6023      	str	r3, [r4, #0]
 80276f8:	e7ec      	b.n	80276d4 <__ssvfiscanf_r+0x44>
 80276fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80276fc:	4621      	mov	r1, r4
 80276fe:	4630      	mov	r0, r6
 8027700:	4798      	blx	r3
 8027702:	2800      	cmp	r0, #0
 8027704:	d0e9      	beq.n	80276da <__ssvfiscanf_r+0x4a>
 8027706:	e7ed      	b.n	80276e4 <__ssvfiscanf_r+0x54>
 8027708:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 802770c:	f040 8083 	bne.w	8027816 <__ssvfiscanf_r+0x186>
 8027710:	9341      	str	r3, [sp, #260]	; 0x104
 8027712:	9343      	str	r3, [sp, #268]	; 0x10c
 8027714:	7853      	ldrb	r3, [r2, #1]
 8027716:	2b2a      	cmp	r3, #42	; 0x2a
 8027718:	bf02      	ittt	eq
 802771a:	2310      	moveq	r3, #16
 802771c:	1c95      	addeq	r5, r2, #2
 802771e:	9341      	streq	r3, [sp, #260]	; 0x104
 8027720:	220a      	movs	r2, #10
 8027722:	46ab      	mov	fp, r5
 8027724:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8027728:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802772c:	2b09      	cmp	r3, #9
 802772e:	d91d      	bls.n	802776c <__ssvfiscanf_r+0xdc>
 8027730:	4891      	ldr	r0, [pc, #580]	; (8027978 <__ssvfiscanf_r+0x2e8>)
 8027732:	2203      	movs	r2, #3
 8027734:	f7d8 fd64 	bl	8000200 <memchr>
 8027738:	b140      	cbz	r0, 802774c <__ssvfiscanf_r+0xbc>
 802773a:	2301      	movs	r3, #1
 802773c:	eba0 0009 	sub.w	r0, r0, r9
 8027740:	fa03 f000 	lsl.w	r0, r3, r0
 8027744:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027746:	4318      	orrs	r0, r3
 8027748:	9041      	str	r0, [sp, #260]	; 0x104
 802774a:	465d      	mov	r5, fp
 802774c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8027750:	2b78      	cmp	r3, #120	; 0x78
 8027752:	d806      	bhi.n	8027762 <__ssvfiscanf_r+0xd2>
 8027754:	2b57      	cmp	r3, #87	; 0x57
 8027756:	d810      	bhi.n	802777a <__ssvfiscanf_r+0xea>
 8027758:	2b25      	cmp	r3, #37	; 0x25
 802775a:	d05c      	beq.n	8027816 <__ssvfiscanf_r+0x186>
 802775c:	d856      	bhi.n	802780c <__ssvfiscanf_r+0x17c>
 802775e:	2b00      	cmp	r3, #0
 8027760:	d074      	beq.n	802784c <__ssvfiscanf_r+0x1bc>
 8027762:	2303      	movs	r3, #3
 8027764:	9347      	str	r3, [sp, #284]	; 0x11c
 8027766:	230a      	movs	r3, #10
 8027768:	9342      	str	r3, [sp, #264]	; 0x108
 802776a:	e081      	b.n	8027870 <__ssvfiscanf_r+0x1e0>
 802776c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802776e:	fb02 1303 	mla	r3, r2, r3, r1
 8027772:	3b30      	subs	r3, #48	; 0x30
 8027774:	9343      	str	r3, [sp, #268]	; 0x10c
 8027776:	465d      	mov	r5, fp
 8027778:	e7d3      	b.n	8027722 <__ssvfiscanf_r+0x92>
 802777a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802777e:	2a20      	cmp	r2, #32
 8027780:	d8ef      	bhi.n	8027762 <__ssvfiscanf_r+0xd2>
 8027782:	a101      	add	r1, pc, #4	; (adr r1, 8027788 <__ssvfiscanf_r+0xf8>)
 8027784:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8027788:	0802785b 	.word	0x0802785b
 802778c:	08027763 	.word	0x08027763
 8027790:	08027763 	.word	0x08027763
 8027794:	080278b9 	.word	0x080278b9
 8027798:	08027763 	.word	0x08027763
 802779c:	08027763 	.word	0x08027763
 80277a0:	08027763 	.word	0x08027763
 80277a4:	08027763 	.word	0x08027763
 80277a8:	08027763 	.word	0x08027763
 80277ac:	08027763 	.word	0x08027763
 80277b0:	08027763 	.word	0x08027763
 80277b4:	080278cf 	.word	0x080278cf
 80277b8:	080278a5 	.word	0x080278a5
 80277bc:	08027813 	.word	0x08027813
 80277c0:	08027813 	.word	0x08027813
 80277c4:	08027813 	.word	0x08027813
 80277c8:	08027763 	.word	0x08027763
 80277cc:	080278a9 	.word	0x080278a9
 80277d0:	08027763 	.word	0x08027763
 80277d4:	08027763 	.word	0x08027763
 80277d8:	08027763 	.word	0x08027763
 80277dc:	08027763 	.word	0x08027763
 80277e0:	080278df 	.word	0x080278df
 80277e4:	080278b1 	.word	0x080278b1
 80277e8:	08027853 	.word	0x08027853
 80277ec:	08027763 	.word	0x08027763
 80277f0:	08027763 	.word	0x08027763
 80277f4:	080278db 	.word	0x080278db
 80277f8:	08027763 	.word	0x08027763
 80277fc:	080278a5 	.word	0x080278a5
 8027800:	08027763 	.word	0x08027763
 8027804:	08027763 	.word	0x08027763
 8027808:	0802785b 	.word	0x0802785b
 802780c:	3b45      	subs	r3, #69	; 0x45
 802780e:	2b02      	cmp	r3, #2
 8027810:	d8a7      	bhi.n	8027762 <__ssvfiscanf_r+0xd2>
 8027812:	2305      	movs	r3, #5
 8027814:	e02b      	b.n	802786e <__ssvfiscanf_r+0x1de>
 8027816:	6863      	ldr	r3, [r4, #4]
 8027818:	2b00      	cmp	r3, #0
 802781a:	dd0d      	ble.n	8027838 <__ssvfiscanf_r+0x1a8>
 802781c:	6823      	ldr	r3, [r4, #0]
 802781e:	781a      	ldrb	r2, [r3, #0]
 8027820:	4552      	cmp	r2, sl
 8027822:	f040 80a1 	bne.w	8027968 <__ssvfiscanf_r+0x2d8>
 8027826:	3301      	adds	r3, #1
 8027828:	6862      	ldr	r2, [r4, #4]
 802782a:	6023      	str	r3, [r4, #0]
 802782c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802782e:	3a01      	subs	r2, #1
 8027830:	3301      	adds	r3, #1
 8027832:	6062      	str	r2, [r4, #4]
 8027834:	9345      	str	r3, [sp, #276]	; 0x114
 8027836:	e755      	b.n	80276e4 <__ssvfiscanf_r+0x54>
 8027838:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802783a:	4621      	mov	r1, r4
 802783c:	4630      	mov	r0, r6
 802783e:	4798      	blx	r3
 8027840:	2800      	cmp	r0, #0
 8027842:	d0eb      	beq.n	802781c <__ssvfiscanf_r+0x18c>
 8027844:	9844      	ldr	r0, [sp, #272]	; 0x110
 8027846:	2800      	cmp	r0, #0
 8027848:	f040 8084 	bne.w	8027954 <__ssvfiscanf_r+0x2c4>
 802784c:	f04f 30ff 	mov.w	r0, #4294967295
 8027850:	e086      	b.n	8027960 <__ssvfiscanf_r+0x2d0>
 8027852:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8027854:	f042 0220 	orr.w	r2, r2, #32
 8027858:	9241      	str	r2, [sp, #260]	; 0x104
 802785a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802785c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027860:	9241      	str	r2, [sp, #260]	; 0x104
 8027862:	2210      	movs	r2, #16
 8027864:	2b6f      	cmp	r3, #111	; 0x6f
 8027866:	9242      	str	r2, [sp, #264]	; 0x108
 8027868:	bf34      	ite	cc
 802786a:	2303      	movcc	r3, #3
 802786c:	2304      	movcs	r3, #4
 802786e:	9347      	str	r3, [sp, #284]	; 0x11c
 8027870:	6863      	ldr	r3, [r4, #4]
 8027872:	2b00      	cmp	r3, #0
 8027874:	dd41      	ble.n	80278fa <__ssvfiscanf_r+0x26a>
 8027876:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027878:	0659      	lsls	r1, r3, #25
 802787a:	d404      	bmi.n	8027886 <__ssvfiscanf_r+0x1f6>
 802787c:	6823      	ldr	r3, [r4, #0]
 802787e:	781a      	ldrb	r2, [r3, #0]
 8027880:	5cba      	ldrb	r2, [r7, r2]
 8027882:	0712      	lsls	r2, r2, #28
 8027884:	d440      	bmi.n	8027908 <__ssvfiscanf_r+0x278>
 8027886:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027888:	2b02      	cmp	r3, #2
 802788a:	dc4f      	bgt.n	802792c <__ssvfiscanf_r+0x29c>
 802788c:	466b      	mov	r3, sp
 802788e:	4622      	mov	r2, r4
 8027890:	a941      	add	r1, sp, #260	; 0x104
 8027892:	4630      	mov	r0, r6
 8027894:	f000 f874 	bl	8027980 <_scanf_chars>
 8027898:	2801      	cmp	r0, #1
 802789a:	d065      	beq.n	8027968 <__ssvfiscanf_r+0x2d8>
 802789c:	2802      	cmp	r0, #2
 802789e:	f47f af21 	bne.w	80276e4 <__ssvfiscanf_r+0x54>
 80278a2:	e7cf      	b.n	8027844 <__ssvfiscanf_r+0x1b4>
 80278a4:	220a      	movs	r2, #10
 80278a6:	e7dd      	b.n	8027864 <__ssvfiscanf_r+0x1d4>
 80278a8:	2300      	movs	r3, #0
 80278aa:	9342      	str	r3, [sp, #264]	; 0x108
 80278ac:	2303      	movs	r3, #3
 80278ae:	e7de      	b.n	802786e <__ssvfiscanf_r+0x1de>
 80278b0:	2308      	movs	r3, #8
 80278b2:	9342      	str	r3, [sp, #264]	; 0x108
 80278b4:	2304      	movs	r3, #4
 80278b6:	e7da      	b.n	802786e <__ssvfiscanf_r+0x1de>
 80278b8:	4629      	mov	r1, r5
 80278ba:	4640      	mov	r0, r8
 80278bc:	f000 fa3c 	bl	8027d38 <__sccl>
 80278c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80278c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80278c6:	9341      	str	r3, [sp, #260]	; 0x104
 80278c8:	4605      	mov	r5, r0
 80278ca:	2301      	movs	r3, #1
 80278cc:	e7cf      	b.n	802786e <__ssvfiscanf_r+0x1de>
 80278ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80278d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80278d4:	9341      	str	r3, [sp, #260]	; 0x104
 80278d6:	2300      	movs	r3, #0
 80278d8:	e7c9      	b.n	802786e <__ssvfiscanf_r+0x1de>
 80278da:	2302      	movs	r3, #2
 80278dc:	e7c7      	b.n	802786e <__ssvfiscanf_r+0x1de>
 80278de:	9841      	ldr	r0, [sp, #260]	; 0x104
 80278e0:	06c3      	lsls	r3, r0, #27
 80278e2:	f53f aeff 	bmi.w	80276e4 <__ssvfiscanf_r+0x54>
 80278e6:	9b00      	ldr	r3, [sp, #0]
 80278e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80278ea:	1d19      	adds	r1, r3, #4
 80278ec:	9100      	str	r1, [sp, #0]
 80278ee:	681b      	ldr	r3, [r3, #0]
 80278f0:	07c0      	lsls	r0, r0, #31
 80278f2:	bf4c      	ite	mi
 80278f4:	801a      	strhmi	r2, [r3, #0]
 80278f6:	601a      	strpl	r2, [r3, #0]
 80278f8:	e6f4      	b.n	80276e4 <__ssvfiscanf_r+0x54>
 80278fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80278fc:	4621      	mov	r1, r4
 80278fe:	4630      	mov	r0, r6
 8027900:	4798      	blx	r3
 8027902:	2800      	cmp	r0, #0
 8027904:	d0b7      	beq.n	8027876 <__ssvfiscanf_r+0x1e6>
 8027906:	e79d      	b.n	8027844 <__ssvfiscanf_r+0x1b4>
 8027908:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802790a:	3201      	adds	r2, #1
 802790c:	9245      	str	r2, [sp, #276]	; 0x114
 802790e:	6862      	ldr	r2, [r4, #4]
 8027910:	3a01      	subs	r2, #1
 8027912:	2a00      	cmp	r2, #0
 8027914:	6062      	str	r2, [r4, #4]
 8027916:	dd02      	ble.n	802791e <__ssvfiscanf_r+0x28e>
 8027918:	3301      	adds	r3, #1
 802791a:	6023      	str	r3, [r4, #0]
 802791c:	e7ae      	b.n	802787c <__ssvfiscanf_r+0x1ec>
 802791e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027920:	4621      	mov	r1, r4
 8027922:	4630      	mov	r0, r6
 8027924:	4798      	blx	r3
 8027926:	2800      	cmp	r0, #0
 8027928:	d0a8      	beq.n	802787c <__ssvfiscanf_r+0x1ec>
 802792a:	e78b      	b.n	8027844 <__ssvfiscanf_r+0x1b4>
 802792c:	2b04      	cmp	r3, #4
 802792e:	dc06      	bgt.n	802793e <__ssvfiscanf_r+0x2ae>
 8027930:	466b      	mov	r3, sp
 8027932:	4622      	mov	r2, r4
 8027934:	a941      	add	r1, sp, #260	; 0x104
 8027936:	4630      	mov	r0, r6
 8027938:	f000 f87a 	bl	8027a30 <_scanf_i>
 802793c:	e7ac      	b.n	8027898 <__ssvfiscanf_r+0x208>
 802793e:	4b0f      	ldr	r3, [pc, #60]	; (802797c <__ssvfiscanf_r+0x2ec>)
 8027940:	2b00      	cmp	r3, #0
 8027942:	f43f aecf 	beq.w	80276e4 <__ssvfiscanf_r+0x54>
 8027946:	466b      	mov	r3, sp
 8027948:	4622      	mov	r2, r4
 802794a:	a941      	add	r1, sp, #260	; 0x104
 802794c:	4630      	mov	r0, r6
 802794e:	f3af 8000 	nop.w
 8027952:	e7a1      	b.n	8027898 <__ssvfiscanf_r+0x208>
 8027954:	89a3      	ldrh	r3, [r4, #12]
 8027956:	f013 0f40 	tst.w	r3, #64	; 0x40
 802795a:	bf18      	it	ne
 802795c:	f04f 30ff 	movne.w	r0, #4294967295
 8027960:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8027964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027968:	9844      	ldr	r0, [sp, #272]	; 0x110
 802796a:	e7f9      	b.n	8027960 <__ssvfiscanf_r+0x2d0>
 802796c:	080275dd 	.word	0x080275dd
 8027970:	08027657 	.word	0x08027657
 8027974:	080337ac 	.word	0x080337ac
 8027978:	0803398e 	.word	0x0803398e
 802797c:	00000000 	.word	0x00000000

08027980 <_scanf_chars>:
 8027980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027984:	4615      	mov	r5, r2
 8027986:	688a      	ldr	r2, [r1, #8]
 8027988:	4680      	mov	r8, r0
 802798a:	460c      	mov	r4, r1
 802798c:	b932      	cbnz	r2, 802799c <_scanf_chars+0x1c>
 802798e:	698a      	ldr	r2, [r1, #24]
 8027990:	2a00      	cmp	r2, #0
 8027992:	bf0c      	ite	eq
 8027994:	2201      	moveq	r2, #1
 8027996:	f04f 32ff 	movne.w	r2, #4294967295
 802799a:	608a      	str	r2, [r1, #8]
 802799c:	6822      	ldr	r2, [r4, #0]
 802799e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8027a2c <_scanf_chars+0xac>
 80279a2:	06d1      	lsls	r1, r2, #27
 80279a4:	bf5f      	itttt	pl
 80279a6:	681a      	ldrpl	r2, [r3, #0]
 80279a8:	1d11      	addpl	r1, r2, #4
 80279aa:	6019      	strpl	r1, [r3, #0]
 80279ac:	6816      	ldrpl	r6, [r2, #0]
 80279ae:	2700      	movs	r7, #0
 80279b0:	69a0      	ldr	r0, [r4, #24]
 80279b2:	b188      	cbz	r0, 80279d8 <_scanf_chars+0x58>
 80279b4:	2801      	cmp	r0, #1
 80279b6:	d107      	bne.n	80279c8 <_scanf_chars+0x48>
 80279b8:	682b      	ldr	r3, [r5, #0]
 80279ba:	781a      	ldrb	r2, [r3, #0]
 80279bc:	6963      	ldr	r3, [r4, #20]
 80279be:	5c9b      	ldrb	r3, [r3, r2]
 80279c0:	b953      	cbnz	r3, 80279d8 <_scanf_chars+0x58>
 80279c2:	bb27      	cbnz	r7, 8027a0e <_scanf_chars+0x8e>
 80279c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80279c8:	2802      	cmp	r0, #2
 80279ca:	d120      	bne.n	8027a0e <_scanf_chars+0x8e>
 80279cc:	682b      	ldr	r3, [r5, #0]
 80279ce:	781b      	ldrb	r3, [r3, #0]
 80279d0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80279d4:	071b      	lsls	r3, r3, #28
 80279d6:	d41a      	bmi.n	8027a0e <_scanf_chars+0x8e>
 80279d8:	6823      	ldr	r3, [r4, #0]
 80279da:	06da      	lsls	r2, r3, #27
 80279dc:	bf5e      	ittt	pl
 80279de:	682b      	ldrpl	r3, [r5, #0]
 80279e0:	781b      	ldrbpl	r3, [r3, #0]
 80279e2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80279e6:	682a      	ldr	r2, [r5, #0]
 80279e8:	686b      	ldr	r3, [r5, #4]
 80279ea:	3201      	adds	r2, #1
 80279ec:	602a      	str	r2, [r5, #0]
 80279ee:	68a2      	ldr	r2, [r4, #8]
 80279f0:	3b01      	subs	r3, #1
 80279f2:	3a01      	subs	r2, #1
 80279f4:	606b      	str	r3, [r5, #4]
 80279f6:	3701      	adds	r7, #1
 80279f8:	60a2      	str	r2, [r4, #8]
 80279fa:	b142      	cbz	r2, 8027a0e <_scanf_chars+0x8e>
 80279fc:	2b00      	cmp	r3, #0
 80279fe:	dcd7      	bgt.n	80279b0 <_scanf_chars+0x30>
 8027a00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027a04:	4629      	mov	r1, r5
 8027a06:	4640      	mov	r0, r8
 8027a08:	4798      	blx	r3
 8027a0a:	2800      	cmp	r0, #0
 8027a0c:	d0d0      	beq.n	80279b0 <_scanf_chars+0x30>
 8027a0e:	6823      	ldr	r3, [r4, #0]
 8027a10:	f013 0310 	ands.w	r3, r3, #16
 8027a14:	d105      	bne.n	8027a22 <_scanf_chars+0xa2>
 8027a16:	68e2      	ldr	r2, [r4, #12]
 8027a18:	3201      	adds	r2, #1
 8027a1a:	60e2      	str	r2, [r4, #12]
 8027a1c:	69a2      	ldr	r2, [r4, #24]
 8027a1e:	b102      	cbz	r2, 8027a22 <_scanf_chars+0xa2>
 8027a20:	7033      	strb	r3, [r6, #0]
 8027a22:	6923      	ldr	r3, [r4, #16]
 8027a24:	441f      	add	r7, r3
 8027a26:	6127      	str	r7, [r4, #16]
 8027a28:	2000      	movs	r0, #0
 8027a2a:	e7cb      	b.n	80279c4 <_scanf_chars+0x44>
 8027a2c:	080337ac 	.word	0x080337ac

08027a30 <_scanf_i>:
 8027a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a34:	4698      	mov	r8, r3
 8027a36:	4b74      	ldr	r3, [pc, #464]	; (8027c08 <_scanf_i+0x1d8>)
 8027a38:	460c      	mov	r4, r1
 8027a3a:	4682      	mov	sl, r0
 8027a3c:	4616      	mov	r6, r2
 8027a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8027a42:	b087      	sub	sp, #28
 8027a44:	ab03      	add	r3, sp, #12
 8027a46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8027a4a:	4b70      	ldr	r3, [pc, #448]	; (8027c0c <_scanf_i+0x1dc>)
 8027a4c:	69a1      	ldr	r1, [r4, #24]
 8027a4e:	4a70      	ldr	r2, [pc, #448]	; (8027c10 <_scanf_i+0x1e0>)
 8027a50:	2903      	cmp	r1, #3
 8027a52:	bf18      	it	ne
 8027a54:	461a      	movne	r2, r3
 8027a56:	68a3      	ldr	r3, [r4, #8]
 8027a58:	9201      	str	r2, [sp, #4]
 8027a5a:	1e5a      	subs	r2, r3, #1
 8027a5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8027a60:	bf88      	it	hi
 8027a62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8027a66:	4627      	mov	r7, r4
 8027a68:	bf82      	ittt	hi
 8027a6a:	eb03 0905 	addhi.w	r9, r3, r5
 8027a6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8027a72:	60a3      	strhi	r3, [r4, #8]
 8027a74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8027a78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8027a7c:	bf98      	it	ls
 8027a7e:	f04f 0900 	movls.w	r9, #0
 8027a82:	6023      	str	r3, [r4, #0]
 8027a84:	463d      	mov	r5, r7
 8027a86:	f04f 0b00 	mov.w	fp, #0
 8027a8a:	6831      	ldr	r1, [r6, #0]
 8027a8c:	ab03      	add	r3, sp, #12
 8027a8e:	7809      	ldrb	r1, [r1, #0]
 8027a90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8027a94:	2202      	movs	r2, #2
 8027a96:	f7d8 fbb3 	bl	8000200 <memchr>
 8027a9a:	b328      	cbz	r0, 8027ae8 <_scanf_i+0xb8>
 8027a9c:	f1bb 0f01 	cmp.w	fp, #1
 8027aa0:	d159      	bne.n	8027b56 <_scanf_i+0x126>
 8027aa2:	6862      	ldr	r2, [r4, #4]
 8027aa4:	b92a      	cbnz	r2, 8027ab2 <_scanf_i+0x82>
 8027aa6:	6822      	ldr	r2, [r4, #0]
 8027aa8:	2308      	movs	r3, #8
 8027aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8027aae:	6063      	str	r3, [r4, #4]
 8027ab0:	6022      	str	r2, [r4, #0]
 8027ab2:	6822      	ldr	r2, [r4, #0]
 8027ab4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027ab8:	6022      	str	r2, [r4, #0]
 8027aba:	68a2      	ldr	r2, [r4, #8]
 8027abc:	1e51      	subs	r1, r2, #1
 8027abe:	60a1      	str	r1, [r4, #8]
 8027ac0:	b192      	cbz	r2, 8027ae8 <_scanf_i+0xb8>
 8027ac2:	6832      	ldr	r2, [r6, #0]
 8027ac4:	1c51      	adds	r1, r2, #1
 8027ac6:	6031      	str	r1, [r6, #0]
 8027ac8:	7812      	ldrb	r2, [r2, #0]
 8027aca:	f805 2b01 	strb.w	r2, [r5], #1
 8027ace:	6872      	ldr	r2, [r6, #4]
 8027ad0:	3a01      	subs	r2, #1
 8027ad2:	2a00      	cmp	r2, #0
 8027ad4:	6072      	str	r2, [r6, #4]
 8027ad6:	dc07      	bgt.n	8027ae8 <_scanf_i+0xb8>
 8027ad8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8027adc:	4631      	mov	r1, r6
 8027ade:	4650      	mov	r0, sl
 8027ae0:	4790      	blx	r2
 8027ae2:	2800      	cmp	r0, #0
 8027ae4:	f040 8085 	bne.w	8027bf2 <_scanf_i+0x1c2>
 8027ae8:	f10b 0b01 	add.w	fp, fp, #1
 8027aec:	f1bb 0f03 	cmp.w	fp, #3
 8027af0:	d1cb      	bne.n	8027a8a <_scanf_i+0x5a>
 8027af2:	6863      	ldr	r3, [r4, #4]
 8027af4:	b90b      	cbnz	r3, 8027afa <_scanf_i+0xca>
 8027af6:	230a      	movs	r3, #10
 8027af8:	6063      	str	r3, [r4, #4]
 8027afa:	6863      	ldr	r3, [r4, #4]
 8027afc:	4945      	ldr	r1, [pc, #276]	; (8027c14 <_scanf_i+0x1e4>)
 8027afe:	6960      	ldr	r0, [r4, #20]
 8027b00:	1ac9      	subs	r1, r1, r3
 8027b02:	f000 f919 	bl	8027d38 <__sccl>
 8027b06:	f04f 0b00 	mov.w	fp, #0
 8027b0a:	68a3      	ldr	r3, [r4, #8]
 8027b0c:	6822      	ldr	r2, [r4, #0]
 8027b0e:	2b00      	cmp	r3, #0
 8027b10:	d03d      	beq.n	8027b8e <_scanf_i+0x15e>
 8027b12:	6831      	ldr	r1, [r6, #0]
 8027b14:	6960      	ldr	r0, [r4, #20]
 8027b16:	f891 c000 	ldrb.w	ip, [r1]
 8027b1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8027b1e:	2800      	cmp	r0, #0
 8027b20:	d035      	beq.n	8027b8e <_scanf_i+0x15e>
 8027b22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8027b26:	d124      	bne.n	8027b72 <_scanf_i+0x142>
 8027b28:	0510      	lsls	r0, r2, #20
 8027b2a:	d522      	bpl.n	8027b72 <_scanf_i+0x142>
 8027b2c:	f10b 0b01 	add.w	fp, fp, #1
 8027b30:	f1b9 0f00 	cmp.w	r9, #0
 8027b34:	d003      	beq.n	8027b3e <_scanf_i+0x10e>
 8027b36:	3301      	adds	r3, #1
 8027b38:	f109 39ff 	add.w	r9, r9, #4294967295
 8027b3c:	60a3      	str	r3, [r4, #8]
 8027b3e:	6873      	ldr	r3, [r6, #4]
 8027b40:	3b01      	subs	r3, #1
 8027b42:	2b00      	cmp	r3, #0
 8027b44:	6073      	str	r3, [r6, #4]
 8027b46:	dd1b      	ble.n	8027b80 <_scanf_i+0x150>
 8027b48:	6833      	ldr	r3, [r6, #0]
 8027b4a:	3301      	adds	r3, #1
 8027b4c:	6033      	str	r3, [r6, #0]
 8027b4e:	68a3      	ldr	r3, [r4, #8]
 8027b50:	3b01      	subs	r3, #1
 8027b52:	60a3      	str	r3, [r4, #8]
 8027b54:	e7d9      	b.n	8027b0a <_scanf_i+0xda>
 8027b56:	f1bb 0f02 	cmp.w	fp, #2
 8027b5a:	d1ae      	bne.n	8027aba <_scanf_i+0x8a>
 8027b5c:	6822      	ldr	r2, [r4, #0]
 8027b5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8027b62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8027b66:	d1bf      	bne.n	8027ae8 <_scanf_i+0xb8>
 8027b68:	2310      	movs	r3, #16
 8027b6a:	6063      	str	r3, [r4, #4]
 8027b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8027b70:	e7a2      	b.n	8027ab8 <_scanf_i+0x88>
 8027b72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8027b76:	6022      	str	r2, [r4, #0]
 8027b78:	780b      	ldrb	r3, [r1, #0]
 8027b7a:	f805 3b01 	strb.w	r3, [r5], #1
 8027b7e:	e7de      	b.n	8027b3e <_scanf_i+0x10e>
 8027b80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027b84:	4631      	mov	r1, r6
 8027b86:	4650      	mov	r0, sl
 8027b88:	4798      	blx	r3
 8027b8a:	2800      	cmp	r0, #0
 8027b8c:	d0df      	beq.n	8027b4e <_scanf_i+0x11e>
 8027b8e:	6823      	ldr	r3, [r4, #0]
 8027b90:	05d9      	lsls	r1, r3, #23
 8027b92:	d50d      	bpl.n	8027bb0 <_scanf_i+0x180>
 8027b94:	42bd      	cmp	r5, r7
 8027b96:	d909      	bls.n	8027bac <_scanf_i+0x17c>
 8027b98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8027b9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8027ba0:	4632      	mov	r2, r6
 8027ba2:	4650      	mov	r0, sl
 8027ba4:	4798      	blx	r3
 8027ba6:	f105 39ff 	add.w	r9, r5, #4294967295
 8027baa:	464d      	mov	r5, r9
 8027bac:	42bd      	cmp	r5, r7
 8027bae:	d028      	beq.n	8027c02 <_scanf_i+0x1d2>
 8027bb0:	6822      	ldr	r2, [r4, #0]
 8027bb2:	f012 0210 	ands.w	r2, r2, #16
 8027bb6:	d113      	bne.n	8027be0 <_scanf_i+0x1b0>
 8027bb8:	702a      	strb	r2, [r5, #0]
 8027bba:	6863      	ldr	r3, [r4, #4]
 8027bbc:	9e01      	ldr	r6, [sp, #4]
 8027bbe:	4639      	mov	r1, r7
 8027bc0:	4650      	mov	r0, sl
 8027bc2:	47b0      	blx	r6
 8027bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8027bc8:	6821      	ldr	r1, [r4, #0]
 8027bca:	1d1a      	adds	r2, r3, #4
 8027bcc:	f8c8 2000 	str.w	r2, [r8]
 8027bd0:	f011 0f20 	tst.w	r1, #32
 8027bd4:	681b      	ldr	r3, [r3, #0]
 8027bd6:	d00f      	beq.n	8027bf8 <_scanf_i+0x1c8>
 8027bd8:	6018      	str	r0, [r3, #0]
 8027bda:	68e3      	ldr	r3, [r4, #12]
 8027bdc:	3301      	adds	r3, #1
 8027bde:	60e3      	str	r3, [r4, #12]
 8027be0:	1bed      	subs	r5, r5, r7
 8027be2:	44ab      	add	fp, r5
 8027be4:	6925      	ldr	r5, [r4, #16]
 8027be6:	445d      	add	r5, fp
 8027be8:	6125      	str	r5, [r4, #16]
 8027bea:	2000      	movs	r0, #0
 8027bec:	b007      	add	sp, #28
 8027bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bf2:	f04f 0b00 	mov.w	fp, #0
 8027bf6:	e7ca      	b.n	8027b8e <_scanf_i+0x15e>
 8027bf8:	07ca      	lsls	r2, r1, #31
 8027bfa:	bf4c      	ite	mi
 8027bfc:	8018      	strhmi	r0, [r3, #0]
 8027bfe:	6018      	strpl	r0, [r3, #0]
 8027c00:	e7eb      	b.n	8027bda <_scanf_i+0x1aa>
 8027c02:	2001      	movs	r0, #1
 8027c04:	e7f2      	b.n	8027bec <_scanf_i+0x1bc>
 8027c06:	bf00      	nop
 8027c08:	0802d690 	.word	0x0802d690
 8027c0c:	08027ea5 	.word	0x08027ea5
 8027c10:	08024865 	.word	0x08024865
 8027c14:	08033e8a 	.word	0x08033e8a

08027c18 <_putc_r>:
 8027c18:	b570      	push	{r4, r5, r6, lr}
 8027c1a:	460d      	mov	r5, r1
 8027c1c:	4614      	mov	r4, r2
 8027c1e:	4606      	mov	r6, r0
 8027c20:	b118      	cbz	r0, 8027c2a <_putc_r+0x12>
 8027c22:	6983      	ldr	r3, [r0, #24]
 8027c24:	b90b      	cbnz	r3, 8027c2a <_putc_r+0x12>
 8027c26:	f7fe f953 	bl	8025ed0 <__sinit>
 8027c2a:	4b1c      	ldr	r3, [pc, #112]	; (8027c9c <_putc_r+0x84>)
 8027c2c:	429c      	cmp	r4, r3
 8027c2e:	d124      	bne.n	8027c7a <_putc_r+0x62>
 8027c30:	6874      	ldr	r4, [r6, #4]
 8027c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027c34:	07d8      	lsls	r0, r3, #31
 8027c36:	d405      	bmi.n	8027c44 <_putc_r+0x2c>
 8027c38:	89a3      	ldrh	r3, [r4, #12]
 8027c3a:	0599      	lsls	r1, r3, #22
 8027c3c:	d402      	bmi.n	8027c44 <_putc_r+0x2c>
 8027c3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027c40:	f7fe fdf8 	bl	8026834 <__retarget_lock_acquire_recursive>
 8027c44:	68a3      	ldr	r3, [r4, #8]
 8027c46:	3b01      	subs	r3, #1
 8027c48:	2b00      	cmp	r3, #0
 8027c4a:	60a3      	str	r3, [r4, #8]
 8027c4c:	da05      	bge.n	8027c5a <_putc_r+0x42>
 8027c4e:	69a2      	ldr	r2, [r4, #24]
 8027c50:	4293      	cmp	r3, r2
 8027c52:	db1c      	blt.n	8027c8e <_putc_r+0x76>
 8027c54:	b2eb      	uxtb	r3, r5
 8027c56:	2b0a      	cmp	r3, #10
 8027c58:	d019      	beq.n	8027c8e <_putc_r+0x76>
 8027c5a:	6823      	ldr	r3, [r4, #0]
 8027c5c:	1c5a      	adds	r2, r3, #1
 8027c5e:	6022      	str	r2, [r4, #0]
 8027c60:	701d      	strb	r5, [r3, #0]
 8027c62:	b2ed      	uxtb	r5, r5
 8027c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027c66:	07da      	lsls	r2, r3, #31
 8027c68:	d405      	bmi.n	8027c76 <_putc_r+0x5e>
 8027c6a:	89a3      	ldrh	r3, [r4, #12]
 8027c6c:	059b      	lsls	r3, r3, #22
 8027c6e:	d402      	bmi.n	8027c76 <_putc_r+0x5e>
 8027c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027c72:	f7fe fde1 	bl	8026838 <__retarget_lock_release_recursive>
 8027c76:	4628      	mov	r0, r5
 8027c78:	bd70      	pop	{r4, r5, r6, pc}
 8027c7a:	4b09      	ldr	r3, [pc, #36]	; (8027ca0 <_putc_r+0x88>)
 8027c7c:	429c      	cmp	r4, r3
 8027c7e:	d101      	bne.n	8027c84 <_putc_r+0x6c>
 8027c80:	68b4      	ldr	r4, [r6, #8]
 8027c82:	e7d6      	b.n	8027c32 <_putc_r+0x1a>
 8027c84:	4b07      	ldr	r3, [pc, #28]	; (8027ca4 <_putc_r+0x8c>)
 8027c86:	429c      	cmp	r4, r3
 8027c88:	bf08      	it	eq
 8027c8a:	68f4      	ldreq	r4, [r6, #12]
 8027c8c:	e7d1      	b.n	8027c32 <_putc_r+0x1a>
 8027c8e:	4629      	mov	r1, r5
 8027c90:	4622      	mov	r2, r4
 8027c92:	4630      	mov	r0, r6
 8027c94:	f7fd f862 	bl	8024d5c <__swbuf_r>
 8027c98:	4605      	mov	r5, r0
 8027c9a:	e7e3      	b.n	8027c64 <_putc_r+0x4c>
 8027c9c:	08033bf8 	.word	0x08033bf8
 8027ca0:	08033c18 	.word	0x08033c18
 8027ca4:	08033bd8 	.word	0x08033bd8

08027ca8 <_read_r>:
 8027ca8:	b538      	push	{r3, r4, r5, lr}
 8027caa:	4d07      	ldr	r5, [pc, #28]	; (8027cc8 <_read_r+0x20>)
 8027cac:	4604      	mov	r4, r0
 8027cae:	4608      	mov	r0, r1
 8027cb0:	4611      	mov	r1, r2
 8027cb2:	2200      	movs	r2, #0
 8027cb4:	602a      	str	r2, [r5, #0]
 8027cb6:	461a      	mov	r2, r3
 8027cb8:	f7dc fa05 	bl	80040c6 <_read>
 8027cbc:	1c43      	adds	r3, r0, #1
 8027cbe:	d102      	bne.n	8027cc6 <_read_r+0x1e>
 8027cc0:	682b      	ldr	r3, [r5, #0]
 8027cc2:	b103      	cbz	r3, 8027cc6 <_read_r+0x1e>
 8027cc4:	6023      	str	r3, [r4, #0]
 8027cc6:	bd38      	pop	{r3, r4, r5, pc}
 8027cc8:	20001a24 	.word	0x20001a24

08027ccc <__srget_r>:
 8027ccc:	b538      	push	{r3, r4, r5, lr}
 8027cce:	460c      	mov	r4, r1
 8027cd0:	4605      	mov	r5, r0
 8027cd2:	b118      	cbz	r0, 8027cdc <__srget_r+0x10>
 8027cd4:	6983      	ldr	r3, [r0, #24]
 8027cd6:	b90b      	cbnz	r3, 8027cdc <__srget_r+0x10>
 8027cd8:	f7fe f8fa 	bl	8025ed0 <__sinit>
 8027cdc:	4b0e      	ldr	r3, [pc, #56]	; (8027d18 <__srget_r+0x4c>)
 8027cde:	429c      	cmp	r4, r3
 8027ce0:	d10d      	bne.n	8027cfe <__srget_r+0x32>
 8027ce2:	686c      	ldr	r4, [r5, #4]
 8027ce4:	4621      	mov	r1, r4
 8027ce6:	4628      	mov	r0, r5
 8027ce8:	f000 f976 	bl	8027fd8 <__srefill_r>
 8027cec:	b988      	cbnz	r0, 8027d12 <__srget_r+0x46>
 8027cee:	6863      	ldr	r3, [r4, #4]
 8027cf0:	3b01      	subs	r3, #1
 8027cf2:	6063      	str	r3, [r4, #4]
 8027cf4:	6823      	ldr	r3, [r4, #0]
 8027cf6:	1c5a      	adds	r2, r3, #1
 8027cf8:	6022      	str	r2, [r4, #0]
 8027cfa:	7818      	ldrb	r0, [r3, #0]
 8027cfc:	bd38      	pop	{r3, r4, r5, pc}
 8027cfe:	4b07      	ldr	r3, [pc, #28]	; (8027d1c <__srget_r+0x50>)
 8027d00:	429c      	cmp	r4, r3
 8027d02:	d101      	bne.n	8027d08 <__srget_r+0x3c>
 8027d04:	68ac      	ldr	r4, [r5, #8]
 8027d06:	e7ed      	b.n	8027ce4 <__srget_r+0x18>
 8027d08:	4b05      	ldr	r3, [pc, #20]	; (8027d20 <__srget_r+0x54>)
 8027d0a:	429c      	cmp	r4, r3
 8027d0c:	bf08      	it	eq
 8027d0e:	68ec      	ldreq	r4, [r5, #12]
 8027d10:	e7e8      	b.n	8027ce4 <__srget_r+0x18>
 8027d12:	f04f 30ff 	mov.w	r0, #4294967295
 8027d16:	e7f1      	b.n	8027cfc <__srget_r+0x30>
 8027d18:	08033bf8 	.word	0x08033bf8
 8027d1c:	08033c18 	.word	0x08033c18
 8027d20:	08033bd8 	.word	0x08033bd8
 8027d24:	00000000 	.word	0x00000000

08027d28 <nan>:
 8027d28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8027d30 <nan+0x8>
 8027d2c:	4770      	bx	lr
 8027d2e:	bf00      	nop
 8027d30:	00000000 	.word	0x00000000
 8027d34:	7ff80000 	.word	0x7ff80000

08027d38 <__sccl>:
 8027d38:	b570      	push	{r4, r5, r6, lr}
 8027d3a:	780b      	ldrb	r3, [r1, #0]
 8027d3c:	4604      	mov	r4, r0
 8027d3e:	2b5e      	cmp	r3, #94	; 0x5e
 8027d40:	bf0b      	itete	eq
 8027d42:	784b      	ldrbeq	r3, [r1, #1]
 8027d44:	1c48      	addne	r0, r1, #1
 8027d46:	1c88      	addeq	r0, r1, #2
 8027d48:	2200      	movne	r2, #0
 8027d4a:	bf08      	it	eq
 8027d4c:	2201      	moveq	r2, #1
 8027d4e:	1e61      	subs	r1, r4, #1
 8027d50:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8027d54:	f801 2f01 	strb.w	r2, [r1, #1]!
 8027d58:	42a9      	cmp	r1, r5
 8027d5a:	d1fb      	bne.n	8027d54 <__sccl+0x1c>
 8027d5c:	b90b      	cbnz	r3, 8027d62 <__sccl+0x2a>
 8027d5e:	3801      	subs	r0, #1
 8027d60:	bd70      	pop	{r4, r5, r6, pc}
 8027d62:	f082 0101 	eor.w	r1, r2, #1
 8027d66:	54e1      	strb	r1, [r4, r3]
 8027d68:	1c42      	adds	r2, r0, #1
 8027d6a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8027d6e:	2d2d      	cmp	r5, #45	; 0x2d
 8027d70:	f102 36ff 	add.w	r6, r2, #4294967295
 8027d74:	4610      	mov	r0, r2
 8027d76:	d006      	beq.n	8027d86 <__sccl+0x4e>
 8027d78:	2d5d      	cmp	r5, #93	; 0x5d
 8027d7a:	d0f1      	beq.n	8027d60 <__sccl+0x28>
 8027d7c:	b90d      	cbnz	r5, 8027d82 <__sccl+0x4a>
 8027d7e:	4630      	mov	r0, r6
 8027d80:	e7ee      	b.n	8027d60 <__sccl+0x28>
 8027d82:	462b      	mov	r3, r5
 8027d84:	e7ef      	b.n	8027d66 <__sccl+0x2e>
 8027d86:	7816      	ldrb	r6, [r2, #0]
 8027d88:	2e5d      	cmp	r6, #93	; 0x5d
 8027d8a:	d0fa      	beq.n	8027d82 <__sccl+0x4a>
 8027d8c:	42b3      	cmp	r3, r6
 8027d8e:	dcf8      	bgt.n	8027d82 <__sccl+0x4a>
 8027d90:	4618      	mov	r0, r3
 8027d92:	3001      	adds	r0, #1
 8027d94:	4286      	cmp	r6, r0
 8027d96:	5421      	strb	r1, [r4, r0]
 8027d98:	dcfb      	bgt.n	8027d92 <__sccl+0x5a>
 8027d9a:	43d8      	mvns	r0, r3
 8027d9c:	4430      	add	r0, r6
 8027d9e:	1c5d      	adds	r5, r3, #1
 8027da0:	42b3      	cmp	r3, r6
 8027da2:	bfa8      	it	ge
 8027da4:	2000      	movge	r0, #0
 8027da6:	182b      	adds	r3, r5, r0
 8027da8:	3202      	adds	r2, #2
 8027daa:	e7de      	b.n	8027d6a <__sccl+0x32>

08027dac <_strtoul_l.isra.0>:
 8027dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027db0:	4e3b      	ldr	r6, [pc, #236]	; (8027ea0 <_strtoul_l.isra.0+0xf4>)
 8027db2:	4686      	mov	lr, r0
 8027db4:	468c      	mov	ip, r1
 8027db6:	4660      	mov	r0, ip
 8027db8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8027dbc:	5da5      	ldrb	r5, [r4, r6]
 8027dbe:	f015 0508 	ands.w	r5, r5, #8
 8027dc2:	d1f8      	bne.n	8027db6 <_strtoul_l.isra.0+0xa>
 8027dc4:	2c2d      	cmp	r4, #45	; 0x2d
 8027dc6:	d134      	bne.n	8027e32 <_strtoul_l.isra.0+0x86>
 8027dc8:	f89c 4000 	ldrb.w	r4, [ip]
 8027dcc:	f04f 0801 	mov.w	r8, #1
 8027dd0:	f100 0c02 	add.w	ip, r0, #2
 8027dd4:	2b00      	cmp	r3, #0
 8027dd6:	d05e      	beq.n	8027e96 <_strtoul_l.isra.0+0xea>
 8027dd8:	2b10      	cmp	r3, #16
 8027dda:	d10c      	bne.n	8027df6 <_strtoul_l.isra.0+0x4a>
 8027ddc:	2c30      	cmp	r4, #48	; 0x30
 8027dde:	d10a      	bne.n	8027df6 <_strtoul_l.isra.0+0x4a>
 8027de0:	f89c 0000 	ldrb.w	r0, [ip]
 8027de4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027de8:	2858      	cmp	r0, #88	; 0x58
 8027dea:	d14f      	bne.n	8027e8c <_strtoul_l.isra.0+0xe0>
 8027dec:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8027df0:	2310      	movs	r3, #16
 8027df2:	f10c 0c02 	add.w	ip, ip, #2
 8027df6:	f04f 37ff 	mov.w	r7, #4294967295
 8027dfa:	2500      	movs	r5, #0
 8027dfc:	fbb7 f7f3 	udiv	r7, r7, r3
 8027e00:	fb03 f907 	mul.w	r9, r3, r7
 8027e04:	ea6f 0909 	mvn.w	r9, r9
 8027e08:	4628      	mov	r0, r5
 8027e0a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8027e0e:	2e09      	cmp	r6, #9
 8027e10:	d818      	bhi.n	8027e44 <_strtoul_l.isra.0+0x98>
 8027e12:	4634      	mov	r4, r6
 8027e14:	42a3      	cmp	r3, r4
 8027e16:	dd24      	ble.n	8027e62 <_strtoul_l.isra.0+0xb6>
 8027e18:	2d00      	cmp	r5, #0
 8027e1a:	db1f      	blt.n	8027e5c <_strtoul_l.isra.0+0xb0>
 8027e1c:	4287      	cmp	r7, r0
 8027e1e:	d31d      	bcc.n	8027e5c <_strtoul_l.isra.0+0xb0>
 8027e20:	d101      	bne.n	8027e26 <_strtoul_l.isra.0+0x7a>
 8027e22:	45a1      	cmp	r9, r4
 8027e24:	db1a      	blt.n	8027e5c <_strtoul_l.isra.0+0xb0>
 8027e26:	fb00 4003 	mla	r0, r0, r3, r4
 8027e2a:	2501      	movs	r5, #1
 8027e2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8027e30:	e7eb      	b.n	8027e0a <_strtoul_l.isra.0+0x5e>
 8027e32:	2c2b      	cmp	r4, #43	; 0x2b
 8027e34:	bf08      	it	eq
 8027e36:	f89c 4000 	ldrbeq.w	r4, [ip]
 8027e3a:	46a8      	mov	r8, r5
 8027e3c:	bf08      	it	eq
 8027e3e:	f100 0c02 	addeq.w	ip, r0, #2
 8027e42:	e7c7      	b.n	8027dd4 <_strtoul_l.isra.0+0x28>
 8027e44:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8027e48:	2e19      	cmp	r6, #25
 8027e4a:	d801      	bhi.n	8027e50 <_strtoul_l.isra.0+0xa4>
 8027e4c:	3c37      	subs	r4, #55	; 0x37
 8027e4e:	e7e1      	b.n	8027e14 <_strtoul_l.isra.0+0x68>
 8027e50:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8027e54:	2e19      	cmp	r6, #25
 8027e56:	d804      	bhi.n	8027e62 <_strtoul_l.isra.0+0xb6>
 8027e58:	3c57      	subs	r4, #87	; 0x57
 8027e5a:	e7db      	b.n	8027e14 <_strtoul_l.isra.0+0x68>
 8027e5c:	f04f 35ff 	mov.w	r5, #4294967295
 8027e60:	e7e4      	b.n	8027e2c <_strtoul_l.isra.0+0x80>
 8027e62:	2d00      	cmp	r5, #0
 8027e64:	da07      	bge.n	8027e76 <_strtoul_l.isra.0+0xca>
 8027e66:	2322      	movs	r3, #34	; 0x22
 8027e68:	f8ce 3000 	str.w	r3, [lr]
 8027e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8027e70:	b942      	cbnz	r2, 8027e84 <_strtoul_l.isra.0+0xd8>
 8027e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027e76:	f1b8 0f00 	cmp.w	r8, #0
 8027e7a:	d000      	beq.n	8027e7e <_strtoul_l.isra.0+0xd2>
 8027e7c:	4240      	negs	r0, r0
 8027e7e:	2a00      	cmp	r2, #0
 8027e80:	d0f7      	beq.n	8027e72 <_strtoul_l.isra.0+0xc6>
 8027e82:	b10d      	cbz	r5, 8027e88 <_strtoul_l.isra.0+0xdc>
 8027e84:	f10c 31ff 	add.w	r1, ip, #4294967295
 8027e88:	6011      	str	r1, [r2, #0]
 8027e8a:	e7f2      	b.n	8027e72 <_strtoul_l.isra.0+0xc6>
 8027e8c:	2430      	movs	r4, #48	; 0x30
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	d1b1      	bne.n	8027df6 <_strtoul_l.isra.0+0x4a>
 8027e92:	2308      	movs	r3, #8
 8027e94:	e7af      	b.n	8027df6 <_strtoul_l.isra.0+0x4a>
 8027e96:	2c30      	cmp	r4, #48	; 0x30
 8027e98:	d0a2      	beq.n	8027de0 <_strtoul_l.isra.0+0x34>
 8027e9a:	230a      	movs	r3, #10
 8027e9c:	e7ab      	b.n	8027df6 <_strtoul_l.isra.0+0x4a>
 8027e9e:	bf00      	nop
 8027ea0:	080337ac 	.word	0x080337ac

08027ea4 <_strtoul_r>:
 8027ea4:	f7ff bf82 	b.w	8027dac <_strtoul_l.isra.0>

08027ea8 <strtoul>:
 8027ea8:	4613      	mov	r3, r2
 8027eaa:	460a      	mov	r2, r1
 8027eac:	4601      	mov	r1, r0
 8027eae:	4802      	ldr	r0, [pc, #8]	; (8027eb8 <strtoul+0x10>)
 8027eb0:	6800      	ldr	r0, [r0, #0]
 8027eb2:	f7ff bf7b 	b.w	8027dac <_strtoul_l.isra.0>
 8027eb6:	bf00      	nop
 8027eb8:	200005e4 	.word	0x200005e4

08027ebc <__submore>:
 8027ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027ec0:	460c      	mov	r4, r1
 8027ec2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8027ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027ec8:	4299      	cmp	r1, r3
 8027eca:	d11d      	bne.n	8027f08 <__submore+0x4c>
 8027ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8027ed0:	f7fa fd98 	bl	8022a04 <_malloc_r>
 8027ed4:	b918      	cbnz	r0, 8027ede <__submore+0x22>
 8027ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8027eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027ee2:	63a3      	str	r3, [r4, #56]	; 0x38
 8027ee4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8027eea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8027eee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8027ef2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8027ef6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8027efa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8027efe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8027f02:	6020      	str	r0, [r4, #0]
 8027f04:	2000      	movs	r0, #0
 8027f06:	e7e8      	b.n	8027eda <__submore+0x1e>
 8027f08:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8027f0a:	0077      	lsls	r7, r6, #1
 8027f0c:	463a      	mov	r2, r7
 8027f0e:	f7ff f9e4 	bl	80272da <_realloc_r>
 8027f12:	4605      	mov	r5, r0
 8027f14:	2800      	cmp	r0, #0
 8027f16:	d0de      	beq.n	8027ed6 <__submore+0x1a>
 8027f18:	eb00 0806 	add.w	r8, r0, r6
 8027f1c:	4601      	mov	r1, r0
 8027f1e:	4632      	mov	r2, r6
 8027f20:	4640      	mov	r0, r8
 8027f22:	f7fa fa61 	bl	80223e8 <memcpy>
 8027f26:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8027f2a:	f8c4 8000 	str.w	r8, [r4]
 8027f2e:	e7e9      	b.n	8027f04 <__submore+0x48>

08027f30 <__ascii_wctomb>:
 8027f30:	b149      	cbz	r1, 8027f46 <__ascii_wctomb+0x16>
 8027f32:	2aff      	cmp	r2, #255	; 0xff
 8027f34:	bf85      	ittet	hi
 8027f36:	238a      	movhi	r3, #138	; 0x8a
 8027f38:	6003      	strhi	r3, [r0, #0]
 8027f3a:	700a      	strbls	r2, [r1, #0]
 8027f3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8027f40:	bf98      	it	ls
 8027f42:	2001      	movls	r0, #1
 8027f44:	4770      	bx	lr
 8027f46:	4608      	mov	r0, r1
 8027f48:	4770      	bx	lr

08027f4a <abort>:
 8027f4a:	b508      	push	{r3, lr}
 8027f4c:	2006      	movs	r0, #6
 8027f4e:	f000 f8f5 	bl	802813c <raise>
 8027f52:	2001      	movs	r0, #1
 8027f54:	f7dc f8b1 	bl	80040ba <_exit>

08027f58 <__env_lock>:
 8027f58:	4801      	ldr	r0, [pc, #4]	; (8027f60 <__env_lock+0x8>)
 8027f5a:	f7fe bc6b 	b.w	8026834 <__retarget_lock_acquire_recursive>
 8027f5e:	bf00      	nop
 8027f60:	20001a1a 	.word	0x20001a1a

08027f64 <__env_unlock>:
 8027f64:	4801      	ldr	r0, [pc, #4]	; (8027f6c <__env_unlock+0x8>)
 8027f66:	f7fe bc67 	b.w	8026838 <__retarget_lock_release_recursive>
 8027f6a:	bf00      	nop
 8027f6c:	20001a1a 	.word	0x20001a1a

08027f70 <_fstat_r>:
 8027f70:	b538      	push	{r3, r4, r5, lr}
 8027f72:	4d07      	ldr	r5, [pc, #28]	; (8027f90 <_fstat_r+0x20>)
 8027f74:	2300      	movs	r3, #0
 8027f76:	4604      	mov	r4, r0
 8027f78:	4608      	mov	r0, r1
 8027f7a:	4611      	mov	r1, r2
 8027f7c:	602b      	str	r3, [r5, #0]
 8027f7e:	f7dc f8d4 	bl	800412a <_fstat>
 8027f82:	1c43      	adds	r3, r0, #1
 8027f84:	d102      	bne.n	8027f8c <_fstat_r+0x1c>
 8027f86:	682b      	ldr	r3, [r5, #0]
 8027f88:	b103      	cbz	r3, 8027f8c <_fstat_r+0x1c>
 8027f8a:	6023      	str	r3, [r4, #0]
 8027f8c:	bd38      	pop	{r3, r4, r5, pc}
 8027f8e:	bf00      	nop
 8027f90:	20001a24 	.word	0x20001a24

08027f94 <_isatty_r>:
 8027f94:	b538      	push	{r3, r4, r5, lr}
 8027f96:	4d06      	ldr	r5, [pc, #24]	; (8027fb0 <_isatty_r+0x1c>)
 8027f98:	2300      	movs	r3, #0
 8027f9a:	4604      	mov	r4, r0
 8027f9c:	4608      	mov	r0, r1
 8027f9e:	602b      	str	r3, [r5, #0]
 8027fa0:	f7dc f8c8 	bl	8004134 <_isatty>
 8027fa4:	1c43      	adds	r3, r0, #1
 8027fa6:	d102      	bne.n	8027fae <_isatty_r+0x1a>
 8027fa8:	682b      	ldr	r3, [r5, #0]
 8027faa:	b103      	cbz	r3, 8027fae <_isatty_r+0x1a>
 8027fac:	6023      	str	r3, [r4, #0]
 8027fae:	bd38      	pop	{r3, r4, r5, pc}
 8027fb0:	20001a24 	.word	0x20001a24

08027fb4 <_malloc_usable_size_r>:
 8027fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027fb8:	1f18      	subs	r0, r3, #4
 8027fba:	2b00      	cmp	r3, #0
 8027fbc:	bfbc      	itt	lt
 8027fbe:	580b      	ldrlt	r3, [r1, r0]
 8027fc0:	18c0      	addlt	r0, r0, r3
 8027fc2:	4770      	bx	lr

08027fc4 <lflush>:
 8027fc4:	8983      	ldrh	r3, [r0, #12]
 8027fc6:	f003 0309 	and.w	r3, r3, #9
 8027fca:	2b09      	cmp	r3, #9
 8027fcc:	d101      	bne.n	8027fd2 <lflush+0xe>
 8027fce:	f7fd bf15 	b.w	8025dfc <fflush>
 8027fd2:	2000      	movs	r0, #0
 8027fd4:	4770      	bx	lr
	...

08027fd8 <__srefill_r>:
 8027fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027fda:	460c      	mov	r4, r1
 8027fdc:	4605      	mov	r5, r0
 8027fde:	b118      	cbz	r0, 8027fe8 <__srefill_r+0x10>
 8027fe0:	6983      	ldr	r3, [r0, #24]
 8027fe2:	b90b      	cbnz	r3, 8027fe8 <__srefill_r+0x10>
 8027fe4:	f7fd ff74 	bl	8025ed0 <__sinit>
 8027fe8:	4b3b      	ldr	r3, [pc, #236]	; (80280d8 <__srefill_r+0x100>)
 8027fea:	429c      	cmp	r4, r3
 8027fec:	d10a      	bne.n	8028004 <__srefill_r+0x2c>
 8027fee:	686c      	ldr	r4, [r5, #4]
 8027ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8027ff4:	2300      	movs	r3, #0
 8027ff6:	6063      	str	r3, [r4, #4]
 8027ff8:	89a3      	ldrh	r3, [r4, #12]
 8027ffa:	069e      	lsls	r6, r3, #26
 8027ffc:	d50c      	bpl.n	8028018 <__srefill_r+0x40>
 8027ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8028002:	e066      	b.n	80280d2 <__srefill_r+0xfa>
 8028004:	4b35      	ldr	r3, [pc, #212]	; (80280dc <__srefill_r+0x104>)
 8028006:	429c      	cmp	r4, r3
 8028008:	d101      	bne.n	802800e <__srefill_r+0x36>
 802800a:	68ac      	ldr	r4, [r5, #8]
 802800c:	e7f0      	b.n	8027ff0 <__srefill_r+0x18>
 802800e:	4b34      	ldr	r3, [pc, #208]	; (80280e0 <__srefill_r+0x108>)
 8028010:	429c      	cmp	r4, r3
 8028012:	bf08      	it	eq
 8028014:	68ec      	ldreq	r4, [r5, #12]
 8028016:	e7eb      	b.n	8027ff0 <__srefill_r+0x18>
 8028018:	0758      	lsls	r0, r3, #29
 802801a:	d448      	bmi.n	80280ae <__srefill_r+0xd6>
 802801c:	06d9      	lsls	r1, r3, #27
 802801e:	d405      	bmi.n	802802c <__srefill_r+0x54>
 8028020:	2309      	movs	r3, #9
 8028022:	602b      	str	r3, [r5, #0]
 8028024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8028028:	81a3      	strh	r3, [r4, #12]
 802802a:	e7e8      	b.n	8027ffe <__srefill_r+0x26>
 802802c:	071a      	lsls	r2, r3, #28
 802802e:	d50b      	bpl.n	8028048 <__srefill_r+0x70>
 8028030:	4621      	mov	r1, r4
 8028032:	4628      	mov	r0, r5
 8028034:	f7fd fea6 	bl	8025d84 <_fflush_r>
 8028038:	2800      	cmp	r0, #0
 802803a:	d1e0      	bne.n	8027ffe <__srefill_r+0x26>
 802803c:	89a3      	ldrh	r3, [r4, #12]
 802803e:	60a0      	str	r0, [r4, #8]
 8028040:	f023 0308 	bic.w	r3, r3, #8
 8028044:	81a3      	strh	r3, [r4, #12]
 8028046:	61a0      	str	r0, [r4, #24]
 8028048:	89a3      	ldrh	r3, [r4, #12]
 802804a:	f043 0304 	orr.w	r3, r3, #4
 802804e:	81a3      	strh	r3, [r4, #12]
 8028050:	6923      	ldr	r3, [r4, #16]
 8028052:	b91b      	cbnz	r3, 802805c <__srefill_r+0x84>
 8028054:	4621      	mov	r1, r4
 8028056:	4628      	mov	r0, r5
 8028058:	f7fe fc26 	bl	80268a8 <__smakebuf_r>
 802805c:	89a6      	ldrh	r6, [r4, #12]
 802805e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8028062:	07b3      	lsls	r3, r6, #30
 8028064:	d00f      	beq.n	8028086 <__srefill_r+0xae>
 8028066:	2301      	movs	r3, #1
 8028068:	81a3      	strh	r3, [r4, #12]
 802806a:	4b1e      	ldr	r3, [pc, #120]	; (80280e4 <__srefill_r+0x10c>)
 802806c:	491e      	ldr	r1, [pc, #120]	; (80280e8 <__srefill_r+0x110>)
 802806e:	6818      	ldr	r0, [r3, #0]
 8028070:	f006 0609 	and.w	r6, r6, #9
 8028074:	f7fd ffaa 	bl	8025fcc <_fwalk>
 8028078:	2e09      	cmp	r6, #9
 802807a:	81a7      	strh	r7, [r4, #12]
 802807c:	d103      	bne.n	8028086 <__srefill_r+0xae>
 802807e:	4621      	mov	r1, r4
 8028080:	4628      	mov	r0, r5
 8028082:	f7fd fdf9 	bl	8025c78 <__sflush_r>
 8028086:	6922      	ldr	r2, [r4, #16]
 8028088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802808a:	6963      	ldr	r3, [r4, #20]
 802808c:	6a21      	ldr	r1, [r4, #32]
 802808e:	6022      	str	r2, [r4, #0]
 8028090:	4628      	mov	r0, r5
 8028092:	47b0      	blx	r6
 8028094:	2800      	cmp	r0, #0
 8028096:	6060      	str	r0, [r4, #4]
 8028098:	dc1c      	bgt.n	80280d4 <__srefill_r+0xfc>
 802809a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802809e:	bf17      	itett	ne
 80280a0:	2200      	movne	r2, #0
 80280a2:	f043 0320 	orreq.w	r3, r3, #32
 80280a6:	6062      	strne	r2, [r4, #4]
 80280a8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80280ac:	e7bc      	b.n	8028028 <__srefill_r+0x50>
 80280ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80280b0:	2900      	cmp	r1, #0
 80280b2:	d0cd      	beq.n	8028050 <__srefill_r+0x78>
 80280b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80280b8:	4299      	cmp	r1, r3
 80280ba:	d002      	beq.n	80280c2 <__srefill_r+0xea>
 80280bc:	4628      	mov	r0, r5
 80280be:	f7fa fc51 	bl	8022964 <_free_r>
 80280c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80280c4:	6063      	str	r3, [r4, #4]
 80280c6:	2000      	movs	r0, #0
 80280c8:	6360      	str	r0, [r4, #52]	; 0x34
 80280ca:	2b00      	cmp	r3, #0
 80280cc:	d0c0      	beq.n	8028050 <__srefill_r+0x78>
 80280ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80280d0:	6023      	str	r3, [r4, #0]
 80280d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80280d4:	2000      	movs	r0, #0
 80280d6:	e7fc      	b.n	80280d2 <__srefill_r+0xfa>
 80280d8:	08033bf8 	.word	0x08033bf8
 80280dc:	08033c18 	.word	0x08033c18
 80280e0:	08033bd8 	.word	0x08033bd8
 80280e4:	08033924 	.word	0x08033924
 80280e8:	08027fc5 	.word	0x08027fc5

080280ec <_raise_r>:
 80280ec:	291f      	cmp	r1, #31
 80280ee:	b538      	push	{r3, r4, r5, lr}
 80280f0:	4604      	mov	r4, r0
 80280f2:	460d      	mov	r5, r1
 80280f4:	d904      	bls.n	8028100 <_raise_r+0x14>
 80280f6:	2316      	movs	r3, #22
 80280f8:	6003      	str	r3, [r0, #0]
 80280fa:	f04f 30ff 	mov.w	r0, #4294967295
 80280fe:	bd38      	pop	{r3, r4, r5, pc}
 8028100:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028102:	b112      	cbz	r2, 802810a <_raise_r+0x1e>
 8028104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028108:	b94b      	cbnz	r3, 802811e <_raise_r+0x32>
 802810a:	4620      	mov	r0, r4
 802810c:	f000 f830 	bl	8028170 <_getpid_r>
 8028110:	462a      	mov	r2, r5
 8028112:	4601      	mov	r1, r0
 8028114:	4620      	mov	r0, r4
 8028116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802811a:	f000 b817 	b.w	802814c <_kill_r>
 802811e:	2b01      	cmp	r3, #1
 8028120:	d00a      	beq.n	8028138 <_raise_r+0x4c>
 8028122:	1c59      	adds	r1, r3, #1
 8028124:	d103      	bne.n	802812e <_raise_r+0x42>
 8028126:	2316      	movs	r3, #22
 8028128:	6003      	str	r3, [r0, #0]
 802812a:	2001      	movs	r0, #1
 802812c:	e7e7      	b.n	80280fe <_raise_r+0x12>
 802812e:	2400      	movs	r4, #0
 8028130:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028134:	4628      	mov	r0, r5
 8028136:	4798      	blx	r3
 8028138:	2000      	movs	r0, #0
 802813a:	e7e0      	b.n	80280fe <_raise_r+0x12>

0802813c <raise>:
 802813c:	4b02      	ldr	r3, [pc, #8]	; (8028148 <raise+0xc>)
 802813e:	4601      	mov	r1, r0
 8028140:	6818      	ldr	r0, [r3, #0]
 8028142:	f7ff bfd3 	b.w	80280ec <_raise_r>
 8028146:	bf00      	nop
 8028148:	200005e4 	.word	0x200005e4

0802814c <_kill_r>:
 802814c:	b538      	push	{r3, r4, r5, lr}
 802814e:	4d07      	ldr	r5, [pc, #28]	; (802816c <_kill_r+0x20>)
 8028150:	2300      	movs	r3, #0
 8028152:	4604      	mov	r4, r0
 8028154:	4608      	mov	r0, r1
 8028156:	4611      	mov	r1, r2
 8028158:	602b      	str	r3, [r5, #0]
 802815a:	f7db ffa6 	bl	80040aa <_kill>
 802815e:	1c43      	adds	r3, r0, #1
 8028160:	d102      	bne.n	8028168 <_kill_r+0x1c>
 8028162:	682b      	ldr	r3, [r5, #0]
 8028164:	b103      	cbz	r3, 8028168 <_kill_r+0x1c>
 8028166:	6023      	str	r3, [r4, #0]
 8028168:	bd38      	pop	{r3, r4, r5, pc}
 802816a:	bf00      	nop
 802816c:	20001a24 	.word	0x20001a24

08028170 <_getpid_r>:
 8028170:	f7db bf99 	b.w	80040a6 <_getpid>

08028174 <_init>:
 8028174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028176:	bf00      	nop
 8028178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802817a:	bc08      	pop	{r3}
 802817c:	469e      	mov	lr, r3
 802817e:	4770      	bx	lr

08028180 <_fini>:
 8028180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028182:	bf00      	nop
 8028184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028186:	bc08      	pop	{r3}
 8028188:	469e      	mov	lr, r3
 802818a:	4770      	bx	lr
 802818c:	0000      	movs	r0, r0
	...
